/*
 * frmDesigner.java
 *
 * Created on July 6, 2007, 11:24 AM
 */

package TReportWriter;

/**
 *
 * @author  root
 */
import javax.swing.*;
import java.util.HashMap;
import java.util.Iterator;
import java.io.File;
import java.awt.*;
import java.sql.Connection;

public class frmDesigner extends javax.swing.JApplet {
    
    public static int GraphicRatio=10;
    public static final int StateIdle=0;
    public static final int StateNewTextField=1;
    public static final int StateEditTextField=2;
    public static final int StateRemoveTextField=3;
    public static final int StateNewDBField=4;
    public static final int StateEditDBField=5;
    public static final int StateRemoveDBField=6;
    
    public static final int ActionCopy=1;
    public static final int ActionCut=2;
    public static final int ActionNone=0;
    
    private int CurrentState=StateIdle;
    
    private TReport objTReport;
    private TReportEngine objEngine=new TReportEngine();
    private JFrame aDialog;
    
    //Band Containers
    private HashMap bandContainers = new HashMap();
    
    private boolean FileOpen=false;
    
    private HashMap ClipBoard=new HashMap();
    
    private int ClipBoardAction=ActionNone;
    
    private int LastElementX=0;
    private int LastElementY=0;
    private int LastElementWidth=0;
    
    
    private boolean IsResizing=false;
    private int ResizeBandIndex=0;
    private int LastYPosition=0;
    
    private JPanel dragPanel=new JPanel();
    
    
    /** Initializes the applet frmDesigner */
    public void init() {
        initComponents();
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        popupEdit = new javax.swing.JPopupMenu();
        mnupCut = new javax.swing.JMenuItem();
        mnupCopy = new javax.swing.JMenuItem();
        mnupPaste = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        mnupReportProperties = new javax.swing.JMenuItem();
        mnupGroups = new javax.swing.JMenuItem();
        mnupBands = new javax.swing.JMenuItem();
        mnupVariables = new javax.swing.JMenuItem();
        popupElement = new javax.swing.JPopupMenu();
        mnuProperties = new javax.swing.JMenuItem();
        mnueCut = new javax.swing.JMenuItem();
        mnueCopy = new javax.swing.JMenuItem();
        mnuePaste = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        mnueAlignLeft = new javax.swing.JMenuItem();
        mnueAlignRight = new javax.swing.JMenuItem();
        mnueAlignTop = new javax.swing.JMenuItem();
        mnueAlignBottom = new javax.swing.JMenuItem();
        ToolBar = new javax.swing.JToolBar();
        jPanel1 = new javax.swing.JPanel();
        cmdDBField = new javax.swing.JButton();
        cmdTextField = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cmbZoom = new javax.swing.JComboBox();
        cmdOpen = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdCut = new javax.swing.JButton();
        cmdCopy = new javax.swing.JButton();
        cmdPaste = new javax.swing.JButton();
        cmdIdle = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        MainPanel = new javax.swing.JPanel();
        PageContainer = new javax.swing.JPanel();
        HScroll = new javax.swing.JScrollBar();
        VScroll = new javax.swing.JScrollBar();
        TopScale = new javax.swing.JPanel();
        SideScale = new javax.swing.JPanel();
        PagePanel = new javax.swing.JPanel();
        MenuBar = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuNewReport = new javax.swing.JMenuItem();
        mnuOpenReport = new javax.swing.JMenuItem();
        mnuSaveReport = new javax.swing.JMenuItem();
        mnuClose = new javax.swing.JMenuItem();
        mnuEdit = new javax.swing.JMenu();
        mnuCut = new javax.swing.JMenuItem();
        mnuCopy = new javax.swing.JMenuItem();
        mnuPaste = new javax.swing.JMenuItem();
        mnuSeperator = new javax.swing.JSeparator();
        mnuReportProperties = new javax.swing.JMenuItem();
        mnuGroups = new javax.swing.JMenuItem();
        mnuBand = new javax.swing.JMenuItem();
        mnuVariables = new javax.swing.JMenuItem();
        mnuParameters = new javax.swing.JMenuItem();
        mnuData = new javax.swing.JMenu();
        mnuReportQuery = new javax.swing.JMenuItem();
        mnuConnection = new javax.swing.JMenuItem();

        mnupCut.setText("Cut");
        mnupCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnupCutActionPerformed(evt);
            }
        });

        popupEdit.add(mnupCut);

        mnupCopy.setText("Copy");
        mnupCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnupCopyActionPerformed(evt);
            }
        });

        popupEdit.add(mnupCopy);

        mnupPaste.setText("Paste");
        mnupPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnupPasteActionPerformed(evt);
            }
        });

        popupEdit.add(mnupPaste);

        popupEdit.add(jSeparator1);

        mnupReportProperties.setText("Report Properties");
        mnupReportProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnupReportPropertiesActionPerformed(evt);
            }
        });

        popupEdit.add(mnupReportProperties);

        mnupGroups.setText("Report Groups");
        mnupGroups.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnupGroupsActionPerformed(evt);
            }
        });

        popupEdit.add(mnupGroups);

        mnupBands.setText("Band Properties");
        mnupBands.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnupBandsActionPerformed(evt);
            }
        });

        popupEdit.add(mnupBands);

        mnupVariables.setText("Variables");
        mnupVariables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnupVariablesActionPerformed(evt);
            }
        });

        popupEdit.add(mnupVariables);

        mnuProperties.setText("Properties");
        mnuProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPropertiesActionPerformed(evt);
            }
        });

        popupElement.add(mnuProperties);

        mnueCut.setText("Cut");
        mnueCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnueCutActionPerformed(evt);
            }
        });

        popupElement.add(mnueCut);

        mnueCopy.setText("Copy");
        mnueCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnueCopyActionPerformed(evt);
            }
        });

        popupElement.add(mnueCopy);

        mnuePaste.setText("Paste");
        mnuePaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuePasteActionPerformed(evt);
            }
        });

        popupElement.add(mnuePaste);

        popupElement.add(jSeparator3);

        mnueAlignLeft.setText("Align Left");
        mnueAlignLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnueAlignLeftActionPerformed(evt);
            }
        });

        popupElement.add(mnueAlignLeft);

        mnueAlignRight.setText("Align Right");
        mnueAlignRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnueAlignRightActionPerformed(evt);
            }
        });

        popupElement.add(mnueAlignRight);

        mnueAlignTop.setText("Align Top");
        mnueAlignTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnueAlignTopActionPerformed(evt);
            }
        });

        popupElement.add(mnueAlignTop);

        mnueAlignBottom.setText("Align Bottom");
        mnueAlignBottom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnueAlignBottomActionPerformed(evt);
            }
        });

        popupElement.add(mnueAlignBottom);

        getContentPane().setLayout(null);

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        ToolBar.setFloatable(false);
        ToolBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ToolBarKeyPressed(evt);
            }
        });

        jPanel1.setLayout(null);

        cmdDBField.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TReportWriter/Images/dbfield.jpg")));
        cmdDBField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDBFieldActionPerformed(evt);
            }
        });
        cmdDBField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmdDBFieldKeyPressed(evt);
            }
        });

        jPanel1.add(cmdDBField);
        cmdDBField.setBounds(266, 2, 35, 35);

        cmdTextField.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TReportWriter/Images/textfield.jpg")));
        cmdTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTextFieldActionPerformed(evt);
            }
        });
        cmdTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmdTextFieldKeyPressed(evt);
            }
        });

        jPanel1.add(cmdTextField);
        cmdTextField.setBounds(301, 2, 35, 35);

        jLabel1.setText("Zoom (%)");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(435, 10, 70, 15);

        cmbZoom.setEditable(true);
        cmbZoom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbZoomItemStateChanged(evt);
            }
        });
        cmbZoom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbZoomKeyPressed(evt);
            }
        });

        jPanel1.add(cmbZoom);
        cmbZoom.setBounds(503, 6, 90, 24);

        cmdOpen.setBackground(new java.awt.Color(204, 204, 255));
        cmdOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TReportWriter/Images/open.jpg")));
        cmdOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenActionPerformed(evt);
            }
        });

        jPanel1.add(cmdOpen);
        cmdOpen.setBounds(40, 2, 35, 35);

        cmdNew.setBackground(new java.awt.Color(204, 204, 255));
        cmdNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TReportWriter/Images/New.jpg")));
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        jPanel1.add(cmdNew);
        cmdNew.setBounds(6, 2, 35, 35);

        cmdCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TReportWriter/Images/cut.jpg")));
        cmdCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCutActionPerformed(evt);
            }
        });

        jPanel1.add(cmdCut);
        cmdCut.setBounds(139, 2, 35, 35);

        cmdCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TReportWriter/Images/copy.jpg")));
        cmdCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCopyActionPerformed(evt);
            }
        });

        jPanel1.add(cmdCopy);
        cmdCopy.setBounds(175, 2, 35, 35);

        cmdPaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TReportWriter/Images/paste.jpg")));
        cmdPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPasteActionPerformed(evt);
            }
        });

        jPanel1.add(cmdPaste);
        cmdPaste.setBounds(210, 2, 35, 35);

        cmdIdle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TReportWriter/Images/idle.jpg")));
        cmdIdle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdIdleActionPerformed(evt);
            }
        });

        jPanel1.add(cmdIdle);
        cmdIdle.setBounds(338, 2, 35, 35);

        cmdSave.setBackground(new java.awt.Color(204, 204, 255));
        cmdSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TReportWriter/Images/save.jpg")));
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        jPanel1.add(cmdSave);
        cmdSave.setBounds(79, 2, 35, 35);

        cmdPreview.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TReportWriter/Images/preview.jpg")));
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        jPanel1.add(cmdPreview);
        cmdPreview.setBounds(631, 2, 35, 35);

        ToolBar.add(jPanel1);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(2, 1, 1000, 40);

        MainPanel.setLayout(null);

        MainPanel.setBackground(new java.awt.Color(255, 255, 255));
        MainPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        MainPanel.setAutoscrolls(true);
        MainPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                MainPanelComponentResized(evt);
            }
        });
        MainPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                MainPanelMouseMoved(evt);
            }
        });
        MainPanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainPanelKeyPressed(evt);
            }
        });

        PageContainer.setLayout(null);

        PageContainer.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        PageContainer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                PageContainerKeyReleased(evt);
            }
        });

        HScroll.setBlockIncrement(50);
        HScroll.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        HScroll.setValue(595);
        HScroll.setVisibleAmount(595);
        HScroll.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                HScrollVetoableChange(evt);
            }
        });
        HScroll.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                HScrollAdjustmentValueChanged(evt);
            }
        });

        PageContainer.add(HScroll);
        HScroll.setBounds(3, 492, 768, 17);

        VScroll.setVisibleAmount(460);
        VScroll.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                VScrollAdjustmentValueChanged(evt);
            }
        });

        PageContainer.add(VScroll);
        VScroll.setBounds(771, 26, 17, 482);

        TopScale.setLayout(null);

        TopScale.setBackground(new java.awt.Color(255, 255, 255));
        TopScale.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        PageContainer.add(TopScale);
        TopScale.setBounds(0, 0, 790, 25);

        SideScale.setLayout(null);

        SideScale.setBackground(new java.awt.Color(255, 255, 255));
        SideScale.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        PageContainer.add(SideScale);
        SideScale.setBounds(1, 25, 30, 510);

        PagePanel.setLayout(null);

        PagePanel.setBackground(new java.awt.Color(255, 255, 255));
        PagePanel.setBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(1, 1, 1, 1), new java.awt.Color(255, 51, 102)));
        PagePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PagePanelMouseClicked(evt);
            }
        });

        PageContainer.add(PagePanel);
        PagePanel.setBounds(29, 26, 759, 460);

        MainPanel.add(PageContainer);
        PageContainer.setBounds(0, 0, 790, 510);

        getContentPane().add(MainPanel);
        MainPanel.setBounds(2, 42, 800, 515);

        mnuFile.setText("File");
        mnuFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFileActionPerformed(evt);
            }
        });

        mnuNewReport.setText("New");
        mnuNewReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuNewReportActionPerformed(evt);
            }
        });

        mnuFile.add(mnuNewReport);

        mnuOpenReport.setText("Open");
        mnuOpenReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOpenReportActionPerformed(evt);
            }
        });

        mnuFile.add(mnuOpenReport);

        mnuSaveReport.setText("Save");
        mnuSaveReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveReportActionPerformed(evt);
            }
        });

        mnuFile.add(mnuSaveReport);

        mnuClose.setText("Close");
        mnuClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCloseActionPerformed(evt);
            }
        });

        mnuFile.add(mnuClose);

        MenuBar.add(mnuFile);

        mnuEdit.setText("Edit");
        mnuCut.setText("Cut");
        mnuCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCutActionPerformed(evt);
            }
        });

        mnuEdit.add(mnuCut);

        mnuCopy.setText("Copy");
        mnuCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCopyActionPerformed(evt);
            }
        });

        mnuEdit.add(mnuCopy);

        mnuPaste.setText("Paste");
        mnuPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPasteActionPerformed(evt);
            }
        });

        mnuEdit.add(mnuPaste);

        mnuEdit.add(mnuSeperator);

        mnuReportProperties.setText("Report Properties");
        mnuReportProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuReportPropertiesActionPerformed(evt);
            }
        });

        mnuEdit.add(mnuReportProperties);

        mnuGroups.setText("Report Groups");
        mnuGroups.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGroupsActionPerformed(evt);
            }
        });

        mnuEdit.add(mnuGroups);

        mnuBand.setText("Band Properties");
        mnuBand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBandActionPerformed(evt);
            }
        });
        mnuBand.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mnuBandMouseClicked(evt);
            }
        });

        mnuEdit.add(mnuBand);

        mnuVariables.setText("Variables");
        mnuVariables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuVariablesActionPerformed(evt);
            }
        });

        mnuEdit.add(mnuVariables);

        mnuParameters.setText("Parameters");
        mnuParameters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuParametersActionPerformed(evt);
            }
        });

        mnuEdit.add(mnuParameters);

        MenuBar.add(mnuEdit);

        mnuData.setText("Data");
        mnuReportQuery.setText("Report Query");
        mnuReportQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuReportQueryActionPerformed(evt);
            }
        });

        mnuData.add(mnuReportQuery);

        mnuConnection.setText("Connection Info");
        mnuConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuConnectionActionPerformed(evt);
            }
        });

        mnuData.add(mnuConnection);

        MenuBar.add(mnuData);

        setJMenuBar(MenuBar);

    }//GEN-END:initComponents

    private void mnuPropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPropertiesActionPerformed
        // TODO add your handling code here:
        EditSelectedControl();
    }//GEN-LAST:event_mnuPropertiesActionPerformed
        
    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_formFocusGained
    
    private void mnuParametersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuParametersActionPerformed
        // TODO add your handling code here:
        try {
            frmParameters objGroup=new frmParameters();
            objGroup.objTReport=this.objTReport;
            objGroup.colParamters=this.objTReport.colParameters;
            
            objGroup.ShowDialog();
            if(!objGroup.cancelled) {
                this.objTReport=objGroup.objTReport;
                RenderDesigner();
            }
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_mnuParametersActionPerformed
    
    private void mnuConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuConnectionActionPerformed
        // TODO add your handling code here:
        try {
            frmConnInfo objInfo=new frmConnInfo();
            objInfo.objTReport=this.objTReport;
            
            objInfo.ShowDialog();
            
            if(!objInfo.cancelled) {
                this.objTReport=objInfo.objTReport;
            }
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_mnuConnectionActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        SaveFile();
        
        Connection objConn=TData.getConn(objTReport.objDBConn.ConnectionString);
        
        objEngine.PreviewReport(objTReport.ReportFile,objConn);
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void mnueAlignBottomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnueAlignBottomActionPerformed
        // TODO add your handling code here:
        AlignTop(LastElementY);
    }//GEN-LAST:event_mnueAlignBottomActionPerformed
    
    private void mnueAlignTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnueAlignTopActionPerformed
        // TODO add your handling code here:
        AlignTop(LastElementY);
    }//GEN-LAST:event_mnueAlignTopActionPerformed
    
    private void mnueAlignRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnueAlignRightActionPerformed
        // TODO add your handling code here:
        AlignRight(LastElementX, LastElementWidth);
    }//GEN-LAST:event_mnueAlignRightActionPerformed
    
    private void mnueAlignLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnueAlignLeftActionPerformed
        // TODO add your handling code here:
        AlignLeft(LastElementX);
    }//GEN-LAST:event_mnueAlignLeftActionPerformed
    
    private void mnuePasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuePasteActionPerformed
        // TODO add your handling code here:
        Paste();
    }//GEN-LAST:event_mnuePasteActionPerformed
    
    private void mnueCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnueCopyActionPerformed
        // TODO add your handling code here:
        Copy();
    }//GEN-LAST:event_mnueCopyActionPerformed
    
    private void mnueCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnueCutActionPerformed
        // TODO add your handling code here:
        Cut();
    }//GEN-LAST:event_mnueCutActionPerformed
    
    private void mnupVariablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnupVariablesActionPerformed
        // TODO add your handling code here:
        try {
            frmVariables objGroup=new frmVariables();
            objGroup.objTReport=this.objTReport;
            objGroup.colVariables=this.objTReport.colVariables;
            
            objGroup.ShowDialog();
            if(!objGroup.cancelled) {
                this.objTReport=objGroup.objTReport;
                RenderDesigner();
            }
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_mnupVariablesActionPerformed
    
    private void mnupBandsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnupBandsActionPerformed
        // TODO add your handling code here:
        try {
            frmEditBands objEditBands=new frmEditBands();
            objEditBands.objTReport=this.objTReport;
            
            objEditBands.ShowDialog();
            
            if(!objEditBands.cancelled) {
                this.objTReport=objEditBands.objTReport;
            }
            
            RenderDesigner();
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_mnupBandsActionPerformed
    
    private void mnupGroupsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnupGroupsActionPerformed
        // TODO add your handling code here:
        try {
            frmGroups objGroup=new frmGroups();
            objGroup.objTReport=this.objTReport;
            
            objGroup.ShowDialog();
            if(!objGroup.cancelled) {
                this.objTReport=objGroup.objTReport;
                RenderDesigner();
            }
            
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_mnupGroupsActionPerformed
    
    private void mnupReportPropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnupReportPropertiesActionPerformed
        // TODO add your handling code here:
        try {
            frmReportProperties objForm=new frmReportProperties();
            objForm.objTReport=this.objTReport;
            
            objForm.ShowDialog();
            
            if(!objForm.cancelled) {
                this.objTReport=objForm.objTReport;
            }
            
            setPageLayout();
            RenderDesigner();
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_mnupReportPropertiesActionPerformed
    
    private void mnupPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnupPasteActionPerformed
        // TODO add your handling code here:
        Paste();
    }//GEN-LAST:event_mnupPasteActionPerformed
    
    private void mnupCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnupCopyActionPerformed
        // TODO add your handling code here:
        Copy();
    }//GEN-LAST:event_mnupCopyActionPerformed
    
    private void mnupCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnupCutActionPerformed
        // TODO add your handling code here:
        Cut();
    }//GEN-LAST:event_mnupCutActionPerformed
    
    private void mnuPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPasteActionPerformed
        // TODO add your handling code here:
        Paste();
    }//GEN-LAST:event_mnuPasteActionPerformed
    
    private void mnuCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCopyActionPerformed
        // TODO add your handling code here:
        Copy();
    }//GEN-LAST:event_mnuCopyActionPerformed
    
    private void mnuCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCutActionPerformed
        // TODO add your handling code here:
        Cut();
    }//GEN-LAST:event_mnuCutActionPerformed
    
    private void cmdPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPasteActionPerformed
        // TODO add your handling code here:
        Paste();
    }//GEN-LAST:event_cmdPasteActionPerformed
    
    private void cmdCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCopyActionPerformed
        // TODO add your handling code here:
        Copy();
    }//GEN-LAST:event_cmdCopyActionPerformed
    
    private void cmdCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCutActionPerformed
        // TODO add your handling code here:
        Cut();
    }//GEN-LAST:event_cmdCutActionPerformed
    
    private void cmbZoomKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbZoomKeyPressed
        // TODO add your handling code here:
        doZoom();
    }//GEN-LAST:event_cmbZoomKeyPressed
    
    private void cmdIdleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdIdleActionPerformed
        // TODO add your handling code here:
        CurrentState=this.StateIdle;
        
        
        for(int i=0;i<PagePanel.getComponentCount();i++) {
            if(PagePanel.getComponent(i) instanceof TPanel) {
                PagePanel.getComponent(i).setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        }
        
    }//GEN-LAST:event_cmdIdleActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        SaveFile();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOpenActionPerformed
        // TODO add your handling code here:
        OpenFile();
    }//GEN-LAST:event_cmdOpenActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        NewFile();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void mnuCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCloseActionPerformed
        // TODO add your handling code here:
        CloseFile();
    }//GEN-LAST:event_mnuCloseActionPerformed
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked
    
    private void cmbZoomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbZoomItemStateChanged
        // TODO add your handling code here:
        doZoom();
    }//GEN-LAST:event_cmbZoomItemStateChanged
    
    private void MainPanelComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_MainPanelComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_MainPanelComponentResized
    
    private void mnuVariablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuVariablesActionPerformed
        // TODO add your handling code here:
        try {
            frmVariables objGroup=new frmVariables();
            objGroup.objTReport=this.objTReport;
            objGroup.colVariables=this.objTReport.colVariables;
            
            objGroup.ShowDialog();
            if(!objGroup.cancelled) {
                this.objTReport=objGroup.objTReport;
                RenderDesigner();
            }
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_mnuVariablesActionPerformed
    
    private void mnuFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnuFileActionPerformed
    
    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
        RenderDesigner();
    }//GEN-LAST:event_formComponentResized
    
    private void mnuOpenReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOpenReportActionPerformed
        // TODO add your handling code here:
        OpenFile();
    }//GEN-LAST:event_mnuOpenReportActionPerformed
    
    private void mnuSaveReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveReportActionPerformed
        // TODO add your handling code here:
        SaveFile();
    }//GEN-LAST:event_mnuSaveReportActionPerformed
    
    private void mnuReportQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuReportQueryActionPerformed
        // TODO add your handling code here:
        try {
            frmReportQuery objForm=new frmReportQuery();
            objForm.objTReport=this.objTReport;
            
            objForm.ShowDialog();
            
            if(!objForm.cancelled) {
                this.objTReport=objForm.objTReport;
            }
            
            RenderDesigner();
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_mnuReportQueryActionPerformed
    
    private void mnuReportPropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuReportPropertiesActionPerformed
        // TODO add your handling code here:
        try {
            frmReportProperties objForm=new frmReportProperties();
            objForm.objTReport=this.objTReport;
            
            objForm.ShowDialog();
            
            if(!objForm.cancelled) {
                this.objTReport=objForm.objTReport;
            }
            
            setPageLayout();
            RenderDesigner();
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_mnuReportPropertiesActionPerformed
    
    private void cmdDBFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDBFieldActionPerformed
        // TODO add your handling code here:
        
        CurrentState=this.StateNewDBField;
        
        for(int i=0;i<PagePanel.getComponentCount();i++) {
            if(PagePanel.getComponent(i) instanceof TPanel) {
                PagePanel.getComponent(i).setCursor(new Cursor(Cursor.TEXT_CURSOR));
            }
        }
        
        
    }//GEN-LAST:event_cmdDBFieldActionPerformed
    
    private void mnuBandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBandActionPerformed
        // TODO add your handling code here:
        try {
            frmEditBands objEditBands=new frmEditBands();
            objEditBands.objTReport=this.objTReport;
            
            objEditBands.ShowDialog();
            
            if(!objEditBands.cancelled) {
                this.objTReport=objEditBands.objTReport;
            }
            
            RenderDesigner();
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_mnuBandActionPerformed
    
    private void mnuBandMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mnuBandMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_mnuBandMouseClicked
    
    private void mnuGroupsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGroupsActionPerformed
        // TODO add your handling code here:
        try {
            frmGroups objGroup=new frmGroups();
            objGroup.objTReport=this.objTReport;
            
            objGroup.ShowDialog();
            if(!objGroup.cancelled) {
                this.objTReport=objGroup.objTReport;
                RenderDesigner();
            }
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_mnuGroupsActionPerformed
    
    private void cmdDBFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmdDBFieldKeyPressed
        // TODO add your handling code here:
        try {
            
            if(evt.getKeyCode()==37) //Left Arrow
            {
                MoveControls(1);
                RenderDesigner();
            }
            
            if(evt.getKeyCode()==39) //Right Arrow
            {
                MoveControls(2);
                RenderDesigner();
            }
            
            if(evt.getKeyCode()==38) //Up Arrow
            {
                MoveControls(3);
                RenderDesigner();
            }
            
            if(evt.getKeyCode()==40) //Down Arrow
            {
                MoveControls(4);
                RenderDesigner();
            }
            
            if(evt.getKeyCode()==127) //Delete Key
            {
                DeleteControls();
                RenderDesigner();
            }
            
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_cmdDBFieldKeyPressed
    
    private void cmdTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmdTextFieldKeyPressed
        // TODO add your handling code here:
        
        try {
            if(evt.getKeyCode()==37) //Left Arrow
            {
                MoveControls(1);
                RenderDesigner();
            }
            
            if(evt.getKeyCode()==39) //Right Arrow
            {
                MoveControls(2);
                RenderDesigner();
            }
            
            if(evt.getKeyCode()==38) //Up Arrow
            {
                MoveControls(3);
                RenderDesigner();
            }
            
            if(evt.getKeyCode()==40) //Down Arrow
            {
                MoveControls(4);
                RenderDesigner();
            }
            
            if(evt.getKeyCode()==127) //Delete Key
            {
                DeleteControls();
                RenderDesigner();
            }
            
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdTextFieldKeyPressed
    
    private void ToolBarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ToolBarKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_ToolBarKeyPressed
    
    private void PageContainerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PageContainerKeyReleased
        // TODO add your handling code here:
        
    }//GEN-LAST:event_PageContainerKeyReleased
    
    private void MainPanelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MainPanelKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_MainPanelKeyPressed
    
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyPressed
    
    private void PagePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PagePanelMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_PagePanelMouseClicked
    
    private void VScrollAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_VScrollAdjustmentValueChanged
        // TODO add your handling code here:
        try {
            PagePanel.setBounds(PagePanel.getX(), -1*evt.getValue(), PagePanel.getWidth(),PagePanel.getHeight());
            SideScale.setBounds(SideScale.getX(), -1*evt.getValue(), SideScale.getWidth(),PagePanel.getHeight());
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_VScrollAdjustmentValueChanged
    
    private void HScrollVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_HScrollVetoableChange
        // TODO add your handling code here:
    }//GEN-LAST:event_HScrollVetoableChange
    
    private void HScrollAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_HScrollAdjustmentValueChanged
        // TODO add your handling code here:
        try {
            PagePanel.setBounds(-1*evt.getValue(), PagePanel.getY(), PagePanel.getWidth(),PagePanel.getHeight());
            TopScale.setBounds(-1*evt.getValue(), TopScale.getY(), PagePanel.getWidth(),TopScale.getHeight());
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_HScrollAdjustmentValueChanged
    
    private void cmdTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTextFieldActionPerformed
        // TODO add your handling code here:
        CurrentState=this.StateNewTextField;
        
        for(int i=0;i<PagePanel.getComponentCount();i++) {
            if(PagePanel.getComponent(i) instanceof TPanel) {
                PagePanel.getComponent(i).setCursor(new Cursor(Cursor.TEXT_CURSOR));
            }
        }
        
    }//GEN-LAST:event_cmdTextFieldActionPerformed
    
    private void MainPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MainPanelMouseMoved
        // TODO add your handling code here:
        //        try {
        //
        //            for(int i=0;i<MainPanel.getComponentCount();i++) {
        //                if(MainPanel.getComponent(i) instanceof JPanel) {
        //                    JPanel objPanel=(JPanel)MainPanel.getComponent(i);
        //                    objPanel.setBorder(new javax.swing.border.LineBorder(Color.WHITE));
        //                }
        //            }
        //
        //            JPanel objPanel=(JPanel)MainPanel.getComponentAt(evt.getX(),evt.getY());
        //
        //            if(objPanel!=null) {
        //                objPanel.setBorder(new javax.swing.border.LineBorder(Color.BLUE));
        //            }
        //
        //        }
        //        catch(Exception e) {
        //
        //        }
    }//GEN-LAST:event_MainPanelMouseMoved
    
    private void mnuNewReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuNewReportActionPerformed
        // TODO add your handling code here:
        NewFile();
    }//GEN-LAST:event_mnuNewReportActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollBar HScroll;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JPanel PageContainer;
    private javax.swing.JPanel PagePanel;
    private javax.swing.JPanel SideScale;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JPanel TopScale;
    private javax.swing.JScrollBar VScroll;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JComboBox cmbZoom;
    private javax.swing.JButton cmdCopy;
    private javax.swing.JButton cmdCut;
    private javax.swing.JButton cmdDBField;
    private javax.swing.JButton cmdIdle;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdOpen;
    private javax.swing.JButton cmdPaste;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JMenuItem mnuBand;
    private javax.swing.JMenuItem mnuClose;
    private javax.swing.JMenuItem mnuConnection;
    private javax.swing.JMenuItem mnuCopy;
    private javax.swing.JMenuItem mnuCut;
    private javax.swing.JMenu mnuData;
    private javax.swing.JMenu mnuEdit;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenuItem mnuGroups;
    private javax.swing.JMenuItem mnuNewReport;
    private javax.swing.JMenuItem mnuOpenReport;
    private javax.swing.JMenuItem mnuParameters;
    private javax.swing.JMenuItem mnuPaste;
    private javax.swing.JMenuItem mnuProperties;
    private javax.swing.JMenuItem mnuReportProperties;
    private javax.swing.JMenuItem mnuReportQuery;
    private javax.swing.JMenuItem mnuSaveReport;
    private javax.swing.JSeparator mnuSeperator;
    private javax.swing.JMenuItem mnuVariables;
    private javax.swing.JMenuItem mnueAlignBottom;
    private javax.swing.JMenuItem mnueAlignLeft;
    private javax.swing.JMenuItem mnueAlignRight;
    private javax.swing.JMenuItem mnueAlignTop;
    private javax.swing.JMenuItem mnueCopy;
    private javax.swing.JMenuItem mnueCut;
    private javax.swing.JMenuItem mnuePaste;
    private javax.swing.JMenuItem mnupBands;
    private javax.swing.JMenuItem mnupCopy;
    private javax.swing.JMenuItem mnupCut;
    private javax.swing.JMenuItem mnupGroups;
    private javax.swing.JMenuItem mnupPaste;
    private javax.swing.JMenuItem mnupReportProperties;
    private javax.swing.JMenuItem mnupVariables;
    private javax.swing.JPopupMenu popupEdit;
    private javax.swing.JPopupMenu popupElement;
    // End of variables declaration//GEN-END:variables
    
    
    private void RenderDesigner() {
        
        try {
            
            int FontSize=(GraphicRatio * 12) /10;
            
            //this.setFont(new java.awt.Font("Monospaced", 1, FontSize));
            
            objTReport.Dirty=true;
            
            //Resize Routine
            MainPanel.setSize(getWidth(), getHeight());
            PageContainer.setSize(getWidth(),getHeight()-ToolBar.getHeight()-MenuBar.getHeight());
            PageContainer.setLocation(SideScale.getWidth(), TopScale.getHeight());
            PageContainer.setLocation(0,0);
            ToolBar.setSize(getWidth(),ToolBar.getHeight());
            
            try {
                VScroll.setLocation(PageContainer.getWidth()-VScroll.getWidth(), TopScale.getHeight());
                HScroll.setLocation(0, PageContainer.getHeight()-HScroll.getHeight());
                
                HScroll.setSize(PageContainer.getWidth(), HScroll.getHeight());
                VScroll.setSize(VScroll.getWidth(), PageContainer.getHeight()-HScroll.getHeight()-TopScale.getHeight());
            }
            catch(Exception scrollbar) {
                
            }
            int TopPosition=0;
            
            PagePanel.removeAll();
            bandContainers.clear();
            
            //Add Drag Panel
            
            dragPanel=new JPanel();
            dragPanel.setBounds(0, 0, PagePanel.getWidth(),2);
            dragPanel.setBorder(new javax.swing.border.LineBorder(Color.BLUE,2,true));
            
            PagePanel.add(dragPanel);
            
            for(int i=1;i<=objTReport.colBands.size();i++) {
                
                TBand objBand=((TBand)objTReport.colBands.get(Integer.toString(i))).getCopy();
                TPanel objBandPanel=new TPanel();
                
                objBandPanel.setBackground(Color.WHITE);
                
                if(objBand.Selected) {
                    objBandPanel.setBorder(new javax.swing.border.LineBorder(Color.RED,1,true));
                }
                else {
                    objBandPanel.setBorder(new javax.swing.border.LineBorder(Color.BLUE,1,true));
                }
                objBandPanel.setBounds(0, TopPosition, objTReport.objReportPage.PageWidth*GraphicRatio ,objBand.BandHeight*GraphicRatio);
                
                objBandPanel.BandIndex=i;
                
                //Draw Grid Lines
                objBandPanel.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        HandlePanelMouseClick(evt);
                    }
                    
                    public void mouseReleased(java.awt.event.MouseEvent evt) {
                        HandlePanelMouseReleased(evt);
                    }
                    
                    public void mousePressed(java.awt.event.MouseEvent evt) {
                        HandlePanelMousePressed(evt);
                    }
                    
                });
                
                
                objBandPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
                    public void mouseDragged(java.awt.event.MouseEvent evt) {
                        HandlePanelMouseMovement(evt);
                    }
                    
                    public void mouseMoved(java.awt.event.MouseEvent evt) {
                        HandlePanelMouseMovement(evt);
                    }
                });
                
                //Add Fields into it
                for(int t=1;t<=objBand.colTextFields.size();t++) {
                    TTextField objTextField=(TTextField)objBand.colTextFields.get(Integer.toString(t));
                    
                    TDTextField objText=new TDTextField();
                    objText.FieldType="Text";
                    objText.BandIndex=i;
                    objText.TextIndex=t;
                    objText.setBackground(Color.WHITE);
                    objText.setText(objTextField.Text);
                    objText.setFont(new java.awt.Font("Monospaced", 1, FontSize));
                    objText.setBounds(objTextField.PositionX*GraphicRatio , objTextField.PositionY*GraphicRatio, objTextField.Width*GraphicRatio, GraphicRatio);
                    objText.setBorder(new javax.swing.border.LineBorder(Color.BLACK,1));
                    objText.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            HandleTextMouseClick(evt);
                        }
                    });
                    
                    
                    if(objTextField.selected) {
                        objText.setBorder(new javax.swing.border.LineBorder(Color.BLUE,2));
                    }
                    
                    objBandPanel.add(objText);
                }
                
                
                for(int t=1;t<=objBand.colDBFields.size();t++) {
                    TDBField objTextField=(TDBField)objBand.colDBFields.get(Integer.toString(t));
                    
                    TDTextField objText=new TDTextField();
                    objText.FieldType="DB";
                    objText.BandIndex=i;
                    objText.TextIndex=t;
                    objText.setText(objTextField.Text);
                    objText.setFont(new java.awt.Font("Monospaced", 1, FontSize));
                    objText.setBounds(objTextField.PositionX*GraphicRatio , objTextField.PositionY*GraphicRatio, objTextField.Width*GraphicRatio, GraphicRatio);
                    objText.setBorder(new javax.swing.border.LineBorder(Color.BLACK,1));
                    objText.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            HandleTextMouseClick(evt);
                        }
                    });
                    
                    if(objTextField.selected) {
                        objText.setBorder(new javax.swing.border.LineBorder(Color.BLUE,2));
                    }
                    
                    objBandPanel.add(objText);
                }
                
                
                for(int h=1;h<=objBand.BandHeight;h++) {
                    JPanel GridPanel=new JPanel();
                    
                    GridPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(247, 247, 247),2,true));
                    GridPanel.setBounds(0, h*GraphicRatio, objTReport.objReportPage.PageWidth*GraphicRatio, 1);
                    
                    objBandPanel.add(GridPanel);
                }
                
                
                for(int h=1;h<=objTReport.objReportPage.PageWidth;h++) {
                    JPanel GridPanel=new JPanel();
                    
                    GridPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(247, 247, 247),2,true));
                    GridPanel.setBounds(h*GraphicRatio, 0, 1,objBand.BandHeight*GraphicRatio  );
                    
                    objBandPanel.add(GridPanel);
                }
                
                PagePanel.add(objBandPanel);
                
                JLabel objLabel=new JLabel();
                objLabel.setFont(new java.awt.Font("Dialog", 1, 18));
                objLabel.setForeground(new java.awt.Color(223, 236, 249));
                objLabel.setText(objBand.BandName);
                objLabel.setBounds(0, 0, objBandPanel.getWidth(), 20);
                objBandPanel.add(objLabel);
                
                
                TopPosition=objBandPanel.getBounds().y+objBandPanel.getBounds().height+1;
            }
            
            cmdTextField.requestFocus();
            
        }
        catch(Exception e) {
            
        }
        
    }
    
    
    private void setPageLayout() {
        try {
            
            PagePanel.setBounds(PagePanel.getX(), PagePanel.getY(), objTReport.objReportPage.PageWidth*GraphicRatio , objTReport.objReportPage.PageHeight*GraphicRatio);
            HScroll.setMaximum(objTReport.objReportPage.PageWidth*GraphicRatio);
            HScroll.setMinimum(-1*SideScale.getWidth());
            
            VScroll.setMaximum(objTReport.objReportPage.PageHeight*GraphicRatio);
            VScroll.setMinimum(-1*TopScale.getHeight());
            
            TopScale.setBounds(PagePanel.getX(),TopScale.getY(), objTReport.objReportPage.PageWidth*GraphicRatio , TopScale.getHeight());
            SideScale.setBounds(SideScale.getX(),PagePanel.getY(), SideScale.getWidth(), objTReport.objReportPage.PageHeight*GraphicRatio);
            
            HScroll.setValue(HScroll.getMinimum());
            VScroll.setValue(VScroll.getMinimum());
            
            DrawHorizontalScale();
        }
        catch(Exception e) {
            
        }
    }
    
    private void DrawHorizontalScale() {
        try {
            int LeftPosition=TopScale.getX();
            
            TopScale.removeAll();
            SideScale.removeAll();
            
            for(int i=0;i<=TopScale.getWidth()/GraphicRatio;i+=5) {
                LeftPosition=i*GraphicRatio;
                
                JPanel objMarker=new JPanel();
                
                objMarker.setBackground(Color.GRAY);
                objMarker.setBounds(LeftPosition,0,2, (TopScale.getHeight()*60)/100);
                
                JLabel objLabel=new JLabel();
                objLabel.setFont(new Font("Dialog",0,9));
                objLabel.setText(Integer.toString(i));
                objLabel.setBounds(LeftPosition-((Integer.toString(i).length()*GraphicRatio)/4), (TopScale.getHeight()*60)/100 , Integer.toString(i).length()*GraphicRatio , 10);
                
                TopScale.add(objMarker);
                TopScale.add(objLabel);
            }
            
            for(int i=0;i<=SideScale.getHeight()/GraphicRatio;i+=5) {
                LeftPosition=i*GraphicRatio;
                
                JPanel objMarker=new JPanel();
                
                objMarker.setBackground(Color.GRAY);
                objMarker.setBounds(0, LeftPosition, (SideScale.getWidth()*20)/100, 2);
                
                
                JLabel objLabel=new JLabel();
                objLabel.setFont(new Font("Dialog",0,9));
                objLabel.setText(Integer.toString(i));
                
                
                objLabel.setBounds(SideScale.getX()+((SideScale.getWidth()*20)/100), LeftPosition-5, Integer.toString(i).length()*GraphicRatio, 10);
                
                
                SideScale.add(objMarker);
                SideScale.add(objLabel);
            }
            
            
        }
        catch(Exception e) {
            
        }
    }
    
    private void HandleTextKeyPress(java.awt.event.KeyEvent evt) {
        try {
            
        }
        catch(Exception e) {
            
        }
    }
    
    private void HandleTextMouseClick(java.awt.event.MouseEvent evt) {
        try {
            
            if(evt.getButton()==3) {
                LastElementWidth=0;
                LastElementX=0;
                LastElementY=0;
                
                if(evt.getSource() instanceof TDTextField ) {
                    TDTextField objField=(TDTextField)evt.getSource();
                    
                    TBand objBand=((TBand)objTReport.colBands.get(Integer.toString(objField.BandIndex))).getCopy();
                    
                    if(objField.FieldType.equals("Text")) {
                        TTextField objTextField=((TTextField)objBand.colTextFields.get(Integer.toString(objField.TextIndex))).getCopy();
                        
                        LastElementX=objTextField.PositionX;
                        LastElementY=objTextField.PositionY;
                        LastElementWidth=objTextField.Width;
                    }
                    
                    if(objField.FieldType.equals("DB")) {
                        TDBField objTextField=((TDBField)objBand.colDBFields.get(Integer.toString(objField.TextIndex))).getCopy();
                        
                        LastElementX=objTextField.PositionX;
                        LastElementY=objTextField.PositionY;
                        LastElementWidth=objTextField.Width;
                    }
                    
                    popupElement.show(objField, evt.getX(),evt.getY());
                }
            }
            
            if(evt.getButton()==1) {
                if(CurrentState==this.StateIdle) {
                    if(evt.getSource() instanceof TDTextField && evt.getClickCount()==1) {
                        TDTextField objField=(TDTextField)evt.getSource();
                        
                        if(!evt.isShiftDown()) {
                            DeSelectAll();
                        }
                        
                        TBand objBand=((TBand)objTReport.colBands.get(Integer.toString(objField.BandIndex))).getCopy();
                        
                        if(objField.FieldType.equals("Text")) {
                            TTextField objTextField=((TTextField)objBand.colTextFields.get(Integer.toString(objField.TextIndex))).getCopy();
                            objTextField.selected=true;
                            objBand.colTextFields.remove(Integer.toString(objField.TextIndex));
                            objBand.colTextFields.put(Integer.toString(objField.TextIndex),objTextField);
                        }
                        
                        if(objField.FieldType.equals("DB")) {
                            TDBField objTextField=((TDBField)objBand.colDBFields.get(Integer.toString(objField.TextIndex))).getCopy();
                            objTextField.selected=true;
                            objBand.colDBFields.remove(Integer.toString(objField.TextIndex));
                            objBand.colDBFields.put(Integer.toString(objField.TextIndex),objTextField);
                        }
                        
                        objTReport.colBands.remove(Integer.toString(objField.BandIndex));
                        objTReport.colBands.put(Integer.toString(objField.BandIndex),objBand);
                        
                        RenderDesigner();
                        return;
                    }
                    
                    
                    //Trap double clicks
                    /*if(evt.getSource() instanceof TDTextField && evt.getClickCount()==2) {
                        TDTextField objField=(TDTextField)evt.getSource();
                        
                        if(!evt.isShiftDown()) {
                            DeSelectAll();
                        }
                        
                        TBand objBand=((TBand)objTReport.colBands.get(Integer.toString(objField.BandIndex))).getCopy();
                        
                        if(objField.FieldType.equals("Text")) {
                            TTextField objTextField=((TTextField)objBand.colTextFields.get(Integer.toString(objField.TextIndex))).getCopy();
                            objTextField.selected=!objTextField.selected;
                            
                            frmTextProperties objEditText=new frmTextProperties();
                            objEditText.objText=objTextField;
                            
                            objEditText.ShowDialog();
                            
                            if(!objEditText.cancelled) {
                                objBand.colTextFields.remove(Integer.toString(objField.TextIndex));
                                objBand.colTextFields.put(Integer.toString(objField.TextIndex),objTextField);
                            }
                            
                        }
                        
                        if(objField.FieldType.equals("DB")) {
                            
                            TDBField objTextField=((TDBField)objBand.colDBFields.get(Integer.toString(objField.TextIndex))).getCopy();
                            objTextField.selected=!objTextField.selected;
                            
                            frmDBFIELDProperties objEditText=new frmDBFIELDProperties();
                            objEditText.objText=objTextField;
                            
                            objEditText.ShowDialog();
                            
                            if(!objEditText.cancelled) {
                                objBand.colDBFields.remove(Integer.toString(objField.TextIndex));
                                objBand.colDBFields.put(Integer.toString(objField.TextIndex),objTextField);
                            }
                        }
                        
                        objTReport.colBands.remove(Integer.toString(objField.BandIndex));
                        objTReport.colBands.put(Integer.toString(objField.BandIndex),objBand);
                        
                    }*/
                    
                }
            }
            
            RenderDesigner();
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    
    private void HandlePanelMouseClick(java.awt.event.MouseEvent evt) {
        try {
            
            if(evt.getButton()==3) {
                
                if(evt.getSource() instanceof TPanel) {
                    TPanel objPanel=(TPanel)evt.getSource();
                    
                    popupEdit.show(objPanel,evt.getX(),evt.getY());
                    
                }
            }
            
            
            if(evt.getButton()==1) {
                
                DeSelectAll();
                
                if(CurrentState==this.StateNewTextField) {
                    //Get the Band Container by name
                    
                    if(evt.getSource() instanceof TPanel) {
                        TPanel objPanel=(TPanel)evt.getSource();
                        String bandIndex=Integer.toString(objPanel.BandIndex);
                        
                        TTextField objText=new TTextField();
                        objText.Width=4;
                        objText.Text="TEXT";
                        objText.PositionX= Double.valueOf(Double.toString(Math.ceil(evt.getX()/GraphicRatio))).intValue();
                        objText.PositionY= Double.valueOf(Double.toString(Math.ceil(evt.getY()/GraphicRatio))).intValue();
                        
                        TBand objBand=((TBand)objTReport.colBands.get(bandIndex)).getCopy();
                        
                        objTReport.colBands.remove(bandIndex);
                        objBand.colTextFields.put(Integer.toString(objBand.colTextFields.size()+1),objText);
                        objTReport.colBands.put(bandIndex,objBand);
                    }
                    
                    RenderDesigner();
                    CurrentState=this.StateIdle;
                    return;
                }
                
                
                if(CurrentState==this.StateNewDBField) {
                    //Get the Band Container by name
                    
                    if(evt.getSource() instanceof TPanel) {
                        TPanel objPanel=(TPanel)evt.getSource();
                        String bandIndex=Integer.toString(objPanel.BandIndex);
                        
                        TDBField objText=new TDBField();
                        objText.Width=5;
                        objText.Text="DBField";
                        objText.PositionX= Double.valueOf(Double.toString(Math.ceil(evt.getX()/GraphicRatio))).intValue();
                        objText.PositionY= Double.valueOf(Double.toString(Math.ceil(evt.getY()/GraphicRatio))).intValue();
                        
                        TBand objBand=((TBand)objTReport.colBands.get(bandIndex)).getCopy();
                        
                        objTReport.colBands.remove(bandIndex);
                        objBand.colDBFields.put(Integer.toString(objBand.colDBFields.size()+1),objText);
                        objTReport.colBands.put(bandIndex,objBand);
                    }
                    
                    RenderDesigner();
                    CurrentState=this.StateIdle;
                    return;
                }
            }
            
            
            if(evt.getSource() instanceof TPanel) {
                TPanel objPanel=(TPanel)evt.getSource();
                
                String bandIndex=Integer.toString(objPanel.BandIndex);
                
                for(int i=1;i<=objTReport.colBands.size();i++) {
                    TBand objBand=((TBand)objTReport.colBands.get(Integer.toString(i))).getCopy();
                    
                    if(objPanel.BandIndex==i) {
                        objBand.Selected=true;
                    }
                    else {
                        objBand.Selected=false;
                    }
                    
                    objTReport.colBands.put(Integer.toString(i),objBand);
                }
                
                RenderDesigner();
            }
            
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    
    private void DeSelectAll() {
        try {
            
            for(int i=0;i<PagePanel.getComponentCount();i++) {
                if(PagePanel.getComponent(i) instanceof TPanel) {
                    TPanel objPanel=(TPanel)PagePanel.getComponent(i);
                    String bandIndex=  Integer.toString(objPanel.BandIndex);
                    for(int j=0;j<objPanel.getComponentCount();j++) {
                        if(objPanel.getComponent(j) instanceof TDTextField) {
                            TDTextField objText=(TDTextField)objPanel.getComponent(j);
                            
                            TBand objBand=(TBand)objTReport.colBands.get(Integer.toString(objText.BandIndex));
                            
                            if(objText.FieldType.equals("Text")) {
                                TTextField objTextField=(TTextField)objBand.colTextFields.get(Integer.toString(objText.TextIndex));
                                
                                objTextField.selected=false;
                                
                                objBand.colTextFields.remove(Integer.toString(objText.TextIndex));
                                objBand.colTextFields.put(Integer.toString(objText.TextIndex),objTextField);
                            }
                            
                            if(objText.FieldType.equals("DB")) {
                                
                                TDBField objTextField=(TDBField)objBand.colDBFields.get(Integer.toString(objText.TextIndex));
                                
                                objTextField.selected=false;
                                objBand.colDBFields.remove(Integer.toString(objText.TextIndex));
                                objBand.colDBFields.put(Integer.toString(objText.TextIndex),objTextField);
                            }
                            
                            objTReport.colBands.remove(Integer.toString(objText.BandIndex));
                            objTReport.colBands.put(Integer.toString(objText.BandIndex),objBand);
                            
                        }
                    }
                }
            }
            
        }
        catch(Exception e) {
            
        }
    }
    
    
    private void MoveControls(int Direction) {
        try {
            
            for(int i=0;i<PagePanel.getComponentCount();i++) {
                if(PagePanel.getComponent(i) instanceof TPanel) {
                    TPanel objPanel=(TPanel)PagePanel.getComponent(i);
                    String bandIndex=  Integer.toString(objPanel.BandIndex);
                    for(int j=0;j<objPanel.getComponentCount();j++) {
                        if(objPanel.getComponent(j) instanceof TDTextField) {
                            TDTextField objText=(TDTextField)objPanel.getComponent(j);
                            
                            TBand objBand=(TBand)objTReport.colBands.get(Integer.toString(objText.BandIndex));
                            
                            if(objText.FieldType.equals("Text")) {
                                TTextField objTextField=(TTextField)objBand.colTextFields.get(Integer.toString(objText.TextIndex));
                                
                                if(objTextField.selected) {
                                    switch(Direction) {
                                        case 1: //Left
                                            objTextField.PositionX=objTextField.PositionX-1;break;
                                        case 2: //Right
                                            objTextField.PositionX=objTextField.PositionX+1;break;
                                        case 3: //Up
                                            objTextField.PositionY=objTextField.PositionY-1;break;
                                        case 4: //Down
                                            objTextField.PositionY=objTextField.PositionY+1;break;
                                    }
                                    
                                    objBand.colTextFields.remove(Integer.toString(objText.TextIndex));
                                    objBand.colTextFields.put(Integer.toString(objText.TextIndex),objTextField);
                                }
                            }
                            
                            
                            if(objText.FieldType.equals("DB")) {
                                
                                TDBField objTextField=(TDBField)objBand.colDBFields.get(Integer.toString(objText.TextIndex));
                                
                                if(objTextField.selected) {
                                    
                                    switch(Direction) {
                                        case 1: //Left
                                            objTextField.PositionX=objTextField.PositionX-1;break;
                                        case 2: //Right
                                            objTextField.PositionX=objTextField.PositionX+1;break;
                                        case 3: //Up
                                            objTextField.PositionY=objTextField.PositionY-1;break;
                                        case 4: //Down
                                            objTextField.PositionY=objTextField.PositionY+1;break;
                                    }
                                    
                                    objBand.colDBFields.remove(Integer.toString(objText.TextIndex));
                                    objBand.colDBFields.put(Integer.toString(objText.TextIndex),objTextField);
                                }
                            }
                            
                            objTReport.colBands.remove(Integer.toString(objText.BandIndex));
                            objTReport.colBands.put(Integer.toString(objText.BandIndex),objBand);
                            
                        }
                    }
                }
            }
            
        }
        catch(Exception e) {
            
        }
    }
    
    
    
    private void DeleteControls() {
        try {
            
            for(int i=0;i<PagePanel.getComponentCount();i++) {
                if(PagePanel.getComponent(i) instanceof TPanel) {
                    TPanel objPanel=(TPanel)PagePanel.getComponent(i);
                    String bandIndex=  Integer.toString(objPanel.BandIndex);
                    for(int j=0;j<objPanel.getComponentCount();j++) {
                        if(objPanel.getComponent(j) instanceof TDTextField) {
                            TDTextField objText=(TDTextField)objPanel.getComponent(j);
                            
                            TBand objBand=(TBand)objTReport.colBands.get(Integer.toString(objText.BandIndex));
                            
                            if(objText.FieldType.equals("Text")) {
                                TTextField objTextField=(TTextField)objBand.colTextFields.get(Integer.toString(objText.TextIndex));
                                
                                if(objTextField.selected) {
                                    objBand.colTextFields.remove(Integer.toString(objText.TextIndex));
                                    
                                    int Counter=0;
                                    HashMap temp=new HashMap();
                                    
                                    Iterator colIterator=objBand.colTextFields.keySet().iterator();
                                    while(colIterator.hasNext()) {
                                        String key=(String)colIterator.next();
                                        
                                        objTextField=(TTextField)objBand.colTextFields.get(key);
                                        Counter++;
                                        temp.put(Integer.toString(Counter),objTextField);
                                    }
                                    
                                    objBand.colTextFields.clear();
                                    
                                    for(int c=1;c<=temp.size();c++) {
                                        objTextField=(TTextField)temp.get(Integer.toString(c));
                                        objBand.colTextFields.put(Integer.toString(c),objTextField);
                                    }
                                }
                            }
                            
                            
                            if(objText.FieldType.equals("DB")) {
                                
                                TDBField objTextField=(TDBField)objBand.colDBFields.get(Integer.toString(objText.TextIndex));
                                
                                if(objTextField.selected) {
                                    objBand.colDBFields.remove(Integer.toString(objText.TextIndex));
                                    
                                    int Counter=0;
                                    HashMap temp=new HashMap();
                                    
                                    Iterator colIterator=objBand.colDBFields.keySet().iterator();
                                    while(colIterator.hasNext()) {
                                        String key=(String)colIterator.next();
                                        
                                        objTextField=(TDBField)objBand.colDBFields.get(key);
                                        Counter++;
                                        temp.put(Integer.toString(Counter),objTextField);
                                    }
                                    
                                    objBand.colDBFields.clear();
                                    
                                    for(int c=1;c<=temp.size();c++) {
                                        objTextField=(TDBField)temp.get(Integer.toString(c));
                                        objBand.colDBFields.put(Integer.toString(c),objTextField);
                                    }
                                    
                                }
                            }
                            
                            objTReport.colBands.remove(Integer.toString(objText.BandIndex));
                            objTReport.colBands.put(Integer.toString(objText.BandIndex),objBand);
                        }
                    }
                }
            }
            
        }
        catch(Exception e) {
            
        }
    }
    
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null){
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
    
    
    public void ShowDesigner() {
        
        setSize(879, 568);
        initComponents();
        GenerateCombo();
        
        DisableEnvironment();
        
        Frame f=findParentFrame(this);
        
        
        aDialog=new JFrame("TReport Writer");
        
        
        aDialog.getContentPane().add("Center",this);
        Dimension appletSize = this.getSize();
        aDialog.setSize(appletSize);
        aDialog.setResizable(true);
        
        aDialog.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        
        
        aDialog.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        
        //Place it to center of the screen
        Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
        aDialog.setLocation((int)(screenSize.getWidth()-appletSize.getWidth())/2,(int)(screenSize.getHeight()-appletSize.getHeight())/2);
        
        
        aDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
        aDialog.show();
    }
    
    
    private void EnableEnvironment() {
        try {
            
            mnuSaveReport.setEnabled(true);
            mnuClose.setEnabled(true);
            mnuCut.setEnabled(true);
            mnuCopy.setEnabled(true);
            mnuPaste.setEnabled(true);
            mnuReportProperties.setEnabled(true);
            mnuGroups.setEnabled(true);
            mnuBand.setEnabled(true);
            mnuVariables.setEnabled(true);
            mnuReportQuery.setEnabled(true);
            mnuConnection.setEnabled(true);
            mnuParameters.setEnabled(true);
            
            cmdCut.setEnabled(true);
            cmdCopy.setEnabled(true);
            cmdPaste.setEnabled(true);
            cmdTextField.setEnabled(true);
            cmdDBField.setEnabled(true);
            cmdIdle.setEnabled(true);
            cmbZoom.setEnabled(true);
            cmdSave.setEnabled(true);
            cmdPreview.setEnabled(true);
            
            MainPanel.setVisible(true);
            
            RenderDesigner();
        }
        catch(Exception e) {
            
        }
        
    }
    
    
    private void DisableEnvironment() {
        try {
            
            mnuSaveReport.setEnabled(false);
            mnuClose.setEnabled(false);
            mnuCut.setEnabled(false);
            mnuCopy.setEnabled(false);
            mnuPaste.setEnabled(false);
            mnuReportProperties.setEnabled(false);
            mnuGroups.setEnabled(false);
            mnuBand.setEnabled(false);
            mnuVariables.setEnabled(false);
            mnuReportQuery.setEnabled(false);
            mnuConnection.setEnabled(false);
            mnuParameters.setEnabled(false);
            
            cmdCut.setEnabled(false);
            cmdCopy.setEnabled(false);
            cmdPaste.setEnabled(false);
            cmdTextField.setEnabled(false);
            cmdDBField.setEnabled(false);
            cmdIdle.setEnabled(false);
            cmbZoom.setEnabled(false);
            cmdSave.setEnabled(false);
            
            cmdPreview.setEnabled(false);
            MainPanel.setVisible(false);
            
            RenderDesigner();
        }
        catch(Exception e) {
            
        }
        
    }
    
    
    private void NewFile() {
        try {
            
            if(FileOpen) {
                int Result=  JOptionPane.showConfirmDialog(null,"Do you want to save report file "+objTReport.ReportFile+" ?","Confirmation",JOptionPane.YES_NO_CANCEL_OPTION);
                
                if(Result==JOptionPane.YES_OPTION) {
                    SaveFile();
                    CloseFile();
                }
                
                if(Result==JOptionPane.NO_OPTION) {
                    CloseFile();
                }
                
                if(Result==JOptionPane.CANCEL_OPTION) {
                    return;
                }
                
            }
            
            EnableEnvironment();
            objTReport=new TReport();
            setPageLayout();
            RenderDesigner();
            FileOpen=true;
            
            aDialog.setTitle("TReport Writer - Untitled Document ");
            
        }
        catch(Exception e) {
            
        }
        
    }
    
    
    private void OpenFile() {
        try {
            
            if(FileOpen) {
                
                int Result=JOptionPane.showConfirmDialog(null,"Do you want to save report file "+objTReport.ReportFile+" ?","Confirmation",JOptionPane.YES_NO_CANCEL_OPTION);
                
                if(Result==JOptionPane.YES_OPTION) {
                    SaveFile();
                    CloseFile();
                }
                
                if(Result==JOptionPane.NO_OPTION) {
                    CloseFile();
                }
                
                if(Result==JOptionPane.CANCEL_OPTION) {
                    return;
                }
                
            }
            
            
            FileDialog FileDialog=new FileDialog(findParentFrame(this));
            FileDialog.show();
            
            if(!FileDialog.getFile().equals("null")) {
                File aFile=new File(FileDialog.getDirectory()+FileDialog.getFile());
                
                if(aFile.exists()) {
                    
                    EnableEnvironment();
                    objTReport=new TReport();
                    objTReport.LoadReportFromFile(FileDialog.getDirectory()+FileDialog.getFile());
                    setPageLayout();
                    RenderDesigner();
                    FileOpen=true;
                    
                    aDialog.setTitle("TReport Writer -"+objTReport.ReportFile);
                }
                
            }
            
        }
        catch(Exception e) {
            
        }
        
    }
    
    
    private void CloseFile() {
        try {
            objTReport=new TReport();
            DisableEnvironment();
            FileOpen=false;
            aDialog.setTitle("TReport Writer ");
        }
        catch(Exception e) {
            
        }
    }
    
    private void SaveFile() {
        try {
            if(objTReport.ReportFile.equals("")) {
                FileDialog FileDialog=new FileDialog(findParentFrame(this));
                FileDialog.show();
                
                
                if(!FileDialog.getFile().equals("null")) {
                    objTReport.SaveToFile( (FileDialog.getDirectory()+FileDialog.getFile()) );
                    
                    aDialog.setTitle("TReport Writer - "+objTReport.ReportFile);
                }
            }
            else {
                objTReport.SaveToFile(objTReport.ReportFile);
            }
        }
        catch(Exception e) {
            
        }
    }
    
    private void doZoom() {
        try {
            int ZoomPercent=TGLOBAL.CInt(cmbZoom.getSelectedItem().toString());
            
            if(ZoomPercent>=3) {
                GraphicRatio = (ZoomPercent*10)/100;
                
                setPageLayout();
                RenderDesigner();
            }
        }
        catch(Exception e) {
            
        }
    }
    
    
    private void GenerateCombo() {
        try {
            cmbZoom.removeAllItems();
            cmbZoom.addItem("25");
            cmbZoom.addItem("50");
            cmbZoom.addItem("75");
            cmbZoom.addItem("100");
            cmbZoom.addItem("150");
            cmbZoom.addItem("200");
            
            cmbZoom.setSelectedItem("100");
            
        }
        catch(Exception e) {
            
        }
    }
    
    
    private void Copy() {
        
        ClipBoard.clear();
        ClipBoardAction=ActionCopy;
        
        try {
            
            for(int i=0;i<PagePanel.getComponentCount();i++) {
                if(PagePanel.getComponent(i) instanceof TPanel) {
                    TPanel objPanel=(TPanel)PagePanel.getComponent(i);
                    String bandIndex=  Integer.toString(objPanel.BandIndex);
                    for(int j=0;j<objPanel.getComponentCount();j++) {
                        if(objPanel.getComponent(j) instanceof TDTextField) {
                            TDTextField objText=(TDTextField)objPanel.getComponent(j);
                            
                            
                            TBand objBand=(TBand)objTReport.colBands.get(Integer.toString(objText.BandIndex));
                            
                            if(objText.FieldType.equals("Text")) {
                                TTextField objTextField=(TTextField)objBand.colTextFields.get(Integer.toString(objText.TextIndex));
                                
                                if(objTextField.selected) {
                                    ClipBoard.put(Integer.toString(ClipBoard.size()+1), objTextField);
                                }
                            }
                            
                            
                            if(objText.FieldType.equals("DB")) {
                                
                                TDBField objTextField=(TDBField)objBand.colDBFields.get(Integer.toString(objText.TextIndex));
                                
                                if(objTextField.selected) {
                                    ClipBoard.put(Integer.toString(ClipBoard.size()+1), objTextField);
                                }
                            }
                            
                        }
                    }
                }
            }
            
        }
        catch(Exception e) {
            
        }
        
    }
    
    private void Cut() {
        
        
    }
    
    
    private void Paste() {
        try {
            int SelectedBand=getSelectedBand();
            
            if(SelectedBand>0&&ClipBoard.size()>0) {
                
                TBand objBand=getBand(SelectedBand);
                
                for(int i=1;i<=ClipBoard.size();i++) {
                    Object objTextField=ClipBoard.get(Integer.toString(i));
                    
                    if(objTextField instanceof TTextField) {
                        
                        TTextField objElement=((TTextField)objTextField).getCopy();
                        
                        objBand.colTextFields.put(Integer.toString(objBand.colTextFields.size()+1),objElement);
                    }
                    
                    if(objTextField instanceof TDBField) {
                        TDBField objElement=((TDBField)objTextField).getCopy();
                        objBand.colDBFields.put(Integer.toString(objBand.colDBFields.size()+1),objElement);
                    }
                    
                }
                
                objTReport.colBands.put(Integer.toString(SelectedBand),objBand);
                
                RenderDesigner();
            }
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    
    private int getSelectedBand() {
        int SelectedBandIndex=0;
        
        try {
            for(int i=1;i<=objTReport.colBands.size();i++) {
                TBand objBand=(TBand)objTReport.colBands.get(Integer.toString(i));
                
                if(objBand.Selected) {
                    SelectedBandIndex=i;
                }
            }
            
        }
        catch(Exception e) {
            
        }
        
        return SelectedBandIndex;
    }
    
    private TBand getBand(int BandIndex) {
        TBand objBand=new TBand();
        
        try {
            objBand=((TBand)objTReport.colBands.get(Integer.toString(BandIndex))).getCopy();
            
        }
        catch(Exception e) {
            
        }
        
        return objBand;
    }
    
    
    private void AlignLeft(int Position) {
        try {
            
            for(int i=0;i<PagePanel.getComponentCount();i++) {
                if(PagePanel.getComponent(i) instanceof TPanel) {
                    TPanel objPanel=(TPanel)PagePanel.getComponent(i);
                    String bandIndex=  Integer.toString(objPanel.BandIndex);
                    for(int j=0;j<objPanel.getComponentCount();j++) {
                        if(objPanel.getComponent(j) instanceof TDTextField) {
                            TDTextField objText=(TDTextField)objPanel.getComponent(j);
                            
                            TBand objBand=((TBand)objTReport.colBands.get(Integer.toString(objText.BandIndex))).getCopy();
                            
                            if(objText.FieldType.equals("Text")) {
                                TTextField objTextField=(TTextField)objBand.colTextFields.get(Integer.toString(objText.TextIndex));
                                
                                if(objTextField.selected) {
                                    
                                    objTextField.PositionX=Position;
                                    
                                    objBand.colTextFields.remove(Integer.toString(objText.TextIndex));
                                    objBand.colTextFields.put(Integer.toString(objText.TextIndex),objTextField);
                                }
                            }
                            
                            
                            if(objText.FieldType.equals("DB")) {
                                
                                TDBField objTextField=(TDBField)objBand.colDBFields.get(Integer.toString(objText.TextIndex));
                                
                                if(objTextField.selected) {
                                    objTextField.PositionX=Position;
                                    
                                    objBand.colDBFields.remove(Integer.toString(objText.TextIndex));
                                    objBand.colDBFields.put(Integer.toString(objText.TextIndex),objTextField);
                                }
                            }
                            
                            objTReport.colBands.remove(Integer.toString(objText.BandIndex));
                            objTReport.colBands.put(Integer.toString(objText.BandIndex),objBand);
                            
                        }
                    }
                }
            }
            
            RenderDesigner();
        }
        catch(Exception e) {
            
        }
        
        
    }
    
    
    private void AlignRight(int Position,int Width) {
        try {
            
            for(int i=0;i<PagePanel.getComponentCount();i++) {
                if(PagePanel.getComponent(i) instanceof TPanel) {
                    TPanel objPanel=(TPanel)PagePanel.getComponent(i);
                    String bandIndex=  Integer.toString(objPanel.BandIndex);
                    for(int j=0;j<objPanel.getComponentCount();j++) {
                        if(objPanel.getComponent(j) instanceof TDTextField) {
                            TDTextField objText=(TDTextField)objPanel.getComponent(j);
                            
                            TBand objBand=((TBand)objTReport.colBands.get(Integer.toString(objText.BandIndex))).getCopy();
                            
                            if(objText.FieldType.equals("Text")) {
                                TTextField objTextField=(TTextField)objBand.colTextFields.get(Integer.toString(objText.TextIndex));
                                
                                if(objTextField.selected) {
                                    
                                    objTextField.PositionX=objTextField.PositionX+ ( (Position+Width)-(objTextField.PositionX+objTextField.Width)) ;
                                    
                                    objBand.colTextFields.remove(Integer.toString(objText.TextIndex));
                                    objBand.colTextFields.put(Integer.toString(objText.TextIndex),objTextField);
                                }
                            }
                            
                            
                            if(objText.FieldType.equals("DB")) {
                                
                                TDBField objTextField=(TDBField)objBand.colDBFields.get(Integer.toString(objText.TextIndex));
                                
                                if(objTextField.selected) {
                                    objTextField.PositionX=objTextField.PositionX+ ( (Position+Width)-(objTextField.PositionX+objTextField.Width)) ;
                                    
                                    objBand.colDBFields.remove(Integer.toString(objText.TextIndex));
                                    objBand.colDBFields.put(Integer.toString(objText.TextIndex),objTextField);
                                }
                            }
                            
                            objTReport.colBands.remove(Integer.toString(objText.BandIndex));
                            objTReport.colBands.put(Integer.toString(objText.BandIndex),objBand);
                            
                        }
                    }
                }
            }
            
            RenderDesigner();
        }
        catch(Exception e) {
            
        }
        
        
    }
    
    private void AlignTop(int Position) {
        try {
            
            for(int i=0;i<PagePanel.getComponentCount();i++) {
                if(PagePanel.getComponent(i) instanceof TPanel) {
                    TPanel objPanel=(TPanel)PagePanel.getComponent(i);
                    String bandIndex=  Integer.toString(objPanel.BandIndex);
                    for(int j=0;j<objPanel.getComponentCount();j++) {
                        if(objPanel.getComponent(j) instanceof TDTextField) {
                            TDTextField objText=(TDTextField)objPanel.getComponent(j);
                            
                            TBand objBand=((TBand)objTReport.colBands.get(Integer.toString(objText.BandIndex))).getCopy();
                            
                            if(objText.FieldType.equals("Text")) {
                                TTextField objTextField=(TTextField)objBand.colTextFields.get(Integer.toString(objText.TextIndex));
                                
                                if(objTextField.selected) {
                                    
                                    objTextField.PositionY=Position;
                                    
                                    objBand.colTextFields.remove(Integer.toString(objText.TextIndex));
                                    objBand.colTextFields.put(Integer.toString(objText.TextIndex),objTextField);
                                }
                            }
                            
                            
                            if(objText.FieldType.equals("DB")) {
                                
                                TDBField objTextField=(TDBField)objBand.colDBFields.get(Integer.toString(objText.TextIndex));
                                
                                if(objTextField.selected) {
                                    objTextField.PositionY=Position;
                                    
                                    objBand.colDBFields.remove(Integer.toString(objText.TextIndex));
                                    objBand.colDBFields.put(Integer.toString(objText.TextIndex),objTextField);
                                }
                            }
                            
                            objTReport.colBands.remove(Integer.toString(objText.BandIndex));
                            objTReport.colBands.put(Integer.toString(objText.BandIndex),objBand);
                            
                        }
                    }
                }
            }
            
            RenderDesigner();
        }
        catch(Exception e) {
            
        }
        
        
    }
    
    
    private void HandlePanelMouseMovement(java.awt.event.MouseEvent evt) {
        
        try {
            
            TPanel objPanel=(TPanel)evt.getSource();
            
            if(!IsResizing) {
                if(evt.getY()==objPanel.getHeight()-2) {
                    objPanel.setCursor(new Cursor(Cursor.S_RESIZE_CURSOR));
                }
                else {
                    objPanel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                }
            }
            else {
                //LastYPosition=evt.getY();
                dragPanel.setLocation(0,objPanel.getY()+evt.getY());
            }
        }
        catch(Exception e) {
            
        }
    }
    
    private void HandlePanelMouseReleased(java.awt.event.MouseEvent evt) {
        
        try {
            TPanel objPanel=(TPanel)evt.getSource();
            
            if(IsResizing) {
                
                int Offset= (LastYPosition-evt.getY())/GraphicRatio;
                
                TBand objBand=((TBand)objTReport.colBands.get(Integer.toString(objPanel.BandIndex))).getCopy();
                
                objBand.BandHeight=objBand.BandHeight-Offset;
                
                objTReport.colBands.put(Integer.toString(objPanel.BandIndex), objBand);
                
                
                
                IsResizing=false;
                dragPanel.setVisible(false);
                
                
            }
            
        }
        catch(Exception e) {
            
        }
        
        dragPanel.setVisible(false);
        RenderDesigner();
        SwingUtilities.updateComponentTreeUI(aDialog);
        
        
    }
    
    private void HandlePanelMousePressed(java.awt.event.MouseEvent evt) {
        
        try {
            
            TPanel objPanel=(TPanel)evt.getSource();
            
            if(evt.getY()>=objPanel.getHeight()-2) {
                
                IsResizing=true;
                ResizeBandIndex=objPanel.BandIndex;
                LastYPosition=evt.getY();
                
                dragPanel.setVisible(true);
            }
            else {
                HandlePanelMouseClick(evt);
            }
        }
        catch(Exception e) {
            
        }
        
    }
    
    
    
    private int getSelectedCount() {
        int Count=0;
        
        try {
            
            for(int i=0;i<PagePanel.getComponentCount();i++) {
                if(PagePanel.getComponent(i) instanceof TPanel) {
                    TPanel objPanel=(TPanel)PagePanel.getComponent(i);
                    String bandIndex=  Integer.toString(objPanel.BandIndex);
                    for(int j=0;j<objPanel.getComponentCount();j++) {
                        if(objPanel.getComponent(j) instanceof TDTextField) {
                            TDTextField objText=(TDTextField)objPanel.getComponent(j);
                            
                            TBand objBand=(TBand)objTReport.colBands.get(Integer.toString(objText.BandIndex));
                            
                            if(objText.FieldType.equals("Text")) {
                                TTextField objTextField=(TTextField)objBand.colTextFields.get(Integer.toString(objText.TextIndex));
                                
                                if(objTextField.selected) {
                                    Count++;
                                }
                            }
                            
                            
                            if(objText.FieldType.equals("DB")) {
                                
                                TDBField objTextField=(TDBField)objBand.colDBFields.get(Integer.toString(objText.TextIndex));
                                
                                if(objTextField.selected) {
                                    Count++;
                                    
                                }
                            }
                        }
                    }
                }
            }
            
        }
        catch(Exception e) {
            
        }
        
        return Count;
    }
    
    
    private void EditSelectedControl() {
        
        try {
            int selectCount=getSelectedCount();
            
            if(selectCount==1) {
                
                for(int i=0;i<PagePanel.getComponentCount();i++) {
                    if(PagePanel.getComponent(i) instanceof TPanel) {
                        TPanel objPanel=(TPanel)PagePanel.getComponent(i);
                        String bandIndex=  Integer.toString(objPanel.BandIndex);
                        for(int j=0;j<objPanel.getComponentCount();j++) {
                            if(objPanel.getComponent(j) instanceof TDTextField) {
                                TDTextField objText=(TDTextField)objPanel.getComponent(j);
                                
                                TBand objBand=(TBand)objTReport.colBands.get(Integer.toString(objText.BandIndex));
                                
                                if(objText.FieldType.equals("Text")) {
                                    TTextField objField=(TTextField)objBand.colTextFields.get(Integer.toString(objText.TextIndex));
                                    
                                    if(objField.selected) {
                                        
                                        TTextField objTextField=((TTextField)objBand.colTextFields.get(Integer.toString(objText.TextIndex))).getCopy();
                                        
                                        frmTextProperties objEditText=new frmTextProperties();
                                        objEditText.objText=objTextField;
                                        
                                        objEditText.ShowDialog();
                                        
                                        if(!objEditText.cancelled) {
                                            objBand.colTextFields.remove(Integer.toString(objText.TextIndex));
                                            objBand.colTextFields.put(Integer.toString(objText.TextIndex),objTextField);
                                        }
                                        
                                    }
                                }
                                
                                
                                if(objText.FieldType.equals("DB")) {
                                    
                                    TDBField objField=(TDBField)objBand.colDBFields.get(Integer.toString(objText.TextIndex));
                                    
                                    if(objField.selected) {
                                        
                                        TDBField objTextField=((TDBField)objBand.colDBFields.get(Integer.toString(objText.TextIndex))).getCopy();
                                        
                                        frmDBFIELDProperties objEditText=new frmDBFIELDProperties();
                                        objEditText.objText=objTextField;
                                        
                                        objEditText.ShowDialog();
                                        
                                        if(!objEditText.cancelled) {
                                            objBand.colDBFields.remove(Integer.toString(objText.TextIndex));
                                            objBand.colDBFields.put(Integer.toString(objText.TextIndex),objTextField);
                                        }
                                        
                                    }
                                }
                                
                                
                                objTReport.colBands.remove(Integer.toString(objText.BandIndex));
                                objTReport.colBands.put(Integer.toString(objText.BandIndex),objBand);
                                
                            }
                        }
                    }
                }
                
            }

            RenderDesigner();
        }
        catch(Exception e) {
            
        }
    }
    
}

