/*
 * frmPrintPages.java
 *
 * Created on December 5, 2007, 3:39 PM
 */
package TReportWriter;

/**
 *
 * @author root
 */
import javax.swing.*;
import java.io.*;
import java.awt.*;
import javax.print.*;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;

public class frmPrintPages extends javax.swing.JApplet {

    public TReportEngine objReportEngine;
    private JDialog aDialog;

    /**
     * Initializes the applet frmPrintPages
     */
    @Override
    public void init() {
        setSize(459, 260);
        initComponents();
        lblPrinterName.setText(EITLPrint.getDefaultPrinterName());
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        opgAllPages = new javax.swing.JRadioButton();
        opgSelectedPages = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        txtFromPage = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtToPage = new javax.swing.JTextField();
        lblPrinterName = new javax.swing.JLabel();
        chkPrintToFile = new javax.swing.JCheckBox();
        txtFileName = new javax.swing.JTextField();
        cmdBrowse = new javax.swing.JButton();
        cmdOK = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        buttonGroup1.add(opgAllPages);
        opgAllPages.setSelected(true);
        opgAllPages.setText("Print All Pages");
        jPanel1.add(opgAllPages);
        opgAllPages.setBounds(11, 12, 150, 22);

        buttonGroup1.add(opgSelectedPages);
        opgSelectedPages.setText("Print Selected Pages");
        jPanel1.add(opgSelectedPages);
        opgSelectedPages.setBounds(11, 47, 190, 22);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel1.setText("From Page");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(20, 79, 70, 15);
        jPanel1.add(txtFromPage);
        txtFromPage.setBounds(92, 78, 50, 27);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText("To");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(146, 80, 20, 15);
        jPanel1.add(txtToPage);
        txtToPage.setBounds(168, 78, 50, 27);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(5, 39, 330, 120);

        lblPrinterName.setText("-");
        getContentPane().add(lblPrinterName);
        lblPrinterName.setBounds(9, 10, 320, 17);

        chkPrintToFile.setText("Print to File");
        getContentPane().add(chkPrintToFile);
        chkPrintToFile.setBounds(6, 166, 110, 22);
        getContentPane().add(txtFileName);
        txtFileName.setBounds(7, 196, 280, 27);

        cmdBrowse.setText("...");
        cmdBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBrowseActionPerformed(evt);
            }
        });
        getContentPane().add(cmdBrowse);
        cmdBrowse.setBounds(289, 196, 24, 20);

        cmdOK.setText("OK");
        cmdOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOKActionPerformed(evt);
            }
        });
        getContentPane().add(cmdOK);
        cmdOK.setBounds(360, 60, 80, 29);

        cmdCancel.setText("Cancel");
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        getContentPane().add(cmdCancel);
        cmdCancel.setBounds(360, 110, 80, 29);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        aDialog.dispose();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBrowseActionPerformed
        // TODO add your handling code here:
        try {
            FileDialog FileDialog = new FileDialog(findParentFrame(this));
            FileDialog.show();

            if (!FileDialog.getFile().equals("null")) {
                txtFileName.setText(FileDialog.getDirectory() + FileDialog.getFile());
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_cmdBrowseActionPerformed

    private void cmdOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOKActionPerformed
        // TODO add your handling code here:
        try {
            if (opgSelectedPages.isSelected()) {
                int FromPage = TGLOBAL.CInt(txtFromPage.getText());
                int ToPage = TGLOBAL.CInt(txtToPage.getText());

                if (FromPage <= 0) {
                    JOptionPane.showMessageDialog(null, "Please specify starting page no.");
                    return;
                }

                if (FromPage > objReportEngine.PrintPages.size()) {
                    txtFromPage.setText(Integer.toString(objReportEngine.PrintPages.size()));
                }

                if (ToPage <= 0 || ToPage > objReportEngine.PrintPages.size() || ToPage < FromPage) {
                    txtToPage.setText(Integer.toString(objReportEngine.PrintPages.size()));
                }
            }

            if (chkPrintToFile.isSelected() && (txtFileName.getText().trim().equals(""))) {
                JOptionPane.showMessageDialog(null, "Please specify the filename");
                return;
            }

            if (chkPrintToFile.isSelected()) {
                if (opgAllPages.isSelected()) {
                    PrintAllPagesToFile();
                } else {
                    PrintSelectedPagesToFile();
                }
                if (txtFileName.getText().trim().length() > 0) {
                    FTP_FILE(txtFileName.getText().trim());
                } else {
                    JOptionPane.showMessageDialog(null, "Please Select File Path");
                }
            } else {
                if (opgAllPages.isSelected()) {
                    PrintAllPages();
                } else {
                    PrintSelectedPages();
                }

            }

            aDialog.dispose();

        } catch (Exception e) {

        }
    }//GEN-LAST:event_cmdOKActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkPrintToFile;
    private javax.swing.JButton cmdBrowse;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblPrinterName;
    private javax.swing.JRadioButton opgAllPages;
    private javax.swing.JRadioButton opgSelectedPages;
    private javax.swing.JTextField txtFileName;
    private javax.swing.JTextField txtFromPage;
    private javax.swing.JTextField txtToPage;
    // End of variables declaration//GEN-END:variables

    public void Show() {
        initComponents();

        lblPrinterName.setText(EITLPrint.getDefaultPrinterName());

        setSize(459, 260);

        Frame f = findParentFrame(this);

        aDialog = new JDialog(f, "Print", true);

        aDialog.getContentPane().add("Center", this);
        Dimension appletSize = this.getSize();
        aDialog.setSize(appletSize);
        aDialog.setResizable(true);

        //Place it to center of the screen
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        aDialog.setLocation((int) (screenSize.getWidth() - appletSize.getWidth()) / 2, (int) (screenSize.getHeight() - appletSize.getHeight()) / 2);

        aDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
        aDialog.show();
    }

    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while (c != null) {
            if (c instanceof Frame) {
                return (Frame) c;
            }

            c = c.getParent();
        }
        return (Frame) null;
    }

    private void PrintAllPages() {
        try {
            //Create a new File
            BufferedWriter OutputFile = new BufferedWriter(new FileWriter(new File("toutput.tmp")));
            //OutputFile.write('\f');
            for (int i = 1; i <= objReportEngine.PrintPages.size(); i++) {
                TReportPage objPage = (TReportPage) objReportEngine.PrintPages.get(Integer.toString(i));
                //
                for (int p = 1; p <= objPage.PrintLines.size(); p++) {

                    if (objPage.PrintLines.containsKey(Integer.toString(p))) {
                        TReportLine objLine = (TReportLine) objPage.PrintLines.get(Integer.toString(p));

                        OutputFile.write(objLine.OutputText);
                        OutputFile.newLine();
                    }
                }
                //OutputFile.write('\f');

                // Below program Modified by vivek on 27-12-2013
                if (EITLERP.EITLERPGLOBAL.PAGE_BREAK) {
                    OutputFile.write('\f'); // For Page Break
                }
                // --------End of vivek program
            }
            //OutputFile.write('\f');

            EITLERP.EITLERPGLOBAL.PAGE_BREAK = false; //Modified by vivek

            OutputFile.close();
            EITLPrint.PrintTextFile("toutput.tmp", DocFlavor.INPUT_STREAM.AUTOSENSE);
        } catch (Exception e) {
        }
    }

    private void PrintSelectedPages() {
        try {
            int FromPage = TGLOBAL.CInt(txtFromPage.getText());
            int ToPage = TGLOBAL.CInt(txtToPage.getText());

            //Create a new File
            BufferedWriter OutputFile = new BufferedWriter(new FileWriter(new File("toutput.tmp")));
            //OutputFile.write('\f');
            for (int i = FromPage; i <= ToPage; i++) {
                TReportPage objPage = (TReportPage) objReportEngine.PrintPages.get(Integer.toString(i));
                //
                for (int p = 1; p <= objPage.PrintLines.size(); p++) {

                    if (objPage.PrintLines.containsKey(Integer.toString(p))) {
                        TReportLine objLine = (TReportLine) objPage.PrintLines.get(Integer.toString(p));

                        OutputFile.write(objLine.OutputText);
                        OutputFile.newLine();
                    }
                }
                //OutputFile.write('\f');

                // Below program Modified by vivek on 27-12-2013
                if (EITLERP.EITLERPGLOBAL.PAGE_BREAK) {
                    OutputFile.write('\f'); // For Page Break
                }
                // --------End of vivek program
            }
            //OutputFile.write('\f');

            EITLERP.EITLERPGLOBAL.PAGE_BREAK = false; //Modified by vivek

            OutputFile.close();
            System.out.println("OS Name: " + System.getProperty("os.name"));
            System.out.println("OS Architecture: " + System.getProperty("os.arch"));
            System.out.println("OS Version: " + System.getProperty("os.version"));

            EITLPrint.PrintTextFile("toutput.tmp", DocFlavor.INPUT_STREAM.AUTOSENSE);

        } catch (Exception e) {
        }
    }

    private void PrintAllPagesToFile() {
        try {

            //Create a new File
            BufferedWriter OutputFile = new BufferedWriter(new FileWriter(new File(txtFileName.getText())));
            //OutputFile.write('\f');
            for (int i = 1; i <= objReportEngine.PrintPages.size(); i++) {
                TReportPage objPage = (TReportPage) objReportEngine.PrintPages.get(Integer.toString(i));
                for (int p = 1; p <= objPage.PrintLines.size(); p++) {

                    if (objPage.PrintLines.containsKey(Integer.toString(p))) {
                        TReportLine objLine = (TReportLine) objPage.PrintLines.get(Integer.toString(p));

                        OutputFile.write(objLine.OutputText);
                        OutputFile.newLine();
                    }
                }
                //    OutputFile.write('\f'); // For Warrant printing open it

                // Below program Modified by rishi
                if (EITLERP.EITLERPGLOBAL.PAGE_BREAK) {
                    OutputFile.write('\f'); // For Page Break
                }
                // --------End of Rishi program
            }
            EITLERP.EITLERPGLOBAL.PAGE_BREAK = false; //Modified by rishi

            OutputFile.close();

        } catch (Exception e) {
        }
    }

    private void PrintSelectedPagesToFile() {
        try {

            int FromPage = TGLOBAL.CInt(txtFromPage.getText());
            int ToPage = TGLOBAL.CInt(txtToPage.getText());

            //Create a new File
            BufferedWriter OutputFile = new BufferedWriter(new FileWriter(new File(txtFileName.getText())));
            //OutputFile.write('\f');
            for (int i = FromPage; i <= ToPage; i++) {
                TReportPage objPage = (TReportPage) objReportEngine.PrintPages.get(Integer.toString(i));
                for (int p = 1; p <= objPage.PrintLines.size(); p++) {

                    if (objPage.PrintLines.containsKey(Integer.toString(p))) {
                        TReportLine objLine = (TReportLine) objPage.PrintLines.get(Integer.toString(p));

                        OutputFile.write(objLine.OutputText);
                        OutputFile.newLine();
                    }
                }

                //OutputFile.write('\f'); // For Warrant printing open it
                // Below program Modified by rishi
                if (EITLERP.EITLERPGLOBAL.PAGE_BREAK) {
                    OutputFile.write('\f'); // For Page Break
                }
                // --------End of Rishi program
            }
            EITLERP.EITLERPGLOBAL.PAGE_BREAK = false;  //Modified by rishi

            OutputFile.close();

        } catch (Exception e) {
        }
    }

    private void FTP_FILE(String pfile) {
        String server = "200.0.0.1";
        int port = 21;
        String user = "dinesh";
        String pass = "sdml123";

        FTPClient ftpClient = new FTPClient();
        try {

            ftpClient.connect(server, port);
            ftpClient.login(user, pass);
            ftpClient.enterLocalPassiveMode();

            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);

            File firstLocalFile = new File(pfile);

            int st = 0;
            char[] ch = pfile.toCharArray();

            for (int m = 0; m < ch.length; m++) {
                if (ch[m] == '/' || ch[m] == '\\') {
                    st = m;
                }
            }

            String RemoteFile = "/supcob/dinesh/sdmlerp/" + pfile.substring(st + 1);
            InputStream inputStream = new FileInputStream(firstLocalFile);

            System.out.println("Start uploading first file");
            boolean done = ftpClient.storeFile(RemoteFile, inputStream);
            inputStream.close();
            if (done) {
                System.out.println("The file " + pfile + " is uploaded " + RemoteFile + " successfully.");
                JOptionPane.showMessageDialog(null, "The file " + pfile + " is uploaded " + RemoteFile + " successfully.");
            }
        } catch (Exception e) {
        }
    }

}
