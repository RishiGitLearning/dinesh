/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sdml.felt.ui.order;

import EITLERP.AppletFrame;
import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.LOV;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.clsAuthority;
import EITLERP.clsDepartment;
import EITLERP.clsDocFlow;
import EITLERP.clsFirstFree;
import EITLERP.clsHierarchy;
import EITLERP.clsSales_Party;
import EITLERP.clsUser;
import EITLERP.data;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.text.MaskFormatter;
import sdml.felt.commonUI.Order_No_Conversion;
import sdml.felt.commonUI.SelectFirstFree;
import sdml.felt.commonUI.searchkey;

/**
 *
 * @author root
 */
public class FrmFeltOrder extends javax.swing.JApplet {

    private int EditMode=0;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbModuleModel;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromID=0;
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    private int ModuleId = 602;
    private int DOC_NO = 0;
    private clsFeltOrder feltOrder;
    
    private EITLComboModel cmbSendToModel;
    
    
    
    
    String seleval = "", seltyp = "", selqlt = "", selshd = "", selpiece = "", selext = "", selinv = "", selsz = "";
    private int mlstrc;
    
    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    DateFormat dateForDB = new SimpleDateFormat("yyyy-MM-dd"); 
    /**
     * Initializes the applet FrmFeltOrder
     */
    @Override
    public void init() {
         setSize(665,570);
         initComponents();
         GenerateCombos();
         FormatGrid();
         GenerateFromCombo();
         GenerateHierarchyCombo();
         SetupApproval();
         SetMenuForRights();
         DefaultSettings();
         FormatGridApprovalStatus();
         FormatGridUpdateHistory();
         
         try{
            MaskFormatter dateMask = new MaskFormatter("##/##/####");
            dateMask.setPlaceholderCharacter('_');
            dateMask.install(S_O_DATE);
            MaskFormatter dateMask2 = new MaskFormatter("##/##/####");
            dateMask2.setPlaceholderCharacter('_');
            dateMask2.install(REF_DATE);
            MaskFormatter dateMask3 = new MaskFormatter("##/##/####");
            dateMask3.setPlaceholderCharacter('_');
            dateMask3.install(P_O_DATE);
        }
        catch(ParseException ex){
            System.out.println("Error on Mask");
        }
         S_O_DATE.setText(df.format(new Date()));
         
         
         feltOrder = new clsFeltOrder();
         boolean load = feltOrder.LoadData();
         if(load) {
            DisplayData();
        }else{
            JOptionPane.showMessageDialog(this,"Error occured while Loading Data. Error is "+feltOrder.LastError,"ERROR",JOptionPane.ERROR_MESSAGE);
        }
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
    }
             
    
    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    public void DefaultSettings() {

        //String data = toString();
        Object[] rowData = new Object[15];
        rowData[0] = "1";
        DataModel.addRow(rowData);
        
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        clearFields();
    }
    private void clearFields()
    {
        S_O_NO.setText("0");
        REGION.setText("");
        S_ENGINEER.setText("");
        PARTY_CODE.setText("");
        DISTRICT.setText("");
        CITY.setText("");
        COUNTRY.setText("");
        PARTY_NAME.setText("");
        REFERENCE.setSelectedItem("");
        REF_DATE.setText("");
        P_O_NO.setText("");
        P_O_DATE.setText("");
        REMARK.setText("");
        ORDER_VALUE.setText("0");
        
        //JOptionPane.showMessageDialog(null, "Data Model size : "+DataModel.getRowCount());
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        FormatGrid();
       // FormatGridA();
        FormatGridHS();
        
        for(int i=0;i<DataModel.getRowCount();i++)
        {
            DataModel.removeRow(i);
        }
        if(DataModel.getRowCount()>0)
        {
            DataModel.removeRow(0);
        }
        Object[] rowData = new Object[15];
        rowData[0] = 1;
        DataModel.addRow(rowData);
    }
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                if(feltOrder.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(feltOrder.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(feltOrder.getAttribute("CANCELED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
        }
        catch(Exception c) {
            c.printStackTrace();
        }
        //============================================//
        
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleId)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        //clsFeltOrder.ChangeVoucherNo=false;
        
        clearFields();
        try {
            S_O_NO.setText(Order_No_Conversion.Order_No_STRING(Integer.parseInt(feltOrder.getAttribute("S_ORDER_NO").getString())));
            S_O_DATE.setText(EITLERPGLOBAL.formatDateDB(feltOrder.getAttribute("S_ORDER_DATE").getString()));
            REGION.setText(feltOrder.getAttribute("REGION").getString());
            S_ENGINEER.setText(feltOrder.getAttribute("SALES_ENGINEER").getString());
            PARTY_CODE.setText(feltOrder.getAttribute("PARTY_CODE").getString());
            PARTY_NAME.setText(feltOrder.getAttribute("PARTY_NAME").getString());
            REFERENCE.setSelectedItem(feltOrder.getAttribute("REFERENCE").getString());
            REF_DATE.setText(EITLERPGLOBAL.formatDateDB(feltOrder.getAttribute("REFERENCE_DATE").getString()));
            P_O_NO.setText(feltOrder.getAttribute("P_O_NO").getString());
            P_O_DATE.setText(df.format(dateForDB.parse(feltOrder.getAttribute("P_O_DATE").getString())));
            REMARK.setText(feltOrder.getAttribute("REMARK").getString());
            ORDER_VALUE.setText("0");
            
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,feltOrder.getAttribute("HIERARCHY_ID").getInt());
            
            FormatGrid();
            //Now Generate Table
            for(int i=1;i<=feltOrder.hmFeltSalesOrderDetails.size();i++) {
                clsFeltSalesOrderDetails ObjItem=(clsFeltSalesOrderDetails)feltOrder.hmFeltSalesOrderDetails.get(Integer.toString(i));
                
                    Object[] rowData=new Object[1];
                     DataModel.addRow(rowData);
                    
                    int NewRow=Table.getRowCount()-1;
             
                    DataModel.setValueByVariable("SrNo",Integer.toString(i),NewRow);
                    DataModel.setValueByVariable("MACHINE_NO",ObjItem.getAttribute("MACHINE_NO").getString(),NewRow);
                    DataModel.setValueByVariable("POSITION",ObjItem.getAttribute("POSITION").getString(),NewRow);
                    DataModel.setValueByVariable("POSITION_DESC",ObjItem.getAttribute("POSITION_DESC").getString(),NewRow);
                    DataModel.setValueByVariable("PIECE_NO",ObjItem.getAttribute("PIECE_NO").getString(),NewRow);
                    DataModel.setValueByVariable("PRODUCT",ObjItem.getAttribute("PRODUCT_CODE").getString(),NewRow);
                    DataModel.setValueByVariable("DESCRIPTION",ObjItem.getAttribute("PRODUCT_DESC").getString(),NewRow);
                    DataModel.setValueByVariable("GROUP",ObjItem.getAttribute("S_GROUP").getString(),NewRow);
                    DataModel.setValueByVariable("LENGHT",ObjItem.getAttribute("LENGTH").getString(),NewRow);
                    DataModel.setValueByVariable("WIDTH",ObjItem.getAttribute("WIDTH").getString(),NewRow);
                    DataModel.setValueByVariable("GSM",ObjItem.getAttribute("GSM").getString(),NewRow);
                    DataModel.setValueByVariable("THORTICAL_WIDTH",ObjItem.getAttribute("THORITICAL_WIDTH").getString(),NewRow);
                    DataModel.setValueByVariable("SQ_MTR",ObjItem.getAttribute("SQ_MTR").getString(),NewRow);
                    DataModel.setValueByVariable("STYLE",ObjItem.getAttribute("STYLE").getString(),NewRow);
                    DataModel.setValueByVariable("REQ_MONTH",ObjItem.getAttribute("REQ_MONTH").getString(),NewRow);
                    DataModel.setValueByVariable("SYN",ObjItem.getAttribute("SYN_PER").getString(),NewRow);
                    DataModel.setValueByVariable("REMARK",ObjItem.getAttribute("REMARK").getString(),NewRow);
                    DataModel.setValueByVariable("OV_RATE",ObjItem.getAttribute("OV_RATE").getString(),NewRow);
                    DataModel.setValueByVariable("OV_AMT",ObjItem.getAttribute("OV_AMT").getString(),NewRow);
                         
                    
            }
            
            //DoNotEvaluate=false;
            
            //UpdateTotals();
            
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List=new HashMap();
            String DocNo=feltOrder.getAttribute("S_ORDER_NO").getString();
            List=clsFeltProductionApprovalFlow.getDocumentFlow(ModuleId,DocNo);
            for(int i=1;i<=List.size();i++) {
                clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
                Object[] rowData=new Object[7];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
                rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
                
                DataModelApprovalStatus.addRow(rowData);
            }
            
            //Showing Audit Trial History
            FormatGridHS();
            HashMap History=feltOrder.getHistoryList(EITLERPGLOBAL.gCompanyID+"", DocNo);
            for(int i=1;i<=History.size();i++) {
                clsFeltOrder ObjHistory=(clsFeltOrder)History.get(Integer.toString(i));
                Object[] rowData=new Object[5];
                
                rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1]=ObjHistory.getAttribute("UPDATED_BY").getString();
                rowData[2]=ObjHistory.getAttribute("ENTRY_DATE").getString();
                
                String ApprovalStatus="";
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus="Approved";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus="Final Approved";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus="Waiting";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus="Rejected";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus="Pending";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus="Skiped";
                }
                
                
                rowData[3]=ApprovalStatus;
                rowData[4]=ObjHistory.getAttribute("APPROVER_REMARKS").getString();
                
                DataModelUpdateHistory.addRow(rowData);
            }
            //============================================================//
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    private void FormatGridA() {
        DataModelApprovalStatus=new EITLTableModel();
        
        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);
        
        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);
        
        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
        
        TableApprovalStatus.setAutoResizeMode(TableApprovalStatus.AUTO_RESIZE_OFF);
        
    }
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID,6052,60521)) { //7008,70081
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6052,60522)) { //7008,70082
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6052,60523)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6052,60524)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            //cmdPreview.setEnabled(false);
            //cmdPrint.setEnabled(false);
        }
    }
    
    private void SetupApproval() {

        if(cmbHierarchy.getItemCount()>1) {
         cmbHierarchy.setEnabled(true);
         }
        //JOptionPane.showMessageDialog(null, "Approval Cmb : "+cmbHierarchy.getItemCount());
        //In Edit Mode Hierarchy Should be disabled
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID));
            txtFromRemarks.setText("");
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "Hierarchy Id = "+SelHierarchyID);
        //GenerateFromCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }

        if (EditMode == 0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            //txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
        
        if(clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID))
        {
             OpgReject.setEnabled(false);
        }
        if(clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID))
        {
            //JOptionPane.showMessageDialog(null, "Final Approver");
             OpgApprove.setEnabled(false);
        }
    }
    
     private void FormatGrid() {
        try {
            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            Table.setAutoResizeMode(0);

            DataModel.addColumn("SrNo"); //0 - Read Only
            DataModel.addColumn("MACHINE NO"); //1
            DataModel.addColumn("POSITION"); //2
            DataModel.addColumn("POSITION DESC"); //3
            DataModel.addColumn("PIECE NO"); //4
            DataModel.addColumn("PRODUCT"); //5
            DataModel.addColumn("DESCRIPTION"); //6
            DataModel.addColumn("GROUP"); //7
            DataModel.addColumn("LENGHT"); //8
            DataModel.addColumn("WIDTH"); //9
            DataModel.addColumn("GSM"); //10
            DataModel.addColumn("THORTICAL WEIGHT"); //11
            DataModel.addColumn("SQ MT"); //12
            DataModel.addColumn("STYLE"); //13
            DataModel.addColumn("REQ MONTH"); //14
            DataModel.addColumn("SYN(%)"); //15
            DataModel.addColumn("REMARK"); //16
            DataModel.addColumn("RATE"); //17
            DataModel.addColumn("BAS AMOUNT"); //18
            DataModel.addColumn("CHEM_TRT CHG"); //19
            DataModel.addColumn("SPIRAL CHG"); //20
            DataModel.addColumn("PIN CHG"); //21
            DataModel.addColumn("SEAM CHG"); //22
            DataModel.addColumn("INS IND"); //23
            DataModel.addColumn("INS AMT"); //24
            DataModel.addColumn("EXCISE"); //25
            DataModel.addColumn("DISC PER"); //26
            DataModel.addColumn("DISC AMT"); //27
            DataModel.addColumn("BAS_AMT - DISC_AMT"); //28
            DataModel.addColumn("ORDER AMT"); //18
            DataModel.addColumn("VAT1"); //19
            DataModel.addColumn("VAT4"); //20
            DataModel.addColumn("CST2"); //21
            DataModel.addColumn("CST5"); //22

            DataModel.SetVariable(0, "SrNo"); //0 - Read Only
            DataModel.SetVariable(1, "MACHINE_NO"); //1
            DataModel.SetVariable(2, "POSITION"); //2
            DataModel.SetVariable(3, "POSITION_DESC"); //3
            DataModel.SetVariable(4, "PIECE_NO"); //4
            DataModel.SetVariable(5, "PRODUCT"); //5
            DataModel.SetVariable(6, "DESCRIPTION"); //6
            DataModel.SetVariable(7, "GROUP"); //7
            DataModel.SetVariable(8, "LENGHT"); //8
            DataModel.SetVariable(9, "WIDTH"); //9
            DataModel.SetVariable(10, "GSM"); //10
            DataModel.SetVariable(11, "THORTICAL_WIDTH"); //11
            DataModel.SetVariable(12, "SQ_MTR"); //12
            DataModel.SetVariable(13, "STYLE"); //13
            DataModel.SetVariable(14, "REQ_MONTH"); //14
            DataModel.SetVariable(15, "SYN"); //15
            DataModel.SetVariable(16, "REMARK"); //16
            DataModel.SetVariable(17, "OV_RATE"); //17
            DataModel.SetVariable(18, "OV_BAS_AMOUNT"); //18
            DataModel.SetVariable(19, "OV_CHEM_TRT_CHG"); //19
            DataModel.SetVariable(20, "OV_SPIRAL_CHG"); //20
            DataModel.SetVariable(21, "OV_PIN_CHG"); //21
            DataModel.SetVariable(22, "OV_SEAM_CHG"); //22
            DataModel.SetVariable(23, "OV_INS_IND"); //23
            DataModel.SetVariable(24, "OV_INS_AMT"); //24
            DataModel.SetVariable(25, "OV_EXCISE"); //25
            DataModel.SetVariable(26, "OV_DISC_PER"); //26
            DataModel.SetVariable(27, "OV_DISC_AMT"); //27
            DataModel.SetVariable(28, "OV_DISC_BASAMT"); //28
            DataModel.SetVariable(29, "OV_AMT"); //18
            DataModel.SetVariable(30, "VAT1"); //19
            DataModel.SetVariable(31, "VAT4"); //20
            DataModel.SetVariable(32, "CST2"); //21
            DataModel.SetVariable(33, "CST5"); //22
            
            
            
            Table.getColumnModel().getColumn(0).setMinWidth(20);
            Table.getColumnModel().getColumn(1).setMinWidth(90);
            Table.getColumnModel().getColumn(2).setMinWidth(70);
            Table.getColumnModel().getColumn(3).setMinWidth(120);
            Table.getColumnModel().getColumn(4).setMinWidth(70);
            Table.getColumnModel().getColumn(5).setMinWidth(100);
            Table.getColumnModel().getColumn(6).setMinWidth(120);
            Table.getColumnModel().getColumn(7).setMinWidth(80);
            Table.getColumnModel().getColumn(8).setMinWidth(70);
            Table.getColumnModel().getColumn(9).setMinWidth(70);
            Table.getColumnModel().getColumn(10).setMinWidth(50);
            Table.getColumnModel().getColumn(11).setMinWidth(130);
            Table.getColumnModel().getColumn(12).setMinWidth(80);
            Table.getColumnModel().getColumn(13).setMinWidth(80);
            Table.getColumnModel().getColumn(14).setMinWidth(100);
            Table.getColumnModel().getColumn(15).setMinWidth(100);
            Table.getColumnModel().getColumn(16).setMinWidth(100);
            Table.getColumnModel().getColumn(17).setMinWidth(100);
            Table.getColumnModel().getColumn(18).setMinWidth(0);
            Table.getColumnModel().getColumn(18).setMaxWidth(0);
            Table.getColumnModel().getColumn(19).setMinWidth(0);
            Table.getColumnModel().getColumn(19).setMaxWidth(0);
            Table.getColumnModel().getColumn(20).setMinWidth(0);
            Table.getColumnModel().getColumn(20).setMaxWidth(0);
            Table.getColumnModel().getColumn(21).setMinWidth(0);
            Table.getColumnModel().getColumn(21).setMaxWidth(0);
            Table.getColumnModel().getColumn(22).setMinWidth(0);
            Table.getColumnModel().getColumn(22).setMaxWidth(0);
            Table.getColumnModel().getColumn(23).setMinWidth(0);
            Table.getColumnModel().getColumn(23).setMaxWidth(0);
            Table.getColumnModel().getColumn(24).setMinWidth(0);
            Table.getColumnModel().getColumn(24).setMaxWidth(0);
            Table.getColumnModel().getColumn(25).setMinWidth(0);
            Table.getColumnModel().getColumn(25).setMaxWidth(0);
            Table.getColumnModel().getColumn(26).setMinWidth(0);
            Table.getColumnModel().getColumn(26).setMaxWidth(0);
            Table.getColumnModel().getColumn(27).setMinWidth(0);
            Table.getColumnModel().getColumn(27).setMaxWidth(0);
            Table.getColumnModel().getColumn(28).setMinWidth(0);
            Table.getColumnModel().getColumn(28).setMaxWidth(0);
            Table.getColumnModel().getColumn(29).setMinWidth(120);
            Table.getColumnModel().getColumn(30).setMinWidth(0);
            Table.getColumnModel().getColumn(30).setMaxWidth(0);
            Table.getColumnModel().getColumn(31).setMinWidth(0);
            Table.getColumnModel().getColumn(31).setMaxWidth(0);
            Table.getColumnModel().getColumn(32).setMinWidth(0);
            Table.getColumnModel().getColumn(32).setMaxWidth(0);
            Table.getColumnModel().getColumn(33).setMinWidth(0);
            Table.getColumnModel().getColumn(33).setMaxWidth(0);
            
            TableColumn dateColumn = Table.getColumnModel().getColumn(14);
            
            JComboBox monthbox = new JComboBox();
            String month_name="";
            Date date=new Date();
            int month = date.getMonth();
            int year = date.getYear()+1900;
            for(int i=0;i<12;i++)
            {
                month = month+1;
                
                if(month >= 13)
                {
                    month=1;
                    year = year + 1;
                }
                
                if(month==1)
                {
                    month_name = "Jan"; 
                }
                else if(month == 2 )
                {
                    month_name = "Feb";
                }
                else if(month == 3 )
                {
                    month_name = "Mar";
                }
                else if(month == 4 )
                {
                    month_name = "Apr";
                }
                else if(month == 5 )
                {
                    month_name = "May";
                }
                else if(month == 6 )
                {
                    month_name = "Jun";
                }
                else if(month == 7 )
                {
                    month_name = "Jul";
                }
                else if(month == 8 )
                {
                    month_name = "Aug";
                }
                else if(month == 9 )
                {
                    month_name = "Sep";
                }
                else if(month == 10 )
                {
                    month_name = "Oct";
                }
                else if(month == 11 )
                {
                    month_name = "Nov";
                }
                else if(month == 12 )
                {
                    month_name = "Dec";
                }
                monthbox.addItem(month_name+" - "+year);
            }
            
            dateColumn.setCellEditor(new DefaultCellEditor(monthbox));
           
             //dateColumn.setCellEditor(new DatePi);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void FormatGridHS() {
        DataModelUpdateHistory=new EITLTableModel();
        
        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);
        
        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);
        
        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        
        TableUpdateHistory.setAutoResizeMode(TableUpdateHistory.AUTO_RESIZE_OFF);
    }
    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        String strCondition="";
        
        
        //----- Generate cmbType ------- //
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+ModuleId);
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+ModuleId);
        }
        
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(EITLERPGLOBAL.gNewUserID==clsFeltProductionApprovalFlow.getCreator(ModuleId , DOC_NO+"")) {
                List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+(ModuleId));
            }
            else {
                List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+ModuleId);
            }
        }
        
        for(int i=1;i<=List.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
    }
    
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsFeltProductionApprovalFlow.getRemainingUsers(ModuleId ,DOC_NO+"");
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
        
    }
    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus=new EITLTableModel();
        
        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);
        
        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);
        
        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
        
        TableColumnModel tcm= TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(90);
        tcm.getColumn(5).setPreferredWidth(90);
    }
    
    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory=new EITLTableModel();
        
        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);
        
        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);
        
        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        
        TableColumnModel tcm= TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(2).setPreferredWidth(50);
        tcm.getColumn(3).setPreferredWidth(20);
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        REMARK = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        S_O_NO = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        PARTY_CODE = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        PARTY_NAME = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        P_O_NO = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        REFERENCE = new javax.swing.JComboBox();
        P_O_DATE = new javax.swing.JFormattedTextField();
        ORDER_VALUE = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        REF_DATE = new javax.swing.JFormattedTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        DISTRICT = new javax.swing.JTextField();
        COUNTRY = new javax.swing.JTextField();
        REGION = new javax.swing.JTextField();
        S_ENGINEER = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        CITY = new javax.swing.JTextField();
        REMOVE = new javax.swing.JButton();
        S_O_DATE = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        StatusPanel = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblStatus1 = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        Tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        jLabel2.setText("S.O.Date");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(10, 20, 80, 17);

        jLabel3.setText("Order No");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(360, 20, 80, 17);

        jLabel5.setText("Remark");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(10, 260, 80, 17);
        jPanel1.add(REMARK);
        REMARK.setBounds(120, 250, 570, 27);

        jLabel7.setText("District");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(360, 140, 80, 17);

        jLabel8.setText("Sales Engineer");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(360, 100, 130, 17);

        S_O_NO.setBackground(new java.awt.Color(254, 242, 230));
        S_O_NO.setText("S00000001");
        S_O_NO.setEnabled(false);
        jPanel1.add(S_O_NO);
        S_O_NO.setBounds(490, 10, 200, 27);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 290, 910, 160);

        jLabel9.setText("Party Code");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(10, 60, 100, 20);

        PARTY_CODE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                PARTY_CODEFocusLost(evt);
            }
        });
        PARTY_CODE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PARTY_CODEKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PARTY_CODEKeyTyped(evt);
            }
        });
        jPanel1.add(PARTY_CODE);
        PARTY_CODE.setBounds(120, 50, 200, 27);

        jLabel10.setText("Party Name");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(360, 50, 120, 30);

        PARTY_NAME.setEditable(false);
        jPanel1.add(PARTY_NAME);
        PARTY_NAME.setBounds(490, 50, 200, 27);

        jLabel11.setText("Reference");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(360, 170, 100, 20);

        jLabel12.setText("P.O. No.");
        jPanel1.add(jLabel12);
        jLabel12.setBounds(10, 220, 52, 17);

        jLabel13.setText("P.O. Date");
        jPanel1.add(jLabel13);
        jLabel13.setBounds(210, 220, 100, 17);
        jPanel1.add(P_O_NO);
        P_O_NO.setBounds(120, 210, 80, 27);

        jLabel14.setText("Reference Date");
        jPanel1.add(jLabel14);
        jLabel14.setBounds(440, 210, 120, 30);

        REFERENCE.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "P.O.", "Email", "Telecom", "Our Own", "Sales Plan", "LOI (Letter Of Intent)" }));
        jPanel1.add(REFERENCE);
        REFERENCE.setBounds(490, 170, 200, 27);
        jPanel1.add(P_O_DATE);
        P_O_DATE.setBounds(280, 210, 150, 27);

        ORDER_VALUE.setEditable(false);
        ORDER_VALUE.setBackground(new java.awt.Color(209, 206, 203));
        ORDER_VALUE.setText("0");
        jPanel1.add(ORDER_VALUE);
        ORDER_VALUE.setBounds(740, 450, 170, 27);

        jLabel4.setText("Order Value ");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(660, 450, 90, 30);
        jPanel1.add(REF_DATE);
        REF_DATE.setBounds(550, 210, 140, 27);

        jLabel15.setText("Region");
        jPanel1.add(jLabel15);
        jLabel15.setBounds(10, 100, 43, 17);

        jLabel6.setText("Country");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(10, 180, 70, 17);

        DISTRICT.setEditable(false);
        jPanel1.add(DISTRICT);
        DISTRICT.setBounds(490, 130, 200, 27);

        COUNTRY.setEditable(false);
        jPanel1.add(COUNTRY);
        COUNTRY.setBounds(120, 170, 200, 27);

        REGION.setEditable(false);
        jPanel1.add(REGION);
        REGION.setBounds(120, 90, 200, 27);

        S_ENGINEER.setEditable(false);
        jPanel1.add(S_ENGINEER);
        S_ENGINEER.setBounds(490, 90, 200, 27);

        jLabel16.setText("City");
        jPanel1.add(jLabel16);
        jLabel16.setBounds(10, 140, 24, 17);

        CITY.setEditable(false);
        jPanel1.add(CITY);
        CITY.setBounds(120, 130, 200, 27);

        REMOVE.setText("REMOVE");
        REMOVE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                REMOVEActionPerformed(evt);
            }
        });
        jPanel1.add(REMOVE);
        REMOVE.setBounds(550, 450, 100, 29);
        jPanel1.add(S_O_DATE);
        S_O_DATE.setBounds(120, 10, 200, 30);

        Tab.addTab("Order Entry", jPanel1);

        jPanel2.setLayout(null);

        Tab2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 23, 66, 17);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(90, 20, 180, 27);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 62, 56, 17);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(90, 60, 180, 27);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 95, 62, 17);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(90, 95, 530, 27);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 130, 81, 17);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 22);

        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(90, 130, 180, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 253, 60, 17);

        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(90, 250, 180, 27);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 292, 60, 17);

        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 290, 570, 27);

        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(450, 400, 102, 29);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(630, 95, 33, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(570, 400, 102, 29);

        jPanel2.add(Tab2);
        Tab2.setBounds(10, 0, 760, 460);

        Tab.addTab("Approval", jPanel2);

        jPanel3.setLayout(null);

        StatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StatusPanel.setLayout(null);

        jLabel60.setText("Document Approval Status");
        StatusPanel.add(jLabel60);
        jLabel60.setBounds(12, 10, 242, 17);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableApprovalStatus);

        StatusPanel.add(jScrollPane2);
        jScrollPane2.setBounds(0, 40, 694, 120);

        jLabel19.setText("Document Update History");
        StatusPanel.add(jLabel19);
        jLabel19.setBounds(10, 170, 182, 17);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableUpdateHistory);

        StatusPanel.add(jScrollPane6);
        jScrollPane6.setBounds(10, 190, 540, 130);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdViewHistory);
        cmdViewHistory.setBounds(570, 170, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdNormalView);
        cmdNormalView.setBounds(570, 200, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 230, 132, 24);

        txtAuditRemarks.setEnabled(false);
        StatusPanel.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(570, 260, 129, 27);

        jButton4.setText("Next >>");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton4);
        jButton4.setBounds(660, 290, 100, 30);

        jButton5.setText("<<Previous");
        jButton5.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton5);
        jButton5.setBounds(560, 290, 100, 30);

        jPanel3.add(StatusPanel);
        StatusPanel.setBounds(10, 0, 790, 380);

        Tab.addTab("Status", jPanel3);

        getContentPane().add(Tab);
        Tab.setBounds(0, 80, 930, 520);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 930, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("Felt Sales Order");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 930, 25);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 580, 930, 22);

        lblStatus1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus1.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus1);
        lblStatus1.setBounds(0, 600, 930, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        if (evt.getKeyCode() == 112 || evt.getKeyCode() == 10) {
            if (PARTY_CODE.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Please select PARTY");
                PARTY_CODE.requestFocus();
            } 
            else if (Table.getSelectedColumn() == 1) {
                String minqlt = "";
                char mchr = ' ';
                mchr = evt.getKeyChar();
                if (mchr == '\b' || mchr == '\n') {
                    minqlt = Table.getValueAt(Table.getRowCount() - 1, 2).toString();
                } else {
                //    minqlt = Table.getValueAt(Table.getRowCount() - 1, 2).toString() + evt.getKeyChar();
                    minqlt = Table.getValueAt(Table.getRowCount() - 1, 2).toString();
                }
                searchkey search = new searchkey();
                search.SQL = "SELECT MM_MACHINE_NO,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_ITEM_CODE,MM_GRUP,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_STYLE FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='" + PARTY_CODE.getText() + "'";
                search.ReturnCol = 1;
                search.Party_Code = PARTY_CODE.getText();
                search.ShowReturnCol = true;
                search.DefaultSearchOn = 1;
                search.setsearchText(minqlt);
                if (search.ShowRSLOV()) {
                    if (Table.getCellEditor() != null) {
                        Table.getCellEditor().stopCellEditing();
                    }
                    seleval = search.ReturnVal;
                    seltyp = search.ReturnVal;
                    String secondval=search.SecondVal;
                    Table.setValueAt(search.ReturnVal, Table.getSelectedRow(), 1);
                    mlstrc = Table.getSelectedRow();
                    Table.changeSelection(mlstrc, 1, false, false);
                    System.out.println("SELEVAL = "+seleval); 
                    
                    String LastQuery = search.SQL;
                    System.out.println("Last Query = "+LastQuery);
                    
                    Connection Conn;
                    Statement  stmt;
                    ResultSet rsData;
    
                    String[] Piecedetail = {"","","","","","","","","","","","",""};
                    
                    try {
                            Conn = data.getConn();
                            stmt = Conn.createStatement();
                            rsData = stmt.executeQuery(LastQuery);
                            rsData.first();
                            
                            
                            //MM_MACHINE_NO 1,
                            //MM_MACHINE_POSITION 2,
                            //MM_MACHINE_POSITION_DESC 3,
                            //MM_ITEM_CODE 4,
                            //MM_GRUP 5,
                            //MM_FELT_LENGTH 6,
                            //MM_FELT_WIDTH 7,
                            //MM_FELT_GSM 8,
                            //MM_FELT_STYLE 9
                            Piecedetail[0] = rsData.getString(1);
                            Piecedetail[1] = rsData.getString(2);
                            Piecedetail[2] = rsData.getString(3);
                            Piecedetail[3] = rsData.getString(4);
                            Piecedetail[4] = rsData.getString(5);
                            Piecedetail[5] = rsData.getString(6);
                            Piecedetail[6] = rsData.getString(7);
                            Piecedetail[7] = rsData.getString(8);
                            Piecedetail[8] = rsData.getString(9);
                            
                                
                    } catch (Exception e) {
                          System.out.println("Error on connectrion = "+e.getMessage());  
                    }
                    Table.setValueAt(Piecedetail[0], Table.getSelectedRow(), 1);
                    Table.setValueAt(Piecedetail[1], Table.getSelectedRow(), 2);
                    Table.setValueAt(Piecedetail[2], Table.getSelectedRow(), 3);
                    Table.setValueAt("", Table.getSelectedRow(), 4);
                    Table.setValueAt(Piecedetail[3], Table.getSelectedRow(), 5);
                    
                    //FeltRateMasterServiceImpl frms = new FeltRateMasterServiceImpl();
                    //FeltRateMaster rate_master = frms.getDetailByItemCode(Piecedetail[3]);
                    //SELECT f FROM FeltRateMaster f WHERE f.feltRateMasterPK.itemCode = :itemCode
                    
                     String ITEM_DESC="",SYN="";
                     try {
                            Conn = data.getConn();
                            stmt = Conn.createStatement();
                            rsData = stmt.executeQuery("SELECT ITEM_DESC,SYN_PER FROM PRODUCTION.FELT_RATE_MASTER where ITEM_CODE = '"+Piecedetail[3]+"'");
                            rsData.first();
                            ITEM_DESC = rsData.getString(1);
                            SYN = rsData.getString(2);
                     }catch(Exception e)
                     {
                         System.out.println("Error : "+e.getMessage());
                     }
                    
                    Table.setValueAt(ITEM_DESC, Table.getSelectedRow(), 6);
                    Table.setValueAt(Piecedetail[4], Table.getSelectedRow(), 7);
                    Table.setValueAt(Piecedetail[5], Table.getSelectedRow(), 8);
                    Table.setValueAt(Piecedetail[6], Table.getSelectedRow(), 9);
                    Table.setValueAt(Piecedetail[7], Table.getSelectedRow(), 10);
                    
                    //System.out.println("Value = "+Float.parseFloat(Piecedetail[5]) * Float.parseFloat(Piecedetail[6]) * Float.parseFloat(Piecedetail[7])/1000);
                    //System.out.println("Value = "+Float.parseFloat(Piecedetail[5]) * Float.parseFloat(Piecedetail[6]));
                    DecimalFormat f_single=new DecimalFormat("##.0");
                    DecimalFormat f_double=new DecimalFormat("##.00");
                    float Theoritical_Weigth =  (Float.parseFloat(Piecedetail[5]) * Float.parseFloat(Piecedetail[6]) * Float.parseFloat(Piecedetail[7])/1000);
                    
                    float SQMT = (Float.parseFloat(Piecedetail[5]) * Float.parseFloat(Piecedetail[6]));
                    Table.setValueAt(f_single.format(Theoritical_Weigth), Table.getSelectedRow(), 11);
                    Table.setValueAt(f_double.format(SQMT), Table.getSelectedRow(), 12);
                    Table.setValueAt(Piecedetail[8], Table.getSelectedRow(), 13);
                    Table.setValueAt(SYN, Table.getSelectedRow(), 15);
                    
                   // FeltSalesOrderServiceImpl service = new FeltSalesOrderServiceImpl();
                    
                    FeltInvCalc  inv_calc = new FeltInvCalc();
                    
                    try {
                        DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
                        inv_calc = clsOrderValue.calculate("00000", Piecedetail[3], PARTY_CODE.getText(), Float.parseFloat(Piecedetail[5]), Float.parseFloat(Piecedetail[6]), Integer.parseInt(Piecedetail[7]), Float.parseFloat(f_single.format(Theoritical_Weigth)), SQMT, df1.format(df.parse(S_O_DATE.getText())));
                        //calculate(String Piece_No,String Product_Code,String Party_Code,Float Length,Float Width,Integer GSM,Float Weight,Float SQMT,String Order_Date)
                    } catch (ParseException ex) {
                        ex.printStackTrace();
                    }
                    
                    System.out.println("Inv Amt = "+inv_calc.getFicInvAmt());
                    Table.setValueAt(inv_calc.getFicRate(), Table.getSelectedRow(), 17);
                    Table.setValueAt(inv_calc.getFicBasAmount(), Table.getSelectedRow(), 18);
                    Table.setValueAt(inv_calc.getFicChemTrtChg(), Table.getSelectedRow(), 19);
                    Table.setValueAt(inv_calc.getFicSpiralChg(), Table.getSelectedRow(), 20);
                    Table.setValueAt(inv_calc.getFicPinChg(), Table.getSelectedRow(), 21);
                    Table.setValueAt(inv_calc.getFicSeamChg(), Table.getSelectedRow(), 22);
                    Table.setValueAt(inv_calc.getFicInsInd(), Table.getSelectedRow(), 23);
                    Table.setValueAt(inv_calc.getFicInsAmt(), Table.getSelectedRow(), 24);
                    Table.setValueAt(inv_calc.getFicExcise(), Table.getSelectedRow(), 25);
                    Table.setValueAt(inv_calc.getFicDiscPer(), Table.getSelectedRow(), 26);
                    Table.setValueAt(inv_calc.getFicDiscAmt(), Table.getSelectedRow(), 27);
                    Table.setValueAt(inv_calc.getFicDiscBasamt(), Table.getSelectedRow(), 28);
                    Table.setValueAt(inv_calc.getFicInvAmt(), Table.getSelectedRow(), 29);
                    
                    String vat1="-",vat4="-",cst2="-",cst5="-";
           
                    if(PARTY_CODE.getText().startsWith("831"))
                    {
                        vat1 = (inv_calc.getFicBasAmount()*1/100) + "";
                        vat4 = (inv_calc.getFicBasAmount()*4/100) + "";
                    }
                    else
                    {
                        clsSales_Party objParty = (clsSales_Party) clsSales_Party.getObjectExN(EITLERPGLOBAL.gCompanyID, PARTY_CODE.getText(), "210010");
                            PARTY_NAME.setText(objParty.getAttribute("PARTY_NAME").getString());
                            REGION.setText(objParty.getAttribute("ZONE").getString());
                            CITY.setText(objParty.getAttribute("CITY_ID").getString());
                            DISTRICT.setText(objParty.getAttribute("DISTRICT").getString());
                            COUNTRY.setText(objParty.getAttribute("COUNTRY_ID").getString());
                        
                        if(objParty.getAttribute("TIN_NO").getString() == null)
                        {
                            cst5 = (inv_calc.getFicBasAmount()*5/100) + "";
                        }
                        else if(objParty.getAttribute("TIN_NO").getString().equals(""))
                        {
                            cst5 = (inv_calc.getFicBasAmount()*5/100) + "";
                        }
                        else
                        {
                            cst2 = (inv_calc.getFicBasAmount()*2/100) + "";
                        }
                    }
                    Table.setValueAt(vat1,Table.getSelectedRow(), 30);
                    Table.setValueAt(vat4,Table.getSelectedRow(), 31);
                    Table.setValueAt(cst2,Table.getSelectedRow(), 32);
                    Table.setValueAt(cst5,Table.getSelectedRow(), 33);
                    
                    //service.addInvCalc(inv_calc);
                    
                    Table.changeSelection(Table.getSelectedRow()+1, 1, false, false);
                    
                    try {
                        //RowFormat.removeBackColors();
                        //CellAlign.removeBackColors();
                        Table.repaint();
                        Table.changeSelection(mlstrc, 1, false, false);
                        //RowFormat.setBackColor(mlstrc, 1, Color.LIGHT_GRAY);
                        //CellAlign.setBackColor(mlstrc, 1, Color.LIGHT_GRAY);
                        Table.repaint();

                    } catch (Exception e) {
                        System.out.println("Error on Table Setting :"+e.getMessage());
                    }
                    
                    Table.requestFocus();
                    cal_order_value();
                } 

                if (Table.getSelectedRow() == DataModel.getRowCount() - 1) {
                    Object[] rowData = new Object[15];
                    rowData[0] = DataModel.getRowCount() + 1;
                    DataModel.addRow(rowData);
                    
                }
            }
            
        }
    }//GEN-LAST:event_TableKeyPressed
    private void cal_order_value()
    {
        float inv_amt = 0;
        for(int i=0;i<Table.getRowCount();i++)
        {
            if(!Table.getValueAt(i, 29).toString().equals(""))
            {
                inv_amt = inv_amt + Float.parseFloat(Table.getValueAt(i, 29).toString());
            }    
        }
        ORDER_VALUE.setText(inv_amt+"");
    }
    private void PARTY_CODEFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PARTY_CODEFocusLost
   

    }//GEN-LAST:event_PARTY_CODEFocusLost

    private void PARTY_CODEKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PARTY_CODEKeyPressed
        PARTY_NAME.setText("");
        S_ENGINEER.setText("");
        REGION.setText("");
        CITY.setText("");
        DISTRICT.setText("");
        COUNTRY.setText("");
        if(evt.getKeyChar() == KeyEvent.VK_TAB || evt.getKeyChar() == 10)
        {
            try{
          //          PartyMasterServiceImpl partyService = new PartyMasterServiceImpl();
         //           DSalPartyMaster party = partyService.getFeltPartyDetail(PARTY_CODE.getText());
//                    System.out.println("Party Name = " + party.getPartyName());
//                    PARTY_NAME.setText(party.getPartyName());
//                        
//                        if("".equals(party.getInchargeCd()))
//                        {
//                            S_ENGINEER.setText("");
//                        }
//                        else
//                        {
//                            S_ENGINEER.setText(partyService.getInchargeName(party.getInchargeCd()));
//                        }
//                    
//                    REGION.setText(party.getZone());
//                    CITY.setText(party.getCityId());
//                    DISTRICT.setText(party.getDistrict());
//                    COUNTRY.setText(partyService.getCountryDetail(Integer.parseInt(party.getCountryId())).getCountryName());
//                    REFERENCE.requestFocus();
                    
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, "Please enter valid PARTY CODE");
                PARTY_CODE.requestFocus(); 
            }
        }   
        else if (evt.getKeyCode() == 112) 
        {
            try {
                        LOV aList = new LOV();

                        aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER  WHERE MAIN_ACCOUNT_CODE='210010' ORDER BY PARTY_NAME";
                        aList.ReturnCol = 1;
                        aList.ShowReturnCol = true;
                        aList.DefaultSearchOn = 2;
                        aList.UseSpecifiedConn = true;
                        aList.dbURL = EITLERPGLOBAL.DatabaseURL;

                        if (aList.ShowLOV()) {
                            PARTY_CODE.setText(aList.ReturnVal);
                            
                            clsSales_Party objParty = (clsSales_Party) clsSales_Party.getObjectExN(EITLERPGLOBAL.gCompanyID, aList.ReturnVal, "210010");
                            PARTY_NAME.setText(objParty.getAttribute("PARTY_NAME").getString());
                            REGION.setText(objParty.getAttribute("ZONE").getString());
                            CITY.setText(objParty.getAttribute("CITY_ID").getString());
                            DISTRICT.setText(objParty.getAttribute("DISTRICT").getString());
                            COUNTRY.setText(objParty.getAttribute("COUNTRY_ID").getString());
                            //PartyMasterServiceImpl partyService = new PartyMasterServiceImpl();
                            //DSalPartyMaster party = partyService.getFeltPartyDetail(aList.ReturnVal);
                            //JOptionPane.showMessageDialog(null, "Party Code on TextBox : "+aList.ReturnVal);
                            //System.out.println("Party = "+party.toString());
                            //System.out.println("Party CODE = " + party.getDSalPartyMasterPK().getPartyCode());
                            //PARTY_NAME.setText(party.getPartyName());
                            //String partyDetails[]=partyService.getPartyDetails(PARTY_CODE.getText());
                            //PARTY_NAME.setText(partyDetails[0]);

//                                if("".equals(party.getInchargeCd()))
//                                {
//                                    S_ENGINEER.setText("");
//                                }
//                                else
//                                {
//                                    //S_ENGINEER.setText(partyService.getInchargeName(party.getInchargeCd()));
//                                }

//                            REGION.setText(party.getZone());
//                            CITY.setText(party.getCityId());
//                            DISTRICT.setText(party.getDistrict());
//                            COUNTRY.setText(partyService.getCountryDetail(Integer.parseInt(party.getCountryId())).getCountryName());
                            
                            if(!PARTY_NAME.equals(""))
                            {
                                Object[] options = {"Yes","No"};
                                int reply = JOptionPane.showOptionDialog(this, "Do you want to update Machine Master?", 
                                                                "Confirmation", 
                                                                JOptionPane.YES_NO_OPTION, 
                                                                JOptionPane.WARNING_MESSAGE, 
                                                                null, options, options[1]);
                                if (reply == JOptionPane.YES_OPTION)
                                {   
                                        AppletFrame.startApplet("sdml.felt.ui.machinemaster.frmmachinesurveyAmend","Machine Master Amendment");    
                                }
                            }
                        }
                } catch (Exception e) {
                    e.printStackTrace();
                    System.out.println("Error = " + e.getMessage());
                }        
        }
    }//GEN-LAST:event_PARTY_CODEKeyPressed

    private void PARTY_CODEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PARTY_CODEKeyTyped
      

    }//GEN-LAST:event_PARTY_CODEKeyTyped

    private void REMOVEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_REMOVEActionPerformed
    
    }//GEN-LAST:event_REMOVEActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        
        //SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "On State Change SelHierarchyId : "+SelHierarchyID);
        GenerateSendToCombo();

        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }else {
            cmbSendTo.setEnabled(false);
        }

        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }else {
            OpgApprove.setEnabled(false);
            OpgApprove.setSelected(false);
        }
        
        if(clsHierarchy.IsCreator((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID))
        {
            OpgApprove.setEnabled(true);
            OpgReject.setEnabled(false);
            OpgReject.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
       
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "SelHierarchyId : "+SelHierarchyID);
        
        cmbSendTo.setEnabled(true);
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if(clsFeltProductionApprovalFlow.IsOnceRejectedDoc(ModuleId,DOC_NO+"")) {
                cmbSendTo.setEnabled(true);
                txtToRemarks.setEnabled(true);
                txtFromRemarks.setEnabled(true);
            }else {
                cmbSendTo.setEnabled(false);
           }
        }
        if(cmbSendTo.getItemCount()<=0) {
           GenerateSendToCombo();
        }
        
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(true);
        OpgHold.setSelected(false);
        txtToRemarks.setEnabled(false);
        if(!OpgApprove.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList=new HashMap();
        
        cmbSendToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        hmRejectedSendToList=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        
        for(int i=1;i<=hmRejectedSendToList.size();i++) {
            clsUser ObjUser=(clsUser) hmRejectedSendToList.get(Integer.toString(i));
            
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=ObjUser.getAttribute("USER_NAME").getString();
            
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                
                if(OpgApprove.isSelected()) {
                    IncludeUser=clsFeltProductionApprovalFlow.IncludeUserInApproval(ModuleId, DOC_NO+"", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    //JOptionPane.showMessageDialog(null, "Module Id :"+ModuleId+", DOC No : "+sorder_no+", User Id : "+ObjUser.getAttribute("USER_ID").getInt()+", New user Id "+SDMLERPGLOBAL.gNewUserID);
                    IncludeUser=clsFeltProductionApprovalFlow.IncludeUserInRejection(ModuleId, DOC_NO+"", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                   // JOptionPane.showMessageDialog(null, "IncludeUser = "+IncludeUser);
                }
                
                if(IncludeUser&&(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            }else {
                if((ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=clsFeltProductionApprovalFlow.getCreator(ModuleId,DOC_NO+"");
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
    }
    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged

    }//GEN-LAST:event_OpgApproveItemStateChanged

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
       lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
         // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged

    }//GEN-LAST:event_OpgFinalItemStateChanged

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
     
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged

    }//GEN-LAST:event_OpgRejectItemStateChanged

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
     
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged

    }//GEN-LAST:event_OpgHoldItemStateChanged

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
      
    }//GEN-LAST:event_OpgHoldFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
      
    }//GEN-LAST:event_cmbSendToFocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
       
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
       
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
      
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
       
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
      
    }//GEN-LAST:event_Tab2FocusGained

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
     
    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
       
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
      
    }//GEN-LAST:event_jButton5ActionPerformed

    private void TabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabMouseClicked
       
    }//GEN-LAST:event_TabMouseClicked

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
         MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
         MoveNext();
     
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
       MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
       if(JOptionPane.showConfirmDialog(this,"Are you sure want to delete this record ?","DELETE RECORD",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
       Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
       Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
       
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
       ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    private void MoveFirst() {
        feltOrder.MoveFirst();
        DisplayData();
    }
    
    private void MovePrevious() {
        feltOrder.MovePrevious();
        DisplayData();
    }
    
    private void MoveNext() {
        feltOrder.MoveNext();
        DisplayData();
    }
    
    private void MoveLast() {
        feltOrder.MoveLast();
        DisplayData();
    }
    private void Add() {
        //  EditMode=EITLERPGLOBAL.ADD;
    
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        
        EditMode=EITLERPGLOBAL.ADD;
        
        SetFields(true);
        DisableToolbar();
        
        
        SetupApproval();
        lblTitle.setBackground(Color.BLUE);
        
        clearFields();
        S_O_DATE.requestFocus();
        
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=602;
        aList.FirstFreeNo=195;  
     
        S_O_DATE.setText(df.format(new Date()));
        FFNo = aList.FirstFreeNo;
        S_O_NO.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo,  false));
     
    }
    private void Save() {
        
        if(Table.getRowCount()<=0) {
             JOptionPane.showMessageDialog(this,"Enter Piece Updation Details Before Saving.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        SetData();
        
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(this,"Select the hierarchy.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this,"Select the Approval Action.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Enter the remarks for rejection","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if( (OpgApprove.isSelected()||OpgReject.isSelected()) && cmbSendTo.getItemCount()<=0) {
            JOptionPane.showMessageDialog(this,"Select the user, to whom rejected document to be send","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
     
        //feltOrder.LoadData();
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(feltOrder.Insert()) {
                                                SelectFirstFree aList=new SelectFirstFree();
                                                aList.ModuleID=602;
                                                aList.FirstFreeNo=195;  
                                                FFNo = aList.FirstFreeNo;
                                                clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo,  true);
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(this,"Error occured while saving. Error is "+feltOrder.LastError," SAVING ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
//        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(feltOrder.Update()) {
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(this,"Error occured while saving editing. Error is "+feltOrder.LastError,"SAVING ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
//        try {
//            if(PENDING_DOCUMENT){
//                frmPA.RefreshView();
//                PENDING_DOCUMENT=false;
//            }
//        }catch(Exception e)
//        {e.printStackTrace();
//        }
//        
    }
    private void Cancel() {
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        
    }
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    private void Edit() {
        
        String productionDocumentNo=(String)feltOrder.getAttribute("S_ORDER_NO").getObj();
        if(feltOrder.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode=EITLERPGLOBAL.EDIT;
            
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
           // SetupApproval();
            //ReasonResetReadonly();
            //cmbOrderReason.setEnabled(false);
            if(clsFeltProductionApprovalFlow.IsCreator(602,productionDocumentNo)) {
                SetFields(true);
                
            }
            else {
                
                EnableApproval();
            }
        }
        else {
            JOptionPane.showMessageDialog(this,"You cannot edit this record. It is either approved/rejected or waiting approval for other user","EDITING ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void Delete() {
        if(feltOrder.CanDelete(S_O_NO.getText(),S_O_DATE.getText(), EITLERPGLOBAL.gNewUserID)){
            DisplayData();
        }
        else {
            JOptionPane.showMessageDialog(this,feltOrder.LastError,"DELETION ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList=new HashMap();
        
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        hmHierarchyList=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+ModuleId+" ");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            hmHierarchyList=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+ModuleId+" ");
        }
        for(int i=1;i<=hmHierarchyList.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }
    private void GenerateSendToCombo() {
        HashMap hmSendToList=new HashMap();
        try{
            cmbSendToModel=new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if(EditMode==EITLERPGLOBAL.ADD) {
                hmSendToList=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=hmSendToList.size();i++) {
                    clsUser ObjUser=(clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            }else {
                hmSendToList= clsFeltProductionApprovalFlow.getRemainingUsers(ModuleId,Order_No_Conversion.Order_No_Only(S_O_NO.getText())+"");
                for(int i=1;i<=hmSendToList.size();i++) {
                    clsUser ObjUser=(clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
//        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
//            if(Tab1.getComponent(i).getName()!=null) {
//                
//                FieldName=Tab1.getComponent(i).getName();
//                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
//                    Tab1.getComponent(i).setEnabled(true);
//                }
//            }
//        }
        //=============== Header Fields Setup Complete =================//
        
        //=============== Setting Table Fields ==================//
        Table.setEnabled(true);
    }
    private void SetFields(boolean pStat) {
         S_O_DATE.setEnabled(pStat);
         S_O_NO.setEnabled(pStat);
         PARTY_CODE.setEnabled(pStat);
         PARTY_NAME.setEnabled(pStat);
         REGION.setEnabled(pStat);
         S_ENGINEER.setEnabled(pStat);
         CITY.setEnabled(pStat);
         DISTRICT.setEnabled(pStat);
         COUNTRY.setEnabled(pStat);
         REFERENCE.setEnabled(pStat);
         REF_DATE.setEnabled(pStat);
         P_O_NO.setEnabled(pStat);
         P_O_DATE.setEnabled(pStat);
         REMARK.setEnabled(pStat);
         cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        SetupApproval();
    }
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
        
    }
    
    private void SetData() {
        
        feltOrder.setAttribute("S_ORDER_NO",Order_No_Conversion.Order_No_Only(S_O_NO.getText()));
        feltOrder.setAttribute("S_ORDER_DATE",S_O_DATE.getText());
        feltOrder.setAttribute("REGION",REGION.getText());
        feltOrder.setAttribute("SALES_ENGINEER",S_ENGINEER.getText());
        feltOrder.setAttribute("PARTY_CODE",PARTY_CODE.getText());
        feltOrder.setAttribute("PARTY_NAME",PARTY_NAME.getText());
        feltOrder.setAttribute("REFERENCE",REFERENCE.getSelectedItem());
        feltOrder.setAttribute("REFERENCE_DATE",REF_DATE.getText());
        feltOrder.setAttribute("P_O_NO",P_O_NO.getText());
        feltOrder.setAttribute("P_O_DATE",P_O_DATE.getText());
        feltOrder.setAttribute("REMARK",REMARK.getText());
        DOC_NO = Order_No_Conversion.Order_No_Only(S_O_NO.getText());
        feltOrder.setAttribute("DOC_NO",S_O_NO.getText());
        feltOrder.setAttribute("DOC_DATE",S_O_DATE.getText());
        feltOrder.setAttribute("MODULE_ID",ModuleId);
        feltOrder.setAttribute("USER_ID",EITLERPGLOBAL.gNewUserID);
   
        //----- Update Approval Specific Fields -----------//
        feltOrder.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        feltOrder.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        feltOrder.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        feltOrder.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            feltOrder.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            feltOrder.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            feltOrder.setAttribute("APPROVAL_STATUS","R");
            feltOrder.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            feltOrder.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            feltOrder.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            feltOrder.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        else {
            feltOrder.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
            feltOrder.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            feltOrder.setAttribute("UPDATED_BY",EITLERPGLOBAL.gNewUserID);
            feltOrder.setAttribute("UPDATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        
        //======= Set Line part ============
        try
        {
            feltOrder.hmFeltSalesOrderDetails.clear();
         
            for(int i=0;i<=Table.getRowCount()-1;i++) {
                if(!DataModel.getValueAt(i, 1).toString().equals(""))
                {
                    clsFeltSalesOrderDetails objFeltOrderDetails = new clsFeltSalesOrderDetails();

                    //objFeltOrderDetails.setAttribute("S_ORDER_DETAIL_CODE","");
                    objFeltOrderDetails.setAttribute("S_ORDER_NO",feltOrder.getAttribute("S_ORDER_NO").getInt());
                    objFeltOrderDetails.setAttribute("MACHINE_NO",DataModel.getValueAt(i, 1).toString());
                    objFeltOrderDetails.setAttribute("POSITION",DataModel.getValueAt(i, 2).toString());
                    objFeltOrderDetails.setAttribute("POSITION_DESC",DataModel.getValueAt(i, 3).toString());
                    objFeltOrderDetails.setAttribute("PIECE_NO",DataModel.getValueAt(i, 4).toString());
                    objFeltOrderDetails.setAttribute("PRODUCT_CODE",DataModel.getValueAt(i, 5).toString());
                    objFeltOrderDetails.setAttribute("PRODUCT_DESC",DataModel.getValueAt(i, 6).toString());
                    objFeltOrderDetails.setAttribute("S_GROUP",DataModel.getValueAt(i, 7).toString());
                    objFeltOrderDetails.setAttribute("LENGTH",DataModel.getValueAt(i, 8).toString());
                    objFeltOrderDetails.setAttribute("WIDTH",DataModel.getValueAt(i, 9).toString());
                    objFeltOrderDetails.setAttribute("GSM",DataModel.getValueAt(i, 10).toString());
                    objFeltOrderDetails.setAttribute("THORITICAL_WIDTH",DataModel.getValueAt(i, 11).toString());
                    objFeltOrderDetails.setAttribute("SQ_MTR",DataModel.getValueAt(i, 12).toString());
                    objFeltOrderDetails.setAttribute("STYLE",DataModel.getValueAt(i, 13).toString());
                    objFeltOrderDetails.setAttribute("REQ_MONTH",DataModel.getValueAt(i, 14).toString());
                    objFeltOrderDetails.setAttribute("SYN_PER",DataModel.getValueAt(i, 15).toString());
                    objFeltOrderDetails.setAttribute("REMARK",DataModel.getValueAt(i, 16).toString());
                    objFeltOrderDetails.setAttribute("OV_RATE",DataModel.getValueAt(i, 17).toString());
                    objFeltOrderDetails.setAttribute("OV_BAS_AMOUNT",DataModel.getValueAt(i, 18).toString());
                    objFeltOrderDetails.setAttribute("OV_CHEM_TRT_CHG",DataModel.getValueAt(i, 19).toString());
                    objFeltOrderDetails.setAttribute("OV_SPIRAL_CHG",DataModel.getValueAt(i, 20).toString());
                    objFeltOrderDetails.setAttribute("OV_PIN_CHG",DataModel.getValueAt(i, 21).toString());
                    objFeltOrderDetails.setAttribute("OV_SEAM_CHG",DataModel.getValueAt(i, 22).toString());
                    objFeltOrderDetails.setAttribute("OV_INS_IND",DataModel.getValueAt(i, 23).toString());
                    objFeltOrderDetails.setAttribute("OV_INS_AMT",DataModel.getValueAt(i, 24).toString());
                    objFeltOrderDetails.setAttribute("OV_EXCISE",DataModel.getValueAt(i, 25).toString());
                    objFeltOrderDetails.setAttribute("OV_DISC_PER",DataModel.getValueAt(i, 26).toString());
                    objFeltOrderDetails.setAttribute("OV_DISC_AMT",DataModel.getValueAt(i, 27).toString());
                    objFeltOrderDetails.setAttribute("OV_DISC_BASAMT",DataModel.getValueAt(i, 28).toString());
                    objFeltOrderDetails.setAttribute("OV_AMT",DataModel.getValueAt(i, 29).toString());
                
                    feltOrder.hmFeltSalesOrderDetails.put(Integer.toString(feltOrder.hmFeltSalesOrderDetails.size()+1), objFeltOrderDetails);
                }
            }
        }catch(Exception e){
            System.out.println("Eroor on setData");
            e.printStackTrace();
        };
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CITY;
    private javax.swing.JTextField COUNTRY;
    private javax.swing.JTextField DISTRICT;
    private javax.swing.JTextField ORDER_VALUE;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTextField PARTY_CODE;
    private javax.swing.JTextField PARTY_NAME;
    private javax.swing.JFormattedTextField P_O_DATE;
    private javax.swing.JTextField P_O_NO;
    private javax.swing.JComboBox REFERENCE;
    private javax.swing.JFormattedTextField REF_DATE;
    private javax.swing.JTextField REGION;
    private javax.swing.JTextField REMARK;
    private javax.swing.JButton REMOVE;
    private javax.swing.JTextField S_ENGINEER;
    private javax.swing.JFormattedTextField S_O_DATE;
    private javax.swing.JTextField S_O_NO;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStatus1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
}
