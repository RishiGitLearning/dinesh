/*
 * frmChangePassword.java
 *
 * Created on July 3, 2004, 3:36 PM
 */
package SDMLATTPAY.LeaveBalance;

import EITLERP.*;
import EITLERP.Finance.UtilFunctions;
import SDMLATTPAY.Employee.clsMaster;
import TReportWriter.TReportEngine;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.io.File;
import java.sql.*;
import javax.swing.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
//import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
//import EITLERP.Sales.clsExcelExporter;

/*<APPLET CODE=frmChangePassword HEIGHT=200 WIDTH=430></APPLET>*/
/**
 *
 * @author Daxesh Prajapati
 */
public class FrmLeaveBalance extends javax.swing.JApplet {

    private clsExcel_Exporter exp = new clsExcel_Exporter();

    private EITLTableModel DataModel = new EITLTableModel();

    private EITLComboModel modelDept = new EITLComboModel();
    private EITLComboModel modelShift = new EITLComboModel();
    private EITLComboModel modelMainCategory = new EITLComboModel();
    private EITLComboModel modelCategory = new EITLComboModel();
    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();
    String query = "";
    //GenerateInvoiceParameterModificationCombo();
    /**
     * Initializes the applet frmChangePassword
     */
    public void init() {
        initComponents();
        setSize(1000, 750);

        jLabel1.setForeground(Color.WHITE);
        txtDate.setText("");

        GenerateDeptCombo();
        GenerateShiftCombo();
        GenerateMainCategoryCombo();
        GenerateCategoryCombo();

        FormatGrid();
        txtYear.setText(EITLERPGLOBAL.getCurrentYear()+"");
        String Month = "";
        int mon = EITLERPGLOBAL.getCurrentMonth()-1;
        
        if(EITLERPGLOBAL.getCurrentDay()<6)
        {
            mon = EITLERPGLOBAL.getCurrentMonth()-2;
        }
        
        if(mon<=9)
        {
            Month = "0" + mon;        
        }
        else{
            Month = ""+mon;
        }
        cmbMonth.setSelectedItem(Month);
        //cmbMonth.setVisible(false);
        //lblMonthCmb.setVisible(false);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ExporttoExcelFileChooser = new javax.swing.JFileChooser();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        file1 = new javax.swing.JFileChooser();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblEmpNo = new javax.swing.JLabel();
        lblMonthCmb = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        cmbMonth = new javax.swing.JComboBox();
        btnClear = new javax.swing.JButton();
        txtEmpNo = new javax.swing.JTextField();
        txtEmpName = new javax.swing.JTextField();
        lblYearCmb = new javax.swing.JLabel();
        lblDeptCmb = new javax.swing.JLabel();
        cmbDept = new javax.swing.JComboBox();
        lblShiftCmb = new javax.swing.JLabel();
        cmbShift = new javax.swing.JComboBox();
        txtYear = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        cmbMainCategory = new javax.swing.JComboBox();
        jLabel27 = new javax.swing.JLabel();
        cmbCategory = new javax.swing.JComboBox();
        jScrollPane25 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        btnEmpMstETE = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        getContentPane().setLayout(null);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setText("Attendance - Leave Balance");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 2, 1000, 25);

        jLabel2.setBackground(new java.awt.Color(0, 102, 153));
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 120, 1000, 10);

        lblEmpNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEmpNo.setText("Employee No : ");
        getContentPane().add(lblEmpNo);
        lblEmpNo.setBounds(10, 30, 110, 20);

        lblMonthCmb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMonthCmb.setText("Month : ");
        getContentPane().add(lblMonthCmb);
        lblMonthCmb.setBounds(680, 30, 60, 20);

        lblDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDate.setText("Date : ");
        getContentPane().add(lblDate);
        lblDate.setBounds(680, 90, 60, 20);

        txtDate = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();
        getContentPane().add(txtDate);
        txtDate.setBounds(740, 90, 100, 20);

        cmbMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        getContentPane().add(cmbMonth);
        cmbMonth.setBounds(740, 30, 100, 20);

        btnClear.setText("Clear All");
        btnClear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnClear.setMargin(new java.awt.Insets(2, 7, 2, 7));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        getContentPane().add(btnClear);
        btnClear.setBounds(860, 40, 130, 30);

        txtEmpNo.setToolTipText("Press F1 key for search Employee No");
        txtEmpNo = new JTextFieldHint(new JTextField(),"Search by F1");
        txtEmpNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmpNoFocusLost(evt);
            }
        });
        txtEmpNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEmpNoKeyPressed(evt);
            }
        });
        getContentPane().add(txtEmpNo);
        txtEmpNo.setBounds(120, 30, 120, 20);

        txtEmpName.setEditable(false);
        txtEmpName.setDisabledTextColor(java.awt.Color.black);
        txtEmpName.setEnabled(false);
        getContentPane().add(txtEmpName);
        txtEmpName.setBounds(250, 30, 280, 20);

        lblYearCmb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYearCmb.setText("Year : ");
        getContentPane().add(lblYearCmb);
        lblYearCmb.setBounds(680, 60, 60, 20);

        lblDeptCmb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDeptCmb.setText("Department : ");
        getContentPane().add(lblDeptCmb);
        lblDeptCmb.setBounds(10, 60, 110, 20);

        cmbDept.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbDept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDeptActionPerformed(evt);
            }
        });
        getContentPane().add(cmbDept);
        cmbDept.setBounds(120, 60, 190, 20);

        lblShiftCmb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblShiftCmb.setText("Shift : ");
        getContentPane().add(lblShiftCmb);
        lblShiftCmb.setBounds(10, 90, 110, 20);

        cmbShift.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(cmbShift);
        cmbShift.setBounds(120, 90, 190, 20);
        getContentPane().add(txtYear);
        txtYear.setBounds(740, 60, 80, 20);

        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel37.setText("Main Category : ");
        getContentPane().add(jLabel37);
        jLabel37.setBounds(330, 60, 120, 20);

        cmbMainCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(cmbMainCategory);
        cmbMainCategory.setBounds(450, 60, 190, 20);

        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel27.setText("Category : ");
        getContentPane().add(jLabel27);
        jLabel27.setBounds(330, 90, 120, 20);

        cmbCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(cmbCategory);
        cmbCategory.setBounds(450, 90, 190, 20);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane25.setViewportView(Table);

        getContentPane().add(jScrollPane25);
        jScrollPane25.setBounds(0, 140, 1000, 400);

        btnEmpMstETE.setLabel("Export to Excel");
        btnEmpMstETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpMstETEActionPerformed(evt);
            }
        });
        getContentPane().add(btnEmpMstETE);
        btnEmpMstETE.setBounds(830, 550, 150, 30);

        jButton1.setText("Show Data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(860, 80, 130, 25);

        jButton2.setText("Report");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(654, 550, 150, 25);
    }// </editor-fold>//GEN-END:initComponents

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtEmpName.setText("");
        txtEmpNo.setText("");
        txtDate.setText("");
        txtYear.setText("");
        cmbMonth.setSelectedIndex(0);
        cmbDept.setSelectedIndex(0);
        cmbShift.setSelectedIndex(0);
        cmbMainCategory.setSelectedIndex(0);
        cmbCategory.setSelectedIndex(0);
    }//GEN-LAST:event_btnClearActionPerformed


    private void txtEmpNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmpNoFocusLost
        // TODO add your handling code here:
        if (!txtEmpNo.getText().trim().equals("") && data.IsRecordExist("SELECT * FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpNo.getText().trim() + "' AND APPROVED=1 AND CANCELED=0")) {
            txtEmpName.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpNo.getText() + "'"));
        } else {
            if (!txtEmpNo.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Employee No doesn't exist/under approval.");
            }
            txtEmpNo.setText("");
            txtEmpName.setText("");
        }
    }//GEN-LAST:event_txtEmpNoFocusLost

    private void txtEmpNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpNoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();
            aList.SQL = "SELECT PAY_EMP_NO,EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE APPROVED=1 AND CANCELED=0";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtEmpNo.setText(aList.ReturnVal);
                txtEmpName.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpNo.getText() + "'"));
            }
        }
    }//GEN-LAST:event_txtEmpNoKeyPressed

    private void btnEmpMstETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpMstETEActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnEmpMstETEActionPerformed

    private void cmbDeptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDeptActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmbDeptActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        GenerateData();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        try {
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData = new TReportWriter.SimpleDataProvider.TTable();
            /*
            , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 
            */
            objReportData.AddColumn("YYYY");
            objReportData.AddColumn("EMPID");
            objReportData.AddColumn("EMP_NAME");
            objReportData.AddColumn("LV_NO");
            objReportData.AddColumn("LEAVE_CD");
            objReportData.AddColumn("OP_LEAVE");
            objReportData.AddColumn("TOTAL_EARN_LV");
            objReportData.AddColumn("TOT_OP_LV");
            objReportData.AddColumn("JOIN_DT");
            objReportData.AddColumn("DEPT");
            objReportData.AddColumn("LV_TYPE");
            objReportData.AddColumn("JAN");
            objReportData.AddColumn("FEB");
            objReportData.AddColumn("MARCH");
            objReportData.AddColumn("APRIL");
            objReportData.AddColumn("MAY");
            objReportData.AddColumn("JUNE");
            objReportData.AddColumn("JULY");
            objReportData.AddColumn("AUG");
            objReportData.AddColumn("SEPT");
            objReportData.AddColumn("OCT");
            objReportData.AddColumn("NOVE");
            objReportData.AddColumn("DECE");
            objReportData.AddColumn("TOTAL_EJ");
            objReportData.AddColumn("ENCASH1");
            objReportData.AddColumn("CL_BL");
            objReportData.AddColumn("LEAVE_DEDUCT");
            objReportData.AddColumn("GROUP_CODE");
            objReportData.AddColumn("SRNO");
            objReportData.AddColumn("LEFT_DATE");
            objReportData.AddColumn("LEFT_IND");
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow = objReportData.newRow();

            objOpeningRow.setValue("YYYY", "");
            objOpeningRow.setValue("EMPID", "");
            objOpeningRow.setValue("EMP_NAME", "");
            objOpeningRow.setValue("LV_NO", "");
            objOpeningRow.setValue("LEAVE_CD", "");
            objOpeningRow.setValue("OP_LEAVE", "");
            objOpeningRow.setValue("TOTAL_EARN_LV", "");
            objOpeningRow.setValue("TOT_OP_LV", "");
            objOpeningRow.setValue("JOIN_DT", "");
            objOpeningRow.setValue("DEPT", "");
            objOpeningRow.setValue("LV_TYPE", "");
            objOpeningRow.setValue("JAN", "");
            objOpeningRow.setValue("FEB", "");
            objOpeningRow.setValue("MARCH", "");
            objOpeningRow.setValue("APRIL", "");
            objOpeningRow.setValue("MAY", "");
            objOpeningRow.setValue("JUNE", "");
            objOpeningRow.setValue("JULY", "");
            objOpeningRow.setValue("AUG", "");
            objOpeningRow.setValue("SEPT", "");
            objOpeningRow.setValue("OCT", "");
            objOpeningRow.setValue("NOVE", "");
            objOpeningRow.setValue("DECE", "");
            objOpeningRow.setValue("TOTAL_EJ", "");
            objOpeningRow.setValue("ENCASH1", "");
            objOpeningRow.setValue("CL_BL", "");
            objOpeningRow.setValue("LEAVE_DEDUCT", "");
            objOpeningRow.setValue("GROUP_CODE", "");
            objOpeningRow.setValue("SRNO", "");
            objOpeningRow.setValue("LEFT_DATE", "");
            objOpeningRow.setValue("LEFT_IND", "");
            

            String query_str = "";

            DateFormat df = new SimpleDateFormat("dd/mm/yyyy");
            DateFormat df1 = new SimpleDateFormat("yyyy-mm-dd");

           // DOC_NO = S_O_NO.getText();

            //String strSQL="SELECT A.PKG_BALE_NO,A.PKG_BALE_DATE,A.PKG_PARTY_CODE,A.PKG_PARTY_NAME,PKG_TRANSPORT_MODE, A.PKG_STATION,A.PKG_BOX_SIZE, B.PKG_PIECE_NO,B.PKG_LENGTH,B.PKG_WIDTH,B.PKG_GSM,B.PKG_SQM,B.PKG_ORDER_NO, B.PKG_ORDER_DATE,B.PKG_MCN_POSITION_DESC,B.PKG_STYLE,B.PKG_SYN_PER,B.PKG_PRODUCT_CODE FROM PRODUCTION.FELT_PKG_SLIP_HEADER A,PRODUCTION.FELT_PKG_SLIP_DETAIL B WHERE A.PKG_PARTY_CODE='"+txtPartyCode.getText().trim()+"' GROUP BY A.PKG_PARTY_CODE;";
            //String strSQL="SELECT A.S_ORDER_DATE,A.PARTY_CODE,substr(A.PARTY_NAME,1,25) AS PARTY_NAME,A.REGION, B.MACHINE_NO,B.POSITION,B.PIECE_NO,B.PRODUCT_CODE,B.S_GROUP,B.SYN_PER,B.LENGTH,B.WIDTH,B.GSM,B.OV_RATE,B.OV_AMT  FROM PRODUCTION.FELT_SALES_ORDER_HEADER A,PRODUCTION.FELT_SALES_ORDER_DETAIL B where A.APPROVED=1 AND B.PIECE_NO!=''  AND A.PARTY_CODE!='' "+query_str+" and A.S_ORDER_NO = B.S_ORDER_NO";
             System.out.println(query);

            ResultSet rsTmp = data.getResult(query);
            rsTmp.first();

            int Counter = 0;

            if (rsTmp.getRow() > 0) {
                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    objRow = objReportData.newRow();
                    //, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 
                    objRow.setValue("YYYY", UtilFunctions.getString(rsTmp, "YYYY", ""));
                    objRow.setValue("EMPID", UtilFunctions.getString(rsTmp, "EMPID", ""));
                    objRow.setValue("EMP_NAME", UtilFunctions.getString(rsTmp, "EMP_NAME", ""));
                    objRow.setValue("LV_NO", UtilFunctions.getString(rsTmp, "LV_NO", ""));
                    objRow.setValue("LEAVE_CD", UtilFunctions.getString(rsTmp, "LEAVE_CD", ""));
                    objRow.setValue("OP_LEAVE", UtilFunctions.getString(rsTmp, "OP_LEAVE", ""));
                    objRow.setValue("TOTAL_EARN_LV", UtilFunctions.getString(rsTmp, "TOTAL_EARN_LV", ""));
                    objRow.setValue("TOT_OP_LV", UtilFunctions.getString(rsTmp, "TOT_OP_LV", ""));
                    objRow.setValue("JOIN_DT", UtilFunctions.getString(rsTmp, "JOIN_DT", ""));
                    objRow.setValue("DEPT", UtilFunctions.getString(rsTmp, "DEPT", ""));
                    objRow.setValue("LV_TYPE", UtilFunctions.getString(rsTmp, "LV_TYPE", ""));
                    objRow.setValue("JAN", UtilFunctions.getString(rsTmp, "JAN", ""));
                    objRow.setValue("FEB", UtilFunctions.getString(rsTmp, "FEB", ""));
                    objRow.setValue("MARCH", UtilFunctions.getString(rsTmp, "MARCH", ""));
                    objRow.setValue("APRIL", UtilFunctions.getString(rsTmp, "APRIL", ""));
                    objRow.setValue("MAY", UtilFunctions.getString(rsTmp, "MAY", ""));
                    objRow.setValue("JUNE", UtilFunctions.getString(rsTmp, "JUNE", ""));
                    objRow.setValue("JULY", UtilFunctions.getString(rsTmp, "JULY", ""));
                    objRow.setValue("AUG", UtilFunctions.getString(rsTmp, "AUG", ""));
                    objRow.setValue("SEPT", UtilFunctions.getString(rsTmp, "SEPT", ""));
                    objRow.setValue("OCT", UtilFunctions.getString(rsTmp, "OCT", ""));
                    objRow.setValue("NOVE", UtilFunctions.getString(rsTmp, "NOVE", ""));
                    objRow.setValue("DECE", UtilFunctions.getString(rsTmp, "DECE", ""));
                    objRow.setValue("TOTAL_EJ", UtilFunctions.getString(rsTmp, "TOTAL_EJ", ""));
                    objRow.setValue("ENCASH1", UtilFunctions.getString(rsTmp, "ENCASH1", ""));
                    objRow.setValue("CL_BL", UtilFunctions.getString(rsTmp, "CL_BL", ""));
                    objRow.setValue("LEAVE_DEDUCT", UtilFunctions.getString(rsTmp, "LEAVE_DEDUCT", ""));
                    objRow.setValue("GROUP_CODE", UtilFunctions.getString(rsTmp, "GROUP_CODE", ""));
                    objRow.setValue("SRNO", UtilFunctions.getString(rsTmp, "SRNO", ""));
                    objRow.setValue("LEFT_DATE", UtilFunctions.getString(rsTmp, "LEFT_DATE", ""));
                    objRow.setValue("LEFT_IND", UtilFunctions.getString(rsTmp, "LEFT_IND", ""));
                    

                    objReportData.AddRow(objRow);

                    rsTmp.next();
                }
            }

            int Comp_ID = EITLERPGLOBAL.gCompanyID;

            HashMap Parameters = new HashMap();
            Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());
            if(cmbMonth.getSelectedIndex()==0)
            {
                Parameters.put("MONTH", "");
            }
            else
            {
                //Parameters.put("MONTH", cmbMonth.getSelectedItem());
                String m = cmbMonth.getSelectedItem().toString();
                if(cmbMonth.getSelectedItem().equals("01"))
                {
                    m= "JAN";
                }
                else if(cmbMonth.getSelectedItem().equals("02"))
                {
                    m= "FEB";
                }
                else if(cmbMonth.getSelectedItem().equals("03"))
                {
                    m= "MAR";
                }
                else if(cmbMonth.getSelectedItem().equals("04"))
                {
                    m= "APR";
                }
                else if(cmbMonth.getSelectedItem().equals("05"))
                {
                    m= "MAY";
                }
                else if(cmbMonth.getSelectedItem().equals("06"))
                {
                    m= "JUN";
                }else if(cmbMonth.getSelectedItem().equals("07"))
                {
                    m= "JUL";
                }
                else if(cmbMonth.getSelectedItem().equals("08"))
                {
                    m= "AUG";
                }
                else if(cmbMonth.getSelectedItem().equals("09"))
                {
                    m= "SEP";
                }
                else if(cmbMonth.getSelectedItem().equals("10"))
                {
                    m= "OCT";
                }else if(cmbMonth.getSelectedItem().equals("11"))
                {
                    m= "NOV";
                }
                else if(cmbMonth.getSelectedItem().equals("12"))
                {
                    m= "DEC";
                }
                Parameters.put("MONTH", m);
                
            }
            TReportEngine objEngine = new TReportEngine();
            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/SDMLATTPAY/Leave_Balance_rtp", Parameters, objReportData);

        } catch (Exception e) {
            System.out.println("Error : " + e.getLocalizedMessage());
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser ExporttoExcelFileChooser;
    private javax.swing.JTable Table;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnEmpMstETE;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JComboBox cmbCategory;
    private javax.swing.JComboBox cmbDept;
    private javax.swing.JComboBox cmbMainCategory;
    private javax.swing.JComboBox cmbMonth;
    private javax.swing.JComboBox cmbShift;
    private javax.swing.JFileChooser file1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDeptCmb;
    private javax.swing.JLabel lblEmpNo;
    private javax.swing.JLabel lblMonthCmb;
    private javax.swing.JLabel lblShiftCmb;
    private javax.swing.JLabel lblYearCmb;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtEmpName;
    private javax.swing.JTextField txtEmpNo;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables

    private void GenerateDeptCombo() {

        HashMap List = new HashMap();
        clsMaster ObjDept;

        cmbDept.setModel(modelDept);
        modelDept.removeAllElements();  //Clearing previous contents

        ComboData aData = new ComboData();
        aData.Text = "Select Dept";
        aData.Code = 0;
        modelDept.addElement(aData);

        List = clsMaster.getDepartmentList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjDept = (clsMaster) List.get(Integer.toString(i));
            aData = new ComboData();
//            ComboData aData = new ComboData();
            //System.out.println(""+ObjDept.getAttribute("Name").getObj()+" - "+ObjDept.getAttribute("DPTID").getVal());
            aData.Text = (String) ObjDept.getAttribute("Name").getObj();
            aData.Code = (long) ObjDept.getAttribute("DPTID").getVal();
            modelDept.addElement(aData);
        }
    }

    private void GenerateShiftCombo() {

        HashMap List = new HashMap();
        clsMaster ObjShift;

        cmbShift.setModel(modelShift);
        modelShift.removeAllElements();  //Clearing previous contents

        ComboData aData = new ComboData();
        aData.Text = "Select Shift";
        aData.Code = 0;
        modelShift.addElement(aData);

        List = clsMaster.getShiftList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjShift = (clsMaster) List.get(Integer.toString(i));
            aData = new ComboData();
            aData.Text = (String) ObjShift.getAttribute("SHIFT_NAME").getObj();
            aData.Code = (long) ObjShift.getAttribute("SHIFT_ID").getVal();
            modelShift.addElement(aData);
        }
    }

    private void GenerateMainCategoryCombo() {

        HashMap List = new HashMap();
        clsMaster ObjMainCategory;

        cmbMainCategory.setModel(modelMainCategory);
        modelMainCategory.removeAllElements();  //Clearing previous contents

        ComboData aData = new ComboData();
        aData.Text = "Select Main Category";
        aData.Code = 0;
        modelMainCategory.addElement(aData);

        List = clsMaster.getMainCategoryList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjMainCategory = (clsMaster) List.get(Integer.toString(i));
            aData = new ComboData();
            aData.Text = (String) ObjMainCategory.getAttribute("Name").getObj();
            aData.Code = (long) ObjMainCategory.getAttribute("SECID").getVal();
            modelMainCategory.addElement(aData);
        }
    }

    private void GenerateCategoryCombo() {

        HashMap List = new HashMap();
        clsMaster ObjCategory;

        cmbCategory.setModel(modelCategory);
        modelCategory.removeAllElements();  //Clearing previous contents

        ComboData aData = new ComboData();
        aData.Text = "Select Category";
        aData.Code = 0;
        modelCategory.addElement(aData);

        List = clsMaster.getCategoryList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjCategory = (clsMaster) List.get(Integer.toString(i));
            aData = new ComboData();
            aData.Text = (String) ObjCategory.getAttribute("Name").getObj();
            aData.Code = (long) ObjCategory.getAttribute("CTGID").getVal();
            modelCategory.addElement(aData);
        }
    }

    private void FormatGrid() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        try{
            ResultSet rs = data.getResult("SELECT * FROM SDMLATTPAY.ATT_MTH_LEAVE_STATUS_NEW where EMPID=''");
            ResultSetMetaData rsInfo = rs.getMetaData();
            DataModel.addColumn("SR NO");
            for (int  i = 1; i <= rsInfo.getColumnCount(); i++) {
                    DataModel.addColumn(rsInfo.getColumnName(i));
                    DataModel.SetReadOnly(i);
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        
        

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateData() {
        
        if(txtYear.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter year ");
            return;
        }
        
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGrid(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND EMPID= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                cndtn += " AND  EMPID IN (SELECT PAY_EMP_NO FROM SDMLATTPAY.ATTPAY_EMPMST where EMP_DEPARTMENT='" + EITLERPGLOBAL.getComboCode(cmbDept) + "') ";
            }
            if (!cmbShift.getSelectedItem().equals("Select Shift")) {
                cndtn += " AND  EMPID IN (SELECT PAY_EMP_NO FROM SDMLATTPAY.ATTPAY_EMPMST where EMP_SHIFT_ID='" + cmbShift.getSelectedIndex() + "')";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                cndtn += " AND  EMPID IN (SELECT PAY_EMP_NO FROM SDMLATTPAY.ATTPAY_EMPMST where EMP_MAIN_CATEGORY='" + cmbMainCategory.getSelectedIndex() + "')";
            }
            if (!cmbCategory.getSelectedItem().equals ("Select Category")) {
                cndtn += " AND  EMPID IN (SELECT PAY_EMP_NO FROM SDMLATTPAY.ATTPAY_EMPMST where EMP_CATEGORY='" + cmbCategory.getSelectedIndex() + "')";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM SDMLATTPAY.ATT_MTH_LEAVE_STATUS_NEW where EMPID!='' " + cndtn + " ";

            System.out.println("Query..." + strSQL);
            query = "SELECT JA.SRNO,JB.* FROM (SELECT * FROM SDMLATTPAY.ATT_MTH_LEAVE_STATUS_NEW S where YYYY='"+txtYear.getText()+"' AND MM="+cmbMonth.getSelectedItem()+" AND EMPID!='' "+cndtn+") JB "
                    + "LEFT JOIN (SELECT A.*,@srno:=@srno+1 AS SRNO FROM "
                    + "(SELECT DISTINCT EMPID FROM SDMLATTPAY.ATT_MTH_LEAVE_STATUS_NEW S "
                    + "where LV_NO!=0  "+cndtn+") AS A,(SELECT @srno:=0) C) JA ON JA.EMPID=JB.EMPID where JB.LV_NO!=0 ORDER BY JA.SRNO,JB.LV_NO  ";
            System.out.println("q "+query);
            rsTmp = data.getResult(query);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                ResultSetMetaData rsInfo = rsTmp.getMetaData();
                String EMPNO = "";
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    
                    rowData[0] = Integer.toString(cnt);

                    for(int i=1 ; i <= rsInfo.getColumnCount();i++)
                    {
                        
                            rowData[i-1] = rsTmp.getString(i);
                        
                    }
                    
                    

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridShiftSchedule() {
        try {

            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            Table.setAutoResizeMode(0);
            DataModel.addColumn("Sr.");
            String sql = "SELECT '' AS 'Emp no','' AS 'Name','' AS 'Department','' AS 'Month','' AS 'Year'";
            for (int i = 1; i <= 31; i++) {
                sql = sql + ",'' AS '" + i + "'";
            }
            sql = sql + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
                DataModel.SetReadOnly(i);
            }

            DataModel.SetReadOnly(0);
            Table.getColumnModel().getColumn(0).setMaxWidth(50);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateShiftSchedule() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridShiftSchedule(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND SSC_EMPID= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " WHERE EMP_DEPARTMENT= " + cmbDept.getSelectedIndex() + " ";
            }
            if (!cmbMonth.getSelectedItem().equals("Select")) {
                cndtn += " AND SSC_MONTH= " + cmbMonth.getSelectedIndex() + " ";
            }
            if (!txtYear.getText().trim().equals("")) {
                cndtn += " AND SSC_YEAR= '" + txtYear.getText().trim() + "'";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT * FROM SDMLATTPAY.ATT_SHIFT_SCHEDULE WHERE 1=1 " + cndtn + " ) AS SSC "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON SSC.SSC_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + grp_cndtn + " "
                    + "ORDER BY PAY_EMP_NO,SSC_YEAR,SSC_MONTH ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PAY_EMP_NO");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("SSC_MONTH");
                    rowData[5] = rsTmp.getString("SSC_YEAR");
                    for (int j = 1; j <= 31; j++) {
                        rowData[j + 5] = rsTmp.getString("SSC_" + j);
                    }

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridBasicPunches() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");         //0
        DataModel.addColumn("Emp Pay No");  //1
        DataModel.addColumn("Emp Name");    //2
        DataModel.addColumn("Department");  //3
        DataModel.addColumn("Punch Date");  //4
        DataModel.addColumn("Shift");       //5     
        DataModel.addColumn("Time");        //6
        DataModel.addColumn("Machine");     //7    
        DataModel.addColumn("Category");    //8
        DataModel.addColumn("Sub Category");//9

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateBasicPunches() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridBasicPunches(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND EMP_CODE= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                //grp_cndtn += " WHERE EMP_DEPARTMENT= " + cmbDept.getSelectedIndex() + " ";
                cndtn += " AND EMP_DEPARTMENT= " + cmbDept.getSelectedIndex() + " ";
            }
            if (!cmbShift.getSelectedItem().equals("Select Shift")) {
                cndtn += " AND A_SHIFT= " + cmbShift.getSelectedIndex() + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                cndtn += " AND EMP_MAIN_CATEGORY= " + cmbMainCategory.getSelectedIndex() + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                cndtn += " AND EMP_CATEGORY= " + cmbCategory.getSelectedIndex() + " ";
            }
            if (!cmbMonth.getSelectedItem().equals("Select")) {
                cndtn += " AND MONTH(A_DATE)= " + cmbMonth.getSelectedIndex() + " ";
            }
            if (!txtYear.getText().trim().equals("")) {
                cndtn += " AND YEAR(A_DATE)= '" + txtYear.getText().trim() + "'";
            }
            if (!txtDate.getText().trim().equals("")) {
                cndtn += " AND A_DATE= '" + EITLERPGLOBAL.formatDateDB(txtDate.getText().trim()) + "'";
            }

            String strSQL = "";

            strSQL = "SELECT DISTINCT EMP_CODE AS EMPID,A_DATE,P_TIME,MACHINE,CASE WHEN A_SHIFT='WO' THEN 0 ELSE A_SHIFT END AS A_SHIFT,"
                    + "EMP_NAME,DPTNAME,SECNAME,CTGNAME,DPTID AS EMP_DEPARTMENT,SEC.SECID AS MAIN_CATEGORY,CTG.CTGID AS CATEGORY  FROM SDMLATTPAY.ATT_DATA DAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON DAS.EMP_CODE=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "WHERE 1=1 " + cndtn
                    + " ORDER BY EMP_CODE,A_DATE,P_TIME";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = EITLERPGLOBAL.formatDate(rsTmp.getString("A_DATE"));
                    rowData[5] = rsTmp.getString("A_SHIFT");
                    rowData[6] = rsTmp.getString("P_TIME");
                    rowData[7] = rsTmp.getString("MACHINE");
                    rowData[8] = rsTmp.getString("SECNAME");
                    rowData[9] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridDailyAtt() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Punch Date");
        DataModel.addColumn("Shift");
        DataModel.addColumn("Status");
        DataModel.addColumn("In Time");
        DataModel.addColumn("Out Time");
        DataModel.addColumn("Working Hours");
        DataModel.addColumn("Personal GP 1st Half");
        DataModel.addColumn("Personal GP 2st Half");
        DataModel.addColumn("Official GP 1st Half");
        DataModel.addColumn("Official GP 2st Half");
        DataModel.addColumn("Late Hours");
        DataModel.addColumn("Punches");
        DataModel.addColumn("Personal GP Punches");
        DataModel.addColumn("Official GP Punches");
        DataModel.addColumn("Category");
        DataModel.addColumn("Sub Category");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateDailyAtt() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridDailyAtt(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND EMPID= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " WHERE EMP_DEPARTMENT= " + cmbDept.getSelectedIndex() + " ";
            }
            if (!cmbShift.getSelectedItem().equals("Select Shift")) {
                cndtn += " AND SHIFT= " + cmbShift.getSelectedIndex() + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                cndtn += " AND MAIN_CATEGORY= " + cmbMainCategory.getSelectedIndex() + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                cndtn += " AND CATEGORY= " + cmbCategory.getSelectedIndex() + " ";
            }
            if (!cmbMonth.getSelectedItem().equals("Select")) {
                cndtn += " AND MM= " + cmbMonth.getSelectedIndex() + " ";
            }
            if (!txtYear.getText().trim().equals("")) {
                cndtn += " AND YYYY= '" + txtYear.getText().trim() + "'";
            }
            if (!txtDate.getText().trim().equals("")) {
                cndtn += " AND PUNCHDATE= '" + EITLERPGLOBAL.formatDateDB(txtDate.getText().trim()) + "'";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT * FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE 1=1 " + cndtn + " ) AS DAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON DAS.EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=DAS.MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=DAS.CATEGORY " + grp_cndtn + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = EITLERPGLOBAL.formatDate(rsTmp.getString("PUNCHDATE"));
                    rowData[5] = rsTmp.getString("SHIFT");
                    rowData[6] = rsTmp.getString("PRESENT_FIRST") + " " + rsTmp.getString("PRESENT_SECOND");
                    rowData[7] = rsTmp.getString("INTIME").substring(11, 16);
                    rowData[8] = rsTmp.getString("OUTTIME").substring(11, 16);
                    rowData[9] = rsTmp.getString("TOTAL_WORKING_HRS").substring(0, 5);
                    rowData[10] = rsTmp.getString("GP_FIRST_HALF").substring(0, 5);
                    rowData[11] = rsTmp.getString("GP_SECOND_HALF").substring(0, 5);
                    rowData[12] = rsTmp.getString("GPO_FIRST_HALF").substring(0, 5);
                    rowData[13] = rsTmp.getString("GPO_SECOND_HALF").substring(0, 5);
                    rowData[14] = rsTmp.getString("GATEPASS_LATE").substring(0, 5);
                    rowData[15] = rsTmp.getString("ALL_PUNCHES");
                    rowData[16] = rsTmp.getString("ALL_PERSONAL_GATEPASS_PUNCHES");
                    rowData[17] = rsTmp.getString("ALL_OFFICIAL_GATEPASS_PUNCHES");
                    rowData[18] = rsTmp.getString("SECNAME");
                    rowData[19] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridMonthlySummary() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Month");
        DataModel.addColumn("Year");
        DataModel.addColumn("Total Days");
        DataModel.addColumn("Paid Days");
        DataModel.addColumn("Present Days");
        DataModel.addColumn("LC Days");
        DataModel.addColumn("LWP Days");
        DataModel.addColumn("PL");
        DataModel.addColumn("CL");
        DataModel.addColumn("SL");
        DataModel.addColumn("OD");
        DataModel.addColumn("LOFF");
        DataModel.addColumn("EOFF");
        DataModel.addColumn("ESIC");
        DataModel.addColumn("WO");
        DataModel.addColumn("WOFF");
        DataModel.addColumn("NPH");
        DataModel.addColumn("NWOF");
        DataModel.addColumn("COFF");
        DataModel.addColumn("NPL");
        DataModel.addColumn("Personal GP");
        DataModel.addColumn("Official GP");
        DataModel.addColumn("Absent");
        DataModel.addColumn("Category");
        DataModel.addColumn("Sub Category");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateMonthlySummary() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridMonthlySummary(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND MS_EMPID= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + cmbDept.getSelectedIndex() + " ";
            }
            if (!cmbShift.getSelectedItem().equals("Select Shift")) {
                grp_cndtn += " AND EMP_SHIFT_ID= " + cmbShift.getSelectedIndex() + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + cmbMainCategory.getSelectedIndex() + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                grp_cndtn += " AND EMP_CATEGORY= " + cmbCategory.getSelectedIndex() + " ";
            }
            if (!cmbMonth.getSelectedItem().equals("Select")) {
                cndtn += " AND MS_MM= " + cmbMonth.getSelectedIndex() + " ";
            }
            if (!txtYear.getText().trim().equals("")) {
                cndtn += " AND MS_YYYY= '" + txtYear.getText().trim() + "'";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT * FROM SDMLATTPAY.ATT_MTH_SUMMARY WHERE 1=1 " + cndtn + " ) AS MAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON MAS.MS_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
                    + "ON SFT.SHIFT_ID=EMP.EMP_SHIFT_ID WHERE 1=1 " + grp_cndtn + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("MS_EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("MS_MM");
                    rowData[5] = rsTmp.getString("MS_YYYY");
                    rowData[6] = rsTmp.getString("TOTAL_MONTH_DAYS");
                    rowData[7] = rsTmp.getString("PAID_DAYS");
                    rowData[8] = rsTmp.getString("PRESENT_DAYS");
                    rowData[9] = rsTmp.getString("LC_DAYS");
                    rowData[10] = rsTmp.getString("LWP_DAYS");
                    rowData[11] = rsTmp.getString("PL");
                    rowData[12] = rsTmp.getString("CL");
                    rowData[13] = rsTmp.getString("SL");
                    rowData[14] = rsTmp.getString("OD");
                    rowData[15] = rsTmp.getString("LOFF");
                    rowData[16] = rsTmp.getString("EOFF");
                    rowData[17] = rsTmp.getString("ESIC");
                    rowData[18] = rsTmp.getString("WO");
                    rowData[19] = rsTmp.getString("WOFF");
                    rowData[20] = rsTmp.getString("NPH");
                    rowData[21] = rsTmp.getString("NWOF");
                    rowData[22] = rsTmp.getString("COFFE");
                    rowData[23] = rsTmp.getString("NPL");
                    rowData[24] = rsTmp.getString("P_GP");
                    rowData[25] = rsTmp.getString("O_GP");
                    rowData[26] = rsTmp.getString("ABST");
                    rowData[27] = rsTmp.getString("SECNAME");
                    rowData[28] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    
   

    private void FormatGridOddPunches() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Date");
        DataModel.addColumn("No of Punches");
        DataModel.addColumn("Punches");
        DataModel.addColumn("Shift");
        DataModel.addColumn("Category");
        DataModel.addColumn("Sub Category");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateOddPunches() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridOddPunches(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND EMP_CODE= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + cmbDept.getSelectedIndex() + " ";
            }
            if (!cmbShift.getSelectedItem().equals("Select Shift")) {
                cndtn += " AND A_SHIFT= " + cmbShift.getSelectedIndex() + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + cmbMainCategory.getSelectedIndex() + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                grp_cndtn += " AND EMP_CATEGORY= " + cmbCategory.getSelectedIndex() + " ";
            }
            if (!cmbMonth.getSelectedItem().equals("Select")) {
                cndtn += " AND MONTH(A_DATE)= " + cmbMonth.getSelectedIndex() + " ";
            }
            if (!txtYear.getText().trim().equals("")) {
                cndtn += " AND YEAR(A_DATE)= '" + txtYear.getText().trim() + "'";
            }
            if (!txtDate.getText().trim().equals("")) {
                cndtn += " AND A_DATE= '" + EITLERPGLOBAL.formatDateDB(txtDate.getText().trim()) + "'";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM (SELECT EMP_CODE,DATE_FORMAT(A_DATE,'%d/%m/%Y') AS PUNCH_DATE,GROUP_CONCAT(P_TIME SEPARATOR' || ') AS PUNCHES,"
                    + "COUNT(0) AS NO_OF_PUNCHES,A_SHIFT FROM (SELECT DISTINCT EMP_CODE,A_DATE,P_TIME,A_SHIFT FROM SDMLATTPAY.ATT_DATA WHERE 1=1 " + cndtn + " ) AS AA "
                    + "GROUP BY A_DATE,EMP_CODE HAVING (COUNT(A_DATE)%2<>0) ORDER BY A_DATE) AS ODD "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON ODD.EMP_CODE=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
                    + "ON SFT.SHIFT_ID=ODD.A_SHIFT WHERE 1=1 " + grp_cndtn + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("EMP_CODE");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("PUNCH_DATE");
                    rowData[5] = rsTmp.getString("NO_OF_PUNCHES");
                    rowData[6] = rsTmp.getString("PUNCHES");
                    rowData[7] = rsTmp.getString("A_SHIFT");
                    rowData[8] = rsTmp.getString("SECNAME");
                    rowData[9] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private void FormatGridMonthlySummarySPP() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("EMP CODE");
        DataModel.addColumn("Employee Name");
        DataModel.addColumn("Pay Days");
        DataModel.addColumn("Present Days");
        DataModel.addColumn("LOP");
        DataModel.addColumn("COFF");
        DataModel.addColumn("CW");
        DataModel.addColumn("OOD");
        DataModel.addColumn("PL");
        DataModel.addColumn("CL");
        DataModel.addColumn("SL");
        DataModel.addColumn("LOFF");
        DataModel.addColumn("EOFF");
        DataModel.addColumn("PH");
        DataModel.addColumn("WOFF");
        DataModel.addColumn("NPH");
        DataModel.addColumn("WOF");
        DataModel.addColumn("NWOF");
        DataModel.addColumn("COFFE");
        DataModel.addColumn("NPL");
        DataModel.addColumn("ESIC");
        DataModel.addColumn("Remarks");

        DataModel.TableReadOnly(true);
    }

    private void GenerateMonthlySummarySPP() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridMonthlySummarySPP(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND MS_EMPID= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + cmbDept.getSelectedIndex() + " ";
            }
            if (!cmbShift.getSelectedItem().equals("Select Shift")) {
                grp_cndtn += " AND EMP_SHIFT_ID= " + cmbShift.getSelectedIndex() + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + cmbMainCategory.getSelectedIndex() + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                grp_cndtn += " AND EMP_CATEGORY= " + cmbCategory.getSelectedIndex() + " ";
            }
            if (!cmbMonth.getSelectedItem().equals("Select")) {
                cndtn += " AND MS_MM= " + cmbMonth.getSelectedIndex() + " ";
            }
            if (!txtYear.getText().trim().equals("")) {
                cndtn += " AND MS_YYYY= '" + txtYear.getText().trim() + "'";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT *,SUM(LC_DAYS+LWP_DAYS) AS LOP FROM SDMLATTPAY.ATT_MTH_SUMMARY WHERE 1=1 " + cndtn + " GROUP BY MS_EMPID,MS_MM,MS_YYYY ) AS MAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON MAS.MS_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
                    + "ON SFT.SHIFT_ID=EMP.EMP_SHIFT_ID WHERE 1=1 " + grp_cndtn + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = rsTmp.getString("MS_EMPID");
                    rowData[1] = rsTmp.getString("EMP_NAME");
                    rowData[2] = rsTmp.getString("PAID_DAYS");
                    rowData[3] = rsTmp.getString("PRESENT_DAYS");
                    rowData[4] = rsTmp.getString("LOP");
                    rowData[5] = rsTmp.getString("COFFE");
                    rowData[6] = "0";
                    rowData[7] = rsTmp.getString("OD");
                    rowData[8] = rsTmp.getString("PL");
                    rowData[9] = rsTmp.getString("CL");
                    rowData[10] = rsTmp.getString("SL");
                    rowData[11] = rsTmp.getString("LOFF");
                    rowData[12] = rsTmp.getString("EOFF");
                    rowData[13] = "0";
                    rowData[14] = rsTmp.getString("WO");
                    rowData[15] = rsTmp.getString("NPH");
                    rowData[16] = rsTmp.getString("WOFF");
                    rowData[17] = rsTmp.getString("NWOF");
                    rowData[18] = rsTmp.getString("COFFE");
                    rowData[19] = rsTmp.getString("NPL");
                    rowData[20] = rsTmp.getString("ESIC");
                    rowData[21] = "";

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
}
