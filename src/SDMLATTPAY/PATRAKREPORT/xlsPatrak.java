/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SDMLATTPAY.PATRAKREPORT;

import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.Reports.clsExcelExporter;
import EITLERP.Finance.UtilFunctions;
import EITLERP.JTextFieldHint;
import EITLERP.ReportRegister;
import EITLERP.data;
import TReportWriter.TReportEngine;
import java.awt.Component;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Dharmendra
 */
public class xlsPatrak extends javax.swing.JApplet {

    /**
     * Initializes the applet xlsRokdiPData
     */
    private EITLTableModel DataModel;
    private clsExcelExporter exprt = new clsExcelExporter();
    private EITLComboModel cmbStatementModel, cmbSlipModel, cmbSummaryModel;
    private TReportEngine objEngine = new TReportEngine();
    private HashMap mmonth = new HashMap();

    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        initComponents();
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        file1.setVisible(false);
        mmonth = new HashMap();
        mmonth.put("JAN", "-01-01");
        mmonth.put("FEB", "-02-01");
        mmonth.put("MAR", "-03-01");
        mmonth.put("APR", "-04-01");
        mmonth.put("MAY", "-05-01");
        mmonth.put("JUN", "-06-01");
        mmonth.put("JUL", "-07-01");
        mmonth.put("AUG", "-08-01");
        mmonth.put("SEP", "-09-01");
        mmonth.put("OCT", "-10-01");
        mmonth.put("NOV", "-11-01");
        mmonth.put("DEC", "-12-01");
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        file1 = new javax.swing.JFileChooser();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        txtmonth = new javax.swing.JTextField();
        selectedtab = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        cmdview = new javax.swing.JButton();
        cmdexcel = new javax.swing.JButton();
        cmdprint = new javax.swing.JButton();

        getContentPane().setLayout(null);

        jLabel3.setText("Month - YYYY");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(110, 0, 150, 30);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 190, 1070, 220);

        jLabel4.setText("For Month");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(20, 30, 70, 20);

        txtmonth.setDisabledTextColor(new java.awt.Color(0, 0, 255));
        txtmonth = new JTextFieldHint(new JTextField(),"Month - YYYY");
        getContentPane().add(txtmonth);
        txtmonth.setBounds(110, 30, 170, 30);

        selectedtab.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                selectedtabStateChanged(evt);
            }
        });
        selectedtab.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectedtabFocusGained(evt);
            }
        });

        jPanel2.setLayout(null);
        selectedtab.addTab("Staff", jPanel2);

        jPanel3.setLayout(null);
        selectedtab.addTab("Worker", jPanel3);

        jPanel4.setLayout(null);
        selectedtab.addTab("Badli Worker", jPanel4);

        jPanel5.setLayout(null);
        selectedtab.addTab("Contractor", jPanel5);

        jPanel6.setLayout(null);
        selectedtab.addTab("Retainer", jPanel6);

        getContentPane().add(selectedtab);
        selectedtab.setBounds(20, 80, 670, 60);

        cmdview.setText("View");
        cmdview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdviewActionPerformed(evt);
            }
        });
        getContentPane().add(cmdview);
        cmdview.setBounds(20, 140, 130, 42);

        cmdexcel.setText("Excel");
        cmdexcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdexcelActionPerformed(evt);
            }
        });
        getContentPane().add(cmdexcel);
        cmdexcel.setBounds(170, 140, 110, 42);

        cmdprint.setText("Print");
        cmdprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdprintActionPerformed(evt);
            }
        });
        getContentPane().add(cmdprint);
        cmdprint.setBounds(300, 140, 110, 42);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdviewActionPerformed
        // TODO add your handling code here:
        try {
            if (txtmonth.getText().trim().length() >= 8) {
                switch (selectedtab.getSelectedIndex()) {
                    case 0:
                        Staff();
                        break;
                    case 1:
                        Worker();
                        break;
                    case 2:
                        BWorker();
                        break;
                    case 3:
                        Contractor();
                        break;
                    case 4:
                        Retainer();
                        break;

                }
                try {
                    final TableColumnModel columnModel = Table.getColumnModel();
                    for (int column = 0; column < Table.getColumnCount(); column++) {
                        int width = 100; // Min width
                        for (int row = 0; row < Table.getRowCount(); row++) {
                            TableCellRenderer renderer = Table.getCellRenderer(row, column);
                            Component comp = Table.prepareRenderer(renderer, row, column);
                            width = Math.max(comp.getPreferredSize().width + 1, width);
                        }
                        if (width > 300) {
                            width = 300;
                        }
                        columnModel.getColumn(column).setPreferredWidth(width);
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Enter For Month...");
                txtmonth.requestFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmdviewActionPerformed

    private void cmdexcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdexcelActionPerformed
        // TODO add your handling code here:
        try {
            if (txtmonth.getText().trim().length() >= 8) {
                String mfilenm;
                switch (selectedtab.getSelectedIndex()) {

                    case 0:
                        mfilenm = "Staff ";
                        break;
                    case 1:
                        mfilenm = "RegularWorker ";
                        break;
                    case 2:
                        mfilenm = "BadliWorker ";
                        break;
                    case 3:
                        mfilenm = "Contractor ";
                        break;

                    default:
                        mfilenm = "sheet1";
                        break;
                }
                File file = null;
                file1.setVisible(true);
                int returnVal = file1.showSaveDialog(this);
                if (returnVal == file1.APPROVE_OPTION) {
                    file = file1.getSelectedFile();
                }
                file1.setVisible(false);

                exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), mfilenm);
                JOptionPane.showMessageDialog(null, "Data saved at "
                        + file.toString() + ".xls successfully ...", "Message",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Enter For Month...");
                txtmonth.requestFocus();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdexcelActionPerformed

    private void cmdprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdprintActionPerformed
        // TODO add your handling code here:
        if (txtmonth.getText().trim().length() >= 8) {
            switch (selectedtab.getSelectedIndex()) {
                case 0:
                    StaffPrint();
                    break;
                case 1:
                    WorkerPrint();
                    break;
                case 2:
                    BworkerPrint();
                    break;
                case 3:
                    ContractorPrint();
                    break;
                case 4:
                    RetainerPrint();
                    break;

            }
        } else {
            JOptionPane.showMessageDialog(this, "Enter For Month...");
            txtmonth.requestFocus();
        }
    }//GEN-LAST:event_cmdprintActionPerformed

    private void selectedtabFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_selectedtabFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_selectedtabFocusGained

    private void selectedtabStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_selectedtabStateChanged
        // TODO add your handling code here:
        ClearData();
    }//GEN-LAST:event_selectedtabStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JButton cmdexcel;
    private javax.swing.JButton cmdprint;
    private javax.swing.JButton cmdview;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane selectedtab;
    private javax.swing.JTextField txtmonth;
    // End of variables declaration//GEN-END:variables

    private void Staff() {
        String sql;
        sql = "SELECT LEFT(DEPARTMENT,4) AS DEPT,(PRESENT_DAYS+LOP_DAYS) AS TOT_DAYS,A.* FROM SDMLATTPAY.ATT_MONTH_PATRAK A "
                + "WHERE (EMPID LIKE 'BRD1%' OR EMPID LIKE 'BRD2%') ";

        String mm = txtmonth.getText().trim().substring(0, txtmonth.getText().trim().length() - 7);
        String yy = txtmonth.getText().trim().substring(txtmonth.getText().trim().length() - 4);
        mm = mm.substring(0, 3).toUpperCase();
        System.out.println("Month:" + mm);
        System.out.println("Year:" + yy);
        sql = sql + " AND YYYY=" + yy + " AND MM=MONTH('" + yy + mmonth.get(mm) + "') "
                + " ORDER BY EMPID";
        System.out.println("Data Query :" + sql);
        try {

            ResultSet rs = data.getResult(sql);
            EITLTableModel mTableModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(mTableModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            mTableModel.addColumn("Emp No."); //0 - Read Only
            mTableModel.addColumn("Dept Code");
            mTableModel.addColumn("");
            for (int a = 1; a <= 31; a++) {
                mTableModel.addColumn(a);
            }
            mTableModel.addColumn("Present");
            mTableModel.addColumn("LC+LWP");
            mTableModel.addColumn("TOTAL");
            mTableModel.addColumn("WO");
            mTableModel.addColumn("PH");
            mTableModel.addColumn("PL");
            mTableModel.addColumn("CL");
            mTableModel.addColumn("SL");
            mTableModel.addColumn("CO");
            mTableModel.addColumn("LO");
            mTableModel.addColumn("Remarks");

            //Table.getColumnModel().getColumn(3).setPreferredWidth(220);
            rs.first();
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[1000];

                    rowData[0] = rs.getString("EMPID");
                    rowData[1] = rs.getString("DEPT");
                    rowData[2] = "SHIFT";
                    for (int a = 1; a <= 31; a++) {
                        rowData[a + 2] = rs.getString("SHIFT_" + a);
                    }
                    rowData[34] = rs.getString("PRESENT_DAYS");
                    rowData[35] = rs.getString("LOP_DAYS");
                    rowData[36] = rs.getString("TOT_DAYS");
                    rowData[37] = rs.getString("WO_DAYS");
                    rowData[38] = rs.getString("PH_DAYS");
                    rowData[39] = rs.getString("PL_DAYS");
                    rowData[40] = rs.getString("CL_DAYS");
                    rowData[41] = rs.getString("SL_DAYS");
                    rowData[42] = rs.getString("CO_DAYS");
                    rowData[43] = rs.getString("LO_DAYS");
                    rowData[44] = rs.getString("EMPID");
                    mTableModel.addRow(rowData);

                    rowData = new Object[1000];
                    rowData[0] = rs.getString("EMPNAME");
                    rowData[1] = rs.getString("DEPARTMENT");
                    rowData[2] = "1ST";
                    for (int a = 1; a <= 31; a++) {
                        rowData[a + 2] = rs.getString("FH_" + a);
                    }
                    mTableModel.addRow(rowData);
                    rowData = new Object[1000];
                    rowData[0] = rs.getString("JOINDATE");
                    rowData[2] = "2ND";
                    for (int a = 1; a <= 31; a++) {
                        rowData[a + 2] = rs.getString("SH_" + a);
                    }
                    mTableModel.addRow(rowData);

                    rowData = new Object[1000];
                    mTableModel.addRow(rowData);
                    rs.next();
                }
            }
            mTableModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 10; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void Worker() {
        String sql;
        /*sql = "SELECT  PAY_EMP_NO,EMP_NAME,DATE_FORMAT(EMP_JOIN_DATE,'%d/%m/%Y') AS EMP_JOIN_DATE,DPTCODE,NAME  FROM SDMLATTPAY.ATTPAY_EMPMST "
         + "LEFT JOIN SDMLATTPAY.ATT_DEPARTMENT_MASTER ON EMP_DEPARTMENT=DPTID "
         + "WHERE EMP_CATEGORY NOT IN (8) AND (PAY_EMP_NO LIKE 'BRD3%' OR PAY_EMP_NO LIKE 'BRD4%') AND  (EMP_LEFT_DATE='0000-00-00' OR ";*/
        sql = "SELECT LEFT(DEPARTMENT,4) AS DEPT,(PRESENT_DAYS+LOP_DAYS) AS TOT_DAYS,A.* FROM SDMLATTPAY.ATT_MONTH_PATRAK A "
                + "WHERE (EMPID LIKE 'BRD3%') AND CATEGORY=6 AND MAIN_CATEGORY=6 ";
        String mm = txtmonth.getText().trim().substring(0, txtmonth.getText().trim().length() - 7);
        String yy = txtmonth.getText().trim().substring(txtmonth.getText().trim().length() - 4);
        mm = mm.substring(0, 3).toUpperCase();
        System.out.println("Month:" + mm);
        System.out.println("Year:" + yy);
        sql = sql + " AND YYYY=" + yy + " AND MM=MONTH('" + yy + mmonth.get(mm) + "') "
                + " ORDER BY DEPT,EMPID";
        System.out.println("Data Query :" + sql);
        try {

            ResultSet rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();
            EITLTableModel mTableModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(mTableModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);
            mTableModel.addColumn("Emp No."); //0 - Read Only
            mTableModel.addColumn("Dept Code");
            mTableModel.addColumn("");
            for (int a = 1; a <= 31; a++) {
                mTableModel.addColumn(a);
            }
            /*mTableModel.addColumn("Att Shift");
             mTableModel.addColumn("Att Total");
             mTableModel.addColumn("WO");
             mTableModel.addColumn("PH");
             mTableModel.addColumn("PL");
             mTableModel.addColumn("CL");
             mTableModel.addColumn("SL");
             mTableModel.addColumn("LO");
             mTableModel.addColumn("Remarks");*/
            mTableModel.addColumn("Present");
            mTableModel.addColumn("LC+LWP");
            mTableModel.addColumn("TOTAL");
            mTableModel.addColumn("WO");
            mTableModel.addColumn("PH");
            mTableModel.addColumn("PL");
            mTableModel.addColumn("CL");
            mTableModel.addColumn("SL");            
            mTableModel.addColumn("LO");
            mTableModel.addColumn("Remarks");

            //Table.getColumnModel().getColumn(3).setPreferredWidth(220);
            rs.first();
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[1000];

                    rowData[0] = rs.getString("EMPID");
                    rowData[1] = rs.getString("DEPT");
                    rowData[2] = "SHIFT";
                    for (int a = 1; a <= 31; a++) {
                        rowData[a + 2] = rs.getString("SHIFT_" + a);
                    }
                    rowData[34] = rs.getString("PRESENT_DAYS");
                    rowData[35] = rs.getString("LOP_DAYS");
                    rowData[36] = rs.getString("TOT_DAYS");
                    rowData[37] = rs.getString("WO_DAYS");
                    rowData[38] = rs.getString("PH_DAYS");
                    rowData[39] = rs.getString("PL_DAYS");
                    rowData[40] = rs.getString("CL_DAYS");
                    rowData[41] = rs.getString("SL_DAYS");                    
                    rowData[42] = rs.getString("LO_DAYS");
                    rowData[43] = rs.getString("EMPID");
                    mTableModel.addRow(rowData);

                    rowData = new Object[1000];
                    rowData[0] = rs.getString("EMPNAME");
                    rowData[1] = rs.getString("DEPARTMENT");
                    rowData[2] = "1ST";
                    for (int a = 1; a <= 31; a++) {
                        rowData[a + 2] = rs.getString("FH_" + a);
                    }
                    mTableModel.addRow(rowData);
                    rowData = new Object[1000];
                    rowData[0] = rs.getString("JOINDATE");
                    rowData[2] = "2ND";
                    for (int a = 1; a <= 31; a++) {
                        rowData[a + 2] = rs.getString("SH_" + a);
                    }
                    mTableModel.addRow(rowData);

                    rowData = new Object[1000];
                    mTableModel.addRow(rowData);
                    rs.next();
                }
            }
            mTableModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 10; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void BWorker() {
        String sql;
        sql = "SELECT LEFT(DEPARTMENT,4) AS DEPT,(PRESENT_DAYS+LOP_DAYS) AS TOT_DAYS,A.* FROM SDMLATTPAY.ATT_MONTH_PATRAK A "
                + "WHERE (EMPID LIKE 'BRD3%') AND CATEGORY=8 AND MAIN_CATEGORY=7  ";

        String mm = txtmonth.getText().trim().substring(0, txtmonth.getText().trim().length() - 7);
        String yy = txtmonth.getText().trim().substring(txtmonth.getText().trim().length() - 4);
        mm = mm.substring(0, 3).toUpperCase();
        System.out.println("Month:" + mm);
        System.out.println("Year:" + yy);
        sql = sql + " AND YYYY=" + yy + " AND MM=MONTH('" + yy + mmonth.get(mm) + "') "
                + " ORDER BY DEPT,EMPID";
        System.out.println("Data Query :" + sql);
        try {

            ResultSet rs = data.getResult(sql);
            EITLTableModel mTableModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(mTableModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            mTableModel.addColumn("Emp No."); //0 - Read Only
            mTableModel.addColumn("Dept Code");
            mTableModel.addColumn("");
            for (int a = 1; a <= 31; a++) {
                mTableModel.addColumn(a);
            }
            mTableModel.addColumn("Present");
            mTableModel.addColumn("LC+LWP");
            mTableModel.addColumn("TOTAL");
            mTableModel.addColumn("WO");
            mTableModel.addColumn("PH");
            mTableModel.addColumn("PL");
            mTableModel.addColumn("CL");
            mTableModel.addColumn("SL");            
            mTableModel.addColumn("LO");
            mTableModel.addColumn("Remarks");

            //Table.getColumnModel().getColumn(3).setPreferredWidth(220);
            rs.first();
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[1000];

                    rowData[0] = rs.getString("EMPID");
                    rowData[1] = rs.getString("DEPT");
                    rowData[2] = "SHIFT";
                    for (int a = 1; a <= 31; a++) {
                        rowData[a + 2] = rs.getString("SHIFT_" + a);
                    }
                    rowData[34] = rs.getString("PRESENT_DAYS");
                    rowData[35] = rs.getString("LOP_DAYS");
                    rowData[36] = rs.getString("TOT_DAYS");
                    rowData[37] = rs.getString("WO_DAYS");
                    rowData[38] = rs.getString("PH_DAYS");
                    rowData[39] = rs.getString("PL_DAYS");
                    rowData[40] = rs.getString("CL_DAYS");
                    rowData[41] = rs.getString("SL_DAYS");                    
                    rowData[42] = rs.getString("LO_DAYS");
                    rowData[43] = rs.getString("EMPID");
                    mTableModel.addRow(rowData);

                    rowData = new Object[1000];
                    rowData[0] = rs.getString("EMPNAME");
                    rowData[1] = rs.getString("DEPARTMENT");
                    rowData[2] = "1ST";
                    for (int a = 1; a <= 31; a++) {
                        rowData[a + 2] = rs.getString("FH_" + a);
                    }
                    mTableModel.addRow(rowData);
                    rowData = new Object[1000];
                    rowData[0] = rs.getString("JOINDATE");
                    rowData[2] = "2ND";
                    for (int a = 1; a <= 31; a++) {
                        rowData[a + 2] = rs.getString("SH_" + a);
                    }
                    mTableModel.addRow(rowData);

                    rowData = new Object[1000];
                    mTableModel.addRow(rowData);
                    rs.next();
                }
            }
            mTableModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 10; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void Contractor() {
        String sql;
        sql = "SELECT LEFT(DEPARTMENT,4) AS DEPT,(PRESENT_DAYS+LOP_DAYS) AS TOT_DAYS,A.* FROM SDMLATTPAY.ATT_MONTH_PATRAK A "
                + "WHERE (EMPID LIKE 'BRD00%') ";

        String mm = txtmonth.getText().trim().substring(0, txtmonth.getText().trim().length() - 7);
        String yy = txtmonth.getText().trim().substring(txtmonth.getText().trim().length() - 4);
        mm = mm.substring(0, 3).toUpperCase();
        System.out.println("Month:" + mm);
        System.out.println("Year:" + yy);
        sql = sql + " AND YYYY=" + yy + " AND MM=MONTH('" + yy + mmonth.get(mm) + "') "
                + " ORDER BY EMPID";
        System.out.println("Data Query :" + sql);
        try {

            ResultSet rs = data.getResult(sql);
            EITLTableModel mTableModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(mTableModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            mTableModel.addColumn("Emp No."); //0 - Read Only
            mTableModel.addColumn("Dept Code");
            mTableModel.addColumn("");
            for (int a = 1; a <= 31; a++) {
                mTableModel.addColumn(a);
            }
            mTableModel.addColumn("Present");
            mTableModel.addColumn("LC+LWP");
            mTableModel.addColumn("TOTAL");
            mTableModel.addColumn("WO");
            mTableModel.addColumn("PH");           
            mTableModel.addColumn("LO");
            mTableModel.addColumn("Remarks");

            //Table.getColumnModel().getColumn(3).setPreferredWidth(220);
            rs.first();
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[1000];

                    rowData[0] = rs.getString("EMPID");
                    rowData[1] = rs.getString("DEPT");
                    rowData[2] = "SHIFT";
                    for (int a = 1; a <= 31; a++) {
                        rowData[a + 2] = rs.getString("SHIFT_" + a);
                    }
                    rowData[34] = rs.getString("PRESENT_DAYS");
                    rowData[35] = rs.getString("LOP_DAYS");
                    rowData[36] = rs.getString("TOT_DAYS");
                    rowData[37] = rs.getString("WO_DAYS");
                    rowData[38] = rs.getString("PH_DAYS");                    
                    rowData[39] = rs.getString("LO_DAYS");
                    rowData[40] = rs.getString("EMPID");
                    mTableModel.addRow(rowData);

                    rowData = new Object[1000];
                    rowData[0] = rs.getString("EMPNAME");
                    rowData[1] = rs.getString("DEPARTMENT");
                    rowData[2] = "1ST";
                    for (int a = 1; a <= 31; a++) {
                        rowData[a + 2] = rs.getString("FH_" + a);
                    }
                    mTableModel.addRow(rowData);
                    rowData = new Object[1000];
                    rowData[0] = rs.getString("JOINDATE");
                    rowData[2] = "2ND";
                    for (int a = 1; a <= 31; a++) {
                        rowData[a + 2] = rs.getString("SH_" + a);
                    }
                    mTableModel.addRow(rowData);

                    rowData = new Object[1000];
                    mTableModel.addRow(rowData);
                    rs.next();
                }
            }
            mTableModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 10; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void Retainer() {
        String sql;
        sql = "SELECT LEFT(DEPARTMENT,4) AS DEPT,(PRESENT_DAYS+LOP_DAYS) AS TOT_DAYS,A.* FROM SDMLATTPAY.ATT_MONTH_PATRAK A "
                + "WHERE (EMPID LIKE 'BRD5%' OR EMPID LIKE 'BRD6%') ";

        String mm = txtmonth.getText().trim().substring(0, txtmonth.getText().trim().length() - 7);
        String yy = txtmonth.getText().trim().substring(txtmonth.getText().trim().length() - 4);
        mm = mm.substring(0, 3).toUpperCase();
        System.out.println("Month:" + mm);
        System.out.println("Year:" + yy);
        sql = sql + " AND YYYY=" + yy + " AND MM=MONTH('" + yy + mmonth.get(mm) + "') "
                + " ORDER BY EMPID";
        System.out.println("Data Query :" + sql);
        try {

            ResultSet rs = data.getResult(sql);
            EITLTableModel mTableModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(mTableModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            mTableModel.addColumn("Emp No."); //0 - Read Only
            mTableModel.addColumn("Dept Code");
            mTableModel.addColumn("");
            for (int a = 1; a <= 31; a++) {
                mTableModel.addColumn(a);
            }
            mTableModel.addColumn("Present");
            mTableModel.addColumn("LC+LWP");
            mTableModel.addColumn("TOTAL");
            mTableModel.addColumn("WO");
            mTableModel.addColumn("PH");
            mTableModel.addColumn("PL");
            mTableModel.addColumn("CL");
            mTableModel.addColumn("SL");
            mTableModel.addColumn("CO");
            mTableModel.addColumn("LO");
            mTableModel.addColumn("Remarks");

            //Table.getColumnModel().getColumn(3).setPreferredWidth(220);
            rs.first();
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[1000];

                    rowData[0] = rs.getString("EMPID");
                    rowData[1] = rs.getString("DEPT");
                    rowData[2] = "SHIFT";
                    for (int a = 1; a <= 31; a++) {
                        rowData[a + 2] = rs.getString("SHIFT_" + a);
                    }
                    rowData[34] = rs.getString("PRESENT_DAYS");
                    rowData[35] = rs.getString("LOP_DAYS");
                    rowData[36] = rs.getString("TOT_DAYS");
                    rowData[37] = rs.getString("WO_DAYS");
                    rowData[38] = rs.getString("PH_DAYS");
                    rowData[39] = rs.getString("PL_DAYS");
                    rowData[40] = rs.getString("CL_DAYS");
                    rowData[41] = rs.getString("SL_DAYS");
                    rowData[42] = rs.getString("CO_DAYS");
                    rowData[43] = rs.getString("LO_DAYS");
                    rowData[44] = rs.getString("EMPID");
                    mTableModel.addRow(rowData);

                    rowData = new Object[1000];
                    rowData[0] = rs.getString("EMPNAME");
                    rowData[1] = rs.getString("DEPARTMENT");
                    rowData[2] = "1ST";
                    for (int a = 1; a <= 31; a++) {
                        rowData[a + 2] = rs.getString("FH_" + a);
                    }
                    mTableModel.addRow(rowData);
                    rowData = new Object[1000];
                    rowData[0] = rs.getString("JOINDATE");
                    rowData[2] = "2ND";
                    for (int a = 1; a <= 31; a++) {
                        rowData[a + 2] = rs.getString("SH_" + a);
                    }
                    mTableModel.addRow(rowData);

                    rowData = new Object[1000];
                    mTableModel.addRow(rowData);
                    rs.next();
                }
            }
            mTableModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 10; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void ClearData() {
        try {
            DefaultTableModel dm = (DefaultTableModel) Table.getModel();
            while (dm.getRowCount() > 0) {
                dm.removeRow(0);
            }
        } catch (Exception e) {

        }
    }

    private void StaffPrint() {
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();
            parameterMap.put("PMONTH", txtmonth.getText());
            ReportRegister rpt = new ReportRegister(parameterMap, Conn);
            String mm = txtmonth.getText().trim().substring(0, txtmonth.getText().trim().length() - 7);
            String yy = txtmonth.getText().trim().substring(txtmonth.getText().trim().length() - 4);
            mm = mm.substring(0, 3).toUpperCase();
            String strSQL = "SELECT LEFT(DEPARTMENT,4) AS DEPT,(PRESENT_DAYS+LOP_DAYS) AS TOT_DAYS,A.* "
                    + "FROM SDMLATTPAY.ATT_MONTH_PATRAK A "
                    + "where YYYY=" + yy + " AND MM=MONTH('" + yy + mmonth.get(mm) + "') AND "
                    + "(EMPID LIKE 'BRD1%' OR EMPID LIKE 'BRD2%') "
                    + "ORDER BY EMPID;";
            System.out.println("SQL:" + strSQL);
            //rpt.setReportName("/EITLERP/FeltSales/FeltPacking/rptFeltPacking.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/PATRAKREPORT/patrak_staff.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void WorkerPrint() {
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();
            parameterMap.put("PMONTH", txtmonth.getText());
            parameterMap.put("CAT", "240 DAYS");
            ReportRegister rpt = new ReportRegister(parameterMap, Conn);
            String mm = txtmonth.getText().trim().substring(0, txtmonth.getText().trim().length() - 7);
            String yy = txtmonth.getText().trim().substring(txtmonth.getText().trim().length() - 4);
            mm = mm.substring(0, 3).toUpperCase();
            String strSQL = "SELECT LEFT(DEPARTMENT,4) AS DEPT,(PRESENT_DAYS+LOP_DAYS) AS TOT_DAYS,A.* "
                    + "FROM SDMLATTPAY.ATT_MONTH_PATRAK A "
                    + "where YYYY=" + yy + " AND MM=MONTH('" + yy + mmonth.get(mm) + "') AND "
                    + "(EMPID LIKE 'BRD3%') AND CATEGORY=6 AND MAIN_CATEGORY=6 "
                    + "ORDER BY DEPARTMENT,EMPID;";
            System.out.println("SQL:" + strSQL);
            //rpt.setReportName("/EITLERP/FeltSales/FeltPacking/rptFeltPacking.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/PATRAKREPORT/patrak_worker.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void BworkerPrint() {
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();
            parameterMap.put("PMONTH", txtmonth.getText());
            parameterMap.put("CAT", "BADLI");
            ReportRegister rpt = new ReportRegister(parameterMap, Conn);
            String mm = txtmonth.getText().trim().substring(0, txtmonth.getText().trim().length() - 7);
            String yy = txtmonth.getText().trim().substring(txtmonth.getText().trim().length() - 4);
            mm = mm.substring(0, 3).toUpperCase();
            String strSQL = "SELECT LEFT(DEPARTMENT,4) AS DEPT,(PRESENT_DAYS+LOP_DAYS) AS TOT_DAYS,A.* "
                    + "FROM SDMLATTPAY.ATT_MONTH_PATRAK A "
                    + "where YYYY=" + yy + " AND MM=MONTH('" + yy + mmonth.get(mm) + "') AND "
                    + "(EMPID LIKE 'BRD3%')  AND CATEGORY=8 AND MAIN_CATEGORY=7  "
                    + "ORDER BY DEPARTMENT,EMPID;";
            System.out.println("SQL:" + strSQL);
            //rpt.setReportName("/EITLERP/FeltSales/FeltPacking/rptFeltPacking.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/PATRAKREPORT/patrak_worker.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void ContractorPrint() {
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();
            parameterMap.put("PMONTH", txtmonth.getText());
            ReportRegister rpt = new ReportRegister(parameterMap, Conn);
            String mm = txtmonth.getText().trim().substring(0, txtmonth.getText().trim().length() - 7);
            String yy = txtmonth.getText().trim().substring(txtmonth.getText().trim().length() - 4);
            mm = mm.substring(0, 3).toUpperCase();
            String strSQL = "SELECT LEFT(DEPARTMENT,4) AS DEPT,(PRESENT_DAYS+LOP_DAYS) AS TOT_DAYS,A.* "
                    + "FROM SDMLATTPAY.ATT_MONTH_PATRAK A "
                    + "where YYYY=" + yy + " AND MM=MONTH('" + yy + mmonth.get(mm) + "') AND "
                    + "(EMPID LIKE 'BRD00%')  "
                    + "ORDER BY DEPARTMENT,EMPID;";
            System.out.println("SQL:" + strSQL);
            //rpt.setReportName("/EITLERP/FeltSales/FeltPacking/rptFeltPacking.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/PATRAKREPORT/patrak_cont.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void RetainerPrint() {
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();
            parameterMap.put("PMONTH", txtmonth.getText());
            ReportRegister rpt = new ReportRegister(parameterMap, Conn);
            String mm = txtmonth.getText().trim().substring(0, txtmonth.getText().trim().length() - 7);
            String yy = txtmonth.getText().trim().substring(txtmonth.getText().trim().length() - 4);
            mm = mm.substring(0, 3).toUpperCase();
            String strSQL = "SELECT LEFT(DEPARTMENT,4) AS DEPT,(PRESENT_DAYS+LOP_DAYS) AS TOT_DAYS,A.* "
                    + "FROM SDMLATTPAY.ATT_MONTH_PATRAK A "
                    + "where YYYY=" + yy + " AND MM=MONTH('" + yy + mmonth.get(mm) + "') AND "
                    + "(EMPID LIKE 'BRD5%' OR EMPID LIKE 'BRD6%') "
                    + "ORDER BY EMPID;";
            System.out.println("SQL:" + strSQL);
            //rpt.setReportName("/EITLERP/FeltSales/FeltPacking/rptFeltPacking.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/PATRAKREPORT/patrak_staff.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
