/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SDMLATTPAY.gatepass;

import SDMLATTPAY.gatepass.*;
import EITLERP.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.Row;
import java.util.Calendar;

/**
 *
 * @author root
 *
 */
public class FrmTimeCorrectionEntry extends javax.swing.JApplet {

    private int EditMode = 0;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbModuleModel;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;

    private EITLTableCellRenderer CellAlign = new EITLTableCellRenderer();
    private EITLTableCellRenderer CellAlign1 = new EITLTableCellRenderer();
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;
    private int ModuleId = 810;
    private String DOC_NO = "";
    private clsTimeCorrectionEntry timecorrection;
    private EITLComboModel cmbSendToModel;

    String seleval = "", seltyp = "", selqlt = "", selshd = "", selpiece = "", selext = "", selinv = "", selsz = "";
    private int mlstrc;
    private String menusele = "";
    private String correctionType = "";

    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    DateFormat dateForDB = new SimpleDateFormat("yyyy-MM-dd");

    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    public frmPendingApprovals frmPA;
    
    String message="";

    @Override
    public void init() {

        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        initComponents();
        docdate1.setVisible(false);
        GenerateCombos();

        GenerateFromCombo();
        //GenerateHierarchyCombo();

        SetMenuForRights();
        try {
            DefaultSettings();
        } catch (SQLException ex) {

        }
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();

        timecorrection = new clsTimeCorrectionEntry();
        //boolean load = timecorrection.LoadData(EITLERPGLOBAL.gCompanyID);
        boolean load = timecorrection.LoadData();
        if (load) {
            DisplayData();
            MoveLast();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + timecorrection.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        SetFields(false);
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        SetupApproval();

    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    public void DefaultSettings() throws SQLException {

        //String data = toString();
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        clearFields();
        lblTitle.setBackground(new Color(0, 102, 153));
        lblTitle.setForeground(Color.WHITE);

    }

    private void clearFields() {

        lbldoc.setText("");
        docdate.setText("");

        buttonGroupCorrectionType.clearSelection();
        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        FormatGridHS();
        //cmbmnth.setSelectedItem(data.getStringValueFromDB("SELECT MONTH(CURDATE()) FROM DUAL"));

    }

    private void DisplayData() {

        //=========== Color Indication ===============//
        try {

            if (timecorrection.getAttribute("APPROVED").getInt()==1) {
                lblTitle.setBackground(Color.BLUE);
                lblTitle.setForeground(Color.WHITE);
            }

            if (timecorrection.getAttribute("APPROVED").getInt()==0) {
                lblTitle.setBackground(Color.GRAY);
                lblTitle.setForeground(Color.BLACK);
            }

            if (timecorrection.getAttribute("CANCELED").getInt()==1) {
                lblTitle.setBackground(Color.RED);
                lblTitle.setForeground(Color.BLACK);
            }
        } catch (Exception c) {

            c.printStackTrace();
        }
        /*
         try {
         if (EditMode == 0) {
         if (timecorrection.getAttribute("APPROVED").getInt() == 1) {
         lblTitle.setBackground(Color.BLUE);
         }

         if (timecorrection.getAttribute("APPROVED").getInt() != 1) {
         lblTitle.setBackground(Color.GRAY);
         }

         if (timecorrection.getAttribute("CANCELLED").getInt() == 1) {
         lblTitle.setBackground(Color.RED);
         }
         }
         } catch (Exception c) {
         //c.printStackTrace();
         }
         */
        //============================================//
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleId)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        clearFields();
        try {

            DOC_NO = timecorrection.getAttribute("ATT_TIME_CORRECTION_DOC_NO").getString();
            correctionType = timecorrection.getAttribute("CORRECTION_TYPE").getString();
            if (correctionType.equals("MIS-PUNCH")) {
                lblTitle.setText("MIS-PUNCH TIME ENTRY   - " + DOC_NO);
            }
            if (correctionType.equals("UPDATION")) {
                lblTitle.setText("TIME UPDATION ENTRY  - " + DOC_NO);
            }
            if (correctionType.equals("DELETION")) {
                lblTitle.setText("TIME DELETION ENTRY  - " + DOC_NO);
            }
            if (correctionType.equals("GRACE-TIME")) {
               lblTitle.setText("TIME Grace Minutes Allowance ENTRY  - " + DOC_NO);
            }
            //lblTitle.setText("MIS-PUNCH/DELETION TIME   - " + DOC_NO);
            lbldoc.setText(DOC_NO);
            docdate.setText(EITLERPGLOBAL.formatDate(timecorrection.getAttribute("ATT_TIME_CORRECTION_DOC_DATE").getString()));
            lblCorrectionType.setText(timecorrection.getAttribute("CORRECTION_TYPE").getString());
            //String shiftId=data.getStringValueFromDB("SELECT EMP_SHIFT_ID FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'");
            //String mainCategory=data.getStringValueFromDB("SELECT EMP_MAIN_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'");            
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) timecorrection.getAttribute("HIERARCHY_ID").getVal());
            
            FormatGrid();
            //Now Generate Table
            
            for (int i = 1; i <= timecorrection.hmTimeCorrectionDetails.size(); i++) {
                clsTimeCorrectionDetails objTimeCorrectionDetails = (clsTimeCorrectionDetails) timecorrection.hmTimeCorrectionDetails.get(Integer.toString(i));

                Object[] rowData = new Object[17];
                rowData[0] = Integer.toString(i);
                rowData[1] = objTimeCorrectionDetails.getAttribute("EMP_CODE").getString();
                String empname=data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+objTimeCorrectionDetails.getAttribute("EMP_CODE").getString()+"'");
                String empdept=data.getStringValueFromDB("SELECT DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+objTimeCorrectionDetails.getAttribute("EMP_CODE").getString()+"'");                
                rowData[2] = EITLERPGLOBAL.formatDate(objTimeCorrectionDetails.getAttribute("A_DATE").getString());
                if (correctionType.equals("GRACE-TIME")) {
                    rowData[3] = objTimeCorrectionDetails.getAttribute("ATC_SHIFT").getString();
                    rowData[4] = objTimeCorrectionDetails.getAttribute("P_TIME").getString();
                    rowData[5] = objTimeCorrectionDetails.getAttribute("ATC_FIRST_HALF_GRACE_MINUTE").getString().substring(0, 5);
                    rowData[6] = objTimeCorrectionDetails.getAttribute("ATC_SECOND_HALF_GRACE_MINUTE").getString().substring(0, 5);                    
                    rowData[7]=empname;
                    rowData[8]=empdept;                    
                    
                }
                else if (correctionType.equals("MIS-PUNCH")) {
                    rowData[3] = objTimeCorrectionDetails.getAttribute("MACHINE").getString();
                    rowData[4] = objTimeCorrectionDetails.getAttribute("P_TIME").getString();                
                    rowData[5] = objTimeCorrectionDetails.getAttribute("GATEPASS_TYPE").getString();
                    rowData[6] = objTimeCorrectionDetails.getAttribute("CORRECTION_REMARK").getString();
                    rowData[11]=empname;
                    rowData[12]=empdept;
                    try{
            String dt = "", dtbefore = "", dtafter = "",allpunches="",allpunchesbefore="",allpunchesafter="";
            String attendancemonth = "", attendanceyear = "";
            int officialcounter = 0, personalcounter = 0, yearlyofficialcounter = 0, yearlypersonalcounter = 0;
            String empcode = objTimeCorrectionDetails.getAttribute("EMP_CODE").getString();
            String attendancedate=objTimeCorrectionDetails.getAttribute("A_DATE").getString();
            System.out.println(attendancedate);
            SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
            Calendar c= Calendar.getInstance();
            c.setTime(sdf.parse(attendancedate));
            c.add(Calendar.DATE, 1);            
            dtafter=sdf.format(c.getTime());
            c.add(Calendar.DATE, -2);             
            dtbefore=sdf.format(c.getTime());
            System.out.println(dtbefore);
            System.out.println(dt);
            System.out.println(dtafter);
            
            allpunches=data.getStringValueFromDB("SELECT ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID='"+empcode+"' AND PUNCHDATE='"+attendancedate+"'");
            allpunchesbefore=data.getStringValueFromDB("SELECT ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID='"+empcode+"' AND PUNCHDATE='"+dtbefore+"'");
            allpunchesafter=data.getStringValueFromDB("SELECT ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID='"+empcode+"' AND PUNCHDATE='"+dtafter+"'");
            
            attendancemonth = attendancedate.substring(5, 7);
            attendanceyear = attendancedate.substring(0,4);
                        System.out.println(attendancemonth+"'-'"+attendanceyear);
//             Table.setValueAt(allpunchesbefore, Table.getSelectedRow(), 12); 
//             Table.setValueAt(allpunches, Table.getSelectedRow(), 13); 
//             Table.setValueAt(allpunchesafter, Table.getSelectedRow(), 14); 
                    //rowData[12] = allpunchesbefore;
                    //rowData[13]=allpunches;
                    //rowData[14]=allpunchesafter;
                    
                    rowData[13] = objTimeCorrectionDetails.getAttribute("ALL_PUNCHES_BEFOREDATE").getString();
                    rowData[14]=objTimeCorrectionDetails.getAttribute("ALL_PUNCHES_ONDATE").getString();
                    rowData[15]=objTimeCorrectionDetails.getAttribute("ALL_PUNCHES_AFTERDATE").getString();
            
                    
                    officialcounter = data.getIntValueFromDB("SELECT COUNT(*) FROM SDMLATTPAY.ATT_TIME_CORRECTION WHERE EMP_CODE='" + empcode + "' "
                    + "AND GATEPASS_TYPE='OFFICIAL' AND date_format(A_DATE,'%m')='" + attendancemonth + "' AND date_format(A_DATE,'%Y')='" + attendanceyear + "'");
            personalcounter = data.getIntValueFromDB("SELECT COUNT(*) FROM SDMLATTPAY.ATT_TIME_CORRECTION WHERE EMP_CODE='" + empcode + "' "
                    + "AND GATEPASS_TYPE='PERSONAL' AND date_format(A_DATE,'%m')='" + attendancemonth + "' AND date_format(A_DATE,'%Y')='" + attendanceyear + "'");
            yearlyofficialcounter = data.getIntValueFromDB("SELECT COUNT(*) FROM SDMLATTPAY.ATT_TIME_CORRECTION WHERE EMP_CODE='" + empcode + "' "
                    + "AND GATEPASS_TYPE='OFFICIAL' AND date_format(A_DATE,'%Y')='" + attendanceyear + "'");
            yearlypersonalcounter = data.getIntValueFromDB("SELECT COUNT(*) FROM SDMLATTPAY.ATT_TIME_CORRECTION WHERE EMP_CODE='" + empcode + "' "
                    + "AND GATEPASS_TYPE='PERSONAL' AND date_format(A_DATE,'%Y')='" + attendanceyear + "'");

            rowData[7]=officialcounter;
                    rowData[8]=personalcounter;
                    rowData[9]=yearlyofficialcounter;
                    rowData[10]=yearlypersonalcounter;
            }
            catch(Exception e){
                e.printStackTrace();
            }
                }  else if (correctionType.equals("UPDATION")) {
                    rowData[3] = objTimeCorrectionDetails.getAttribute("MACHINE").getString();
                    rowData[4] = objTimeCorrectionDetails.getAttribute("P_TIME").getString();                
                    rowData[5] = objTimeCorrectionDetails.getAttribute("NEW_TIME").getString();
                    rowData[6]=empname;
                    rowData[7]=empdept;
                    try{
            String dt = "", dtbefore = "", dtafter = "",allpunches="",allpunchesbefore="",allpunchesafter="";
            String empcode = objTimeCorrectionDetails.getAttribute("EMP_CODE").getString();
            String attendancedate=objTimeCorrectionDetails.getAttribute("A_DATE").getString();
            System.out.println(attendancedate);
            SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
            Calendar c= Calendar.getInstance();
            c.setTime(sdf.parse(attendancedate));
            c.add(Calendar.DATE, 1);            
            dtafter=sdf.format(c.getTime());
            c.add(Calendar.DATE, -2);             
            dtbefore=sdf.format(c.getTime());
            System.out.println(dtbefore);
            System.out.println(dt);
            System.out.println(dtafter);
            
            allpunches=data.getStringValueFromDB("SELECT ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID='"+empcode+"' AND PUNCHDATE='"+attendancedate+"'");
            allpunchesbefore=data.getStringValueFromDB("SELECT ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID='"+empcode+"' AND PUNCHDATE='"+dtbefore+"'");
            allpunchesafter=data.getStringValueFromDB("SELECT ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID='"+empcode+"' AND PUNCHDATE='"+dtafter+"'");
//             Table.setValueAt(allpunchesbefore, Table.getSelectedRow(), 12); 
//             Table.setValueAt(allpunches, Table.getSelectedRow(), 13); 
//             Table.setValueAt(allpunchesafter, Table.getSelectedRow(), 14); 
//                    rowData[8] = allpunchesbefore;
//                    rowData[9]=allpunches;
//                    rowData[10]=allpunchesafter;
            
                    rowData[8] = objTimeCorrectionDetails.getAttribute("ALL_PUNCHES_BEFOREDATE").getString();
                    rowData[9]=objTimeCorrectionDetails.getAttribute("ALL_PUNCHES_ONDATE").getString();
                    rowData[10]=objTimeCorrectionDetails.getAttribute("ALL_PUNCHES_AFTERDATE").getString();
            
            }
            catch(Exception e){
                e.printStackTrace();
            }
                }             
                else{
                rowData[3] = objTimeCorrectionDetails.getAttribute("MACHINE").getString();
                rowData[4] = objTimeCorrectionDetails.getAttribute("P_TIME").getString();                
                //rowData[5] = objTimeCorrectionDetails.getAttribute("NEW_TIME").getString();
                rowData[5]=empname;
                rowData[6]=empdept;
                
               try{
            String dt = "", dtbefore = "", dtafter = "",allpunches="",allpunchesbefore="",allpunchesafter="";
            String empcode = objTimeCorrectionDetails.getAttribute("EMP_CODE").getString();
            String attendancedate=objTimeCorrectionDetails.getAttribute("A_DATE").getString();
            System.out.println(attendancedate);
            SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
            Calendar c= Calendar.getInstance();
            c.setTime(sdf.parse(attendancedate));
            c.add(Calendar.DATE, 1);            
            dtafter=sdf.format(c.getTime());
            c.add(Calendar.DATE, -2);             
            dtbefore=sdf.format(c.getTime());
            System.out.println(dtbefore);
            System.out.println(dt);
            System.out.println(dtafter);
            
            allpunches=data.getStringValueFromDB("SELECT ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID='"+empcode+"' AND PUNCHDATE='"+attendancedate+"'");
            allpunchesbefore=data.getStringValueFromDB("SELECT ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID='"+empcode+"' AND PUNCHDATE='"+dtbefore+"'");
            allpunchesafter=data.getStringValueFromDB("SELECT ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID='"+empcode+"' AND PUNCHDATE='"+dtafter+"'");
//             Table.setValueAt(allpunchesbefore, Table.getSelectedRow(), 12); 
//             Table.setValueAt(allpunches, Table.getSelectedRow(), 13); 
//             Table.setValueAt(allpunchesafter, Table.getSelectedRow(), 14); 
//                    rowData[7] = allpunchesbefore;
//                    rowData[8]=allpunches;
//                    rowData[9]=allpunchesafter;
            
                   rowData[7] = objTimeCorrectionDetails.getAttribute("ALL_PUNCHES_BEFOREDATE").getString();
                   rowData[8] = objTimeCorrectionDetails.getAttribute("ALL_PUNCHES_ONDATE").getString();
                   rowData[9] = objTimeCorrectionDetails.getAttribute("ALL_PUNCHES_AFTERDATE").getString();
            }
            catch(Exception e){
                e.printStackTrace();
            }
                
                }

                DataModel.addRow(rowData);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();
            String DocNo = timecorrection.getAttribute("ATT_TIME_CORRECTION_DOC_NO").getString();
            List = SDMLATTPAY.ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, ModuleId, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];
                //JOptionPane.showMessageDialog(null, "USER ID : "+ObjFlow.getAttribute("USER_ID").getVal());
                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelApprovalStatus.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridHS();
            //HashMap History = timecorrection.getHistoryList(EITLERPGLOBAL.gCompanyID + "", DocNo);
            HashMap History = clsTimeCorrectionEntry.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for (int i = 1; i <= History.size(); i++) {
                clsTimeCorrectionEntry ObjHistory = (clsTimeCorrectionEntry) History.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (long) ObjHistory.getAttribute("UPDATED_BY").getVal());
                rowData[2] = ObjHistory.getAttribute("ENTRY_DATE").getString();

                String ApprovalStatus = "";

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }
                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }
                rowData[3] = ApprovalStatus;
                rowData[4] = ObjHistory.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjHistory.getAttribute("FROM_IP").getString();
                DataModelUpdateHistory.addRow(rowData);
            }
            //============================================================//
            //setSTATUS();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void FormatGridA() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableApprovalStatus.setAutoResizeMode(TableApprovalStatus.AUTO_RESIZE_OFF);

    }

    private void SetMenuForRights() {
        // --- Add Rights --
        //if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10005, 100051)) { //7008,70081
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10035, 100351)) { //7008,70081
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        //if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10005, 100052)) { //7008,70082
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10035, 100352)) { //7008,70082
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        //if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10005, 100053)) {
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10035, 100353)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        //if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10005, 100054)) {
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10035, 100354)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            //cmdPreview.setEnabled(false);
            //cmdPrint.setEnabled(false);
        }
    }

    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
         if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
         cmbHierarchy.setEnabled(true);
         }else {
         cmbHierarchy.setEnabled(false);
         }*/

        // select hold for default approval
        OpgHold.setSelected(true);

        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID=0;
        if(correctionType.equals("GRACE-TIME")){
             DefaultID=3865;
        }else{
             DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        }
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);
        

        if (EditMode == EITLERPGLOBAL.ADD) {
            //lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {

            int FromUserID = SDMLATTPAY.ApprovalFlow.getFromID(EITLERPGLOBAL.gCompanyID, ModuleId, timecorrection.getAttribute("ATT_TIME_CORRECTION_DOC_NO").getString());
            //lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = SDMLATTPAY.ApprovalFlow.getFromRemarks(EITLERPGLOBAL.gCompanyID, ModuleId, FromUserID, timecorrection.getAttribute("ATT_TIME_CORRECTION_DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        System.out.println(SelHierarchyID);

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (SDMLATTPAY.ApprovalFlow.IsCreator(ModuleId, timecorrection.getAttribute("ATT_TIME_CORRECTION_DOC_NO").getString() + "")) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void FormatGridHS() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From IP");

        TableUpdateHistory.setAutoResizeMode(TableUpdateHistory.AUTO_RESIZE_OFF);
    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (EITLERPGLOBAL.gNewUserID == SDMLATTPAY.ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "")) {
                List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + (ModuleId));
            } else {
                List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
            }
        }

        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = SDMLATTPAY.ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "");
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableColumnModel tcm = TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(90);
        tcm.getColumn(5).setPreferredWidth(90);
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");

        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(2).setPreferredWidth(50);
        tcm.getColumn(3).setPreferredWidth(20);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroupCorrectionType = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        mnuitemInsert = new javax.swing.JMenuItem();
        mnuitemGraceTime = new javax.swing.JMenuItem();
        mnuitemDelete = new javax.swing.JMenuItem();
        mnuitemUpdate = new javax.swing.JMenuItem();
        Tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        lblStatus = new javax.swing.JLabel();
        cmdNextToTab2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        docdate = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        lbldoc = new javax.swing.JLabel();
        docdate1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblCorrectionType = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        StatusPanel = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();

        mnuitemInsert.setText("MIS-PUNCH");
        mnuitemInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuitemInsertActionPerformed(evt);
            }
        });
        jPopupMenu1.add(mnuitemInsert);

        mnuitemGraceTime.setText("Grace Minute Allow");
        mnuitemGraceTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuitemGraceTimeActionPerformed(evt);
            }
        });
        jPopupMenu1.add(mnuitemGraceTime);

        mnuitemDelete.setText("DELETION");
        mnuitemDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuitemDeleteActionPerformed(evt);
            }
        });
        jPopupMenu1.add(mnuitemDelete);

        mnuitemUpdate.setText("Update Time");
        mnuitemUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuitemUpdateActionPerformed(evt);
            }
        });
        jPopupMenu1.add(mnuitemUpdate);

        getContentPane().setLayout(null);

        Tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(lblStatus);
        lblStatus.setBounds(10, 360, 1050, 30);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(762, 360, 120, 30);

        jLabel5.setText("Doc Date");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(276, 14, 70, 20);

        docdate.setText("DD/MM/YYYY");
        jPanel1.add(docdate);
        docdate.setBounds(360, 14, 100, 20);

        jLabel11.setText("Correction No.");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(10, 14, 110, 20);

        lbldoc.setText("DocNo");
        jPanel1.add(lbldoc);
        lbldoc.setBounds(130, 10, 120, 30);

        docdate1.setText("DD/MM/YYYY");
        jPanel1.add(docdate1);
        docdate1.setBounds(360, 4, 100, 40);

        jPanel5.setBackground(new java.awt.Color(153, 153, 153));
        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(jPanel5);
        jPanel5.setBounds(0, 40, 1160, 10);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(11, 90, 1150, 250);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jPanel1.add(btnAdd);
        btnAdd.setBounds(10, 60, 70, 30);

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        jPanel1.add(btnRemove);
        btnRemove.setBounds(90, 60, 80, 30);

        jLabel1.setText("Correction Type");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(490, 10, 120, 30);
        jPanel1.add(lblCorrectionType);
        lblCorrectionType.setBounds(620, 10, 180, 20);

        Tab.addTab("Detail", jPanel1);

        jPanel2.setLayout(null);

        Tab2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 23, 66, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(90, 20, 180, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 62, 56, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(90, 60, 180, 19);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 95, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(90, 95, 530, 19);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 130, 81, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgApproveActionPerformed(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgRejectActionPerformed(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(90, 130, 180, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 253, 60, 15);

        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(90, 250, 180, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 292, 60, 15);

        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 290, 570, 19);

        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(450, 340, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(630, 95, 33, 21);

        cmdNextToTab3.setMnemonic('N');
        cmdNextToTab3.setText("Next >>");
        cmdNextToTab3.setToolTipText("Next Tab");
        cmdNextToTab3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab3ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab3);
        cmdNextToTab3.setBounds(560, 340, 102, 25);

        jPanel2.add(Tab2);
        Tab2.setBounds(10, 0, 760, 410);

        Tab.addTab("Approval", jPanel2);

        jPanel3.setLayout(null);

        StatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StatusPanel.setLayout(null);

        jLabel60.setText("Document Approval Status");
        StatusPanel.add(jLabel60);
        jLabel60.setBounds(12, 10, 242, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableApprovalStatus);

        StatusPanel.add(jScrollPane2);
        jScrollPane2.setBounds(0, 40, 694, 120);

        jLabel19.setText("Document Update History");
        StatusPanel.add(jLabel19);
        jLabel19.setBounds(10, 170, 182, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableUpdateHistory);

        StatusPanel.add(jScrollPane6);
        jScrollPane6.setBounds(10, 190, 540, 130);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdViewHistory);
        cmdViewHistory.setBounds(570, 170, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdNormalView);
        cmdNormalView.setBounds(570, 200, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 230, 132, 24);

        txtAuditRemarks.setEnabled(false);
        StatusPanel.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(570, 260, 129, 19);

        jButton5.setText("<<Previous");
        jButton5.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton5);
        jButton5.setBounds(570, 290, 130, 30);

        jPanel3.add(StatusPanel);
        StatusPanel.setBounds(10, 0, 790, 380);

        Tab.addTab("Status", jPanel3);

        getContentPane().add(Tab);
        Tab.setBounds(0, 80, 1200, 450);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 1200, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("MIS-PUNCH/DELETION/CORRECTION OF TIME");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 1200, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged

        //SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "On State Change SelHierarchyId : "+SelHierarchyID);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
                OpgFinal.setEnabled(true);
            }
        } else {
            OpgApprove.setEnabled(false);
            OpgApprove.setSelected(false);
        }

        if (clsHierarchy.IsCreator((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgApprove.setEnabled(true);
            OpgReject.setEnabled(false);
            OpgReject.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "SelHierarchyId : "+SelHierarchyID);
        DOC_NO = lbldoc.getText();
        cmbSendTo.setEnabled(true);
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (SDMLATTPAY.ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "")) {
                cmbSendTo.setEnabled(true);
                txtToRemarks.setEnabled(true);
                txtFromRemarks.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }
        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }

        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(true);
        OpgHold.setSelected(false);
        //txtToRemarks.setEnabled(false);
        if (!OpgApprove.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);

        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {

                if (OpgApprove.isSelected()) {
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    //JOptionPane.showMessageDialog(null, "Module Id :"+ModuleId+", DOC No : "+sorder_no+", User Id : "+ObjUser.getAttribute("USER_ID").getInt()+", New user Id "+SDMLERPGLOBAL.gNewUserID);
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                    // JOptionPane.showMessageDialog(null, "IncludeUser = "+IncludeUser);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = SDMLATTPAY.ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "");
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }
    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged

    }//GEN-LAST:event_OpgApproveItemStateChanged

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged

    }//GEN-LAST:event_OpgFinalItemStateChanged

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained

    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectItemStateChanged

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained

    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked


    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged

    }//GEN-LAST:event_OpgHoldItemStateChanged

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained

    }//GEN-LAST:event_OpgHoldFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained

    }//GEN-LAST:event_cmbSendToFocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained

    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed

    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdNextToTab3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab3ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab3ActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained

    }//GEN-LAST:event_Tab2FocusGained

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed

        //timecorrection.ShowHistory(DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        //timecorrection.HistoryView = false;
        //timecorrection.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            txtAuditRemarks.setText((String) TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4));
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText = txtAuditRemarks;
            bigEdit.ShowEdit();
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void TabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabMouseClicked

    }//GEN-LAST:event_TabMouseClicked

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();

    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        // REPORT QUERY : SELECT A.DOC_NO,A.PIECE_NO,A.DL_REMARK,B.PR_MACHINE_NO,B.PR_POSITION_NO,B.PR_LENGTH,B.PR_WIDTH,B.PR_GSM,B.PR_GROUP,B.PR_STYLE,B.PR_SQMTR,B.PR_STYLE,B.PR_SYN_PER,B.PR_PIECE_REMARK,B.PR_PIECE_STAGE,B.PR_PRODUCT_CODE,B.PR_PARTY_CODE,B.PR_PO_NO,B.PR_PO_DATE,B.PR_REFERENCE_DATE,B.PR_ORDER_REMARK,B.PR_ORDER_DATE FROM  PRODUCTION.FELT_SALES_DIVERSION_LIST_APPROVAL A, PRODUCTION.FELT_SALES_PIECE_REGISTER B;
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void OpgRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgRejectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgRejectActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void OpgApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgApproveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgApproveActionPerformed

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            if (evt.getKeyCode() == 112) //F1 Key pressed
            {
                if (Table.getSelectedColumn() == 1) {
                    LOV aList = new LOV();
                    //aList.SQL = "SELECT PAY_EMP_NO AS EMP_CODE,EMP_NAME AS NAME,EMP_DEPARTMENT AS DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST ";
                    //aList.SQL = "SELECT EMP_NAME AS NAME,PAY_EMP_NO AS EMP_CODE FROM SDMLATTPAY.ATTPAY_EMPMST ";
                    aList.SQL = "SELECT PAY_EMP_NO AS EMP_CODE,EMP_NO,EMP_NAME AS NAME FROM SDMLATTPAY.ATTPAY_EMPMST ";
                    aList.ReturnCol = 1;
                    aList.ShowReturnCol = true;
                    aList.DefaultSearchOn = 1;

                    if (aList.ShowLOV()) {
                        Table.getModel().setValueAt(aList.ReturnVal, Table.getSelectedRow(), 1);
                       //setText(aList.ReturnVal);                               

                        String empname=data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+aList.ReturnVal+"'");
                        String empdept=data.getStringValueFromDB("SELECT DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+aList.ReturnVal+"'");
                        
                        if (correctionType.equals("GRACE-TIME")) {
                          Table.getModel().setValueAt(empname, Table.getSelectedRow(), 7);
                          Table.getModel().setValueAt(empdept, Table.getSelectedRow(), 8);
                        } else if (correctionType.equals("MIS-PUNCH")) {
                            Table.getModel().setValueAt(empname, Table.getSelectedRow(), 11);//10
                            Table.getModel().setValueAt(empdept, Table.getSelectedRow(), 12);//11
                        } else if (correctionType.equals("UPDATION")) {
                          Table.getModel().setValueAt(empname, Table.getSelectedRow(), 6);
                          Table.getModel().setValueAt(empdept, Table.getSelectedRow(), 7);
                        }
                        else{
                            Table.getModel().setValueAt(empname, Table.getSelectedRow(), 5);
                            Table.getModel().setValueAt(empdept, Table.getSelectedRow(), 6);
                        }
                        
                    }
                }
                if (Table.getSelectedColumn() == 4) {
                    LOV aList = new LOV();
                    //aList.SQL = "SELECT EMP_CODE,P_TIME FROM SDMLATTPAY.ATT_DATA WHERE EMP_CODE='"+txtempcd.getText().substring(3)+"'";
                    //aList.SQL = "SELECT EMP_CODE,P_TIME FROM SDMLATTPAY.ATT_DATA WHERE EMP_CODE='"+txtempcd.getText()+"' AND A_DATE='"+EITLERPGLOBAL.formatDateDB(txtGatepassdate.getText())+"' ";
                    //aList.SQL = "SELECT DATE_FORMAT(P_DATE,'%m/%d/%Y') AS PUNCH_DATE,CONCAT(SUBSTRING(P_TIME,1,2),'.',SUBSTRING(P_TIME,3,4)) AS PUNCH_TIME,MACHINE FROM SDMLATTPAY.ATT_DATA WHERE EMP_CODE='" + Table.getModel().getValueAt(Table.getSelectedRow(), 1).toString() + "' AND A_DATE='" + EITLERPGLOBAL.formatDateDB(Table.getModel().getValueAt(Table.getSelectedRow(), 2).toString()) + "' ";
                    //aList.SQL = "SELECT DATE_FORMAT(P_DATE,'%m/%d/%Y') AS PUNCH_DATE,P_TIME AS PUNCH_TIME,MACHINE FROM SDMLATTPAY.ATT_DATA WHERE EMP_CODE='" + Table.getModel().getValueAt(Table.getSelectedRow(), 1).toString() + "' AND A_DATE='" + EITLERPGLOBAL.formatDateDB(Table.getModel().getValueAt(Table.getSelectedRow(), 2).toString()) + "' ";
                    aList.SQL = "SELECT DATE_FORMAT(P_DATE,'%m/%d/%Y') AS PUNCH_DATE,P_TIME AS PUNCH_TIME,MACHINE FROM SDMLATTPAY.ATT_DATA WHERE EMP_CODE='" + Table.getModel().getValueAt(Table.getSelectedRow(), 1).toString() + "' AND A_DATE='" + EITLERPGLOBAL.formatDateDB(Table.getModel().getValueAt(Table.getSelectedRow(), 2).toString()) + "'  AND UPDATE_IND=''";
                    aList.ReturnCol = 2;
                    aList.ShowReturnCol = true;
                    aList.DefaultSearchOn = 1;
                    aList.SecondCol = 3;

                    if (aList.ShowLOV()) {
                        Table.getModel().setValueAt(aList.ReturnVal, Table.getSelectedRow(), 4);
                        Table.getModel().setValueAt(aList.SecondVal, Table.getSelectedRow(), 3);
                        //txtTOL.setText(aList.ReturnVal);

                    }
                }

            }
        }
    }//GEN-LAST:event_TableKeyPressed

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        String attendancedate = "", empcode = "", attendancemonth = "", attendanceyear = "";
        int officialcounter = 0, personalcounter = 0, yearlyofficialcounter = 0, yearlypersonalcounter = 0;
        if (Table.getSelectedColumn() == 2) {
            empcode = Table.getModel().getValueAt(Table.getSelectedRow(), 1).toString();
            if (empcode.equals("")) {
                JOptionPane.showMessageDialog(this, "Employee code is mandatory, Please insert", "ERROR", JOptionPane.ERROR_MESSAGE);

                Table.changeSelection(Table.getSelectedRow(), 1, true, true);
                //Table.requestFocus();
            }
        }
        if (Table.getSelectedColumn() == 3) {
            empcode = Table.getModel().getValueAt(Table.getSelectedRow(), 1).toString();
            attendancedate = Table.getModel().getValueAt(Table.getSelectedRow(), 2).toString();
            if (attendancedate.equals("")) {
                JOptionPane.showMessageDialog(this, "Attendance date is mandatory, Please insert", "ERROR", JOptionPane.ERROR_MESSAGE);

                Table.changeSelection(Table.getSelectedRow(), 2, true, false);
                Table.requestFocus();
            }
            
            
            attendancemonth = attendancedate.substring(3, 5);
            attendanceyear = attendancedate.substring(6);
            System.out.println(empcode);
            System.out.println(attendancedate.substring(3, 5));
            System.out.println(attendancedate.substring(6));
            officialcounter = data.getIntValueFromDB("SELECT COUNT(*) FROM SDMLATTPAY.ATT_TIME_CORRECTION WHERE EMP_CODE='" + empcode + "' "
                    + "AND GATEPASS_TYPE='OFFICIAL' AND date_format(A_DATE,'%m')='" + attendancemonth + "' AND date_format(A_DATE,'%Y')='" + attendanceyear + "'");
            personalcounter = data.getIntValueFromDB("SELECT COUNT(*) FROM SDMLATTPAY.ATT_TIME_CORRECTION WHERE EMP_CODE='" + empcode + "' "
                    + "AND GATEPASS_TYPE='PERSONAL' AND date_format(A_DATE,'%m')='" + attendancemonth + "' AND date_format(A_DATE,'%Y')='" + attendanceyear + "'");
            yearlyofficialcounter = data.getIntValueFromDB("SELECT COUNT(*) FROM SDMLATTPAY.ATT_TIME_CORRECTION WHERE EMP_CODE='" + empcode + "' "
                    + "AND GATEPASS_TYPE='OFFICIAL' AND date_format(A_DATE,'%Y')='" + attendanceyear + "'");
            yearlypersonalcounter = data.getIntValueFromDB("SELECT COUNT(*) FROM SDMLATTPAY.ATT_TIME_CORRECTION WHERE EMP_CODE='" + empcode + "' "
                    + "AND GATEPASS_TYPE='PERSONAL' AND date_format(A_DATE,'%Y')='" + attendanceyear + "'");

            if (correctionType.equals("MIS-PUNCH")) {
                Table.setValueAt(officialcounter, Table.getSelectedRow(), 7);  //6//7
                Table.setValueAt(personalcounter, Table.getSelectedRow(), 8);  //7//8
                Table.setValueAt(yearlyofficialcounter, Table.getSelectedRow(), 9); //8//9
                Table.setValueAt(yearlypersonalcounter, Table.getSelectedRow(), 10); //9//10
            }
            if(correctionType.equals("GRACE-TIME")){
                String mpunches = "", msql = "";
                        msql = "SELECT GROUP_CONCAT(DISTINCT P_TIME ORDER BY P_TIME SEPARATOR ' || ') AS PUNCHES "
                                + "FROM SDMLATTPAY.ATT_DATA A "
                                + " WHERE EMP_CODE='" + empcode + "' AND A_DATE='" + EITLERPGLOBAL.formatDateDB(attendancedate) + "'";
                        System.out.println("Punches Query:"+msql);
                        mpunches = data.getStringValueFromDB(msql);
                        Table.setValueAt(mpunches, Table.getSelectedRow(), 4);
                        Table.setValueAt(data.getStringValueFromDB("SELECT COALESCE(A_SHIFT,'') FROM SDMLATTPAY.ATT_DATA WHERE EMP_CODE='" + empcode + "' AND A_DATE='" + EITLERPGLOBAL.formatDateDB(attendancedate) + "'"), Table.getSelectedRow(), 3);
            }
            /*
             System.out.println(Table.getModel().getValueAt(Table.getSelectedRow(),2).toString().substring(0, 2));
             System.out.println(Table.getModel().getValueAt(Table.getSelectedRow(),2).toString().substring(3, 5));
     
             try {
             ResultSet tchkmnth;
             tchkmnth = data.getResult("SELECT MONTH(CURDATE()) AS VLDMONTH FROM DUAL "
             + "UNION ALL "
             + "SELECT CASE WHEN DAY(CURDATE())<=4 THEN MONTH(SUBDATE(CURDATE(),INTERVAL DAY(CURDATE()) DAY)) ELSE 0 END FROM DUAL");
             tchkmnth.first();
             int mvld = 0;
             int mselemnth = Integer.parseInt(Table.getModel().getValueAt(Table.getSelectedRow(),2).toString().substring(3, 5));
             while (!tchkmnth.isAfterLast()) {
             if (mselemnth == tchkmnth.getInt("VLDMONTH")) {
             mvld = 1;
             }
             tchkmnth.next();
             }
             if (mvld == 0) {
             JOptionPane.showMessageDialog(this, "Please Select Valid Month...", "ERROR", JOptionPane.ERROR_MESSAGE);                
             Table.getModel().setValueAt("", Table.getSelectedRow(), 2);
             return;                
             }
             } catch (Exception e) {
             e.printStackTrace();
             }
             */
        }
        /*
         if (evt.getKeyChar() == KeyEvent.VK_TAB || evt.getKeyChar() == 10) {
         System.out.println("tab or enter : " + Table.getSelectedColumn());
         if (Table.getSelectedColumn() == 1 || Table.getSelectedColumn() == 2) {
         try {
         String pc = Table.getValueAt(Table.getSelectedRow(), 1).toString().toUpperCase().trim();
         System.out.println("pice no"+pc);

         int count = data.getIntValueFromDB("SELECT COUNT(PR_PIECE_NO) FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + pc + "'");

         if (count < 1) {
         DataModel.removeRow(Table.getSelectedRow());
         JOptionPane.showMessageDialog(null, "Piece not found.");
         } else {
         System.out.println(pc.substring(0,5));
         String strsql="SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + pc.substring(0,5) + "' ";

         ResultSet rsTmp1 = data.getConn().createStatement().executeQuery(strsql);
         rsTmp1.first();
         //
         //                        Connection con=data.getConn();
         //                        Statement stmt=con.createStatement();
         //                        ResultSet rsTmp1=stmt.executeQuery(strsql);

         //                        String WarpADate=data.getStringValueFromDB("SELECT PR_WARP_A_DATE FROM PRODUCITON.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO="+pc.substring(0,5)+" ");
         //                        String WarpBDate=data.getStringValueFromDB("SELECT PR_WARP_B_DATE FROM PRODUCITON.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO="+pc.substring(0,5)+" ");
         //                        String MndADate=data.getStringValueFromDB("SELECT PR_MND_A_DATE FROM PRODUCITON.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO="+pc.substring(0,5)+" ");
         //                        String MndBDate=data.getStringValueFromDB("SELECT PR_MND_B_DATE FROM PRODUCITON.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO="+pc.substring(0,5)+" ");
         //                        String InvDate=data.getStringValueFromDB("SELECT PR_INVOICE_DATE FROM PRODUCITON.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO="+pc.substring(0,5)+" ");
         //                        String FnsgDate=data.getStringValueFromDB("SELECT PR_FNSG_DATE FROM PRODUCITON.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO="+pc.substring(0,5)+" ");
         //                        String NdlDate=data.getStringValueFromDB("SELECT PR_NDL_DATE FROM PRODUCITON.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO="+pc.substring(0,5)+" ");
         //
         String WarpADate=rsTmp1.getString("PR_WARP_A_DATE");
         String WarpBDate=rsTmp1.getString("PR_WARP_B_DATE");
         String MndADate=rsTmp1.getString("PR_MND_A_DATE");
         String MndBDate=rsTmp1.getString("PR_MND_B_DATE");
         String InvDate=rsTmp1.getString("PR_INVOICE_DATE");
         String FnsgDate=rsTmp1.getString("PR_FNSG_DATE");
         String NdlDate=rsTmp1.getString("PR_NDL_DATE");

         if(pc.contains("A")){
         if(WarpADate.equals("") || WarpADate.equals("0000-00-00")){
         DataModel.removeRow(Table.getSelectedRow());
         JOptionPane.showMessageDialog(null, "Piece with suffix A is not warped.");
         return;
         }

         }else if(pc.contains("B")){
         if(WarpBDate.equals("") || WarpBDate.equals("0000-00-00")){
         DataModel.removeRow(Table.getSelectedRow());
         JOptionPane.showMessageDialog(null, "Piece with suffix B is not warped.");
         return;
         }
         }else{
         if(WarpADate.equals("") || WarpADate.equals("0000-00-00")){
         DataModel.removeRow(Table.getSelectedRow());
         JOptionPane.showMessageDialog(null, "Piece is not warped.");
         return;
         }
         }

         if(pc.contains("A")){
         if(!(MndADate.equals("") || MndADate.equals("0000-00-00"))){
         DataModel.removeRow(Table.getSelectedRow());
         JOptionPane.showMessageDialog(null, "Piece with suffix A is already mended");
         return;
         }

         }else if(pc.contains("B")){
         if(!(MndBDate.equals("") || MndBDate.equals("0000-00-00"))){
         DataModel.removeRow(Table.getSelectedRow());
         JOptionPane.showMessageDialog(null, "Piece with suffix B is already mended");
         return;
         }
         }else{
         if(!(MndADate.equals("") || MndADate.equals("0000-00-00"))){
         DataModel.removeRow(Table.getSelectedRow());
         JOptionPane.showMessageDialog(null, "Piece is already mended.");
         return;
         }
         }
         if(!(NdlDate.equals("") || NdlDate.equals("0000-00-00"))){
         DataModel.removeRow(Table.getSelectedRow());
         JOptionPane.showMessageDialog(null, "Piece is already needled.");
         return;
         }
         if(!(FnsgDate.equals("") || FnsgDate.equals("0000-00-00"))){
         DataModel.removeRow(Table.getSelectedRow());
         JOptionPane.showMessageDialog(null, "Piece is already finished.");
         return;
         }
         if(!(InvDate.equals("") || InvDate.equals("0000-00-00"))){
         DataModel.removeRow(Table.getSelectedRow());
         JOptionPane.showMessageDialog(null, "Piece is already Invoiced.");
         return;
         }

         }
         } catch (Exception e) {
         e.printStackTrace();
         }
         }
         //            if (Table.getSelectedColumn() == 15) {
         //                Table.setValueAt(Table.getValueAt(Table.getSelectedRow(), 14), Table.getSelectedRow(), 15);
         //            }
         }*//*
        if (Table.getSelectedColumn() == 2) {
                   empcode=Table.getModel().getValueAt(Table.getSelectedRow(), 1).toString();
                   System.out.println(empcode);     
                        String payempcode=data.getStringValueFromDB("SELECT PAY_EMP_NO FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE EMP_NO='"+empcode+"'");
                        String empname=data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE EMP_NO='"+empcode+"'");
                        String empdept=data.getStringValueFromDB("SELECT DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE EMP_NO='"+empcode+"'");
                        Table.getModel().setValueAt(payempcode, Table.getSelectedRow(), 1);
                        if (correctionType.equals("UPDATION")) {
                          Table.getModel().setValueAt(empname, Table.getSelectedRow(), 7);
                          Table.getModel().setValueAt(empdept, Table.getSelectedRow(), 8);
                        } else if (correctionType.equals("MIS-PUNCH")) {
                            Table.getModel().setValueAt(empname, Table.getSelectedRow(), 10);
                            Table.getModel().setValueAt(empdept, Table.getSelectedRow(), 11);
                        }
                        else{
                            Table.getModel().setValueAt(empname, Table.getSelectedRow(), 5);
                            Table.getModel().setValueAt(empdept, Table.getSelectedRow(), 6);
                        }
                        
                    
                }
        *//*
        if(EditMode!=0 && btnAdd.isEnabled()) {
            if(evt.getKeyCode()==67&&evt.getModifiersEx()==128) //Ctrl+C Key Combonation
            {
                //Check that any row exist
                if(Table.getRowCount()>0) {
                    //First Add new row
                    Object[] rowData=new Object[1];
                    DataModel.addRow(rowData);
                    int NewRow=Table.getRowCount()-1;
                    
                    //Copy New row with Previous one
                    for(int i=0;i<Table.getColumnCount();i++) {
                        Table.setValueAt(Table.getValueAt(Table.getSelectedRow(),i), NewRow, i);
                    }
                    UpdateSrNo();
                }
            }
        }*/
        if (Table.getSelectedColumn() == 5) {
            
            try{
            String dt = "", dtbefore = "", dtafter = "",allpunches="",allpunchesbefore="",allpunchesafter="";
            empcode = Table.getModel().getValueAt(Table.getSelectedRow(), 1).toString();
            attendancedate=EITLERPGLOBAL.formatDateDB(Table.getValueAt(Table.getSelectedRow(),2).toString());
            System.out.println(attendancedate);
            SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
            Calendar c= Calendar.getInstance();
            c.setTime(sdf.parse(attendancedate));
            c.add(Calendar.DATE, 1);            
            dtafter=sdf.format(c.getTime());
            c.add(Calendar.DATE, -2);             
            dtbefore=sdf.format(c.getTime());
            System.out.println(dtbefore);
            System.out.println(dt);
            System.out.println(dtafter);
            
            allpunches=data.getStringValueFromDB("SELECT ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID='"+empcode+"' AND PUNCHDATE='"+attendancedate+"'");
            allpunchesbefore=data.getStringValueFromDB("SELECT ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID='"+empcode+"' AND PUNCHDATE='"+dtbefore+"'");
            allpunchesafter=data.getStringValueFromDB("SELECT ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID='"+empcode+"' AND PUNCHDATE='"+dtafter+"'");
            if(correctionType.equals("MIS-PUNCH")){
             Table.setValueAt(allpunchesbefore, Table.getSelectedRow(), 13); //12
             Table.setValueAt(allpunches, Table.getSelectedRow(), 14); //13
             Table.setValueAt(allpunchesafter, Table.getSelectedRow(), 15); //14             
            }
            else if(correctionType.equals("UPDATION")){
             Table.setValueAt(allpunchesbefore, Table.getSelectedRow(), 8); 
             Table.setValueAt(allpunches, Table.getSelectedRow(), 9); 
             Table.setValueAt(allpunchesafter, Table.getSelectedRow(), 10);             
            }
            else if(correctionType.equals("DELETION")){
             Table.setValueAt(allpunchesbefore, Table.getSelectedRow(), 7); 
             Table.setValueAt(allpunches, Table.getSelectedRow(), 8); 
             Table.setValueAt(allpunchesafter, Table.getSelectedRow(), 9);             
            }
            }
            catch(Exception e){
                e.printStackTrace();
            }
            
        }
    }//GEN-LAST:event_TableKeyReleased

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
//        if(Table.getRowCount()==0){
//        DataModel.addColumn("OFC Count");
//        DataModel.addColumn("PER Count");
//        }

        Object[] rowData = new Object[11];
        rowData[0] = Integer.toString(Table.getRowCount() + 1);
        rowData[1] = "";
        rowData[2] = "";
        if (correctionType.equals("MIS-PUNCH")) {
            rowData[3] = "00";
        }else{
            rowData[3] = "";
        }
        rowData[4] = "";
        rowData[5] = "";
        if (correctionType.equals("MIS-PUNCH")) {
            rowData[6] = "";
            rowData[7] = "";
            rowData[8] = "";
            rowData[9] = "";
            rowData[10] = "";
            //rowData[7] = correctionType;
        }
        //else{
        //rowData[6] = correctionType;
        //rowData[7] = "";
        //}
        //rowData[6] = correctionType;
        //rowData[7] = "";

        DataModel.addRow(rowData);
        Table.changeSelection(Table.getRowCount() - 1, 1, false, false);
        Table.requestFocus();
        lblStatus.setText("Press F1 for Emp Code,Attd Date in [DD/MM/YYYY],Grace Minute in [HH:MM] format"); 
    }//GEN-LAST:event_btnAddActionPerformed

    private void mnuitemInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuitemInsertActionPerformed
        correctionType = "MIS-PUNCH";

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        SetupApproval();
        clearFields();

        EITLERP.FeltSales.common.SelectFirstFree aList = new EITLERP.FeltSales.common.SelectFirstFree();
        aList.ModuleID = ModuleId;
        aList.FirstFreeNo = 316;
        FFNo = aList.FirstFreeNo;
        lbldoc.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        //lblTitle.setText("MISSING/SCANNED TIME CORRECTION - " + lbldoc.getText());
        if (correctionType.equals("MIS-PUNCH")) {
            lblTitle.setText("MIS-PUNCH TIME ENTRY   - " + lbldoc.getText());
        }
        if (correctionType.equals("UPDATION")) {
            lblTitle.setText("TIME UPDATION ENTRY  - " + lbldoc.getText());
        }
        if (correctionType.equals("DELETION")) {
            lblTitle.setText("TIME DELETION ENTRY  - " + lbldoc.getText());
        }
        if (correctionType.equals("GRACE-TIME")) {
            lblTitle.setText("TIME Grace Minutes Allowance ENTRY  - " + lbldoc.getText());
        }
        docdate.setText(EITLERPGLOBAL.getCurrentDate());
        docdate1.setText(EITLERPGLOBAL.getCurrentDateTimeDB());
        lblCorrectionType.setText(correctionType);

        //OpgFinal.setSelected(true);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_mnuitemInsertActionPerformed

    private void mnuitemGraceTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuitemGraceTimeActionPerformed
        correctionType = "GRACE-TIME";

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        SetupApproval();
        clearFields();

        EITLERP.FeltSales.common.SelectFirstFree aList = new EITLERP.FeltSales.common.SelectFirstFree();
        aList.ModuleID = ModuleId;
        aList.FirstFreeNo = 316;
        FFNo = aList.FirstFreeNo;
        lbldoc.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        //lblTitle.setText("MISSING/SCANNED TIME CORRECTION - " + lbldoc.getText());
        if (correctionType.equals("MIS-PUNCH")) {
            lblTitle.setText("MIS-PUNCH TIME ENTRY   - " + lbldoc.getText());
        }
        if (correctionType.equals("UPDATION")) {
            lblTitle.setText("TIME UPDATION ENTRY  - " + lbldoc.getText());
        }
        if (correctionType.equals("DELETION")) {
            lblTitle.setText("TIME DELETION ENTRY  - " + lbldoc.getText());
        }
        if (correctionType.equals("GRACE-TIME")) {
            lblTitle.setText("TIME Grace Minutes Allowance ENTRY  - " + lbldoc.getText());
        }
        docdate.setText(EITLERPGLOBAL.getCurrentDate());
        docdate1.setText(EITLERPGLOBAL.getCurrentDateTimeDB());
        lblCorrectionType.setText(correctionType);

        //OpgFinal.setSelected(true);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_mnuitemGraceTimeActionPerformed

    private void mnuitemDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuitemDeleteActionPerformed
        correctionType = "DELETION";

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        SetupApproval();
        clearFields();

        EITLERP.FeltSales.common.SelectFirstFree aList = new EITLERP.FeltSales.common.SelectFirstFree();
        aList.ModuleID = ModuleId;
        aList.FirstFreeNo = 316;
        FFNo = aList.FirstFreeNo;
        lbldoc.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        //lblTitle.setText("MISSING/SCANNED TIME CORRECTION - " + lbldoc.getText());
        if (correctionType.equals("MIS-PUNCH")) {
            lblTitle.setText("MIS-PUNCH TIME ENTRY   - " + lbldoc.getText());
        }
        if (correctionType.equals("UPDATION")) {
            lblTitle.setText("TIME UPDATION ENTRY  - " + lbldoc.getText());
        }
        if (correctionType.equals("DELETION")) {
            lblTitle.setText("TIME DELETION ENTRY  - " + lbldoc.getText());
        }
        if (correctionType.equals("GRACE-TIME")) {
            lblTitle.setText("TIME Grace Minutes Allowance ENTRY  - " + lbldoc.getText());
        }
        docdate.setText(EITLERPGLOBAL.getCurrentDate());
        docdate1.setText(EITLERPGLOBAL.getCurrentDateTimeDB());
        lblCorrectionType.setText(correctionType);

        //OpgFinal.setSelected(true);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_mnuitemDeleteActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        if (Table.getRowCount() > 0) {
            DataModel.removeRow(Table.getSelectedRow());
        }
//        if(Table.getRowCount()==0){        
//            DataModel.addColumn("OFC Count");        
//            DataModel.addColumn("PER Count");            
//        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void mnuitemUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuitemUpdateActionPerformed
        correctionType = "UPDATION";

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        SetupApproval();
        clearFields();

        EITLERP.FeltSales.common.SelectFirstFree aList = new EITLERP.FeltSales.common.SelectFirstFree();
        aList.ModuleID = ModuleId;
        aList.FirstFreeNo = 316;
        FFNo = aList.FirstFreeNo;
        lbldoc.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        //lblTitle.setText("MISSING/SCANNED TIME CORRECTION - " + lbldoc.getText());
        if (correctionType.equals("MIS-PUNCH")) {
            lblTitle.setText("MIS-PUNCH TIME ENTRY   - " + lbldoc.getText());
        }
        if (correctionType.equals("UPDATION")) {
            lblTitle.setText("TIME UPDATION ENTRY  - " + lbldoc.getText());
        }
        if (correctionType.equals("DELETION")) {
            lblTitle.setText("TIME DELETION ENTRY  - " + lbldoc.getText());
        }
        if (correctionType.equals("GRACE-TIME")) {
            lblTitle.setText("TIME Grace Minutes Allowance ENTRY  - " + lbldoc.getText());
        }
        docdate.setText(EITLERPGLOBAL.getCurrentDate());
        docdate1.setText(EITLERPGLOBAL.getCurrentDateTimeDB());
        lblCorrectionType.setText(correctionType);

        //OpgFinal.setSelected(true);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_mnuitemUpdateActionPerformed

    private void MoveFirst() {
        timecorrection.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        timecorrection.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        timecorrection.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        timecorrection.MoveLast();
        DisplayData();
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "SDMLATTPAY.gatepass.FrmTimeCorrectionEntryFind", true);
        FrmTimeCorrectionEntryFind ObjTimeCorrectionFind = (FrmTimeCorrectionEntryFind) ObjLoader.getObj();

        if (ObjTimeCorrectionFind.Cancelled == false) {
            if (!timecorrection.Filter(ObjTimeCorrectionFind.stringFindQuery)) {
                JOptionPane.showMessageDialog(FrmTimeCorrectionEntry.this, " No records found.", "Find Time Correction Details", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    public void FindWaiting() {
        timecorrection.Filter(" DOC_NO IN (SELECT DISTINCT SDMLATTPAY.ATT_TIME_CORRECTION.ATT_TIME_CORRECTION_DOC_NO FROM SDMLATTPAY.ATT_TIME_CORRECTION, SDMLATTPAY.D_COM_DOC_DATA WHERE SDMLATTPAY.ATT_TIME_CORRECTION.ATT_TIME_CORRECTION_DOC_NO=SDMLATTPAY.D_COM_DOC_DATA.DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=" + ModuleId + " AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void Add() {
        jPopupMenu1.show(cmdNew, 0, 35);
        /*       
         EditMode = EITLERPGLOBAL.ADD;
         SetFields(true);
         DisableToolbar();
         SetupApproval();
         clearFields();

         EITLERP.FeltSales.common.SelectFirstFree aList = new EITLERP.FeltSales.common.SelectFirstFree();
         aList.ModuleID = ModuleId;
         aList.FirstFreeNo = 316;
         FFNo = aList.FirstFreeNo;
         lbldoc.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
         //lblTitle.setText("MISSING/SCANNED TIME CORRECTION - " + lbldoc.getText());
         if (correctionType.equals("MIS-PUNCH")) {
         lblTitle.setText("MIS-PUNCH TIME ENTRY   - " + lbldoc.getText());
         }
         if (correctionType.equals("UPDATION")) {
         lblTitle.setText("TIME UPDATION ENTRY  - " + lbldoc.getText());
         }
         if (correctionType.equals("DELETION")) {
         lblTitle.setText("TIME DELETION ENTRY  - " + lbldoc.getText());
         }
         docdate.setText(EITLERPGLOBAL.getCurrentDate());
         docdate1.setText(EITLERPGLOBAL.getCurrentDateTimeDB());
         lblCorrectionType.setText(correctionType);

         OpgFinal.setSelected(true);
         */
    }

    private void FormatGrid() {
        DataModel = new EITLTableModel();
        Table.removeAll();

        Table.setModel(DataModel);
        TableColumnModel ColModel = Table.getColumnModel();
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        //Add Columns to it
        DataModel.addColumn("Sr. No.");
        DataModel.addColumn("Emp Code");
        //DataModel.addColumn("Attendance Date");
        DataModel.addColumn("Attd Date");
        if (correctionType.equals("GRACE-TIME")) {
            DataModel.addColumn("Shift");
            DataModel.addColumn("Punch Time");
            DataModel.addColumn("First Half Grace Minutes");
            DataModel.addColumn("Second Half Grace Minutes");
            
            DataModel.addColumn("EMP Name");
            DataModel.addColumn("EMP Dept");            
            
             Table.getColumnModel().getColumn(4).setMinWidth(200);
              Table.getColumnModel().getColumn(5).setMinWidth(140);
              Table.getColumnModel().getColumn(6).setMinWidth(140);
        } else if (correctionType.equals("MIS-PUNCH")) {
            DataModel.addColumn("Machine");
            DataModel.addColumn("Punch Time");                       
            
            DataModel.addColumn("Type");
            DataModel.addColumn("Remark");
            DataModel.addColumn("OFC Count");
            DataModel.addColumn("PER Count");
            DataModel.addColumn("OFC Year Count");
            DataModel.addColumn("PER Year Count");
            DataModel.addColumn("EMP Name");
            DataModel.addColumn("EMP Dept");
            DataModel.addColumn("Dt Before");
            DataModel.addColumn("On Dt");
            DataModel.addColumn("Dt After");

        } else if (correctionType.equals("UPDATION")) {
            DataModel.addColumn("Machine");
            DataModel.addColumn("Punch Time");
            DataModel.addColumn("New Time");            
            
            DataModel.addColumn("EMP Name");
            DataModel.addColumn("EMP Dept");
            DataModel.addColumn("Dt Before");
            DataModel.addColumn("On Dt");
            DataModel.addColumn("Dt After");

        } else {
            DataModel.addColumn("Machine");
            DataModel.addColumn("Punch Time");
            //DataModel.addColumn("New Time");
            
            DataModel.addColumn("EMP Name");
            DataModel.addColumn("EMP Dept");
            
            DataModel.addColumn("Dt Before");
            DataModel.addColumn("On Dt");
            DataModel.addColumn("Dt After");
        }
        //DataModel.addColumn("Correction Type");
       
        //DataModel.addColumn("EMP Name");
        //DataModel.addColumn("EMP Dept");

        Table.getColumnModel().getColumn(0).setMaxWidth(45);
        Table.getColumnModel().getColumn(1).setMinWidth(80);
        /* 
         JComboBox cmbCorrectionType = new JComboBox();

         EITLComboModel cmbCorrectionTypeModel = new EITLComboModel();
         cmbCorrectionType.removeAllItems();
         cmbCorrectionType.setModel(cmbCorrectionTypeModel);

         ComboData aData = new ComboData();
         aData.strCode="INSERTED";
         aData.Text="INSERTED";
         //            aData.Code = 1;
         //            aData.Text = "Single";
         cmbCorrectionTypeModel.addElement(aData);

         aData = new ComboData();
         aData.strCode = "DELETED";
         aData.Text = "DELETED";
         cmbCorrectionTypeModel.addElement(aData);

         aData = new ComboData();
         aData.strCode = "CORRECTED";
         aData.Text = "CORRECTED";
         cmbCorrectionTypeModel.addElement(aData);
            
         Table.getColumnModel().getColumn(5).setCellEditor(new DefaultCellEditor(cmbCorrectionType));
         */
        if (correctionType.equals("MIS-PUNCH")) {
            JComboBox cmbDayType = new JComboBox();

            EITLComboModel cmbGatepassTypeModel = new EITLComboModel();
            cmbDayType.removeAllItems();
            cmbDayType.setModel(cmbGatepassTypeModel);

            ComboData aData = new ComboData();
            aData.strCode = "PERSONAL";
            aData.Text = "PERSONAL";
            cmbGatepassTypeModel.addElement(aData);

            aData = new ComboData();
            aData.strCode = "OFFICIAL";
            aData.Text = "OFFICIAL";
            cmbGatepassTypeModel.addElement(aData);
            
            aData = new ComboData();
            aData.strCode = "CARD ENTRY";
            aData.Text = "CARD ENTRY";
            cmbGatepassTypeModel.addElement(aData);
            //Renderer.setCustomComponent(tblDetailDataModel.getColFromVariable("LVT_LEAVE_TYPE"), "ComboBox");
            //Renderer.setCustomComponent(tblDetailDataModel.getColFromVariable("LVT_LEAVE_TYPE"), cmbLeavaType);            
            if (correctionType.equals("MIS-PUNCH")) {
            Table.getColumnModel().getColumn(5).setCellEditor(new DefaultCellEditor(cmbDayType));
            }
        }
    }

    private void Save() {
        if(!Validate()) {
            return;
        }
        
        
        SetData();

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //timecorrection.LoadData();
        if (EditMode == EITLERPGLOBAL.ADD) {
            if (timecorrection.Insert()) {
                clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, true);

                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + timecorrection.LastError, " SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (timecorrection.Update()) {
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + timecorrection.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
//        try {
//            if (PENDING_DOCUMENT) {
//                frmPA.RefreshView();
//                PENDING_DOCUMENT = false;
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
        
        try {
            frmPA.RefreshView();
        } catch (Exception e) {
        }

    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();

    }

    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void Edit() {

        //String DocumentNo = timecorrection.getAttribute("ATT_TIME_CORRRECTION_DOC_NO").getString();
        //String DocumentNo = lbldoc.getText();
        String DocumentNo = DOC_NO;

        //if (timecorrection.IsEditable(EITLERPGLOBAL.gCompanyID, DocumentNo, EITLERPGLOBAL.gNewUserID)) {
        if (timecorrection.IsEditable(DocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateCombos();
            //GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            SetupApproval();
            //ReasonResetReadonly();
            //cmbOrderReason.setEnabled(false);
            if (SDMLATTPAY.ApprovalFlow.IsCreator(ModuleId, DocumentNo)) {
                SetFields(true);
            } else {
                EnableApproval();
            }
            //OpgFinal.setSelected(true);
            OpgHold.setSelected(true);
        } else {
            JOptionPane.showMessageDialog(null, "You cannot edit this record. \n It is either approved/rejected or waiting approval for other user");
        }
    }

// find rate update by doc no
    public void Find(String docNo) {
        //timecorrection.Filter(" DOC_NO='" + docNo + "'");
        timecorrection.Filter(" ATT_TIME_CORRECTION_DOC_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    public void FindEx(int pCompanyID, String docno) {
        //timecorrection.Filter(" DOC_NO='" + docno + "'");
        timecorrection.Filter(" ATT_TIME_CORRECTION_DOC_NO='" + docno + "'");
        timecorrection.MoveFirst();
        DisplayData();
    }

    private void Delete() {

    }

    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = SDMLATTPAY.ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, ModuleId, lbldoc.getText());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

    }

    private void SetFields(boolean pStat) {

        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        btnAdd.setEnabled(pStat);
        btnRemove.setEnabled(pStat);

        SetupApproval();
    }

    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    private void SetData() {
        if (EditMode == EITLERPGLOBAL.ADD) {
        EITLERP.FeltSales.common.SelectFirstFree aList = new EITLERP.FeltSales.common.SelectFirstFree();
        aList.ModuleID = ModuleId;
        aList.FirstFreeNo = 316;
        FFNo = aList.FirstFreeNo;
        //lbldoc.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));      
        timecorrection.setAttribute("ATT_TIME_CORRECTION_DOC_NO", clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        }
        else{
        timecorrection.setAttribute("ATT_TIME_CORRECTION_DOC_NO", lbldoc.getText());
        }
        
        
        DOC_NO = lbldoc.getText();
        //timecorrection.setAttribute("ATT_TIME_CORRECTION_DOC_NO", DOC_NO);
        //timecorrection.setAttribute("ATT_TIME_CORRECTION_DOC_NO", clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        timecorrection.setAttribute("ATT_TIME_CORRECTION_DOC_DATE", docdate.getText());
        timecorrection.setAttribute("CORRECTION_TYPE", lblCorrectionType.getText());

        timecorrection.setAttribute("MODULE_ID", ModuleId);
        timecorrection.setAttribute("USER_ID", EITLERPGLOBAL.gNewUserID);

        timecorrection.setAttribute("REJECTED_REMARKS", txtToRemarks.getText());
        timecorrection.setAttribute("REMARKS", "");
        timecorrection.setAttribute("APPROVAL_STATUS", "");
        timecorrection.setAttribute("APPROVER_REMARKS", txtFromRemarks.getText());
        timecorrection.setAttribute("ENTRY_DATE", EITLERPGLOBAL.getCurrentDateDB());

        //----- Update Approval Specific Fields -----------//
        timecorrection.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        timecorrection.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        timecorrection.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        timecorrection.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            timecorrection.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            timecorrection.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            timecorrection.setAttribute("APPROVAL_STATUS", "R");
            timecorrection.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            timecorrection.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            timecorrection.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            timecorrection.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        } else {
            timecorrection.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            timecorrection.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
            timecorrection.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
            timecorrection.setAttribute("UPDATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }
        int i = 0;
        String empcode = "", attendancedate = "", punchtime = "", newtime = "", machine = "", gatepasstype = "", correctionremark="";
        timecorrection.hmTimeCorrectionDetails.clear();
        //Check the entered details in Table.
        for (i = 0; i <= Table.getRowCount() - 1; i++) {
            empcode = ((String) Table.getValueAt(i, 1)).trim().toUpperCase();
            attendancedate = ((String) Table.getValueAt(i, 2)).trim().toUpperCase();
            machine = ((String) Table.getValueAt(i, 3)).trim().toUpperCase();
            punchtime = ((String) Table.getValueAt(i, 4)).trim().toUpperCase();
            if (correctionType.equals("UPDATION")) {
            newtime = ((String) Table.getValueAt(i, 5)).trim().toUpperCase();
            } else {
                newtime = "";
            }
            if (correctionType.equals("MIS-PUNCH")) {
                gatepasstype = ((String) Table.getValueAt(i, 5)).trim().toUpperCase(); //6
                correctionremark = ((String) Table.getValueAt(i, 6)).trim().toUpperCase(); 
            } else {
                gatepasstype = "";
                correctionremark ="";
            }

            clsTimeCorrectionDetails correctiondetails = new clsTimeCorrectionDetails();

            correctiondetails.setAttribute("EMP_CODE", empcode);
            correctiondetails.setAttribute("A_DATE", attendancedate);
            if (correctionType.equals("GRACE-TIME")) {
                correctiondetails.setAttribute("P_TIME", punchtime);
                correctiondetails.setAttribute("ATC_SHIFT", ((String) Table.getValueAt(i, 3)).trim().toUpperCase());
                correctiondetails.setAttribute("ATC_FIRST_HALF_GRACE_MINUTE", ((String) Table.getValueAt(i, 5)).trim().toUpperCase());
                correctiondetails.setAttribute("ATC_SECOND_HALF_GRACE_MINUTE", ((String) Table.getValueAt(i, 6)).trim().toUpperCase());
            } else {
                correctiondetails.setAttribute("MACHINE", machine);
                correctiondetails.setAttribute("P_TIME", punchtime);
                correctiondetails.setAttribute("NEW_TIME", newtime);
            }
            correctiondetails.setAttribute("GATEPASS_TYPE", gatepasstype);
            correctiondetails.setAttribute("CORRECTION_REMARK", correctionremark);
            
            if (correctionType.equals("MIS-PUNCH")) {
                
                correctiondetails.setAttribute("ALL_PUNCHES_ONDATE", ((String) Table.getValueAt(i, 14)).trim());
                correctiondetails.setAttribute("ALL_PUNCHES_BEFOREDATE", ((String) Table.getValueAt(i, 13)).trim());
                correctiondetails.setAttribute("ALL_PUNCHES_AFTERDATE", ((String) Table.getValueAt(i, 15)).trim());
            }else if (correctionType.equals("UPDATION")) {
                correctiondetails.setAttribute("ALL_PUNCHES_ONDATE", ((String) Table.getValueAt(i, 9)).trim());
                correctiondetails.setAttribute("ALL_PUNCHES_BEFOREDATE", ((String) Table.getValueAt(i, 8)).trim());
                correctiondetails.setAttribute("ALL_PUNCHES_AFTERDATE", ((String) Table.getValueAt(i, 10)).trim());
            }else if (correctionType.equals("DELETION")) {
                correctiondetails.setAttribute("ALL_PUNCHES_ONDATE", ((String) Table.getValueAt(i, 8)).trim());
                correctiondetails.setAttribute("ALL_PUNCHES_BEFOREDATE", ((String) Table.getValueAt(i, 7)).trim());
                correctiondetails.setAttribute("ALL_PUNCHES_AFTERDATE", ((String) Table.getValueAt(i, 9)).trim());
            }else {
                correctiondetails.setAttribute("ALL_PUNCHES_ONDATE", "");
                correctiondetails.setAttribute("ALL_PUNCHES_BEFOREDATE", "");
                correctiondetails.setAttribute("ALL_PUNCHES_AFTERDATE", "");
            }
            
            timecorrection.hmTimeCorrectionDetails.put(Integer.toString(timecorrection.hmTimeCorrectionDetails.size() + 1), correctiondetails);

        }
    }
    
    private void UpdateSrNo() {
        //int SrCol = DataModelL.getColFromVariable("SR_NO");

        for (int i = 0; i < Table.getRowCount(); i++) {
            Table.setValueAt(Integer.toString(i + 1), i, 0);
        }
    }
    
    
    private boolean Validate() {
        //Form level validations
        String Msg = "";
        if(lbldoc.getText().equals("")) {
            JOptionPane.showMessageDialog(this,"Document no does not exists.");
            return false;
        }
        
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(this,"Please select the hierarchy.");
            return false;
        }
        
        
        if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this,"Please select the Approval Action");
            return false;
        }
        
        //Check the no. of items
        if(Table.getRowCount()<=0) {
            JOptionPane.showMessageDialog(this,"Please enter some records.");
            return false;
        }
               
        
        for(int i=0;i<=Table.getRowCount()-1;i++) {
            if(correctionType.equals("MIS-PUNCH")){
            String mispunchtype=Table.getModel().getValueAt(i,5).toString();
            String punchtime=Table.getModel().getValueAt(i,4).toString();
            if(mispunchtype.equals("")) {
                JOptionPane.showMessageDialog(this,"Please enter mispunchtype.");
                return false;
            }
            if(punchtime.equals("")) {
                JOptionPane.showMessageDialog(this,"Please enter Punch time.");
                return false;
            }
            } 
        }
        
        if(OpgReject.isSelected()&&txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Please enter the remarks for rejection");
            return false;
        }
        
        if( (OpgApprove.isSelected()||OpgReject.isSelected())&&cmbSendTo.getItemCount()<=0) {
            JOptionPane.showMessageDialog(this,"Please select the user, to whom rejected document to be send");
            return false;
        }
        return true;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnRemove;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroupCorrectionType;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdNextToTab3;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel docdate;
    private javax.swing.JLabel docdate1;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblCorrectionType;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lbldoc;
    private javax.swing.JMenuItem mnuitemDelete;
    private javax.swing.JMenuItem mnuitemGraceTime;
    private javax.swing.JMenuItem mnuitemInsert;
    private javax.swing.JMenuItem mnuitemUpdate;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables

}
