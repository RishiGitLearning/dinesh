/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SDMLATTPAY.gatepass;

import SDMLATTPAY.gatepass.*;
import EITLERP.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import org.apache.commons.lang.time.DurationFormatUtils;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.Row;

/**
 *
 * @author root
 *
 */
public class FrmGatepass extends javax.swing.JApplet {

    private int EditMode = 0;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbModuleModel;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;    
    private EITLTableCellRenderer CellAlign = new EITLTableCellRenderer();
    private EITLTableCellRenderer CellAlign1 = new EITLTableCellRenderer();
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;
    private int ModuleId = 805;
    private String DOC_NO = "";
    private clsGatepass gatepass;
    private EITLComboModel cmbSendToModel;

    String seleval = "", seltyp = "", selqlt = "", selshd = "", selpiece = "", selext = "", selinv = "", selsz = "";
    private int mlstrc;
    private String menusele = "";
    String shift="";

    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    DateFormat dateForDB = new SimpleDateFormat("yyyy-MM-dd");

    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    public frmPendingApprovals frmPA;

    @Override
    public void init() {

        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        initComponents();
        docdate1.setVisible(false);
        GenerateCombos();

        GenerateFromCombo();
        //GenerateHierarchyCombo();

        SetMenuForRights();
        try {
            DefaultSettings();
        } catch (SQLException ex) {

        }
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();

        gatepass = new clsGatepass();
        boolean load = gatepass.LoadData(EITLERPGLOBAL.gCompanyID);
        if (load) {
            DisplayData();
            MoveLast();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + gatepass.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        SetFields(false);
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        SetupApproval();

    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    public void DefaultSettings() throws SQLException {

        //String data = toString();
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        clearFields();
        lblTitle.setBackground(new Color(0, 102, 153));
        lblTitle.setForeground(Color.WHITE);

    }

    private void clearFields() {

        lbldoc.setText("");
        docdate.setText("");
        lbldept.setText("");
        txtempcd.setText("XXXXXX");
        txtname.setText("");
        txtRemarks.setText("");
        txtNatureOfWork.setText("");
        lblDesn.setText("");
        lblShift.setText("");
        txtGatepassdate.setText("");
        txtname.setText("");
        txtDeptHead.setText("");
        //txtTOL.setText("XX:XX"); 
        //txtTOA.setText("XX:XX"); 
        txtTOL.setText(""); 
        txtTOA.setText(""); 
        lblTimeDiff.setText("XX:XX"); 
        
        opgOfficial.setSelected(false); 
        opgPersonal.setSelected(false); 
        

        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        FormatGridHS();
        //cmbmnth.setSelectedItem(data.getStringValueFromDB("SELECT MONTH(CURDATE()) FROM DUAL"));

    }

    private void DisplayData() {

        //=========== Color Indication ===============//
        try {

            if ("1".equals(gatepass.getAttribute("APPROVED").getString())) {
                lblTitle.setBackground(Color.BLUE);
                lblTitle.setForeground(Color.WHITE);
            }

            if ("0".equals(gatepass.getAttribute("APPROVED").getString())) {
                lblTitle.setBackground(Color.GRAY);
                lblTitle.setForeground(Color.BLACK);
            }

            if ("1".equals(gatepass.getAttribute("CANCELED").getString())) {
                lblTitle.setBackground(Color.RED);
                lblTitle.setForeground(Color.BLACK);
            }
        } catch (Exception c) {

            c.printStackTrace();
        }
        try {
            if(EditMode==0) {
                if(gatepass.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(gatepass.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(gatepass.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
        }
        catch(Exception c) {
            
        }

        //============================================//
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleId)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        clearFields();
        try {
            DOC_NO = gatepass.getAttribute("GP_DOC_NO").getString();
            lblTitle.setText("GATEPASS FOR STAFF  - " + DOC_NO);
            lbldoc.setText(DOC_NO);
            docdate.setText(EITLERPGLOBAL.formatDate(gatepass.getAttribute("GP_DOC_DATE").getString()));
            txtGatepassdate.setText(gatepass.getAttribute("GP_DATE").getString());
            txtempcd.setText(gatepass.getAttribute("GP_EMP_NO").getString());

            txtname.setText(gatepass.getAttribute("GP_EMP_NAME").getString()); 
            lbldept.setText(gatepass.getAttribute("GP_EMP_DEPT").getString()); 
            //String shiftId=data.getStringValueFromDB("SELECT EMP_SHIFT_ID FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'");
            //String mainCategory=data.getStringValueFromDB("SELECT EMP_MAIN_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'");
            //lblShift.setText(gatepass.getAttribute("GP_EMP_SHIFT").getString());
            String month=gatepass.getAttribute("GP_DATE").getString().substring(3, 5);
            String date=gatepass.getAttribute("GP_DATE").getString().substring(0, 2);
            int date1=Integer.parseInt(date);
                System.out.println(date1);
            String year=txtGatepassdate.getText().substring(6, 10);
                System.out.println(date+"/"+month+"/"+year);
            String sql="SELECT SSC_"+date1+" FROM SDMLATTPAY.ATT_SHIFT_SCHEDULE WHERE SSC_EMPID='"+txtempcd.getText()+"' AND LPAD(SSC_MONTH,2,0)='"+month+"' AND SSC_YEAR='"+year+"'";
                System.out.println(sql);
                shift=data.getStringValueFromDB(sql);
                System.out.println(shift);
            
            
            lblShift.setText(data.getStringValueFromDB("SELECT SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT WHERE SHIFT_ID='"+gatepass.getAttribute("GP_EMP_SHIFT").getString()+"'"));
            lblDesn.setText(gatepass.getAttribute("GP_EMP_DESN").getString());
            txtTOL.setText(EITLERPGLOBAL.formatDateTime(gatepass.getAttribute("GP_TOL").getString())); 
            txtTOA.setText(EITLERPGLOBAL.formatDateTime(gatepass.getAttribute("GP_TOA").getString())); 
            txtRemarks.setText(gatepass.getAttribute("GP_REMARKS").getString()); 
            txtNatureOfWork.setText(gatepass.getAttribute("GP_NATURE_OF_WORK").getString()); 
            txtDeptHead.setText(gatepass.getAttribute("GP_DEPT_HEAD").getString());
            lblTimeDiff.setText(gatepass.getAttribute("GP_TOT_HOURS").getString());
            
            if(gatepass.getAttribute("GP_TYPE").getString().equals("O")){
                opgOfficial.setSelected(true);
                opgPersonal.setSelected(false);
            }
            if(gatepass.getAttribute("GP_TYPE").getString().equals("P")){
                opgPersonal.setSelected(true);                
                opgOfficial.setSelected(false);
            }
           /* String time1 = gatepass.getAttribute("GP_TOL").getString().substring(11, 16);
            String time2 = gatepass.getAttribute("GP_TOA").getString().substring(11, 16);

            //SimpleDateFormat format = new SimpleDateFormat("HH:mm");
            SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
            Date date1 = format.parse(time1);
            Date date2 = format.parse(time2);
            long difference = date2.getTime() - date1.getTime();
            lblTimeDiff.setText(DurationFormatUtils.formatDuration(difference, "HH:mm"));
            */
            
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();
            String DocNo = gatepass.getAttribute("GP_DOC_NO").getString();
            List = SDMLATTPAY.ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, ModuleId, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];
                //JOptionPane.showMessageDialog(null, "USER ID : "+ObjFlow.getAttribute("USER_ID").getVal());
                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelApprovalStatus.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridHS();
            //HashMap History = gatepass.getHistoryList(EITLERPGLOBAL.gCompanyID + "", DocNo);
            HashMap History = clsGatepass.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for (int i = 1; i <= History.size(); i++) {
                clsGatepass ObjHistory = (clsGatepass) History.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (long) ObjHistory.getAttribute("UPDATED_BY").getVal());
                rowData[2] = ObjHistory.getAttribute("ENTRY_DATE").getString();

                String ApprovalStatus = "";

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }
                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }
                rowData[3] = ApprovalStatus;
                rowData[4] = ObjHistory.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjHistory.getAttribute("FROM_IP").getString();
                DataModelUpdateHistory.addRow(rowData);
            }
            //============================================================//
            //setSTATUS();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void FormatGridA() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableApprovalStatus.setAutoResizeMode(TableApprovalStatus.AUTO_RESIZE_OFF);

    }

    private void SetMenuForRights() {
        // --- Add Rights --
        //if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10003, 100031)) { //7008,70081
            if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10041, 100411)) { //7008,70081
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        //if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10003, 100032)) { //7008,70082
            if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10041, 100412)) { //7008,70082
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        //if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10003, 100033)) {
            if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10041, 100413)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        //if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10003, 100034)) {
            if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10041, 100414)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            //cmdPreview.setEnabled(false);
            //cmdPrint.setEnabled(false);
        }
    }

    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
         if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
         cmbHierarchy.setEnabled(true);
         }else {
         cmbHierarchy.setEnabled(false);
         }*/

        // select hold for default approval
        OpgHold.setSelected(true);

        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            //lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {

            int FromUserID = SDMLATTPAY.ApprovalFlow.getFromID(EITLERPGLOBAL.gCompanyID, ModuleId, gatepass.getAttribute("DOC_NO").getString());
            //lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = SDMLATTPAY.ApprovalFlow.getFromRemarks(EITLERPGLOBAL.gCompanyID, ModuleId, FromUserID, gatepass.getAttribute("DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (SDMLATTPAY.ApprovalFlow.IsCreator(ModuleId, gatepass.getAttribute("DOC_NO").getString() + "")) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void FormatGridHS() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From IP");

        TableUpdateHistory.setAutoResizeMode(TableUpdateHistory.AUTO_RESIZE_OFF);
    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (EITLERPGLOBAL.gNewUserID == SDMLATTPAY.ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "")) {
                List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + (ModuleId));
            } else {
                List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
            }
        }

        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = SDMLATTPAY.ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "");
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableColumnModel tcm = TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(90);
        tcm.getColumn(5).setPreferredWidth(90);
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");

        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(2).setPreferredWidth(50);
        tcm.getColumn(3).setPreferredWidth(20);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        Tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        lblStatus1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtempcd = new javax.swing.JTextField();
        cmdNextToTab2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        docdate = new javax.swing.JLabel();
        txtname = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        lbldoc = new javax.swing.JLabel();
        lbldept = new javax.swing.JLabel();
        docdate1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNatureOfWork = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        opgOfficial = new javax.swing.JRadioButton();
        opgPersonal = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtTOA = new javax.swing.JTextField();
        txtRemarks = new javax.swing.JTextField();
        txtTOL = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtGatepassdate = new javax.swing.JTextField();
        lblDesn = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblShift = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtDeptHead = new javax.swing.JTextField();
        lblTimeDiff = new javax.swing.JLabel();
        btnShiftEndTime = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        StatusPanel = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        Tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        lblStatus1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus1.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(lblStatus1);
        lblStatus1.setBounds(10, 360, 920, 30);

        jLabel1.setText("Employee No.");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(20, 50, 100, 20);

        txtempcd.setText("XXXXXXXX");
        txtempcd.setNextFocusableComponent(txtDeptHead);
        txtempcd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtempcdActionPerformed(evt);
            }
        });
        txtempcd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtempcdFocusLost(evt);
            }
        });
        txtempcd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtempcdKeyPressed(evt);
            }
        });
        jPanel1.add(txtempcd);
        txtempcd.setBounds(130, 40, 90, 30);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(762, 360, 120, 30);

        jLabel5.setText("Doc Date");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(276, 14, 70, 20);

        docdate.setText("DD/MM/YYYY");
        jPanel1.add(docdate);
        docdate.setBounds(360, 14, 100, 20);

        txtname.setEditable(false);
        txtname.setText("Name");
        jPanel1.add(txtname);
        txtname.setBounds(230, 40, 410, 30);

        jLabel11.setText("Gatepass No.");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(20, 14, 100, 20);

        lbldoc.setText("DocNo");
        jPanel1.add(lbldoc);
        lbldoc.setBounds(130, 10, 120, 30);

        lbldept.setText("Department");
        jPanel1.add(lbldept);
        lbldept.setBounds(130, 80, 210, 20);

        docdate1.setText("DD/MM/YYYY");
        jPanel1.add(docdate1);
        docdate1.setBounds(360, 4, 100, 40);

        jLabel4.setText("Department");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(24, 75, 90, 30);
        jPanel1.add(txtNatureOfWork);
        txtNatureOfWork.setBounds(130, 190, 480, 19);

        jLabel2.setText("Shift");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(70, 120, 40, 15);

        jLabel3.setText("Gatepass Type");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(10, 150, 110, 30);

        jPanel4.setLayout(null);

        opgOfficial.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        opgOfficial.setText("OFFICIAL");
        opgOfficial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opgOfficialActionPerformed(evt);
            }
        });
        jPanel4.add(opgOfficial);
        opgOfficial.setBounds(0, 10, 100, 30);

        opgPersonal.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        opgPersonal.setText("PERSONAL");
        opgPersonal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opgPersonalActionPerformed(evt);
            }
        });
        jPanel4.add(opgPersonal);
        opgPersonal.setBounds(120, 10, 130, 30);

        jLabel7.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel7.setText("/");
        jPanel4.add(jLabel7);
        jLabel7.setBounds(104, 10, 10, 30);

        jPanel1.add(jPanel4);
        jPanel4.setBounds(130, 140, 290, 50);

        jLabel9.setText("Nature Of Work");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(10, 190, 110, 30);

        jLabel10.setText("Time Of Leaving");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(10, 230, 110, 20);

        jLabel12.setText("Time Of Arrival");
        jPanel1.add(jLabel12);
        jLabel12.setBounds(10, 260, 110, 15);

        jLabel13.setText("Remarks");
        jPanel1.add(jLabel13);
        jLabel13.setBounds(50, 290, 70, 15);

        txtTOA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTOAFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTOAFocusLost(evt);
            }
        });
        txtTOA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTOAKeyPressed(evt);
            }
        });
        jPanel1.add(txtTOA);
        txtTOA.setBounds(130, 260, 150, 19);
        jPanel1.add(txtRemarks);
        txtRemarks.setBounds(130, 290, 480, 19);

        txtTOL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTOLKeyPressed(evt);
            }
        });
        jPanel1.add(txtTOL);
        txtTOL.setBounds(130, 230, 150, 19);

        jLabel6.setText("Gatepass Date");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(480, 15, 110, 20);

        txtGatepassdate.setText("DD/MM/YYYY");
        txtGatepassdate.setNextFocusableComponent(txtempcd);
        txtGatepassdate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtGatepassdateFocusLost(evt);
            }
        });
        jPanel1.add(txtGatepassdate);
        txtGatepassdate.setBounds(590, 10, 90, 19);

        lblDesn.setText("Designation");
        jPanel1.add(lblDesn);
        lblDesn.setBounds(510, 110, 280, 30);

        jLabel8.setText("Designation");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(390, 110, 100, 30);

        lblShift.setText("Shift");
        jPanel1.add(lblShift);
        lblShift.setBounds(130, 115, 140, 20);

        jLabel14.setText("Dept. Head");
        jPanel1.add(jLabel14);
        jLabel14.setBounds(390, 80, 100, 20);
        jPanel1.add(txtDeptHead);
        txtDeptHead.setBounds(490, 77, 180, 30);

        lblTimeDiff.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        lblTimeDiff.setText("....");
        jPanel1.add(lblTimeDiff);
        lblTimeDiff.setBounds(290, 260, 60, 20);

        btnShiftEndTime.setText("Shift End Time");
        btnShiftEndTime.setMargin(new java.awt.Insets(1, 1, 1, 1));
        btnShiftEndTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShiftEndTimeActionPerformed(evt);
            }
        });
        jPanel1.add(btnShiftEndTime);
        btnShiftEndTime.setBounds(360, 260, 120, 23);

        Tab.addTab("Gatepass", jPanel1);

        jPanel2.setLayout(null);

        Tab2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 23, 66, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(90, 20, 180, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 62, 56, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(90, 60, 180, 19);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 95, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(90, 95, 530, 19);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 130, 81, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup5.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgApproveActionPerformed(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        buttonGroup5.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup5.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgRejectActionPerformed(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup5.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(90, 130, 180, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 253, 60, 15);

        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(90, 250, 180, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 292, 60, 15);

        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 290, 570, 19);

        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(450, 340, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(630, 95, 33, 21);

        cmdNextToTab3.setMnemonic('N');
        cmdNextToTab3.setText("Next >>");
        cmdNextToTab3.setToolTipText("Next Tab");
        cmdNextToTab3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab3ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab3);
        cmdNextToTab3.setBounds(560, 340, 102, 25);

        jPanel2.add(Tab2);
        Tab2.setBounds(10, 0, 760, 410);

        Tab.addTab("Approval", jPanel2);

        jPanel3.setLayout(null);

        StatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StatusPanel.setLayout(null);

        jLabel60.setText("Document Approval Status");
        StatusPanel.add(jLabel60);
        jLabel60.setBounds(12, 10, 242, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableApprovalStatus);

        StatusPanel.add(jScrollPane2);
        jScrollPane2.setBounds(0, 40, 694, 120);

        jLabel19.setText("Document Update History");
        StatusPanel.add(jLabel19);
        jLabel19.setBounds(10, 170, 182, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableUpdateHistory);

        StatusPanel.add(jScrollPane6);
        jScrollPane6.setBounds(10, 190, 540, 130);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdViewHistory);
        cmdViewHistory.setBounds(570, 170, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdNormalView);
        cmdNormalView.setBounds(570, 200, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 230, 132, 24);

        txtAuditRemarks.setEnabled(false);
        StatusPanel.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(570, 260, 129, 19);

        jButton5.setText("<<Previous");
        jButton5.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton5);
        jButton5.setBounds(570, 290, 130, 30);

        jPanel3.add(StatusPanel);
        StatusPanel.setBounds(10, 0, 790, 380);

        Tab.addTab("Status", jPanel3);

        getContentPane().add(Tab);
        Tab.setBounds(0, 80, 930, 440);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 930, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("GATE PASS ENTRY");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 930, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged

        //SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "On State Change SelHierarchyId : "+SelHierarchyID);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
                OpgFinal.setEnabled(true);
            }
        } else {
            OpgApprove.setEnabled(false);
            OpgApprove.setSelected(false);
        }

        if (clsHierarchy.IsCreator((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgApprove.setEnabled(true);
            OpgReject.setEnabled(false);
            OpgReject.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus1.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "SelHierarchyId : "+SelHierarchyID);
        DOC_NO = lbldoc.getText();
        cmbSendTo.setEnabled(true);
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (SDMLATTPAY.ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "")) {
                cmbSendTo.setEnabled(true);
                txtToRemarks.setEnabled(true);
                txtFromRemarks.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }
        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }

        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(true);
        OpgHold.setSelected(false);
        //txtToRemarks.setEnabled(false);
        if (!OpgApprove.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);

        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {

                if (OpgApprove.isSelected()) {
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    //JOptionPane.showMessageDialog(null, "Module Id :"+ModuleId+", DOC No : "+sorder_no+", User Id : "+ObjUser.getAttribute("USER_ID").getInt()+", New user Id "+SDMLERPGLOBAL.gNewUserID);
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                    // JOptionPane.showMessageDialog(null, "IncludeUser = "+IncludeUser);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = SDMLATTPAY.ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "");
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }
    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged

    }//GEN-LAST:event_OpgApproveItemStateChanged

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus1.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged

    }//GEN-LAST:event_OpgFinalItemStateChanged

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained

    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectItemStateChanged

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained

    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked


    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged

    }//GEN-LAST:event_OpgHoldItemStateChanged

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained

    }//GEN-LAST:event_OpgHoldFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained

    }//GEN-LAST:event_cmbSendToFocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained

    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed

    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdNextToTab3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab3ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab3ActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained

    }//GEN-LAST:event_Tab2FocusGained

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        String DocNo = txtempcd.getText();
        //gatepass.ShowHistory(DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        //gatepass.HistoryView = false;
        //gatepass.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            txtAuditRemarks.setText((String) TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4));
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText = txtAuditRemarks;
            bigEdit.ShowEdit();
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void TabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabMouseClicked

    }//GEN-LAST:event_TabMouseClicked

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();

    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        // REPORT QUERY : SELECT A.DOC_NO,A.PIECE_NO,A.DL_REMARK,B.PR_MACHINE_NO,B.PR_POSITION_NO,B.PR_LENGTH,B.PR_WIDTH,B.PR_GSM,B.PR_GROUP,B.PR_STYLE,B.PR_SQMTR,B.PR_STYLE,B.PR_SYN_PER,B.PR_PIECE_REMARK,B.PR_PIECE_STAGE,B.PR_PRODUCT_CODE,B.PR_PARTY_CODE,B.PR_PO_NO,B.PR_PO_DATE,B.PR_REFERENCE_DATE,B.PR_ORDER_REMARK,B.PR_ORDER_DATE FROM  PRODUCTION.FELT_SALES_DIVERSION_LIST_APPROVAL A, PRODUCTION.FELT_SALES_PIECE_REGISTER B;
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void OpgRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgRejectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgRejectActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void txtempcdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtempcdFocusLost
        // TODO add your handling code here:
        //txtname.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'"));
        //lbldept.setText(data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'"));
        txtname.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtempcd.getText()+"'"));
            lbldept.setText(data.getStringValueFromDB("SELECT DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtempcd.getText()+"'"));
            lblDesn.setText(data.getStringValueFromDB("SELECT DESIGNATION FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtempcd.getText()+"'"));
            //lblShift.setText(data.getStringValueFromDB("SELECT SHIFT_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+aList.ReturnVal+"'"));
            String month=txtGatepassdate.getText().substring(3, 5);
            String date=txtGatepassdate.getText().substring(0, 2);
            int date1=Integer.parseInt(date);
                System.out.println(date1);
            String year=txtGatepassdate.getText().substring(6, 10);
                System.out.println(date+"/"+month+"/"+year);
            String sql="SELECT SSC_"+date1+" FROM SDMLATTPAY.ATT_SHIFT_SCHEDULE WHERE SSC_EMPID='"+txtempcd.getText()+"' AND LPAD(SSC_MONTH,2,0)='"+month+"' AND SSC_YEAR='"+year+"'";
                System.out.println(sql);
            String shift=data.getStringValueFromDB(sql);
                System.out.println(shift);
            lblShift.setText(data.getStringValueFromDB("SELECT SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT WHERE SHIFT_ID='"+shift+"'"));
    }//GEN-LAST:event_txtempcdFocusLost

    private void txtempcdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtempcdKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();            
            //aList.SQL = "SELECT EMP_NO AS EMP_CODE,EMP_NAME AS NAME,EMP_DEPARTMENT AS DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST ";
            aList.SQL = "SELECT PAY_EMP_NO AS EMP_CODE,EMP_NO,EMP_NAME AS NAME FROM SDMLATTPAY.ATTPAY_EMPMST ";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                txtempcd.setText(aList.ReturnVal);
//                txtname.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'"));
//                lbldept.setText(data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'"));                
//            String shiftId=data.getStringValueFromDB("SELECT EMP_SHIFT_ID FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'");
//            //String mainCategory=data.getStringValueFromDB("SELECT EMP_MAIN_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'");
//            lblShift.setText(data.getStringValueFromDB("SELECT SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT WHERE SHIFT_ID='"+shiftId+"'"));
//            lblDesn.setText(data.getStringValueFromDB("SELECT EMP_DESIGNATION FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'"));
            txtname.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+aList.ReturnVal+"'"));
            lbldept.setText(data.getStringValueFromDB("SELECT DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+aList.ReturnVal+"'"));
            lblDesn.setText(data.getStringValueFromDB("SELECT DESIGNATION FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+aList.ReturnVal+"'"));
            //lblShift.setText(data.getStringValueFromDB("SELECT SHIFT_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+aList.ReturnVal+"'"));
            String month=txtGatepassdate.getText().substring(3, 5);
            String date=txtGatepassdate.getText().substring(0, 2);
            int date1=Integer.parseInt(date);
                System.out.println(date1);
            String year=txtGatepassdate.getText().substring(6, 10);
                System.out.println(date+"/"+month+"/"+year);
            String sql="SELECT SSC_"+date1+" FROM SDMLATTPAY.ATT_SHIFT_SCHEDULE WHERE SSC_EMPID='"+txtempcd.getText()+"' AND LPAD(SSC_MONTH,2,0)='"+month+"' AND SSC_YEAR='"+year+"'";
                System.out.println(sql);
                shift=data.getStringValueFromDB(sql);
                System.out.println(shift);
            lblShift.setText(data.getStringValueFromDB("SELECT SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT WHERE SHIFT_ID='"+shift+"'"));
            }
        }
    }//GEN-LAST:event_txtempcdKeyPressed

    private void OpgApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgApproveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgApproveActionPerformed

    private void opgOfficialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opgOfficialActionPerformed
        if(opgOfficial.isSelected())
            opgPersonal.setSelected(false); 
    }//GEN-LAST:event_opgOfficialActionPerformed

    private void opgPersonalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opgPersonalActionPerformed
if(opgPersonal.isSelected())
    opgOfficial.setSelected(false);
    }//GEN-LAST:event_opgPersonalActionPerformed

    private void txtTOLKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTOLKeyPressed
if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();
            //aList.SQL = "SELECT EMP_CODE,P_TIME FROM SDMLATTPAY.ATT_DATA WHERE EMP_CODE='"+txtempcd.getText().substring(3)+"'";
            //aList.SQL = "SELECT EMP_CODE,P_TIME FROM SDMLATTPAY.ATT_DATA WHERE EMP_CODE='"+txtempcd.getText()+"' AND A_DATE='"+EITLERPGLOBAL.formatDateDB(txtGatepassdate.getText())+"' ";
            //aList.SQL = "SELECT DATE_FORMAT(P_DATE,'%d/%m/%Y') AS PUNCH_DATE,CONCAT(SUBSTRING(P_TIME,1,2),':',SUBSTRING(P_TIME,3,4)) AS PUNCH_TIME FROM SDMLATTPAY.ATT_DATA WHERE EMP_CODE='"+txtempcd.getText()+"' AND A_DATE='"+EITLERPGLOBAL.formatDateDB(txtGatepassdate.getText())+"' ";
            //aList.SQL = "SELECT DATE_FORMAT(P_DATE,'%d/%m/%Y') AS PUNCH_DATE,P_TIME FROM SDMLATTPAY.ATT_DATA WHERE EMP_CODE='"+txtempcd.getText()+"' AND A_DATE='"+EITLERPGLOBAL.formatDateDB(txtGatepassdate.getText())+"' ORDER BY P_TIME ";
            //aList.SQL = "SELECT DATE_FORMAT(P_DATE,'%d/%m/%Y') AS PUNCH_DATE,P_TIME FROM SDMLATTPAY.ATT_DATA WHERE EMP_CODE='"+txtempcd.getText()+"' AND PUNCH_DATE='"+EITLERPGLOBAL.formatDateDB(txtGatepassdate.getText())+"' ORDER BY P_TIME ";
            //aList.SQL = "SELECT PUNCH_DATE,P_TIME FROM SDMLATTPAY.ATT_DATA WHERE EMP_CODE='"+txtempcd.getText()+"' AND PUNCH_DATE='"+EITLERPGLOBAL.formatDateDB(txtGatepassdate.getText())+"' ORDER BY P_TIME ";
            aList.SQL = "SELECT PUNCH_DATE,DATE_FORMAT(A_DATETIME, '%d/%m/%Y %T') ADATETIME FROM SDMLATTPAY.ATT_DATA WHERE EMP_CODE='"+txtempcd.getText()+"' AND PUNCH_DATE='"+EITLERPGLOBAL.formatDateDB(txtGatepassdate.getText())+"' ORDER BY P_TIME ";
            
            aList.ReturnCol = 2; 
            aList.SecondCol=1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                //txtTOL.setText(aList.SecondVal+" "+aList.ReturnVal+":00");
                txtTOL.setText(aList.ReturnVal);
                
            
                
            }
        }
    }//GEN-LAST:event_txtTOLKeyPressed

    private void txtTOAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTOAKeyPressed
if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();
            //aList.SQL = "SELECT EMP_CODE,P_TIME FROM SDMLATTPAY.ATT_DATA WHERE EMP_CODE='"+txtempcd.getText().substring(3)+"'";
            //aList.SQL = "SELECT EMP_CODE,P_TIME FROM SDMLATTPAY.ATT_DATA WHERE EMP_CODE='"+txtempcd.getText()+"' AND A_DATE='"+EITLERPGLOBAL.formatDateDB(txtGatepassdate.getText())+"' ";
            //aList.SQL = "SELECT DATE_FORMAT(P_DATE,'%d/%m/%Y') AS PUNCH_DATE,CONCAT(SUBSTRING(P_TIME,1,2),':',SUBSTRING(P_TIME,3,4)) AS PUNCH_TIME FROM SDMLATTPAY.ATT_DATA WHERE EMP_CODE='"+txtempcd.getText()+"' AND A_DATE='"+EITLERPGLOBAL.formatDateDB(txtGatepassdate.getText())+"' ";
            //aList.SQL = "SELECT DATE_FORMAT(P_DATE,'%d/%m/%Y') AS PUNCH_DATE,P_TIME FROM SDMLATTPAY.ATT_DATA WHERE EMP_CODE='"+txtempcd.getText()+"' AND A_DATE='"+EITLERPGLOBAL.formatDateDB(txtGatepassdate.getText())+"' ORDER BY P_TIME";
            aList.SQL = "SELECT DATE_FORMAT(P_DATE,'%d/%m/%Y') AS PUNCH_DATE,DATE_FORMAT(A_DATETIME, '%d/%m/%Y %T') ADATETIME FROM SDMLATTPAY.ATT_DATA WHERE EMP_CODE='"+txtempcd.getText()+"' AND PUNCH_DATE='"+EITLERPGLOBAL.formatDateDB(txtGatepassdate.getText())+"' ORDER BY P_TIME";
            
            aList.ReturnCol = 2;
            aList.SecondCol=1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                //txtTOA.setText(aList.ReturnVal);
                //txtTOA.setText(aList.SecondVal+" "+aList.ReturnVal+":00");
                txtTOA.setText(aList.ReturnVal);
            
                
            }
        }
    }//GEN-LAST:event_txtTOAKeyPressed

    private void txtGatepassdateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtGatepassdateFocusLost
     if(txtGatepassdate.getText().equals("")){
      JOptionPane.showMessageDialog(null,"Insert Gatepass Date in DD/MM/YYYY format first.");
      txtGatepassdate.requestFocus();
     }

System.out.println(txtGatepassdate.getText().substring(0, 2));
        System.out.println(txtGatepassdate.getText().substring(3, 5));
     /*
     try {
            ResultSet tchkmnth;
            tchkmnth = data.getResult("SELECT MONTH(CURDATE()) AS VLDMONTH FROM DUAL "
                    + "UNION ALL "
                    + "SELECT CASE WHEN DAY(CURDATE())<=4 THEN MONTH(SUBDATE(CURDATE(),INTERVAL DAY(CURDATE()) DAY)) ELSE 0 END FROM DUAL");
            tchkmnth.first();
            int mvld = 0;
            int mselemnth = Integer.parseInt(txtGatepassdate.getText().substring(3, 5));
            while (!tchkmnth.isAfterLast()) {
                if (mselemnth == tchkmnth.getInt("VLDMONTH")) {
                    mvld = 1;
                }
                tchkmnth.next();
            }
            if (mvld == 0) {
                JOptionPane.showMessageDialog(this, "Please Select Valid Month...", "ERROR", JOptionPane.ERROR_MESSAGE);
                txtGatepassdate.requestFocus();
                return;                
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
             */
    }//GEN-LAST:event_txtGatepassdateFocusLost

    private void txtTOAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTOAFocusLost
        try{    
            //String time1 = txtTOL.getText().toString().substring(11, 16);
            //String time2 = txtTOA.getText().toString().substring(11, 16);

            String time1 = txtTOL.getText().toString();
            String time2 = txtTOA.getText().toString();

            System.out.println(time1);
            System.out.println(time2);
            
            //SimpleDateFormat format = new SimpleDateFormat("HH:mm");
            SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
            Date date1 = format.parse(time1);
            Date date2 = format.parse(time2);
            long difference = date2.getTime() - date1.getTime();
            lblTimeDiff.setText(DurationFormatUtils.formatDuration(difference, "HH:mm"));
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtTOAFocusLost

    private void txtempcdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtempcdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtempcdActionPerformed

    private void txtTOAFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTOAFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTOAFocusGained

    private void btnShiftEndTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShiftEndTimeActionPerformed
        
      try{  
                     
            String datetoa=data.getStringValueFromDB("SELECT DISTINCT LEFT(A_DATETIME,10) FROM SDMLATTPAY.ATT_DATA WHERE EMP_CODE='"+txtempcd.getText()+"' AND PUNCH_DATE='"+EITLERPGLOBAL.formatDateDB(txtGatepassdate.getText())+"' ORDER BY P_TIME");
            //String datetoa=data.getStringValueFromDB("SELECT DISTINCT LEFT(A_DATETIME,10) FROM SDMLATTPAY.ATT_DATA WHERE EMP_CODE='"+txtempcd.getText()+"' AND PUNCH_DATE='"+EITLERPGLOBAL.formatDateDB(txtGatepassdate.getText())+"' ORDER BY A_DATETIME");
            //String datetoa=data.getStringValueFromDB("SELECT DISTINCT PUNCH_DATE FROM SDMLATTPAY.ATT_DATA WHERE EMP_CODE='"+txtempcd.getText()+"' AND PUNCH_DATE='"+EITLERPGLOBAL.formatDateDB(txtGatepassdate.getText())+"' ORDER BY P_TIME");
            String timetoa = data.getStringValueFromDB("SELECT SHIFT_OUT_TIME FROM SDMLATTPAY.ATT_SHIFT WHERE SHIFT_ID='"+shift+"'");
            
            if(timetoa.equals("00:00")){
            SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
            Calendar c= Calendar.getInstance();
            c.setTime(sdf.parse(datetoa));
            c.add(Calendar.DATE, 1);            
            datetoa=sdf.format(c.getTime());                
                //datetoa=EITLERPGLOBAL.formatDate(datetoa);                
                
            }
            
            String time2=EITLERPGLOBAL.formatDate(datetoa)+" "+timetoa+":00";
            
            txtTOA.setText(time2); 
            //String time1 = txtTOL.getText().toString().substring(11, 16);
            String time1 = txtTOL.getText().toString();
            if(!txtTOA.getText().equals("") && !txtTOL.getText().equals("")){
            //SimpleDateFormat format = new SimpleDateFormat("HH:mm");
                SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
            Date date1 = format.parse(time1);
            //Date date2 = format.parse(timetoa);
            Date date2 = format.parse(time2);
            long difference = date2.getTime() - date1.getTime();
            lblTimeDiff.setText(DurationFormatUtils.formatDuration(difference, "HH:mm"));
            }
        }catch(Exception e){
            e.printStackTrace();
        }
      
    }//GEN-LAST:event_btnShiftEndTimeActionPerformed
    private void MoveFirst() {
        gatepass.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        gatepass.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        gatepass.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        gatepass.MoveLast();
        DisplayData();
    }

    private void Find() {
    Loader ObjLoader=new Loader(this,"SDMLATTPAY.gatepass.FrmGatepassFind",true);
        FrmGatepassFind ObjGatepassFind= (FrmGatepassFind)ObjLoader.getObj();
        
        if(ObjGatepassFind.Cancelled==false) {
            if(!gatepass.Filter(ObjGatepassFind.stringFindQuery)) {
                JOptionPane.showMessageDialog(FrmGatepass.this," No records found.","Find Gatepass Details",JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    public void FindWaiting() {
        gatepass.Filter(" DOC_NO IN (SELECT DISTINCT SDMLATTPAY.GATEPASS_ENTRY.GP_DOC_NO FROM SDMLATTPAY.GATEPASS_ENTRY, SDMLATTPAY.D_COM_DOC_DATA WHERE SDMLATTPAY.GATEPASS_ENTRY.GP_DOC_NO=SDMLATTPAY.D_COM_DOC_DATA.DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=" + ModuleId + " AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void Add() {

        EditMode = EITLERPGLOBAL.ADD;

        SetFields(true);
        DisableToolbar();

        SetupApproval();

        clearFields();

        EITLERP.FeltSales.common.SelectFirstFree aList = new EITLERP.FeltSales.common.SelectFirstFree();
        aList.ModuleID = ModuleId;
        aList.FirstFreeNo = 312;
        FFNo = aList.FirstFreeNo;
        lbldoc.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        lblTitle.setText("GATE PASS ENTRY - " + lbldoc.getText());
        docdate.setText(EITLERPGLOBAL.getCurrentDate());
        docdate1.setText(EITLERPGLOBAL.getCurrentDateTimeDB());
        
        OpgFinal.setSelected(true);
        txtGatepassdate.requestFocus();
    }

    private void FormatGrid() {
        

    }

    private void Save() {
                
        
if (txtTOL.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Please insert Time of Leaving", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (txtTOA.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Please insert Time of Arrival", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (lblTimeDiff.getText().trim().equals("XX:XX")) {
            JOptionPane.showMessageDialog(this, "Time Difference XX:XX is not allowed", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        SetData();

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //gatepass.LoadData();
        if (EditMode == EITLERPGLOBAL.ADD) {
            if (gatepass.Insert()) {
                clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, true);                

                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + gatepass.LastError, " SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (gatepass.Update()) {                
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + gatepass.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
//        try {
//            if (PENDING_DOCUMENT) {
//                frmPA.RefreshView();
//                PENDING_DOCUMENT = false;
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
         try {
            frmPA.RefreshView();
        } catch (Exception e) {
        }
    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();

    }

    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void Edit() {

        String DocumentNo = (String) gatepass.getAttribute("GP_DOC_NO").getString();

        if (gatepass.IsEditable(EITLERPGLOBAL.gCompanyID, DocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateCombos();
            //GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            // SetupApproval();
            //ReasonResetReadonly();
            //cmbOrderReason.setEnabled(false);
            if (SDMLATTPAY.ApprovalFlow.IsCreator(ModuleId, DocumentNo)) {
                SetFields(true);
            } else {
                EnableApproval();
            }
            OpgFinal.setSelected(true);
        } else {
            JOptionPane.showMessageDialog(null, "You cannot edit this record. \n It is either approved/rejected or waiting approval for other user");
        }

    }

// find rate update by doc no
    public void Find(String docNo) {
        //gatepass.Filter(" DOC_NO='" + docNo + "'");
gatepass.Filter(" GP_DOC_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    public void FindEx(int pCompanyID, String docno) {
        //gatepass.Filter(" DOC_NO='" + docno + "'");
gatepass.Filter(" GP_DOC_NO='" + docno + "'");
        gatepass.MoveFirst();
        DisplayData();
    }

    private void Delete() {

    }

    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = SDMLATTPAY.ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, ModuleId, txtempcd.getText());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

    }

    private void SetFields(boolean pStat) {

        txtempcd.setEnabled(pStat);
        txtname.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        txtTOA.setEnabled(pStat);
        txtTOL.setEnabled(pStat);
        txtGatepassdate.setEnabled(pStat);
        txtDeptHead.setEnabled(pStat);
        txtNatureOfWork.setEnabled(pStat);
        opgOfficial.setEnabled(pStat);
        opgPersonal.setEnabled(pStat);
        
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
    
        btnShiftEndTime.setEnabled(pStat);

        SetupApproval();
    }

    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    private void SetData() {
        if (EditMode == EITLERPGLOBAL.ADD) {
        EITLERP.FeltSales.common.SelectFirstFree aList = new EITLERP.FeltSales.common.SelectFirstFree();
        aList.ModuleID = ModuleId;
        aList.FirstFreeNo = 312;
        FFNo = aList.FirstFreeNo;
        //lbldoc.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        gatepass.setAttribute("GP_DOC_NO", clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        } else{
        //gatepass.setAttribute("GP_DOC_NO", lbldoc.getText());

        DOC_NO = lbldoc.getText();

        gatepass.setAttribute("GP_DOC_NO", DOC_NO);
        }
        
                
        gatepass.setAttribute("GP_DOC_DATE", docdate.getText());

        gatepass.setAttribute("GP_DATE", txtGatepassdate.getText());
        gatepass.setAttribute("GP_EMP_NO", txtempcd.getText());
        gatepass.setAttribute("GP_EMP_NAME", txtname.getText());
        gatepass.setAttribute("GP_EMP_DEPT", lbldept.getText());
        //gatepass.setAttribute("GP_EMP_SHIFT", lblShift.getText());
        gatepass.setAttribute("GP_EMP_SHIFT", shift);
        gatepass.setAttribute("GP_EMP_DESN", lblDesn.getText());
        if (opgOfficial.isSelected()) {
            gatepass.setAttribute("GP_TYPE", "O");
        }
        if(opgPersonal.isSelected()){
            gatepass.setAttribute("GP_TYPE", "P");
        }
        gatepass.setAttribute("GP_TOL", txtTOL.getText());
        gatepass.setAttribute("GP_TOA", txtTOA.getText());
        gatepass.setAttribute("GP_TOT_HOURS", lblTimeDiff.getText());
        gatepass.setAttribute("GP_REMARKS", txtRemarks.getText());
        gatepass.setAttribute("GP_NATURE_OF_WORK", txtNatureOfWork.getText());
        gatepass.setAttribute("GP_DEPT_HEAD", txtDeptHead.getText());
             

        gatepass.setAttribute("MODULE_ID", ModuleId);
        gatepass.setAttribute("USER_ID", EITLERPGLOBAL.gNewUserID);

        gatepass.setAttribute("REJECTED_REMARKS", txtToRemarks.getText());
        gatepass.setAttribute("REMARKS", "");
        gatepass.setAttribute("APPROVAL_STATUS", "");
        gatepass.setAttribute("APPROVER_REMARKS", txtFromRemarks.getText());
        gatepass.setAttribute("ENTRY_DATE", EITLERPGLOBAL.getCurrentDateDB());

        //----- Update Approval Specific Fields -----------//
        gatepass.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        gatepass.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        gatepass.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        gatepass.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            gatepass.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            gatepass.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            gatepass.setAttribute("APPROVAL_STATUS", "R");
            gatepass.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            gatepass.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            gatepass.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            gatepass.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        } else {
            gatepass.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            gatepass.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
            gatepass.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
            gatepass.setAttribute("UPDATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton btnShiftEndTime;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdNextToTab3;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel docdate;
    private javax.swing.JLabel docdate1;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblDesn;
    private javax.swing.JLabel lblShift;
    private javax.swing.JLabel lblStatus1;
    private javax.swing.JLabel lblTimeDiff;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lbldept;
    private javax.swing.JLabel lbldoc;
    private javax.swing.JRadioButton opgOfficial;
    private javax.swing.JRadioButton opgPersonal;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtDeptHead;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtGatepassdate;
    private javax.swing.JTextField txtNatureOfWork;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtTOA;
    private javax.swing.JTextField txtTOL;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtempcd;
    private javax.swing.JTextField txtname;
    // End of variables declaration//GEN-END:variables

    
}
