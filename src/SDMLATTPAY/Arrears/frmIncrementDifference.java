/* frmFeltSalesInfo.java 
 * 
 * 
 * Created on July 13, 2005, 10:47 AM
 */
package SDMLATTPAY.Arrears;

import EITLERP.*;
import EITLERP.EITLERPGLOBAL;
import SDMLATTPAY.AdvanceSearch.ATTPAYLOV;
import java.awt.Color;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.sql.*;
import javax.swing.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;



/**
 *
 * @author ashutosh/RISHI
 */
public class frmIncrementDifference extends javax.swing.JApplet {
    public boolean forceToChange=false;
    public boolean cancelled=false;
    private EITLTableModel[] DataModel;
    private EITLTableModel DataModelArrearsSummary = new EITLTableModel();  
    private EITLTableModel DataModelArrearsDetail = new EITLTableModel();  
   //private EITLTableModel DataModelB2BHSN = new EITLTableModel();  
    
    String strProductCode = "";
    private JDialog aDialog;
    DateFormat df =  new SimpleDateFormat("dd-MMM-yy");
    HashMap hmPieceList=new HashMap();
    String ORDER_BY="";
    //private clsExcelExporter exp = new clsExcelExporter();
    //private EITLERP.Production.FeltCreditNote.clsExcelExporter exp = new EITLERP.Production.FeltCreditNote.clsExcelExporter();
    //private clsExcelExporterB2BHSN expHSN = new clsExcelExporterB2BHSN();
    private clsExcel_Exporter exp = new clsExcel_Exporter();
    
    public void init() {
        initComponents();
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        //setSize(780,660);
        jLabel1.setForeground(Color.WHITE);
        //txtEmpCode.setVisible(false);
        txtFromDate.setVisible(false);
        //txtIncCount.setVisible(false);
        jLabel3.setVisible(false);
        jLabel4.setVisible(false);
        //jLabel5.setVisible(false);
        //jLabel6.setVisible(false);
        txtincYear.setText("2021");
        
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStatus = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        file1 = new javax.swing.JFileChooser();
        jLabel2 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        txtEmpName = new javax.swing.JTextField();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        btnShowB2BMIR = new javax.swing.JButton();
        Export_B2BMIR = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        tableArrearsDetail = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        tableArrearsSummary = new javax.swing.JTable();
        btnShowArrearsSummary = new javax.swing.JButton();
        btnPreviewSummary = new javax.swing.JButton();
        Export_Summary = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        CLR_BTN = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtIncCount = new javax.swing.JTextField();
        txtincYear = new javax.swing.JTextField();
        rptretainer = new javax.swing.JCheckBox();
        rptstaff = new javax.swing.JCheckBox();
        txtEmpCode = new javax.swing.JTextField();

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel2.setBackground(new java.awt.Color(0, 102, 153));
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 70, 1120, 10);

        txtFromDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(170, 30, 30, 30);

        txtEmpName.setEnabled(false);
        txtEmpName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtEmpNameFocusGained(evt);
            }
        });
        txtEmpName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEmpNameKeyPressed(evt);
            }
        });
        getContentPane().add(txtEmpName);
        txtEmpName.setBounds(480, 30, 210, 30);

        jPanel1.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jPanel1.setLayout(null);

        btnShowB2BMIR.setText("Show List");
        btnShowB2BMIR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowB2BMIRActionPerformed(evt);
            }
        });
        jPanel1.add(btnShowB2BMIR);
        btnShowB2BMIR.setBounds(10, 10, 130, 30);

        Export_B2BMIR.setText("EXPORT TO EXCEL");
        Export_B2BMIR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_B2BMIRActionPerformed(evt);
            }
        });
        jPanel1.add(Export_B2BMIR);
        Export_B2BMIR.setBounds(540, 10, 170, 25);

        tableArrearsDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableArrearsDetail.setSelectionBackground(new java.awt.Color(208, 220, 234));
        tableArrearsDetail.setSelectionForeground(new java.awt.Color(231, 16, 16));
        tableArrearsDetail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableArrearsDetailKeyPressed(evt);
            }
        });
        jScrollPane11.setViewportView(tableArrearsDetail);

        jPanel1.add(jScrollPane11);
        jScrollPane11.setBounds(10, 50, 1100, 450);

        jButton1.setText("Preview");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(730, 10, 90, 25);

        jTabbedPane2.addTab("DETAIL", jPanel1);

        jPanel2.setLayout(null);

        tableArrearsSummary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableArrearsSummary.setSelectionBackground(new java.awt.Color(208, 220, 234));
        tableArrearsSummary.setSelectionForeground(new java.awt.Color(231, 16, 16));
        tableArrearsSummary.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableArrearsSummaryKeyPressed(evt);
            }
        });
        jScrollPane12.setViewportView(tableArrearsSummary);

        jPanel2.add(jScrollPane12);
        jScrollPane12.setBounds(10, 50, 1100, 400);

        btnShowArrearsSummary.setText("Show List");
        btnShowArrearsSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowArrearsSummaryActionPerformed(evt);
            }
        });
        jPanel2.add(btnShowArrearsSummary);
        btnShowArrearsSummary.setBounds(10, 10, 130, 30);

        btnPreviewSummary.setText("Preview");
        btnPreviewSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviewSummaryActionPerformed(evt);
            }
        });
        jPanel2.add(btnPreviewSummary);
        btnPreviewSummary.setBounds(730, 10, 80, 25);

        Export_Summary.setText("EXPORT TO EXCEL");
        Export_Summary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_SummaryActionPerformed(evt);
            }
        });
        jPanel2.add(Export_Summary);
        Export_Summary.setBounds(540, 10, 170, 25);

        jTabbedPane2.addTab("SUMMARY", jPanel2);

        jPanel3.setLayout(null);

        jButton2.setText("Retainer Summary");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2);
        jButton2.setBounds(350, 120, 250, 25);

        jButton3.setText("Staff Detail");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton3);
        jButton3.setBounds(349, 5, 250, 25);

        jButton4.setText("Staff Summary");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton4);
        jButton4.setBounds(350, 40, 250, 25);

        jButton5.setText("Retainer Detail");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton5);
        jButton5.setBounds(350, 80, 250, 25);

        jTabbedPane2.addTab("Onetime Appreciation Award March 2021", jPanel3);

        jPanel4.setLayout(null);

        jButton6.setText("Pay-Slip");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton6);
        jButton6.setBounds(444, 10, 220, 25);

        jButton7.setText("Onetime Appreciation");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton7);
        jButton7.setBounds(440, 50, 230, 25);

        jTabbedPane2.addTab("Pay-Slip", jPanel4);

        getContentPane().add(jTabbedPane2);
        jTabbedPane2.setBounds(0, 80, 1110, 560);

        CLR_BTN.setText("Clear");
        CLR_BTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CLR_BTN.setMargin(new java.awt.Insets(2, 7, 2, 7));
        CLR_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLR_BTNActionPerformed(evt);
            }
        });
        getContentPane().add(CLR_BTN);
        CLR_BTN.setBounds(1040, 30, 70, 30);

        jLabel3.setText("Period : ");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 30, 60, 30);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("From Date :");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(60, 30, 100, 30);

        jLabel5.setText("Emp Code :");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(320, 30, 80, 30);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel1.setText("INCREMENT DIFFERNECE");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 2, 1120, 25);

        jLabel6.setText("Inc Count");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(200, 30, 70, 30);

        txtIncCount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtIncCountFocusGained(evt);
            }
        });
        getContentPane().add(txtIncCount);
        txtIncCount.setBounds(280, 30, 30, 30);

        txtincYear.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtincYear.setText("2021");
        txtincYear = new JTextFieldHint(new JTextField(),"");
        txtincYear.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtincYearFocusGained(evt);
            }
        });
        txtincYear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtincYearKeyPressed(evt);
            }
        });
        getContentPane().add(txtincYear);
        txtincYear.setBounds(970, 30, 60, 30);

        rptretainer.setText("Retainer");
        getContentPane().add(rptretainer);
        rptretainer.setBounds(860, 30, 100, 30);

        rptstaff.setText("Staff");
        getContentPane().add(rptstaff);
        rptstaff.setBounds(770, 30, 80, 30);

        txtEmpCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtEmpCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmpCodeFocusLost(evt);
            }
        });
        txtEmpCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEmpCodeKeyPressed(evt);
            }
        });
        getContentPane().add(txtEmpCode);
        txtEmpCode.setBounds(400, 30, 80, 30);
    }// </editor-fold>//GEN-END:initComponents
                                 
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        
    }//GEN-LAST:event_formMouseClicked

    private void CLR_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLR_BTNActionPerformed
        txtFromDate.setText("");
        txtEmpName.setText("");        
        txtIncCount.setText("");
        
    }//GEN-LAST:event_CLR_BTNActionPerformed

    private void tableArrearsDetailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableArrearsDetailKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tableArrearsDetailKeyPressed

    private void Export_B2BMIRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_B2BMIRActionPerformed
        // TODO add your handling code here:
        /*try {
            exp.fillData(Table_b2bMIR, new File("/root/Desktop/MIR_B2B.xls"));
            exp.fillData(Table_b2bMIR, new File("D://MIR_B2B.xls"));
            File file = new File("/root/Desktop/MIR_B2B.xls");
            File file1 = new File("D://MIR_B2B.xls");
            if (!Desktop.isDesktopSupported()) {
                JOptionPane.showMessageDialog(null, "Desktop Not Supported");
                return;
            } else {
                Desktop desk = Desktop.getDesktop();
                if (file.exists()) {
                    desk.open(file);
                } else if (file1.exists()) {
                    desk.open(file1);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }*/
        File file = null;
        file1.setVisible(true);
        try {
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);
            
            exp.fillData(tableArrearsDetail, new File(file1.getSelectedFile().toString() + ".xls"), "GSTR2");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file1.getSelectedFile().toString() + " successfully... ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_B2BMIRActionPerformed

    private void btnShowB2BMIRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowB2BMIRActionPerformed
        
//        if ( ! Validate()) {
//            return;
//        }
        if(rptstaff.isSelected()){
            FormatGridArrearsDetail();
            GenerateArrearsDetail(ORDER_BY);
        }
        if(rptretainer.isSelected()){
            FormatGridArrearsDetailRetainer();
            GenerateArrearsDetailRetainer(ORDER_BY);
        }
        
    }//GEN-LAST:event_btnShowB2BMIRActionPerformed

    private void txtIncCountFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIncCountFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIncCountFocusGained

    private void tableArrearsSummaryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableArrearsSummaryKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tableArrearsSummaryKeyPressed

    private void btnShowArrearsSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowArrearsSummaryActionPerformed
//        if ( ! Validate()) {
//            return;
//        }
        if(rptstaff.isSelected()){
        FormatGridArrearsSummary();
        GenerateArrearsSummary(ORDER_BY);        // TODO add your handling code here:
        }
        if(rptretainer.isSelected()){
            FormatGridArrearsSummaryRetainer();
            GenerateArrearsSummaryRetainer(ORDER_BY);        // TODO add your handling code here:
        }
    }//GEN-LAST:event_btnShowArrearsSummaryActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(rptstaff.isSelected()){        
            PostDetailReport();
        }
        if(rptretainer.isSelected()){        
            PostDetailReportRetainer();
        }
        //ViewDetailReport();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnPreviewSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviewSummaryActionPerformed
        if(rptstaff.isSelected()){        
           PostSummaryReport();
        }
        if(rptretainer.isSelected()){        
           PostSummaryReportRetainer();
        }
    }//GEN-LAST:event_btnPreviewSummaryActionPerformed

    private void Export_SummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_SummaryActionPerformed
File file = null;
        file1.setVisible(true);
        try {
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);
            
            exp.fillData(tableArrearsSummary, new File(file1.getSelectedFile().toString() + ".xls"), "GSTR2");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file1.getSelectedFile().toString() + " successfully... ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_SummaryActionPerformed

    private void txtincYearFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtincYearFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtincYearFocusGained

    private void txtincYearKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtincYearKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtincYearKeyPressed

    private void txtEmpNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpNameKeyPressed
       if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            ATTPAYLOV aList = new ATTPAYLOV();
            aList.SQL = "SELECT PAY_EMP_NO,EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE APPROVED=1 AND CANCELED=0";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtEmpCode.setText(aList.ReturnVal);
                txtEmpName.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpCode.getText() + "'"));
            }
        }
    }//GEN-LAST:event_txtEmpNameKeyPressed

    private void txtEmpNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmpNameFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmpNameFocusGained

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        String cndtn="";
        try {
            
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            String strSQL = "";
            strSQL += "SELECT INC_YEAR,SUBSTR(B.IC_PAY_EMP_NO,4,6) IC_PAY_EMP_NO,DIFF_BASIC,DIFF_HRA,DIFF_PPAY,DIFF_ELEC,DIFF_MAGAZINE,DIFF_OTHER,\n"
                    + "TOTAL_DIFF,ABS(DIFF_PTAX),PF,DIFF_MEDICAL,TOTAL_DID, NET_PAY,EMP_NAME,RETAINER_FEE,(RETAINER_FEE-INC_BASIC) NEW_RETAINER_FEE,ROUND(NET_PAY/2,2) HALF_NET_PAY FROM \n"
                    + "(SELECT A.*,ROUND((DIFF_BASIC+DIFF_PPAY)*.12) PF,CASE WHEN (DIFF_BASIC+DIFF_PPAY)=0 THEN 0 ELSE (ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+DIFF_PTAX END TOTAL_DID,TOTAL_DIFF*1 NET_PAY FROM \n"
                    + "(SELECT INC_YEAR,IC_PAY_EMP_NO,INC_BASIC,COALESCE(SUM(DIFF_BASIC),0) DIFF_BASIC,COALESCE(SUM(DIFF_HRA),0) DIFF_HRA,COALESCE(SUM(DIFF_PPAY),0) DIFF_PPAY,COALESCE(SUM(DIFF_ELEC),0) DIFF_ELEC,COALESCE(SUM(DIFF_MAGAZINE),0) DIFF_MAGAZINE,COALESCE(SUM(DIFF_OTHER),0) DIFF_OTHER,COALESCE(SUM(TOTAL_DIFF),0) TOTAL_DIFF,SUM(NEW_PTAX-OLD_PTAX) DIFF_PTAX,COALESCE(SUM(DIFF_MEDICAL),0) DIFF_MEDICAL FROM SDMLATTPAY.INCREMENT_ARREARS_CALC WHERE INC_YEAR='2019' AND (IC_PAY_EMP_NO LIKE 'BRD5%' OR IC_PAY_EMP_NO LIKE 'BRD6%')  GROUP BY IC_PAY_EMP_NO) AS A) B\n"
                    + "LEFT JOIN\n"
                    + "(SELECT PAY_EMPID,EMP_NAME,RETAINER_FEE FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC) C \n"
                    + "ON PAY_EMPID=IC_PAY_EMP_NO";

            System.out.println("SQL QUERY : " + strSQL);
            //rpt.setReportName("/EITLERP/FeltSales/FeltInvReport/FeltPostInvReason.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/Arrears/ArrearsDifferenceSummary_Retainer_Onetime.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                st.close();
                Conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        String cndtn="";
        
        try {
            if (!txtEmpCode.getText().equals("")) {
                cndtn = cndtn + " AND IC_PAY_EMP_NO='" + txtEmpCode.getText().trim() + "' ";
            }

            if (!txtIncCount.getText().equals("")) {
                cndtn = cndtn + " AND INC_COUNT=" + txtIncCount.getText().trim() + " ";
            }
            
            
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            String strSQL = "";
            strSQL += "SELECT X.*,Y.* FROM\n"
                    + "(SELECT @a:=@a+1 SR_NO ,IC_PAY_EMP_NO,COUNT(IC_PAY_EMP_NO) RECORDS,SUM(PRESENT_DAYS) WORKING_DAYS,SUM(DAY_OF_MONTH) TOTAL_DAYS,COALESCE(SUM(DIFF_BASIC),0) TOT_DIFF_BASIC,COALESCE(SUM(DIFF_PPAY),0) TOT_DIFF_PPAY,COALESCE(SUM(TOTAL_DIFF),0)+COALESCE(SUM(DIFF_MEDICAL),0) TOT_TOTAL_DIFF,COALESCE(SUM(OLD_PTAX),0) TOTAL_OLDPTAX,COALESCE(SUM(NEW_PTAX),0) TOTAL_NEWPTAX,COALESCE(SUM(DIFF_MEDICAL),0) TOT_DIFF_MEDICAL,(COALESCE(SUM(TOTAL_DIFF),0)+COALESCE(SUM(DIFF_MEDICAL),0))/2 TOT_HALF_TOTAL_DIFF FROM SDMLATTPAY.INCREMENT_ARREARS_CALC,\n"
                    + "        (SELECT @a:= 0) AS a WHERE INC_YEAR='2019' AND (IC_PAY_EMP_NO LIKE 'BRD1%' OR IC_PAY_EMP_NO LIKE 'BRD2%') "+cndtn+" GROUP BY IC_PAY_EMP_NO) X\n"
                    + "LEFT JOIN\n"
                    + "(SELECT A.*,DPT_CODE,EMP_NAME FROM\n"
                    + "(SELECT INC_YEAR,IC_YEAR,IC_MONTH,IC_PAY_EMP_NO,COALESCE(PRESENT_DAYS,0) PRESENT_DAYS,CONCAT(LPAD(IC_MONTH,2,0),IC_YEAR) IC_MONTHYEAR,COALESCE(INC_BASIC,0) INC_BASIC,COALESCE(DIFF_BASIC,0) DIFF_BASIC,COALESCE(INC_PPAY,0) INC_PPAY,COALESCE(DIFF_PPAY,0) DIFF_PPAY,COALESCE(TOTAL_DIFF,0)+COALESCE(DIFF_MEDICAL,0) TOTAL_DIFF,COALESCE(OLD_GROSS,0) OLD_GROSS,COALESCE(NEW_GROSS,0) NEW_GROSS,COALESCE(OLD_PTAX,0) OLD_PTAX,COALESCE(NEW_PTAX,0) NEW_PTAX,COALESCE(INC_MEDICAL,0) INC_MEDICAL,COALESCE(DIFF_MEDICAL,0) DIFF_MEDICAL,(COALESCE(TOTAL_DIFF,0)+COALESCE(DIFF_MEDICAL,0))/2 HALF_TOTAL_DIFF FROM SDMLATTPAY.INCREMENT_ARREARS_CALC WHERE INC_YEAR='2019' AND (IC_PAY_EMP_NO LIKE 'BRD1%' OR IC_PAY_EMP_NO LIKE 'BRD2%') "+cndtn+") A\n"
                    + "LEFT JOIN \n"
                    + "(SELECT PAY_EMP_NO,DPT_CODE,EMP_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW) B\n"
                    + "ON IC_PAY_EMP_NO=PAY_EMP_NO ) Y\n"
                    + "ON X.IC_PAY_EMP_NO=Y.IC_PAY_EMP_NO ORDER BY Y.IC_PAY_EMP_NO,Y.IC_YEAR,Y.IC_MONTH";

            System.out.println("SQL QUERY : " + strSQL);
            //rpt.setReportName("/EITLERP/FeltSales/FeltInvReport/FeltPostInvReason.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/Arrears/ArrearsDifference_Onetime.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                st.close();
                Conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        String cndtn="";
        try {
            if (!txtEmpCode.getText().equals("")) {
                cndtn = cndtn + " AND IC_PAY_EMP_NO='" + txtEmpCode.getText().trim() + "' ";
            }

            if (!txtIncCount.getText().equals("")) {
                cndtn = cndtn + " AND INC_COUNT=" + txtIncCount.getText().trim() + " ";
            }
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            String strSQL = "";
            strSQL += "SELECT INC_YEAR,SUBSTR(B.IC_PAY_EMP_NO,4,6) IC_PAY_EMP_NO,DIFF_BASIC,DIFF_PPAY,\n"
                    + "COALESCE((TOTAL_DIFF+DIFF_MEDICAL),'') TOTAL_DIFF,DIFF_MEDICAL,EMP_NAME,EMP_BASIC_RATE,COALESCE(ROUND((TOTAL_DIFF+DIFF_MEDICAL)/2,2),'') HALF_TOTAL_DIFF FROM \n"
                    + "(SELECT A.* FROM \n"
                    + "(SELECT INC_YEAR,IC_PAY_EMP_NO,COALESCE(SUM(DIFF_BASIC),0) DIFF_BASIC,COALESCE(SUM(DIFF_HRA),0) DIFF_HRA,COALESCE(SUM(DIFF_PPAY),0) DIFF_PPAY,COALESCE(SUM(DIFF_ELEC),0) DIFF_ELEC,COALESCE(SUM(DIFF_MAGAZINE),0) DIFF_MAGAZINE,COALESCE(SUM(DIFF_OTHER),0) DIFF_OTHER,COALESCE(SUM(TOTAL_DIFF),0) TOTAL_DIFF,SUM(NEW_PTAX-OLD_PTAX) DIFF_PTAX,COALESCE(SUM(DIFF_MEDICAL),0) DIFF_MEDICAL FROM SDMLATTPAY.INCREMENT_ARREARS_CALC WHERE INC_YEAR='2019' AND (IC_PAY_EMP_NO LIKE 'BRD1%' OR IC_PAY_EMP_NO LIKE 'BRD2%') "+cndtn+"  GROUP BY IC_PAY_EMP_NO) AS A) B\n"
                    + "LEFT JOIN\n"
                    + "(SELECT PAY_EMP_NO,EMP_NAME,EMP_BASIC_RATE FROM SDMLATTPAY.ATTPAY_EMPMST) C \n"
                    + "ON PAY_EMP_NO=IC_PAY_EMP_NO";

            System.out.println("SQL QUERY : " + strSQL);
            //rpt.setReportName("/EITLERP/FeltSales/FeltInvReport/FeltPostInvReason.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/Arrears/ArrearsDifferenceSummary_Onetime.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                st.close();
                Conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        String cndtn="";
        try {
            
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            String strSQL = "";
            strSQL += "SELECT X.*,Y.* FROM\n"
                    + "(SELECT @a:=@a+1 SR_NO ,IC_PAY_EMP_NO,COUNT(IC_PAY_EMP_NO) RECORDS,SUM(PRESENT_DAYS) WORKING_DAYS,SUM(DAY_OF_MONTH) TOTAL_DAYS,COALESCE(SUM(DIFF_BASIC),0) TOT_DIFF_BASIC,COALESCE(SUM(DIFF_HRA),0) TOT_DIFF_HRA,COALESCE(SUM(DIFF_PPAY),0) TOT_DIFF_PPAY,COALESCE(SUM(DIFF_ELEC),0) TOT_DIFF_ELEC,COALESCE(SUM(DIFF_MAGAZINE),0) TOT_DIFF_MAGAZINE,COALESCE(SUM(TOTAL_DIFF),0) TOT_TOTAL_DIFF,COALESCE(SUM(OLD_PTAX),0) TOTAL_OLDPTAX,COALESCE(SUM(NEW_PTAX),0) TOTAL_NEWPTAX,COALESCE(SUM(DIFF_MEDICAL),0) TOT_DIFF_MEDICAL,COALESCE(ROUND(SUM(TOTAL_DIFF)/2,2),0) TOT_HALF_TOTAL_DIFF FROM SDMLATTPAY.INCREMENT_ARREARS_CALC,\n"
                    + "        (SELECT @a:= 0) AS a WHERE INC_YEAR='2019' AND (IC_PAY_EMP_NO LIKE 'BRD5%' OR IC_PAY_EMP_NO LIKE 'BRD6%') GROUP BY IC_PAY_EMP_NO) X\n"
                    + "LEFT JOIN\n"
                    + "(SELECT A.*,DPT_CODE,EMP_NAME FROM\n"
                    + "(SELECT INC_YEAR,IC_YEAR,IC_MONTH,IC_PAY_EMP_NO,COALESCE(PRESENT_DAYS,0) PRESENT_DAYS,CONCAT(LPAD(IC_MONTH,2,0),IC_YEAR) IC_MONTHYEAR,COALESCE(INC_BASIC,0) INC_BASIC,COALESCE(DIFF_BASIC,0) DIFF_BASIC,COALESCE(INC_HRA,0) INC_HRA,COALESCE(DIFF_HRA,0) DIFF_HRA,COALESCE(INC_PPAY,0) INC_PPAY,COALESCE(DIFF_PPAY,0) DIFF_PPAY,COALESCE(INC_ELEC,0) INC_ELEC,COALESCE(DIFF_ELEC,0) DIFF_ELEC,COALESCE(INC_MAGAZINE,0) INC_MAGAZINE,COALESCE(DIFF_MAGAZINE,0) DIFF_MAGAZINE,COALESCE(TOTAL_DIFF,0) TOTAL_DIFF,COALESCE(OLD_GROSS,0) OLD_GROSS,COALESCE(NEW_GROSS,0) NEW_GROSS,COALESCE(OLD_PTAX,0) OLD_PTAX,COALESCE(NEW_PTAX,0) NEW_PTAX,COALESCE(INC_MEDICAL,0) INC_MEDICAL,COALESCE(DIFF_MEDICAL,0) DIFF_MEDICAL,COALESCE(ROUND(TOTAL_DIFF/2,2),0) HALF_TOTAL_DIFF FROM SDMLATTPAY.INCREMENT_ARREARS_CALC WHERE INC_YEAR='2019' AND (IC_PAY_EMP_NO LIKE 'BRD5%' OR IC_PAY_EMP_NO LIKE 'BRD6%')) A\n"
                    + "LEFT JOIN \n"
                    + "(SELECT PAY_EMP_NO,DPT_CODE,EMP_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW) B\n"
                    + "ON IC_PAY_EMP_NO=PAY_EMP_NO ) Y\n"
                    + "ON X.IC_PAY_EMP_NO=Y.IC_PAY_EMP_NO ORDER BY Y.IC_PAY_EMP_NO,Y.IC_YEAR,Y.IC_MONTH";

            System.out.println("SQL QUERY : " + strSQL);
            //rpt.setReportName("/EITLERP/FeltSales/FeltInvReport/FeltPostInvReason.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/Arrears/ArrearsDifference_Retainer_Onetime.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                st.close();
                Conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        String cndtn="";
        
        if(!txtEmpCode.getText().equals("")){
                cndtn=cndtn+" AND IC_PAY_EMP_NO='"+txtEmpCode.getText().trim()+"' ";
            }
        
        if(!txtIncCount.getText().equals("")){
                cndtn=cndtn+" AND INC_COUNT="+txtIncCount.getText().trim()+" ";
            }
        
        
        try {
            
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            String strSQL = "";
            //strSQL += "SELECT @a:=@a+1 SR_NO ,S.* FROM SDMLATTPAY.INCREMENT_ARREARS_CALC_SUMMARY S,(SELECT @a:= 0) AS a WHERE INC_YEAR!=2019 AND INC_YEAR='"+txtincYear.getText()+"'  AND NET_PAY!=0  ORDER BY EMP_DEPT,IC_PAY_EMP_NO";
            strSQL += "SELECT @a:=@a+1 SR_NO ,S.* FROM SDMLATTPAY.INCREMENT_ARREARS_CALC_SUMMARY S,(SELECT @a:= 0) AS a WHERE INC_YEAR!=2019 AND INC_YEAR='"+txtincYear.getText()+"'  AND NET_PAY!=0 "+cndtn;
            
            System.out.println("SQL QUERY : " + strSQL);            
            //rpt.setReportName("/SDMLATTPAY/Arrears/PaySlip_ArrearsDifference.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/Arrears/PaySlip_ArrearsDifference_20212022_1.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport(); 

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                st.close();
                Conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
       Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        String cndtn="";
        
        if(!txtEmpCode.getText().equals("")){
                cndtn=cndtn+" AND IC_PAY_EMP_NO='"+txtEmpCode.getText().trim()+"' ";
            }
        
        if(!txtIncCount.getText().equals("")){
                cndtn=cndtn+" AND INC_COUNT="+txtIncCount.getText().trim()+" ";
            }
        
        
        
        try {
            
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            String strSQL = "";
            //strSQL += "SELECT @a:=@a+1 SR_NO ,IC_PAY_EMP_NO,EMP_NAME,EMP_DEPT,COALESCE(DIFF_OTHER,0.00) DIFF_OTHER,COALESCE(DIFF_PTAX,0.00) DIFF_PTAX,COALESCE(DIFF_TDS,0.00) DIFF_TDS,COALESCE(NET_PAY,0.00) NET_PAY FROM SDMLATTPAY.INCREMENT_ARREARS_CALC_SUMMARY S,(SELECT @a:= 0) AS a WHERE INC_YEAR='2019'  AND NET_PAY!=0  ORDER BY EMP_DEPT,IC_PAY_EMP_NO";
            strSQL += "SELECT @a:=@a+1 SR_NO ,IC_PAY_EMP_NO,EMP_NAME,EMP_DEPT,COALESCE(DIFF_OTHER,0.00) DIFF_OTHER,COALESCE(DIFF_PTAX,0.00) DIFF_PTAX,COALESCE(DIFF_TDS,0.00) DIFF_TDS,COALESCE(NET_PAY,0.00) NET_PAY FROM SDMLATTPAY.INCREMENT_ARREARS_CALC_SUMMARY S,(SELECT @a:= 0) AS a WHERE INC_YEAR='2019'  AND NET_PAY!=0 "+cndtn;
            
            System.out.println("SQL QUERY : " + strSQL);
            //rpt.setReportName("/EITLERP/FeltSales/FeltInvReport/FeltPostInvReason.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/Arrears/PaySlip_OnetimeAppreciation.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                st.close();
                Conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void txtEmpCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmpCodeFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmpCodeFocusGained

    private void txtEmpCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpCodeKeyPressed
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            ATTPAYLOV aList = new ATTPAYLOV();
            aList.SQL = "SELECT PAY_EMP_NO,EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE APPROVED=1 AND CANCELED=0";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtEmpCode.setText(aList.ReturnVal);
                txtEmpName.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpCode.getText() + "'"));
            }
        }
    }//GEN-LAST:event_txtEmpCodeKeyPressed

    private void txtEmpCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmpCodeFocusLost
if (!txtEmpCode.getText().trim().equals("") && data.IsRecordExist("SELECT * FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpCode.getText().trim() + "' AND APPROVED=1 AND CANCELED=0")) {
            txtEmpName.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpCode.getText() + "'"));
        } else {
            if (!txtEmpCode.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Employee No doesn't exist/under approval.");
            }
            txtEmpCode.setText("");
            txtEmpName.setText("");
        }
    }//GEN-LAST:event_txtEmpCodeFocusLost
                
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CLR_BTN;
    private javax.swing.JButton Export_B2BMIR;
    private javax.swing.JButton Export_Summary;
    private javax.swing.JButton btnPreviewSummary;
    private javax.swing.JButton btnShowArrearsSummary;
    private javax.swing.JButton btnShowB2BMIR;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JFileChooser file1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JCheckBox rptretainer;
    private javax.swing.JCheckBox rptstaff;
    private javax.swing.JTable tableArrearsDetail;
    private javax.swing.JTable tableArrearsSummary;
    private javax.swing.JTextField txtEmpCode;
    private javax.swing.JTextField txtEmpName;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtIncCount;
    private javax.swing.JTextField txtincYear;
    // End of variables declaration//GEN-END:variables
    
    private boolean Validate() {
        //Form level validations
        if(txtFromDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter from Date");
            return false;
        } else if(!EITLERPGLOBAL.isDate(txtFromDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid From Date in DD/MM/YYYY format.");
            return false;
        }
        
        if(txtIncCount.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter To Date");
            return false;
        } else if(!EITLERPGLOBAL.isDate(txtIncCount.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid To Date in DD/MM/YYYY format.");
            return false;
        }
        
        return true;
    }
    
    private void FormatGridArrearsDetail() {
        try {           
            
            
            DataModelArrearsDetail = new EITLTableModel();
            tableArrearsDetail.removeAll();

            tableArrearsDetail.setModel(DataModelArrearsDetail);
            tableArrearsDetail.setAutoResizeMode(0);

            DataModelArrearsDetail.addColumn("SrNo"); //0 - Read Only
            DataModelArrearsDetail.addColumn("Dept"); //1
            DataModelArrearsDetail.addColumn("Emp No"); //2            
            DataModelArrearsDetail.addColumn("Emp Name"); //4
            DataModelArrearsDetail.addColumn("MMYYYY"); //5           
            DataModelArrearsDetail.addColumn("PAYDAYS"); //6
            DataModelArrearsDetail.addColumn("INC BASIC"); //7
            DataModelArrearsDetail.addColumn("DIFF BASIC"); //8            
            DataModelArrearsDetail.addColumn("INC HRA"); //9
            DataModelArrearsDetail.addColumn("DIFF HRA"); //10          
            DataModelArrearsDetail.addColumn("INC PPAY"); //7
            DataModelArrearsDetail.addColumn("DIFF PPAY"); //8            
            DataModelArrearsDetail.addColumn("INC ELECT"); //9
            DataModelArrearsDetail.addColumn("DIFF ELECT"); //10          
            DataModelArrearsDetail.addColumn("INC MAG"); //9
            DataModelArrearsDetail.addColumn("DIFF MAG"); //10          
            
            DataModelArrearsDetail.addColumn("INC PERF"); //11
            DataModelArrearsDetail.addColumn("DIFF PERF"); //12          
            DataModelArrearsDetail.addColumn("INC CONVEY"); //13
            DataModelArrearsDetail.addColumn("DIFF CONVEY"); //14                      
            
            DataModelArrearsDetail.addColumn("INC MED"); //15
            DataModelArrearsDetail.addColumn("DIFF MED"); //16
            
            DataModelArrearsDetail.addColumn("TOTAL INC"); //17
            DataModelArrearsDetail.addColumn("OLD TAXABLE"); //18          
            DataModelArrearsDetail.addColumn("OLD TAX"); //19
            DataModelArrearsDetail.addColumn("NEW TAXABALE"); //20          
            DataModelArrearsDetail.addColumn("NEW TAX"); //21
            
            
           
            /*
            DataModelB2BMIR.SetVariable(0, "SR_N0"); 
            DataModelB2BMIR.SetVariable(1, "GSTIN_UIN"); 
            DataModelB2BMIR.SetVariable(2, "TRADE_NAME"); 
            DataModelB2BMIR.SetVariable(3, "INVOICE_NO"); 
            DataModelB2BMIR.SetVariable(4, "INVOICE_DATE"); 
            DataModelB2BMIR.SetVariable(5, "INVOICE_AMT");
            DataModelB2BMIR.SetVariable(6, "TAXABLE_VALUE");
            DataModelB2BMIR.SetVariable(7, "HSN_CODE");
            DataModelB2BMIR.SetVariable(8, "GST_RATE");
            DataModelB2BMIR.SetVariable(9, "IGST_AMT");
            DataModelB2BMIR.SetVariable(10, "CGST_AMT");
            DataModelB2BMIR.SetVariable(11, "SGST_AMT");
            DataModelB2BMIR.SetVariable(12, "CESS");
            DataModelB2BMIR.SetVariable(13, "POS");
            DataModelB2BMIR.SetVariable(14, "ITEM_ID");
            DataModelB2BMIR.SetVariable(15, "IGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(16, "CGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(17, "SGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(18, "CESS_ITC");
            DataModelB2BMIR.SetVariable(19, "INVOICE_NO_AMEND");
            DataModelB2BMIR.SetVariable(20, "INVOICE_DATE_AMEND");
            */
            
            
            for(int i=0;i<=21;i++) {
                DataModelArrearsDetail.SetReadOnly(i);
            }
                        
            tableArrearsDetail.getColumnModel().getColumn(0).setMinWidth(30);
            tableArrearsDetail.getColumnModel().getColumn(0).setMaxWidth(40);
            tableArrearsDetail.getColumnModel().getColumn(1).setMinWidth(60);
            tableArrearsDetail.getColumnModel().getColumn(1).setMaxWidth(70);
            tableArrearsDetail.getColumnModel().getColumn(2).setMinWidth(80);
            tableArrearsDetail.getColumnModel().getColumn(2).setMaxWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(3).setMinWidth(100);
            tableArrearsDetail.getColumnModel().getColumn(3).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(4).setMaxWidth(80);
            tableArrearsDetail.getColumnModel().getColumn(4).setMinWidth(80);
            tableArrearsDetail.getColumnModel().getColumn(4).setMaxWidth(90);
            tableArrearsDetail.getColumnModel().getColumn(5).setMinWidth(50);
            tableArrearsDetail.getColumnModel().getColumn(5).setMaxWidth(60);
            
            
            
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void FormatGridArrearsDetailRetainer() {
        try {           
            
            
            DataModelArrearsDetail = new EITLTableModel();
            tableArrearsDetail.removeAll();

            tableArrearsDetail.setModel(DataModelArrearsDetail);
            tableArrearsDetail.setAutoResizeMode(0);

            DataModelArrearsDetail.addColumn("SrNo"); //0 - Read Only
            DataModelArrearsDetail.addColumn("Dept"); //1
            DataModelArrearsDetail.addColumn("Emp No"); //2            
            DataModelArrearsDetail.addColumn("Emp Name"); //4
            DataModelArrearsDetail.addColumn("MMYYYY"); //5           
            DataModelArrearsDetail.addColumn("PAYDAYS"); //6
            DataModelArrearsDetail.addColumn("INC RET FEE"); //7
            DataModelArrearsDetail.addColumn("DIFF RET FEE"); //8                        
            
           
            /*
            DataModelB2BMIR.SetVariable(0, "SR_N0"); 
            DataModelB2BMIR.SetVariable(1, "GSTIN_UIN"); 
            DataModelB2BMIR.SetVariable(2, "TRADE_NAME"); 
            DataModelB2BMIR.SetVariable(3, "INVOICE_NO"); 
            DataModelB2BMIR.SetVariable(4, "INVOICE_DATE"); 
            DataModelB2BMIR.SetVariable(5, "INVOICE_AMT");
            DataModelB2BMIR.SetVariable(6, "TAXABLE_VALUE");
            DataModelB2BMIR.SetVariable(7, "HSN_CODE");
            DataModelB2BMIR.SetVariable(8, "GST_RATE");
            DataModelB2BMIR.SetVariable(9, "IGST_AMT");
            DataModelB2BMIR.SetVariable(10, "CGST_AMT");
            DataModelB2BMIR.SetVariable(11, "SGST_AMT");
            DataModelB2BMIR.SetVariable(12, "CESS");
            DataModelB2BMIR.SetVariable(13, "POS");
            DataModelB2BMIR.SetVariable(14, "ITEM_ID");
            DataModelB2BMIR.SetVariable(15, "IGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(16, "CGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(17, "SGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(18, "CESS_ITC");
            DataModelB2BMIR.SetVariable(19, "INVOICE_NO_AMEND");
            DataModelB2BMIR.SetVariable(20, "INVOICE_DATE_AMEND");
            */
            
            
            for(int i=0;i<=17;i++) {
                DataModelArrearsDetail.SetReadOnly(i);
            }
                        
            tableArrearsDetail.getColumnModel().getColumn(0).setMinWidth(30);
            tableArrearsDetail.getColumnModel().getColumn(0).setMaxWidth(40);
            tableArrearsDetail.getColumnModel().getColumn(1).setMinWidth(60);
            tableArrearsDetail.getColumnModel().getColumn(1).setMaxWidth(70);
            tableArrearsDetail.getColumnModel().getColumn(2).setMinWidth(80);
            tableArrearsDetail.getColumnModel().getColumn(2).setMaxWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(3).setMinWidth(100);
            tableArrearsDetail.getColumnModel().getColumn(3).setMinWidth(150);
            //Table_b2bMIR.getColumnModel().getColumn(4).setMaxWidth(80);
            tableArrearsDetail.getColumnModel().getColumn(4).setMinWidth(90);
            tableArrearsDetail.getColumnModel().getColumn(4).setMaxWidth(100);
            tableArrearsDetail.getColumnModel().getColumn(5).setMinWidth(90);
            tableArrearsDetail.getColumnModel().getColumn(5).setMaxWidth(100);
            tableArrearsDetail.getColumnModel().getColumn(6).setMinWidth(150);
            tableArrearsDetail.getColumnModel().getColumn(6).setMaxWidth(200);
            tableArrearsDetail.getColumnModel().getColumn(7).setMinWidth(150);
            tableArrearsDetail.getColumnModel().getColumn(7).setMaxWidth(200);
            
            
            
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void FormatGridArrearsSummary() {
        try {
            DataModelArrearsSummary = new EITLTableModel();
            tableArrearsSummary.removeAll();

            tableArrearsSummary.setModel(DataModelArrearsSummary);
            tableArrearsSummary.setAutoResizeMode(0);

            DataModelArrearsSummary.addColumn("SrNo"); //0 - Read Only
            //DataModelArrearsSummary.addColumn("Dept"); //1
            DataModelArrearsSummary.addColumn("Emp No"); //2            
            DataModelArrearsSummary.addColumn("Emp Name"); //4
            DataModelArrearsSummary.addColumn("Dept"); //2            
            DataModelArrearsSummary.addColumn("Basic"); //5           
            DataModelArrearsSummary.addColumn("Diff Basic"); //6
            DataModelArrearsSummary.addColumn("HRA"); //7
            DataModelArrearsSummary.addColumn("PPAY"); //8            
            DataModelArrearsSummary.addColumn("Elect"); //9
            DataModelArrearsSummary.addColumn("Magax"); //10          
            DataModelArrearsSummary.addColumn("Other"); //7
            DataModelArrearsSummary.addColumn("Convey"); //7
            DataModelArrearsSummary.addColumn("Perf"); //7
            DataModelArrearsSummary.addColumn("MED"); //9
            DataModelArrearsSummary.addColumn("Total Erng"); //8            
            DataModelArrearsSummary.addColumn("PF"); //9
            
            DataModelArrearsSummary.addColumn("PTax"); //10          
            //DataModelArrearsSummary.addColumn("Reve"); //9
            DataModelArrearsSummary.addColumn("Total Ded"); //10          
            DataModelArrearsSummary.addColumn("Net Payable"); //9
            
            /*
            DataModelB2BMIR.SetVariable(0, "SR_N0"); 
            DataModelB2BMIR.SetVariable(1, "GSTIN_UIN"); 
            DataModelB2BMIR.SetVariable(2, "TRADE_NAME"); 
            DataModelB2BMIR.SetVariable(3, "INVOICE_NO"); 
            DataModelB2BMIR.SetVariable(4, "INVOICE_DATE"); 
            DataModelB2BMIR.SetVariable(5, "INVOICE_AMT");
            DataModelB2BMIR.SetVariable(6, "TAXABLE_VALUE");
            DataModelB2BMIR.SetVariable(7, "HSN_CODE");
            DataModelB2BMIR.SetVariable(8, "GST_RATE");
            DataModelB2BMIR.SetVariable(9, "IGST_AMT");
            DataModelB2BMIR.SetVariable(10, "CGST_AMT");
            DataModelB2BMIR.SetVariable(11, "SGST_AMT");
            DataModelB2BMIR.SetVariable(12, "CESS");
            DataModelB2BMIR.SetVariable(13, "POS");
            DataModelB2BMIR.SetVariable(14, "ITEM_ID");
            DataModelB2BMIR.SetVariable(15, "IGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(16, "CGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(17, "SGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(18, "CESS_ITC");
            DataModelB2BMIR.SetVariable(19, "INVOICE_NO_AMEND");
            DataModelB2BMIR.SetVariable(20, "INVOICE_DATE_AMEND");
            */
            
            
            for(int i=0;i<=17;i++) {
                DataModelArrearsSummary.SetReadOnly(i);
            }
                        
            tableArrearsSummary.getColumnModel().getColumn(0).setMinWidth(30);
            tableArrearsSummary.getColumnModel().getColumn(0).setMaxWidth(40);
            tableArrearsSummary.getColumnModel().getColumn(1).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(1).setMaxWidth(70);
            tableArrearsSummary.getColumnModel().getColumn(2).setMinWidth(200);
            //Table_b2bMIR.getColumnModel().getColumn(2).setMaxWidth(80);
            //Table_b2bMIR.getColumnModel().getColumn(3).setMinWidth(100);
            tableArrearsSummary.getColumnModel().getColumn(4).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(4).setMaxWidth(80);
            tableArrearsSummary.getColumnModel().getColumn(5).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(5).setMaxWidth(80);
            
            
            
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void FormatGridArrearsSummaryRetainer() {
        try {
            DataModelArrearsSummary = new EITLTableModel();
            tableArrearsSummary.removeAll();

            tableArrearsSummary.setModel(DataModelArrearsSummary);
            tableArrearsSummary.setAutoResizeMode(0);

            DataModelArrearsSummary.addColumn("SrNo"); //0 - Read Only
            //DataModelArrearsSummary.addColumn("Dept"); //1
            DataModelArrearsSummary.addColumn("Emp No"); //2            
            DataModelArrearsSummary.addColumn("Emp Name"); //4
            DataModelArrearsSummary.addColumn("Dept"); //4
            DataModelArrearsSummary.addColumn("Retainer Fee"); //5           
            DataModelArrearsSummary.addColumn("Diff Retainer Fee"); //6
            DataModelArrearsSummary.addColumn("TDS"); //6
            DataModelArrearsSummary.addColumn("Net Pay"); //6
            DataModelArrearsSummary.addColumn("New Retainer Fee"); //5           
            /*
            DataModelB2BMIR.SetVariable(0, "SR_N0"); 
            DataModelB2BMIR.SetVariable(1, "GSTIN_UIN"); 
            DataModelB2BMIR.SetVariable(2, "TRADE_NAME"); 
            DataModelB2BMIR.SetVariable(3, "INVOICE_NO"); 
            DataModelB2BMIR.SetVariable(4, "INVOICE_DATE"); 
            DataModelB2BMIR.SetVariable(5, "INVOICE_AMT");
            DataModelB2BMIR.SetVariable(6, "TAXABLE_VALUE");
            DataModelB2BMIR.SetVariable(7, "HSN_CODE");
            DataModelB2BMIR.SetVariable(8, "GST_RATE");
            DataModelB2BMIR.SetVariable(9, "IGST_AMT");
            DataModelB2BMIR.SetVariable(10, "CGST_AMT");
            DataModelB2BMIR.SetVariable(11, "SGST_AMT");
            DataModelB2BMIR.SetVariable(12, "CESS");
            DataModelB2BMIR.SetVariable(13, "POS");
            DataModelB2BMIR.SetVariable(14, "ITEM_ID");
            DataModelB2BMIR.SetVariable(15, "IGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(16, "CGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(17, "SGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(18, "CESS_ITC");
            DataModelB2BMIR.SetVariable(19, "INVOICE_NO_AMEND");
            DataModelB2BMIR.SetVariable(20, "INVOICE_DATE_AMEND");
            */
            
            
            for(int i=0;i<=17;i++) {
                DataModelArrearsSummary.SetReadOnly(i);
            }
                        
            tableArrearsSummary.getColumnModel().getColumn(0).setMinWidth(30);
            tableArrearsSummary.getColumnModel().getColumn(0).setMaxWidth(40);
            tableArrearsSummary.getColumnModel().getColumn(1).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(1).setMaxWidth(70);
            tableArrearsSummary.getColumnModel().getColumn(2).setMinWidth(200);
            //Table_b2bMIR.getColumnModel().getColumn(2).setMaxWidth(80);
            //Table_b2bMIR.getColumnModel().getColumn(3).setMinWidth(100);
            tableArrearsSummary.getColumnModel().getColumn(3).setMinWidth(200);
            //Table_b2bMIR.getColumnModel().getColumn(4).setMaxWidth(80);
            //tableArrearsSummary.getColumnModel().getColumn(5).setMinWidth(200);
            //Table_b2bMIR.getColumnModel().getColumn(5).setMaxWidth(80);
            tableArrearsSummary.getColumnModel().getColumn(8).setMinWidth(200);
            
            
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
     
    public void GenerateArrearsSummary(String ORDER_BY) {
    String cndtn = "";
        try {
            
            if(rptstaff.isSelected()){
                cndtn=cndtn+" AND (IC_PAY_EMP_NO LIKE 'BRD1%' OR IC_PAY_EMP_NO LIKE 'BRD2%')";
            }
            if(rptretainer.isSelected()){
                cndtn=cndtn+" AND (IC_PAY_EMP_NO LIKE 'BRD5%' OR IC_PAY_EMP_NO LIKE 'BRD6%')";
            }
            if (!txtEmpCode.getText().equals("")) {
                cndtn = cndtn + " AND IC_PAY_EMP_NO='" + txtEmpCode.getText().trim() + "' ";
            }

            if (!txtIncCount.getText().equals("")) {
                cndtn = cndtn + " AND INC_COUNT=" + txtIncCount.getText().trim() + " ";
            }
            
            //String strSQL2 = "SELECT * FROM SDMLATTPAY.INCREMENT_ARREARS_CALC";
            /*String strSQL2 = "SELECT B.*,EMP_NAME,EMP_BASIC_RATE FROM\n"
                    + "(SELECT A.*,ROUND((DIFF_BASIC+DIFF_PPAY)*.12) PF,(ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+1 TOTAL_DID,TOTAL_DIFF-((ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+1+DIFF_PTAX) NET_PAY FROM \n"
                    + "(SELECT IC_PAY_EMP_NO,COALESCE(SUM(DIFF_BASIC),0) DIFF_BASIC,COALESCE(SUM(DIFF_HRA),0) DIFF_HRA,COALESCE(SUM(DIFF_PPAY),0) DIFF_PPAY,COALESCE(SUM(DIFF_ELEC),0) DIFF_ELEC,COALESCE(SUM(DIFF_MAGAZINE),0) DIFF_MAGAZINE,COALESCE(SUM(DIFF_OTHER),0) DIFF_OTHER,COALESCE(SUM(TOTAL_DIFF),0) TOTAL_DIFF,SUM(NEW_PTAX-OLD_PTAX) DIFF_PTAX FROM SDMLATTPAY.INCREMENT_ARREARS_CALC  GROUP BY IC_PAY_EMP_NO) AS A) B\n"
                    + "LEFT JOIN\n"
                    + "(SELECT PAY_EMP_NO,EMP_NAME,EMP_BASIC_RATE FROM SDMLATTPAY.ATTPAY_EMPMST) C \n"
                    + "ON PAY_EMP_NO=IC_PAY_EMP_NO";
            */
            String strSQL2 = "SELECT B.IC_PAY_EMP_NO,DIFF_BASIC,DIFF_HRA,DIFF_PPAY,DIFF_ELEC,DIFF_MAGAZINE,DIFF_OTHER,\n"
                    //+ "TOTAL_DIFF,ABS(DIFF_PTAX),DIFF_MEDICAL,PF,CASE WHEN NET_PAY<=5000 THEN 0 ELSE 1 END REV,CASE WHEN NET_PAY<=5000 THEN TOTAL_DID ELSE TOTAL_DID+1 END TOTAL_DID,CASE WHEN NET_PAY<=5000 THEN NET_PAY ELSE NET_PAY-1 END  NET_PAY,EMP_NAME,EMP_BASIC_RATE FROM \n"
                    + "TOTAL_DIFF,ABS(DIFF_PTAX),DIFF_MEDICAL,DIFF_CONVEY,DIFF_PERF,PF,TOTAL_DID,NET_PAY,EMP_NAME,EMP_BASIC_RATE,DEPARTMENT FROM \n"
                    + "(SELECT A.*,ROUND((DIFF_BASIC+DIFF_PPAY)*.12) PF,CASE WHEN (DIFF_BASIC+DIFF_PPAY)=0 THEN 0 ELSE (ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+DIFF_PTAX END TOTAL_DID,(TOTAL_DIFF)-((ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+DIFF_PTAX) NET_PAY FROM \n"
                    + "(SELECT IC_PAY_EMP_NO,COALESCE(SUM(DIFF_BASIC),0) DIFF_BASIC,COALESCE(SUM(DIFF_HRA),0) DIFF_HRA,COALESCE(SUM(DIFF_PPAY),0) DIFF_PPAY,COALESCE(SUM(DIFF_ELEC),0) DIFF_ELEC,COALESCE(SUM(DIFF_MAGAZINE),0) DIFF_MAGAZINE,COALESCE(SUM(DIFF_OTHER),0) DIFF_OTHER,COALESCE(SUM(TOTAL_DIFF),0) TOTAL_DIFF,SUM(NEW_PTAX-OLD_PTAX) DIFF_PTAX,"
                    + "COALESCE(SUM(DIFF_MEDICAL),0) DIFF_MEDICAL,COALESCE(SUM(DIFF_CONVEY),0) DIFF_CONVEY,COALESCE(SUM(DIFF_PERF),0) DIFF_PERF FROM SDMLATTPAY.INCREMENT_ARREARS_CALC WHERE INC_YEAR='"+txtincYear.getText().trim()+"'  "+cndtn+"  GROUP BY IC_PAY_EMP_NO) AS A) B\n"
                    + "LEFT JOIN\n"
                    + "(SELECT MST.PAY_EMP_NO,MST.EMP_NAME,EMP_BASIC_RATE,V.DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST  MST,SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW V WHERE V.PAY_EMP_NO=MST.PAY_EMP_NO) C \n"
                    + "ON PAY_EMP_NO=IC_PAY_EMP_NO";
            System.out.println("SQL "+strSQL2);
            
            ResultSet rs = data.getResult(strSQL2);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {
                 

                Object[] rowData = new Object[25];
                // rowData[0]=rs.getString("");
                rowData[0] = cnt++;                
                rowData[1] = rs.getString("IC_PAY_EMP_NO");
                rowData[2] = rs.getString("EMP_NAME");
                rowData[3] = rs.getString("DEPARTMENT");
                rowData[4] = rs.getString("EMP_BASIC_RATE");
                rowData[5] = rs.getString("DIFF_BASIC");//TAXABLE_VALUE
                rowData[6] = rs.getString("DIFF_HRA");
                rowData[7] = rs.getString("DIFF_PPAY");                
                rowData[8] = rs.getString("DIFF_ELEC");
                rowData[9] = rs.getString("DIFF_MAGAZINE");                
                rowData[10] = rs.getString("DIFF_OTHER");
                rowData[11] = rs.getString("DIFF_CONVEY");
                rowData[12] = rs.getString("DIFF_PERF");
                rowData[13] = rs.getString("DIFF_MEDICAL");                
                rowData[14] = rs.getString("TOTAL_DIFF");                
                rowData[15] = rs.getString("PF");
                
                rowData[16] = rs.getString("ABS(DIFF_PTAX)");                
                //rowData[14] = rs.getString("REV");
                rowData[17] = rs.getString("TOTAL_DID");                
                rowData[18] = rs.getString("NET_PAY");                
                //rowData[16] = String.format( "%.2f", rs.getDouble("DIFF_MAGAZINE"));
                
//                rowData[17] = rs.getString("OLD_GROSS");
//                rowData[18] = rs.getString("OLD_PTAX");                
//                rowData[19] = rs.getString("NEW_GROSS");
//                rowData[20] = rs.getString("NEW_PTAX");
                
                DataModelArrearsSummary.addRow(rowData);
                rs.next();
            }
            rs.close();
            //Object[] rowData2 = new Object[25];
            //DataModelB2BMIR.addRow(rowData2);
            
        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
        
    }
    
    public void GenerateArrearsSummaryRetainer(String ORDER_BY) {
    String cndtn = "";
        try {
            
            if(rptstaff.isSelected()){
                cndtn=cndtn+" AND (IC_PAY_EMP_NO LIKE 'BRD1%' OR IC_PAY_EMP_NO LIKE 'BRD2%')";
            }
            if(rptretainer.isSelected()){
                cndtn=cndtn+" AND (IC_PAY_EMP_NO LIKE 'BRD5%' OR IC_PAY_EMP_NO LIKE 'BRD6%')";
            }
            if (!txtEmpCode.getText().equals("")) {
                cndtn = cndtn + " AND IC_PAY_EMP_NO='" + txtEmpCode.getText().trim() + "' ";
            }

            if (!txtIncCount.getText().equals("")) {
                cndtn = cndtn + " AND INC_COUNT=" + txtIncCount.getText().trim() + " ";
            }
            //String strSQL2 = "SELECT * FROM SDMLATTPAY.INCREMENT_ARREARS_CALC";
            /*String strSQL2 = "SELECT B.*,EMP_NAME,EMP_BASIC_RATE FROM\n"
                    + "(SELECT A.*,ROUND((DIFF_BASIC+DIFF_PPAY)*.12) PF,(ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+1 TOTAL_DID,TOTAL_DIFF-((ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+1+DIFF_PTAX) NET_PAY FROM \n"
                    + "(SELECT IC_PAY_EMP_NO,COALESCE(SUM(DIFF_BASIC),0) DIFF_BASIC,COALESCE(SUM(DIFF_HRA),0) DIFF_HRA,COALESCE(SUM(DIFF_PPAY),0) DIFF_PPAY,COALESCE(SUM(DIFF_ELEC),0) DIFF_ELEC,COALESCE(SUM(DIFF_MAGAZINE),0) DIFF_MAGAZINE,COALESCE(SUM(DIFF_OTHER),0) DIFF_OTHER,COALESCE(SUM(TOTAL_DIFF),0) TOTAL_DIFF,SUM(NEW_PTAX-OLD_PTAX) DIFF_PTAX FROM SDMLATTPAY.INCREMENT_ARREARS_CALC  GROUP BY IC_PAY_EMP_NO) AS A) B\n"
                    + "LEFT JOIN\n"
                    + "(SELECT PAY_EMP_NO,EMP_NAME,EMP_BASIC_RATE FROM SDMLATTPAY.ATTPAY_EMPMST) C \n"
                    + "ON PAY_EMP_NO=IC_PAY_EMP_NO";
            */
            /*String strSQL2 = "SELECT B.IC_PAY_EMP_NO,DIFF_BASIC,DIFF_HRA,DIFF_PPAY,DIFF_ELEC,DIFF_MAGAZINE,DIFF_OTHER,DIFF_CONVEY,DIFF_PERF,\n"
                    //+ "TOTAL_DIFF,ABS(DIFF_PTAX),DIFF_MEDICAL,PF,CASE WHEN NET_PAY<=5000 THEN 0 ELSE 1 END REV,CASE WHEN NET_PAY<=5000 THEN TOTAL_DID ELSE TOTAL_DID+1 END TOTAL_DID,CASE WHEN NET_PAY<=5000 THEN NET_PAY ELSE NET_PAY-1 END  NET_PAY,EMP_NAME,EMP_BASIC_RATE FROM \n"
                    + "TOTAL_DIFF,ABS(DIFF_PTAX),DIFF_MEDICAL,PF,TOTAL_DID,NET_PAY,EMP_NAME,RETAINER_FEE,(RETAINER_FEE-INC_BASIC) NEW_RETAINER_FEE,DEPARTMENT FROM \n"
                    //+ "(SELECT A.*,ROUND((DIFF_BASIC+DIFF_PPAY)*.12) PF,CASE WHEN (DIFF_BASIC+DIFF_PPAY)=0 THEN 0 ELSE (ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+DIFF_PTAX END TOTAL_DID,(TOTAL_DIFF+DIFF_MEDICAL)-((ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+DIFF_PTAX) NET_PAY FROM \n"
                    + "(SELECT A.*,ROUND((DIFF_BASIC+DIFF_PPAY)*.12) PF,CASE WHEN (DIFF_BASIC+DIFF_PPAY)=0 THEN 0 ELSE (ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+DIFF_PTAX END TOTAL_DID,(TOTAL_DIFF)-((ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+DIFF_PTAX) NET_PAY FROM \n"
                    + "(SELECT IC_PAY_EMP_NO,INC_BASIC,COALESCE(SUM(DIFF_BASIC),0) DIFF_BASIC,COALESCE(SUM(DIFF_HRA),0) DIFF_HRA,COALESCE(SUM(DIFF_PPAY),0) DIFF_PPAY,COALESCE(SUM(DIFF_ELEC),0) DIFF_ELEC,COALESCE(SUM(DIFF_MAGAZINE),0) DIFF_MAGAZINE,COALESCE(SUM(DIFF_OTHER),0) DIFF_OTHER,"
                    + "COALESCE(SUM(TOTAL_DIFF),0) TOTAL_DIFF,SUM(NEW_PTAX-OLD_PTAX) DIFF_PTAX,COALESCE(SUM(DIFF_MEDICAL),0) DIFF_MEDICAL,COALESCE(SUM(DIFF_CONVEY),0) DIFF_CONVEY,COALESCE(SUM(DIFF_PERF),0) DIFF_PERF FROM SDMLATTPAY.INCREMENT_ARREARS_CALC WHERE INC_YEAR='"+txtincYear.getText().trim()+"'  "+cndtn+"  GROUP BY IC_PAY_EMP_NO) AS A) B\n"
                    + "LEFT JOIN\n"
                    + "(SELECT PAY_EMPID,EMP_NAME,RETAINER_FEE,DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC) C \n"
                    + "ON PAY_EMPID=IC_PAY_EMP_NO";
            */
             String strSQL2 = "SELECT B.IC_PAY_EMP_NO,DIFF_BASIC,DIFF_HRA,DIFF_PPAY,DIFF_ELEC,DIFF_MAGAZINE,DIFF_OTHER,DIFF_CONVEY,DIFF_PERF,\n"              
                    + "TOTAL_DIFF,ABS(DIFF_PTAX),DIFF_MEDICAL,PF,TOTAL_DID,NET_PAY,EMP_NAME,RETAINER_FEE,(RETAINER_FEE-INC_BASIC) NEW_RETAINER_FEE,DEPARTMENT,TDS FROM \n"                    
                    + "(SELECT A.*,ROUND((DIFF_BASIC+DIFF_PPAY)*.12) PF,CASE WHEN (DIFF_BASIC+DIFF_PPAY)=0 THEN 0 ELSE (ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+DIFF_PTAX END TOTAL_DID,ROUND((TOTAL_DIFF-(TOTAL_DIFF*.1)),2) NET_PAY,ROUND(TOTAL_DIFF*.1,2) TDS FROM \n"
                    + "(SELECT IC_PAY_EMP_NO,INC_BASIC,COALESCE(SUM(DIFF_BASIC),0) DIFF_BASIC,COALESCE(SUM(DIFF_HRA),0) DIFF_HRA,COALESCE(SUM(DIFF_PPAY),0) DIFF_PPAY,COALESCE(SUM(DIFF_ELEC),0) DIFF_ELEC,COALESCE(SUM(DIFF_MAGAZINE),0) DIFF_MAGAZINE,COALESCE(SUM(DIFF_OTHER),0) DIFF_OTHER,"
                    + "COALESCE(SUM(TOTAL_DIFF),0) TOTAL_DIFF,SUM(NEW_PTAX-OLD_PTAX) DIFF_PTAX,COALESCE(SUM(DIFF_MEDICAL),0) DIFF_MEDICAL,COALESCE(SUM(DIFF_CONVEY),0) DIFF_CONVEY,COALESCE(SUM(DIFF_PERF),0) DIFF_PERF FROM SDMLATTPAY.INCREMENT_ARREARS_CALC WHERE INC_YEAR='"+txtincYear.getText().trim()+"'  "+cndtn+"  GROUP BY IC_PAY_EMP_NO) AS A) B\n"
                    + "LEFT JOIN\n"
                    + "(SELECT PAY_EMPID,EMP_NAME,RETAINER_FEE,DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC) C \n"
                    + "ON PAY_EMPID=IC_PAY_EMP_NO";
            System.out.println("SQL "+strSQL2);
            
            ResultSet rs = data.getResult(strSQL2);
            int cnt = 1;
            String pName = "";
            while (!rs .isAfterLast()) {
                 

                Object[] rowData = new Object[25];
                // rowData[0]=rs.getString("");
                rowData[0] = cnt++;                
                rowData[1] = rs.getString("IC_PAY_EMP_NO");
                rowData[2] = rs.getString("EMP_NAME"); 
                rowData[3] = rs.getString("DEPARTMENT");                
                rowData[4] = rs.getString("NEW_RETAINER_FEE");
                rowData[5] = rs.getString("DIFF_BASIC");//TAXABLE_VALUE
                rowData[6] = rs.getString("TDS");//TAXABLE_VALUE
                rowData[7] = rs.getString("NET_PAY");//TAXABLE_VALUE
                rowData[8] = rs.getString("RETAINER_FEE");
                /*rowData[6] = rs.getString("DIFF_PPAY");                
                rowData[7] = rs.getString("DIFF_ELEC");
                rowData[8] = rs.getString("DIFF_MAGAZINE");                
                rowData[9] = rs.getString("DIFF_OTHER");
                rowData[10] = rs.getString("TOTAL_DIFF");                
                rowData[11] = rs.getString("PF");
                rowData[12] = rs.getString("DIFF_MEDICAL");                
                rowData[13] = rs.getString("ABS(DIFF_PTAX)");                
                //rowData[14] = rs.getString("REV");
                rowData[14] = rs.getString("TOTAL_DID");                
                rowData[15] = rs.getString("NET_PAY");    */            
                //rowData[16] = String.format( "%.2f", rs.getDouble("DIFF_MAGAZINE"));
                
//                rowData[17] = rs.getString("OLD_GROSS");
//                rowData[18] = rs.getString("OLD_PTAX");                
//                rowData[19] = rs.getString("NEW_GROSS");
//                rowData[20] = rs.getString("NEW_PTAX");
                
                DataModelArrearsSummary.addRow(rowData);
                rs.next();
            }
            rs.close();
            //Object[] rowData2 = new Object[25];
            //DataModelB2BMIR.addRow(rowData2);
            
        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
        
    }
    
    public void GenerateArrearsDetail(String ORDER_BY) {
        String cndtn = "";
        try {
            
            if(rptstaff.isSelected()){
                cndtn=cndtn+" AND (IC_PAY_EMP_NO LIKE 'BRD1%' OR IC_PAY_EMP_NO LIKE 'BRD2%')";
            }
            if(rptretainer.isSelected()){
                cndtn=cndtn+" AND (IC_PAY_EMP_NO LIKE 'BRD5%' OR IC_PAY_EMP_NO LIKE 'BRD6%')";
            }
            
            if (!txtEmpCode.getText().equals("")) {
                cndtn = cndtn + " AND IC_PAY_EMP_NO='" + txtEmpCode.getText().trim() + "' ";
            }

            if (!txtIncCount.getText().equals("")) {
                cndtn = cndtn + " AND INC_COUNT=" + txtIncCount.getText().trim() + " ";
            }
            
            
            //String strSQL2 = "SELECT * FROM SDMLATTPAY.INCREMENT_ARREARS_CALC";
            String strSQL1="SELECT IC_PAY_EMP_NO,COUNT(IC_PAY_EMP_NO)  RECORDS,"
                    + "SUM(PRESENT_DAYS) WORKING_DAYS,SUM(DAY_OF_MONTH) TOTAL_DAYS,"
                    + "COALESCE(SUM(DIFF_BASIC),0) DIFF_BASIC,COALESCE(SUM(DIFF_HRA),0) DIFF_HRA,"
                    + "COALESCE(SUM(DIFF_PPAY),0) DIFF_PPAY,COALESCE(SUM(DIFF_ELEC),0) DIFF_ELEC,"
                    + "COALESCE(SUM(DIFF_MAGAZINE),0) DIFF_MAGAZINE,"
                    + "COALESCE(SUM(DIFF_PERF),0) DIFF_PERF,"
                    + "COALESCE(SUM(DIFF_CONVEY),0) DIFF_CONVEY,"
                    + "COALESCE(SUM(TOTAL_DIFF),0) TOTAL_DIFF,COALESCE(SUM(OLD_PTAX),0) TOTAL_OLDPTAX,"
                    + "COALESCE(SUM(NEW_PTAX),0) TOTAL_NEWPTAX,COALESCE(SUM(DIFF_MEDICAL),0) DIFF_MEDICAL FROM SDMLATTPAY.INCREMENT_ARREARS_CALC WHERE INC_YEAR='"+txtincYear.getText().trim()+"' "+cndtn+" GROUP BY IC_PAY_EMP_NO";
            ResultSet rsMain=data.getResult(strSQL1);
            ResultSet rs=null;
            int srNo=0;
            while (!rsMain.isAfterLast()) {
                srNo++;
                String strSQL2 = "SELECT A.*,DPT_CODE,EMP_NAME FROM\n"
                    + "(SELECT * FROM SDMLATTPAY.INCREMENT_ARREARS_CALC WHERE INC_YEAR='"+txtincYear.getText().trim()+"' AND IC_PAY_EMP_NO='"+rsMain.getString("IC_PAY_EMP_NO")+"' "+cndtn+" ) A\n"
                    + "LEFT JOIN \n"
                    + "(SELECT PAY_EMP_NO,DPT_CODE,EMP_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW) B\n"
                    + "ON IC_PAY_EMP_NO=PAY_EMP_NO ";
                System.out.println("SQL "+strSQL2);
                rs = data.getResult(strSQL2);
            int cnt = 0;
            String pName = "";
            while (!rs.isAfterLast()) {             

                Object[] rowData = new Object[30];
                // rowData[0]=rs.getString("");
                cnt++;
                if (cnt == 1) {
                    rowData[0] = srNo;
                } else {
                    rowData[0] = "";
                }
                rowData[1] = rs.getString("DPT_CODE");
                rowData[2] = rs.getString("IC_PAY_EMP_NO");                
                rowData[3] = rs.getString("EMP_NAME");
                rowData[4] = String.format("%02d", rs.getInt("IC_MONTH"))+rs.getString("IC_YEAR");//TAXABLE_VALUE
                rowData[5] = rs.getString("PRESENT_DAYS");
                rowData[6] = String.format( "%.2f", rs.getDouble("INC_BASIC"));                
                rowData[7] = String.format( "%.2f", rs.getDouble("DIFF_BASIC"));
                rowData[8] = String.format( "%.2f", rs.getDouble("INC_HRA"));                
                rowData[9] = String.format( "%.2f", rs.getDouble("DIFF_HRA"));
                rowData[10] = String.format( "%.2f", rs.getDouble("INC_PPAY"));                
                rowData[11] = String.format( "%.2f", rs.getDouble("DIFF_PPAY"));
                rowData[12] = String.format( "%.2f", rs.getDouble("INC_ELEC"));                
                rowData[13] = String.format( "%.2f", rs.getDouble("DIFF_ELEC"));
                rowData[14] = String.format( "%.2f", rs.getDouble("INC_MAGAZINE"));                
                rowData[15] = String.format( "%.2f", rs.getDouble("DIFF_MAGAZINE"));
                rowData[16] = String.format( "%.2f", rs.getDouble("INC_PERF"));                
                rowData[17] = String.format( "%.2f", rs.getDouble("DIFF_PERF"));
                rowData[18] = String.format( "%.2f", rs.getDouble("INC_CONVEY"));                
                rowData[19] = String.format( "%.2f", rs.getDouble("DIFF_CONVEY"));
                rowData[20] = rs.getString("INC_MEDICAL");
                rowData[21] = rs.getString("DIFF_MEDICAL");
                rowData[22] = rs.getString("TOTAL_DIFF");                
                rowData[23] = rs.getString("OLD_GROSS");
                rowData[24] = rs.getString("OLD_PTAX");                
                rowData[25] = rs.getString("NEW_GROSS");
                rowData[26] = rs.getString("NEW_PTAX");
                
                
                DataModelArrearsDetail.addRow(rowData);
                rs.next();
            }
               Object[] rowData1 = new Object[30];
                rowData1[0] = "TOTAL";                
                rowData1[1] = "RECORDS";                                
                rowData1[2] = rsMain.getString("RECORDS");                
                rowData1[3] = "DAYS  "+rsMain.getString("TOTAL_DAYS");
                rowData1[4] = "WORK DAYS";
                rowData1[5] = rsMain.getString("WORKING_DAYS");//TAXABLE_VALUE
                
                rowData1[6] = "";
                
//                rowData[6] = String.format( "%.2f", rs.getDouble("INC_BASIC"));                
                rowData1[7] = String.format( "%.2f", rsMain.getDouble("DIFF_BASIC"));
//                rowData[8] = String.format( "%.2f", rs.getDouble("INC_HRA"));                
                rowData1[9] = String.format( "%.2f", rsMain.getDouble("DIFF_HRA"));
//                rowData[10] = String.format( "%.2f", rs.getDouble("INC_PPAY"));                
                rowData1[11] = String.format( "%.2f", rsMain.getDouble("DIFF_PPAY"));
//                rowData[12] = String.format( "%.2f", rs.getDouble("INC_ELEC"));                
                rowData1[13] = String.format( "%.2f", rsMain.getDouble("DIFF_ELEC"));
//                rowData[14] = String.format( "%.2f", rs.getDouble("INC_MAGAZINE"));                
                rowData1[15] = String.format( "%.2f", rsMain.getDouble("DIFF_MAGAZINE"));
                rowData1[17] = String.format( "%.2f", rsMain.getDouble("DIFF_PERF"));
                rowData1[19] = String.format( "%.2f", rsMain.getDouble("DIFF_CONVEY"));
                rowData1[21] = String.format( "%.2f", rsMain.getDouble("DIFF_MEDICAL"));
                rowData1[22] = rsMain.getString("TOTAL_DIFF");                
//                rowData[17] = rs.getString("OLD_GROSS");
                rowData1[24] = rsMain.getString("TOTAL_OLDPTAX");                
//                rowData[19] = rs.getString("NEW_GROSS");
                rowData1[26] = rsMain.getString("TOTAL_NEWPTAX");
                
                DataModelArrearsDetail.addRow(rowData1);
                rsMain.next();
            }
            
            rs.close();
            //Object[] rowData2 = new Object[25];
            //DataModelB2BMIR.addRow(rowData2);
            
        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
                
//        String sql;
//        sql="SELECT SUM(AMOUNT) FROM (SELECT SUB_ACCOUNT_CODE,SUPP_NAME,PAYMENT_DAYS,AMOUNT FROM\n"
//                    + "(SELECT D.SUB_ACCOUNT_CODE,SUM(AMOUNT) AS AMOUNT FROM FINANCE.D_FIN_VOUCHER_HEADER H, FINANCE.D_FIN_VOUCHER_DETAIL D WHERE H.VOUCHER_NO=D.VOUCHER_NO AND H.VOUCHER_DATE>='2019-04-01' AND H.VOUCHER_DATE<='2020-03-31' AND H.APPROVED=1 AND H.CANCELLED=0 AND BOOK_CODE IN (40,41,42,43) AND EFFECT='C' AND MAIN_ACCOUNT_CODE IN ('125019','125033') " + cndtn + " GROUP BY SUB_ACCOUNT_CODE) AS A\n"
//                    + "LEFT JOIN\n"
//                    + "(SELECT SUPPLIER_CODE,SUPP_NAME,PAYMENT_DAYS FROM DINESHMILLS.D_COM_SUPP_MASTER) AS B\n"
//                    + "ON A.SUB_ACCOUNT_CODE=B.SUPPLIER_CODE ) AS X";
//        String invAmt = data.getStringValueFromDB(sql);
//        txtTotalAmt.setText(invAmt);
        
        
        
    }
    
    public void GenerateArrearsDetailRetainer(String ORDER_BY) {
        String cndtn = "";
        try {
            
            if(rptstaff.isSelected()){
                cndtn=cndtn+" AND (IC_PAY_EMP_NO LIKE 'BRD1%' OR IC_PAY_EMP_NO LIKE 'BRD2%')";
            }
            if(rptretainer.isSelected()){
                cndtn=cndtn+" AND (IC_PAY_EMP_NO LIKE 'BRD5%' OR IC_PAY_EMP_NO LIKE 'BRD6%')";
            }
            if (!txtEmpCode.getText().equals("")) {
                cndtn = cndtn + " AND IC_PAY_EMP_NO='" + txtEmpCode.getText().trim() + "' ";
            }

            if (!txtIncCount.getText().equals("")) {
                cndtn = cndtn + " AND INC_COUNT=" + txtIncCount.getText().trim() + " ";
            }
            
            //String strSQL2 = "SELECT * FROM SDMLATTPAY.INCREMENT_ARREARS_CALC";
            String strSQL1="SELECT IC_PAY_EMP_NO,COUNT(IC_PAY_EMP_NO)  RECORDS,"
                    + "SUM(PRESENT_DAYS) WORKING_DAYS,SUM(DAY_OF_MONTH) TOTAL_DAYS,"
                    + "COALESCE(SUM(DIFF_BASIC),0) DIFF_BASIC,COALESCE(SUM(DIFF_HRA),0) DIFF_HRA,"
                    + "COALESCE(SUM(DIFF_PPAY),0) DIFF_PPAY,COALESCE(SUM(DIFF_ELEC),0) DIFF_ELEC,"
                    + "COALESCE(SUM(DIFF_MAGAZINE),0) DIFF_MAGAZINE,"
                    + "COALESCE(SUM(TOTAL_DIFF),0) TOTAL_DIFF,COALESCE(SUM(OLD_PTAX),0) TOTAL_OLDPTAX,"
                    + "COALESCE(SUM(NEW_PTAX),0) TOTAL_NEWPTAX,COALESCE(SUM(DIFF_MEDICAL),0) DIFF_MEDICAL FROM SDMLATTPAY.INCREMENT_ARREARS_CALC WHERE INC_YEAR='"+txtincYear.getText().trim()+"' "+cndtn+" GROUP BY IC_PAY_EMP_NO";
            ResultSet rsMain=data.getResult(strSQL1);
            ResultSet rs=null;
            int srNo=0;
            while (!rsMain.isAfterLast()) {
                srNo++;
                String strSQL2 = "SELECT A.*,DPT_CODE,EMP_NAME FROM\n"
                    + "(SELECT * FROM SDMLATTPAY.INCREMENT_ARREARS_CALC WHERE INC_YEAR='"+txtincYear.getText().trim()+"' AND IC_PAY_EMP_NO='"+rsMain.getString("IC_PAY_EMP_NO")+"') A\n"
                    + "LEFT JOIN \n"
                    + "(SELECT PAY_EMP_NO,DPT_CODE,EMP_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW) B\n"
                    + "ON IC_PAY_EMP_NO=PAY_EMP_NO ";
                System.out.println("SQL "+strSQL2);
                rs = data.getResult(strSQL2);
            int cnt = 0;
            String pName = "";
            while (!rs.isAfterLast()) {             

                Object[] rowData = new Object[25];
                // rowData[0]=rs.getString("");
                cnt++;
                if (cnt == 1) {
                    rowData[0] = srNo;
                } else {
                    rowData[0] = "";
                }
                rowData[1] = rs.getString("DPT_CODE");
                rowData[2] = rs.getString("IC_PAY_EMP_NO");                
                rowData[3] = rs.getString("EMP_NAME");
                rowData[4] = String.format("%02d", rs.getInt("IC_MONTH"))+rs.getString("IC_YEAR");//TAXABLE_VALUE
                rowData[5] = rs.getString("PRESENT_DAYS");
                rowData[6] = String.format( "%.2f", rs.getDouble("INC_BASIC"));                
                rowData[7] = String.format( "%.2f", rs.getDouble("DIFF_BASIC"));
                
                DataModelArrearsDetail.addRow(rowData);
                rs.next();
            }
               Object[] rowData1 = new Object[25];
                rowData1[0] = "TOTAL";                
                rowData1[1] = "RECORDS";                                
                rowData1[2] = rsMain.getString("RECORDS");                
                rowData1[3] = "DAYS  "+rsMain.getString("TOTAL_DAYS");
                rowData1[4] = "WORK DAYS";
                rowData1[5] = rsMain.getString("WORKING_DAYS");//TAXABLE_VALUE
                
                rowData1[6] = "";
                
//                rowData[6] = String.format( "%.2f", rs.getDouble("INC_BASIC"));                
                rowData1[7] = String.format( "%.2f", rsMain.getDouble("DIFF_BASIC"));
//                rowData[8] = String.format( "%.2f", rs.getDouble("INC_HRA"));                
                //rowData1[9] = String.format( "%.2f", rsMain.getDouble("DIFF_HRA"));
//                rowData[10] = String.format( "%.2f", rs.getDouble("INC_PPAY"));                
                //rowData1[11] = String.format( "%.2f", rsMain.getDouble("DIFF_PPAY"));
//                rowData[12] = String.format( "%.2f", rs.getDouble("INC_ELEC"));                
                //rowData1[13] = String.format( "%.2f", rsMain.getDouble("DIFF_ELEC"));
//                rowData[14] = String.format( "%.2f", rs.getDouble("INC_MAGAZINE"));                
                //rowData1[15] = String.format( "%.2f", rsMain.getDouble("DIFF_MAGAZINE"));
                //rowData1[16] = rsMain.getString("TOTAL_DIFF");                
//                rowData[17] = rs.getString("OLD_GROSS");
                //rowData1[18] = rsMain.getString("TOTAL_OLDPTAX");                
//                rowData[19] = rs.getString("NEW_GROSS");
                //rowData1[20] = rsMain.getString("TOTAL_NEWPTAX");
                //rowData1[22] = String.format( "%.2f", rsMain.getDouble("DIFF_MEDICAL"));
                DataModelArrearsDetail.addRow(rowData1);
                rsMain.next();
            }
            
            rs.close();
            //Object[] rowData2 = new Object[25];
            //DataModelB2BMIR.addRow(rowData2);
            
        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
                
//        String sql;
//        sql="SELECT SUM(AMOUNT) FROM (SELECT SUB_ACCOUNT_CODE,SUPP_NAME,PAYMENT_DAYS,AMOUNT FROM\n"
//                    + "(SELECT D.SUB_ACCOUNT_CODE,SUM(AMOUNT) AS AMOUNT FROM FINANCE.D_FIN_VOUCHER_HEADER H, FINANCE.D_FIN_VOUCHER_DETAIL D WHERE H.VOUCHER_NO=D.VOUCHER_NO AND H.VOUCHER_DATE>='2019-04-01' AND H.VOUCHER_DATE<='2020-03-31' AND H.APPROVED=1 AND H.CANCELLED=0 AND BOOK_CODE IN (40,41,42,43) AND EFFECT='C' AND MAIN_ACCOUNT_CODE IN ('125019','125033') " + cndtn + " GROUP BY SUB_ACCOUNT_CODE) AS A\n"
//                    + "LEFT JOIN\n"
//                    + "(SELECT SUPPLIER_CODE,SUPP_NAME,PAYMENT_DAYS FROM DINESHMILLS.D_COM_SUPP_MASTER) AS B\n"
//                    + "ON A.SUB_ACCOUNT_CODE=B.SUPPLIER_CODE ) AS X";
//        String invAmt = data.getStringValueFromDB(sql);
//        txtTotalAmt.setText(invAmt);
        
        
        
    }
    
  private void PostDetailReport() {
        
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        String cndtn ="";

        try {
            if(rptstaff.isSelected()){
                cndtn=cndtn+" AND (IC_PAY_EMP_NO LIKE 'BRD1%' OR IC_PAY_EMP_NO LIKE 'BRD2%')";
            }
            if(rptretainer.isSelected()){
                cndtn=cndtn+" AND (IC_PAY_EMP_NO LIKE 'BRD5%' OR IC_PAY_EMP_NO LIKE 'BRD6%')";
            }
            
            if (!txtEmpCode.getText().equals("")) {
                cndtn = cndtn + " AND IC_PAY_EMP_NO='" + txtEmpCode.getText().trim() + "' ";
            }

            if (!txtIncCount.getText().equals("")) {
                cndtn = cndtn + " AND INC_COUNT=" + txtIncCount.getText().trim() + " ";
            }
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();

//            String fdt = EITLERPGLOBAL.getCurrentDate();
//            String tdt = EITLERPGLOBAL.getCurrentDate();
//            String FromDate=EITLERPGLOBAL.formatDateDB(fdt);
//            String ToDate=EITLERPGLOBAL.formatDateDB(tdt);
//            int lotNo = data.getIntValueFromDB("SELECT MAX(LOT_NO) FROM PRODUCTION.FELT_SALES_INV_PROCESS_REPORT_DATA WHERE SUBSTRING(PROCESSING_TIME,1,10)='"+EITLERPGLOBAL.getCurrentDateDB()+"' ");

//            parameterMap.put("RUNDATE", EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime());
//            parameterMap.put("FROM_DATE", fdt);
//            parameterMap.put("TO_DATE", tdt);

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            String strSQL = "";
            /*strSQL += "SELECT X.*,Y.* FROM\n"
                    + "(SELECT @a:=@a+1 SR_NO ,IC_PAY_EMP_NO,COUNT(IC_PAY_EMP_NO) RECORDS,SUM(PRESENT_DAYS) WORKING_DAYS,SUM(DAY_OF_MONTH) TOTAL_DAYS,COALESCE(SUM(DIFF_BASIC),0) TOT_DIFF_BASIC,COALESCE(SUM(DIFF_HRA),0) TOT_DIFF_HRA,COALESCE(SUM(DIFF_PPAY),0) TOT_DIFF_PPAY,COALESCE(SUM(DIFF_ELEC),0) TOT_DIFF_ELEC,COALESCE(SUM(DIFF_MAGAZINE),0) TOT_DIFF_MAGAZINE,COALESCE(SUM(TOTAL_DIFF),0) TOT_TOTAL_DIFF,COALESCE(SUM(OLD_PTAX),0) TOTAL_OLDPTAX,COALESCE(SUM(NEW_PTAX),0) TOTAL_NEWPTAX FROM SDMLATTPAY.INCREMENT_ARREARS_CALC,\n"
                    + "        (SELECT @a:= 0) AS a WHERE INC_YEAR='"+txtincYear.getText().trim()+"' "+cndtn+" GROUP BY IC_PAY_EMP_NO) X\n"
                    + "LEFT JOIN\n"
                    + "(SELECT A.*,DPT_CODE,EMP_NAME FROM\n"
                    + "(SELECT IC_PAY_EMP_NO,PRESENT_DAYS,CONCAT(LPAD(IC_MONTH,2,0),IC_YEAR) IC_MONTHYEAR,COALESCE(INC_BASIC,0) INC_BASIC,COALESCE(DIFF_BASIC,0) DIFF_BASIC,COALESCE(INC_HRA,0) INC_HRA,COALESCE(DIFF_HRA,0) DIFF_HRA,COALESCE(INC_PPAY,0) INC_PPAY,COALESCE(DIFF_PPAY,0) DIFF_PPAY,COALESCE(INC_ELEC,0) INC_ELEC,COALESCE(DIFF_ELEC,0) DIFF_ELEC,COALESCE(INC_MAGAZINE,0) INC_MAGAZINE,COALESCE(DIFF_MAGAZINE,0) DIFF_MAGAZINE,COALESCE(TOTAL_DIFF,0) TOTAL_DIFF,COALESCE(OLD_GROSS,0) OLD_GROSS,COALESCE(NEW_GROSS,0) NEW_GROSS,COALESCE(OLD_PTAX,0) OLD_PTAX,COALESCE(NEW_PTAX,0) NEW_PTAX FROM SDMLATTPAY.INCREMENT_ARREARS_CALC WHERE INC_YEAR='"+txtincYear.getText().trim()+"' "+cndtn+") A\n"
                    + "LEFT JOIN \n"
                    + "(SELECT PAY_EMP_NO,DPT_CODE,EMP_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW) B\n"
                    + "ON IC_PAY_EMP_NO=PAY_EMP_NO ) Y\n"
                    + "ON X.IC_PAY_EMP_NO=Y.IC_PAY_EMP_NO";*/
            strSQL += "SELECT X.*,Y.* FROM\n"
                    //+ "(SELECT @a:=@a+1 SR_NO ,IC_PAY_EMP_NO,COUNT(IC_PAY_EMP_NO) RECORDS,SUM(PRESENT_DAYS) WORKING_DAYS,SUM(DAY_OF_MONTH) TOTAL_DAYS,COALESCE(SUM(DIFF_BASIC),0) TOT_DIFF_BASIC,COALESCE(SUM(DIFF_HRA),0) TOT_DIFF_HRA,COALESCE(SUM(DIFF_PPAY),0) TOT_DIFF_PPAY,COALESCE(SUM(DIFF_ELEC),0) TOT_DIFF_ELEC,COALESCE(SUM(DIFF_MAGAZINE),0) TOT_DIFF_MAGAZINE,COALESCE(SUM(TOTAL_DIFF+DIFF_MEDICAL),0) TOT_TOTAL_DIFF,COALESCE(SUM(OLD_PTAX),0) TOTAL_OLDPTAX,COALESCE(SUM(NEW_PTAX),0) TOTAL_NEWPTAX,COALESCE(SUM(DIFF_MEDICAL),0) TOT_DIFF_MEDICAL FROM SDMLATTPAY.INCREMENT_ARREARS_CALC,\n"
                    + "(SELECT @a:=@a+1 SR_NO ,IC_PAY_EMP_NO,COUNT(IC_PAY_EMP_NO) RECORDS,SUM(PRESENT_DAYS) WORKING_DAYS,SUM(DAY_OF_MONTH) TOTAL_DAYS,COALESCE(SUM(DIFF_BASIC),0) TOT_DIFF_BASIC,COALESCE(SUM(DIFF_HRA),0) TOT_DIFF_HRA,COALESCE(SUM(DIFF_PPAY),0) TOT_DIFF_PPAY,COALESCE(SUM(DIFF_ELEC),0) TOT_DIFF_ELEC,COALESCE(SUM(DIFF_MAGAZINE),0) TOT_DIFF_MAGAZINE,COALESCE(SUM(TOTAL_DIFF),0) TOT_TOTAL_DIFF,COALESCE(SUM(OLD_PTAX),0) TOTAL_OLDPTAX,COALESCE(SUM(NEW_PTAX),0) TOTAL_NEWPTAX,COALESCE(SUM(DIFF_MEDICAL),0) TOT_DIFF_MEDICAL,COALESCE(SUM(DIFF_CONVEY),0) TOT_DIFF_CONVEY,COALESCE(SUM(DIFF_PERF),0) TOT_DIFF_PERF FROM SDMLATTPAY.INCREMENT_ARREARS_CALC,\n"
                    + "        (SELECT @a:= 0) AS a WHERE INC_YEAR='"+txtincYear.getText().trim()+"' "+cndtn+" GROUP BY IC_PAY_EMP_NO) X\n"
                    + "LEFT JOIN\n"
                    + "(SELECT A.*,DPT_CODE,EMP_NAME FROM\n"
                    + "(SELECT INC_YEAR,IC_YEAR,IC_MONTH,IC_PAY_EMP_NO,COALESCE(PRESENT_DAYS,0) PRESENT_DAYS,CONCAT(LPAD(IC_MONTH,2,0),IC_YEAR) IC_MONTHYEAR,COALESCE(INC_BASIC,0) INC_BASIC,COALESCE(DIFF_BASIC,0) DIFF_BASIC,COALESCE(INC_HRA,0) INC_HRA,COALESCE(DIFF_HRA,0) DIFF_HRA,COALESCE(INC_PPAY,0) INC_PPAY,COALESCE(DIFF_PPAY,0) DIFF_PPAY,COALESCE(INC_ELEC,0) INC_ELEC,COALESCE(DIFF_ELEC,0) DIFF_ELEC,COALESCE(INC_MAGAZINE,0) INC_MAGAZINE,COALESCE(DIFF_MAGAZINE,0) DIFF_MAGAZINE,(COALESCE(TOTAL_DIFF,0)) TOTAL_DIFF,COALESCE(OLD_GROSS,0) OLD_GROSS,COALESCE(NEW_GROSS,0) NEW_GROSS,COALESCE(OLD_PTAX,0) OLD_PTAX,COALESCE(NEW_PTAX,0) NEW_PTAX,COALESCE(INC_MEDICAL,0) INC_MEDICAL,COALESCE(DIFF_MEDICAL,0) DIFF_MEDICAL,COALESCE(INC_CONVEY,0) INC_CONVEY,COALESCE(DIFF_CONVEY,0) DIFF_CONVEY,COALESCE(INC_PERF,0) INC_PERF,COALESCE(DIFF_PERF,0) DIFF_PERF FROM SDMLATTPAY.INCREMENT_ARREARS_CALC WHERE INC_YEAR='"+txtincYear.getText().trim()+"' "+cndtn+") A\n"
                    + "LEFT JOIN \n"
                    + "(SELECT PAY_EMP_NO,DPT_CODE,EMP_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW) B\n"
                    + "ON IC_PAY_EMP_NO=PAY_EMP_NO ) Y\n"
                    + "ON X.IC_PAY_EMP_NO=Y.IC_PAY_EMP_NO ORDER BY Y.IC_PAY_EMP_NO,Y.IC_YEAR,Y.IC_MONTH";


            System.out.println("SQL QUERY : " + strSQL);
            //rpt.setReportName("/EITLERP/FeltSales/FeltInvReport/FeltPostInvReason.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            //rpt.setReportName("/SDMLATTPAY/Arrears/ArrearsDifference.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/Arrears/ArrearsDifference_20212022.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/Arrears/ArrearsDifference_20212022_1.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                st.close();
                Conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }  
  
  private void PostDetailReportRetainer() {
        
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        String cndtn ="";

        try {
            if(rptstaff.isSelected()){
                cndtn=cndtn+" AND (IC_PAY_EMP_NO LIKE 'BRD1%' OR IC_PAY_EMP_NO LIKE 'BRD2%')";
            }
            if(rptretainer.isSelected()){
                cndtn=cndtn+" AND (IC_PAY_EMP_NO LIKE 'BRD5%' OR IC_PAY_EMP_NO LIKE 'BRD6%')";
            }
            
            if (!txtEmpCode.getText().equals("")) {
                cndtn = cndtn + " AND IC_PAY_EMP_NO='" + txtEmpCode.getText().trim() + "' ";
            }

            if (!txtIncCount.getText().equals("")) {
                cndtn = cndtn + " AND INC_COUNT=" + txtIncCount.getText().trim() + " ";
            }
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();

//            String fdt = EITLERPGLOBAL.getCurrentDate();
//            String tdt = EITLERPGLOBAL.getCurrentDate();
//            String FromDate=EITLERPGLOBAL.formatDateDB(fdt);
//            String ToDate=EITLERPGLOBAL.formatDateDB(tdt);
//            int lotNo = data.getIntValueFromDB("SELECT MAX(LOT_NO) FROM PRODUCTION.FELT_SALES_INV_PROCESS_REPORT_DATA WHERE SUBSTRING(PROCESSING_TIME,1,10)='"+EITLERPGLOBAL.getCurrentDateDB()+"' ");

//            parameterMap.put("RUNDATE", EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime());
//            parameterMap.put("FROM_DATE", fdt);
//            parameterMap.put("TO_DATE", tdt);

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            String strSQL = "";
            /*strSQL += "SELECT X.*,Y.* FROM\n"
                    + "(SELECT @a:=@a+1 SR_NO ,IC_PAY_EMP_NO,COUNT(IC_PAY_EMP_NO) RECORDS,SUM(PRESENT_DAYS) WORKING_DAYS,SUM(DAY_OF_MONTH) TOTAL_DAYS,COALESCE(SUM(DIFF_BASIC),0) TOT_DIFF_BASIC,COALESCE(SUM(DIFF_HRA),0) TOT_DIFF_HRA,COALESCE(SUM(DIFF_PPAY),0) TOT_DIFF_PPAY,COALESCE(SUM(DIFF_ELEC),0) TOT_DIFF_ELEC,COALESCE(SUM(DIFF_MAGAZINE),0) TOT_DIFF_MAGAZINE,COALESCE(SUM(TOTAL_DIFF),0) TOT_TOTAL_DIFF,COALESCE(SUM(OLD_PTAX),0) TOTAL_OLDPTAX,COALESCE(SUM(NEW_PTAX),0) TOTAL_NEWPTAX FROM SDMLATTPAY.INCREMENT_ARREARS_CALC,\n"
                    + "        (SELECT @a:= 0) AS a WHERE INC_YEAR='"+txtincYear.getText().trim()+"' "+cndtn+" GROUP BY IC_PAY_EMP_NO) X\n"
                    + "LEFT JOIN\n"
                    + "(SELECT A.*,DPT_CODE,EMP_NAME FROM\n"
                    + "(SELECT IC_PAY_EMP_NO,PRESENT_DAYS,CONCAT(LPAD(IC_MONTH,2,0),IC_YEAR) IC_MONTHYEAR,COALESCE(INC_BASIC,0) INC_BASIC,COALESCE(DIFF_BASIC,0) DIFF_BASIC,COALESCE(INC_HRA,0) INC_HRA,COALESCE(DIFF_HRA,0) DIFF_HRA,COALESCE(INC_PPAY,0) INC_PPAY,COALESCE(DIFF_PPAY,0) DIFF_PPAY,COALESCE(INC_ELEC,0) INC_ELEC,COALESCE(DIFF_ELEC,0) DIFF_ELEC,COALESCE(INC_MAGAZINE,0) INC_MAGAZINE,COALESCE(DIFF_MAGAZINE,0) DIFF_MAGAZINE,COALESCE(TOTAL_DIFF,0) TOTAL_DIFF,COALESCE(OLD_GROSS,0) OLD_GROSS,COALESCE(NEW_GROSS,0) NEW_GROSS,COALESCE(OLD_PTAX,0) OLD_PTAX,COALESCE(NEW_PTAX,0) NEW_PTAX FROM SDMLATTPAY.INCREMENT_ARREARS_CALC WHERE INC_YEAR='"+txtincYear.getText().trim()+"' "+cndtn+") A\n"
                    + "LEFT JOIN \n"
                    + "(SELECT PAY_EMP_NO,DPT_CODE,EMP_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW) B\n"
                    + "ON IC_PAY_EMP_NO=PAY_EMP_NO ) Y\n"
                    + "ON X.IC_PAY_EMP_NO=Y.IC_PAY_EMP_NO";*/
            strSQL += "SELECT X.*,Y.* FROM\n"
                    //+ "(SELECT @a:=@a+1 SR_NO ,IC_PAY_EMP_NO,COUNT(IC_PAY_EMP_NO) RECORDS,SUM(PRESENT_DAYS) WORKING_DAYS,SUM(DAY_OF_MONTH) TOTAL_DAYS,COALESCE(SUM(DIFF_BASIC),0) TOT_DIFF_BASIC,COALESCE(SUM(DIFF_HRA),0) TOT_DIFF_HRA,COALESCE(SUM(DIFF_PPAY),0) TOT_DIFF_PPAY,COALESCE(SUM(DIFF_ELEC),0) TOT_DIFF_ELEC,COALESCE(SUM(DIFF_MAGAZINE),0) TOT_DIFF_MAGAZINE,COALESCE(SUM(TOTAL_DIFF+DIFF_MEDICAL),0) TOT_TOTAL_DIFF,COALESCE(SUM(OLD_PTAX),0) TOTAL_OLDPTAX,COALESCE(SUM(NEW_PTAX),0) TOTAL_NEWPTAX,COALESCE(SUM(DIFF_MEDICAL),0) TOT_DIFF_MEDICAL FROM SDMLATTPAY.INCREMENT_ARREARS_CALC,\n"
                    + "(SELECT @a:=@a+1 SR_NO ,IC_PAY_EMP_NO,COUNT(IC_PAY_EMP_NO) RECORDS,SUM(PRESENT_DAYS) WORKING_DAYS,SUM(DAY_OF_MONTH) TOTAL_DAYS,COALESCE(SUM(DIFF_BASIC),0) TOT_DIFF_BASIC,COALESCE(SUM(DIFF_HRA),0) TOT_DIFF_HRA,COALESCE(SUM(DIFF_PPAY),0) TOT_DIFF_PPAY,COALESCE(SUM(DIFF_ELEC),0) TOT_DIFF_ELEC,COALESCE(SUM(DIFF_MAGAZINE),0) TOT_DIFF_MAGAZINE,COALESCE(SUM(TOTAL_DIFF),0) TOT_TOTAL_DIFF,COALESCE(SUM(OLD_PTAX),0) TOTAL_OLDPTAX,COALESCE(SUM(NEW_PTAX),0) TOTAL_NEWPTAX,COALESCE(SUM(DIFF_MEDICAL),0) TOT_DIFF_MEDICAL FROM SDMLATTPAY.INCREMENT_ARREARS_CALC,\n"
                    + "        (SELECT @a:= 0) AS a WHERE INC_YEAR='"+txtincYear.getText().trim()+"' "+cndtn+" GROUP BY IC_PAY_EMP_NO) X\n"
                    + "LEFT JOIN\n"
                    + "(SELECT A.*,DPT_CODE,EMP_NAME FROM\n"
                    + "(SELECT INC_YEAR,IC_YEAR,IC_MONTH,IC_PAY_EMP_NO,COALESCE(PRESENT_DAYS,0) PRESENT_DAYS,CONCAT(LPAD(IC_MONTH,2,0),IC_YEAR) IC_MONTHYEAR,COALESCE(INC_BASIC,0) INC_BASIC,COALESCE(DIFF_BASIC,0) DIFF_BASIC,COALESCE(INC_HRA,0) INC_HRA,COALESCE(DIFF_HRA,0) DIFF_HRA,COALESCE(INC_PPAY,0) INC_PPAY,COALESCE(DIFF_PPAY,0) DIFF_PPAY,COALESCE(INC_ELEC,0) INC_ELEC,COALESCE(DIFF_ELEC,0) DIFF_ELEC,COALESCE(INC_MAGAZINE,0) INC_MAGAZINE,COALESCE(DIFF_MAGAZINE,0) DIFF_MAGAZINE,(COALESCE(TOTAL_DIFF,0)+COALESCE(DIFF_MEDICAL,0)) TOTAL_DIFF,COALESCE(OLD_GROSS,0) OLD_GROSS,COALESCE(NEW_GROSS,0) NEW_GROSS,COALESCE(OLD_PTAX,0) OLD_PTAX,COALESCE(NEW_PTAX,0) NEW_PTAX,COALESCE(INC_MEDICAL,0) INC_MEDICAL,COALESCE(DIFF_MEDICAL,0) DIFF_MEDICAL FROM SDMLATTPAY.INCREMENT_ARREARS_CALC WHERE INC_YEAR='"+txtincYear.getText().trim()+"' "+cndtn+") A\n"
                    + "LEFT JOIN \n"
                    + "(SELECT PAY_EMP_NO,DPT_CODE,EMP_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW) B\n"
                    + "ON IC_PAY_EMP_NO=PAY_EMP_NO ) Y\n"
                    + "ON X.IC_PAY_EMP_NO=Y.IC_PAY_EMP_NO ORDER BY Y.IC_PAY_EMP_NO,Y.IC_YEAR,Y.IC_MONTH";


            System.out.println("SQL QUERY : " + strSQL);
            //rpt.setReportName("/EITLERP/FeltSales/FeltInvReport/FeltPostInvReason.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/Arrears/ArrearsDifference_Retainer.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                st.close();
                Conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }  
  
  
  private void PostSummaryReport() {
        
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        String cndtn="";
        try {
            if(rptstaff.isSelected()){
                cndtn=cndtn+" AND (IC_PAY_EMP_NO LIKE 'BRD1%' OR IC_PAY_EMP_NO LIKE 'BRD2%')";
            }
            if(rptretainer.isSelected()){
                cndtn=cndtn+" AND (IC_PAY_EMP_NO LIKE 'BRD5%' OR IC_PAY_EMP_NO LIKE 'BRD6%')";
            }
            if (!txtEmpCode.getText().equals("")) {
                cndtn = cndtn + " AND IC_PAY_EMP_NO='" + txtEmpCode.getText().trim() + "' ";
            }

            if (!txtIncCount.getText().equals("")) {
                cndtn = cndtn + " AND INC_COUNT=" + txtIncCount.getText().trim() + " ";
            }
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();

//            String fdt = EITLERPGLOBAL.getCurrentDate();
//            String tdt = EITLERPGLOBAL.getCurrentDate();
//            String FromDate=EITLERPGLOBAL.formatDateDB(fdt);
//            String ToDate=EITLERPGLOBAL.formatDateDB(tdt);
//            int lotNo = data.getIntValueFromDB("SELECT MAX(LOT_NO) FROM PRODUCTION.FELT_SALES_INV_PROCESS_REPORT_DATA WHERE SUBSTRING(PROCESSING_TIME,1,10)='"+EITLERPGLOBAL.getCurrentDateDB()+"' ");

//            parameterMap.put("RUNDATE", EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime());
//            parameterMap.put("FROM_DATE", fdt);
//            parameterMap.put("TO_DATE", tdt);

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            String strSQL = "";
            strSQL += "SELECT INC_YEAR,SUBSTR(B.IC_PAY_EMP_NO,4,6) IC_PAY_EMP_NO,DIFF_BASIC,DIFF_HRA,DIFF_PPAY,DIFF_ELEC,DIFF_MAGAZINE,DIFF_OTHER,\n"
                    //+ "(TOTAL_DIFF+DIFF_MEDICAL) TOTAL_DIFF,ABS(DIFF_PTAX),PF,DIFF_MEDICAL,TOTAL_DID,NET_PAY,EMP_NAME,EMP_BASIC_RATE FROM \n"
                    + "(TOTAL_DIFF) TOTAL_DIFF,ABS(DIFF_PTAX) DIFF_PTAX,PF,DIFF_MEDICAL,DIFF_CONVEY,DIFF_PERF,TOTAL_DID,NET_PAY,EMP_NAME,EMP_BASIC_RATE FROM \n"
                    //+ "(SELECT A.*,ROUND((DIFF_BASIC+DIFF_PPAY)*.12) PF,CASE WHEN (DIFF_BASIC+DIFF_PPAY)=0 THEN 0 ELSE (ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+DIFF_PTAX END TOTAL_DID,(TOTAL_DIFF+DIFF_MEDICAL)-((ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+DIFF_PTAX) NET_PAY FROM \n"
                    + "(SELECT A.*,ROUND((DIFF_BASIC+DIFF_PPAY)*.12) PF,CASE WHEN (DIFF_BASIC+DIFF_PPAY)=0 THEN 0 ELSE (ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+DIFF_PTAX+DIFF_OTHER END TOTAL_DID,(TOTAL_DIFF)-((ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+DIFF_PTAX+DIFF_OTHER) NET_PAY FROM \n"
                    + "(SELECT INC_YEAR,IC_PAY_EMP_NO,COALESCE(SUM(DIFF_BASIC),0) DIFF_BASIC,COALESCE(SUM(DIFF_HRA),0) DIFF_HRA,COALESCE(SUM(DIFF_PPAY),0) DIFF_PPAY,COALESCE(SUM(DIFF_ELEC),0) DIFF_ELEC,COALESCE(SUM(DIFF_MAGAZINE),0) DIFF_MAGAZINE,COALESCE(SUM(DIFF_OTHER),0) DIFF_OTHER,COALESCE(SUM(TOTAL_DIFF),0) TOTAL_DIFF,SUM(NEW_PTAX-OLD_PTAX) DIFF_PTAX,COALESCE(SUM(DIFF_MEDICAL),0) DIFF_MEDICAL,COALESCE(SUM(DIFF_CONVEY),0) DIFF_CONVEY,COALESCE(SUM(DIFF_PERF),0) DIFF_PERF FROM SDMLATTPAY.INCREMENT_ARREARS_CALC WHERE INC_YEAR='"+txtincYear.getText().trim()+"' "+cndtn+" GROUP BY IC_PAY_EMP_NO) AS A) B\n"
                    + "LEFT JOIN\n"
                    + "(SELECT PAY_EMP_NO,EMP_NAME,EMP_BASIC_RATE FROM SDMLATTPAY.ATTPAY_EMPMST) C \n"
                    + "ON PAY_EMP_NO=IC_PAY_EMP_NO";

            System.out.println("SQL QUERY : " + strSQL);
            //rpt.setReportName("/EITLERP/FeltSales/FeltInvReport/FeltPostInvReason.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            //rpt.setReportName("/SDMLATTPAY/Arrears/ArrearsDifferenceSummary.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/Arrears/ArrearsDifferenceSummary_20212022.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                st.close();
                Conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }  
  private void PostSummaryReportRetainer() {
        
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        String cndtn="";
        try {
            if(rptstaff.isSelected()){
                cndtn=cndtn+" AND (IC_PAY_EMP_NO LIKE 'BRD1%' OR IC_PAY_EMP_NO LIKE 'BRD2%')";
            }
            if(rptretainer.isSelected()){
                cndtn=cndtn+" AND (IC_PAY_EMP_NO LIKE 'BRD5%' OR IC_PAY_EMP_NO LIKE 'BRD6%')";
            }
            if (!txtEmpCode.getText().equals("")) {
                cndtn = cndtn + " AND IC_PAY_EMP_NO='" + txtEmpCode.getText().trim() + "' ";
            }

            if (!txtIncCount.getText().equals("")) {
                cndtn = cndtn + " AND INC_COUNT=" + txtIncCount.getText().trim() + " ";
            }
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();

//            String fdt = EITLERPGLOBAL.getCurrentDate();
//            String tdt = EITLERPGLOBAL.getCurrentDate();
//            String FromDate=EITLERPGLOBAL.formatDateDB(fdt);
//            String ToDate=EITLERPGLOBAL.formatDateDB(tdt);
//            int lotNo = data.getIntValueFromDB("SELECT MAX(LOT_NO) FROM PRODUCTION.FELT_SALES_INV_PROCESS_REPORT_DATA WHERE SUBSTRING(PROCESSING_TIME,1,10)='"+EITLERPGLOBAL.getCurrentDateDB()+"' ");

//            parameterMap.put("RUNDATE", EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime());
//            parameterMap.put("FROM_DATE", fdt);
//            parameterMap.put("TO_DATE", tdt);

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            String strSQL = "";
            /*strSQL += "SELECT SUBSTR(B.IC_PAY_EMP_NO,4,6) IC_PAY_EMP_NO,DIFF_BASIC,DIFF_HRA,DIFF_PPAY,DIFF_ELEC,DIFF_MAGAZINE,DIFF_OTHER,\n"
                    //+ "(TOTAL_DIFF+DIFF_MEDICAL) TOTAL_DIFF,ABS(DIFF_PTAX),PF,DIFF_MEDICAL,TOTAL_DID,NET_PAY,EMP_NAME,EMP_BASIC_RATE FROM \n"
                    + "(TOTAL_DIFF) TOTAL_DIFF,ABS(DIFF_PTAX),PF,DIFF_MEDICAL,TOTAL_DID,NET_PAY,EMP_NAME,EMP_BASIC_RATE FROM \n"
                    //+ "(SELECT A.*,ROUND((DIFF_BASIC+DIFF_PPAY)*.12) PF,CASE WHEN (DIFF_BASIC+DIFF_PPAY)=0 THEN 0 ELSE (ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+DIFF_PTAX END TOTAL_DID,(TOTAL_DIFF+DIFF_MEDICAL)-((ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+DIFF_PTAX) NET_PAY FROM \n"
                    + "(SELECT A.*,ROUND((DIFF_BASIC+DIFF_PPAY)*.12) PF,CASE WHEN (DIFF_BASIC+DIFF_PPAY)=0 THEN 0 ELSE (ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+DIFF_PTAX END TOTAL_DID,(TOTAL_DIFF)-((ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+DIFF_PTAX) NET_PAY FROM \n"
                    + "(SELECT IC_PAY_EMP_NO,COALESCE(SUM(DIFF_BASIC),0) DIFF_BASIC,COALESCE(SUM(DIFF_HRA),0) DIFF_HRA,COALESCE(SUM(DIFF_PPAY),0) DIFF_PPAY,COALESCE(SUM(DIFF_ELEC),0) DIFF_ELEC,COALESCE(SUM(DIFF_MAGAZINE),0) DIFF_MAGAZINE,COALESCE(SUM(DIFF_OTHER),0) DIFF_OTHER,COALESCE(SUM(TOTAL_DIFF),0) TOTAL_DIFF,SUM(NEW_PTAX-OLD_PTAX) DIFF_PTAX,COALESCE(SUM(DIFF_MEDICAL),0) DIFF_MEDICAL FROM SDMLATTPAY.INCREMENT_ARREARS_CALC WHERE INC_YEAR='"+txtincYear.getText().trim()+"' "+cndtn+" GROUP BY IC_PAY_EMP_NO) AS A) B\n"
                    + "LEFT JOIN\n"
                    + "(SELECT PAY_EMP_NO,EMP_NAME,EMP_BASIC_RATE FROM SDMLATTPAY.ATTPAY_EMPMST) C \n"
                    + "ON PAY_EMP_NO=IC_PAY_EMP_NO";
            *///,ROUND((TOTAL_DIFF-DIFF_OTHER),2) NET_PAY
            strSQL += "SELECT INC_YEAR,SUBSTR(B.IC_PAY_EMP_NO,4,6) IC_PAY_EMP_NO,DIFF_BASIC,DIFF_HRA,DIFF_PPAY,DIFF_ELEC,DIFF_MAGAZINE,DIFF_OTHER,CEILING(DIFF_OTHER) AS TDS,\n"
                    + "TOTAL_DIFF,ABS(DIFF_PTAX),PF,DIFF_MEDICAL,TOTAL_DID,ROUND((TOTAL_DIFF-CEILING(DIFF_OTHER)),2) NET_PAY,EMP_NAME,RETAINER_FEE NEW_RETAINER_FEE,(RETAINER_FEE-INC_BASIC) RETAINER_FEE FROM \n"
//                    + "(SELECT A.*,ROUND((DIFF_BASIC+DIFF_PPAY)*.12) PF,CASE WHEN (DIFF_BASIC+DIFF_PPAY)=0 THEN 0 ELSE (ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+DIFF_PTAX END TOTAL_DID,TOTAL_DIFF NET_PAY FROM \n"
                    + "(SELECT A.*,ROUND((DIFF_BASIC+DIFF_PPAY)*.12) PF,CASE WHEN (DIFF_BASIC+DIFF_PPAY)=0 THEN 0 ELSE (ROUND((DIFF_BASIC+DIFF_PPAY)*.12))+DIFF_PTAX END TOTAL_DID FROM \n"
                    + "(SELECT INC_YEAR,IC_PAY_EMP_NO,INC_BASIC,COALESCE(SUM(DIFF_BASIC),0) DIFF_BASIC,COALESCE(SUM(DIFF_HRA),0) DIFF_HRA,COALESCE(SUM(DIFF_PPAY),0) DIFF_PPAY,COALESCE(SUM(DIFF_ELEC),0) DIFF_ELEC,COALESCE(SUM(DIFF_MAGAZINE),0) DIFF_MAGAZINE,COALESCE(SUM(DIFF_OTHER),0) DIFF_OTHER,COALESCE(SUM(TOTAL_DIFF),0) TOTAL_DIFF,SUM(NEW_PTAX-OLD_PTAX) DIFF_PTAX,COALESCE(SUM(DIFF_MEDICAL),0) DIFF_MEDICAL FROM SDMLATTPAY.INCREMENT_ARREARS_CALC WHERE INC_YEAR='"+txtincYear.getText().trim()+"' "+cndtn+"  GROUP BY IC_PAY_EMP_NO) AS A) B\n"
                    + "LEFT JOIN\n"
                    + "(SELECT PAY_EMPID,EMP_NAME,RETAINER_FEE FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC) C \n"
                    + "ON PAY_EMPID=IC_PAY_EMP_NO";
            System.out.println("SQL QUERY : " + strSQL);
            //rpt.setReportName("/EITLERP/FeltSales/FeltInvReport/FeltPostInvReason.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            //rpt.setReportName("/SDMLATTPAY/Arrears/ArrearsDifferenceSummary_Retainer.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/Arrears/ArrearsDifferenceSummary_Retainer_20212022.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                st.close();
                Conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }  
  
  private void ViewDetailReport(){
      Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
      try{
          Conn = data.getConn();
          
      JasperReport jasperReport = JasperCompileManager.compileReport("/SDMLATTPAY/Arrears/ArrearsDifference1.jrxml");

//Map<String, Object> parameters = new HashMap<String, Object>();
//parameters.put("parameter_name", value); //only if you want to pass any parameters
HashMap parameterMap = new HashMap();
      
JRDataSource dataSource = new JREmptyDataSource(); //your db connection

JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameterMap,Conn);
      }catch(Exception e){
          e.printStackTrace();
      }
  }
    
    
}