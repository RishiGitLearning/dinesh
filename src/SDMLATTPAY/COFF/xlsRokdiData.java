/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SDMLATTPAY.COFF;

import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.Reports.clsExcelExporter;
import EITLERP.Finance.UtilFunctions;
import EITLERP.JTextFieldHint;
import EITLERP.LOV;
import EITLERP.data;
import TReportWriter.TReportEngine;
import java.awt.Component;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Dharmendra
 */
public class xlsRokdiData extends javax.swing.JApplet {

    /**
     * Initializes the applet xlsRokdiPData
     */
    private EITLTableModel DataModel;
    private clsExcelExporter exprt = new clsExcelExporter();
    private EITLComboModel cmbStatementModel, cmbSlipModel, cmbSummaryModel;
    private TReportEngine objEngine = new TReportEngine();

    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        initComponents();
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        RokdiStatementCombo();
        file1.setVisible(false);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        file1 = new javax.swing.JFileChooser();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        txtdept = new javax.swing.JTextField();
        txtempcd = new javax.swing.JTextField();
        selectedtab = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        cmbstatement = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        cmbslip = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        cmbsummary = new javax.swing.JComboBox();
        cmdview = new javax.swing.JButton();
        cmdexcel = new javax.swing.JButton();
        cmdprint = new javax.swing.JButton();

        getContentPane().setLayout(null);

        jLabel3.setText("Employee Code");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(210, 30, 90, 30);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 190, 1070, 220);

        jLabel4.setText("Department");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(20, 30, 70, 20);

        txtdept.setDisabledTextColor(new java.awt.Color(0, 0, 255));
        txtdept = new JTextFieldHint(new JTextField(),"Search by F1");
        txtdept.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtdeptFocusLost(evt);
            }
        });
        txtdept.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtdeptKeyPressed(evt);
            }
        });
        getContentPane().add(txtdept);
        txtdept.setBounds(110, 30, 90, 30);

        txtempcd.setDisabledTextColor(new java.awt.Color(0, 0, 255));
        txtempcd = new JTextFieldHint(new JTextField(),"Search by F1");
        txtempcd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtempcdFocusLost(evt);
            }
        });
        txtempcd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtempcdKeyPressed(evt);
            }
        });
        getContentPane().add(txtempcd);
        txtempcd.setBounds(310, 30, 100, 30);

        selectedtab.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                selectedtabStateChanged(evt);
            }
        });
        selectedtab.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectedtabFocusGained(evt);
            }
        });

        jPanel2.setLayout(null);

        jLabel7.setText("Select Period");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(10, 4, 90, 30);

        cmbstatement.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel2.add(cmbstatement);
        cmbstatement.setBounds(90, 0, 260, 30);

        selectedtab.addTab("Rokdi Statement", jPanel2);

        jPanel3.setLayout(null);

        jLabel8.setText("Select Period");
        jPanel3.add(jLabel8);
        jLabel8.setBounds(10, 4, 90, 30);

        cmbslip.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel3.add(cmbslip);
        cmbslip.setBounds(90, 0, 260, 30);

        selectedtab.addTab("Rokdi Slip", jPanel3);

        jPanel4.setLayout(null);

        jLabel9.setText("Select Period");
        jPanel4.add(jLabel9);
        jLabel9.setBounds(10, 4, 90, 30);

        cmbsummary.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel4.add(cmbsummary);
        cmbsummary.setBounds(90, 0, 260, 30);

        selectedtab.addTab("Rokdi Summary", jPanel4);

        getContentPane().add(selectedtab);
        selectedtab.setBounds(20, 80, 670, 60);

        cmdview.setText("View");
        cmdview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdviewActionPerformed(evt);
            }
        });
        getContentPane().add(cmdview);
        cmdview.setBounds(20, 140, 130, 42);

        cmdexcel.setText("Excel");
        cmdexcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdexcelActionPerformed(evt);
            }
        });
        getContentPane().add(cmdexcel);
        cmdexcel.setBounds(170, 140, 110, 42);

        cmdprint.setText("Print");
        cmdprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdprintActionPerformed(evt);
            }
        });
        getContentPane().add(cmdprint);
        cmdprint.setBounds(300, 140, 110, 42);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdviewActionPerformed
        // TODO add your handling code here:
        try {
            switch (selectedtab.getSelectedIndex()) {
                case 0:
                    RokdiStatement();
                    break;
                case 1:
                    RokdiSlip();
                    break;
                case 2:
                    RokdiSummary();
                    break;
            }
            try {
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 100; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmdviewActionPerformed

    private void cmdexcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdexcelActionPerformed
        // TODO add your handling code here:
        try {
            String mfilenm;
            switch (selectedtab.getSelectedIndex()) {

                case 0:
                    mfilenm = "Statement " + SheetName(cmbstatement.getSelectedItem().toString());
                    break;
                case 1:
                    mfilenm = "Slip " + SheetName(cmbslip.getSelectedItem().toString());
                    break;
                case 2:
                    mfilenm = "Summary " + SheetName(cmbsummary.getSelectedItem().toString());
                    break;
                default:
                    mfilenm = "sheet1";
                    break;
            }
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), mfilenm);
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + ".xls successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdexcelActionPerformed

    private void cmdprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdprintActionPerformed
        // TODO add your handling code here:
        switch (selectedtab.getSelectedIndex()) {
            case 0:
                RokdiStatementPrint();
                break;
            case 1:
                RokdiSlipPrint();
                break;
            case 2:
                RokdiSummaryPrint();
                break;
        }

    }//GEN-LAST:event_cmdprintActionPerformed

    private void txtdeptFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtdeptFocusLost

    }//GEN-LAST:event_txtdeptFocusLost

    private void txtdeptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtdeptKeyPressed
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            aList.SQL = "SELECT DPTID AS DEPARTMENT,NAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                txtdept.setText(aList.ReturnVal);
            }
        }
    }//GEN-LAST:event_txtdeptKeyPressed

    private void txtempcdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtempcdFocusLost

    }//GEN-LAST:event_txtempcdFocusLost

    private void txtempcdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtempcdKeyPressed
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            aList.SQL = "SELECT M.PAY_EMP_NO,M.EMP_NAME,D.NAME FROM SDMLATTPAY.ATTPAY_EMPMST M "
                    + " LEFT JOIN SDMLATTPAY.ATT_DEPARTMENT_MASTER D "
                    + " ON M.EMP_DEPARTMENT=D.DPTID";
            if (txtdept.getText().length() > 0) {
                aList.SQL = aList.SQL + " WHERE M.DPTID='" + txtdept.getText() + "'";
            }
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                txtempcd.setText(aList.ReturnVal);
            }
        }
    }//GEN-LAST:event_txtempcdKeyPressed

    private void selectedtabFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_selectedtabFocusGained
        // TODO add your handling code here:


    }//GEN-LAST:event_selectedtabFocusGained

    private void selectedtabStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_selectedtabStateChanged
        // TODO add your handling code here:
        ClearData();

    }//GEN-LAST:event_selectedtabStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JComboBox cmbslip;
    private javax.swing.JComboBox cmbstatement;
    private javax.swing.JComboBox cmbsummary;
    private javax.swing.JButton cmdexcel;
    private javax.swing.JButton cmdprint;
    private javax.swing.JButton cmdview;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane selectedtab;
    private javax.swing.JTextField txtdept;
    private javax.swing.JTextField txtempcd;
    // End of variables declaration//GEN-END:variables


    private void RokdiStatementCombo() {
        cmbStatementModel = new EITLComboModel();
        cmbstatement.removeAllItems();
        cmbstatement.setModel(cmbStatementModel);
        cmbSlipModel = new EITLComboModel();
        cmbslip.removeAllItems();
        cmbslip.setModel(cmbSlipModel);
        cmbSummaryModel = new EITLComboModel();
        cmbsummary.removeAllItems();
        cmbsummary.setModel(cmbSummaryModel);
        try {
            ResultSet t = data.getResult("SELECT DISTINCT DOC_NO FROM SDMLATTPAY.ROKDI_PAYMENT_DETAIL WHERE APPROVED=1 AND COALESCE(CANCELED,0)=0 ORDER BY FROM_DATE DESC");
            t.first();
            if (t.getRow() > 0) {
                while (!t.isAfterLast()) {
                    ComboData aData = new ComboData();
                    aData.strCode = t.getString("DOC_NO");
                    aData.Text = t.getString("DOC_NO");
                    cmbStatementModel.addElement(aData);
                    cmbSlipModel.addElement(aData);
                    cmbSummaryModel.addElement(aData);
                    t.next();
                }
                cmbstatement.setSelectedIndex(0);
                cmbslip.setSelectedIndex(0);
                cmbsummary.setSelectedIndex(0);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void RokdiStatement() {
        String sql;
        sql = "SELECT  @a:=@a+1 AS \"SR No.\",M.EMP_DEPARTMENT AS DEPARTMENT_CODE,C.NAME AS DEPARTMENT,D.EMPLOYEE_CODE,M.EMP_NAME,"
                + "D.BASIC_RATE,D.BASIC_EARN,D.ADHOC_RATE,D.ADHOC_EARN,D.DA_RATE,D.DA_EARN,0 AS PRW,"
                + "D.TOTAL_EARN,D.ADDITIONAL_EARN,D.COIN_BF,D.COIN_CF,D.NET_PAY,D.REPLACEMENT_HOURS,D.REPLACEMENT_EARN,"
                + "D.EXTRA_HOURS,D.EXTRA_EARN "
                + " FROM (SELECT @a:= 0) AS a,SDMLATTPAY.ROKDI_PAYMENT_DETAIL D "
                + "LEFT JOIN SDMLATTPAY.ATTPAY_EMPMST M "
                + "ON D.EMPLOYEE_CODE=M.PAY_EMP_NO "
                + "LEFT JOIN SDMLATTPAY.ATT_DEPARTMENT_MASTER C "
                + "ON M.EMP_DEPARTMENT=C.DPTID "
                + " WHERE D.DOC_NO='" + cmbstatement.getSelectedItem().toString() + "'  AND D.APPROVED=1 AND COALESCE(D.CANCELED,0)=0";
        if (txtempcd.getText().trim().length() >= 9) {
            sql = sql + " AND D.EMPLOYEE_CODE='" + txtempcd.getText() + "' ";
        }
        if (txtdept.getText().trim().length() >= 1) {
            sql = sql + " AND M.EMP_DEPARTMENT='" + txtdept.getText() + "' ";
        }
        sql=sql+" ORDER BY M.EMP_DEPARTMENT,D.EMPLOYEE_CODE";
        System.out.println("SQL:"+sql);
        try {

            ResultSet rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();
            EITLTableModel mTableModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(mTableModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                mTableModel.addColumn(rsInfo.getColumnName(i));
            }
            //Table.getColumnModel().getColumn(3).setPreferredWidth(220);
            rs.first();
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }
                    mTableModel.addRow(rowData);
                    rs.next();
                }
            }
            mTableModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void RokdiSlip() {
        String sql;
        sql = "SELECT  @a:=@a+1 AS \"SR No.\",M.EMP_DEPARTMENT AS DEPARTMENT_CODE,C.NAME AS DEPARTMENT,D.EMPLOYEE_CODE,M.EMP_NAME,"
                + "D.BASIC_RATE,D.ADHOC_RATE,(D.TOTAL_EARN+D.ADDITIONAL_EARN) AS TOPAY,D.COIN_BF,D.COIN_CF,D.REV_STAMP,D.NET_PAY,@a:=(@a+1)-1 AS \"SLIP No.\",'' AS SIGNATURE "
                + " FROM (SELECT @a:= 0) AS a,SDMLATTPAY.ROKDI_PAYMENT_DETAIL D "
                + "LEFT JOIN SDMLATTPAY.ATTPAY_EMPMST M "
                + "ON D.EMPLOYEE_CODE=M.PAY_EMP_NO "
                + "LEFT JOIN SDMLATTPAY.ATT_DEPARTMENT_MASTER C "
                + "ON M.EMP_DEPARTMENT=C.DPTID "
                + " WHERE D.DOC_NO='" + cmbslip.getSelectedItem().toString() + "'  AND D.APPROVED=1 AND COALESCE(D.CANCELED,0)=0";
        if (txtempcd.getText().trim().length() >= 9) {
            sql = sql + " AND D.EMPLOYEE_CODE='" + txtempcd.getText() + "' ";
        }
        if (txtdept.getText().trim().length() >= 1) {
            sql = sql + " AND M.EMP_DEPARTMENT='" + txtdept.getText() + "' ";
        }
        sql=sql+" ORDER BY M.EMP_DEPARTMENT,D.EMPLOYEE_CODE";
        try {

            ResultSet rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();
            EITLTableModel mTableModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(mTableModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                mTableModel.addColumn(rsInfo.getColumnName(i));
            }
            //Table.getColumnModel().getColumn(3).setPreferredWidth(220);
            rs.first();
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }
                    mTableModel.addRow(rowData);
                    rs.next();
                }
            }
            mTableModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void RokdiSummary() {
        String sql;
        sql = "SELECT  @a:=@a+1 AS \"SR No.\",M.EMP_DEPARTMENT AS DEPARTMENT_CODE,C.NAME AS DEPARTMENT,"
                + "SUM(D.REPLACEMENT_HOURS) AS REPLACEMENT_HOURS,SUM(EXTRA_HOURS) AS EXTRA_HOURS,(SUM(D.REPLACEMENT_HOURS)+SUM(EXTRA_HOURS)) AS HOURS,"
                + "SUM(REPLACEMENT_EARN) AS REPLACEMENT_EARN,SUM(EXTRA_EARN) AS EXTRA_EARN,(SUM(REPLACEMENT_EARN)+SUM(EXTRA_EARN)) AS TO_PAY,"
                + "SUM(COIN_BF) AS COIN_BF,SUM(REV_STAMP) AS REV_STAMP,SUM(COIN_CF) AS COIN_CF,SUM(NET_PAY) AS NET_PAY "
                + " FROM (SELECT @a:= 0) AS a,SDMLATTPAY.ROKDI_PAYMENT_DETAIL D "
                + "LEFT JOIN SDMLATTPAY.ATTPAY_EMPMST M "
                + "ON D.EMPLOYEE_CODE=M.PAY_EMP_NO "
                + "LEFT JOIN SDMLATTPAY.ATT_DEPARTMENT_MASTER C "
                + "ON M.EMP_DEPARTMENT=C.DPTID ";

        sql = sql + " WHERE D.DOC_NO='" + cmbsummary.getSelectedItem().toString() + "'  AND D.APPROVED=1 AND COALESCE(D.CANCELED,0)=0";

        if (txtempcd.getText().trim().length() >= 9) {
            sql = sql + " AND D.EMPLOYEE_CODE='" + txtempcd.getText() + "' ";
        }
        if (txtdept.getText().trim().length() >= 1) {
            sql = sql + " AND M.EMP_DEPARTMENT='" + txtdept.getText() + "' ";
        }
        sql = sql + " GROUP BY M.EMP_DEPARTMENT "
                + " ORDER BY \"SR No.\" ";
        
        System.out.println("SQL:"+sql);
        try {

            ResultSet rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();
            EITLTableModel mTableModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(mTableModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                mTableModel.addColumn(rsInfo.getColumnName(i));
            }
            //Table.getColumnModel().getColumn(3).setPreferredWidth(220);
            rs.first();
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }
                    mTableModel.addRow(rowData);
                    rs.next();
                }
            }
            mTableModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String SheetName(String pName) {
        String sname;
        try {
            sname = pName.substring(0, 2) + "_" + pName.substring(3, 5) + "_" + pName.substring(8, 10)
                    + " - " + pName.substring(13, 15) + "_" + pName.substring(16, 18) + "_" + pName.substring(21, 23);
        } catch (Exception e) {
            sname = "sheet1";
        }
        return sname;
    }

    private void ClearData() {
        try {
            DefaultTableModel dm = (DefaultTableModel) Table.getModel();
            while (dm.getRowCount() > 0) {
                dm.removeRow(0);
            }
        } catch (Exception e) {

        }
    }

    private void RokdiStatementPrint() {
        try {
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData = new TReportWriter.SimpleDataProvider.TTable();

            objReportData.AddColumn("SR_NO");
            objReportData.AddColumn("DEPT_CD");
            objReportData.AddColumn("EMPLOYEE_CODE");
            objReportData.AddColumn("EMP_DEPARTMENT");
            objReportData.AddColumn("NAME");
            objReportData.AddColumn("EMP_NAME");
            objReportData.AddColumn("BASIC_RATE");
            objReportData.AddColumn("BASIC_EARN");
            objReportData.AddColumn("ADHOC_RATE");
            objReportData.AddColumn("ADHOC_EARN");
            objReportData.AddColumn("DA_RATE");
            objReportData.AddColumn("DA_EARN");
            objReportData.AddColumn("PRW");
            objReportData.AddColumn("TOTAL_EARN");
            objReportData.AddColumn("ADDITIONAL_EARN");
            objReportData.AddColumn("COIN_BF");
            objReportData.AddColumn("COIN_CF");
            objReportData.AddColumn("NET_PAY");
            objReportData.AddColumn("REPLACEMENT_HOURS");
            objReportData.AddColumn("EXTRA_HOURS");
            objReportData.AddColumn("REPLACEMENT_EARN");
            objReportData.AddColumn("EXTRA_EARN");
            objReportData.AddColumn("FROM_DATE");
            objReportData.AddColumn("TO_DATE");

            TReportWriter.SimpleDataProvider.TRow objOpeningRow = objReportData.newRow();

            objOpeningRow.setValue("SR_NO", "");
            objOpeningRow.setValue("EMP_DEPARTMENT", "");
            objOpeningRow.setValue("EMPLOYEE_CODE", "");
            objOpeningRow.setValue("NAME", "");
            objOpeningRow.setValue("EMP_DEPARTMENT", "");
            objOpeningRow.setValue("EMP_NAME", "");
            objOpeningRow.setValue("BASIC_RATE", "");
            objOpeningRow.setValue("BASIC_EARN", "");
            objOpeningRow.setValue("ADHOC_RATE", "");
            objOpeningRow.setValue("ADHOC_EARN", "");
            objOpeningRow.setValue("DA_RATE", "");
            objOpeningRow.setValue("DA_EARN", "");
            objOpeningRow.setValue("PRW", "");
            objOpeningRow.setValue("TOTAL_EARN", "");
            objOpeningRow.setValue("ADDITIONAL_EARN", "");
            objOpeningRow.setValue("COIN_BF", "");
            objOpeningRow.setValue("COIN_CF", "");
            objOpeningRow.setValue("NET_PAY", "");
            objOpeningRow.setValue("REPLACEMENT_HOURS", "");
            objOpeningRow.setValue("EXTRA_HOURS", "");
            objOpeningRow.setValue("REPLACEMENT_EARN", "");
            objOpeningRow.setValue("EXTRA_EARN", "");
            objOpeningRow.setValue("FROM_DATE", "");
            objOpeningRow.setValue("TO_DATE", "");

            String sql;
            sql = "SELECT  @a:=@a+1 AS SR_NO,M.EMP_DEPARTMENT,C.NAME,D.EMPLOYEE_CODE,M.EMP_NAME,"
                    + "D.BASIC_RATE,D.BASIC_EARN,D.ADHOC_RATE,D.ADHOC_EARN,D.DA_RATE,D.DA_EARN,0 AS PRW,"
                    + "D.TOTAL_EARN,D.ADDITIONAL_EARN,D.COIN_BF,D.COIN_CF,D.NET_PAY,D.REPLACEMENT_HOURS,D.REPLACEMENT_EARN,"
                    + "D.EXTRA_HOURS,D.EXTRA_EARN,D.FROM_DATE,D.TO_DATE "
                    + " FROM (SELECT @a:= 0) AS a,SDMLATTPAY.ROKDI_PAYMENT_DETAIL D "
                    + "LEFT JOIN SDMLATTPAY.ATTPAY_EMPMST M "
                    + "ON D.EMPLOYEE_CODE=M.PAY_EMP_NO "
                    + "LEFT JOIN SDMLATTPAY.ATT_DEPARTMENT_MASTER C "
                    + "ON M.EMP_DEPARTMENT=C.DPTID "
                    + " WHERE D.DOC_NO='" + cmbstatement.getSelectedItem().toString() + "'  AND D.APPROVED=1 AND COALESCE(D.CANCELED,0)=0";
            if (txtempcd.getText().trim().length() >= 9) {
                sql = sql + " AND D.EMPLOYEE_CODE='" + txtempcd.getText() + "' ";
            }
            if (txtdept.getText().trim().length() >= 1) {
                sql = sql + " AND M.EMP_DEPARTMENT='" + txtdept.getText() + "' ";
            }
            sql=sql+" ORDER BY M.EMP_DEPARTMENT,D.EMPLOYEE_CODE";
            System.out.println("Data Query :" + sql);
            System.out.println(sql);

            ResultSet rsTmp = data.getResult(sql);
            rsTmp.first();

            int Counter = 0;

            if (rsTmp.getRow() > 0) {
                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    objRow = objReportData.newRow();

                    objRow.setValue("SR_NO", UtilFunctions.getString(rsTmp, "SR_NO", ""));
                    objRow.setValue("EMP_DEPARTMENT", UtilFunctions.getString(rsTmp, "EMP_DEPARTMENT", ""));
                    objRow.setValue("EMPLOYEE_CODE", UtilFunctions.getString(rsTmp, "EMPLOYEE_CODE", ""));                    
                    objRow.setValue("NAME", UtilFunctions.getString(rsTmp, "NAME", ""));
                    objRow.setValue("EMP_NAME", UtilFunctions.getString(rsTmp, "EMP_NAME", ""));
                    objRow.setValue("BASIC_RATE", UtilFunctions.getString(rsTmp, "BASIC_RATE", ""));
                    objRow.setValue("BASIC_EARN", UtilFunctions.getString(rsTmp, "BASIC_EARN", ""));
                    objRow.setValue("ADHOC_RATE", UtilFunctions.getString(rsTmp, "ADHOC_RATE", ""));
                    objRow.setValue("ADHOC_EARN", UtilFunctions.getString(rsTmp, "ADHOC_EARN", ""));
                    objRow.setValue("DA_RATE", UtilFunctions.getString(rsTmp, "DA_RATE", ""));
                    objRow.setValue("DA_EARN", UtilFunctions.getString(rsTmp, "DA_EARN", ""));
                    objRow.setValue("PRW", UtilFunctions.getString(rsTmp, "PRW", ""));
                    objRow.setValue("TOTAL_EARN", UtilFunctions.getString(rsTmp, "TOTAL_EARN", ""));
                    objRow.setValue("ADDITIONAL_EARN", UtilFunctions.getString(rsTmp, "ADDITIONAL_EARN", ""));
                    objRow.setValue("COIN_BF", UtilFunctions.getString(rsTmp, "COIN_BF", ""));
                    objRow.setValue("COIN_CF", UtilFunctions.getString(rsTmp, "COIN_CF", ""));
                    objRow.setValue("NET_PAY", UtilFunctions.getString(rsTmp, "NET_PAY", ""));
                    objRow.setValue("REPLACEMENT_HOURS", UtilFunctions.getString(rsTmp, "REPLACEMENT_HOURS", ""));
                    objRow.setValue("EXTRA_HOURS", UtilFunctions.getString(rsTmp, "EXTRA_HOURS", ""));
                    objRow.setValue("REPLACEMENT_EARN", UtilFunctions.getString(rsTmp, "REPLACEMENT_EARN", ""));
                    objRow.setValue("EXTRA_EARN", UtilFunctions.getString(rsTmp, "EXTRA_EARN", ""));
                    objRow.setValue("FROM_DATE", UtilFunctions.getString(rsTmp, "FROM_DATE", ""));
                    objRow.setValue("TO_DATE", UtilFunctions.getString(rsTmp, "TO_DATE", ""));
                    objReportData.AddRow(objRow);

                    rsTmp.next();
                }
            }

            int Comp_ID = EITLERPGLOBAL.gCompanyID;

            HashMap Parameters = new HashMap();
            Parameters.put("RUNDATE", EITLERPGLOBAL.getCurrentDate());
            //System.out.println("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptFeltOrder.rpt");
            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/Reports/rptRokdiStatement.rpt", Parameters, objReportData);

        } catch (Exception e) {
            System.out.println("Error : " + e.getLocalizedMessage());
            e.printStackTrace();
        }
    }

    private void RokdiSlipPrint() {
        try {
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData = new TReportWriter.SimpleDataProvider.TTable();

            objReportData.AddColumn("SR_NO");
            objReportData.AddColumn("EMP_DEPARTMENT");
            objReportData.AddColumn("EMPLOYEE_CODE");
            objReportData.AddColumn("NAME");
            objReportData.AddColumn("EMP_NAME");
            objReportData.AddColumn("NAME");
            objReportData.AddColumn("BASIC_RATE");
            objReportData.AddColumn("ADHOC_RATE");
            objReportData.AddColumn("TOPAY");
            objReportData.AddColumn("COIN_BF");
            objReportData.AddColumn("COIN_CF");
            objReportData.AddColumn("REV_STAMP");
            objReportData.AddColumn("NET_PAY");
            objReportData.AddColumn("FROM_DATE");
            objReportData.AddColumn("TO_DATE");

            TReportWriter.SimpleDataProvider.TRow objOpeningRow = objReportData.newRow();

            objOpeningRow.setValue("SR_NO", "");
            objOpeningRow.setValue("EMP_DEPARTMENT", "");
            objOpeningRow.setValue("EMPLOYEE_CODE", "");
            objOpeningRow.setValue("NAME", "");
            objOpeningRow.setValue("EMP_NAME", "");
            objOpeningRow.setValue("BASIC_RATE", "");
            objOpeningRow.setValue("ADHOC_RATE", "");
            objOpeningRow.setValue("TOPAY", "");
            objOpeningRow.setValue("COIN_BF", "");
            objOpeningRow.setValue("COIN_CF", "");
            objOpeningRow.setValue("REV_STAMP", "");
            objOpeningRow.setValue("NET_PAY", "");
            objOpeningRow.setValue("FROM_DATE", "");
            objOpeningRow.setValue("TO_DATE", "");

            String sql;
            sql = "SELECT  @a:=@a+1 AS SR_No,M.EMP_DEPARTMENT,C.NAME,D.EMPLOYEE_CODE,M.EMP_NAME,D.FROM_DATE,D.TO_DATE,"
                    + "D.BASIC_RATE,D.ADHOC_RATE,(D.TOTAL_EARN+D.ADDITIONAL_EARN) AS TOPAY,D.COIN_BF,D.COIN_CF,D.REV_STAMP,D.NET_PAY,'' AS SIGNATURE "
                    + " FROM (SELECT @a:= 0) AS a,SDMLATTPAY.ROKDI_PAYMENT_DETAIL D "
                    + "LEFT JOIN SDMLATTPAY.ATTPAY_EMPMST M "
                    + "ON D.EMPLOYEE_CODE=M.PAY_EMP_NO "
                    + "LEFT JOIN SDMLATTPAY.ATT_DEPARTMENT_MASTER C "
                    + "ON M.EMP_DEPARTMENT=C.DPTID "
                    + " WHERE D.DOC_NO='" + cmbslip.getSelectedItem().toString() + "'  AND D.APPROVED=1 AND COALESCE(D.CANCELED,0)=0";
            if (txtempcd.getText().trim().length() >= 9) {
                sql = sql + " AND D.EMPLOYEE_CODE='" + txtempcd.getText() + "' ";
            }
            if (txtdept.getText().trim().length() >= 1) {
                sql = sql + " AND M.EMP_DEPARTMENT='" + txtdept.getText() + "' ";
            }
            sql=sql+" ORDER BY M.EMP_DEPARTMENT,D.EMPLOYEE_CODE";
            System.out.println("Data Query :" + sql);
            System.out.println(sql);

            ResultSet rsTmp = data.getResult(sql);
            rsTmp.first();

            int Counter = 0;

            if (rsTmp.getRow() > 0) {
                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    objRow = objReportData.newRow();

                    objRow.setValue("SR_NO", UtilFunctions.getString(rsTmp, "SR_No", ""));
                    objRow.setValue("EMP_DEPARTMENT", UtilFunctions.getString(rsTmp, "EMP_DEPARTMENT", ""));
                    objRow.setValue("EMPLOYEE_CODE", UtilFunctions.getString(rsTmp, "EMPLOYEE_CODE", ""));
                    objRow.setValue("NAME", UtilFunctions.getString(rsTmp, "NAME", ""));
                    objRow.setValue("EMP_NAME", UtilFunctions.getString(rsTmp, "EMP_NAME", ""));
                    objRow.setValue("BASIC_RATE", UtilFunctions.getString(rsTmp, "BASIC_RATE", ""));
                    objRow.setValue("ADHOC_RATE", UtilFunctions.getString(rsTmp, "ADHOC_RATE", ""));
                    objRow.setValue("TOPAY", UtilFunctions.getString(rsTmp, "TOPAY", ""));
                    objRow.setValue("COIN_BF", UtilFunctions.getString(rsTmp, "COIN_BF", ""));
                    objRow.setValue("COIN_CF", UtilFunctions.getString(rsTmp, "COIN_CF", ""));
                    objRow.setValue("NET_PAY", UtilFunctions.getString(rsTmp, "NET_PAY", ""));
                    objRow.setValue("REV_STAMP", UtilFunctions.getString(rsTmp, "REV_STAMP", ""));
                    objRow.setValue("FROM_DATE", UtilFunctions.getString(rsTmp, "FROM_DATE", ""));
                    objRow.setValue("TO_DATE", UtilFunctions.getString(rsTmp, "TO_DATE", ""));
                    objReportData.AddRow(objRow);

                    rsTmp.next();
                }
            }

            int Comp_ID = EITLERPGLOBAL.gCompanyID;

            HashMap Parameters = new HashMap();
            Parameters.put("RUNDATE", EITLERPGLOBAL.getCurrentDate());
            //System.out.println("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptFeltOrder.rpt");
            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/Reports/rptRokdiSlip.rpt", Parameters, objReportData);

        } catch (Exception e) {
            System.out.println("Error : " + e.getLocalizedMessage());
            e.printStackTrace();
        }
    }

    private void RokdiSummaryPrint() {
        try {
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData = new TReportWriter.SimpleDataProvider.TTable();

            objReportData.AddColumn("SR_NO");
            objReportData.AddColumn("EMP_DEPARTMENT");
            objReportData.AddColumn("NAME");
            objReportData.AddColumn("REPLACEMENT_HOURS");
            objReportData.AddColumn("EXTRA_HOURS");
            objReportData.AddColumn("HOURS");
            objReportData.AddColumn("REPLACEMENT_EARN");
            objReportData.AddColumn("EXTRA_EARN");
            objReportData.AddColumn("TO_PAY");
            objReportData.AddColumn("COIN_BF");
            objReportData.AddColumn("COIN_CF");
            objReportData.AddColumn("REV_STAMP");
            objReportData.AddColumn("NET_PAY");
            objReportData.AddColumn("FROM_DATE");
            objReportData.AddColumn("TO_DATE");

            TReportWriter.SimpleDataProvider.TRow objOpeningRow = objReportData.newRow();

            objOpeningRow.setValue("SR_NO", "");
            objOpeningRow.setValue("EMP_DEPARTMENT", "");
            objOpeningRow.setValue("NAME", "");
            objOpeningRow.setValue("REPLACEMENT_HOURS", "");
            objOpeningRow.setValue("EXTRA_HOURS", "");
            objOpeningRow.setValue("HOURS", "");
            objOpeningRow.setValue("REPLACEMENT_EARN", "");
            objOpeningRow.setValue("EXTRA_EARN", "");
            objOpeningRow.setValue("TO_PAY", "");
            objOpeningRow.setValue("COIN_BF", "");
            objOpeningRow.setValue("COIN_CF", "");
            objOpeningRow.setValue("REV_STAMP", "");
            objOpeningRow.setValue("NET_PAY", "");
            objOpeningRow.setValue("FROM_DATE", "");
            objOpeningRow.setValue("TO_DATE", "");

            String sql;
            sql = "SELECT  @a:=@a+1 AS SR_No,M.EMP_DEPARTMENT,C.NAME,D.FROM_DATE,D.TO_DATE,"
                    + "SUM(D.REPLACEMENT_HOURS) AS REPLACEMENT_HOURS,SUM(EXTRA_HOURS) AS EXTRA_HOURS,(SUM(D.REPLACEMENT_HOURS)+SUM(EXTRA_HOURS)) AS HOURS,"
                    + "SUM(REPLACEMENT_EARN) AS REPLACEMENT_EARN,SUM(EXTRA_EARN) AS EXTRA_EARN,(SUM(REPLACEMENT_EARN)+SUM(EXTRA_EARN)) AS TO_PAY,"
                    + "SUM(COIN_BF) AS COIN_BF,SUM(REV_STAMP) AS REV_STAMP,SUM(COIN_CF) AS COIN_CF,SUM(NET_PAY) AS NET_PAY "
                    + " FROM (SELECT @a:= 0) AS a,SDMLATTPAY.ROKDI_PAYMENT_DETAIL D "
                    + "LEFT JOIN SDMLATTPAY.ATTPAY_EMPMST M "
                    + "ON D.EMPLOYEE_CODE=M.PAY_EMP_NO "
                    + "LEFT JOIN SDMLATTPAY.ATT_DEPARTMENT_MASTER C "
                    + "ON M.EMP_DEPARTMENT=C.DPTID ";

            sql = sql + " WHERE D.DOC_NO='" + cmbsummary.getSelectedItem().toString() + "'  AND D.APPROVED=1 AND COALESCE(D.CANCELED,0)=0";

            if (txtempcd.getText().trim().length() >= 9) {
                sql = sql + " AND D.EMPLOYEE_CODE='" + txtempcd.getText() + "' ";
            }
            if (txtdept.getText().trim().length() >= 1) {
                sql = sql + " AND M.EMP_DEPARTMENT='" + txtdept.getText() + "' ";
            }
            sql = sql + " GROUP BY M.EMP_DEPARTMENT "
                    + " ORDER BY SR_No ";
            System.out.println("Data Query :" + sql);
            System.out.println(sql);

            ResultSet rsTmp = data.getResult(sql);
            rsTmp.first();

            int Counter = 0;

            if (rsTmp.getRow() > 0) {
                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    objRow = objReportData.newRow();

                    objRow.setValue("SR_NO", UtilFunctions.getString(rsTmp, "SR_No", ""));
                    objRow.setValue("EMP_DEPARTMENT", UtilFunctions.getString(rsTmp, "EMP_DEPARTMENT", ""));
                    objRow.setValue("NAME", UtilFunctions.getString(rsTmp, "NAME", ""));
                    objRow.setValue("REPLACEMENT_HOURS", UtilFunctions.getString(rsTmp, "REPLACEMENT_HOURS", ""));
                    objRow.setValue("EXTRA_HOURS", UtilFunctions.getString(rsTmp, "EXTRA_HOURS", ""));
                    objRow.setValue("HOURS", UtilFunctions.getString(rsTmp, "HOURS", ""));
                    objRow.setValue("REPLACEMENT_EARN", UtilFunctions.getString(rsTmp, "REPLACEMENT_EARN", ""));
                    objRow.setValue("EXTRA_EARN", UtilFunctions.getString(rsTmp, "EXTRA_EARN", ""));
                    objRow.setValue("TO_PAY", UtilFunctions.getString(rsTmp, "TO_PAY", ""));
                    objRow.setValue("COIN_BF", UtilFunctions.getString(rsTmp, "COIN_BF", ""));
                    objRow.setValue("COIN_CF", UtilFunctions.getString(rsTmp, "COIN_CF", ""));
                    objRow.setValue("NET_PAY", UtilFunctions.getString(rsTmp, "NET_PAY", ""));
                    objRow.setValue("REV_STAMP", UtilFunctions.getString(rsTmp, "REV_STAMP", ""));
                    objRow.setValue("FROM_DATE", UtilFunctions.getString(rsTmp, "FROM_DATE", ""));
                    objRow.setValue("TO_DATE", UtilFunctions.getString(rsTmp, "TO_DATE", ""));
                    objReportData.AddRow(objRow);

                    rsTmp.next();
                }
            }

            int Comp_ID = EITLERPGLOBAL.gCompanyID;

            HashMap Parameters = new HashMap();
            Parameters.put("RUNDATE", EITLERPGLOBAL.getCurrentDate());
            //System.out.println("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptFeltOrder.rpt");
            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/Reports/rptRokdiSummary.rpt", Parameters, objReportData);

        } catch (Exception e) {
            System.out.println("Error : " + e.getLocalizedMessage());
            e.printStackTrace();
        }
    }
}
