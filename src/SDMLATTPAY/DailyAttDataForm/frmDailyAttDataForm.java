/*
 * frmMonthlyAttendance.java
 *
 * Created on August 22, 2013, 11:20 AM
 */
package SDMLATTPAY.DailyAttDataForm;

/**
 *
 * @author
 */
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.util.HashMap;
import java.net.URL;
import java.io.File;
import TReportWriter.NumWord;

import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.Loader;
import EITLERP.AppletFrame;
import EITLERP.EITLTableCellRenderer;
import EITLERP.FeltSales.common.JavaMail;
import EITLERP.FeltSales.common.JavaMailNew;
import EITLERP.LOV;
import EITLERP.frmPendingApprovals;
//import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.Production.FeltUser;
import EITLERP.SelectFirstFree;
import EITLERP.clsFirstFree;
import EITLERP.data;
import SDMLATTPAY.AdvanceSearch.ATTPAYLOV;
import SDMLATTPAY.Employee.clsMaster;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.table.TableCellRenderer;
import javax.swing.JTextField;

public class frmDailyAttDataForm extends javax.swing.JApplet {

    private int EditMode = 0;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromUserId = 0;
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    private boolean DoNotEvaluate = false;

    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;

    private clsDailyAttDataForm ObjDailyAttData;

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel modelDept = new EITLComboModel();

    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;
    private EITLTableModel DataModelExcess;
    private int FinalApprovedBy = 0;
    public frmPendingApprovals frmPA;

    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();

    /**
     * Creates new form frmFeltFinishing
     */
    public void init() {
        System.gc();
        setSize(1000, 590);
        initComponents();
        lblTitle.setForeground(Color.WHITE);
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        DataModel = new EITLTableModel();
        ObjDailyAttData = new clsDailyAttDataForm();
        lblTitle.setForeground(Color.WHITE);

        cmdRemove.setVisible(false);

        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
//        GenerateDeptCombo();
        FormatGrid();
        FormatExcessGrid();
        lblRevNo.setVisible(false);

        if (ObjDailyAttData.LoadData()) {
            ObjDailyAttData.MoveLast();
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmDailyAttDataForm.this, "Error occured while Loading Data. Error is " + ObjDailyAttData.LastError, "DATA LOADING ERROR", JOptionPane.ERROR_MESSAGE);
        }

        Table.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        file1 = new javax.swing.JFileChooser();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        cmdNextToTab1 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        btnEmpMstETE = new javax.swing.JButton();
        lblDeptCmb = new javax.swing.JLabel();
        cmbDept = new javax.swing.JComboBox();
        lblDeptCmb1 = new javax.swing.JLabel();
        cmbShift = new javax.swing.JComboBox();
        txtAttDate = new javax.swing.JTextField();
        lblDate = new javax.swing.JLabel();
        txtEmpNo = new javax.swing.JTextField();
        lblEmpNo = new javax.swing.JLabel();
        cmdRemove = new javax.swing.JButton();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableExcess = new javax.swing.JTable();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 990, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("Daily Attandance Form (Regular) - ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 990, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel16.setText("Doc No ");
        Tab1.add(jLabel16);
        jLabel16.setBounds(20, 10, 70, 20);

        txtDocNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtDocNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDocNo.setEnabled(false);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(90, 10, 150, 20);

        jLabel6.setText("Doc Date");
        Tab1.add(jLabel6);
        jLabel6.setBounds(280, 10, 80, 20);

        txtDocDate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtDocDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDocDate.setEnabled(false);
        Tab1.add(txtDocDate);
        txtDocDate.setBounds(370, 10, 102, 20);

        lblRevNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(480, 10, 20, 18);

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));
        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel4);
        jPanel4.setBounds(10, 70, 970, 5);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(670, 390, 90, 25);

        jScrollPane4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jScrollPane4KeyReleased(evt);
            }
        });

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                TableMouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(Table);

        Tab1.add(jScrollPane4);
        jScrollPane4.setBounds(10, 110, 970, 270);

        btnEmpMstETE.setLabel("Export to Excel");
        btnEmpMstETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpMstETEActionPerformed(evt);
            }
        });
        Tab1.add(btnEmpMstETE);
        btnEmpMstETE.setBounds(40, 390, 150, 30);

        lblDeptCmb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDeptCmb.setText("Shift : ");
        Tab1.add(lblDeptCmb);
        lblDeptCmb.setBounds(520, 40, 70, 20);

        cmbDept.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Dept", "WEAVING", "YARN STORE", "MENDING", "NEEDLING", "FINISHING", "CARDING", "WAREHOUSE", "ENGINEERING", "RMG", "SECURITY", "STORES", "PEONS" }));
        cmbDept.setEnabled(false);
        cmbDept.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDeptItemStateChanged(evt);
            }
        });
        Tab1.add(cmbDept);
        cmbDept.setBounds(320, 40, 190, 20);

        lblDeptCmb1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDeptCmb1.setText("Department : ");
        Tab1.add(lblDeptCmb1);
        lblDeptCmb1.setBounds(210, 40, 110, 20);

        cmbShift.setMaximumRowCount(9);
        cmbShift.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Shift", "1", "2", "3", "4", "5", "6", "14", "15", "26" }));
        cmbShift.setToolTipText("");
        cmbShift.setEnabled(false);
        cmbShift.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbShiftItemStateChanged(evt);
            }
        });
        Tab1.add(cmbShift);
        cmbShift.setBounds(590, 40, 110, 20);

        txtAttDate = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();
        txtAttDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtAttDate.setEnabled(false);
        txtAttDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAttDateFocusLost(evt);
            }
        });
        Tab1.add(txtAttDate);
        txtAttDate.setBounds(90, 40, 110, 20);

        lblDate.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblDate.setText("Att Date : ");
        Tab1.add(lblDate);
        lblDate.setBounds(20, 40, 80, 20);

        txtEmpNo = new EITLERP.JTextFieldHint(new JTextField(),"Search by F1");
        txtEmpNo.setToolTipText("Press F1 key for search Employee No");
        txtEmpNo.setEnabled(false);
        txtEmpNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmpNoFocusLost(evt);
            }
        });
        txtEmpNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEmpNoKeyPressed(evt);
            }
        });
        Tab1.add(txtEmpNo);
        txtEmpNo.setBounds(130, 80, 120, 20);

        lblEmpNo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblEmpNo.setText("Employee No : ");
        Tab1.add(lblEmpNo);
        lblEmpNo.setBounds(20, 80, 110, 20);

        cmdRemove.setText("Remove");
        cmdRemove.setEnabled(false);
        cmdRemove.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        Tab1.add(cmdRemove);
        cmdRemove.setBounds(520, 80, 80, 20);

        Tab.addTab("Details", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 23, 80, 15);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 20, 184, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 62, 80, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 60, 184, 21);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 97, 61, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 95, 630, 19);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 130, 73, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 130, 184, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 249, 80, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 245, 184, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 288, 80, 15);

        txtToRemarks.setEnabled(false);
        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 286, 630, 19);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(500, 350, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(728, 94, 49, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(620, 350, 102, 25);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 760, 150);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 191, 163, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 210, 640, 180);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(662, 390, 110, 25);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(662, 240, 110, 25);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(662, 210, 110, 25);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(662, 270, 110, 25);

        Tab.addTab("Status", jPanel1);

        jPanel2.setLayout(null);

        TableExcess.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableExcess);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(10, 0, 1230, 403);

        Tab.addTab("Excess List", jPanel2);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 990, 470);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 540, 990, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
//        new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltFinishing.rpt",new HashMap(),ObjDailyAttData.getReportData(EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
//        EITLERPGLOBAL.PAGE_BREAK=true;
//        HashMap Parameters = new HashMap();
//        Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());
//        
//        new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/FELTFINISHING.rpt",Parameters,ObjDailyAttData.getReportData(txtProductionDocumentNo.getText().trim(),EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
//        EITLERPGLOBAL.PAGE_BREAK=true;
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
//        try {
//            URL reportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltFinishing.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&PROD_DATE="+EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText()));
//            EITLERPGLOBAL.loginContext.showDocument(reportFile,"_blank");
//        }
//        catch(Exception e) {
//            JOptionPane.showMessageDialog(frmFeltFinishing.this,"File error "+e.getMessage(),"FILE ERROR",JOptionPane.ERROR_MESSAGE);
//            e.printStackTrace();
//        }

//        PreviewReport();
//        HashMap Parameters = new HashMap();
//        Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());
//
//        new TReportWriter.TReportEngine().PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/Production/FELTFINISHING.rpt", Parameters, ObjDailyAttData.getReportData(txtProductionDocumentNo.getText().trim(), EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
//        EITLERPGLOBAL.PAGE_BREAK = true;
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4).toString());
            bigEdit.ShowEdit();
        } else {
            JOptionPane.showMessageDialog(frmDailyAttDataForm.this, "Select a row from Document Update History");
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjDailyAttData.HistoryView = false;
        ObjDailyAttData.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed

    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjDailyAttData.ShowHistory(EITLERPGLOBAL.formatDateDB(txtDocDate.getText()), txtDocNo.getText());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed

    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        txtDocDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);

        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (SDMLATTPAY.ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID, 837, txtDocNo.getText())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjDailyAttData.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        cmbDept.setSelectedIndex(0);
        cmbShift.setSelectedIndex(0);
        Cancel();
        if (ObjDailyAttData.LoadData()) {
            ObjDailyAttData.MoveLast();
            DisplayData();
        } else {
        }
        SetFields(false);
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(frmDailyAttDataForm.this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed

    private void jScrollPane4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jScrollPane4KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane4KeyReleased

    private void btnEmpMstETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpMstETEActionPerformed
//         TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnEmpMstETEActionPerformed

    private void txtEmpNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmpNoFocusLost
        // TODO add your handling code here:
        if (!txtEmpNo.getText().trim().equals("") && data.IsRecordExist("SELECT * FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpNo.getText().trim() + "' AND APPROVED=1 AND CANCELED=0")) {
//            txtEmpName.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpNo.getText() + "'"));
        } else {
            if (!txtEmpNo.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Employee No doesn't exist/under approval.");
            }
            txtEmpNo.setText("");
//            txtEmpName.setText("");
        }
    }//GEN-LAST:event_txtEmpNoFocusLost

    private void txtEmpNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpNoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            ATTPAYLOV aList = new ATTPAYLOV();
//            aList.SQL = "SELECT PAY_EMP_NO,EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE APPROVED=1 AND CANCELED=0 AND (PAY_EMP_NO LIKE ('BRD30%') OR PAY_EMP_NO LIKE ('BRD40%') OR PAY_EMP_NO LIKE ('BRD00%')) AND EMP_DEPARTMENT= '" + cmbDept.getSelectedIndex() + "' AND EMP_SHIFT_ID= '" + cmbShift.getSelectedItem() + "' "
//                    + "UNION ALL "
//                    + "SELECT PAY_EMP_NO,EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE APPROVED=1 AND CANCELED=0 AND PAY_EMP_NO LIKE ('BRD00%') ";
//            aList.SQL = "SELECT PAY_EMP_NO AS 'Emp No',EMP_NAME AS 'Name',DPTNAME AS 'Dept Name',ERP_DEPT AS 'Dept Listed' FROM "
//                    + "(SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST WHERE APPROVED=1 AND CANCELED=0 "
//                    + "AND (PAY_EMP_NO LIKE ('BRD30%') OR PAY_EMP_NO LIKE ('BRD40%') OR PAY_EMP_NO LIKE ('BRD00%'))  ) AS EMP "
//                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME,ERP_DEPT FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT ON DPT.DPTID=EMP.EMP_DEPARTMENT "
//                    + "WHERE EMP_DEPARTMENT IN (SELECT CONVERT(DPTID,CHAR (8)) AS DPTID FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER "
//                    + "WHERE TRIM(ERP_DEPT)='" + cmbDept.getSelectedItem() + "' GROUP BY ERP_DEPT) "
//                    + "UNION ALL "
//                    + "SELECT EMP_ID,EMP_NAME,EMP_DEPT,'EXCESS LIST' FROM SDMLATTPAY.DAILY_ATT_FORM_EXCESS_LIST "
//                    + "WHERE ATT_DATE = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
//                    + "AND COALESCE(ASSIGNED_IND,'0') = 0 ";
            aList.SQL = "SELECT EMP_ID,EMP_NAME,EMP_DEPT,'EXCESS LIST' FROM SDMLATTPAY.DAILY_ATT_FORM_EXCESS_LIST "
                    + "WHERE ATT_DATE = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                    + "AND COALESCE(ASSIGNED_IND,'0') = 0 "
                    + "UNION ALL "
                    + "SELECT PAY_EMP_NO AS 'Emp No',EMP_NAME AS 'Name',DPTNAME AS 'Dept Name',ERP_DEPT AS 'Dept Listed' FROM "
                    + "(SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST "
                    + "WHERE COALESCE(EMP_LEFT_DATE,'0000-00-00 00:00:00')='0000-00-00 00:00:00' AND APPROVED=1 AND CANCELED=0 "
                    + "AND (PAY_EMP_NO LIKE ('BRD30%') OR PAY_EMP_NO LIKE ('BRD40%') OR PAY_EMP_NO LIKE ('BRD00%'))  ) AS EMP "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME,ERP_DEPT FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "WHERE EMP_DEPARTMENT IN (SELECT CONVERT(DPTID,CHAR (8)) AS DPTID FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER "
                    + "WHERE TRIM(ERP_DEPT)='" + cmbDept.getSelectedItem() + "' GROUP BY ERP_DEPT) ";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtEmpNo.setText(aList.ReturnVal);
//                txtEmpName.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpNo.getText() + "'"));
                Object[] rowData = new Object[45];
                rowData[0] = Integer.toString(Table.getRowCount() + 1);
                rowData[1] = txtEmpNo.getText().trim();
                rowData[2] = data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpNo.getText() + "'");
                rowData[3] = data.getStringValueFromDB("SELECT ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM AND PUNCHDATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' AND EMPID='" + txtEmpNo.getText() + "'");
                rowData[4] = "";
                rowData[5] = false;
                rowData[6] = false;
                rowData[7] = false;
                rowData[8] = data.getStringValueFromDB("SELECT D.NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER D,SDMLATTPAY.ATTPAY_EMPMST E WHERE D.DPTID=E.EMP_DEPARTMENT AND E.PAY_EMP_NO='" + txtEmpNo.getText() + "'");
                rowData[9] = data.getStringValueFromDB("SELECT M.NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER M,SDMLATTPAY.ATTPAY_EMPMST E WHERE M.SECID=E.EMP_MAIN_CATEGORY AND E.PAY_EMP_NO='" + txtEmpNo.getText() + "'");
                rowData[10] = data.getStringValueFromDB("SELECT C.NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER C,SDMLATTPAY.ATTPAY_EMPMST E WHERE C.CTGID=E.EMP_CATEGORY AND E.PAY_EMP_NO='" + txtEmpNo.getText() + "'");
                rowData[11] = data.getStringValueFromDB("SELECT SHIFT FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM AND PUNCHDATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' AND EMPID='" + txtEmpNo.getText() + "'");
//                rowData[11] = false;
//                rowData[12] = false;
//                rowData[13] = false;
                DataModel.addRow(rowData);
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
                Table.changeSelection(Table.getRowCount() - 1, 1, false, false);
                Table.requestFocus();
            }
        }
    }//GEN-LAST:event_txtEmpNoKeyPressed

    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if (Table.getRowCount() > 0) {
            DataModel.removeRow(Table.getSelectedRow());
            UpdateSrNo();
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed

    private void cmbDeptItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDeptItemStateChanged
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD) {
            txtAttDate.setEnabled(false);
            cmbDept.setEnabled(false);
            cmbShift.setEnabled(true);
        }
    }//GEN-LAST:event_cmbDeptItemStateChanged

    private void cmbShiftItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbShiftItemStateChanged
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD) {
            txtAttDate.setEnabled(false);
            cmbDept.setEnabled(false);
            cmbShift.setEnabled(false);
        }
        if (EditMode == EITLERPGLOBAL.ADD
                && !cmbShift.getSelectedItem().equals("Select Shift")
                && !cmbDept.getSelectedItem().equals("Select Dept")
                && !txtAttDate.getText().trim().equals("")) {
            GenerateEmpList();
            GenerateExcessList();
            txtEmpNo.setEnabled(true);
            cmdRemove.setEnabled(true);
        }
    }//GEN-LAST:event_cmbShiftItemStateChanged

    private void txtAttDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAttDateFocusLost
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD) {
            txtAttDate.setEnabled(false);
            cmbDept.setEnabled(true);
            cmbShift.setEnabled(false);
        }
    }//GEN-LAST:event_txtAttDateFocusLost

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            if (Table.getSelectedColumn() == 5) {
                if (Table.getValueAt(Table.getSelectedRow(), 4).toString().trim().length() > 5) {
                    Table.setValueAt(true, Table.getSelectedRow(), 5);
                    Table.setValueAt(false, Table.getSelectedRow(), 6);
                    Table.setValueAt(false, Table.getSelectedRow(), 7);

                } else {
                    Table.setValueAt(false, Table.getSelectedRow(), 5);
                    JOptionPane.showMessageDialog(this, "Please Enter Remark.");
                }
            }
            if (Table.getSelectedColumn() == 6) {
                if (Table.getValueAt(Table.getSelectedRow(), 4).toString().trim().length() > 5) {
                    Table.setValueAt(false, Table.getSelectedRow(), 5);
                    Table.setValueAt(true, Table.getSelectedRow(), 6);
                    Table.setValueAt(false, Table.getSelectedRow(), 7);
                } else {
                    Table.setValueAt(false, Table.getSelectedRow(), 6);
                    JOptionPane.showMessageDialog(this, "Please Enter Remark.");
                }
            }
            if (Table.getSelectedColumn() == 7) {
                if (Table.getValueAt(Table.getSelectedRow(), 4).toString().trim().length() > 5) {
                    Table.setValueAt(false, Table.getSelectedRow(), 5);
                    Table.setValueAt(false, Table.getSelectedRow(), 6);
                    Table.setValueAt(true, Table.getSelectedRow(), 7);
                } else {
                    Table.setValueAt(false, Table.getSelectedRow(), 7);
                    JOptionPane.showMessageDialog(this, "Please Enter Remark.");
                }
            }
        }
    }//GEN-LAST:event_TableMouseClicked

    private void TableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseReleased
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            if (Table.getSelectedColumn() == 5) {
                if (Table.getValueAt(Table.getSelectedRow(), 4).toString().trim().length() > 5) {
                    Table.setValueAt(true, Table.getSelectedRow(), 5);
                    Table.setValueAt(false, Table.getSelectedRow(), 6);
                    Table.setValueAt(false, Table.getSelectedRow(), 7);

                } else {
                    Table.setValueAt(false, Table.getSelectedRow(), 5);
                    JOptionPane.showMessageDialog(this, "Please Enter Remark.");
                }
            }
            if (Table.getSelectedColumn() == 6) {
                if (Table.getValueAt(Table.getSelectedRow(), 4).toString().trim().length() > 5) {
                    Table.setValueAt(false, Table.getSelectedRow(), 5);
                    Table.setValueAt(true, Table.getSelectedRow(), 6);
                    Table.setValueAt(false, Table.getSelectedRow(), 7);
                } else {
                    Table.setValueAt(false, Table.getSelectedRow(), 6);
                    JOptionPane.showMessageDialog(this, "Please Enter Remark.");
                }
            }
            if (Table.getSelectedColumn() == 7) {
                if (Table.getValueAt(Table.getSelectedRow(), 4).toString().trim().length() > 5) {
                    Table.setValueAt(false, Table.getSelectedRow(), 5);
                    Table.setValueAt(false, Table.getSelectedRow(), 6);
                    Table.setValueAt(true, Table.getSelectedRow(), 7);
                } else {
                    Table.setValueAt(false, Table.getSelectedRow(), 7);
                    JOptionPane.showMessageDialog(this, "Please Enter Remark.");
                }
            }
        }
    }//GEN-LAST:event_TableMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableExcess;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton btnEmpMstETE;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbDept;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbShift;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDeptCmb;
    private javax.swing.JLabel lblDeptCmb1;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblEmpNo;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAttDate;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtEmpNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables

    private void GenerateDeptCombo() {

        HashMap List = new HashMap();
        clsMaster ObjDept;

        cmbDept.setModel(modelDept);
        modelDept.removeAllElements();  //Clearing previous contents

        ComboData aData = new ComboData();
        aData.Text = "Select Dept";
        aData.Code = 0;
        modelDept.addElement(aData);

        List = clsMaster.getDepartmentList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjDept = (clsMaster) List.get(Integer.toString(i));
//            ComboData 
            aData = new ComboData();
            aData.Text = (String) ObjDept.getAttribute("Name").getObj();
            aData.Code = (long) ObjDept.getAttribute("DPTID").getVal();
            modelDept.addElement(aData);
        }
    }

    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }

    private void SetFields(boolean pStat) {

        txtDocNo.setEnabled(false);
        txtDocDate.setEnabled(false);

        txtAttDate.setEnabled(pStat);
        cmbDept.setEnabled(pStat);
        cmbShift.setEnabled(pStat);

        txtEmpNo.setEnabled(false);
        cmdRemove.setEnabled(false);

        Table.setEnabled(pStat);

        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);

        SetupApproval();
    }

    private void ClearFields() {
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtDocNo.setText("");

        txtAttDate.setText("");
        cmbDept.setSelectedIndex(0);
        cmbShift.setSelectedIndex(0);

        txtEmpNo.setText("");

        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }

    //Display data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, 837)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        //=========== Title Bar Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjDailyAttData.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                } else {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (ObjDailyAttData.getAttribute("CANCELED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
            //============================================//

            String docDate = EITLERPGLOBAL.formatDate(ObjDailyAttData.getAttribute("DOC_DATE").getString());
            String docNo = ObjDailyAttData.getAttribute("DOC_NO").getString();
            String attDate = EITLERPGLOBAL.formatDate(ObjDailyAttData.getAttribute("ATT_DATE").getString());
            String attDept = ObjDailyAttData.getAttribute("ATT_DEPT").getString();
            String attShift = ObjDailyAttData.getAttribute("ATT_SHIFT").getString();

            lblTitle.setText("Daily Attandance Form (Regular) - " + docNo);
            lblRevNo.setText(Integer.toString((int) ObjDailyAttData.getAttribute("REVISION_NO").getVal()));

            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) ObjDailyAttData.getAttribute("HIERARCHY_ID").getVal());
            DoNotEvaluate = true;

            //GenerateHierarchyCombo();
            txtDocDate.setText(docDate);
            txtDocNo.setText(docNo);
            txtAttDate.setText(attDate);
//            EITLERPGLOBAL.setComboIndex(cmbDept, Integer.parseInt(attDept));
            cmbDept.setSelectedItem(attDept);
            cmbShift.setSelectedItem(attShift);

            FormatGrid();

            //Now Generate Table
            for (int i = 1; i <= ObjDailyAttData.hmDailyAttDataDetails.size(); i++) {
                clsDailyAttDataFormDetails ObjDailyAttDataDetails = (clsDailyAttDataFormDetails) ObjDailyAttData.hmDailyAttDataDetails.get(Integer.toString(i));

                Object[] rowData = new Object[50];

                rowData[0] = ObjDailyAttDataDetails.getAttribute("SR_NO").getString();
                rowData[1] = ObjDailyAttDataDetails.getAttribute("EMP_ID").getString();
                rowData[2] = ObjDailyAttDataDetails.getAttribute("EMP_NAME").getString();
                rowData[3] = ObjDailyAttDataDetails.getAttribute("PUNCH_TIME").getString();
                rowData[4] = ObjDailyAttDataDetails.getAttribute("EMP_REMARK").getString();

                if (ObjDailyAttDataDetails.getAttribute("EMP_PRESENT").getString().equalsIgnoreCase("1")) {
                    rowData[5] = true;
                } else {
                    rowData[5] = false;
                }
                if (ObjDailyAttDataDetails.getAttribute("EMP_ABSENT").getString().equalsIgnoreCase("1")) {
                    rowData[6] = true;
                } else {
                    rowData[6] = false;
                }
                if (ObjDailyAttDataDetails.getAttribute("EMP_EXCESS").getString().equalsIgnoreCase("1")) {
                    rowData[7] = true;
                } else {
                    rowData[7] = false;
                }

                rowData[8] = ObjDailyAttDataDetails.getAttribute("EMP_DEPT").getString();
                rowData[9] = ObjDailyAttDataDetails.getAttribute("EMP_MAIN_CATEGORY").getString();
                rowData[10] = ObjDailyAttDataDetails.getAttribute("EMP_SUB_CATEGORY").getString();
                rowData[11] = ObjDailyAttDataDetails.getAttribute("EMP_SHIFT").getString();

//                if (ObjDailyAttDataDetails.getAttribute("EMP_CL").getString().equalsIgnoreCase("1")) {
//                    rowData[11] = true;
//                } else {
//                    rowData[11] = false;
//                }
//                if (ObjDailyAttDataDetails.getAttribute("EMP_PL").getString().equalsIgnoreCase("1")) {
//                    rowData[12] = true;
//                } else {
//                    rowData[12] = false;
//                }
//                if (ObjDailyAttDataDetails.getAttribute("EMP_ESI").getString().equalsIgnoreCase("1")) {
//                    rowData[13] = true;
//                } else {
//                    rowData[13] = false;
//                }
                DataModel.addRow(rowData);
            }
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 60; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 10, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }

            //======== Generating Grid for Excess List ========//
            GenerateExcessList();
            //=================================================//

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList = new HashMap();

            hmList = SDMLATTPAY.ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, 837, docNo);
            for (int i = 1; i <= hmList.size(); i++) {
                //clsDocFlow is collection class used for holding approval flow data
                clsDocFlow ObjFlow = (clsDocFlow) hmList.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3] = ObjFlow.getAttribute("STATUS").getString();
                rowData[4] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString());
                rowData[5] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString());
                rowData[6] = ObjFlow.getAttribute("REMARKS").getString();

                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//

            // Generating Grid for Showing Production Details Update History
            FormatGridUpdateHistory();
            HashMap hmApprovalHistory = clsDailyAttDataForm.getHistoryList(txtDocNo.getText());
            for (int i = 1; i <= hmApprovalHistory.size(); i++) {
                clsDailyAttDataForm ObjDailyAttData = (clsDailyAttDataForm) hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjDailyAttData.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(2, (int) ObjDailyAttData.getAttribute("UPDATED_BY").getVal());
                rowData[2] = ObjDailyAttData.getAttribute("ENTRY_DATE").getString();

                String ApprovalStatus = "";

                if ((ObjDailyAttData.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                if ((ObjDailyAttData.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjDailyAttData.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                    FinalApprovedBy = (int) ObjDailyAttData.getAttribute("UPDATED_BY").getVal();
                }

                if ((ObjDailyAttData.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjDailyAttData.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjDailyAttData.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjDailyAttData.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjDailyAttData.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjDailyAttData.getAttribute("FROM_IP").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DoNotEvaluate = false;
    }

    private void FormatGrid() {
        try {
            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            Table.setAutoResizeMode(0);
            EITLTableCellRenderer RendererPresent = new EITLTableCellRenderer();
            EITLTableCellRenderer RendererAbsent = new EITLTableCellRenderer();
            EITLTableCellRenderer RendererExcess = new EITLTableCellRenderer();
//            EITLTableCellRenderer RendererCL = new EITLTableCellRenderer();
//            EITLTableCellRenderer RendererPL = new EITLTableCellRenderer();
//            EITLTableCellRenderer RendererESI = new EITLTableCellRenderer();

            DataModel.addColumn("Sr.");
            DataModel.addColumn("Emp ID");
            DataModel.addColumn("Emp Name");
            DataModel.addColumn("Time");
            DataModel.addColumn("Remark");
            DataModel.addColumn("Present");
            DataModel.addColumn("Absent");
            DataModel.addColumn("Excess");
            DataModel.addColumn("Department");
            DataModel.addColumn("Category");
            DataModel.addColumn("Sub Category");
            DataModel.addColumn("Emp Shift");
//            DataModel.addColumn("C.L.");
//            DataModel.addColumn("P.L.");
//            DataModel.addColumn("E.S.I.");

            RendererPresent.setCustomComponent(5, "CheckBox");
            Table.getColumnModel().getColumn(5).setCellRenderer(RendererPresent);
            Table.getColumnModel().getColumn(5).setCellEditor(new DefaultCellEditor(new JCheckBox()));

            RendererAbsent.setCustomComponent(6, "CheckBox");
            Table.getColumnModel().getColumn(6).setCellRenderer(RendererAbsent);
            Table.getColumnModel().getColumn(6).setCellEditor(new DefaultCellEditor(new JCheckBox()));

            RendererExcess.setCustomComponent(7, "CheckBox");
            Table.getColumnModel().getColumn(7).setCellRenderer(RendererExcess);
            Table.getColumnModel().getColumn(7).setCellEditor(new DefaultCellEditor(new JCheckBox()));

//            RendererCL.setCustomComponent(10, "CheckBox");
//            Table.getColumnModel().getColumn(10).setCellRenderer(RendererCL);
//            Table.getColumnModel().getColumn(10).setCellEditor(new DefaultCellEditor(new JCheckBox()));
//
//            RendererPL.setCustomComponent(11, "CheckBox");
//            Table.getColumnModel().getColumn(11).setCellRenderer(RendererPL);
//            Table.getColumnModel().getColumn(11).setCellEditor(new DefaultCellEditor(new JCheckBox()));
//
//            RendererESI.setCustomComponent(12, "CheckBox");
//            Table.getColumnModel().getColumn(12).setCellRenderer(RendererESI);
//            Table.getColumnModel().getColumn(12).setCellEditor(new DefaultCellEditor(new JCheckBox()));
            DataModel.SetVariable(0, "SR_NO");
            DataModel.SetVariable(1, "EMP_ID");
            DataModel.SetVariable(2, "EMP_NAME");
            DataModel.SetVariable(3, "PUNCH_TIME");
            DataModel.SetVariable(4, "EMP_REMARK");
            DataModel.SetVariable(5, "EMP_PRESENT");
            DataModel.SetVariable(6, "EMP_ABSENT");
            DataModel.SetVariable(7, "EMP_EXCESS");
            DataModel.SetVariable(8, "EMP_DEPT");
            DataModel.SetVariable(9, "EMP_MAIN_CATEGORY");
            DataModel.SetVariable(10, "EMP_SUB_CATEGORY");
            DataModel.SetVariable(11, "EMP_SHIFT");
//            DataModel.SetVariable(11, "EMP_CL");
//            DataModel.SetVariable(12, "EMP_PL");
//            DataModel.SetVariable(13, "EMP_ESI");

            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(1);
            DataModel.SetReadOnly(2);
            DataModel.SetReadOnly(3);
            DataModel.SetReadOnly(8);
            DataModel.SetReadOnly(9);
            DataModel.SetReadOnly(10);
            DataModel.SetReadOnly(11);

            Table.getColumnModel().getColumn(0).setMinWidth(50);
            Table.getColumnModel().getColumn(0).setMaxWidth(50);
            Table.getColumnModel().getColumn(1).setMinWidth(80);
//            Table.getColumnModel().getColumn(1).setMaxWidth(80);
            Table.getColumnModel().getColumn(2).setMinWidth(120);
//            Table.getColumnModel().getColumn(2).setMaxWidth(120);
            Table.getColumnModel().getColumn(3).setMinWidth(120);
//            Table.getColumnModel().getColumn(3).setMaxWidth(120);
            Table.getColumnModel().getColumn(4).setMinWidth(120);
//            Table.getColumnModel().getColumn(4).setMaxWidth(120);
            Table.getColumnModel().getColumn(5).setMinWidth(60);
//            Table.getColumnModel().getColumn(5).setMaxWidth(60);
            Table.getColumnModel().getColumn(6).setMinWidth(60);
//            Table.getColumnModel().getColumn(6).setMaxWidth(60);
            Table.getColumnModel().getColumn(7).setMinWidth(60);
//            Table.getColumnModel().getColumn(7).setMaxWidth(60);
            Table.getColumnModel().getColumn(8).setMinWidth(120);
//            Table.getColumnModel().getColumn(8).setMaxWidth(120);
            Table.getColumnModel().getColumn(9).setMinWidth(100);
//            Table.getColumnModel().getColumn(9).setMaxWidth(100);
            Table.getColumnModel().getColumn(10).setMinWidth(100);
////            Table.getColumnModel().getColumn(10).setMaxWidth(100);
            Table.getColumnModel().getColumn(11).setMinWidth(60);
////            Table.getColumnModel().getColumn(11).setMaxWidth(60);
//            Table.getColumnModel().getColumn(11).setMinWidth(60);
////            Table.getColumnModel().getColumn(11).setMaxWidth(60);
//            Table.getColumnModel().getColumn(12).setMinWidth(60);
////            Table.getColumnModel().getColumn(12).setMaxWidth(60);
//            Table.getColumnModel().getColumn(13).setMinWidth(60);
////            Table.getColumnModel().getColumn(13).setMaxWidth(60);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=837 ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=837 ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = SDMLATTPAY.ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, 837, ObjDailyAttData.getAttribute("DOC_NO").getString());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, 837, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, 837, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }

        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = SDMLATTPAY.ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, 837, txtDocNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }

    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
         if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
         cmbHierarchy.setEnabled(true);
         }else {
         cmbHierarchy.setEnabled(false);
         }*/

        // select hold for default approval
        OpgHold.setSelected(true);
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            int FromUserID = SDMLATTPAY.ApprovalFlow.getFromID(EITLERPGLOBAL.gCompanyID, 837, ObjDailyAttData.getAttribute("DOC_NO").getString());
            lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = SDMLATTPAY.ApprovalFlow.getFromRemarks(EITLERPGLOBAL.gCompanyID, 837, FromUserID, ObjDailyAttData.getAttribute("DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (SDMLATTPAY.ApprovalFlow.IsCreator(837, txtDocNo.getText())) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10083, 100831)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10083, 100832)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10083, 100833)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10083, 100835)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = 837;
        aList.FirstFreeNo = 347;

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        FormatGrid();

        SelPrefix = aList.Prefix; //Selected Prefix;
        SelSuffix = aList.Suffix;
        FFNo = aList.FirstFreeNo;

        SetupApproval();
        //Display newly generated document no.
        txtDocNo.setText(clsDailyAttDataForm.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 837, FFNo, false));
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());

        lblTitle.setText("Daily Attandance Form (Regular) - " + txtDocNo.getText());
        lblTitle.setBackground(Color.GRAY);

        txtAttDate.setEnabled(true);
        cmbDept.setEnabled(false);
        cmbShift.setEnabled(false);
    }

    private void Edit() {
        String productionDocumentNo = (String) ObjDailyAttData.getAttribute("DOC_NO").getObj();
        if (ObjDailyAttData.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();

            if (SDMLATTPAY.ApprovalFlow.IsCreator(837, productionDocumentNo)) {
                SetFields(true);
            } else {
                EnableApproval();
            }
            txtAttDate.setEnabled(false);
            cmbDept.setEnabled(false);
            cmbShift.setEnabled(false);
//            Table.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(frmDailyAttDataForm.this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "EDITING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {
        if (ObjDailyAttData.CanDelete(txtDocNo.getText(), txtDocDate.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmDailyAttDataForm.this, ObjDailyAttData.LastError, "DELETION ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Save() {
        String docNo, docDate, attDate, attDept, attShift;
        int i = 0, j = 0;
        docDate = txtDocDate.getText().trim();
        docNo = txtDocNo.getText().trim();
        attDate = txtAttDate.getText().trim();
//        attDept = Integer.toString(cmbDept.getSelectedIndex());
        attDept = cmbDept.getSelectedItem().toString();
        attShift = cmbShift.getSelectedItem().toString();

        if (txtAttDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(frmDailyAttDataForm.this, "Select the Att Date.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (cmbDept.getSelectedItem().equals("Select Dept")) {
            JOptionPane.showMessageDialog(frmDailyAttDataForm.this, "Select the Department.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (cmbShift.getSelectedItem().equals("Select Shift")) {
            JOptionPane.showMessageDialog(frmDailyAttDataForm.this, "Select the Shift.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Check the no. of items in table
        if (Table.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(frmDailyAttDataForm.this, "Enter Attendance Details Before Saving.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // check duplicate employee no in table
            for (int k = 0; k <= Table.getRowCount() - 1; k++) {
                for (int l = k; l <= Table.getRowCount() - 1; l++) {
                    if (l != k && ((String) Table.getValueAt(k, 1)).trim().equals(((String) Table.getValueAt(l, 1)).trim())) {
                        JOptionPane.showMessageDialog(this, "Same Emp ID at Row " + (k + 1) + " and " + (l + 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }

            // check UnTicked row in table
            for (int k = 0; k <= Table.getRowCount() - 1; k++) {
                if ((Boolean) Table.getValueAt(k, 5).equals(false) && (Boolean) Table.getValueAt(k, 6).equals(false) && (Boolean) Table.getValueAt(k, 7).equals(false)) {
                    JOptionPane.showMessageDialog(this, "Please Tick on Attendance Type at Row " + (k + 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            ObjDailyAttData.hmDailyAttDataDetails.clear();
            //Check the entered details in Table.
            for (i = 0; i <= Table.getRowCount() - 1; i++) {

                clsDailyAttDataFormDetails ObjDailyAttDataDetails = new clsDailyAttDataFormDetails();

                ObjDailyAttDataDetails.setAttribute("SR_NO", DataModel.getValueByVariable("SR_NO", i));
                ObjDailyAttDataDetails.setAttribute("EMP_ID", DataModel.getValueByVariable("EMP_ID", i));
                ObjDailyAttDataDetails.setAttribute("EMP_NAME", DataModel.getValueByVariable("EMP_NAME", i));
                ObjDailyAttDataDetails.setAttribute("PUNCH_TIME", DataModel.getValueByVariable("PUNCH_TIME", i));
                ObjDailyAttDataDetails.setAttribute("EMP_REMARK", DataModel.getValueByVariable("EMP_REMARK", i));

//                if (DataModel.getValueByVariable("EMP_PRESENT", i).toLowerCase().equals("true")) {
                if (DataModel.getBoolValueByVariable("EMP_PRESENT", i)) {
                    ObjDailyAttDataDetails.setAttribute("EMP_PRESENT", "1");
                } else {
                    ObjDailyAttDataDetails.setAttribute("EMP_PRESENT", "0");
                }
//                if (DataModel.getValueByVariable("EMP_ABSENT", i).toLowerCase().equals("true")) {
                if (DataModel.getBoolValueByVariable("EMP_ABSENT", i)) {
                    ObjDailyAttDataDetails.setAttribute("EMP_ABSENT", "1");
                } else {
                    ObjDailyAttDataDetails.setAttribute("EMP_ABSENT", "0");
                }
//                if (DataModel.getValueByVariable("EMP_EXCESS", i).toLowerCase().equals("true")) {
                if (DataModel.getBoolValueByVariable("EMP_EXCESS", i)) {
                    ObjDailyAttDataDetails.setAttribute("EMP_EXCESS", "1");
                } else {
                    ObjDailyAttDataDetails.setAttribute("EMP_EXCESS", "0");
                }

                ObjDailyAttDataDetails.setAttribute("EMP_DEPT", DataModel.getValueByVariable("EMP_DEPT", i));
                ObjDailyAttDataDetails.setAttribute("EMP_MAIN_CATEGORY", DataModel.getValueByVariable("EMP_MAIN_CATEGORY", i));
                ObjDailyAttDataDetails.setAttribute("EMP_SUB_CATEGORY", DataModel.getValueByVariable("EMP_SUB_CATEGORY", i));
                ObjDailyAttDataDetails.setAttribute("EMP_SHIFT", DataModel.getValueByVariable("EMP_SHIFT", i));

//                if (DataModel.getValueByVariable("EMP_CL", i).toLowerCase().equals("true")) {
//                    ObjDailyAttDataDetails.setAttribute("EMP_CL", "1");
//                } else {
//                    ObjDailyAttDataDetails.setAttribute("EMP_CL", "0");
//                }
//                if (DataModel.getValueByVariable("EMP_PL", i).toLowerCase().equals("true")) {
//                    ObjDailyAttDataDetails.setAttribute("EMP_PL", "1");
//                } else {
//                    ObjDailyAttDataDetails.setAttribute("EMP_PL", "0");
//                }
//                if (DataModel.getValueByVariable("EMP_ESI", i).toLowerCase().equals("true")) {
//                    ObjDailyAttDataDetails.setAttribute("EMP_ESI", "1");
//                } else {
//                    ObjDailyAttDataDetails.setAttribute("EMP_ESI", "0");
//                }
                ObjDailyAttData.hmDailyAttDataDetails.put(Integer.toString(ObjDailyAttData.hmDailyAttDataDetails.size() + 1), ObjDailyAttDataDetails);
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(frmDailyAttDataForm.this, "Enter Correct Details at Row " + (i + 1) + " and Column " + (j + 1) + ". Error is " + nfe.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            j = 0;
            nfe.printStackTrace();
            return;
        }

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(frmDailyAttDataForm.this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(frmDailyAttDataForm.this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(frmDailyAttDataForm.this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(frmDailyAttDataForm.this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //set data for insert/update
        ObjDailyAttData.setAttribute("DOC_DATE", docDate);
        ObjDailyAttData.setAttribute("DOC_NO", docNo);
        ObjDailyAttData.setAttribute("ATT_DATE", attDate);
        ObjDailyAttData.setAttribute("ATT_DEPT", attDept);
        ObjDailyAttData.setAttribute("ATT_SHIFT", attShift);
        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjDailyAttData.Insert()) {
                if (OpgFinal.isSelected()) {
                    data.Execute("INSERT INTO SDMLATTPAY.DAILY_ATT_FORM_EXCESS_LIST (DOC_NO, DOC_DATE, ATT_DATE, ATT_DEPT, ATT_SHIFT, EMP_ID, EMP_NAME, EMP_DEPT, EMP_MAIN_CATEGORY, EMP_SUB_CATEGORY, PUNCH_TIME, EMP_REMARK) SELECT DOC_NO, DOC_DATE, ATT_DATE, ATT_DEPT, ATT_SHIFT, EMP_ID, EMP_NAME, EMP_DEPT, EMP_MAIN_CATEGORY, EMP_SUB_CATEGORY, PUNCH_TIME, EMP_REMARK FROM SDMLATTPAY.DAILY_ATT_FORM_DATA WHERE DOC_NO='" + txtDocNo.getText().trim() + "' AND EMP_EXCESS=1");
//                    data.Execute("UPDATE SDMLATTPAY.DAILY_ATT_FORM_EXCESS_LIST E, SDMLATTPAY.DAILY_ATT_FORM_DATA F SET E.ASSIGNED_IND=1,ASSIGNED_DEPT=F.ATT_DEPT,E.ASSIGNED_REMARK=F.EMP_REMARK WHERE E.EMP_ID=F.EMP_ID AND E.ATT_DATE=F.ATT_DATE AND E.ASSIGNED_IND=0 AND F.EMP_EXCESS=0 AND F.DOC_NO='" + txtDocNo.getText().trim() + "' ");
                    String pDay = data.getStringValueFromDB("SELECT DAY('" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "') FROM DUAL");
//                    data.Execute("UPDATE SDMLATTPAY.DAILY_ATT_FORM_DATA, SDMLATTPAY.ATT_SHIFT_SCHEDULE SET SSC_" + pDay + "=ATT_SHIFT WHERE YEAR(ATT_DATE)=SSC_YEAR AND MONTH(ATT_DATE)=SSC_MONTH AND EMP_ID=SSC_EMPID AND ATT_DATE='" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' AND APPROVED=1 AND CANCELED=0 AND EMP_PRESENT=1 AND EMP_ID NOT IN (SELECT EMP_ID FROM SDMLATTPAY.DAILY_ATT_FORM_EXCESS_LIST WHERE ASSIGNED_IND=1 AND ATT_DATE='" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' )");
                    data.Execute("UPDATE SDMLATTPAY.DAILY_ATT_FORM_DATA, SDMLATTPAY.ATT_SHIFT_SCHEDULE SET SSC_" + pDay + "=ATT_SHIFT WHERE YEAR(ATT_DATE)=SSC_YEAR AND MONTH(ATT_DATE)=SSC_MONTH AND EMP_ID=SSC_EMPID AND ATT_DATE='" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' AND APPROVED=1 AND CANCELED=0 AND EMP_PRESENT=1 AND EMP_ID NOT IN (SELECT EMP_ID FROM SDMLATTPAY.DAILY_ATT_FORM_EXCESS_LIST WHERE ATT_DATE='" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' )");
                    data.Execute("UPDATE SDMLATTPAY.DAILY_ATT_FORM_DATA, SDMLATTPAY.ATT_SHIFT_SCHEDULE SET SSC_" + pDay + "=ATT_SHIFT WHERE YEAR(ATT_DATE)=SSC_YEAR AND MONTH(ATT_DATE)=SSC_MONTH AND EMP_ID=SSC_EMPID AND ATT_DATE='" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' AND APPROVED=1 AND CANCELED=0 AND EMP_EXCESS=1 ");

                    if (data.IsRecordExist("SELECT * FROM SDMLATTPAY.DAILY_ATT_FORM_EXCESS_LIST E, SDMLATTPAY.DAILY_ATT_FORM_DATA F WHERE E.EMP_ID=F.EMP_ID AND E.ATT_DATE=F.ATT_DATE AND E.ASSIGNED_IND=0 AND F.EMP_EXCESS=0 AND F.DOC_NO='" + txtDocNo.getText().trim() + "' ")) {
                        ExcessManpower();
                    }
                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(frmDailyAttDataForm.this, "Error occured while saving. Error is " + ObjDailyAttData.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjDailyAttData.Update()) {
                if (OpgFinal.isSelected()) {
                    data.Execute("INSERT INTO SDMLATTPAY.DAILY_ATT_FORM_EXCESS_LIST (DOC_NO, DOC_DATE, ATT_DATE, ATT_DEPT, ATT_SHIFT, EMP_ID, EMP_NAME, EMP_DEPT, EMP_MAIN_CATEGORY, EMP_SUB_CATEGORY, PUNCH_TIME, EMP_REMARK) SELECT DOC_NO, DOC_DATE, ATT_DATE, ATT_DEPT, ATT_SHIFT, EMP_ID, EMP_NAME, EMP_DEPT, EMP_MAIN_CATEGORY, EMP_SUB_CATEGORY, PUNCH_TIME, EMP_REMARK FROM SDMLATTPAY.DAILY_ATT_FORM_DATA WHERE DOC_NO='" + txtDocNo.getText().trim() + "' AND EMP_EXCESS=1");
//                    data.Execute("UPDATE SDMLATTPAY.DAILY_ATT_FORM_EXCESS_LIST E, SDMLATTPAY.DAILY_ATT_FORM_DATA F SET E.ASSIGNED_IND=1,ASSIGNED_DEPT=F.ATT_DEPT,E.ASSIGNED_REMARK=F.EMP_REMARK WHERE E.EMP_ID=F.EMP_ID AND E.ATT_DATE=F.ATT_DATE AND E.ASSIGNED_IND=0 AND F.EMP_EXCESS=0 AND F.DOC_NO='" + txtDocNo.getText().trim() + "' ");
                    String pDay = data.getStringValueFromDB("SELECT DAY('" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "') FROM DUAL");
//                    data.Execute("UPDATE SDMLATTPAY.DAILY_ATT_FORM_DATA, SDMLATTPAY.ATT_SHIFT_SCHEDULE SET SSC_" + pDay + "=ATT_SHIFT WHERE YEAR(ATT_DATE)=SSC_YEAR AND MONTH(ATT_DATE)=SSC_MONTH AND EMP_ID=SSC_EMPID AND ATT_DATE='" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' AND APPROVED=1 AND CANCELED=0 AND EMP_PRESENT=1 AND EMP_ID NOT IN (SELECT EMP_ID FROM SDMLATTPAY.DAILY_ATT_FORM_EXCESS_LIST WHERE ASSIGNED_IND=1 AND ATT_DATE='" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' )");
                    data.Execute("UPDATE SDMLATTPAY.DAILY_ATT_FORM_DATA, SDMLATTPAY.ATT_SHIFT_SCHEDULE SET SSC_" + pDay + "=ATT_SHIFT WHERE YEAR(ATT_DATE)=SSC_YEAR AND MONTH(ATT_DATE)=SSC_MONTH AND EMP_ID=SSC_EMPID AND ATT_DATE='" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' AND APPROVED=1 AND CANCELED=0 AND EMP_PRESENT=1 AND EMP_ID NOT IN (SELECT EMP_ID FROM SDMLATTPAY.DAILY_ATT_FORM_EXCESS_LIST WHERE ATT_DATE='" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' )");
                    data.Execute("UPDATE SDMLATTPAY.DAILY_ATT_FORM_DATA, SDMLATTPAY.ATT_SHIFT_SCHEDULE SET SSC_" + pDay + "=ATT_SHIFT WHERE YEAR(ATT_DATE)=SSC_YEAR AND MONTH(ATT_DATE)=SSC_MONTH AND EMP_ID=SSC_EMPID AND ATT_DATE='" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' AND APPROVED=1 AND CANCELED=0 AND EMP_EXCESS=1 ");

                    if (data.IsRecordExist("SELECT * FROM SDMLATTPAY.DAILY_ATT_FORM_EXCESS_LIST E, SDMLATTPAY.DAILY_ATT_FORM_DATA F WHERE E.EMP_ID=F.EMP_ID AND E.ATT_DATE=F.ATT_DATE AND E.ASSIGNED_IND=0 AND F.EMP_EXCESS=0 AND F.DOC_NO='" + txtDocNo.getText().trim() + "' ")) {
                        ExcessManpower();
                    }
                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(frmDailyAttDataForm.this, "Error occured while saving editing. Error is " + ObjDailyAttData.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Sets data to the Details Class Object
    private void SetData() {
        //-------- Update Approval Specific Fields -----------//
        ObjDailyAttData.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjDailyAttData.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjDailyAttData.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjDailyAttData.setAttribute("FROM_REMARKS", txtToRemarks.getText().trim());
        ObjDailyAttData.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);

        //ObjDailyAttData.setAttribute("UPDATED_BY",EITLERPGLOBAL.gNewUserID);
        if (OpgApprove.isSelected()) {
            ObjDailyAttData.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjDailyAttData.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjDailyAttData.setAttribute("APPROVAL_STATUS", "R");
            ObjDailyAttData.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            ObjDailyAttData.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjDailyAttData.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            ObjDailyAttData.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        } else {
            //ObjDailyAttData.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            //ObjDailyAttData.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
            ObjDailyAttData.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            ObjDailyAttData.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        }
    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "SDMLATTPAY.DailyAttDataForm.frmFindDailyAttDataForm", true);
        frmFindDailyAttDataForm ObjFindDailyAttData = (frmFindDailyAttDataForm) ObjLoader.getObj();

        if (ObjFindDailyAttData.Cancelled == false) {
            if (!ObjDailyAttData.Filter(ObjFindDailyAttData.stringFindQuery)) {
                JOptionPane.showMessageDialog(frmDailyAttDataForm.this, " No records found.", "Find Daily Attendance Data Details", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    // find details by production date
    public void Find(String docNo) {
        ObjDailyAttData.Filter(" AND DOC_NO='" + docNo + "' ");
        SetMenuForRights();
        DisplayData();
    }

    // find all pending document
    public void FindWaiting() {
        ObjDailyAttData.Filter(" AND DOC_NO IN (SELECT DISTINCT MA.DOC_NO FROM SDMLATTPAY.DAILY_ATT_FORM_DATA MA, SDMLATTPAY.D_COM_DOC_DATA D WHERE MA.DOC_NO=D.DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=837 AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void MoveFirst() {
        ObjDailyAttData.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        ObjDailyAttData.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        ObjDailyAttData.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        ObjDailyAttData.MoveLast();
        DisplayData();
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(" " + pMessage);
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Tab1.getComponentCount() - 1; i++) {
            if (Tab1.getComponent(i).getName() != null) {

                FieldName = Tab1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    Tab1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//

        //=============== Setting Table Fields ==================//
//        DataModel.ClearAllReadOnly();
//        Table.setEnabled(false);
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From Ip");
    }

    private void UpdateSrNo() {
        int SrCol = DataModel.getColFromVariable("SR_NO");

        for (int i = 0; i < Table.getRowCount(); i++) {
            Table.setValueAt(Integer.toString(i + 1), i, SrCol);
        }
    }

    private void GenerateEmpList_OLD() {
        if (data.IsRecordExist("SELECT * FROM SDMLATTPAY.DAILY_ATT_FORM_DATA WHERE ATT_DATE = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' AND ATT_DEPT = '" + cmbDept.getSelectedItem().toString() + "' AND ATT_SHIFT = '" + cmbShift.getSelectedItem().toString() + "' AND APPROVED=0 AND DOC_NO != '" + txtDocNo.getText().trim() + "' ")) {
            JOptionPane.showMessageDialog(this, "Please Final Approve previous generated document.");
            Cancel();
            return;
        }
        try {
            FormatGrid(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

//            strSQL = "SELECT * FROM ( SELECT * FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM "
//                    + "AND (EMPID LIKE ('BRD30%') OR EMPID LIKE ('BRD40%') OR EMPID LIKE ('BRD00%')) "
//                    + "AND PUNCHDATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
//                    //                    + "AND TRIM(ALL_PUNCHES) != '' "
//                    + "AND SHIFT= " + cmbShift.getSelectedItem() + "  ) AS DAS "
//                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
//                    + "ON DAS.EMPID=EMP.PAY_EMP_NO "
//                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
//                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
//                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
//                    + "ON SEC.SECID=DAS.MAIN_CATEGORY "
//                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
//                    + "ON CTG.CTGID=DAS.CATEGORY "
//                    + "WHERE EMP_DEPARTMENT= " + cmbDept.getSelectedIndex() + "  "
//                    + " ORDER BY EMPID ";
            String mch_no_cndtn = "";
            if (cmbDept.getSelectedItem().equals("WEAVING")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12','20','12,20') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('17%') OR COALESCE(REMARK,'') LIKE ('20%')) ";
            }
            if (cmbDept.getSelectedItem().equals("YARN STORE")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12','20','12,20') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('17%') OR COALESCE(REMARK,'') LIKE ('20%')) ";
            }
            if (cmbDept.getSelectedItem().equals("MENDING")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12','20','12,20') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('17%') OR COALESCE(REMARK,'') LIKE ('20%')) ";
            }
            if (cmbDept.getSelectedItem().equals("NEEDLING")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12','21','12,21') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('17%') OR COALESCE(REMARK,'') LIKE ('21%')) ";
            }
            if (cmbDept.getSelectedItem().equals("FINISHING")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12','15','19','12,15','12,19','15,19','12,15,19') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('15%') OR COALESCE(REMARK,'') LIKE ('17%') OR COALESCE(REMARK,'') LIKE ('19%')) ";
            }
            if (cmbDept.getSelectedItem().equals("CARDING")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12','15','19','12,15','12,19','15,19','12,15,19') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('15%') OR COALESCE(REMARK,'') LIKE ('17%') OR COALESCE(REMARK,'') LIKE ('19%')) ";
            }
            if (cmbDept.getSelectedItem().equals("WAREHOUSE")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12','18','12,18') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('17%') OR COALESCE(REMARK,'') LIKE ('18%')) ";
            }
            if (cmbDept.getSelectedItem().equals("ENGINEERING")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12','16','12,16') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('16%') OR COALESCE(REMARK,'') LIKE ('17%')) ";
            }
            if (cmbDept.getSelectedItem().equals("RMG")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('17%')) ";
            }
            if (cmbDept.getSelectedItem().equals("SECURITY")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('17%')) ";
            }
            if (cmbDept.getSelectedItem().equals("STORES")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('17%')) ";
            }
            if (cmbDept.getSelectedItem().equals("PEONS")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('17%')) ";
            }

            if (data.IsRecordExist("SELECT * FROM SDMLATTPAY.DAILY_ATT_FORM_DATA WHERE ATT_DATE = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' AND ATT_DEPT = '" + cmbDept.getSelectedItem().toString() + "' AND ATT_SHIFT = '" + cmbShift.getSelectedItem().toString() + "' AND APPROVED=1 AND DOC_NO != '" + txtDocNo.getText().trim() + "' ")) {
                strSQL = "SELECT * FROM ( SELECT * FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM "
                        + "AND (EMPID LIKE ('BRD30%') OR EMPID LIKE ('BRD40%') OR EMPID LIKE ('BRD00%')) ";
//                if (cmbShift.getSelectedItem().toString().equals("3")) {
//                    strSQL += "AND PUNCHDATE>= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
//                            + "AND TRIM(ALL_PUNCHES) != '' "
//                            + "AND SHIFT= " + cmbShift.getSelectedItem() + " ";
//                } else {
//                    strSQL += "AND PUNCHDATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
//                            + "AND TRIM(ALL_PUNCHES) != '' "
//                            + "AND SHIFT= " + cmbShift.getSelectedItem() + " ";
//                }
                strSQL += "AND PUNCHDATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                        + "AND TRIM(ALL_PUNCHES) != '' "
                        + "AND SHIFT= " + cmbShift.getSelectedItem() + " ";
                strSQL += " ) AS DAS "
                        + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                        + "ON DAS.EMPID=EMP.PAY_EMP_NO "
                        + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                        + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                        + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                        + "ON SEC.SECID=DAS.MAIN_CATEGORY "
                        + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                        + "ON CTG.CTGID=DAS.CATEGORY "
                        + "WHERE EMP_DEPARTMENT IN (SELECT CONVERT(DPTID,CHAR (8)) AS DPTID FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER "
                        + "WHERE TRIM(ERP_DEPT)='" + cmbDept.getSelectedItem() + "' GROUP BY ERP_DEPT) "
                        + "AND EMPID NOT IN (SELECT EMP_ID FROM SDMLATTPAY.DAILY_ATT_FORM_DATA WHERE ATT_DATE = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' AND ATT_DEPT = '" + cmbDept.getSelectedItem().toString() + "' AND ATT_SHIFT = '" + cmbShift.getSelectedItem().toString() + "' AND APPROVED=1 AND (EMP_PRESENT=1 OR EMP_EXCESS=1) ) "
                        + mch_no_cndtn
                        + " ORDER BY EMPID ";
            } else {
                strSQL = "SELECT * FROM ( SELECT * FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM "
                        + "AND (EMPID LIKE ('BRD30%') OR EMPID LIKE ('BRD40%') OR EMPID LIKE ('BRD00%')) ";
//                if (cmbShift.getSelectedItem().toString().equals("3")) {
//                    strSQL += "AND PUNCHDATE>= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
//                            //                            + "AND TRIM(ALL_PUNCHES) != '' "
//                            + "AND SHIFT= " + cmbShift.getSelectedItem() + " ";
//                } else {
//                    strSQL += "AND PUNCHDATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
//                            //                            + "AND TRIM(ALL_PUNCHES) != '' "
//                            + "AND SHIFT= " + cmbShift.getSelectedItem() + " ";
//                }
                strSQL += "AND PUNCHDATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                        //                            + "AND TRIM(ALL_PUNCHES) != '' "
                        + "AND SHIFT= " + cmbShift.getSelectedItem() + " ";
                strSQL += " ) AS DAS "
                        + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                        + "ON DAS.EMPID=EMP.PAY_EMP_NO "
                        + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                        + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                        + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                        + "ON SEC.SECID=DAS.MAIN_CATEGORY "
                        + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                        + "ON CTG.CTGID=DAS.CATEGORY "
                        + "WHERE EMP_DEPARTMENT IN (SELECT CONVERT(DPTID,CHAR (8)) AS DPTID FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER "
                        + "WHERE TRIM(ERP_DEPT)='" + cmbDept.getSelectedItem() + "' GROUP BY ERP_DEPT) "
                        + mch_no_cndtn
                        + " ORDER BY EMPID ";
            }

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[50];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("ALL_PUNCHES");
                    rowData[4] = "";
                    if (!rsTmp.getString("ALL_PUNCHES").trim().equals("")) {
                        rowData[5] = true;
                        rowData[6] = false;
                    } else {
                        rowData[5] = false;
                        rowData[6] = true;
                    }
                    rowData[7] = false;
                    rowData[8] = rsTmp.getString("DPTNAME");
                    rowData[9] = rsTmp.getString("SECNAME");
                    rowData[10] = rsTmp.getString("CTGNAME");
                    rowData[11] = rsTmp.getString("SHIFT");

//                    rowData[9] = false;
//                    rowData[10] = false;
//                    rowData[11] = false;
//                    rowData[12] = false;
//                    rowData[13] = false;
                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatExcessGrid() {
        try {
            DataModelExcess = new EITLTableModel();
            TableExcess.removeAll();

            TableExcess.setModel(DataModelExcess);
            TableExcess.setAutoResizeMode(0);

            DataModelExcess.addColumn("Sr.");
            DataModelExcess.addColumn("Emp ID");
            DataModelExcess.addColumn("Emp Name");
            DataModelExcess.addColumn("Time");
            DataModelExcess.addColumn("Excess Remark");
            DataModelExcess.addColumn("Assigned");
            DataModelExcess.addColumn("Assigned Dept");
            DataModelExcess.addColumn("Assigned Remark");
            DataModelExcess.addColumn("Department");
            DataModelExcess.addColumn("Category");
            DataModelExcess.addColumn("Sub Category");

            DataModelExcess.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Excess Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void GenerateExcessList() {
        try {
            FormatExcessGrid(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT * FROM SDMLATTPAY.DAILY_ATT_FORM_EXCESS_LIST "
                    + "WHERE ATT_DATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                    + "AND ATT_SHIFT= " + cmbShift.getSelectedItem() + " "
                    + "ORDER BY EMP_ID ";

//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[50];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("EMP_ID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("PUNCH_TIME");
                    rowData[4] = rsTmp.getString("EMP_REMARK");
                    if (rsTmp.getString("ASSIGNED_IND").equalsIgnoreCase("1")) {
                        rowData[5] = "Yes";
                    } else {
                        rowData[5] = "No";
                    }
                    rowData[6] = rsTmp.getString("ASSIGNED_DEPT");
                    rowData[7] = rsTmp.getString("ASSIGNED_REMARK");
                    rowData[8] = rsTmp.getString("EMP_DEPT");
                    rowData[9] = rsTmp.getString("EMP_MAIN_CATEGORY");
                    rowData[10] = rsTmp.getString("EMP_SUB_CATEGORY");

                    DataModelExcess.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = TableExcess.getColumnModel();
                for (int column = 0; column < TableExcess.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < TableExcess.getRowCount(); row++) {
                        TableCellRenderer renderer = TableExcess.getCellRenderer(row, column);
                        Component comp = TableExcess.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void ExcessManpower() {
        String sql = "", pDocNo = "", pDocDate = "";

        try {

            Connection Conn1;
            Statement stmt1;
            ResultSet rsData1;
            Conn1 = data.getConn();
            stmt1 = Conn1.createStatement();
            rsData1 = stmt1.executeQuery("SELECT E.DOC_NO,E.DOC_DATE,E.ATT_DEPT,E.ATT_DATE,E.ATT_SHIFT FROM SDMLATTPAY.DAILY_ATT_FORM_EXCESS_LIST E, SDMLATTPAY.DAILY_ATT_FORM_DATA F "
                    + "WHERE E.EMP_ID=F.EMP_ID AND E.ATT_DATE=F.ATT_DATE AND E.ASSIGNED_IND=0 AND F.EMP_EXCESS=0 "
                    + "AND F.DOC_NO='" + txtDocNo.getText().trim() + "' "
                    + "GROUP BY E.ATT_DEPT,E.ATT_DATE,E.ATT_SHIFT ");
            rsData1.first();

            if (rsData1.getRow() > 0) {
                while (!rsData1.isAfterLast()) {
                    pDocNo = clsFirstFree.getNextFreeNo((int) EITLERPGLOBAL.gCompanyID, 865, 379, true);
                    pDocDate = data.getStringValueFromDB("SELECT CURDATE() FROM DUAL");

                    String eDocNo = rsData1.getString("DOC_NO");
                    String eDocDate = rsData1.getString("DOC_DATE");
                    String eDept = rsData1.getString("ATT_DEPT");
                    String eAttDate = rsData1.getString("ATT_DATE");
                    String eShift = rsData1.getString("ATT_SHIFT");

                    String eUser = data.getStringValueFromDB("SELECT CREATED_BY FROM SDMLATTPAY.DAILY_ATT_FORM_DATA WHERE DOC_NO='" + eDocNo + "' AND DOC_DATE='" + eDocDate + "' GROUP BY DOC_NO,DOC_DATE");
                    String eHID = data.getStringValueFromDB("SELECT H.HIERARCHY_ID FROM DINESHMILLS.D_COM_HIERARCHY H, DINESHMILLS.D_COM_HIERARCHY_RIGHTS R WHERE H.HIERARCHY_ID=R.HIERARCHY_ID AND MODULE_ID=865 AND USER_ID='" + eUser + "' ");

                    sql = "INSERT INTO SDMLATTPAY.MANPOWER_REQUISITION_DATA "
                            + "(DOC_NO, DOC_DATE, ATT_DATE, ATT_DEPT, ATT_SHIFT, "
                            + "EMP_ID, EMP_NAME, EMP_DEPT, EMP_MAIN_CATEGORY, EMP_SUB_CATEGORY, SR_NO, PUNCH_TIME, EMP_PRESENT, "
                            + "EMP_ABSENT, EMP_EXCESS, EMP_CL, EMP_PL, EMP_ESI, EMP_REMARK, "
                            + "CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, APPROVED, APPROVED_DATE, "
                            + "REJECTED, REJECTED_DATE, CANCELED, HIERARCHY_ID, CHANGED, CHANGED_DATE) "
                            + "SELECT '" + pDocNo + "', '" + pDocDate + "', F.ATT_DATE, F.ATT_DEPT, F.ATT_SHIFT, "
                            + "F.EMP_ID, F.EMP_NAME, F.EMP_DEPT, F.EMP_MAIN_CATEGORY, F.EMP_SUB_CATEGORY, 1, F.PUNCH_TIME, F.EMP_PRESENT, "
                            + "F.EMP_ABSENT, F.EMP_EXCESS, F.EMP_CL, F.EMP_PL, F.EMP_ESI, F.EMP_REMARK, "
                            + "'" + eUser + "', NOW(), 0, '0000-00-00', 0, '0000-00-00', "
                            + "0, '0000-00-00', 0, '" + eHID + "', 1, CURDATE() "
                            + "FROM SDMLATTPAY.DAILY_ATT_FORM_EXCESS_LIST E, SDMLATTPAY.DAILY_ATT_FORM_DATA F "
                            + "WHERE E.EMP_ID=F.EMP_ID AND E.ATT_DATE=F.ATT_DATE AND E.ASSIGNED_IND=0 AND F.EMP_EXCESS=0 "
                            + "AND F.DOC_NO='" + txtDocNo.getText().trim() + "' "
                            + "AND E.ATT_DEPT='" + eDept + "' AND E.ATT_DATE='" + eAttDate + "' AND E.ATT_SHIFT='" + eShift + "' ";
                    System.out.println("Insert Into Detail Data :" + sql);
                    data.Execute(sql);

                    sql = "INSERT INTO SDMLATTPAY.D_COM_DOC_DATA "
                            + "(COMPANY_ID, MODULE_ID, DOC_NO, DOC_DATE, USER_ID, STATUS, "
                            + "TYPE, REMARKS, SR_NO, FROM_USER_ID, FROM_REMARKS, RECEIVED_DATE, "
                            + "ACTION_DATE, CHANGED, CHANGED_DATE) "
                            + "SELECT 2, 865, '" + pDocNo + "', '" + pDocDate + "', USER_ID, CASE WHEN CREATOR =1 THEN 'W' ELSE 'P'  END, "
                            + "CASE WHEN CREATOR =0 THEN 'A' ELSE 'C'  END,'EXCESS MANPOWER REQUISITION', SR_NO, 0, '', '" + pDocDate + "', "
                            + "'0000-00-00', 1, '" + pDocDate + "' "
                            + "FROM DINESHMILLS.D_COM_HIERARCHY_RIGHTS WHERE HIERARCHY_ID = '" + eHID + "' ";
                    System.out.println("Insert Into Felt Prod Doc Data :" + sql);
                    data.Execute(sql);

                    rsData1.next();
                }
            }
        } catch (Exception e) {
            System.out.println("Error while Saving : " + e.getMessage());
        }
    }

    private void GenerateEmpList() {
        if (data.IsRecordExist("SELECT * FROM SDMLATTPAY.DAILY_ATT_FORM_DATA WHERE ATT_DATE = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' AND ATT_DEPT = '" + cmbDept.getSelectedItem().toString() + "' AND ATT_SHIFT = '" + cmbShift.getSelectedItem().toString() + "' AND APPROVED=0 AND DOC_NO != '" + txtDocNo.getText().trim() + "' ")) {
            JOptionPane.showMessageDialog(this, "Please Final Approve previous generated document.");
            Cancel();
            return;
        }
        try {
            FormatGrid(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

//            strSQL = "SELECT * FROM ( SELECT * FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM "
//                    + "AND (EMPID LIKE ('BRD30%') OR EMPID LIKE ('BRD40%') OR EMPID LIKE ('BRD00%')) "
//                    + "AND PUNCHDATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
//                    //                    + "AND TRIM(ALL_PUNCHES) != '' "
//                    + "AND SHIFT= " + cmbShift.getSelectedItem() + "  ) AS DAS "
//                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
//                    + "ON DAS.EMPID=EMP.PAY_EMP_NO "
//                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
//                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
//                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
//                    + "ON SEC.SECID=DAS.MAIN_CATEGORY "
//                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
//                    + "ON CTG.CTGID=DAS.CATEGORY "
//                    + "WHERE EMP_DEPARTMENT= " + cmbDept.getSelectedIndex() + "  "
//                    + " ORDER BY EMPID ";
            String mch_no_cndtn = "";
            if (cmbDept.getSelectedItem().equals("WEAVING")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12','20','12,20') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('17%') OR COALESCE(REMARK,'') LIKE ('20%')) ";
            }
            if (cmbDept.getSelectedItem().equals("YARN STORE")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12','20','12,20') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('17%') OR COALESCE(REMARK,'') LIKE ('20%')) ";
            }
            if (cmbDept.getSelectedItem().equals("MENDING")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12','20','12,20') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('17%') OR COALESCE(REMARK,'') LIKE ('20%')) ";
            }
            if (cmbDept.getSelectedItem().equals("NEEDLING")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12','21','12,21') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('17%') OR COALESCE(REMARK,'') LIKE ('21%')) ";
            }
            if (cmbDept.getSelectedItem().equals("FINISHING")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12','15','19','12,15','12,19','15,19','12,15,19') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('15%') OR COALESCE(REMARK,'') LIKE ('17%') OR COALESCE(REMARK,'') LIKE ('19%')) ";
            }
            if (cmbDept.getSelectedItem().equals("CARDING")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12','15','19','12,15','12,19','15,19','12,15,19') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('15%') OR COALESCE(REMARK,'') LIKE ('17%') OR COALESCE(REMARK,'') LIKE ('19%')) ";
            }
            if (cmbDept.getSelectedItem().equals("WAREHOUSE")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12','18','12,18') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('17%') OR COALESCE(REMARK,'') LIKE ('18%')) ";
            }
            if (cmbDept.getSelectedItem().equals("ENGINEERING")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12','16','12,16') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('16%') OR COALESCE(REMARK,'') LIKE ('17%')) ";
            }
            if (cmbDept.getSelectedItem().equals("RMG")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('17%')) ";
            }
            if (cmbDept.getSelectedItem().equals("SECURITY")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('17%')) ";
            }
            if (cmbDept.getSelectedItem().equals("STORES")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('17%')) ";
            }
            if (cmbDept.getSelectedItem().equals("PEONS")) {
//                mch_no_cndtn = " AND COALESCE(REMARK,'') IN ('','12') ";
                mch_no_cndtn = " AND (COALESCE(REMARK,'') LIKE ('') OR COALESCE(REMARK,'') LIKE ('01%') OR COALESCE(REMARK,'') LIKE ('12%') OR COALESCE(REMARK,'') LIKE ('13%') OR COALESCE(REMARK,'') LIKE ('14%') OR COALESCE(REMARK,'') LIKE ('17%')) ";
            }

            if (data.IsRecordExist("SELECT * FROM SDMLATTPAY.DAILY_ATT_FORM_DATA WHERE ATT_DATE = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' AND ATT_DEPT = '" + cmbDept.getSelectedItem().toString() + "' AND ATT_SHIFT = '" + cmbShift.getSelectedItem().toString() + "' AND APPROVED=1 AND DOC_NO != '" + txtDocNo.getText().trim() + "' ")) {
                strSQL = "SELECT * FROM ( ";

                strSQL += "SELECT EMPID,MM,YYYY,PUNCHDATE,PUNCHES_NOS, "
                        //                        + "ALL_PUNCHES, "
                        + "CASE WHEN ALL_PUNCHES!='' THEN ALL_PUNCHES ELSE COALESCE(TIME1,'') END AS ALL_PUNCHES, "
                        + "SHIFT,ALL_OT_PUNCHES,DD,WORKING_DEPTID,"
                        + "WORKING_DEPT_DESC,USERID1,DATE1,TIME1,CATEGORY,MAIN_CATEGORY,REMARK FROM  ( ";

                strSQL += "SELECT * FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM "
                        + "AND (EMPID LIKE ('BRD30%') OR EMPID LIKE ('BRD40%') OR EMPID LIKE ('BRD00%')) ";
//                if (cmbShift.getSelectedItem().toString().equals("3")) {
//                    strSQL += "AND PUNCHDATE>= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
//                            + "AND TRIM(ALL_PUNCHES) != '' "
//                            + "AND SHIFT= " + cmbShift.getSelectedItem() + " ";
//                } else {
//                    strSQL += "AND PUNCHDATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
//                            + "AND TRIM(ALL_PUNCHES) != '' "
//                            + "AND SHIFT= " + cmbShift.getSelectedItem() + " ";
//                }
                strSQL += "AND PUNCHDATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                        + "AND TRIM(ALL_PUNCHES) != '' "
                        + "AND SHIFT= " + cmbShift.getSelectedItem() + " ";

                strSQL += " )  AS A "
                        + "LEFT JOIN "
                        + "(SELECT USERID1,DATE1,group_concat(TIME1) AS TIME1 FROM "
                        + "(SELECT distinct CASE WHEN LENGTH(userid) =4 THEN CONCAT('BRD00',userid) WHEN LENGTH(userid) =6 THEN CONCAT('BRD',userid) else userid end as USERID1, "
                        + "date(checktime) AS DATE1 ,time_format(checktime,'%H:%i') AS TIME1 "
                        + "FROM Ingress.device D,Ingress.auditdata A "
                        + "WHERE A.SERIALNO = D.SERIALNO AND  userid > 0 "
                        + "AND MACHINESN NOT IN (11) ";

                if (cmbShift.getSelectedItem().toString().equals("1")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (06,07,08) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("2")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (14,15,16) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("3")) {
                    strSQL += "AND ((date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (22,23)) "
                            + "OR (date(checktime) = DATE_ADD('" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "', INTERVAL 1 DAY) "
                            + "AND time_format(checktime,'%H') IN (00,01)) )";
                }
                if (cmbShift.getSelectedItem().toString().equals("4")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (07,08,09,10) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("5")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (08,09,10,11,12) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("6")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (07,08,09,10) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("14")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (06,07,08) ";
                }                
                if (cmbShift.getSelectedItem().toString().equals("15")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (18,19,20) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("26")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (18,19,20) ";
                }

                strSQL += "AND CHECKTIME NOT IN (SELECT A_DATETIME FROM SDMLATTPAY.ATT_DATA WHERE UPDATE_IND='DELETION') ";

                strSQL += "UNION ALL "
                        + ""
                        + "SELECT distinct CASE WHEN LENGTH(emp_code) =4 THEN CONCAT('BRD00',emp_code) WHEN LENGTH(emp_code) =6 THEN CONCAT('BRD',emp_code) else emp_code end as USERID1, "
                        + "date(checktime) AS DATE1 ,time_format(checktime,'%H:%i') AS TIME1 FROM "
                        + "(SELECT id,emp_code,DATE_FORMAT(punch_time, '%Y-%m-%d %H:%i:%s') as checktime,terminal_sn,terminal_alias,area_alias "
                        + "FROM ZKTECO.iclock_transaction where emp_code!=0 AND (LENGTH(emp_code) =6 OR LENGTH(emp_code) =4) ) A "
                        + "LEFT JOIN "
                        + "(SELECT DEVICE_IP,DEVICE_ID,DEVICE_SN FROM SDMLATTPAY.ATT_PUNCHING_MACHINE_MASTER_ZKTECO) B "
                        + "ON terminal_sn=DEVICE_SN "
                        + "WHERE emp_code > 0 "
                        + "AND DEVICE_ID NOT IN (11,22,30,31) ";

                if (cmbShift.getSelectedItem().toString().equals("1")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (06,07,08) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("2")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (14,15,16) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("3")) {
                    strSQL += "AND ((date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (22,23)) "
                            + "OR (date(checktime) = DATE_ADD('" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "', INTERVAL 1 DAY) "
                            + "AND time_format(checktime,'%H') IN (00,01)) )";
                }
                if (cmbShift.getSelectedItem().toString().equals("4")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (07,08,09,10) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("5")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (08,09,10,11,12) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("6")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (07,08,09,10) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("14")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (06,07,08) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("15")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (18,19,20) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("26")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (18,19,20) ";
                }

                strSQL += "AND CHECKTIME NOT IN (SELECT A_DATETIME FROM SDMLATTPAY.ATT_DATA WHERE UPDATE_IND='DELETION') ";

                strSQL += ") AS Q group by userid1,date1) AS I "
                        + "ON USERID1 = EMPID ";

                strSQL += " ) AS DAS "
                        + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                        + "ON DAS.EMPID=EMP.PAY_EMP_NO "
                        + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                        + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                        + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                        + "ON SEC.SECID=DAS.MAIN_CATEGORY "
                        + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                        + "ON CTG.CTGID=DAS.CATEGORY "
                        + "WHERE EMP_DEPARTMENT IN (SELECT CONVERT(DPTID,CHAR (8)) AS DPTID FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER "
                        + "WHERE TRIM(ERP_DEPT)='" + cmbDept.getSelectedItem() + "' GROUP BY ERP_DEPT) "
                        + "AND EMPID NOT IN (SELECT EMP_ID FROM SDMLATTPAY.DAILY_ATT_FORM_DATA WHERE ATT_DATE = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' AND ATT_DEPT = '" + cmbDept.getSelectedItem().toString() + "' AND ATT_SHIFT = '" + cmbShift.getSelectedItem().toString() + "' AND APPROVED=1 AND (EMP_PRESENT=1 OR EMP_EXCESS=1) ) "
                        + mch_no_cndtn
                        + " ORDER BY EMPID ";
            } else {
                strSQL = "SELECT * FROM ( ";

                strSQL += "SELECT EMPID,MM,YYYY,PUNCHDATE,PUNCHES_NOS, "
                        //                        + "ALL_PUNCHES, "
                        + "CASE WHEN ALL_PUNCHES!='' THEN ALL_PUNCHES ELSE COALESCE(TIME1,'') END AS ALL_PUNCHES, "
                        + "SHIFT,ALL_OT_PUNCHES,DD,WORKING_DEPTID,"
                        + "WORKING_DEPT_DESC,USERID1,DATE1,TIME1,CATEGORY,MAIN_CATEGORY,REMARK FROM  ( ";

                strSQL += "SELECT * FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM "
                        + "AND (EMPID LIKE ('BRD30%') OR EMPID LIKE ('BRD40%') OR EMPID LIKE ('BRD00%')) ";
//                if (cmbShift.getSelectedItem().toString().equals("3")) {
//                    strSQL += "AND PUNCHDATE>= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
//                            //                            + "AND TRIM(ALL_PUNCHES) != '' "
//                            + "AND SHIFT= " + cmbShift.getSelectedItem() + " ";
//                } else {
//                    strSQL += "AND PUNCHDATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
//                            //                            + "AND TRIM(ALL_PUNCHES) != '' "
//                            + "AND SHIFT= " + cmbShift.getSelectedItem() + " ";
//                }
                strSQL += "AND PUNCHDATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                        //                            + "AND TRIM(ALL_PUNCHES) != '' "
                        + "AND SHIFT= " + cmbShift.getSelectedItem() + " ";

                strSQL += " )  AS A "
                        + "LEFT JOIN "
                        + "(SELECT USERID1,DATE1,group_concat(TIME1) AS TIME1 FROM "
                        + "(SELECT distinct CASE WHEN LENGTH(userid) =4 THEN CONCAT('BRD00',userid) WHEN LENGTH(userid) =6 THEN CONCAT('BRD',userid) else userid end as USERID1, "
                        + "date(checktime) AS DATE1 ,time_format(checktime,'%H:%i') AS TIME1 "
                        + "FROM Ingress.device D,Ingress.auditdata A "
                        + "WHERE A.SERIALNO = D.SERIALNO AND  userid > 0 "
                        + "AND MACHINESN NOT IN (11) ";

                if (cmbShift.getSelectedItem().toString().equals("1")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (06,07,08) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("2")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (14,15,16) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("3")) {
                    strSQL += "AND ((date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (22,23)) "
                            + "OR (date(checktime) = DATE_ADD('" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "', INTERVAL 1 DAY) "
                            + "AND time_format(checktime,'%H') IN (00,01)) )";
                }
                if (cmbShift.getSelectedItem().toString().equals("4")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (07,08,09,10) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("5")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (08,09,10,11,12) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("6")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (07,08,09,10) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("14")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (06,07,08) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("15")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (18,19,20) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("26")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (18,19,20) ";
                }

                strSQL += "AND CHECKTIME NOT IN (SELECT A_DATETIME FROM SDMLATTPAY.ATT_DATA WHERE UPDATE_IND='DELETION') ";

                strSQL += "UNION ALL "
                        + ""
                        + "SELECT distinct CASE WHEN LENGTH(emp_code) =4 THEN CONCAT('BRD00',emp_code) WHEN LENGTH(emp_code) =6 THEN CONCAT('BRD',emp_code) else emp_code end as USERID1, "
                        + "date(checktime) AS DATE1 ,time_format(checktime,'%H:%i') AS TIME1 FROM "
                        + "(SELECT id,emp_code,DATE_FORMAT(punch_time, '%Y-%m-%d %H:%i:%s') as checktime,terminal_sn,terminal_alias,area_alias "
                        + "FROM ZKTECO.iclock_transaction where emp_code!=0 AND (LENGTH(emp_code) =6 OR LENGTH(emp_code) =4) ) A "
                        + "LEFT JOIN "
                        + "(SELECT DEVICE_IP,DEVICE_ID,DEVICE_SN FROM SDMLATTPAY.ATT_PUNCHING_MACHINE_MASTER_ZKTECO) B "
                        + "ON terminal_sn=DEVICE_SN "
                        + "WHERE emp_code > 0 "
                        + "AND DEVICE_ID NOT IN (11,22,30,31) ";

                if (cmbShift.getSelectedItem().toString().equals("1")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (06,07,08) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("2")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (14,15,16) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("3")) {
                    strSQL += "AND ((date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (22,23)) "
                            + "OR (date(checktime) = DATE_ADD('" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "', INTERVAL 1 DAY) "
                            + "AND time_format(checktime,'%H') IN (00,01)) )";
                }
                if (cmbShift.getSelectedItem().toString().equals("4")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (07,08,09,10) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("5")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (08,09,10,11,12) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("6")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (07,08,09,10) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("14")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (06,07,08) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("15")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (18,19,20) ";
                }
                if (cmbShift.getSelectedItem().toString().equals("26")) {
                    strSQL += "AND date(checktime) = '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                            + "AND time_format(checktime,'%H') IN (18,19,20) ";
                }

                strSQL += "AND CHECKTIME NOT IN (SELECT A_DATETIME FROM SDMLATTPAY.ATT_DATA WHERE UPDATE_IND='DELETION') ";

                strSQL += ") AS Q group by userid1,date1) AS I "
                        + "ON USERID1 = EMPID ";

                strSQL += " ) AS DAS "
                        + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                        + "ON DAS.EMPID=EMP.PAY_EMP_NO "
                        + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                        + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                        + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                        + "ON SEC.SECID=DAS.MAIN_CATEGORY "
                        + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                        + "ON CTG.CTGID=DAS.CATEGORY "
                        + "WHERE EMP_DEPARTMENT IN (SELECT CONVERT(DPTID,CHAR (8)) AS DPTID FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER "
                        + "WHERE TRIM(ERP_DEPT)='" + cmbDept.getSelectedItem() + "' GROUP BY ERP_DEPT) "
                        + mch_no_cndtn
                        + " ORDER BY EMPID ";
            }

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[50];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("ALL_PUNCHES");
                    rowData[4] = "";
                    if (!rsTmp.getString("ALL_PUNCHES").trim().equals("")) {
                        rowData[5] = true;
                        rowData[6] = false;
                    } else {
                        rowData[5] = false;
                        rowData[6] = true;
                    }
                    rowData[7] = false;
                    rowData[8] = rsTmp.getString("DPTNAME");
                    rowData[9] = rsTmp.getString("SECNAME");
                    rowData[10] = rsTmp.getString("CTGNAME");
                    rowData[11] = rsTmp.getString("SHIFT");

//                    rowData[9] = false;
//                    rowData[10] = false;
//                    rowData[11] = false;
//                    rowData[12] = false;
//                    rowData[13] = false;
                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
}
