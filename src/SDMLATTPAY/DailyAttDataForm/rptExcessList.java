/* frmFeltSalesInfo.java 
 * 
 * 
 * Created on July 13, 2005, 10:47 AM
 */
package SDMLATTPAY.DailyAttDataForm;

import EITLERP.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.io.File;
import java.sql.*;
import javax.swing.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import EITLERP.FeltSales.common.MultiLineTableHeaderRenderer;

/**
 *
 * @author ashutosh/RISHI
 */
public class rptExcessList extends javax.swing.JApplet {

    public boolean forceToChange = false;
    public boolean cancelled = false;
    private EITLTableModel DataModelAttList = new EITLTableModel();
    private EITLTableModel DataModelAbsList = new EITLTableModel();
    private EITLTableModel DataModelExcList = new EITLTableModel();
    private EITLTableModel DataModelPWAList = new EITLTableModel();
    private EITLTableModel DataModelCWAList = new EITLTableModel();
    private EITLTableModel DataModelUDCWAList = new EITLTableModel();
    private EITLTableModel DataModelAbsenteeismList = new EITLTableModel();
    private EITLTableModel DataModelWrkAttList = new EITLTableModel();
    public boolean ExcPressed = false;

    private JDialog aDialog;
    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    HashMap hmPieceList = new HashMap();
    String ORDER_BY = "";
    public EITLERP.FeltSales.Reports.clsExcelExporter exp_Att = new EITLERP.FeltSales.Reports.clsExcelExporter();
    public EITLERP.FeltSales.Reports.clsExcelExporter exp_Abs = new EITLERP.FeltSales.Reports.clsExcelExporter();
    public EITLERP.FeltSales.Reports.clsExcelExporter exp_Exc = new EITLERP.FeltSales.Reports.clsExcelExporter();
    public EITLERP.FeltSales.Reports.clsExcelExporter exp_PWA = new EITLERP.FeltSales.Reports.clsExcelExporter();
    public EITLERP.FeltSales.Reports.clsExcelExporter exp_CWA = new EITLERP.FeltSales.Reports.clsExcelExporter();
    public EITLERP.FeltSales.Reports.clsExcelExporter exp_UDCWA = new EITLERP.FeltSales.Reports.clsExcelExporter();
    public EITLERP.FeltSales.Reports.clsExcelExporter exp_Absenteeism = new EITLERP.FeltSales.Reports.clsExcelExporter();
    public EITLERP.FeltSales.Reports.clsExcelExporter exp_WrkAtt = new EITLERP.FeltSales.Reports.clsExcelExporter();

    public void init() {
        initComponents();
        setSize(1260, 590);
        jLabel1.setForeground(Color.WHITE);
        file_Att.setVisible(false);
        file_Abs.setVisible(false);
        file_Exc.setVisible(false);
        file_PWA.setVisible(false);
        file_CWA.setVisible(false);
        file_UDCWA.setVisible(false);
        file_Absenteeism.setVisible(false);
        file_WrkAtt.setVisible(false);
        FormatGridAttList();
        FormatGridAbsList();
        FormatGridExcList();
        FormatGridPWAList();
        FormatGridCWAList();
        FormatGridUDCWAList();
        FormatGridAbsenteeismList();
        Table_AttList.setEnabled(false);
        Table_AbsList.setEnabled(false);
        Table_ExcList.setEnabled(false);
        Table_PWAList.setEnabled(false);
        Table_CWAList.setEnabled(false);
        Table_UDCWAList.setEnabled(false);
        Table_AbsenteeismList.setEnabled(false);
        Table_WrkAttList.setEnabled(false);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStatus = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        AttList = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        Table_AttList = new javax.swing.JTable();
        btnShowAttList = new javax.swing.JButton();
        Export_AttList = new javax.swing.JButton();
        file_Att = new javax.swing.JFileChooser();
        AbsList = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        Table_AbsList = new javax.swing.JTable();
        btnShowAbsList = new javax.swing.JButton();
        Export_AbsList = new javax.swing.JButton();
        file_Abs = new javax.swing.JFileChooser();
        ExsList = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        Table_ExcList = new javax.swing.JTable();
        btnShowExcList = new javax.swing.JButton();
        Export_ExcList = new javax.swing.JButton();
        file_Exc = new javax.swing.JFileChooser();
        PWAList = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        Table_PWAList = new javax.swing.JTable();
        btnShowPWAList = new javax.swing.JButton();
        Export_PWAList = new javax.swing.JButton();
        file_PWA = new javax.swing.JFileChooser();
        CWAList = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        Table_CWAList = new javax.swing.JTable();
        btnShowCWAList = new javax.swing.JButton();
        Export_CWAList = new javax.swing.JButton();
        file_CWA = new javax.swing.JFileChooser();
        UDCWAList = new javax.swing.JPanel();
        jScrollPane15 = new javax.swing.JScrollPane();
        Table_UDCWAList = new javax.swing.JTable();
        btnShowUDCWAList = new javax.swing.JButton();
        Export_UDCWAList = new javax.swing.JButton();
        file_UDCWA = new javax.swing.JFileChooser();
        lblDate1 = new javax.swing.JLabel();
        txtFromDate_UDCWA = new javax.swing.JTextField();
        lblDate2 = new javax.swing.JLabel();
        txtToDate_UDCWA = new javax.swing.JTextField();
        cmbSM = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        AbsenteeismList = new javax.swing.JPanel();
        jScrollPane16 = new javax.swing.JScrollPane();
        Table_AbsenteeismList = new javax.swing.JTable();
        btnShowAbsenteeismList = new javax.swing.JButton();
        Export_AbsenteeismList = new javax.swing.JButton();
        file_Absenteeism = new javax.swing.JFileChooser();
        cmbAbsenteeism = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        lblMonthCmb = new javax.swing.JLabel();
        cmbMonthAbsenteeism = new javax.swing.JComboBox();
        lblYearCmb = new javax.swing.JLabel();
        txtYearAbsenteeism = new javax.swing.JTextField();
        WrkAttList = new javax.swing.JPanel();
        jScrollPane17 = new javax.swing.JScrollPane();
        Table_WrkAttList = new javax.swing.JTable();
        btnShowWrkAttList = new javax.swing.JButton();
        Export_WrkAttList = new javax.swing.JButton();
        file_WrkAtt = new javax.swing.JFileChooser();
        lblMonthCmb1 = new javax.swing.JLabel();
        cmbMonthWrkAtt = new javax.swing.JComboBox();
        lblYearCmb1 = new javax.swing.JLabel();
        txtYearWrkAtt = new javax.swing.JTextField();
        CLR_BTN = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        txtAttDate = new javax.swing.JTextField();
        lblDeptCmb1 = new javax.swing.JLabel();
        cmbDept = new javax.swing.JComboBox();
        lblDeptCmb = new javax.swing.JLabel();
        cmbShift = new javax.swing.JComboBox();

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel2.setBackground(new java.awt.Color(0, 102, 153));
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 70, 1260, 10);

        AttList.setLayout(null);

        Table_AttList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_AttList.setEnabled(false);
        Table_AttList.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_AttList.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_AttList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_AttListKeyPressed(evt);
            }
        });
        jScrollPane10.setViewportView(Table_AttList);

        AttList.add(jScrollPane10);
        jScrollPane10.setBounds(10, 50, 1220, 390);

        btnShowAttList.setText("Show List");
        btnShowAttList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowAttListActionPerformed(evt);
            }
        });
        AttList.add(btnShowAttList);
        btnShowAttList.setBounds(890, 10, 130, 30);

        Export_AttList.setText("EXPORT TO EXCEL");
        Export_AttList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_AttListActionPerformed(evt);
            }
        });
        AttList.add(Export_AttList);
        Export_AttList.setBounds(1040, 10, 170, 30);
        AttList.add(file_Att);
        file_Att.setBounds(150, 10, 440, 390);

        jTabbedPane2.addTab("Present Detail", AttList);

        AbsList.setLayout(null);

        Table_AbsList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_AbsList.setEnabled(false);
        Table_AbsList.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_AbsList.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_AbsList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_AbsListKeyPressed(evt);
            }
        });
        jScrollPane12.setViewportView(Table_AbsList);

        AbsList.add(jScrollPane12);
        jScrollPane12.setBounds(10, 50, 1220, 390);

        btnShowAbsList.setText("Show List");
        btnShowAbsList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowAbsListActionPerformed(evt);
            }
        });
        AbsList.add(btnShowAbsList);
        btnShowAbsList.setBounds(890, 10, 130, 30);

        Export_AbsList.setText("EXPORT TO EXCEL");
        Export_AbsList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_AbsListActionPerformed(evt);
            }
        });
        AbsList.add(Export_AbsList);
        Export_AbsList.setBounds(1040, 10, 170, 30);
        AbsList.add(file_Abs);
        file_Abs.setBounds(150, 10, 440, 390);

        jTabbedPane2.addTab("Absent Detail", AbsList);

        ExsList.setLayout(null);

        Table_ExcList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_ExcList.setEnabled(false);
        Table_ExcList.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_ExcList.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_ExcList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_ExcListKeyPressed(evt);
            }
        });
        jScrollPane11.setViewportView(Table_ExcList);

        ExsList.add(jScrollPane11);
        jScrollPane11.setBounds(10, 50, 1220, 390);

        btnShowExcList.setText("Show List");
        btnShowExcList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowExcListActionPerformed(evt);
            }
        });
        ExsList.add(btnShowExcList);
        btnShowExcList.setBounds(890, 10, 130, 30);

        Export_ExcList.setText("EXPORT TO EXCEL");
        Export_ExcList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_ExcListActionPerformed(evt);
            }
        });
        ExsList.add(Export_ExcList);
        Export_ExcList.setBounds(1040, 10, 170, 30);
        ExsList.add(file_Exc);
        file_Exc.setBounds(150, 10, 440, 390);

        jTabbedPane2.addTab("Excess Detail", ExsList);

        PWAList.setLayout(null);

        Table_PWAList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_PWAList.setEnabled(false);
        Table_PWAList.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_PWAList.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_PWAList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_PWAListKeyPressed(evt);
            }
        });
        jScrollPane13.setViewportView(Table_PWAList);

        PWAList.add(jScrollPane13);
        jScrollPane13.setBounds(10, 50, 1220, 390);

        btnShowPWAList.setText("Show List");
        btnShowPWAList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowPWAListActionPerformed(evt);
            }
        });
        PWAList.add(btnShowPWAList);
        btnShowPWAList.setBounds(890, 10, 130, 30);

        Export_PWAList.setText("EXPORT TO EXCEL");
        Export_PWAList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_PWAListActionPerformed(evt);
            }
        });
        PWAList.add(Export_PWAList);
        Export_PWAList.setBounds(1040, 10, 170, 30);
        PWAList.add(file_PWA);
        file_PWA.setBounds(150, 10, 440, 390);

        jTabbedPane2.addTab("Permanent Worker Attendance", PWAList);

        CWAList.setLayout(null);

        Table_CWAList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_CWAList.setEnabled(false);
        Table_CWAList.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_CWAList.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_CWAList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_CWAListKeyPressed(evt);
            }
        });
        jScrollPane14.setViewportView(Table_CWAList);

        CWAList.add(jScrollPane14);
        jScrollPane14.setBounds(10, 50, 1220, 390);

        btnShowCWAList.setText("Show List");
        btnShowCWAList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowCWAListActionPerformed(evt);
            }
        });
        CWAList.add(btnShowCWAList);
        btnShowCWAList.setBounds(890, 10, 130, 30);

        Export_CWAList.setText("EXPORT TO EXCEL");
        Export_CWAList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_CWAListActionPerformed(evt);
            }
        });
        CWAList.add(Export_CWAList);
        Export_CWAList.setBounds(1040, 10, 170, 30);
        CWAList.add(file_CWA);
        file_CWA.setBounds(150, 10, 440, 390);

        jTabbedPane2.addTab("Contractor Worker Attendance", CWAList);

        UDCWAList.setLayout(null);

        Table_UDCWAList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_UDCWAList.setEnabled(false);
        Table_UDCWAList.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_UDCWAList.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_UDCWAList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_UDCWAListKeyPressed(evt);
            }
        });
        jScrollPane15.setViewportView(Table_UDCWAList);

        UDCWAList.add(jScrollPane15);
        jScrollPane15.setBounds(10, 50, 1220, 390);

        btnShowUDCWAList.setText("Show List");
        btnShowUDCWAList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowUDCWAListActionPerformed(evt);
            }
        });
        UDCWAList.add(btnShowUDCWAList);
        btnShowUDCWAList.setBounds(890, 10, 130, 30);

        Export_UDCWAList.setText("EXPORT TO EXCEL");
        Export_UDCWAList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_UDCWAListActionPerformed(evt);
            }
        });
        UDCWAList.add(Export_UDCWAList);
        Export_UDCWAList.setBounds(1040, 10, 170, 30);
        UDCWAList.add(file_UDCWA);
        file_UDCWA.setBounds(150, 30, 440, 380);

        lblDate1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDate1.setText("From Date : ");
        UDCWAList.add(lblDate1);
        lblDate1.setBounds(10, 10, 90, 30);

        txtFromDate_UDCWA = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();
        UDCWAList.add(txtFromDate_UDCWA);
        txtFromDate_UDCWA.setBounds(100, 10, 100, 30);

        lblDate2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDate2.setText("To Date : ");
        UDCWAList.add(lblDate2);
        lblDate2.setBounds(210, 10, 80, 30);

        txtToDate_UDCWA = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();
        UDCWAList.add(txtToDate_UDCWA);
        txtToDate_UDCWA.setBounds(290, 10, 100, 30);

        cmbSM.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Multiple" }));
        UDCWAList.add(cmbSM);
        cmbSM.setBounds(530, 10, 140, 30);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("Type : ");
        UDCWAList.add(jLabel3);
        jLabel3.setBounds(460, 10, 60, 30);

        jTabbedPane2.addTab("User Dept wise Contractor Worker Attendance", UDCWAList);

        AbsenteeismList.setLayout(null);

        Table_AbsenteeismList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_AbsenteeismList.setEnabled(false);
        Table_AbsenteeismList.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_AbsenteeismList.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_AbsenteeismList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_AbsenteeismListKeyPressed(evt);
            }
        });
        jScrollPane16.setViewportView(Table_AbsenteeismList);

        AbsenteeismList.add(jScrollPane16);
        jScrollPane16.setBounds(10, 50, 1220, 390);

        btnShowAbsenteeismList.setText("Show List");
        btnShowAbsenteeismList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowAbsenteeismListActionPerformed(evt);
            }
        });
        AbsenteeismList.add(btnShowAbsenteeismList);
        btnShowAbsenteeismList.setBounds(890, 10, 130, 30);

        Export_AbsenteeismList.setText("EXPORT TO EXCEL");
        Export_AbsenteeismList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_AbsenteeismListActionPerformed(evt);
            }
        });
        AbsenteeismList.add(Export_AbsenteeismList);
        Export_AbsenteeismList.setBounds(1040, 10, 170, 30);
        AbsenteeismList.add(file_Absenteeism);
        file_Absenteeism.setBounds(150, 30, 440, 380);

        cmbAbsenteeism.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Staff", "Worker", "Retainer", "Contractor" }));
        AbsenteeismList.add(cmbAbsenteeism);
        cmbAbsenteeism.setBounds(60, 10, 150, 30);

        jLabel4.setText("Type : ");
        AbsenteeismList.add(jLabel4);
        jLabel4.setBounds(10, 10, 50, 30);

        lblMonthCmb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMonthCmb.setText("Month : ");
        AbsenteeismList.add(lblMonthCmb);
        lblMonthCmb.setBounds(250, 10, 60, 30);

        cmbMonthAbsenteeism.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        AbsenteeismList.add(cmbMonthAbsenteeism);
        cmbMonthAbsenteeism.setBounds(310, 10, 100, 30);

        lblYearCmb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYearCmb.setText("Year : ");
        AbsenteeismList.add(lblYearCmb);
        lblYearCmb.setBounds(420, 10, 60, 30);
        AbsenteeismList.add(txtYearAbsenteeism);
        txtYearAbsenteeism.setBounds(480, 10, 80, 30);

        jTabbedPane2.addTab("Absenteeism", AbsenteeismList);

        WrkAttList.setLayout(null);

        Table_WrkAttList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        Table_WrkAttList.setEnabled(false);
        Table_WrkAttList.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_WrkAttList.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_WrkAttList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Table_WrkAttListMouseClicked(evt);
            }
        });
        Table_WrkAttList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_WrkAttListKeyPressed(evt);
            }
        });
        jScrollPane17.setViewportView(Table_WrkAttList);

        WrkAttList.add(jScrollPane17);
        jScrollPane17.setBounds(10, 50, 1220, 390);

        btnShowWrkAttList.setText("Show List");
        btnShowWrkAttList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowWrkAttListActionPerformed(evt);
            }
        });
        WrkAttList.add(btnShowWrkAttList);
        btnShowWrkAttList.setBounds(890, 10, 130, 30);

        Export_WrkAttList.setText("EXPORT TO EXCEL");
        Export_WrkAttList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_WrkAttListActionPerformed(evt);
            }
        });
        WrkAttList.add(Export_WrkAttList);
        Export_WrkAttList.setBounds(1040, 10, 170, 30);
        WrkAttList.add(file_WrkAtt);
        file_WrkAtt.setBounds(390, 30, 440, 370);

        lblMonthCmb1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMonthCmb1.setText("Month : ");
        WrkAttList.add(lblMonthCmb1);
        lblMonthCmb1.setBounds(10, 10, 60, 30);

        cmbMonthWrkAtt.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        WrkAttList.add(cmbMonthWrkAtt);
        cmbMonthWrkAtt.setBounds(70, 10, 100, 30);

        lblYearCmb1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYearCmb1.setText("Year : ");
        WrkAttList.add(lblYearCmb1);
        lblYearCmb1.setBounds(180, 10, 60, 30);
        WrkAttList.add(txtYearWrkAtt);
        txtYearWrkAtt.setBounds(240, 10, 80, 30);

        jTabbedPane2.addTab("Working Attendance", WrkAttList);

        getContentPane().add(jTabbedPane2);
        jTabbedPane2.setBounds(10, 80, 1240, 490);

        CLR_BTN.setText("Clear");
        CLR_BTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CLR_BTN.setMargin(new java.awt.Insets(2, 7, 2, 7));
        CLR_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLR_BTNActionPerformed(evt);
            }
        });
        getContentPane().add(CLR_BTN);
        CLR_BTN.setBounds(780, 40, 80, 20);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setText("Daily Attendance and Excess List Report");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 2, 1260, 25);

        lblDate.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblDate.setText("Att Date : ");
        getContentPane().add(lblDate);
        lblDate.setBounds(20, 40, 80, 20);

        txtAttDate = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();
        txtAttDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtAttDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAttDateFocusLost(evt);
            }
        });
        getContentPane().add(txtAttDate);
        txtAttDate.setBounds(90, 40, 110, 20);

        lblDeptCmb1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDeptCmb1.setText("Department : ");
        getContentPane().add(lblDeptCmb1);
        lblDeptCmb1.setBounds(210, 40, 110, 20);

        cmbDept.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Dept", "WEAVING", "YARN STORE", "MENDING", "NEEDLING", "FINISHING", "CARDING", "WAREHOUSE", "ENGINEERING", "RMG", "SECURITY", "STORES", "PEONS" }));
        cmbDept.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDeptItemStateChanged(evt);
            }
        });
        getContentPane().add(cmbDept);
        cmbDept.setBounds(320, 40, 190, 20);

        lblDeptCmb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDeptCmb.setText("Shift : ");
        getContentPane().add(lblDeptCmb);
        lblDeptCmb.setBounds(520, 40, 70, 20);

        cmbShift.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Shift", "1", "2", "3", "4", "5", "6", "14", "26" }));
        cmbShift.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbShiftItemStateChanged(evt);
            }
        });
        getContentPane().add(cmbShift);
        cmbShift.setBounds(590, 40, 110, 20);
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    private void Table_AttListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_AttListKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_AttListKeyPressed

    private void btnShowAttListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowAttListActionPerformed
        // TODO add your handling code here:
        if (!Validate()) {
            return;
        }
        FormatGridAttList();
        GenerateAttList();
    }//GEN-LAST:event_btnShowAttListActionPerformed

    private void Export_AttListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_AttListActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file_Att.setVisible(true);
            int returnVal = file_Att.showSaveDialog(this);
            if (returnVal == file_Att.APPROVE_OPTION) {
                file = file_Att.getSelectedFile();
            }
            file_Att.setVisible(false);

            exp_Att.fillData(Table_AttList, new File(file_Att.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_AttListActionPerformed

    private void CLR_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLR_BTNActionPerformed
        txtAttDate.setText("");
        cmbDept.setSelectedIndex(0);
        cmbShift.setSelectedIndex(0);
        FormatGridAttList();
        FormatGridExcList();
    }//GEN-LAST:event_CLR_BTNActionPerformed

    private void txtAttDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAttDateFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAttDateFocusLost

    private void cmbDeptItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDeptItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbDeptItemStateChanged

    private void cmbShiftItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbShiftItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbShiftItemStateChanged

    private void Table_ExcListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_ExcListKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_ExcListKeyPressed

    private void btnShowExcListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowExcListActionPerformed
        // TODO add your handling code here:
        ExcPressed = true;
        if (!Validate()) {
            return;
        }
        ExcPressed = false;
        FormatGridExcList();
        GenerateExcList();
    }//GEN-LAST:event_btnShowExcListActionPerformed

    private void Export_ExcListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_ExcListActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file_Exc.setVisible(true);
            int returnVal = file_Exc.showSaveDialog(this);
            if (returnVal == file_Exc.APPROVE_OPTION) {
                file = file_Exc.getSelectedFile();
            }
            file_Exc.setVisible(false);

            exp_Exc.fillData(Table_ExcList, new File(file_Exc.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_ExcListActionPerformed

    private void Table_AbsListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_AbsListKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_AbsListKeyPressed

    private void btnShowAbsListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowAbsListActionPerformed
        // TODO add your handling code here:
        if (!Validate()) {
            return;
        }
        FormatGridAbsList();
        GenerateAbsList();
    }//GEN-LAST:event_btnShowAbsListActionPerformed

    private void Export_AbsListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_AbsListActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file_Abs.setVisible(true);
            int returnVal = file_Abs.showSaveDialog(this);
            if (returnVal == file_Abs.APPROVE_OPTION) {
                file = file_Abs.getSelectedFile();
            }
            file_Abs.setVisible(false);

            exp_Abs.fillData(Table_AbsList, new File(file_Abs.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_AbsListActionPerformed

    private void Table_PWAListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_PWAListKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_PWAListKeyPressed

    private void btnShowPWAListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowPWAListActionPerformed
        // TODO add your handling code here:
        if (txtAttDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Date");
            return;
        } else if (!EITLERPGLOBAL.isDate(txtAttDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid Date in DD/MM/YYYY format.");
            return;
        }
        FormatGridPWAList();
        GeneratePWAList();
    }//GEN-LAST:event_btnShowPWAListActionPerformed

    private void Export_PWAListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_PWAListActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file_PWA.setVisible(true);
            int returnVal = file_PWA.showSaveDialog(this);
            if (returnVal == file_PWA.APPROVE_OPTION) {
                file = file_PWA.getSelectedFile();
            }
            file_PWA.setVisible(false);

            exp_PWA.fillData(Table_PWAList, new File(file_PWA.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_PWAListActionPerformed

    private void Table_CWAListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_CWAListKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_CWAListKeyPressed

    private void btnShowCWAListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowCWAListActionPerformed
        // TODO add your handling code here:
        if (txtAttDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Date");
            return;
        } else if (!EITLERPGLOBAL.isDate(txtAttDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid Date in DD/MM/YYYY format.");
            return;
        }
        FormatGridCWAList();
        GenerateCWAList();
    }//GEN-LAST:event_btnShowCWAListActionPerformed

    private void Export_CWAListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_CWAListActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file_CWA.setVisible(true);
            int returnVal = file_CWA.showSaveDialog(this);
            if (returnVal == file_CWA.APPROVE_OPTION) {
                file = file_CWA.getSelectedFile();
            }
            file_CWA.setVisible(false);

            exp_CWA.fillData(Table_CWAList, new File(file_CWA.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_CWAListActionPerformed

    private void Table_UDCWAListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_UDCWAListKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_UDCWAListKeyPressed

    private void btnShowUDCWAListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowUDCWAListActionPerformed
        // TODO add your handling code here:
        if (!txtFromDate_UDCWA.getText().trim().equals("") && !txtToDate_UDCWA.getText().trim().equals("")) {
            if (!DateValidate()) {
                return;
            } else {
                FormatGridUDCWAList();
                GenerateUDCWAList();
            }
        } else {
            JOptionPane.showMessageDialog(rptExcessList.this, "Please Enter From Date and To Date.");
        }
    }//GEN-LAST:event_btnShowUDCWAListActionPerformed

    private void Export_UDCWAListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_UDCWAListActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file_UDCWA.setVisible(true);
            int returnVal = file_UDCWA.showSaveDialog(this);
            if (returnVal == file_UDCWA.APPROVE_OPTION) {
                file = file_UDCWA.getSelectedFile();
            }
            file_UDCWA.setVisible(false);

            exp_UDCWA.fillData(Table_UDCWAList, new File(file_UDCWA.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_UDCWAListActionPerformed

    private void Table_AbsenteeismListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_AbsenteeismListKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_AbsenteeismListKeyPressed

    private void btnShowAbsenteeismListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowAbsenteeismListActionPerformed
        // TODO add your handling code here:
        if (!cmbMonthAbsenteeism.getSelectedItem().equals("Select") && !txtYearAbsenteeism.getText().trim().equals("")) {
            if (!MonthYearValidate()) {
                return;
            } else {
                FormatGridAbsenteeismList();
                GenerateAbsenteeismList();
            }
        } else {
            JOptionPane.showMessageDialog(rptExcessList.this, "Please Select Month and Enter Year.");
        }
    }//GEN-LAST:event_btnShowAbsenteeismListActionPerformed

    private void Export_AbsenteeismListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_AbsenteeismListActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file_Absenteeism.setVisible(true);
            int returnVal = file_Absenteeism.showSaveDialog(this);
            if (returnVal == file_Absenteeism.APPROVE_OPTION) {
                file = file_Absenteeism.getSelectedFile();
            }
            file_Absenteeism.setVisible(false);

            exp_Absenteeism.fillData(Table_AbsenteeismList, new File(file_Absenteeism.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_AbsenteeismListActionPerformed

    private void Table_WrkAttListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_WrkAttListKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_WrkAttListKeyPressed

    private void btnShowWrkAttListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowWrkAttListActionPerformed
        // TODO add your handling code here:
        if (!cmbMonthWrkAtt.getSelectedItem().equals("Select") && !txtYearWrkAtt.getText().trim().equals("")) {
            if (!MonthYearValidateWrkAtt()) {
                return;
            } else {
                GenerateWrkAttList();
            }
        } else {
            JOptionPane.showMessageDialog(rptExcessList.this, "Please Select Month and Enter Year.");
        }
    }//GEN-LAST:event_btnShowWrkAttListActionPerformed

    private void Export_WrkAttListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_WrkAttListActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file_WrkAtt.setVisible(true);
            int returnVal = file_WrkAtt.showSaveDialog(this);
            if (returnVal == file_WrkAtt.APPROVE_OPTION) {
                file = file_WrkAtt.getSelectedFile();
            }
            file_WrkAtt.setVisible(false);

            exp_WrkAtt.fillData(Table_WrkAttList, new File(file_WrkAtt.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_WrkAttListActionPerformed

    private void Table_WrkAttListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Table_WrkAttListMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            String pEmpno = Table_WrkAttList.getValueAt(Table_WrkAttList.getSelectedRow(), 2).toString();
            String pMonth = Table_WrkAttList.getValueAt(Table_WrkAttList.getSelectedRow(), 4).toString();
            String pYear = Table_WrkAttList.getValueAt(Table_WrkAttList.getSelectedRow(), 5).toString();

            if (!pEmpno.contains("TOTAL")) {
                AppletFrame aFrame = new AppletFrame("Attendance - Advance Search");
                aFrame.startAppletEx("SDMLATTPAY.AdvanceSearch.FrmAdvanceSearch_1", "Attendance - Advance Search");
                SDMLATTPAY.AdvanceSearch.FrmAdvanceSearch_1 ObjItem = (SDMLATTPAY.AdvanceSearch.FrmAdvanceSearch_1) aFrame.ObjApplet;

//            ObjItem.requestFocus();
                ObjItem.FindEmpDailyAtt(pEmpno, pMonth, pYear);
            }
        }
    }//GEN-LAST:event_Table_WrkAttListMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AbsList;
    private javax.swing.JPanel AbsenteeismList;
    private javax.swing.JPanel AttList;
    private javax.swing.JButton CLR_BTN;
    private javax.swing.JPanel CWAList;
    private javax.swing.JButton Export_AbsList;
    private javax.swing.JButton Export_AbsenteeismList;
    private javax.swing.JButton Export_AttList;
    private javax.swing.JButton Export_CWAList;
    private javax.swing.JButton Export_ExcList;
    private javax.swing.JButton Export_PWAList;
    private javax.swing.JButton Export_UDCWAList;
    private javax.swing.JButton Export_WrkAttList;
    private javax.swing.JPanel ExsList;
    private javax.swing.JPanel PWAList;
    private javax.swing.JTable Table_AbsList;
    private javax.swing.JTable Table_AbsenteeismList;
    private javax.swing.JTable Table_AttList;
    private javax.swing.JTable Table_CWAList;
    private javax.swing.JTable Table_ExcList;
    private javax.swing.JTable Table_PWAList;
    private javax.swing.JTable Table_UDCWAList;
    private javax.swing.JTable Table_WrkAttList;
    private javax.swing.JPanel UDCWAList;
    private javax.swing.JPanel WrkAttList;
    private javax.swing.JButton btnShowAbsList;
    private javax.swing.JButton btnShowAbsenteeismList;
    private javax.swing.JButton btnShowAttList;
    private javax.swing.JButton btnShowCWAList;
    private javax.swing.JButton btnShowExcList;
    private javax.swing.JButton btnShowPWAList;
    private javax.swing.JButton btnShowUDCWAList;
    private javax.swing.JButton btnShowWrkAttList;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbAbsenteeism;
    private javax.swing.JComboBox cmbDept;
    private javax.swing.JComboBox cmbMonthAbsenteeism;
    private javax.swing.JComboBox cmbMonthWrkAtt;
    private javax.swing.JComboBox cmbSM;
    private javax.swing.JComboBox cmbShift;
    private javax.swing.JFileChooser file_Abs;
    private javax.swing.JFileChooser file_Absenteeism;
    private javax.swing.JFileChooser file_Att;
    private javax.swing.JFileChooser file_CWA;
    private javax.swing.JFileChooser file_Exc;
    private javax.swing.JFileChooser file_PWA;
    private javax.swing.JFileChooser file_UDCWA;
    private javax.swing.JFileChooser file_WrkAtt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDate1;
    private javax.swing.JLabel lblDate2;
    private javax.swing.JLabel lblDeptCmb;
    private javax.swing.JLabel lblDeptCmb1;
    private javax.swing.JLabel lblMonthCmb;
    private javax.swing.JLabel lblMonthCmb1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblYearCmb;
    private javax.swing.JLabel lblYearCmb1;
    private javax.swing.JTextField txtAttDate;
    private javax.swing.JTextField txtFromDate_UDCWA;
    private javax.swing.JTextField txtToDate_UDCWA;
    private javax.swing.JTextField txtYearAbsenteeism;
    private javax.swing.JTextField txtYearWrkAtt;
    // End of variables declaration//GEN-END:variables

    private boolean Validate() {
        //Form level validations
        if (txtAttDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Date");
            return false;
        } else if (!EITLERPGLOBAL.isDate(txtAttDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid Date in DD/MM/YYYY format.");
            return false;
        }

        if (!ExcPressed) {
            if (cmbDept.getSelectedItem().equals("Select Dept")) {
                JOptionPane.showMessageDialog(null, "Please Select Department");
                return false;
            }
        }

        if (cmbShift.getSelectedItem().equals("Select Shift")) {
            JOptionPane.showMessageDialog(null, "Please Select Shift");
            return false;
        }

        return true;
    }

    private boolean DateValidate() {
        if (txtFromDate_UDCWA.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(rptExcessList.this, "Please Enter From Date");
            txtFromDate_UDCWA.setText("");
            return false;
        }
        if (data.getIntValueFromDB("SELECT DATEDIFF('" + EITLERPGLOBAL.formatDateDB(txtFromDate_UDCWA.getText()) + "',CURDATE()) FROM DUAL") > 0) {
            JOptionPane.showMessageDialog(rptExcessList.this, "Please Enter Less than or Equals Current Date in From Date");
            txtFromDate_UDCWA.setText("");
            return false;
        }

        if (txtToDate_UDCWA.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(rptExcessList.this, "Please Enter To Date");
            txtToDate_UDCWA.setText("");
            return false;
        }
        if (data.getIntValueFromDB("SELECT DATEDIFF('" + EITLERPGLOBAL.formatDateDB(txtToDate_UDCWA.getText()) + "','" + EITLERPGLOBAL.formatDateDB(txtFromDate_UDCWA.getText()) + "') FROM DUAL") < 0) {
            JOptionPane.showMessageDialog(rptExcessList.this, "Please Enter Greater Date than From Date in To Date");
            txtToDate_UDCWA.setText("");
            return false;
        }

        return true;
    }

    private boolean MonthYearValidate() {
        if (cmbMonthAbsenteeism.getSelectedItem().equals("Select")) {
            JOptionPane.showMessageDialog(rptExcessList.this, "Please Select Month");
            return false;
        }
        if (txtYearAbsenteeism.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(rptExcessList.this, "Please Enter Year");
            txtYearAbsenteeism.setText("");
            return false;
        }
        if (txtYearAbsenteeism.getText().trim().length() != 4) {
            JOptionPane.showMessageDialog(rptExcessList.this, "Please Enter Valid Year");
            txtYearAbsenteeism.setText("");
            return false;
        }
        if (!EITLERPGLOBAL.IsNumber(txtYearAbsenteeism.getText().trim())) {
            JOptionPane.showMessageDialog(rptExcessList.this, "Please Enter Valid Year");
            txtYearAbsenteeism.setText("");
            return false;
        }

        return true;
    }

    private boolean MonthYearValidateWrkAtt() {
        if (cmbMonthWrkAtt.getSelectedItem().equals("Select")) {
            JOptionPane.showMessageDialog(rptExcessList.this, "Please Select Month");
            return false;
        }
        if (txtYearWrkAtt.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(rptExcessList.this, "Please Enter Year");
            txtYearWrkAtt.setText("");
            return false;
        }
        if (txtYearWrkAtt.getText().trim().length() != 4) {
            JOptionPane.showMessageDialog(rptExcessList.this, "Please Enter Valid Year");
            txtYearWrkAtt.setText("");
            return false;
        }
        if (!EITLERPGLOBAL.IsNumber(txtYearWrkAtt.getText().trim())) {
            JOptionPane.showMessageDialog(rptExcessList.this, "Please Enter Valid Year");
            txtYearWrkAtt.setText("");
            return false;
        }

        return true;
    }

    private void FormatGridAttList() {
        try {
            DataModelAttList = new EITLTableModel();
            Table_AttList.removeAll();

            Table_AttList.setModel(DataModelAttList);
            Table_AttList.setAutoResizeMode(0);

            DataModelAttList.addColumn("Sr.");
            DataModelAttList.addColumn("Emp ID");
            DataModelAttList.addColumn("Emp Name");
            DataModelAttList.addColumn("Department");
            DataModelAttList.addColumn("Category");
            DataModelAttList.addColumn("Sub Category");
            DataModelAttList.addColumn("Time");
            DataModelAttList.addColumn("Remark");
//            DataModelAttList.addColumn("Present");
//            DataModelAttList.addColumn("Absent");
//            DataModelAttList.addColumn("Excess");

            DataModelAttList.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Excess Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void GenerateAttList() {
        try {
            FormatGridAttList(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT * FROM SDMLATTPAY.DAILY_ATT_FORM_DATA "
                    + "WHERE COALESCE(EMP_PRESENT,0)=1 "
                    + "AND ATT_DATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                    + "AND ATT_DEPT= '" + cmbDept.getSelectedItem() + "' "
                    + "AND ATT_SHIFT= " + cmbShift.getSelectedItem() + " "
                    + "ORDER BY EMP_ID ";

//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[50];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("EMP_ID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("EMP_DEPT");
                    rowData[4] = rsTmp.getString("EMP_MAIN_CATEGORY");
                    rowData[5] = rsTmp.getString("EMP_SUB_CATEGORY");
                    rowData[6] = rsTmp.getString("PUNCH_TIME");
                    rowData[7] = rsTmp.getString("EMP_REMARK");
//                    if (rsTmp.getString("EMP_PRESENT").equalsIgnoreCase("1")) {
//                        rowData[8] = "Yes";
//                    } else {
//                        rowData[8] = "";
//                    }
//                    if (rsTmp.getString("EMP_ABSENT").equalsIgnoreCase("1")) {
//                        rowData[9] = "Yes";
//                    } else {
//                        rowData[9] = "";
//                    }
//                    if (rsTmp.getString("EMP_EXCESS").equalsIgnoreCase("1")) {
//                        rowData[10] = "Yes";
//                    } else {
//                        rowData[10] = "";
//                    }

                    DataModelAttList.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table_AttList.getColumnModel();
                for (int column = 0; column < Table_AttList.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table_AttList.getRowCount(); row++) {
                        TableCellRenderer renderer = Table_AttList.getCellRenderer(row, column);
                        Component comp = Table_AttList.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridAbsList() {
        try {
            DataModelAbsList = new EITLTableModel();
            Table_AbsList.removeAll();

            Table_AbsList.setModel(DataModelAbsList);
            Table_AbsList.setAutoResizeMode(0);

            DataModelAbsList.addColumn("Sr.");
            DataModelAbsList.addColumn("Emp ID");
            DataModelAbsList.addColumn("Emp Name");
            DataModelAbsList.addColumn("Department");
            DataModelAbsList.addColumn("Category");
            DataModelAbsList.addColumn("Sub Category");
            DataModelAbsList.addColumn("Time");
            DataModelAbsList.addColumn("Remark");
//            DataModelAbsList.addColumn("Present");
//            DataModelAbsList.addColumn("Absent");
//            DataModelAbsList.addColumn("Excess");

            DataModelAbsList.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Excess Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void GenerateAbsList() {
        try {
            FormatGridAbsList(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT * FROM SDMLATTPAY.DAILY_ATT_FORM_DATA "
                    + "WHERE COALESCE(EMP_ABSENT,0)=1 "
                    + "AND ATT_DATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' "
                    + "AND ATT_DEPT= '" + cmbDept.getSelectedItem() + "' "
                    + "AND ATT_SHIFT= " + cmbShift.getSelectedItem() + " "
                    + "ORDER BY EMP_ID ";

//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[50];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("EMP_ID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("EMP_DEPT");
                    rowData[4] = rsTmp.getString("EMP_MAIN_CATEGORY");
                    rowData[5] = rsTmp.getString("EMP_SUB_CATEGORY");
                    rowData[6] = rsTmp.getString("PUNCH_TIME");
                    rowData[7] = rsTmp.getString("EMP_REMARK");
//                    if (rsTmp.getString("EMP_PRESENT").equalsIgnoreCase("1")) {
//                        rowData[8] = "Yes";
//                    } else {
//                        rowData[8] = "";
//                    }
//                    if (rsTmp.getString("EMP_ABSENT").equalsIgnoreCase("1")) {
//                        rowData[9] = "Yes";
//                    } else {
//                        rowData[9] = "";
//                    }
//                    if (rsTmp.getString("EMP_EXCESS").equalsIgnoreCase("1")) {
//                        rowData[10] = "Yes";
//                    } else {
//                        rowData[10] = "";
//                    }

                    DataModelAbsList.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table_AbsList.getColumnModel();
                for (int column = 0; column < Table_AbsList.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table_AbsList.getRowCount(); row++) {
                        TableCellRenderer renderer = Table_AbsList.getCellRenderer(row, column);
                        Component comp = Table_AbsList.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridExcList() {
        try {
            DataModelExcList = new EITLTableModel();
            Table_ExcList.removeAll();

            Table_ExcList.setModel(DataModelExcList);
            Table_ExcList.setAutoResizeMode(0);

            DataModelExcList.addColumn("Sr.");
            DataModelExcList.addColumn("Emp ID");
            DataModelExcList.addColumn("Emp Name");
            DataModelExcList.addColumn("Department");
            DataModelExcList.addColumn("Category");
            DataModelExcList.addColumn("Sub Category");
            DataModelExcList.addColumn("Time");
            DataModelExcList.addColumn("Excess Remark");
            DataModelExcList.addColumn("Assigned");
            DataModelExcList.addColumn("Assigned Dept");
            DataModelExcList.addColumn("Assigned Remark");

            DataModelExcList.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Excess Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void GenerateExcList() {
        try {
            FormatGridExcList(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT * FROM SDMLATTPAY.DAILY_ATT_FORM_EXCESS_LIST WHERE ATT_DATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "' ";
            if (!cmbDept.getSelectedItem().toString().trim().equals("Select Dept")) {
                strSQL += "AND ATT_DEPT= '" + cmbDept.getSelectedItem() + "' ";
            }
            strSQL += "AND ATT_SHIFT= " + cmbShift.getSelectedItem() + " "
                    + "ORDER BY EMP_ID ";

//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[50];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("EMP_ID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("EMP_DEPT");
                    rowData[4] = rsTmp.getString("EMP_MAIN_CATEGORY");
                    rowData[5] = rsTmp.getString("EMP_SUB_CATEGORY");
                    rowData[6] = rsTmp.getString("PUNCH_TIME");
                    rowData[7] = rsTmp.getString("EMP_REMARK");
                    if (rsTmp.getString("ASSIGNED_IND").equalsIgnoreCase("1")) {
                        rowData[8] = "Yes";
                    } else {
                        rowData[8] = "No";
                    }
                    rowData[9] = rsTmp.getString("ASSIGNED_DEPT");
                    rowData[10] = rsTmp.getString("ASSIGNED_REMARK");

                    DataModelExcList.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table_ExcList.getColumnModel();
                for (int column = 0; column < Table_ExcList.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table_ExcList.getRowCount(); row++) {
                        TableCellRenderer renderer = Table_ExcList.getCellRenderer(row, column);
                        Component comp = Table_ExcList.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridPWAList() {
        try {
            DataModelPWAList = new EITLTableModel();
            Table_PWAList.removeAll();

            Table_PWAList.setModel(DataModelPWAList);
            Table_PWAList.setAutoResizeMode(0);

            DataModelPWAList.addColumn("Sr.");
            DataModelPWAList.addColumn("Dept");
            DataModelPWAList.addColumn("Dept Name");
            DataModelPWAList.addColumn("Shift 1 Worker Permanent");
            DataModelPWAList.addColumn("Shift 1 Worker Badli");
            DataModelPWAList.addColumn("Shift 1 Worker Total");
            DataModelPWAList.addColumn("Shift 2 Worker Permanent");
            DataModelPWAList.addColumn("Shift 2 Worker Badli");
            DataModelPWAList.addColumn("Shift 2 Worker Total");
            DataModelPWAList.addColumn("Shift 3 Worker Permanent");
            DataModelPWAList.addColumn("Shift 3 Worker Badli");
            DataModelPWAList.addColumn("Shift 3 Worker Total");
            DataModelPWAList.addColumn("Total Worker Permanent");
            DataModelPWAList.addColumn("Total Worker Badli");
            DataModelPWAList.addColumn("Total Worker");

            Table_PWAList.getTableHeader().setDefaultRenderer(new MultiLineTableHeaderRenderer());
            Table_PWAList.getTableHeader().setPreferredSize(new Dimension(Table_PWAList.getColumnModel().getTotalColumnWidth(), 64));

            Table_PWAList.getColumnModel().getColumn(0).setMinWidth(50);
            Table_PWAList.getColumnModel().getColumn(0).setMaxWidth(50);

            Table_PWAList.getColumnModel().getColumn(1).setMinWidth(130);
            Table_PWAList.getColumnModel().getColumn(1).setMaxWidth(130);

            Table_PWAList.getColumnModel().getColumn(2).setMinWidth(150);
            Table_PWAList.getColumnModel().getColumn(2).setMaxWidth(150);

            for (int i = 3; i <= 14; i++) {
                Table_PWAList.getColumnModel().getColumn(i).setMinWidth(75);
                Table_PWAList.getColumnModel().getColumn(i).setMaxWidth(75);
            }

            DataModelPWAList.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Excess Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void GeneratePWAList() {
        try {
            FormatGridPWAList(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT PUNCHDATE,ERP_DEPT, "
                    + "CASE WHEN ERP_DEPT IN ('WEAVING','MENDING','NEEDLING','YARN STORE','FINISHING','WAREHOUSE') THEN CONCAT('FELT ',ERP_DEPT) ELSE ERP_DEPT END AS A, "
                    + "CASE WHEN ERP_DEPT IN ('WEAVING','MENDING','NEEDLING','YARN STORE','FINISHING','WAREHOUSE') THEN 'A' ELSE CASE WHEN ERP_DEPT IN ('ENGINEERING') THEN 'B' ELSE CASE WHEN ERP_DEPT IN ('PEONS') THEN 'C' ELSE CASE WHEN ERP_DEPT IN ('SECURITY') THEN 'D' ELSE '' END END END END AS SR, "
                    + "DPTNAME, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME !='BADLI WORKER' AND SHIFT_CONSIDER IN (1,4) THEN 1 ELSE 0 END,0)) AS WORKER_1, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME ='BADLI WORKER' AND SHIFT_CONSIDER IN (1,4) THEN 1 ELSE 0 END,0)) AS WORKER_1_B, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER'  AND SHIFT_CONSIDER IN (1,4) THEN 1 ELSE 0 END,0)) AS WORKER_1_T, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME !='BADLI WORKER' AND SHIFT_CONSIDER =2 THEN 1 ELSE 0 END,0)) AS WORKER_2, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME ='BADLI WORKER' AND SHIFT_CONSIDER =2 THEN 1 ELSE 0 END,0)) AS WORKER_2_B, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND SHIFT_CONSIDER =2 THEN 1 ELSE 0 END,0)) AS WORKER_2_T, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME !='BADLI WORKER' AND SHIFT_CONSIDER =3 THEN 1 ELSE 0 END,0)) AS WORKER_3, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME ='BADLI WORKER' AND SHIFT_CONSIDER =3 THEN 1 ELSE 0 END,0)) AS WORKER_3_B, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND SHIFT_CONSIDER =3 THEN 1 ELSE 0 END,0)) AS WORKER_3_T, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME !='BADLI WORKER'  THEN 1 ELSE 0 END,0)) AS WORKER_P, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME ='BADLI WORKER'  THEN 1 ELSE 0 END,0)) AS WORKER_B, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' THEN 1 ELSE 0 END,0)) AS WORKER_TOTAL "
                    + "FROM "
                    + "( "
                    + "SELECT CASE WHEN SECID IN (2,5,9) THEN'STAFF' ELSE 'WORKER' END AS CTG,SHIFT_CONSIDER, "
                    + "EMPID,EMP.EMP_NAME,DPTNAME,ERP_DEPT, COALESCE(EMP_DEPT,'') AS EMP_DEPT,CTGNAME,MM,YYYY,PUNCHDATE,SHIFT,ATT_SHIFT,PUNCHES_NOS, ALL_PUNCHES FROM ( SELECT *, SEC_TO_TIME(TIME_TO_SEC(GP_FIRST_HALF) + TIME_TO_SEC(GP_SECOND_HALF) + TIME_TO_SEC(LATE_COMING_HRS) + TIME_TO_SEC(LUNCH_LATE_HRS) + TIME_TO_SEC(GP_ADDITIONAL_HRS) ) AS TOTAL_LATE_COMING FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM  AND PUNCHDATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "'  ) AS DAS LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP ON DAS.EMPID=EMP.PAY_EMP_NO "
                    + " LEFT JOIN ( SELECT SHIFT_ID,SHIFT_CONSIDER FROM SDMLATTPAY.ATT_SHIFT) AS SFT ON DAS.SHIFT =SFT.SHIFT_ID "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME,ERP_DEPT FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT ON DPT.DPTID=EMP.EMP_DEPARTMENT LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC ON SEC.SECID=DAS.MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG ON CTG.CTGID=DAS.CATEGORY "
                    + "LEFT JOIN ( SELECT *,'YES' AS SSS FROM SDMLATTPAY.ATT_SPECIAL_SANCTION WHERE APPROVED=1 AND CANCELED=0 ) AS SS  ON DAS.EMPID=SS.EMP_CODE AND DAS.PUNCHDATE=SS.A_DATE  "
                    + "LEFT JOIN (SELECT ATT_DATE, ATT_SHIFT,EMP_ID,EMP_NAME,EMP_DEPT,EMP_PRESENT "
                    + "FROM SDMLATTPAY.DAILY_ATT_FORM_DATA WHERE APPROVED =1 AND CANCELED =0 AND EMP_PRESENT =1 ) AS ATT "
                    + "ON DAS.EMPID = ATT.EMP_ID AND DAS.PUNCHDATE = ATT.ATT_DATE "
                    + "WHERE PUNCHES_NOS+0 !=0 AND MAIN_CATEGORY != 12 "
                    + "AND SUBSTRING(EMPID,1,5) = 'BRD30' "
                    + ") AS M "
                    + "GROUP BY PUNCHDATE,ERP_DEPT,DPTNAME "
                    + "UNION ALL  "
                    + "SELECT PUNCHDATE,'Z','', "
                    + "CASE WHEN ERP_DEPT IN ('WEAVING','MENDING','NEEDLING','YARN STORE','FINISHING','WAREHOUSE') THEN 'A' ELSE CASE WHEN ERP_DEPT IN ('ENGINEERING') THEN 'B' ELSE CASE WHEN ERP_DEPT IN ('PEONS') THEN 'C' ELSE CASE WHEN ERP_DEPT IN ('SECURITY') THEN 'D' ELSE '' END END END END AS SR, "
                    + "'TOTAL', "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME !='BADLI WORKER' AND SHIFT_CONSIDER IN (1,4) THEN 1 ELSE 0 END,0)) AS WORKER_1, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME ='BADLI WORKER' AND SHIFT_CONSIDER IN (1,4) THEN 1 ELSE 0 END,0)) AS WORKER_1_B, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER'  AND SHIFT_CONSIDER IN (1,4) THEN 1 ELSE 0 END,0)) AS WORKER_1_T, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME !='BADLI WORKER' AND SHIFT_CONSIDER =2 THEN 1 ELSE 0 END,0)) AS WORKER_2, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME ='BADLI WORKER' AND SHIFT_CONSIDER =2 THEN 1 ELSE 0 END,0)) AS WORKER_2_B, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND SHIFT_CONSIDER =2 THEN 1 ELSE 0 END,0)) AS WORKER_2_T, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME !='BADLI WORKER' AND SHIFT_CONSIDER =3 THEN 1 ELSE 0 END,0)) AS WORKER_3, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME ='BADLI WORKER' AND SHIFT_CONSIDER =3 THEN 1 ELSE 0 END,0)) AS WORKER_3_B, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND SHIFT_CONSIDER =3 THEN 1 ELSE 0 END,0)) AS WORKER_3_T, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME !='BADLI WORKER'  THEN 1 ELSE 0 END,0)) AS WORKER_P, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME ='BADLI WORKER'  THEN 1 ELSE 0 END,0)) AS WORKER_B, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' THEN 1 ELSE 0 END,0)) AS WORKER_TOTAL "
                    + "FROM "
                    + "( "
                    + "SELECT CASE WHEN SECID IN (2,5,9) THEN'STAFF' ELSE 'WORKER' END AS CTG,SHIFT_CONSIDER, "
                    + "EMPID,EMP.EMP_NAME,DPTNAME,ERP_DEPT, COALESCE(EMP_DEPT,'') AS EMP_DEPT,CTGNAME,MM,YYYY,PUNCHDATE,SHIFT,ATT_SHIFT,PUNCHES_NOS, ALL_PUNCHES FROM ( SELECT *, SEC_TO_TIME(TIME_TO_SEC(GP_FIRST_HALF) + TIME_TO_SEC(GP_SECOND_HALF) + TIME_TO_SEC(LATE_COMING_HRS) + TIME_TO_SEC(LUNCH_LATE_HRS) + TIME_TO_SEC(GP_ADDITIONAL_HRS) ) AS TOTAL_LATE_COMING FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM  AND PUNCHDATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "'  ) AS DAS LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP ON DAS.EMPID=EMP.PAY_EMP_NO "
                    + " LEFT JOIN ( SELECT SHIFT_ID,SHIFT_CONSIDER FROM SDMLATTPAY.ATT_SHIFT) AS SFT ON DAS.SHIFT =SFT.SHIFT_ID "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME,ERP_DEPT FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT ON DPT.DPTID=EMP.EMP_DEPARTMENT LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC ON SEC.SECID=DAS.MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG ON CTG.CTGID=DAS.CATEGORY "
                    + "LEFT JOIN ( SELECT *,'YES' AS SSS FROM SDMLATTPAY.ATT_SPECIAL_SANCTION WHERE APPROVED=1 AND CANCELED=0 ) AS SS  ON DAS.EMPID=SS.EMP_CODE AND DAS.PUNCHDATE=SS.A_DATE  "
                    + "LEFT JOIN (SELECT ATT_DATE, ATT_SHIFT,EMP_ID,EMP_NAME,EMP_DEPT,EMP_PRESENT "
                    + "FROM SDMLATTPAY.DAILY_ATT_FORM_DATA WHERE APPROVED =1 AND CANCELED =0 AND EMP_PRESENT =1 ) AS ATT "
                    + "ON DAS.EMPID = ATT.EMP_ID AND DAS.PUNCHDATE = ATT.ATT_DATE "
                    + "WHERE PUNCHES_NOS+0 !=0 AND MAIN_CATEGORY != 12 "
                    + "AND SUBSTRING(EMPID,1,5) = 'BRD30' "
                    + ") AS M "
                    + "GROUP BY PUNCHDATE,SR "
                    + "UNION ALL  "
                    + "SELECT PUNCHDATE,'','','Z','GRAND TOTAL', "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME !='BADLI WORKER' AND SHIFT_CONSIDER IN (1,4) THEN 1 ELSE 0 END,0)) AS WORKER_1, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME ='BADLI WORKER' AND SHIFT_CONSIDER IN (1,4) THEN 1 ELSE 0 END,0)) AS WORKER_1_B, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER'  AND SHIFT_CONSIDER IN (1,4) THEN 1 ELSE 0 END,0)) AS WORKER_1_T, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME !='BADLI WORKER' AND SHIFT_CONSIDER =2 THEN 1 ELSE 0 END,0)) AS WORKER_2, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME ='BADLI WORKER' AND SHIFT_CONSIDER =2 THEN 1 ELSE 0 END,0)) AS WORKER_2_B, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND SHIFT_CONSIDER =2 THEN 1 ELSE 0 END,0)) AS WORKER_2_T, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME !='BADLI WORKER' AND SHIFT_CONSIDER =3 THEN 1 ELSE 0 END,0)) AS WORKER_3, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME ='BADLI WORKER' AND SHIFT_CONSIDER =3 THEN 1 ELSE 0 END,0)) AS WORKER_3_B, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND SHIFT_CONSIDER =3 THEN 1 ELSE 0 END,0)) AS WORKER_3_T, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME !='BADLI WORKER'  THEN 1 ELSE 0 END,0)) AS WORKER_P, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' AND CTGNAME ='BADLI WORKER'  THEN 1 ELSE 0 END,0)) AS WORKER_B, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' THEN 1 ELSE 0 END,0)) AS WORKER_TOTAL "
                    + "FROM "
                    + "( "
                    + "SELECT CASE WHEN SECID IN (2,5,9) THEN'STAFF' ELSE 'WORKER' END AS CTG,SHIFT_CONSIDER, "
                    + "EMPID,EMP.EMP_NAME,DPTNAME,ERP_DEPT, COALESCE(EMP_DEPT,'') AS EMP_DEPT,CTGNAME,MM,YYYY,PUNCHDATE,SHIFT,ATT_SHIFT,PUNCHES_NOS, ALL_PUNCHES FROM ( SELECT *, SEC_TO_TIME(TIME_TO_SEC(GP_FIRST_HALF) + TIME_TO_SEC(GP_SECOND_HALF) + TIME_TO_SEC(LATE_COMING_HRS) + TIME_TO_SEC(LUNCH_LATE_HRS) + TIME_TO_SEC(GP_ADDITIONAL_HRS) ) AS TOTAL_LATE_COMING FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM  AND PUNCHDATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "'  ) AS DAS LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP ON DAS.EMPID=EMP.PAY_EMP_NO "
                    + " LEFT JOIN ( SELECT SHIFT_ID,SHIFT_CONSIDER FROM SDMLATTPAY.ATT_SHIFT) AS SFT ON DAS.SHIFT =SFT.SHIFT_ID "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME,ERP_DEPT FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT ON DPT.DPTID=EMP.EMP_DEPARTMENT LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC ON SEC.SECID=DAS.MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG ON CTG.CTGID=DAS.CATEGORY "
                    + "LEFT JOIN ( SELECT *,'YES' AS SSS FROM SDMLATTPAY.ATT_SPECIAL_SANCTION WHERE APPROVED=1 AND CANCELED=0 ) AS SS  ON DAS.EMPID=SS.EMP_CODE AND DAS.PUNCHDATE=SS.A_DATE  "
                    + "LEFT JOIN (SELECT ATT_DATE, ATT_SHIFT,EMP_ID,EMP_NAME,EMP_DEPT,EMP_PRESENT "
                    + "FROM SDMLATTPAY.DAILY_ATT_FORM_DATA WHERE APPROVED =1 AND CANCELED =0 AND EMP_PRESENT =1 ) AS ATT "
                    + "ON DAS.EMPID = ATT.EMP_ID AND DAS.PUNCHDATE = ATT.ATT_DATE "
                    + "WHERE PUNCHES_NOS+0 !=0 AND MAIN_CATEGORY != 12 "
                    + "AND SUBSTRING(EMPID,1,5) = 'BRD30' "
                    + ") AS M "
                    + "GROUP BY PUNCHDATE "
                    + "ORDER BY SR,ERP_DEPT,DPTNAME";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[50];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("A");
                    rowData[2] = rsTmp.getString("DPTNAME");
                    rowData[3] = rsTmp.getString("WORKER_1");
                    rowData[4] = rsTmp.getString("WORKER_1_B");
                    rowData[5] = rsTmp.getString("WORKER_1_T");
                    rowData[6] = rsTmp.getString("WORKER_2");
                    rowData[7] = rsTmp.getString("WORKER_2_B");
                    rowData[8] = rsTmp.getString("WORKER_2_T");
                    rowData[9] = rsTmp.getString("WORKER_3");
                    rowData[10] = rsTmp.getString("WORKER_3_B");
                    rowData[11] = rsTmp.getString("WORKER_3_T");
                    rowData[12] = rsTmp.getString("WORKER_P");
                    rowData[13] = rsTmp.getString("WORKER_B");
                    rowData[14] = rsTmp.getString("WORKER_TOTAL");

                    DataModelPWAList.addRow(rowData);
                    rsTmp.next();
                }
//                final TableColumnModel columnModel = Table_PWAList.getColumnModel();
//                for (int column = 0; column < Table_PWAList.getColumnCount(); column++) {
//                    int width = 72; // Min width
//                    for (int row = 0; row < Table_PWAList.getRowCount(); row++) {
//                        TableCellRenderer renderer = Table_PWAList.getCellRenderer(row, column);
//                        Component comp = Table_PWAList.prepareRenderer(renderer, row, column);
//                        width = Math.max(comp.getPreferredSize().width + 10, width);
//                    }
//                    if (width > 300) {
//                        width = 300;
//                    }
//                    columnModel.getColumn(column).setPreferredWidth(width);
//                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridCWAList() {
        try {
            DataModelCWAList = new EITLTableModel();
            Table_CWAList.removeAll();

            Table_CWAList.setModel(DataModelCWAList);
            Table_CWAList.setAutoResizeMode(0);

            DataModelCWAList.addColumn("Sr.");
            DataModelCWAList.addColumn("Dept");
            DataModelCWAList.addColumn("Dept Name");
            DataModelCWAList.addColumn("Shift 1");
            DataModelCWAList.addColumn("Shift 2");
            DataModelCWAList.addColumn("Shift 3");
            DataModelCWAList.addColumn("Total");

            Table_CWAList.getTableHeader().setDefaultRenderer(new MultiLineTableHeaderRenderer());
            Table_CWAList.getTableHeader().setPreferredSize(new Dimension(Table_CWAList.getColumnModel().getTotalColumnWidth(), 64));

            Table_CWAList.getColumnModel().getColumn(0).setMinWidth(50);
            Table_CWAList.getColumnModel().getColumn(0).setMaxWidth(50);

            Table_CWAList.getColumnModel().getColumn(1).setMinWidth(130);
            Table_CWAList.getColumnModel().getColumn(1).setMaxWidth(130);

            Table_CWAList.getColumnModel().getColumn(2).setMinWidth(150);
            Table_CWAList.getColumnModel().getColumn(2).setMaxWidth(150);

            for (int i = 3; i <= 6; i++) {
                Table_CWAList.getColumnModel().getColumn(i).setMinWidth(75);
                Table_CWAList.getColumnModel().getColumn(i).setMaxWidth(75);
            }

            DataModelCWAList.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Excess Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void GenerateCWAList() {
        try {
            FormatGridCWAList(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT PUNCHDATE,ATT_DEPT, "
                    + "CASE WHEN ATT_DEPT IN ('WEAVING','MENDING','NEEDLING','YARN STORE','FINISHING','CARDING','WAREHOUSE') THEN CONCAT('FELT ',ATT_DEPT) ELSE ATT_DEPT END AS A, "
                    + "CASE WHEN ERP_DEPT IN ('WEAVING','MENDING','NEEDLING','YARN STORE','FINISHING','CARDING','WAREHOUSE') THEN 'A' ELSE CASE WHEN ERP_DEPT IN ('ENGINEERING') THEN 'B' ELSE CASE WHEN ERP_DEPT IN ('PEONS') THEN 'C' ELSE CASE WHEN ERP_DEPT IN ('SECURITY') THEN 'D' ELSE CASE WHEN ERP_DEPT IN ('RMG') THEN 'E' ELSE CASE WHEN ERP_DEPT IN ('STORES') THEN 'F' ELSE '' END END END END END END AS SR, "
                    + "DPTNAME, "
                    + "SUM(COALESCE(CASE WHEN SHIFT_CONSIDER IN (1,4) THEN 1 ELSE 0 END,0)) AS WORKER_1, "
                    + "SUM(COALESCE(CASE WHEN SHIFT_CONSIDER =2 THEN 1 ELSE 0 END,0)) AS WORKER_2, "
                    + "SUM(COALESCE(CASE WHEN SHIFT_CONSIDER =3 THEN 1 ELSE 0 END,0)) AS WORKER_3, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' THEN 1 ELSE 0 END,0)) AS WORKER_TOTAL "
                    + "FROM "
                    + "( "
                    + "SELECT CASE WHEN SECID IN (2,5,9) THEN'STAFF' ELSE 'WORKER' END AS CTG,SHIFT_CONSIDER, "
                    + "EMPID,EMP.EMP_NAME,DPTNAME,ATT_DEPT,ERP_DEPT, COALESCE(EMP_DEPT,'') AS EMP_DEPT,CTGNAME,MM,YYYY,PUNCHDATE,SHIFT,ATT_SHIFT,PUNCHES_NOS, ALL_PUNCHES FROM ( SELECT *, SEC_TO_TIME(TIME_TO_SEC(GP_FIRST_HALF) + TIME_TO_SEC(GP_SECOND_HALF) + TIME_TO_SEC(LATE_COMING_HRS) + TIME_TO_SEC(LUNCH_LATE_HRS) + TIME_TO_SEC(GP_ADDITIONAL_HRS) ) AS TOTAL_LATE_COMING FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM  AND PUNCHDATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "'  ) AS DAS LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP ON DAS.EMPID=EMP.PAY_EMP_NO "
                    + " LEFT JOIN ( SELECT SHIFT_ID,SHIFT_CONSIDER FROM SDMLATTPAY.ATT_SHIFT) AS SFT ON DAS.SHIFT =SFT.SHIFT_ID "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME,ERP_DEPT FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT ON DPT.DPTID=EMP.EMP_DEPARTMENT LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC ON SEC.SECID=DAS.MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG ON CTG.CTGID=DAS.CATEGORY "
                    + "LEFT JOIN ( SELECT *,'YES' AS SSS FROM SDMLATTPAY.ATT_SPECIAL_SANCTION WHERE APPROVED=1 AND CANCELED=0 ) AS SS  ON DAS.EMPID=SS.EMP_CODE AND DAS.PUNCHDATE=SS.A_DATE  "
                    + "LEFT JOIN (SELECT ATT_DATE, ATT_SHIFT,EMP_ID,EMP_NAME,EMP_DEPT,EMP_PRESENT,ATT_DEPT "
                    + "FROM SDMLATTPAY.DAILY_ATT_FORM_DATA WHERE APPROVED =1 AND CANCELED =0 AND EMP_PRESENT =1 "
                    + ") AS ATT "
                    + "ON DAS.EMPID = ATT.EMP_ID AND DAS.PUNCHDATE = ATT.ATT_DATE "
                    + "WHERE PUNCHES_NOS+0 !=0 "
                    + "AND SUBSTRING(EMPID,1,6) = 'BRD003' "
                    + ") AS M "
                    + "GROUP BY PUNCHDATE,ATT_DEPT,DPTNAME "
                    + "UNION ALL  "
                    + "SELECT PUNCHDATE,'Z','', "
                    + "CASE WHEN ERP_DEPT IN ('WEAVING','MENDING','NEEDLING','YARN STORE','FINISHING','CARDING','WAREHOUSE') THEN 'A' ELSE CASE WHEN ERP_DEPT IN ('ENGINEERING') THEN 'B' ELSE CASE WHEN ERP_DEPT IN ('PEONS') THEN 'C' ELSE CASE WHEN ERP_DEPT IN ('SECURITY') THEN 'D' ELSE CASE WHEN ERP_DEPT IN ('RMG') THEN 'E' ELSE CASE WHEN ERP_DEPT IN ('STORES') THEN 'F' ELSE '' END END END END END END AS SR, "
                    + "'TOTAL', "
                    + "SUM(COALESCE(CASE WHEN SHIFT_CONSIDER IN (1,4) THEN 1 ELSE 0 END,0)) AS WORKER_1, "
                    + "SUM(COALESCE(CASE WHEN SHIFT_CONSIDER =2 THEN 1 ELSE 0 END,0)) AS WORKER_2, "
                    + "SUM(COALESCE(CASE WHEN SHIFT_CONSIDER =3 THEN 1 ELSE 0 END,0)) AS WORKER_3, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' THEN 1 ELSE 0 END,0)) AS WORKER_TOTAL "
                    + "FROM "
                    + "( "
                    + "SELECT CASE WHEN SECID IN (2,5,9) THEN'STAFF' ELSE 'WORKER' END AS CTG,SHIFT_CONSIDER, "
                    + "EMPID,EMP.EMP_NAME,DPTNAME,ATT_DEPT,ERP_DEPT, COALESCE(EMP_DEPT,'') AS EMP_DEPT,CTGNAME,MM,YYYY,PUNCHDATE,SHIFT,ATT_SHIFT,PUNCHES_NOS, ALL_PUNCHES FROM ( SELECT *, SEC_TO_TIME(TIME_TO_SEC(GP_FIRST_HALF) + TIME_TO_SEC(GP_SECOND_HALF) + TIME_TO_SEC(LATE_COMING_HRS) + TIME_TO_SEC(LUNCH_LATE_HRS) + TIME_TO_SEC(GP_ADDITIONAL_HRS) ) AS TOTAL_LATE_COMING FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM  AND PUNCHDATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "'  ) AS DAS LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP ON DAS.EMPID=EMP.PAY_EMP_NO "
                    + " LEFT JOIN ( SELECT SHIFT_ID,SHIFT_CONSIDER FROM SDMLATTPAY.ATT_SHIFT) AS SFT ON DAS.SHIFT =SFT.SHIFT_ID "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME,ERP_DEPT FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT ON DPT.DPTID=EMP.EMP_DEPARTMENT LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC ON SEC.SECID=DAS.MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG ON CTG.CTGID=DAS.CATEGORY "
                    + "LEFT JOIN ( SELECT *,'YES' AS SSS FROM SDMLATTPAY.ATT_SPECIAL_SANCTION WHERE APPROVED=1 AND CANCELED=0 ) AS SS  ON DAS.EMPID=SS.EMP_CODE AND DAS.PUNCHDATE=SS.A_DATE  "
                    + "LEFT JOIN (SELECT ATT_DATE, ATT_SHIFT,EMP_ID,EMP_NAME,EMP_DEPT,EMP_PRESENT,ATT_DEPT "
                    + "FROM SDMLATTPAY.DAILY_ATT_FORM_DATA WHERE APPROVED =1 AND CANCELED =0 AND EMP_PRESENT =1 "
                    + ") AS ATT "
                    + "ON DAS.EMPID = ATT.EMP_ID AND DAS.PUNCHDATE = ATT.ATT_DATE "
                    + "WHERE PUNCHES_NOS+0 !=0 "
                    + "AND SUBSTRING(EMPID,1,6) = 'BRD003' "
                    + ") AS M "
                    + "GROUP BY PUNCHDATE,SR "
                    + "UNION ALL  "
                    + "SELECT PUNCHDATE,'','','Z','GRAND TOTAL', "
                    + "SUM(COALESCE(CASE WHEN SHIFT_CONSIDER IN (1,4) THEN 1 ELSE 0 END,0)) AS WORKER_1, "
                    + "SUM(COALESCE(CASE WHEN SHIFT_CONSIDER =2 THEN 1 ELSE 0 END,0)) AS WORKER_2, "
                    + "SUM(COALESCE(CASE WHEN SHIFT_CONSIDER =3 THEN 1 ELSE 0 END,0)) AS WORKER_3, "
                    + "SUM(COALESCE(CASE WHEN CTG ='WORKER' THEN 1 ELSE 0 END,0)) AS WORKER_TOTAL "
                    + "FROM "
                    + "( "
                    + "SELECT CASE WHEN SECID IN (2,5,9) THEN'STAFF' ELSE 'WORKER' END AS CTG,SHIFT_CONSIDER, "
                    + "EMPID,EMP.EMP_NAME,DPTNAME,ATT_DEPT,ERP_DEPT, COALESCE(EMP_DEPT,'') AS EMP_DEPT,CTGNAME,MM,YYYY,PUNCHDATE,SHIFT,ATT_SHIFT,PUNCHES_NOS, ALL_PUNCHES FROM ( SELECT *, SEC_TO_TIME(TIME_TO_SEC(GP_FIRST_HALF) + TIME_TO_SEC(GP_SECOND_HALF) + TIME_TO_SEC(LATE_COMING_HRS) + TIME_TO_SEC(LUNCH_LATE_HRS) + TIME_TO_SEC(GP_ADDITIONAL_HRS) ) AS TOTAL_LATE_COMING FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM  AND PUNCHDATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "'  ) AS DAS LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP ON DAS.EMPID=EMP.PAY_EMP_NO "
                    + " LEFT JOIN ( SELECT SHIFT_ID,SHIFT_CONSIDER FROM SDMLATTPAY.ATT_SHIFT) AS SFT ON DAS.SHIFT =SFT.SHIFT_ID "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME,ERP_DEPT FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT ON DPT.DPTID=EMP.EMP_DEPARTMENT LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC ON SEC.SECID=DAS.MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG ON CTG.CTGID=DAS.CATEGORY "
                    + "LEFT JOIN ( SELECT *,'YES' AS SSS FROM SDMLATTPAY.ATT_SPECIAL_SANCTION WHERE APPROVED=1 AND CANCELED=0 ) AS SS  ON DAS.EMPID=SS.EMP_CODE AND DAS.PUNCHDATE=SS.A_DATE  "
                    + "LEFT JOIN (SELECT ATT_DATE, ATT_SHIFT,EMP_ID,EMP_NAME,EMP_DEPT,EMP_PRESENT,ATT_DEPT "
                    + "FROM SDMLATTPAY.DAILY_ATT_FORM_DATA WHERE APPROVED =1 AND CANCELED =0 AND EMP_PRESENT =1 "
                    + ") AS ATT "
                    + "ON DAS.EMPID = ATT.EMP_ID AND DAS.PUNCHDATE = ATT.ATT_DATE "
                    + "WHERE PUNCHES_NOS+0 !=0 "
                    + "AND SUBSTRING(EMPID,1,6) = 'BRD003' "
                    + ") AS M "
                    + "GROUP BY PUNCHDATE "
                    + "ORDER BY SR,ATT_DEPT,DPTNAME";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[50];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("A");
                    rowData[2] = rsTmp.getString("DPTNAME");
                    rowData[3] = rsTmp.getString("WORKER_1");
                    rowData[4] = rsTmp.getString("WORKER_2");
                    rowData[5] = rsTmp.getString("WORKER_3");
                    rowData[6] = rsTmp.getString("WORKER_TOTAL");

                    DataModelCWAList.addRow(rowData);
                    rsTmp.next();
                }
//                final TableColumnModel columnModel = Table_PWAList.getColumnModel();
//                for (int column = 0; column < Table_PWAList.getColumnCount(); column++) {
//                    int width = 72; // Min width
//                    for (int row = 0; row < Table_PWAList.getRowCount(); row++) {
//                        TableCellRenderer renderer = Table_PWAList.getCellRenderer(row, column);
//                        Component comp = Table_PWAList.prepareRenderer(renderer, row, column);
//                        width = Math.max(comp.getPreferredSize().width + 10, width);
//                    }
//                    if (width > 300) {
//                        width = 300;
//                    }
//                    columnModel.getColumn(column).setPreferredWidth(width);
//                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridUDCWAList() {
        try {
            DataModelUDCWAList = new EITLTableModel();
            Table_UDCWAList.removeAll();

            Table_UDCWAList.setModel(DataModelUDCWAList);
            Table_UDCWAList.setAutoResizeMode(0);

            DataModelUDCWAList.addColumn("Sr.");
            DataModelUDCWAList.addColumn("Emp ID");
            DataModelUDCWAList.addColumn("Emp Name");
            DataModelUDCWAList.addColumn("Emp Dept");
            DataModelUDCWAList.addColumn("ERP Dept");
            DataModelUDCWAList.addColumn("Att Dept");
            DataModelUDCWAList.addColumn("Month");
            DataModelUDCWAList.addColumn("Year");
            DataModelUDCWAList.addColumn("Att Days");

            DataModelUDCWAList.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void GenerateUDCWAList() {
        try {
            FormatGridUDCWAList(); //clear existing content of table
            ResultSet rsTmp;

            String pSM1 = "";
            String pSM2 = "";
            String strSQL = "";//AND PUNCHDATE= '" + EITLERPGLOBAL.formatDateDB(txtAttDate.getText().trim()) + "'

            if (!cmbSM.getSelectedItem().equals("All")) {
                pSM1 = "SELECT * FROM( ";
                pSM2 = ") AS D WHERE EMPID IN (SELECT EMP_ID FROM (SELECT * FROM SDMLATTPAY.DAILY_ATT_FORM_DATA WHERE APPROVED =1 AND CANCELED =0 AND EMP_PRESENT =1 AND ATT_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtFromDate_UDCWA.getText().trim()) + "' AND ATT_DATE <= '" + EITLERPGLOBAL.formatDateDB(txtToDate_UDCWA.getText().trim()) + "' GROUP BY EMP_ID,ATT_DEPT) AS DD GROUP BY EMP_ID HAVING COUNT(ATT_DEPT)>1) ";
            }
            strSQL = pSM1 + "SELECT MM,YYYY,EMPID,EMP_NAME,DPTNAME,ERP_DEPT, ATT_DEPT,COUNT(EMPID) AS ATT_TOTAL_DAYS FROM "
                    + "(SELECT CASE WHEN SECID IN (2,5,9) THEN'STAFF' ELSE 'WORKER' END AS CTG,SHIFT_CONSIDER, EMPID,EMP.EMP_NAME,"
                    + "DPTNAME,CASE WHEN COALESCE(ATT_DEPT,'')='' THEN ERP_DEPT ELSE ATT_DEPT END AS ATT_DEPT,ERP_DEPT, "
                    + "COALESCE(EMP_DEPT,'') AS EMP_DEPT,CTGNAME,MM,YYYY,PUNCHDATE,SHIFT,ATT_SHIFT,PUNCHES_NOS, ALL_PUNCHES "
                    + "FROM ( SELECT *, SEC_TO_TIME(TIME_TO_SEC(GP_FIRST_HALF) + TIME_TO_SEC(GP_SECOND_HALF) + TIME_TO_SEC(LATE_COMING_HRS) + TIME_TO_SEC(LUNCH_LATE_HRS) + TIME_TO_SEC(GP_ADDITIONAL_HRS) ) AS TOTAL_LATE_COMING "
                    + "FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM "
                    + " AND PUNCHDATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate_UDCWA.getText().trim()) + "' "
                    + " AND PUNCHDATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate_UDCWA.getText().trim()) + "' "
                    + " ) AS DAS LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP ON DAS.EMPID=EMP.PAY_EMP_NO  LEFT JOIN ( SELECT SHIFT_ID,SHIFT_CONSIDER FROM SDMLATTPAY.ATT_SHIFT) AS SFT ON DAS.SHIFT =SFT.SHIFT_ID "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME,ERP_DEPT FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT ON DPT.DPTID=EMP.EMP_DEPARTMENT LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC ON SEC.SECID=DAS.MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG ON CTG.CTGID=DAS.CATEGORY LEFT JOIN ( SELECT *,'YES' AS SSS FROM SDMLATTPAY.ATT_SPECIAL_SANCTION WHERE APPROVED=1 AND CANCELED=0 ) AS SS  ON DAS.EMPID=SS.EMP_CODE AND DAS.PUNCHDATE=SS.A_DATE "
                    + " LEFT JOIN (SELECT ATT_DATE, ATT_SHIFT,EMP_ID,EMP_NAME,EMP_DEPT,EMP_PRESENT,ATT_DEPT FROM SDMLATTPAY.DAILY_ATT_FORM_DATA WHERE APPROVED =1 AND CANCELED =0 AND EMP_PRESENT =1 ) AS ATT ON DAS.EMPID = ATT.EMP_ID AND DAS.PUNCHDATE = ATT.ATT_DATE WHERE PUNCHES_NOS+0 !=0 AND SUBSTRING(EMPID,1,5) = 'BRD00' ) AS M "
                    + "GROUP BY MM,YYYY,EMPID,EMP_NAME,DPTNAME,ERP_DEPT,ATT_DEPT "
                    + "ORDER BY EMPID,EMP_NAME,YYYY,MM "
                    + pSM2 + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[50];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("ERP_DEPT");
                    rowData[5] = rsTmp.getString("ATT_DEPT");
                    rowData[6] = rsTmp.getString("MM");
                    rowData[7] = rsTmp.getString("YYYY");
                    rowData[8] = rsTmp.getString("ATT_TOTAL_DAYS");

                    DataModelUDCWAList.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table_UDCWAList.getColumnModel();
                for (int column = 0; column < Table_UDCWAList.getColumnCount(); column++) {
                    int width = 72; // Min width
                    for (int row = 0; row < Table_UDCWAList.getRowCount(); row++) {
                        TableCellRenderer renderer = Table_UDCWAList.getCellRenderer(row, column);
                        Component comp = Table_UDCWAList.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridAbsenteeismList() {
        try {
            DataModelAbsenteeismList = new EITLTableModel();
            Table_AbsenteeismList.removeAll();

            Table_AbsenteeismList.setModel(DataModelAbsenteeismList);
            Table_AbsenteeismList.setAutoResizeMode(0);

            DataModelAbsenteeismList.addColumn("Sr.");
            DataModelAbsenteeismList.addColumn("Emp ID");
            DataModelAbsenteeismList.addColumn("Emp Name");
            DataModelAbsenteeismList.addColumn("Emp Dept");
            DataModelAbsenteeismList.addColumn("Category");
            DataModelAbsenteeismList.addColumn("Absent Days");
            DataModelAbsenteeismList.addColumn("Absent Dates");

            DataModelAbsenteeismList.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void GenerateAbsenteeismList() {
        try {
            FormatGridAbsenteeismList(); //clear existing content of table
            ResultSet rsTmp;

            String cndtn = "";
            String pType = "";
            String strSQL = "";

            if (cmbAbsenteeism.getSelectedItem().equals("Staff")) {
                pType = "AND (EMPID LIKE 'BRD1%' OR EMPID LIKE 'BRD2%') ";
            } else if (cmbAbsenteeism.getSelectedItem().equals("Worker")) {
                pType = "AND (EMPID LIKE 'BRD3%' OR EMPID LIKE 'BRD4%' OR EMPID LIKE ('BRD008%')) ";
            } else if (cmbAbsenteeism.getSelectedItem().equals("Retainer")) {
                pType = "AND (EMPID LIKE 'BRD5%' OR EMPID LIKE 'BRD6%') ";
            } else if (cmbAbsenteeism.getSelectedItem().equals("Contractor")) {
                pType = "AND (EMPID LIKE 'BRD00%' AND EMPID NOT LIKE ('BRD008%')) ";
            } else {
                pType = " ";
            }

            if (!cmbMonthAbsenteeism.getSelectedItem().equals("Select") && !txtYearAbsenteeism.getText().trim().equals("")) {
                cndtn += "AND MONTH(PUNCHDATE)= " + cmbMonthAbsenteeism.getSelectedIndex() + " ";
                cndtn += "AND YEAR(PUNCHDATE)= '" + txtYearAbsenteeism.getText().trim() + "' ";
            }
            strSQL = "SELECT EMPLOYEE,NAME1 ,DEPARTMENT,CATEGORY,SUBCATEGORY,COUNT(*) AS DD,GROUP_CONCAT(DISTINCT DATE1 ORDER BY DATE1  SEPARATOR', ') AS DAYS FROM ( "
                    + "SELECT EMPID AS Employee,COALESCE(EMP_NAME,'') AS NAME1,DATE_FORMAT(PUNCHDATE,'%d/%m/%Y') AS PunchDate, DAY(PUNCHDATE) AS DATE1,COALESCE(SHIFT,'') AS SHIFT,"
                    + "CONCAT(PRESENT_FIRST,PRESENT_SECOND) AS PRESENT,COALESCE(ALL_PUNCHES,'') AS PUNCHES,COALESCE(DPTNAME,'') AS Department,COALESCE(SECNAME,'') AS Category,COALESCE(CTGNAME,'') AS SubCategory FROM ( "
                    + "SELECT * FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE SHIFT NOT IN (9) "
                    + pType + ""
                    + cndtn + ""
                    + "AND PRESENT_FIRST='A' AND PRESENT_SECOND= 'A' AND PUNCHES_NOS=0) AS DAS LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP ON DAS.EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT ON DPT.DPTID=EMP.EMP_DEPARTMENT LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC ON SEC.SECID=DAS.MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG ON CTG.CTGID=DAS.CATEGORY LEFT JOIN ( SELECT *,'YES' AS SSS FROM SDMLATTPAY.ATT_SPECIAL_SANCTION WHERE APPROVED=1 AND CANCELED=0 ) AS SS ON DAS.EMPID=SS.EMP_CODE AND DAS.PUNCHDATE=SS.A_DATE "
                    + ") AS DAAA "
                    + "GROUP BY EMPLOYEE,NAME1 ,DEPARTMENT,CATEGORY,SUBCATEGORY "
                    + "ORDER BY DD DESC,DEPARTMENT,EMPLOYEE";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[50];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("EMPLOYEE");
                    rowData[2] = rsTmp.getString("NAME1");
                    rowData[3] = rsTmp.getString("DEPARTMENT");
                    rowData[4] = rsTmp.getString("CATEGORY");
                    rowData[5] = rsTmp.getString("DD");
                    rowData[6] = rsTmp.getString("DAYS");

                    DataModelAbsenteeismList.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table_AbsenteeismList.getColumnModel();
                for (int column = 0; column < Table_AbsenteeismList.getColumnCount(); column++) {
                    int width = 72; // Min width
                    for (int row = 0; row < Table_AbsenteeismList.getRowCount(); row++) {
                        TableCellRenderer renderer = Table_AbsenteeismList.getCellRenderer(row, column);
                        Component comp = Table_AbsenteeismList.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 500) {
                        width = 500;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateWrkAttList() {
        String deptCnd = "";
        if (!cmbDept.getSelectedItem().equals("Select Dept")) {
            deptCnd = deptCnd + "AND ERP_DEPT IN ('" + cmbDept.getSelectedItem() + "')";
        } else {
//            deptCnd = "AND ERP_DEPT IN ('WEAVING','FINISHING','WAREHOUSE','CARDING','NEEDLING','MENDING','YARN STORE','FELTPP') ";
            deptCnd = "AND ERP_DEPT IN ('WEAVING','YARN STORE','MENDING','NEEDLING','FINISHING','CARDING','WAREHOUSE','ENGINEERING','RMG','SECURITY','STORES','PEONS') ";
        }

        String cndtn = "";
        if (!cmbMonthWrkAtt.getSelectedItem().equals("Select") && !txtYearWrkAtt.getText().trim().equals("")) {
            cndtn += "AND MS_MM = " + cmbMonthWrkAtt.getSelectedIndex() + " ";
            cndtn += "AND MS_YYYY = " + txtYearWrkAtt.getText().trim() + " ";
        }

        String sql;
        sql = "SELECT '' AS 'Sr No',DPTNAME AS 'Department',MS_EMPID AS 'EmployeeID',EMP_NAME AS 'Name',MS_MM AS 'Month',MS_YYYY AS 'Year',ROUND(MS_PRESENT_WITHOUT_LC_DAYS,2) AS 'Man Head',ROUND(PRESENT_DAYS,2) AS 'Present Days',ROUND(LC_DAYS,2) AS 'LC Days',ROUND(LWP_DAYS,2) AS 'LWP Days',PL,CL,SL,ESIC,ROUND(PAID_DAYS,2) AS 'Paid Days',ROUND(MS_ROKDI_DAYS,2) AS 'Rokadi Days',CTGNAME AS 'Category' FROM ( SELECT MS_EMPID, WORKING_EMP_DEPT_ID, MS_MM, MS_YYYY, TOTAL_MONTH_DAYS, PAID_DAYS, PRESENT_DAYS, LC_DAYS, LWP_DAYS, PL, CL, SL, OD, LOFF, EOFF, ESIC, WO, P_GP, O_GP, ABST, CO, PLE, CLE, SLE, TPHD, PHDL, HL, DA_DAYS, WOFF, NPH, NWOF, COFFE, NPL, MS_PETROL_LTRS, MS_CATEGORY, MS_MAIN_CATEGORY, MS_PRESENT_WITHOUT_LC_DAYS, MS_CREDIT_DAYS, MS_PREV_CREDIT_DAYS, MS_PH, MS_STAFF_WOFF, MS_WORKER_WOFF, MS_COMPANY_WOFF,MS_ROKDI_DAYS FROM SDMLATTPAY.WORKING_MTH_ATT WHERE 1=1  "
                //                + "AND MS_MM= DATE_FORMAT(SUBDATE(CURDATE(), INTERVAL 1 MONTH),'%m')  "
                //                + "AND MS_YYYY= DATE_FORMAT(SUBDATE(CURDATE(), INTERVAL 1 MONTH),'%Y') "
                + cndtn
                + "AND SUBSTRING(MS_EMPID,1,5) IN ('BRD00','BRD30','BRD40')  ) AS MAS LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP ON MAS.MS_EMPID=EMP.PAY_EMP_NO LEFT JOIN ( SELECT ERP_DEPT,DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT ON DPT.DPTID=MAS.WORKING_EMP_DEPT_ID LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC ON SEC.SECID=EMP.EMP_MAIN_CATEGORY LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG ON CTG.CTGID=EMP.EMP_CATEGORY LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT ON SFT.SHIFT_ID=EMP.EMP_SHIFT_ID WHERE 1=1 "
                //                + "AND ERP_DEPT IN ('WEAVING','FINISHING','WAREHOUSE','CARDING','NEEDLING','MENDING','YARN STORE','FELTPP')  "
                + deptCnd
                + "UNION ALL "
                + "SELECT '' AS 'Sr No',DPTNAME,'TOTAL','TOTAL',MS_MM,MS_YYYY,ROUND(SUM(MS_PRESENT_WITHOUT_LC_DAYS),2) AS MAN_HEAD,ROUND(SUM(PRESENT_DAYS),2),ROUND(SUM(LC_DAYS),2),ROUND(SUM(LWP_DAYS),2),SUM(PL),SUM(CL),SUM(SL),SUM(ESIC),ROUND(SUM(PAID_DAYS),2),ROUND(SUM(MS_ROKDI_DAYS),2),'TOTAL' FROM ( SELECT MS_EMPID, WORKING_EMP_DEPT_ID, MS_MM, MS_YYYY, TOTAL_MONTH_DAYS, PAID_DAYS, PRESENT_DAYS, LC_DAYS, LWP_DAYS, PL, CL, SL, OD, LOFF, EOFF, ESIC, WO, P_GP, O_GP, ABST, CO, PLE, CLE, SLE, TPHD, PHDL, HL, DA_DAYS, WOFF, NPH, NWOF, COFFE, NPL, MS_PETROL_LTRS, MS_CATEGORY, MS_MAIN_CATEGORY, MS_PRESENT_WITHOUT_LC_DAYS, MS_CREDIT_DAYS, MS_PREV_CREDIT_DAYS, MS_PH, MS_STAFF_WOFF, MS_WORKER_WOFF, MS_COMPANY_WOFF,MS_ROKDI_DAYS FROM SDMLATTPAY.WORKING_MTH_ATT WHERE 1=1  "
                //                + "AND MS_MM= DATE_FORMAT(SUBDATE(CURDATE(), INTERVAL 1 MONTH),'%m')  "
                //                + "AND MS_YYYY= DATE_FORMAT(SUBDATE(CURDATE(), INTERVAL 1 MONTH),'%Y') "
                + cndtn
                + "AND SUBSTRING(MS_EMPID,1,5) IN ('BRD00','BRD30','BRD40')   ) AS MAS LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP ON MAS.MS_EMPID=EMP.PAY_EMP_NO LEFT JOIN ( SELECT ERP_DEPT,DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT ON DPT.DPTID=MAS.WORKING_EMP_DEPT_ID LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC ON SEC.SECID=EMP.EMP_MAIN_CATEGORY LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG ON CTG.CTGID=EMP.EMP_CATEGORY LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT ON SFT.SHIFT_ID=EMP.EMP_SHIFT_ID WHERE 1=1 "
                //                + "AND ERP_DEPT IN ('WEAVING','FINISHING','WAREHOUSE','CARDING','NEEDLING','MENDING','YARN STORE','FELTPP')  "
                + deptCnd
                + "GROUP BY MS_MM,MS_YYYY,DPTNAME "
                + "UNION ALL "
                + "SELECT '' AS 'Sr No','Z' AS DPTNAME,'GRAND TOTAL' as e,'GRAND TOTAL' as m,MS_MM,MS_YYYY,ROUND(SUM(MS_PRESENT_WITHOUT_LC_DAYS),2) AS MAN_HEAD,ROUND(SUM(PRESENT_DAYS),2),ROUND(SUM(LC_DAYS),2),ROUND(SUM(LWP_DAYS),2),SUM(PL),SUM(CL),SUM(SL),SUM(ESIC),ROUND(SUM(PAID_DAYS),2),ROUND(SUM(MS_ROKDI_DAYS),2),'TOTAL' FROM ( SELECT MS_EMPID, WORKING_EMP_DEPT_ID, MS_MM, MS_YYYY, TOTAL_MONTH_DAYS, PAID_DAYS, PRESENT_DAYS, LC_DAYS, LWP_DAYS, PL, CL, SL, OD, LOFF, EOFF, ESIC, WO, P_GP, O_GP, ABST, CO, PLE, CLE, SLE, TPHD, PHDL, HL, DA_DAYS, WOFF, NPH, NWOF, COFFE, NPL, MS_PETROL_LTRS, MS_CATEGORY, MS_MAIN_CATEGORY, MS_PRESENT_WITHOUT_LC_DAYS, MS_CREDIT_DAYS, MS_PREV_CREDIT_DAYS, MS_PH, MS_STAFF_WOFF, MS_WORKER_WOFF, MS_COMPANY_WOFF,MS_ROKDI_DAYS FROM SDMLATTPAY.WORKING_MTH_ATT WHERE 1=1  "
                //                + "AND MS_MM= DATE_FORMAT(SUBDATE(CURDATE(), INTERVAL 1 MONTH),'%m')  "
                //                + "AND MS_YYYY= DATE_FORMAT(SUBDATE(CURDATE(), INTERVAL 1 MONTH),'%Y') "
                + cndtn
                + "AND SUBSTRING(MS_EMPID,1,5) IN ('BRD00','BRD30','BRD40')   ) AS MAS LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP ON MAS.MS_EMPID=EMP.PAY_EMP_NO LEFT JOIN ( SELECT ERP_DEPT,DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT ON DPT.DPTID=MAS.WORKING_EMP_DEPT_ID LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC ON SEC.SECID=EMP.EMP_MAIN_CATEGORY LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG ON CTG.CTGID=EMP.EMP_CATEGORY LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT ON SFT.SHIFT_ID=EMP.EMP_SHIFT_ID WHERE 1=1 "
                //                + "AND ERP_DEPT IN ('WEAVING','FINISHING','WAREHOUSE','CARDING','NEEDLING','MENDING','YARN STORE','FELTPP')  "
                + deptCnd
                + "GROUP BY MS_MM,MS_YYYY "
                //                + "ORDER BY DPTNAME,MS_EMPID,MS_YYYY,MS_MM ";
                + "ORDER BY Department,EmployeeID,Year,Month ";
        System.out.println("Data Query :" + sql);

        Table_WrkAttList.setEnabled(true);
        ResultSet rs = data.getResult(sql);
        try {
            rs.first();
            if (rs.getRow() > 0) {
                DataModelWrkAttList = new EITLTableModel();
                Table_WrkAttList.removeAll();

                Table_WrkAttList.setModel(DataModelWrkAttList);
                Table_WrkAttList.setAutoResizeMode(0);
                ResultSetMetaData rsInfo = rs.getMetaData();

                //Format the table from the resultset meta data
                int i = 1;
                DataModelWrkAttList.ClearAllReadOnly();

                for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                    DataModelWrkAttList.addColumn(rsInfo.getColumnName(i));
                    DataModelWrkAttList.SetReadOnly(i);
                }
                int m = 1;
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = Integer.toString(m);
                    for (int k = 1; k < (i - 1); k++) {
                        rowData[k] = rs.getString(k + 1);
                    }
                    DataModelWrkAttList.addRow(rowData);
                    rs.next();
                    m++;
                }
                final TableColumnModel columnModel = Table_WrkAttList.getColumnModel();
                for (int column = 0; column < Table_WrkAttList.getColumnCount(); column++) {
                    int width = 50; // Min width
                    for (int row = 0; row < Table_WrkAttList.getRowCount(); row++) {
                        TableCellRenderer renderer = Table_WrkAttList.getCellRenderer(row, column);
                        Component comp = Table_WrkAttList.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
                DataModelWrkAttList.TableReadOnly(true);
            } else {
                for (int i = DataModelWrkAttList.getRowCount() - 1; i >= 0; i--) {
                    DataModelWrkAttList.removeRow(i);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
