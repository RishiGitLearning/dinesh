/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SDMLATTPAY.MissedPunchRequest;

import EITLERP.AppletFrame;
import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.common.FeltInvCalc;
import EITLERP.FeltSales.common.LOV;
import EITLERP.FeltSales.common.file_management.clsDocMissedPunchCCTV;
import EITLERP.Loader;
import EITLERP.SelectFirstFree;
import EITLERP.clsAuthority;
import EITLERP.clsDepartment;
import EITLERP.clsDocFlow;
import EITLERP.clsFirstFree;
import EITLERP.clsHierarchy;
import EITLERP.clsSales_Party;
import EITLERP.clsUser;
import EITLERP.data;
import EITLERP.frmPendingApprovals;
import TReportWriter.TReportEngine;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.net.URL;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
//import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import javax.imageio.ImageIO;
import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author DAXESH PRAJAPATI
 *
 */
public class FrmMissedPunchRequest extends javax.swing.JApplet {

    private int EditMode = 0;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbModuleModel;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModelMPHistory;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private int FFNo = 334;
    private int ModuleId = 830;
    private String DOC_NO = "";
    private clsMissedPunchRequest objMissedPunch;
    private EITLComboModel cmbSendToModel;
    private TReportEngine objEngine = new TReportEngine();
    private frmFindMissedPunchRequest ObjFindEmployee;
    private EITLTableCellRenderer render_invoice = new EITLTableCellRenderer();
    private EITLTableCellRenderer Renderer1 = new EITLTableCellRenderer();
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    public frmPendingApprovals frmPA;
    
    private EITLComboModel modelDept = new EITLComboModel();
    private EITLComboModel modelDesignation = new EITLComboModel();
    private EITLComboModel modelMainCategory = new EITLComboModel();
    private EITLComboModel modelCategory = new EITLComboModel();
    private EITLComboModel modelShift = new EITLComboModel();
    ArrayList<clsDocMissedPunchCCTV> dataList = new ArrayList<clsDocMissedPunchCCTV>();
    int datalist_index = 1;    
    /**
     * Initializes the applet FrmFeltOrder
     */
    @Override
    public void init() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(dim.width, dim.height);
        initComponents();
        GenerateCombos();

        //FormatGrid_OldTransaction();
        GenerateFromCombo();
        GenerateHierarchyCombo();
        SetupApproval();
        SetMenuForRights();
        DefaultSettings();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        
        
        
        
        objMissedPunch = new clsMissedPunchRequest();
        boolean load = objMissedPunch.LoadData();

        if (load) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + objMissedPunch.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        SetFields(false);
        
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    public void DefaultSettings() {

        //String data = toString();
        Object[] rowData = new Object[15];
        rowData[0] = "1";


        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        clearFields();
    }

    private void clearFields() {
        txtDocNo.setText("0");
        txtDocDate.setText("");
        
        //txtPayEmpNo.setText("");
        txtEmpName.setText("");
        //cmbDesignation.setText("");        
        txtEmpName.setText("");
        txtEmpNo.setText("");
        txtDept.setText("");
        txtPunchDate.setText("");
        txtPunchTime.setText("");
        chkMorning.setSelected(false);
        txtResonMorning.setText("");
        chkAfternoon.setSelected(false);
        txtResonAfternoon.setText("");
        chkEvening.setSelected(false);
        txtReasonEvening.setText("");
        txtEmpRemark.setText("");
        txtHODRemark.setText("");
        txtTOPRemark.setText("");
        chk_VIEW_CCTV_DIDNT_PUNCH.setSelected(false);
        chk_CHECK_3_CCTV.setSelected(false);
        chk_VIEW_CCTV_NOT_RECORD.setSelected(false);
        txtEmpViewCamera.setText("");
        chk_NO_CCTV_NOT_PUNCH.setSelected(false);
        txtTimeofExitEntry.setText("");
        lblImg.setIcon(null);
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        FormatGrid_missedPunchHistory();
        // FormatGridA();
        FormatGridHS();

        
    }

    private void DisplayData() {

        //=========== Color Indication ===============//
        try {
            
            
            if (objMissedPunch.getAttribute("APPROVED").getInt() == 1) {
                lblTitle.setBackground(Color.BLUE);
                lblTitle.setForeground(Color.WHITE);
                
            }

            if (objMissedPunch.getAttribute("APPROVED").getInt() == 0) {
                lblTitle.setBackground(Color.GRAY);
                lblTitle.setForeground(Color.BLACK);
            }

            if (objMissedPunch.getAttribute("CANCELED").getInt() == 1) {
                lblTitle.setBackground(Color.RED);
                lblTitle.setForeground(Color.BLACK);
            }
        } catch (Exception c) {

            c.printStackTrace();
        }
        //============================================//

        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleId)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        

        clearFields();
        try {
            
            txtDocNo.setText(objMissedPunch.getAttribute("MP_DOC_NO").getString());
            lblTitle.setText("Missed Punch Request - " + objMissedPunch.getAttribute("MP_DOC_NO").getString());
            txtDocDate.setText(EITLERPGLOBAL.formatDate(objMissedPunch.getAttribute("MP_DOC_DATE").getString()));
            
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, objMissedPunch.getAttribute("HIERARCHY_ID").getInt());

          //  txtPayEmpNo.setText(EMP.getAttribute("PAY_DOC_NO").getString());
            txtEmpNo.setText(objMissedPunch.getAttribute("MP_EMP_NO").getString());
            txtEmpName.setText(objMissedPunch.getAttribute("MP_EMP_NAME").getString());
            txtDept.setText(objMissedPunch.getAttribute("MP_EMP_DEPT").getString());
            txtPunchDate.setText(EITLERPGLOBAL.formatDate(objMissedPunch.getAttribute("MP_DATE").getString()));
            txtPunchTime.setText(objMissedPunch.getAttribute("MP_TIME").getString());
            chkMorning.setSelected(false);
            if("1".equals(objMissedPunch.getAttribute("MP_MORNING").getString()))
            {
                chkMorning.setSelected(true);
            }
            txtResonMorning.setText(objMissedPunch.getAttribute("MP_MORNING_REMARK").getString());
            chkAfternoon.setSelected(false);
            if("1".equals(objMissedPunch.getAttribute("MP_AFTERNOON").getString()))
            {
                chkAfternoon.setSelected(true);
            }
            txtResonAfternoon.setText(objMissedPunch.getAttribute("MP_AFTERNOON_REMARK").getString());
            chkEvening.setSelected(false);
            if("1".equals(objMissedPunch.getAttribute("MP_EVENING").getString()))
            {
                chkEvening.setSelected(true);
            }
            txtReasonEvening.setText(objMissedPunch.getAttribute("MP_EVENING_REMARK").getString());
            
            txtEmpRemark.setText(objMissedPunch.getAttribute("MP_EMP_REMARK").getString());
            txtHODRemark.setText(objMissedPunch.getAttribute("MP_HOD_REMARK").getString());
            txtTOPRemark.setText(objMissedPunch.getAttribute("MP_TOP_REMARK").getString());
            chk_VIEW_CCTV_DIDNT_PUNCH.setSelected(false);
            if("1".equals(objMissedPunch.getAttribute("MP_VIEW_CCTV_DIDNT_PUNCH").getString()))
            {
                chk_VIEW_CCTV_DIDNT_PUNCH.setSelected(true);
            }
            chk_CHECK_3_CCTV.setSelected(false);
            if("1".equals(objMissedPunch.getAttribute("MP_CHECK_3_CCTV").getString()))
            {
                chk_CHECK_3_CCTV.setSelected(true);
            }
            chk_VIEW_CCTV_NOT_RECORD.setSelected(false);
            if("1".equals(objMissedPunch.getAttribute("MP_VIEW_CCTV_NOT_RECORD").getString()))
            {
                chk_VIEW_CCTV_NOT_RECORD.setSelected(true);
            }
            chk_NO_CCTV_NOT_PUNCH.setSelected(false);
            if("1".equals(objMissedPunch.getAttribute("MP_NO_CCTV_NOT_PUNCH").getString()))
            {
                chk_NO_CCTV_NOT_PUNCH.setSelected(true);
            }
            txtEmpViewCamera.setText(objMissedPunch.getAttribute("MP_CAMERA_DETAIL").getString());
            txtTimeofExitEntry.setText(objMissedPunch.getAttribute("MP_TIME_ENTRY_EXIT").getString());
            
//            txtBirthDate.setText(EITLERPGLOBAL.formatDate(objMissedPunch.getAttribute("EMP_BIRTH_DATE").getString()));
//            txtJoinDate.setText(EITLERPGLOBAL.formatDate(objMissedPunch.getAttribute("EMP_JOIN_DATE").getString()));
//            txtConfirmDate.setText(EITLERPGLOBAL.formatDate(objMissedPunch.getAttribute("EMP_CONFIRM_DATE").getString()));
//            txtLeftDate.setText(EITLERPGLOBAL.formatDate(objMissedPunch.getAttribute("EMP_LEFT_DATE").getString()));
//            txtQualification.setText(objMissedPunch.getAttribute("EMP_QUALIFICATION").getString());
//            txtWeekOff.setText(objMissedPunch.getAttribute("EMP_WEEKOFF").getString());
            
           
            
            
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();
            
            String DocNo = txtDocNo.getText();
        
            List = SDMLATTPAY.ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID,ModuleId, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];
                //JOptionPane.showMessageDialog(null, "USER ID : "+ObjFlow.getAttribute("USER_ID").getVal());
                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelApprovalStatus.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridHS();
            HashMap History = objMissedPunch.getHistoryList(EITLERPGLOBAL.gCompanyID + "", DocNo);
            for (int i = 1; i <= History.size(); i++) {
                clsMissedPunchRequest ObjHistory = (clsMissedPunchRequest) History.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, Integer.parseInt(ObjHistory.getAttribute("UPDATED_BY").getString()));
                rowData[2] = ObjHistory.getAttribute("UPDATED_DATE").getString();

                String ApprovalStatus = "";

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjHistory.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjHistory.getAttribute("FROM_IP").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
            //============================================================//
            
            DisplayMissedPunchHistory();
            
        } catch (Exception e) {
                e.printStackTrace();
        }
       
        try{
                clsDocMissedPunchCCTV obj =new clsDocMissedPunchCCTV();
                dataList = obj.getStatus(txtDocNo.getText());
                setFirstImage();
                
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        
    }
    private void FormatGrid_missedPunchHistory()
    {
        try{
                DataModelMPHistory = new EITLTableModel();
                tblMPHistory.removeAll();

                tblMPHistory.setModel(DataModelMPHistory);
                tblMPHistory.setAutoResizeMode(0);

                DataModelMPHistory.addColumn("SrNo"); //0 - Read Only
                DataModelMPHistory.addColumn("EMP NO"); //1
                DataModelMPHistory.addColumn("EMP NAME"); //2
                DataModelMPHistory.addColumn("MISSED PUNCH DATE"); //3
                DataModelMPHistory.addColumn("MISSED PUNCH TIME"); //4
                DataModelMPHistory.addColumn("TOP MANAGEMENT/AUDIT/TK REMARK"); //5

                DataModelMPHistory.SetVariable(0, "SrNo"); //0 - Read Only
                DataModelMPHistory.SetVariable(1, "EMP_NO"); //1
                DataModelMPHistory.SetVariable(2, "EMP_NAME"); //1
                DataModelMPHistory.SetVariable(3, "MP_PUNCH_DATE"); //1
                DataModelMPHistory.SetVariable(4, "MP_PUNCH_TIME"); //1
                DataModelMPHistory.SetVariable(5, "TOP_REMARK"); //1

                tblMPHistory.getColumnModel().getColumn(0).setMinWidth(80);
                tblMPHistory.getColumnModel().getColumn(1).setMinWidth(120);
                tblMPHistory.getColumnModel().getColumn(2).setMinWidth(200);
                tblMPHistory.getColumnModel().getColumn(3).setMinWidth(150);
                tblMPHistory.getColumnModel().getColumn(4).setMinWidth(150);
                tblMPHistory.getColumnModel().getColumn(5).setMinWidth(250);

                //dateColumn.setCellEditor(new DatePi);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void DisplayMissedPunchHistory()
    {
        try{
            FormatGrid_missedPunchHistory();
            
            
            String str_query="SELECT * FROM SDMLATTPAY.ATT_MISSED_PUNCH_REQUEST_HEADER where MP_EMP_NO='"+txtEmpNo.getText()+"' AND coalesce(APPROVED)=1 AND coalesce(CANCELED)=0 AND YEAR(MP_DATE) = YEAR('"+EITLERPGLOBAL.formatDateDB(txtDocDate.getText())+"')";

            Connection connection = data.getConn();
            Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

            System.out.println("HISTORY Query : " + str_query);
            ResultSet resultSet = statement.executeQuery(str_query);
            int srNo = 0;
                while (resultSet.next()) {

                    srNo++;
                    int NewRow = srNo - 1;

                    Object[] rowData = new Object[1];
                    DataModelMPHistory.addRow(rowData);

                    DataModelMPHistory.setValueByVariable("SrNo", srNo + "", NewRow);
                    DataModelMPHistory.setValueByVariable("EMP_NO", resultSet.getString("MP_EMP_NO"), NewRow);
                    DataModelMPHistory.setValueByVariable("EMP_NAME",resultSet.getString("MP_EMP_NAME"), NewRow);
                    DataModelMPHistory.setValueByVariable("MP_PUNCH_DATE", EITLERPGLOBAL.formatDate(resultSet.getString("MP_DATE")), NewRow);
                    DataModelMPHistory.setValueByVariable("MP_PUNCH_TIME", resultSet.getString("MP_TIME_ENTRY_EXIT"), NewRow);
                    DataModelMPHistory.setValueByVariable("TOP_REMARK", resultSet.getString("MP_TOP_REMARK"), NewRow);

                }
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
    }	
    private void setFirstImage()
    {
        try{
            clsDocMissedPunchCCTV d = new clsDocMissedPunchCCTV();
            datalist_index = 0;
            d = dataList.get(datalist_index);

            BufferedImage im = ImageIO.read(d.getDoc().getBinaryStream());
            lblImg.setIcon(new ImageIcon(im.getScaledInstance(790, 490, Image.SCALE_SMOOTH)));
            //label.setIcon(new ImageIcon(new ImageIcon("icon.png").getImage().getScaledInstance(20, 20, Image.SCALE_DEFAULT)));
        }catch(Exception e)
        {
            //e.printStackTrace();
        }
        
    }
    private void setNextImage()
    {
        try{
            clsDocMissedPunchCCTV d = new clsDocMissedPunchCCTV();
            datalist_index = datalist_index + 1;
            
            if(datalist_index == dataList.size())
            {
                datalist_index = dataList.size() - 1;
            }
            
            d = dataList.get(datalist_index);

            BufferedImage im = ImageIO.read(d.getDoc().getBinaryStream());
            lblImg.setIcon(new ImageIcon(im.getScaledInstance(790, 490, Image.SCALE_SMOOTH)));
            //label.setIcon(new ImageIcon(new ImageIcon("icon.png").getImage().getScaledInstance(20, 20, Image.SCALE_DEFAULT)));
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        
    }
    private void setPrevImage()
    {
        try{
            clsDocMissedPunchCCTV d = new clsDocMissedPunchCCTV();
            datalist_index = datalist_index - 1;
            if(datalist_index == -1)
            {
                datalist_index = 0;
            }
            d = dataList.get(datalist_index);

            BufferedImage im = ImageIO.read(d.getDoc().getBinaryStream());
            lblImg.setIcon(new ImageIcon(im.getScaledInstance(790, 490, Image.SCALE_SMOOTH)));
            //label.setIcon(new ImageIcon(new ImageIcon("icon.png").getImage().getScaledInstance(20, 20, Image.SCALE_DEFAULT)));
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        
    }
    private void setLastImage()
    {
        try{
            clsDocMissedPunchCCTV d = new clsDocMissedPunchCCTV();
            datalist_index = dataList.size()-1;
            
            
            
            d = dataList.get(datalist_index);

            BufferedImage im = ImageIO.read(d.getDoc().getBinaryStream());
            lblImg.setIcon(new ImageIcon(im.getScaledInstance(790, 490, Image.SCALE_SMOOTH)));
            //label.setIcon(new ImageIcon(new ImageIcon("icon.png").getImage().getScaledInstance(20, 20, Image.SCALE_DEFAULT)));
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        
    }
    
    
    private void FormatGridA() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableApprovalStatus.setAutoResizeMode(TableApprovalStatus.AUTO_RESIZE_OFF);

    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10077, 100771)) { //7008,70081
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10077, 100772)) { //7008,70082
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10077, 100773)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10077, 100775)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            //cmdPreview.setEnabled(false);
            //cmdPrint.setEnabled(false);
        }
    }

    private void SetupApproval() {

        if (cmbHierarchy.getItemCount() > 1) {
            cmbHierarchy.setEnabled(true);
        }
        //JOptionPane.showMessageDialog(null, "Approval Cmb : "+cmbHierarchy.getItemCount());
        //In Edit Mode Hierarchy Should be disabled
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID));
            txtFromRemarks.setText("");
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "Hierarchy Id = "+SelHierarchyID);
        //GenerateFromCombo();
        //GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }

        if (EditMode == 0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            //txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }

        if (clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            OpgReject.setEnabled(false);
        }
        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            //JOptionPane.showMessageDialog(null, "Final Approver");
            OpgApprove.setEnabled(false);
        }
    }

    
    

    private void FormatGridHS() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("FROM_IP");

        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(20);
        tcm.getColumn(1).setPreferredWidth(120);
        tcm.getColumn(2).setPreferredWidth(100);
        tcm.getColumn(3).setPreferredWidth(80);
        tcm.getColumn(4).setPreferredWidth(80);
        tcm.getColumn(5).setPreferredWidth(100);
        TableUpdateHistory.setAutoResizeMode(TableUpdateHistory.AUTO_RESIZE_OFF);
    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (EITLERPGLOBAL.gNewUserID == SDMLATTPAY.ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "")) {
                List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + (ModuleId));
            } else {
                List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
            }
        }

        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = SDMLATTPAY.ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "");
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
        }

    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableColumnModel tcm = TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(150);
        tcm.getColumn(5).setPreferredWidth(150);
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("FROM_IP");

//        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
//        tcm.getColumn(0).setPreferredWidth(10);
//        tcm.getColumn(2).setPreferredWidth(50);
//        tcm.getColumn(3).setPreferredWidth(20);
//        tcm.getColumn(4).setPreferredWidth(80);
//        tcm.getColumn(5).setPreferredWidth(70);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        Tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        txtDocDate = new javax.swing.JFormattedTextField();
        lblRevNo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtEmpName = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        txtEmpNo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtDept = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        txtPunchDate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPunchTime = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        chkMorning = new javax.swing.JCheckBox();
        chkAfternoon = new javax.swing.JCheckBox();
        chkEvening = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        txtResonMorning = new javax.swing.JTextField();
        txtResonAfternoon = new javax.swing.JTextField();
        txtReasonEvening = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtEmpRemark = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtHODRemark = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        chk_VIEW_CCTV_DIDNT_PUNCH = new javax.swing.JCheckBox();
        chk_VIEW_CCTV_NOT_RECORD = new javax.swing.JCheckBox();
        chk_NO_CCTV_NOT_PUNCH = new javax.swing.JCheckBox();
        chk_CHECK_3_CCTV = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        txtEmpViewCamera = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtTimeofExitEntry = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMPHistory = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        txtTOPRemark = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        btnUpload = new javax.swing.JButton();
        lblImg = new javax.swing.JLabel();
        btnNextImage = new javax.swing.JButton();
        btnPrevImage = new javax.swing.JButton();
        btnDeleteImage = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        StatusPanel = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblStatus1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        ltbPink = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 1180, 40);

        Tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        jLabel2.setText("Doc Date");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(200, 10, 90, 30);

        jLabel3.setText("Doc No");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(10, 10, 80, 30);

        txtDocNo.setEditable(false);
        txtDocNo.setBackground(new java.awt.Color(254, 242, 230));
        txtDocNo.setText("S00000001");
        jPanel1.add(txtDocNo);
        txtDocNo.setBounds(70, 10, 100, 30);

        txtDocDate.setEditable(false);
        jPanel1.add(txtDocDate);
        txtDocDate.setBounds(270, 10, 100, 30);

        lblRevNo.setText("...");
        jPanel1.add(lblRevNo);
        lblRevNo.setBounds(170, 10, 30, 30);

        jLabel1.setText("Employee Name");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(570, 10, 130, 30);
        jPanel1.add(txtEmpName);
        txtEmpName.setBounds(690, 10, 250, 30);

        jLabel25.setText("Emp No");
        jPanel1.add(jLabel25);
        jLabel25.setBounds(390, 20, 70, 15);

        txtEmpNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEmpNoKeyPressed(evt);
            }
        });
        jPanel1.add(txtEmpNo);
        txtEmpNo.setBounds(460, 10, 100, 30);

        jLabel4.setText("Dept");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(950, 10, 60, 30);

        txtDept.setEnabled(false);
        jPanel1.add(txtDept);
        txtDept.setBounds(1000, 10, 150, 30);
        jPanel1.add(jSeparator1);
        jSeparator1.setBounds(0, 350, 1170, 10);

        jLabel5.setText("Date of Missed Punch");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(10, 70, 160, 15);
        jPanel1.add(txtPunchDate);
        txtPunchDate.setBounds(170, 60, 130, 30);

        jLabel6.setText("Time of Exit");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(330, 60, 120, 30);
        jPanel1.add(txtPunchTime);
        txtPunchTime.setBounds(430, 60, 130, 30);

        jLabel7.setText("Duration (Select below Duration)");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(10, 100, 270, 15);

        chkMorning.setText("Morning (Punch IN)");
        jPanel1.add(chkMorning);
        chkMorning.setBounds(10, 120, 220, 20);

        chkAfternoon.setText("Afternoon (Lunch OUT / Lunch IN)");
        jPanel1.add(chkAfternoon);
        chkAfternoon.setBounds(10, 140, 280, 40);

        chkEvening.setText("Evening (Punch OUT)");
        jPanel1.add(chkEvening);
        chkEvening.setBounds(10, 170, 180, 40);

        jLabel8.setText("Reason / Justification for Missed Punch");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(300, 100, 310, 15);
        jPanel1.add(txtResonMorning);
        txtResonMorning.setBounds(300, 120, 320, 30);
        jPanel1.add(txtResonAfternoon);
        txtResonAfternoon.setBounds(300, 150, 320, 30);
        jPanel1.add(txtReasonEvening);
        txtReasonEvening.setBounds(300, 180, 320, 30);

        jLabel9.setText("Remark of EMPLOYEE / TK");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(650, 60, 300, 15);
        jPanel1.add(txtEmpRemark);
        txtEmpRemark.setBounds(650, 80, 500, 30);

        jLabel10.setText("Remark of HOD");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(650, 110, 300, 20);
        jPanel1.add(txtHODRemark);
        txtHODRemark.setBounds(650, 130, 500, 30);
        jPanel1.add(jSeparator2);
        jSeparator2.setBounds(0, 50, 1170, 10);

        jLabel11.setText("HR & Personal Department");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(20, 230, 310, 15);
        jPanel1.add(jSeparator3);
        jSeparator3.setBounds(20, 250, 180, 10);

        chk_VIEW_CCTV_DIDNT_PUNCH.setText("Employee viewed in CCTV footage & found  that he didn't punch");
        jPanel1.add(chk_VIEW_CCTV_DIDNT_PUNCH);
        chk_VIEW_CCTV_DIDNT_PUNCH.setBounds(10, 260, 540, 23);

        chk_VIEW_CCTV_NOT_RECORD.setText("Employee viewed punching in CCTV footage but the same is not reflected in record");
        jPanel1.add(chk_VIEW_CCTV_NOT_RECORD);
        chk_VIEW_CCTV_NOT_RECORD.setBounds(10, 290, 610, 23);

        chk_NO_CCTV_NOT_PUNCH.setText("Employee coudn't be viewed in CCTV footage & also didn't punch ");
        jPanel1.add(chk_NO_CCTV_NOT_PUNCH);
        chk_NO_CCTV_NOT_PUNCH.setBounds(10, 320, 600, 23);

        chk_CHECK_3_CCTV.setText("Checked in all 3 CCTV cameras (Keltron Room, Security Main Gate)");
        jPanel1.add(chk_CHECK_3_CCTV);
        chk_CHECK_3_CCTV.setBounds(620, 260, 510, 23);

        jLabel12.setText("Camera in which the employee has been viewed");
        jPanel1.add(jLabel12);
        jLabel12.setBounds(630, 290, 370, 15);
        jPanel1.add(txtEmpViewCamera);
        txtEmpViewCamera.setBounds(1000, 290, 150, 20);

        jLabel13.setText("Time of Exit/Entry of Emp (as viewd in CCTV)");
        jPanel1.add(jLabel13);
        jLabel13.setBounds(630, 320, 370, 15);
        jPanel1.add(txtTimeofExitEntry);
        txtTimeofExitEntry.setBounds(1000, 320, 150, 20);
        jPanel1.add(jSeparator4);
        jSeparator4.setBounds(0, 220, 1170, 10);

        jLabel14.setText("Record of missed punch till date (during current calender year)");
        jPanel1.add(jLabel14);
        jLabel14.setBounds(20, 360, 480, 15);
        jPanel1.add(jSeparator5);
        jSeparator5.setBounds(20, 380, 440, 10);

        tblMPHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblMPHistory);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(22, 392, 1130, 120);

        jLabel15.setText("Remark of TOP MANAGEMENT/Audit");
        jPanel1.add(jLabel15);
        jLabel15.setBounds(650, 160, 290, 20);
        jPanel1.add(txtTOPRemark);
        txtTOPRemark.setBounds(650, 180, 500, 30);

        Tab.addTab("Missed Punch Detail", jPanel1);

        jPanel4.setLayout(null);

        jLabel16.setText("Select Image ");
        jPanel4.add(jLabel16);
        jLabel16.setBounds(20, 10, 120, 15);

        btnUpload.setText("UPLOAD");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });
        jPanel4.add(btnUpload);
        btnUpload.setBounds(130, 0, 140, 25);

        lblImg.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.add(lblImg);
        lblImg.setBounds(20, 30, 790, 490);

        btnNextImage.setText("Next");
        btnNextImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextImageActionPerformed(evt);
            }
        });
        jPanel4.add(btnNextImage);
        btnNextImage.setBounds(740, 10, 70, 20);

        btnPrevImage.setText("Prev");
        btnPrevImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevImageActionPerformed(evt);
            }
        });
        jPanel4.add(btnPrevImage);
        btnPrevImage.setBounds(650, 10, 80, 20);

        btnDeleteImage.setText("Delete");
        btnDeleteImage.setEnabled(false);
        jPanel4.add(btnDeleteImage);
        btnDeleteImage.setBounds(530, 10, 100, 20);

        Tab.addTab("CCTV Footage", jPanel4);

        jPanel2.setLayout(null);

        Tab2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 23, 66, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(90, 20, 180, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 62, 56, 15);

        txtFrom.setBackground(new java.awt.Color(246, 238, 238));
        txtFrom.setForeground(new java.awt.Color(11, 7, 7));
        Tab2.add(txtFrom);
        txtFrom.setBounds(90, 60, 180, 19);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 95, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(90, 95, 530, 19);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 130, 81, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgRejectActionPerformed(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(90, 130, 180, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 253, 60, 15);

        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(90, 250, 180, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 292, 60, 15);

        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 290, 570, 19);

        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(450, 400, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(630, 95, 33, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(570, 400, 102, 25);

        jPanel2.add(Tab2);
        Tab2.setBounds(10, 0, 760, 460);

        Tab.addTab("Approval", jPanel2);

        jPanel3.setLayout(null);

        StatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StatusPanel.setLayout(null);

        jLabel60.setText("Document Approval Status");
        StatusPanel.add(jLabel60);
        jLabel60.setBounds(12, 10, 242, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableApprovalStatus);

        StatusPanel.add(jScrollPane2);
        jScrollPane2.setBounds(0, 40, 694, 120);

        jLabel19.setText("Document Update History");
        StatusPanel.add(jLabel19);
        jLabel19.setBounds(10, 170, 182, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableUpdateHistory);

        StatusPanel.add(jScrollPane6);
        jScrollPane6.setBounds(10, 190, 540, 130);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdViewHistory);
        cmdViewHistory.setBounds(570, 170, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdNormalView);
        cmdNormalView.setBounds(570, 200, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 230, 132, 24);

        txtAuditRemarks.setEnabled(false);
        StatusPanel.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(570, 260, 129, 19);

        jButton4.setText("Next >>");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton4);
        jButton4.setBounds(660, 290, 100, 30);

        jButton5.setText("<<Previous");
        jButton5.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton5);
        jButton5.setBounds(560, 290, 100, 30);

        jPanel3.add(StatusPanel);
        StatusPanel.setBounds(10, 0, 790, 380);

        Tab.addTab("Status", jPanel3);

        getContentPane().add(Tab);
        Tab.setBounds(0, 70, 1180, 560);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("SDML Missed Punch Request Form");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 1180, 25);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 580, 930, 22);

        lblStatus1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus1.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus1);
        lblStatus1.setBounds(20, 590, 740, 30);
        getContentPane().add(jPanel5);
        jPanel5.setBounds(210, 50, 10, 10);
        getContentPane().add(ltbPink);
        ltbPink.setBounds(10, 70, 0, 0);
    }// </editor-fold>//GEN-END:initComponents
    

   
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgApprove.setEnabled(false);
            OpgApprove.setSelected(false);
        }

        if (clsHierarchy.IsCreator((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgApprove.setEnabled(true);
            OpgReject.setEnabled(false);
            OpgReject.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked

        if (!OpgApprove.isEnabled()) {
            return;
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "SelHierarchyId : "+SelHierarchyID);

        //cmbSendTo.setEnabled(true);
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (SDMLATTPAY.ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "")) {
                cmbSendTo.setEnabled(true);
                txtToRemarks.setEnabled(true);
                txtFromRemarks.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }
        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }

        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(true);
        OpgHold.setSelected(false);
        txtToRemarks.setEnabled(false);
        if (!OpgApprove.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);
        
        
        
        DOC_NO = txtDocNo.getText();
        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);

        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {

                if (OpgApprove.isSelected()) {
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    //JOptionPane.showMessageDialog(null, "Module Id :"+ModuleId+", DOC No : "+sorder_no+", User Id : "+ObjUser.getAttribute("USER_ID").getInt()+", New user Id "+SDMLERPGLOBAL.gNewUserID);
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                    // JOptionPane.showMessageDialog(null, "IncludeUser = "+IncludeUser);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = SDMLATTPAY.ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "");
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }
    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged

    }//GEN-LAST:event_OpgApproveItemStateChanged

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged

    }//GEN-LAST:event_OpgFinalItemStateChanged

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained

    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged

    }//GEN-LAST:event_OpgRejectItemStateChanged

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained

    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged

    }//GEN-LAST:event_OpgHoldItemStateChanged

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained

    }//GEN-LAST:event_OpgHoldFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained

    }//GEN-LAST:event_cmbSendToFocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained

    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed

    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed

    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed

    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained

    }//GEN-LAST:event_Tab2FocusGained

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        
          
        String DocNo = txtDocNo.getText();
        objMissedPunch.ShowHistory(DocNo);
        MoveLast();

    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        objMissedPunch.HistoryView = false;
        objMissedPunch.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed

    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

    }//GEN-LAST:event_jButton5ActionPerformed

    private void TabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabMouseClicked

    }//GEN-LAST:event_TabMouseClicked

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();

    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmdPrintActionPerformed
    

    private void OpgRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgRejectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgRejectActionPerformed

    private void uploadDocument(){
        try{

            if(txtDocNo.getText().equals(""))
            {
                JOptionPane.showMessageDialog(this, "Please select Document");
                return;
            }
            
            File Source_File;
            JFileChooser chooser =new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("jpg","png");
            //sfilter.
            chooser.setFileFilter(filter);//
            
            int n  = chooser.showOpenDialog(this);
            
            Source_File = chooser.getSelectedFile();
            clsDocMissedPunchCCTV d = new clsDocMissedPunchCCTV();
            FileInputStream inputStream = new FileInputStream(Source_File);
            d.setDOC_NAME(Source_File.getName());
            d.setDOCUMENT(inputStream);
            d.setDOCUMENT_DOC_NO(txtDocNo.getText());
            //System.out.println("File Size : "+(int)Source_File.length());
            if((int)Source_File.length() < 1000000)
            {
                d.saveDocumentFile((int)Source_File.length());

                //System.out.println("Uploding Done...!");
            }
            else
            {
                JOptionPane.showMessageDialog(this, "File size not more than 1 MB allowed");
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }
    //    DisplayStatus();
    }
    private void setInvisible()
    {
        lblImg.setIcon(null);
    }
    
    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        // TODO add your handling code here:
        
        uploadDocument();
        try{
                clsDocMissedPunchCCTV obj =new clsDocMissedPunchCCTV();
                dataList = obj.getStatus(txtDocNo.getText());
                setLastImage();
                
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        //g.drawImage(i, 120,100,this);  
    }//GEN-LAST:event_btnUploadActionPerformed

    private void btnNextImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextImageActionPerformed
        // TODO add your handling code here:
        setNextImage();
    }//GEN-LAST:event_btnNextImageActionPerformed

    private void btnPrevImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevImageActionPerformed
        // TODO add your handling code here:
        setPrevImage();
    }//GEN-LAST:event_btnPrevImageActionPerformed

    private void txtEmpNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpNoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) {
            try {
                LOV aList = new LOV();


                aList.SQL = "SELECT PAY_EMP_NO,EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST where APPROVED=1";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;
                aList.UseSpecifiedConn = true;
                aList.dbURL = EITLERPGLOBAL.DatabaseURL;

                if (aList.ShowLOV()) {
                    
                    txtEmpNo.setText(aList.ReturnVal);

                    ResultSet rs = data.getResult("SELECT * FROM SDMLATTPAY.ATTPAY_EMPMST where APPROVED=1 AND PAY_EMP_NO='"+aList.ReturnVal+"'");
                    rs.first();
                    
                    txtEmpName.setText(rs.getString("EMP_NAME"));
                    String Dept = data.getStringValueFromDB("SELECT Name FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER where DPTID='"+rs.getString("EMP_DEPARTMENT")+"'");
                    txtDept.setText(Dept);
                    
                    DisplayMissedPunchHistory();
                }
                
            }catch(Exception e)
            {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_txtEmpNoKeyPressed
    private void MoveFirst() {
        objMissedPunch.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        objMissedPunch.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        objMissedPunch.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        objMissedPunch.MoveLast();
        DisplayData();
    }

    private void Add() {
        //  EditMode=EITLERPGLOBAL.ADD;

        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }

        EditMode = EITLERPGLOBAL.ADD;

        DisableToolbar();
        SetFields(true);
        SetupApproval();
        lblTitle.setBackground(new Color(0, 102, 153));
        lblTitle.setForeground(Color.WHITE);
        clearFields();

        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = 830;
        aList.FirstFreeNo = 334;
        txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
       
        FFNo = aList.FirstFreeNo;
       // txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        lblTitle.setText("Missed Punch Request Form - " + txtDocNo.getText());
        
        txtEmpNo.setEnabled(true);
        txtPunchDate.setEnabled(true);
        txtPunchTime.setEnabled(true); 
        chkMorning.setEnabled(true);
        txtResonMorning.setEnabled(true);
        chkAfternoon.setEnabled(true);
        txtResonAfternoon.setEnabled(true);
        chkEvening.setEnabled(true);
        txtReasonEvening.setEnabled(true);
        txtEmpRemark.setEnabled(true);
        chk_VIEW_CCTV_DIDNT_PUNCH.setEnabled(true);
        chk_CHECK_3_CCTV.setEnabled(true);
        chk_VIEW_CCTV_NOT_RECORD.setEnabled(true);
        txtEmpViewCamera.setEnabled(true);
        chk_NO_CCTV_NOT_PUNCH.setEnabled(true);
        txtTimeofExitEntry.setEnabled(true);
        btnUpload.setEnabled(true);
        
        
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "SDMLATTPAY.MissedPunchRequest.frmFindMissedPunchRequest", true);
        frmFindMissedPunchRequest ObjFindEmployee = (frmFindMissedPunchRequest) ObjLoader.getObj();

        if (ObjFindEmployee.Cancelled == false) {
            if (!objMissedPunch.Filter(ObjFindEmployee.stringFindQuery)) {
                JOptionPane.showMessageDialog(this, "No records found.", "Find  Missed Punch ", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    // find rate update by doc no
    public void Find(String docNo) {
        objMissedPunch.Filter(" MP_DOC_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    public void FindWaiting() {
        //     EMP.Filter(" AND PROD_DOC_NO IN (SELECT DISTINCT PROD_DOC_NO FROM PRODUCTION.FELT_PROD_DATA, PRODUCTION.FELT_PROD_DOC_DATA WHERE PROD_DOC_NO=DOC_NO AND USER_ID="+EITLERPGLOBAL.gNewUserID+" AND STATUS='W' AND MODULE_ID="+ModuleId+" AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void Save() {

        

        if(OpgApprove.isSelected() || OpgFinal.isSelected())
        {
            if(txtEmpNo.getText().equals(""))
            {
                JOptionPane.showMessageDialog(this, "Employee No is compulsory.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(txtPunchDate.getText().equals(""))
            {
                JOptionPane.showMessageDialog(this, "Missed Punch Date is Compulsory.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            } 
        }
        
        if (OpgFinal.isSelected()) {
            
            if(txtEmpNo.getText().equals(""))
            {
                JOptionPane.showMessageDialog(this, "Employee No is compulsory.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(txtPunchDate.getText().equals(""))
            {
                JOptionPane.showMessageDialog(this, "Missed Punch Date is Compulsory.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(txtTimeofExitEntry.getText().equals(""))
            {
                JOptionPane.showMessageDialog(this, "Time of Entry and Exit is Compulsory.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        SetData();

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //EMP.LoadData();
        if (EditMode == EITLERPGLOBAL.ADD) {
            if (objMissedPunch.Insert()) {

                SelectFirstFree aList = new SelectFirstFree();
                aList.ModuleID = 830;
                aList.FirstFreeNo = 334;
                FFNo = aList.FirstFreeNo;
                clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, true);

                if (OpgFinal.isSelected()) {
                    
                        String EMPNO = txtEmpNo.getText();
                        String PUNCH_TIME = txtTimeofExitEntry.getText();
                        String A_DATE = EITLERPGLOBAL.formatDateDB(txtPunchDate.getText());//EITLERPGLOBAL.formatDateDB(
                        String MACHINE = "00";
                        String PUNCH_DATE=EITLERPGLOBAL.formatDateDB(txtPunchDate.getText());//date of punch
                        String UPDATE_IND = "MIS-PUNCH";//
                    
                        String strInsert = "INSERT INTO SDMLATTPAY.ATT_DATA (EMP_CODE,P_TIME,A_DATE,MACHINE,A_DATETIME,PUNCH_DATE,UPDATE_IND)"
                        + " VALUES ('" + EMPNO + "',"
                        + "'" + PUNCH_TIME + "',"
                        + "'" + A_DATE + "',"
                        + "'" + MACHINE + "'," //00
                        + "'" + A_DATE + ' ' + PUNCH_TIME + "', "
                        + "'" + A_DATE + "',"
                        + "'" + UPDATE_IND + "')";
                        System.out.println(strInsert);
                        data.Execute(strInsert);
                   
                    
                }

                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + objMissedPunch.LastError, " SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (objMissedPunch.Update()) {

                if (OpgFinal.isSelected()) {
                    
                        String EMPNO = txtEmpNo.getText();
                        String PUNCH_TIME = txtTimeofExitEntry.getText();
                        String A_DATE = EITLERPGLOBAL.formatDateDB(txtPunchDate.getText());//EITLERPGLOBAL.formatDateDB(
                        String MACHINE = "00";
                        String PUNCH_DATE=EITLERPGLOBAL.formatDateDB(txtPunchDate.getText());//date of punch
                        String UPDATE_IND = "MIS-PUNCH";//
                    
                        String strInsert = "INSERT INTO SDMLATTPAY.ATT_DATA (EMP_CODE,P_TIME,A_DATE,MACHINE,A_DATETIME,PUNCH_DATE,UPDATE_IND)"
                        + " VALUES ('" + EMPNO + "',"
                        + "'" + PUNCH_TIME + "',"
                        + "'" + A_DATE + "',"
                        + "'" + MACHINE + "'," //00
                        + "'" + A_DATE + ' ' + PUNCH_TIME + "', "
                        + "'" + A_DATE + "',"
                        + "'" + UPDATE_IND + "')";
                        System.out.println(strInsert);
                        data.Execute(strInsert);
                    
                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + objMissedPunch.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
   
    private void Cancel() {
        DisplayData();
        EditMode = 0;
        EnableToolbar();
        SetMenuForRights();
        SetFields(false);
        
    }

    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void Edit() {

        String productionDocumentNo = (String) objMissedPunch.getAttribute("MP_DOC_NO").getObj();
        if (objMissedPunch.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            SetupApproval();
            //ReasonResetReadonly();
            //cmbOrderReason.setEnabled(false);
            //if (SDMLATTPAY.ApprovalFlow.IsCreator(830, productionDocumentNo)) {
                SetFields(true);
            //} else {
                EnableApproval();
            //}
    
//            if (EITLERPGLOBAL.gUserDeptID == 39 || EITLERPGLOBAL.gUserDeptID == 27) {
//                SetFields(true);
//            }
                if (EITLERPGLOBAL.gUserDeptID == 28) {
                        txtEmpNo.setEnabled(true);
                        txtPunchDate.setEnabled(true);
                        txtPunchTime.setEnabled(true); 
                        chkMorning.setEnabled(true);
                        txtResonMorning.setEnabled(true);
                        chkAfternoon.setEnabled(true);
                        txtResonAfternoon.setEnabled(true);
                        chkEvening.setEnabled(true);
                        txtReasonEvening.setEnabled(true);
                        txtEmpRemark.setEnabled(true);
                        chk_VIEW_CCTV_DIDNT_PUNCH.setEnabled(true);
                        chk_CHECK_3_CCTV.setEnabled(true);
                        chk_VIEW_CCTV_NOT_RECORD.setEnabled(true);
                        txtEmpViewCamera.setEnabled(true);
                        chk_NO_CCTV_NOT_PUNCH.setEnabled(true);
                        txtTimeofExitEntry.setEnabled(true);
                        btnUpload.setEnabled(true);
                }

                if(EITLERPGLOBAL.gUserDeptID == 16)
                {
                        txtTOPRemark.setEnabled(true);
                        chk_VIEW_CCTV_DIDNT_PUNCH.setEnabled(true);
                        chk_CHECK_3_CCTV.setEnabled(true);
                        chk_VIEW_CCTV_NOT_RECORD.setEnabled(true);
                        txtEmpViewCamera.setEnabled(true);
                        chk_NO_CCTV_NOT_PUNCH.setEnabled(true);
                        txtTimeofExitEntry.setEnabled(true);
                }
        } else {
            JOptionPane.showMessageDialog(this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "EDITING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {
        if (objMissedPunch.CanDelete(txtDocNo.getText() + "", txtDocDate.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, objMissedPunch.LastError, "DELETION ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = SDMLATTPAY.ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, ModuleId, txtDocNo.getText() + "");
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        //========== Setting Up Header Fields ================//
        String FieldName = "";
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

    }

    private void SetFields(boolean pStat) {
        txtDocDate.setEnabled(pStat);
        txtDocNo.setEnabled(pStat);
        
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);

//        txtPayEmpNo.setEnabled(pStat);
        txtEmpName.setEnabled(false);
        
        
        txtEmpNo.setEnabled(false);
        txtDept.setEnabled(false);
        txtPunchDate.setEnabled(false);
        txtPunchTime.setEnabled(false);
        chkMorning.setEnabled(false);
        txtResonMorning.setEnabled(false);
        chkAfternoon.setEnabled(false);
        txtResonAfternoon.setEnabled(false);
        chkEvening.setEnabled(false);
        txtReasonEvening.setEnabled(false);
        txtEmpRemark.setEnabled(false);
        
        txtTOPRemark.setEnabled(false);
        chk_VIEW_CCTV_DIDNT_PUNCH.setEnabled(false);
        chk_CHECK_3_CCTV.setEnabled(false);
        chk_VIEW_CCTV_NOT_RECORD.setEnabled(false);
        txtEmpViewCamera.setEnabled(false);
        chk_NO_CCTV_NOT_PUNCH.setEnabled(false);
        txtTimeofExitEntry.setEnabled(false);
        btnUpload.setEnabled(false);
        
        
        
        txtHODRemark.setEnabled(pStat);
        
        //cmbDesignation.setText("");        

        
//        txtWeekOff.setEnabled(pStat);

        
//        txtCompany.setEnabled(pStat);
//        txtDivision.setEnabled(pStat);
        
        
        
        SetupApproval();
    }

    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }
    private void filter(ArrayList<String> Hierarchy) {
        for (String current : Hierarchy) {
            int n = cmbHierarchyModel.getIndexOf(current);
            if (n != -1) {
                cmbHierarchyModel.setSelectedItem(current);
            }
        }
    }

    private void SetData() {

        DOC_NO = txtDocNo.getText();
        objMissedPunch.setAttribute("MP_DOC_NO", txtDocNo.getText());
        objMissedPunch.setAttribute("MP_DOC_DATE", EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
        objMissedPunch.setAttribute("MP_EMP_NO", txtEmpNo.getText());
        objMissedPunch.setAttribute("MP_EMP_NAME", txtEmpName.getText());
        objMissedPunch.setAttribute("MP_EMP_DEPT", txtDept.getText());
        objMissedPunch.setAttribute("MP_DATE", EITLERPGLOBAL.formatDateDB(txtPunchDate.getText()));
        objMissedPunch.setAttribute("MP_TIME", txtPunchTime.getText());
        objMissedPunch.setAttribute("MP_MORNING", "0");
        if(chkMorning.isSelected())
        {
            objMissedPunch.setAttribute("MP_MORNING", "1");
        }
        objMissedPunch.setAttribute("MP_MORNING_REMARK", txtResonMorning.getText());
        objMissedPunch.setAttribute("MP_AFTERNOON", "0");
        if(chkAfternoon.isSelected())
        {
            objMissedPunch.setAttribute("MP_AFTERNOON", "1");
        }
        objMissedPunch.setAttribute("MP_AFTERNOON_REMARK", txtResonAfternoon.getText());
        objMissedPunch.setAttribute("MP_EVENING", "0");
        if(chkEvening.isSelected())
        {
            objMissedPunch.setAttribute("MP_EVENING", "1");
        }
        objMissedPunch.setAttribute("MP_EVENING_REMARK", txtReasonEvening.getText());
        objMissedPunch.setAttribute("MP_EMP_REMARK", txtEmpRemark.getText());
        objMissedPunch.setAttribute("MP_HOD_REMARK", txtHODRemark.getText());
        objMissedPunch.setAttribute("MP_TOP_REMARK", txtTOPRemark.getText());
        objMissedPunch.setAttribute("MP_VIEW_CCTV_DIDNT_PUNCH", "0");
        if(chk_VIEW_CCTV_DIDNT_PUNCH.isSelected())
        {
            objMissedPunch.setAttribute("MP_VIEW_CCTV_DIDNT_PUNCH", "1");
        }
        objMissedPunch.setAttribute("MP_CHECK_3_CCTV", "0");
        if(chk_CHECK_3_CCTV.isSelected())
        {
            objMissedPunch.setAttribute("MP_CHECK_3_CCTV", "1");
        }
        objMissedPunch.setAttribute("MP_VIEW_CCTV_NOT_RECORD", "0");
        if(chk_VIEW_CCTV_NOT_RECORD.isSelected())
        {
            objMissedPunch.setAttribute("MP_VIEW_CCTV_NOT_RECORD", "1");
        }
        objMissedPunch.setAttribute("MP_CAMERA_DETAIL", txtEmpViewCamera.getText());
        objMissedPunch.setAttribute("MP_NO_CCTV_NOT_PUNCH", "0");
        if(chk_NO_CCTV_NOT_PUNCH.isSelected())
        {
            objMissedPunch.setAttribute("MP_NO_CCTV_NOT_PUNCH", "1");
        }
        objMissedPunch.setAttribute("MP_TIME_ENTRY_EXIT", txtTimeofExitEntry.getText());
        
        
        objMissedPunch.setAttribute("MODULE_ID", ModuleId);
        objMissedPunch.setAttribute("USER_ID", EITLERPGLOBAL.gNewUserID);

        //----- Update Approval Specific Fields -----------//
        objMissedPunch.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        objMissedPunch.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        objMissedPunch.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        objMissedPunch.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            objMissedPunch.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            objMissedPunch.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            objMissedPunch.setAttribute("APPROVAL_STATUS", "R");
            objMissedPunch.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            objMissedPunch.setAttribute("APPROVAL_STATUS", "H");
        }

        if (EditMode == EITLERPGLOBAL.ADD) {
            objMissedPunch.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            objMissedPunch.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        } else {
            objMissedPunch.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            objMissedPunch.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
            objMissedPunch.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
            objMissedPunch.setAttribute("UPDATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton btnDeleteImage;
    private javax.swing.JButton btnNextImage;
    private javax.swing.JButton btnPrevImage;
    private javax.swing.JButton btnUpload;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkAfternoon;
    private javax.swing.JCheckBox chkEvening;
    private javax.swing.JCheckBox chkMorning;
    private javax.swing.JCheckBox chk_CHECK_3_CCTV;
    private javax.swing.JCheckBox chk_NO_CCTV_NOT_PUNCH;
    private javax.swing.JCheckBox chk_VIEW_CCTV_DIDNT_PUNCH;
    private javax.swing.JCheckBox chk_VIEW_CCTV_NOT_RECORD;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JLabel lblImg;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStatus1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel ltbPink;
    private javax.swing.JTable tblMPHistory;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtDept;
    private javax.swing.JFormattedTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtEmpName;
    private javax.swing.JTextField txtEmpNo;
    private javax.swing.JTextField txtEmpRemark;
    private javax.swing.JTextField txtEmpViewCamera;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtHODRemark;
    private javax.swing.JTextField txtPunchDate;
    private javax.swing.JTextField txtPunchTime;
    private javax.swing.JTextField txtReasonEvening;
    private javax.swing.JTextField txtResonAfternoon;
    private javax.swing.JTextField txtResonMorning;
    private javax.swing.JTextField txtTOPRemark;
    private javax.swing.JTextField txtTimeofExitEntry;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables

    
}
