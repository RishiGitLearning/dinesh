/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SDMLATTPAY.Gratuity;


import SDMLATTPAY.Gratuity.*;
import EITLERP.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.faces.model.DataModelListener;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import org.apache.commons.lang.time.DurationFormatUtils;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.Row;

/**
 *
 * @author root
 *
 */
public class FrmEmployeeGratuity extends javax.swing.JApplet {

    private int EditMode = 0;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbModuleModel;
    private EITLComboModel cmbTrustModel;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;    
    private EITLTableModel DataModelDaysEntry;    
    private EITLTableCellRenderer CellAlign = new EITLTableCellRenderer();
    private EITLTableCellRenderer CellAlign1 = new EITLTableCellRenderer();
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;
    private int ModuleId = 853;
    private String DOC_NO = "";
    private clsEmployeeGratuity gratuity;
    private EITLComboModel cmbSendToModel;

    String seleval = "", seltyp = "", selqlt = "", selshd = "", selpiece = "", selext = "", selinv = "", selsz = "";
    private int mlstrc;
    private String menusele = "";
    String shift="";

    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    DateFormat dateForDB = new SimpleDateFormat("yyyy-MM-dd");

    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    public frmPendingApprovals frmPA;

    @Override
    public void init() {

        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        initComponents();
        docdate1.setVisible(false);
        GenerateCombos();
        GenerateTrustCombo();
        GenerateFromCombo();
        //GenerateHierarchyCombo();

        SetMenuForRights();
        try {
            DefaultSettings();
        } catch (SQLException ex) {

        }
        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();

        gratuity = new clsEmployeeGratuity();
        boolean load = gratuity.LoadData(EITLERPGLOBAL.gCompanyID);
        if (load) {
            DisplayData();
            MoveLast();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + gratuity.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        SetFields(false);
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        SetupApproval();

    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    public void DefaultSettings() throws SQLException {

        //String data = toString();
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        clearFields();
        lblTitle.setBackground(new Color(0, 102, 153));
        lblTitle.setForeground(Color.WHITE);

    }

    private void clearFields() {

        lbldoc.setText("");
        docdate.setText("");        
        txtempcd.setText("");
        txtname.setText("");
        lbldept.setText("");
        lblDOJ.setText("");
        lblDOL.setText("");
        lblGratuitCalcDate.setText("");
        lblCat.setText("");        
        txtServicePeriod.setText("");        
        txtPayableDays.setText("");
        
        cmbTrust.setSelectedIndex(0);
        txtGratuityAmt.setText("");
        txtDeductionAmt.setText("");
        txtNetChequeAmt.setText("");
        txtDrawnOn.setText("Indian Overseas Bank");
        txtPaymentMode.setText("CHEQUE");
        
        txtCheque1Date.setText("");
        txtCheque1No.setText("");
        txtCheque2No.setText("");        
        txtCheque2Date.setText("");        
        txtCheque2Amt.setText("");
        
        

        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        FormatGridHS();
        //cmbmnth.setSelectedItem(data.getStringValueFromDB("SELECT MONTH(CURDATE()) FROM DUAL"));

    }

    private void DisplayData() {

        //=========== Color Indication ===============//
        try {

            if ("1".equals(gratuity.getAttribute("APPROVED").getString())) {
                lblTitle.setBackground(Color.BLUE);
                lblTitle.setForeground(Color.WHITE);
            }

            if ("0".equals(gratuity.getAttribute("APPROVED").getString())) {
                lblTitle.setBackground(Color.GRAY);
                lblTitle.setForeground(Color.BLACK);
            }

            if ("1".equals(gratuity.getAttribute("CANCELED").getString())) {
                lblTitle.setBackground(Color.RED);
                lblTitle.setForeground(Color.BLACK);
            }
        } catch (Exception c) {

            c.printStackTrace();
        }
        try {
            if(EditMode==0) {
                if(gratuity.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(gratuity.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(gratuity.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
        }
        catch(Exception c) {
            
        }

        //============================================//
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleId)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        clearFields();
        try {
            DOC_NO = gratuity.getAttribute("GRATUIT_DOC_NO").getString();
            lblTitle.setText("GRATUITY FOR EMPLOYEE  - " + DOC_NO);
            lbldoc.setText(DOC_NO);
            docdate.setText(EITLERPGLOBAL.formatDate(gratuity.getAttribute("GRATUIT_DOC_DATE").getString()));
            
            txtempcd.setText(gratuity.getAttribute("GRATUIT_EMP_NO").getString());

            txtname.setText(gratuity.getAttribute("GRATUIT_EMP_NAME").getString()); 
            lblCat.setText(gratuity.getAttribute("GRATUIT_EMP_CAT").getString());
            lbldept.setText(gratuity.getAttribute("GRATUIT_EMP_DEPT").getString());
            lblDOJ.setText(EITLERPGLOBAL.formatDate(gratuity.getAttribute("GRATUIT_EMP_DOJ").getString()));
            lblDOL.setText(EITLERPGLOBAL.formatDate(gratuity.getAttribute("GRATUIT_EMP_DOL").getString()));
            lblGratuitCalcDate.setText(EITLERPGLOBAL.formatDate(gratuity.getAttribute("GRATUIT_CALC_DATE").getString()));
            txtServicePeriod.setText(gratuity.getAttribute("GRATUIT_PERIOD").getString());        
            txtPayableDays.setText(gratuity.getAttribute("GRATUIT_PERIOD_DAYS").getString());        
            EITLERPGLOBAL.setComboIndex(cmbTrust,  gratuity.getAttribute("GRATUIT_TRUST").getString());
            //cmbTrust.setSelectedIndex(Integer.parseInt(gratuity.getAttribute("GRATUIT_PERIOD_DAYS").getString()));
            txtGratuityAmt.setText(gratuity.getAttribute("GRATUIT_AMT").getString());
            txtDeductionAmt.setText(gratuity.getAttribute("GRATUIT_DEDUCT_AMT").getString());
            txtNetChequeAmt.setText(gratuity.getAttribute("GRATUIT_NET_CHEQUE1_AMT").getString());
            txtDrawnOn.setText(gratuity.getAttribute("DRAWN_BANK").getString());
            txtPaymentMode.setText(gratuity.getAttribute("PAYMENT_MODE").getString());
            txtCheque1No.setText(gratuity.getAttribute("CHEQUE1_NO").getString());
            txtCheque1Date.setText(EITLERPGLOBAL.formatDate(gratuity.getAttribute("CHEQUE1_DATE").getString()));
            txtCheque2No.setText(gratuity.getAttribute("CHEQUE2_NO").getString());
            txtCheque2Date.setText(EITLERPGLOBAL.formatDate(gratuity.getAttribute("CHEQUE2_DATE").getString()));
            txtCheque2Amt.setText(gratuity.getAttribute("CHEQUE2_AMT").getString()); 
            
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
            FormatGrid();
            

            for (int i = 1; i <= gratuity.colMRItems.size(); i++) {
                //Insert New Row
                Object[] rowData = new Object[1];
                DataModelDaysEntry.addRow(rowData);
                int NewRow = TableDaysEntry.getRowCount() - 1;

                clsEmpWorkingDaysEntry ObjItem = (clsEmpWorkingDaysEntry) gratuity.colMRItems.get(Integer.toString(i));

                DataModelDaysEntry.setValueAt(Integer.toString(i), NewRow,0);
                DataModelDaysEntry.setValueAt((String) ObjItem.getAttribute("FROM_YEAR").getObj(), NewRow, 1); 
                DataModelDaysEntry.setValueAt((String) ObjItem.getAttribute("TO_YEAR").getObj(), NewRow, 2); 
                DataModelDaysEntry.setValueAt((String) ObjItem.getAttribute("WORKING_DAYS").getObj(), NewRow, 3); 
                
            } 
        
        

        try {
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();
            String DocNo = gratuity.getAttribute("GRATUIT_DOC_NO").getString();
            List = SDMLATTPAY.ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, ModuleId, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];
                //JOptionPane.showMessageDialog(null, "USER ID : "+ObjFlow.getAttribute("USER_ID").getVal());
                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelApprovalStatus.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridHS();
            //HashMap History = gratuity.getHistoryList(EITLERPGLOBAL.gCompanyID + "", DocNo);
            HashMap History = clsEmployeeGratuity.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for (int i = 1; i <= History.size(); i++) {
                clsEmployeeGratuity ObjHistory = (clsEmployeeGratuity) History.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (long) ObjHistory.getAttribute("UPDATED_BY").getVal());
                rowData[2] = ObjHistory.getAttribute("ENTRY_DATE").getString();

                String ApprovalStatus = "";

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }
                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }
                rowData[3] = ApprovalStatus;
                rowData[4] = ObjHistory.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjHistory.getAttribute("FROM_IP").getString();
                DataModelUpdateHistory.addRow(rowData);
            }
            //============================================================//
            //setSTATUS();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void FormatGridA() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableApprovalStatus.setAutoResizeMode(TableApprovalStatus.AUTO_RESIZE_OFF);

    }

    private void SetMenuForRights() {
        // --- Add Rights --
        //if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10003, 100031)) { //7008,70081
            if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10092, 100921)) { //7008,70081
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        //if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10003, 100032)) { //7008,70082
            if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10092, 100922)) { //7008,70082
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        //if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10003, 100033)) {
            if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10092, 100923)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        //if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10003, 100034)) {
            if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10092, 100924)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            //cmdPreview.setEnabled(false);
            //cmdPrint.setEnabled(false);
        }
    }

    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
         if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
         cmbHierarchy.setEnabled(true);
         }else {
         cmbHierarchy.setEnabled(false);
         }*/

        // select hold for default approval
        OpgHold.setSelected(true);

        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            //lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {

            int FromUserID = SDMLATTPAY.ApprovalFlow.getFromID(EITLERPGLOBAL.gCompanyID, ModuleId, gratuity.getAttribute("DOC_NO").getString());
            //lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = SDMLATTPAY.ApprovalFlow.getFromRemarks(EITLERPGLOBAL.gCompanyID, ModuleId, FromUserID, gratuity.getAttribute("DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (SDMLATTPAY.ApprovalFlow.IsCreator(ModuleId, gratuity.getAttribute("DOC_NO").getString() + "")) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void FormatGridHS() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From IP");

        TableUpdateHistory.setAutoResizeMode(TableUpdateHistory.AUTO_RESIZE_OFF);
    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (EITLERPGLOBAL.gNewUserID == SDMLATTPAY.ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "")) {
                List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + (ModuleId));
            } else {
                List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
            }
        }

        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
    }

    private void GenerateTrustCombo() {

        HashMap List = new HashMap();        
        clsEmployeeGratuity objTrust;
        
        
        cmbTrustModel = new EITLComboModel();
        cmbTrust.setModel(cmbTrustModel);
        cmbTrustModel.removeAllElements();  //Clearing previous contents

        ComboData aData = new ComboData();
        aData.Text = "Select Trust";
        aData.Code = 0;
        aData.strCode="0";
        cmbTrustModel.addElement(aData);
        
        aData = new ComboData();
        aData.Text = "Trust 1-Shri Dinesh Mills Limited Employee’s Group Gratuity Scheme";
        aData.Code = 1;
        aData.strCode="1";
        cmbTrustModel.addElement(aData);
        
        aData = new ComboData();
        aData.Text = "Trust 2-Shri Dinesh Mills Limited Employee’s Special Gratuity Scheme";
        aData.Code = 2;
        aData.strCode="2";
        cmbTrustModel.addElement(aData);
        
       /*
        List = clsEmployeeGratuity.getTrustList("");
        for (int i = 1; i <= List.size(); i++) {
            objTrust = (clsEmployeeGratuity) List.get(Integer.toString(i));
//            ComboData aData = new ComboData();
            aData.Text = "Trust"+objTrust.getAttribute("TRUST_ID").getInt()+"-"+(String) objTrust.getAttribute("TRUST_NAME").getObj();
            aData.Code = objTrust.getAttribute("TRUST_ID").getInt();
            cmbTrustModel.addElement(aData);
        }
        */
    }
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = SDMLATTPAY.ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "");
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableColumnModel tcm = TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(90);
        tcm.getColumn(5).setPreferredWidth(90);
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");

        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(2).setPreferredWidth(50);
        tcm.getColumn(3).setPreferredWidth(20);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        Tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        lblStatus1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtempcd = new javax.swing.JTextField();
        cmdNextToTab2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        docdate = new javax.swing.JLabel();
        txtname = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        lbldoc = new javax.swing.JLabel();
        docdate1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtPayableDays = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lbldept = new javax.swing.JLabel();
        lblDOJ = new javax.swing.JLabel();
        lblDOL = new javax.swing.JLabel();
        lblGratuitCalcDate = new javax.swing.JLabel();
        lblCat = new javax.swing.JLabel();
        txtServicePeriod = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableDaysEntry = new javax.swing.JTable();
        jLabel24 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        txtCheque2Amt = new javax.swing.JTextField();
        txtGratuityAmt = new javax.swing.JTextField();
        txtDeductionAmt = new javax.swing.JTextField();
        txtNetChequeAmt = new javax.swing.JTextField();
        txtDrawnOn = new javax.swing.JTextField();
        txtPaymentMode = new javax.swing.JTextField();
        txtCheque1No = new javax.swing.JTextField();
        txtCheque1Date = new javax.swing.JTextField();
        txtCheque2No = new javax.swing.JTextField();
        txtCheque2Date = new javax.swing.JTextField();
        cmbTrust = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        StatusPanel = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        Tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        lblStatus1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus1.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(lblStatus1);
        lblStatus1.setBounds(10, 360, 920, 30);

        jLabel1.setText("Employee No :");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(20, 60, 110, 20);

        txtempcd.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtempcd = new JTextFieldHint(new JTextField(),"Search by F1");
        txtempcd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtempcdActionPerformed(evt);
            }
        });
        txtempcd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtempcdFocusLost(evt);
            }
        });
        txtempcd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtempcdKeyPressed(evt);
            }
        });
        jPanel1.add(txtempcd);
        txtempcd.setBounds(220, 60, 90, 20);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(762, 360, 120, 30);

        jLabel5.setText("Doc Date :");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(20, 30, 120, 20);

        docdate.setText("DD/MM/YYYY");
        jPanel1.add(docdate);
        docdate.setBounds(220, 30, 100, 20);

        txtname.setEditable(false);
        txtname.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtname.setText("Name");
        jPanel1.add(txtname);
        txtname.setBounds(220, 80, 250, 20);

        jLabel11.setText("Document No  :");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(20, 10, 150, 20);

        lbldoc.setText("DocNo");
        jPanel1.add(lbldoc);
        lbldoc.setBounds(220, 10, 110, 20);

        docdate1.setText("DD/MM/YYYY");
        jPanel1.add(docdate1);
        docdate1.setBounds(220, 30, 100, 20);

        jLabel4.setText("Department :");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(20, 110, 110, 20);

        txtPayableDays.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jPanel1.add(txtPayableDays);
        txtPayableDays.setBounds(220, 260, 190, 19);

        jLabel2.setText("Date Of Leaving :");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(20, 160, 130, 20);

        jLabel3.setText("Period Of Service (Years) :");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(20, 230, 190, 20);

        jLabel9.setText("Category :");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(20, 200, 110, 20);

        jLabel10.setText("Gratuity Payable Days :");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(20, 260, 180, 20);

        jLabel6.setText("Date Of Joining:");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(20, 140, 140, 20);

        jLabel8.setText("Gratuity Calc Date :");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(20, 180, 150, 20);

        lbldept.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lbldept.setText("Department");
        jPanel1.add(lbldept);
        lbldept.setBounds(220, 110, 210, 20);

        lblDOJ.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblDOJ.setText("Date of Joining");
        jPanel1.add(lblDOJ);
        lblDOJ.setBounds(220, 140, 210, 20);

        lblDOL.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblDOL.setText("Date of Leaving");
        jPanel1.add(lblDOL);
        lblDOL.setBounds(220, 160, 210, 20);

        lblGratuitCalcDate.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblGratuitCalcDate.setText("Gratuity Calc Date");
        jPanel1.add(lblGratuitCalcDate);
        lblGratuitCalcDate.setBounds(220, 180, 210, 20);

        lblCat.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblCat.setText("Category");
        jPanel1.add(lblCat);
        lblCat.setBounds(220, 200, 210, 20);

        txtServicePeriod.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jPanel1.add(txtServicePeriod);
        txtServicePeriod.setBounds(220, 230, 190, 19);

        TableDaysEntry.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableDaysEntry);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(580, 30, 320, 300);

        jLabel24.setText("For   ");
        jPanel1.add(jLabel24);
        jLabel24.setBounds(550, 10, 300, 10);

        Tab.addTab("Employee Detail", jPanel1);

        jPanel5.setLayout(null);

        jLabel13.setText("Details of Cheque paid to SDML/Society");
        jPanel5.add(jLabel13);
        jLabel13.setBounds(90, 220, 330, 15);

        jLabel15.setText("Cheque Date :");
        jPanel5.add(jLabel15);
        jLabel15.setBounds(30, 270, 170, 15);

        jLabel16.setText("Trust");
        jPanel5.add(jLabel16);
        jLabel16.setBounds(30, 45, 140, 20);

        jLabel17.setText("Gratuity Amount :");
        jPanel5.add(jLabel17);
        jLabel17.setBounds(30, 70, 140, 15);

        jLabel18.setText("Deduction if Any :");
        jPanel5.add(jLabel18);
        jLabel18.setBounds(30, 90, 140, 15);

        jLabel20.setText("Soc Cheque Amount :");
        jPanel5.add(jLabel20);
        jLabel20.setBounds(30, 290, 170, 15);

        jLabel21.setText("Drawn On :");
        jPanel5.add(jLabel21);
        jLabel21.setBounds(30, 130, 170, 15);

        jLabel22.setText("Mode of Payment :");
        jPanel5.add(jLabel22);
        jLabel22.setBounds(30, 150, 170, 15);

        jLabel23.setText("Cheque No :");
        jPanel5.add(jLabel23);
        jLabel23.setBounds(30, 250, 170, 15);

        jLabel25.setText("Cheque No :");
        jPanel5.add(jLabel25);
        jLabel25.setBounds(30, 170, 170, 15);

        jPanel7.setLayout(null);

        jLabel26.setText("Details of Cheque paid to SDML/Society");
        jPanel7.add(jLabel26);
        jLabel26.setBounds(90, 220, 330, 15);

        jLabel27.setText("Cheque Date :");
        jPanel7.add(jLabel27);
        jLabel27.setBounds(30, 190, 170, 15);

        jLabel28.setText("Trust");
        jPanel7.add(jLabel28);
        jLabel28.setBounds(30, 40, 140, 15);

        jLabel29.setText("Gratuity Amount :");
        jPanel7.add(jLabel29);
        jLabel29.setBounds(30, 70, 140, 15);

        jLabel30.setText("Deduction if Any :");
        jPanel7.add(jLabel30);
        jLabel30.setBounds(30, 90, 140, 15);

        jLabel37.setText("Net Cheque Amount :");
        jPanel7.add(jLabel37);
        jLabel37.setBounds(30, 110, 170, 15);

        jLabel38.setText("Drawn On :");
        jPanel7.add(jLabel38);
        jLabel38.setBounds(30, 130, 170, 15);

        jLabel39.setText("Mode of Payment :");
        jPanel7.add(jLabel39);
        jLabel39.setBounds(30, 150, 170, 15);

        jLabel40.setText("Cheque No :");
        jPanel7.add(jLabel40);
        jLabel40.setBounds(30, 240, 170, 15);

        jLabel41.setText("For Accounts Use Only  ");
        jPanel7.add(jLabel41);
        jLabel41.setBounds(100, 10, 230, 15);

        jLabel42.setText("Cheque No :");
        jPanel7.add(jLabel42);
        jLabel42.setBounds(30, 170, 170, 15);

        jPanel5.add(jPanel7);
        jPanel7.setBounds(0, 0, 0, 0);

        jLabel43.setText("Cheque Date :");
        jPanel5.add(jLabel43);
        jLabel43.setBounds(30, 190, 170, 15);

        jLabel44.setText("Emp Cheque Amount :");
        jPanel5.add(jLabel44);
        jLabel44.setBounds(30, 110, 170, 15);

        txtCheque2Amt.setEnabled(false);
        jPanel5.add(txtCheque2Amt);
        txtCheque2Amt.setBounds(200, 290, 170, 19);

        txtGratuityAmt.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jPanel5.add(txtGratuityAmt);
        txtGratuityAmt.setBounds(200, 70, 170, 19);

        txtDeductionAmt.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtDeductionAmt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDeductionAmtActionPerformed(evt);
            }
        });
        txtDeductionAmt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDeductionAmtFocusLost(evt);
            }
        });
        txtDeductionAmt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDeductionAmtKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDeductionAmtKeyReleased(evt);
            }
        });
        jPanel5.add(txtDeductionAmt);
        txtDeductionAmt.setBounds(200, 90, 170, 19);

        txtNetChequeAmt.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtNetChequeAmt.setEnabled(false);
        txtNetChequeAmt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNetChequeAmtActionPerformed(evt);
            }
        });
        jPanel5.add(txtNetChequeAmt);
        txtNetChequeAmt.setBounds(200, 110, 170, 19);

        txtDrawnOn.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtDrawnOn.setEnabled(false);
        jPanel5.add(txtDrawnOn);
        txtDrawnOn.setBounds(200, 130, 170, 19);

        txtPaymentMode.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtPaymentMode.setEnabled(false);
        jPanel5.add(txtPaymentMode);
        txtPaymentMode.setBounds(200, 150, 170, 19);

        txtCheque1No.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jPanel5.add(txtCheque1No);
        txtCheque1No.setBounds(200, 170, 170, 19);

        txtCheque1Date.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jPanel5.add(txtCheque1Date);
        txtCheque1Date.setBounds(200, 190, 170, 19);

        txtCheque2No.setEnabled(false);
        jPanel5.add(txtCheque2No);
        txtCheque2No.setBounds(200, 250, 170, 19);

        txtCheque2Date.setEnabled(false);
        jPanel5.add(txtCheque2Date);
        txtCheque2Date.setBounds(200, 270, 170, 19);

        cmbTrust.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbTrust.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbTrustItemStateChanged(evt);
            }
        });
        jPanel5.add(cmbTrust);
        cmbTrust.setBounds(200, 40, 560, 24);

        Tab.addTab("Payment Detail", jPanel5);

        jPanel2.setLayout(null);

        Tab2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 23, 66, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(90, 20, 180, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 62, 56, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(90, 60, 180, 19);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 95, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(90, 95, 530, 19);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 130, 81, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup5.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgApproveActionPerformed(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        buttonGroup5.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup5.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgRejectActionPerformed(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup5.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(90, 130, 180, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 253, 60, 15);

        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(90, 250, 180, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 292, 60, 15);

        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 290, 570, 19);

        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(450, 340, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(630, 95, 33, 21);

        cmdNextToTab3.setMnemonic('N');
        cmdNextToTab3.setText("Next >>");
        cmdNextToTab3.setToolTipText("Next Tab");
        cmdNextToTab3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab3ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab3);
        cmdNextToTab3.setBounds(560, 340, 102, 25);

        jPanel2.add(Tab2);
        Tab2.setBounds(10, 0, 760, 410);

        Tab.addTab("Approval", jPanel2);

        jPanel3.setLayout(null);

        StatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StatusPanel.setLayout(null);

        jLabel60.setText("Document Approval Status");
        StatusPanel.add(jLabel60);
        jLabel60.setBounds(12, 10, 242, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableApprovalStatus);

        StatusPanel.add(jScrollPane2);
        jScrollPane2.setBounds(0, 40, 694, 120);

        jLabel19.setText("Document Update History");
        StatusPanel.add(jLabel19);
        jLabel19.setBounds(10, 170, 182, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableUpdateHistory);

        StatusPanel.add(jScrollPane6);
        jScrollPane6.setBounds(10, 190, 540, 130);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdViewHistory);
        cmdViewHistory.setBounds(570, 170, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdNormalView);
        cmdNormalView.setBounds(570, 200, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 230, 132, 24);

        txtAuditRemarks.setEnabled(false);
        StatusPanel.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(570, 260, 129, 19);

        jButton5.setText("<<Previous");
        jButton5.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton5);
        jButton5.setBounds(570, 290, 130, 30);

        jPanel3.add(StatusPanel);
        StatusPanel.setBounds(10, 0, 790, 380);

        Tab.addTab("Status", jPanel3);

        getContentPane().add(Tab);
        Tab.setBounds(0, 80, 930, 440);
        Tab.getAccessibleContext().setAccessibleName("Employee Detail");

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 930, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("EMPLOYEE GRATUITY ENTRY");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 930, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged

        //SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "On State Change SelHierarchyId : "+SelHierarchyID);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
                OpgFinal.setEnabled(true);
            }
        } else {
            OpgApprove.setEnabled(false);
            OpgApprove.setSelected(false);
        }

        if (clsHierarchy.IsCreator((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgApprove.setEnabled(true);
            OpgReject.setEnabled(false);
            OpgReject.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus1.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "SelHierarchyId : "+SelHierarchyID);
        DOC_NO = lbldoc.getText();
        cmbSendTo.setEnabled(true);
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (SDMLATTPAY.ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "")) {
                cmbSendTo.setEnabled(true);
                txtToRemarks.setEnabled(true);
                txtFromRemarks.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }
        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }

        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(true);
        OpgHold.setSelected(false);
        //txtToRemarks.setEnabled(false);
        if (!OpgApprove.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);

        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {

                if (OpgApprove.isSelected()) {
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    //JOptionPane.showMessageDialog(null, "Module Id :"+ModuleId+", DOC No : "+sorder_no+", User Id : "+ObjUser.getAttribute("USER_ID").getInt()+", New user Id "+SDMLERPGLOBAL.gNewUserID);
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                    // JOptionPane.showMessageDialog(null, "IncludeUser = "+IncludeUser);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = SDMLATTPAY.ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "");
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }
    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged

    }//GEN-LAST:event_OpgApproveItemStateChanged

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus1.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged

    }//GEN-LAST:event_OpgFinalItemStateChanged

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained

    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
        
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectItemStateChanged

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained

    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked


    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged

    }//GEN-LAST:event_OpgHoldItemStateChanged

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained

    }//GEN-LAST:event_OpgHoldFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained

    }//GEN-LAST:event_cmbSendToFocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained

    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed

    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdNextToTab3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab3ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab3ActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained

    }//GEN-LAST:event_Tab2FocusGained

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        String DocNo = txtempcd.getText();
        //gratuity.ShowHistory(DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        //gratuity.HistoryView = false;
        //gratuity.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            txtAuditRemarks.setText((String) TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4));
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText = txtAuditRemarks;
            bigEdit.ShowEdit();
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void TabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabMouseClicked

    }//GEN-LAST:event_TabMouseClicked

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();

    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        // REPORT QUERY : SELECT A.DOC_NO,A.PIECE_NO,A.DL_REMARK,B.PR_MACHINE_NO,B.PR_POSITION_NO,B.PR_LENGTH,B.PR_WIDTH,B.PR_GSM,B.PR_GROUP,B.PR_STYLE,B.PR_SQMTR,B.PR_STYLE,B.PR_SYN_PER,B.PR_PIECE_REMARK,B.PR_PIECE_STAGE,B.PR_PRODUCT_CODE,B.PR_PARTY_CODE,B.PR_PO_NO,B.PR_PO_DATE,B.PR_REFERENCE_DATE,B.PR_ORDER_REMARK,B.PR_ORDER_DATE FROM  PRODUCTION.FELT_SALES_DIVERSION_LIST_APPROVAL A, PRODUCTION.FELT_SALES_PIECE_REGISTER B;
        PrintPreview();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void OpgRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgRejectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgRejectActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void txtempcdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtempcdFocusLost
        // TODO add your handling code here:
        //txtname.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'"));
        //lbldept.setText(data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'"));
        txtname.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP WHERE PAY_EMPID='" + txtempcd.getText() + "'"));
        lbldept.setText(data.getStringValueFromDB("SELECT DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP WHERE PAY_EMPID='" + txtempcd.getText() + "'"));
        lblCat.setText(data.getStringValueFromDB("SELECT DESIGNATION FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP WHERE PAY_EMPID='" + txtempcd.getText() + "'"));
            //lblShift.setText(data.getStringValueFromDB("SELECT SHIFT_NAME FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP WHERE PAY_EMPID='"+aList.ReturnVal+"'"));
    
    }//GEN-LAST:event_txtempcdFocusLost

    private void txtempcdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtempcdKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();            
            //aList.SQL = "SELECT EMP_NO AS EMP_CODE,EMP_NAME AS NAME,EMP_DEPARTMENT AS DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST ";
            //aList.SQL = "SELECT PAY_EMP_NO AS EMP_CODE,EMP_NO,EMP_NAME AS NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_LEFT_DATE NOT LIKE '0000-00-00%' ORDER BY \n"
            //        + " EMP_LEFT_DATE DESC";
            aList.SQL = "SELECT PAY_EMP_NO AS EMP_CODE,EMP_NAME AS NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_LEFT_DATE NOT LIKE '0000-00-00%' ORDER BY \n"
                    + " EMP_LEFT_DATE DESC";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;

            if (aList.ShowLOV()) {
                txtempcd.setText(aList.ReturnVal);
//                txtname.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'"));
//                lbldept.setText(data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'"));                
//            String shiftId=data.getStringValueFromDB("SELECT EMP_SHIFT_ID FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'");
//            //String mainCategory=data.getStringValueFromDB("SELECT EMP_MAIN_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'");
//            lblShift.setText(data.getStringValueFromDB("SELECT SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT WHERE SHIFT_ID='"+shiftId+"'"));
//            lblDesn.setText(data.getStringValueFromDB("SELECT EMP_DESIGNATION FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'"));
            txtname.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP WHERE PAY_EMPID='"+aList.ReturnVal+"'"));
            lbldept.setText(data.getStringValueFromDB("SELECT DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP WHERE PAY_EMPID='"+aList.ReturnVal+"'"));
            lblCat.setText(data.getStringValueFromDB("SELECT CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP WHERE PAY_EMPID='"+aList.ReturnVal+"'"));
            lblDOJ.setText(EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT DATE_OF_JOINING FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP WHERE PAY_EMPID='"+aList.ReturnVal+"'")));
            lblDOL.setText(EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT DATE_OF_LEAVING FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP WHERE PAY_EMPID='"+aList.ReturnVal+"'")));
            lblGratuitCalcDate.setText(EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT DOC_GRATUITY FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP WHERE PAY_EMPID='"+aList.ReturnVal+"'")));
            
            }
            GenerateTableData(data.getStringValueFromDB("SELECT YEAR(DATE_OF_JOINING) FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP WHERE PAY_EMPID='"+aList.ReturnVal+"'"),data.getStringValueFromDB("SELECT YEAR(DATE_OF_LEAVING) FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP WHERE PAY_EMPID='"+aList.ReturnVal+"'"));
        }
    }//GEN-LAST:event_txtempcdKeyPressed

    private void OpgApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgApproveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgApproveActionPerformed

    private void txtempcdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtempcdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtempcdActionPerformed

    private void txtNetChequeAmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNetChequeAmtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNetChequeAmtActionPerformed

    private void txtDeductionAmtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDeductionAmtKeyPressed
       if(!txtDeductionAmt.getText().equals("")){
        if(Double.parseDouble(txtDeductionAmt.getText().trim())>0){
            txtCheque2No.setEnabled(true);
            txtCheque2Date.setEnabled(true);
            txtCheque2Amt.setEnabled(true);
        }else{
            txtCheque2No.setEnabled(false);
            txtCheque2Date.setEnabled(false);
            txtCheque2Amt.setEnabled(false);
        }
    }                
    }//GEN-LAST:event_txtDeductionAmtKeyPressed

    private void txtDeductionAmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDeductionAmtActionPerformed
        if(!txtDeductionAmt.getText().equals("")){
            if (Double.parseDouble(txtDeductionAmt.getText().trim()) > 0) {
                txtCheque2No.setEnabled(true);
                txtCheque2Date.setEnabled(true);
                txtCheque2Amt.setEnabled(true);
            } else {
                txtCheque2No.setEnabled(false);
                txtCheque2Date.setEnabled(false);
                txtCheque2Amt.setEnabled(false);
            }        
        }
    }//GEN-LAST:event_txtDeductionAmtActionPerformed

    private void txtDeductionAmtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDeductionAmtKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDeductionAmtKeyReleased

    private void txtDeductionAmtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDeductionAmtFocusLost
        double gratuityAmt=0,dedAmt=0;
        double empNetAmt=0.00;
        if (!txtGratuityAmt.getText().isEmpty()) {
                    gratuityAmt=Double.parseDouble(txtGratuityAmt.getText());
                }
        if (!txtDeductionAmt.getText().isEmpty()) {
                    dedAmt=Double.parseDouble(txtDeductionAmt.getText());
                }
        if(dedAmt>0){
            empNetAmt=gratuityAmt-dedAmt;
        txtNetChequeAmt.setText(Double.toString(empNetAmt));
        txtCheque2Amt.setText(txtDeductionAmt.getText());
        }else{
            txtNetChequeAmt.setText(txtGratuityAmt.getText());
            txtCheque2Amt.setText("");
        }
        
    }//GEN-LAST:event_txtDeductionAmtFocusLost

    private void cmbTrustItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTrustItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbTrustItemStateChanged
    private void MoveFirst() {
        gratuity.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        gratuity.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        gratuity.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        gratuity.MoveLast();
        DisplayData();
    }

    private void Find() {
    Loader ObjLoader=new Loader(this,"SDMLATTPAY.Gratuity.FrmGratuityFind",true);
        FrmGratuityFind ObjGratuityFind= (FrmGratuityFind)ObjLoader.getObj();
        
        if(ObjGratuityFind.Cancelled==false) {
            if(!gratuity.Filter(ObjGratuityFind.stringFindQuery)) {
                JOptionPane.showMessageDialog(FrmEmployeeGratuity.this," No records found.","Find Gatepass Details",JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    public void FindWaiting() {
        gratuity.Filter(" DOC_NO IN (SELECT DISTINCT SDMLATTPAY.EMP_GRATUITY_DETAIL.GRATUIT_DOC_NO FROM SDMLATTPAY.EMP_GRATUITY_DETAIL, SDMLATTPAY.D_COM_DOC_DATA WHERE SDMLATTPAY.EMP_GRATUITY_DETAIL.GRATUIT_DOC_NO=SDMLATTPAY.D_COM_DOC_DATA.DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=" + ModuleId + " AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void Add() {

        EditMode = EITLERPGLOBAL.ADD;

        SetFields(true);
        DisableToolbar();

        SetupApproval();

        clearFields();

        EITLERP.FeltSales.common.SelectFirstFree aList = new EITLERP.FeltSales.common.SelectFirstFree();
        aList.ModuleID = ModuleId;
        aList.FirstFreeNo = 366;
        FFNo = aList.FirstFreeNo;
        lbldoc.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        lblTitle.setText("EMPLOYEE GRATUITY ENTRY - " + lbldoc.getText());
        docdate.setText(EITLERPGLOBAL.getCurrentDate());
        docdate1.setText(EITLERPGLOBAL.getCurrentDateTimeDB());
        
        OpgHold.setSelected(true);
        
    }

    private void FormatGrid() {
        DataModelDaysEntry = new EITLTableModel();

        TableDaysEntry.removeAll();
        TableDaysEntry.setModel(DataModelDaysEntry);

        TableDaysEntry.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        //Set the table Readonly
        //DataModelApprovalStatus.TableReadOnly(true);
        
        //Add the columns
        DataModelDaysEntry.addColumn("Sr. No.");
        DataModelDaysEntry.addColumn("From");
        DataModelDaysEntry.addColumn("To");
        DataModelDaysEntry.addColumn("WORKING DAYS+PL");        

        //TableDaysEntry.setAutoResizeMode(TableDaysEntry.AUTO_RESIZE_OFF);
        TableDaysEntry.getColumnModel().getColumn(0).setMinWidth(30);
        TableDaysEntry.getColumnModel().getColumn(0).setMaxWidth(30);
        TableDaysEntry.getColumnModel().getColumn(1).setMinWidth(50);
        TableDaysEntry.getColumnModel().getColumn(1).setMaxWidth(50);
        TableDaysEntry.getColumnModel().getColumn(2).setMinWidth(50);
        TableDaysEntry.getColumnModel().getColumn(2).setMaxWidth(50);
            
        DataModelDaysEntry.SetReadOnly(0);
        DataModelDaysEntry.SetReadOnly(1);
        DataModelDaysEntry.SetReadOnly(2);
    }

    private void Save() {
        
        if(cmbTrust.getSelectedIndex()==0){
            JOptionPane.showMessageDialog(this, "Please Select Trust.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        SetData();

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //gratuity.LoadData();
        if (EditMode == EITLERPGLOBAL.ADD) {
            if (gratuity.Insert()) {
                clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, true);                

                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + gratuity.LastError, " SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (gratuity.Update()) {                
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + gratuity.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();

    }

    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void Edit() {

        String DocumentNo = (String) gratuity.getAttribute("GRATUIT_DOC_NO").getString();

        if (gratuity.IsEditable(EITLERPGLOBAL.gCompanyID, DocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateCombos();
            //GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            // SetupApproval();
            //ReasonResetReadonly();
            //cmbOrderReason.setEnabled(false);
            if (SDMLATTPAY.ApprovalFlow.IsCreator(ModuleId, DocumentNo)) {
                SetFields(true);
            } else {
                EnableApproval();
            }
            //OpgFinal.setSelected(true);
        } else {
            JOptionPane.showMessageDialog(null, "You cannot edit this record. \n It is either approved/rejected or waiting approval for other user");
        }

    }

// find rate update by doc no
    public void Find(String docNo) {
        //gratuity.Filter(" DOC_NO='" + docNo + "'");
gratuity.Filter(" GRATUIT_DOC_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    public void FindEx(int pCompanyID, String docno) {
        //gratuity.Filter(" DOC_NO='" + docno + "'");
gratuity.Filter(" GRATUIT_DOC_NO='" + docno + "'");
        gratuity.MoveFirst();
        DisplayData();
    }

    private void Delete() {

    }

    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = SDMLATTPAY.ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, ModuleId, txtempcd.getText());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

    }

    private void SetFields(boolean pStat) {

        txtempcd.setEnabled(pStat);
        txtname.setEnabled(pStat);        
        txtServicePeriod.setEnabled(pStat);        
        txtPayableDays.setEnabled(pStat);  
        
        txtGratuityAmt.setEnabled(pStat);  
        txtDeductionAmt.setEnabled(pStat);  
        
        txtDrawnOn.setEnabled(pStat);  
        txtPaymentMode.setEnabled(pStat);  
        txtCheque1Date.setEnabled(pStat);
        txtCheque1No.setEnabled(pStat);
        txtCheque2No.setEnabled(pStat);
        txtCheque2Date.setEnabled(pStat);        
        txtNetChequeAmt.setEnabled(pStat);
        txtCheque2Amt.setEnabled(pStat);
        
        cmbTrust.setEnabled(pStat);        
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
    
        

        SetupApproval();
    }

    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    private void SetData() {

//      
        gratuity.setAttribute("GRATUIT_DOC_NO", lbldoc.getText());

        DOC_NO = lbldoc.getText();

        gratuity.setAttribute("GRATUIT_DOC_NO", DOC_NO);
        gratuity.setAttribute("GRATUIT_DOC_DATE", docdate.getText());

        
        gratuity.setAttribute("GRATUIT_EMP_NO", txtempcd.getText());
        gratuity.setAttribute("GRATUIT_EMP_NAME", txtname.getText());
        gratuity.setAttribute("GRATUIT_EMP_DEPT", lbldept.getText());
        gratuity.setAttribute("GRATUIT_EMP_DOJ", lblDOJ.getText());
        gratuity.setAttribute("GRATUIT_EMP_DOL", lblDOL.getText());
        gratuity.setAttribute("GRATUIT_CALC_DATE", lblGratuitCalcDate.getText());        
        gratuity.setAttribute("GRATUIT_PERIOD", txtServicePeriod.getText());
        gratuity.setAttribute("GRATUIT_PERIOD_DAYS", txtPayableDays.getText());
        gratuity.setAttribute("GRATUIT_AMT", txtGratuityAmt.getText());
        System.out.println(EITLERPGLOBAL.getComboCode(cmbTrust));
        gratuity.setAttribute("GRATUIT_TRUST", EITLERPGLOBAL.getCombostrCode(cmbTrust));
        gratuity.setAttribute("GRATUIT_DEDUCT_AMT", txtDeductionAmt.getText());
        gratuity.setAttribute("GRATUIT_NET_CHEQUE1_AMT", txtNetChequeAmt.getText());
        gratuity.setAttribute("DRAWN_BANK", txtDrawnOn.getText());
        gratuity.setAttribute("PAYMENT_MODE", txtPaymentMode.getText());
        gratuity.setAttribute("CHEQUE1_NO", txtCheque1No.getText());
        gratuity.setAttribute("CHEQUE1_DATE", txtCheque1Date.getText());
        gratuity.setAttribute("CHEQUE2_NO", txtCheque2No.getText());
        gratuity.setAttribute("CHEQUE2_DATE", txtCheque2Date.getText());
        gratuity.setAttribute("CHEQUE2_AMT", txtCheque2Amt.getText());
        gratuity.setAttribute("GRATUIT_EMP_CAT", lblCat.getText());
             

        gratuity.setAttribute("MODULE_ID", ModuleId);
        gratuity.setAttribute("USER_ID", EITLERPGLOBAL.gNewUserID);

        gratuity.setAttribute("REJECTED_REMARKS", txtToRemarks.getText());
        gratuity.setAttribute("REMARKS", "");
        gratuity.setAttribute("APPROVAL_STATUS", "");
        gratuity.setAttribute("APPROVER_REMARKS", txtFromRemarks.getText());
        gratuity.setAttribute("ENTRY_DATE", EITLERPGLOBAL.getCurrentDateDB());

        //----- Update Approval Specific Fields -----------//
        gratuity.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        gratuity.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        gratuity.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        gratuity.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            gratuity.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            gratuity.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            gratuity.setAttribute("APPROVAL_STATUS", "R");
            gratuity.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            gratuity.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            gratuity.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            gratuity.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        } else {
            gratuity.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            gratuity.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
            gratuity.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
            gratuity.setAttribute("UPDATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }
        
        for (int i = 0; i < TableDaysEntry.getRowCount(); i++) {
            
            clsEmpWorkingDaysEntry ObjItem = new clsEmpWorkingDaysEntry();
            
            ObjItem.setAttribute("EMP_NO",txtempcd.getText());            
            ObjItem.setAttribute("FROM_YEAR", TableDaysEntry.getValueAt(i, 1).toString());
            ObjItem.setAttribute("TO_YEAR", TableDaysEntry.getValueAt(i, 2).toString());
            ObjItem.setAttribute("WORKING_DAYS", TableDaysEntry.getValueAt(i, 3).toString());
            
           gratuity.colMRItems.put(Integer.toString(gratuity.colMRItems.size() + 1), ObjItem);
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableDaysEntry;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbTrust;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdNextToTab3;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel docdate;
    private javax.swing.JLabel docdate1;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblCat;
    private javax.swing.JLabel lblDOJ;
    private javax.swing.JLabel lblDOL;
    private javax.swing.JLabel lblGratuitCalcDate;
    private javax.swing.JLabel lblStatus1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lbldept;
    private javax.swing.JLabel lbldoc;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtCheque1Date;
    private javax.swing.JTextField txtCheque1No;
    private javax.swing.JTextField txtCheque2Amt;
    private javax.swing.JTextField txtCheque2Date;
    private javax.swing.JTextField txtCheque2No;
    private javax.swing.JTextField txtDeductionAmt;
    private javax.swing.JTextField txtDrawnOn;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtGratuityAmt;
    private javax.swing.JTextField txtNetChequeAmt;
    private javax.swing.JTextField txtPayableDays;
    private javax.swing.JTextField txtPaymentMode;
    private javax.swing.JTextField txtServicePeriod;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtempcd;
    private javax.swing.JTextField txtname;
    // End of variables declaration//GEN-END:variables

    
    
    private void GenerateTableData(String DOJ,String DOL){
        FormatGrid();
        int DateOfJoining=Integer.parseInt(DOJ);
        int DateOfLeaving=Integer.parseInt(DOL);
        int rows=DateOfLeaving-DateOfJoining;
        try{   
            Object[] rowData = new Object[1];
            int srNo=0;
               for(int i=0; i<rows;i++){                 
                   double workingDaysPL=0;
                   DataModelDaysEntry.addRow(rowData);
                   srNo++;
                   DataModelDaysEntry.setValueAt(srNo, i,0);                                      
                   DataModelDaysEntry.setValueAt(DateOfJoining, i,1);
                   String sql="SELECT SUM(PRESENT_DAYS) FROM SDMLATTPAY.ATT_MTH_SUMMARY_COBOL WHERE CBL_EMPCODE='"+txtempcd.getText().trim()+"' AND CBL_YEAR="+DateOfJoining+" GROUP BY CBL_YEAR";                   
                   workingDaysPL=data.getDoubleValueFromDB(sql);
                   DateOfJoining++;
                   DataModelDaysEntry.setValueAt(DateOfJoining, i,2);                   
                   DataModelDaysEntry.setValueAt(workingDaysPL, i,3);                   
               }
               
               /*
                Object[] rowData = new Object[1];
                DataModel.addRow(rowData);
                DataModel.setValueByVariable("SR_NO", "1", 0);
                DataModel.setValueByVariable("PRODUCT_GROUP", "ACNE", 0);
                DataModel.setValueByVariable("LOOM_NO", "7", 0);
                
                DataModel.addRow(rowData);
                DataModel.setValueByVariable("SR_NO", "2", 1);
                DataModel.setValueByVariable("PRODUCT_GROUP", "ACNE", 1);
                DataModel.setValueByVariable("LOOM_NO", "8", 1);               
                               
                                
                DataModel.addRow(rowData);
                DataModel.setValueByVariable("SR_NO", "3", 2);
                DataModel.setValueByVariable("PRODUCT_GROUP", "ACNE", 2);
                DataModel.setValueByVariable("LOOM_NO", "86", 2);
                  
                
                DataModel.addRow(rowData);
                DataModel.setValueByVariable("SR_NO", "4", 3);
                DataModel.setValueByVariable("PRODUCT_GROUP", "ACNE", 3);
                DataModel.setValueByVariable("LOOM_NO", "88", 3);                
                
                DataModel.addRow(rowData);
                DataModel.setValueByVariable("SR_NO", "5", 4);
                DataModel.setValueByVariable("PRODUCT_GROUP", "MNE", 4);
                DataModel.setValueByVariable("LOOM_NO", "81", 4);
                
                DataModel.addRow(rowData);
                DataModel.setValueByVariable("SR_NO", "6", 5);
                DataModel.setValueByVariable("PRODUCT_GROUP", "MNE", 5);
                DataModel.setValueByVariable("LOOM_NO", "82", 5);                
                
                DataModel.addRow(rowData);
                DataModel.setValueByVariable("SR_NO", "7", 6);
                DataModel.setValueByVariable("PRODUCT_GROUP", "MNE", 6);
                DataModel.setValueByVariable("LOOM_NO", "83", 6);
                
                DataModel.addRow(rowData);
                DataModel.setValueByVariable("SR_NO", "8", 7);
                DataModel.setValueByVariable("PRODUCT_GROUP", "MNE", 7);
                DataModel.setValueByVariable("LOOM_NO", "84", 7);
                
                DataModel.addRow(rowData);
                DataModel.setValueByVariable("SR_NO", "9", 8);
                DataModel.setValueByVariable("PRODUCT_GROUP", "MNE", 8);
                DataModel.setValueByVariable("LOOM_NO", "85", 8);
                
                DataModel.addRow(rowData);
                DataModel.setValueByVariable("SR_NO", "10", 9);
                DataModel.setValueByVariable("PRODUCT_GROUP", "MNE", 9);
                DataModel.setValueByVariable("LOOM_NO", "87", 9);
                
                DataModel.addRow(rowData);                
                DataModel.setValueByVariable("SR_NO", "11", 10);
                DataModel.setValueByVariable("PRODUCT_GROUP", "MNE", 10);
                DataModel.setValueByVariable("LOOM_NO", "89", 10);
                
                DataModel.addRow(rowData);
                DataModel.setValueByVariable("SR_NO", "12", 11);
                DataModel.setValueByVariable("PRODUCT_GROUP", "MNE", 11);
                DataModel.setValueByVariable("LOOM_NO", "91", 11);
                
                DataModel.addRow(rowData);
                DataModel.setValueByVariable("SR_NO", "13", 12);
                DataModel.setValueByVariable("PRODUCT_GROUP", "MNE", 12);
                DataModel.setValueByVariable("LOOM_NO", "92", 12);            
                
                DataModel.addRow(rowData);
                DataModel.setValueByVariable("SR_NO", "14", 13);
                DataModel.setValueByVariable("PRODUCT_GROUP", "MNE", 13);
                DataModel.setValueByVariable("LOOM_NO", "93", 13);

                DataModel.addRow(rowData);
                DataModel.setValueByVariable("SR_NO", "15", 14);
                DataModel.setValueByVariable("PRODUCT_GROUP", "HDS", 14);
                DataModel.setValueByVariable("LOOM_NO", "90", 14);
                */
                
                
                
        }catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    
    private void PrintPreview() {
        
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;

        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();

//            String fdt = EITLERPGLOBAL.getCurrentDate();
//            String tdt = EITLERPGLOBAL.getCurrentDate();
//            String FromDate=EITLERPGLOBAL.formatDateDB(fdt);
//            String ToDate=EITLERPGLOBAL.formatDateDB(tdt);
//            int lotNo = data.getIntValueFromDB("SELECT MAX(LOT_NO) FROM PRODUCTION.FELT_SALES_INV_PROCESS_REPORT_DATA WHERE SUBSTRING(PROCESSING_TIME,1,10)='"+EITLERPGLOBAL.getCurrentDateDB()+"' ");

//            parameterMap.put("RUNDATE", EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime());
//            parameterMap.put("FROM_DATE", fdt);
//            parameterMap.put("TO_DATE", tdt);

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            String strSQL = "";
            strSQL += "SELECT * from SDMLATTPAY.EMP_GRATUITY_DETAIL WHERE GRATUIT_DOC_NO='"+lbldoc.getText()+"'";

            System.out.println("SQL QUERY : " + strSQL);
            //rpt.setReportName("/EITLERP/FeltSales/FeltInvReport/FeltPostInvReason.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/Gratuity/Gratuity.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            //rpt.setReportName("/SDMLATTPAY/Gratuity/EmpGratuity.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                st.close();
                Conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }  
}
