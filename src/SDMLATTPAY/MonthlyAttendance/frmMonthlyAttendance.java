/*
 * frmMonthlyAttendance.java
 *
 * Created on August 22, 2013, 11:20 AM
 */
package SDMLATTPAY.MonthlyAttendance;

/**
 *
 * @author
 */
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.util.HashMap;
import java.net.URL;
import java.io.File;
import TReportWriter.NumWord;

import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.Loader;
import EITLERP.AppletFrame;
import EITLERP.EITLTableCellRenderer;
import EITLERP.FeltSales.common.JavaMail;
import EITLERP.FeltSales.common.JavaMailNew;
import EITLERP.LOV;
import EITLERP.frmPendingApprovals;
//import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.Production.FeltUser;
import EITLERP.SelectFirstFree;
import EITLERP.clsFirstFree;
import EITLERP.data;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.table.TableCellRenderer;

public class frmMonthlyAttendance extends javax.swing.JApplet {

    private int EditMode = 0;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromUserId = 0;
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    private boolean DoNotEvaluate = false;

    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;

    private clsMonthlyAttendance ObjMonthlyAttendance;

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel cmbUserNameModel;

    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;
    private EITLTableModel DataModelF;
    private int FinalApprovedBy = 0;
    public frmPendingApprovals frmPA;

    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();

    /**
     * Creates new form frmFeltFinishing
     */
    public void init() {
        System.gc();
        setSize(1260, 590);
        initComponents();
        lblTitle.setForeground(Color.WHITE);
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        DataModel = new EITLTableModel();
        ObjMonthlyAttendance = new clsMonthlyAttendance();
        lblTitle.setForeground(Color.WHITE);

        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
        if (ObjMonthlyAttendance.LoadData()) {
            ObjMonthlyAttendance.MoveLast();
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmMonthlyAttendance.this, "Error occured while Loading Data. Error is " + ObjMonthlyAttendance.LastError, "DATA LOADING ERROR", JOptionPane.ERROR_MESSAGE);
        }

        Table.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        file1 = new javax.swing.JFileChooser();
        jPopupMenu = new javax.swing.JPopupMenu();
        jMenuItemStaff = new javax.swing.JMenuItem();
        jMenuItemWorker = new javax.swing.JMenuItem();
        jMenuItemRetainer = new javax.swing.JMenuItem();
        jMenuItemContractor = new javax.swing.JMenuItem();
        jMenuItemContractorKMS = new javax.swing.JMenuItem();
        jMenuItemContractorHRS = new javax.swing.JMenuItem();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        cmdNextToTab1 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        btnEmpMstETE = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtMonth = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtYear = new javax.swing.JTextField();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        jMenuItemStaff.setText("Staff Baroda");
        jMenuItemStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemStaffActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemStaff);

        jMenuItemWorker.setText("Worker Baroda");
        jMenuItemWorker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemWorkerActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemWorker);

        jMenuItemRetainer.setText("Retainer Baroda");
        jMenuItemRetainer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRetainerActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemRetainer);

        jMenuItemContractor.setText("Contractor Baroda");
        jMenuItemContractor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContractorActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemContractor);

        jMenuItemContractorKMS.setText("Contractor KMS");
        jMenuItemContractorKMS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContractorKMSActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemContractorKMS);

        jMenuItemContractorHRS.setText("Contractor HR Smart");
        jMenuItemContractorHRS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContractorHRSActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemContractorHRS);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 1250, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("MONTHLY ATTENDANCE DATA - ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 1250, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel16.setText("Doc No ");
        Tab1.add(jLabel16);
        jLabel16.setBounds(20, 10, 70, 20);

        txtDocNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtDocNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDocNo.setEnabled(false);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(90, 10, 150, 21);

        jLabel6.setText("Doc Date");
        Tab1.add(jLabel6);
        jLabel6.setBounds(280, 10, 80, 20);

        txtDocDate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtDocDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDocDate.setEnabled(false);
        Tab1.add(txtDocDate);
        txtDocDate.setBounds(370, 10, 102, 21);

        lblRevNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(480, 10, 20, 18);

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));
        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel4);
        jPanel4.setBounds(10, 40, 1220, 5);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(670, 390, 90, 25);

        jScrollPane4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jScrollPane4KeyReleased(evt);
            }
        });

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane4.setViewportView(Table);

        Tab1.add(jScrollPane4);
        jScrollPane4.setBounds(10, 60, 1220, 320);

        btnEmpMstETE.setLabel("Export to Excel");
        btnEmpMstETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpMstETEActionPerformed(evt);
            }
        });
        Tab1.add(btnEmpMstETE);
        btnEmpMstETE.setBounds(40, 390, 150, 30);

        jLabel1.setText("Year :");
        Tab1.add(jLabel1);
        jLabel1.setBounds(770, 10, 50, 20);

        txtMonth.setEditable(false);
        txtMonth.setEnabled(false);
        Tab1.add(txtMonth);
        txtMonth.setBounds(720, 10, 40, 19);

        jLabel2.setText("Month :");
        Tab1.add(jLabel2);
        jLabel2.setBounds(660, 10, 60, 20);

        txtYear.setEditable(false);
        txtYear.setEnabled(false);
        Tab1.add(txtYear);
        txtYear.setBounds(820, 10, 70, 19);

        Tab.addTab("Details", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 23, 80, 15);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 20, 184, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 62, 80, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 60, 184, 21);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 97, 61, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 95, 630, 19);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 130, 73, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 130, 184, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 249, 80, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 245, 184, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 288, 80, 15);

        txtToRemarks.setEnabled(false);
        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 286, 630, 19);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(500, 350, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(728, 94, 49, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(620, 350, 102, 25);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 760, 150);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 191, 163, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 210, 640, 180);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(662, 390, 110, 25);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(662, 240, 110, 25);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(662, 210, 110, 25);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(662, 270, 110, 25);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 1250, 470);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 540, 1250, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
//        new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltFinishing.rpt",new HashMap(),ObjMonthlyAttendance.getReportData(EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
//        EITLERPGLOBAL.PAGE_BREAK=true;
//        HashMap Parameters = new HashMap();
//        Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());
//        
//        new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/FELTFINISHING.rpt",Parameters,ObjMonthlyAttendance.getReportData(txtProductionDocumentNo.getText().trim(),EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
//        EITLERPGLOBAL.PAGE_BREAK=true;
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
//        try {
//            URL reportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltFinishing.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&PROD_DATE="+EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText()));
//            EITLERPGLOBAL.loginContext.showDocument(reportFile,"_blank");
//        }
//        catch(Exception e) {
//            JOptionPane.showMessageDialog(frmFeltFinishing.this,"File error "+e.getMessage(),"FILE ERROR",JOptionPane.ERROR_MESSAGE);
//            e.printStackTrace();
//        }

//        PreviewReport();
//        HashMap Parameters = new HashMap();
//        Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());
//
//        new TReportWriter.TReportEngine().PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/Production/FELTFINISHING.rpt", Parameters, ObjMonthlyAttendance.getReportData(txtProductionDocumentNo.getText().trim(), EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
//        EITLERPGLOBAL.PAGE_BREAK = true;
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4).toString());
            bigEdit.ShowEdit();
        } else {
            JOptionPane.showMessageDialog(frmMonthlyAttendance.this, "Select a row from Document Update History");
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjMonthlyAttendance.HistoryView = false;
        ObjMonthlyAttendance.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed

    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjMonthlyAttendance.ShowHistory(EITLERPGLOBAL.formatDateDB(txtDocDate.getText()), txtDocNo.getText());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed

    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        txtDocDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);

        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (SDMLATTPAY.ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID, 826, txtDocNo.getText())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjMonthlyAttendance.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
        if (ObjMonthlyAttendance.LoadData()) {
            ObjMonthlyAttendance.MoveLast();
            DisplayData();
        } else {
        }
        SetFields(false);
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(frmMonthlyAttendance.this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed

    private void jScrollPane4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jScrollPane4KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane4KeyReleased

    private void btnEmpMstETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpMstETEActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnEmpMstETEActionPerformed

    private void jMenuItemStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemStaffActionPerformed
        // TODO add your handling code here:
        String Pending_Doc = data.getStringValueFromDB("SELECT DOC_NO FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA WHERE APPROVED=0 AND CANCELED=0 AND DOC_NO LIKE ('MAS%')");
        if (!Pending_Doc.equals("")) {
            JOptionPane.showMessageDialog(null, "Document : " + Pending_Doc + " is pending, Please Approve first.");
            return;
        }
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        FormatGrid();

        SetupApproval();
        //Display newly generated document no.
//        String pMonth = data.getStringValueFromDB("SELECT MONTH(DATE_ADD(CONCAT(MAS_YYYY,'-',MAS_MM,'-01'), INTERVAL 1 MONTH)) FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA WHERE DOC_NO LIKE 'MAS%' ORDER BY DOC_DATE DESC");
//        if (pMonth.equals("")) {
//            pMonth = "1";
//        }
//        String pYear = data.getStringValueFromDB("SELECT YEAR(DATE_ADD(CONCAT(MAS_YYYY,'-',MAS_MM,'-01'), INTERVAL 1 MONTH)) FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA WHERE DOC_NO LIKE 'MAS%' ORDER BY DOC_DATE DESC");
//        if (pYear.equals("")) {
//            pYear = "2020";
//        }
//        
//        if (Integer.parseInt(pMonth)<10) 
//            pMonth = "0"+pMonth;
//        
//        txtMonth.setText(pMonth);
//        txtYear.setText(pYear);

        int pMonth = data.getIntValueFromDB("SELECT MONTH(DATE_ADD(MAX(STAFF_APL_DATE), INTERVAL 1 DAY)) FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE");
        int pYear = data.getIntValueFromDB("SELECT YEAR(DATE_ADD(MAX(STAFF_APL_DATE), INTERVAL 1 DAY)) FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE");
        
        if (pMonth<10)
            txtMonth.setText("0"+pMonth);
        else
            txtMonth.setText(pMonth + "");
        txtYear.setText(pYear + "");

        txtDocNo.setText("MAS" + txtMonth.getText() + txtYear.getText());
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());

        lblTitle.setText("MONTHLY ATTENDANCE DATA - " + txtDocNo.getText());
        lblTitle.setBackground(Color.GRAY);
        GenerateMonthlyDataStaff();
    }//GEN-LAST:event_jMenuItemStaffActionPerformed

    private void jMenuItemWorkerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemWorkerActionPerformed
        // TODO add your handling code here:
        String Pending_Doc = data.getStringValueFromDB("SELECT DOC_NO FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA WHERE APPROVED=0 AND CANCELED=0 AND DOC_NO LIKE ('MAW%')");
        if (!Pending_Doc.equals("")) {
            JOptionPane.showMessageDialog(null, "Document : " + Pending_Doc + " is pending, Please Approve first.");
            return;
        }
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        FormatGrid();

        SetupApproval();
        //Display newly generated document no.
//        String pMonth = data.getStringValueFromDB("SELECT MONTH(DATE_ADD(CONCAT(MAS_YYYY,'-',MAS_MM,'-01'), INTERVAL 1 MONTH)) FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA WHERE DOC_NO LIKE 'MAW%' ORDER BY DOC_DATE DESC");
//        if (pMonth.equals("")) {
//            pMonth = "1";
//        }
//        String pYear = data.getStringValueFromDB("SELECT YEAR(DATE_ADD(CONCAT(MAS_YYYY,'-',MAS_MM,'-01'), INTERVAL 1 MONTH)) FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA WHERE DOC_NO LIKE 'MAW%' ORDER BY DOC_DATE DESC");
//        if (pYear.equals("")) {
//            pYear = "2020";
//        }
//
//        if (Integer.parseInt(pMonth) < 10) {
//            pMonth = "0" + pMonth;
//        }
//
//        txtMonth.setText(pMonth);
//        txtYear.setText(pYear);
        
        int pMonth = data.getIntValueFromDB("SELECT MONTH(DATE_ADD(MAX(WORKER_APL_DATE), INTERVAL 1 DAY)) FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE");
        int pYear = data.getIntValueFromDB("SELECT YEAR(DATE_ADD(MAX(WORKER_APL_DATE), INTERVAL 1 DAY)) FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE");
        
        if (pMonth<10)
            txtMonth.setText("0"+pMonth);
        else
            txtMonth.setText(pMonth + "");
        txtYear.setText(pYear + "");

        txtDocNo.setText("MAW" + txtMonth.getText() + txtYear.getText());
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());

        lblTitle.setText("MONTHLY ATTENDANCE DATA - " + txtDocNo.getText());
        lblTitle.setBackground(Color.GRAY);
        GenerateMonthlyDataWorker();
    }//GEN-LAST:event_jMenuItemWorkerActionPerformed

    private void jMenuItemRetainerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRetainerActionPerformed
        // TODO add your handling code here:
        String Pending_Doc = data.getStringValueFromDB("SELECT DOC_NO FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA WHERE APPROVED=0 AND CANCELED=0 AND DOC_NO LIKE ('MAR%')");
        if (!Pending_Doc.equals("")) {
            JOptionPane.showMessageDialog(null, "Document : " + Pending_Doc + " is pending, Please Approve first.");
            return;
        }
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        FormatGrid();

        SetupApproval();
        //Display newly generated document no.
//        String pMonth = data.getStringValueFromDB("SELECT MONTH(DATE_ADD(CONCAT(MAS_YYYY,'-',MAS_MM,'-01'), INTERVAL 1 MONTH)) FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA WHERE DOC_NO LIKE 'MAR%' ORDER BY DOC_DATE DESC");
//        if (pMonth.equals("")) {
//            pMonth = "1";
//        }
//        String pYear = data.getStringValueFromDB("SELECT YEAR(DATE_ADD(CONCAT(MAS_YYYY,'-',MAS_MM,'-01'), INTERVAL 1 MONTH)) FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA WHERE DOC_NO LIKE 'MAR%' ORDER BY DOC_DATE DESC");
//        if (pYear.equals("")) {
//            pYear = "2020";
//        }
//
//        if (Integer.parseInt(pMonth) < 10) {
//            pMonth = "0" + pMonth;
//        }
//
//        txtMonth.setText(pMonth);
//        txtYear.setText(pYear);
        
        int pMonth = data.getIntValueFromDB("SELECT MONTH(DATE_ADD(MAX(RETAINER_APL_DATE), INTERVAL 1 DAY)) FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE");
        int pYear = data.getIntValueFromDB("SELECT YEAR(DATE_ADD(MAX(RETAINER_APL_DATE), INTERVAL 1 DAY)) FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE");
        
        if (pMonth<10)
            txtMonth.setText("0"+pMonth);
        else
            txtMonth.setText(pMonth + "");
        txtYear.setText(pYear + "");

        txtDocNo.setText("MAR" + txtMonth.getText() + txtYear.getText());
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());

        lblTitle.setText("MONTHLY ATTENDANCE DATA - " + txtDocNo.getText());
        lblTitle.setBackground(Color.GRAY);
        GenerateMonthlyDataRetainer();
    }//GEN-LAST:event_jMenuItemRetainerActionPerformed

    private void jMenuItemContractorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemContractorActionPerformed
        // TODO add your handling code here:
        String Pending_Doc = data.getStringValueFromDB("SELECT DOC_NO FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA WHERE APPROVED=0 AND CANCELED=0 AND DOC_NO LIKE ('MAC%')");
        if (!Pending_Doc.equals("")) {
            JOptionPane.showMessageDialog(null, "Document : " + Pending_Doc + " is pending, Please Approve first.");
            return;
        }
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        FormatGrid();

        SetupApproval();
        //Display newly generated document no.
//        String pMonth = data.getStringValueFromDB("SELECT MONTH(DATE_ADD(CONCAT(MAS_YYYY,'-',MAS_MM,'-01'), INTERVAL 1 MONTH)) FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA WHERE DOC_NO LIKE 'MAC%' ORDER BY DOC_DATE DESC");
//        if (pMonth.equals("")) {
//            pMonth = "1";
//        }
//        String pYear = data.getStringValueFromDB("SELECT YEAR(DATE_ADD(CONCAT(MAS_YYYY,'-',MAS_MM,'-01'), INTERVAL 1 MONTH)) FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA WHERE DOC_NO LIKE 'MAC%' ORDER BY DOC_DATE DESC");
//        if (pYear.equals("")) {
//            pYear = "2020";
//        }
//
//        if (Integer.parseInt(pMonth) < 10) {
//            pMonth = "0" + pMonth;
//        }
//
//        txtMonth.setText(pMonth);
//        txtYear.setText(pYear);
        
        int pMonth = data.getIntValueFromDB("SELECT MONTH(DATE_ADD(MAX(CONTRACTOR_APL_DATE), INTERVAL 1 DAY)) FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE");
        int pYear = data.getIntValueFromDB("SELECT YEAR(DATE_ADD(MAX(CONTRACTOR_APL_DATE), INTERVAL 1 DAY)) FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE");
        
        if (pMonth<10)
            txtMonth.setText("0"+pMonth);
        else
            txtMonth.setText(pMonth + "");
        txtYear.setText(pYear + "");

        txtDocNo.setText("MAC" + txtMonth.getText() + txtYear.getText());
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());

        lblTitle.setText("MONTHLY ATTENDANCE DATA - " + txtDocNo.getText());
        lblTitle.setBackground(Color.GRAY);
        GenerateMonthlyDataContractor();
    }//GEN-LAST:event_jMenuItemContractorActionPerformed

    private void jMenuItemContractorKMSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemContractorKMSActionPerformed
        // TODO add your handling code here:
        String Pending_Doc = data.getStringValueFromDB("SELECT DOC_NO FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA WHERE APPROVED=0 AND CANCELED=0 AND DOC_NO LIKE ('MAK%')");
        if (!Pending_Doc.equals("")) {
            JOptionPane.showMessageDialog(null, "Document : " + Pending_Doc + " is pending, Please Approve first.");
            return;
        }
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        FormatGrid();

        SetupApproval();
        //Display newly generated document no.
//        String pMonth = data.getStringValueFromDB("SELECT MONTH(DATE_ADD(CONCAT(MAS_YYYY,'-',MAS_MM,'-01'), INTERVAL 1 MONTH)) FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA WHERE DOC_NO LIKE 'MAC%' ORDER BY DOC_DATE DESC");
//        if (pMonth.equals("")) {
//            pMonth = "1";
//        }
//        String pYear = data.getStringValueFromDB("SELECT YEAR(DATE_ADD(CONCAT(MAS_YYYY,'-',MAS_MM,'-01'), INTERVAL 1 MONTH)) FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA WHERE DOC_NO LIKE 'MAC%' ORDER BY DOC_DATE DESC");
//        if (pYear.equals("")) {
//            pYear = "2020";
//        }
//
//        if (Integer.parseInt(pMonth) < 10) {
//            pMonth = "0" + pMonth;
//        }
//
//        txtMonth.setText(pMonth);
//        txtYear.setText(pYear);
        
        int pMonth = data.getIntValueFromDB("SELECT MONTH(DATE_ADD(MAX(CONTRACTOR_KMS_APL_DATE), INTERVAL 1 DAY)) FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE");
        int pYear = data.getIntValueFromDB("SELECT YEAR(DATE_ADD(MAX(CONTRACTOR_KMS_APL_DATE), INTERVAL 1 DAY)) FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE");
        
        if (pMonth<10)
            txtMonth.setText("0"+pMonth);
        else
            txtMonth.setText(pMonth + "");
        txtYear.setText(pYear + "");

        txtDocNo.setText("MAK" + txtMonth.getText() + txtYear.getText());
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());

        lblTitle.setText("MONTHLY ATTENDANCE DATA - " + txtDocNo.getText());
        lblTitle.setBackground(Color.GRAY);
        GenerateMonthlyDataContractorKMS();
    }//GEN-LAST:event_jMenuItemContractorKMSActionPerformed

    private void jMenuItemContractorHRSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemContractorHRSActionPerformed
        // TODO add your handling code here:
        String Pending_Doc = data.getStringValueFromDB("SELECT DOC_NO FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA WHERE APPROVED=0 AND CANCELED=0 AND DOC_NO LIKE ('MAH%')");
        if (!Pending_Doc.equals("")) {
            JOptionPane.showMessageDialog(null, "Document : " + Pending_Doc + " is pending, Please Approve first.");
            return;
        }
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        FormatGrid();

        SetupApproval();
        //Display newly generated document no.
//        String pMonth = data.getStringValueFromDB("SELECT MONTH(DATE_ADD(CONCAT(MAS_YYYY,'-',MAS_MM,'-01'), INTERVAL 1 MONTH)) FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA WHERE DOC_NO LIKE 'MAC%' ORDER BY DOC_DATE DESC");
//        if (pMonth.equals("")) {
//            pMonth = "1";
//        }
//        String pYear = data.getStringValueFromDB("SELECT YEAR(DATE_ADD(CONCAT(MAS_YYYY,'-',MAS_MM,'-01'), INTERVAL 1 MONTH)) FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA WHERE DOC_NO LIKE 'MAC%' ORDER BY DOC_DATE DESC");
//        if (pYear.equals("")) {
//            pYear = "2020";
//        }
//
//        if (Integer.parseInt(pMonth) < 10) {
//            pMonth = "0" + pMonth;
//        }
//
//        txtMonth.setText(pMonth);
//        txtYear.setText(pYear);
        
        int pMonth = data.getIntValueFromDB("SELECT MONTH(DATE_ADD(MAX(CONTRACTOR_HRS_APL_DATE), INTERVAL 1 DAY)) FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE");
        int pYear = data.getIntValueFromDB("SELECT YEAR(DATE_ADD(MAX(CONTRACTOR_HRS_APL_DATE), INTERVAL 1 DAY)) FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE");
        
        if (pMonth<10)
            txtMonth.setText("0"+pMonth);
        else
            txtMonth.setText(pMonth + "");
        txtYear.setText(pYear + "");

        txtDocNo.setText("MAH" + txtMonth.getText() + txtYear.getText());
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());

        lblTitle.setText("MONTHLY ATTENDANCE DATA - " + txtDocNo.getText());
        lblTitle.setBackground(Color.GRAY);
        GenerateMonthlyDataContractorHRS();
    }//GEN-LAST:event_jMenuItemContractorHRSActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton btnEmpMstETE;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuItem jMenuItemContractor;
    private javax.swing.JMenuItem jMenuItemContractorHRS;
    private javax.swing.JMenuItem jMenuItemContractorKMS;
    private javax.swing.JMenuItem jMenuItemRetainer;
    private javax.swing.JMenuItem jMenuItemStaff;
    private javax.swing.JMenuItem jMenuItemWorker;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtMonth;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables

    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }

    private void SetFields(boolean pStat) {

        txtDocNo.setEnabled(false);
        txtDocDate.setEnabled(false);

        Table.setEnabled(pStat);

        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);

        SetupApproval();
    }

    private void ClearFields() {
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtDocNo.setText("");
        txtMonth.setText("");
        txtYear.setText("");
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }

    //Display data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, 826)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        //=========== Title Bar Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjMonthlyAttendance.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                } else {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (ObjMonthlyAttendance.getAttribute("CANCELED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
            //============================================//

            String docDate = EITLERPGLOBAL.formatDate(ObjMonthlyAttendance.getAttribute("DOC_DATE").getString());
            String docNo = ObjMonthlyAttendance.getAttribute("DOC_NO").getString();

            lblTitle.setText("MONTHLY ATTENDANCE DATA - " + docNo);
            lblRevNo.setText(Integer.toString((int) ObjMonthlyAttendance.getAttribute("REVISION_NO").getVal()));

            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) ObjMonthlyAttendance.getAttribute("HIERARCHY_ID").getVal());
            DoNotEvaluate = true;

            //GenerateHierarchyCombo();
            FormatGrid();

            //Now Generate Table
            for (int i = 1; i <= ObjMonthlyAttendance.hmMonthlyAttendanceDetails.size(); i++) {
                clsMonthlyAttendanceDetails ObjMonthlyAttendanceDetails = (clsMonthlyAttendanceDetails) ObjMonthlyAttendance.hmMonthlyAttendanceDetails.get(Integer.toString(i));

                Object[] rowData = new Object[50];

                txtDocDate.setText(docDate);
                txtDocNo.setText(docNo);
                txtMonth.setText(ObjMonthlyAttendanceDetails.getAttribute("MAS_MM").getString());
                txtYear.setText(ObjMonthlyAttendanceDetails.getAttribute("MAS_YYYY").getString());

                rowData[0] = Integer.toString(i);
                rowData[1] = ObjMonthlyAttendanceDetails.getAttribute("MAS_EMPID").getString();
                rowData[2] = ObjMonthlyAttendanceDetails.getAttribute("MAS_EMPNAME").getString();
                rowData[3] = ObjMonthlyAttendanceDetails.getAttribute("MAS_EMPDEPT").getString();
                rowData[4] = ObjMonthlyAttendanceDetails.getAttribute("MAS_MM").getString();
                rowData[5] = ObjMonthlyAttendanceDetails.getAttribute("MAS_YYYY").getString();
                rowData[6] = ObjMonthlyAttendanceDetails.getAttribute("TOTAL_MONTH_DAYS").getString();
                rowData[7] = ObjMonthlyAttendanceDetails.getAttribute("PAID_DAYS").getString();
                rowData[8] = ObjMonthlyAttendanceDetails.getAttribute("PRESENT_DAYS").getString();
                rowData[9] = ObjMonthlyAttendanceDetails.getAttribute("LC_DAYS").getString();
                rowData[10] = ObjMonthlyAttendanceDetails.getAttribute("LWP_DAYS").getString();
                rowData[11] = ObjMonthlyAttendanceDetails.getAttribute("LC_LWP_DAYS").getString();
                rowData[12] = ObjMonthlyAttendanceDetails.getAttribute("CO").getString();
                rowData[13] = ObjMonthlyAttendanceDetails.getAttribute("OD").getString();
                rowData[14] = ObjMonthlyAttendanceDetails.getAttribute("PL").getString();
                rowData[15] = ObjMonthlyAttendanceDetails.getAttribute("CL").getString();
                rowData[16] = ObjMonthlyAttendanceDetails.getAttribute("SL").getString();
                rowData[17] = ObjMonthlyAttendanceDetails.getAttribute("LOFF").getString();
                rowData[18] = ObjMonthlyAttendanceDetails.getAttribute("EOFF").getString();
                rowData[19] = ObjMonthlyAttendanceDetails.getAttribute("MAS_PH").getString();
                rowData[20] = ObjMonthlyAttendanceDetails.getAttribute("MAS_STAFF_WOFF").getString();
                rowData[21] = ObjMonthlyAttendanceDetails.getAttribute("NPH").getString();
                rowData[22] = ObjMonthlyAttendanceDetails.getAttribute("MAS_WORKER_WOFF").getString();
                rowData[23] = ObjMonthlyAttendanceDetails.getAttribute("MAS_COMPANY_WOFF").getString();
                rowData[24] = ObjMonthlyAttendanceDetails.getAttribute("NPL").getString();
                rowData[25] = ObjMonthlyAttendanceDetails.getAttribute("ESIC").getString();
                rowData[26] = ObjMonthlyAttendanceDetails.getAttribute("P_GP").getString();
                rowData[27] = ObjMonthlyAttendanceDetails.getAttribute("O_GP").getString();
                rowData[28] = ObjMonthlyAttendanceDetails.getAttribute("ABST").getString();
                rowData[29] = ObjMonthlyAttendanceDetails.getAttribute("MAS_MAIN_CATEGORY").getString();
                rowData[30] = ObjMonthlyAttendanceDetails.getAttribute("MAS_SUB_CATEGORY").getString();

                DataModelF.addRow(rowData);
            }
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 60; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 10, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList = new HashMap();

            hmList = SDMLATTPAY.ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, 826, docNo);
            for (int i = 1; i <= hmList.size(); i++) {
                //clsDocFlow is collection class used for holding approval flow data
                clsDocFlow ObjFlow = (clsDocFlow) hmList.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3] = ObjFlow.getAttribute("STATUS").getString();
                rowData[4] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString());
                rowData[5] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString());
                rowData[6] = ObjFlow.getAttribute("REMARKS").getString();

                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//

            // Generating Grid for Showing Production Details Update History
            FormatGridUpdateHistory();
            HashMap hmApprovalHistory = clsMonthlyAttendance.getHistoryList(txtDocNo.getText());
            for (int i = 1; i <= hmApprovalHistory.size(); i++) {
                clsMonthlyAttendance ObjMonthlyAttendance = (clsMonthlyAttendance) hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjMonthlyAttendance.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(2, (int) ObjMonthlyAttendance.getAttribute("UPDATED_BY").getVal());
                rowData[2] = ObjMonthlyAttendance.getAttribute("ENTRY_DATE").getString();

                String ApprovalStatus = "";

                if ((ObjMonthlyAttendance.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                if ((ObjMonthlyAttendance.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjMonthlyAttendance.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                    FinalApprovedBy = (int) ObjMonthlyAttendance.getAttribute("UPDATED_BY").getVal();
                }

                if ((ObjMonthlyAttendance.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjMonthlyAttendance.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjMonthlyAttendance.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjMonthlyAttendance.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjMonthlyAttendance.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjMonthlyAttendance.getAttribute("FROM_IP").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DoNotEvaluate = false;
    }

    private void FormatGrid() {
        try {
            DataModelF = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModelF);
            Table.setAutoResizeMode(0);

            DataModelF.addColumn("Sr.");
            DataModelF.addColumn("Emp Pay No");
            DataModelF.addColumn("Emp Name");
            DataModelF.addColumn("Department");
            DataModelF.addColumn("Month");
            DataModelF.addColumn("Year");
            DataModelF.addColumn("Total Days");
            DataModelF.addColumn("Paid Days");
            DataModelF.addColumn("Present Days");
            DataModelF.addColumn("LC Days");
            DataModelF.addColumn("LWP Days");
            DataModelF.addColumn("LC+LWP Days");
            DataModelF.addColumn("COFF");
            DataModelF.addColumn("OD");
            DataModelF.addColumn("PL");
            DataModelF.addColumn("CL");
            DataModelF.addColumn("SL");
            DataModelF.addColumn("LOFF");
            DataModelF.addColumn("EOFF");
            DataModelF.addColumn("PH");
            DataModelF.addColumn("WOFF");
            DataModelF.addColumn("NPH");
            DataModelF.addColumn("WOF");
            DataModelF.addColumn("NWOF");
            DataModelF.addColumn("NPL");
            DataModelF.addColumn("ESIC");
            DataModelF.addColumn("Personal GP");
            DataModelF.addColumn("Official GP");
            DataModelF.addColumn("Absent");
            DataModelF.addColumn("Category");
            DataModelF.addColumn("Sub Category");

            DataModelF.SetVariable(0, "SR_NO");
            DataModelF.SetVariable(1, "MAS_EMPID");
            DataModelF.SetVariable(2, "MAS_EMPNAME");
            DataModelF.SetVariable(3, "MAS_EMPDEPT");
            DataModelF.SetVariable(4, "MAS_MM");
            DataModelF.SetVariable(5, "MAS_YYYY");
            DataModelF.SetVariable(6, "TOTAL_MONTH_DAYS");
            DataModelF.SetVariable(7, "PAID_DAYS");
            DataModelF.SetVariable(8, "PRESENT_DAYS");
            DataModelF.SetVariable(9, "LC_DAYS");
            DataModelF.SetVariable(10, "LWP_DAYS");
            DataModelF.SetVariable(11, "LC_LWP_DAYS");
            DataModelF.SetVariable(12, "CO");
            DataModelF.SetVariable(13, "OD");
            DataModelF.SetVariable(14, "PL");
            DataModelF.SetVariable(15, "CL");
            DataModelF.SetVariable(16, "SL");
            DataModelF.SetVariable(17, "LOFF");
            DataModelF.SetVariable(18, "EOFF");
            DataModelF.SetVariable(19, "MAS_PH");
            DataModelF.SetVariable(20, "MAS_STAFF_WOFF");
            DataModelF.SetVariable(21, "NPH");
            DataModelF.SetVariable(22, "MAS_WORKER_WOFF");
            DataModelF.SetVariable(23, "MAS_COMPANY_WOFF");
            DataModelF.SetVariable(24, "NPL");
            DataModelF.SetVariable(25, "ESIC");
            DataModelF.SetVariable(26, "P_GP");
            DataModelF.SetVariable(27, "O_GP");
            DataModelF.SetVariable(28, "ABST");
            DataModelF.SetVariable(29, "MAS_MAIN_CATEGORY");
            DataModelF.SetVariable(30, "MAS_SUB_CATEGORY");

            DataModelF.SetReadOnly(0);
            DataModelF.SetReadOnly(1);
            DataModelF.SetReadOnly(2);
            DataModelF.SetReadOnly(3);
            DataModelF.SetReadOnly(4);
            DataModelF.SetReadOnly(5);
            DataModelF.SetReadOnly(9);
            DataModelF.SetReadOnly(10);
            DataModelF.SetReadOnly(29);
            DataModelF.SetReadOnly(30);

            Table.getColumnModel().getColumn(0).setMinWidth(50);
            Table.getColumnModel().getColumn(0).setMaxWidth(50);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=826 ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=826 ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = SDMLATTPAY.ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, 826, ObjMonthlyAttendance.getAttribute("DOC_NO").getString());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, 826, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, 826, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }

        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = SDMLATTPAY.ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, 826, txtDocNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }

    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
         if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
         cmbHierarchy.setEnabled(true);
         }else {
         cmbHierarchy.setEnabled(false);
         }*/

        // select hold for default approval
        OpgHold.setSelected(true);
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            int FromUserID = SDMLATTPAY.ApprovalFlow.getFromID(EITLERPGLOBAL.gCompanyID, 826, ObjMonthlyAttendance.getAttribute("DOC_NO").getString());
            lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = SDMLATTPAY.ApprovalFlow.getFromRemarks(EITLERPGLOBAL.gCompanyID, 826, FromUserID, ObjMonthlyAttendance.getAttribute("DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (SDMLATTPAY.ApprovalFlow.IsCreator(826, txtDocNo.getText())) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10052, 100521)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10052, 100522)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10052, 100523)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10052, 100525)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {
        
        jPopupMenu.show(cmdNew, 0, 30);
//        String Pending_Doc = data.getStringValueFromDB("SELECT DOC_NO FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA WHERE APPROVED=0 AND CANCELED=0");
//        if (!Pending_Doc.equals("")) {
//            JOptionPane.showMessageDialog(null, "Document : " + Pending_Doc + " is pending, Please Approve first.");
//            return;
//        }
//        if (!EITLERPGLOBAL.YearIsOpen) {
//            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
//            return;
//        }
//
//        SelectFirstFree aList = new SelectFirstFree();
//        aList.ModuleID = 826;
//        aList.FirstFreeNo = 329;
//
//        EditMode = EITLERPGLOBAL.ADD;
//        SetFields(true);
//        DisableToolbar();
//        ClearFields();
//        FormatGrid();
//
//        SelPrefix = aList.Prefix; //Selected Prefix;
//        SelSuffix = aList.Suffix;
//        FFNo = aList.FirstFreeNo;
//
//        SetupApproval();
//        //Display newly generated document no.
//        txtDocNo.setText(clsMonthlyAttendance.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 826, FFNo, false));
//        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
//
//        lblTitle.setText("MONTHLY ATTENDANCE DATA - " + txtDocNo.getText());
//        lblTitle.setBackground(Color.GRAY);
//        GenerateMonthlyData();
    }

    private void Edit() {
        String productionDocumentNo = (String) ObjMonthlyAttendance.getAttribute("DOC_NO").getObj();
        if (ObjMonthlyAttendance.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();

            if (SDMLATTPAY.ApprovalFlow.IsCreator(826, productionDocumentNo)) {
                SetFields(true);
            } else {
                EnableApproval();
            }
        } else {
            JOptionPane.showMessageDialog(frmMonthlyAttendance.this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "EDITING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {
        if (ObjMonthlyAttendance.CanDelete(txtDocNo.getText(), txtDocDate.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmMonthlyAttendance.this, ObjMonthlyAttendance.LastError, "DELETION ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Save() {
        String docNo, docDate;
        int i = 0, j = 0;
        docDate = txtDocDate.getText().trim();
        docNo = txtDocNo.getText().trim();

        try {

            ObjMonthlyAttendance.hmMonthlyAttendanceDetails.clear();
            //Check the entered details in Table.
            for (i = 0; i <= Table.getRowCount() - 1; i++) {

                clsMonthlyAttendanceDetails ObjMonthlyAttendanceDetails = new clsMonthlyAttendanceDetails();

                ObjMonthlyAttendanceDetails.setAttribute("MAS_EMPID", DataModelF.getValueByVariable("MAS_EMPID", i));
                ObjMonthlyAttendanceDetails.setAttribute("MAS_EMPNAME", DataModelF.getValueByVariable("MAS_EMPNAME", i));
                ObjMonthlyAttendanceDetails.setAttribute("MAS_EMPDEPT", DataModelF.getValueByVariable("MAS_EMPDEPT", i));
                ObjMonthlyAttendanceDetails.setAttribute("MAS_MM", DataModelF.getValueByVariable("MAS_MM", i));
                ObjMonthlyAttendanceDetails.setAttribute("MAS_YYYY", DataModelF.getValueByVariable("MAS_YYYY", i));
                ObjMonthlyAttendanceDetails.setAttribute("TOTAL_MONTH_DAYS", DataModelF.getValueByVariable("TOTAL_MONTH_DAYS", i));
                ObjMonthlyAttendanceDetails.setAttribute("PAID_DAYS", DataModelF.getValueByVariable("PAID_DAYS", i));
                ObjMonthlyAttendanceDetails.setAttribute("PRESENT_DAYS", DataModelF.getValueByVariable("PRESENT_DAYS", i));
                ObjMonthlyAttendanceDetails.setAttribute("LC_DAYS", DataModelF.getValueByVariable("LC_DAYS", i));
                ObjMonthlyAttendanceDetails.setAttribute("LWP_DAYS", DataModelF.getValueByVariable("LWP_DAYS", i));
                ObjMonthlyAttendanceDetails.setAttribute("LC_LWP_DAYS", DataModelF.getValueByVariable("LC_LWP_DAYS", i));
                ObjMonthlyAttendanceDetails.setAttribute("CO", DataModelF.getValueByVariable("CO", i));
                ObjMonthlyAttendanceDetails.setAttribute("OD", DataModelF.getValueByVariable("OD", i));
                ObjMonthlyAttendanceDetails.setAttribute("PL", DataModelF.getValueByVariable("PL", i));
                ObjMonthlyAttendanceDetails.setAttribute("CL", DataModelF.getValueByVariable("CL", i));
                ObjMonthlyAttendanceDetails.setAttribute("SL", DataModelF.getValueByVariable("SL", i));
                ObjMonthlyAttendanceDetails.setAttribute("LOFF", DataModelF.getValueByVariable("LOFF", i));
                ObjMonthlyAttendanceDetails.setAttribute("EOFF", DataModelF.getValueByVariable("EOFF", i));
                ObjMonthlyAttendanceDetails.setAttribute("MAS_PH", DataModelF.getValueByVariable("MAS_PH", i));
                ObjMonthlyAttendanceDetails.setAttribute("MAS_STAFF_WOFF", DataModelF.getValueByVariable("MAS_STAFF_WOFF", i));
                ObjMonthlyAttendanceDetails.setAttribute("NPH", DataModelF.getValueByVariable("NPH", i));
                ObjMonthlyAttendanceDetails.setAttribute("MAS_WORKER_WOFF", DataModelF.getValueByVariable("MAS_WORKER_WOFF", i));
                ObjMonthlyAttendanceDetails.setAttribute("MAS_COMPANY_WOFF", DataModelF.getValueByVariable("MAS_COMPANY_WOFF", i));
                ObjMonthlyAttendanceDetails.setAttribute("NPL", DataModelF.getValueByVariable("NPL", i));
                ObjMonthlyAttendanceDetails.setAttribute("ESIC", DataModelF.getValueByVariable("ESIC", i));
                ObjMonthlyAttendanceDetails.setAttribute("P_GP", DataModelF.getValueByVariable("P_GP", i));
                ObjMonthlyAttendanceDetails.setAttribute("O_GP", DataModelF.getValueByVariable("O_GP", i));
                ObjMonthlyAttendanceDetails.setAttribute("ABST", DataModelF.getValueByVariable("ABST", i));
                ObjMonthlyAttendanceDetails.setAttribute("MAS_MAIN_CATEGORY", DataModelF.getValueByVariable("MAS_MAIN_CATEGORY", i));
                ObjMonthlyAttendanceDetails.setAttribute("MAS_SUB_CATEGORY", DataModelF.getValueByVariable("MAS_SUB_CATEGORY", i));

                ObjMonthlyAttendance.hmMonthlyAttendanceDetails.put(Integer.toString(ObjMonthlyAttendance.hmMonthlyAttendanceDetails.size() + 1), ObjMonthlyAttendanceDetails);
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(frmMonthlyAttendance.this, "Enter Correct Details at Row " + (i + 1) + " and Column " + (j + 1) + ". Error is " + nfe.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            j = 0;
            nfe.printStackTrace();
            return;
        }

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(frmMonthlyAttendance.this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(frmMonthlyAttendance.this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(frmMonthlyAttendance.this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(frmMonthlyAttendance.this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //set data for insert/update
        ObjMonthlyAttendance.setAttribute("DOC_DATE", docDate);
        ObjMonthlyAttendance.setAttribute("DOC_NO", docNo);
        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjMonthlyAttendance.Insert()) {
                if (OpgFinal.isSelected()) {
                    if (txtDocNo.getText().startsWith("MAS"))
                        data.Execute("UPDATE SDMLATTPAY.ATT_PROCESS_LOCK_DATE SET STAFF_APL_DATE=LAST_DAY('" + txtYear.getText() + "-" + txtMonth.getText() + "-01') ");
                    if (txtDocNo.getText().startsWith("MAW"))
                        data.Execute("UPDATE SDMLATTPAY.ATT_PROCESS_LOCK_DATE SET WORKER_APL_DATE=LAST_DAY('" + txtYear.getText() + "-" + txtMonth.getText() + "-01') ");
                    if (txtDocNo.getText().startsWith("MAR"))
                        data.Execute("UPDATE SDMLATTPAY.ATT_PROCESS_LOCK_DATE SET RETAINER_APL_DATE=LAST_DAY('" + txtYear.getText() + "-" + txtMonth.getText() + "-01') ");
                    if (txtDocNo.getText().startsWith("MAC"))
                        data.Execute("UPDATE SDMLATTPAY.ATT_PROCESS_LOCK_DATE SET CONTRACTOR_APL_DATE=LAST_DAY('" + txtYear.getText() + "-" + txtMonth.getText() + "-01') ");
                    if (txtDocNo.getText().startsWith("MAK"))
                        data.Execute("UPDATE SDMLATTPAY.ATT_PROCESS_LOCK_DATE SET CONTRACTOR_KMS_APL_DATE=LAST_DAY('" + txtYear.getText() + "-" + txtMonth.getText() + "-01') ");
                    if (txtDocNo.getText().startsWith("MAH"))
                        data.Execute("UPDATE SDMLATTPAY.ATT_PROCESS_LOCK_DATE SET CONTRACTOR_HRS_APL_DATE=LAST_DAY('" + txtYear.getText() + "-" + txtMonth.getText() + "-01') ");
                    
//                    data.Execute("UPDATE SDMLATTPAY.ATT_PROCESS_LOCK_DATE SET APL_DATE=LAST_DAY('" + txtYear.getText() + "-" + txtMonth.getText() + "-01') ");
//                    InsertIntoSPP(txtMonth.getText().trim(), txtYear.getText().trim());
                    String aplDate = data.getStringValueFromDB("SELECT MIN(DT) FROM (SELECT STAFF_APL_DATE AS DT FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE UNION ALL SELECT WORKER_APL_DATE AS DT FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE UNION ALL SELECT RETAINER_APL_DATE AS DT FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE UNION ALL SELECT CONTRACTOR_APL_DATE AS DT FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE UNION ALL SELECT CONTRACTOR_KMS_APL_DATE AS DT FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE UNION ALL SELECT CONTRACTOR_HRS_APL_DATE AS DT FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE) AS A");
                    data.Execute("UPDATE SDMLATTPAY.ATT_PROCESS_LOCK_DATE SET APL_DATE='" + aplDate + "' ");
                    InsertIntoSPP(txtDocNo.getText().trim(), txtMonth.getText().trim(), txtYear.getText().trim());
                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(frmMonthlyAttendance.this, "Error occured while saving. Error is " + ObjMonthlyAttendance.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjMonthlyAttendance.Update()) {
                if (OpgFinal.isSelected()) {
                    if (txtDocNo.getText().startsWith("MAS"))
                        data.Execute("UPDATE SDMLATTPAY.ATT_PROCESS_LOCK_DATE SET STAFF_APL_DATE=LAST_DAY('" + txtYear.getText() + "-" + txtMonth.getText() + "-01') ");
                    if (txtDocNo.getText().startsWith("MAW"))
                        data.Execute("UPDATE SDMLATTPAY.ATT_PROCESS_LOCK_DATE SET WORKER_APL_DATE=LAST_DAY('" + txtYear.getText() + "-" + txtMonth.getText() + "-01') ");
                    if (txtDocNo.getText().startsWith("MAR"))
                        data.Execute("UPDATE SDMLATTPAY.ATT_PROCESS_LOCK_DATE SET RETAINER_APL_DATE=LAST_DAY('" + txtYear.getText() + "-" + txtMonth.getText() + "-01') ");
                    if (txtDocNo.getText().startsWith("MAC"))
                        data.Execute("UPDATE SDMLATTPAY.ATT_PROCESS_LOCK_DATE SET CONTRACTOR_APL_DATE=LAST_DAY('" + txtYear.getText() + "-" + txtMonth.getText() + "-01') ");
                    if (txtDocNo.getText().startsWith("MAK"))
                        data.Execute("UPDATE SDMLATTPAY.ATT_PROCESS_LOCK_DATE SET CONTRACTOR_KMS_APL_DATE=LAST_DAY('" + txtYear.getText() + "-" + txtMonth.getText() + "-01') ");
                    if (txtDocNo.getText().startsWith("MAH"))
                        data.Execute("UPDATE SDMLATTPAY.ATT_PROCESS_LOCK_DATE SET CONTRACTOR_HRS_APL_DATE=LAST_DAY('" + txtYear.getText() + "-" + txtMonth.getText() + "-01') ");
                    
//                    data.Execute("UPDATE SDMLATTPAY.ATT_PROCESS_LOCK_DATE SET APL_DATE=LAST_DAY('" + txtYear.getText() + "-" + txtMonth.getText() + "-01') ");
//                    InsertIntoSPP(txtMonth.getText().trim(), txtYear.getText().trim());
                    String aplDate = data.getStringValueFromDB("SELECT MIN(DT) FROM (SELECT STAFF_APL_DATE AS DT FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE UNION ALL SELECT WORKER_APL_DATE AS DT FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE UNION ALL SELECT RETAINER_APL_DATE AS DT FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE UNION ALL SELECT CONTRACTOR_APL_DATE AS DT FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE UNION ALL SELECT CONTRACTOR_KMS_APL_DATE AS DT FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE UNION ALL SELECT CONTRACTOR_HRS_APL_DATE AS DT FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE) AS A");
                    data.Execute("UPDATE SDMLATTPAY.ATT_PROCESS_LOCK_DATE SET APL_DATE='" + aplDate + "' ");
                    InsertIntoSPP(txtDocNo.getText().trim(), txtMonth.getText().trim(), txtYear.getText().trim());
                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(frmMonthlyAttendance.this, "Error occured while saving editing. Error is " + ObjMonthlyAttendance.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Sets data to the Details Class Object
    private void SetData() {
        //-------- Update Approval Specific Fields -----------//
        ObjMonthlyAttendance.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjMonthlyAttendance.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjMonthlyAttendance.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjMonthlyAttendance.setAttribute("FROM_REMARKS", txtToRemarks.getText().trim());
        ObjMonthlyAttendance.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);

        //ObjMonthlyAttendance.setAttribute("UPDATED_BY",EITLERPGLOBAL.gNewUserID);
        if (OpgApprove.isSelected()) {
            ObjMonthlyAttendance.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjMonthlyAttendance.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjMonthlyAttendance.setAttribute("APPROVAL_STATUS", "R");
            ObjMonthlyAttendance.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            ObjMonthlyAttendance.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

//        if(EditMode==EITLERPGLOBAL.ADD) {
//            ObjMonthlyAttendance.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
//            ObjMonthlyAttendance.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
//        }else {
//            ObjMonthlyAttendance.setAttribute("CREATED_BY", (int)ObjMonthlyAttendance.getAttribute("CREATED_BY").getVal());
//            ObjMonthlyAttendance.setAttribute("CREATED_DATE", ObjMonthlyAttendance.getAttribute("CREATED_DATE").getString());
//            ObjMonthlyAttendance.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
//        }
        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjMonthlyAttendance.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            ObjMonthlyAttendance.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        } else {
            //ObjMonthlyAttendance.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            //ObjMonthlyAttendance.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
            ObjMonthlyAttendance.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            ObjMonthlyAttendance.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        }
    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "SDMLATTPAY.MonthlyAttendance.frmFindMonthlyAttendance", true);
        frmFindMonthlyAttendance ObjFindFeltFinishing = (frmFindMonthlyAttendance) ObjLoader.getObj();

        if (ObjFindFeltFinishing.Cancelled == false) {
            if (!ObjMonthlyAttendance.Filter(ObjFindFeltFinishing.stringFindQuery)) {
                JOptionPane.showMessageDialog(frmMonthlyAttendance.this, " No records found.", "Find Monthly Attendance Details", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    // find details by production date
    public void Find(String docNo) {
        ObjMonthlyAttendance.Filter(" AND DOC_NO='" + docNo + "' ");
        SetMenuForRights();
        DisplayData();
    }

    // find all pending document
    public void FindWaiting() {
        ObjMonthlyAttendance.Filter(" AND DOC_NO IN (SELECT DISTINCT MA.DOC_NO FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA MA, SDMLATTPAY.D_COM_DOC_DATA D WHERE MA.DOC_NO=D.DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=826 AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void MoveFirst() {
        ObjMonthlyAttendance.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        ObjMonthlyAttendance.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        ObjMonthlyAttendance.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        ObjMonthlyAttendance.MoveLast();
        DisplayData();
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(" " + pMessage);
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Tab1.getComponentCount() - 1; i++) {
            if (Tab1.getComponent(i).getName() != null) {

                FieldName = Tab1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    Tab1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//

        //=============== Setting Table Fields ==================//
//        DataModel.ClearAllReadOnly();
//        Table.setEnabled(false);
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From Ip");
    }

    private void GenerateMonthlyData() {
        try {
            FormatGrid(); //clear existing content of table
            ResultSet rsTmp;

            int pMonth = data.getIntValueFromDB("SELECT MONTH(DATE_ADD(MAX(APL_DATE), INTERVAL 1 DAY)) FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE");
            int pYear = data.getIntValueFromDB("SELECT YEAR(DATE_ADD(MAX(APL_DATE), INTERVAL 1 DAY)) FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE");
            if (pMonth < 10 && pYear <= 2019) {
                pMonth = 10;
            }

            txtMonth.setText(pMonth + "");
            txtYear.setText(pYear + "");

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT *,ROUND(LC_DAYS+LWP_DAYS,2) AS LC_LWP_DAYS FROM SDMLATTPAY.ATT_MTH_SUMMARY WHERE MS_EMPID LIKE ('BRD%') AND MS_MM=" + pMonth + " AND MS_YYYY=" + pYear + " ) AS MAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON MAS.MS_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
                    + "ON SFT.SHIFT_ID=EMP.EMP_SHIFT_ID "
                    + "ORDER BY MS_EMPID ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("MS_EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("MS_MM");
                    rowData[5] = rsTmp.getString("MS_YYYY");
                    rowData[6] = rsTmp.getString("TOTAL_MONTH_DAYS");
                    rowData[7] = rsTmp.getString("PAID_DAYS");
                    rowData[8] = rsTmp.getString("PRESENT_DAYS");
                    rowData[9] = rsTmp.getString("LC_DAYS");
                    rowData[10] = rsTmp.getString("LWP_DAYS");
                    rowData[11] = rsTmp.getString("LC_LWP_DAYS");
                    rowData[12] = rsTmp.getString("CO");
                    rowData[13] = rsTmp.getString("OD");
                    rowData[14] = rsTmp.getString("PL");
                    rowData[15] = rsTmp.getString("CL");
                    rowData[16] = rsTmp.getString("SL");
                    rowData[17] = rsTmp.getString("LOFF");
                    rowData[18] = rsTmp.getString("EOFF");
                    rowData[19] = rsTmp.getString("MS_PH");
                    rowData[20] = rsTmp.getString("MS_STAFF_WOFF");
                    rowData[21] = rsTmp.getString("NPH");
                    rowData[22] = rsTmp.getString("MS_WORKER_WOFF");
                    rowData[23] = rsTmp.getString("MS_COMPANY_WOFF");
                    rowData[24] = rsTmp.getString("NPL");
                    rowData[25] = rsTmp.getString("ESIC");
                    rowData[26] = rsTmp.getString("P_GP");
                    rowData[27] = rsTmp.getString("O_GP");
                    rowData[28] = rsTmp.getString("ABST");
                    rowData[29] = rsTmp.getString("SECNAME");
                    rowData[30] = rsTmp.getString("CTGNAME");

                    DataModelF.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateMonthlyDataStaff() {
        try {
            FormatGrid(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT *,ROUND(LC_DAYS+LWP_DAYS,2) AS LC_LWP_DAYS FROM SDMLATTPAY.ATT_MTH_SUMMARY WHERE (MS_EMPID LIKE ('BRD10%') OR MS_EMPID LIKE ('BRD20%')) AND MS_MM=" + txtMonth.getText() + " AND MS_YYYY=" + txtYear.getText() + " ) AS MAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON MAS.MS_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
                    + "ON SFT.SHIFT_ID=EMP.EMP_SHIFT_ID "
                    + "ORDER BY MS_EMPID ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("MS_EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("MS_MM");
                    rowData[5] = rsTmp.getString("MS_YYYY");
                    rowData[6] = rsTmp.getString("TOTAL_MONTH_DAYS");
                    rowData[7] = rsTmp.getString("PAID_DAYS");
                    rowData[8] = rsTmp.getString("PRESENT_DAYS");
                    rowData[9] = rsTmp.getString("LC_DAYS");
                    rowData[10] = rsTmp.getString("LWP_DAYS");
                    rowData[11] = rsTmp.getString("LC_LWP_DAYS");
                    rowData[12] = rsTmp.getString("CO");
                    rowData[13] = rsTmp.getString("OD");
                    rowData[14] = rsTmp.getString("PL");
                    rowData[15] = rsTmp.getString("CL");
                    rowData[16] = rsTmp.getString("SL");
                    rowData[17] = rsTmp.getString("LOFF");
                    rowData[18] = rsTmp.getString("EOFF");
                    rowData[19] = rsTmp.getString("MS_PH");
                    rowData[20] = rsTmp.getString("MS_STAFF_WOFF");
                    rowData[21] = rsTmp.getString("NPH");
                    rowData[22] = rsTmp.getString("MS_WORKER_WOFF");
                    rowData[23] = rsTmp.getString("MS_COMPANY_WOFF");
                    rowData[24] = rsTmp.getString("NPL");
                    rowData[25] = rsTmp.getString("ESIC");
                    rowData[26] = rsTmp.getString("P_GP");
                    rowData[27] = rsTmp.getString("O_GP");
                    rowData[28] = rsTmp.getString("ABST");
                    rowData[29] = rsTmp.getString("SECNAME");
                    rowData[30] = rsTmp.getString("CTGNAME");

                    DataModelF.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateMonthlyDataWorker() {
        try {
            FormatGrid(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT *,ROUND(LC_DAYS+LWP_DAYS,2) AS LC_LWP_DAYS FROM SDMLATTPAY.ATT_MTH_SUMMARY WHERE (MS_EMPID LIKE ('BRD30%') OR MS_EMPID LIKE ('BRD40%') OR MS_EMPID LIKE ('BRD008%')) AND MS_MM=" + txtMonth.getText() + " AND MS_YYYY=" + txtYear.getText() + " ) AS MAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON MAS.MS_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
                    + "ON SFT.SHIFT_ID=EMP.EMP_SHIFT_ID "
                    + "ORDER BY MS_EMPID ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("MS_EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("MS_MM");
                    rowData[5] = rsTmp.getString("MS_YYYY");
                    rowData[6] = rsTmp.getString("TOTAL_MONTH_DAYS");
                    rowData[7] = rsTmp.getString("PAID_DAYS");
                    rowData[8] = rsTmp.getString("PRESENT_DAYS");
                    rowData[9] = rsTmp.getString("LC_DAYS");
                    rowData[10] = rsTmp.getString("LWP_DAYS");
                    rowData[11] = rsTmp.getString("LC_LWP_DAYS");
                    rowData[12] = rsTmp.getString("CO");
                    rowData[13] = rsTmp.getString("OD");
                    rowData[14] = rsTmp.getString("PL");
                    rowData[15] = rsTmp.getString("CL");
                    rowData[16] = rsTmp.getString("SL");
                    rowData[17] = rsTmp.getString("LOFF");
                    rowData[18] = rsTmp.getString("EOFF");
                    rowData[19] = rsTmp.getString("MS_PH");
                    rowData[20] = rsTmp.getString("MS_STAFF_WOFF");
                    rowData[21] = rsTmp.getString("NPH");
                    rowData[22] = rsTmp.getString("MS_WORKER_WOFF");
                    rowData[23] = rsTmp.getString("MS_COMPANY_WOFF");
                    rowData[24] = rsTmp.getString("NPL");
                    rowData[25] = rsTmp.getString("ESIC");
                    rowData[26] = rsTmp.getString("P_GP");
                    rowData[27] = rsTmp.getString("O_GP");
                    rowData[28] = rsTmp.getString("ABST");
                    rowData[29] = rsTmp.getString("SECNAME");
                    rowData[30] = rsTmp.getString("CTGNAME");

                    DataModelF.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateMonthlyDataRetainer() {
        try {
            FormatGrid(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT *,ROUND(LC_DAYS+LWP_DAYS,2) AS LC_LWP_DAYS FROM SDMLATTPAY.ATT_MTH_SUMMARY WHERE (MS_EMPID LIKE ('BRD50%') OR MS_EMPID LIKE ('BRD60%')) AND MS_MM=" + txtMonth.getText() + " AND MS_YYYY=" + txtYear.getText() + " ) AS MAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON MAS.MS_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
                    + "ON SFT.SHIFT_ID=EMP.EMP_SHIFT_ID "
                    + "ORDER BY MS_EMPID ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("MS_EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("MS_MM");
                    rowData[5] = rsTmp.getString("MS_YYYY");
                    rowData[6] = rsTmp.getString("TOTAL_MONTH_DAYS");
                    rowData[7] = rsTmp.getString("PAID_DAYS");
                    rowData[8] = rsTmp.getString("PRESENT_DAYS");
                    rowData[9] = rsTmp.getString("LC_DAYS");
                    rowData[10] = rsTmp.getString("LWP_DAYS");
                    rowData[11] = rsTmp.getString("LC_LWP_DAYS");
                    rowData[12] = rsTmp.getString("CO");
                    rowData[13] = rsTmp.getString("OD");
                    rowData[14] = rsTmp.getString("PL");
                    rowData[15] = rsTmp.getString("CL");
                    rowData[16] = rsTmp.getString("SL");
                    rowData[17] = rsTmp.getString("LOFF");
                    rowData[18] = rsTmp.getString("EOFF");
                    rowData[19] = rsTmp.getString("MS_PH");
                    rowData[20] = rsTmp.getString("MS_STAFF_WOFF");
                    rowData[21] = rsTmp.getString("NPH");
                    rowData[22] = rsTmp.getString("MS_WORKER_WOFF");
                    rowData[23] = rsTmp.getString("MS_COMPANY_WOFF");
                    rowData[24] = rsTmp.getString("NPL");
                    rowData[25] = rsTmp.getString("ESIC");
                    rowData[26] = rsTmp.getString("P_GP");
                    rowData[27] = rsTmp.getString("O_GP");
                    rowData[28] = rsTmp.getString("ABST");
                    rowData[29] = rsTmp.getString("SECNAME");
                    rowData[30] = rsTmp.getString("CTGNAME");

                    DataModelF.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateMonthlyDataContractor() {
        try {
            FormatGrid(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT *,ROUND(LC_DAYS+LWP_DAYS,2) AS LC_LWP_DAYS FROM SDMLATTPAY.ATT_MTH_SUMMARY WHERE MS_EMPID LIKE ('BRD00%') AND MS_EMPID NOT LIKE ('BRD008%') AND MS_EMPID NOT LIKE ('BRD003%') AND MS_EMPID NOT LIKE ('BRD002%') AND MS_EMPID NOT LIKE ('BRD004%') AND MS_MM=" + txtMonth.getText() + " AND MS_YYYY=" + txtYear.getText() + " ) AS MAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON MAS.MS_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
                    + "ON SFT.SHIFT_ID=EMP.EMP_SHIFT_ID "
                    + "ORDER BY MS_EMPID ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("MS_EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("MS_MM");
                    rowData[5] = rsTmp.getString("MS_YYYY");
                    rowData[6] = rsTmp.getString("TOTAL_MONTH_DAYS");
                    rowData[7] = rsTmp.getString("PAID_DAYS");
                    rowData[8] = rsTmp.getString("PRESENT_DAYS");
                    rowData[9] = rsTmp.getString("LC_DAYS");
                    rowData[10] = rsTmp.getString("LWP_DAYS");
                    rowData[11] = rsTmp.getString("LC_LWP_DAYS");
                    rowData[12] = rsTmp.getString("CO");
                    rowData[13] = rsTmp.getString("OD");
                    rowData[14] = rsTmp.getString("PL");
                    rowData[15] = rsTmp.getString("CL");
                    rowData[16] = rsTmp.getString("SL");
                    rowData[17] = rsTmp.getString("LOFF");
                    rowData[18] = rsTmp.getString("EOFF");
                    rowData[19] = rsTmp.getString("MS_PH");
                    rowData[20] = rsTmp.getString("MS_STAFF_WOFF");
                    rowData[21] = rsTmp.getString("NPH");
                    rowData[22] = rsTmp.getString("MS_WORKER_WOFF");
                    rowData[23] = rsTmp.getString("MS_COMPANY_WOFF");
                    rowData[24] = rsTmp.getString("NPL");
                    rowData[25] = rsTmp.getString("ESIC");
                    rowData[26] = rsTmp.getString("P_GP");
                    rowData[27] = rsTmp.getString("O_GP");
                    rowData[28] = rsTmp.getString("ABST");
                    rowData[29] = rsTmp.getString("SECNAME");
                    rowData[30] = rsTmp.getString("CTGNAME");

                    DataModelF.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private void GenerateMonthlyDataContractorKMS() {
        try {
            FormatGrid(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT *,ROUND(LC_DAYS+LWP_DAYS,2) AS LC_LWP_DAYS FROM SDMLATTPAY.ATT_MTH_SUMMARY WHERE MS_EMPID LIKE ('BRD003%') AND MS_MM=" + txtMonth.getText() + " AND MS_YYYY=" + txtYear.getText() + " ) AS MAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON MAS.MS_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
                    + "ON SFT.SHIFT_ID=EMP.EMP_SHIFT_ID "
                    + "ORDER BY MS_EMPID ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("MS_EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("MS_MM");
                    rowData[5] = rsTmp.getString("MS_YYYY");
                    rowData[6] = rsTmp.getString("TOTAL_MONTH_DAYS");
                    rowData[7] = rsTmp.getString("PAID_DAYS");
                    rowData[8] = rsTmp.getString("PRESENT_DAYS");
                    rowData[9] = rsTmp.getString("LC_DAYS");
                    rowData[10] = rsTmp.getString("LWP_DAYS");
                    rowData[11] = rsTmp.getString("LC_LWP_DAYS");
                    rowData[12] = rsTmp.getString("CO");
                    rowData[13] = rsTmp.getString("OD");
                    rowData[14] = rsTmp.getString("PL");
                    rowData[15] = rsTmp.getString("CL");
                    rowData[16] = rsTmp.getString("SL");
                    rowData[17] = rsTmp.getString("LOFF");
                    rowData[18] = rsTmp.getString("EOFF");
                    rowData[19] = rsTmp.getString("MS_PH");
                    rowData[20] = rsTmp.getString("MS_STAFF_WOFF");
                    rowData[21] = rsTmp.getString("NPH");
                    rowData[22] = rsTmp.getString("MS_WORKER_WOFF");
                    rowData[23] = rsTmp.getString("MS_COMPANY_WOFF");
                    rowData[24] = rsTmp.getString("NPL");
                    rowData[25] = rsTmp.getString("ESIC");
                    rowData[26] = rsTmp.getString("P_GP");
                    rowData[27] = rsTmp.getString("O_GP");
                    rowData[28] = rsTmp.getString("ABST");
                    rowData[29] = rsTmp.getString("SECNAME");
                    rowData[30] = rsTmp.getString("CTGNAME");

                    DataModelF.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private void GenerateMonthlyDataContractorHRS() {
        try {
            FormatGrid(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT *,ROUND(LC_DAYS+LWP_DAYS,2) AS LC_LWP_DAYS FROM SDMLATTPAY.ATT_MTH_SUMMARY WHERE (MS_EMPID LIKE ('BRD002%') OR MS_EMPID LIKE ('BRD004%')) AND MS_MM=" + txtMonth.getText() + " AND MS_YYYY=" + txtYear.getText() + " ) AS MAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON MAS.MS_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
                    + "ON SFT.SHIFT_ID=EMP.EMP_SHIFT_ID "
                    + "ORDER BY MS_EMPID ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("MS_EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("MS_MM");
                    rowData[5] = rsTmp.getString("MS_YYYY");
                    rowData[6] = rsTmp.getString("TOTAL_MONTH_DAYS");
                    rowData[7] = rsTmp.getString("PAID_DAYS");
                    rowData[8] = rsTmp.getString("PRESENT_DAYS");
                    rowData[9] = rsTmp.getString("LC_DAYS");
                    rowData[10] = rsTmp.getString("LWP_DAYS");
                    rowData[11] = rsTmp.getString("LC_LWP_DAYS");
                    rowData[12] = rsTmp.getString("CO");
                    rowData[13] = rsTmp.getString("OD");
                    rowData[14] = rsTmp.getString("PL");
                    rowData[15] = rsTmp.getString("CL");
                    rowData[16] = rsTmp.getString("SL");
                    rowData[17] = rsTmp.getString("LOFF");
                    rowData[18] = rsTmp.getString("EOFF");
                    rowData[19] = rsTmp.getString("MS_PH");
                    rowData[20] = rsTmp.getString("MS_STAFF_WOFF");
                    rowData[21] = rsTmp.getString("NPH");
                    rowData[22] = rsTmp.getString("MS_WORKER_WOFF");
                    rowData[23] = rsTmp.getString("MS_COMPANY_WOFF");
                    rowData[24] = rsTmp.getString("NPL");
                    rowData[25] = rsTmp.getString("ESIC");
                    rowData[26] = rsTmp.getString("P_GP");
                    rowData[27] = rsTmp.getString("O_GP");
                    rowData[28] = rsTmp.getString("ABST");
                    rowData[29] = rsTmp.getString("SECNAME");
                    rowData[30] = rsTmp.getString("CTGNAME");

                    DataModelF.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void InsertIntoSPP(String pMonth, String pYear) {
        Connection connlocal = null, connremote = null;
        ResultSet rsTmpLocal, rsTmpRemote;
        Statement stlocal = null, stremote = null;
        String urllocal = "jdbc:mysql://200.0.0.227:3306/";
        String urlremote = "jdbc:mysql://200.0.0.229:3307/";
        String dbName = "SDMLATTPAY";//?zeroDateTimeBehavior=convertToNull
        String driver = "com.mysql.jdbc.Driver";
        String userName = "root";
        String password = "att@229";
        String strSQLLocal = "", strSQLRemote = "";
        try {
            Class.forName(driver).newInstance();
            connlocal = DriverManager.getConnection(urllocal + dbName, "root", EITLERPGLOBAL.DBPassword);
            connremote = DriverManager.getConnection(urlremote + dbName, userName, password);

            //stlocal = connlocal.createStatement();
            //stremote=connremote.createStatement();
            stlocal = connlocal.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            stremote = connremote.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

            //stremote.execute("TRUNCATE TABLE SDMLATTPAY.ATT_MTH_SUMMARY_227");
            //stremote.execute("DELETE FROM SDMLATTPAY.ATT_MTH_SUMMARY_227 WHERE MS_MM=" + month + " AND MS_YYYY=" + year + "");
            //stremote.execute("DELETE FROM SDMLATTPAY.ATT_MTH_SUMMARY_TO_SPP WHERE MS_MM=" + month + " AND MS_YYYY=" + year + "");
            strSQLLocal += "SELECT * FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA WHERE MAS_MM=" + pMonth + " AND MAS_YYYY=" + pYear + " AND APPROVED=1 AND CANCELED=0 ";
            //Copy table
            System.out.println("SQL:" + strSQLLocal);
            rsTmpLocal = stlocal.executeQuery(strSQLLocal);
            rsTmpLocal.first();
            while (!rsTmpLocal.isAfterLast()) {

                strSQLRemote = "INSERT INTO SDMLATTPAY.ATT_MTH_SUMMARY_TO_SPP VALUES(";
                strSQLRemote += "'" + rsTmpLocal.getString("MAS_MM") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("MAS_YYYY") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("MAS_EMPID") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("TOTAL_MONTH_DAYS") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("PAID_DAYS") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("PRESENT_DAYS") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("LC_LWP_DAYS") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("CO") + "',";
                strSQLRemote += "'" + 0 + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("OD") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("PL") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("CL") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("SL") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("LOFF") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("EOFF") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("MAS_PH") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("MAS_STAFF_WOFF") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("MAS_WORKER_WOFF") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("NPH") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("MAS_COMPANY_WOFF") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("NPL") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("ESIC") + "',";
                strSQLRemote += "'')";
                //strSQLRemote += "'" + rsTmpLocal.getString("NPH") + "',";            
                //strSQLRemote += "'" + rsTmpLocal.getString("COFFE") + "',";                       

//                System.out.println(strSQLRemote);
                stremote.execute(strSQLRemote);
                rsTmpLocal.next();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void InsertIntoSPP(String pDocNo, String pMonth, String pYear) {
        Connection connlocal = null, connremote = null;
        ResultSet rsTmpLocal, rsTmpRemote;
        Statement stlocal = null, stremote = null;
        String urllocal = "jdbc:mysql://200.0.0.227:3306/";
        String urlremote = "jdbc:mysql://200.0.0.229:3307/";
        String dbName = "SDMLATTPAY";//?zeroDateTimeBehavior=convertToNull
        String driver = "com.mysql.jdbc.Driver";
        String userName = "root";
        String password = "att@229";
        String strSQLLocal = "", strSQLRemote = "";
        String lstDt = data.getStringValueFromDB("SELECT LAST_DAY('" + pYear + "-" + pMonth + "-01') FROM DUAL ");
        try {
            Class.forName(driver).newInstance();
            connlocal = DriverManager.getConnection(urllocal + dbName, "root", EITLERPGLOBAL.DBPassword);
            connremote = DriverManager.getConnection(urlremote + dbName, userName, password);

            //stlocal = connlocal.createStatement();
            //stremote=connremote.createStatement();
            stlocal = connlocal.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            stremote = connremote.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

            //stremote.execute("TRUNCATE TABLE SDMLATTPAY.ATT_MTH_SUMMARY_227");
            //stremote.execute("DELETE FROM SDMLATTPAY.ATT_MTH_SUMMARY_227 WHERE MS_MM=" + month + " AND MS_YYYY=" + year + "");
            //stremote.execute("DELETE FROM SDMLATTPAY.ATT_MTH_SUMMARY_TO_SPP WHERE MS_MM=" + month + " AND MS_YYYY=" + year + "");
            strSQLLocal += "SELECT * FROM SDMLATTPAY.ATT_MTH_AUDITED_DATA WHERE DOC_NO='" + pDocNo + "' AND MAS_MM=" + pMonth + " AND MAS_YYYY=" + pYear + " AND APPROVED=1 AND CANCELED=0 ";
            //Copy table
            System.out.println("SQL:" + strSQLLocal);
            rsTmpLocal = stlocal.executeQuery(strSQLLocal);
            rsTmpLocal.first();
            while (!rsTmpLocal.isAfterLast()) {

                strSQLRemote = "INSERT INTO SDMLATTPAY.ATT_MTH_SUMMARY_TO_SPP VALUES(";
                strSQLRemote += "'" + rsTmpLocal.getString("MAS_MM") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("MAS_YYYY") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("MAS_EMPID") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("TOTAL_MONTH_DAYS") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("PAID_DAYS") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("PRESENT_DAYS") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("LC_LWP_DAYS") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("CO") + "',";
                strSQLRemote += "'" + 0 + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("OD") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("PL") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("CL") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("SL") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("LOFF") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("EOFF") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("MAS_PH") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("MAS_STAFF_WOFF") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("MAS_WORKER_WOFF") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("NPH") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("MAS_COMPANY_WOFF") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("NPL") + "',";
                strSQLRemote += "'" + rsTmpLocal.getString("ESIC") + "',";
                strSQLRemote += "'',";
                strSQLRemote += "'" + lstDt + "'";
                strSQLRemote += ")";
                //strSQLRemote += "'" + rsTmpLocal.getString("NPH") + "',";            
                //strSQLRemote += "'" + rsTmpLocal.getString("COFFE") + "',";                       

//                System.out.println(strSQLRemote);
                System.out.println("Done");
                stremote.execute(strSQLRemote);
                rsTmpLocal.next();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
