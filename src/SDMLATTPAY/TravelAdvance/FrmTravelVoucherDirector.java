/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SDMLATTPAY.TravelAdvance;

import EITLERP.*;
import EITLERP.FeltSales.common.DatePicker.DateTextField.DatePanel;
import EITLERP.Finance.FinanceGlobal;
import SDMLATTPAY.AdvanceSearch.ATTPAYLOV;
import java.awt.Color;
import java.awt.Component;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Point;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SpinnerDateModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author
 *
 */
public class FrmTravelVoucherDirector extends javax.swing.JApplet {

    private int EditMode = 0;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbModuleModel;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel, DataModel1, DataModel2;
    private EITLTableCellRenderer CellAlign = new EITLTableCellRenderer();
    private EITLTableCellRenderer CellAlign1 = new EITLTableCellRenderer();
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;
    private int ModuleId = 858;
    private String DOC_NO = "";
    private SDMLATTPAY.TravelAdvance.clsTravelEntry TravellingEntry;
    private EITLComboModel cmbSendToModel;

    public DatePanel datePanel = null;

    String seleval = "", seltyp = "", selqlt = "", selshd = "", selpiece = "", selext = "", selinv = "", selsz = "";
    private int mlstrc;
    private String menusele = "";

    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    DateFormat dateForDB = new SimpleDateFormat("yyyy-MM-dd");

    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    public frmPendingApprovals frmPA;

    @Override
    public void init() {

        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        initComponents();
        docdate1.setVisible(false);

        JSpinner timeSpinner = new JSpinner(new SpinnerDateModel());
        JSpinner.DateEditor timeEditor = new JSpinner.DateEditor(timeSpinner, "HH:mm:ss");
        timeSpinner.setEditor(timeEditor);
        timeSpinner.setValue(new Date());

        GenerateCombos();

        GenerateFromCombo();
        //GenerateHierarchyCombo();

        SetMenuForRights();
        try {
            DefaultSettings();
        } catch (SQLException ex) {

        }
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();

        TravellingEntry = new SDMLATTPAY.TravelAdvance.clsTravelEntry();
        boolean load = TravellingEntry.LoadData(EITLERPGLOBAL.gCompanyID);
        if (load) {
            DisplayData();
            MoveLast();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + TravellingEntry.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        SetFields(false);
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        SetupApproval();
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    public void DefaultSettings() throws SQLException {

        //String data = toString();
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        clearFields();
        lblTitle1.setBackground(new Color(0, 102, 153));
        lblTitle1.setForeground(Color.WHITE);
    }

    private void clearFields() {

        lbldoc.setText("");
        docdate.setText("");
        txtEmpNo.setText("");
        txtEmpName.setText("");
        dept.setText("");
        designation.setText("");
        level.setText("");
        fare.setText("");
        allowance.setText("");
        total.setText("");
        advance.setText("");
        txtpurposevisit.setText("");
        txtAuditRemarks.setText("");
        ind.setSelected(true);

        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        FormatGridHS();

    }

    private void DisplayData() {

        //=========== Color Indication ===============//
        try {

            if ("1".equals(TravellingEntry.getAttribute("APPROVED").getString())) {
                lblTitle1.setBackground(Color.BLUE);
                lblTitle1.setForeground(Color.WHITE);
            }

            if ("0".equals(TravellingEntry.getAttribute("APPROVED").getString())) {
                lblTitle1.setBackground(Color.GRAY);
                lblTitle1.setForeground(Color.BLACK);
            }

            if ("1".equals(TravellingEntry.getAttribute("CANCELED").getString())) {
                lblTitle1.setBackground(Color.RED);
                lblTitle1.setForeground(Color.WHITE);
            }
        } catch (Exception c) {

            c.printStackTrace();
        }

        //============================================//
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleId)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        clearFields();
        try {
            DOC_NO = TravellingEntry.getAttribute("TSD_DOC_NO").getString();
            lblTitle1.setText("Travelling Sanction  - " + DOC_NO);
            lbldoc.setText(DOC_NO);
            docdate.setText(EITLERPGLOBAL.formatDate(TravellingEntry.getAttribute("TSD_DOC_DATE").getString()));
            docdate1.setText(TravellingEntry.getAttribute("TSD_DOC_DATE").getString());
            txtEmpNo.setText(TravellingEntry.getAttribute("TSD_PAY_EMP_NO").getString());
            txtEmpName.setText(TravellingEntry.getAttribute("TSD_NAME").getString());
            dept.setText(TravellingEntry.getAttribute("TSD_DEPARTMENT").getString());
            designation.setText(TravellingEntry.getAttribute("TSD_DESIGNATION").getString());
            level.setText(TravellingEntry.getAttribute("TSD_LEVEL").getString());
            if (TravellingEntry.getAttribute("TSD_CATEGORY").getString().equalsIgnoreCase("Within India")) {
                ind.setSelected(true);
            }
            if (TravellingEntry.getAttribute("TSD_CATEGORY").getString().equalsIgnoreCase("Within Gujarat [One Day Trip]")) {
                gujod.setSelected(true);
            }
            if (TravellingEntry.getAttribute("TSD_CATEGORY").getString().equalsIgnoreCase("Within Gujarat [Continuous Trip]")) {
                gujcnt.setSelected(true);
            }
            txtpurposevisit.setText(TravellingEntry.getAttribute("TSD_PURPOSE_OF_VISIT").getString());
            txtrmkaudit.setText(TravellingEntry.getAttribute("TSD_AUDIT_REMARK").getString());

            for (int i = 1; i <= TravellingEntry.colMRItems.size(); i++) {

                SDMLATTPAY.TravelAdvance.clsTravelEntryItem ObjItem = (SDMLATTPAY.TravelAdvance.clsTravelEntryItem) TravellingEntry.colMRItems.get(Integer.toString(i));
                Object[] rowData = new Object[50];
                rowData[0] = i;
                rowData[1] = (String) ObjItem.getAttribute("TSD_START_PLACE").getObj();
                rowData[2] = EITLERPGLOBAL.formatDate((String) ObjItem.getAttribute("TSD_START_DATE").getObj());
                rowData[3] = (String) ObjItem.getAttribute("TSD_START_TIME").getObj();
                rowData[4] = (String) ObjItem.getAttribute("TSD_TRAVEL_MODE").getObj();
                rowData[5] = (String) ObjItem.getAttribute("TSD_FARE").getObj();
                rowData[6] = (String) ObjItem.getAttribute("TSD_VISIT_PLACE").getObj();
                rowData[7] = (String) ObjItem.getAttribute("TSD_IS_VISIT_PLACE").getObj();
                rowData[8] = EITLERPGLOBAL.formatDate((String) ObjItem.getAttribute("TSD_ARRIVAL_DATE").getObj());
                rowData[9] = (String) ObjItem.getAttribute("TSD_ARRIVAL_TIME").getObj();
                rowData[10] = (String) ObjItem.getAttribute("TSD_SEMINAR").getObj();
                rowData[11] = (String) ObjItem.getAttribute("TSD_DAYS").getObj();
                rowData[12] = (String) ObjItem.getAttribute("TSD_RATE").getObj();
                rowData[13] = (String) ObjItem.getAttribute("TSD_AMOUNT").getObj();

                DataModel.addRow(rowData);
            }
            fare.setText(TravellingEntry.getAttribute("TSD_TOTAL_FARE").getString());
            allowance.setText(TravellingEntry.getAttribute("TSD_TOTAL_EXPENSE").getString());
            total.setText(TravellingEntry.getAttribute("TSD_TOTAL").getString());
            advance.setText(TravellingEntry.getAttribute("TSD_ADVANCE").getString());

            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 60; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) TravellingEntry.getAttribute("HIERARCHY_ID").getVal());
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();
            String DocNo = TravellingEntry.getAttribute("TSD_DOC_NO").getString();
            List = SDMLATTPAY.ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, ModuleId, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];
                //JOptionPane.showMessageDialog(null, "USER ID : "+ObjFlow.getAttribute("USER_ID").getVal());
                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelApprovalStatus.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridHS();
            //HashMap History = TravellingEntry.getHistoryList(EITLERPGLOBAL.gCompanyID + "", DocNo);
            HashMap History = clsTravelEntry.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for (int i = 1; i <= History.size(); i++) {
                clsTravelEntry ObjHistory = (clsTravelEntry) History.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (long) ObjHistory.getAttribute("UPDATED_BY").getVal());
                rowData[2] = ObjHistory.getAttribute("ENTRY_DATE").getString();

                String ApprovalStatus = "";

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }
                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }
                rowData[3] = ApprovalStatus;
                rowData[4] = ObjHistory.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjHistory.getAttribute("FROM_IP").getString();
                DataModelUpdateHistory.addRow(rowData);
            }
            //============================================================//
            //setSTATUS();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void FormatGridA() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableApprovalStatus.setAutoResizeMode(TableApprovalStatus.AUTO_RESIZE_OFF);

    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10072, 100721)) { //7008,70081
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
            cmdNew.setEnabled(true);
        }

        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10072, 100722)) { //7008,70082
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10072, 100723)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10072, 100724)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            //cmdPreview.setEnabled(false);
            //cmdPrint.setEnabled(false);
        }
    }

    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
         if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
         cmbHierarchy.setEnabled(true);
         }else {
         cmbHierarchy.setEnabled(false);
         }*/

        // select hold for default approval
        OpgHold.setSelected(true);

        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            //lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {

            int FromUserID = SDMLATTPAY.ApprovalFlow.getFromID(EITLERPGLOBAL.gCompanyID, ModuleId, TravellingEntry.getAttribute("DOC_NO").getString());
            //lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = SDMLATTPAY.ApprovalFlow.getFromRemarks(EITLERPGLOBAL.gCompanyID, ModuleId, FromUserID, TravellingEntry.getAttribute("DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (SDMLATTPAY.ApprovalFlow.IsCreator(ModuleId, TravellingEntry.getAttribute("TSD_DOC_NO").getString() + "")) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void FormatGridHS() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From IP");

        TableUpdateHistory.setAutoResizeMode(TableUpdateHistory.AUTO_RESIZE_OFF);
    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (EITLERPGLOBAL.gNewUserID == SDMLATTPAY.ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "")) {
                List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + (ModuleId));
            } else {
                List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
            }
        }

        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = SDMLATTPAY.ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "");
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableColumnModel tcm = TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(90);
        tcm.getColumn(5).setPreferredWidth(90);
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");

        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(2).setPreferredWidth(50);
        tcm.getColumn(3).setPreferredWidth(20);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup5 = new javax.swing.ButtonGroup();
        travel = new javax.swing.ButtonGroup();
        Tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        lblStatus1 = new javax.swing.JLabel();
        cmdNextToTab2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        docdate = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        lbldoc = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        docdate1 = new javax.swing.JLabel();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        dept = new javax.swing.JLabel();
        txtEmpNo = new javax.swing.JTextField();
        txtEmpName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        designation = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        level = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtpurposevisit = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtrmkaudit = new javax.swing.JTextArea();
        gujod = new javax.swing.JRadioButton();
        ind = new javax.swing.JRadioButton();
        gujcnt = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        fare = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        allowance = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        total = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        advance = new javax.swing.JLabel();
        balance = new javax.swing.JLabel();
        cashpay = new javax.swing.JRadioButton();
        epayment = new javax.swing.JRadioButton();
        cheque = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        StatusPanel = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle1 = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        Tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        lblStatus1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus1.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(lblStatus1);
        lblStatus1.setBounds(10, 560, 920, 30);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(700, 360, 120, 30);

        jLabel5.setText("Doc Date");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(270, 14, 60, 20);

        docdate.setText("DD/MM/YYYY");
        jPanel1.add(docdate);
        docdate.setBounds(360, 4, 100, 40);

        jLabel11.setText("Doc No");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(10, 10, 70, 20);

        lbldoc.setText("DocNo");
        jPanel1.add(lbldoc);
        lbldoc.setBounds(90, 10, 120, 30);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 220, 1050, 140);

        docdate1.setText("DD/MM/YYYY");
        jPanel1.add(docdate1);
        docdate1.setBounds(360, 4, 100, 40);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setToolTipText("Add Row");
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        jPanel1.add(cmdAdd);
        cmdAdd.setBounds(760, 190, 90, 23);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setToolTipText("Remove Selected Row");
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        jPanel1.add(cmdRemove);
        cmdRemove.setBounds(870, 190, 90, 23);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Press F1 for Place,Mode of Travel,VisitPlace,Seminar and Date in [DD/MM/YYYY],[Time in HH:MM 24Hrs]  format");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(20, 190, 730, 20);

        dept.setText("Dept");
        jPanel1.add(dept);
        dept.setBounds(90, 70, 180, 20);

        txtEmpNo.setToolTipText("Press F1 key for search Employee No");
        txtEmpNo.setEnabled(false);
        txtEmpNo = new JTextFieldHint(new JTextField(),"Search by F1");
        txtEmpNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmpNoFocusLost(evt);
            }
        });
        txtEmpNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEmpNoKeyPressed(evt);
            }
        });
        jPanel1.add(txtEmpNo);
        txtEmpNo.setBounds(90, 40, 110, 20);

        txtEmpName.setEditable(false);
        txtEmpName.setDisabledTextColor(java.awt.Color.black);
        txtEmpName.setEnabled(false);
        jPanel1.add(txtEmpName);
        txtEmpName.setBounds(210, 40, 360, 20);

        jLabel3.setText("Emp Code");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(10, 40, 70, 20);

        jLabel4.setText("Purpose of Visit");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(10, 100, 110, 20);

        jLabel6.setText("Designation");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(300, 70, 70, 20);

        designation.setText("Designation");
        jPanel1.add(designation);
        designation.setBounds(380, 70, 140, 20);

        jLabel8.setText("Level");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(550, 70, 70, 20);

        level.setText("L3");
        jPanel1.add(level);
        level.setBounds(630, 70, 60, 20);

        jLabel10.setText("Dept");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(10, 70, 70, 20);

        txtpurposevisit.setColumns(20);
        txtpurposevisit.setRows(5);
        jScrollPane3.setViewportView(txtpurposevisit);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(130, 90, 740, 40);

        jLabel12.setText("Remark from  Internal Audit");
        jPanel1.add(jLabel12);
        jLabel12.setBounds(10, 140, 180, 40);

        txtrmkaudit.setColumns(20);
        txtrmkaudit.setRows(5);
        jScrollPane4.setViewportView(txtrmkaudit);

        jPanel1.add(jScrollPane4);
        jScrollPane4.setBounds(250, 140, 700, 40);

        travel.add(gujod);
        gujod.setText("Within Gujarat [One Day Trip]");
        jPanel1.add(gujod);
        gujod.setBounds(720, 23, 230, 30);

        travel.add(ind);
        ind.setSelected(true);
        ind.setText("Within India");
        jPanel1.add(ind);
        ind.setBounds(590, 20, 120, 30);

        travel.add(gujcnt);
        gujcnt.setText("Within Gujarat [Continuous Trip]");
        jPanel1.add(gujcnt);
        gujcnt.setBounds(720, 50, 230, 30);

        jLabel2.setText("FARE");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(20, 460, 80, 20);

        fare.setText("0.00");
        jPanel1.add(fare);
        fare.setBounds(140, 460, 70, 20);

        jLabel9.setText("ALLOWANCE");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(20, 490, 80, 20);

        allowance.setText("0.00");
        jPanel1.add(allowance);
        allowance.setBounds(140, 490, 70, 20);

        jLabel7.setText("TOTAL");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(20, 520, 80, 20);

        total.setText("0.00");
        jPanel1.add(total);
        total.setBounds(140, 520, 70, 20);

        jLabel14.setText("BALANCE");
        jPanel1.add(jLabel14);
        jLabel14.setBounds(230, 490, 80, 20);

        jLabel13.setText("ADVANCE");
        jPanel1.add(jLabel13);
        jLabel13.setBounds(230, 460, 80, 20);

        advance.setText("0.00");
        jPanel1.add(advance);
        advance.setBounds(350, 460, 70, 20);

        balance.setText("0.00");
        jPanel1.add(balance);
        balance.setBounds(350, 490, 70, 20);

        cashpay.setText("Cash");
        cashpay.setEnabled(false);
        jPanel1.add(cashpay);
        cashpay.setBounds(350, 520, 49, 23);

        epayment.setSelected(true);
        epayment.setText("E-payment");
        epayment.setEnabled(false);
        jPanel1.add(epayment);
        epayment.setBounds(450, 520, 93, 23);

        cheque.setText("Cheque");
        cheque.setEnabled(false);
        jPanel1.add(cheque);
        cheque.setBounds(560, 520, 63, 23);

        Tab.addTab("Travelling Sanction", jPanel1);

        jPanel2.setLayout(null);

        Tab2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 23, 66, 14);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(90, 20, 180, 20);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 62, 56, 14);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(90, 60, 180, 20);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 95, 62, 14);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(90, 95, 530, 20);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 130, 81, 14);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup5.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        buttonGroup5.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup5.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgRejectActionPerformed(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup5.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(90, 130, 180, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 253, 60, 14);

        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(90, 250, 180, 20);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 292, 60, 14);

        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 290, 570, 20);

        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(450, 340, 102, 23);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(630, 95, 33, 21);

        cmdNextToTab3.setMnemonic('N');
        cmdNextToTab3.setText("Next >>");
        cmdNextToTab3.setToolTipText("Next Tab");
        cmdNextToTab3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab3ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab3);
        cmdNextToTab3.setBounds(560, 340, 102, 23);

        jPanel2.add(Tab2);
        Tab2.setBounds(10, 0, 760, 410);

        Tab.addTab("Approval", jPanel2);

        jPanel3.setLayout(null);

        StatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StatusPanel.setLayout(null);

        jLabel60.setText("Document Approval Status");
        StatusPanel.add(jLabel60);
        jLabel60.setBounds(12, 10, 242, 14);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableApprovalStatus);

        StatusPanel.add(jScrollPane2);
        jScrollPane2.setBounds(0, 40, 694, 120);

        jLabel19.setText("Document Update History");
        StatusPanel.add(jLabel19);
        jLabel19.setBounds(10, 170, 182, 14);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableUpdateHistory);

        StatusPanel.add(jScrollPane6);
        jScrollPane6.setBounds(10, 190, 540, 130);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdViewHistory);
        cmdViewHistory.setBounds(570, 170, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdNormalView);
        cmdNormalView.setBounds(570, 200, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 230, 132, 24);

        txtAuditRemarks.setEnabled(false);
        StatusPanel.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(569, 260, 130, 20);

        jButton5.setText("<<Previous");
        jButton5.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton5);
        jButton5.setBounds(570, 290, 130, 30);

        jPanel3.add(StatusPanel);
        StatusPanel.setBounds(10, 0, 790, 380);

        Tab.addTab("Status", jPanel3);

        getContentPane().add(Tab);
        Tab.setBounds(0, 80, 1070, 640);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 1070, 40);

        lblTitle1.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle1.setText("Travelling Sanction");
        lblTitle1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle1.setOpaque(true);
        getContentPane().add(lblTitle1);
        lblTitle1.setBounds(0, 40, 1070, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged

        //SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "On State Change SelHierarchyId : "+SelHierarchyID);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
                OpgFinal.setEnabled(true);
            }
        } else {
            OpgApprove.setEnabled(false);
            OpgApprove.setSelected(false);
        }

        if (clsHierarchy.IsCreator((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgApprove.setEnabled(true);
            OpgReject.setEnabled(false);
            OpgReject.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus1.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "SelHierarchyId : "+SelHierarchyID);
        DOC_NO = lbldoc.getText();
        cmbSendTo.setEnabled(true);
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (SDMLATTPAY.ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "")) {
                cmbSendTo.setEnabled(true);
                txtToRemarks.setEnabled(true);
                txtFromRemarks.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }
        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }

        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(true);
        OpgHold.setSelected(false);
        //txtToRemarks.setEnabled(false);
        if (!OpgApprove.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);

        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {

                if (OpgApprove.isSelected()) {
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    //JOptionPane.showMessageDialog(null, "Module Id :"+ModuleId+", DOC No : "+sorder_no+", User Id : "+ObjUser.getAttribute("USER_ID").getInt()+", New user Id "+SDMLERPGLOBAL.gNewUserID);
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                    // JOptionPane.showMessageDialog(null, "IncludeUser = "+IncludeUser);

                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = SDMLATTPAY.ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "");
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }
    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged

    }//GEN-LAST:event_OpgApproveItemStateChanged

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus1.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged

    }//GEN-LAST:event_OpgFinalItemStateChanged

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained

    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectItemStateChanged

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained

    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked


    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged

    }//GEN-LAST:event_OpgHoldItemStateChanged

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained

    }//GEN-LAST:event_OpgHoldFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained

    }//GEN-LAST:event_cmbSendToFocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained

    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed

    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdNextToTab3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab3ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab3ActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained

    }//GEN-LAST:event_Tab2FocusGained

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed

        //TravellingEntry.ShowHistory(DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        //TravellingEntry.HistoryView = false;
        //TravellingEntry.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            txtAuditRemarks.setText((String) TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4));
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText = txtAuditRemarks;
            bigEdit.ShowEdit();
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void TabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabMouseClicked

    }//GEN-LAST:event_TabMouseClicked

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();

    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void OpgRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgRejectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgRejectActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        Object[] rowData = new Object[12];
        rowData[0] = Integer.toString(Table.getRowCount() + 1);
        rowData[1] = "";
        rowData[2] = "";
        rowData[3] = "";
        rowData[4] = "";
        rowData[5] = "";
        rowData[6] = "";

        DataModel.addRow(rowData);
        Table.changeSelection(Table.getRowCount() - 1, 1, false, false);
        Table.requestFocus();
    }//GEN-LAST:event_cmdAddActionPerformed

    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        if (Table.getRowCount() > 0) {
            DataModel.removeRow(Table.getSelectedRow());
            RearrangeSrNo();
            CalcExpen();
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed

    private void txtEmpNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmpNoFocusLost
        // TODO add your handling code here:
        if (!txtEmpNo.getText().trim().equals("") && data.IsRecordExist("SELECT * FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpNo.getText().trim() + "' AND APPROVED=1 AND CANCELED=0")) {
            txtEmpName.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpNo.getText() + "'"));
            level.setText(data.getStringValueFromDB("SELECT COALESCE(CASE WHEN EMP_DEPARTMENT=23 AND EMP_DESIGNATION=81 THEN 'L4' ELSE TRAVELLING_LEVEL END,'L5') AS TRAVELLING_LEVEL "
                    + "FROM SDMLATTPAY.ATTPAY_EMPMST "
                    + "LEFT JOIN  SDMLATTPAY.ATT_DESIGNATION_MASTER "
                    + "ON DSGID=EMP_DESIGNATION "
                    + "WHERE PAY_EMP_NO='" + txtEmpNo.getText() + "'"));
            designation.setText(data.getStringValueFromDB("SELECT NAME FROM SDMLATTPAY.ATTPAY_EMPMST "
                    + "LEFT JOIN  SDMLATTPAY.ATT_DESIGNATION_MASTER "
                    + "ON DSGID=EMP_DESIGNATION "
                    + "WHERE PAY_EMP_NO='" + txtEmpNo.getText() + "'"));
            dept.setText(data.getStringValueFromDB("SELECT NAME FROM SDMLATTPAY.ATTPAY_EMPMST "
                    + "LEFT JOIN  SDMLATTPAY.ATT_DEPARTMENT_MASTER "
                    + "ON DPTID=EMP_DEPARTMENT "
                    + "WHERE PAY_EMP_NO='" + txtEmpNo.getText() + "'"));
            cmdAdd.setEnabled(true);
            cmdRemove.setEnabled(true);
        } else {
            if (!txtEmpNo.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Employee No doesn't exist/under approval.");
            }
            txtEmpNo.setText("");
            txtEmpName.setText("");
            dept.setText("");
            designation.setText("");
            level.setText("");
            cmdAdd.setEnabled(false);
            cmdRemove.setEnabled(false);
        }
    }//GEN-LAST:event_txtEmpNoFocusLost

    private void txtEmpNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpNoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            ATTPAYLOV aList = new ATTPAYLOV();
            aList.SQL = "SELECT PAY_EMP_NO,EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE APPROVED=1 AND CANCELED=0";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtEmpNo.setText(aList.ReturnVal);
                txtEmpName.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpNo.getText() + "'"));
                level.setText("L1");
                designation.setText(data.getStringValueFromDB("SELECT NAME FROM SDMLATTPAY.ATTPAY_EMPMST "
                        + "LEFT JOIN  SDMLATTPAY.ATT_DESIGNATION_MASTER "
                        + "ON DSGID=EMP_DESIGNATION "
                        + "WHERE PAY_EMP_NO='" + txtEmpNo.getText() + "'"));
                dept.setText(data.getStringValueFromDB("SELECT NAME FROM SDMLATTPAY.ATTPAY_EMPMST "
                        + "LEFT JOIN  SDMLATTPAY.ATT_DEPARTMENT_MASTER "
                        + "ON DPTID=EMP_DEPARTMENT "
                        + "WHERE PAY_EMP_NO='" + txtEmpNo.getText() + "'"));
                cmdAdd.setEnabled(true);
                cmdRemove.setEnabled(true);
            } else {
                cmdAdd.setEnabled(false);
                cmdRemove.setEnabled(false);
            }
        }
    }//GEN-LAST:event_txtEmpNoKeyPressed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
        PreviewReport();
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {

            CalcExpen();
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 60; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        }
    }//GEN-LAST:event_TableKeyReleased

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
        //if (EditMode == EITLERPGLOBAL.ADD || (EditMode == EITLERPGLOBAL.EDIT
            //        && SDMLATTPAY.ApprovalFlow.IsCreator(ModuleId, TravellingEntry.getAttribute("TSD_DOC_NO").getString()))) {
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            if (Table.getSelectedColumn() == 1) {
                LOV aList = new LOV();
                aList.SQL = "SELECT CITY_NAME,CITY_NAME,CITY_STATE,CITY_CLASS FROM SDMLATTPAY.CITY";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 1;

                if (aList.ShowLOV()) {
                    if (aList.ReturnVal.equalsIgnoreCase("Other")) {
                        Loader ObjLoader = new Loader(this, "SDMLATTPAY.TravelAdvance.FrmNewCity", true);
                        FrmNewCity ObjNewCity = (FrmNewCity) ObjLoader.getObj();

                        if (ObjNewCity.Cancelled == false) {
                            Table.setValueAt(ObjNewCity.stringFindQuery, Table.getSelectedRow(), 1);
                        }
                    } else {
                        Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), 1);
                    }
                }
            }
            if (Table.getSelectedColumn() == 2) {
                Point p = jScrollPane1.getLocation();
                //Rectangle r = Table.getCellRect(Table.getSelectedRow(), Table.getSelectedColumn(), true);
                p.x = p.x + 240;
                p.y = p.y + 80;
                //                System.out.println(Table.getSelectedRow()+" x:"+r.getX()+ " Y:"+r.getY());
                new DatePickerTable(null, Table.getSelectedRow(), 2, Table, p.x, p.y,
                    data.getStringValueFromDB("SELECT DATE_ADD(STAFF_APL_DATE,INTERVAL 1 DAY) FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE"),
                    (EITLERPGLOBAL.getCurrentFinYear() + 2) + "-03-31");
                try {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    Date date1 = sdf.parse(data.getStringValueFromDB("SELECT DATE_ADD(STAFF_APL_DATE,INTERVAL 1 DAY) FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE"));
                    Date date3 = sdf.parse((EITLERPGLOBAL.getCurrentFinYear() + 2) + "-03-31");
                    Date date2 = sdf.parse(EITLERPGLOBAL.formatDateDB(Table.getValueAt(Table.getSelectedRow(), 2).toString()));
                    if (date2.compareTo(date1) >= 0 && date3.compareTo(date2) >= 0) {
                    } else {
                        Table.setValueAt("", Table.getSelectedRow(), 2);
                        Table.setValueAt("", Table.getSelectedRow(), 3);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (Table.getSelectedColumn() == 8) {
                Point p = jScrollPane1.getLocation();
                //Rectangle r = Table.getCellRect(Table.getSelectedRow(), Table.getSelectedColumn(), true);
                p.x = p.x + 240;
                p.y = p.y + 80;
                //                System.out.println(Table.getSelectedRow()+" x:"+r.getX()+ " Y:"+r.getY());
                new DatePickerTable(null, Table.getSelectedRow(), 8, Table, p.x, p.y,
                    data.getStringValueFromDB("SELECT DATE_ADD(STAFF_APL_DATE,INTERVAL 1 DAY) FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE"),
                    (EITLERPGLOBAL.getCurrentFinYear() + 2) + "-03-31");
                try {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    Date date1 = sdf.parse(data.getStringValueFromDB("SELECT DATE_ADD(STAFF_APL_DATE,INTERVAL 1 DAY) FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE"));
                    Date date3 = sdf.parse((EITLERPGLOBAL.getCurrentFinYear() + 2) + "-03-31");
                    Date date2 = sdf.parse(EITLERPGLOBAL.formatDateDB(Table.getValueAt(Table.getSelectedRow(), 8).toString()));
                    if (date2.compareTo(date1) >= 0 && date3.compareTo(date2) >= 0) {
                    } else {
                        Table.setValueAt("", Table.getSelectedRow(), 8);
                        Table.setValueAt("", Table.getSelectedRow(), 9);
                    }
                } catch (Exception e) {
                }
            }
            if (Table.getSelectedColumn() == 4) {
                LOV aList = new LOV();
                aList.SQL = "SELECT TRAVEL_MODE,TRAVEL_MODE FROM SDMLATTPAY.TRAVEL_MODE";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 1;

                if (aList.ShowLOV()) {
                    Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), 4);
                }
            }

            if (Table.getSelectedColumn() == 6) {
                LOV aList = new LOV();
                aList.SQL = "SELECT CITY_NAME,CITY_NAME,CITY_STATE,CITY_CLASS FROM SDMLATTPAY.CITY";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 1;

                if (aList.ShowLOV()) {
                    if (aList.ReturnVal.equalsIgnoreCase("Other")) {
                        Loader ObjLoader = new Loader(this, "SDMLATTPAY.TravelAdvance.FrmNewCity", true);
                        FrmNewCity ObjNewCity = (FrmNewCity) ObjLoader.getObj();

                        if (ObjNewCity.Cancelled == false) {
                            Table.setValueAt(ObjNewCity.stringFindQuery, Table.getSelectedRow(), 6);
                        }
                    } else {
                        Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), 6);
                    }
                }
            }
            if (Table.getSelectedColumn() == 7) {
                LOV aList = new LOV();
                aList.SQL = "SELECT 'YES' AS VisitPlace,'Mill/Client to be Visit' Description FROM DUAL UNION ALL SELECT 'NO','Transit Place' FROM DUAL ";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 1;

                if (aList.ShowLOV()) {
                    Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), 7);
                }
            }
            if (Table.getSelectedColumn() == 10) {
                LOV aList = new LOV();
                aList.SQL = "SELECT 'No' AS Seminar,'-' Description FROM DUAL "
                + "UNION ALL "
                + "SELECT 'Only Lunch excl. stay & dinner','Only Lunch excl. stay & dinner' FROM DUAL "
                + "UNION ALL "
                + "SELECT 'Lunch & Dinner excl. stay','Lunch & Dinner excl. stay' FROM DUAL "
                + "UNION ALL "
                + "SELECT 'Stay incl. Lunch & Dinner','Stay incl. Lunch & Dinner' FROM DUAL ";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 1;

                if (aList.ShowLOV()) {
                    Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), 10);
                }
            }
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 60; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        }
        //}
    }//GEN-LAST:event_TableKeyPressed
    private void MoveFirst() {
        TravellingEntry.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        TravellingEntry.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        TravellingEntry.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        TravellingEntry.MoveLast();
        DisplayData();
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "SDMLATTPAY.COFF.FrmTravellingEntryFind", true);
        FrmTravelEntryFind ObjTimeCorrectionFind = (FrmTravelEntryFind) ObjLoader.getObj();

        if (ObjTimeCorrectionFind.Cancelled == false) {
            if (!TravellingEntry.Filter(ObjTimeCorrectionFind.stringFindQuery)) {
                JOptionPane.showMessageDialog(FrmTravelVoucherDirector.this, " No records found.", "Find Time Correction Details", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    public void FindWaiting() {
        TravellingEntry.Filter(" TSD_DOC_NO IN (SELECT DISTINCT SDMLATTPAY.TRAVEL_SANCTION_DETAIL.TSD_DOC_NO FROM SDMLATTPAY.TRAVEL_SANCTION_DETAIL, SDMLATTPAY.D_COM_DOC_DATA WHERE SDMLATTPAY.TRAVEL_SANCTION_DETAIL.TSD_DOC_NO=SDMLATTPAY.D_COM_DOC_DATA.DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=" + ModuleId + " AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void Add() {

        EditMode = EITLERPGLOBAL.ADD;

        SetFields(true);
        DisableToolbar();

        SetupApproval();

        clearFields();

        EITLERP.FeltSales.common.SelectFirstFree aList = new EITLERP.FeltSales.common.SelectFirstFree();
        aList.ModuleID = ModuleId;
        aList.FirstFreeNo = 372;
        FFNo = aList.FirstFreeNo;
        lbldoc.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        lblTitle1.setText("Travelling Sanction - " + lbldoc.getText());
        docdate.setText(EITLERPGLOBAL.getCurrentDate());
        docdate1.setText(EITLERPGLOBAL.getCurrentDateTimeDB());

        // OpgFinal.setSelected(true);
    }

    private void FormatGrid() {
        DataModel = new EITLTableModel();
        Table.removeAll();

        Table.setModel(DataModel);
        TableColumnModel ColModel = Table.getColumnModel();
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        //Add Columns to it
        DataModel.addColumn("Sr.No.");   //0
        DataModel.addColumn("Starting Place");   //1        
        DataModel.addColumn("Start Date");   //2
        DataModel.addColumn("Start Time");   //3
        DataModel.addColumn("Mode of Travel");   //4
        DataModel.addColumn("Fare Rs.");   //5        
        DataModel.addColumn("Place to Visit");   //6        
        DataModel.addColumn("Mill/Party Visit");   //7
        DataModel.addColumn("Arrival Date");   //8
        DataModel.addColumn("Arrival Time");   //9
        DataModel.addColumn("Seminar");   //10
        DataModel.addColumn("Days");   //11
        DataModel.addColumn("Rate");   //12
        DataModel.addColumn("Amount");   //13
        

        DataModel.SetReadOnly(0);
        DataModel.SetReadOnly(1);
        DataModel.SetReadOnly(2);
        DataModel.SetReadOnly(3);
        DataModel.SetReadOnly(4);
        DataModel.SetReadOnly(6);
        DataModel.SetReadOnly(7);
        DataModel.SetReadOnly(8);
        DataModel.SetReadOnly(9);
        DataModel.SetReadOnly(10);
        DataModel.SetReadOnly(11);
        //DataModel.SetReadOnly(12);
        DataModel.SetReadOnly(13);

//        TableColumn layerColumn = Table.getColumnModel().getColumn(2);        
//        JTextField datepckr= new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();        
//        layerColumn.setCellEditor(new DefaultCellEditor(datepckr));
    }

    private void Save() {

        if (Table.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Please Enter Data...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String Err = "";
        for (int k = 0; k <= Table.getRowCount() - 1; k++) {
            if (Table.getValueAt(k, 1).toString().equalsIgnoreCase("")) {
                Err = Err + "\n Select Starting Place at Row " + (k + 1);
            }
            if (Table.getValueAt(k, 2).toString().equalsIgnoreCase("")) {
                Err = Err + "\n Enter Starting Date at Row " + (k + 1);
            }
            if (Table.getValueAt(k, 3).toString().equalsIgnoreCase("")) {
                Err = Err + "\n Enter Starting Time at Row " + (k + 1);
            }
            if (Table.getValueAt(k, 4).toString().equalsIgnoreCase("")) {
                Err = Err + "\n Select Mode of Travel at Row " + (k + 1);
            }
            if (Table.getValueAt(k, 6).toString().equalsIgnoreCase("")) {
                Err = Err + "\n Select Place to Visit at Row " + (k + 1);
            }
            if (Table.getValueAt(k, 7).toString().equalsIgnoreCase("")) {
                Err = Err + "\n Select Transit Place at Row " + (k + 1);
            }
            if (Table.getValueAt(k, 8).toString().equalsIgnoreCase("")) {
                Err = Err + "\n Enter Arrival Date at Row " + (k + 1);
            }
            if (Table.getValueAt(k, 9).toString().equalsIgnoreCase("")) {
                Err = Err + "\n Enter Arrival Time at Row " + (k + 1);
            }
            if (Table.getValueAt(k, 10).toString().equalsIgnoreCase("")) {
                Err = Err + "\n Select Seminar at Row " + (k + 1);
            }
        }
        if (Err.length() > 0) {
            JOptionPane.showMessageDialog(this, Err, "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        SetData();

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //TravellingEntry.LoadData();
        if (EditMode == EITLERPGLOBAL.ADD) {
            if (TravellingEntry.Insert()) {
                if (OpgFinal.isSelected()) {
                    VoucherGenerate();
                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + TravellingEntry.LastError, " SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (TravellingEntry.Update()) {
                if (OpgFinal.isSelected()) {
                    VoucherGenerate();
                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + TravellingEntry.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();

    }

    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void Edit() {

        String DocumentNo = (String) TravellingEntry.getAttribute("TSD_DOC_NO").getString();

        if (TravellingEntry.IsEditable(EITLERPGLOBAL.gCompanyID, DocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateCombos();
            //GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            // SetupApproval();
            //ReasonResetReadonly();
            //cmbOrderReason.setEnabled(false);
            if (SDMLATTPAY.ApprovalFlow.IsCreator(ModuleId, DocumentNo)) {
                SetFields(true);
                txtEmpNoFocusLost(null);
            } else {
                EnableApproval();
            }
            //OpgFinal.setSelected(true);
        } else {
            JOptionPane.showMessageDialog(null, "You cannot edit this record. \n It is either approved/rejected or waiting approval for other user");
        }

    }

// find rate update by doc no
    public void Find(String docNo) {
        TravellingEntry.Filter(" TSD_DOC_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    public void FindEx(int pCompanyID, String docno) {
        TravellingEntry.Filter(" TSD_DOC_NO='" + docno + "'");
        TravellingEntry.MoveFirst();
        DisplayData();
    }

    private void Delete() {

    }

    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = SDMLATTPAY.ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, ModuleId, "");
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

    }

    private void SetFields(boolean pStat) {

        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        cmdAdd.setEnabled(false);
        cmdRemove.setEnabled(false);
        txtEmpNo.setEnabled(pStat);
        txtpurposevisit.setEnabled(pStat);

        if (data.getIntValueFromDB("SELECT DEPT_ID FROM DINESHMILLS.D_COM_USER_MASTER WHERE USER_ID=" + EITLERPGLOBAL.gNewUserID) == 16) {
            txtrmkaudit.setEnabled(pStat);
            advance.setEnabled(pStat);
        } else {
            txtrmkaudit.setEnabled(false);
            advance.setEnabled(false);
        }
        Table.setEnabled(pStat);
        if (!OpgReject.isSelected()) {
            SetupApproval();
        }
    }

    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    private void SetData() {

//      
        TravellingEntry.setAttribute("PREFIX", SelPrefix);
        TravellingEntry.setAttribute("SUFFIX", SelSuffix);
        TravellingEntry.setAttribute("FFNO", FFNo);
        TravellingEntry.setAttribute("TSD_DOC_NO", lbldoc.getText());

        DOC_NO = lbldoc.getText();

        TravellingEntry.setAttribute("TSD_DOC_NO", DOC_NO);
        TravellingEntry.setAttribute("TSD_DOC_DATE", docdate1.getText());
        TravellingEntry.setAttribute("TSD_PAY_EMP_NO", txtEmpNo.getText());
        TravellingEntry.setAttribute("TSD_NAME", txtEmpName.getText());
        TravellingEntry.setAttribute("TSD_DEPARTMENT", dept.getText());
        TravellingEntry.setAttribute("TSD_DESIGNATION", designation.getText());
        TravellingEntry.setAttribute("TSD_LEVEL", level.getText());
        if (ind.isSelected()) {
            TravellingEntry.setAttribute("TSD_CATEGORY", ind.getText());
        }
        if (gujod.isSelected()) {
            TravellingEntry.setAttribute("TSD_CATEGORY", gujod.getText());
        }
        if (gujcnt.isSelected()) {
            TravellingEntry.setAttribute("TSD_CATEGORY", gujcnt.getText());
        }
        TravellingEntry.setAttribute("TSD_PURPOSE_OF_VISIT", txtpurposevisit.getText());
        TravellingEntry.setAttribute("TSD_AUDIT_REMARK", txtrmkaudit.getText());
        TravellingEntry.setAttribute("TSD_TOTAL_FARE", fare.getText());
        TravellingEntry.setAttribute("TSD_TOTAL_EXPENSE", allowance.getText());
        TravellingEntry.setAttribute("TSD_TOTAL", total.getText());
        TravellingEntry.setAttribute("TSD_ADVANCE", advance.getText());

        TravellingEntry.colMRItems.clear();

        for (int i = 0; i < Table.getRowCount(); i++) {
            SDMLATTPAY.TravelAdvance.clsTravelEntryItem ObjItem = new SDMLATTPAY.TravelAdvance.clsTravelEntryItem();
            ObjItem.setAttribute("TSD_SR_NO", Table.getValueAt(i, 0).toString());
            ObjItem.setAttribute("TSD_START_PLACE", Table.getValueAt(i, 1).toString());
            ObjItem.setAttribute("TSD_START_DATE", Table.getValueAt(i, 2).toString());
            ObjItem.setAttribute("TSD_START_TIME", Table.getValueAt(i, 3).toString());
            ObjItem.setAttribute("TSD_TRAVEL_MODE", Table.getValueAt(i, 4).toString());
            ObjItem.setAttribute("TSD_FARE", Table.getValueAt(i, 5).toString());
            ObjItem.setAttribute("TSD_VISIT_PLACE", Table.getValueAt(i, 6).toString());
            ObjItem.setAttribute("TSD_IS_VISIT_PLACE", Table.getValueAt(i, 7).toString());
            ObjItem.setAttribute("TSD_ARRIVAL_DATE", Table.getValueAt(i, 8).toString());
            ObjItem.setAttribute("TSD_ARRIVAL_TIME", Table.getValueAt(i, 9).toString());
            ObjItem.setAttribute("TSD_SEMINAR", Table.getValueAt(i, 10).toString());
            ObjItem.setAttribute("TSD_DAYS", Table.getValueAt(i, 11).toString());
            ObjItem.setAttribute("TSD_RATE", Table.getValueAt(i, 12).toString());
            ObjItem.setAttribute("TSD_AMOUNT", Table.getValueAt(i, 13).toString());
            TravellingEntry.colMRItems.put(Integer.toString(TravellingEntry.colMRItems.size() + 1), ObjItem);
        }

        TravellingEntry.setAttribute("MODULE_ID", ModuleId);
        TravellingEntry.setAttribute("USER_ID", EITLERPGLOBAL.gNewUserID);

        TravellingEntry.setAttribute("REJECTED_REMARKS", txtToRemarks.getText());
        TravellingEntry.setAttribute("REMARKS", "");
        TravellingEntry.setAttribute("APPROVAL_STATUS", "");
        TravellingEntry.setAttribute("APPROVER_REMARKS", txtFromRemarks.getText());
        TravellingEntry.setAttribute("ENTRY_DATE", EITLERPGLOBAL.getCurrentDateDB());

        //----- Update Approval Specific Fields -----------//
        TravellingEntry.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        TravellingEntry.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        TravellingEntry.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        TravellingEntry.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            TravellingEntry.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            TravellingEntry.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            TravellingEntry.setAttribute("APPROVAL_STATUS", "R");
            TravellingEntry.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            TravellingEntry.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            TravellingEntry.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            TravellingEntry.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        } else {
            TravellingEntry.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            TravellingEntry.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
            TravellingEntry.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
            TravellingEntry.setAttribute("UPDATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JLabel advance;
    private javax.swing.JLabel allowance;
    private javax.swing.JLabel balance;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JRadioButton cashpay;
    private javax.swing.JRadioButton cheque;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdNextToTab3;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel dept;
    private javax.swing.JLabel designation;
    private javax.swing.JLabel docdate;
    private javax.swing.JLabel docdate1;
    private javax.swing.JRadioButton epayment;
    private javax.swing.JLabel fare;
    private javax.swing.JRadioButton gujcnt;
    private javax.swing.JRadioButton gujod;
    private javax.swing.JRadioButton ind;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblStatus1;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JLabel lbldoc;
    private javax.swing.JLabel level;
    private javax.swing.JLabel total;
    private javax.swing.ButtonGroup travel;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtEmpName;
    private javax.swing.JTextField txtEmpNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextArea txtpurposevisit;
    private javax.swing.JTextArea txtrmkaudit;
    // End of variables declaration//GEN-END:variables
private void RearrangeSrNo() {
        String mno;
        for (int m = 0; m < Table.getRowCount(); m++) {
            mno = String.valueOf(m + 1);
            Table.setValueAt(mno, m, 0);
        }
    }

    private void CalcExpen() {
        String vp, ct_cls = "", st, et, sql;
        double totexp = 0, rt = 0, alwnc = 0, mfare = 0, minrt = 0, madvance = 0;
        int calc = 0, m;
        try {
            if (Table.getRowCount() > 0) {
                for (m = 0; m < Table.getRowCount(); m++) {
                    Table.setValueAt("", m, 11);
                    Table.setValueAt("", m, 12);
                    Table.setValueAt("", m, 13);
                }
                SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
                Date date1, date2;
                long diff, diffHours, diffDays;

                st = Table.getValueAt(0, 2).toString() + " " + Table.getValueAt(0, 3) + ":00";

                String seminar;
                for (m = 0; m < Table.getRowCount(); m++) {
                    try {
                        mfare = mfare + Double.parseDouble(Table.getValueAt(m, 5).toString());
                    } catch (Exception a) {

                    }
                    if (calc == 1 && m < (Table.getRowCount() - 1)
                            && (!ct_cls.equalsIgnoreCase(
                                    data.getStringValueFromDB("SELECT CITY_CLASS FROM SDMLATTPAY.CITY "
                                            + "WHERE CITY_NAME='" + Table.getValueAt(m, 6).toString() + "'"))
                            //&& Table.getValueAt(m, 7).toString().equalsIgnoreCase("YES")
                            )) {
                        et = Table.getValueAt(m, 2).toString() + " " + Table.getValueAt(m, 3) + ":00";
                        date1 = format.parse(st);
                        date2 = format.parse(et);
                        diff = date2.getTime() - date1.getTime();
                        diffHours = diff / (60 * 60 * 1000) % 24;
                        diffDays = diff / (24 * 60 * 60 * 1000);
                        alwnc = 0;
                        //totexp = totexp + (diffDays * rt);
                        if (minrt > rt) {
                            minrt = rt;
                        }
                        alwnc = (diffDays * rt);
                        if (gujod.isSelected()) {
                            if (diffDays == 0 && diffHours > 0) {
                                //totexp = totexp + rt;
                                alwnc = rt;
                            }
                        }
                        if (ind.isSelected() || gujcnt.isSelected()) {
                            if (diffHours >= 18) {
                                //totexp = totexp + rt;
                                alwnc = alwnc + rt;
                            } else if (diffHours >= 12) {
                                //totexp = totexp + (rt * 0.75);
                                alwnc = alwnc + (rt * 0.75);
                            } else if (diffHours >= 6) {
                                //totexp = totexp + (rt * 0.50);
                                alwnc = alwnc + (rt * 0.50);
                            }
                        }
                        seminar = Table.getValueAt(m, 10).toString();
                        if (seminar.equalsIgnoreCase("Only Lunch excl. stay & dinner")) {
                            alwnc = alwnc * 0.80;
                        }
                        if (seminar.equalsIgnoreCase("Lunch & Dinner excl. stay")) {
                            alwnc = alwnc * 0.60;
                        }
                        if (seminar.equalsIgnoreCase("Stay incl. Lunch & Dinner")) {
                            alwnc = alwnc * 0.20;
                        }
                        totexp = totexp + alwnc;

                        System.out.println("Row " + m);
                        System.out.print(" Day " + diffDays);
                        System.out.print(" Hours " + diffHours);
                        System.out.print(" Rate " + rt);
                        System.out.println("Total Expen." + totexp);
                        Table.setValueAt("Day [" + diffDays + "] Hour [" + diffHours + "]", m - 1, 11);
                        Table.setValueAt(rt, m - 1, 12);
                        Table.setValueAt(alwnc, m - 1, 13);
                        st = Table.getValueAt(m, 2).toString() + " " + Table.getValueAt(m, 3) + ":00";
                        calc = 0;
                    }
                    vp = Table.getValueAt(m, 7).toString();
                    if (vp.equalsIgnoreCase("YES")) {
                        calc = 1;
                        ct_cls = data.getStringValueFromDB("SELECT CITY_CLASS FROM SDMLATTPAY.CITY "
                                + "WHERE CITY_NAME='" + Table.getValueAt(m, 6).toString() + "'");
                        sql = "SELECT TA_AMOUNT FROM SDMLATTPAY.TRAVELLING_ALLOWANCE A ";
                        if (ind.isSelected()) {
                            sql = sql + "WHERE TA_STATE='OTHER_GUJARAT' ";
                            sql = sql + "AND TA_CLASS='" + data.getStringValueFromDB("SELECT CITY_CLASS FROM SDMLATTPAY.CITY "
                                    + "WHERE CITY_NAME='" + Table.getValueAt(m, 6).toString() + "'") + "'";
                        }
                        if (gujod.isSelected()) {
                            sql = sql + "WHERE TA_STATE='GUJARAT' ";
                            if (data.getStringValueFromDB("SELECT CITY_CLASS FROM SDMLATTPAY.CITY "
                                    + "WHERE CITY_NAME='" + Table.getValueAt(m, 6).toString() + "'").equalsIgnoreCase("D")) {
                                sql = sql + "AND TA_CLASS='D'";
                            } else {
                                if (Table.getValueAt(m, 4).toString().equalsIgnoreCase("BY COMPANY VEHICLE")) {
                                    sql = sql + "AND TA_CLASS='A'";
                                } else {
                                    sql = sql + "AND TA_CLASS='B'";
                                }
                            }
                        }
                        if (gujcnt.isSelected()) {

                            if (data.getStringValueFromDB("SELECT CITY_CLASS FROM SDMLATTPAY.CITY "
                                    + "WHERE CITY_NAME='" + Table.getValueAt(m, 6).toString() + "'").equalsIgnoreCase("D")) {
                                sql = sql + "WHERE TA_STATE='GUJARAT' ";
                                sql = sql + "AND TA_CLASS='D'";
                            } else {
                                if (Table.getValueAt(m, 4).toString().equalsIgnoreCase("BY COMPANY VEHICLE")) {
                                    sql = sql + "WHERE TA_STATE='GUJARAT' ";
                                    sql = sql + "AND TA_CLASS='C'";
                                } else {
                                    sql = sql + "WHERE TA_STATE='OTHER_GUJARAT' ";
                                    sql = sql + "AND TA_CLASS='C'";
                                }
                            }
                        }
                        sql = sql + " AND TA_START_DATE <= CURDATE() AND ( TA_END_DATE>= CURDATE() OR TA_END_DATE IS NULL OR TA_END_DATE='0000-00-00') "
                                + "AND TA_LEVEL='" + level.getText() + "' ";

                        rt = data.getDoubleValueFromDB(sql);
                        if (minrt == 0) {
                            minrt = rt;
                        }
                    }
                }
                m--;
                et = Table.getValueAt(m, 8).toString() + " " + Table.getValueAt(m, 9) + ":00";
                date1 = format.parse(st);
                date2 = format.parse(et);
                diff = date2.getTime() - date1.getTime();
                diffHours = diff / (60 * 60 * 1000) % 24;
                diffDays = diff / (24 * 60 * 60 * 1000);
                alwnc = 0;
                //totexp = totexp + (diffDays * rt);
                if (minrt > rt) {
                    minrt = rt;
                }
                alwnc = (diffDays * rt);
                if (gujod.isSelected()) {
                    if (diffDays == 0 && diffHours > 0) {
                        //totexp = totexp + rt;
                        alwnc = rt;
                    }
                }
                if (ind.isSelected() || gujcnt.isSelected()) {
                    if (diffHours >= 18) {
                        //totexp = totexp + rt;
                        alwnc = alwnc + rt;
                    } else if (diffHours >= 12) {
                        //totexp = totexp + (rt * 0.75);
                        alwnc = alwnc + (rt * 0.75);
                    } else if (diffHours >= 6) {
                        //totexp = totexp + (rt * 0.50);
                        alwnc = alwnc + (rt * 0.50);
                    }
                }
                seminar = Table.getValueAt(m, 10).toString();
                if (seminar.equalsIgnoreCase("Only Lunch excl. stay & dinner")) {
                    alwnc = alwnc * 0.80;
                }
                if (seminar.equalsIgnoreCase("Lunch & Dinner excl. stay")) {
                    alwnc = alwnc * 0.60;
                }
                if (seminar.equalsIgnoreCase("Stay incl. Lunch & Dinner")) {
                    alwnc = alwnc * 0.20;
                }
                totexp = totexp + alwnc;

                System.out.println("Row123 " + m);
                System.out.print(" Day " + diffDays);
                System.out.print(" Hours " + diffHours);
                System.out.print(" Rate " + rt);
                System.out.println("Total Expen." + totexp);
                System.out.println("Min Rate:" + minrt);
                Table.setValueAt("Day [" + diffDays + "] Hour [" + diffHours + "]", m, 11);
                Table.setValueAt(rt, m, 12);
                Table.setValueAt(alwnc, m, 13);

                st = Table.getValueAt(0, 8).toString() + " " + Table.getValueAt(0, 9) + ":00";
                et = Table.getValueAt((Table.getRowCount() - 1), 8).toString() + " " + Table.getValueAt((Table.getRowCount() - 1), 9) + ":00";
                date1 = format.parse(st);
                date2 = format.parse(et);
                diff = date2.getTime() - date1.getTime();
                diffHours = diff / (60 * 60 * 1000) % 24;
                diffDays = diff / (24 * 60 * 60 * 1000);
                if (diffDays > 2) {
                    madvance = (totexp + mfare) - (minrt * 2);
                    madvance = madvance - (madvance % 100);
                    advance.setText(String.valueOf(madvance));
                }
            }
            allowance.setText(String.valueOf(totexp));
            fare.setText(String.valueOf(mfare));
            total.setText(String.valueOf(totexp + mfare));

        } catch (Exception e) {
        }

    }

    private void PreviewReport() {

        try {
            Connection Conn = EITLERP.data.getConn();
            HashMap parameterMap = new HashMap();

            EITLERP.ReportRegister rpt = new EITLERP.ReportRegister(parameterMap, Conn);
            String strSQL = "SELECT * FROM SDMLATTPAY.TRAVEL_SANCTION_DETAIL "
                    + "WHERE TSD_DOC_NO='" + lbldoc.getText() + "' ORDER BY TSD_SR_NO";
            rpt.setReportName("/SDMLATTPAY/TravelAdvance/Travelling.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void VoucherGenerate() {
        try {
            double mbalance, madvance;
            try {
                mbalance = Double.parseDouble(balance.getText());
            } catch (Exception e) {
                mbalance = 0;
            }
            try {
                madvance = Double.parseDouble(advance.getText());
            } catch (Exception e) {
                madvance = 0;
            }

            String frmyr = String.valueOf(EITLERPGLOBAL.getCurrentFinYear());
            String fyr = frmyr.substring(2, 4);
            Connection Conn = data.getConn();
            Statement Stmt = Conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String draftNo = "";
            String draftDate = EITLERPGLOBAL.getCurrentDateDB();
            int counter = 1;
            int draftSrNo = 0;
            String SQL, sqlH, sqlD, sqlE, sqlDoc;
            if (madvance > 0) {
                if (data.IsRecordExist("SELECT VOUCHER_NO FROM D_FIN_VOUCHER_HEADER "
                        + "WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + "  AND LEFT(VOUCHER_NO,2) = 'JV'", FinanceGlobal.FinURL)) {
                    ResultSet rsResultSet = Stmt.executeQuery("SELECT VOUCHER_NO,SUBSTRING(VOUCHER_NO,1,6) AS CNV,RIGHT(VOUCHER_NO,5) AS CNSRNO "
                            + "FROM (SELECT MAX(VOUCHER_NO) AS VOUCHER_NO FROM FINANCE.D_FIN_VOUCHER_HEADER "
                            + "WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + "  AND LEFT(VOUCHER_NO,2) = 'JV' "
                            + "AND SUBSTRING(VOUCHER_NO,5,2)=22 AND SUBSTRING(VOUCHER_NO,3,2)='" + fyr + "' ) AS A");
                    String LastDocNo = "";
                    String LastcnvNo = "";

                    rsResultSet.first();
                    while (!rsResultSet.isAfterLast() && rsResultSet.getRow() > 0) {
                        LastDocNo = rsResultSet.getString("VOUCHER_NO");
                        LastcnvNo = rsResultSet.getString("CNV");
                        draftSrNo = rsResultSet.getInt("CNSRNO");

                        rsResultSet.next();
                    }

                }

                Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_FIN_VOUCHER_HEADER");
//            data.Execute("UPDATE SDMLATTPAY.TRAVEL_VOUCHER_DETAIL "
//                    + "SET TSD_VOUCHER_DATE=NOW(),TSD_VOUCHER_NO=COALESCE(TSD_VOUCHER_NO,'')+CONCAT('JV','" + fyr + "',2200000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))) "
//                    + "WHERE TSD_DOC_NO='" + lbldoc.getText() + "'");
//            data.Execute("UPDATE SDMLATTPAY.TRAVEL_VOUCHER_DETAIL_H "
//                    + "SET TSD_VOUCHER_DATE=NOW(),TSD_VOUCHER_NO=COALESCE(TSD_VOUCHER_NO,'')+CONCAT('JV','" + fyr + "',2200000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))) "
//                    + "WHERE TSD_DOC_NO='" + lbldoc.getText() + "'");

                SQL = "INSERT INTO TEMP_DATABASE.T_FIN_VOUCHER_HEADER "
                        + "(COMPANY_ID,VOUCHER_NO,BOOK_CODE,HIERARCHY_ID,REMARKS,VOUCHER_DATE,VOUCHER_TYPE,EXCLUDE_IN_ADJ,CHEQUE_AMOUNT) "
                        + "SELECT 2,CONCAT('JV','" + fyr + "',2200000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),22,"
                        + "1259,CONCAT('TRAVELING EXPENSE OF ',TSD_NAME,' TOUR ON ',DATE_FORMAT(MIN(TSD_START_DATE),'%d/%m/%Y'),' TO ',"
                        + "DATE_FORMAT(MAX(TSD_ARRIVAL_DATE),'%d/%m/%Y'),'.'),CURDATE(),9,1,0 "
                        + "FROM SDMLATTPAY.TRAVEL_VOUCHER_DETAIL AS D "
                        + " where TSD_DOC_NO='" + lbldoc.getText() + "'";
                //System.out.println(SQL);

                Stmt.execute(SQL);

                Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_FIN_VOUCHER_DETAIL");

                Stmt.execute("INSERT INTO TEMP_DATABASE.T_FIN_VOUCHER_DETAIL "
                        + "(COMPANY_ID,VOUCHER_NO,EFFECT,MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,AMOUNT,MODULE_ID,REF_COMPANY_ID,"
                        + "IS_DEDUCTION,INVOICE_AMOUNT,SR_NO) "
                        + "SELECT 2,CONCAT('JV','" + fyr + "',2200000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                        + "'D','439019','',MAX(TSD_TOTAL_FARE),0,0,0,"
                        + "0,1  "
                        + "FROM SDMLATTPAY.TRAVEL_VOUCHER_DETAIL "
                        + "WHERE TSD_DOC_NO='" + lbldoc.getText() + "'  "
                        + "UNION "
                        + "SELECT 2,CONCAT('JV','" + fyr + "',2200000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                        + "'D','439020','',MAX(TSD_TOTAL_EXPENSE),0,0,0,"
                        + "0,2  "
                        + "FROM SDMLATTPAY.TRAVEL_VOUCHER_DETAIL "
                        + "WHERE TSD_DOC_NO='" + lbldoc.getText() + "'  "
                        + "UNION "
                        + "SELECT 2,CONCAT('JV','" + fyr + "',2200000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                        + "'C','231077','',MAX(TSD_TOTAL),0,0,0,"
                        + "0,3  "
                        + "FROM SDMLATTPAY.TRAVEL_VOUCHER_DETAIL "
                        + "WHERE TSD_DOC_NO='" + lbldoc.getText() + "'  ");

                Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX");

                Stmt.execute("INSERT INTO TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX "
                        + "(COMPANY_ID,VOUCHER_NO,EFFECT,MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,AMOUNT,MODULE_ID,REF_COMPANY_ID,"
                        + "IS_DEDUCTION,INVOICE_AMOUNT,SR_NO) "
                        + "SELECT 2,CONCAT('JV','" + fyr + "',2200000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                        + "'D','439019','',MAX(TSD_TOTAL_FARE),0,0,0,"
                        + "0,1  "
                        + "FROM SDMLATTPAY.TRAVEL_VOUCHER_DETAIL "
                        + "WHERE TSD_DOC_NO='" + lbldoc.getText() + "'  "
                        + "UNION "
                        + "SELECT 2,CONCAT('JV','" + fyr + "',2200000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                        + "'D','439020','',MAX(TSD_TOTAL_EXPENSE),0,0,0,"
                        + "0,2  "
                        + "FROM SDMLATTPAY.TRAVEL_VOUCHER_DETAIL "
                        + "WHERE TSD_DOC_NO='" + lbldoc.getText() + "'  "
                        + "UNION "
                        + "SELECT 2,CONCAT('JV','" + fyr + "',2200000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                        + "'C','231077','',MAX(TSD_TOTAL),0,0,0,"
                        + "0,3  "
                        + "FROM SDMLATTPAY.TRAVEL_VOUCHER_DETAIL "
                        + "WHERE TSD_DOC_NO='" + lbldoc.getText() + "'  ");

                Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_COM_DOC_DATA");

                Stmt.execute("INSERT INTO  TEMP_DATABASE.T_COM_DOC_DATA "
                        + "SELECT 2,89,CONCAT('JV','" + fyr + "',2200000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                        + "NOW(),USER_ID,CASE WHEN CREATOR =1 THEN 'W' ELSE 'P'  END, CASE WHEN CREATOR =0 THEN 'A' ELSE 'C'  END,'',"
                        + "SR_NO,0,'','0000-00-00','0000-00-00',0,'0000-00-00'  "
                        + "FROM DINESHMILLS.D_COM_HIERARCHY_RIGHTS A,TEMP_DATABASE.T_FIN_VOUCHER_HEADER B WHERE B.HIERARCHY_ID =1259 AND "
                        + "A.HIERARCHY_ID = B.HIERARCHY_ID");

                Stmt.execute("UPDATE  TEMP_DATABASE.T_FIN_VOUCHER_DETAIL SET  INVOICE_NO='',INVOICE_DATE='0000-00-00' , INVOICE_AMOUNT=0 ,"
                        + "PO_NO ='',PO_DATE='0000-00-00' ");

                Stmt.execute("UPDATE  TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX SET  INVOICE_NO='',INVOICE_DATE='0000-00-00' ,INVOICE_AMOUNT=0,"
                        + "PO_NO='',PO_DATE='0000-00-00'  ");

                sqlH = "INSERT INTO FINANCE.D_FIN_VOUCHER_HEADER SELECT * FROM TEMP_DATABASE.T_FIN_VOUCHER_HEADER";
                Stmt.execute(sqlH);

                sqlD = "INSERT INTO FINANCE.D_FIN_VOUCHER_DETAIL SELECT * FROM TEMP_DATABASE.T_FIN_VOUCHER_DETAIL";
                Stmt.execute(sqlD);

                sqlE = "INSERT INTO FINANCE.D_FIN_VOUCHER_DETAIL_EX SELECT * FROM TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX";
                Stmt.execute(sqlE);

                sqlDoc = "INSERT INTO DINESHMILLS.D_COM_DOC_DATA SELECT * FROM TEMP_DATABASE.T_COM_DOC_DATA";
                Stmt.execute(sqlDoc);
            }
            //PY
            if (epayment.isSelected() && Double.parseDouble(balance.getText()) > 0) {
                if (data.IsRecordExist("SELECT VOUCHER_NO FROM D_FIN_VOUCHER_HEADER "
                        + "WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + "  AND LEFT(VOUCHER_NO,2) = 'PY'", FinanceGlobal.FinURL)) {
                    ResultSet rsResultSet = Stmt.executeQuery("SELECT VOUCHER_NO,SUBSTRING(VOUCHER_NO,1,6) AS CNV,RIGHT(VOUCHER_NO,5) AS CNSRNO "
                            + "FROM (SELECT MAX(VOUCHER_NO) AS VOUCHER_NO FROM FINANCE.D_FIN_VOUCHER_HEADER "
                            + "WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + "  AND LEFT(VOUCHER_NO,2) = 'PY' "
                            + "AND SUBSTRING(VOUCHER_NO,5,2)=99 AND SUBSTRING(VOUCHER_NO,3,2)='" + fyr + "' ) AS A");
                    String LastDocNo = "";
                    String LastcnvNo = "";
                    draftSrNo = 0;
                    rsResultSet.first();
                    while (!rsResultSet.isAfterLast() && rsResultSet.getRow() > 0) {
                        LastDocNo = rsResultSet.getString("VOUCHER_NO");
                        LastcnvNo = rsResultSet.getString("CNV");
                        draftSrNo = rsResultSet.getInt("CNSRNO");

                        rsResultSet.next();
                    }

                }

                Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_FIN_VOUCHER_HEADER");
//                data.Execute("UPDATE SDMLATTPAY.TRAVEL_SANCTION_DETAIL "
//                        + "SET TSD_VOUCHER_DATE=NOW(),TSD_VOUCHER_NO=COALESCE(TSD_VOUCHER_NO,'')+' , '+CONCAT('PY','" + fyr + "',5800000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))) "
//                        + "WHERE TSD_DOC_NO='" + lbldoc.getText() + "'");
//                data.Execute("UPDATE SDMLATTPAY.TRAVEL_SANCTION_DETAIL_H "
//                        + "SET TSD_VOUCHER_DATE=NOW(),TSD_VOUCHER_NO=COALESCE(TSD_VOUCHER_NO,'')+' , '+CONCAT('PY','" + fyr + "',5800000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))) "
//                        + "WHERE TSD_DOC_NO='" + lbldoc.getText() + "'");

                SQL = "INSERT INTO TEMP_DATABASE.T_FIN_VOUCHER_HEADER "
                        + "(COMPANY_ID,VOUCHER_NO,BOOK_CODE,HIERARCHY_ID,REMARKS,VOUCHER_DATE,VOUCHER_TYPE,EXCLUDE_IN_ADJ,CHEQUE_AMOUNT) "
                        + "SELECT 2,CONCAT('PY','" + fyr + "',9900000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),99,"
                        + "1109,CONCAT('DIFFERANCE AMOUNTPAID TO ',TSD_NAME,' TOUR ON ',DATE_FORMAT(MIN(TSD_START_DATE),'%d/%m/%Y'),' TO ',"
                        + "DATE_FORMAT(MAX(TSD_ARRIVAL_DATE),'%d/%m/%Y'),'. BANK A/C NO.',EMP_BANK_ACCOUNT_NO,'.'),"
                        + "CURDATE(),2,0,MAX(TSD_TOTAL)-MAX(TSD_ADVANCE) "
                        + "FROM SDMLATTPAY.TRAVEL_VOUCHER_DETAIL AS D "
                        + "LEFT JOIN (SELECT PAY_EMP_NO,EMP_BANK_ACCOUNT_NO FROM SDMLATTPAY.ATTPAY_EMPMST) AS M "
                        + "ON D.TSD_PAY_EMP_NO=PAY_EMP_NO "
                        + " where TSD_DOC_NO='" + lbldoc.getText() + "'";
                //System.out.println(SQL);

                Stmt.execute(SQL);

                Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_FIN_VOUCHER_DETAIL");

                Stmt.execute("INSERT INTO TEMP_DATABASE.T_FIN_VOUCHER_DETAIL "
                        + "(COMPANY_ID,VOUCHER_NO,EFFECT,MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,AMOUNT,MODULE_ID,REF_COMPANY_ID,"
                        + "IS_DEDUCTION,INVOICE_AMOUNT,SR_NO) "
                        + "SELECT 2,CONCAT('PY','" + fyr + "',9900000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                        + "'D','231077',''," + mbalance + ",0,0,0,"
                        + mbalance + ",1  "
                        + "FROM DUAL "
                        + "UNION "
                        + "SELECT 2,CONCAT('PY','" + fyr + "',9900000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                        + "'C','999999',''," + mbalance + ",0,0,0,"
                        + mbalance + ",2  "
                        + "FROM DUAL ");

                Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX");

                Stmt.execute("INSERT INTO TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX "
                        + "(COMPANY_ID,VOUCHER_NO,EFFECT,MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,AMOUNT,MODULE_ID,REF_COMPANY_ID,"
                        + "IS_DEDUCTION,INVOICE_AMOUNT,SR_NO) "
                        + "SELECT 2,CONCAT('PY','" + fyr + "',9900000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                        + "'D','231077',''," + mbalance + ",0,0,0,"
                        + mbalance + ",1  "
                        + "FROM DUAL "
                        + "UNION "
                        + "SELECT 2,CONCAT('PY','" + fyr + "',9900000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                        + "'C','999999',''," + mbalance + ",0,0,0,"
                        + mbalance + ",2  "
                        + "FROM DUAL ");

                Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_COM_DOC_DATA");

                Stmt.execute("INSERT INTO  TEMP_DATABASE.T_COM_DOC_DATA "
                        + "SELECT 2,66,CONCAT('PY','" + fyr + "',9900000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                        + "NOW(),USER_ID,CASE WHEN CREATOR =1 THEN 'W' ELSE 'P'  END, CASE WHEN CREATOR =0 THEN 'A' ELSE 'C'  END,'',"
                        + "SR_NO,0,'','0000-00-00','0000-00-00',0,'0000-00-00'  "
                        + "FROM DINESHMILLS.D_COM_HIERARCHY_RIGHTS A,TEMP_DATABASE.T_FIN_VOUCHER_HEADER B WHERE B.HIERARCHY_ID =1109 AND "
                        + "A.HIERARCHY_ID = B.HIERARCHY_ID");

                Stmt.execute("UPDATE  TEMP_DATABASE.T_FIN_VOUCHER_DETAIL SET  INVOICE_NO='',INVOICE_DATE='0000-00-00' , INVOICE_AMOUNT=0 ,"
                        + "PO_NO ='',PO_DATE='0000-00-00' ");

                Stmt.execute("UPDATE  TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX SET  INVOICE_NO='',INVOICE_DATE='0000-00-00' ,INVOICE_AMOUNT=0,"
                        + "PO_NO='',PO_DATE='0000-00-00'  ");

                sqlH = "INSERT INTO FINANCE.D_FIN_VOUCHER_HEADER SELECT * FROM TEMP_DATABASE.T_FIN_VOUCHER_HEADER";
                Stmt.execute(sqlH);

                sqlD = "INSERT INTO FINANCE.D_FIN_VOUCHER_DETAIL SELECT * FROM TEMP_DATABASE.T_FIN_VOUCHER_DETAIL";
                Stmt.execute(sqlD);

                sqlE = "INSERT INTO FINANCE.D_FIN_VOUCHER_DETAIL_EX SELECT * FROM TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX";
                Stmt.execute(sqlE);

                sqlDoc = "INSERT INTO DINESHMILLS.D_COM_DOC_DATA SELECT * FROM TEMP_DATABASE.T_COM_DOC_DATA";
                Stmt.execute(sqlDoc);
            }

            //cs
            if (cashpay.isSelected() && Double.parseDouble(balance.getText()) > 0) {

                if (data.IsRecordExist("SELECT VOUCHER_NO FROM D_FIN_VOUCHER_HEADER "
                        + "WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + "  AND LEFT(VOUCHER_NO,2) = 'CS'", FinanceGlobal.FinURL)) {
                    ResultSet rsResultSet = Stmt.executeQuery("SELECT VOUCHER_NO,SUBSTRING(VOUCHER_NO,1,6) AS CNV,RIGHT(VOUCHER_NO,5) AS CNSRNO "
                            + "FROM (SELECT MAX(VOUCHER_NO) AS VOUCHER_NO FROM FINANCE.D_FIN_VOUCHER_HEADER "
                            + "WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + "  AND LEFT(VOUCHER_NO,2) = 'CS' "
                            + "AND SUBSTRING(VOUCHER_NO,5,2)=30 AND SUBSTRING(VOUCHER_NO,3,2)='" + fyr + "' ) AS A");
                    String LastDocNo = "";
                    String LastcnvNo = "";
                    draftSrNo = 0;
                    rsResultSet.first();
                    while (!rsResultSet.isAfterLast() && rsResultSet.getRow() > 0) {
                        LastDocNo = rsResultSet.getString("VOUCHER_NO");
                        LastcnvNo = rsResultSet.getString("CNV");
                        draftSrNo = rsResultSet.getInt("CNSRNO");

                        rsResultSet.next();
                    }
                }
                if (mbalance < 10000) {

                    Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_FIN_VOUCHER_HEADER");
//                data.Execute("UPDATE SDMLATTPAY.TRAVEL_SANCTION_DETAIL "
//                        + "SET TSD_VOUCHER_DATE=NOW(),TSD_VOUCHER_NO=COALESCE(TSD_VOUCHER_NO,'')+' , '+CONCAT('CS','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))) "
//                        + "WHERE TSD_DOC_NO='" + lbldoc.getText() + "'");
//                data.Execute("UPDATE SDMLATTPAY.TRAVEL_SANCTION_DETAIL_H "
//                        + "SET TSD_VOUCHER_DATE=NOW(),TSD_VOUCHER_NO=COALESCE(TSD_VOUCHER_NO,'')+' , '+CONCAT('CS','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))) "
//                        + "WHERE TSD_DOC_NO='" + lbldoc.getText() + "'");

                    SQL = "INSERT INTO TEMP_DATABASE.T_FIN_VOUCHER_HEADER "
                            + "(COMPANY_ID,VOUCHER_NO,BOOK_CODE,HIERARCHY_ID,REMARKS,VOUCHER_DATE,VOUCHER_TYPE,EXCLUDE_IN_ADJ,CHEQUE_AMOUNT) "
                            + "SELECT 2,CONCAT('CS','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),30,"
                            + "1243,CONCAT('TRAVELLING EXPENSE TO ',TSD_NAME,' TOUR ON ',DATE_FORMAT(MIN(TSD_START_DATE),'%d/%m/%Y'),' TO ',"
                            + "DATE_FORMAT(MAX(TSD_ARRIVAL_DATE),'%d/%m/%Y'),'.'),"
                            + "CURDATE(),4,0," + mbalance + " "
                            + "FROM SDMLATTPAY.TRAVEL_VOUCHER_DETAIL AS D "
                            + " where TSD_DOC_NO='" + lbldoc.getText() + "'";
                    //System.out.println(SQL);

                    Stmt.execute(SQL);

                    Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_FIN_VOUCHER_DETAIL");

                    Stmt.execute("INSERT INTO TEMP_DATABASE.T_FIN_VOUCHER_DETAIL "
                            + "(COMPANY_ID,VOUCHER_NO,EFFECT,MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,AMOUNT,MODULE_ID,REF_COMPANY_ID,"
                            + "IS_DEDUCTION,INVOICE_AMOUNT,SR_NO) "
                            + "SELECT 2,CONCAT('CS','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                            + "'D','439020',''," + mbalance + ",0,0,0,"
                            + "0,1  "
                            + "FROM DUAL "
                            + "UNION "
                            + "SELECT 2,CONCAT('CS','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                            + "'C','212012',''," + mbalance + ",0,0,0,"
                            + "0,2  "
                            + "FROM DUAL ");

                    Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX");

                    Stmt.execute("INSERT INTO TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX "
                            + "(COMPANY_ID,VOUCHER_NO,EFFECT,MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,AMOUNT,MODULE_ID,REF_COMPANY_ID,"
                            + "IS_DEDUCTION,INVOICE_AMOUNT,SR_NO) "
                            + "SELECT 2,CONCAT('CS','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                            + "'D','439020',''," + mbalance + ",0,0,0,"
                            + "0,1  "
                            + "FROM DUAL "
                            + "UNION "
                            + "SELECT 2,CONCAT('CS','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                            + "'C','212012',''," + mbalance + ",0,0,0,"
                            + "0,2  "
                            + "FROM DUAL ");

                    Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_COM_DOC_DATA");

                    Stmt.execute("INSERT INTO  TEMP_DATABASE.T_COM_DOC_DATA "
                            + "SELECT 2,67,CONCAT('CS','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                            + "NOW(),USER_ID,CASE WHEN CREATOR =1 THEN 'W' ELSE 'P'  END, CASE WHEN CREATOR =0 THEN 'A' ELSE 'C'  END,'',"
                            + "SR_NO,0,'','0000-00-00','0000-00-00',0,'0000-00-00'  "
                            + "FROM DINESHMILLS.D_COM_HIERARCHY_RIGHTS A,TEMP_DATABASE.T_FIN_VOUCHER_HEADER B WHERE B.HIERARCHY_ID =1243 AND "
                            + "A.HIERARCHY_ID = B.HIERARCHY_ID");

                    Stmt.execute("UPDATE  TEMP_DATABASE.T_FIN_VOUCHER_DETAIL SET  INVOICE_NO='',INVOICE_DATE='0000-00-00' , INVOICE_AMOUNT=0 ,"
                            + "PO_NO ='',PO_DATE='0000-00-00' ");

                    Stmt.execute("UPDATE  TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX SET  INVOICE_NO='',INVOICE_DATE='0000-00-00' ,INVOICE_AMOUNT=0,"
                            + "PO_NO='',PO_DATE='0000-00-00'  ");

                    sqlH = "INSERT INTO FINANCE.D_FIN_VOUCHER_HEADER SELECT * FROM TEMP_DATABASE.T_FIN_VOUCHER_HEADER";
                    Stmt.execute(sqlH);

                    sqlD = "INSERT INTO FINANCE.D_FIN_VOUCHER_DETAIL SELECT * FROM TEMP_DATABASE.T_FIN_VOUCHER_DETAIL";
                    Stmt.execute(sqlD);

                    sqlE = "INSERT INTO FINANCE.D_FIN_VOUCHER_DETAIL_EX SELECT * FROM TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX";
                    Stmt.execute(sqlE);

                    sqlDoc = "INSERT INTO DINESHMILLS.D_COM_DOC_DATA SELECT * FROM TEMP_DATABASE.T_COM_DOC_DATA";
                    Stmt.execute(sqlDoc);
                } else {
                    double rbalance = mbalance, abalance;
                    while (rbalance > 0) {
                        if (rbalance > 9500) {
                            rbalance = rbalance - 9500;
                            abalance = 9500;
                        } else {
                            abalance = rbalance;
                            rbalance = 0;
                        }
                        Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_FIN_VOUCHER_HEADER");
//                data.Execute("UPDATE SDMLATTPAY.TRAVEL_SANCTION_DETAIL "
//                        + "SET TSD_VOUCHER_DATE=NOW(),TSD_VOUCHER_NO=COALESCE(TSD_VOUCHER_NO,'')+' , '+CONCAT('CS','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))) "
//                        + "WHERE TSD_DOC_NO='" + lbldoc.getText() + "'");
//                data.Execute("UPDATE SDMLATTPAY.TRAVEL_SANCTION_DETAIL_H "
//                        + "SET TSD_VOUCHER_DATE=NOW(),TSD_VOUCHER_NO=COALESCE(TSD_VOUCHER_NO,'')+' , '+CONCAT('CS','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))) "
//                        + "WHERE TSD_DOC_NO='" + lbldoc.getText() + "'");

                        SQL = "INSERT INTO TEMP_DATABASE.T_FIN_VOUCHER_HEADER "
                                + "(COMPANY_ID,VOUCHER_NO,BOOK_CODE,HIERARCHY_ID,REMARKS,VOUCHER_DATE,VOUCHER_TYPE,EXCLUDE_IN_ADJ,CHEQUE_AMOUNT) "
                                + "SELECT 2,CONCAT('CS','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),30,"
                                + "1243,CONCAT('TRAVELLING EXPENSE TO ',TSD_NAME,' TOUR ON ',DATE_FORMAT(MIN(TSD_START_DATE),'%d/%m/%Y'),' TO ',"
                                + "DATE_FORMAT(MAX(TSD_ARRIVAL_DATE),'%d/%m/%Y'),'.'),"
                                + "CURDATE(),4,0," + abalance + " "
                                + "FROM SDMLATTPAY.TRAVEL_VOUCHER_DETAIL AS D "
                                + " where TSD_DOC_NO='" + lbldoc.getText() + "'";
                        //System.out.println(SQL);

                        Stmt.execute(SQL);

                        Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_FIN_VOUCHER_DETAIL");

                        Stmt.execute("INSERT INTO TEMP_DATABASE.T_FIN_VOUCHER_DETAIL "
                                + "(COMPANY_ID,VOUCHER_NO,EFFECT,MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,AMOUNT,MODULE_ID,REF_COMPANY_ID,"
                                + "IS_DEDUCTION,INVOICE_AMOUNT,SR_NO) "
                                + "SELECT 2,CONCAT('CS','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                                + "'D','439020',''," + abalance + ",0,0,0,"
                                + "0,1  "
                                + "FROM DUAL "
                                + "UNION "
                                + "SELECT 2,CONCAT('CS','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                                + "'C','212012',''," + abalance + ",0,0,0,"
                                + "0,2  "
                                + "FROM DUAL ");

                        Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX");

                        Stmt.execute("INSERT INTO TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX "
                                + "(COMPANY_ID,VOUCHER_NO,EFFECT,MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,AMOUNT,MODULE_ID,REF_COMPANY_ID,"
                                + "IS_DEDUCTION,INVOICE_AMOUNT,SR_NO) "
                                + "SELECT 2,CONCAT('CS','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                                + "'D','439020',''," + abalance + ",0,0,0,"
                                + "0,1  "
                                + "FROM DUAL "
                                + "UNION "
                                + "SELECT 2,CONCAT('CS','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                                + "'C','212012',''," + abalance + ",0,0,0,"
                                + "0,2  "
                                + "FROM DUAL ");

                        Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_COM_DOC_DATA");

                        Stmt.execute("INSERT INTO  TEMP_DATABASE.T_COM_DOC_DATA "
                                + "SELECT 2,67,CONCAT('CS','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                                + "NOW(),USER_ID,CASE WHEN CREATOR =1 THEN 'W' ELSE 'P'  END, CASE WHEN CREATOR =0 THEN 'A' ELSE 'C'  END,'',"
                                + "SR_NO,0,'','0000-00-00','0000-00-00',0,'0000-00-00'  "
                                + "FROM DINESHMILLS.D_COM_HIERARCHY_RIGHTS A,TEMP_DATABASE.T_FIN_VOUCHER_HEADER B WHERE B.HIERARCHY_ID =1243 AND "
                                + "A.HIERARCHY_ID = B.HIERARCHY_ID");

                        Stmt.execute("UPDATE  TEMP_DATABASE.T_FIN_VOUCHER_DETAIL SET  INVOICE_NO='',INVOICE_DATE='0000-00-00' , INVOICE_AMOUNT=0 ,"
                                + "PO_NO ='',PO_DATE='0000-00-00' ");

                        Stmt.execute("UPDATE  TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX SET  INVOICE_NO='',INVOICE_DATE='0000-00-00' ,INVOICE_AMOUNT=0,"
                                + "PO_NO='',PO_DATE='0000-00-00'  ");

                        sqlH = "INSERT INTO FINANCE.D_FIN_VOUCHER_HEADER SELECT * FROM TEMP_DATABASE.T_FIN_VOUCHER_HEADER";
                        Stmt.execute(sqlH);

                        sqlD = "INSERT INTO FINANCE.D_FIN_VOUCHER_DETAIL SELECT * FROM TEMP_DATABASE.T_FIN_VOUCHER_DETAIL";
                        Stmt.execute(sqlD);

                        sqlE = "INSERT INTO FINANCE.D_FIN_VOUCHER_DETAIL_EX SELECT * FROM TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX";
                        Stmt.execute(sqlE);

                        sqlDoc = "INSERT INTO DINESHMILLS.D_COM_DOC_DATA SELECT * FROM TEMP_DATABASE.T_COM_DOC_DATA";
                        Stmt.execute(sqlDoc);
                        counter++;

                    }
                }
            }
            counter = 1;
            //RC

            if (cheque.isSelected() && Double.parseDouble(balance.getText()) < 0) {
                if (data.IsRecordExist("SELECT VOUCHER_NO FROM D_FIN_VOUCHER_HEADER "
                        + "WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + "  AND LEFT(VOUCHER_NO,2) = 'RC'", FinanceGlobal.FinURL)) {
                    ResultSet rsResultSet = Stmt.executeQuery("SELECT VOUCHER_NO,SUBSTRING(VOUCHER_NO,1,6) AS CNV,RIGHT(VOUCHER_NO,5) AS CNSRNO "
                            + "FROM (SELECT MAX(VOUCHER_NO) AS VOUCHER_NO FROM FINANCE.D_FIN_VOUCHER_HEADER "
                            + "WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + "  AND LEFT(VOUCHER_NO,2) = 'RC' "
                            + "AND SUBSTRING(VOUCHER_NO,5,2)=99 AND SUBSTRING(VOUCHER_NO,3,2)='" + fyr + "' ) AS A");
                    String LastDocNo = "";
                    String LastcnvNo = "";
                    draftSrNo = 0;
                    rsResultSet.first();
                    while (!rsResultSet.isAfterLast() && rsResultSet.getRow() > 0) {
                        LastDocNo = rsResultSet.getString("VOUCHER_NO");
                        LastcnvNo = rsResultSet.getString("CNV");
                        draftSrNo = rsResultSet.getInt("CNSRNO");

                        rsResultSet.next();
                    }

                }

                Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_FIN_VOUCHER_HEADER");
//                data.Execute("UPDATE SDMLATTPAY.TRAVEL_SANCTION_DETAIL "
//                        + "SET TSD_VOUCHER_DATE=NOW(),TSD_VOUCHER_NO=COALESCE(TSD_VOUCHER_NO,'')+' , '+CONCAT('RC','" + fyr + "',9900000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))) "
//                        + "WHERE TSD_DOC_NO='" + lbldoc.getText() + "'");
//                data.Execute("UPDATE SDMLATTPAY.TRAVEL_SANCTION_DETAIL_H "
//                        + "SET TSD_VOUCHER_DATE=NOW(),TSD_VOUCHER_NO=COALESCE(TSD_VOUCHER_NO,'')+' , '+CONCAT('RC','" + fyr + "',9900000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))) "
//                        + "WHERE TSD_DOC_NO='" + lbldoc.getText() + "'");

                SQL = "INSERT INTO TEMP_DATABASE.T_FIN_VOUCHER_HEADER "
                        + "(COMPANY_ID,VOUCHER_NO,BOOK_CODE,HIERARCHY_ID,REMARKS,VOUCHER_DATE,VOUCHER_TYPE,EXCLUDE_IN_ADJ,CHEQUE_AMOUNT) "
                        + "SELECT 2,CONCAT('RC','" + fyr + "',9900000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),99,"
                        + "1107,CONCAT('ADVANCE TRAVELLING EXPENSE OF ',TSD_NAME,' DIFFERENCE AMOUNT AGAINST TOUR ADVANCE.'),"
                        + "CURDATE(),6,1," + mbalance + " "
                        + "FROM SDMLATTPAY.TRAVEL_VOUCHER_DETAIL AS D "
                        + " where TSD_DOC_NO='" + lbldoc.getText() + "'";
                //System.out.println(SQL);

                Stmt.execute(SQL);

                Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_FIN_VOUCHER_DETAIL");

                Stmt.execute("INSERT INTO TEMP_DATABASE.T_FIN_VOUCHER_DETAIL "
                        + "(COMPANY_ID,VOUCHER_NO,EFFECT,MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,AMOUNT,MODULE_ID,REF_COMPANY_ID,"
                        + "IS_DEDUCTION,INVOICE_AMOUNT,SR_NO) "
                        + "SELECT 2,CONCAT('RC','" + fyr + "',9900000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                        + "'C','231077',''," + mbalance + ",0,0,0,"
                        + "0,1  "
                        + "FROM DUAL "
                        + "UNION "
                        + "SELECT 2,CONCAT('RC','" + fyr + "',9900000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                        + "'D','999999',''," + mbalance + ",0,0,0,"
                        + "0,2  "
                        + "FROM DUAL ");

                Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX");

                Stmt.execute("INSERT INTO TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX "
                        + "(COMPANY_ID,VOUCHER_NO,EFFECT,MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,AMOUNT,MODULE_ID,REF_COMPANY_ID,"
                        + "IS_DEDUCTION,INVOICE_AMOUNT,SR_NO) "
                        + "SELECT 2,CONCAT('RC','" + fyr + "',9900000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                        + "'C','231077',''," + mbalance + ",0,0,0,"
                        + "0,1  "
                        + "FROM DUAL "
                        + "UNION "
                        + "SELECT 2,CONCAT('RC','" + fyr + "',9900000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                        + "'D','999999',''," + mbalance + ",0,0,0,"
                        + "0,2  "
                        + "FROM DUAL ");

                Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_COM_DOC_DATA");

                Stmt.execute("INSERT INTO  TEMP_DATABASE.T_COM_DOC_DATA "
                        + "SELECT 2,69,CONCAT('RC','" + fyr + "',9900000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                        + "NOW(),USER_ID,CASE WHEN CREATOR =1 THEN 'W' ELSE 'P'  END, CASE WHEN CREATOR =0 THEN 'A' ELSE 'C'  END,'',"
                        + "SR_NO,0,'','0000-00-00','0000-00-00',0,'0000-00-00'  "
                        + "FROM DINESHMILLS.D_COM_HIERARCHY_RIGHTS A,TEMP_DATABASE.T_FIN_VOUCHER_HEADER B WHERE B.HIERARCHY_ID =1243 AND "
                        + "A.HIERARCHY_ID = B.HIERARCHY_ID");

                Stmt.execute("UPDATE  TEMP_DATABASE.T_FIN_VOUCHER_DETAIL SET  INVOICE_NO='',INVOICE_DATE='0000-00-00' , INVOICE_AMOUNT=0 ,"
                        + "PO_NO ='',PO_DATE='0000-00-00' ");

                Stmt.execute("UPDATE  TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX SET  INVOICE_NO='',INVOICE_DATE='0000-00-00' ,INVOICE_AMOUNT=0,"
                        + "PO_NO='',PO_DATE='0000-00-00'  ");

                sqlH = "INSERT INTO FINANCE.D_FIN_VOUCHER_HEADER SELECT * FROM TEMP_DATABASE.T_FIN_VOUCHER_HEADER";
                Stmt.execute(sqlH);

                sqlD = "INSERT INTO FINANCE.D_FIN_VOUCHER_DETAIL SELECT * FROM TEMP_DATABASE.T_FIN_VOUCHER_DETAIL";
                Stmt.execute(sqlD);

                sqlE = "INSERT INTO FINANCE.D_FIN_VOUCHER_DETAIL_EX SELECT * FROM TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX";
                Stmt.execute(sqlE);

                sqlDoc = "INSERT INTO DINESHMILLS.D_COM_DOC_DATA SELECT * FROM TEMP_DATABASE.T_COM_DOC_DATA";
                Stmt.execute(sqlDoc);
            }

            //CR
            if (cashpay.isSelected() && Double.parseDouble(balance.getText()) < 0) {
                mbalance = mbalance * -1;
                if (data.IsRecordExist("SELECT VOUCHER_NO FROM D_FIN_VOUCHER_HEADER "
                        + "WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + "  AND LEFT(VOUCHER_NO,2) = 'CR'", FinanceGlobal.FinURL)) {
                    ResultSet rsResultSet = Stmt.executeQuery("SELECT VOUCHER_NO,SUBSTRING(VOUCHER_NO,1,6) AS CNV,RIGHT(VOUCHER_NO,5) AS CNSRNO "
                            + "FROM (SELECT MAX(VOUCHER_NO) AS VOUCHER_NO FROM FINANCE.D_FIN_VOUCHER_HEADER "
                            + "WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + "  AND LEFT(VOUCHER_NO,2) = 'CR' "
                            + "AND SUBSTRING(VOUCHER_NO,5,2)=30 AND SUBSTRING(VOUCHER_NO,3,2)='" + fyr + "' ) AS A");
                    String LastDocNo = "";
                    String LastcnvNo = "";
                    draftSrNo = 0;
                    rsResultSet.first();
                    while (!rsResultSet.isAfterLast() && rsResultSet.getRow() > 0) {
                        LastDocNo = rsResultSet.getString("VOUCHER_NO");
                        LastcnvNo = rsResultSet.getString("CNV");
                        draftSrNo = rsResultSet.getInt("CNSRNO");

                        rsResultSet.next();
                    }
                }
                if (mbalance < 10000) {

                    Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_FIN_VOUCHER_HEADER");
//                data.Execute("UPDATE SDMLATTPAY.TRAVEL_SANCTION_DETAIL "
//                        + "SET TSD_VOUCHER_DATE=NOW(),TSD_VOUCHER_NO=COALESCE(TSD_VOUCHER_NO,'')+' , '+CONCAT('CS','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))) "
//                        + "WHERE TSD_DOC_NO='" + lbldoc.getText() + "'");
//                data.Execute("UPDATE SDMLATTPAY.TRAVEL_SANCTION_DETAIL_H "
//                        + "SET TSD_VOUCHER_DATE=NOW(),TSD_VOUCHER_NO=COALESCE(TSD_VOUCHER_NO,'')+' , '+CONCAT('CS','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))) "
//                        + "WHERE TSD_DOC_NO='" + lbldoc.getText() + "'");

                    SQL = "INSERT INTO TEMP_DATABASE.T_FIN_VOUCHER_HEADER "
                            + "(COMPANY_ID,VOUCHER_NO,BOOK_CODE,HIERARCHY_ID,REMARKS,VOUCHER_DATE,VOUCHER_TYPE,EXCLUDE_IN_ADJ,CHEQUE_AMOUNT) "
                            + "SELECT 2,CONCAT('CR','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),30,"
                            + "1242,CONCAT('DIFFERENCE AMOUNT RECEIVED OF ',TSD_NAME,' AGAINST TOUR ON ',DATE_FORMAT(MIN(TSD_START_DATE),'%d/%m/%Y'),' TO ',"
                            + "DATE_FORMAT(MAX(TSD_ARRIVAL_DATE),'%d/%m/%Y'),'.'),"
                            + "CURDATE(),8,0," + mbalance + " "
                            + "FROM SDMLATTPAY.TRAVEL_VOUCHER_DETAIL AS D "
                            + " where TSD_DOC_NO='" + lbldoc.getText() + "'";
                    //System.out.println(SQL);

                    Stmt.execute(SQL);

                    Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_FIN_VOUCHER_DETAIL");

                    Stmt.execute("INSERT INTO TEMP_DATABASE.T_FIN_VOUCHER_DETAIL "
                            + "(COMPANY_ID,VOUCHER_NO,EFFECT,MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,AMOUNT,MODULE_ID,REF_COMPANY_ID,"
                            + "IS_DEDUCTION,INVOICE_AMOUNT,SR_NO) "
                            + "SELECT 2,CONCAT('CR','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                            + "'C','231077',''," + mbalance + ",0,0,0,"
                            + "0,1  "
                            + "FROM DUAL "
                            + "UNION "
                            + "SELECT 2,CONCAT('CR','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                            + "'D','212012',''," + mbalance + ",0,0,0,"
                            + "0,2  "
                            + "FROM DUAL ");

                    Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX");

                    Stmt.execute("INSERT INTO TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX "
                            + "(COMPANY_ID,VOUCHER_NO,EFFECT,MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,AMOUNT,MODULE_ID,REF_COMPANY_ID,"
                            + "IS_DEDUCTION,INVOICE_AMOUNT,SR_NO) "
                            + "SELECT 2,CONCAT('CR','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                            + "'C','231077',''," + mbalance + ",0,0,0,"
                            + "0,1  "
                            + "FROM DUAL "
                            + "UNION "
                            + "SELECT 2,CONCAT('CR','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                            + "'D','212012',''," + mbalance + ",0,0,0,"
                            + "0,2  "
                            + "FROM DUAL ");

                    Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_COM_DOC_DATA");

                    Stmt.execute("INSERT INTO  TEMP_DATABASE.T_COM_DOC_DATA "
                            + "SELECT 2,83,CONCAT('CR','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                            + "NOW(),USER_ID,CASE WHEN CREATOR =1 THEN 'W' ELSE 'P'  END, CASE WHEN CREATOR =0 THEN 'A' ELSE 'C'  END,'',"
                            + "SR_NO,0,'','0000-00-00','0000-00-00',0,'0000-00-00'  "
                            + "FROM DINESHMILLS.D_COM_HIERARCHY_RIGHTS A,TEMP_DATABASE.T_FIN_VOUCHER_HEADER B WHERE B.HIERARCHY_ID =1242 AND "
                            + "A.HIERARCHY_ID = B.HIERARCHY_ID");

                    Stmt.execute("UPDATE  TEMP_DATABASE.T_FIN_VOUCHER_DETAIL SET  INVOICE_NO='',INVOICE_DATE='0000-00-00' , INVOICE_AMOUNT=0 ,"
                            + "PO_NO ='',PO_DATE='0000-00-00' ");

                    Stmt.execute("UPDATE  TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX SET  INVOICE_NO='',INVOICE_DATE='0000-00-00' ,INVOICE_AMOUNT=0,"
                            + "PO_NO='',PO_DATE='0000-00-00'  ");

                    sqlH = "INSERT INTO FINANCE.D_FIN_VOUCHER_HEADER SELECT * FROM TEMP_DATABASE.T_FIN_VOUCHER_HEADER";
                    Stmt.execute(sqlH);

                    sqlD = "INSERT INTO FINANCE.D_FIN_VOUCHER_DETAIL SELECT * FROM TEMP_DATABASE.T_FIN_VOUCHER_DETAIL";
                    Stmt.execute(sqlD);

                    sqlE = "INSERT INTO FINANCE.D_FIN_VOUCHER_DETAIL_EX SELECT * FROM TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX";
                    Stmt.execute(sqlE);

                    sqlDoc = "INSERT INTO DINESHMILLS.D_COM_DOC_DATA SELECT * FROM TEMP_DATABASE.T_COM_DOC_DATA";
                    Stmt.execute(sqlDoc);
                } else {
                    double rbalance = mbalance, abalance;
                    while (rbalance > 0) {
                        if (rbalance > 9500) {
                            rbalance = rbalance - 9500;
                            abalance = 9500;
                        } else {
                            abalance = rbalance;
                            rbalance = 0;
                        }
                        Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_FIN_VOUCHER_HEADER");
//                data.Execute("UPDATE SDMLATTPAY.TRAVEL_SANCTION_DETAIL "
//                        + "SET TSD_VOUCHER_DATE=NOW(),TSD_VOUCHER_NO=COALESCE(TSD_VOUCHER_NO,'')+' , '+CONCAT('CS','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))) "
//                        + "WHERE TSD_DOC_NO='" + lbldoc.getText() + "'");
//                data.Execute("UPDATE SDMLATTPAY.TRAVEL_SANCTION_DETAIL_H "
//                        + "SET TSD_VOUCHER_DATE=NOW(),TSD_VOUCHER_NO=COALESCE(TSD_VOUCHER_NO,'')+' , '+CONCAT('CS','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))) "
//                        + "WHERE TSD_DOC_NO='" + lbldoc.getText() + "'");

                        SQL = "INSERT INTO TEMP_DATABASE.T_FIN_VOUCHER_HEADER "
                                + "(COMPANY_ID,VOUCHER_NO,BOOK_CODE,HIERARCHY_ID,REMARKS,VOUCHER_DATE,VOUCHER_TYPE,EXCLUDE_IN_ADJ,CHEQUE_AMOUNT) "
                                + "SELECT 2,CONCAT('CR','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),30,"
                                + "1242,CONCAT('DIFFERENCE AMOUNT RECEIVED OF ',TSD_NAME,' AGAINST TOUR ON ',DATE_FORMAT(MIN(TSD_START_DATE),'%d/%m/%Y'),' TO ',"
                                + "DATE_FORMAT(MAX(TSD_ARRIVAL_DATE),'%d/%m/%Y'),'.'),"
                                + "CURDATE(),8,0," + abalance + " "
                                + "FROM SDMLATTPAY.TRAVEL_VOUCHER_DETAIL AS D "
                                + " where TSD_DOC_NO='" + lbldoc.getText() + "'";
                        //System.out.println(SQL);

                        Stmt.execute(SQL);

                        Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_FIN_VOUCHER_DETAIL");

                        Stmt.execute("INSERT INTO TEMP_DATABASE.T_FIN_VOUCHER_DETAIL "
                                + "(COMPANY_ID,VOUCHER_NO,EFFECT,MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,AMOUNT,MODULE_ID,REF_COMPANY_ID,"
                                + "IS_DEDUCTION,INVOICE_AMOUNT,SR_NO) "
                                + "SELECT 2,CONCAT('CR','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                                + "'C','231077',''," + abalance + ",0,0,0,"
                                + "0,1  "
                                + "FROM DUAL "
                                + "UNION "
                                + "SELECT 2,CONCAT('CR','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                                + "'D','212012',''," + abalance + ",0,0,0,"
                                + "0,2  "
                                + "FROM DUAL ");

                        Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX");

                        Stmt.execute("INSERT INTO TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX "
                                + "(COMPANY_ID,VOUCHER_NO,EFFECT,MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,AMOUNT,MODULE_ID,REF_COMPANY_ID,"
                                + "IS_DEDUCTION,INVOICE_AMOUNT,SR_NO) "
                                + "SELECT 2,CONCAT('CR','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                                + "'C','231077',''," + abalance + ",0,0,0,"
                                + "0,1  "
                                + "FROM DUAL "
                                + "UNION "
                                + "SELECT 2,CONCAT('CR','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                                + "'D','212012',''," + abalance + ",0,0,0,"
                                + "0,2  "
                                + "FROM DUAL ");

                        Stmt.execute("TRUNCATE TABLE TEMP_DATABASE.T_COM_DOC_DATA");

                        Stmt.execute("INSERT INTO  TEMP_DATABASE.T_COM_DOC_DATA "
                                + "SELECT 2,83,CONCAT('CR','" + fyr + "',3000000 +ABS(REPLACE(RIGHT('" + draftNo + (draftSrNo + counter) + "',4),' ',''))),"
                                + "NOW(),USER_ID,CASE WHEN CREATOR =1 THEN 'W' ELSE 'P'  END, CASE WHEN CREATOR =0 THEN 'A' ELSE 'C'  END,'',"
                                + "SR_NO,0,'','0000-00-00','0000-00-00',0,'0000-00-00'  "
                                + "FROM DINESHMILLS.D_COM_HIERARCHY_RIGHTS A,TEMP_DATABASE.T_FIN_VOUCHER_HEADER B WHERE B.HIERARCHY_ID =1242 AND "
                                + "A.HIERARCHY_ID = B.HIERARCHY_ID");

                        Stmt.execute("UPDATE  TEMP_DATABASE.T_FIN_VOUCHER_DETAIL SET  INVOICE_NO='',INVOICE_DATE='0000-00-00' , INVOICE_AMOUNT=0 ,"
                                + "PO_NO ='',PO_DATE='0000-00-00' ");

                        Stmt.execute("UPDATE  TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX SET  INVOICE_NO='',INVOICE_DATE='0000-00-00' ,INVOICE_AMOUNT=0,"
                                + "PO_NO='',PO_DATE='0000-00-00'  ");

                        sqlH = "INSERT INTO FINANCE.D_FIN_VOUCHER_HEADER SELECT * FROM TEMP_DATABASE.T_FIN_VOUCHER_HEADER";
                        Stmt.execute(sqlH);

                        sqlD = "INSERT INTO FINANCE.D_FIN_VOUCHER_DETAIL SELECT * FROM TEMP_DATABASE.T_FIN_VOUCHER_DETAIL";
                        Stmt.execute(sqlD);

                        sqlE = "INSERT INTO FINANCE.D_FIN_VOUCHER_DETAIL_EX SELECT * FROM TEMP_DATABASE.T_FIN_VOUCHER_DETAIL_EX";
                        Stmt.execute(sqlE);

                        sqlDoc = "INSERT INTO DINESHMILLS.D_COM_DOC_DATA SELECT * FROM TEMP_DATABASE.T_COM_DOC_DATA";
                        Stmt.execute(sqlDoc);
                        counter++;
                    }
                }
                mbalance = mbalance * -1;
            }
            counter = 1;
        } catch (SQLException sqe) {
            sqe.printStackTrace();

        }
    }
}
