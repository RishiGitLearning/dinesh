/*
 * frmMonthlyAttendance.java
 *
 * Created on August 22, 2013, 11:20 AM
 */
package SDMLATTPAY.RokdiSelection;

/**
 *
 * @author
 */
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.util.HashMap;
import java.net.URL;
import java.io.File;
import TReportWriter.NumWord;

import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.Loader;
import EITLERP.AppletFrame;
import EITLERP.EITLTableCellRenderer;
import EITLERP.FeltSales.common.JavaMail;
import EITLERP.FeltSales.common.JavaMailNew;
import EITLERP.LOV;
import EITLERP.frmPendingApprovals;
//import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.Production.FeltUser;
import EITLERP.SelectFirstFree;
import EITLERP.clsFirstFree;
import EITLERP.data;
import SDMLATTPAY.AdvanceSearch.ATTPAYLOV;
import SDMLATTPAY.Employee.clsMaster;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.table.TableCellRenderer;
import javax.swing.JTextField;

public class frmRokdiSelection extends javax.swing.JApplet {

    private int EditMode = 0;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromUserId = 0;
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    private boolean DoNotEvaluate = false;

    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;

    private clsRokdiSelection ObjRokdiSelectionData;

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel modelDept = new EITLComboModel();

    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;
    private EITLTableModel DataModelExcess;
    private int FinalApprovedBy = 0;
    public frmPendingApprovals frmPA;

    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();

    /**
     * Creates new form frmFeltFinishing
     */
    public void init() {
        System.gc();
        setSize(1280, 600);
        initComponents();
        lblTitle.setForeground(Color.WHITE);
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        DataModel = new EITLTableModel();
        ObjRokdiSelectionData = new clsRokdiSelection();
        lblTitle.setForeground(Color.WHITE);

        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
//        GenerateDeptCombo();
        FormatGrid();
        lblRevNo.setVisible(false);

        if (ObjRokdiSelectionData.LoadData()) {
            ObjRokdiSelectionData.MoveLast();
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmRokdiSelection.this, "Error occured while Loading Data. Error is " + ObjRokdiSelectionData.LastError, "DATA LOADING ERROR", JOptionPane.ERROR_MESSAGE);
        }

        Table.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        file1 = new javax.swing.JFileChooser();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        cmdNextToTab1 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        btnEmpMstETE = new javax.swing.JButton();
        cmbDept = new javax.swing.JComboBox();
        lblDeptCmb1 = new javax.swing.JLabel();
        txtRokdiFromDate = new javax.swing.JTextField();
        lblDate = new javax.swing.JLabel();
        lblDate1 = new javax.swing.JLabel();
        txtRokdiToDate = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 1240, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("Rokdi Selection - ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 1240, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel16.setText("Doc No ");
        Tab1.add(jLabel16);
        jLabel16.setBounds(20, 10, 70, 20);

        txtDocNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtDocNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDocNo.setEnabled(false);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(90, 10, 150, 20);

        jLabel6.setText("Doc Date");
        Tab1.add(jLabel6);
        jLabel6.setBounds(280, 10, 80, 20);

        txtDocDate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtDocDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDocDate.setEnabled(false);
        Tab1.add(txtDocDate);
        txtDocDate.setBounds(370, 10, 102, 20);

        lblRevNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(480, 10, 20, 18);

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));
        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel4);
        jPanel4.setBounds(10, 70, 1160, 5);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(670, 390, 90, 25);

        jScrollPane4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jScrollPane4KeyReleased(evt);
            }
        });

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        Table.getTableHeader().setReorderingAllowed(false);
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                TableMouseReleased(evt);
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(Table);

        Tab1.add(jScrollPane4);
        jScrollPane4.setBounds(10, 80, 1220, 300);

        btnEmpMstETE.setLabel("Export to Excel");
        btnEmpMstETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpMstETEActionPerformed(evt);
            }
        });
        Tab1.add(btnEmpMstETE);
        btnEmpMstETE.setBounds(40, 390, 150, 30);

        cmbDept.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Dept", "WEAVING", "YARN STORE", "MENDING", "NEEDLING", "FINISHING", "CARDING", "WAREHOUSE", "ENGINEERING", "RMG", "SECURITY", "STORES", "PEONS" }));
        cmbDept.setEnabled(false);
        cmbDept.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDeptItemStateChanged(evt);
            }
        });
        Tab1.add(cmbDept);
        cmbDept.setBounds(530, 40, 190, 20);

        lblDeptCmb1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDeptCmb1.setText("Department : ");
        Tab1.add(lblDeptCmb1);
        lblDeptCmb1.setBounds(420, 40, 110, 20);

        txtRokdiFromDate = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();
        txtRokdiFromDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtRokdiFromDate.setEnabled(false);
        txtRokdiFromDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRokdiFromDateFocusLost(evt);
            }
        });
        Tab1.add(txtRokdiFromDate);
        txtRokdiFromDate.setBounds(110, 40, 110, 20);

        lblDate.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblDate.setText("From Date : ");
        Tab1.add(lblDate);
        lblDate.setBounds(20, 40, 90, 20);

        lblDate1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblDate1.setText("To Date : ");
        Tab1.add(lblDate1);
        lblDate1.setBounds(230, 40, 70, 20);

        txtRokdiToDate = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();
        txtRokdiToDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtRokdiToDate.setEnabled(false);
        txtRokdiToDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRokdiToDateFocusLost(evt);
            }
        });
        Tab1.add(txtRokdiToDate);
        txtRokdiToDate.setBounds(300, 40, 110, 20);

        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setText("Note : Enter time in [HH:MM] format");
        Tab1.add(jLabel1);
        jLabel1.setBounds(780, 40, 330, 20);

        Tab.addTab("Details", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 23, 80, 15);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 20, 184, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 62, 80, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 60, 184, 21);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 97, 61, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 95, 630, 19);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 130, 73, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 130, 184, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 249, 80, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 245, 184, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 288, 80, 15);

        txtToRemarks.setEnabled(false);
        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 286, 630, 19);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(500, 350, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(728, 94, 49, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(620, 350, 102, 25);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 760, 150);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 191, 163, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 210, 640, 180);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(662, 390, 110, 25);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(662, 240, 110, 25);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(662, 210, 110, 25);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(662, 270, 110, 25);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 1240, 470);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 540, 1240, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
//        new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltFinishing.rpt",new HashMap(),ObjRokdiSelectionData.getReportData(EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
//        EITLERPGLOBAL.PAGE_BREAK=true;
//        HashMap Parameters = new HashMap();
//        Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());
//        
//        new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/FELTFINISHING.rpt",Parameters,ObjRokdiSelectionData.getReportData(txtProductionDocumentNo.getText().trim(),EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
//        EITLERPGLOBAL.PAGE_BREAK=true;
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
//        try {
//            URL reportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltFinishing.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&PROD_DATE="+EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText()));
//            EITLERPGLOBAL.loginContext.showDocument(reportFile,"_blank");
//        }
//        catch(Exception e) {
//            JOptionPane.showMessageDialog(frmFeltFinishing.this,"File error "+e.getMessage(),"FILE ERROR",JOptionPane.ERROR_MESSAGE);
//            e.printStackTrace();
//        }

//        PreviewReport();
//        HashMap Parameters = new HashMap();
//        Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());
//
//        new TReportWriter.TReportEngine().PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/Production/FELTFINISHING.rpt", Parameters, ObjRokdiSelectionData.getReportData(txtProductionDocumentNo.getText().trim(), EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
//        EITLERPGLOBAL.PAGE_BREAK = true;
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4).toString());
            bigEdit.ShowEdit();
        } else {
            JOptionPane.showMessageDialog(frmRokdiSelection.this, "Select a row from Document Update History");
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjRokdiSelectionData.HistoryView = false;
        ObjRokdiSelectionData.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed

    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjRokdiSelectionData.ShowHistory(EITLERPGLOBAL.formatDateDB(txtDocDate.getText()), txtDocNo.getText());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed

    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        txtDocDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);

        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (SDMLATTPAY.ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID, 862, txtDocNo.getText())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjRokdiSelectionData.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        cmbDept.setSelectedIndex(0);
        Cancel();
        if (ObjRokdiSelectionData.LoadData()) {
            ObjRokdiSelectionData.MoveLast();
            DisplayData();
        } else {
        }
        SetFields(false);
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(frmRokdiSelection.this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed

    private void jScrollPane4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jScrollPane4KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane4KeyReleased

    private void btnEmpMstETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpMstETEActionPerformed
//         TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnEmpMstETEActionPerformed

    private void cmbDeptItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDeptItemStateChanged
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD) {
            txtRokdiFromDate.setEnabled(false);
            txtRokdiToDate.setEnabled(false);
            cmbDept.setEnabled(false);
        }
        if (EditMode == EITLERPGLOBAL.ADD
                && !cmbDept.getSelectedItem().equals("Select Dept")
                && !txtRokdiFromDate.getText().trim().equals("")
                && !txtRokdiToDate.getText().trim().equals("")) {
            GenerateList();
        }
    }//GEN-LAST:event_cmbDeptItemStateChanged

    private void txtRokdiFromDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRokdiFromDateFocusLost
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD) {
            txtRokdiFromDate.setEnabled(false);
            txtRokdiToDate.setEnabled(true);
            cmbDept.setEnabled(false);
        }
    }//GEN-LAST:event_txtRokdiFromDateFocusLost

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2 && Table.getSelectedColumn() == 4) {
            String pEmpno = Table.getValueAt(Table.getSelectedRow(), 4).toString();
            System.out.println(txtRokdiFromDate.getText());
            String pMonth = txtRokdiFromDate.getText().substring(3, 5);
            String pYear = txtRokdiFromDate.getText().substring(6, 10);

            if (!pEmpno.contains("TOTAL")) {
                AppletFrame aFrame = new AppletFrame("Attendance - Advance Search");
                aFrame.startAppletEx("SDMLATTPAY.AdvanceSearch.FrmAdvanceSearch_1", "Attendance - Advance Search");
                SDMLATTPAY.AdvanceSearch.FrmAdvanceSearch_1 ObjItem = (SDMLATTPAY.AdvanceSearch.FrmAdvanceSearch_1) aFrame.ObjApplet;
//            ObjItem.requestFocus();
                ObjItem.FindEmpDailyAtt(pEmpno, pMonth, pYear);
            }
        }

        if (EditMode == EITLERPGLOBAL.ADD || (EditMode == EITLERPGLOBAL.EDIT && SDMLATTPAY.ApprovalFlow.IsCreator(862, txtDocNo.getText()))) {
            if (Table.getSelectedColumn() == 1) {
                if (!Table.getValueAt(Table.getSelectedRow(), 10).toString().trim().equals("")
                        && !Table.getValueAt(Table.getSelectedRow(), 12).toString().trim().equals("")
                        && Table.getValueAt(Table.getSelectedRow(), 13).toString().trim().equals("00:00")) {
                    Table.setValueAt(false, Table.getSelectedRow(), 1);
                    JOptionPane.showMessageDialog(this, "You can not consider this.");
                } else if (Table.getValueAt(Table.getSelectedRow(), 10).toString().trim().equals("")) {
                    Table.setValueAt(false, Table.getSelectedRow(), 1);
                    JOptionPane.showMessageDialog(this, "You can not consider this.");
                } else {
                    Table.setValueAt(true, Table.getSelectedRow(), 1);
                    Table.setValueAt(false, Table.getSelectedRow(), 2);
                }
            }
            if (Table.getSelectedColumn() == 2) {
//                if (Table.getValueAt(Table.getSelectedRow(), 3).toString().trim().length() > 5) {
                Table.setValueAt(false, Table.getSelectedRow(), 1);
                Table.setValueAt(true, Table.getSelectedRow(), 2);
//                } else {
//                    Table.setValueAt(false, Table.getSelectedRow(), 2);
//                    JOptionPane.showMessageDialog(this, "Please Enter Remark.");
//                }
            }
        }
    }//GEN-LAST:event_TableMouseClicked

    private void TableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseReleased
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD || (EditMode == EITLERPGLOBAL.EDIT && SDMLATTPAY.ApprovalFlow.IsCreator(862, txtDocNo.getText()))) {
            if (Table.getSelectedColumn() == 1) {
                if (!Table.getValueAt(Table.getSelectedRow(), 10).toString().trim().equals("")
                        && !Table.getValueAt(Table.getSelectedRow(), 12).toString().trim().equals("")
                        && Table.getValueAt(Table.getSelectedRow(), 13).toString().trim().equals("00:00")) {
                    Table.setValueAt(false, Table.getSelectedRow(), 1);
                    JOptionPane.showMessageDialog(this, "You can not consider this.");
                } else if (Table.getValueAt(Table.getSelectedRow(), 10).toString().trim().equals("")) {
                    Table.setValueAt(false, Table.getSelectedRow(), 1);
                    JOptionPane.showMessageDialog(this, "You can not consider this.");
                } else {
                    Table.setValueAt(true, Table.getSelectedRow(), 1);
                    Table.setValueAt(false, Table.getSelectedRow(), 2);
                }
            }
            if (Table.getSelectedColumn() == 2) {
//                if (Table.getValueAt(Table.getSelectedRow(), 3).toString().trim().length() > 5) {
                Table.setValueAt(false, Table.getSelectedRow(), 1);
                Table.setValueAt(true, Table.getSelectedRow(), 2);
//                } else {
//                    Table.setValueAt(false, Table.getSelectedRow(), 2);
//                    JOptionPane.showMessageDialog(this, "Please Enter Remark.");
//                }
            }
        }
    }//GEN-LAST:event_TableMouseReleased

    private void txtRokdiToDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRokdiToDateFocusLost
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD) {
            txtRokdiFromDate.setEnabled(false);
            txtRokdiToDate.setEnabled(false);
            cmbDept.setEnabled(true);
        }
    }//GEN-LAST:event_txtRokdiToDateFocusLost

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            if (evt.getKeyCode() == KeyEvent.VK_TAB || evt.getKeyCode() == 10 || evt.getKeyCode() == KeyEvent.VK_RIGHT || evt.getKeyCode() == KeyEvent.VK_LEFT || evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN) {
//                int seqNo = data.getIntValueFromDB("SELECT APPROVAL_SEQUENCE FROM D_COM_HIERARCHY_RIGHTS WHERE COMPANY_ID=2 AND HIERARCHY_ID=" + SelHierarchyID + " AND USER_ID=" + EITLERPGLOBAL.gNewUserID);
                if (EditMode == EITLERPGLOBAL.ADD || (EditMode == EITLERPGLOBAL.EDIT && SDMLATTPAY.ApprovalFlow.IsCreator(862, txtDocNo.getText().trim()))) {
                    if (Table.getSelectedColumn() == 14 || Table.getSelectedColumn() == 16) {
                        Table.setValueAt(Table.getValueAt(Table.getSelectedRow(), 14), Table.getSelectedRow(), 16);
                    }
                }
            }
        }
    }//GEN-LAST:event_TableKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton btnEmpMstETE;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbDept;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDate1;
    private javax.swing.JLabel lblDeptCmb1;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtRokdiFromDate;
    private javax.swing.JTextField txtRokdiToDate;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables

    private void GenerateDeptCombo() {

        HashMap List = new HashMap();
        clsMaster ObjDept;

        cmbDept.setModel(modelDept);
        modelDept.removeAllElements();  //Clearing previous contents

        ComboData aData = new ComboData();
        aData.Text = "Select Dept";
        aData.Code = 0;
        modelDept.addElement(aData);

        List = clsMaster.getDepartmentList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjDept = (clsMaster) List.get(Integer.toString(i));
//            ComboData 
            aData = new ComboData();
            aData.Text = (String) ObjDept.getAttribute("Name").getObj();
            aData.Code = (long) ObjDept.getAttribute("DPTID").getVal();
            modelDept.addElement(aData);
        }
    }

    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }

    private void SetFields(boolean pStat) {

        txtDocNo.setEnabled(false);
        txtDocDate.setEnabled(false);

        txtRokdiFromDate.setEnabled(pStat);
        txtRokdiToDate.setEnabled(pStat);
        cmbDept.setEnabled(pStat);

        Table.setEnabled(pStat);

        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);

        SetupApproval();
    }

    private void ClearFields() {
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtDocNo.setText("");

        txtRokdiFromDate.setText("");
        txtRokdiToDate.setText("");
        cmbDept.setSelectedIndex(0);

        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }

    //Display data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, 862)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        //=========== Title Bar Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjRokdiSelectionData.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                } else {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (ObjRokdiSelectionData.getAttribute("CANCELED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
            //============================================//

            String docDate = EITLERPGLOBAL.formatDate(ObjRokdiSelectionData.getAttribute("DOC_DATE").getString());
            String docNo = ObjRokdiSelectionData.getAttribute("DOC_NO").getString();
            String rkdFromDate = EITLERPGLOBAL.formatDate(ObjRokdiSelectionData.getAttribute("ROKDI_FROM_DATE").getString());
            String rkdToDate = EITLERPGLOBAL.formatDate(ObjRokdiSelectionData.getAttribute("ROKDI_TO_DATE").getString());
            String rkdDept = ObjRokdiSelectionData.getAttribute("ROKDI_DEPT").getString();

            lblTitle.setText("Rokdi Selection - " + docNo);
            lblRevNo.setText(Integer.toString((int) ObjRokdiSelectionData.getAttribute("REVISION_NO").getVal()));

            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) ObjRokdiSelectionData.getAttribute("HIERARCHY_ID").getVal());
            DoNotEvaluate = true;

            //GenerateHierarchyCombo();
            txtDocDate.setText(docDate);
            txtDocNo.setText(docNo);
            txtRokdiFromDate.setText(rkdFromDate);
            txtRokdiToDate.setText(rkdToDate);
//            EITLERPGLOBAL.setComboIndex(cmbDept, Integer.parseInt(attDept));
            cmbDept.setSelectedItem(rkdDept);

            FormatGrid();

            //Now Generate Table
            for (int i = 1; i <= ObjRokdiSelectionData.hmRokdiSelectionDataDetails.size(); i++) {
                clsRokdiSelectionDetails ObjRokdiSelectionDataDetails = (clsRokdiSelectionDetails) ObjRokdiSelectionData.hmRokdiSelectionDataDetails.get(Integer.toString(i));

                Object[] rowData = new Object[50];

                rowData[0] = ObjRokdiSelectionDataDetails.getAttribute("SR_NO").getString();
                if (ObjRokdiSelectionDataDetails.getAttribute("ROKDI_CONSIDER").getString().equalsIgnoreCase("1")) {
                    rowData[1] = true;
                } else {
                    rowData[1] = false;
                }
                if (ObjRokdiSelectionDataDetails.getAttribute("ROKDI_NOT_CONSIDER").getString().equalsIgnoreCase("1")) {
                    rowData[2] = true;
                } else {
                    rowData[2] = false;
                }
                rowData[3] = ObjRokdiSelectionDataDetails.getAttribute("ROKDI_REMARK").getString();
                rowData[4] = ObjRokdiSelectionDataDetails.getAttribute("EMP_ID").getString();
                rowData[5] = ObjRokdiSelectionDataDetails.getAttribute("EMP_NAME").getString();

                if (ObjRokdiSelectionDataDetails.getAttribute("ROKDI_DATE").getString().equals("0000-00-00")) {
                    rowData[6] = "";
                } else {
                    rowData[6] = EITLERPGLOBAL.formatDate(ObjRokdiSelectionDataDetails.getAttribute("ROKDI_DATE").getString());
                }

                rowData[7] = ObjRokdiSelectionDataDetails.getAttribute("ROKDI_SHIFT").getString();

                if (ObjRokdiSelectionDataDetails.getAttribute("PUNCH_FROM_DATE").getString().equals("0000-00-00")) {
                    rowData[8] = "";
                } else {
                    rowData[8] = EITLERPGLOBAL.formatDate(ObjRokdiSelectionDataDetails.getAttribute("PUNCH_FROM_DATE").getString());
                }

                if (ObjRokdiSelectionDataDetails.getAttribute("PUNCH_FROM_TIME").getString().equals("")) {
                    rowData[9] = "";
                } else {
                    rowData[9] = ObjRokdiSelectionDataDetails.getAttribute("PUNCH_FROM_TIME").getString().substring(0, 5);
                }

                if (ObjRokdiSelectionDataDetails.getAttribute("PUNCH_TO_DATE").getString().equals("0000-00-00")) {
                    rowData[10] = "";
                } else {
                    rowData[10] = EITLERPGLOBAL.formatDate(ObjRokdiSelectionDataDetails.getAttribute("PUNCH_TO_DATE").getString());
                }

                if (ObjRokdiSelectionDataDetails.getAttribute("PUNCH_TO_TIME").getString().equals("00:00:00")
                        && ObjRokdiSelectionDataDetails.getAttribute("PUNCH_TO_DATE").getString().equals("0000-00-00")) {
                    rowData[11] = "";
                } else {
                    rowData[11] = ObjRokdiSelectionDataDetails.getAttribute("PUNCH_TO_TIME").getString().substring(0, 5);
                }

                if (ObjRokdiSelectionDataDetails.getAttribute("TIME_DIFFERENCE").getString().equals("00:00:00")
                        && ObjRokdiSelectionDataDetails.getAttribute("PUNCH_TO_DATE").getString().equals("0000-00-00")) {
                    rowData[12] = "";
                } else {
                    rowData[12] = ObjRokdiSelectionDataDetails.getAttribute("TIME_DIFFERENCE").getString().substring(0, 5);
                }

                if (ObjRokdiSelectionDataDetails.getAttribute("SYS_ROKDI_HOURS").getString().equals("00:00:00")
                        && ObjRokdiSelectionDataDetails.getAttribute("PUNCH_TO_DATE").getString().equals("0000-00-00")) {
                    rowData[13] = "";
                } else {
                    rowData[13] = ObjRokdiSelectionDataDetails.getAttribute("SYS_ROKDI_HOURS").getString().substring(0, 5);
                }

                if (ObjRokdiSelectionDataDetails.getAttribute("DEPT_ROKDI_HOURS").getString().equals("00:00:00")
                        && ObjRokdiSelectionDataDetails.getAttribute("PUNCH_TO_DATE").getString().equals("0000-00-00")) {
                    rowData[14] = "";
                } else {
                    rowData[14] = ObjRokdiSelectionDataDetails.getAttribute("DEPT_ROKDI_HOURS").getString().substring(0, 5);
                }
                rowData[15] = ObjRokdiSelectionDataDetails.getAttribute("DEPT_ROKDI_REMARK").getString();

                if (ObjRokdiSelectionDataDetails.getAttribute("TK_ROKDI_HOURS").getString().equals("00:00:00")
                        && ObjRokdiSelectionDataDetails.getAttribute("PUNCH_TO_DATE").getString().equals("0000-00-00")) {
                    rowData[16] = "";
                } else {
                    rowData[16] = ObjRokdiSelectionDataDetails.getAttribute("TK_ROKDI_HOURS").getString().substring(0, 5);
                }
                rowData[17] = ObjRokdiSelectionDataDetails.getAttribute("TK_ROKDI_REMARK").getString();
                rowData[18] = ObjRokdiSelectionDataDetails.getAttribute("AUDIT_ROKDI_REMARK").getString();
                rowData[19] = ObjRokdiSelectionDataDetails.getAttribute("EMP_DEPT").getString();
                rowData[20] = data.getStringValueFromDB("SELECT SHIFT FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID = '" + ObjRokdiSelectionDataDetails.getAttribute("EMP_ID").getString() + "' AND PUNCHDATE = '" + ObjRokdiSelectionDataDetails.getAttribute("ROKDI_DATE").getString() + "' ");

                DataModel.addRow(rowData);
            }
//            final TableColumnModel columnModel = Table.getColumnModel();
//            for (int column = 0; column < Table.getColumnCount(); column++) {
//                int width = 40; // Min width
//                for (int row = 0; row < Table.getRowCount(); row++) {
//                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
//                    Component comp = Table.prepareRenderer(renderer, row, column);
//                    width = Math.max(comp.getPreferredSize().width + 10, width);
//                }
//                if (width > 300) {
//                    width = 300;
//                }
//                columnModel.getColumn(column).setPreferredWidth(width);
//            }

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList = new HashMap();

            hmList = SDMLATTPAY.ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, 862, docNo);
            for (int i = 1; i <= hmList.size(); i++) {
                //clsDocFlow is collection class used for holding approval flow data
                clsDocFlow ObjFlow = (clsDocFlow) hmList.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3] = ObjFlow.getAttribute("STATUS").getString();
                rowData[4] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString());
                rowData[5] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString());
                rowData[6] = ObjFlow.getAttribute("REMARKS").getString();

                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//

            // Generating Grid for Showing Production Details Update History
            FormatGridUpdateHistory();
            HashMap hmApprovalHistory = clsRokdiSelection.getHistoryList(txtDocNo.getText());
            for (int i = 1; i <= hmApprovalHistory.size(); i++) {
                clsRokdiSelection ObjRokdiSelectionData = (clsRokdiSelection) hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjRokdiSelectionData.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(2, (int) ObjRokdiSelectionData.getAttribute("UPDATED_BY").getVal());
                rowData[2] = ObjRokdiSelectionData.getAttribute("ENTRY_DATE").getString();

                String ApprovalStatus = "";

                if ((ObjRokdiSelectionData.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                if ((ObjRokdiSelectionData.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjRokdiSelectionData.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                    FinalApprovedBy = (int) ObjRokdiSelectionData.getAttribute("UPDATED_BY").getVal();
                }

                if ((ObjRokdiSelectionData.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjRokdiSelectionData.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjRokdiSelectionData.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjRokdiSelectionData.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjRokdiSelectionData.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjRokdiSelectionData.getAttribute("FROM_IP").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DoNotEvaluate = false;
    }

    private void FormatGrid() {
        try {
            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            Table.setAutoResizeMode(0);
            EITLTableCellRenderer RendererConsider = new EITLTableCellRenderer();
            EITLTableCellRenderer RendererNotConsider = new EITLTableCellRenderer();

            DataModel.addColumn("Sr.");
            DataModel.addColumn("Consider");
            DataModel.addColumn("Not Consider");
            DataModel.addColumn("Remark");
            DataModel.addColumn("Emp ID");
            DataModel.addColumn("Emp Name");
            DataModel.addColumn("Rokdi Dt");
            DataModel.addColumn("Shift");
            DataModel.addColumn("Punch From Dt");
            DataModel.addColumn("From Time");
            DataModel.addColumn("Punch To Dt");
            DataModel.addColumn("To Time");
            DataModel.addColumn("Difference");
            DataModel.addColumn("System Hours");
            DataModel.addColumn("Dept Hours");
            DataModel.addColumn("Dept Remark");
            DataModel.addColumn("TK Hours");
            DataModel.addColumn("TK Remark");
            DataModel.addColumn("Audit Remark");
            DataModel.addColumn("Department");
            DataModel.addColumn("Reg.Shift");

            RendererConsider.setCustomComponent(1, "CheckBox");
            Table.getColumnModel().getColumn(1).setCellRenderer(RendererConsider);
            Table.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(new JCheckBox()));

            RendererNotConsider.setCustomComponent(2, "CheckBox");
            Table.getColumnModel().getColumn(2).setCellRenderer(RendererNotConsider);
            Table.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(new JCheckBox()));

            DataModel.SetVariable(0, "SR_NO");
            DataModel.SetVariable(1, "ROKDI_CONSIDER");
            DataModel.SetVariable(2, "ROKDI_NOT_CONSIDER");
            DataModel.SetVariable(3, "ROKDI_REMARK");
            DataModel.SetVariable(4, "EMP_ID");
            DataModel.SetVariable(5, "EMP_NAME");
            DataModel.SetVariable(6, "ROKDI_DATE");
            DataModel.SetVariable(7, "ROKDI_SHIFT");
            DataModel.SetVariable(8, "PUNCH_FROM_DATE");
            DataModel.SetVariable(9, "PUNCH_FROM_TIME");
            DataModel.SetVariable(10, "PUNCH_TO_DATE");
            DataModel.SetVariable(11, "PUNCH_TO_TIME");
            DataModel.SetVariable(12, "TIME_DIFFERENCE");
            DataModel.SetVariable(13, "SYS_ROKDI_HOURS");
            DataModel.SetVariable(14, "DEPT_ROKDI_HOURS");
            DataModel.SetVariable(15, "DEPT_ROKDI_REMARK");
            DataModel.SetVariable(16, "TK_ROKDI_HOURS");
            DataModel.SetVariable(17, "TK_ROKDI_REMARK");
            DataModel.SetVariable(18, "AUDIT_ROKDI_REMARK");
            DataModel.SetVariable(19, "EMP_DEPT");

            DataModel.SetReadOnly(0);
            if (EditMode == EITLERPGLOBAL.EDIT && !SDMLATTPAY.ApprovalFlow.IsCreator(862, txtDocNo.getText())) {
                DataModel.SetReadOnly(1);
                DataModel.SetReadOnly(2);
                DataModel.SetReadOnly(3);
            }
            DataModel.SetReadOnly(4);
            DataModel.SetReadOnly(5);
            DataModel.SetReadOnly(6);
            if (EditMode == EITLERPGLOBAL.EDIT && !SDMLATTPAY.ApprovalFlow.IsCreator(862, txtDocNo.getText())) {
                DataModel.SetReadOnly(7);
            }
            DataModel.SetReadOnly(8);
            DataModel.SetReadOnly(9);
            DataModel.SetReadOnly(10);
            DataModel.SetReadOnly(11);
            DataModel.SetReadOnly(12);
            DataModel.SetReadOnly(13);
            if (EditMode == EITLERPGLOBAL.EDIT && !SDMLATTPAY.ApprovalFlow.IsCreator(862, txtDocNo.getText())) {
                DataModel.SetReadOnly(14);
                DataModel.SetReadOnly(15);
            }
            if (EITLERPGLOBAL.gUserDeptID != 28) {
                DataModel.SetReadOnly(16);
                DataModel.SetReadOnly(17);
            }
            if (EITLERPGLOBAL.gUserDeptID != 16) {
                DataModel.SetReadOnly(18);
            }
            DataModel.SetReadOnly(19);
            DataModel.SetReadOnly(20);

            Table.getColumnModel().getColumn(0).setMinWidth(30);
            Table.getColumnModel().getColumn(0).setMaxWidth(30);
            Table.getColumnModel().getColumn(1).setMinWidth(50);
            Table.getColumnModel().getColumn(1).setMaxWidth(50);
            Table.getColumnModel().getColumn(2).setMinWidth(50);
            Table.getColumnModel().getColumn(2).setMaxWidth(50);
            Table.getColumnModel().getColumn(3).setMinWidth(80);
//            Table.getColumnModel().getColumn(3).setMaxWidth(100);
            Table.getColumnModel().getColumn(4).setMinWidth(80);
//            Table.getColumnModel().getColumn(4).setMaxWidth(80);
            Table.getColumnModel().getColumn(5).setMinWidth(80);
//            Table.getColumnModel().getColumn(5).setMaxWidth(100);
            Table.getColumnModel().getColumn(6).setMinWidth(80);
//            Table.getColumnModel().getColumn(6).setMaxWidth(80);
            Table.getColumnModel().getColumn(7).setMinWidth(40);
            Table.getColumnModel().getColumn(7).setMaxWidth(40);
            Table.getColumnModel().getColumn(8).setMinWidth(80);
//            Table.getColumnModel().getColumn(8).setMaxWidth(80);
            Table.getColumnModel().getColumn(9).setMinWidth(40);
//            Table.getColumnModel().getColumn(9).setMaxWidth(50);
            Table.getColumnModel().getColumn(10).setMinWidth(80);
//            Table.getColumnModel().getColumn(10).setMaxWidth(80);
            Table.getColumnModel().getColumn(11).setMinWidth(40);
//            Table.getColumnModel().getColumn(11).setMaxWidth(50);
            Table.getColumnModel().getColumn(12).setMinWidth(40);
//            Table.getColumnModel().getColumn(12).setMaxWidth(50);
            Table.getColumnModel().getColumn(13).setMinWidth(40);
//            Table.getColumnModel().getColumn(13).setMaxWidth(50);
            Table.getColumnModel().getColumn(14).setMinWidth(40);
//            Table.getColumnModel().getColumn(14).setMaxWidth(50);
            Table.getColumnModel().getColumn(15).setMinWidth(80);
//            Table.getColumnModel().getColumn(15).setMaxWidth(100);
            Table.getColumnModel().getColumn(16).setMinWidth(40);
//            Table.getColumnModel().getColumn(16).setMaxWidth(50);
            Table.getColumnModel().getColumn(17).setMinWidth(80);
//            Table.getColumnModel().getColumn(17).setMaxWidth(100);
            Table.getColumnModel().getColumn(18).setMinWidth(80);
//            Table.getColumnModel().getColumn(18).setMaxWidth(100);
            Table.getColumnModel().getColumn(19).setMinWidth(80);
//            Table.getColumnModel().getColumn(19).setMaxWidth(120);
            Table.getColumnModel().getColumn(20).setMinWidth(40);
//            Table.getColumnModel().getColumn(20).setMaxWidth(80);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=862 ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=862 ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = SDMLATTPAY.ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, 862, ObjRokdiSelectionData.getAttribute("DOC_NO").getString());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, 862, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, 862, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }

        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = SDMLATTPAY.ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, 862, txtDocNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }

    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
         if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
         cmbHierarchy.setEnabled(true);
         }else {
         cmbHierarchy.setEnabled(false);
         }*/

        // select hold for default approval
        OpgHold.setSelected(true);
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            int FromUserID = SDMLATTPAY.ApprovalFlow.getFromID(EITLERPGLOBAL.gCompanyID, 862, ObjRokdiSelectionData.getAttribute("DOC_NO").getString());
            lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = SDMLATTPAY.ApprovalFlow.getFromRemarks(EITLERPGLOBAL.gCompanyID, 862, FromUserID, ObjRokdiSelectionData.getAttribute("DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (SDMLATTPAY.ApprovalFlow.IsCreator(862, txtDocNo.getText())) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10086, 100861)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10086, 100862)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10086, 100863)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10086, 100865)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = 862;
        aList.FirstFreeNo = 376;

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        FormatGrid();

        SelPrefix = aList.Prefix; //Selected Prefix;
        SelSuffix = aList.Suffix;
        FFNo = aList.FirstFreeNo;

        SetupApproval();
        //Display newly generated document no.
        txtDocNo.setText(clsRokdiSelection.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 862, FFNo, false));
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());

        lblTitle.setText("Rokdi Selection - " + txtDocNo.getText());
        lblTitle.setBackground(Color.GRAY);

        txtRokdiFromDate.setEnabled(true);
        txtRokdiToDate.setEnabled(false);
        cmbDept.setEnabled(false);
    }

    private void Edit() {
        String productionDocumentNo = (String) ObjRokdiSelectionData.getAttribute("DOC_NO").getObj();
        if (ObjRokdiSelectionData.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();

            if (SDMLATTPAY.ApprovalFlow.IsCreator(862, productionDocumentNo)) {
                SetFields(true);
            } else {
                EnableApproval();
                Table.setEnabled(true);
                SetFormatGrid();
            }
            txtRokdiFromDate.setEnabled(false);
            txtRokdiToDate.setEnabled(false);
            cmbDept.setEnabled(false);
//            Table.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(frmRokdiSelection.this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "EDITING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {
        if (ObjRokdiSelectionData.CanDelete(txtDocNo.getText(), txtDocDate.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmRokdiSelection.this, ObjRokdiSelectionData.LastError, "DELETION ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Save() {
        String docNo, docDate, rkdFromDate, rkdToDate, rkdDept;
        int i = 0, j = 0;
        docDate = txtDocDate.getText().trim();
        docNo = txtDocNo.getText().trim();
        rkdFromDate = txtRokdiFromDate.getText().trim();
        rkdToDate = txtRokdiToDate.getText().trim();
//        attDept = Integer.toString(cmbDept.getSelectedIndex());
        rkdDept = cmbDept.getSelectedItem().toString();

        if (txtRokdiFromDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(frmRokdiSelection.this, "Select Rokdi From Date.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (txtRokdiToDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(frmRokdiSelection.this, "Select Rokdi To Date.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (cmbDept.getSelectedItem().equals("Select Dept")) {
            JOptionPane.showMessageDialog(frmRokdiSelection.this, "Select Department.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Check the no. of items in table
        if (Table.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(frmRokdiSelection.this, "Enter Rokdi Details Before Saving.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // check duplicate employee no in table
//            for (int k = 0; k <= Table.getRowCount() - 1; k++) {
//                for (int l = k; l <= Table.getRowCount() - 1; l++) {
//                    if (l != k && ((String) Table.getValueAt(k, 4)).trim().equals(((String) Table.getValueAt(l, 4)).trim())) {
//                        JOptionPane.showMessageDialog(this, "Same Emp ID at Row " + (k + 1) + " and " + (l + 1), "ERROR", JOptionPane.ERROR_MESSAGE);
//                        return;
//                    }
//                }
//            }

//            // check UnTicked row in table
//            for (int k = 0; k <= Table.getRowCount() - 1; k++) {
//                if ((Boolean)Table.getValueAt(k, 1).equals(false) && (Boolean)Table.getValueAt(k, 2).equals(false)) {
//                    JOptionPane.showMessageDialog(this, "Please Tick on Rokadi Type at Row " + (k + 1), "ERROR", JOptionPane.ERROR_MESSAGE);
//                    return;
//                }
//            }
            ObjRokdiSelectionData.hmRokdiSelectionDataDetails.clear();
            //Check the entered details in Table.
            for (i = 0; i <= Table.getRowCount() - 1; i++) {

                clsRokdiSelectionDetails ObjRokdiSelectionDataDetails = new clsRokdiSelectionDetails();

                ObjRokdiSelectionDataDetails.setAttribute("SR_NO", DataModel.getValueByVariable("SR_NO", i));
//                if (DataModel.getValueByVariable("ROKDI_CONSIDER", i).toLowerCase().equals("true")) {
                if (DataModel.getBoolValueByVariable("ROKDI_CONSIDER", i)) {
                    ObjRokdiSelectionDataDetails.setAttribute("ROKDI_CONSIDER", "1");
                } else {
                    ObjRokdiSelectionDataDetails.setAttribute("ROKDI_CONSIDER", "0");
                }
//                if (DataModel.getValueByVariable("ROKDI_NOT_CONSIDER", i).toLowerCase().equals("true")) {
                if (DataModel.getBoolValueByVariable("ROKDI_NOT_CONSIDER", i)) {
                    ObjRokdiSelectionDataDetails.setAttribute("ROKDI_NOT_CONSIDER", "1");
                } else {
                    ObjRokdiSelectionDataDetails.setAttribute("ROKDI_NOT_CONSIDER", "0");
                }
                ObjRokdiSelectionDataDetails.setAttribute("ROKDI_REMARK", DataModel.getValueByVariable("ROKDI_REMARK", i));
                ObjRokdiSelectionDataDetails.setAttribute("EMP_ID", DataModel.getValueByVariable("EMP_ID", i));
                ObjRokdiSelectionDataDetails.setAttribute("EMP_NAME", DataModel.getValueByVariable("EMP_NAME", i));
                ObjRokdiSelectionDataDetails.setAttribute("ROKDI_DATE", DataModel.getValueByVariable("ROKDI_DATE", i));
                ObjRokdiSelectionDataDetails.setAttribute("ROKDI_SHIFT", DataModel.getValueByVariable("ROKDI_SHIFT", i));
                ObjRokdiSelectionDataDetails.setAttribute("PUNCH_FROM_DATE", DataModel.getValueByVariable("PUNCH_FROM_DATE", i));
                ObjRokdiSelectionDataDetails.setAttribute("PUNCH_FROM_TIME", DataModel.getValueByVariable("PUNCH_FROM_TIME", i));
                ObjRokdiSelectionDataDetails.setAttribute("PUNCH_TO_DATE", DataModel.getValueByVariable("PUNCH_TO_DATE", i));
                ObjRokdiSelectionDataDetails.setAttribute("PUNCH_TO_TIME", DataModel.getValueByVariable("PUNCH_TO_TIME", i));
                ObjRokdiSelectionDataDetails.setAttribute("TIME_DIFFERENCE", DataModel.getValueByVariable("TIME_DIFFERENCE", i));
                ObjRokdiSelectionDataDetails.setAttribute("SYS_ROKDI_HOURS", DataModel.getValueByVariable("SYS_ROKDI_HOURS", i));
                ObjRokdiSelectionDataDetails.setAttribute("DEPT_ROKDI_HOURS", DataModel.getValueByVariable("DEPT_ROKDI_HOURS", i));
                ObjRokdiSelectionDataDetails.setAttribute("DEPT_ROKDI_REMARK", DataModel.getValueByVariable("DEPT_ROKDI_REMARK", i));
                ObjRokdiSelectionDataDetails.setAttribute("TK_ROKDI_HOURS", DataModel.getValueByVariable("TK_ROKDI_HOURS", i));
                ObjRokdiSelectionDataDetails.setAttribute("TK_ROKDI_REMARK", DataModel.getValueByVariable("TK_ROKDI_REMARK", i));
                ObjRokdiSelectionDataDetails.setAttribute("AUDIT_ROKDI_REMARK", DataModel.getValueByVariable("AUDIT_ROKDI_REMARK", i));
                ObjRokdiSelectionDataDetails.setAttribute("EMP_DEPT", DataModel.getValueByVariable("EMP_DEPT", i));

                ObjRokdiSelectionData.hmRokdiSelectionDataDetails.put(Integer.toString(ObjRokdiSelectionData.hmRokdiSelectionDataDetails.size() + 1), ObjRokdiSelectionDataDetails);
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(frmRokdiSelection.this, "Enter Correct Details at Row " + (i + 1) + " and Column " + (j + 1) + ". Error is " + nfe.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            j = 0;
            nfe.printStackTrace();
            return;
        }

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(frmRokdiSelection.this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(frmRokdiSelection.this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(frmRokdiSelection.this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(frmRokdiSelection.this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //set data for insert/update
        ObjRokdiSelectionData.setAttribute("DOC_DATE", docDate);
        ObjRokdiSelectionData.setAttribute("DOC_NO", docNo);
        ObjRokdiSelectionData.setAttribute("ROKDI_FROM_DATE", rkdFromDate);
        ObjRokdiSelectionData.setAttribute("ROKDI_TO_DATE", rkdToDate);
        ObjRokdiSelectionData.setAttribute("ROKDI_DEPT", rkdDept);
        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjRokdiSelectionData.Insert()) {
                if (OpgFinal.isSelected()) {

                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(frmRokdiSelection.this, "Error occured while saving. Error is " + ObjRokdiSelectionData.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjRokdiSelectionData.Update()) {
                if (OpgFinal.isSelected()) {

                    if (data.IsRecordExist("SELECT * FROM SDMLATTPAY.ROKDI_SELECTION_DATA WHERE DOC_NO='" + txtDocNo.getText() + "' AND ROKDI_CONSIDER=1 AND SUBSTRING(EMP_ID,1,4) IN ('BRD3','BRD4') ")) {
                        String rDocNo = clsFirstFree.getNextFreeNo((int) EITLERPGLOBAL.gCompanyID, 816, 321, true);//4756
                        String rDocDate = data.getStringValueFromDB("SELECT NOW() FROM DUAL");

                        String rSql = "INSERT INTO SDMLATTPAY.ATT_COFF_ROKDI_ENTRY "
                                + "(COFF_DOC_NO, COFF_DOC_DATE, COFF_EMPID, COFF_YEAR, COFF_MONTH, COFF_DATE, COFF_TYPE, "
                                + "COFF_FROM_TIME, COFF_TO_TIME, COFF_HRS, COFF_HRS_REPLACEMENT, COFF_OT_SHIFT, "
                                + "CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, APPROVED, APPROVED_DATE, REJECTED, REJECTED_DATE, "
                                + "CANCELED, HIERARCHY_ID, CHANGED, CHANGED_DATE, REJECTED_REMARKS, FROM_IP ) "
                                + "SELECT '" + rDocNo + "', '" + rDocDate + "', EMP_ID, YEAR(ROKDI_DATE), MONTH(ROKDI_DATE), ROKDI_DATE, 'R', "
                                + "PUNCH_FROM_TIME, PUNCH_TO_TIME, TK_ROKDI_HOURS, TK_ROKDI_HOURS, ROKDI_SHIFT, "
                                + "1, CURDATE(), 0, '0000-00-00', 1, CURDATE(), 0, '0000-00-00', "
                                + "0, 4756, 0, '0000-00-00', '', '200.0.0.227' "
                                + "FROM SDMLATTPAY.ROKDI_SELECTION_DATA "
                                + "WHERE DOC_NO='" + txtDocNo.getText() + "' AND ROKDI_CONSIDER=1 AND SUBSTRING(EMP_ID,1,4) IN ('BRD3','BRD4') ";
                        data.Execute(rSql);
                        
                        String uShift = "UPDATE SDMLATTPAY.ATT_COFF_ROKDI_ENTRY R, SDMLATTPAY.ATT_DATA_DAILY_SUMMARY S "
                                + "SET COFF_SHIFT=SHIFT "
                                + "WHERE COFF_EMPID=EMPID AND COFF_DATE=PUNCHDATE AND COFF_DATE>='2021-09-01' "
                                + "AND COFF_DOC_NO='" + rDocNo + "' AND COALESCE(COFF_SHIFT,'')='' ";
                        data.Execute(uShift);
                    }

                    if (data.IsRecordExist("SELECT * FROM SDMLATTPAY.ROKDI_SELECTION_DATA WHERE DOC_NO='" + txtDocNo.getText() + "' AND ROKDI_CONSIDER=1 AND SUBSTRING(EMP_ID,1,4) IN ('BRD0') ")) {
                        String cDocNo = clsFirstFree.getNextFreeNo((int) EITLERPGLOBAL.gCompanyID, 827, 330, true);//4757
                        String cDocDate = data.getStringValueFromDB("SELECT CURDATE() FROM DUAL");

                        String cSql = "INSERT INTO SDMLATTPAY.ATT_COFF_ROKDI_ENTRY "
                                + "(COFF_DOC_NO, COFF_DOC_DATE, COFF_EMPID, COFF_YEAR, COFF_MONTH, COFF_DATE, COFF_TYPE, "
                                + "COFF_FROM_TIME, COFF_TO_TIME, COFF_HRS, COFF_HRS_REPLACEMENT, COFF_OT_SHIFT, "
                                + "CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, APPROVED, APPROVED_DATE, REJECTED, REJECTED_DATE, "
                                + "CANCELED, HIERARCHY_ID, CHANGED, CHANGED_DATE, REJECTED_REMARKS, FROM_IP ) "
                                + "SELECT '" + cDocNo + "', '" + cDocDate + "', EMP_ID, YEAR(ROKDI_DATE), MONTH(ROKDI_DATE), ROKDI_DATE, 'R', "
                                + "PUNCH_FROM_TIME, PUNCH_TO_TIME, TK_ROKDI_HOURS, TK_ROKDI_HOURS, ROKDI_SHIFT, "
                                + "1, CURDATE(), 0, '0000-00-00', 1, CURDATE(), 0, '0000-00-00', "
                                + "0, 4757, 0, '0000-00-00', '', '200.0.0.227' "
                                + "FROM SDMLATTPAY.ROKDI_SELECTION_DATA "
                                + "WHERE DOC_NO='" + txtDocNo.getText() + "' AND ROKDI_CONSIDER=1 AND SUBSTRING(EMP_ID,1,4) IN ('BRD0') ";
                        data.Execute(cSql);
                        
                        String uShift = "UPDATE SDMLATTPAY.ATT_COFF_ROKDI_ENTRY R, SDMLATTPAY.ATT_DATA_DAILY_SUMMARY S "
                                + "SET COFF_SHIFT=SHIFT "
                                + "WHERE COFF_EMPID=EMPID AND COFF_DATE=PUNCHDATE AND COFF_DATE>='2021-09-01' "
                                + "AND COFF_DOC_NO='" + cDocNo + "' AND COALESCE(COFF_SHIFT,'')='' ";
                        data.Execute(uShift);
                    }

                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(frmRokdiSelection.this, "Error occured while saving editing. Error is " + ObjRokdiSelectionData.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Sets data to the Details Class Object
    private void SetData() {
        //-------- Update Approval Specific Fields -----------//
        ObjRokdiSelectionData.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjRokdiSelectionData.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjRokdiSelectionData.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjRokdiSelectionData.setAttribute("FROM_REMARKS", txtToRemarks.getText().trim());
        ObjRokdiSelectionData.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);

        //ObjRokdiSelectionData.setAttribute("UPDATED_BY",EITLERPGLOBAL.gNewUserID);
        if (OpgApprove.isSelected()) {
            ObjRokdiSelectionData.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjRokdiSelectionData.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjRokdiSelectionData.setAttribute("APPROVAL_STATUS", "R");
            ObjRokdiSelectionData.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            ObjRokdiSelectionData.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjRokdiSelectionData.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            ObjRokdiSelectionData.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        } else {
            //ObjRokdiSelectionData.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            //ObjRokdiSelectionData.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
            ObjRokdiSelectionData.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            ObjRokdiSelectionData.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        }
    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "SDMLATTPAY.RokdiSelection.frmFindRokdiSelection", true);
        frmFindRokdiSelection ObjFindRokdiSelectionData = (frmFindRokdiSelection) ObjLoader.getObj();

        if (ObjFindRokdiSelectionData.Cancelled == false) {
            if (!ObjRokdiSelectionData.Filter(ObjFindRokdiSelectionData.stringFindQuery)) {
                JOptionPane.showMessageDialog(frmRokdiSelection.this, " No records found.", "Find Rokdi Selection Details", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    // find details by production date
    public void Find(String docNo) {
        ObjRokdiSelectionData.Filter(" AND DOC_NO='" + docNo + "' ");
        SetMenuForRights();
        DisplayData();
    }

    // find all pending document
    public void FindWaiting() {
        ObjRokdiSelectionData.Filter(" AND DOC_NO IN (SELECT DISTINCT MA.DOC_NO FROM SDMLATTPAY.ROKDI_SELECTION_DATA MA, SDMLATTPAY.D_COM_DOC_DATA D WHERE MA.DOC_NO=D.DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=862 AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void MoveFirst() {
        ObjRokdiSelectionData.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        ObjRokdiSelectionData.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        ObjRokdiSelectionData.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        ObjRokdiSelectionData.MoveLast();
        DisplayData();
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(" " + pMessage);
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Tab1.getComponentCount() - 1; i++) {
            if (Tab1.getComponent(i).getName() != null) {

                FieldName = Tab1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    Tab1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//

        //=============== Setting Table Fields ==================//
        DataModel.ClearAllReadOnly();
//        Table.setEnabled(false);
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From Ip");
    }

    private void UpdateSrNo() {
        int SrCol = DataModel.getColFromVariable("SR_NO");

        for (int i = 0; i < Table.getRowCount(); i++) {
            Table.setValueAt(Integer.toString(i + 1), i, SrCol);
        }
    }

    private void GenerateList() {
//        if (data.IsRecordExist("SELECT * FROM SDMLATTPAY.ROKDI_SELECTION_DATA WHERE ROKDI_DATE = '" + EITLERPGLOBAL.formatDateDB(txtRokdiFromDate.getText().trim()) + "' AND ROKDI_DEPT = '" + cmbDept.getSelectedItem().toString() + "'  AND APPROVED=0 AND CANCELED=0 AND DOC_NO != '" + txtDocNo.getText().trim() + "' ")) {
//            JOptionPane.showMessageDialog(this, "Please Final Approve previous generated document.");
//            Cancel();
//            return;
//        }
        try {
            FormatGrid(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "SELECT EP_EMP_CODE AS EMP_ID,EMP_NAME,EP_DATE,DATE(EP_TIME1) AS FROM_DATE,TIME(EP_TIME1) AS FROM_PUNCH,"
                    + "DATE(EP_TIME2) AS TO_DATE,CASE WHEN EP_TIME2!='0000-00-00 00:00:00' THEN TIME(EP_TIME2) ELSE '' END AS TO_PUNCH,"
                    + "CASE WHEN EP_TIME2!='0000-00-00 00:00:00' THEN timediff(EP_TIME2,EP_TIME1) ELSE '' END AS DIFF, "
                    + "CASE WHEN EP_TIME2!='0000-00-00 00:00:00' THEN  "
                    + "CASE WHEN TIME_TO_SEC(timediff(EP_TIME2,EP_TIME1))<=3240 THEN '00:00:00' ELSE   "
                    + "CASE WHEN TIME_TO_SEC(timediff(EP_TIME2,EP_TIME1))<=6840 THEN '01:00:00' ELSE  "
                    + "CASE WHEN TIME_TO_SEC(timediff(EP_TIME2,EP_TIME1))<=10440 THEN '02:00:00' ELSE  "
                    + "CASE WHEN TIME_TO_SEC(timediff(EP_TIME2,EP_TIME1))<=14040 THEN '03:00:00' ELSE  "
                    + "CASE WHEN TIME_TO_SEC(timediff(EP_TIME2,EP_TIME1))<=17640 THEN '04:00:00' ELSE  "
                    + "CASE WHEN TIME_TO_SEC(timediff(EP_TIME2,EP_TIME1))<=21240 THEN '05:00:00' ELSE  "
                    + "CASE WHEN TIME_TO_SEC(timediff(EP_TIME2,EP_TIME1))<=24840 THEN '06:00:00' ELSE  "
                    + "CASE WHEN TIME_TO_SEC(timediff(EP_TIME2,EP_TIME1))<=39240 THEN '08:00:00' ELSE  "                    
                    + "CASE WHEN TIME_TO_SEC(timediff(EP_TIME2,EP_TIME1))>39240 THEN '00:00:00' END END END END END END END END END  "
                    + "ELSE '' END AS SYS_DIFF, "
                    + "DPTNAME AS EMP_DEPT, SHIFT FROM (SELECT EP_EMP_CODE,EP_DATE,EP_TIME1,EP_TIME2 FROM SDMLATTPAY.EMP_PUNCH_ROKDI_FINAL "
                    + " WHERE EP_DATE>='2021-09-01' AND EP_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtRokdiFromDate.getText().trim()) + "' AND EP_DATE<='" + EITLERPGLOBAL.formatDateDB(txtRokdiToDate.getText().trim()) + "' AND EP_TIME1 != EP_TIME2  "
                    + "UNION ALL SELECT EP_EMP_CODE,EP_DATE,EP_TIME3,EP_TIME4 FROM SDMLATTPAY.EMP_PUNCH_ROKDI_FINAL WHERE EP_DATE>='2021-09-01' AND EP_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtRokdiFromDate.getText().trim()) + "' AND EP_DATE<='" + EITLERPGLOBAL.formatDateDB(txtRokdiToDate.getText().trim()) + "' AND EP_TIME3 !=EP_TIME4  "
                    + "UNION ALL SELECT EP_EMP_CODE,EP_DATE,EP_TIME5,EP_TIME6 FROM SDMLATTPAY.EMP_PUNCH_ROKDI_FINAL WHERE EP_DATE>='2021-09-01' AND EP_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtRokdiFromDate.getText().trim()) + "' AND EP_DATE<='" + EITLERPGLOBAL.formatDateDB(txtRokdiToDate.getText().trim()) + "' AND EP_TIME5 !=EP_TIME6  "
                    + "UNION ALL SELECT EP_EMP_CODE,EP_DATE,EP_TIME7,EP_TIME8 FROM SDMLATTPAY.EMP_PUNCH_ROKDI_FINAL WHERE EP_DATE>='2021-09-01' AND EP_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtRokdiFromDate.getText().trim()) + "' AND EP_DATE<='" + EITLERPGLOBAL.formatDateDB(txtRokdiToDate.getText().trim()) + "' AND EP_TIME7 !=EP_TIME8  "
                    + "UNION ALL SELECT EP_EMP_CODE,EP_DATE,EP_TIME9,EP_TIME10 FROM SDMLATTPAY.EMP_PUNCH_ROKDI_FINAL WHERE EP_DATE>='2021-09-01' AND EP_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtRokdiFromDate.getText().trim()) + "' AND EP_DATE<='" + EITLERPGLOBAL.formatDateDB(txtRokdiToDate.getText().trim()) + "' AND EP_TIME9 != EP_TIME10  "
                    + "UNION ALL  SELECT EP_EMP_CODE,EP_DATE,EP_TIME11,EP_TIME12 FROM SDMLATTPAY.EMP_PUNCH_ROKDI_FINAL WHERE EP_DATE>='2021-09-01' AND EP_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtRokdiFromDate.getText().trim()) + "' AND EP_DATE<='" + EITLERPGLOBAL.formatDateDB(txtRokdiToDate.getText().trim()) + "' AND EP_TIME11 != EP_TIME12  "
                    + "UNION ALL  SELECT EP_EMP_CODE,EP_DATE,EP_TIME13,EP_TIME14 FROM SDMLATTPAY.EMP_PUNCH_ROKDI_FINAL WHERE EP_DATE>='2021-09-01' AND EP_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtRokdiFromDate.getText().trim()) + "' AND EP_DATE<='" + EITLERPGLOBAL.formatDateDB(txtRokdiToDate.getText().trim()) + "' AND EP_TIME13 != EP_TIME14  "
                    + "UNION ALL  SELECT EP_EMP_CODE,EP_DATE,EP_TIME15,EP_TIME16 FROM SDMLATTPAY.EMP_PUNCH_ROKDI_FINAL WHERE EP_DATE>='2021-09-01' AND EP_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtRokdiFromDate.getText().trim()) + "' AND EP_DATE<='" + EITLERPGLOBAL.formatDateDB(txtRokdiToDate.getText().trim()) + "' AND EP_TIME15 != EP_TIME16  "
                    + "UNION ALL  SELECT EP_EMP_CODE,EP_DATE,EP_TIME17,EP_TIME18 FROM SDMLATTPAY.EMP_PUNCH_ROKDI_FINAL WHERE EP_DATE>='2021-09-01' AND EP_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtRokdiFromDate.getText().trim()) + "' AND EP_DATE<='" + EITLERPGLOBAL.formatDateDB(txtRokdiToDate.getText().trim()) + "' AND EP_TIME17 != EP_TIME18  "
                    + "UNION ALL  SELECT EP_EMP_CODE,EP_DATE,EP_TIME19,EP_TIME20 FROM SDMLATTPAY.EMP_PUNCH_ROKDI_FINAL WHERE EP_DATE>='2021-09-01' AND EP_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtRokdiFromDate.getText().trim()) + "' AND EP_DATE<='" + EITLERPGLOBAL.formatDateDB(txtRokdiToDate.getText().trim()) + "' AND EP_TIME19 != EP_TIME20  )  AS P "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP ON P.EP_EMP_CODE=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT EMPID,PUNCHDATE,SHIFT FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE PUNCHDATE >= '" + EITLERPGLOBAL.formatDateDB(txtRokdiFromDate.getText().trim()) + "' AND PUNCHDATE<='" + EITLERPGLOBAL.formatDateDB(txtRokdiToDate.getText().trim()) + "' ) AS DAS ON P.EP_EMP_CODE=DAS.EMPID AND P.EP_DATE=DAS.PUNCHDATE "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME,ERP_DEPT FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG ON CTG.CTGID=EMP.EMP_CATEGORY WHERE 1=1  "
                    + "AND (EP_EMP_CODE LIKE  'BRD3%' OR EP_EMP_CODE LIKE 'BRD4%' OR EP_EMP_CODE LIKE 'BRD0%') "
                    + "AND ERP_DEPT='" + cmbDept.getSelectedItem().toString().trim() + "' "
                    + "AND CONCAT(EP_EMP_CODE,EP_DATE,DATE(EP_TIME1),TIME(EP_TIME1)) NOT IN (SELECT CONCAT(EMP_ID,ROKDI_DATE,PUNCH_FROM_DATE,PUNCH_FROM_TIME) FROM SDMLATTPAY.ROKDI_SELECTION_DATA WHERE COALESCE(CANCELED,0)=0 AND ROKDI_CONSIDER=1  ) "//AND (ROKDI_CONSIDER=1 OR ROKDI_NOT_CONSIDER=1)
                    + "AND CONCAT(EP_EMP_CODE,EP_DATE,TIME(EP_TIME1),TIME(EP_TIME2)) NOT IN (SELECT CONCAT(COFF_EMPID,COFF_DATE,COFF_FROM_TIME,COFF_TO_TIME) FROM SDMLATTPAY.ATT_COFF_ROKDI_ENTRY WHERE COFF_DATE>='2021-09-01') "
                    + "ORDER BY EP_EMP_CODE,EP_DATE,EP_TIME1";

//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[50];

                    rowData[0] = Integer.toString(cnt);
                    if (!rsTmp.getString("FROM_DATE").toString().equals("0000-00-00")
                            && !rsTmp.getString("TO_DATE").toString().equals("0000-00-00")
                            && !rsTmp.getString("DIFF").toString().equals("")
                            && !rsTmp.getString("SYS_DIFF").toString().equals("00:00:00")) {
                        rowData[1] = true;
                        rowData[2] = false;
                    } else {
                        rowData[1] = false;
                        rowData[2] = true;
                    }
                    rowData[3] = "";
                    rowData[4] = rsTmp.getString("EMP_ID");
                    rowData[5] = rsTmp.getString("EMP_NAME");
                    rowData[6] = EITLERPGLOBAL.formatDate(rsTmp.getString("EP_DATE"));

                    if (!rsTmp.getString("FROM_DATE").toString().equals("0000-00-00") && !rsTmp.getString("TO_DATE").toString().equals("0000-00-00")) {
                        if (rsTmp.getString("FROM_PUNCH").toString().startsWith("06") || rsTmp.getString("FROM_PUNCH").toString().startsWith("07") || rsTmp.getString("FROM_PUNCH").toString().startsWith("08")) {
                            rowData[7] = "1";
                        } else if (rsTmp.getString("FROM_PUNCH").toString().startsWith("14") || rsTmp.getString("FROM_PUNCH").toString().startsWith("15") || rsTmp.getString("FROM_PUNCH").toString().startsWith("16")) {
                            rowData[7] = "2";
                        } else if (rsTmp.getString("FROM_PUNCH").toString().startsWith("23") || rsTmp.getString("FROM_PUNCH").toString().startsWith("00") || rsTmp.getString("FROM_PUNCH").toString().startsWith("01")) {
                            rowData[7] = "3";
                        } else {
                            rowData[7] = "";
                        }
                    } else {
                        rowData[7] = "";
                    }

                    if (rsTmp.getString("FROM_DATE").toString().equals("") || rsTmp.getString("FROM_DATE").toString().equals("0000-00-00")) {
                        rowData[8] = "";
                    } else {
                        rowData[8] = EITLERPGLOBAL.formatDate(rsTmp.getString("FROM_DATE"));
                    }
                    if (rsTmp.getString("FROM_PUNCH").toString().equals("")) {
                        rowData[9] = "";
                    } else {
                        rowData[9] = rsTmp.getString("FROM_PUNCH").substring(0, 5);
                    }
                    if (rsTmp.getString("TO_DATE").toString().equals("") || rsTmp.getString("TO_DATE").toString().equals("0000-00-00")) {
                        rowData[10] = "";
                    } else {
                        rowData[10] = EITLERPGLOBAL.formatDate(rsTmp.getString("TO_DATE"));
                    }
                    if (rsTmp.getString("TO_PUNCH").toString().equals("")) {
                        rowData[11] = "";
                    } else {
                        rowData[11] = rsTmp.getString("TO_PUNCH").substring(0, 5);
                    }
                    if (rsTmp.getString("DIFF").toString().equals("")) {
                        rowData[12] = "";
                    } else {
                        rowData[12] = rsTmp.getString("DIFF").substring(0, 5);
                    }
                    if (rsTmp.getString("SYS_DIFF").toString().equals("")) {
                        rowData[13] = "";
                        rowData[14] = "";
                        rowData[15] = "";
                        rowData[16] = "";
                        rowData[17] = "";
                        rowData[18] = "";
                    } else {
                        rowData[13] = rsTmp.getString("SYS_DIFF").substring(0, 5);
                        rowData[14] = rsTmp.getString("SYS_DIFF").substring(0, 5);
                        rowData[15] = "";
                        rowData[16] = rsTmp.getString("SYS_DIFF").substring(0, 5);
                        rowData[17] = "";
                        rowData[18] = "";
                    }
                    rowData[19] = rsTmp.getString("EMP_DEPT");
                    rowData[20] = rsTmp.getString("SHIFT");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
//                final TableColumnModel columnModel = Table.getColumnModel();
//                for (int column = 0; column < Table.getColumnCount(); column++) {
//                    int width = 60; // Min width
//                    for (int row = 0; row < Table.getRowCount(); row++) {
//                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
//                        Component comp = Table.prepareRenderer(renderer, row, column);
//                        width = Math.max(comp.getPreferredSize().width + 10, width);
//                    }
//                    if (width > 300) {
//                        width = 300;
//                    }
//                    columnModel.getColumn(column).setPreferredWidth(width);
//                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void SetFormatGrid() {
        DataModel.SetReadOnly(0);
        DataModel.SetReadOnly(1);
        DataModel.SetReadOnly(2);
        DataModel.SetReadOnly(3);
        DataModel.SetReadOnly(4);
        DataModel.SetReadOnly(5);
        DataModel.SetReadOnly(6);
        if (EITLERPGLOBAL.gUserDeptID != 28) {
            DataModel.SetReadOnly(7);
        }
        DataModel.SetReadOnly(8);
        DataModel.SetReadOnly(9);
        DataModel.SetReadOnly(10);
        DataModel.SetReadOnly(11);
        DataModel.SetReadOnly(12);
        DataModel.SetReadOnly(13);
        DataModel.SetReadOnly(14);
        DataModel.SetReadOnly(15);
        if (EITLERPGLOBAL.gUserDeptID != 28) {
            DataModel.SetReadOnly(16);
            DataModel.SetReadOnly(17);
        }
        if (EITLERPGLOBAL.gUserDeptID != 16) {
            DataModel.SetReadOnly(18);
        }
        DataModel.SetReadOnly(19);
        DataModel.SetReadOnly(20);
    }

}
