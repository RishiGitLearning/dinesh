/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SDMLATTPAY.AdvanceSearch;

import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.JTextFieldHint;
import EITLERP.ReportRegister;
import EITLERP.clsExcel_Exporter;
import EITLERP.data;
import SDMLATTPAY.Employee.clsMaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Dharmendra
 */
public class FrmAdvanceSearch_1 extends javax.swing.JApplet {

    /**
     * Initializes the applet FrmAdvanceSearch_1_1
     */
    private clsExcel_Exporter exp = new clsExcel_Exporter();

    private EITLTableModel DataModel = new EITLTableModel();

    private EITLComboModel modelDept = new EITLComboModel();
    private EITLComboModel modelShift = new EITLComboModel();
    private EITLComboModel modelMainCategory = new EITLComboModel();
    private EITLComboModel modelCategory = new EITLComboModel();

    private EITLComboModel cmbUserListModel = new EITLComboModel();
    private EITLComboModel cmbModuleListModel = new EITLComboModel();
    private EITLComboModel cmbPLOrderByModel = new EITLComboModel();
    private EITLComboModel cmbOrderByModel = new EITLComboModel();
    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();

    @Override
    public void init() {
        /* Set the Nimbus look and feel */

        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        //setSize(1000, 740);
        initComponents();
        /* Create and display the applet */
        btnMonthlySummaryView.setVisible(false);
        Table.setAutoCreateRowSorter(true);
        jLabel1.setForeground(Color.WHITE);
        txtFromDate.setText("");
        txtToDate.setText("");
        txtFromDate.setEnabled(false);
        txtToDate.setEnabled(false);

        cmbMonth.setSelectedIndex(EITLERPGLOBAL.getCurrentMonth());
        txtYear.setText(EITLERPGLOBAL.getCurrentYear() + "");

        GenerateDeptCombo();
        GenerateShiftCombo();
        GenerateMainCategoryCombo();
        GenerateCategoryCombo();
        GenerateOrderByCombo();

        GenerateUserCombo();
        GenerateModuleCombo();
        System.out.println("Dept : " + EITLERPGLOBAL.gUserDeptID);
        if (EITLERPGLOBAL.gUserID != 98 && EITLERPGLOBAL.gUserID != 243 && EITLERPGLOBAL.gUserDeptID != 28 && EITLERPGLOBAL.gUserDeptID != 76 && EITLERPGLOBAL.gUserDeptID != 4 && EITLERPGLOBAL.gUserDeptID != 16) {
//            TabList.remove(MonthlySummary);
//            TabList.remove(PunchData);
            TabList.remove(SpecialSanction);
//            TabList.remove(OddPunches);
//            TabList.remove(RokadiPunches);
//            TabList.remove(RokdiData);
        }
        if (EITLERPGLOBAL.gUserID != 307 && EITLERPGLOBAL.gUserID != 47) {
            TabList.remove(BdayCalender);
        }

        btnPendingListViewActionPerformed(null);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ExporttoExcelFileChooser = new javax.swing.JFileChooser();
        file1 = new javax.swing.JFileChooser();
        CoffRokadiBtnGrp = new javax.swing.ButtonGroup();
        LCBtnGrp = new javax.swing.ButtonGroup();
        GatePassBtnGrp = new javax.swing.ButtonGroup();
        RokdiDataGrp = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        lblEmpNo = new javax.swing.JLabel();
        txtEmpNo = new javax.swing.JTextField();
        txtEmpName = new javax.swing.JTextField();
        lblDate = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        lblDate1 = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        lblDeptCmb = new javax.swing.JLabel();
        cmbDept = new javax.swing.JComboBox();
        jLabel37 = new javax.swing.JLabel();
        cmbMainCategory = new javax.swing.JComboBox();
        lblMonthCmb = new javax.swing.JLabel();
        cmbMonth = new javax.swing.JComboBox();
        lblYearCmb = new javax.swing.JLabel();
        txtYear = new javax.swing.JTextField();
        lblShiftCmb = new javax.swing.JLabel();
        cmbShift = new javax.swing.JComboBox();
        jLabel27 = new javax.swing.JLabel();
        cmbCategory = new javax.swing.JComboBox();
        jLabel89 = new javax.swing.JLabel();
        cmbOrderBy = new javax.swing.JComboBox();
        btnClear = new javax.swing.JButton();
        TabList = new javax.swing.JTabbedPane();
        PendingList = new javax.swing.JPanel();
        btnPendingListView = new javax.swing.JButton();
        jLabel96 = new javax.swing.JLabel();
        cmbType = new javax.swing.JComboBox();
        jLabel97 = new javax.swing.JLabel();
        cmbUserList = new javax.swing.JComboBox();
        jLabel98 = new javax.swing.JLabel();
        cmbModuleList = new javax.swing.JComboBox();
        jLabel88 = new javax.swing.JLabel();
        cmbPLOrderBy = new javax.swing.JComboBox();
        EmployeeMaster = new javax.swing.JPanel();
        btnEmpMstView = new javax.swing.JButton();
        cmbMasterType = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        ShiftSchedule = new javax.swing.JPanel();
        btnShiftScheduleView = new javax.swing.JButton();
        DailyAttSummary = new javax.swing.JPanel();
        btnDailyAttView = new javax.swing.JButton();
        btnDailyAttPrint = new javax.swing.JButton();
        MonthlySummary = new javax.swing.JPanel();
        btnMonthlySummaryView = new javax.swing.JButton();
        btnMonthlySummaryView1 = new javax.swing.JButton();
        btnCobolSummaryView = new javax.swing.JButton();
        PunchData = new javax.swing.JPanel();
        btnBasicPunchDataView = new javax.swing.JButton();
        btnBasicPunchDataView1 = new javax.swing.JButton();
        btnBasicPunchDataView2 = new javax.swing.JButton();
        CoffRokadi = new javax.swing.JPanel();
        btnCoffRokadiView = new javax.swing.JButton();
        rbtnRokadi = new javax.swing.JRadioButton();
        rbtnCoff = new javax.swing.JRadioButton();
        rbtnCRokdi = new javax.swing.JRadioButton();
        rbtnRCoff = new javax.swing.JRadioButton();
        OddPunches = new javax.swing.JPanel();
        btnOddPunchesView = new javax.swing.JButton();
        LateComing = new javax.swing.JPanel();
        btnLateComingView = new javax.swing.JButton();
        rbtnLCDetail = new javax.swing.JRadioButton();
        rbtnLCSummary = new javax.swing.JRadioButton();
        GatePass = new javax.swing.JPanel();
        btnGatePassView = new javax.swing.JButton();
        rbtnPersonal = new javax.swing.JRadioButton();
        rbtnOfficial = new javax.swing.JRadioButton();
        LeaveAvail = new javax.swing.JPanel();
        btnLeaveAvailView = new javax.swing.JButton();
        LeaveBalance = new javax.swing.JPanel();
        btnLeaveBalanceView = new javax.swing.JButton();
        btnLeaveBalanceView1 = new javax.swing.JButton();
        btnLeaveBalanceView2 = new javax.swing.JButton();
        SpecialSanction = new javax.swing.JPanel();
        btnSpecialSanctionView = new javax.swing.JButton();
        RokadiPunches = new javax.swing.JPanel();
        btnRokdiPunchesView = new javax.swing.JButton();
        RokdiData = new javax.swing.JPanel();
        btnRokdiDataView = new javax.swing.JButton();
        RokdiDataWorker = new javax.swing.JRadioButton();
        RokdiDataContractor = new javax.swing.JRadioButton();
        BdayCalender = new javax.swing.JPanel();
        btnBdayCalenderView = new javax.swing.JButton();
        jScrollPane25 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        btnEmpMstETE = new javax.swing.JButton();
        cmbEmpStatus = new javax.swing.JComboBox();
        lblEmpStatus = new javax.swing.JLabel();

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setText("Attendance - Advance Search");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);

        lblEmpNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEmpNo.setText("Employee No : ");

        txtEmpNo.setToolTipText("Press F1 key for search Employee No");
        txtEmpNo = new JTextFieldHint(new JTextField(),"Search by F1");
        txtEmpNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmpNoFocusLost(evt);
            }
        });
        txtEmpNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEmpNoKeyPressed(evt);
            }
        });

        txtEmpName.setEditable(false);
        txtEmpName.setDisabledTextColor(java.awt.Color.black);
        txtEmpName.setEnabled(false);

        lblDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDate.setText("From Date : ");

        txtFromDate = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();

        lblDate1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDate1.setText("To Date : ");

        txtToDate = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();

        lblDeptCmb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDeptCmb.setText("Department : ");

        cmbDept.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbDept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDeptActionPerformed(evt);
            }
        });

        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel37.setText("Main Category : ");

        cmbMainCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblMonthCmb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMonthCmb.setText("Month : ");

        cmbMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        lblYearCmb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYearCmb.setText("Year : ");

        lblShiftCmb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblShiftCmb.setText("Shift : ");

        cmbShift.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel27.setText("Category : ");

        cmbCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel89.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel89.setText("Order By : ");

        btnClear.setText("Clear All");
        btnClear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnClear.setMargin(new java.awt.Insets(2, 7, 2, 7));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        TabList.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabListStateChanged(evt);
            }
        });

        PendingList.setLayout(null);

        btnPendingListView.setText("View");
        btnPendingListView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPendingListViewActionPerformed(evt);
            }
        });
        PendingList.add(btnPendingListView);
        btnPendingListView.setBounds(20, 10, 100, 30);

        jLabel96.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel96.setText("Type : ");
        PendingList.add(jLabel96);
        jLabel96.setBounds(130, 10, 50, 20);

        cmbType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "User Module Summary", "Module User Summary", "Detail" }));
        cmbType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTypeActionPerformed(evt);
            }
        });
        PendingList.add(cmbType);
        cmbType.setBounds(180, 10, 160, 20);

        jLabel97.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel97.setText("User List : ");
        PendingList.add(jLabel97);
        jLabel97.setBounds(340, 10, 80, 20);

        cmbUserList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select User" }));
        PendingList.add(cmbUserList);
        cmbUserList.setBounds(420, 10, 150, 20);

        jLabel98.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel98.setText("Module List : ");
        jLabel98.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel98MouseEntered(evt);
            }
        });
        PendingList.add(jLabel98);
        jLabel98.setBounds(570, 10, 100, 20);

        cmbModuleList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Module" }));
        PendingList.add(cmbModuleList);
        cmbModuleList.setBounds(670, 10, 150, 20);

        jLabel88.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel88.setText("Order : ");
        PendingList.add(jLabel88);
        jLabel88.setBounds(820, 10, 60, 20);
        PendingList.add(cmbPLOrderBy);
        cmbPLOrderBy.setBounds(880, 10, 100, 20);

        TabList.addTab("Document Approval Pending list", PendingList);

        EmployeeMaster.setToolTipText("Machine");
        EmployeeMaster.setLayout(null);

        btnEmpMstView.setText("View");
        btnEmpMstView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpMstViewActionPerformed(evt);
            }
        });
        EmployeeMaster.add(btnEmpMstView);
        btnEmpMstView.setBounds(20, 10, 100, 30);

        cmbMasterType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Employee", "Department", "Designation", "Category", "Sub Category", "Shift" }));
        cmbMasterType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMasterTypeItemStateChanged(evt);
            }
        });
        EmployeeMaster.add(cmbMasterType);
        cmbMasterType.setBounds(190, 10, 190, 20);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Type : ");
        EmployeeMaster.add(jLabel4);
        jLabel4.setBounds(130, 10, 60, 20);

        TabList.addTab("Master", EmployeeMaster);

        ShiftSchedule.setLayout(null);

        btnShiftScheduleView.setText("View");
        btnShiftScheduleView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShiftScheduleViewActionPerformed(evt);
            }
        });
        ShiftSchedule.add(btnShiftScheduleView);
        btnShiftScheduleView.setBounds(20, 10, 100, 30);

        TabList.addTab("Shift Schedule", ShiftSchedule);

        DailyAttSummary.setLayout(null);

        btnDailyAttView.setText("View");
        btnDailyAttView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDailyAttViewActionPerformed(evt);
            }
        });
        DailyAttSummary.add(btnDailyAttView);
        btnDailyAttView.setBounds(30, 10, 100, 30);

        btnDailyAttPrint.setText("Print");
        btnDailyAttPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDailyAttPrintActionPerformed(evt);
            }
        });
        DailyAttSummary.add(btnDailyAttPrint);
        btnDailyAttPrint.setBounds(140, 10, 100, 30);

        TabList.addTab("Daily Attendance Summary", DailyAttSummary);

        MonthlySummary.setLayout(null);

        btnMonthlySummaryView.setText("View");
        btnMonthlySummaryView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMonthlySummaryViewActionPerformed(evt);
            }
        });
        MonthlySummary.add(btnMonthlySummaryView);
        btnMonthlySummaryView.setBounds(20, 10, 100, 30);

        btnMonthlySummaryView1.setText("SPP View");
        btnMonthlySummaryView1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMonthlySummaryView1ActionPerformed(evt);
            }
        });
        MonthlySummary.add(btnMonthlySummaryView1);
        btnMonthlySummaryView1.setBounds(230, 10, 130, 30);

        btnCobolSummaryView.setText("ATT with COBOL Data");
        btnCobolSummaryView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCobolSummaryViewActionPerformed(evt);
            }
        });
        MonthlySummary.add(btnCobolSummaryView);
        btnCobolSummaryView.setBounds(460, 10, 280, 30);

        TabList.addTab("Monthly Attendance Summary", MonthlySummary);

        PunchData.setLayout(null);

        btnBasicPunchDataView.setText("View");
        btnBasicPunchDataView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBasicPunchDataViewActionPerformed(evt);
            }
        });
        PunchData.add(btnBasicPunchDataView);
        btnBasicPunchDataView.setBounds(10, 10, 100, 30);

        btnBasicPunchDataView1.setText("Ampad Punch");
        btnBasicPunchDataView1.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnBasicPunchDataView1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBasicPunchDataView1ActionPerformed(evt);
            }
        });
        PunchData.add(btnBasicPunchDataView1);
        btnBasicPunchDataView1.setBounds(850, 10, 120, 30);

        btnBasicPunchDataView2.setText("Sevasi Punch");
        btnBasicPunchDataView2.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnBasicPunchDataView2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBasicPunchDataView2ActionPerformed(evt);
            }
        });
        PunchData.add(btnBasicPunchDataView2);
        btnBasicPunchDataView2.setBounds(720, 10, 120, 30);

        TabList.addTab("Basic Punch Data", PunchData);

        CoffRokadi.setLayout(null);

        btnCoffRokadiView.setText("View");
        btnCoffRokadiView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCoffRokadiViewActionPerformed(evt);
            }
        });
        CoffRokadi.add(btnCoffRokadiView);
        btnCoffRokadiView.setBounds(20, 10, 100, 30);

        CoffRokadiBtnGrp.add(rbtnRokadi);
        rbtnRokadi.setText("Rokadi");
        rbtnRokadi.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnRokadiItemStateChanged(evt);
            }
        });
        CoffRokadi.add(rbtnRokadi);
        rbtnRokadi.setBounds(340, 10, 130, 20);

        CoffRokadiBtnGrp.add(rbtnCoff);
        rbtnCoff.setSelected(true);
        rbtnCoff.setText("Coff");
        rbtnCoff.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnCoffItemStateChanged(evt);
            }
        });
        CoffRokadi.add(rbtnCoff);
        rbtnCoff.setBounds(180, 10, 130, 20);

        CoffRokadiBtnGrp.add(rbtnCRokdi);
        rbtnCRokdi.setText("Contractor Rokadi");
        rbtnCRokdi.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnCRokdiItemStateChanged(evt);
            }
        });
        CoffRokadi.add(rbtnCRokdi);
        rbtnCRokdi.setBounds(490, 10, 220, 20);

        CoffRokadiBtnGrp.add(rbtnRCoff);
        rbtnRCoff.setText("Coff Retainer");
        rbtnRCoff.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnRCoffItemStateChanged(evt);
            }
        });
        CoffRokadi.add(rbtnRCoff);
        rbtnRCoff.setBounds(750, 10, 220, 20);

        TabList.addTab("Coff / Rokadi", CoffRokadi);

        OddPunches.setLayout(null);

        btnOddPunchesView.setText("View");
        btnOddPunchesView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOddPunchesViewActionPerformed(evt);
            }
        });
        OddPunches.add(btnOddPunchesView);
        btnOddPunchesView.setBounds(20, 10, 100, 30);

        TabList.addTab("Odd Punches", OddPunches);

        LateComing.setLayout(null);

        btnLateComingView.setText("View");
        btnLateComingView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLateComingViewActionPerformed(evt);
            }
        });
        LateComing.add(btnLateComingView);
        btnLateComingView.setBounds(20, 10, 100, 30);

        LCBtnGrp.add(rbtnLCDetail);
        rbtnLCDetail.setSelected(true);
        rbtnLCDetail.setText("Detail");
        rbtnLCDetail.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnLCDetailItemStateChanged(evt);
            }
        });
        LateComing.add(rbtnLCDetail);
        rbtnLCDetail.setBounds(180, 10, 110, 20);

        LCBtnGrp.add(rbtnLCSummary);
        rbtnLCSummary.setText("Summary");
        rbtnLCSummary.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnLCSummaryItemStateChanged(evt);
            }
        });
        LateComing.add(rbtnLCSummary);
        rbtnLCSummary.setBounds(330, 10, 125, 20);

        TabList.addTab("Late Coming", LateComing);

        GatePass.setLayout(null);

        btnGatePassView.setText("View");
        btnGatePassView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGatePassViewActionPerformed(evt);
            }
        });
        GatePass.add(btnGatePassView);
        btnGatePassView.setBounds(20, 10, 100, 30);

        GatePassBtnGrp.add(rbtnPersonal);
        rbtnPersonal.setSelected(true);
        rbtnPersonal.setText("Personal");
        rbtnPersonal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnPersonalItemStateChanged(evt);
            }
        });
        GatePass.add(rbtnPersonal);
        rbtnPersonal.setBounds(180, 10, 110, 20);

        GatePassBtnGrp.add(rbtnOfficial);
        rbtnOfficial.setText("Official");
        rbtnOfficial.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnOfficialItemStateChanged(evt);
            }
        });
        GatePass.add(rbtnOfficial);
        rbtnOfficial.setBounds(330, 10, 125, 20);

        TabList.addTab("Gate Pass", GatePass);

        LeaveAvail.setLayout(null);

        btnLeaveAvailView.setText("View");
        btnLeaveAvailView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeaveAvailViewActionPerformed(evt);
            }
        });
        LeaveAvail.add(btnLeaveAvailView);
        btnLeaveAvailView.setBounds(20, 10, 100, 30);

        TabList.addTab("Leave Avail", LeaveAvail);

        LeaveBalance.setLayout(null);

        btnLeaveBalanceView.setText("View");
        btnLeaveBalanceView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeaveBalanceViewActionPerformed(evt);
            }
        });
        LeaveBalance.add(btnLeaveBalanceView);
        btnLeaveBalanceView.setBounds(20, 10, 100, 30);

        btnLeaveBalanceView1.setText("Form-19");
        btnLeaveBalanceView1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeaveBalanceView1ActionPerformed(evt);
            }
        });
        LeaveBalance.add(btnLeaveBalanceView1);
        btnLeaveBalanceView1.setBounds(140, 10, 100, 30);

        btnLeaveBalanceView2.setText("Form-18");
        btnLeaveBalanceView2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeaveBalanceView2ActionPerformed(evt);
            }
        });
        LeaveBalance.add(btnLeaveBalanceView2);
        btnLeaveBalanceView2.setBounds(260, 10, 100, 30);

        TabList.addTab("Leave Balance", LeaveBalance);

        SpecialSanction.setLayout(null);

        btnSpecialSanctionView.setText("View");
        btnSpecialSanctionView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSpecialSanctionViewActionPerformed(evt);
            }
        });
        SpecialSanction.add(btnSpecialSanctionView);
        btnSpecialSanctionView.setBounds(20, 10, 100, 30);

        TabList.addTab("Special Sanction", SpecialSanction);

        RokadiPunches.setLayout(null);

        btnRokdiPunchesView.setText("View");
        btnRokdiPunchesView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRokdiPunchesViewActionPerformed(evt);
            }
        });
        RokadiPunches.add(btnRokdiPunchesView);
        btnRokdiPunchesView.setBounds(20, 10, 100, 30);

        TabList.addTab("Rokdi Punches", RokadiPunches);

        RokdiData.setLayout(null);

        btnRokdiDataView.setText("View");
        btnRokdiDataView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRokdiDataViewActionPerformed(evt);
            }
        });
        RokdiData.add(btnRokdiDataView);
        btnRokdiDataView.setBounds(20, 10, 100, 30);

        RokdiDataGrp.add(RokdiDataWorker);
        RokdiDataWorker.setSelected(true);
        RokdiDataWorker.setText("Worker");
        RokdiData.add(RokdiDataWorker);
        RokdiDataWorker.setBounds(170, 10, 77, 23);

        RokdiDataGrp.add(RokdiDataContractor);
        RokdiDataContractor.setText("Contractor");
        RokdiData.add(RokdiDataContractor);
        RokdiDataContractor.setBounds(330, 10, 101, 23);

        TabList.addTab("Rokdi Data", RokdiData);

        BdayCalender.setLayout(null);

        btnBdayCalenderView.setText("View");
        btnBdayCalenderView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBdayCalenderViewActionPerformed(evt);
            }
        });
        BdayCalender.add(btnBdayCalenderView);
        btnBdayCalenderView.setBounds(20, 10, 100, 30);

        TabList.addTab("B'day Calender", BdayCalender);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane25.setViewportView(Table);

        btnEmpMstETE.setLabel("Export to Excel");
        btnEmpMstETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpMstETEActionPerformed(evt);
            }
        });

        cmbEmpStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Working", "Left", "All" }));
        cmbEmpStatus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbEmpStatusItemStateChanged(evt);
            }
        });

        lblEmpStatus.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEmpStatus.setText("Status : ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblEmpNo, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(txtEmpNo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtEmpName, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDeptCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbDept, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbMainCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblMonthCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblYearCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 260, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblEmpStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(cmbEmpStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblShiftCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cmbShift, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel89, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbOrderBy, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnEmpMstETE, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(TabList)
                    .addContainerGap()))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jScrollPane25, javax.swing.GroupLayout.DEFAULT_SIZE, 1228, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmpNo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmpNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmpName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtToDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDeptCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbDept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbMainCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMonthCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblYearCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblShiftCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbShift, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel89, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbOrderBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblEmpStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbEmpStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 415, Short.MAX_VALUE)
                .addComponent(btnEmpMstETE, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(109, Short.MAX_VALUE)
                    .addComponent(TabList, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(388, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(195, Short.MAX_VALUE)
                    .addComponent(jScrollPane25, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(54, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtEmpNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmpNoFocusLost
        // TODO add your handling code here:
        if (!txtEmpNo.getText().trim().equals("") && data.IsRecordExist("SELECT * FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpNo.getText().trim() + "' AND APPROVED=1 AND CANCELED=0")) {
            txtEmpName.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpNo.getText() + "'"));
        } else {
            if (!txtEmpNo.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Employee No doesn't exist/under approval.");
            }
            txtEmpNo.setText("");
            txtEmpName.setText("");
        }
    }//GEN-LAST:event_txtEmpNoFocusLost

    private void txtEmpNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpNoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            ATTPAYLOV aList = new ATTPAYLOV();
            String cndtn = "";
            if (cmbEmpStatus.getSelectedItem().equals("Working")) {
                cndtn += " AND DATE(EMP_LEFT_DATE) = '0000-00-00' ";
            } else if (cmbEmpStatus.getSelectedItem().equals("Left")) {
                cndtn += " AND DATE(EMP_LEFT_DATE) != '0000-00-00' ";
            } else {

            }
            aList.SQL = "SELECT PAY_EMP_NO,EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE APPROVED=1 " + cndtn + "AND CANCELED=0";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtEmpNo.setText(aList.ReturnVal);
                txtEmpName.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpNo.getText() + "'"));
            }
        }
    }//GEN-LAST:event_txtEmpNoKeyPressed

    private void cmbDeptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDeptActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbDeptActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtEmpName.setText("");
        txtEmpNo.setText("");
        txtFromDate.setText("");
        txtToDate.setText("");
        txtYear.setText("");
        cmbMonth.setSelectedIndex(0);
        cmbDept.setSelectedIndex(0);
        cmbShift.setSelectedIndex(0);
        cmbMainCategory.setSelectedIndex(0);
        cmbCategory.setSelectedIndex(0);

        cmbMonth.setSelectedIndex(EITLERPGLOBAL.getCurrentMonth());
        txtYear.setText(EITLERPGLOBAL.getCurrentYear() + "");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnPendingListViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPendingListViewActionPerformed
        // TODO add your handling code here:
        GeneratePendingDoc();
    }//GEN-LAST:event_btnPendingListViewActionPerformed

    private void cmbTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbTypeActionPerformed

    private void jLabel98MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel98MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel98MouseEntered

    private void btnEmpMstViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpMstViewActionPerformed
        // TODO add your handling code here:
        if (cmbMasterType.getSelectedItem().equals("Employee")) {
            GenerateEmpMst();
        }
        if (cmbMasterType.getSelectedItem().equals("Department")) {
            GenerateDepartmentMst();
        }
        if (cmbMasterType.getSelectedItem().equals("Designation")) {
            GenerateDesignationMst();
        }
        if (cmbMasterType.getSelectedItem().equals("Category")) {
            GenerateCategoryMst();
        }
        if (cmbMasterType.getSelectedItem().equals("Sub Category")) {
            GenerateSubCategoryMst();
        }
        if (cmbMasterType.getSelectedItem().equals("Shift")) {
            GenerateShiftMst();
        }
    }//GEN-LAST:event_btnEmpMstViewActionPerformed

    private void cmbMasterTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMasterTypeItemStateChanged
        // TODO add your handling code here:
        if (cmbMasterType.getSelectedItem().equals("Employee")) {
            FormatGridEmpMst();
            lblEmpStatus.setVisible(true);
            cmbEmpStatus.setVisible(true);
            cmbEmpStatus.setSelectedIndex(0);
        } else {
            lblEmpStatus.setVisible(false);
            cmbEmpStatus.setVisible(false);
            cmbEmpStatus.setSelectedIndex(0);
        }
        if (cmbMasterType.getSelectedItem().equals("Department")
                || cmbMasterType.getSelectedItem().equals("Designation")
                || cmbMasterType.getSelectedItem().equals("Category")
                || cmbMasterType.getSelectedItem().equals("Sub Category")) {
            FormatGridMaster();
        }
        if (cmbMasterType.getSelectedItem().equals("Shift")) {
            FormatGridShiftMaster();
        }
    }//GEN-LAST:event_cmbMasterTypeItemStateChanged

    private void btnShiftScheduleViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShiftScheduleViewActionPerformed
        // TODO add your handling code here:
        if (!MonthYearValidate()) {
            return;
        } else {
            GenerateShiftSchedule();
        }
    }//GEN-LAST:event_btnShiftScheduleViewActionPerformed

    private void btnDailyAttViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDailyAttViewActionPerformed
        // TODO add your handling code here:
        if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
            if (!DateValidate()) {
                return;
            } else {
                GenerateDailyAtt();
            }
        } else if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
            if (!MonthYearValidate()) {
                return;
            } else {
                GenerateDailyAtt();
            }
        } else {
            JOptionPane.showMessageDialog(FrmAdvanceSearch_1.this, "Please Enter From-To Date or Enter Month-Year");
        }
    }//GEN-LAST:event_btnDailyAttViewActionPerformed

    private void btnMonthlySummaryViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMonthlySummaryViewActionPerformed
        // TODO add your handling code here:
        if (!MonthYearValidate()) {
            return;
        } else {
            GenerateMonthlySummary();
        }
    }//GEN-LAST:event_btnMonthlySummaryViewActionPerformed

    private void btnMonthlySummaryView1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMonthlySummaryView1ActionPerformed
        // TODO add your handling code here:
        GenerateMonthlySummarySPP();
    }//GEN-LAST:event_btnMonthlySummaryView1ActionPerformed

    private void btnBasicPunchDataViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBasicPunchDataViewActionPerformed
        // TODO add your handling code here:
        if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
            if (!DateValidate()) {
                return;
            } else {
                GenerateBasicPunches();
            }
        } else if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
            if (!MonthYearValidate()) {
                return;
            } else {
                GenerateBasicPunches();
            }
        } else {
            JOptionPane.showMessageDialog(FrmAdvanceSearch_1.this, "Please Enter From-To Date or Enter Month-Year");
        }
    }//GEN-LAST:event_btnBasicPunchDataViewActionPerformed

    private void btnCoffRokadiViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCoffRokadiViewActionPerformed
        // TODO add your handling code here:
        if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
            if (!DateValidate()) {
                return;
            } else {
                GenerateCoffRokadi();
            }
        } else if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
            if (!MonthYearValidate()) {
                return;
            } else {
                GenerateCoffRokadi();
            }
        } else {
            JOptionPane.showMessageDialog(FrmAdvanceSearch_1.this, "Please Enter From-To Date or Enter Month-Year");
        }
    }//GEN-LAST:event_btnCoffRokadiViewActionPerformed

    private void rbtnRokadiItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnRokadiItemStateChanged
        // TODO add your handling code here:
        FormatGridCoffRokadi();
    }//GEN-LAST:event_rbtnRokadiItemStateChanged

    private void rbtnCoffItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnCoffItemStateChanged
        // TODO add your handling code here:
        FormatGridCoffRokadi();
    }//GEN-LAST:event_rbtnCoffItemStateChanged

    private void rbtnCRokdiItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnCRokdiItemStateChanged
        // TODO add your handling code here:
        FormatGridCoffRokadi();
    }//GEN-LAST:event_rbtnCRokdiItemStateChanged

    private void btnOddPunchesViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOddPunchesViewActionPerformed
        // TODO add your handling code here:
        if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
            if (!DateValidate()) {
                return;
            } else {
                GenerateOddPunches();
            }
        } else if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
            if (!MonthYearValidate()) {
                return;
            } else {
                GenerateOddPunches();
            }
        } else {
            JOptionPane.showMessageDialog(FrmAdvanceSearch_1.this, "Please Enter From-To Date or Enter Month-Year");
        }
    }//GEN-LAST:event_btnOddPunchesViewActionPerformed

    private void btnLateComingViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLateComingViewActionPerformed
        // TODO add your handling code here:
        if (rbtnLCDetail.isSelected()) {
            if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
                if (!DateValidate()) {
                    return;
                } else {
                    GenerateLateComingDetail();
                }
            } else if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
                if (!MonthYearValidate()) {
                    return;
                } else {
                    GenerateLateComingDetail();
                }
            } else {
                JOptionPane.showMessageDialog(FrmAdvanceSearch_1.this, "Please Enter From-To Date or Enter Month-Year");
            }
        }
        if (rbtnLCSummary.isSelected()) {
            if (!MonthYearValidate()) {
                return;
            } else {
                GenerateLateComingSummary();
            }
        }
    }//GEN-LAST:event_btnLateComingViewActionPerformed

    private void rbtnLCDetailItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnLCDetailItemStateChanged
        // TODO add your handling code here:
        FormatGridLateComingDetail();

        txtEmpNo.setEnabled(true);
        txtFromDate.setEnabled(true);
        txtToDate.setEnabled(true);
        txtYear.setEnabled(true);
        cmbMonth.setEnabled(true);
        cmbDept.setEnabled(true);
        cmbShift.setEnabled(true);
        cmbMainCategory.setEnabled(true);
        cmbCategory.setEnabled(true);
    }//GEN-LAST:event_rbtnLCDetailItemStateChanged

    private void rbtnLCSummaryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnLCSummaryItemStateChanged
        // TODO add your handling code here:
        FormatGridLateComingSummary();

        txtEmpNo.setEnabled(true);
        txtFromDate.setEnabled(false);
        txtToDate.setEnabled(false);
        txtYear.setEnabled(true);
        cmbMonth.setEnabled(true);
        cmbDept.setEnabled(true);
        cmbShift.setEnabled(false);
        cmbMainCategory.setEnabled(true);
        cmbCategory.setEnabled(true);
    }//GEN-LAST:event_rbtnLCSummaryItemStateChanged

    private void btnGatePassViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGatePassViewActionPerformed
        // TODO add your handling code here:
        if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
            if (!DateValidate()) {
                return;
            } else {
                GenerateGatePass();
            }
        } else if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
            if (!MonthYearValidate()) {
                return;
            } else {
                GenerateGatePass();
            }
        } else {
            JOptionPane.showMessageDialog(FrmAdvanceSearch_1.this, "Please Enter From-To Date or Enter Month-Year");
        }
    }//GEN-LAST:event_btnGatePassViewActionPerformed

    private void rbtnPersonalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnPersonalItemStateChanged
        // TODO add your handling code here:
        FormatGridGatePass();
    }//GEN-LAST:event_rbtnPersonalItemStateChanged

    private void rbtnOfficialItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnOfficialItemStateChanged
        // TODO add your handling code here:
        FormatGridGatePass();
    }//GEN-LAST:event_rbtnOfficialItemStateChanged

    private void btnLeaveAvailViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeaveAvailViewActionPerformed
        // TODO add your handling code here:
        //        if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
        //            if (!DateValidate()) {
        //                return;
        //            } else {
        //                GenerateLeaveAvail();
        //            }
        //        } else if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
        //            if (!MonthYearValidate()) {
        //                return;
        //            } else {
        //                GenerateLeaveAvail();
        //            }
        //        } else {
        //            JOptionPane.showMessageDialog(FrmAdvanceSearch_1.this, "Please Enter From-To Date or Enter Month-Year");
        //        }
        if (!txtYear.getText().trim().equals("")) {
            GenerateLeaveAvail();
        } else {
            JOptionPane.showMessageDialog(FrmAdvanceSearch_1.this, "Please Enter Year");
        }
    }//GEN-LAST:event_btnLeaveAvailViewActionPerformed

    private void btnLeaveBalanceViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeaveBalanceViewActionPerformed
        // TODO add your handling code here:
        GenerateLeaveBalance();
    }//GEN-LAST:event_btnLeaveBalanceViewActionPerformed

    private void btnSpecialSanctionViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSpecialSanctionViewActionPerformed
        // TODO add your handling code here:
        if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
            if (!DateValidate()) {
                return;
            } else {
                GenerateSpecialSanction();
            }
        } else if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
            if (!MonthYearValidate()) {
                return;
            } else {
                GenerateSpecialSanction();
            }
        } else {
            JOptionPane.showMessageDialog(FrmAdvanceSearch_1.this, "Please Enter From-To Date or Enter Month-Year");
        }
    }//GEN-LAST:event_btnSpecialSanctionViewActionPerformed

    private void TabListStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabListStateChanged
        // TODO add your handling code here:
        if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Document Approval Pending list")) {

            txtEmpNo.setEnabled(false);
            txtFromDate.setEnabled(false);
            txtToDate.setEnabled(false);
            txtYear.setEnabled(false);
            cmbMonth.setEnabled(false);
            cmbDept.setEnabled(false);
            cmbShift.setEnabled(false);
            cmbMainCategory.setEnabled(false);
            cmbCategory.setEnabled(false);
            cmbOrderBy.setEnabled(false);

            btnPendingListViewActionPerformed(null);

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Master")) {
            FormatGridEmpMst();

            txtEmpNo.setEnabled(true);
            txtFromDate.setEnabled(false);
            txtToDate.setEnabled(false);
            txtYear.setEnabled(false);
            cmbMonth.setEnabled(false);
            cmbDept.setEnabled(true);
            cmbShift.setEnabled(true);
            cmbMainCategory.setEnabled(true);
            cmbCategory.setEnabled(true);
            cmbOrderBy.setEnabled(false);

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Shift Schedule")) {
            FormatGridShiftSchedule();

            txtEmpNo.setEnabled(true);
            txtFromDate.setEnabled(false);
            txtToDate.setEnabled(false);
            txtYear.setEnabled(true);
            cmbMonth.setEnabled(true);
            cmbDept.setEnabled(true);
            cmbShift.setEnabled(false);
            cmbMainCategory.setEnabled(false);
            cmbCategory.setEnabled(false);
            cmbOrderBy.setEnabled(true);

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Daily Attendance Summary")) {
            FormatGridDailyAtt();

            txtEmpNo.setEnabled(true);
            txtFromDate.setEnabled(true);
            txtToDate.setEnabled(true);
            txtYear.setEnabled(true);
            cmbMonth.setEnabled(true);
            cmbDept.setEnabled(true);
            cmbShift.setEnabled(true);
            cmbMainCategory.setEnabled(true);
            cmbCategory.setEnabled(true);
            cmbOrderBy.setEnabled(true);

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Monthly Attendance Summary")) {
            FormatGridMonthlySummary();

            txtEmpNo.setEnabled(true);
            txtFromDate.setEnabled(false);
            txtToDate.setEnabled(false);
            txtYear.setEnabled(true);
            cmbMonth.setEnabled(true);
            cmbDept.setEnabled(true);
            cmbShift.setEnabled(true);
            cmbMainCategory.setEnabled(true);
            cmbCategory.setEnabled(true);
            cmbOrderBy.setEnabled(true);

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Basic Punch Data")) {
            FormatGridBasicPunches();

            txtEmpNo.setEnabled(true);
            txtFromDate.setEnabled(true);
            txtToDate.setEnabled(true);
            txtYear.setEnabled(true);
            cmbMonth.setEnabled(true);
            cmbDept.setEnabled(true);
            cmbShift.setEnabled(true);
            cmbMainCategory.setEnabled(true);
            cmbCategory.setEnabled(true);
            cmbOrderBy.setEnabled(true);

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Coff / Rokadi")) {
            FormatGridCoffRokadi();

            txtEmpNo.setEnabled(true);
            txtFromDate.setEnabled(true);
            txtToDate.setEnabled(true);
            txtYear.setEnabled(true);
            cmbMonth.setEnabled(true);
            cmbDept.setEnabled(true);
            cmbShift.setEnabled(true);
            cmbMainCategory.setEnabled(true);
            cmbCategory.setEnabled(true);
            cmbOrderBy.setEnabled(true);

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Odd Punches")) {
            FormatGridOddPunches();

            txtEmpNo.setEnabled(true);
            txtFromDate.setEnabled(true);
            txtToDate.setEnabled(true);
            txtYear.setEnabled(true);
            cmbMonth.setEnabled(true);
            cmbDept.setEnabled(true);
            cmbShift.setEnabled(true);
            cmbMainCategory.setEnabled(true);
            cmbCategory.setEnabled(true);
            cmbOrderBy.setEnabled(true);

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Late Coming")) {
            FormatGridLateComingDetail();

            if (rbtnLCDetail.isSelected()) {
                txtEmpNo.setEnabled(true);
                txtFromDate.setEnabled(true);
                txtToDate.setEnabled(true);
                txtYear.setEnabled(true);
                cmbMonth.setEnabled(true);
                cmbDept.setEnabled(true);
                cmbShift.setEnabled(true);
                cmbMainCategory.setEnabled(true);
                cmbCategory.setEnabled(true);
                cmbOrderBy.setEnabled(true);
            }
            if (rbtnLCSummary.isSelected()) {
                txtEmpNo.setEnabled(true);
                txtFromDate.setEnabled(false);
                txtToDate.setEnabled(false);
                txtYear.setEnabled(true);
                cmbMonth.setEnabled(true);
                cmbDept.setEnabled(true);
                cmbShift.setEnabled(false);
                cmbMainCategory.setEnabled(true);
                cmbCategory.setEnabled(true);
                cmbOrderBy.setEnabled(true);
            }

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Gate Pass")) {
            FormatGridGatePass();

            txtEmpNo.setEnabled(true);
            txtFromDate.setEnabled(true);
            txtToDate.setEnabled(true);
            txtYear.setEnabled(true);
            cmbMonth.setEnabled(true);
            cmbDept.setEnabled(true);
            cmbShift.setEnabled(true);
            cmbMainCategory.setEnabled(true);
            cmbCategory.setEnabled(false);
            cmbOrderBy.setEnabled(true);

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Leave Avail")) {
            FormatGridLeaveAvail();

            txtEmpNo.setEnabled(true);
            txtFromDate.setEnabled(true);
            txtToDate.setEnabled(true);
            txtYear.setEnabled(true);
            cmbMonth.setEnabled(false);
            cmbDept.setEnabled(true);
            cmbShift.setEnabled(false);
            cmbMainCategory.setEnabled(true);
            cmbCategory.setEnabled(true);
            cmbOrderBy.setEnabled(true);

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Leave Balance")) {
            FormatGridLeaveBalance();

            txtEmpNo.setEnabled(true);
            txtFromDate.setEnabled(false);
            txtToDate.setEnabled(false);
            txtYear.setEnabled(true);
            cmbMonth.setEnabled(false);
            cmbDept.setEnabled(true);
            cmbShift.setEnabled(false);
            cmbMainCategory.setEnabled(true);
            cmbCategory.setEnabled(true);
            cmbOrderBy.setEnabled(true);

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Special Sanction")) {
            FormatGridSpecialSanction();

            txtEmpNo.setEnabled(true);
            txtFromDate.setEnabled(true);
            txtToDate.setEnabled(true);
            txtYear.setEnabled(true);
            cmbMonth.setEnabled(true);
            cmbDept.setEnabled(true);
            cmbShift.setEnabled(false);
            cmbMainCategory.setEnabled(true);
            cmbCategory.setEnabled(true);
            cmbOrderBy.setEnabled(true);

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Rokdi Punches")) {
            FormatGridRokdiPunches();

            txtEmpNo.setEnabled(true);
            txtFromDate.setEnabled(true);
            txtToDate.setEnabled(true);
            txtYear.setEnabled(true);
            cmbMonth.setEnabled(true);
            cmbDept.setEnabled(true);
            cmbShift.setEnabled(true);
            cmbMainCategory.setEnabled(true);
            cmbCategory.setEnabled(true);
            cmbOrderBy.setEnabled(true);

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Rokdi Data")) {
            FormatGridRokdiPunches();

            txtEmpNo.setEnabled(true);
            txtFromDate.setEnabled(true);
            txtToDate.setEnabled(true);
            txtYear.setEnabled(false);
            cmbMonth.setEnabled(false);
            cmbDept.setEnabled(true);
            cmbShift.setEnabled(false);
            cmbMainCategory.setEnabled(true);
            cmbCategory.setEnabled(true);
            cmbOrderBy.setEnabled(true);

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Bday Calender")) {
            FormatGridBirthdayCalender();

            txtEmpNo.setEnabled(false);
            txtFromDate.setEnabled(false);
            txtToDate.setEnabled(false);
            txtYear.setEnabled(false);
            cmbMonth.setEnabled(false);
            cmbDept.setEnabled(false);
            cmbShift.setEnabled(false);
            cmbMainCategory.setEnabled(false);
            cmbCategory.setEnabled(false);
            cmbOrderBy.setEnabled(false);

            //btnPendingListViewActionPerformed(null);
        }
    }//GEN-LAST:event_TabListStateChanged

    private void btnEmpMstETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpMstETEActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnEmpMstETEActionPerformed

    private void btnRokdiPunchesViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRokdiPunchesViewActionPerformed
        // TODO add your handling code here:
        if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
            if (!DateValidate()) {
                return;
            } else {
                GenerateRokdiPunches();
            }
        } else if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
            if (!MonthYearValidate()) {
                return;
            } else {
                GenerateRokdiPunches();
            }
        } else {
            JOptionPane.showMessageDialog(FrmAdvanceSearch_1.this, "Please Enter From-To Date or Enter Month-Year");
        }
    }//GEN-LAST:event_btnRokdiPunchesViewActionPerformed

    private void btnRokdiDataViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRokdiDataViewActionPerformed
        // TODO add your handling code here:
        if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
            if (!DateValidate()) {
                return;
            } else {
                GenerateRokdiData();
            }
        } else {
            JOptionPane.showMessageDialog(FrmAdvanceSearch_1.this, "Please Enter From-To Date ...");
        }
    }//GEN-LAST:event_btnRokdiDataViewActionPerformed

    private void btnDailyAttPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDailyAttPrintActionPerformed
        // TODO add your handling code here:
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        String cndtn = "";
        String grp_cndtn = "";
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();
            parameterMap.put("PMONTH", "");
            ReportRegister rpt = new ReportRegister(parameterMap, Conn);
            //String mm = txtmonth.getText().trim().substring(0, txtmonth.getText().trim().length() - 7);
            //String yy = txtmonth.getText().trim().substring(txtmonth.getText().trim().length() - 4);
            //mm = mm.substring(0, 3).toUpperCase();
            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND EMPID= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " WHERE EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
            }
            if (!cmbShift.getSelectedItem().equals("Select Shift")) {
                cndtn += " AND SHIFT= " + modelShift.getCode(cmbShift.getSelectedIndex()) + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                cndtn += " AND MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                cndtn += " AND CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
            }
            if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
                cndtn += " AND PUNCHDATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
                cndtn += " AND PUNCHDATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
            } else if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
                cndtn += " AND MM= " + cmbMonth.getSelectedIndex() + "  AND MONTH(PUNCHDATE)= " + cmbMonth.getSelectedIndex() + " ";
                cndtn += " AND YYYY= '" + txtYear.getText().trim() + "'";
            }
            String strSQL = "SELECT * FROM (SELECT DISTINCT CONCAT(LEFT(MONTHNAME(PUNCHDATE),3),' - ',YEAR(PUNCHDATE)) AS MMYYYY,"
                    + "EMPID,  SHIFT, PUNCHDATE, PUNCHES_NOS, ALL_PUNCHES, PRESENT_FIRST, PRESENT_SECOND,MAIN_CATEGORY,CATEGORY "
                    + "FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM " + cndtn + " ) AS DAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON DAS.EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=DAS.MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=DAS.CATEGORY "
                    + "LEFT JOIN ( SELECT *,'YES' AS SSS FROM SDMLATTPAY.ATT_SPECIAL_SANCTION WHERE APPROVED=1 AND CANCELED=0 ) AS SS "
                    + "ON DAS.EMPID=SS.EMP_CODE AND DAS.PUNCHDATE=SS.A_DATE "
                    + " " + grp_cndtn + " ";

            strSQL = strSQL + " ORDER BY EMPID,PUNCHDATE";
            System.out.println("SQL:" + strSQL);
            //rpt.setReportName("/EITLERP/FeltSales/FeltPacking/rptFeltPacking.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/AdvanceSearch/BARODA_STAFF_ATTENDANCE_REPORT.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnDailyAttPrintActionPerformed

    private void btnLeaveBalanceView1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeaveBalanceView1ActionPerformed
        // TODO add your handling code here:
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        String cndtn = "";
        String grp_cndtn = "";
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();
            parameterMap.put("PMONTH", "");
            ReportRegister rpt = new ReportRegister(parameterMap, Conn);
            //String mm = txtmonth.getText().trim().substring(0, txtmonth.getText().trim().length() - 7);
            //String yy = txtmonth.getText().trim().substring(txtmonth.getText().trim().length() - 4);
            //mm = mm.substring(0, 3).toUpperCase();
            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND MS_EMPID= '" + txtEmpNo.getText().trim() + "' ";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                grp_cndtn += " AND EMP_CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
            }

            String strSQL = "SELECT DD.*,COALESCE(PL,0)+COALESCE(CL,0)+COALESCE(SL,0) AS LVL FROM (SELECT * FROM ( SELECT * FROM SDMLATTPAY.ATT_MTH_SUMMARY WHERE MS_YYYY=" + txtYear.getText() + " " + cndtn + " ) AS LB "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_SEX,EMP_JOIN_DATE,EMP_DESIGNATION,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY,EMP_LEFT_DATE FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON LB.MS_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN (SELECT DSGID,NAME AS DESIGNATION FROM SDMLATTPAY.ATT_DESIGNATION_MASTER) AS DSGN "
                    + "ON EMP_DESIGNATION=DSGID "
                    + " WHERE 1=1 " + grp_cndtn + " ";

            strSQL = strSQL + " ORDER BY MS_EMPID,MS_YYYY,MS_MM) AS DD";
            System.out.println("SQL:" + strSQL);
            //rpt.setReportName("/EITLERP/FeltSales/FeltPacking/rptFeltPacking.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/AdvanceSearch/form_19_staff.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnLeaveBalanceView1ActionPerformed

    private void btnLeaveBalanceView2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeaveBalanceView2ActionPerformed
        // TODO add your handling code here:
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        String cndtn = "";
        String grp_cndtn = "";
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();
            parameterMap.put("PMONTH", "");
            ReportRegister rpt = new ReportRegister(parameterMap, Conn);
            //String mm = txtmonth.getText().trim().substring(0, txtmonth.getText().trim().length() - 7);
            //String yy = txtmonth.getText().trim().substring(txtmonth.getText().trim().length() - 4);
            //mm = mm.substring(0, 3).toUpperCase();
            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND MS_EMPID= '" + txtEmpNo.getText().trim() + "' ";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                grp_cndtn += " AND EMP_CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
            }

            String strSQL = "SELECT A.*, B.*, C.*, LEFT(MONTHNAME(CONCAT(MS_YYYY,'-',MS_MM,'-01')),3) AS MNTH,"
                    + " COALESCE(PRESENT_DAYS,0)+COALESCE(PL,0)+COALESCE(CL,0)+COALESCE(SL,0)+COALESCE(LWP_DAYS,0) AS ROW_TOT, "
                    + "COALESCE(LOFF,0)+COALESCE(EOFF,0) AS LEOFF, COALESCE(LVBAL_OPENING,0)+COALESCE(LVBAL_CREDIT,0) AS LVTOT "
                    + "FROM SDMLATTPAY.ATT_MTH_SUMMARY AS A, SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP AS B, SDMLATTPAY.ATT_LEAVE_BALANCE AS C "
                    + "WHERE A.MS_YYYY = " + txtYear.getText() + "  AND B.PAY_EMPID=A.MS_EMPID AND C.LVBAL_PAYEMPCD=A.MS_EMPID AND MS_YYYY = LVBAL_YEAR "
                    + "AND C.LVBAL_LEAVE_CD = 'SL'  " + cndtn
                    + " ORDER BY A.MS_EMPID, A.MS_YYYY, A.MS_MM";

            System.out.println("SQL:" + strSQL);
            //rpt.setReportName("/EITLERP/FeltSales/FeltPacking/rptFeltPacking.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/AdvanceSearch/form_18.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnLeaveBalanceView2ActionPerformed

    private void rbtnRCoffItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnRCoffItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_rbtnRCoffItemStateChanged

    private void btnCobolSummaryViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCobolSummaryViewActionPerformed
        // TODO add your handling code here:
        if (txtEmpNo.getText().toString().trim().equals("")) {
            if (!MonthYearValidate()) {
                return;
            } else {
                GenerateCobolSummary();
            }
        } else {
            GenerateCobolSummary();
        }
    }//GEN-LAST:event_btnCobolSummaryViewActionPerformed

    private void cmbEmpStatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbEmpStatusItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbEmpStatusItemStateChanged

    private void btnBdayCalenderViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBdayCalenderViewActionPerformed
        GenerateBirthdayCalender();
    }//GEN-LAST:event_btnBdayCalenderViewActionPerformed

    private void btnBasicPunchDataView1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBasicPunchDataView1ActionPerformed
Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        String cndtn = "";
        String grp_cndtn = "";
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();
            String mnthString=data.getStringValueFromDB("SELECT LEFT(MONTHNAME(STR_TO_DATE(" + cmbMonth.getSelectedIndex() + ", '%m')),3)");
            //String yr=data.Execute("");
            parameterMap.put("strMnth", mnthString);
            parameterMap.put("yr", txtYear.getText().trim());
            ReportRegister rpt = new ReportRegister(parameterMap, Conn);
            //String mm = txtmonth.getText().trim().substring(0, txtmonth.getText().trim().length() - 7);
            //String yy = txtmonth.getText().trim().substring(txtmonth.getText().trim().length() - 4);
            //mm = mm.substring(0, 3).toUpperCase();
            /*if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND EMPID= '" + txtEmpNo.getText().trim() + "'";
            }           
            
            if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
                cndtn += " AND PUNCHDATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
                cndtn += " AND PUNCHDATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
            } else if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
                cndtn += " AND MM=   AND MONTH(PUNCHDATE)= " + cmbMonth.getSelectedIndex() + " ";
                cndtn += " AND YYYY= ";
            }
            */
            /*String strSQL = "SELECT EMPID,PUNCHDATE,PUNCHES_NOS,ALL_PUNCHES,COALESCE(EMP_NAME,'') AS EMP_NAME FROM\n"
                    + "(SELECT EMP_CODE AS EMPID,A_DATE AS PUNCHDATE,COUNT(DISTINCT P_TIME) AS PUNCHES_NOS,GROUP_CONCAT(DISTINCT P_TIME "
                    + "ORDER BY P_TIME ASC SEPARATOR ',    ') AS ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA WHERE "
                    + "YEAR(A_DATE)='" + txtYear.getText().trim() + "' AND MONTH(A_DATE)=" + cmbMonth.getSelectedIndex() + ""
                    + " AND MACHINE=30 \n"
                    + "GROUP BY EMP_CODE,A_DATE) SEVASI\n"
                    + "LEFT JOIN \n"
                    + "( SELECT PAY_EMP_NO,EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP \n"
                    + "ON SEVASI.EMPID=EMP.PAY_EMP_NO ";*/
           
            String strSQL="SELECT EMPID,PUNCHDATE,DAYNAME(PUNCHDATE) AS DAY,PUNCHES_NOS,ALL_PUNCHES,COALESCE(EMP_NAME,'') AS EMP_NAME FROM\n"
                    + "(SELECT A.EMP_CODE AS EMPID,DATE1 AS PUNCHDATE,COALESCE(PUNCHES_NOS,0) AS PUNCHES_NOS,COALESCE(ALL_PUNCHES,'') AS ALL_PUNCHES FROM\n"
                    + "(SELECT DISTINCT EMP_CODE,DATE1 FROM SDMLATTPAY.ATT_DATA,\n"
                    + "(SELECT DISTINCT A_DATE AS DATE1 FROM SDMLATTPAY.ATT_DATA WHERE MONTH(A_DATE) =" + cmbMonth.getSelectedIndex() + " AND YEAR(A_DATE) = '" + txtYear.getText().trim() + "') AS AC WHERE MONTH(A_DATE) =" + cmbMonth.getSelectedIndex() + " AND YEAR(A_DATE) = '" + txtYear.getText().trim() + "'\n"
                    + "AND MACHINE=30) A\n"
                    + "LEFT JOIN\n"
                    + "(SELECT EMP_CODE AS EMPID,A_DATE AS PUNCHDATE,COUNT(DISTINCT P_TIME) AS PUNCHES_NOS,GROUP_CONCAT(DISTINCT P_TIME ORDER BY P_TIME ASC SEPARATOR ',    ') AS ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA WHERE YEAR(A_DATE)='" + txtYear.getText().trim() + "' AND MONTH(A_DATE)=" + cmbMonth.getSelectedIndex() + " AND MACHINE=30 \n"
                    + "GROUP BY EMP_CODE,A_DATE) B\n"
                    + "ON A.EMP_CODE=B.EMPID AND A.DATE1=B.PUNCHDATE) X\n"
                    + "LEFT JOIN\n"
                    + "( SELECT PAY_EMP_NO,EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP \n"
                    + "ON EMPID=PAY_EMP_NO \n"
                    + "ORDER BY EMPID,PUNCHDATE ";

            //strSQL = strSQL + " ORDER BY EMPID,PUNCHDATE";
            System.out.println("SQL:" + strSQL);
            //rpt.setReportName("/EITLERP/FeltSales/FeltPacking/rptFeltPacking.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/AdvanceSearch/AMPAD_PUNCHES_DETAIL_REPORT.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnBasicPunchDataView1ActionPerformed

    private void btnBasicPunchDataView2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBasicPunchDataView2ActionPerformed

        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        String cndtn = "";
        String grp_cndtn = "";
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();
            //parameterMap.put("PMONTH", "");
            String mnthString = data.getStringValueFromDB("SELECT LEFT(MONTHNAME(STR_TO_DATE(" + cmbMonth.getSelectedIndex() + ", '%m')),3)");
            //String yr=data.Execute("");
            parameterMap.put("strMnth", mnthString);
            parameterMap.put("yr", txtYear.getText().trim());
            ReportRegister rpt = new ReportRegister(parameterMap, Conn);
            //String mm = txtmonth.getText().trim().substring(0, txtmonth.getText().trim().length() - 7);
            //String yy = txtmonth.getText().trim().substring(txtmonth.getText().trim().length() - 4);
            //mm = mm.substring(0, 3).toUpperCase();
            /*if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND EMPID= '" + txtEmpNo.getText().trim() + "'";
            }           
            
            if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
                cndtn += " AND PUNCHDATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
                cndtn += " AND PUNCHDATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
            } else if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
                cndtn += " AND MM=   AND MONTH(PUNCHDATE)= " + cmbMonth.getSelectedIndex() + " ";
                cndtn += " AND YYYY= ";
            }
            */
            /*String strSQL = "SELECT EMPID,PUNCHDATE,PUNCHES_NOS,ALL_PUNCHES,COALESCE(EMP_NAME,'') AS EMP_NAME FROM\n"
                    + "(SELECT EMP_CODE AS EMPID,A_DATE AS PUNCHDATE,COUNT(DISTINCT P_TIME) AS PUNCHES_NOS,GROUP_CONCAT(DISTINCT P_TIME "
                    + "ORDER BY P_TIME ASC SEPARATOR ',    ') AS ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA WHERE "
                    + "YEAR(A_DATE)='" + txtYear.getText().trim() + "' AND MONTH(A_DATE)=" + cmbMonth.getSelectedIndex() + ""
                    + " AND MACHINE=31 \n"
                    + "GROUP BY EMP_CODE,A_DATE) SEVASI\n"
                    + "LEFT JOIN \n"
                    + "( SELECT PAY_EMP_NO,EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP \n"
                    + "ON SEVASI.EMPID=EMP.PAY_EMP_NO "; */
            /*
            String strSQL="SELECT EMPID,PUNCHDATE,DAYNAME(PUNCHDATE) AS DAY,PUNCHES_NOS,ALL_PUNCHES,COALESCE(EMP_NAME,'') AS EMP_NAME FROM\n"
                    + "(SELECT A.EMP_CODE AS EMPID,DATE1 AS PUNCHDATE,COALESCE(PUNCHES_NOS,0) AS PUNCHES_NOS,COALESCE(ALL_PUNCHES,'') AS ALL_PUNCHES FROM\n"
                    + "(SELECT DISTINCT EMP_CODE,DATE1 FROM SDMLATTPAY.ATT_DATA,\n"
                    + "(SELECT DISTINCT A_DATE AS DATE1 FROM SDMLATTPAY.ATT_DATA WHERE MONTH(A_DATE) =" + cmbMonth.getSelectedIndex() + " AND YEAR(A_DATE) = '" + txtYear.getText().trim() + "') AS AC WHERE MONTH(A_DATE) =" + cmbMonth.getSelectedIndex() + " AND YEAR(A_DATE) = '" + txtYear.getText().trim() + "'\n"
                    + "AND MACHINE=31) A\n"
                    + "LEFT JOIN\n"
                    + "(SELECT EMP_CODE AS EMPID,A_DATE AS PUNCHDATE,COUNT(DISTINCT P_TIME) AS PUNCHES_NOS,GROUP_CONCAT(DISTINCT P_TIME ORDER BY P_TIME ASC SEPARATOR ',    ') AS ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA WHERE YEAR(A_DATE)='" + txtYear.getText().trim() + "' AND MONTH(A_DATE)=" + cmbMonth.getSelectedIndex() + " AND MACHINE=31 \n"
                    + "GROUP BY EMP_CODE,A_DATE) B\n"
                    + "ON A.EMP_CODE=B.EMPID AND A.DATE1=B.PUNCHDATE) X\n"
                    + "LEFT JOIN\n"
                    + "( SELECT PAY_EMP_NO,EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP \n"
                    + "ON EMPID=PAY_EMP_NO \n"
                    + "ORDER BY EMPID,PUNCHDATE ";*/
            
            String strSQL = "SELECT EMPID,PUNCHDATE,DAYNAME(PUNCHDATE) AS DAY,PUNCHES_NOS,ALL_PUNCHES,COALESCE(EMP_NAME,'') AS EMP_NAME FROM\n"
                    + "(SELECT A.EMP_CODE AS EMPID,DATE1 AS PUNCHDATE,COALESCE(PUNCHES_NOS,0) AS PUNCHES_NOS,COALESCE(ALL_PUNCHES,'') AS ALL_PUNCHES FROM\n"
                    + "(SELECT DISTINCT EMP_CODE,DATE1 FROM SDMLATTPAY.ATT_DATA,\n"
                    + "(SELECT DISTINCT A_DATE AS DATE1 FROM SDMLATTPAY.ATT_DATA WHERE MONTH(A_DATE) =" + cmbMonth.getSelectedIndex() + " AND YEAR(A_DATE) = '" + txtYear.getText().trim() + "') AS AC WHERE MONTH(A_DATE) =" + cmbMonth.getSelectedIndex() + " AND YEAR(A_DATE) = '" + txtYear.getText().trim() + "'\n"
                    + "AND MACHINE=31\n"
                    + "UNION ALL\n"
                    + "SELECT DISTINCT EMP_CODE,DATE1 FROM SDMLATTPAY.ATT_DATA,\n"
                    + "(SELECT DISTINCT A_DATE AS DATE1 FROM SDMLATTPAY.ATT_DATA WHERE A_DATE IN (SELECT DATE_ADD(LAST_DAY(CONCAT(" + txtYear.getText().trim() + ", '-', " + cmbMonth.getSelectedIndex() + ", '-01')),INTERVAL 1 DAY) FROM DUAL)) AS AC WHERE \n"
                    + "A_DATE IN (SELECT DATE_ADD(LAST_DAY(CONCAT(" + txtYear.getText().trim() + ", '-', " + cmbMonth.getSelectedIndex() + ", '-01')),INTERVAL 1 DAY) FROM DUAL)\n"
                    + "AND MACHINE=31) A\n"
                    + "LEFT JOIN\n"
                    + "(SELECT EMP_CODE AS EMPID,A_DATE AS PUNCHDATE,COUNT(DISTINCT P_TIME) AS PUNCHES_NOS,GROUP_CONCAT(DISTINCT P_TIME ORDER BY P_TIME ASC SEPARATOR ',    ') AS ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA WHERE YEAR(A_DATE)='" + txtYear.getText().trim() + "' AND MONTH(A_DATE)=" + cmbMonth.getSelectedIndex() + " AND MACHINE=31 \n"
                    + "GROUP BY EMP_CODE,A_DATE\n"
                    + "UNION ALL\n"
                    + "SELECT EMP_CODE AS EMPID,A_DATE AS PUNCHDATE,COUNT(DISTINCT P_TIME) AS PUNCHES_NOS,GROUP_CONCAT(DISTINCT P_TIME ORDER BY P_TIME ASC SEPARATOR ',    ') AS ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA WHERE A_DATE IN (SELECT DATE_ADD(LAST_DAY(CONCAT(" + txtYear.getText().trim() + ", '-', " + cmbMonth.getSelectedIndex() + ", '-01')),INTERVAL 1 DAY) FROM DUAL) AND MACHINE=31 \n"
                    + "GROUP BY EMP_CODE,A_DATE) B\n"
                    + "ON A.EMP_CODE=B.EMPID AND A.DATE1=B.PUNCHDATE) X\n"
                    + "LEFT JOIN\n"
                    + "( SELECT PAY_EMP_NO,EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP \n"
                    + "ON EMPID=PAY_EMP_NO \n"
                    + "ORDER BY EMPID,PUNCHDATE";
            
            
            //strSQL = strSQL + " ORDER BY EMPID,PUNCHDATE";
            System.out.println("SQL:" + strSQL);
            //rpt.setReportName("/EITLERP/FeltSales/FeltPacking/rptFeltPacking.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/SDMLATTPAY/AdvanceSearch/SEVASI_PUNCHES_DETAIL_REPORT.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnBasicPunchDataView2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BdayCalender;
    private javax.swing.JPanel CoffRokadi;
    private javax.swing.ButtonGroup CoffRokadiBtnGrp;
    private javax.swing.JPanel DailyAttSummary;
    private javax.swing.JPanel EmployeeMaster;
    private javax.swing.JFileChooser ExporttoExcelFileChooser;
    private javax.swing.JPanel GatePass;
    private javax.swing.ButtonGroup GatePassBtnGrp;
    private javax.swing.ButtonGroup LCBtnGrp;
    private javax.swing.JPanel LateComing;
    private javax.swing.JPanel LeaveAvail;
    private javax.swing.JPanel LeaveBalance;
    private javax.swing.JPanel MonthlySummary;
    private javax.swing.JPanel OddPunches;
    private javax.swing.JPanel PendingList;
    private javax.swing.JPanel PunchData;
    private javax.swing.JPanel RokadiPunches;
    private javax.swing.JPanel RokdiData;
    private javax.swing.JRadioButton RokdiDataContractor;
    private javax.swing.ButtonGroup RokdiDataGrp;
    private javax.swing.JRadioButton RokdiDataWorker;
    private javax.swing.JPanel ShiftSchedule;
    private javax.swing.JPanel SpecialSanction;
    private javax.swing.JTabbedPane TabList;
    private javax.swing.JTable Table;
    private javax.swing.JButton btnBasicPunchDataView;
    private javax.swing.JButton btnBasicPunchDataView1;
    private javax.swing.JButton btnBasicPunchDataView2;
    private javax.swing.JButton btnBdayCalenderView;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCobolSummaryView;
    private javax.swing.JButton btnCoffRokadiView;
    private javax.swing.JButton btnDailyAttPrint;
    private javax.swing.JButton btnDailyAttView;
    private javax.swing.JButton btnEmpMstETE;
    private javax.swing.JButton btnEmpMstView;
    private javax.swing.JButton btnGatePassView;
    private javax.swing.JButton btnLateComingView;
    private javax.swing.JButton btnLeaveAvailView;
    private javax.swing.JButton btnLeaveBalanceView;
    private javax.swing.JButton btnLeaveBalanceView1;
    private javax.swing.JButton btnLeaveBalanceView2;
    private javax.swing.JButton btnMonthlySummaryView;
    private javax.swing.JButton btnMonthlySummaryView1;
    private javax.swing.JButton btnOddPunchesView;
    private javax.swing.JButton btnPendingListView;
    private javax.swing.JButton btnRokdiDataView;
    private javax.swing.JButton btnRokdiPunchesView;
    private javax.swing.JButton btnShiftScheduleView;
    private javax.swing.JButton btnSpecialSanctionView;
    private javax.swing.JComboBox cmbCategory;
    private javax.swing.JComboBox cmbDept;
    private javax.swing.JComboBox cmbEmpStatus;
    private javax.swing.JComboBox cmbMainCategory;
    private javax.swing.JComboBox cmbMasterType;
    private javax.swing.JComboBox cmbModuleList;
    private javax.swing.JComboBox cmbMonth;
    private javax.swing.JComboBox cmbOrderBy;
    private javax.swing.JComboBox cmbPLOrderBy;
    private javax.swing.JComboBox cmbShift;
    private javax.swing.JComboBox cmbType;
    private javax.swing.JComboBox cmbUserList;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JLabel jLabel96;
    private javax.swing.JLabel jLabel97;
    private javax.swing.JLabel jLabel98;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDate1;
    private javax.swing.JLabel lblDeptCmb;
    private javax.swing.JLabel lblEmpNo;
    private javax.swing.JLabel lblEmpStatus;
    private javax.swing.JLabel lblMonthCmb;
    private javax.swing.JLabel lblShiftCmb;
    private javax.swing.JLabel lblYearCmb;
    private javax.swing.JRadioButton rbtnCRokdi;
    private javax.swing.JRadioButton rbtnCoff;
    private javax.swing.JRadioButton rbtnLCDetail;
    private javax.swing.JRadioButton rbtnLCSummary;
    private javax.swing.JRadioButton rbtnOfficial;
    private javax.swing.JRadioButton rbtnPersonal;
    private javax.swing.JRadioButton rbtnRCoff;
    private javax.swing.JRadioButton rbtnRokadi;
    private javax.swing.JTextField txtEmpName;
    private javax.swing.JTextField txtEmpNo;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
private void GenerateDeptCombo() {

        HashMap List = new HashMap();
        clsMaster ObjDept;

        cmbDept.setModel(modelDept);
        modelDept.removeAllElements();  //Clearing previous contents

        ComboData aData = new ComboData();
        aData.Text = "Select Dept";
        aData.Code = 0;
        modelDept.addElement(aData);

        List = clsMaster.getDepartmentList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjDept = (clsMaster) List.get(Integer.toString(i));
//            ComboData 
            aData = new ComboData();
            aData.Text = (String) ObjDept.getAttribute("Name").getObj();
            aData.Code = (long) ObjDept.getAttribute("DPTID").getVal();
            modelDept.addElement(aData);
        }
    }

    private void GenerateShiftCombo() {

        HashMap List = new HashMap();
        clsMaster ObjShift;

        cmbShift.setModel(modelShift);
        modelShift.removeAllElements();  //Clearing previous contents

        ComboData aData = new ComboData();
        aData.Text = "Select Shift";
        aData.Code = 0;
        modelShift.addElement(aData);

        List = clsMaster.getShiftList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjShift = (clsMaster) List.get(Integer.toString(i));
//            ComboData 
            try {
                aData = new ComboData();
                aData.Text = (String) ObjShift.getAttribute("SHIFT_NAME").getObj();
                aData.Code = (long) ObjShift.getAttribute("SHIFT_ID").getVal();
                modelShift.addElement(aData);
            } catch (Exception a) {
            }
        }
    }

    private void GenerateMainCategoryCombo() {

        HashMap List = new HashMap();
        clsMaster ObjMainCategory;

        cmbMainCategory.setModel(modelMainCategory);
        modelMainCategory.removeAllElements();  //Clearing previous contents

        ComboData aData = new ComboData();
        aData.Text = "Select Main Category";
        aData.Code = 0;
        modelMainCategory.addElement(aData);

        List = clsMaster.getMainCategoryList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjMainCategory = (clsMaster) List.get(Integer.toString(i));
//            ComboData 
            aData = new ComboData();
            aData.Text = (String) ObjMainCategory.getAttribute("Name").getObj();
            aData.Code = (long) ObjMainCategory.getAttribute("SECID").getVal();
            modelMainCategory.addElement(aData);
        }
    }

    private void GenerateCategoryCombo() {

        HashMap List = new HashMap();
        clsMaster ObjCategory;

        cmbCategory.setModel(modelCategory);
        modelCategory.removeAllElements();  //Clearing previous contents

        ComboData aData = new ComboData();
        aData.Text = "Select Category";
        aData.Code = 0;
        modelCategory.addElement(aData);

        List = clsMaster.getCategoryList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjCategory = (clsMaster) List.get(Integer.toString(i));
//            ComboData 
            aData = new ComboData();
            aData.Text = (String) ObjCategory.getAttribute("Name").getObj();
            aData.Code = (long) ObjCategory.getAttribute("CTGID").getVal();
            modelCategory.addElement(aData);
        }
    }

    private void FormatGridEmpMst() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Designation ");
        DataModel.addColumn("Birth Date");
        DataModel.addColumn("Join Date");
        DataModel.addColumn("Confirm Date");
        DataModel.addColumn("Left Date");
        DataModel.addColumn("Corres Address");
        DataModel.addColumn("Permenent Address");
        DataModel.addColumn("City");
        DataModel.addColumn("District");
        DataModel.addColumn("State");
        DataModel.addColumn("Country");
        DataModel.addColumn("Pin Code");
        DataModel.addColumn("Phone No");
        DataModel.addColumn("Email ID");
        DataModel.addColumn("Blood Group");
        DataModel.addColumn("Marital Status");
        DataModel.addColumn("Gender");
        DataModel.addColumn("Qualification");
        DataModel.addColumn("Main Category");
        DataModel.addColumn("Category");
        DataModel.addColumn("Shift");
        DataModel.addColumn("Weakoff");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateEmpMst() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridEmpMst(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND PAY_EMP_NO= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
//                cndtn += " AND EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
                cndtn += " AND EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
            }
            if (!cmbShift.getSelectedItem().equals("Select Shift")) {
//                cndtn += " AND EMP_SHIFT_ID= " + modelShift.getCode(cmbShift.getSelectedIndex()) + " ";
                cndtn += " AND EMP_SHIFT_ID= " + modelShift.getCode(cmbShift.getSelectedIndex()) + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                //cndtn += " AND EMP_MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
                cndtn += " AND EMP_MAIN_CATEGORY = " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
//                cndtn += " AND EMP_CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
                cndtn += " AND EMP_CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
            }

            if (cmbEmpStatus.getSelectedItem().equals("Working")) {
                cndtn += " AND DATE(EMP_LEFT_DATE) = '0000-00-00' ";
            } else if (cmbEmpStatus.getSelectedItem().equals("Left")) {
                cndtn += " AND DATE(EMP_LEFT_DATE) != '0000-00-00' ";
            } else {

            }

            String strSQL = "";

            strSQL = "SELECT *, "
                    + "CASE WHEN COALESCE(EMP_MARITAL_STATUS,0)=2 THEN 'Married' ELSE CASE WHEN COALESCE(EMP_MARITAL_STATUS,0)=1 THEN 'Un-Married' ELSE '' END END AS MARITAL_STATUS, "
                    + "CASE WHEN COALESCE(EMP_SEX,'')='M' THEN 'Male' ELSE CASE WHEN COALESCE(EMP_SEX,'')='F' THEN 'Female' ELSE '' END END AS GENDER "
                    + "FROM ( SELECT * FROM SDMLATTPAY.ATTPAY_EMPMST WHERE COALESCE(APPROVED,0)=1 AND COALESCE(CANCELED,0)=0  " + cndtn + " ) AS EMP "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT DSGID,NAME AS DSGNAME FROM SDMLATTPAY.ATT_DESIGNATION_MASTER ) AS DSG "
                    + "ON DSG.DSGID=EMP.EMP_DESIGNATION "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
                    + "ON SFT.SHIFT_ID=EMP.EMP_SHIFT_ID "
                    + "ORDER BY PAY_EMP_NO";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PAY_EMP_NO");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("DSGNAME");
                    rowData[5] = EITLERPGLOBAL.formatDate(rsTmp.getString("EMP_BIRTH_DATE"));
                    rowData[6] = EITLERPGLOBAL.formatDate(rsTmp.getString("EMP_JOIN_DATE"));
                    rowData[7] = EITLERPGLOBAL.formatDate(rsTmp.getString("EMP_CONFIRM_DATE"));
                    rowData[8] = EITLERPGLOBAL.formatDate(rsTmp.getString("EMP_LEFT_DATE"));
                    rowData[9] = rsTmp.getString("EMP_CORRES_ADDRESS");
                    rowData[10] = rsTmp.getString("EMP_PERM_ADDRESS");
                    rowData[11] = rsTmp.getString("EMP_CITY");
                    rowData[12] = rsTmp.getString("EMP_DISTRICT");
                    rowData[13] = rsTmp.getString("EMP_STATE");
                    rowData[14] = rsTmp.getString("EMP_COUNTRY");
                    rowData[15] = rsTmp.getString("EMP_PINCODE");
                    rowData[16] = rsTmp.getString("EMP_PHONE");
                    rowData[17] = rsTmp.getString("EMP_EMAIL");
                    rowData[18] = rsTmp.getString("EMP_BLOODGROUP");
                    rowData[19] = rsTmp.getString("MARITAL_STATUS");
                    rowData[20] = rsTmp.getString("GENDER");
                    rowData[21] = rsTmp.getString("EMP_QUALIFICATION");
                    rowData[22] = rsTmp.getString("SECNAME");
                    rowData[23] = rsTmp.getString("CTGNAME");
                    rowData[24] = rsTmp.getString("SHIFT_NAME");
                    rowData[25] = rsTmp.getString("EMP_WEEKOFF_DAY");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridShiftSchedule() {
        try {

            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            Table.setAutoResizeMode(0);
            DataModel.addColumn("Sr.");
            String sql = "SELECT '' AS 'Emp no','' AS 'Name','' AS 'Department','' AS 'Month','' AS 'Year'";
            for (int i = 1; i <= 31; i++) {
                sql = sql + ",'' AS '" + i + "'";
            }
            sql = sql + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
                DataModel.SetReadOnly(i);
            }

            DataModel.SetReadOnly(0);
            Table.getColumnModel().getColumn(0).setMaxWidth(50);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateShiftSchedule() {
        String cndtn = "";
        String grp_cndtn = "";
        String orderBy = "";
        try {
            FormatGridShiftSchedule(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND SSC_EMPID= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " WHERE EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
            }
            if (!cmbMonth.getSelectedItem().equals("Select")) {
                cndtn += " AND SSC_MONTH= " + cmbMonth.getSelectedIndex() + " ";
            }
            if (!txtYear.getText().trim().equals("")) {
                cndtn += " AND SSC_YEAR= '" + txtYear.getText().trim() + "'";
            }

            int Orderby = cmbOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                orderBy = " ORDER BY PAY_EMP_NO ";
            }
            if (Orderby == 2) {
                orderBy = " ORDER BY PAY_EMP_NO ";
            }
            if (Orderby == 3) {
                orderBy = " ORDER BY DPTNAME,PAY_EMP_NO ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT * FROM SDMLATTPAY.ATT_SHIFT_SCHEDULE WHERE 1=1 " + cndtn + " ) AS SSC "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON SSC.SSC_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + grp_cndtn + " "
                    //                    + "ORDER BY PAY_EMP_NO,SSC_YEAR,SSC_MONTH ";
                    + orderBy + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PAY_EMP_NO");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("SSC_MONTH");
                    rowData[5] = rsTmp.getString("SSC_YEAR");
                    for (int j = 1; j <= 31; j++) {
                        rowData[j + 5] = rsTmp.getString("SSC_" + j);
                    }

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridBasicPunches() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");         //0
        DataModel.addColumn("Emp Pay No");  //1
        DataModel.addColumn("Emp Name");    //2
        DataModel.addColumn("Department");  //3
        DataModel.addColumn("Punch Date");  //4
        DataModel.addColumn("Shift");       //5     
        DataModel.addColumn("Time");        //6
        DataModel.addColumn("Punch Flag");
        DataModel.addColumn("Machine");     //7    
        DataModel.addColumn("Original Machine No");
        DataModel.addColumn("Category");    //8
        DataModel.addColumn("Sub Category");//9

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateBasicPunches() {
        String cndtn = "";
        String grp_cndtn = "";
        String orderBy = "";
        try {
            FormatGridBasicPunches(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND EMP_CODE= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                //grp_cndtn += " WHERE EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
                cndtn += " AND EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
            }
            if (!cmbShift.getSelectedItem().equals("Select Shift")) {
                cndtn += " AND A_SHIFT= " + modelShift.getCode(cmbShift.getSelectedIndex()) + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                cndtn += " AND EMP_MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                cndtn += " AND EMP_CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
            }
//            if (!cmbMonth.getSelectedItem().equals("Select")) {
//                cndtn += " AND MONTH(A_DATE)= " + cmbMonth.getSelectedIndex() + " ";
//            }
//            if (!txtYear.getText().trim().equals("")) {
//                cndtn += " AND YEAR(A_DATE)= '" + txtYear.getText().trim() + "'";
//            }
//            if (!txtFromDate.getText().trim().equals("")) {
//                cndtn += " AND A_DATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
//            }
//            if (!txtToDate.getText().trim().equals("")) {
//                cndtn += " AND A_DATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
//            }
            if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
                cndtn += " AND A_DATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
                cndtn += " AND A_DATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
            } else if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
                cndtn += " AND MONTH(A_DATE)= " + cmbMonth.getSelectedIndex() + " ";
                cndtn += " AND YEAR(A_DATE)= '" + txtYear.getText().trim() + "'";
            }

            int Orderby = cmbOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                orderBy = " ORDER BY EMP_CODE,A_DATE,P_TIME ";
            }
            if (Orderby == 2) {
                orderBy = " ORDER BY EMP_CODE,A_DATE,P_TIME ";
            }
            if (Orderby == 3) {
                orderBy = " ORDER BY DPTNAME,EMP_CODE,A_DATE,P_TIME ";
            }

            String strSQL = "";

            strSQL = "SELECT DISTINCT EMP_CODE AS EMPID,A_DATE,P_TIME,MACHINE,CASE WHEN A_SHIFT='WO' THEN 0 ELSE A_SHIFT END AS A_SHIFT,"
                    + "EMP_NAME,DPTNAME,SECNAME,CTGNAME,DPTID AS EMP_DEPARTMENT,SEC.SECID AS MAIN_CATEGORY,CTG.CTGID AS CATEGORY,UPDATE_IND,RIGHT(TRIM(T1),2) AS ORIGINAL_MACHINE_NO  FROM SDMLATTPAY.ATT_DATA DAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON DAS.EMP_CODE=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "WHERE 1=1 " + cndtn + " "
                    //                    + " ORDER BY EMP_CODE,A_DATE,P_TIME";
                    + orderBy + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = EITLERPGLOBAL.formatDate(rsTmp.getString("A_DATE"));
                    rowData[5] = rsTmp.getString("A_SHIFT");
                    rowData[6] = rsTmp.getString("P_TIME");
                    rowData[7] = rsTmp.getString("UPDATE_IND");
                    rowData[8] = rsTmp.getString("MACHINE");
                    rowData[9] = rsTmp.getString("ORIGINAL_MACHINE_NO");
                    rowData[10] = rsTmp.getString("SECNAME");
                    rowData[11] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridDailyAtt() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department Working");
        DataModel.addColumn("Punch Date");
        DataModel.addColumn("Day");
        DataModel.addColumn("Shift");
        DataModel.addColumn("Status");
        DataModel.addColumn("Spe. Sanction Status");
        DataModel.addColumn("No of Punches");
        DataModel.addColumn("Punches");
        DataModel.addColumn("LC+LWP");
        DataModel.addColumn("In Time");
        DataModel.addColumn("Out Time");
        DataModel.addColumn("Working Hours");
        DataModel.addColumn("Personal GP 1st Half");
        DataModel.addColumn("Personal GP 2st Half");
        DataModel.addColumn("Official GP 1st Half");
        DataModel.addColumn("Official GP 2st Half");
        DataModel.addColumn("Late Hours");
        DataModel.addColumn("Personal GP Punches");
        DataModel.addColumn("Official GP Punches");
        DataModel.addColumn("Machine 11 (Rokdi) Punches");
        DataModel.addColumn("Dummy Punches");
        DataModel.addColumn("Deletion Punches");
        DataModel.addColumn("Correction Punches");
        DataModel.addColumn("Mis Punches");
        DataModel.addColumn("Category");
        DataModel.addColumn("Sub Category");
        DataModel.addColumn("Emp Department");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateDailyAtt() {
        String cndtn = "";
        String grp_cndtn = "";
        String orderBy = "";
        try {
            FormatGridDailyAtt(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND EMPID= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " WHERE EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
            }
            if (!cmbShift.getSelectedItem().equals("Select Shift")) {
                cndtn += " AND SHIFT= " + modelShift.getCode(cmbShift.getSelectedIndex()) + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                cndtn += " AND MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                cndtn += " AND CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
            }
//            if (!cmbMonth.getSelectedItem().equals("Select")) {
//                cndtn += " AND MM= " + cmbMonth.getSelectedIndex() + "  AND MONTH(PUNCHDATE)= " + cmbMonth.getSelectedIndex() + " ";
//            }
//            if (!txtYear.getText().trim().equals("")) {
//                cndtn += " AND YYYY= '" + txtYear.getText().trim() + "'";
//            }
//            if (!txtFromDate.getText().trim().equals("")) {
//                cndtn += " AND PUNCHDATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
//            }
//            if (!txtToDate.getText().trim().equals("")) {
//                cndtn += " AND PUNCHDATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
//            }

            if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
                cndtn += " AND PUNCHDATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
                cndtn += " AND PUNCHDATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
            } else if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
                cndtn += " AND MM= " + cmbMonth.getSelectedIndex() + "  AND MONTH(PUNCHDATE)= " + cmbMonth.getSelectedIndex() + " ";
                cndtn += " AND YYYY= '" + txtYear.getText().trim() + "'";
            }

            int Orderby = cmbOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                orderBy = " ORDER BY EMPID ";
            }
            if (Orderby == 2) {
                orderBy = " ORDER BY EMPID ";
            }
            if (Orderby == 3) {
                orderBy = " ORDER BY DPTNAME,EMPID ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT *, "
                    + "SEC_TO_TIME(TIME_TO_SEC(GP_FIRST_HALF) + TIME_TO_SEC(GP_SECOND_HALF) + TIME_TO_SEC(LATE_COMING_HRS) + TIME_TO_SEC(LUNCH_LATE_HRS) + TIME_TO_SEC(GP_ADDITIONAL_HRS) ) AS TOTAL_LATE_COMING "
                    + "FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM " + cndtn + " ) AS DAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON DAS.EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=DAS.MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=DAS.CATEGORY "
                    + "LEFT JOIN ( SELECT *,'YES' AS SSS FROM SDMLATTPAY.ATT_SPECIAL_SANCTION WHERE APPROVED=1 AND CANCELED=0 ) AS SS "
                    + "ON DAS.EMPID=SS.EMP_CODE AND DAS.PUNCHDATE=SS.A_DATE "
                    + " " + grp_cndtn + " "
                    + orderBy + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                int column = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];
                    column = 0;
                    rowData[column] = Integer.toString(cnt);
                    column++;
                    rowData[column] = rsTmp.getString("EMPID");
                    column++;
                    rowData[column] = rsTmp.getString("EMP_NAME");
                    column++;
                    rowData[column] = rsTmp.getString("WORKING_DEPT_DESC");
                    column++;
                    rowData[column] = EITLERPGLOBAL.formatDate(rsTmp.getString("PUNCHDATE"));
                    column++;
                    rowData[column] = rsTmp.getString("ATT_DAY");
                    column++;
                    rowData[column] = rsTmp.getString("SHIFT");
                    column++;
                    rowData[column] = rsTmp.getString("PRESENT_FIRST") + " " + rsTmp.getString("PRESENT_SECOND");
                    column++;
                    rowData[column] = rsTmp.getString("SSS");
                    column++;
                    rowData[column] = rsTmp.getString("PUNCHES_NOS");
                    column++;
                    rowData[column] = rsTmp.getString("ALL_PUNCHES");
                    column++;
                    rowData[column] = rsTmp.getString("TOTAL_LATE_COMING").substring(0, 5);
                    column++;
                    rowData[column] = rsTmp.getString("INTIME").substring(11, 16);
                    column++;
                    rowData[column] = rsTmp.getString("OUTTIME").substring(11, 16);
                    column++;
                    rowData[column] = rsTmp.getString("TOTAL_WORKING_HRS").substring(0, 5);
                    column++;
                    rowData[column] = rsTmp.getString("GP_FIRST_HALF").substring(0, 5);
                    column++;
                    rowData[column] = rsTmp.getString("GP_SECOND_HALF").substring(0, 5);
                    column++;
                    rowData[column] = rsTmp.getString("GPO_FIRST_HALF").substring(0, 5);
                    column++;
                    rowData[column] = rsTmp.getString("GPO_SECOND_HALF").substring(0, 5);
                    column++;
                    rowData[column] = rsTmp.getString("GATEPASS_LATE").substring(0, 5);
                    column++;
                    rowData[column] = rsTmp.getString("ALL_PERSONAL_GATEPASS_PUNCHES");
                    column++;
                    rowData[column] = rsTmp.getString("ALL_OFFICIAL_GATEPASS_PUNCHES");
                    column++;
                    rowData[column] = rsTmp.getString("ALL_OT_PUNCHES");
                    column++;
                    rowData[column] = rsTmp.getString("ALL_DUMMY_PUNCHES");
                    column++;
                    rowData[column] = rsTmp.getString("ALL_DELETE_PUNCHES");
                    column++;
                    rowData[column] = rsTmp.getString("ALL_CORRECTION_PUNCHES");
                    column++;
                    rowData[column] = rsTmp.getString("ALL_MIS_PUNCHES");
                    column++;
                    rowData[column] = rsTmp.getString("SECNAME");
                    column++;
                    rowData[column] = rsTmp.getString("CTGNAME");
                    column++;
                    rowData[column] = rsTmp.getString("DPTNAME");
                    column++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridMonthlySummary() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Month");
        DataModel.addColumn("Year");
        DataModel.addColumn("Total Days");
        DataModel.addColumn("Paid Days");
        DataModel.addColumn("Present Days");
        DataModel.addColumn("LC Days");
        DataModel.addColumn("LWP Days");
        DataModel.addColumn("PL");
        DataModel.addColumn("CL");
        DataModel.addColumn("SL");
        DataModel.addColumn("OD");
        DataModel.addColumn("LOFF");
        DataModel.addColumn("EOFF");
        DataModel.addColumn("ESIC");
        DataModel.addColumn("WO");
        DataModel.addColumn("WOFF");
//        DataModel.addColumn("NPH"); on 09112019
        DataModel.addColumn("PH");
        DataModel.addColumn("NWOF");
        DataModel.addColumn("COFF");
        DataModel.addColumn("NPL");
        DataModel.addColumn("Personal GP");
        DataModel.addColumn("Official GP");
        DataModel.addColumn("Absent");
        DataModel.addColumn("Category");
        DataModel.addColumn("Sub Category");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateMonthlySummary() {
        String cndtn = "";
        String grp_cndtn = "";
        String orderBy = "";
        try {
            FormatGridMonthlySummary(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND MS_EMPID= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
            }
            if (!cmbShift.getSelectedItem().equals("Select Shift")) {
                grp_cndtn += " AND EMP_SHIFT_ID= " + modelShift.getCode(cmbShift.getSelectedIndex()) + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                grp_cndtn += " AND EMP_CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
            }
            if (!cmbMonth.getSelectedItem().equals("Select")) {
                cndtn += " AND MS_MM= " + cmbMonth.getSelectedIndex() + " ";
            }
            if (!txtYear.getText().trim().equals("")) {
                cndtn += " AND MS_YYYY= '" + txtYear.getText().trim() + "'";
            }

            int Orderby = cmbOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                orderBy = " ORDER BY MS_EMPID ";
            }
            if (Orderby == 2) {
                orderBy = " ORDER BY MS_EMPID ";
            }
            if (Orderby == 3) {
                orderBy = " ORDER BY DPTNAME,MS_EMPID ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT * FROM SDMLATTPAY.ATT_MTH_SUMMARY WHERE 1=1 " + cndtn + " ) AS MAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON MAS.MS_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
                    + "ON SFT.SHIFT_ID=EMP.EMP_SHIFT_ID WHERE 1=1 " + grp_cndtn + " "
                    //                    + "ORDER BY MS_EMPID";
                    + orderBy + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("MS_EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("MS_MM");
                    rowData[5] = rsTmp.getString("MS_YYYY");
                    rowData[6] = rsTmp.getString("TOTAL_MONTH_DAYS");
                    rowData[7] = rsTmp.getString("PAID_DAYS");
                    rowData[8] = rsTmp.getString("PRESENT_DAYS");
                    rowData[9] = rsTmp.getString("LC_DAYS");
                    rowData[10] = rsTmp.getString("LWP_DAYS");
                    rowData[11] = rsTmp.getString("PL");
                    rowData[12] = rsTmp.getString("CL");
                    rowData[13] = rsTmp.getString("SL");
                    rowData[14] = rsTmp.getString("OD");
                    rowData[15] = rsTmp.getString("LOFF");
                    rowData[16] = rsTmp.getString("EOFF");
                    rowData[17] = rsTmp.getString("ESIC");
                    rowData[18] = rsTmp.getString("WO");
                    rowData[19] = rsTmp.getString("WOFF");
//                    rowData[20] = rsTmp.getString("NPH"); on 09112019
                    rowData[20] = rsTmp.getString("HL");
                    rowData[21] = rsTmp.getString("NWOF");
                    rowData[22] = rsTmp.getString("COFFE");
                    rowData[23] = rsTmp.getString("NPL");
                    rowData[24] = rsTmp.getString("P_GP");
                    rowData[25] = rsTmp.getString("O_GP");
                    rowData[26] = rsTmp.getString("ABST");
                    rowData[27] = rsTmp.getString("SECNAME");
                    rowData[28] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridCoffRokadi() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Doc No");
        DataModel.addColumn("Doc Date");
        DataModel.addColumn("Month");
        DataModel.addColumn("Year");
        DataModel.addColumn("Date");
        DataModel.addColumn("Type");
        DataModel.addColumn("From Time");
        DataModel.addColumn("To Time");
        DataModel.addColumn("Hours");
        DataModel.addColumn("Replacement Hours");
        DataModel.addColumn("Extra Hours");
        DataModel.addColumn("Day");
        DataModel.addColumn("Punches");
        DataModel.addColumn("Shift");
        DataModel.addColumn("Category");
        DataModel.addColumn("Sub Category");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateCoffRokadi() {
        String cndtn = "";
        String grp_cndtn = "";
        String orderBy = "";
        try {
            FormatGridCoffRokadi(); //clear existing content of table
            ResultSet rsTmp;

            if (rbtnRokadi.isSelected()) {
                cndtn += " AND COFF_DOC_NO LIKE 'R%' ";
            }
            if (rbtnCoff.isSelected()) {
                cndtn += " AND COFF_DOC_NO LIKE 'C%' ";
            }
            if (rbtnCRokdi.isSelected()) {
                cndtn += " AND COFF_DOC_NO LIKE 'HC%' ";
            }
            if (rbtnRCoff.isSelected()) {
                cndtn += " AND COFF_DOC_NO LIKE 'X%' ";
            }
            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND COFF_EMPID= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
            }
            if (!cmbShift.getSelectedItem().equals("Select Shift")) {
                cndtn += " AND COFF_SHIFT= " + modelShift.getCode(cmbShift.getSelectedIndex()) + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                grp_cndtn += " AND EMP_CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
            }
//            if (!cmbMonth.getSelectedItem().equals("Select")) {
//                cndtn += " AND COFF_MONTH= " + cmbMonth.getSelectedIndex() + " ";
//            }
//            if (!txtYear.getText().trim().equals("")) {
//                cndtn += " AND COFF_YEAR= '" + txtYear.getText().trim() + "'";
//            }
//            if (!txtFromDate.getText().trim().equals("")) {
//                cndtn += " AND COFF_DATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
//            }
//            if (!txtToDate.getText().trim().equals("")) {
//                cndtn += " AND COFF_DATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
//            }
            if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
                cndtn += " AND COFF_DATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
                cndtn += " AND COFF_DATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
            } else if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
                cndtn += " AND COFF_MONTH= " + cmbMonth.getSelectedIndex() + " ";
                cndtn += " AND COFF_YEAR= '" + txtYear.getText().trim() + "'";
            }

            int Orderby = cmbOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                orderBy = " ORDER BY COFF_EMPID ";
            }
            if (Orderby == 2) {
                orderBy = " ORDER BY COFF_EMPID ";
            }
            if (Orderby == 3) {
                orderBy = " ORDER BY DPTNAME,COFF_EMPID ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT * FROM SDMLATTPAY.ATT_COFF_ROKDI_ENTRY WHERE COALESCE(APPROVED,0)=1 AND COALESCE(CANCELED,0)=0 " + cndtn + " ) AS CRE "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON CRE.COFF_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
                    + "ON SFT.SHIFT_ID=CRE.COFF_SHIFT WHERE 1=1 " + grp_cndtn + " "
                    + orderBy + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            String memp = "";
            double gmday, mday, mthrs, mtday, mmin, mtmin, mminh, mmine, mtminh, mtmine;
            int mhrs, mhrsh, mhrse;
            gmday = mday = mthrs = mtday = mmin = mtmin = mminh = mmine = mtminh = mtmine = 0;
            mhrs = mhrsh = mhrse = 0;
            //memp = rsTmp.getString("COFF_EMPID");
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                memp = rsTmp.getString("COFF_EMPID");
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    if (!memp.equalsIgnoreCase(rsTmp.getString("COFF_EMPID"))) {
                        Object[] rowData = new Object[100];
                        DataModel.addRow(rowData);
                        rowData = new Object[100];
                        rowData[1] = memp;
                        rowData[2] = "TOTAL";
                        mhrs = (int) (mmin / 60);
                        rowData[12] = mhrs + "." + (int) (mmin - (mhrs * 60));
                        mhrsh = (int) (mminh / 60);
                        rowData[13] = mhrsh + "." + (int) (mminh - (mhrsh * 60));
                        mhrse = (int) (mmine / 60);
                        rowData[14] = mhrse + "." + (int) (mmine - (mhrse * 60));
                        //mday = EITLERPGLOBAL.round(mmin / 480, 2);
                        rowData[15] = EITLERPGLOBAL.round(mday, 2);
                        DataModel.addRow(rowData);
                        rowData = new Object[100];
                        DataModel.addRow(rowData);

                        mmin = mday = 0;
                        mminh = mmine = 0;
                        memp = rsTmp.getString("COFF_EMPID");
                    }
                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("COFF_EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("COFF_DOC_NO");
                    rowData[5] = EITLERPGLOBAL.formatDate(rsTmp.getString("COFF_DOC_DATE"));
                    rowData[6] = rsTmp.getString("COFF_MONTH");
                    rowData[7] = rsTmp.getString("COFF_YEAR");
                    rowData[8] = EITLERPGLOBAL.formatDate(rsTmp.getString("COFF_DATE"));
                    rowData[9] = rsTmp.getString("COFF_TYPE");
                    rowData[10] = rsTmp.getString("COFF_FROM_TIME").substring(0, 5);
                    rowData[11] = rsTmp.getString("COFF_TO_TIME").substring(0, 5);
                    rowData[12] = rsTmp.getString("COFF_HRS").substring(0, 5);
                    mmin = mmin + (Double.parseDouble(rsTmp.getString("COFF_HRS").substring(0, 2)) * 60) + Double.parseDouble(rsTmp.getString("COFF_HRS").substring(3, 5));
                    mtmin = mtmin + (Double.parseDouble(rsTmp.getString("COFF_HRS").substring(0, 2)) * 60) + Double.parseDouble(rsTmp.getString("COFF_HRS").substring(3, 5));
                    mday = mday + EITLERPGLOBAL.round(((Double.parseDouble(rsTmp.getString("COFF_HRS").substring(0, 2)) * 60) + Double.parseDouble(rsTmp.getString("COFF_HRS").substring(3, 5))) / 480, 2);
                    gmday = gmday + EITLERPGLOBAL.round(((Double.parseDouble(rsTmp.getString("COFF_HRS").substring(0, 2)) * 60) + Double.parseDouble(rsTmp.getString("COFF_HRS").substring(3, 5))) / 480, 2);
                    rowData[13] = rsTmp.getString("COFF_HRS_REPLACEMENT").substring(0, 5);
                    mminh = mminh + (Double.parseDouble(rsTmp.getString("COFF_HRS_REPLACEMENT").substring(0, 2)) * 60) + Double.parseDouble(rsTmp.getString("COFF_HRS_REPLACEMENT").substring(3, 5));
                    mtminh = mtminh + (Double.parseDouble(rsTmp.getString("COFF_HRS_REPLACEMENT").substring(0, 2)) * 60) + Double.parseDouble(rsTmp.getString("COFF_HRS_REPLACEMENT").substring(3, 5));
                    rowData[14] = rsTmp.getString("COFF_HRS_EXTRA").substring(0, 5);
                    mmine = mmine + (Double.parseDouble(rsTmp.getString("COFF_HRS_EXTRA").substring(0, 2)) * 60) + Double.parseDouble(rsTmp.getString("COFF_HRS_EXTRA").substring(3, 5));
                    mtmine = mtmine + (Double.parseDouble(rsTmp.getString("COFF_HRS_EXTRA").substring(0, 2)) * 60) + Double.parseDouble(rsTmp.getString("COFF_HRS_EXTRA").substring(3, 5));
                    rowData[15] = EITLERPGLOBAL.round(((Double.parseDouble(rsTmp.getString("COFF_HRS").substring(0, 2)) * 60) + Double.parseDouble(rsTmp.getString("COFF_HRS").substring(3, 5))) / 480, 2);
                    rowData[16] = rsTmp.getString("COFF_PUNCHES");
                    rowData[17] = rsTmp.getString("COFF_SHIFT");
                    rowData[18] = rsTmp.getString("SECNAME");
                    rowData[19] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                Object[] rowData = new Object[100];
                DataModel.addRow(rowData);
                rowData = new Object[100];
                rowData[1] = memp;
                rowData[2] = "TOTAL";
                mhrs = (int) (mmin / 60);
                rowData[12] = mhrs + "." + (int) (mmin - (mhrs * 60));
                mhrsh = (int) (mminh / 60);
                rowData[13] = mhrsh + "." + (int) (mminh - (mhrsh * 60));
                mhrse = (int) (mmine / 60);
                rowData[14] = mhrse + "." + (int) (mmine - (mhrse * 60));
                //mday = EITLERPGLOBAL.round(mmin / 480, 2);
                rowData[15] = EITLERPGLOBAL.round(mday, 2);
                DataModel.addRow(rowData);
                rowData = new Object[100];
                rowData[2] = "Grand TOTAL";
                mhrs = (int) (mtmin / 60);
                rowData[12] = mhrs + "." + (int) (mtmin - (mhrs * 60));
                mhrsh = (int) (mtminh / 60);
                rowData[13] = mhrsh + "." + (int) (mtminh - (mhrsh * 60));
                mhrse = (int) (mtmine / 60);
                rowData[14] = mhrse + "." + (int) (mtmine - (mhrse * 60));
                //mday = EITLERPGLOBAL.round(mtmin / 480, 2);
                rowData[15] = EITLERPGLOBAL.round(gmday, 2);
                DataModel.addRow(rowData);
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateCoffRokadiold() {
        String cndtn = "";
        String grp_cndtn = "";
        String orderBy = "";
        try {
            FormatGridCoffRokadi(); //clear existing content of table
            ResultSet rsTmp;

            if (rbtnRokadi.isSelected()) {
                cndtn += " AND COFF_DOC_NO LIKE 'R%' ";
            }
            if (rbtnCoff.isSelected()) {
                cndtn += " AND COFF_DOC_NO LIKE 'C%' ";
            }

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND COFF_EMPID= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
            }
            if (!cmbShift.getSelectedItem().equals("Select Shift")) {
                cndtn += " AND COFF_SHIFT= " + modelShift.getCode(cmbShift.getSelectedIndex()) + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                grp_cndtn += " AND EMP_CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
            }
//            if (!cmbMonth.getSelectedItem().equals("Select")) {
//                cndtn += " AND COFF_MONTH= " + cmbMonth.getSelectedIndex() + " ";
//            }
//            if (!txtYear.getText().trim().equals("")) {
//                cndtn += " AND COFF_YEAR= '" + txtYear.getText().trim() + "'";
//            }
//            if (!txtFromDate.getText().trim().equals("")) {
//                cndtn += " AND COFF_DATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
//            }
//            if (!txtToDate.getText().trim().equals("")) {
//                cndtn += " AND COFF_DATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
//            }
            if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
                cndtn += " AND COFF_DATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
                cndtn += " AND COFF_DATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
            } else if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
                cndtn += " AND COFF_MONTH= " + cmbMonth.getSelectedIndex() + " ";
                cndtn += " AND COFF_YEAR= '" + txtYear.getText().trim() + "'";
            }

            int Orderby = cmbOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                orderBy = " ORDER BY COFF_EMPID ";
            }
            if (Orderby == 2) {
                orderBy = " ORDER BY COFF_EMPID ";
            }
            if (Orderby == 3) {
                orderBy = " ORDER BY DPTNAME,COFF_EMPID ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT * FROM SDMLATTPAY.ATT_COFF_ROKDI_ENTRY WHERE COALESCE(APPROVED,0)=1 AND COALESCE(CANCELED,0)=0 " + cndtn + " ) AS CRE "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON CRE.COFF_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
                    + "ON SFT.SHIFT_ID=CRE.COFF_SHIFT WHERE 1=1 " + grp_cndtn + " "
                    + orderBy + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("COFF_EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("COFF_DOC_NO");
                    rowData[5] = EITLERPGLOBAL.formatDate(rsTmp.getString("COFF_DOC_DATE"));
                    rowData[6] = rsTmp.getString("COFF_MONTH");
                    rowData[7] = rsTmp.getString("COFF_YEAR");
                    rowData[8] = EITLERPGLOBAL.formatDate(rsTmp.getString("COFF_DATE"));
                    rowData[9] = rsTmp.getString("COFF_TYPE");
                    rowData[10] = rsTmp.getString("COFF_FROM_TIME").substring(0, 5);
                    rowData[11] = rsTmp.getString("COFF_TO_TIME").substring(0, 5);
                    rowData[12] = rsTmp.getString("COFF_HRS").substring(0, 5);
                    rowData[13] = rsTmp.getString("COFF_HRS_REPLACEMENT").substring(0, 5);
                    rowData[14] = rsTmp.getString("COFF_HRS_EXTRA").substring(0, 5);
                    rowData[15] = rsTmp.getString("COFF_PUNCHES");
                    rowData[16] = rsTmp.getString("COFF_SHIFT");
                    rowData[17] = rsTmp.getString("SECNAME");
                    rowData[18] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridOddPunches() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Punch Date");
        DataModel.addColumn("No of Punches");
        DataModel.addColumn("Shift");
        DataModel.addColumn("Status");
        DataModel.addColumn("In Time");
        DataModel.addColumn("Out Time");
        DataModel.addColumn("Punches");
        DataModel.addColumn("Category");
        DataModel.addColumn("Sub Category");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateOddPunches() {
        String cndtn = "";
        String grp_cndtn = "";
        String orderBy = "";
        try {
            FormatGridOddPunches(); //clear existing content of table
            ResultSet rsTmp;

            /* CLOSED ON 07/12/2019 
             if (!txtEmpNo.getText().trim().equals("")) {
             cndtn += " AND EMP_CODE= '" + txtEmpNo.getText().trim() + "'";
             }
             if (!cmbDept.getSelectedItem().equals("Select Dept")) {
             grp_cndtn += " AND EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
             }
             if (!cmbShift.getSelectedItem().equals("Select Shift")) {
             cndtn += " AND A_SHIFT= " + modelShift.getCode(cmbShift.getSelectedIndex()) + " ";
             }
             if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
             grp_cndtn += " AND EMP_MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
             }
             if (!cmbCategory.getSelectedItem().equals("Select Category")) {
             grp_cndtn += " AND EMP_CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
             }
             if (!cmbMonth.getSelectedItem().equals("Select")) {
             cndtn += " AND MONTH(A_DATE)= " + cmbMonth.getSelectedIndex() + " ";
             }
             if (!txtYear.getText().trim().equals("")) {
             cndtn += " AND YEAR(A_DATE)= '" + txtYear.getText().trim() + "'";
             }
             if (!txtFromDate.getText().trim().equals("")) {
             cndtn += " AND A_DATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
             }
             if (!txtToDate.getText().trim().equals("")) {
             cndtn += " AND A_DATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
             }
                        
             String strSQL = "";

             strSQL = "SELECT * FROM (SELECT EMP_CODE,DATE_FORMAT(A_DATE,'%d/%m/%Y') AS PUNCH_DATE,GROUP_CONCAT(P_TIME ORDER BY P_TIME SEPARATOR' || ') AS PUNCHES,"
             + "COUNT(0) AS NO_OF_PUNCHES,A_SHIFT FROM (SELECT DISTINCT EMP_CODE,A_DATE,P_TIME,A_SHIFT FROM SDMLATTPAY.ATT_DATA WHERE 1=1 AND COALESCE(UPDATE_IND,'')!='DELETION' " + cndtn + " ) AS AA "
             + "GROUP BY PUNCH_DATE,EMP_CODE HAVING (COUNT(A_DATE)%2<>0) ORDER BY A_DATE) AS ODD "
             + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
             + "ON ODD.EMP_CODE=EMP.PAY_EMP_NO "
             + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
             + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
             + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
             + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
             + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
             + "ON CTG.CTGID=EMP.EMP_CATEGORY "
             + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
             + "ON SFT.SHIFT_ID=ODD.A_SHIFT WHERE 1=1 " + grp_cndtn + " ";
             */
            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND EMPID= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
            }
            if (!cmbShift.getSelectedItem().equals("Select Shift")) {
                cndtn += " AND SHIFT= " + modelShift.getCode(cmbShift.getSelectedIndex()) + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                cndtn += " AND MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                cndtn += " AND CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
            }
//            if (!cmbMonth.getSelectedItem().equals("Select")) {
//                cndtn += " AND MM= " + cmbMonth.getSelectedIndex() + "  AND MONTH(PUNCHDATE)= " + cmbMonth.getSelectedIndex() + " ";
//            }
//            if (!txtYear.getText().trim().equals("")) {
//                cndtn += " AND YYYY= '" + txtYear.getText().trim() + "'";
//            }
//            if (!txtFromDate.getText().trim().equals("")) {
//                cndtn += " AND PUNCHDATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
//            }
//            if (!txtToDate.getText().trim().equals("")) {
//                cndtn += " AND PUNCHDATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
//            }
            if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
                cndtn += " AND PUNCHDATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
                cndtn += " AND PUNCHDATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
            } else if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
                cndtn += " AND MM= " + cmbMonth.getSelectedIndex() + "  AND MONTH(PUNCHDATE)= " + cmbMonth.getSelectedIndex() + " ";
                cndtn += " AND YYYY= '" + txtYear.getText().trim() + "'";
            }

            int Orderby = cmbOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                orderBy = " ORDER BY EMPID ";
            }
            if (Orderby == 2) {
                orderBy = " ORDER BY EMPID ";
            }
            if (Orderby == 3) {
                orderBy = " ORDER BY DPTNAME,EMPID ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM (SELECT * FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM AND PUNCHES_NOS%2<>0 " + cndtn + " ) AS ODD "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON ODD.EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=ODD.MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=ODD.CATEGORY WHERE 1=1 " + grp_cndtn + " "
                    + orderBy + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = EITLERPGLOBAL.formatDate(rsTmp.getString("PUNCHDATE"));
                    rowData[5] = rsTmp.getString("PUNCHES_NOS");
                    rowData[6] = rsTmp.getString("SHIFT");
                    rowData[7] = rsTmp.getString("PRESENT_FIRST") + " " + rsTmp.getString("PRESENT_SECOND");
                    rowData[8] = rsTmp.getString("INTIME").substring(11, 16);
                    rowData[9] = rsTmp.getString("OUTTIME").substring(11, 16);
                    rowData[10] = rsTmp.getString("ALL_PUNCHES");
                    rowData[11] = rsTmp.getString("SECNAME");
                    rowData[12] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridMonthlySummarySPP() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("EMP CODE");
        DataModel.addColumn("Employee Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Pay Days");
        DataModel.addColumn("Present Days");
        DataModel.addColumn("LOP");
        DataModel.addColumn("COFF");
        DataModel.addColumn("LWP");
        DataModel.addColumn("OOD");
        DataModel.addColumn("PL");
        DataModel.addColumn("CL");
        DataModel.addColumn("SL");
        DataModel.addColumn("LOFF");
        DataModel.addColumn("EOFF");
        DataModel.addColumn("PH");
        DataModel.addColumn("WOFF");
        DataModel.addColumn("NPH");
        DataModel.addColumn("WOF");
        DataModel.addColumn("NWOF");
        DataModel.addColumn("COFFE");
        DataModel.addColumn("NPL");
        DataModel.addColumn("ESIC");
        DataModel.addColumn("Remarks");

        DataModel.TableReadOnly(true);
    }

    private void GenerateMonthlySummarySPP() {
        String cndtn = "";
        String grp_cndtn = "";
        String orderBy = "";
        try {
            FormatGridMonthlySummarySPP(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND MS_EMPID= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
            }
            if (!cmbShift.getSelectedItem().equals("Select Shift")) {
                grp_cndtn += " AND EMP_SHIFT_ID= " + modelShift.getCode(cmbShift.getSelectedIndex()) + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                grp_cndtn += " AND EMP_CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
            }
            if (!cmbMonth.getSelectedItem().equals("Select")) {
                cndtn += " AND MS_MM= " + cmbMonth.getSelectedIndex() + " ";
            }
            if (!txtYear.getText().trim().equals("")) {
                cndtn += " AND MS_YYYY= '" + txtYear.getText().trim() + "'";
            }

            int Orderby = cmbOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                orderBy = " ORDER BY MS_EMPID ";
            }
            if (Orderby == 2) {
                orderBy = " ORDER BY MS_EMPID ";
            }
            if (Orderby == 3) {
                orderBy = " ORDER BY DPTNAME,MS_EMPID ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT *,SUM(LC_DAYS+LWP_DAYS) AS LOP FROM SDMLATTPAY.ATT_MTH_SUMMARY WHERE 1=1 " + cndtn + " GROUP BY MS_EMPID,MS_MM,MS_YYYY ) AS MAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON MAS.MS_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
                    + "ON SFT.SHIFT_ID=EMP.EMP_SHIFT_ID WHERE 1=1 " + grp_cndtn + " "
                    //                    + "ORDER BY MS_EMPID";
                    + orderBy + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = rsTmp.getString("MS_EMPID");
                    rowData[1] = rsTmp.getString("EMP_NAME");
                    rowData[2] = rsTmp.getString("DPTNAME");
                    rowData[3] = rsTmp.getString("PAID_DAYS");
                    rowData[4] = rsTmp.getString("PRESENT_DAYS");
                    rowData[5] = rsTmp.getString("LOP");
                    rowData[6] = rsTmp.getString("CO");
                    rowData[7] = rsTmp.getString("LWP_DAYS");
                    rowData[8] = rsTmp.getString("OD");
                    rowData[9] = rsTmp.getString("PL");
                    rowData[10] = rsTmp.getString("CL");
                    rowData[11] = rsTmp.getString("SL");
                    rowData[12] = rsTmp.getString("LOFF");
                    rowData[13] = rsTmp.getString("EOFF");
                    rowData[14] = rsTmp.getString("MS_PH");
                    rowData[15] = rsTmp.getString("MS_STAFF_WOFF");
                    rowData[16] = rsTmp.getString("NPH");
                    //rowData[15] = rsTmp.getString("HL");
                    rowData[17] = rsTmp.getString("MS_WORKER_WOFF");
                    rowData[18] = rsTmp.getString("MS_COMPANY_WOFF");
                    rowData[19] = rsTmp.getString("COFFE");
                    rowData[20] = rsTmp.getString("NPL");
                    rowData[21] = rsTmp.getString("ESIC");
                    rowData[22] = "";

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridLateComingDetail() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Shift");
        DataModel.addColumn("Punch Date");
        DataModel.addColumn("Punches");
        DataModel.addColumn("Personal GP Punches");
        DataModel.addColumn("Official GP Punches");
        DataModel.addColumn("Personal GP 1st Half");
        DataModel.addColumn("Personal GP 2st Half");
        DataModel.addColumn("Official GP 1st Half");
        DataModel.addColumn("Official GP 2st Half");
        DataModel.addColumn("Late Coming");
        DataModel.addColumn("LC+LWP");
        DataModel.addColumn("Status");
        DataModel.addColumn("Category");
        DataModel.addColumn("Sub Category");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateLateComingDetail() {
        String cndtn = "";
        String grp_cndtn = "";
        String orderBy = "";
        try {
            FormatGridLateComingDetail(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND EMPID= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
            }
            if (!cmbShift.getSelectedItem().equals("Select Shift")) {
                cndtn += " AND SHIFT= " + modelShift.getCode(cmbShift.getSelectedIndex()) + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                cndtn += " AND MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                cndtn += " AND CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
            }
//            if (!cmbMonth.getSelectedItem().equals("Select")) {
//                cndtn += " AND MM= " + cmbMonth.getSelectedIndex() + " ";
//            }
//            if (!txtYear.getText().trim().equals("")) {
//                cndtn += " AND YYYY= '" + txtYear.getText().trim() + "'";
//            }
//            if (!txtFromDate.getText().trim().equals("")) {
//                cndtn += " AND PUNCHDATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
//            }
//            if (!txtToDate.getText().trim().equals("")) {
//                cndtn += " AND PUNCHDATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
//            }
            if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
                cndtn += " AND PUNCHDATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
                cndtn += " AND PUNCHDATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
            } else if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
                cndtn += " AND MM= " + cmbMonth.getSelectedIndex() + " ";
                cndtn += " AND YYYY= '" + txtYear.getText().trim() + "'";
            }

            int Orderby = cmbOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                orderBy = " ORDER BY EMPID ";
            }
            if (Orderby == 2) {
                orderBy = " ORDER BY EMPID ";
            }
            if (Orderby == 3) {
                orderBy = " ORDER BY DPTNAME,EMPID ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT *, "
                    + "SEC_TO_TIME(TIME_TO_SEC(GP_FIRST_HALF) + TIME_TO_SEC(GP_SECOND_HALF) + TIME_TO_SEC(LATE_COMING_HRS) + TIME_TO_SEC(LUNCH_LATE_HRS) + TIME_TO_SEC(GP_ADDITIONAL_HRS) ) AS TOTAL_LATE_COMING "
                    + "FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM " + cndtn + " ) AS DAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON DAS.EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=DAS.MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=DAS.CATEGORY "
                    + "WHERE TOTAL_LATE_COMING>0 " + grp_cndtn + " "
                    + orderBy + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("SHIFT");
                    rowData[5] = EITLERPGLOBAL.formatDate(rsTmp.getString("PUNCHDATE"));
                    rowData[6] = rsTmp.getString("ALL_PUNCHES");
                    rowData[7] = rsTmp.getString("ALL_PERSONAL_GATEPASS_PUNCHES");
                    rowData[8] = rsTmp.getString("ALL_OFFICIAL_GATEPASS_PUNCHES");
                    rowData[9] = rsTmp.getString("GP_FIRST_HALF").substring(0, 5);
                    rowData[10] = rsTmp.getString("GP_SECOND_HALF").substring(0, 5);
                    rowData[11] = rsTmp.getString("GPO_FIRST_HALF").substring(0, 5);
                    rowData[12] = rsTmp.getString("GPO_SECOND_HALF").substring(0, 5);
                    rowData[13] = rsTmp.getString("GATEPASS_LATE").substring(0, 5);
                    rowData[14] = rsTmp.getString("TOTAL_LATE_COMING").substring(0, 5);
                    rowData[15] = rsTmp.getString("PRESENT_FIRST") + " " + rsTmp.getString("PRESENT_SECOND");
                    rowData[16] = rsTmp.getString("SECNAME");
                    rowData[17] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridLateComingSummary() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Month");
        DataModel.addColumn("Year");
        DataModel.addColumn("Total Late Coming");
        if (EITLERPGLOBAL.gNewUserID == 286 || EITLERPGLOBAL.gNewUserID == 312
                || EITLERPGLOBAL.gNewUserID == 311 || EITLERPGLOBAL.gNewUserID == 260) {
            DataModel.addColumn("LC");
            DataModel.addColumn("Deduct_LC");
            DataModel.addColumn("Avg LC");
            DataModel.addColumn("Time To lEAVE");
        }
        DataModel.addColumn("Category");
        DataModel.addColumn("Sub Category");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateLateComingSummary() {
        String cndtn = "";
        String grp_cndtn = "";
        String orderBy = "";
        try {
            FormatGridLateComingSummary(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND EMPID= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " WHERE EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                cndtn += " AND MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                cndtn += " AND CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
            }
            if (!cmbMonth.getSelectedItem().equals("Select")) {
                cndtn += " AND MM= " + cmbMonth.getSelectedIndex() + " ";
            }
            if (!txtYear.getText().trim().equals("")) {
                cndtn += " AND YYYY= '" + txtYear.getText().trim() + "'";
            }

            int Orderby = cmbOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                orderBy = " ORDER BY EMPID ";
            }
            if (Orderby == 2) {
                orderBy = " ORDER BY EMPID ";
            }
            if (Orderby == 3) {
                orderBy = " ORDER BY DPTNAME,EMPID ";
            }

            String strSQL = "";

            strSQL = "SELECT SEC_TO_TIME(TIME_TO_SEC('18:30:00')-TIME_TO_SEC(AVGMIN)) AS TIME_TO_LEAVE,ASD.* FROM (SELECT CASE WHEN TIME_TO_SEC(DEDUCTGP)<0 THEN "
                    + "SEC_TO_TIME(FLOOR(((TIME_TO_SEC(DEDUCTGP)/("
                    + "(DATEDIFF(LAST_DAY(CURDATE()),CURDATE())+1)-CNT))/60)*-1)*60) ELSE '00:00:00' END AS AVGMIN,"
                    + "DD.* FROM (SELECT CASE WHEN CALC_GP='00:00:00' THEN TOTAL_GP ELSE CALC_GP END CALCGP,"
                    + "CASE WHEN DEDUCT_GP='00:00:00' THEN SEC_TO_TIME(TIME_TO_SEC(TOTAL_GP)-7320) ELSE DEDUCT_GP END DEDUCTGP,"
                    + "DAS.*,EMP.*,DPT.*,SEC.*,CTG.*"
                    + " FROM ( SELECT * FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM " + cndtn + " GROUP BY EMPID,MM,YYYY ) AS DAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON DAS.EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=DAS.MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=DAS.CATEGORY " + grp_cndtn + " "
                    + orderBy + " ) AS DD "
                    + "LEFT JOIN (SELECT COUNT(HL_DATE) AS CNT FROM SDMLATTPAY.ATT_HOLIDAY_WEEKOFF "
                    + "WHERE YEAR(HL_DATE)=YEAR(CURDATE()) AND MONTH(HL_DATE)=MONTH(CURDATE()) "
                    + "AND HL_DATE>=CURDATE() "
                    + ") AS L ON 1=1) AS ASD";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("MM");
                    rowData[5] = rsTmp.getString("YYYY");
                    rowData[6] = rsTmp.getString("TOTAL_GP").substring(0, 5);
                    if (EITLERPGLOBAL.gNewUserID == 286 || EITLERPGLOBAL.gNewUserID == 312
                            || EITLERPGLOBAL.gNewUserID == 311 || EITLERPGLOBAL.gNewUserID == 260) {

                        rowData[7] = rsTmp.getString("CALCGP");
                        rowData[8] = rsTmp.getString("DEDUCTGP");
                        rowData[9] = rsTmp.getString("AVGMIN");
                        rowData[10] = rsTmp.getString("TIME_TO_LEAVE");
                        rowData[11] = rsTmp.getString("SECNAME");
                        rowData[12] = rsTmp.getString("CTGNAME");
                    } else {
                        rowData[7] = rsTmp.getString("SECNAME");
                        rowData[8] = rsTmp.getString("CTGNAME");
                    }
                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridMaster() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Code");
        DataModel.addColumn("Name");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateDepartmentMst() {
        try {
            FormatGridMaster(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT * FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("DPTCODE");
                    rowData[2] = rsTmp.getString("Name");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateDesignationMst() {
        try {
            FormatGridMaster(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT * FROM SDMLATTPAY.ATT_DESIGNATION_MASTER";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("DSGCODE");
                    rowData[2] = rsTmp.getString("Name");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateCategoryMst() {
        try {
            FormatGridMaster(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT * FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("SECCODE");
                    rowData[2] = rsTmp.getString("Name");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateSubCategoryMst() {
        try {
            FormatGridMaster(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT * FROM SDMLATTPAY.ATT_CATEGORY_MASTER";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("CTGCODE");
                    rowData[2] = rsTmp.getString("Name");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridShiftMaster() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Code");
        DataModel.addColumn("Name");
        DataModel.addColumn("In Time");
        DataModel.addColumn("Lunch Out");
        DataModel.addColumn("Lunch In");
        DataModel.addColumn("Out Time");
        DataModel.addColumn("Working Hours");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateShiftMst() {
        try {
            FormatGridShiftMaster(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT * FROM SDMLATTPAY.ATT_SHIFT";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("SHIFT_ID");
                    rowData[2] = rsTmp.getString("SHIFT_NAME");
                    rowData[3] = rsTmp.getString("SHIFT_IN_TIME");
                    rowData[4] = rsTmp.getString("SHIFT_LUNCH_OUT");
                    rowData[5] = rsTmp.getString("SHIFT_LUNCH_IN");
                    rowData[6] = rsTmp.getString("SHIFT_OUT_TIME");
                    rowData[7] = rsTmp.getString("SHIFT_WRK_HRS");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridGatePass() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Shift");
        DataModel.addColumn("Designation");
        DataModel.addColumn("GP Date");
        DataModel.addColumn("Nature of Work");
        DataModel.addColumn("Leaving Time");
        DataModel.addColumn("Arrival Time");
        DataModel.addColumn("Total Time");
        DataModel.addColumn("Remark");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateGatePass() {
        String cndtn = "";
        String grp_cndtn = "";
        String orderBy = "";
        try {
            FormatGridGatePass(); //clear existing content of table
            ResultSet rsTmp;

            if (rbtnPersonal.isSelected()) {
                cndtn += " WHERE GP_TYPE= 'P' ";
            }
            if (rbtnOfficial.isSelected()) {
                cndtn += " WHERE GP_TYPE= 'O' ";
            }
            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND GP_EMP_NO= '" + txtEmpNo.getText().trim() + "' ";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                cndtn += " AND GP_EMP_DEPT= '" + cmbDept.getSelectedItem() + "' ";
            }
            if (!cmbShift.getSelectedItem().equals("Select Shift")) {
                cndtn += " AND GP_EMP_SHIFT= " + modelShift.getCode(cmbShift.getSelectedIndex()) + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
            }
//            if (!cmbMonth.getSelectedItem().equals("Select")) {
//                cndtn += " AND MONTH(GP_DATE)= " + cmbMonth.getSelectedIndex() + " ";
//            }
//            if (!txtYear.getText().trim().equals("")) {
//                cndtn += " AND YEAR(GP_DATE)= '" + txtYear.getText().trim() + "' ";
//            }
//            if (!txtFromDate.getText().trim().equals("")) {
//                cndtn += " AND GP_DATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
//            }
//            if (!txtToDate.getText().trim().equals("")) {
//                cndtn += " AND GP_DATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
//            }
            if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
                cndtn += " AND GP_DATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
                cndtn += " AND GP_DATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
            } else if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
                cndtn += " AND MONTH(GP_DATE)= " + cmbMonth.getSelectedIndex() + " ";
                cndtn += " AND YEAR(GP_DATE)= '" + txtYear.getText().trim() + "' ";
            }

            int Orderby = cmbOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                orderBy = " ORDER BY GP_EMP_NO ";
            }
            if (Orderby == 2) {
                orderBy = " ORDER BY GP_EMP_NO ";
            }
            if (Orderby == 3) {
                orderBy = " ORDER BY GP_EMP_DEPT,GP_EMP_NO ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT * FROM SDMLATTPAY.GATEPASS_ENTRY " + cndtn + " ) AS GP "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON GP.GP_EMP_NO=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY WHERE 1=1 "
                    + " " + grp_cndtn + " "
                    + " " + orderBy + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("GP_EMP_NO");
                    rowData[2] = rsTmp.getString("GP_EMP_NAME");
                    rowData[3] = rsTmp.getString("GP_EMP_DEPT");
                    rowData[4] = rsTmp.getString("GP_EMP_SHIFT");
                    rowData[5] = rsTmp.getString("GP_EMP_DESN");
                    rowData[6] = EITLERPGLOBAL.formatDate(rsTmp.getString("GP_DATE"));
                    rowData[7] = rsTmp.getString("GP_NATURE_OF_WORK");
                    rowData[8] = rsTmp.getString("GP_TOL");
                    rowData[9] = rsTmp.getString("GP_TOA");
                    rowData[10] = rsTmp.getString("GP_TOT_HOURS");
                    rowData[11] = rsTmp.getString("GP_REMARKS");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridLeaveAvail() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Leave Type");
        DataModel.addColumn("From Date");
        DataModel.addColumn("To Date");
        DataModel.addColumn("Days");
        DataModel.addColumn("Mention Time");
        DataModel.addColumn("Remark");
        DataModel.addColumn("Category");
        DataModel.addColumn("Sub Category");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateLeaveAvail() {
        String cndtn = "";
        String grp_cndtn = "";
        String orderBy = "";
        try {
            FormatGridLeaveAvail(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND LVT_PAY_EMPID= '" + txtEmpNo.getText().trim() + "' ";
            }
            if (!txtFromDate.getText().trim().equals("")) {
                cndtn += " AND LVT_FROMDATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
            }
            if (!txtToDate.getText().trim().equals("")) {
                cndtn += " AND LVT_FROMDATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
            }
//            if (!cmbMonth.getSelectedItem().equals("Select")) {
//                cndtn += " AND " + cmbMonth.getSelectedIndex() + " >= MONTH(LVT_FROMDATE) AND " + cmbMonth.getSelectedIndex() + " <= MONTH(LVT_TODATE) ";
//            }
//            if (!txtYear.getText().trim().equals("")) {
//                cndtn += " AND '" + txtYear.getText().trim() + "' >= YEAR(LVT_FROMDATE) AND '" + txtYear.getText().trim() + "' <= YEAR(LVT_TODATE) ";
//            }

//            if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
//                cndtn += " AND ((MONTH(LVT_FROMDATE)= " + cmbMonth.getSelectedIndex() + "  AND YEAR(LVT_FROMDATE)= '" + txtYear.getText().trim() + "' ) OR (MONTH(LVT_TODATE)= " + cmbMonth.getSelectedIndex() + "  AND YEAR(LVT_TODATE)= '" + txtYear.getText().trim() + "' )) ";
//            }
            if (!txtYear.getText().trim().equals("") && txtFromDate.getText().trim().equals("") && txtToDate.getText().trim().equals("")) {
                cndtn += " AND LVT_YEAR = '" + txtYear.getText().trim() + "' ";
            }

            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                grp_cndtn += " AND EMP_CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
            }

            int Orderby = cmbOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                orderBy = " ORDER BY LVT_PAY_EMPID,LVT_FROMDATE DESC ";
            }
            if (Orderby == 2) {
                orderBy = " ORDER BY LVT_PAY_EMPID,LVT_FROMDATE DESC ";
            }
            if (Orderby == 3) {
                orderBy = " ORDER BY DPTNAME,LVT_PAY_EMPID,LVT_FROMDATE DESC ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT * FROM SDMLATTPAY.ATT_LEAVE_TRN WHERE LVT_LEAVE_TYPE=3 "
                    + "AND COALESCE(AMEND_TYPE,'') NOT IN ('DELETE') " + cndtn + " ) AS LA "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON LA.LVT_PAY_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY WHERE 1=1 " + grp_cndtn + " "
                    //                    + "ORDER BY LVT_PAY_EMPID,LVT_FROMDATE DESC ";
                    + orderBy + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("LVT_PAY_EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("LVT_LEAVE_CODE");
                    rowData[5] = EITLERPGLOBAL.formatDate(rsTmp.getString("LVT_FROMDATE"));
                    rowData[6] = EITLERPGLOBAL.formatDate(rsTmp.getString("LVT_TODATE"));
                    rowData[7] = rsTmp.getString("LVT_DAYS");
                    rowData[8] = rsTmp.getString("LVT_MENTION_TIME");
                    rowData[9] = rsTmp.getString("LVT_REMARK");
                    rowData[10] = rsTmp.getString("SECNAME");
                    rowData[11] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridLeaveBalance() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Type");
        DataModel.addColumn("Opening");
        DataModel.addColumn("Credit");
        DataModel.addColumn("Avail");
        DataModel.addColumn("Lapse");
        DataModel.addColumn("Encash");
        DataModel.addColumn("Closing");
        DataModel.addColumn("Category");
        DataModel.addColumn("Sub Category");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateLeaveBalance() {
        String cndtn = "";
        String grp_cndtn = "";
        String orderBy = "";
        try {
            FormatGridLeaveBalance(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND LVBAL_PAYEMPCD= '" + txtEmpNo.getText().trim() + "' ";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                grp_cndtn += " AND EMP_CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
            }

            int Orderby = cmbOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                orderBy = " ORDER BY LVBAL_PAYEMPCD ";
            }
            if (Orderby == 2) {
                orderBy = " ORDER BY LVBAL_PAYEMPCD ";
            }
            if (Orderby == 3) {
                orderBy = " ORDER BY DPTNAME,LVBAL_PAYEMPCD ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT * FROM SDMLATTPAY.ATT_LEAVE_BALANCE WHERE LVBAL_YEAR=" + txtYear.getText() + " " + cndtn + " ) AS LB "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY,EMP_LEFT_DATE FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON LB.LVBAL_PAYEMPCD=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY WHERE (EMP_LEFT_DATE='0000-00-00 00:00:00' OR EMP_LEFT_DATE>='" + txtYear.getText() + "-01-01') " + grp_cndtn + " "
                    + orderBy + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("LVBAL_PAYEMPCD");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("LVBAL_LEAVE_CD");
                    rowData[5] = rsTmp.getString("LVBAL_OPENING");
                    rowData[6] = rsTmp.getString("LVBAL_CREDIT");
                    rowData[7] = rsTmp.getString("LVBAL_AVAIL");
                    rowData[8] = rsTmp.getString("LVBAL_LAPSE");
                    rowData[9] = rsTmp.getString("LVBAL_ENCASH");
                    rowData[10] = rsTmp.getString("LVBAL_CLOSING");
                    rowData[11] = rsTmp.getString("SECNAME");
                    rowData[12] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridSpecialSanction() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Attd. Date");
        DataModel.addColumn("1st Half");
        DataModel.addColumn("2nd Half");
        DataModel.addColumn("LC Time");
        DataModel.addColumn("Remarks");
        DataModel.addColumn("Punch Times ");
        DataModel.addColumn("OGP");
        DataModel.addColumn("PGP");
        DataModel.addColumn("Correction No");
        DataModel.addColumn("Doc Date");
        DataModel.addColumn("Category");
        DataModel.addColumn("Sub Category");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateSpecialSanction() {
        String cndtn = "";
        String grp_cndtn = "";
        String orderBy = "";
        try {
            FormatGridSpecialSanction(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND EMP_CODE= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                //grp_cndtn += " WHERE EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
                grp_cndtn += " AND EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                grp_cndtn += " AND EMP_CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
            }
//            if (!cmbMonth.getSelectedItem().equals("Select")) {
//                cndtn += " AND MONTH(A_DATE)= " + cmbMonth.getSelectedIndex() + " ";
//            }
//            if (!txtYear.getText().trim().equals("")) {
//                cndtn += " AND YEAR(A_DATE)= '" + txtYear.getText().trim() + "'";
//            }
//            if (!txtFromDate.getText().trim().equals("")) {
//                cndtn += " AND A_DATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
//            }
//            if (!txtToDate.getText().trim().equals("")) {
//                cndtn += " AND A_DATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
//            }
            if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
                cndtn += " AND A_DATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
                cndtn += " AND A_DATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
            } else if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
                cndtn += " AND MONTH(A_DATE)= " + cmbMonth.getSelectedIndex() + " ";
                cndtn += " AND YEAR(A_DATE)= '" + txtYear.getText().trim() + "'";
            }

            int Orderby = cmbOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                orderBy = " ORDER BY EMP_CODE,A_DATE ";
            }
            if (Orderby == 2) {
                orderBy = " ORDER BY EMP_CODE,A_DATE ";
            }
            if (Orderby == 3) {
                orderBy = " ORDER BY DPTNAME,EMP_CODE,A_DATE ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT S.*,D.ALL_PUNCHES,D.ALL_PERSONAL_GATEPASS_PUNCHES,D.ALL_OFFICIAL_GATEPASS_PUNCHES "
                    + "FROM SDMLATTPAY.ATT_SPECIAL_SANCTION S,SDMLATTPAY.ATT_DATA_DAILY_SUMMARY D "
                    + "WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM AND EMP_CODE=EMPID AND A_DATE=PUNCHDATE AND APPROVED=1 AND CANCELED=0 " + cndtn + " ) AS SSS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON SSS.EMP_CODE=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "WHERE 1=1 " + grp_cndtn + " "
                    //                    + "ORDER BY EMP_CODE,A_DATE";
                    + orderBy + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("EMP_CODE");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = EITLERPGLOBAL.formatDate(rsTmp.getString("A_DATE"));
                    rowData[5] = rsTmp.getString("FIRST_HALF");
                    rowData[6] = rsTmp.getString("SECOND_HALF");
                    rowData[7] = rsTmp.getString("LC_TIME");
                    rowData[8] = rsTmp.getString("SANCTION_REMARKS");
                    rowData[9] = rsTmp.getString("ALL_PUNCHES");
                    rowData[10] = rsTmp.getString("ALL_PERSONAL_GATEPASS_PUNCHES");
                    rowData[11] = rsTmp.getString("ALL_OFFICIAL_GATEPASS_PUNCHES");
                    rowData[12] = rsTmp.getString("SPECIAL_SANCTION_DOC_NO");
                    rowData[13] = EITLERPGLOBAL.formatDate(rsTmp.getString("SPECIAL_SANCTION_DOC_DATE"));
                    rowData[14] = rsTmp.getString("SECNAME");
                    rowData[15] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridRokdiPunches() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Punch Date");
        DataModel.addColumn("Day");
        DataModel.addColumn("Shift");
        DataModel.addColumn("Status");
        DataModel.addColumn("Spe. Sanction Status");
        DataModel.addColumn("No of Punches");
        DataModel.addColumn("Punches");
        DataModel.addColumn("Machine 11 (Rokdi) Punches");
        DataModel.addColumn("Dummy Punches");
        DataModel.addColumn("Deletion Punches");
        DataModel.addColumn("Correction Punches");
        DataModel.addColumn("Mis Punches");
        DataModel.addColumn("Category");
        DataModel.addColumn("Sub Category");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void FormatGridBirthdayCalender() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Month");
        DataModel.addColumn("DOB");
        DataModel.addColumn("Designation");
        DataModel.addColumn("Department");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateRokdiPunches() {
        String cndtn = "";
        String grp_cndtn = "";
        String orderBy = "";
        try {
            FormatGridRokdiPunches(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND EMPID= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " WHERE EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
            }
            if (!cmbShift.getSelectedItem().equals("Select Shift")) {
                cndtn += " AND SHIFT= " + modelShift.getCode(cmbShift.getSelectedIndex()) + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                cndtn += " AND MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                cndtn += " AND CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
            }
//            if (!cmbMonth.getSelectedItem().equals("Select")) {
//                cndtn += " AND MM= " + cmbMonth.getSelectedIndex() + "  AND MONTH(PUNCHDATE)= " + cmbMonth.getSelectedIndex() + " ";
//            }
//            if (!txtYear.getText().trim().equals("")) {
//                cndtn += " AND YYYY= '" + txtYear.getText().trim() + "'";
//            }
//            if (!txtFromDate.getText().trim().equals("")) {
//                cndtn += " AND PUNCHDATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
//            }
//            if (!txtToDate.getText().trim().equals("")) {
//                cndtn += " AND PUNCHDATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
//            }

            if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
                cndtn += " AND PUNCHDATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
                cndtn += " AND PUNCHDATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
            } else if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
                cndtn += " AND MM= " + cmbMonth.getSelectedIndex() + "  AND MONTH(PUNCHDATE)= " + cmbMonth.getSelectedIndex() + " ";
                cndtn += " AND YYYY= '" + txtYear.getText().trim() + "'";
            }

            int Orderby = cmbOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                orderBy = " ORDER BY EMPID ";
            }
            if (Orderby == 2) {
                orderBy = " ORDER BY EMPID ";
            }
            if (Orderby == 3) {
                orderBy = " ORDER BY DPTNAME,EMPID ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT *, "
                    + "SEC_TO_TIME(TIME_TO_SEC(GP_FIRST_HALF) + TIME_TO_SEC(GP_SECOND_HALF) + TIME_TO_SEC(LATE_COMING_HRS) + TIME_TO_SEC(LUNCH_LATE_HRS) + TIME_TO_SEC(GP_ADDITIONAL_HRS) ) AS TOTAL_LATE_COMING "
                    + "FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM AND COALESCE(ALL_OT_PUNCHES,'')!='' " + cndtn + " ) AS DAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON DAS.EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=DAS.MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=DAS.CATEGORY "
                    + "LEFT JOIN ( SELECT *,'YES' AS SSS FROM SDMLATTPAY.ATT_SPECIAL_SANCTION WHERE APPROVED=1 AND CANCELED=0 ) AS SS "
                    + "ON DAS.EMPID=SS.EMP_CODE AND DAS.PUNCHDATE=SS.A_DATE "
                    + " " + grp_cndtn + " "
                    + orderBy + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                int column = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];
                    column = 0;
                    rowData[column] = Integer.toString(cnt);
                    column++;
                    rowData[column] = rsTmp.getString("EMPID");
                    column++;
                    rowData[column] = rsTmp.getString("EMP_NAME");
                    column++;
                    rowData[column] = rsTmp.getString("DPTNAME");
                    column++;
                    rowData[column] = EITLERPGLOBAL.formatDate(rsTmp.getString("PUNCHDATE"));
                    column++;
                    rowData[column] = rsTmp.getString("ATT_DAY");
                    column++;
                    rowData[column] = rsTmp.getString("SHIFT");
                    column++;
                    rowData[column] = rsTmp.getString("PRESENT_FIRST") + " " + rsTmp.getString("PRESENT_SECOND");
                    column++;
                    rowData[column] = rsTmp.getString("SSS");
                    column++;
                    rowData[column] = rsTmp.getString("PUNCHES_NOS");
                    column++;
                    rowData[column] = rsTmp.getString("ALL_PUNCHES");
                    column++;
                    rowData[column] = rsTmp.getString("ALL_OT_PUNCHES");
                    column++;
                    rowData[column] = rsTmp.getString("ALL_DUMMY_PUNCHES");
                    column++;
                    rowData[column] = rsTmp.getString("ALL_DELETE_PUNCHES");
                    column++;
                    rowData[column] = rsTmp.getString("ALL_CORRECTION_PUNCHES");
                    column++;
                    rowData[column] = rsTmp.getString("ALL_MIS_PUNCHES");
                    column++;
                    rowData[column] = rsTmp.getString("SECNAME");
                    column++;
                    rowData[column] = rsTmp.getString("CTGNAME");
                    column++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateBirthdayCalender() {
        String cndtn = "";
        String grp_cndtn = "";
        String orderBy = "";
        try {
            FormatGridBirthdayCalender();
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT A.*,DESIGNATION,DEPARTMENT FROM\n"
                    + "(SELECT PAY_EMP_NO,EMP_NAME,MONTHNAME(EMP_BIRTH_DATE) MONTH,DATE(EMP_BIRTH_DATE) BDATE FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_LEFT_DATE='0000-00-00' AND MONTH(EMP_BIRTH_DATE)=MONTH(DATE_ADD(CURDATE(),INTERVAL 1 MONTH)) AND EMP_MAIN_CATEGORY IN (2,5,9) ORDER BY DAY(EMP_BIRTH_DATE)) A\n"
//                    + "(SELECT PAY_EMP_NO,EMP_NAME,MONTHNAME(EMP_BIRTH_DATE) MONTH,DATE(EMP_BIRTH_DATE) BDATE FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_LEFT_DATE='0000-00-00' AND MONTH(EMP_BIRTH_DATE)=MONTH(CURDATE()) AND EMP_MAIN_CATEGORY IN (2,5,9) ORDER BY DAY(EMP_BIRTH_DATE)) A\n"
                    + "LEFT  JOIN \n"
                    + "(SELECT PAY_EMP_NO,DESIGNATION,DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW) B\n"
                    + "ON A.PAY_EMP_NO=B.PAY_EMP_NO";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                int column = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];
                    column = 0;
                    rowData[column] = Integer.toString(cnt);
                    column++;
                    rowData[column] = rsTmp.getString("PAY_EMP_NO");
                    column++;
                    rowData[column] = rsTmp.getString("EMP_NAME");
                    column++;
                    rowData[column] = rsTmp.getString("MONTH");
                    column++;
                    rowData[column] = EITLERPGLOBAL.formatDate(rsTmp.getString("BDATE"));
                    column++;
                    rowData[column] = rsTmp.getString("DESIGNATION");
                    column++;
                    rowData[column] = rsTmp.getString("DEPARTMENT");
                    column++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatRokdiData() {
        DataModel = new EITLTableModel();

        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Rokdi Date");
        DataModel.addColumn("From Date");
        DataModel.addColumn("From Punch");
        DataModel.addColumn("To Date");
        DataModel.addColumn("To Punch");
        DataModel.addColumn("Difference");
        DataModel.addColumn("RunDate");

        DataModel.SetVariable(0, "SrNo"); //0 - Read Only
        DataModel.SetVariable(1, "EMP_NO"); //0 - Read Only
        DataModel.SetVariable(2, "EMP_NAME"); //0 - Read Only
        DataModel.SetVariable(3, "DEPARTMENT"); //0 - Read Only
        DataModel.SetVariable(4, "ROKDIDATE"); //0 - Read Only
        DataModel.SetVariable(5, "FROM_DATE"); //0 - Read Only
        DataModel.SetVariable(6, "FROM_PUNCH"); //0 - Read Only
        DataModel.SetVariable(7, "TO_DATE"); //0 - Read Only
        DataModel.SetVariable(8, "TO_PUNCH"); //0 - Read Only
        DataModel.SetVariable(9, "DIFFRENCE"); //0 - Read Only     
        DataModel.SetVariable(10, "RUNDATE"); //0 - Read Only     

        DataModel.TableReadOnly(true);
    }

    private void GenerateRokdiData() {
        String cndtn = "";
        String grp_cndtn = "";
        String orderBy = "";
        try {
            FormatRokdiData(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND EP_EMP_CODE= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                //grp_cndtn += " WHERE EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
                grp_cndtn += " AND EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                grp_cndtn += " AND EMP_CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
            }
            if (RokdiDataWorker.isSelected()) {
                cndtn += " AND (EP_EMP_CODE LIKE  'BRD3%' OR EP_EMP_CODE LIKE 'BRD4%')";
            } else {
                cndtn += " AND (EP_EMP_CODE LIKE  'BRD0%')";
            }
            int Orderby = cmbOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                orderBy = " ORDER BY EP_EMP_CODE,EP_DATE,EP_TIME1 ";
            }
            if (Orderby == 2) {
                orderBy = " ORDER BY EP_EMP_CODE,EP_DATE,EP_TIME1 ";
            }
            if (Orderby == 3) {
                orderBy = " ORDER BY DPTNAME,EP_EMP_CODE,EP_DATE,EP_TIME1 ";
            }

            String strSQL = "";
            //txtToDate.setText(data.getStringValueFromDB("SELECT DATE_FORMAT(SUBDATE('" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "',INTERVAL 1 DAY),'%d/%m/%Y') FROM DUAL"));
            strSQL = "SELECT EP_EMP_CODE,EMP_NAME,EP_DATE,DATE(EP_TIME1) AS DATE_1,TIME(EP_TIME1) AS TIME_1,DATE(EP_TIME2) AS DATE_2,CASE WHEN EP_TIME2!='0000-00-00 00:00:00' THEN TIME(EP_TIME2) ELSE '' END AS TIME_2,CASE WHEN EP_TIME2!='0000-00-00 00:00:00' THEN timediff(EP_TIME2,EP_TIME1) ELSE '' END AS DIFF,DPTNAME FROM (SELECT EP_EMP_CODE,EP_DATE,EP_TIME1,EP_TIME2 FROM SDMLATTPAY.EMP_PUNCH_ROKDI_FINAL "
                    + " WHERE EP_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' AND EP_DATE<='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' AND EP_TIME1 != EP_TIME2  "
                    + "UNION ALL SELECT EP_EMP_CODE,EP_DATE,EP_TIME3,EP_TIME4 FROM SDMLATTPAY.EMP_PUNCH_ROKDI_FINAL "
                    + "WHERE EP_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' AND EP_DATE <='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' AND EP_TIME3 !=EP_TIME4  "
                    + "UNION ALL SELECT EP_EMP_CODE,EP_DATE,EP_TIME5,EP_TIME6 FROM SDMLATTPAY.EMP_PUNCH_ROKDI_FINAL "
                    + "WHERE EP_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' AND EP_DATE <='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' AND EP_TIME5 !=EP_TIME6 "
                    + " "
                    + "UNION ALL "
                    + " "
                    + "SELECT EP_EMP_CODE,EP_DATE,EP_TIME7,EP_TIME8 FROM SDMLATTPAY.EMP_PUNCH_ROKDI_FINAL "
                    + "WHERE EP_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' AND EP_DATE <='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' AND EP_TIME7 != "
                    + "EP_TIME8 "
                    + " "
                    + "UNION ALL "
                    + " "
                    + "SELECT EP_EMP_CODE,EP_DATE,EP_TIME9,EP_TIME10 FROM "
                    + "SDMLATTPAY.EMP_PUNCH_ROKDI_FINAL WHERE EP_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' AND EP_DATE "
                    + "<='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' AND EP_TIME9 != EP_TIME10 "
                    + " "
                    + "UNION ALL "
                    + " "
                    + "SELECT EP_EMP_CODE,EP_DATE,EP_TIME11,EP_TIME12 FROM "
                    + "SDMLATTPAY.EMP_PUNCH_ROKDI_FINAL WHERE EP_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' AND EP_DATE "
                    + "<='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' AND EP_TIME11 != EP_TIME12 "
                    + " "
                    + "UNION ALL "
                    + " "
                    + "SELECT EP_EMP_CODE,EP_DATE,EP_TIME13,EP_TIME14 FROM "
                    + "SDMLATTPAY.EMP_PUNCH_ROKDI_FINAL WHERE EP_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' AND EP_DATE "
                    + "<='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' AND EP_TIME13 != EP_TIME14 "
                    + " "
                    + "UNION ALL "
                    + " "
                    + "SELECT EP_EMP_CODE,EP_DATE,EP_TIME15,EP_TIME16 FROM "
                    + "SDMLATTPAY.EMP_PUNCH_ROKDI_FINAL WHERE EP_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' AND EP_DATE "
                    + "<='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' AND EP_TIME15 != EP_TIME16 "
                    + " "
                    + "UNION ALL "
                    + " "
                    + "SELECT EP_EMP_CODE,EP_DATE,EP_TIME17,EP_TIME18 FROM "
                    + "SDMLATTPAY.EMP_PUNCH_ROKDI_FINAL WHERE EP_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' AND EP_DATE "
                    + "<='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' AND EP_TIME17 != EP_TIME18 "
                    + " "
                    + "UNION ALL "
                    + " "
                    + "SELECT EP_EMP_CODE,EP_DATE,EP_TIME19,EP_TIME20 FROM "
                    + "SDMLATTPAY.EMP_PUNCH_ROKDI_FINAL WHERE EP_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' AND EP_DATE "
                    + "<='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' AND EP_TIME19 != EP_TIME20 "
                    + " "
                    + ")  AS P "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON P.EP_EMP_CODE=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "WHERE 1=1 " + cndtn + " " + grp_cndtn + " "
                    //                    + "ORDER BY EMP_CODE,A_DATE";
                    + orderBy + " ";
            //txtToDate.setText(data.getStringValueFromDB("SELECT DATE_FORMAT(ADDDATE('" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "',INTERVAL 1 DAY),'%d/%m/%Y') FROM DUAL"));

            System.out.println("Query..." + strSQL);
            String mcurdate = data.getStringValueFromDB("SELECT DATE_FORMAT(NOW(),'%d/%m/%Y %H:%i') FROM DUAL");
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            String memp;
            if (rsTmp.getRow() > 0) {
                int cnt = 1;
                memp = rsTmp.getString("EP_EMP_CODE");
                while (!rsTmp.isAfterLast()) {
                    if (!memp.equalsIgnoreCase(rsTmp.getString("EP_EMP_CODE"))) {
                        Object[] rowData = new Object[1];
                        DataModel.addRow(rowData);
                        memp = rsTmp.getString("EP_EMP_CODE");
                    }
                    Object[] rowData = new Object[1];
                    DataModel.addRow(rowData);
                    int NewRow = Table.getRowCount() - 1;
                    DataModel.setValueByVariable("SrNo", cnt + "", NewRow);
                    DataModel.setValueByVariable("EMP_NO", rsTmp.getString("EP_EMP_CODE"), NewRow);
                    DataModel.setValueByVariable("EMP_NAME", rsTmp.getString("EMP_NAME"), NewRow);
                    DataModel.setValueByVariable("DEPARTMENT", rsTmp.getString("DPTNAME"), NewRow);
                    DataModel.setValueByVariable("ROKDIDATE", EITLERPGLOBAL.formatDate(rsTmp.getString("EP_DATE")), NewRow);
                    DataModel.setValueByVariable("FROM_DATE", EITLERPGLOBAL.formatDate(rsTmp.getString("DATE_1")), NewRow);
                    DataModel.setValueByVariable("FROM_PUNCH", rsTmp.getString("TIME_1").substring(0, 5), NewRow);
                    DataModel.setValueByVariable("TO_DATE", EITLERPGLOBAL.formatDate(rsTmp.getString("DATE_2")), NewRow);
                    if (rsTmp.getString("TIME_2").trim().length() > 5) {
                        DataModel.setValueByVariable("TO_PUNCH", rsTmp.getString("TIME_2").substring(0, 5), NewRow);
                    } else {
                        DataModel.setValueByVariable("TO_PUNCH", rsTmp.getString("TIME_2"), NewRow);
                    }
                    if (rsTmp.getString("DIFF").trim().length() > 5) {
                        DataModel.setValueByVariable("DIFFRENCE", rsTmp.getString("DIFF").substring(0, 5), NewRow);
                    } else {
                        DataModel.setValueByVariable("DIFFRENCE", rsTmp.getString("DIFF"), NewRow);
                    }
                    DataModel.setValueByVariable("RUNDATE", mcurdate, NewRow);
                    cnt++;
                    //DataModel.setValueByVariable("DIFFRENCE", rsTmp.getString("DIFF"), NewRow);

                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private boolean DateValidate() {
        if (txtFromDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(FrmAdvanceSearch_1.this, "Please Enter From Date");
            txtFromDate.setText("");
            return false;
        }
        if (data.getIntValueFromDB("SELECT DATEDIFF('" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "',CURDATE()) FROM DUAL") > 0) {
            JOptionPane.showMessageDialog(FrmAdvanceSearch_1.this, "Please Enter Less than or Equals Current Date in From Date");
            txtFromDate.setText("");
            return false;
        }

        if (txtToDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(FrmAdvanceSearch_1.this, "Please Enter To Date");
            txtToDate.setText("");
            return false;
        }
        if (data.getIntValueFromDB("SELECT DATEDIFF('" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "','" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "') FROM DUAL") < 0) {
            JOptionPane.showMessageDialog(FrmAdvanceSearch_1.this, "Please Enter Greater Date than From Date in To Date");
            txtToDate.setText("");
            return false;
        }

        return true;
    }

    private boolean MonthYearValidate() {
        if (cmbMonth.getSelectedItem().equals("Select")) {
            JOptionPane.showMessageDialog(FrmAdvanceSearch_1.this, "Please Select Month");
            return false;
        }
        if (txtYear.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(FrmAdvanceSearch_1.this, "Please Enter Year");
            txtYear.setText("");
            return false;
        }
        if (txtYear.getText().trim().length() != 4) {
            JOptionPane.showMessageDialog(FrmAdvanceSearch_1.this, "Please Enter Valid Year");
            txtYear.setText("");
            return false;
        }
        if (!EITLERPGLOBAL.IsNumber(txtYear.getText().trim())) {
            JOptionPane.showMessageDialog(FrmAdvanceSearch_1.this, "Please Enter Valid Year");
            txtYear.setText("");
            return false;
        }

        return true;
    }

    private void GeneratePendingDoc() {
        String qryType = "";
        String cndtn = "";
        String orderBy = "";
        String userName = "";
        String moduleName = "";

        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);
        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        try {
            ResultSet rsTmp;

            if (!cmbUserList.getSelectedItem().toString().endsWith("Select User")) {
                userName += " AND USER_NAME LIKE ('" + cmbUserList.getSelectedItem().toString() + "') ";
            }
            if (!cmbModuleList.getSelectedItem().toString().endsWith("Select Module")) {
                moduleName += " AND MODULE_DESC LIKE ('" + cmbModuleList.getSelectedItem().toString() + "') ";
            }

            if (cmbType.getSelectedItem().toString().startsWith("U")) {
                qryType = "SELECT USER_ID,UPPER(USER_NAME) AS USER_NAME,MODULE_ID,UPPER(CONCAT(MODULE_DESC,' (',COUNT(*),')')) AS MODULE_NAME FROM (SELECT D.MODULE_ID,MODULE_DESC,DOC_NO,DOC_DATE,D.USER_ID,USER_NAME,RECEIVED_DATE,D.REMARKS AS RUN_DATE FROM SDMLATTPAY.D_COM_DOC_DATA D,DINESHMILLS.D_COM_MODULES M,DINESHMILLS.D_COM_USER_MASTER U WHERE STATUS ='W'  AND D.MODULE_ID NOT IN (849) AND D.MODULE_ID = M.MODULE_ID AND U.USER_ID = D.USER_ID AND (DOC_DATE >= '2019-04-01' OR (DOC_DATE = '0000-00-00' AND D.CHANGED_DATE >= '2019-04-01')) " + userName + moduleName + ") AS AA GROUP BY USER_ID,USER_NAME,MODULE_ID,MODULE_DESC";
            }
            if (cmbType.getSelectedItem().toString().startsWith("M")) {
                qryType = "SELECT MODULE_ID,UPPER(MODULE_DESC) AS MODULE_NAME,USER_ID,UPPER(CONCAT(USER_NAME,' (',COUNT(*),')')) AS USER_NAME FROM (SELECT D.MODULE_ID,MODULE_DESC,DOC_NO,DOC_DATE,D.USER_ID,USER_NAME,RECEIVED_DATE,D.REMARKS AS RUN_DATE FROM SDMLATTPAY.D_COM_DOC_DATA D,DINESHMILLS.D_COM_MODULES M,DINESHMILLS.D_COM_USER_MASTER U WHERE STATUS ='W'  AND D.MODULE_ID NOT IN (849) AND D.MODULE_ID = M.MODULE_ID AND U.USER_ID = D.USER_ID AND (DOC_DATE >= '2019-04-01' OR (DOC_DATE = '0000-00-00' AND D.CHANGED_DATE >= '2019-04-01')) " + userName + moduleName + ") AS AA GROUP BY MODULE_ID,MODULE_DESC,USER_ID,USER_NAME";
            }
            if (cmbType.getSelectedItem().toString().startsWith("D")) {
                qryType = "SELECT D.MODULE_ID,MODULE_DESC,DOC_NO,DOC_DATE,D.USER_ID,USER_NAME,RECEIVED_DATE,D.REMARKS FROM SDMLATTPAY.D_COM_DOC_DATA D,DINESHMILLS.D_COM_MODULES M,DINESHMILLS.D_COM_USER_MASTER U WHERE STATUS ='W'  AND D.MODULE_ID NOT IN (849) AND D.MODULE_ID = M.MODULE_ID AND U.USER_ID = D.USER_ID AND (DOC_DATE >= '2019-04-01' OR (DOC_DATE = '0000-00-00' AND D.CHANGED_DATE >= '2019-04-01')) " + userName + moduleName + " ";
                orderBy = " ORDER BY MODULE_ID,RECEIVED_DATE DESC ";
            }

            int Orderby = cmbPLOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                orderBy = " ";
            }
            if (Orderby == 2) {
                orderBy = " ORDER BY MODULE_ID ";
            }
            if (Orderby == 3) {
                orderBy = " ORDER BY USER_NAME,MODULE_ID ";
            }

            cmbPLOrderByModel = new EITLComboModel();
            cmbPLOrderBy.removeAllItems();
            cmbPLOrderBy.setModel(cmbPLOrderByModel);
            ComboData aData = new ComboData();

            aData.Code = 1;
            aData.Text = "Select Order";
            cmbPLOrderByModel.addElement(aData);

            aData.Code = 2;
            aData.Text = "Module ID";
            cmbPLOrderByModel.addElement(aData);

            aData.Code = 3;
            aData.Text = "User Name";
            cmbPLOrderByModel.addElement(aData);

            String strSQL = "";
            //strSQL = "SELECT D.MODULE_ID,MODULE_DESC,DOC_NO,DOC_DATE,D.USER_ID,USER_NAME,RECEIVED_DATE,D.REMARKS,NOW() AS RUN_DATE FROM PRODUCTION.FELT_PROD_DOC_DATA D,DINESHMILLS.D_COM_MODULES M,DINESHMILLS.D_COM_USER_MASTER U WHERE STATUS ='W'  AND D.MODULE_ID = M.MODULE_ID AND U.USER_ID = D.USER_ID "+cndtn+orderBy;
            strSQL = qryType + " " + cndtn + " " + orderBy;

            System.out.println("Query..." + strSQL);

            if (cmbType.getSelectedItem().toString().startsWith("U")) {
                ListUser(strSQL);
            }
            if (cmbType.getSelectedItem().toString().startsWith("M")) {
                ListModule(strSQL);
            }
            if (cmbType.getSelectedItem().toString().startsWith("D")) {
                ListDetail(strSQL);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

    }

    private boolean GenerateUserCombo() {
        int i = 1;
        try {

            cmbUserListModel = new EITLComboModel();
            cmbUserList.removeAllItems();
            cmbUserList.setModel(cmbUserListModel);
            ComboData objData = new ComboData();

            objData.Code = 0;
            objData.Text = "Select User";
            cmbUserListModel.addElement(objData);

            ResultSet rs = data.getResult("SELECT DISTINCT USER_NAME FROM SDMLATTPAY.D_COM_DOC_DATA D,DINESHMILLS.D_COM_MODULES M,DINESHMILLS.D_COM_USER_MASTER U WHERE STATUS ='W'  AND D.MODULE_ID = M.MODULE_ID AND U.USER_ID = D.USER_ID AND (DOC_DATE >= '2019-04-01' OR (DOC_DATE = '0000-00-00' AND D.CHANGED_DATE >= '2019-04-01'))");
            rs.first();

            while (!rs.isAfterLast()) {
                objData.Code = i;
                objData.Text = rs.getString("USER_NAME");
                cmbUserListModel.addElement(objData);
                i++;
                rs.next();
            }
            if (i > 0) {
                return true;
            } else {
                return false;
            }

        } catch (Exception e) {

        }
        return false;
    }

    private boolean GenerateModuleCombo() {
        int i = 1;
        try {

            cmbModuleListModel = new EITLComboModel();
            cmbModuleList.removeAllItems();
            cmbModuleList.setModel(cmbModuleListModel);
            ComboData objData = new ComboData();

            objData.Code = 0;
            objData.Text = "Select Module";
            cmbModuleListModel.addElement(objData);

            ResultSet rs = data.getResult("SELECT DISTINCT MODULE_DESC FROM SDMLATTPAY.D_COM_DOC_DATA D,DINESHMILLS.D_COM_MODULES M,DINESHMILLS.D_COM_USER_MASTER U WHERE STATUS ='W'  AND D.MODULE_ID = M.MODULE_ID AND U.USER_ID = D.USER_ID AND (DOC_DATE >= '2019-04-01' OR (DOC_DATE = '0000-00-00' AND D.CHANGED_DATE >= '2019-04-01')) ");
            rs.first();

            while (!rs.isAfterLast()) {
                objData.Code = i;
                objData.Text = rs.getString("MODULE_DESC");
                cmbModuleListModel.addElement(objData);
                i++;
                rs.next();
            }
            if (i > 0) {
                return true;
            } else {
                return false;
            }

        } catch (Exception e) {

        }
        return false;
    }

    private void ListDetailGrid() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);
        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Module ID");
        DataModel.addColumn("Module Name");
        DataModel.addColumn("Doc No");
        DataModel.addColumn("Doc Date");
        DataModel.addColumn("User ID");
        DataModel.addColumn("User Name");
        DataModel.addColumn("Received Date");
        DataModel.addColumn("Remark");

        DataModel.TableReadOnly(true);

        Table.getColumnModel().getColumn(0).setMinWidth(40);
        Table.getColumnModel().getColumn(1).setMinWidth(40);
        Table.getColumnModel().getColumn(2).setMinWidth(250);
        Table.getColumnModel().getColumn(3).setMinWidth(80);
        Table.getColumnModel().getColumn(4).setMinWidth(80);
        Table.getColumnModel().getColumn(5).setMinWidth(40);
        Table.getColumnModel().getColumn(6).setMinWidth(120);
        Table.getColumnModel().getColumn(7).setMinWidth(80);
        Table.getColumnModel().getColumn(8).setMinWidth(120);

    }

    private void ListUserGrid() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);
        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("User ID");
        DataModel.addColumn("User Name");
        DataModel.addColumn("Module ID");
        DataModel.addColumn("Module Name");

        DataModel.TableReadOnly(true);

        Table.getColumnModel().getColumn(0).setMinWidth(40);
        Table.getColumnModel().getColumn(1).setMinWidth(40);
        Table.getColumnModel().getColumn(2).setMinWidth(200);
        Table.getColumnModel().getColumn(3).setMinWidth(40);
        Table.getColumnModel().getColumn(4).setMinWidth(350);

    }

    private void ListModuleGrid() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);
        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Module ID");
        DataModel.addColumn("Module Name");
        DataModel.addColumn("User ID");
        DataModel.addColumn("User Name");

        DataModel.TableReadOnly(true);

        Table.getColumnModel().getColumn(0).setMinWidth(40);
        Table.getColumnModel().getColumn(1).setMinWidth(40);
        Table.getColumnModel().getColumn(2).setMinWidth(350);
        Table.getColumnModel().getColumn(3).setMinWidth(40);
        Table.getColumnModel().getColumn(4).setMinWidth(200);

    }

    private void ListDetail(String strSQL) {
        ListDetailGrid();
        try {
            ResultSet rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[10];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("MODULE_ID");
                    rowData[2] = rsTmp.getString("MODULE_DESC");
                    rowData[3] = rsTmp.getString("DOC_NO");
                    rowData[4] = EITLERPGLOBAL.formatDate(rsTmp.getString("DOC_DATE"));
                    rowData[5] = rsTmp.getString("USER_ID");
                    rowData[6] = rsTmp.getString("USER_NAME");
                    rowData[7] = EITLERPGLOBAL.formatDate(rsTmp.getString("RECEIVED_DATE"));
                    rowData[8] = rsTmp.getString("REMARKS");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            } else {
                //JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void ListUser(String strSQL) {
        ListUserGrid();
        try {
            ResultSet rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[5];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("USER_ID");
                    rowData[2] = rsTmp.getString("USER_NAME");
                    rowData[3] = rsTmp.getString("MODULE_ID");
                    rowData[4] = rsTmp.getString("MODULE_NAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            } else {
                //JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void ListModule(String strSQL) {
        ListModuleGrid();
        try {
            ResultSet rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[5];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("MODULE_ID");
                    rowData[2] = rsTmp.getString("MODULE_NAME");
                    rowData[3] = rsTmp.getString("USER_ID");
                    rowData[4] = rsTmp.getString("USER_NAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            } else {
                //JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateOrderByCombo() {

        cmbOrderByModel = new EITLComboModel();
        cmbOrderBy.removeAllItems();
        cmbOrderBy.setModel(cmbOrderByModel);
        ComboData aData = new ComboData();

        aData.Code = 1;
        aData.Text = "Select Order";
        cmbOrderByModel.addElement(aData);

        aData.Code = 2;
        aData.Text = "Employee No Wise";
        cmbOrderByModel.addElement(aData);

        aData.Code = 3;
        aData.Text = "Dept. Emp Wise";
        cmbOrderByModel.addElement(aData);
    }

    private void GenerateCobolSummary() {
        String cndtn = "";
        String cblCndtn = "";
        String grp_cndtn = "";
        String orderBy = "";
        try {
            FormatGridMonthlySummary(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND MS_EMPID= '" + txtEmpNo.getText().trim() + "'";
                cblCndtn += " AND CBL_EMPCODE= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
            }
            if (!cmbShift.getSelectedItem().equals("Select Shift")) {
                grp_cndtn += " AND EMP_SHIFT_ID= " + modelShift.getCode(cmbShift.getSelectedIndex()) + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                grp_cndtn += " AND EMP_CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
            }
            if (!cmbMonth.getSelectedItem().equals("Select")) {
                cndtn += " AND MS_MM= " + cmbMonth.getSelectedIndex() + " ";
                cblCndtn += " AND CBL_MM= " + cmbMonth.getSelectedIndex() + " ";
            }
            if (!txtYear.getText().trim().equals("")) {
                cndtn += " AND MS_YYYY= '" + txtYear.getText().trim() + "'";
                cblCndtn += " AND CBL_YEAR= '" + txtYear.getText().trim() + "'";
            }

            int Orderby = cmbOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                orderBy = " ORDER BY MS_EMPID,MS_YYYY,MS_MM ";
            }
            if (Orderby == 2) {
                orderBy = " ORDER BY MS_EMPID,MS_YYYY,MS_MM ";
            }
            if (Orderby == 3) {
                orderBy = " ORDER BY DPTNAME,MS_EMPID,MS_YYYY,MS_MM ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( "
                    + "SELECT MS_EMPID, MS_MM, MS_YYYY, TOTAL_MONTH_DAYS, PAID_DAYS, PRESENT_DAYS, LC_DAYS, LWP_DAYS, "
                    + "PL, CL, SL, OD, LOFF, EOFF, ESIC, WO, P_GP, O_GP, ABST, CO, PLE, CLE, SLE, TPHD, PHDL, HL, DA_DAYS, WOFF, "
                    + "NPH, NWOF, COFFE, NPL, MS_PETROL_LTRS, MS_CATEGORY, MS_MAIN_CATEGORY, MS_PRESENT_WITHOUT_LC_DAYS, "
                    + "MS_CREDIT_DAYS, MS_PREV_CREDIT_DAYS, MS_PH, MS_STAFF_WOFF, MS_WORKER_WOFF, MS_COMPANY_WOFF "
                    + "FROM SDMLATTPAY.ATT_MTH_SUMMARY WHERE 1=1 " + cndtn + " "
                    + "UNION ALL "
                    + "SELECT CBL_EMPCODE, CBL_MM, CBL_YEAR, CALENDER_DAYS, PAID_DAYS, PRESENT_DAYS, '' AS LC_DAYS, LWP, PL, CL, SL, "
                    + "'' AS OD, LOFF, EXTRA_OFF, '' AS ESIC, WO_DAYS, '' AS P_GP, '' AS O_GP, '' AS ABST, '' AS CO, '' AS PLE, "
                    + "'' AS CLE, '' AS SLE, '' AS TPHD, '' AS PHDL, '' AS HL, '' AS DA_DAYS, WOFF_DAYS, '' AS NPH, '' AS NWOF, "
                    + "'' AS COFFE, '' AS NPL, '' AS MS_PETROL_LTRS, '' AS MS_CATEGORY, '' AS MS_MAIN_CATEGORY, "
                    + "'' AS MS_PRESENT_WITHOUT_LC_DAYS, '' AS MS_CREDIT_DAYS, '' AS MS_PREV_CREDIT_DAYS, PH_DAYS, '' AS MS_STAFF_WOFF, "
                    + "'' AS MS_WORKER_WOFF, '' AS MS_COMPANY_WOFF "
                    + "FROM SDMLATTPAY.ATT_MTH_SUMMARY_COBOL WHERE 1=1 " + cblCndtn + " ) AS MAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON MAS.MS_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
                    + "ON SFT.SHIFT_ID=EMP.EMP_SHIFT_ID WHERE 1=1 " + grp_cndtn + " "
                    //                    + "ORDER BY MS_EMPID";
                    + orderBy + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("MS_EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("MS_MM");
                    rowData[5] = rsTmp.getString("MS_YYYY");
                    rowData[6] = rsTmp.getString("TOTAL_MONTH_DAYS");
                    rowData[7] = rsTmp.getString("PAID_DAYS");
                    rowData[8] = rsTmp.getString("PRESENT_DAYS");
                    rowData[9] = rsTmp.getString("LC_DAYS");
                    rowData[10] = rsTmp.getString("LWP_DAYS");
                    rowData[11] = rsTmp.getString("PL");
                    rowData[12] = rsTmp.getString("CL");
                    rowData[13] = rsTmp.getString("SL");
                    rowData[14] = rsTmp.getString("OD");
                    rowData[15] = rsTmp.getString("LOFF");
                    rowData[16] = rsTmp.getString("EOFF");
                    rowData[17] = rsTmp.getString("ESIC");
                    rowData[18] = rsTmp.getString("WO");
                    rowData[19] = rsTmp.getString("WOFF");
//                    rowData[20] = rsTmp.getString("NPH"); on 09112019
                    rowData[20] = rsTmp.getString("HL");
                    rowData[21] = rsTmp.getString("NWOF");
                    rowData[22] = rsTmp.getString("COFFE");
                    rowData[23] = rsTmp.getString("NPL");
                    rowData[24] = rsTmp.getString("P_GP");
                    rowData[25] = rsTmp.getString("O_GP");
                    rowData[26] = rsTmp.getString("ABST");
                    rowData[27] = rsTmp.getString("SECNAME");
                    rowData[28] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    public void FindEmpDailyAtt(String pEmp, String pMonth, String pYear) {
        TabList.setSelectedIndex(TabList.indexOfTab("Daily Attendance Summary"));
        txtEmpNo.setText(pEmp);
        txtEmpNoFocusLost(null);
        cmbMonth.setSelectedIndex(Integer.parseInt(pMonth));
        txtYear.setText(pYear);
        btnDailyAttViewActionPerformed(null);
        Table.requestFocus();
    }
}
