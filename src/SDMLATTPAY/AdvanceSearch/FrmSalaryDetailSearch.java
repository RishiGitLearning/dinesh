/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SDMLATTPAY.AdvanceSearch;

import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.JTextFieldHint;
import EITLERP.ReportRegister;
import EITLERP.clsExcel_Exporter;
import EITLERP.data;
import SDMLATTPAY.Employee.clsMaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Dharmendra
 */
public class FrmSalaryDetailSearch extends javax.swing.JApplet {

    /**
     * Initializes the applet FrmAdvanceSearch_1_1
     */
    private clsExcel_Exporter exp = new clsExcel_Exporter();

    private EITLTableModel DataModel = new EITLTableModel();

    private EITLComboModel modelDept = new EITLComboModel();
    private EITLComboModel modelShift = new EITLComboModel();
    private EITLComboModel modelMainCategory = new EITLComboModel();
    private EITLComboModel modelCategory = new EITLComboModel();

    private EITLComboModel cmbUserListModel = new EITLComboModel();
    private EITLComboModel cmbModuleListModel = new EITLComboModel();
    private EITLComboModel cmbPLOrderByModel = new EITLComboModel();
    private EITLComboModel cmbOrderByModel = new EITLComboModel();
    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();

    @Override
    public void init() {
        /* Set the Nimbus look and feel */

        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        //setSize(1000, 740);
        initComponents();
        /* Create and display the applet */
        Table.setAutoCreateRowSorter(true);
        jLabel1.setForeground(Color.WHITE);

        cmbMonth.setSelectedIndex(EITLERPGLOBAL.getCurrentMonth());
        txtYear.setText(EITLERPGLOBAL.getCurrentYear() + "");

        GenerateDeptCombo();
        GenerateMainCategoryCombo();
        GenerateCategoryCombo();
        GenerateOrderByCombo();

        FormatGridSalarySummary();

        System.out.println("Dept : " + EITLERPGLOBAL.gUserDeptID);
//        if (EITLERPGLOBAL.gUserID != 98 && EITLERPGLOBAL.gUserID != 243 && EITLERPGLOBAL.gUserDeptID != 28 && EITLERPGLOBAL.gUserDeptID != 76 && EITLERPGLOBAL.gUserDeptID != 4 && EITLERPGLOBAL.gUserDeptID != 16) {
//            TabList.remove(MonthlySummary);
//        }

    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ExporttoExcelFileChooser = new javax.swing.JFileChooser();
        file1 = new javax.swing.JFileChooser();
        CoffRokadiBtnGrp = new javax.swing.ButtonGroup();
        LCBtnGrp = new javax.swing.ButtonGroup();
        GatePassBtnGrp = new javax.swing.ButtonGroup();
        RokdiDataGrp = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        lblEmpNo = new javax.swing.JLabel();
        txtEmpNo = new javax.swing.JTextField();
        txtEmpName = new javax.swing.JTextField();
        lblDeptCmb = new javax.swing.JLabel();
        cmbDept = new javax.swing.JComboBox();
        jLabel37 = new javax.swing.JLabel();
        cmbMainCategory = new javax.swing.JComboBox();
        lblMonthCmb = new javax.swing.JLabel();
        cmbMonth = new javax.swing.JComboBox();
        lblYearCmb = new javax.swing.JLabel();
        txtYear = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        cmbCategory = new javax.swing.JComboBox();
        jLabel89 = new javax.swing.JLabel();
        cmbOrderBy = new javax.swing.JComboBox();
        btnClear = new javax.swing.JButton();
        TabList = new javax.swing.JTabbedPane();
        MonthlySummary = new javax.swing.JPanel();
        btnSalarySummaryView = new javax.swing.JButton();
        jScrollPane25 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        btnEmpMstETE = new javax.swing.JButton();

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setText("Salary Detail - Search");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);

        lblEmpNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEmpNo.setText("Employee No : ");

        txtEmpNo.setToolTipText("Press F1 key for search Employee No");
        txtEmpNo = new JTextFieldHint(new JTextField(),"Search by F1");
        txtEmpNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmpNoFocusLost(evt);
            }
        });
        txtEmpNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEmpNoKeyPressed(evt);
            }
        });

        txtEmpName.setEditable(false);
        txtEmpName.setDisabledTextColor(java.awt.Color.black);
        txtEmpName.setEnabled(false);

        lblDeptCmb.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblDeptCmb.setText("Department : ");

        cmbDept.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbDept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDeptActionPerformed(evt);
            }
        });

        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel37.setText("Main Category : ");

        cmbMainCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblMonthCmb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMonthCmb.setText("Month : ");

        cmbMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        lblYearCmb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYearCmb.setText("Year : ");

        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel27.setText("Category : ");

        cmbCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel89.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel89.setText("Order By : ");

        btnClear.setText("Clear All");
        btnClear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnClear.setMargin(new java.awt.Insets(2, 7, 2, 7));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        TabList.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabListStateChanged(evt);
            }
        });

        MonthlySummary.setLayout(null);

        btnSalarySummaryView.setText("View");
        btnSalarySummaryView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalarySummaryViewActionPerformed(evt);
            }
        });
        MonthlySummary.add(btnSalarySummaryView);
        btnSalarySummaryView.setBounds(10, 10, 110, 30);

        TabList.addTab("Salary Detail", MonthlySummary);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane25.setViewportView(Table);

        btnEmpMstETE.setLabel("Export to Excel");
        btnEmpMstETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpMstETEActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblEmpNo, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(txtEmpNo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtEmpName, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblDeptCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbDept, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(lblMonthCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblYearCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 587, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cmbMainCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel89, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbOrderBy, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(btnEmpMstETE, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(TabList, javax.swing.GroupLayout.DEFAULT_SIZE, 1282, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jScrollPane25, javax.swing.GroupLayout.DEFAULT_SIZE, 1282, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmpNo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmpNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmpName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDeptCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbDept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMonthCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblYearCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel89, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbOrderBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbMainCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 415, Short.MAX_VALUE)
                .addComponent(btnEmpMstETE, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(109, Short.MAX_VALUE)
                    .addComponent(TabList, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(388, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(195, Short.MAX_VALUE)
                    .addComponent(jScrollPane25, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(54, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtEmpNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmpNoFocusLost
        // TODO add your handling code here:
        if (!txtEmpNo.getText().trim().equals("") && data.IsRecordExist("SELECT * FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpNo.getText().trim() + "' AND APPROVED=1 AND CANCELED=0")) {
            txtEmpName.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpNo.getText() + "'"));
        } else {
            if (!txtEmpNo.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Employee No doesn't exist/under approval.");
            }
            txtEmpNo.setText("");
            txtEmpName.setText("");
        }
    }//GEN-LAST:event_txtEmpNoFocusLost

    private void txtEmpNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpNoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            ATTPAYLOV aList = new ATTPAYLOV();
            aList.SQL = "SELECT PAY_EMP_NO,EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE APPROVED=1 AND CANCELED=0";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtEmpNo.setText(aList.ReturnVal);
                txtEmpName.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpNo.getText() + "'"));
            }
        }
    }//GEN-LAST:event_txtEmpNoKeyPressed

    private void cmbDeptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDeptActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbDeptActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtEmpName.setText("");
        txtEmpNo.setText("");
        txtYear.setText("");
        cmbMonth.setSelectedIndex(0);
        cmbDept.setSelectedIndex(0);
        cmbMainCategory.setSelectedIndex(0);
        cmbCategory.setSelectedIndex(0);

        cmbMonth.setSelectedIndex(EITLERPGLOBAL.getCurrentMonth());
        txtYear.setText(EITLERPGLOBAL.getCurrentYear() + "");
    }//GEN-LAST:event_btnClearActionPerformed

    private void TabListStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabListStateChanged
        // TODO add your handling code here:
        if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Salary Detail")) {

            FormatGridSalarySummary();

            txtEmpNo.setEnabled(true);
            txtYear.setEnabled(true);
            cmbMonth.setEnabled(true);
            cmbDept.setEnabled(true);
            cmbMainCategory.setEnabled(true);
            cmbCategory.setEnabled(true);
            cmbOrderBy.setEnabled(true);

//            btnCobolSummaryViewActionPerformed(null);
        } else {
            txtEmpNo.setEnabled(false);
            txtYear.setEnabled(false);
            cmbMonth.setEnabled(false);
            cmbDept.setEnabled(false);
            cmbMainCategory.setEnabled(false);
            cmbCategory.setEnabled(false);
            cmbOrderBy.setEnabled(false);
        }
    }//GEN-LAST:event_TabListStateChanged

    private void btnEmpMstETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpMstETEActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnEmpMstETEActionPerformed

    private void btnSalarySummaryViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalarySummaryViewActionPerformed
        // TODO add your handling code here:
        if (txtEmpNo.getText().toString().trim().equals("")) {
            if (!MonthYearValidate()) {
                return;
            } else {
                GenerateSalarySummary();
            }
        } else {
            GenerateSalarySummary();
        }
    }//GEN-LAST:event_btnSalarySummaryViewActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup CoffRokadiBtnGrp;
    private javax.swing.JFileChooser ExporttoExcelFileChooser;
    private javax.swing.ButtonGroup GatePassBtnGrp;
    private javax.swing.ButtonGroup LCBtnGrp;
    private javax.swing.JPanel MonthlySummary;
    private javax.swing.ButtonGroup RokdiDataGrp;
    private javax.swing.JTabbedPane TabList;
    private javax.swing.JTable Table;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnEmpMstETE;
    private javax.swing.JButton btnSalarySummaryView;
    private javax.swing.JComboBox cmbCategory;
    private javax.swing.JComboBox cmbDept;
    private javax.swing.JComboBox cmbMainCategory;
    private javax.swing.JComboBox cmbMonth;
    private javax.swing.JComboBox cmbOrderBy;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JLabel lblDeptCmb;
    private javax.swing.JLabel lblEmpNo;
    private javax.swing.JLabel lblMonthCmb;
    private javax.swing.JLabel lblYearCmb;
    private javax.swing.JTextField txtEmpName;
    private javax.swing.JTextField txtEmpNo;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables

    private void GenerateDeptCombo() {

        HashMap List = new HashMap();
        clsMaster ObjDept;

        cmbDept.setModel(modelDept);
        modelDept.removeAllElements();  //Clearing previous contents

        ComboData aData = new ComboData();
        aData.Text = "Select Dept";
        aData.Code = 0;
        modelDept.addElement(aData);

        List = clsMaster.getDepartmentList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjDept = (clsMaster) List.get(Integer.toString(i));
//            ComboData 
            aData = new ComboData();
            aData.Text = (String) ObjDept.getAttribute("Name").getObj();
            aData.Code = (long) ObjDept.getAttribute("DPTID").getVal();
            modelDept.addElement(aData);
        }
    }

    private void GenerateMainCategoryCombo() {

        HashMap List = new HashMap();
        clsMaster ObjMainCategory;

        cmbMainCategory.setModel(modelMainCategory);
        modelMainCategory.removeAllElements();  //Clearing previous contents

        ComboData aData = new ComboData();
        aData.Text = "Select Main Category";
        aData.Code = 0;
        modelMainCategory.addElement(aData);

        List = clsMaster.getMainCategoryList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjMainCategory = (clsMaster) List.get(Integer.toString(i));
//            ComboData 
            aData = new ComboData();
            aData.Text = (String) ObjMainCategory.getAttribute("Name").getObj();
            aData.Code = (long) ObjMainCategory.getAttribute("SECID").getVal();
            modelMainCategory.addElement(aData);
        }
    }

    private void GenerateCategoryCombo() {

        HashMap List = new HashMap();
        clsMaster ObjCategory;

        cmbCategory.setModel(modelCategory);
        modelCategory.removeAllElements();  //Clearing previous contents

        ComboData aData = new ComboData();
        aData.Text = "Select Category";
        aData.Code = 0;
        modelCategory.addElement(aData);

        List = clsMaster.getCategoryList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjCategory = (clsMaster) List.get(Integer.toString(i));
//            ComboData 
            aData = new ComboData();
            aData.Text = (String) ObjCategory.getAttribute("Name").getObj();
            aData.Code = (long) ObjCategory.getAttribute("CTGID").getVal();
            modelCategory.addElement(aData);
        }
    }

    private void GenerateOrderByCombo() {

        cmbOrderByModel = new EITLComboModel();
        cmbOrderBy.removeAllItems();
        cmbOrderBy.setModel(cmbOrderByModel);
        ComboData aData = new ComboData();

        aData.Code = 1;
        aData.Text = "Select Order";
        cmbOrderByModel.addElement(aData);

        aData.Code = 2;
        aData.Text = "Employee No Wise";
        cmbOrderByModel.addElement(aData);

        aData.Code = 3;
        aData.Text = "Dept. Emp Wise";
        cmbOrderByModel.addElement(aData);
    }

    private boolean MonthYearValidate() {
        if (cmbMonth.getSelectedItem().equals("Select")) {
            JOptionPane.showMessageDialog(FrmSalaryDetailSearch.this, "Please Select Month");
            return false;
        }
        if (txtYear.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(FrmSalaryDetailSearch.this, "Please Enter Year");
            txtYear.setText("");
            return false;
        }
        if (txtYear.getText().trim().length() != 4) {
            JOptionPane.showMessageDialog(FrmSalaryDetailSearch.this, "Please Enter Valid Year");
            txtYear.setText("");
            return false;
        }
        if (!EITLERPGLOBAL.IsNumber(txtYear.getText().trim())) {
            JOptionPane.showMessageDialog(FrmSalaryDetailSearch.this, "Please Enter Valid Year");
            txtYear.setText("");
            return false;
        }

        return true;
    }

    private void FormatGridSalarySummary() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Month");
        DataModel.addColumn("Year");
        DataModel.addColumn("Basic");
        DataModel.addColumn("Retainer Fee");
        DataModel.addColumn("DA");
        DataModel.addColumn("HRA");
        DataModel.addColumn("Conv. Alw");
        DataModel.addColumn("Elect. Alw");
        DataModel.addColumn("Pers. Pay");
        DataModel.addColumn("Maga. Alw");
        DataModel.addColumn("Perf. Alw");
        DataModel.addColumn("Other Alw");
        DataModel.addColumn("Award HRA");
        DataModel.addColumn("DA Diff");
        DataModel.addColumn("Med/Edu Alw");
        DataModel.addColumn("Adhoc Pay");
        DataModel.addColumn("Wash Alw");
        DataModel.addColumn("Wash Month");
        DataModel.addColumn("Atnd. Alw");
        DataModel.addColumn("Basic Adjus");
        DataModel.addColumn("PH Amount");
        DataModel.addColumn("Arrears Medical");
        DataModel.addColumn("Arrears Amount");
        DataModel.addColumn("A HRA Diff");
        DataModel.addColumn("Furnishing");
        DataModel.addColumn("Pre Furnish");
        DataModel.addColumn("Gross Earnings ");
        DataModel.addColumn("PF");
        DataModel.addColumn("ESIC");
        DataModel.addColumn("Prof. Tax");
        DataModel.addColumn("GLWF");
        DataModel.addColumn("Oth. Deduc");
        DataModel.addColumn("Revenue");
        DataModel.addColumn("Soc. Pay");
        DataModel.addColumn("HDFC Pay");
        DataModel.addColumn("MLWF");
        DataModel.addColumn("LIP Amt");
        DataModel.addColumn("TDS");
        DataModel.addColumn("Covid19 PA");
        DataModel.addColumn("Rent Deduc");
        DataModel.addColumn("Union Fee");
        DataModel.addColumn("Union Levy");
        DataModel.addColumn("Soc. Deduction");
        DataModel.addColumn("Gross Deductions");
        DataModel.addColumn("Net Total");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateSalarySummary() {
        String cndtn = "";
        String cblCndtn = "";
        String grp_cndtn = "";
        String orderBy = "";
        try {
            FormatGridSalarySummary(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtEmpNo.getText().trim().equals("")) {
                cndtn += " AND PAY_EMPCODE= '" + txtEmpNo.getText().trim() + "'";
                cblCndtn += " AND PAY_EMPCODE= '" + txtEmpNo.getText().trim() + "'";
            }
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + modelMainCategory.getCode(cmbMainCategory.getSelectedIndex()) + " ";
            }
            if (!cmbCategory.getSelectedItem().equals("Select Category")) {
                grp_cndtn += " AND EMP_CATEGORY= " + modelCategory.getCode(cmbCategory.getSelectedIndex()) + " ";
            }
            if (!cmbMonth.getSelectedItem().equals("Select")) {
                cndtn += " AND PAY_MONTH= " + cmbMonth.getSelectedIndex() + " ";
                cblCndtn += " AND PAY_MONTH= " + cmbMonth.getSelectedIndex() + " ";
            }
            if (!txtYear.getText().trim().equals("")) {
                cndtn += " AND PAY_YEAR= '" + txtYear.getText().trim() + "'";
                cblCndtn += " AND PAY_YEAR= '" + txtYear.getText().trim() + "'";
            }

            int Orderby = cmbOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                orderBy = " ORDER BY PAY_EMPCODE,PAY_YEAR,PAY_MONTH ";
            }
            if (Orderby == 2) {
                orderBy = " ORDER BY PAY_EMPCODE,PAY_YEAR,PAY_MONTH ";
            }
            if (Orderby == 3) {
                orderBy = " ORDER BY DPTNAME,PAY_EMPCODE,PAY_YEAR,PAY_MONTH ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( "
                    + "SELECT "
                    + "PAY_EMPCODE, PAY_MONTH, PAY_YEAR, "
                    + "BASIC,RETAINER_FEE,DA,HRA,CONVEYANCE,ELECTRICITY,PERSONAL_PAY,MAGAZINE_ALW,PERFORMANCE_ALW,OTHER_ALW,AWARD_HRA,DA_DIFF,MED_EDU_HOT_AMT,ADHOC_PAY,WASH_ALW,WASH_MTH,ATD_ALW,SALARY_ADJUSTMENT,PAID_H,ARREAR_MEDICAL,ARREAR_AMOUNT,A_HRA_DIFF,FURNISHING,PRE_FURNISH, "
                    + "TOTAL_EARNING, "
                    + "PF_AMOUNT,ESIC_AMOUNT,PROF_TAX_AMOUNT,GLWF_AMOUNT,OTHER_DED_AMOUNT,REVENUE_AMOUNT,SOCIAL_PAY_AMOUNT,HDFC_PAY_AMOUNT,MLWF_AMOUNT,LIP_AMOUNT,TDS,COVID_19_PAY_CUT,RENT_DEDUCTION,UNION_FEE,UNION_LEVY,SOCIETY_DED, "
                    + "TOTAL_DEDUCTION, "
                    + "NET_AMOUNT "
                    + "FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP "
                    + "WHERE PAY_YEAR>2020 " + cndtn + " "
                    + "UNION ALL "
                    + "SELECT "
                    + "PAY_EMPCODE, PAY_MONTH, PAY_YEAR, "
                    + "BASIC,RETAINER_FEE,DA,HRA,CONVEYANCE,ELECTRICITY,PERSONAL_PAY,MAGAZINE_ALW,PERFORMANCE_ALW,OTHER_ALW,AWARD_HRA,DA_DIFF,MED_EDU_HOT_AMT,ADHOC_PAY,WASH_ALW,WASH_MTH,ATD_ALW,SALARY_ADJUSTMENT,PAID_H,ARREAR_MEDICAL,ARREAR_AMOUNT,A_HRA_DIFF,FURNISHING,PRE_FURNISH, "
                    + "TOTAL_EARNING, "
                    + "PF_AMOUNT,ESIC_AMOUNT,PROF_TAX_AMOUNT,GLWF_AMOUNT,OTHER_DED_AMOUNT,REVENUE_AMOUNT,SOCIAL_PAY_AMOUNT,HDFC_PAY_AMOUNT,MLWF_AMOUNT,LIP_AMOUNT,TDS,COVID_19_PAY_CUT,RENT_DEDUCTION,UNION_FEE,UNION_LEVY,SOCIETY_DED, "
                    + "TOTAL_DEDUCTION, "
                    + "NET_AMOUNT "
                    + "FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP "
                    + "WHERE PAY_YEAR=2020 AND PAY_MONTH>=3 " + cndtn + " "
                    + "UNION ALL "
                    + "SELECT "
                    + "PAY_EMPCODE, PAY_MONTH, PAY_YEAR, "
                    + "BASIC,RETAINER_FEE,DA,HRA,CONVEYANCE,ELECTRICITY,PERSONAL_PAY,MAGAZINE_ALW,PERFORMANCE_ALW,OTHER_ALW,AWARD_HRA,DA_DIFF,MED_EDU_HOT_AMT,ADHOC_PAY,WASH_ALW,WASH_MTH,ATD_ALW,SALARY_ADJUSTMENT,PAID_H,ARREAR_MEDICAL,ARREAR_AMOUNT,A_HRA_DIFF,FURNISHING,PRE_FURNISH, "
                    + "TOTAL_EARNING, "
                    + "PF_AMOUNT,ESIC_AMOUNT,PROF_TAX_AMOUNT,GLWF_AMOUNT,OTHER_DED_AMOUNT,REVENUE_AMOUNT,SOCIAL_PAY_AMOUNT,HDFC_PAY_AMOUNT,MLWF_AMOUNT,LIP_AMOUNT,TDS,COVID_19_PAY_CUT,RENT_DEDUCTION,UNION_FEE,UNION_LEVY,SOCIETY_DED, "
                    + "TOTAL_DEDUCTION, "
                    + "NET_AMOUNT "
                    + "FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_COBOL "
                    + "WHERE PAY_YEAR=2020 AND PAY_MONTH<=2 " + cblCndtn + " "
                    + "UNION ALL "
                    + "SELECT "
                    + "PAY_EMPCODE, PAY_MONTH, PAY_YEAR, "
                    + "BASIC,RETAINER_FEE,DA,HRA,CONVEYANCE,ELECTRICITY,PERSONAL_PAY,MAGAZINE_ALW,PERFORMANCE_ALW,OTHER_ALW,AWARD_HRA,DA_DIFF,MED_EDU_HOT_AMT,ADHOC_PAY,WASH_ALW,WASH_MTH,ATD_ALW,SALARY_ADJUSTMENT,PAID_H,ARREAR_MEDICAL,ARREAR_AMOUNT,A_HRA_DIFF,FURNISHING,PRE_FURNISH, "
                    + "TOTAL_EARNING, "
                    + "PF_AMOUNT,ESIC_AMOUNT,PROF_TAX_AMOUNT,GLWF_AMOUNT,OTHER_DED_AMOUNT,REVENUE_AMOUNT,SOCIAL_PAY_AMOUNT,HDFC_PAY_AMOUNT,MLWF_AMOUNT,LIP_AMOUNT,TDS,COVID_19_PAY_CUT,RENT_DEDUCTION,UNION_FEE,UNION_LEVY,SOCIETY_DED, "
                    + "TOTAL_DEDUCTION, "
                    + "NET_AMOUNT "
                    + "FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_COBOL "
                    + "WHERE PAY_YEAR<2020 " + cblCndtn + " "
                    + ") AS MAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON MAS.PAY_EMPCODE=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
                    + "ON SFT.SHIFT_ID=EMP.EMP_SHIFT_ID WHERE 1=1 " + grp_cndtn + " "
                    //                    + "ORDER BY MS_EMPID";
                    + orderBy + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PAY_EMPCODE");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("PAY_MONTH");
                    rowData[5] = rsTmp.getString("PAY_YEAR");
                    rowData[6] = rsTmp.getString("BASIC");
                    rowData[7] = rsTmp.getString("RETAINER_FEE");
                    rowData[8] = rsTmp.getString("DA");
                    rowData[9] = rsTmp.getString("HRA");
                    rowData[10] = rsTmp.getString("CONVEYANCE");
                    rowData[11] = rsTmp.getString("ELECTRICITY");
                    rowData[12] = rsTmp.getString("PERSONAL_PAY");
                    rowData[13] = rsTmp.getString("MAGAZINE_ALW");
                    rowData[14] = rsTmp.getString("PERFORMANCE_ALW");
                    rowData[15] = rsTmp.getString("OTHER_ALW");
                    rowData[16] = rsTmp.getString("AWARD_HRA");
                    rowData[17] = rsTmp.getString("DA_DIFF");
                    rowData[18] = rsTmp.getString("MED_EDU_HOT_AMT");
                    rowData[19] = rsTmp.getString("ADHOC_PAY");
                    rowData[20] = rsTmp.getString("WASH_ALW");
                    rowData[21] = rsTmp.getString("WASH_MTH");
                    rowData[22] = rsTmp.getString("ATD_ALW");
                    rowData[23] = rsTmp.getString("SALARY_ADJUSTMENT");
                    rowData[24] = rsTmp.getString("PAID_H");
                    rowData[25] = rsTmp.getString("ARREAR_MEDICAL");
                    rowData[26] = rsTmp.getString("ARREAR_AMOUNT");
                    rowData[27] = rsTmp.getString("A_HRA_DIFF");
                    rowData[28] = rsTmp.getString("FURNISHING");                    
                    rowData[29] = rsTmp.getString("PRE_FURNISH");
                    rowData[30] = rsTmp.getString("TOTAL_EARNING");
                    rowData[31] = rsTmp.getString("PF_AMOUNT");
                    rowData[32] = rsTmp.getString("ESIC_AMOUNT");
                    rowData[33] = rsTmp.getString("PROF_TAX_AMOUNT");
                    rowData[34] = rsTmp.getString("GLWF_AMOUNT");
                    rowData[35] = rsTmp.getString("OTHER_DED_AMOUNT");
                    rowData[36] = rsTmp.getString("REVENUE_AMOUNT");
                    rowData[37] = rsTmp.getString("SOCIAL_PAY_AMOUNT");
                    rowData[38] = rsTmp.getString("HDFC_PAY_AMOUNT");
                    rowData[39] = rsTmp.getString("MLWF_AMOUNT");
                    rowData[40] = rsTmp.getString("LIP_AMOUNT");
                    rowData[41] = rsTmp.getString("TDS");
                    rowData[42] = rsTmp.getString("COVID_19_PAY_CUT");
                    rowData[43] = rsTmp.getString("RENT_DEDUCTION");
                    rowData[44] = rsTmp.getString("UNION_FEE");
                    rowData[45] = rsTmp.getString("UNION_LEVY");
                    rowData[46] = rsTmp.getString("SOCIETY_DED");
                    rowData[47] = rsTmp.getString("TOTAL_DEDUCTION");
                    rowData[48] = rsTmp.getString("NET_AMOUNT");                    

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Data Found...", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
}
