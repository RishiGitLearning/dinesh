/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SDMLATTPAY.AdvanceSearch;

import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.Reports.clsExcelExporter;
import EITLERP.Finance.UtilFunctions;
import EITLERP.data;
import TReportWriter.TReportEngine;
import java.awt.Component;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Dharmendra
 */
public class xlsPetrolReport extends javax.swing.JApplet {

    /**
     * Initializes the applet xlsPetrolReport
     */
    public clsExcelExporter exprt = new clsExcelExporter();
    private TReportEngine objEngine = new TReportEngine();
    private EITLTableModel DataModel;
    private EITLComboModel cmbCategoryModel;

    @Override
    public void init() {
        /* Set the Nimbus look and feel */


        /* Create and display the applet */
        initComponents();
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        file1.setVisible(false);
        txtyear.setText(data.getStringValueFromDB("SELECT YEAR(CURRENT_DATE - INTERVAL 1 MONTH) FROM DUAL"));
        cmbmonth.setSelectedIndex(data.getIntValueFromDB("SELECT MONTH(CURRENT_DATE - INTERVAL 1 MONTH) FROM DUAL") - 1);
        GenerateCategory();

    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        cmbcategory = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        txtyear = new javax.swing.JTextField();
        cmbview = new javax.swing.JButton();
        chkemp = new javax.swing.JRadioButton();
        chkpetrol = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbmonth = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        excel = new javax.swing.JButton();
        file1 = new javax.swing.JFileChooser();
        print = new javax.swing.JButton();

        getContentPane().setLayout(null);

        jLabel1.setText("Month");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 52, 71, 30);

        getContentPane().add(cmbcategory);
        cmbcategory.setBounds(130, 100, 130, 30);

        jLabel2.setText("Year");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(270, 60, 51, 30);

        txtyear.setText("2019");
        getContentPane().add(txtyear);
        txtyear.setBounds(330, 60, 88, 39);

        cmbview.setText("View");
        cmbview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbviewActionPerformed(evt);
            }
        });
        getContentPane().add(cmbview);
        cmbview.setBounds(376, 135, 116, 39);

        buttonGroup1.add(chkemp);
        chkemp.setSelected(true);
        chkemp.setText("Employee Code");
        getContentPane().add(chkemp);
        chkemp.setBounds(99, 138, 118, 32);

        buttonGroup1.add(chkpetrol);
        chkpetrol.setText("Petrol Liter[s]");
        getContentPane().add(chkpetrol);
        chkpetrol.setBounds(243, 138, 115, 32);

        jLabel3.setText("Order By");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 138, 71, 32);

        jLabel4.setText("Category");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(10, 93, 59, 36);

        cmbmonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" }));
        getContentPane().add(cmbmonth);
        cmbmonth.setBounds(130, 60, 130, 30);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 192, 1230, 320);

        excel.setText("Excel");
        excel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelActionPerformed(evt);
            }
        });
        getContentPane().add(excel);
        excel.setBounds(620, 135, 118, 36);
        getContentPane().add(file1);
        file1.setBounds(200, 300, 177, 397);

        print.setText("Print");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });
        getContentPane().add(print);
        print.setBounds(500, 135, 118, 36);
    }// </editor-fold>//GEN-END:initComponents

    private void excelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "Petrol");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_excelActionPerformed

    private void cmbviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbviewActionPerformed
        // TODO add your handling code here:
        String sql;
        sql = "SELECT '' AS SR_NO,A.COMPANY_CODE,C.NAME AS CATEGORY,A.EMPLOYEE_CODE,M.EMP_NAME,A.ENTITLE_LITERS,A.ABSENT_DAYS,A.ACTUAL_LITERS,A.VEHICLE_NO "
                + " FROM SDMLATTPAY.PETROL_ALLOWANCE_DETAIL A "
                + " LEFT JOIN SDMLATTPAY.ATTPAY_EMPMST M "
                + " ON A.EMPLOYEE_CODE=M.PAY_EMP_NO "
                + " LEFT JOIN SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER C "
                + " ON M.EMP_MAIN_CATEGORY=SECID "
                + " WHERE A.ACTUAL_LITERS>0 AND A.MONTH='" + cmbmonth.getSelectedItem().toString() + "' AND "
                + " A.YEAR='" + txtyear.getText() + "'";
        if (!cmbcategory.getSelectedItem().toString().equalsIgnoreCase("ALL")) {
            sql = sql + " AND C.NAME='" + cmbcategory.getSelectedItem().toString() + "'";
        }
        if (chkemp.isSelected()) {
            sql = sql + " ORDER BY A.EMPLOYEE_CODE";
        }
        if (chkpetrol.isSelected()) {
            sql = sql + " ORDER BY A.ACTUAL_LITERS DESC ";
        }
        System.out.println("Data Query :" + sql);
        ResultSet rs = data.getResult(sql);
        try {
            rs.first();
            if (rs.getRow() > 0) {
                DataModel = new EITLTableModel();
                Table.removeAll();

                Table.setModel(DataModel);
                Table.setAutoResizeMode(0);
                ResultSetMetaData rsInfo = rs.getMetaData();

                //Format the table from the resultset meta data
                int i = 1;
                DataModel.ClearAllReadOnly();

                for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                    DataModel.addColumn(rsInfo.getColumnName(i));
                    DataModel.SetReadOnly(i);
                }
                int m = 1;
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = Integer.toString(m);
                    for (int k = 1; k < (i - 1); k++) {
                        rowData[k] = rs.getString(k + 1);
                    }
                    DataModel.addRow(rowData);
                    rs.next();
                    m++;
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 100; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
                DataModel.TableReadOnly(true);
            } else {
                for (int i = DataModel.getRowCount() - 1; i >= 0; i--) {
                    DataModel.removeRow(i);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmbviewActionPerformed

    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
        // TODO add your handling code here:

        try {
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData = new TReportWriter.SimpleDataProvider.TTable();

            objReportData.AddColumn("EMPLOYEE_CODE");
            objReportData.AddColumn("NAME");
            objReportData.AddColumn("MONTH");
            objReportData.AddColumn("YEAR");
            objReportData.AddColumn("ENTITLE_LITERS");
            objReportData.AddColumn("ABSENT_DAYS");
            objReportData.AddColumn("ACTUAL_LITERS");
            objReportData.AddColumn("VEHICLE_NO");
            objReportData.AddColumn("CATEGORY");

            TReportWriter.SimpleDataProvider.TRow objOpeningRow = objReportData.newRow();

            objOpeningRow.setValue("EMPLOYEE_CODE", "");
            objOpeningRow.setValue("NAME", "");
            objOpeningRow.setValue("MONTH", "");
            objOpeningRow.setValue("YEAR", "");
            objOpeningRow.setValue("ENTITLE_LITERS", "");
            objOpeningRow.setValue("ABSENT_DAYS", "");
            objOpeningRow.setValue("ACTUAL_LITERS", "");
            objOpeningRow.setValue("VEHICLE_NO", "");
            objOpeningRow.setValue("CATEGORY", "");

            String sql;
            sql = "SELECT '' AS SR_NO,A.COMPANY_CODE,A.MONTH,A.YEAR,C.NAME AS CATEGORY,A.EMPLOYEE_CODE,M.EMP_NAME,A.ENTITLE_LITERS,A.ABSENT_DAYS,A.ACTUAL_LITERS,A.VEHICLE_NO "
                    + " FROM SDMLATTPAY.PETROL_ALLOWANCE_DETAIL A "
                    + " LEFT JOIN SDMLATTPAY.ATTPAY_EMPMST M "
                    + " ON A.EMPLOYEE_CODE=M.PAY_EMP_NO "
                    + " LEFT JOIN SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER C "
                    + " ON M.EMP_MAIN_CATEGORY=SECID "
                    + " WHERE A.ACTUAL_LITERS>0 AND A.MONTH='" + cmbmonth.getSelectedItem().toString() + "' AND "
                    + " A.YEAR='" + txtyear.getText() + "'";
            if (!cmbcategory.getSelectedItem().toString().equalsIgnoreCase("ALL")) {
                sql = sql + " AND C.NAME='" + cmbcategory.getSelectedItem().toString() + "'";
            }
            if (chkemp.isSelected()) {
                sql = sql + " ORDER BY A.EMPLOYEE_CODE";
            }
            if (chkpetrol.isSelected()) {
                sql = sql + " ORDER BY A.ACTUAL_LITERS DESC ";
            }
            System.out.println("Data Query :" + sql);
            System.out.println(sql);

            ResultSet rsTmp = data.getResult(sql);
            rsTmp.first();

            int Counter = 0;

            if (rsTmp.getRow() > 0) {
                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    objRow = objReportData.newRow();

                    objRow.setValue("EMPLOYEE_CODE", UtilFunctions.getString(rsTmp, "EMPLOYEE_CODE", ""));
                    objRow.setValue("NAME", UtilFunctions.getString(rsTmp, "EMP_NAME", ""));
                    objRow.setValue("MONTH", UtilFunctions.getString(rsTmp, "MONTH", ""));
                    objRow.setValue("YEAR", UtilFunctions.getString(rsTmp, "YEAR", ""));
                    objRow.setValue("ENTITLE_LITERS", UtilFunctions.getString(rsTmp, "ENTITLE_LITERS", ""));
                    objRow.setValue("ABSENT_DAYS", UtilFunctions.getString(rsTmp, "ABSENT_DAYS", ""));
                    objRow.setValue("ACTUAL_LITERS", UtilFunctions.getString(rsTmp, "ACTUAL_LITERS", ""));
                    objRow.setValue("VEHICLE_NO", UtilFunctions.getString(rsTmp, "VEHICLE_NO", ""));
                    objRow.setValue("CATEGORY", UtilFunctions.getString(rsTmp, "CATEGORY", ""));
                    objReportData.AddRow(objRow);

                    rsTmp.next();
                }
            }

            int Comp_ID = EITLERPGLOBAL.gCompanyID;

            HashMap Parameters = new HashMap();
            Parameters.put("RUNDATE", EITLERPGLOBAL.getCurrentDate());
            //System.out.println("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptFeltOrder.rpt");
            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/Reports/PETROL.rpt", Parameters, objReportData);

        } catch (Exception e) {
            System.out.println("Error : " + e.getLocalizedMessage());
            e.printStackTrace();
        }

    }//GEN-LAST:event_printActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton chkemp;
    private javax.swing.JRadioButton chkpetrol;
    private javax.swing.JComboBox cmbcategory;
    private javax.swing.JComboBox cmbmonth;
    private javax.swing.JButton cmbview;
    private javax.swing.JButton excel;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton print;
    private javax.swing.JTextField txtyear;
    // End of variables declaration//GEN-END:variables
private void GenerateCategory() {
        try {
            cmbCategoryModel = new EITLComboModel();
            cmbcategory.setModel(cmbCategoryModel);
            cmbcategory.removeAllItems();  //Clearing previous contents
            ResultSet r = data.getResult("SELECT 'ALL' AS NAME FROM DUAL UNION ALL SELECT NAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER");
            r.first();
            while (!r.isAfterLast()) {
                ComboData aData = new ComboData();
                aData.Text = r.getString("NAME");
                cmbCategoryModel.addElement(aData);
                r.next();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
