/*
 * frmChangePassword.java
 *
 * Created on July 3, 2004, 3:36 PM
 */
package SDMLATTPAY.leave;

import SDMLATTPAY.AdvanceSearch.*;
import EITLERP.*;
import SDMLATTPAY.Employee.clsMaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.io.File;
import java.sql.*;
import javax.swing.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
//import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
//import EITLERP.Sales.clsExcelExporter;

/*<APPLET CODE=frmChangePassword HEIGHT=200 WIDTH=430></APPLET>*/
/**
 *
 * @author Daxesh Prajapati
 */
public class FrmRptLeaveApproveStatus extends javax.swing.JApplet {

    private clsExcel_Exporter exp = new clsExcel_Exporter();

    private EITLTableModel DataModel = new EITLTableModel();

    private EITLComboModel modelDept = new EITLComboModel();
    private EITLComboModel modelShift = new EITLComboModel();
    private EITLComboModel modelMainCategory = new EITLComboModel();
    private EITLComboModel modelCategory = new EITLComboModel();
    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();

    //GenerateInvoiceParameterModificationCombo();
    /**
     * Initializes the applet frmChangePassword
     */
    public void init() {
        initComponents();
        setSize(1000, 750);

        jLabel1.setForeground(Color.WHITE);
        
        txtFromDate.setVisible(false);
        txtToDate.setVisible(false);
        cmbDept.setVisible(false);
        cmbMonth.setVisible(false);
        txtYear.setVisible(false);
        rbtnLCDetail.setVisible(false);
        rbtnLCSummary.setVisible(false);
        lblDate.setVisible(false);
        lblDate1.setVisible(false);
        btnClear.setVisible(false);
        lblMonthCmb.setVisible(false);
        lblYearCmb.setVisible(false);
        
        
        //txtFromDate.setText("");
        //txtToDate.setText("");
        //txtFromDate.setEnabled(false);
        //txtToDate.setEnabled(false);
        
        //cmbMonth.setSelectedIndex(EITLERPGLOBAL.getCurrentMonth());
        //txtYear.setText(EITLERPGLOBAL.getCurrentYear()+"");

        //GenerateDeptCombo();
        //GenerateShiftCombo();
        //GenerateMainCategoryCombo();
        
        
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ExporttoExcelFileChooser = new javax.swing.JFileChooser();
        file1 = new javax.swing.JFileChooser();
        CoffRokadiBtnGrp = new javax.swing.ButtonGroup();
        LCBtnGrp = new javax.swing.ButtonGroup();
        GatePassBtnGrp = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblMonthCmb = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        cmbMonth = new javax.swing.JComboBox();
        TabList = new javax.swing.JTabbedPane();
        LateComing = new javax.swing.JPanel();
        btnLeaveApplicationView = new javax.swing.JButton();
        rbtnLCDetail = new javax.swing.JRadioButton();
        rbtnLCSummary = new javax.swing.JRadioButton();
        btnClear = new javax.swing.JButton();
        lblYearCmb = new javax.swing.JLabel();
        lblDeptCmb = new javax.swing.JLabel();
        txtYear = new javax.swing.JTextField();
        cmbMainCategory = new javax.swing.JComboBox();
        jLabel27 = new javax.swing.JLabel();
        jScrollPane25 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        btnEmpMstETE = new javax.swing.JButton();
        lblDate1 = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        cmbStatus = new javax.swing.JComboBox();
        cmbDept = new javax.swing.JComboBox();
        cmbLeave = new javax.swing.JComboBox();
        jLabel28 = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setText("Leave Application Pending Status");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 2, 1000, 25);

        jLabel2.setBackground(new java.awt.Color(0, 102, 153));
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 120, 1000, 10);

        lblMonthCmb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMonthCmb.setText("Month : ");
        getContentPane().add(lblMonthCmb);
        lblMonthCmb.setBounds(680, 60, 60, 20);

        lblDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDate.setText("From Date : ");
        getContentPane().add(lblDate);
        lblDate.setBounds(570, 30, 110, 20);

        txtFromDate = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();
        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(680, 30, 100, 20);

        cmbMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        getContentPane().add(cmbMonth);
        cmbMonth.setBounds(740, 60, 100, 20);

        TabList.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabListStateChanged(evt);
            }
        });

        LateComing.setLayout(null);

        btnLeaveApplicationView.setText("View");
        btnLeaveApplicationView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeaveApplicationViewActionPerformed(evt);
            }
        });
        LateComing.add(btnLeaveApplicationView);
        btnLeaveApplicationView.setBounds(860, 0, 100, 30);

        LCBtnGrp.add(rbtnLCDetail);
        rbtnLCDetail.setSelected(true);
        rbtnLCDetail.setText("Detail");
        rbtnLCDetail.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnLCDetailItemStateChanged(evt);
            }
        });
        LateComing.add(rbtnLCDetail);
        rbtnLCDetail.setBounds(30, 10, 110, 20);

        LCBtnGrp.add(rbtnLCSummary);
        rbtnLCSummary.setText("Summary");
        rbtnLCSummary.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnLCSummaryItemStateChanged(evt);
            }
        });
        LateComing.add(rbtnLCSummary);
        rbtnLCSummary.setBounds(180, 10, 125, 20);

        TabList.addTab("Detail", LateComing);

        getContentPane().add(TabList);
        TabList.setBounds(10, 133, 980, 80);
        TabList.getAccessibleContext().setAccessibleName("Leave Application");

        btnClear.setText("Clear All");
        btnClear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnClear.setMargin(new java.awt.Insets(2, 7, 2, 7));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        getContentPane().add(btnClear);
        btnClear.setBounds(870, 80, 110, 30);

        lblYearCmb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYearCmb.setText("Year : ");
        getContentPane().add(lblYearCmb);
        lblYearCmb.setBounds(680, 90, 60, 20);

        lblDeptCmb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDeptCmb.setText("Status :");
        getContentPane().add(lblDeptCmb);
        lblDeptCmb.setBounds(10, 30, 70, 30);
        getContentPane().add(txtYear);
        txtYear.setBounds(740, 90, 80, 20);

        cmbMainCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "TK", "Other Than TK" }));
        getContentPane().add(cmbMainCategory);
        cmbMainCategory.setBounds(340, 30, 190, 30);

        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel27.setText("Applicaton  : ");
        getContentPane().add(jLabel27);
        jLabel27.setBounds(230, 70, 100, 30);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane25.setViewportView(Table);

        getContentPane().add(jScrollPane25);
        jScrollPane25.setBounds(10, 220, 980, 320);

        btnEmpMstETE.setLabel("Export to Excel");
        btnEmpMstETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpMstETEActionPerformed(evt);
            }
        });
        getContentPane().add(btnEmpMstETE);
        btnEmpMstETE.setBounds(830, 550, 150, 30);

        lblDate1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDate1.setText("To Date : ");
        getContentPane().add(lblDate1);
        lblDate1.setBounds(780, 30, 90, 20);

        txtToDate = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();
        getContentPane().add(txtToDate);
        txtToDate.setBounds(870, 30, 100, 20);

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Approved", "Unapproved", "Cancelled" }));
        cmbStatus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbStatusItemStateChanged(evt);
            }
        });
        cmbStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStatusActionPerformed(evt);
            }
        });
        getContentPane().add(cmbStatus);
        cmbStatus.setBounds(90, 30, 130, 30);

        cmbDept.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbDept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDeptActionPerformed(evt);
            }
        });
        getContentPane().add(cmbDept);
        cmbDept.setBounds(550, 70, 60, 30);

        cmbLeave.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Leave Application", "Leave Updation" }));
        getContentPane().add(cmbLeave);
        cmbLeave.setBounds(340, 70, 190, 30);

        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel28.setText("Created By : ");
        getContentPane().add(jLabel28);
        jLabel28.setBounds(230, 30, 100, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtFromDate.setText("");
        txtToDate.setText("");
        txtYear.setText("");
        cmbMonth.setSelectedIndex(0);
        cmbDept.setSelectedIndex(0);
        cmbMainCategory.setSelectedIndex(0);        
        
        cmbMonth.setSelectedIndex(EITLERPGLOBAL.getCurrentMonth());
        txtYear.setText(EITLERPGLOBAL.getCurrentYear()+"");
    }//GEN-LAST:event_btnClearActionPerformed


    private void btnEmpMstETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpMstETEActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnEmpMstETEActionPerformed

    private void cmbDeptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDeptActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmbDeptActionPerformed

    private void TabListStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabListStateChanged
        // TODO add your handling code here:
        if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Master")) {
            
            
            txtFromDate.setEnabled(false);
            txtToDate.setEnabled(false);
            txtYear.setEnabled(false);
            cmbMonth.setEnabled(false);
            cmbDept.setEnabled(true);            
            cmbMainCategory.setEnabled(true);
            

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Shift Schedule")) {
            
            txtFromDate.setEnabled(false);
            txtToDate.setEnabled(false);
            txtYear.setEnabled(true);
            cmbMonth.setEnabled(true);
            cmbDept.setEnabled(true);
            cmbMainCategory.setEnabled(false);            

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Daily Attendance Summary")) {
            FormatGridDailyAtt();
            
            txtFromDate.setEnabled(true);
            txtToDate.setEnabled(true);
            txtYear.setEnabled(true);
            cmbMonth.setEnabled(true);
            cmbDept.setEnabled(true);            
            cmbMainCategory.setEnabled(true);            

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Monthly Attendance Summary")) {
            FormatGridMonthlySummary();
            
            txtFromDate.setEnabled(false);
            txtToDate.setEnabled(false);
            txtYear.setEnabled(true);
            cmbMonth.setEnabled(true);
            cmbDept.setEnabled(true);
            cmbMainCategory.setEnabled(true);            

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Basic Punch Data")) {
            FormatGridBasicPunches();
            
            txtFromDate.setEnabled(true);
            txtToDate.setEnabled(true);
            txtYear.setEnabled(true);
            cmbMonth.setEnabled(true);
            cmbDept.setEnabled(true);            
            cmbMainCategory.setEnabled(true);
            

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Coff / Rokadi")) {
            FormatGridCoffRokadi();
            
            txtFromDate.setEnabled(true);
            txtToDate.setEnabled(true);
            txtYear.setEnabled(true);
            cmbMonth.setEnabled(true);
            cmbDept.setEnabled(true);            
            cmbMainCategory.setEnabled(true);            

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Odd Punches")) {
            FormatGridOddPunches();
            
            txtFromDate.setEnabled(true);
            txtToDate.setEnabled(true);
            txtYear.setEnabled(true);
            cmbMonth.setEnabled(true);
            cmbDept.setEnabled(true);            
            cmbMainCategory.setEnabled(true);            

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Late Coming")) {
            //FormatGridLateComingDetail();

            if (rbtnLCDetail.isSelected()) {                
                txtFromDate.setEnabled(true);
                txtToDate.setEnabled(true);
                txtYear.setEnabled(true);
                cmbMonth.setEnabled(true);
                cmbDept.setEnabled(true);                
                cmbMainCategory.setEnabled(true);                
            }
            if (rbtnLCSummary.isSelected()) {
                
                txtFromDate.setEnabled(false);
                txtToDate.setEnabled(false);
                txtYear.setEnabled(true);
                cmbMonth.setEnabled(true);
                cmbDept.setEnabled(true);                
                cmbMainCategory.setEnabled(true);                
            }

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Gate Pass")) {
            FormatGridGatePass();
            
            txtFromDate.setEnabled(true);
            txtToDate.setEnabled(true);
            txtYear.setEnabled(true);
            cmbMonth.setEnabled(true);
            cmbDept.setEnabled(true);            
            cmbMainCategory.setEnabled(false);
            

        }  else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Leave Avail")) {
            FormatGridLeaveAvail();
            
            txtFromDate.setEnabled(false);
            txtToDate.setEnabled(false);
            txtYear.setEnabled(true);
            cmbMonth.setEnabled(false);
            cmbDept.setEnabled(true);            
            cmbMainCategory.setEnabled(true);
            
            
        }  else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Leave Balance")) {
            FormatGridLeaveBalance();
            
            txtFromDate.setEnabled(false);
            txtToDate.setEnabled(false);
            txtYear.setEnabled(false);
            cmbMonth.setEnabled(false);
            cmbDept.setEnabled(true);
            cmbMainCategory.setEnabled(true);            
            
        }
    }//GEN-LAST:event_TabListStateChanged

    private void btnLeaveApplicationViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeaveApplicationViewActionPerformed
          FormatGridLeaveApplicationDetail();
          GenerateLeaveApplicationDetail();
    }//GEN-LAST:event_btnLeaveApplicationViewActionPerformed

    private void rbtnLCDetailItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnLCDetailItemStateChanged
        // TODO add your handling code here:
        FormatGridLeaveApplicationDetail();
        
        txtFromDate.setEnabled(true);
        txtToDate.setEnabled(true);
        txtYear.setEnabled(true);
        cmbMonth.setEnabled(true);
        cmbDept.setEnabled(true);        
        cmbMainCategory.setEnabled(true);
        
    }//GEN-LAST:event_rbtnLCDetailItemStateChanged

    private void rbtnLCSummaryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnLCSummaryItemStateChanged
        // TODO add your handling code here:
        FormatGridLateComingSummary();
        
        txtFromDate.setEnabled(false);
        txtToDate.setEnabled(false);
        txtYear.setEnabled(true);
        cmbMonth.setEnabled(true);
        cmbDept.setEnabled(true);
        cmbMainCategory.setEnabled(true);
        
    }//GEN-LAST:event_rbtnLCSummaryItemStateChanged

    private void cmbStatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbStatusItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbStatusItemStateChanged

    private void cmbStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbStatusActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup CoffRokadiBtnGrp;
    private javax.swing.JFileChooser ExporttoExcelFileChooser;
    private javax.swing.ButtonGroup GatePassBtnGrp;
    private javax.swing.ButtonGroup LCBtnGrp;
    private javax.swing.JPanel LateComing;
    private javax.swing.JTabbedPane TabList;
    private javax.swing.JTable Table;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnEmpMstETE;
    private javax.swing.JButton btnLeaveApplicationView;
    private javax.swing.JComboBox cmbDept;
    private javax.swing.JComboBox cmbLeave;
    private javax.swing.JComboBox cmbMainCategory;
    private javax.swing.JComboBox cmbMonth;
    private javax.swing.JComboBox cmbStatus;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDate1;
    private javax.swing.JLabel lblDeptCmb;
    private javax.swing.JLabel lblMonthCmb;
    private javax.swing.JLabel lblYearCmb;
    private javax.swing.JRadioButton rbtnLCDetail;
    private javax.swing.JRadioButton rbtnLCSummary;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables

    private void GenerateDeptCombo() {

        HashMap List = new HashMap();
        clsMaster ObjDept;

        cmbDept.setModel(modelDept);
        modelDept.removeAllElements();  //Clearing previous contents

        ComboData aData = new ComboData();
        aData.Text = "Select Dept";
        aData.Code = 0;
        modelDept.addElement(aData);

        List = clsMaster.getDepartmentList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjDept = (clsMaster) List.get(Integer.toString(i));
//            ComboData aData = new ComboData();
            aData.Text = (String) ObjDept.getAttribute("Name").getObj();
            aData.Code = (long) ObjDept.getAttribute("DPTID").getVal();
            modelDept.addElement(aData);
        }
    }

    private void GenerateShiftCombo() {

        HashMap List = new HashMap();
        clsMaster ObjShift;
        
        modelShift.removeAllElements();  //Clearing previous contents

        ComboData aData = new ComboData();
        aData.Text = "Select Shift";
        aData.Code = 0;
        modelShift.addElement(aData);

        List = clsMaster.getShiftList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjShift = (clsMaster) List.get(Integer.toString(i));
//            ComboData aData = new ComboData();
            aData.Text = (String) ObjShift.getAttribute("SHIFT_NAME").getObj();
            aData.Code = (long) ObjShift.getAttribute("SHIFT_ID").getVal();
            modelShift.addElement(aData);
        }
    }

    /*
    private void GenerateMainCategoryCombo() {

        HashMap List = new HashMap();
        clsMaster ObjMainCategory;

        cmbMainCategory.setModel(modelMainCategory);
        modelMainCategory.removeAllElements();  //Clearing previous contents

        ComboData aData = new ComboData();
        aData.Text = "Select Main Category";
        aData.Code = 0;
        modelMainCategory.addElement(aData);

        List = clsMaster.getMainCategoryList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjMainCategory = (clsMaster) List.get(Integer.toString(i));
//            ComboData aData = new ComboData();
            aData.Text = (String) ObjMainCategory.getAttribute("Name").getObj();
            aData.Code = (long) ObjMainCategory.getAttribute("SECID").getVal();
            modelMainCategory.addElement(aData);
        }
    }*/
    

    private void FormatGridBasicPunches() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");         //0
        DataModel.addColumn("Emp Pay No");  //1
        DataModel.addColumn("Emp Name");    //2
        DataModel.addColumn("Department");  //3
        DataModel.addColumn("Punch Date");  //4
        DataModel.addColumn("Shift");       //5     
        DataModel.addColumn("Time");        //6
        DataModel.addColumn("Machine");     //7    
        DataModel.addColumn("Category");    //8
        DataModel.addColumn("Sub Category");//9

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateBasicPunches() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridBasicPunches(); //clear existing content of table
            ResultSet rsTmp;
            
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                //grp_cndtn += " WHERE EMP_DEPARTMENT= " + cmbDept.getSelectedIndex() + " ";
                cndtn += " AND EMP_DEPARTMENT= " + cmbDept.getSelectedIndex() + " ";
            }
            
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                cndtn += " AND EMP_MAIN_CATEGORY= " + cmbMainCategory.getSelectedIndex() + " ";
            }
            
            if (!cmbMonth.getSelectedItem().equals("Select")) {
                cndtn += " AND MONTH(A_DATE)= " + cmbMonth.getSelectedIndex() + " ";
            }
            if (!txtYear.getText().trim().equals("")) {
                cndtn += " AND YEAR(A_DATE)= '" + txtYear.getText().trim() + "'";
            }
            if (!txtFromDate.getText().trim().equals("")) {
                cndtn += " AND A_DATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
            }
            if (!txtToDate.getText().trim().equals("")) {
                cndtn += " AND A_DATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
            }

            String strSQL = "";

            strSQL = "SELECT DISTINCT EMP_CODE AS EMPID,A_DATE,P_TIME,MACHINE,CASE WHEN A_SHIFT='WO' THEN 0 ELSE A_SHIFT END AS A_SHIFT,"
                    + "EMP_NAME,DPTNAME,SECNAME,CTGNAME,DPTID AS EMP_DEPARTMENT,SEC.SECID AS MAIN_CATEGORY,CTG.CTGID AS CATEGORY  FROM SDMLATTPAY.ATT_DATA DAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON DAS.EMP_CODE=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "WHERE 1=1 " + cndtn
                    + " ORDER BY EMP_CODE,A_DATE,P_TIME";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = EITLERPGLOBAL.formatDate(rsTmp.getString("A_DATE"));
                    rowData[5] = rsTmp.getString("A_SHIFT");
                    rowData[6] = rsTmp.getString("P_TIME");
                    rowData[7] = rsTmp.getString("MACHINE");
                    rowData[8] = rsTmp.getString("SECNAME");
                    rowData[9] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridDailyAtt() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Punch Date");
        DataModel.addColumn("No of Punches");
        DataModel.addColumn("Shift");
        DataModel.addColumn("Status");
        DataModel.addColumn("In Time");
        DataModel.addColumn("Out Time");
        DataModel.addColumn("Working Hours");
        DataModel.addColumn("Personal GP 1st Half");
        DataModel.addColumn("Personal GP 2st Half");
        DataModel.addColumn("Official GP 1st Half");
        DataModel.addColumn("Official GP 2st Half");
        DataModel.addColumn("Late Hours");
        DataModel.addColumn("Punches");
        DataModel.addColumn("Personal GP Punches");
        DataModel.addColumn("Official GP Punches");
        DataModel.addColumn("Category");
        DataModel.addColumn("Sub Category");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateDailyAtt() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridDailyAtt(); //clear existing content of table
            ResultSet rsTmp;
            
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " WHERE EMP_DEPARTMENT= " + cmbDept.getSelectedIndex() + " ";
            }
            
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                cndtn += " AND MAIN_CATEGORY= " + cmbMainCategory.getSelectedIndex() + " ";
            }
            
            if (!cmbMonth.getSelectedItem().equals("Select")) {
                cndtn += " AND MM= " + cmbMonth.getSelectedIndex() + " ";
            }
            if (!txtYear.getText().trim().equals("")) {
                cndtn += " AND YYYY= '" + txtYear.getText().trim() + "'";
            }
            if (!txtFromDate.getText().trim().equals("")) {
                cndtn += " AND PUNCHDATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
            }
            if (!txtToDate.getText().trim().equals("")) {
                cndtn += " AND PUNCHDATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT * FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE 1=1 " + cndtn + " ) AS DAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON DAS.EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=DAS.MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=DAS.CATEGORY " + grp_cndtn + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = EITLERPGLOBAL.formatDate(rsTmp.getString("PUNCHDATE"));
                    rowData[5] = rsTmp.getString("PUNCHES_NOS");
                    rowData[6] = rsTmp.getString("SHIFT");
                    rowData[7] = rsTmp.getString("PRESENT_FIRST") + " " + rsTmp.getString("PRESENT_SECOND");
                    rowData[8] = rsTmp.getString("INTIME").substring(11, 16);
                    rowData[9] = rsTmp.getString("OUTTIME").substring(11, 16);
                    rowData[10] = rsTmp.getString("TOTAL_WORKING_HRS").substring(0, 5);
                    rowData[11] = rsTmp.getString("GP_FIRST_HALF").substring(0, 5);
                    rowData[12] = rsTmp.getString("GP_SECOND_HALF").substring(0, 5);
                    rowData[13] = rsTmp.getString("GPO_FIRST_HALF").substring(0, 5);
                    rowData[14] = rsTmp.getString("GPO_SECOND_HALF").substring(0, 5);
                    rowData[15] = rsTmp.getString("GATEPASS_LATE").substring(0, 5);
                    rowData[16] = rsTmp.getString("ALL_PUNCHES");
                    rowData[17] = rsTmp.getString("ALL_PERSONAL_GATEPASS_PUNCHES");
                    rowData[18] = rsTmp.getString("ALL_OFFICIAL_GATEPASS_PUNCHES");
                    rowData[19] = rsTmp.getString("SECNAME");
                    rowData[20] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridMonthlySummary() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Month");
        DataModel.addColumn("Year");
        DataModel.addColumn("Total Days");
        DataModel.addColumn("Paid Days");
        DataModel.addColumn("Present Days");
        DataModel.addColumn("LC Days");
        DataModel.addColumn("LWP Days");
        DataModel.addColumn("PL");
        DataModel.addColumn("CL");
        DataModel.addColumn("SL");
        DataModel.addColumn("OD");
        DataModel.addColumn("LOFF");
        DataModel.addColumn("EOFF");
        DataModel.addColumn("ESIC");
        DataModel.addColumn("WO");
        DataModel.addColumn("WOFF");
//        DataModel.addColumn("NPH"); on 09112019
        DataModel.addColumn("PH");
        DataModel.addColumn("NWOF");
        DataModel.addColumn("COFF");
        DataModel.addColumn("NPL");
        DataModel.addColumn("Personal GP");
        DataModel.addColumn("Official GP");
        DataModel.addColumn("Absent");
        DataModel.addColumn("Category");
        DataModel.addColumn("Sub Category");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateMonthlySummary() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridMonthlySummary(); //clear existing content of table
            ResultSet rsTmp;

            
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + cmbDept.getSelectedIndex() + " ";
            }
            
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + cmbMainCategory.getSelectedIndex() + " ";
            }
            
            if (!cmbMonth.getSelectedItem().equals("Select")) {
                cndtn += " AND MS_MM= " + cmbMonth.getSelectedIndex() + " ";
            }
            if (!txtYear.getText().trim().equals("")) {
                cndtn += " AND MS_YYYY= '" + txtYear.getText().trim() + "'";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT * FROM SDMLATTPAY.ATT_MTH_SUMMARY WHERE 1=1 " + cndtn + " ) AS MAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON MAS.MS_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
                    + "ON SFT.SHIFT_ID=EMP.EMP_SHIFT_ID WHERE 1=1 " + grp_cndtn + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("MS_EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("MS_MM");
                    rowData[5] = rsTmp.getString("MS_YYYY");
                    rowData[6] = rsTmp.getString("TOTAL_MONTH_DAYS");
                    rowData[7] = rsTmp.getString("PAID_DAYS");
                    rowData[8] = rsTmp.getString("PRESENT_DAYS");
                    rowData[9] = rsTmp.getString("LC_DAYS");
                    rowData[10] = rsTmp.getString("LWP_DAYS");
                    rowData[11] = rsTmp.getString("PL");
                    rowData[12] = rsTmp.getString("CL");
                    rowData[13] = rsTmp.getString("SL");
                    rowData[14] = rsTmp.getString("OD");
                    rowData[15] = rsTmp.getString("LOFF");
                    rowData[16] = rsTmp.getString("EOFF");
                    rowData[17] = rsTmp.getString("ESIC");
                    rowData[18] = rsTmp.getString("WO");
                    rowData[19] = rsTmp.getString("WOFF");
//                    rowData[20] = rsTmp.getString("NPH"); on 09112019
                    rowData[20] = rsTmp.getString("HL");
                    rowData[21] = rsTmp.getString("NWOF");
                    rowData[22] = rsTmp.getString("COFFE");
                    rowData[23] = rsTmp.getString("NPL");
                    rowData[24] = rsTmp.getString("P_GP");
                    rowData[25] = rsTmp.getString("O_GP");
                    rowData[26] = rsTmp.getString("ABST");
                    rowData[27] = rsTmp.getString("SECNAME");
                    rowData[28] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridCoffRokadi() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Doc No");
        DataModel.addColumn("Doc Date");
        DataModel.addColumn("Month");
        DataModel.addColumn("Year");
        DataModel.addColumn("Date");
        DataModel.addColumn("Type");
        DataModel.addColumn("From Time");
        DataModel.addColumn("To Time");
        DataModel.addColumn("Hours");
        DataModel.addColumn("Replacement Hours");
        DataModel.addColumn("Extra Hours");
        DataModel.addColumn("Punches");
        DataModel.addColumn("Shift");
        DataModel.addColumn("Category");
        DataModel.addColumn("Sub Category");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateCoffRokadi() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridCoffRokadi(); //clear existing content of table
            ResultSet rsTmp;

            
            

            
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + cmbDept.getSelectedIndex() + " ";
            }
            
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + cmbMainCategory.getSelectedIndex() + " ";
            }
            
            if (!cmbMonth.getSelectedItem().equals("Select")) {
                cndtn += " AND COFF_MONTH= " + cmbMonth.getSelectedIndex() + " ";
            }
            if (!txtYear.getText().trim().equals("")) {
                cndtn += " AND COFF_YEAR= '" + txtYear.getText().trim() + "'";
            }
            if (!txtFromDate.getText().trim().equals("")) {
                cndtn += " AND COFF_DATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
            }
            if (!txtToDate.getText().trim().equals("")) {
                cndtn += " AND COFF_DATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT * FROM SDMLATTPAY.ATT_COFF_ROKDI_ENTRY " + cndtn + " ) AS CRE "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON CRE.COFF_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
                    + "ON SFT.SHIFT_ID=CRE.COFF_SHIFT WHERE 1=1 " + grp_cndtn + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("COFF_EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("COFF_DOC_NO");
                    rowData[5] = EITLERPGLOBAL.formatDate(rsTmp.getString("COFF_DOC_DATE"));
                    rowData[6] = rsTmp.getString("COFF_MONTH");
                    rowData[7] = rsTmp.getString("COFF_YEAR");
                    rowData[8] = EITLERPGLOBAL.formatDate(rsTmp.getString("COFF_DATE"));
                    rowData[9] = rsTmp.getString("COFF_TYPE");
                    rowData[10] = rsTmp.getString("COFF_FROM_TIME").substring(0, 5);
                    rowData[11] = rsTmp.getString("COFF_TO_TIME").substring(0, 5);
                    rowData[12] = rsTmp.getString("COFF_HRS").substring(0, 5);
                    rowData[13] = rsTmp.getString("COFF_HRS_REPLACEMENT").substring(0, 5);
                    rowData[14] = rsTmp.getString("COFF_HRS_EXTRA").substring(0, 5);
                    rowData[15] = rsTmp.getString("COFF_PUNCHES");
                    rowData[16] = rsTmp.getString("COFF_SHIFT");
                    rowData[17] = rsTmp.getString("SECNAME");
                    rowData[18] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridOddPunches() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Date");
        DataModel.addColumn("No of Punches");
        DataModel.addColumn("Punches");
        DataModel.addColumn("Shift");
        DataModel.addColumn("Category");
        DataModel.addColumn("Sub Category");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateOddPunches() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridOddPunches(); //clear existing content of table
            ResultSet rsTmp;

            
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + cmbDept.getSelectedIndex() + " ";
            }
            
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + cmbMainCategory.getSelectedIndex() + " ";
            }
            
            if (!cmbMonth.getSelectedItem().equals("Select")) {
                cndtn += " AND MONTH(A_DATE)= " + cmbMonth.getSelectedIndex() + " ";
            }
            if (!txtYear.getText().trim().equals("")) {
                cndtn += " AND YEAR(A_DATE)= '" + txtYear.getText().trim() + "'";
            }
            if (!txtFromDate.getText().trim().equals("")) {
                cndtn += " AND A_DATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
            }
            if (!txtToDate.getText().trim().equals("")) {
                cndtn += " AND A_DATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM (SELECT EMP_CODE,DATE_FORMAT(A_DATE,'%d/%m/%Y') AS PUNCH_DATE,GROUP_CONCAT(P_TIME ORDER BY P_TIME SEPARATOR' || ') AS PUNCHES,"
                    + "COUNT(0) AS NO_OF_PUNCHES,A_SHIFT FROM (SELECT DISTINCT EMP_CODE,A_DATE,P_TIME,A_SHIFT FROM SDMLATTPAY.ATT_DATA WHERE 1=1 AND COALESCE(UPDATE_IND,'')!='DELETION' " + cndtn + " ) AS AA "
                    + "GROUP BY PUNCH_DATE,EMP_CODE HAVING (COUNT(A_DATE)%2<>0) ORDER BY A_DATE) AS ODD "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON ODD.EMP_CODE=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
                    + "ON SFT.SHIFT_ID=ODD.A_SHIFT WHERE 1=1 " + grp_cndtn + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("EMP_CODE");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("PUNCH_DATE");
                    rowData[5] = rsTmp.getString("NO_OF_PUNCHES");
                    rowData[6] = rsTmp.getString("PUNCHES");
                    rowData[7] = rsTmp.getString("A_SHIFT");
                    rowData[8] = rsTmp.getString("SECNAME");
                    rowData[9] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridMonthlySummarySPP() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("EMP CODE");
        DataModel.addColumn("Employee Name");
        DataModel.addColumn("Pay Days");
        DataModel.addColumn("Present Days");
        DataModel.addColumn("LOP");
        DataModel.addColumn("COFF");
        DataModel.addColumn("CW");
        DataModel.addColumn("OOD");
        DataModel.addColumn("PL");
        DataModel.addColumn("CL");
        DataModel.addColumn("SL");
        DataModel.addColumn("LOFF");
        DataModel.addColumn("EOFF");
        DataModel.addColumn("PH");
        DataModel.addColumn("WOFF");
        DataModel.addColumn("NPH");
        DataModel.addColumn("WOF");
        DataModel.addColumn("NWOF");
        DataModel.addColumn("COFFE");
        DataModel.addColumn("NPL");
        DataModel.addColumn("ESIC");
        DataModel.addColumn("Remarks");

        DataModel.TableReadOnly(true);
    }

    private void GenerateMonthlySummarySPP() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridMonthlySummarySPP(); //clear existing content of table
            ResultSet rsTmp;

            
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + cmbDept.getSelectedIndex() + " ";
            }
            
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + cmbMainCategory.getSelectedIndex() + " ";
            }
            
            if (!cmbMonth.getSelectedItem().equals("Select")) {
                cndtn += " AND MS_MM= " + cmbMonth.getSelectedIndex() + " ";
            }
            if (!txtYear.getText().trim().equals("")) {
                cndtn += " AND MS_YYYY= '" + txtYear.getText().trim() + "'";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT *,SUM(LC_DAYS+LWP_DAYS) AS LOP FROM SDMLATTPAY.ATT_MTH_SUMMARY WHERE 1=1 " + cndtn + " GROUP BY MS_EMPID,MS_MM,MS_YYYY ) AS MAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_SHIFT_ID,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON MAS.MS_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY "
                    + "LEFT JOIN ( SELECT SHIFT_ID,SHIFT_NAME FROM SDMLATTPAY.ATT_SHIFT ) AS SFT "
                    + "ON SFT.SHIFT_ID=EMP.EMP_SHIFT_ID WHERE 1=1 " + grp_cndtn + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = rsTmp.getString("MS_EMPID");
                    rowData[1] = rsTmp.getString("EMP_NAME");
                    rowData[2] = rsTmp.getString("PAID_DAYS");
                    rowData[3] = rsTmp.getString("PRESENT_DAYS");
                    rowData[4] = rsTmp.getString("LOP");
                    rowData[5] = rsTmp.getString("COFFE");
                    rowData[6] = "0";
                    rowData[7] = rsTmp.getString("OD");
                    rowData[8] = rsTmp.getString("PL");
                    rowData[9] = rsTmp.getString("CL");
                    rowData[10] = rsTmp.getString("SL");
                    rowData[11] = rsTmp.getString("LOFF");
                    rowData[12] = rsTmp.getString("EOFF");
                    rowData[13] = "0";
                    rowData[14] = rsTmp.getString("WO");
//                    rowData[15] = rsTmp.getString("NPH"); on 09112019
                    rowData[15] = rsTmp.getString("HL");
                    rowData[16] = rsTmp.getString("WOFF");
                    rowData[17] = rsTmp.getString("NWOF");
                    rowData[18] = rsTmp.getString("COFFE");
                    rowData[19] = rsTmp.getString("NPL");
                    rowData[20] = rsTmp.getString("ESIC");
                    rowData[21] = "";

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridLeaveApplicationDetail() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Leave No");
        DataModel.addColumn("Leave Date");
        DataModel.addColumn("Emp No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Leave Detail");
        DataModel.addColumn("Creater");
        DataModel.addColumn("In Pending");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(35);
    }

    private void GenerateLeaveApplicationDetail() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridLeaveApplicationDetail(); //clear existing content of table
            ResultSet rsTmp;
            
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + cmbDept.getSelectedIndex() + " ";
            }

//            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
//                cndtn += " AND MAIN_CATEGORY= " + cmbMainCategory.getSelectedIndex() + " ";
//            }
//
//            if (!cmbMonth.getSelectedItem().equals("Select")) {
//                cndtn += " AND MM= " + cmbMonth.getSelectedIndex() + " ";
//            }
//            if (!txtYear.getText().trim().equals("")) {
//                cndtn += " AND YYYY= '" + txtYear.getText().trim() + "'";
//            }
//            if (!txtFromDate.getText().trim().equals("")) {
//                cndtn += " AND PUNCHDATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
//            }
//            if (!txtToDate.getText().trim().equals("")) {
//                cndtn += " AND PUNCHDATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
//            }
            
            int status = cmbStatus.getSelectedIndex();
            if (status == 0) {
                cndtn += " AND COALESCE(APPROVED,0)=1 AND COALESCE(CANCELED,0)=0 ";
            }
            if (status == 1) {
                cndtn += " AND COALESCE(APPROVED,0)=0 AND COALESCE(CANCELED,0)=0 ";
            }
            if (status == 2) {
                cndtn += " AND COALESCE(CANCELED,0)=1 ";
            }
            int createdby = cmbMainCategory.getSelectedIndex();
            if (createdby == 0) {
                cndtn += " AND CREATED_BY IN (SELECT USER_ID FROM DINESHMILLS.D_COM_USER_MASTER WHERE DEPT_ID=28) ";
            }
            if (createdby == 1) {
                cndtn += " AND CREATED_BY IN (SELECT USER_ID FROM DINESHMILLS.D_COM_USER_MASTER WHERE DEPT_ID!=28) ";
            } 
            
            int applicationtype = cmbLeave.getSelectedIndex();
            
            String strSQL = "";
            if(applicationtype==0){
            strSQL = "SELECT LVTNO,LVTDATE,LVT_PAY_EMPID,EMPNAME,KEY1,USER_NAME,(SELECT USER_NAME FROM DINESHMILLS.D_COM_USER_MASTER UM WHERE UM.USER_ID=C.USER_ID) PENDINGUSER FROM "
                    + "(SELECT LVTNO,LVTDATE,LVT_PAY_EMPID,EMPNAME,KEY1,CREATED_BY,COALESCE(USER_ID,0) USER_ID FROM "
                    + "(SELECT LVT_DOC_NO LVTNO,DATE_FORMAT(LVT_DOC_DATE,\"%d/%m/%Y\") LVTDATE,LVT_PAY_EMPID,(SELECT EMP_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO=LVT_PAY_EMPID) EMPNAME,GROUP_CONCAT(CONCAT(LVT_LEAVE_CODE,'-From ',DATE_FORMAT(LVT_FROMDATE,\"%d/%m/%Y\"),' To ',DATE_FORMAT(LVT_TODATE,\"%d/%m/%Y\"),' -',LVT_DAYS))  KEY1,CREATED_BY  FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE 1=1 "+ cndtn +"  "
                    + "	GROUP BY LVT_DOC_NO "
                    + "	ORDER BY LVT_DOC_NO) A"
                    + "    LEFT JOIN "
                    + "    (SELECT DOC_NO,USER_ID FROM SDMLATTPAY.D_COM_DOC_DATA DD WHERE DD.MODULE_ID=811 AND DD.STATUS='W')  B "
                    + "    ON A.LVTNO=B.DOC_NO) C "
                    + "    LEFT JOIN "
                    + "(SELECT USER_ID,USER_NAME FROM DINESHMILLS.D_COM_USER_MASTER) D "
                    + "ON C.CREATED_BY=D.USER_ID";
            /*strSQL = "SELECT LVT_DOC_NO,LVTDATE,LVT_PAY_EMPID,EMPNAME,KEY1,USER_NAME FROM "
                    + "(SELECT LVT_DOC_NO,DATE_FORMAT(LVT_DOC_DATE,\"%d/%m/%Y\") LVTDATE,LVT_PAY_EMPID,(SELECT EMP_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO=LVT_PAY_EMPID) EMPNAME,GROUP_CONCAT(CONCAT(LVT_LEAVE_CODE,'-From ',DATE_FORMAT(LVT_FROMDATE,\"%d/%m/%Y\"),' To ',DATE_FORMAT(LVT_TODATE,\"%d/%m/%Y\"),' -',LVT_DAYS))  KEY1,CREATED_BY  FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE 1=1 "+ cndtn +" "
                    + "	GROUP BY LVT_DOC_NO "
                    + "	ORDER BY LVT_DOC_NO) A"
                    + "    LEFT JOIN "
                    + "(SELECT USER_ID,USER_NAME FROM DINESHMILLS.D_COM_USER_MASTER) B "
                    + "ON A.CREATED_BY=B.USER_ID";*/
            
            /*strSQL = "SELECT LVT_DOC_NO,DATE_FORMAT(LVT_DOC_DATE,\"%d/%m/%Y\") LVTDATE,LVT_PAY_EMPID,(SELECT EMP_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO=LVT_PAY_EMPID) EMPNAME,GROUP_CONCAT(CONCAT(LVT_LEAVE_CODE,'-From ',DATE_FORMAT(LVT_FROMDATE,\"%d/%m/%Y\"),' To ',DATE_FORMAT(LVT_TODATE,\"%d/%m/%Y\"),' -',LVT_DAYS))  KEY1  FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE 1=1 "+ cndtn +" "
                    + "GROUP BY LVT_DOC_NO "
                    + "ORDER BY LVT_DOC_NO";*/

            /*strSQL = "SELECT * FROM ( SELECT *, "
                    + "SEC_TO_TIME(TIME_TO_SEC(GP_FIRST_HALF) + TIME_TO_SEC(GP_SECOND_HALF) + TIME_TO_SEC(LATE_COMING_HRS) + TIME_TO_SEC(LUNCH_LATE_HRS)) AS TOTAL_LATE_COMING "
                    + "FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE 1=1 " + cndtn + " ) AS DAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON DAS.EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=DAS.MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=DAS.CATEGORY "
                    + "WHERE TOTAL_LATE_COMING>0 " + grp_cndtn + " "; */
            }
            if(applicationtype==1){
                strSQL = "SELECT LVTNO,LVTDATE,LVT_PAY_EMPID,EMPNAME,KEY1,USER_NAME,(SELECT USER_NAME FROM DINESHMILLS.D_COM_USER_MASTER UM WHERE UM.USER_ID=C.USER_ID) PENDINGUSER FROM "
                    + "(SELECT LVTNO,LVTDATE,LVT_PAY_EMPID,EMPNAME,KEY1,CREATED_BY,COALESCE(USER_ID,0) USER_ID FROM "
                    + "(SELECT LVT_AMEND_NO LVTNO,DATE_FORMAT(LVT_AMEND_DATE,\"%d/%m/%Y\") LVTDATE,LVT_PAY_EMPID,(SELECT EMP_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO=LVT_PAY_EMPID) EMPNAME,GROUP_CONCAT(CONCAT(LVT_LEAVE_CODE,'-From ',DATE_FORMAT(LVT_FROMDATE,\"%d/%m/%Y\"),' To ',DATE_FORMAT(LVT_TODATE,\"%d/%m/%Y\"),' -',LVT_DAYS))  KEY1,CREATED_BY  FROM SDMLATTPAY.ATT_LEAVE_UPDATION_ENTRY WHERE 1=1 "+ cndtn +"  "
                    + "	GROUP BY LVT_AMEND_NO "
                    + "	ORDER BY LVT_AMEND_NO) A"
                    + "    LEFT JOIN "
                    + "    (SELECT DOC_NO,USER_ID FROM SDMLATTPAY.D_COM_DOC_DATA DD WHERE DD.MODULE_ID=813 AND DD.STATUS='W')  B "
                    + "    ON A.LVTNO=B.DOC_NO) C "
                    + "    LEFT JOIN "
                    + "(SELECT USER_ID,USER_NAME FROM DINESHMILLS.D_COM_USER_MASTER) D "
                    + "ON C.CREATED_BY=D.USER_ID";
            }
            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);            
                    rowData[1] = rsTmp.getString("LVTNO");
                    rowData[2] = rsTmp.getString("LVTDATE");
                    rowData[3] = rsTmp.getString("LVT_PAY_EMPID");
                    rowData[4] = rsTmp.getString("EMPNAME");                    
                    rowData[5] = rsTmp.getString("KEY1");
                    rowData[6] = rsTmp.getString("USER_NAME");
                    rowData[7] = rsTmp.getString("PENDINGUSER");
                    

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridLateComingSummary() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Month");
        DataModel.addColumn("Year");
        DataModel.addColumn("Total Late Coming");
        DataModel.addColumn("Category");
        DataModel.addColumn("Sub Category");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateLateComingSummary() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridLateComingSummary(); //clear existing content of table
            ResultSet rsTmp;

            
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " WHERE EMP_DEPARTMENT= " + cmbDept.getSelectedIndex() + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                cndtn += " AND MAIN_CATEGORY= " + cmbMainCategory.getSelectedIndex() + " ";
            }
            
            if (!cmbMonth.getSelectedItem().equals("Select")) {
                cndtn += " AND MM= " + cmbMonth.getSelectedIndex() + " ";
            }
            if (!txtYear.getText().trim().equals("")) {
                cndtn += " AND YYYY= '" + txtYear.getText().trim() + "'";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT * FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE 1=1 " + cndtn + " GROUP BY EMPID,MM,YYYY ) AS DAS "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON DAS.EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=DAS.MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=DAS.CATEGORY " + grp_cndtn + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("MM");
                    rowData[5] = rsTmp.getString("YYYY");
                    rowData[6] = rsTmp.getString("TOTAL_GP").substring(0, 5);
                    rowData[7] = rsTmp.getString("SECNAME");
                    rowData[8] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridMaster() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Code");
        DataModel.addColumn("Name");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateDepartmentMst() {
        try {
            FormatGridMaster(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT * FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("DPTCODE");
                    rowData[2] = rsTmp.getString("Name");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateDesignationMst() {
        try {
            FormatGridMaster(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT * FROM SDMLATTPAY.ATT_DESIGNATION_MASTER";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("DSGCODE");
                    rowData[2] = rsTmp.getString("Name");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateCategoryMst() {
        try {
            FormatGridMaster(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT * FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("SECCODE");
                    rowData[2] = rsTmp.getString("Name");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateSubCategoryMst() {
        try {
            FormatGridMaster(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT * FROM SDMLATTPAY.ATT_CATEGORY_MASTER";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("CTGCODE");
                    rowData[2] = rsTmp.getString("Name");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridShiftMaster() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Code");
        DataModel.addColumn("Name");
        DataModel.addColumn("In Time");
        DataModel.addColumn("Out Time");
        DataModel.addColumn("Lunch In");
        DataModel.addColumn("Lunch Out");
        DataModel.addColumn("Working Hours");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateShiftMst() {
        try {
            FormatGridShiftMaster(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT * FROM SDMLATTPAY.ATT_SHIFT";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("SHIFT_ID");
                    rowData[2] = rsTmp.getString("SHIFT_NAME");
                    rowData[3] = rsTmp.getString("SHIFT_IN_TIME");
                    rowData[4] = rsTmp.getString("SHIFT_OUT_TIME");
                    rowData[5] = rsTmp.getString("SHIFT_LUNCH_IN");
                    rowData[6] = rsTmp.getString("SHIFT_LUNCH_OUT");
                    rowData[7] = rsTmp.getString("SHIFT_WRK_HRS");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridGatePass() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Shift");
        DataModel.addColumn("Designation");
        DataModel.addColumn("GP Date");
        DataModel.addColumn("Nature of Work");
        DataModel.addColumn("Leaving Time");
        DataModel.addColumn("Arrival Time");
        DataModel.addColumn("Total Time");
        DataModel.addColumn("Remark");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateGatePass() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridGatePass(); //clear existing content of table
            ResultSet rsTmp;


            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                cndtn += " AND GP_EMP_DEPT= '" + cmbDept.getSelectedItem() + "' ";
            }

            if (!cmbMonth.getSelectedItem().equals("Select")) {
                cndtn += " AND MONTH(GP_DATE)= " + cmbMonth.getSelectedIndex() + " ";
            }
            if (!txtYear.getText().trim().equals("")) {
                cndtn += " AND YEAR(GP_DATE)= '" + txtYear.getText().trim() + "' ";
            }
            if (!txtFromDate.getText().trim().equals("")) {
                cndtn += " AND GP_DATE>= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "'";
            }
            if (!txtToDate.getText().trim().equals("")) {
                cndtn += " AND GP_DATE<= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM SDMLATTPAY.GATEPASS_ENTRY " + cndtn + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("GP_EMP_NO");
                    rowData[2] = rsTmp.getString("GP_EMP_NAME");
                    rowData[3] = rsTmp.getString("GP_EMP_DEPT");
                    rowData[4] = rsTmp.getString("GP_EMP_SHIFT");
                    rowData[5] = rsTmp.getString("GP_EMP_DESN");
                    rowData[6] = EITLERPGLOBAL.formatDate(rsTmp.getString("GP_DATE"));
                    rowData[7] = rsTmp.getString("GP_NATURE_OF_WORK");
                    rowData[8] = rsTmp.getString("GP_TOL");
                    rowData[9] = rsTmp.getString("GP_TOA");
                    rowData[10] = rsTmp.getString("GP_TOT_HOURS");
                    rowData[11] = rsTmp.getString("GP_REMARKS");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridLeaveAvail() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Leave Type");
        DataModel.addColumn("From Date");
        DataModel.addColumn("To Date");
        DataModel.addColumn("Days");
        DataModel.addColumn("Mention Time");
        DataModel.addColumn("Remark");
        DataModel.addColumn("Category");
        DataModel.addColumn("Sub Category");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateLeaveAvail() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridLeaveAvail(); //clear existing content of table
            ResultSet rsTmp;


//            if (!cmbMonth.getSelectedItem().equals("Select")) {
//                cndtn += " AND " + cmbMonth.getSelectedIndex() + " >= MONTH(LVT_FROMDATE) AND " + cmbMonth.getSelectedIndex() + " <= MONTH(LVT_TODATE) ";
//            }
//            if (!txtYear.getText().trim().equals("")) {
//                cndtn += " AND '" + txtYear.getText().trim() + "' >= YEAR(LVT_FROMDATE) AND '" + txtYear.getText().trim() + "' <= YEAR(LVT_TODATE) ";
//            }
            
//            if (!cmbMonth.getSelectedItem().equals("Select") && !txtYear.getText().trim().equals("")) {
//                cndtn += " AND ((MONTH(LVT_FROMDATE)= " + cmbMonth.getSelectedIndex() + "  AND YEAR(LVT_FROMDATE)= '" + txtYear.getText().trim() + "' ) OR (MONTH(LVT_TODATE)= " + cmbMonth.getSelectedIndex() + "  AND YEAR(LVT_TODATE)= '" + txtYear.getText().trim() + "' )) ";
//            }
            
            if (!txtYear.getText().trim().equals("")) {
                cndtn += " AND LVT_YEAR = '" + txtYear.getText().trim() + "' ";
            }
            
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + cmbDept.getSelectedIndex() + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + cmbMainCategory.getSelectedIndex() + " ";
            }


            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT * FROM SDMLATTPAY.ATT_LEAVE_TRN WHERE LVT_LEAVE_TYPE=3 "
                    + "AND COALESCE(AMEND_TYPE,'') NOT IN ('DELETE') " + cndtn + " ) AS LA "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON LA.LVT_PAY_EMPID=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY WHERE 1=1 " + grp_cndtn + " "
                    + "ORDER BY LVT_PAY_EMPID,LVT_FROMDATE DESC ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("LVT_PAY_EMPID");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("LVT_LEAVE_CODE");
                    rowData[5] = EITLERPGLOBAL.formatDate(rsTmp.getString("LVT_FROMDATE"));
                    rowData[6] = EITLERPGLOBAL.formatDate(rsTmp.getString("LVT_TODATE"));
                    rowData[7] = rsTmp.getString("LVT_DAYS");
                    rowData[8] = rsTmp.getString("LVT_MENTION_TIME");
                    rowData[9] = rsTmp.getString("LVT_REMARK");
                    rowData[10] = rsTmp.getString("SECNAME");
                    rowData[11] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private void FormatGridLeaveBalance() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("Type");
        DataModel.addColumn("Opening");
        DataModel.addColumn("Credit");
        DataModel.addColumn("Avail");
        DataModel.addColumn("Lapse");
        DataModel.addColumn("Encash");
        DataModel.addColumn("Closing");
        DataModel.addColumn("Category");
        DataModel.addColumn("Sub Category");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateLeaveBalance() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridLeaveBalance(); //clear existing content of table
            ResultSet rsTmp;

            
            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                grp_cndtn += " AND EMP_DEPARTMENT= " + cmbDept.getSelectedIndex() + " ";
            }
            if (!cmbMainCategory.getSelectedItem().equals("Select Main Category")) {
                grp_cndtn += " AND EMP_MAIN_CATEGORY= " + cmbMainCategory.getSelectedIndex() + " ";
            }
            

            String strSQL = "";

            strSQL = "SELECT * FROM ( SELECT * FROM SDMLATTPAY.ATT_LEAVE_BALANCE WHERE 1=1 " + cndtn + " ) AS LB "
                    + "LEFT JOIN ( SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT,EMP_MAIN_CATEGORY,EMP_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST ) AS EMP "
                    + "ON LB.LVBAL_PAYEMPCD=EMP.PAY_EMP_NO "
                    + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT "
                    + "ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                    + "LEFT JOIN ( SELECT SECID,NAME AS SECNAME FROM SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER ) AS SEC "
                    + "ON SEC.SECID=EMP.EMP_MAIN_CATEGORY "
                    + "LEFT JOIN ( SELECT CTGID,NAME AS CTGNAME FROM SDMLATTPAY.ATT_CATEGORY_MASTER ) AS CTG "
                    + "ON CTG.CTGID=EMP.EMP_CATEGORY WHERE 1=1 " + grp_cndtn + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("LVBAL_PAYEMPCD");
                    rowData[2] = rsTmp.getString("EMP_NAME");
                    rowData[3] = rsTmp.getString("DPTNAME");
                    rowData[4] = rsTmp.getString("LVBAL_LEAVE_CD");
                    rowData[5] = rsTmp.getString("LVBAL_OPENING");
                    rowData[6] = rsTmp.getString("LVBAL_CREDIT");
                    rowData[7] = rsTmp.getString("LVBAL_AVAIL");
                    rowData[8] = rsTmp.getString("LVBAL_LAPSE");
                    rowData[9] = rsTmp.getString("LVBAL_ENCASH");
                    rowData[10] = rsTmp.getString("LVBAL_CLOSING");        
                    rowData[11] = rsTmp.getString("SECNAME");
                    rowData[12] = rsTmp.getString("CTGNAME");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private boolean DateValidate() {
        if (txtFromDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(FrmRptLeaveApproveStatus.this, "Please Enter From Date");
            txtFromDate.setText("");
            return false;
        }
        if (data.getIntValueFromDB("SELECT DATEDIFF('" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "',CURDATE()) FROM DUAL") > 0) {
            JOptionPane.showMessageDialog(FrmRptLeaveApproveStatus.this, "Please Enter Less than or Equals Current Date in From Date");
            txtFromDate.setText("");
            return false;
        }

        if (txtToDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(FrmRptLeaveApproveStatus.this, "Please Enter To Date");
            txtToDate.setText("");
            return false;
        }
        if (data.getIntValueFromDB("SELECT DATEDIFF('" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "','" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "') FROM DUAL") < 0) {
            JOptionPane.showMessageDialog(FrmRptLeaveApproveStatus.this, "Please Enter Greater Date than From Date in To Date");
            txtToDate.setText("");
            return false;
        }

        return true;
    }

    private boolean MonthYearValidate() {
        if (cmbMonth.getSelectedItem().equals("Select")) {
            JOptionPane.showMessageDialog(FrmRptLeaveApproveStatus.this, "Please Select Month");
            return false;
        }
        if (txtYear.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(FrmRptLeaveApproveStatus.this, "Please Enter Year");
            txtYear.setText("");
            return false;
        }
        if (txtYear.getText().trim().length() != 4) {
            JOptionPane.showMessageDialog(FrmRptLeaveApproveStatus.this, "Please Enter Valid Year");
            txtYear.setText("");
            return false;
        }
        if (!EITLERPGLOBAL.IsNumber(txtYear.getText().trim())) {
            JOptionPane.showMessageDialog(FrmRptLeaveApproveStatus.this, "Please Enter Valid Year");
            txtYear.setText("");
            return false;
        }

        return true;
    }
}
