 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SDMLATTPAY.leave;

import EITLERP.*;
import EITLERP.FeltSales.common.MailNotification;
import EITLERP.Finance.UtilFunctions;
import java.awt.Color;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;

//import java.awt.Color;
import javax.swing.*;
//import java.text.DateFormat;
//import java.text.SimpleDateFormat;
//import java.util.HashMap;

/**
 *
 * @author root
 *
 */
public class FrmLeaveApplication extends javax.swing.JApplet {

    private int EditMode = 0;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbModuleModel;
    private EITLTableModel tblDetailDataModel;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelBalance;
    private EITLTableModel DataModelLeaves;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
    //private EITLTableCellRenderer CellAlign = new EITLTableCellRenderer();
    //private EITLTableCellRenderer CellAlign1 = new EITLTableCellRenderer();
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;
    private int ModuleId = 811;
    private String DOC_NO = "";
    private clsLeaveApplication leaveapplication;
    private EITLComboModel cmbSendToModel;

    private int mlstrc;
    private String menusele = "";
    String category = "";

    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    DateFormat dateForDB = new SimpleDateFormat("yyyy-MM-dd");

    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    public frmPendingApprovals frmPA;

    @Override
    public void init() {

        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        initComponents();
        docdate1.setVisible(false);
        GenerateCombos();

        GenerateFromCombo();
        //GenerateHierarchyCombo();

        SetMenuForRights();
        try {
            DefaultSettings();
        } catch (SQLException ex) {

        }
        FormatGridBal();
        FormatGridLeave();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();

        leaveapplication = new clsLeaveApplication();
        boolean load = leaveapplication.LoadData(EITLERPGLOBAL.gCompanyID);
        if (load) {
            DisplayData();
            MoveLast();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + leaveapplication.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        SetFields(false);
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        SetupApproval();
        btnSendMail.setVisible(false);

    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    public void DefaultSettings() throws SQLException {

        //String data = toString();
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        clearFields();
        lblTitle.setBackground(new Color(0, 102, 153));
        lblTitle.setForeground(Color.WHITE);

    }

    private void clearFields() {

        lbldoc.setText("");
        docdate.setText("");
        lbldept.setText("");
        txtempcd.setText("");
        lblEmpname.setText("");
        txtReason.setText("");
        lblDesn.setText("");
        lblShift.setText("");
        lbldaydiff.setText("");

        FormatGrid();
        FormatGridBal();
        FormatGridLeave();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        FormatGridHS();
        //cmbmnth.setSelectedItem(data.getStringValueFromDB("SELECT MONTH(CURDATE()) FROM DUAL"));

    }

    private void DisplayData() {

        //=========== Color Indication ===============//
        try {

            if (leaveapplication.getAttribute("APPROVED").getInt() == 1) {
                lblTitle.setBackground(Color.BLUE);
                lblTitle.setForeground(Color.WHITE);
            }

            if (leaveapplication.getAttribute("APPROVED").getInt() != 1) {
                lblTitle.setBackground(Color.GRAY);
                lblTitle.setForeground(Color.BLACK);
            }

            if (leaveapplication.getAttribute("CANCELED").getInt() == 1) {
                lblTitle.setBackground(Color.RED);
                lblTitle.setForeground(Color.BLACK);
            }
        } catch (Exception c) {

            c.printStackTrace();
        }

        //============================================//
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleId)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        clearFields();
        try {
            DOC_NO = leaveapplication.getAttribute("LVT_DOC_NO").getString();
            lblTitle.setText("LEAVE APPLICATION FORM  - " + DOC_NO);
            lbldoc.setText(DOC_NO);
            docdate.setText(EITLERPGLOBAL.formatDate(leaveapplication.getAttribute("LVT_DOC_DATE").getString()));
            txtempcd.setText(leaveapplication.getAttribute("LVT_PAY_EMPID").getString());
            lblEmpname.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='" + leaveapplication.getAttribute("LVT_PAY_EMPID").getString() + "'"));
            lbldept.setText(data.getStringValueFromDB("SELECT DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='" + leaveapplication.getAttribute("LVT_PAY_EMPID").getString() + "'"));
            lblDesn.setText(data.getStringValueFromDB("SELECT DESIGNATION FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='" + leaveapplication.getAttribute("LVT_PAY_EMPID").getString() + "'"));
            lblShift.setText(data.getStringValueFromDB("SELECT SHIFT_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='" + leaveapplication.getAttribute("LVT_PAY_EMPID").getString() + "'"));
            //lblEmpname.setText(leaveapplication.getAttribute("GP_EMP_NAME").getString()); 
            //lbldept.setText(leaveapplication.getAttribute("GP_EMP_DEPT").getString()); 
            //String shiftId=data.getStringValueFromDB("SELECT EMP_SHIFT_ID FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'");
            //String mainCategory=data.getStringValueFromDB("SELECT EMP_MAIN_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'");            
            //lblDesn.setText(leaveapplication.getAttribute("GP_EMP_DESN").getString());            
            txtReason.setText(leaveapplication.getAttribute("LVT_REMARK").getString());
            //System.out.println((int) leaveapplication.getAttribute("HIERARCHY_ID").getVal());            
            //EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) leaveapplication.getAttribute("HIERARCHY_ID").getVal());
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) leaveapplication.getAttribute("HIERARCHY_ID").getVal());
            //System.out.println("Mid of Display "+EITLERPGLOBAL.getComboCode(cmbHierarchy));
            FormatGrid();

            //Now Generate Table
            for (int i = 1; i <= leaveapplication.hmcolLeaveDetails.size(); i++) {
                clsLeaveApplicationDetails objcolLeaveDetails = (clsLeaveApplicationDetails) leaveapplication.hmcolLeaveDetails.get(Integer.toString(i));

                Object[] rowData = new Object[8];
                rowData[0] = Integer.toString(i);
                rowData[1] = objcolLeaveDetails.getAttribute("LVT_LEAVE_CODE").getString();
                rowData[2] = EITLERPGLOBAL.formatDate(objcolLeaveDetails.getAttribute("LVT_FROMDATE").getString());
                rowData[3] = EITLERPGLOBAL.formatDate(objcolLeaveDetails.getAttribute("LVT_TODATE").getString());
                rowData[4] = objcolLeaveDetails.getAttribute("LVT_MENTION_TIME").getString();
                rowData[5] = objcolLeaveDetails.getAttribute("LVT_DAYS").getDouble();
                //rowData[6] = objcolLeaveDetails.getAttribute("LVT_REMARK").getString();

                tblDetailDataModel.addRow(rowData);
            }

            updateTotalDays();
        } catch (Exception e) {
            e.printStackTrace();
        }

        displayLeaves(data.getStringValueFromDB("SELECT (CONCAT(MONTH(CURDATE())-1,',',MONTH(CURDATE()))) FROM DUAL"), data.getStringValueFromDB("SELECT YEAR(CURDATE()) FROM DUAL"));

        try {
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();
            String DocNo = leaveapplication.getAttribute("LVT_DOC_NO").getString();
            List = SDMLATTPAY.ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, ModuleId, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];
                //JOptionPane.showMessageDialog(null, "USER ID : "+ObjFlow.getAttribute("USER_ID").getVal());
                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelApprovalStatus.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridHS();
            //HashMap History = leaveapplication.getHistoryList(EITLERPGLOBAL.gCompanyID + "", DocNo);
            HashMap History = clsLeaveApplication.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for (int i = 1; i <= History.size(); i++) {
                clsLeaveApplication ObjHistory = (clsLeaveApplication) History.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (long) ObjHistory.getAttribute("UPDATED_BY").getVal());
                //rowData[2] = ObjHistory.getAttribute("ENTRY_DATE").getString();
                rowData[2] = EITLERPGLOBAL.formatDateTime(ObjHistory.getAttribute("ENTRY_DATE").getString());

                String ApprovalStatus = "";

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }
                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }
                rowData[3] = ApprovalStatus;
                rowData[4] = ObjHistory.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjHistory.getAttribute("FROM_IP").getString();
                DataModelUpdateHistory.addRow(rowData);
            }
            //============================================================//
            //setSTATUS();
        } catch (Exception e) {
            e.printStackTrace();
        }
        displayBalance();
        //displayLeaves();
        displayLeaves(data.getStringValueFromDB("SELECT (CONCAT(MONTH(CURDATE())-1,',',MONTH(CURDATE()))) FROM DUAL"), data.getStringValueFromDB("SELECT YEAR(CURDATE()) FROM DUAL"));
        //System.out.println("End of Display "+EITLERPGLOBAL.getComboCode(cmbHierarchy));
    }

    private void FormatGridBal() {
        DataModelBalance = new EITLTableModel();

        tblBalance.removeAll();
        tblBalance.setModel(DataModelBalance);

        //Set the table Readonly
        DataModelBalance.TableReadOnly(true);

        //Add the columns        
        DataModelBalance.addColumn("Type");
        DataModelBalance.addColumn("Opening");
        DataModelBalance.addColumn("Avail");
        DataModelBalance.addColumn("Credit");
        DataModelBalance.addColumn("Lapse");
        DataModelBalance.addColumn("Closing");

        //tblBalance.setAutoResizeMode(tblBalance.AUTO_RESIZE_OFF);
        //tblBalance.getColumnModel().getColumn(0).setMinWidth(50);
        tblBalance.getColumnModel().getColumn(0).setWidth(50);
        tblBalance.getColumnModel().getColumn(1).setWidth(50);
        tblBalance.getColumnModel().getColumn(2).setWidth(50);
        tblBalance.getColumnModel().getColumn(3).setWidth(50);
        //tblBalance.getColumnModel().getColumn(2).setMaxWidth(250);   

    }

    private void FormatGridLeave() {
        DataModelLeaves = new EITLTableModel();

        tblmonthlyleaves.removeAll();
        tblmonthlyleaves.setModel(DataModelLeaves);

        //Set the table Readonly
        DataModelLeaves.TableReadOnly(true);

        //Add the columns        
        DataModelLeaves.addColumn("Date");
        DataModelLeaves.addColumn("1st Half");
        DataModelLeaves.addColumn("2nd Half");
//        DataModelLeaves.addColumn("Credit");
//        DataModelLeaves.addColumn("Lapse");
//        DataModelLeaves.addColumn("Closing");

//        tblmonthlyleaves.setAutoResizeMode(tblBalance.AUTO_RESIZE_OFF);
        //tblmonthlyleaves.getColumnModel().getColumn(0).setMinWidth(50);
        //tblmonthlyleaves.getColumnModel().getColumn(0).setWidth(50);
        //tblmonthlyleaves.getColumnModel().getColumn(1).setWidth(50);
        //tblmonthlyleaves.getColumnModel().getColumn(2).setWidth(50);
        //tblmonthlyleaves.getColumnModel().getColumn(3).setWidth(50);
        //tblmonthlyleaves.getColumnModel().getColumn(2).setMaxWidth(250);   
    }

    private void FormatGridA() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableApprovalStatus.setAutoResizeMode(TableApprovalStatus.AUTO_RESIZE_OFF);

    }

    private void SetMenuForRights() {
        // --- Add Rights --
        //if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10006, 100061)) { //7008,70081
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10042, 100421)) { //7008,70081
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10042, 100422)) { //7008,70082
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10042, 100423)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10042, 100424)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            //cmdPreview.setEnabled(false);
            //cmdPrint.setEnabled(false);
        }
    }

    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
         if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
         cmbHierarchy.setEnabled(true);
         }else {
         cmbHierarchy.setEnabled(false);
         }*/

        // select hold for default approval
        OpgHold.setSelected(true);

        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        //System.out.println("Before Defualtid "+EITLERPGLOBAL.getComboCode(cmbHierarchy));
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);
        //System.out.println("After Defualtid "+EITLERPGLOBAL.getComboCode(cmbHierarchy));

        EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) leaveapplication.getAttribute("HIERARCHY_ID").getVal());
        if (EditMode == EITLERPGLOBAL.ADD) {
            //lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {

            int FromUserID = SDMLATTPAY.ApprovalFlow.getFromID(EITLERPGLOBAL.gCompanyID, ModuleId, leaveapplication.getAttribute("DOC_NO").getString());
            //lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = SDMLATTPAY.ApprovalFlow.getFromRemarks(EITLERPGLOBAL.gCompanyID, ModuleId, FromUserID, leaveapplication.getAttribute("DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        System.out.println("After Defualtid " + EITLERPGLOBAL.getComboCode(cmbHierarchy));
        GenerateFromCombo();

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (SDMLATTPAY.ApprovalFlow.IsCreator(ModuleId, leaveapplication.getAttribute("DOC_NO").getString() + "")) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void FormatGridHS() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From IP");

        TableUpdateHistory.setAutoResizeMode(TableUpdateHistory.AUTO_RESIZE_OFF);
    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (EITLERPGLOBAL.gNewUserID == SDMLATTPAY.ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "")) {
                List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + (ModuleId));
            } else {
                List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
            }
        }

        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            //System.out.println("Hierarchy Generate:"+aData.Code+ " "+aData.Text);
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = SDMLATTPAY.ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "");
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableColumnModel tcm = TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(90);
        tcm.getColumn(5).setPreferredWidth(90);
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");

        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(2).setPreferredWidth(50);
        tcm.getColumn(3).setPreferredWidth(20);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        Tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        lblStatus1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtempcd = new javax.swing.JTextField();
        cmdNextToTab2 = new javax.swing.JButton();
        docdate = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        lbldoc = new javax.swing.JLabel();
        lbldept = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        lblDesn = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDetail = new javax.swing.JTable();
        btnRemove = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        lbldaydiff = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblBalance = new javax.swing.JTable();
        txtReason = new javax.swing.JTextField();
        lblShift = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblEmpname = new javax.swing.JLabel();
        docdate1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblmonthlyleaves = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        StatusPanel = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        btnSendMail = new javax.swing.JButton();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        Tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        lblStatus1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus1.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(lblStatus1);
        lblStatus1.setBounds(10, 370, 970, 30);

        jLabel1.setText("Employee No.");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(20, 40, 100, 30);

        txtempcd.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtempcd.setText("BRDXXXXXX");
        txtempcd.setEnabled(false);
        txtempcd = new JTextFieldHint(new JTextField(),"Press F1");
        txtempcd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtempcdFocusLost(evt);
            }
        });
        txtempcd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtempcdKeyPressed(evt);
            }
        });
        jPanel1.add(txtempcd);
        txtempcd.setBounds(130, 40, 90, 30);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(860, 340, 120, 30);

        docdate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        docdate.setText("DD/MM/YYYY");
        jPanel1.add(docdate);
        docdate.setBounds(370, 10, 110, 20);

        jLabel11.setText("Leave No.");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(20, 10, 100, 20);

        lbldoc.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbldoc.setText("DocNo");
        jPanel1.add(lbldoc);
        lbldoc.setBounds(130, 10, 100, 20);

        lbldept.setText("Department");
        jPanel1.add(lbldept);
        lbldept.setBounds(130, 80, 170, 20);

        jLabel4.setText("Department");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(24, 75, 90, 30);

        jLabel9.setText("Reason for Leave:");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(0, 110, 140, 30);

        jLabel10.setText("Date");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(270, 10, 90, 20);

        lblDesn.setText("Designation");
        jPanel1.add(lblDesn);
        lblDesn.setBounds(420, 80, 170, 20);

        jLabel8.setText("Designation");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(310, 80, 100, 20);

        tblDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblDetail.setCellSelectionEnabled(true);
        tblDetail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblDetailKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblDetailKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblDetail);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 200, 560, 160);

        btnRemove.setText("Remove");
        btnRemove.setMargin(new java.awt.Insets(1, 1, 1, 1));
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        jPanel1.add(btnRemove);
        btnRemove.setBounds(60, 160, 63, 23);

        btnAdd.setText("Add");
        btnAdd.setMargin(new java.awt.Insets(1, 1, 1, 1));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jPanel1.add(btnAdd);
        btnAdd.setBounds(10, 160, 35, 23);

        jLabel2.setText("Leave Of Month");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(720, 10, 120, 20);

        lbldaydiff.setText("...");
        jPanel1.add(lbldaydiff);
        lbldaydiff.setBounds(360, 170, 60, 20);

        tblBalance.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tblBalance);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(580, 200, 400, 130);

        txtReason.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jPanel1.add(txtReason);
        txtReason.setBounds(150, 120, 220, 21);

        lblShift.setText("Shift");
        jPanel1.add(lblShift);
        lblShift.setBounds(440, 116, 180, 20);

        jLabel5.setText("Shift");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(380, 110, 50, 30);

        lblEmpname.setText("Name");
        jPanel1.add(lblEmpname);
        lblEmpname.setBounds(230, 40, 330, 30);

        docdate1.setText("DD/MM/YYYY");
        jPanel1.add(docdate1);
        docdate1.setBounds(370, 10, 110, 20);

        jPanel5.setBackground(new java.awt.Color(153, 153, 153));
        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(jPanel5);
        jPanel5.setBounds(0, 144, 980, 10);

        jLabel3.setText("Total days:");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(270, 170, 80, 20);

        jLabel6.setText("Leave Balance");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(670, 170, 160, 20);

        tblmonthlyleaves.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tblmonthlyleaves.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(tblmonthlyleaves);

        jPanel1.add(jScrollPane4);
        jScrollPane4.setBounds(640, 40, 290, 100);

        jLabel7.setText("Leave Balance is tentative");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(600, 340, 220, 20);

        Tab.addTab("Detail", jPanel1);

        jPanel2.setLayout(null);

        Tab2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 23, 66, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(90, 20, 180, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 62, 56, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(90, 60, 180, 19);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 95, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(90, 95, 530, 19);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 130, 81, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup5.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgApproveActionPerformed(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        buttonGroup5.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup5.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup5.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(90, 130, 180, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 253, 60, 15);

        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(90, 250, 180, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 292, 60, 15);

        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 290, 570, 19);

        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(450, 340, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(630, 95, 33, 21);

        cmdNextToTab3.setMnemonic('N');
        cmdNextToTab3.setText("Next >>");
        cmdNextToTab3.setToolTipText("Next Tab");
        cmdNextToTab3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab3ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab3);
        cmdNextToTab3.setBounds(560, 340, 102, 25);

        jPanel2.add(Tab2);
        Tab2.setBounds(10, 0, 760, 410);

        Tab.addTab("Approval", jPanel2);

        jPanel3.setLayout(null);

        StatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StatusPanel.setLayout(null);

        jLabel60.setText("Document Approval Status");
        StatusPanel.add(jLabel60);
        jLabel60.setBounds(12, 10, 242, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableApprovalStatus);

        StatusPanel.add(jScrollPane2);
        jScrollPane2.setBounds(0, 40, 694, 120);

        jLabel19.setText("Document Update History");
        StatusPanel.add(jLabel19);
        jLabel19.setBounds(10, 170, 182, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableUpdateHistory);

        StatusPanel.add(jScrollPane6);
        jScrollPane6.setBounds(10, 190, 540, 130);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdViewHistory);
        cmdViewHistory.setBounds(570, 170, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdNormalView);
        cmdNormalView.setBounds(570, 200, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 230, 132, 24);

        txtAuditRemarks.setEnabled(false);
        StatusPanel.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(570, 260, 129, 19);

        jButton5.setText("<<Previous");
        jButton5.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton5);
        jButton5.setBounds(570, 290, 130, 30);

        btnSendMail.setText("Send Mail");
        btnSendMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendMailActionPerformed(evt);
            }
        });
        StatusPanel.add(btnSendMail);
        btnSendMail.setBounds(570, 330, 130, 30);

        jPanel3.add(StatusPanel);
        StatusPanel.setBounds(10, 0, 790, 380);

        Tab.addTab("Status", jPanel3);

        getContentPane().add(Tab);
        Tab.setBounds(0, 80, 1010, 440);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 1020, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("LEAVE APPLICATION FORM");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 1020, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "On State Change SelHierarchyId : "+SelHierarchyID);
        //GenerateSendToCombo();
        GenerateFromCombo();
        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
                OpgFinal.setEnabled(true);
            }
        } else {
            OpgApprove.setEnabled(false);
            OpgApprove.setSelected(false);
        }

        if (clsHierarchy.IsCreator((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgApprove.setEnabled(true);
            OpgReject.setEnabled(false);
            OpgReject.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus1.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "SelHierarchyId : "+SelHierarchyID);
        DOC_NO = lbldoc.getText();
        cmbSendTo.setEnabled(true);
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (SDMLATTPAY.ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "")) {
                cmbSendTo.setEnabled(true);
                txtToRemarks.setEnabled(true);
                txtFromRemarks.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }
        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }

        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(true);
        OpgHold.setSelected(false);
        //txtToRemarks.setEnabled(false);
        if (!OpgApprove.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);

        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {

                if (OpgApprove.isSelected()) {
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    //JOptionPane.showMessageDialog(null, "Module Id :"+ModuleId+", DOC No : "+sorder_no+", User Id : "+ObjUser.getAttribute("USER_ID").getInt()+", New user Id "+SDMLERPGLOBAL.gNewUserID);
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                    // JOptionPane.showMessageDialog(null, "IncludeUser = "+IncludeUser);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = SDMLATTPAY.ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "");
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }
    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged

    }//GEN-LAST:event_OpgApproveItemStateChanged

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus1.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged

    }//GEN-LAST:event_OpgFinalItemStateChanged

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained

    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked


    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged

    }//GEN-LAST:event_OpgHoldItemStateChanged

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained

    }//GEN-LAST:event_OpgHoldFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained

    }//GEN-LAST:event_cmbSendToFocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained

    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed

    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdNextToTab3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab3ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab3ActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained

    }//GEN-LAST:event_Tab2FocusGained

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        String DocNo = txtempcd.getText();
        //leaveapplication.ShowHistory(DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        //leaveapplication.HistoryView = false;
        //leaveapplication.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            txtAuditRemarks.setText((String) TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4));
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText = txtAuditRemarks;
            bigEdit.ShowEdit();
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void TabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabMouseClicked

    }//GEN-LAST:event_TabMouseClicked

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();

    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        // REPORT QUERY : SELECT A.DOC_NO,A.PIECE_NO,A.DL_REMARK,B.PR_MACHINE_NO,B.PR_POSITION_NO,B.PR_LENGTH,B.PR_WIDTH,B.PR_GSM,B.PR_GROUP,B.PR_STYLE,B.PR_SQMTR,B.PR_STYLE,B.PR_SYN_PER,B.PR_PIECE_REMARK,B.PR_PIECE_STAGE,B.PR_PRODUCT_CODE,B.PR_PARTY_CODE,B.PR_PO_NO,B.PR_PO_DATE,B.PR_REFERENCE_DATE,B.PR_ORDER_REMARK,B.PR_ORDER_DATE FROM  PRODUCTION.FELT_SALES_DIVERSION_LIST_APPROVAL A, PRODUCTION.FELT_SALES_PIECE_REGISTER B;
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void txtempcdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtempcdFocusLost
        // TODO add your handling code here:
        //lblEmpname.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'"));
        //lbldept.setText(data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'"));
        if (!txtempcd.getText().trim().equals("") && txtempcd.getText().trim().length() == 9 && data.IsRecordExist("SELECT * FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtempcd.getText().trim().toUpperCase() + "' AND APPROVED=1 AND CANCELED=0")) {
            txtempcd.setText(txtempcd.getText().trim().toUpperCase());
            lblEmpname.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtempcd.getText().trim().toUpperCase() + "'"));
            category = data.getStringValueFromDB("SELECT EMP_MAIN_CATEGORY FROM SDMLATTPAY.EMP_CATEGORY WHERE PAY_EMP_NO='" + txtempcd.getText().trim().toUpperCase() + "'");
            //System.out.println(category);
        } else {
            if (!txtempcd.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Employee No doesn't exist/under approval/not in BRDXXXXXX format.");
            }
            txtempcd.setText("");
            lblEmpname.setText("");
        }

    }//GEN-LAST:event_txtempcdFocusLost

    private void txtempcdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtempcdKeyPressed
        // TODO add your handling code here:
        //System.out.println(docdate.getText().substring(6));
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();
            //aList.SQL = "SELECT PAY_EMP_NO AS EMP_CODE,EMP_NO,EMP_NAME AS NAME FROM SDMLATTPAY.ATTPAY_EMPMST ";
            aList.SQL = "SELECT PAY_EMP_NO AS EMP_CODE,EMP_NO,EMP_NAME AS NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE DATE(EMP_LEFT_DATE) = '0000-00-00'";

            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                txtempcd.setText(aList.ReturnVal);
                //lblEmpname.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'"));
                //lbldept.setText(data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'"));                
                //String shiftId=data.getStringValueFromDB("SELECT EMP_SHIFT_ID FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'");
                //String mainCategory=data.getStringValueFromDB("SELECT EMP_MAIN_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'");            
                //lblDesn.setText(data.getStringValueFromDB("SELECT EMP_DESIGNATION FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'"));                
                lblEmpname.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='" + aList.ReturnVal + "'"));
                lbldept.setText(data.getStringValueFromDB("SELECT DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='" + aList.ReturnVal + "'"));
                lblDesn.setText(data.getStringValueFromDB("SELECT DESIGNATION FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='" + aList.ReturnVal + "'"));
                lblShift.setText(data.getStringValueFromDB("SELECT SHIFT_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='" + aList.ReturnVal + "'"));
                category = data.getStringValueFromDB("SELECT EMP_MAIN_CATEGORY FROM SDMLATTPAY.EMP_CATEGORY WHERE PAY_EMP_NO='" + aList.ReturnVal + "'");
                //System.out.println(category);
                displayBalance();
            //displayLeaves();            
                //displayLeaves(data.getStringValueFromDB("SELECT MONTH(CURDATE()) FROM DUAL"),data.getStringValueFromDB("SELECT YEAR(CURDATE()) FROM DUAL"));  
                displayLeaves(data.getStringValueFromDB("SELECT (CONCAT(MONTH(CURDATE())-1,',',MONTH(CURDATE()))) FROM DUAL"), data.getStringValueFromDB("SELECT YEAR(CURDATE()) FROM DUAL"));

                //System.out.println(txtempcd.getText().substring(3));
            }
        }
    }//GEN-LAST:event_txtempcdKeyPressed

    private void OpgApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgApproveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgApproveActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (!txtempcd.getText().equals("")) {
            Object[] rowData = new Object[9];
//        rowData[0] = Integer.toString(tblDetail.getRowCount() + 1);
//        for(int i=1;i<=tblDetail.getColumnCount();i++){
//            rowData[i] = "";
//        }
            rowData[0] = Integer.toString(tblDetail.getRowCount() + 1);
            rowData[1] = "";
            rowData[2] = "";
            rowData[3] = "";
            rowData[4] = "";
            rowData[5] = "";
            rowData[6] = "";

            tblDetailDataModel.addRow(rowData);

            tblDetail.changeSelection(tblDetail.getRowCount() - 1, 1, false, false);
            tblDetail.requestFocus();
            UpdateSrNo();
        } else {
            JOptionPane.showMessageDialog(this, "Select Employee code first", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        if (tblDetail.getRowCount() > 0) {
            tblDetailDataModel.removeRow(tblDetail.getSelectedRow());
            UpdateSrNo();
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void tblDetailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblDetailKeyPressed
        /*
         if (tblDetail.getSelectedColumn() == 5) {
         String fromdate= tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(),1).toString();
         String todate= tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(),2).toString();
         String type=tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(),3).toString();
         String time=tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(),4).toString();
         System.out.println(fromdate);
         System.out.println(todate);
         System.out.println(type);
         System.out.println(time);        
         //table.getModel().getValueAt(row_index, col_index);
         Calendar cal1 = Calendar.getInstance();
         Calendar cal2 = Calendar.getInstance();
         //SimpleDateFormat myFormat = new SimpleDateFormat("dd/MM/yyyy");
         SimpleDateFormat myFormat    = new SimpleDateFormat("dd/MM/yyyy 00:00:00", Locale.ENGLISH);
         String inputString1 = fromdate +" 00:00:00";        
         String inputString2 = todate +" 00:00:00";

         try {
         Date date1 = myFormat.parse(inputString1);
         Date date2 = myFormat.parse(inputString2);
         cal1.setTime(date1);
         cal2.setTime(date2); 
         long diff = date2.getTime() - date1.getTime();
            
         System.out.println("Days: " + TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS));
            
         float daydiff=daysBetween(cal1, cal2);
            
         if(time.equals("HALF DAY")){
         daydiff+=0.5;
         }
         if(time.equals("FULL DAY")){
         daydiff+=1;
         }
         tblDetail.getModel().setValueAt(daydiff,tblDetail.getSelectedRow(),5);
         System.out.println(daydiff);
         } catch (ParseException e) {
         e.printStackTrace();
         }
        
         }
         */
        //if(EditMode==EITLERPGLOBAL.ADD || EditMode==EITLERPGLOBAL.EDIT){
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            if (tblDetail.getSelectedColumn() == 1) {
                LOV aList = new LOV();
                //aList.SQL = "SELECT PAY_EMP_NO AS EMP_CODE,EMP_NAME AS NAME,EMP_DEPARTMENT AS DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST ";
                //aList.SQL = "SELECT LEAVE_NAME,LEAVE_CD FROM SDMLATTPAY.ATT_LEAVE_MASTER";
                if (EITLERPGLOBAL.gUserDeptID != 28) {
                    aList.SQL = "SELECT LEAVE_NAME,LEAVE_CD FROM SDMLATTPAY.ATT_LEAVE_MASTER WHERE LEAVE_CD IN (\"AL\",\"CL\",\"CO\",\"ES\",\"SL\",\"PL\")";
                } else {
                    aList.SQL = "SELECT LEAVE_NAME,LEAVE_CD FROM SDMLATTPAY.ATT_LEAVE_MASTER WHERE LEAVE_CD IN (\"AL\",\"CL\",\"CO\",\"ES\",\"OD\",\"SL\",\"PL\")";
                }
                aList.ReturnCol = 2;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 1;

                if (aList.ShowLOV()) {
                    tblDetail.getModel().setValueAt(aList.ReturnVal, tblDetail.getSelectedRow(), 1);
                //setText(aList.ReturnVal);                               

                    //String shiftId=data.getStringValueFromDB("SELECT EMP_SHIFT_ID FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'");
                    //String mainCategory=data.getStringValueFromDB("SELECT EMP_MAIN_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'");
                }
            }
        }
        //}
    }//GEN-LAST:event_tblDetailKeyPressed

    private void tblDetailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblDetailKeyReleased
        double clbalance = 0.00, plbalance = 0.00, slbalance = 0.00, cobalance = 0;

        double accumulateddaydiff = 0.00;
        String fromdate = "", todate = "", type = "", time = "";
        Date date1, date2;
        SimpleDateFormat myFormat = new SimpleDateFormat("dd/MM/yyyy 00:00:00", Locale.ENGLISH);
        SimpleDateFormat myFormat1 = new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH);
//       if(tblBalance.getValueAt(0, 5).toString().equals("0.00")){
//           clbalance=0.00;
//       }else{
        clbalance = Double.parseDouble(tblBalance.getValueAt(0, 5).toString());
//       }
//       if(tblBalance.getValueAt(1, 5).toString().equals("0.00")){
//           plbalance=0.00;
//       }else{
        //plbalance=Double.parseDouble(tblBalance.getValueAt(1, 5).toString());

        plbalance = Double.parseDouble(tblBalance.getValueAt(1, 5).toString());
//       }
//       if(tblBalance.getValueAt(2, 5).toString().equals("0.00")){
//           slbalance=0.00;
//       }else{
        slbalance = Double.parseDouble(tblBalance.getValueAt(2, 5).toString());

        cobalance = Double.parseDouble(tblBalance.getValueAt(3, 5).toString());
       //}      

//        System.out.println(clbalance);
//        System.out.println(cobalance);
//        System.out.println(plbalance);
//        System.out.println(slbalance);
        if (tblDetail.getSelectedColumn() == 5) {
            fromdate = tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(), 2).toString();
            todate = tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(), 3).toString();
            type = tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(), 1).toString();
            time = tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(), 4).toString();
//        System.out.println(fromdate);
//        System.out.println(todate);
//        System.out.println(type);
//        System.out.println(time);        
            //table.getModel().getValueAt(row_index, col_index);
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
        //SimpleDateFormat myFormat = new SimpleDateFormat("dd/MM/yyyy");
            //SimpleDateFormat myFormat    = new SimpleDateFormat("dd/MM/yyyy 00:00:00", Locale.ENGLISH);
            String inputString1 = fromdate + " 00:00:00";
            String inputString2 = todate + " 00:00:00";

            try {
                date1 = myFormat.parse(inputString1);
                date2 = myFormat.parse(inputString2);
                cal1.setTime(date1);
                cal2.setTime(date2);
                long diff = date2.getTime() - date1.getTime();

            //System.out.println("Days: " + TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS));
                double daydiff = daysBetween(cal1, cal2);

                if (time.equals("1ST HALF DAY")) {
                    daydiff += 0.5;
                }
                if (time.equals("2ND HALF DAY")) {
                    daydiff += 0.5;
                }
                if (time.equals("FULL DAY")) {
                    daydiff += 1;
                }

                double accumulated = 0.00;
                accumulated = accumulatedDays(type);
                if (type.equals(tblBalance.getModel().getValueAt(0, 0).toString())) {
                    if (daydiff + accumulated > clbalance) {
                        JOptionPane.showMessageDialog(this, "Closing CL " + clbalance + " is not enough for apply " + (daydiff + accumulated), "ERROR", JOptionPane.ERROR_MESSAGE);
                        for (int j = 1; j < tblDetail.getColumnCount(); j++) {
                            tblDetail.getModel().setValueAt("", tblDetail.getSelectedRow(), j);
                        }
                        tblDetail.changeSelection(tblDetail.getSelectedRow(), 1, true, false);
                        tblDetail.requestFocus();
                    } else {
                        tblDetail.getModel().setValueAt(daydiff, tblDetail.getSelectedRow(), 5);
                    }
                } else if (type.equals(tblBalance.getModel().getValueAt(1, 0).toString())) {
                    if (daydiff + accumulated > plbalance) {
                        JOptionPane.showMessageDialog(this, "Closing PL " + plbalance + " is not enough for apply " + (daydiff + accumulated), "ERROR", JOptionPane.ERROR_MESSAGE);
                        for (int j = 1; j < tblDetail.getColumnCount(); j++) {
                            tblDetail.getModel().setValueAt("", tblDetail.getSelectedRow(), j);
                        }
                        tblDetail.changeSelection(tblDetail.getSelectedRow(), 1, true, false);
                        tblDetail.requestFocus();
                    } else {
                        tblDetail.getModel().setValueAt(daydiff, tblDetail.getSelectedRow(), 5);
                    }
                } else if (type.equals(tblBalance.getModel().getValueAt(2, 0).toString())) {
                    if (daydiff + accumulated > slbalance) {
                        JOptionPane.showMessageDialog(this, "Closing SL " + slbalance + " is not enough for apply " + (daydiff + accumulated), "ERROR", JOptionPane.ERROR_MESSAGE);
                        for (int j = 1; j < tblDetail.getColumnCount(); j++) {
                            tblDetail.getModel().setValueAt("", tblDetail.getSelectedRow(), j);
                        }
                        tblDetail.changeSelection(tblDetail.getSelectedRow(), 1, true, false);
                        tblDetail.requestFocus();
                    } else {
                        tblDetail.getModel().setValueAt(daydiff, tblDetail.getSelectedRow(), 5);
                    }
                } else if (type.equals(tblBalance.getModel().getValueAt(3, 0).toString())) {
                    if (daydiff + accumulated > cobalance) {
                        JOptionPane.showMessageDialog(this, "Closing CO " + cobalance + " is not enough for apply " + (daydiff + accumulated), "ERROR", JOptionPane.ERROR_MESSAGE);
                        for (int j = 1; j < tblDetail.getColumnCount(); j++) {
                            tblDetail.getModel().setValueAt("", tblDetail.getSelectedRow(), j);
                        }
                        tblDetail.changeSelection(tblDetail.getSelectedRow(), 1, true, false);
                        tblDetail.requestFocus();
                    } else {
                        tblDetail.getModel().setValueAt(daydiff, tblDetail.getSelectedRow(), 5);
                    }
                } else {
                    tblDetail.getModel().setValueAt(daydiff, tblDetail.getSelectedRow(), 5);
                }
            //System.out.println(daydiff);
                //PL count >3            
                if (category.equals("5") && type.equals("PL") && EITLERPGLOBAL.gUserDeptID != 28) {
                    if (daydiff < 3) {
                        //Single day PL allow on adjusted weekoff start            
                        if (fromdate.equals(todate) && daydiff <= 1) {
                            if (!data.IsRecordExist("SELECT * FROM SDMLATTPAY.ATT_HOLIDAY_WEEKOFF WHERE \n"
                                    + "HW_SUNDAY_PL_ALLOW ='" + EITLERPGLOBAL.formatDateDB(fromdate) + "'")) {

                                JOptionPane.showMessageDialog(this, "Can not allow for Single PL other than Weekoff day.", "ERROR", JOptionPane.ERROR_MESSAGE);
                                for (int j = 1; j < tblDetail.getColumnCount(); j++) {
                                    tblDetail.getModel().setValueAt("", tblDetail.getSelectedRow(), j);
                                }
                                tblDetail.changeSelection(tblDetail.getSelectedRow(), 1, true, false);
                                tblDetail.requestFocus();
                            }
                        } //Single day PL allow on adjusted weekoff end                    
                        else {
                            JOptionPane.showMessageDialog(this, "PL must be >= 3 days \nFor Staff", "ERROR", JOptionPane.ERROR_MESSAGE);
                            for (int j = 1; j < tblDetail.getColumnCount(); j++) {
                                tblDetail.getModel().setValueAt("", tblDetail.getSelectedRow(), j);
                            }
                            tblDetail.changeSelection(tblDetail.getSelectedRow(), 1, true, false);
                            tblDetail.requestFocus();
                        }
                    }
                }
            } catch (ParseException e) {
                e.printStackTrace();
            }
     //updateTotalDays();   

        }
        if (tblDetail.getSelectedColumn() == 4) {
            if (!tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(), 2).equals(tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(), 3))) {
                //tblDetail.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(cmbDayType));            
                tblDetail.setValueAt("FULL DAY", tblDetail.getSelectedRow(), 4);

            }
        }
        if (tblDetail.getSelectedColumn() == 5) {
            updateTotalDays();
        }

        if (tblDetail.getSelectedColumn() == 3) {
            fromdate = tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(), 2).toString();
            String leavetype = tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(), 1).toString();
            displayLeaves(fromdate);
            //String str="SELECT COUNT(*) FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE LVT_PAY_EMPID='"+txtempcd.getText()+"' AND '"+EITLERPGLOBAL.formatDateDB(fromdate)+"' BETWEEN LVT_FROMDATE AND LVT_TODATE";
            String str = "SELECT COUNT(*) FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE LVT_PAY_EMPID='" + txtempcd.getText() + "' AND LVT_LEAVE_CODE='" + leavetype + "' AND '" + EITLERPGLOBAL.formatDateDB(fromdate) + "' BETWEEN LVT_FROMDATE AND LVT_TODATE AND LVT_DOC_NO!='" + lbldoc.getText().toString() + "' AND CANCELED=0";
//System.out.println(str);
            int count = data.getIntValueFromDB(str);
            //System.out.println("check fromdate "+count);
            if (count > 0) {
                JOptionPane.showMessageDialog(this, "1. Record already exists! \nFrom date :" + fromdate, "ERROR", JOptionPane.ERROR_MESSAGE);
                for (int j = 1; j < tblDetail.getColumnCount(); j++) {
                    tblDetail.getModel().setValueAt("", tblDetail.getSelectedRow(), j);
                }
                tblDetail.changeSelection(tblDetail.getSelectedRow(), 1, true, false);
                tblDetail.requestFocus();
            }

            for (int i = 0; i < tblDetail.getRowCount() - 1; i++) {
                if (i != tblDetail.getSelectedRow()) {
                    if (leavetype.equals(tblDetail.getValueAt(i, 1)) && fromdate.equals(tblDetail.getValueAt(i, 2)) && todate.equals(tblDetail.getValueAt(i, 3))) {
                        //if(fromdate.equals(tblDetail.getValueAt(i, 2)) && todate.equals(tblDetail.getValueAt(i, 3)) ){
                        JOptionPane.showMessageDialog(this, "2. Record already exists! \n From date: " + fromdate + " to date: " + todate + " for type " + tblDetail.getValueAt(i, 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                        for (int j = 1; j < tblDetail.getColumnCount(); j++) {
                            tblDetail.getModel().setValueAt("", tblDetail.getSelectedRow(), j);
                        }
                        tblDetail.changeSelection(tblDetail.getSelectedRow(), 1, true, false);
                        tblDetail.requestFocus();
                    }
                }
            }

        }
        if (tblDetail.getSelectedColumn() == 4) {
            fromdate = tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(), 2).toString();
            todate = tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(), 3).toString();
            type = tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(), 1).toString().trim();

            //int count = data.getIntValueFromDB("SELECT COUNT(*) FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE LVT_PAY_EMPID='" + txtempcd.getText() + "' "
            //        + " AND LVT_LEAVE_CODE='" + type + "' AND LVT_FROMDATE='" + EITLERPGLOBAL.formatDateDB(fromdate) + "' AND LVT_TODATE='" + EITLERPGLOBAL.formatDateDB(todate) + "'");
            //int count=data.getIntValueFromDB("SELECT COUNT(*) FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE LVT_PAY_EMPID='"+txtempcd.getText()+"' AND '"+EITLERPGLOBAL.formatDateDB(fromdate)+"' BETWEEN LVT_FROMDATE AND LVT_TODATE");
            //int count1=data.getIntValueFromDB("SELECT COUNT(*) FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE LVT_PAY_EMPID='"+txtempcd.getText()+"' AND '"+EITLERPGLOBAL.formatDateDB(todate)+"' BETWEEN LVT_FROMDATE AND LVT_TODATE");
            int count1 = data.getIntValueFromDB("SELECT COUNT(*) FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE LVT_PAY_EMPID='" + txtempcd.getText() + "' AND LVT_LEAVE_CODE='" + type + "'  AND '" + EITLERPGLOBAL.formatDateDB(todate) + "' BETWEEN LVT_FROMDATE AND LVT_TODATE AND LVT_DOC_NO!='" + lbldoc.getText().toString() + "'  AND CANCELED=0");
            //System.out.println("check todate "+count1);
            if (count1 > 0) {
                JOptionPane.showMessageDialog(this, "3. Record already exists! \nTo date :" + todate, "ERROR", JOptionPane.ERROR_MESSAGE);
                for (int j = 1; j < tblDetail.getColumnCount(); j++) {
                    tblDetail.getModel().setValueAt("", tblDetail.getSelectedRow(), j);
                }
                tblDetail.changeSelection(tblDetail.getSelectedRow(), 1, true, false);
                tblDetail.requestFocus();
            }

            //for(int i=0;i<tblDetail.getRowCount();i++){
            for (int i = 0; i < tblDetail.getRowCount() - 1; i++) {
                if (i != tblDetail.getSelectedRow()) {
                    if (fromdate.equals(tblDetail.getValueAt(i, 2)) && (tblDetail.getValueAt(tblDetail.getSelectedRow(), 1).equals("CO"))) {
                        if (fromdate.equals(tblDetail.getValueAt(i, 2)) && (tblDetail.getValueAt(i, 1).equals("CO") || tblDetail.getValueAt(i, 1).equals("PL"))) {
                            JOptionPane.showMessageDialog(this, "4. Record already exists! \n From date: " + fromdate + " for type " + tblDetail.getValueAt(i, 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                            for (int j = 1; j < tblDetail.getColumnCount(); j++) {
                                tblDetail.getModel().setValueAt("", tblDetail.getSelectedRow(), j);
                            }
                            tblDetail.changeSelection(tblDetail.getSelectedRow(), 1, true, false);
                            tblDetail.requestFocus();
                        }
                    } else {
                        if (fromdate.equals(tblDetail.getValueAt(i, 2)) && (tblDetail.getValueAt(i, 1).equals("SL") || tblDetail.getValueAt(i, 1).equals("CL") || tblDetail.getValueAt(i, 1).equals("PL"))) {
                            JOptionPane.showMessageDialog(this, "4. Record already exists! \n From date: " + fromdate + " for type " + tblDetail.getValueAt(i, 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                            for (int j = 1; j < tblDetail.getColumnCount(); j++) {
                                tblDetail.getModel().setValueAt("", tblDetail.getSelectedRow(), j);
                            }
                            tblDetail.changeSelection(tblDetail.getSelectedRow(), 1, true, false);
                            tblDetail.requestFocus();
                        }

                    }
                //}
                    //if(i!=tblDetail.getSelectedRow()){
                    if (fromdate.equals(tblDetail.getValueAt(i, 3)) && (tblDetail.getValueAt(tblDetail.getSelectedRow(), 1).equals("CO"))) {
                        if (todate.equals(tblDetail.getValueAt(i, 3)) && (tblDetail.getValueAt(i, 1).equals("CO") || tblDetail.getValueAt(i, 1).equals("PL"))) {
                            JOptionPane.showMessageDialog(this, "5. Record already exists! \nTo date: " + todate + " for type " + tblDetail.getValueAt(i, 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                            for (int j = 1; j < tblDetail.getColumnCount(); j++) {
                                tblDetail.getModel().setValueAt("", tblDetail.getSelectedRow(), j);
                            }
                            tblDetail.changeSelection(tblDetail.getSelectedRow(), 1, true, false);
                            tblDetail.requestFocus();
                        }
                    } else {
                        if (todate.equals(tblDetail.getValueAt(i, 3)) && (tblDetail.getValueAt(i, 1).equals("SL") || tblDetail.getValueAt(i, 1).equals("CL") || tblDetail.getValueAt(i, 1).equals("PL"))) {
                            JOptionPane.showMessageDialog(this, "5. Record already exists! \nTo date: " + todate + " for type " + tblDetail.getValueAt(i, 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                            for (int j = 1; j < tblDetail.getColumnCount(); j++) {
                                tblDetail.getModel().setValueAt("", tblDetail.getSelectedRow(), j);
                            }
                            tblDetail.changeSelection(tblDetail.getSelectedRow(), 1, true, false);
                            tblDetail.requestFocus();
                        }
                    }
                    //}
                    try {
                        date1 = myFormat1.parse(fromdate);
                        date2 = myFormat1.parse(todate);
//                    System.out.println(fromdate);
//                    System.out.println(todate);
//                    System.out.println(date1);
//                    System.out.println(date2);
                        if (myFormat1.parse(tblDetail.getValueAt(i, 2).toString()).compareTo(date1) * date1.compareTo(myFormat1.parse(tblDetail.getValueAt(i, 3).toString())) >= 0 && (tblDetail.getValueAt(tblDetail.getSelectedRow(), 1).equals("CO"))) {
                            if (myFormat1.parse(tblDetail.getValueAt(i, 2).toString()).compareTo(date1) * date1.compareTo(myFormat1.parse(tblDetail.getValueAt(i, 3).toString())) >= 0 && (tblDetail.getValueAt(i, 1).equals("CO") || tblDetail.getValueAt(i, 1).equals("PL"))) {
                                JOptionPane.showMessageDialog(this, "6. Record already exists! \nTo date: " + todate + " for type " + tblDetail.getValueAt(i, 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                                for (int j = 1; j < tblDetail.getColumnCount(); j++) {
                                    tblDetail.getModel().setValueAt("", tblDetail.getSelectedRow(), j);
                                }
                                tblDetail.changeSelection(tblDetail.getSelectedRow(), 1, true, false);
                                tblDetail.requestFocus();
                            } else if (myFormat1.parse(tblDetail.getValueAt(i, 2).toString()).compareTo(date2) * date2.compareTo(myFormat1.parse(tblDetail.getValueAt(i, 3).toString())) >= 0 && (tblDetail.getValueAt(i, 1).equals("CO") || tblDetail.getValueAt(i, 1).equals("PL"))) {
                                JOptionPane.showMessageDialog(this, "7. Record already exists! \nTo date: " + todate + " for type " + tblDetail.getValueAt(i, 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                                for (int j = 1; j < tblDetail.getColumnCount(); j++) {
                                    tblDetail.getModel().setValueAt("", tblDetail.getSelectedRow(), j);
                                }
                                tblDetail.changeSelection(tblDetail.getSelectedRow(), 1, true, false);
                                tblDetail.requestFocus();
                            }
                        } else {
                            if (myFormat1.parse(tblDetail.getValueAt(i, 2).toString()).compareTo(date1) * date1.compareTo(myFormat1.parse(tblDetail.getValueAt(i, 3).toString())) >= 0 && (tblDetail.getValueAt(i, 1).equals("SL") || tblDetail.getValueAt(i, 1).equals("CL") || tblDetail.getValueAt(i, 1).equals("PL"))) {
                                JOptionPane.showMessageDialog(this, "6. Record already exists! \nTo date: " + todate + " for type " + tblDetail.getValueAt(i, 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                                for (int j = 1; j < tblDetail.getColumnCount(); j++) {
                                    tblDetail.getModel().setValueAt("", tblDetail.getSelectedRow(), j);
                                }
                                tblDetail.changeSelection(tblDetail.getSelectedRow(), 1, true, false);
                                tblDetail.requestFocus();
                            } else if (myFormat1.parse(tblDetail.getValueAt(i, 2).toString()).compareTo(date2) * date2.compareTo(myFormat1.parse(tblDetail.getValueAt(i, 3).toString())) >= 0 && (tblDetail.getValueAt(i, 1).equals("SL") || tblDetail.getValueAt(i, 1).equals("CL") || tblDetail.getValueAt(i, 1).equals("PL"))) {
                                JOptionPane.showMessageDialog(this, "7. Record already exists! \nTo date: " + todate + " for type " + tblDetail.getValueAt(i, 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                                for (int j = 1; j < tblDetail.getColumnCount(); j++) {
                                    tblDetail.getModel().setValueAt("", tblDetail.getSelectedRow(), j);
                                }
                                tblDetail.changeSelection(tblDetail.getSelectedRow(), 1, true, false);
                                tblDetail.requestFocus();
                            }
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        if (tblDetail.getSelectedColumn() == 3) {
            //System.out.println(tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(),2).toString().substring(0, 2));
            //System.out.println(tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(),2).toString().substring(3, 5));
     /*
             try {
             ResultSet tchkmnth;
             tchkmnth = data.getResult("SELECT MONTH(CURDATE()) AS VLDMONTH FROM DUAL "
             + "UNION ALL "
             + "SELECT CASE WHEN DAY(CURDATE())<=4 THEN MONTH(SUBDATE(CURDATE(),INTERVAL DAY(CURDATE()) DAY)) ELSE 0 END FROM DUAL");
             tchkmnth.first();
             int mvld = 0;
             int mselemnth = Integer.parseInt(tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(),2).toString().substring(3, 5));
             while (!tchkmnth.isAfterLast()) {
             if (mselemnth == tchkmnth.getInt("VLDMONTH")) {
             mvld = 1;
             }
             tchkmnth.next();
             }
             if (mvld == 0) {
             JOptionPane.showMessageDialog(this, "Please Select Valid Month...", "ERROR", JOptionPane.ERROR_MESSAGE);                
             tblDetail.getModel().setValueAt("", tblDetail.getSelectedRow(), 2);
             return;                
             }
             } catch (Exception e) {
             e.printStackTrace();
             }*/
        }

        if (tblDetail.getSelectedColumn() == 4) {
        //System.out.println(tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(),3).toString().substring(0, 2));
            //System.out.println(tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(),3).toString().substring(3, 5));
     /*
             try {
             ResultSet tchkmnth;
             tchkmnth = data.getResult("SELECT MONTH(CURDATE()) AS VLDMONTH FROM DUAL "
             + "UNION ALL "
             + "SELECT CASE WHEN DAY(CURDATE())<=4 THEN MONTH(SUBDATE(CURDATE(),INTERVAL DAY(CURDATE()) DAY)) ELSE 0 END FROM DUAL");
             tchkmnth.first();
             int mvld = 0;
             int mselemnth = Integer.parseInt(tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(),3).toString().substring(3, 5));
             while (!tchkmnth.isAfterLast()) {
             if (mselemnth == tchkmnth.getInt("VLDMONTH")) {
             mvld = 1;
             }
             tchkmnth.next();
             }
             if (mvld == 0) {
             JOptionPane.showMessageDialog(this, "Please Select Valid Month...", "ERROR", JOptionPane.ERROR_MESSAGE);                
             tblDetail.getModel().setValueAt("", tblDetail.getSelectedRow(), 3);
             return;                
             }
             } catch (Exception e) {
             e.printStackTrace();
             }*/
    }//GEN-LAST:event_tblDetailKeyReleased
        if (tblDetail.getSelectedColumn() == 5) {
            String leaveyearfrom = tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(), 2).toString().substring(6);
            String leaveyearto = tblDetail.getModel().getValueAt(tblDetail.getSelectedRow(), 3).toString().substring(6);
            if (!leaveyearfrom.equals("") && !leaveyearto.equals("")) {
                if (!leaveyearfrom.equals(leaveyearto)) {
                    JOptionPane.showMessageDialog(this, "Year of From date and To date must be Same \n Kindly Add remaining leaves of next year in new row. ", "ERROR", JOptionPane.ERROR_MESSAGE);
                    for (int j = 1; j < tblDetail.getColumnCount(); j++) {
                        tblDetail.getModel().setValueAt("", tblDetail.getSelectedRow(), j);
                    }
                    tblDetail.changeSelection(tblDetail.getSelectedRow(), 1, true, false);
                    tblDetail.requestFocus();
                }
            }
        }
    }


    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void btnSendMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendMailActionPerformed
        if (OpgFinal.isSelected()) {
            Mail();
        }
    }//GEN-LAST:event_btnSendMailActionPerformed

    private void MoveFirst() {
        leaveapplication.MoveFirst();
        DisplayData();
    }

    private void UpdateSrNo() {
        int SrCol = tblDetailDataModel.getColFromVariable("SR_NO");
        for (int i = 0; i < tblDetail.getRowCount(); i++) {
            tblDetail.setValueAt(Integer.toString(i + 1), i, SrCol);
        }
    }

    private void MovePrevious() {
        leaveapplication.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        leaveapplication.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        leaveapplication.MoveLast();
        DisplayData();
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "SDMLATTPAY.leave.FrmLeaveApplicationFind", true);
        FrmLeaveApplicationFind ObjLeaveApplicationFind = (FrmLeaveApplicationFind) ObjLoader.getObj();

        if (ObjLeaveApplicationFind.Cancelled == false) {
            if (!leaveapplication.Filter(ObjLeaveApplicationFind.stringFindQuery)) {
                JOptionPane.showMessageDialog(FrmLeaveApplication.this, " No records found.", "Find Leave Application Details", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    public void FindWaiting() {
        leaveapplication.Filter(" DOC_NO IN (SELECT DISTINCT SDMLATTPAY.ATT_LEAVE_ENTRY.LVT_DOC_NO FROM SDMLATTPAY.ATT_LEAVE_ENTRY, SDMLATTPAY.D_COM_DOC_DATA WHERE SDMLATTPAY.ATT_LEAVE_ENTRY.LVT_DOC_NO=SDMLATTPAY.D_COM_DOC_DATA.DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=" + ModuleId + " AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void Add() {

        EditMode = EITLERPGLOBAL.ADD;

        SetFields(true);
        DisableToolbar();

        SetupApproval();
        clearFields();
        EITLERP.FeltSales.common.SelectFirstFree aList = new EITLERP.FeltSales.common.SelectFirstFree();
        aList.ModuleID = ModuleId;
        aList.FirstFreeNo = 317;
        FFNo = aList.FirstFreeNo;
        lbldoc.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        lblTitle.setText("LEAVE APPLICATION - " + lbldoc.getText());
        docdate.setText(EITLERPGLOBAL.getCurrentDate());
        docdate1.setText(EITLERPGLOBAL.getCurrentDateTimeDB());

        //OpgFinal.setSelected(true);
        OpgHold.setSelected(true);
        txtempcd.requestFocus();
    }

    private void FormatGrid() {
        tblDetailDataModel = new EITLTableModel();
        tblDetail.removeAll();

        tblDetail.setModel(tblDetailDataModel);
        tblDetail.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        //Add Columns to it
        tblDetailDataModel.addColumn("Sr. No");
        tblDetailDataModel.addColumn("Type of Leave");
        tblDetailDataModel.addColumn("From Date");
        tblDetailDataModel.addColumn("To Date");
        tblDetailDataModel.addColumn("Time");
        tblDetailDataModel.addColumn("Days");
        tblDetailDataModel.addColumn("Reason");

//            tblDetailDataModel.SetVariable(0, ""); //0 - Read Only
//            tblDetailDataModel.SetVariable(1, "LVT_FROMDATE"); //1
//            tblDetailDataModel.SetVariable(2, "LVT_TODATE");//2
//            tblDetailDataModel.SetVariable(3, "LVT_LEAVE_TYPE");//3
//            tblDetailDataModel.SetVariable(4, ""); //4
//            tblDetailDataModel.SetVariable(5, "");//5
//            tblDetailDataModel.SetVariable(6, ""); //6
        tblDetail.getColumnModel().getColumn(0).setMaxWidth(40);
        tblDetail.getColumnModel().getColumn(4).setMinWidth(90);
        //tblDetail.getColumnModel().getColumn(2).setMaxWidth(250);   
            /*        //Add ComboBox
         JComboBox cmbLeavaType = new JComboBox();

         EITLComboModel cmbLeavaTypeModel = new EITLComboModel();
         cmbLeavaType.removeAllItems();
         cmbLeavaType.setModel(cmbLeavaTypeModel);

         ComboData aData = new ComboData();
         aData.strCode="PL";
         aData.Text="PL";
         //            aData.Code = 1;
         //            aData.Text = "Single";
         cmbLeavaTypeModel.addElement(aData);

         aData = new ComboData();
         aData.strCode = "CL";
         aData.Text = "CL";
         cmbLeavaTypeModel.addElement(aData);

         aData = new ComboData();
         aData.strCode = "SL";
         aData.Text = "SL";
         cmbLeavaTypeModel.addElement(aData);

         //Renderer.setCustomComponent(tblDetailDataModel.getColFromVariable("LVT_LEAVE_TYPE"), "ComboBox");
         //Renderer.setCustomComponent(tblDetailDataModel.getColFromVariable("LVT_LEAVE_TYPE"), cmbLeavaType);

         //tblDetail.getColumnModel().getColumn(tblDetailDataModel.getColFromVariable("LVT_LEAVE_TYPE")).setCellEditor(new DefaultCellEditor(cmbLeavaType));
         tblDetail.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(cmbLeavaType));
         //tblDetail.getColumnModel().getColumn(2).setCellEditor((TableCellEditor) new JTextFieldHint(new JTextField(), "DD/MM/YYYY")); 
         //tblDetail.getColumnModel().getColumn(tblDetailDataModel.getColFromVariable("LVT_FROMDATE")).setCellEditor(new JTextFieldHint(new JTextField(),"DD/MM/YYYY")));
         //txtFromdate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
         */
        JComboBox cmbDayType = new JComboBox();

        EITLComboModel cmbDayTypeModel = new EITLComboModel();
        cmbDayType.removeAllItems();
        cmbDayType.setModel(cmbDayTypeModel);

        ComboData aData = new ComboData();
        aData.strCode = "FULL DAY";
        aData.Text = "FULL DAY";
        cmbDayTypeModel.addElement(aData);

        aData = new ComboData();
        aData.strCode = "1ST HALF DAY";
        aData.Text = "1ST HALF DAY";
        cmbDayTypeModel.addElement(aData);

        aData = new ComboData();
        aData.strCode = "2ND HALF DAY";
        aData.Text = "2ND HALF DAY";
        cmbDayTypeModel.addElement(aData);
            //Renderer.setCustomComponent(tblDetailDataModel.getColFromVariable("LVT_LEAVE_TYPE"), "ComboBox");
        //Renderer.setCustomComponent(tblDetailDataModel.getColFromVariable("LVT_LEAVE_TYPE"), cmbLeavaType);

        tblDetail.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(cmbDayType));
        tblDetailDataModel.SetReadOnly(5);
        tblDetailDataModel.SetReadOnly(1);

    }

    private void Save() {

        if (tblDetail.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(null, "Please enter at least one Leave Detail");
            return;
        }

        try {
            for (int i = 0; i <= tblDetail.getRowCount() - 1; i++) {
                String fromDate = tblDetail.getValueAt(i, 2).toString();
                String toDate = tblDetail.getValueAt(i, 3).toString();
                String time = tblDetail.getValueAt(i, 4).toString();
                String days = tblDetail.getValueAt(i, 5).toString();
                String decimalPart = days.substring(days.indexOf("."));
                if (fromDate.equals(toDate)) {
                    if (decimalPart.equals(".5") && time.equals("FULL DAY")) {
                        JOptionPane.showMessageDialog(this, "Full day is not allowed for Half day!!", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    if (decimalPart.equals(".0") && (time.equals("1ST HALF DAY") || time.equals("2ND HALF DAY"))) {
                        JOptionPane.showMessageDialog(this, "Half day is not allowed for Full day!!", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            for (int i = 0; i <= tblDetail.getRowCount() - 1; i++) {
                String days = tblDetail.getValueAt(i, 5).toString();
                if (days.equals("") || Double.parseDouble(days) == 0) {
                    JOptionPane.showMessageDialog(this, "Days can not be blank or zero. ", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            for (int i = 0; i <= tblDetail.getRowCount() - 1; i++) {
                String fromDate = tblDetail.getValueAt(i, 2).toString();
                String toDate = tblDetail.getValueAt(i, 3).toString();
                int fromMonth = Integer.parseInt(fromDate.substring(3, 5));
                int fromYear = Integer.parseInt(fromDate.substring(6, 10));
                int validMonth1 = data.getIntValueFromDB("SELECT MONTH(CURDATE()) FROM DUAL");
                int validMonth2 = data.getIntValueFromDB("SELECT MONTH(CURDATE()- INTERVAL 1 MONTH) FROM DUAL");
                int validYear1 = data.getIntValueFromDB("SELECT YEAR(CURDATE()) FROM DUAL");
                int validYear2 = data.getIntValueFromDB("SELECT YEAR(CURDATE()- INTERVAL 1 MONTH) FROM DUAL");
                //MONTH(CURDATE()- INTERVAL 1 MONTH)
                //if(fromMonth!=validMonth1 ||  fromMonth!=validMonth2 || ){
                //    
                //}
                if (validYear1 == validYear2) {
                    if (fromYear != validYear2) {
                        JOptionPane.showMessageDialog(this, fromDate + " is not valid date for the year " + validYear2, "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            double totalCLdays = 0, totalPLdays = 0, totalSLdays = 0, totalCOFFdays = 0, totalOthersdays = 0;
            double balanceCLdays = 0, balancePLdays = 0, balanceSLdays = 0, balanceCOFFdays = 0, balanceOthersdays = 0;
            double appliedCLdays = 0, appliedPLdays = 0, appliedSLdays = 0, appliedCOFFdays = 0, appliedOthersdays = 0;
            for (int i = 0; i <= tblDetail.getRowCount() - 1; i++) {

                if (tblDetail.getValueAt(i, 1).toString().equals("CL")) {
                    totalCLdays = totalCLdays + Double.parseDouble(tblDetail.getValueAt(i, 5).toString());
                    balanceCLdays = data.getDoubleValueFromDB("SELECT LVBAL_CLOSING FROM SDMLATTPAY.ATT_LEAVE_BALANCE WHERE LVBAL_PAYEMPCD='" + txtempcd.getText().trim().toUpperCase() + "' AND LVBAL_YEAR IN (SELECT DISTINCT LVBAL_YEAR FROM SDMLATTPAY.ATT_LEAVE_BALANCE\n"
                            + "WHERE LVBAL_YEAR = CASE WHEN EXISTS(SELECT DISTINCT LVBAL_YEAR FROM SDMLATTPAY.ATT_LEAVE_BALANCE WHERE LVBAL_YEAR=YEAR(CURDATE())) THEN YEAR(CURDATE()) \n"
                            + "ELSE (SELECT MAX(LVBAL_YEAR) FROM SDMLATTPAY.ATT_LEAVE_BALANCE) END) AND LVBAL_LEAVE_CD='CL'");
                    //balanceCLdays = data.getDoubleValueFromDB("SELECT LVBAL_CLOSING FROM SDMLATTPAY.ATT_LEAVE_BALANCE WHERE LVBAL_PAYEMPCD='" + txtempcd.getText().trim().toUpperCase() + "' AND LVBAL_YEAR IN (2021) AND LVBAL_LEAVE_CD='CL'");

                    appliedCLdays = data.getDoubleValueFromDB("SELECT COALESCE(SUM(LVT_DAYS),0) AS APPLIED_DAYS FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE LVT_PAY_EMPID='" + txtempcd.getText().trim().toUpperCase() + "' AND "
                            + "APPROVED=0 AND CANCELED=0 AND LVT_LEAVE_CODE='CL'");
                    if (totalCLdays > balanceCLdays + appliedCLdays) {
                        JOptionPane.showMessageDialog(this, "Closing CL " + balanceCLdays + " is not enough for apply " + totalCLdays, "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                } else if (tblDetail.getValueAt(i, 1).toString().equals("PL")) {
                    balancePLdays = data.getDoubleValueFromDB("SELECT LVBAL_CLOSING FROM SDMLATTPAY.ATT_LEAVE_BALANCE WHERE LVBAL_PAYEMPCD='" + txtempcd.getText().trim().toUpperCase() + "' AND LVBAL_YEAR IN (SELECT DISTINCT LVBAL_YEAR FROM SDMLATTPAY.ATT_LEAVE_BALANCE\n"
                            + "WHERE LVBAL_YEAR = CASE WHEN EXISTS(SELECT DISTINCT LVBAL_YEAR FROM SDMLATTPAY.ATT_LEAVE_BALANCE WHERE LVBAL_YEAR=YEAR(CURDATE())) THEN YEAR(CURDATE()) \n"
                            + "ELSE (SELECT MAX(LVBAL_YEAR) FROM SDMLATTPAY.ATT_LEAVE_BALANCE) END) AND LVBAL_LEAVE_CD='PL'");
                    //balancePLdays = data.getDoubleValueFromDB("SELECT LVBAL_CLOSING FROM SDMLATTPAY.ATT_LEAVE_BALANCE WHERE LVBAL_PAYEMPCD='" + txtempcd.getText().trim().toUpperCase() + "' AND LVBAL_YEAR IN (2021) AND LVBAL_LEAVE_CD='PL'");
                    totalPLdays = totalPLdays + Double.parseDouble(tblDetail.getValueAt(i, 5).toString());
                    appliedPLdays = data.getDoubleValueFromDB("SELECT COALESCE(SUM(LVT_DAYS),0) AS APPLIED_DAYS FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE LVT_PAY_EMPID='" + txtempcd.getText().trim().toUpperCase() + "' AND "
                            + "APPROVED=0 AND CANCELED=0 AND LVT_LEAVE_CODE='PL'");

                    if (totalPLdays > balancePLdays + appliedPLdays) {
                        JOptionPane.showMessageDialog(this, "Closing PL " + balancePLdays + " is not enough for apply " + totalPLdays, "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                } else if (tblDetail.getValueAt(i, 1).toString().equals("SL")) {
                    balanceSLdays = data.getDoubleValueFromDB("SELECT LVBAL_CLOSING FROM SDMLATTPAY.ATT_LEAVE_BALANCE WHERE LVBAL_PAYEMPCD='" + txtempcd.getText().trim().toUpperCase() + "' AND LVBAL_YEAR IN (SELECT DISTINCT LVBAL_YEAR FROM SDMLATTPAY.ATT_LEAVE_BALANCE\n"
                            + "WHERE LVBAL_YEAR = CASE WHEN EXISTS(SELECT DISTINCT LVBAL_YEAR FROM SDMLATTPAY.ATT_LEAVE_BALANCE WHERE LVBAL_YEAR=YEAR(CURDATE())) THEN YEAR(CURDATE()) \n"
                            + "ELSE (SELECT MAX(LVBAL_YEAR) FROM SDMLATTPAY.ATT_LEAVE_BALANCE) END) AND LVBAL_LEAVE_CD='SL'");
                    //balanceSLdays = data.getDoubleValueFromDB("SELECT LVBAL_CLOSING FROM SDMLATTPAY.ATT_LEAVE_BALANCE WHERE LVBAL_PAYEMPCD='" + txtempcd.getText().trim().toUpperCase() + "' AND LVBAL_YEAR IN (2021) AND LVBAL_LEAVE_CD='SL'");        
                    totalSLdays = totalSLdays + Double.parseDouble(tblDetail.getValueAt(i, 5).toString());
                    appliedSLdays = data.getDoubleValueFromDB("SELECT COALESCE(SUM(LVT_DAYS),0) AS APPLIED_DAYS FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE LVT_PAY_EMPID='" + txtempcd.getText().trim().toUpperCase() + "' AND "
                            + "APPROVED=0 AND CANCELED=0 AND LVT_LEAVE_CODE='SL'");

                    if (totalSLdays > balanceSLdays + appliedSLdays) {
                        JOptionPane.showMessageDialog(this, "Closing SL " + balanceSLdays + " is not enough for apply " + totalSLdays, "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                } else if (tblDetail.getValueAt(i, 1).toString().equals("CO")) {
                    balanceCOFFdays = data.getDoubleValueFromDB("SELECT LVBAL_CLOSING FROM SDMLATTPAY.ATT_LEAVE_BALANCE WHERE LVBAL_PAYEMPCD='" + txtempcd.getText().trim().toUpperCase() + "' AND LVBAL_YEAR IN (SELECT DISTINCT LVBAL_YEAR FROM SDMLATTPAY.ATT_LEAVE_BALANCE\n"
                            + "WHERE LVBAL_YEAR = CASE WHEN EXISTS(SELECT DISTINCT LVBAL_YEAR FROM SDMLATTPAY.ATT_LEAVE_BALANCE WHERE LVBAL_YEAR=YEAR(CURDATE())) THEN YEAR(CURDATE()) \n"
                            + "ELSE (SELECT MAX(LVBAL_YEAR) FROM SDMLATTPAY.ATT_LEAVE_BALANCE) END) AND LVBAL_LEAVE_CD='CO'");
                    //balanceCOFFdays = data.getDoubleValueFromDB("SELECT LVBAL_CLOSING FROM SDMLATTPAY.ATT_LEAVE_BALANCE WHERE LVBAL_PAYEMPCD='" + txtempcd.getText().trim().toUpperCase() + "' AND LVBAL_YEAR IN (2021) AND LVBAL_LEAVE_CD='CO'");
                    totalCOFFdays = totalCOFFdays + Double.parseDouble(tblDetail.getValueAt(i, 5).toString());
                    appliedCOFFdays = data.getDoubleValueFromDB("SELECT COALESCE(SUM(LVT_DAYS),0) AS APPLIED_DAYS FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE LVT_PAY_EMPID='" + txtempcd.getText().trim().toUpperCase() + "' AND "
                            + "APPROVED=0 AND CANCELED=0 AND LVT_LEAVE_CODE='CO'");
                    if (totalCOFFdays > balanceCOFFdays + appliedCOFFdays) {
                        JOptionPane.showMessageDialog(this, "Closing COFF " + balanceCOFFdays + " is not enough for apply " + totalCOFFdays, "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                } else {
                    totalOthersdays = totalOthersdays + Double.parseDouble(tblDetail.getValueAt(i, 5).toString());
                }
                //totaldays=totaldays+Double.parseDouble(tblDetail.getModel().getValueAt(i,tblDetailDataModel.getColID(5)).toString()); 

            }

        } catch (Exception v) {
            v.printStackTrace();
        }

        try {

            for (int i = 0; i <= tblDetail.getRowCount() - 1; i++) {
                if (data.IsRecordExist("SELECT * FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE (APPROVED=0 OR APPROVED=1) AND CANCELED=0 AND LVT_PAY_EMPID='" + txtempcd.getText().trim() + "' AND LVT_FROMDATE='" + EITLERPGLOBAL.formatDateDB(tblDetail.getValueAt(i, 2).toString()) + "' AND LVT_TODATE='" + EITLERPGLOBAL.formatDateDB(tblDetail.getValueAt(i, 3).toString()) + "' AND LVT_MENTION_TIME='" + tblDetail.getValueAt(i, 4).toString() + "' AND LVT_DOC_NO NOT IN ('" + lbldoc.getText() + "') ")) {
                    String leavedocno = data.getStringValueFromDB("SELECT LVT_DOC_NO FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE (APPROVED=0 OR APPROVED=1) AND CANCELED=0 AND LVT_PAY_EMPID='" + txtempcd.getText().trim() + "' AND LVT_FROMDATE='" + EITLERPGLOBAL.formatDateDB(tblDetail.getValueAt(i, 2).toString()) + "' AND LVT_TODATE='" + EITLERPGLOBAL.formatDateDB(tblDetail.getValueAt(i, 3).toString()) + "' AND LVT_MENTION_TIME='" + tblDetail.getValueAt(i, 4).toString() + "' AND LVT_DOC_NO NOT IN ('" + lbldoc.getText() + "')");
                    String leaveCode = data.getStringValueFromDB("SELECT LVT_LEAVE_CODE FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE (APPROVED=0 OR APPROVED=1) AND CANCELED=0 AND LVT_PAY_EMPID='" + txtempcd.getText().trim() + "' AND LVT_FROMDATE='" + EITLERPGLOBAL.formatDateDB(tblDetail.getValueAt(i, 2).toString()) + "' AND LVT_TODATE='" + EITLERPGLOBAL.formatDateDB(tblDetail.getValueAt(i, 3).toString()) + "' AND LVT_MENTION_TIME='" + tblDetail.getValueAt(i, 4).toString() + "' AND LVT_DOC_NO NOT IN ('" + lbldoc.getText() + "')");
                    JOptionPane.showMessageDialog(this, "You are applying " + leaveCode + " for same day from " + tblDetail.getValueAt(i, 2).toString() + " to " + tblDetail.getValueAt(i, 3).toString() + "for " + tblDetail.getValueAt(i, 4).toString() + " with other leave application No " + leavedocno, "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            for (int i = 0; i <= tblDetail.getRowCount() - 1; i++) {
                if (tblDetail.getValueAt(i, 1).toString().equals("CL")) {

                    double daydifference = Double.parseDouble(tblDetail.getValueAt(i, 5).toString());
                    String time = tblDetail.getValueAt(i, 4).toString();
                    if ((daydifference - (long) daydifference) == 0.5) {

                        if (data.IsRecordExist("SELECT * FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE APPROVED=1 AND CANCELED=0 AND (LVT_LEAVE_CODE='SL' OR LVT_LEAVE_CODE='PL')  AND LVT_DAYS LIKE '%.50' AND LVT_PAY_EMPID='" + txtempcd.getText().trim() + "' AND LVT_FROMDATE='" + EITLERPGLOBAL.formatDateDB(tblDetail.getValueAt(i, 2).toString()) + "' AND LVT_TODATE='" + EITLERPGLOBAL.formatDateDB(tblDetail.getValueAt(i, 3).toString()) + "'")) {
                            String leavedocno = data.getStringValueFromDB("SELECT LVT_DOC_NO FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE APPROVED=1 AND CANCELED=0 AND (LVT_LEAVE_CODE='SL' OR LVT_LEAVE_CODE='PL') AND LVT_DAYS LIKE '%.50' AND LVT_PAY_EMPID='" + txtempcd.getText().trim() + "' AND LVT_FROMDATE='" + EITLERPGLOBAL.formatDateDB(tblDetail.getValueAt(i, 2).toString()) + "' AND LVT_TODATE='" + EITLERPGLOBAL.formatDateDB(tblDetail.getValueAt(i, 3).toString()) + "'");
                            JOptionPane.showMessageDialog(this, "You are applying CL and SL or PL for same day from " + tblDetail.getValueAt(i, 2).toString() + " to " + tblDetail.getValueAt(i, 3).toString() + " with other leave application No " + leavedocno, "ERROR", JOptionPane.ERROR_MESSAGE);
                            return;
                        }

                        for (int j = 0; j <= tblDetail.getRowCount() - 1; j++) {
                            if (tblDetail.getValueAt(j, 1).toString().equals("SL") || tblDetail.getValueAt(j, 1).toString().equals("PL")) {
                                if (tblDetail.getValueAt(i, 2).toString().equals(tblDetail.getValueAt(j, 2).toString()) && tblDetail.getValueAt(i, 3).toString().equals(tblDetail.getValueAt(j, 3).toString())) {
                                    JOptionPane.showMessageDialog(this, "You are applying CL and SL or PL for same day from " + tblDetail.getValueAt(i, 2).toString() + " to " + tblDetail.getValueAt(i, 3).toString(), "ERROR", JOptionPane.ERROR_MESSAGE);
                                    return;
                                }
                            }
                        }
                    }
                }
            }
            for (int i = 0; i <= tblDetail.getRowCount() - 1; i++) {
                if (tblDetail.getValueAt(i, 1).toString().equals("SL")) {

                    double daydifference = Double.parseDouble(tblDetail.getValueAt(i, 5).toString());
                    String time = tblDetail.getValueAt(i, 4).toString();
                    if ((daydifference - (long) daydifference) == 0.5) {
                        if (data.IsRecordExist("SELECT * FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE APPROVED=1 AND CANCELED=0 AND (LVT_LEAVE_CODE='CL' OR LVT_LEAVE_CODE='PL')  AND LVT_DAYS LIKE '%.50' AND LVT_PAY_EMPID='" + txtempcd.getText().trim() + "' AND LVT_FROMDATE='" + EITLERPGLOBAL.formatDateDB(tblDetail.getValueAt(i, 2).toString()) + "' AND LVT_TODATE='" + EITLERPGLOBAL.formatDateDB(tblDetail.getValueAt(i, 3).toString()) + "'")) {
                            String leavedocno = data.getStringValueFromDB("SELECT LVT_DOC_NO FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE APPROVED=1 AND CANCELED=0 AND (LVT_LEAVE_CODE='CL' OR LVT_LEAVE_CODE='PL') AND LVT_DAYS LIKE '%.50' AND LVT_PAY_EMPID='" + txtempcd.getText().trim() + "' AND LVT_FROMDATE='" + EITLERPGLOBAL.formatDateDB(tblDetail.getValueAt(i, 2).toString()) + "' AND LVT_TODATE='" + EITLERPGLOBAL.formatDateDB(tblDetail.getValueAt(i, 3).toString()) + "'");
                            JOptionPane.showMessageDialog(this, "You are applying SL and CL or PL for same day from " + tblDetail.getValueAt(i, 2).toString() + " to " + tblDetail.getValueAt(i, 3).toString() + " with other leave application No " + leavedocno, "ERROR", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        for (int j = 0; j <= tblDetail.getRowCount() - 1; j++) {
                            if (tblDetail.getValueAt(j, 1).toString().equals("CL") || tblDetail.getValueAt(j, 1).toString().equals("PL")) {
                                if (tblDetail.getValueAt(i, 2).toString().equals(tblDetail.getValueAt(j, 2).toString()) && tblDetail.getValueAt(i, 3).toString().equals(tblDetail.getValueAt(j, 3).toString())) {
                                    JOptionPane.showMessageDialog(this, "You are applying SL and CL or PL for same day from " + tblDetail.getValueAt(i, 2).toString() + " to " + tblDetail.getValueAt(i, 3).toString(), "ERROR", JOptionPane.ERROR_MESSAGE);
                                    return;
                                }
                            }
                        }
                    }

                }
            }
            for (int i = 0; i <= tblDetail.getRowCount() - 1; i++) {
                if (tblDetail.getValueAt(i, 1).toString().equals("PL")) {

                    double daydifference = Double.parseDouble(tblDetail.getValueAt(i, 5).toString());
                    String time = tblDetail.getValueAt(i, 4).toString();
                    if ((daydifference - (long) daydifference) == 0.5) {
                        if (data.IsRecordExist("SELECT * FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE APPROVED=1 AND CANCELED=0 AND (LVT_LEAVE_CODE='CL' OR LVT_LEAVE_CODE='SL') AND LVT_DAYS LIKE '%.50' AND LVT_PAY_EMPID='" + txtempcd.getText().trim() + "' AND LVT_FROMDATE='" + EITLERPGLOBAL.formatDateDB(tblDetail.getValueAt(i, 2).toString()) + "' AND LVT_TODATE='" + EITLERPGLOBAL.formatDateDB(tblDetail.getValueAt(i, 3).toString()) + "'")) {
                            String leavedocno = data.getStringValueFromDB("SELECT LVT_DOC_NO FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE APPROVED=1 AND CANCELED=0 AND (LVT_LEAVE_CODE='CL' OR LVT_LEAVE_CODE='SL') AND LVT_DAYS LIKE '%.50' AND LVT_PAY_EMPID='" + txtempcd.getText().trim() + "' AND LVT_FROMDATE='" + EITLERPGLOBAL.formatDateDB(tblDetail.getValueAt(i, 2).toString()) + "' AND LVT_TODATE='" + EITLERPGLOBAL.formatDateDB(tblDetail.getValueAt(i, 3).toString()) + "'");
                            JOptionPane.showMessageDialog(this, "You are applying PL and CL or SL for same day from " + tblDetail.getValueAt(i, 2).toString() + " to " + tblDetail.getValueAt(i, 3).toString() + " with other leave application No " + leavedocno, "ERROR", JOptionPane.ERROR_MESSAGE);
                            return;
                        }

                        for (int j = 0; j <= tblDetail.getRowCount() - 1; j++) {
                            if (tblDetail.getValueAt(j, 1).toString().equals("CL") || tblDetail.getValueAt(j, 1).toString().equals("SL")) {
                                if (tblDetail.getValueAt(i, 2).toString().equals(tblDetail.getValueAt(j, 2).toString()) && tblDetail.getValueAt(i, 3).toString().equals(tblDetail.getValueAt(j, 3).toString())) {
                                    JOptionPane.showMessageDialog(this, "You are applying SL and CL or SL for same day from " + tblDetail.getValueAt(i, 2).toString() + " to " + tblDetail.getValueAt(i, 3).toString(), "ERROR", JOptionPane.ERROR_MESSAGE);
                                    return;
                                }
                            }
                        }
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            DateFormat myFormat = new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH);
            String strprocesslockdate = EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT APL_DATE FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE"));
            String strleavelockdate = EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT LVT_DATE FROM SDMLATTPAY.ATT_PROCESS_LOCK_DATE"));
            String strleavedocdate = docdate.getText().trim();

            Date processlockdate = myFormat.parse(strprocesslockdate);
            Date leavelockdate = myFormat.parse(strleavelockdate);
            Date leavedocdate = myFormat.parse(strleavedocdate);
            //System.out.println(lockdate);

            //Date lockdate=new SimpleDateFormat("dd/MM/yyyy").parse(lckdate);
//            if(leavedocdate.after(leavelockdate) && EITLERPGLOBAL.gUserDeptID!=28){
//                        JOptionPane.showMessageDialog(null,"You are trying to apply on "+new SimpleDateFormat("dd/MM/yyyy").format(leavedocdate)+" after "+new SimpleDateFormat("dd/MM/yyyy").format(leavelockdate));
//                        return ;    
//            }
            for (int j = 0; j <= tblDetail.getRowCount() - 1; j++) {
                String strfromdate = (String) tblDetail.getValueAt(j, 2);
                //String strtodate=(String)tblDetail.getValueAt(j,3);    

                Date fromdate = myFormat.parse(strfromdate);
                //System.out.println(fromdate);
                //Date todate=new SimpleDateFormat("dd/MM/yyyy").parse(strtodate);
                //if(fromdate.before(processlockdate)){
                //       JOptionPane.showMessageDialog(null,"You are trying to apply "+new SimpleDateFormat("dd/MM/yyyy").format(fromdate)+" after "+new SimpleDateFormat("dd/MM/yyyy").format(processlockdate));
                //       return ;    
                //   }
                /* if (EditMode == EITLERPGLOBAL.ADD) {         
                 if(fromdate.before(leavelockdate) && EITLERPGLOBAL.gUserDeptID!=28){
                 JOptionPane.showMessageDialog(null,"You are trying to apply on "+new SimpleDateFormat("dd/MM/yyyy").format(fromdate)+" after "+new SimpleDateFormat("dd/MM/yyyy").format(leavelockdate));
                 return ;    
                 }
                 }*/

                if (!OpgReject.isSelected() && EITLERPGLOBAL.gUserDeptID != 28) {
                    if (EITLERPGLOBAL.gUserDeptID == 64 || EITLERPGLOBAL.gUserDeptID == 63) {
                    } else {
                        int Result = clsLeaveApplication.ValidateLeaveEntry(EditMode, EITLERPGLOBAL.formatDateDB(strfromdate));
                        if (Result == EITLERPGLOBAL.ADD) {
                            JOptionPane.showMessageDialog(this, "Month is Closed. \nYou can not create Leave for" + strfromdate);
                            return;
                        } else if (Result == EITLERPGLOBAL.EDIT) {
                            JOptionPane.showMessageDialog(this, "Month is Closed. \nYou can not Approve / Final Approve Leave.\n Either you have to cancel Leave or change leave date.");
                            return;
                        }
                    }

                }
            }

            for (int i = 0; i <= tblmonthlyleaves.getRowCount() - 1; i++) {
                String strfirsthalf = (String) tblmonthlyleaves.getValueAt(i, 1);
                String strsecondhalf = (String) tblmonthlyleaves.getValueAt(i, 2);
                if (strfirsthalf.equals("A") || strsecondhalf.equals("A")) {
                    String leavedate = (String) tblmonthlyleaves.getValueAt(i, 0);
                    Date lvdate = new SimpleDateFormat("dd/MM/yyyy").parse(leavedate);
                    for (int j = 0; j <= tblDetail.getRowCount() - 1; j++) {
                        String strfromdate = (String) tblDetail.getValueAt(j, 2);
                        String strtodate = (String) tblDetail.getValueAt(j, 3);
                        String strtime = (String) tblDetail.getValueAt(j, 4);

                        Date fromdate = new SimpleDateFormat("dd/MM/yyyy").parse(strfromdate);
                        Date todate = new SimpleDateFormat("dd/MM/yyyy").parse(strtodate);

                        if (fromdate.compareTo(lvdate) * lvdate.compareTo(todate) >= 0) {
                            if (strtime.trim().equals("1ST HALF DAY")) {
                                if (!strfirsthalf.equals("A")) {
                                    JOptionPane.showMessageDialog(null, "You are trying to apply 1st Half Day against present or applied leave");
                                    return;
                                }
                            }
                            if (strtime.trim().equals("2ND HALF DAY")) {
                                if (!strsecondhalf.equals("A")) {
                                    JOptionPane.showMessageDialog(null, "You are trying to apply 2nd Half Day against present or applied leave");
                                    return;
                                }
                            }
                            if (strtime.trim().equals("FULL DAY")) {
                                if (!strfirsthalf.equals("A") || !strsecondhalf.equals("A")) {
                                    JOptionPane.showMessageDialog(null, "You are trying to apply Full Day against present or applied leave");
                                    return;
                                }
                            }

                        }

                    }

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        for (int i = 0; i <= tblDetail.getRowCount() - 1; i++) {
            String strLeaveCode = (String) tblDetail.getValueAt(i, 1);
            if (strLeaveCode.equals("")) {
                JOptionPane.showMessageDialog(null, "Please select Leave Code");
                return;
            }
            String strfromdate = (String) tblDetail.getValueAt(i, 2);
            String strtodate = (String) tblDetail.getValueAt(i, 3);
            if (strfromdate.equals("") || !EITLERPGLOBAL.isDate(strfromdate)) {
                JOptionPane.showMessageDialog(null, "Invalid from date. Please verify the input");
                return;
            }

            if (strtodate.equals("") || !EITLERPGLOBAL.isDate(strtodate)) {
                JOptionPane.showMessageDialog(null, "Invalid to date. Please verify the input");
                return;
            }

            String strtime = (String) tblDetail.getValueAt(i, 4);
            //double strday=Double.parseDouble((String)tblDetail.getValueAt(i,5));
            if (strtime.trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Please select time and press tab key");
                return;
            }

            /*String days=(String)tblDetail.getValueAt(i, 5);
             if(days.isEmpty()){
             JOptionPane.showMessageDialog(null, "Days are blank. Please select time and press tab key to get days");
             return; 
             }*/
            //if(strday){
            //    JOptionPane.showMessageDialog(null,"Please select time and press tab key");
            //    return ;
            //}
        }

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        SetData();
        //leaveapplication.LoadData();
        if (EditMode == EITLERPGLOBAL.ADD) {
            if (leaveapplication.Insert()) {

                clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, true);
                if (OpgFinal.isSelected()) {
                    Mail();
                }
                leaveapplication.LoadData(EITLERPGLOBAL.gCompanyID);
                MoveLast();
                //DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + leaveapplication.LastError, " SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (leaveapplication.Update()) {
                if (OpgFinal.isSelected()) {
                    Mail();
                }

                MoveLast();
                //DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + leaveapplication.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
//        try {
//            if (PENDING_DOCUMENT) {
//                frmPA.RefreshView();
//                PENDING_DOCUMENT = false;
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
        try {
            frmPA.RefreshView();
        } catch (Exception e) {
        }

    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }

    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void Edit() {

        String DocumentNo = (String) leaveapplication.getAttribute("LVT_DOC_NO").getString();

        if (leaveapplication.IsEditable(EITLERPGLOBAL.gCompanyID, DocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateCombos();
//            GenerateHierarchyCombo();
            GenerateSendToCombo();
            //System.out.println("Before Edit>Display "+EITLERPGLOBAL.getComboCode(cmbHierarchy));
            DisplayData();
            //System.out.println("After Edit>Display "+EITLERPGLOBAL.getComboCode(cmbHierarchy));
//             SetupApproval();
            //ReasonResetReadonly();
            //cmbOrderReason.setEnabled(false);
            if (SDMLATTPAY.ApprovalFlow.IsCreator(ModuleId, DocumentNo)) {
                SetFields(true);
            } else {
                EnableApproval();
            }
            //OpgFinal.setSelected(true);
//            OpgHold.setSelected(true);
        } else {
            JOptionPane.showMessageDialog(null, "You cannot edit this record. \n It is either approved/rejected or waiting approval for other user");
        }

    }

// find rate update by doc no
    public void Find(String docNo) {
        //leaveapplication.Filter(" DOC_NO='" + docNo + "'");
        leaveapplication.Filter(" LVT_DOC_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    public void FindEx(int pCompanyID, String docno) {
        //leaveapplication.Filter(" DOC_NO='" + docno + "'");
        leaveapplication.Filter(" LVT_DOC_NO='" + docno + "'");
        leaveapplication.MoveFirst();
        DisplayData();
    }

    private void Delete() {

    }

    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = SDMLATTPAY.ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, ModuleId, txtempcd.getText());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void EnableApproval() {
//        cmbSendTo.setEnabled(true);
//        OpgApprove.setEnabled(true);
//        OpgFinal.setEnabled(true);
//        OpgReject.setEnabled(true);
//        OpgHold.setEnabled(true);
//        txtToRemarks.setEnabled(true);
//        System.out.println("Before EnableApproval>SetupApproval "+EITLERPGLOBAL.getComboCode(cmbHierarchy));
//        SetupApproval();
//        System.out.println("After EnableApproval>SetupApproval "+EITLERPGLOBAL.getComboCode(cmbHierarchy));
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < jPanel1.getComponentCount() - 1; i++) {
            if (jPanel1.getComponent(i).getName() != null) {

                FieldName = jPanel1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    jPanel1.getComponent(i).setEnabled(true);
                }
            }
        }
    }

    private void SetFields(boolean pStat) {

        txtempcd.setEnabled(pStat);
        lblEmpname.setEnabled(pStat);
        lblDesn.setEnabled(pStat);
        lblShift.setEnabled(pStat);
        lbldept.setEnabled(pStat);
        txtReason.setEnabled(pStat);

        //btnAdd.setEnabled(pStat); 
        //btnRemove.setEnabled(pStat); 
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);

        btnAdd.setEnabled(pStat);
        btnRemove.setEnabled(pStat);

        SetupApproval();
    }

    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    private void SetData() {

        if (EditMode == EITLERPGLOBAL.ADD) {
            EITLERP.FeltSales.common.SelectFirstFree aList = new EITLERP.FeltSales.common.SelectFirstFree();
            aList.ModuleID = ModuleId;
            aList.FirstFreeNo = 317;
            FFNo = aList.FirstFreeNo;
            //lbldoc.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
            leaveapplication.setAttribute("LVT_DOC_NO", clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        } else {
            DOC_NO = lbldoc.getText();
            leaveapplication.setAttribute("LVT_DOC_NO", DOC_NO);
        }

        //leaveapplication.setAttribute("LVT_DOC_NO", lbldoc.getText());        
        leaveapplication.setAttribute("LVT_DOC_DATE", docdate.getText());

        //String year=docdate.getText().substring(6);
        String empcd = txtempcd.getText().substring(3);
        //leaveapplication.setAttribute("LVT_YEAR", year);
        leaveapplication.setAttribute("LVT_EMPID", empcd);
        leaveapplication.setAttribute("LVT_PAY_EMPID", txtempcd.getText().toUpperCase());

        leaveapplication.setAttribute("LVT_REMARK", txtReason.getText());
//        leaveapplication.setAttribute("LVT_SANCTION", txtReason.getText());        
//        leaveapplication.setAttribute("LVT_ALLOWED", txtReason.getText());        
//        leaveapplication.setAttribute("LVT_TIME1", txtReason.getText());        
//        leaveapplication.setAttribute("LVT_TIME2", txtReason.getText());        
//             

        leaveapplication.setAttribute("MODULE_ID", ModuleId);
        leaveapplication.setAttribute("USER_ID", EITLERPGLOBAL.gNewUserID);

        leaveapplication.setAttribute("REJECTED_REMARKS", txtToRemarks.getText());
        leaveapplication.setAttribute("REMARKS", "");
        leaveapplication.setAttribute("APPROVAL_STATUS", "");
        leaveapplication.setAttribute("APPROVER_REMARKS", txtFromRemarks.getText());
        leaveapplication.setAttribute("ENTRY_DATE", EITLERPGLOBAL.getCurrentDateDB());

        //----- Update Approval Specific Fields -----------//
        leaveapplication.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        leaveapplication.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        leaveapplication.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        leaveapplication.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            leaveapplication.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            leaveapplication.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            leaveapplication.setAttribute("APPROVAL_STATUS", "R");
            leaveapplication.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            leaveapplication.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            leaveapplication.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            leaveapplication.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        } else {
            leaveapplication.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            leaveapplication.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
            leaveapplication.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
            leaveapplication.setAttribute("UPDATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }

        int i = 0;
        String leavecode = "", fromdate = "", todate = "", leavetype = "", leavereason = "";
        String leaveyearfrom = "", leaveyearto = "";
        double leavedays = 0.00;
        leaveapplication.hmcolLeaveDetails.clear();
        //Check the entered details in Table.
        for (i = 0; i <= tblDetail.getRowCount() - 1; i++) {
            leavecode = ((String) tblDetail.getValueAt(i, 1)).trim().toUpperCase();
            fromdate = ((String) tblDetail.getValueAt(i, 2)).trim();
            todate = ((String) tblDetail.getValueAt(i, 3)).trim();
            leavetype = ((String) tblDetail.getValueAt(i, 4)).trim().toUpperCase();
            leavedays = Double.parseDouble(tblDetail.getValueAt(i, 5).toString());

            leaveyearfrom = tblDetail.getValueAt(i, 2).toString().substring(6);
            //leaveyearto=tblDetail.getValueAt(i, 3).toString().substring(6);

            leavereason = ((String) tblDetail.getValueAt(i, 6)).trim().toUpperCase();

            clsLeaveApplicationDetails colleavedetails = new clsLeaveApplicationDetails();

            colleavedetails.setAttribute("LVT_YEAR", leaveyearfrom);
            colleavedetails.setAttribute("LVT_LEAVE_CODE", leavecode);
            colleavedetails.setAttribute("LVT_FROMDATE", fromdate);
            colleavedetails.setAttribute("LVT_TODATE", todate);
            colleavedetails.setAttribute("LVT_MENTION_TIME", leavetype);
            colleavedetails.setAttribute("LVT_DAYS", leavedays);
            colleavedetails.setAttribute("LVT_REMARK", leavereason);

            leaveapplication.hmcolLeaveDetails.put(Integer.toString(leaveapplication.hmcolLeaveDetails.size() + 1), colleavedetails);

        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSendMail;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdNextToTab3;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel docdate;
    private javax.swing.JLabel docdate1;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblDesn;
    private javax.swing.JLabel lblEmpname;
    private javax.swing.JLabel lblShift;
    private javax.swing.JLabel lblStatus1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lbldaydiff;
    private javax.swing.JLabel lbldept;
    private javax.swing.JLabel lbldoc;
    private javax.swing.JTable tblBalance;
    private javax.swing.JTable tblDetail;
    private javax.swing.JTable tblmonthlyleaves;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtReason;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtempcd;
    // End of variables declaration//GEN-END:variables

    public static int daysBetween(Calendar day1, Calendar day2) {
        Calendar dayOne = (Calendar) day1.clone(),
                dayTwo = (Calendar) day2.clone();

        if (dayOne.get(Calendar.YEAR) == dayTwo.get(Calendar.YEAR)) {
            return Math.abs(dayOne.get(Calendar.DAY_OF_YEAR) - dayTwo.get(Calendar.DAY_OF_YEAR));
        } else {
            if (dayTwo.get(Calendar.YEAR) > dayOne.get(Calendar.YEAR)) {
                //swap them
                Calendar temp = dayOne;
                dayOne = dayTwo;
                dayTwo = temp;
            }
            int extraDays = 0;

            int dayOneOriginalYearDays = dayOne.get(Calendar.DAY_OF_YEAR);

            while (dayOne.get(Calendar.YEAR) > dayTwo.get(Calendar.YEAR)) {
                dayOne.add(Calendar.YEAR, -1);
                // getActualMaximum() important for leap years
                extraDays += dayOne.getActualMaximum(Calendar.DAY_OF_YEAR);
            }

            return extraDays - dayTwo.get(Calendar.DAY_OF_YEAR) + dayOneOriginalYearDays;
        }
    }

    private void updateTotalDays() {
        //===================== Update Total days ========================//
        try {
            double totaldays = 0;
            for (int i = 0; i < tblDetail.getRowCount(); i++) {
                //totaldays=totaldays+Double.parseDouble(tblDetail.getModel().getValueAt(i,tblDetailDataModel.getColID(5)).toString()); 
                totaldays = totaldays + Double.parseDouble(tblDetail.getValueAt(i, 5).toString());
            }
            lbldaydiff.setText(Double.toString(totaldays));

        } catch (Exception v) {
            v.printStackTrace();
        }
        //==================================================================//        
    }

    private double accumulatedDays(String leavetype) {
        //===================== Update Total days ========================//
        double totaldays = 0;
        try {
            //System.out.println(tblDetail.getRowCount()-1);
            for (int i = 0; i < tblDetail.getRowCount() - 1; i++) {
                //totaldays=totaldays+Double.parseDouble(tblDetail.getModel().getValueAt(i,tblDetailDataModel.getColID(5)).toString()); 
                if (leavetype.equals(tblDetail.getModel().getValueAt(i, 1).toString())) {
                    totaldays = totaldays + Double.parseDouble(tblDetail.getModel().getValueAt(i, 5).toString());
                }
            }

        } catch (Exception v) {
            v.printStackTrace();
        }
        //==================================================================//        
        return totaldays;
    }

    private void displayBalance() {
        try {
            FormatGridBal();
            ResultSet t;
            //t = data.getResult("SELECT * FROM SDMLATTPAY.ATT_LEAVE_BALANCE WHERE LVBAL_PAYEMPCD='"+txtempcd.getText()+"'");
            //t = data.getResult("SELECT * FROM SDMLATTPAY.ATT_LEAVE_BALANCE WHERE LVBAL_PAYEMPCD='"+txtempcd.getText()+"' AND LVBAL_YEAR=2020");
            //t = data.getResult("SELECT * FROM SDMLATTPAY.ATT_LEAVE_BALANCE WHERE LVBAL_PAYEMPCD='"+txtempcd.getText()+"' AND LVBAL_YEAR=2021 ORDER BY FIELD(LVBAL_LEAVE_CD,\"CL\",\"PL\",\"SL\",\"CO\")");
            t = data.getResult("SELECT * FROM SDMLATTPAY.ATT_LEAVE_BALANCE WHERE LVBAL_PAYEMPCD='" + txtempcd.getText() + "' AND LVBAL_YEAR IN (SELECT DISTINCT LVBAL_YEAR FROM SDMLATTPAY.ATT_LEAVE_BALANCE\n"
                    + "WHERE LVBAL_YEAR = CASE WHEN EXISTS(SELECT DISTINCT LVBAL_YEAR FROM SDMLATTPAY.ATT_LEAVE_BALANCE WHERE LVBAL_YEAR=YEAR(CURDATE())) THEN YEAR(CURDATE()) \n"
                    + "ELSE (SELECT MAX(LVBAL_YEAR) FROM SDMLATTPAY.ATT_LEAVE_BALANCE) END) ORDER BY FIELD(LVBAL_LEAVE_CD,\"CL\",\"PL\",\"SL\",\"CO\")");

            t.first();
            if (t.getRow() > 0) {
                while (!t.isAfterLast()) {
                    Object[] rowData = new Object[10];
                    //rowData[0] = t.getString("LVBAL_YEAR")+"-"+t.getString("LVBAL_LEAVE_CD");                    
                    rowData[0] = t.getString("LVBAL_LEAVE_CD");
                    rowData[1] = t.getString("LVBAL_OPENING");
                    rowData[2] = t.getString("LVBAL_AVAIL");
                    rowData[3] = t.getString("LVBAL_CREDIT");
                    rowData[4] = t.getString("LVBAL_LAPSE");
                    rowData[5] = t.getString("LVBAL_CLOSING");
                    DataModelBalance.addRow(rowData);
                    t.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void displayLeaves(String dt) {
        try {
            FormatGridLeave();
            ResultSet t;
            /*String sql = "SELECT * FROM SDMLATTPAY.ATT_DATA_SUMMARY_TEMP WHERE EMPID='" + txtempcd.getText() + "' AND YYYY=(SELECT year('2019-07-01') FROM DUAL) "
             + " AND MM=(SELECT month('2019-07-01') FROM DUAL) AND (PRESENT_FIRST NOT LIKE 'P' OR PRESENT_SECOND NOT LIKE 'P' "
             + " ) AND SHIFT NOT IN ('WO')";
             */
            String sql = "SELECT * FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM AND EMPID='" + txtempcd.getText() + "' AND YYYY=(SELECT year('" + EITLERPGLOBAL.formatDateDB(dt) + "') FROM DUAL) "
                    + " AND MM=(SELECT month('" + EITLERPGLOBAL.formatDateDB(dt) + "') FROM DUAL) AND (PRESENT_FIRST NOT LIKE 'P' OR PRESENT_SECOND NOT LIKE 'P' "
                    + " ) AND SHIFT NOT IN ('WO','HL')";
            //System.out.println(sql);
            t = data.getResult(sql);
            t.first();
            if (t.getRow() > 0) {
                while (!t.isAfterLast()) {
                    Object[] rowData = new Object[10];
                    rowData[0] = EITLERPGLOBAL.formatDate(t.getString("PUNCHDATE"));
                    rowData[1] = t.getString("PRESENT_FIRST");
                    rowData[2] = t.getString("PRESENT_SECOND");
                    //rowData[3]=t.getString("LVBAL_CREDIT");                    
                    //rowData[4]=t.getString("LVBAL_LAPSE");                    
                    //rowData[5]=t.getString("LVBAL_CLOSING");                    
                    DataModelLeaves.addRow(rowData);
                    t.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void displayLeaves(String mm, String yyyy) {
        try {
            FormatGridLeave();
            ResultSet t;
            /*String sql = "SELECT * FROM SDMLATTPAY.ATT_DATA_SUMMARY_TEMP WHERE EMPID='" + txtempcd.getText() + "' AND YYYY=(SELECT year('2019-07-01') FROM DUAL) "
             + " AND MM=(SELECT month('2019-07-01') FROM DUAL) AND (PRESENT_FIRST NOT LIKE 'P' OR PRESENT_SECOND NOT LIKE 'P' "
             + " ) AND SHIFT NOT IN ('WO')";
             */
            /*String sql = "SELECT * FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM AND EMPID='" + txtempcd.getText() + "' AND YYYY='"+yyyy+"' "             
             + " AND MM IN ("+mm+") AND (PRESENT_FIRST NOT LIKE 'P' OR PRESENT_SECOND NOT LIKE 'P' "
             + " ) AND SHIFT NOT IN ('WO','HL')";
             */
            String sql = "SELECT * FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM AND EMPID='" + txtempcd.getText() + "' AND YYYY IN (YEAR(CURDATE()- INTERVAL 1 MONTH)) "
                    + " AND MM IN (MONTH(CURDATE()- INTERVAL 1 MONTH)) AND (PRESENT_FIRST NOT LIKE 'P' OR PRESENT_SECOND NOT LIKE 'P' "
                    + " ) AND SHIFT NOT IN ('WO','HL')"
                    + " UNION ALL "
                    + "SELECT * FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE YEAR(PUNCHDATE)=YYYY AND MONTH(PUNCHDATE)=MM AND EMPID='" + txtempcd.getText() + "' AND YYYY IN (YEAR(CURDATE())) "
                    + " AND MM IN (MONTH(CURDATE())) AND (PRESENT_FIRST NOT LIKE 'P' OR PRESENT_SECOND NOT LIKE 'P' "
                    + " ) AND SHIFT NOT IN ('WO','HL')";

            System.out.println(sql);
            t = data.getResult(sql);
            t.first();
            if (t.getRow() > 0) {
                while (!t.isAfterLast()) {
                    Object[] rowData = new Object[10];
                    rowData[0] = EITLERPGLOBAL.formatDate(t.getString("PUNCHDATE"));
                    rowData[1] = t.getString("PRESENT_FIRST");
                    rowData[2] = t.getString("PRESENT_SECOND");
                    //rowData[3]=t.getString("LVBAL_CREDIT");                    
                    //rowData[4]=t.getString("LVBAL_LAPSE");                    
                    //rowData[5]=t.getString("LVBAL_CLOSING");                    
                    DataModelLeaves.addRow(rowData);
                    t.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void Mail() {
        //System.out.println("Leave application final approved = " + leaveapplication.getAttribute("APPROVAL_STATUS").getString());
        String pBody = "", pSubject = "", recievers = "", pcc = "";
        //if (leaveapplication.getAttribute("APPROVAL_STATUS").getString().equalsIgnoreCase("A") || leaveapplication.getAttribute("APPROVAL_STATUS").getString().equalsIgnoreCase("F")) {
        //if (leaveapplication.getAttribute("APPROVAL_STATUS").getString().equalsIgnoreCase("F")) {

        pSubject = "Notification : Leave Final approved  :" + lbldoc.getText() + " ";
        pBody = "Dear User,<br><br>";

        try {
            String empcdname = data.getStringValueFromDB("SELECT CONCAT(PAY_EMP_NO,'-',EMP_NAME) FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='" + txtempcd.getText() + "'");
            pBody += "" + empcdname + "  <br>";
            pBody += "Your Leave Application : " + lbldoc.getText() + " <br><br>";
            //pBody += "Document No.  : " + lbldoc.getText() + " <br>";
            //pBody += "Remark        : " + txtReason.getText() + " <br>";

            //String sql="SELECT * FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtempcd.getText()+"' LIMIT 1";
            //ResultSet rs=data.getResult(sql);            
            //rs.first();
            //pBody += "Employee Name  : " + rs.getString("EMP_NAME") + " <br>";
            //pBody += "Remark        : " + rs.getString("DEPARTMENT") + "  <br>";
            int srNo = 0;
            String sql1 = "SELECT * FROM SDMLATTPAY.ATT_LEAVE_ENTRY WHERE LVT_DOC_NO='" + lbldoc.getText() + "'";

            ResultSet rsdata = data.getResult(sql1);
            rsdata.first();
            if (rsdata.getRow() > 0) {
                srNo = 0;
                pBody += "<br>";
                pBody += "<table border=1>";
                pBody += "<tr><td align='center'><b>Sr.No.</b></td>"
                        + "<td align='center'><b>Leave Type</b></td>"
                        + "<td align='center'><b>From Date</b></td>"
                        + "<td align='center'><b>To Date</b></td>"
                        + "<td align='center'><b>Mention Time</b></td>"
                        + "<td align='center'><b>Day</b></td>"
                        + "<td align='center'><b>Reason</b></td>"
                        + "</tr>";
                while (!rsdata.isAfterLast()) {
                    srNo++;
                    pBody += "<tr>";
                    pBody += "<td>" + srNo + "</td>";
                    pBody += "<td>" + rsdata.getString("LVT_LEAVE_CODE") + "</td>";
                    pBody += "<td>" + EITLERPGLOBAL.formatDate(rsdata.getString("LVT_FROMDATE")) + "</td>";
                    pBody += "<td>" + EITLERPGLOBAL.formatDate(rsdata.getString("LVT_TODATE")) + "</td>";
                    pBody += "<td>" + rsdata.getString("LVT_MENTION_TIME") + "</td>";
                    pBody += "<td>" + rsdata.getString("LVT_DAYS") + "</td>";
                    pBody += "<td>" + rsdata.getString("LVT_REMARK") + "</td>";
                    pBody += "</tr>";
                    rsdata.next();
                }
                pBody += "</table>";
                pBody += "<br>Remark : Approved Leave";
                pBody += "<br>";
            }

            pBody += "<br><br>";

            //recievers = "ashutosh@dineshmills.com";
            //recievers = "sdmlerp@dineshmills.com";
            /*HashMap hmSendToList;
             hmSendToList = clsHierarchy.getUserList(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.getComboCode(cmbHierarchy), EITLERPGLOBAL.gNewUserID, true);
             for (int i = 1; i <= hmSendToList.size(); i++) {
             clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
             int U_ID = ObjUser.getAttribute("USER_ID").getInt();

             String to = clsUser.getExternalEMail(EITLERPGLOBAL.gCompanyID, U_ID);

             //System.out.println("USERID : " + U_ID + ", send_to : " + to);
             if (!to.equals("")) {
             recievers = recievers + "," + to;
             }
                
             }*/
            String to = clsUser.getExternalEMail(EITLERPGLOBAL.gCompanyID, data.getIntValueFromDB("SELECT USER_ID FROM SDMLATTPAY.D_COM_DOC_DATA WHERE MODULE_ID=811 AND TYPE='C' AND DOC_NO='" + lbldoc.getText() + "'"));

            if (!to.equals("")) {
                //recievers = recievers + "," + to;
                recievers = to;
            } else {
                recievers = "sdmlerp@dineshmills.com";
            }

            //pBody += "<br><br><br>**** This is an auto-generated email, please do not reply ****<br><br>";
            //String responce = MailNotification.sendNotificationMail(811, pSubject, pBody, recievers, pcc, EITLERPGLOBAL.getComboCode(cmbHierarchy));
            //String responce = MailNotification.sendNotificationMail(811, pSubject, pBody, recievers, pcc, 0);
            EITLERP.FeltSales.common.JavaMail.SendMail(recievers, pBody, pSubject, pcc);
            //System.out.println("Send Mail Responce : " + responce);

        } catch (Exception e) {
            e.printStackTrace();
        }
        //}
    }

}
