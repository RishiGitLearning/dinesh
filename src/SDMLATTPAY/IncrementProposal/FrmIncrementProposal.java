/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SDMLATTPAY.IncrementProposal;

import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import static EITLERP.EITLERPGLOBAL.round;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLTableModel;
import static EITLERP.FeltSales.common.JavaMail.SendMail;
import EITLERP.Loader;
import EITLERP.clsAuthority;
import EITLERP.clsDepartment;
import EITLERP.clsDocFlow;
import EITLERP.clsHierarchy;
import EITLERP.clsUser;
import EITLERP.data;
import EITLERP.frmPendingApprovals;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileWriter;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/**
 *
 * @author DAXESH PRAJAPATI
 *
 */
public class FrmIncrementProposal extends javax.swing.JApplet {

    private int EditMode = 0;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbModuleModel;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;

    private EITLTableModel DataModel_EmpDetail;
    private EITLTableModel DataModel_LastIncrementDetail;
    private EITLTableModel DataModel_ProposedIncrement;
    private EITLTableModel DataModel_ProposedIncrementDetail;
    private EITLTableModel DataModel_SalaryDetail;
    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private int FFNo = 363;
    private int ModuleId = 849;
    private String DOC_NO = "";
    private clsIncrementProposal objIncrement;
    private EITLComboModel cmbSendToModel;
    private static int esiclimit = 21001;

    private frmFindIncrementProposal ObjFindEmployee;
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    public frmPendingApprovals frmPA;

    String selectedEmpNo = "";
    String selectedEmpName = "";
    String selecteddept = "";
    String selectedcategory = "";
    int datalist_index = 1, selerow = -1;

    /**
     * Initializes the applet FrmFeltOrder
     */
    @Override
    public void init() {

        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(dim.width, dim.height);
        initComponents();
        lblTitle.setForeground(Color.WHITE);
        jLabel13.setVisible(false);
        jLabel9.setVisible(false);
        lblsplper.setVisible(false);
        lblctcsplper.setVisible(false);
        GenerateCombos();
        FormatGrid();
        //FormatGrid_OldTransaction();
        GenerateFromCombo();
        GenerateHierarchyCombo();
        SetupApproval();
        SetMenuForRights();
        DefaultSettings();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        FormatGrid_SalaryDetails();
        FormatGrid_LastIncrementDetails();
        FormatGrid_ProposalIncrement();
        FormatGrid_ProposalIncrementDetail();

        Table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        objIncrement = new clsIncrementProposal();
        boolean load = objIncrement.LoadData(" WHERE IED_DOC_NO LIKE '%DG52%'");

        if (load) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + objIncrement.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        file1.setVisible(false);
        SetFields(false);

    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    public void DefaultSettings() {

        //String data = toString();
        Object[] rowData = new Object[15];
        rowData[0] = "1";

        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        clearFields();
    }

    private void clearFields() {
//        txtDocNo.setText("0");
        txtDocDate.setText("");

        //txtPayEmpNo.setText("");
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();

        // FormatGridA();
        FormatGridHS();
        FormatGrid();

    }

    private void DisplayData() {

        //=========== Color Indication ===============//
        try {

            if (objIncrement.getAttribute("APPROVED").getInt() == 1) {
                lblTitle.setBackground(Color.BLUE);
                lblTitle.setForeground(Color.WHITE);

            }

            if (objIncrement.getAttribute("APPROVED").getInt() == 0) {
                lblTitle.setBackground(Color.GRAY);
                lblTitle.setForeground(Color.WHITE);
            }

            if (objIncrement.getAttribute("CANCELED").getInt() == 1) {
                lblTitle.setBackground(Color.RED);
                lblTitle.setForeground(Color.BLACK);
            }
        } catch (Exception c) {

            c.printStackTrace();
        }
        //============================================//

        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleId)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }

        FormatGrid();
        clearFields();
        try {

            txtDocNo.setText(objIncrement.getAttribute("IED_DOC_NO").getString());
            txtDocDate.setText(EITLERPGLOBAL.formatDate(objIncrement.getAttribute("IED_DOC_DATE").getString()));
            String DocNo = txtDocNo.getText();
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, objIncrement.getAttribute("HIERARCHY_ID").getInt());

            //Object[] rowData = new Object[7];
            //rowData[0] = Integer.toString(i);
            //rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
            //rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
            FormatGrid();
            //Now Generate Table
            for (int i = 1; i <= objIncrement.hmIncrementProposalDetails.size(); i++) {
                clsIncrementProposalDetails ObjItem = (clsIncrementProposalDetails) objIncrement.hmIncrementProposalDetails.get(Integer.toString(i));

                Object[] rowData = new Object[1];
                DataModel_EmpDetail.addRow(rowData);
                int NewRow = Table.getRowCount() - 1;
                DataModel_EmpDetail.setValueByVariable("SrNo", Integer.toString(i), NewRow);
                DataModel_EmpDetail.setValueByVariable("IED_DEPARTMENT", ObjItem.getAttribute("IED_DEPARTMENT").getString(), NewRow);
                DataModel_EmpDetail.setValueByVariable("IED_PAY_EMP_NO", ObjItem.getAttribute("IED_PAY_EMP_NO").getString(), NewRow);
                DataModel_EmpDetail.setValueByVariable("IED_EMP_NAME", ObjItem.getAttribute("IED_EMP_NAME").getString(), NewRow);
                DataModel_EmpDetail.setValueByVariable("IED_EMP_DATE_OF_JOING", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("IED_EMP_DATE_OF_JOING").getString()), NewRow);
                DataModel_EmpDetail.setValueByVariable("IED_LAST_INC_DUE_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("IED_LAST_INC_DUE_DATE").getString()), NewRow);
                DataModel_EmpDetail.setValueByVariable("IED_DESIGNATION", ObjItem.getAttribute("IED_DESIGNATION").getString(), NewRow);
                DataModel_EmpDetail.setValueByVariable("IED_QUALIFICATION", ObjItem.getAttribute("IED_QUALIFICATION").getString(), NewRow);
                DataModel_EmpDetail.setValueByVariable("CATEGORY", ObjItem.getAttribute("CATEGORY").getString(), NewRow);
                DataModel_EmpDetail.setValueByVariable("SUB_CATEGORY", ObjItem.getAttribute("SUB_CATEGORY").getString(), NewRow);
                DataModel_EmpDetail.setValueByVariable("EMP_GRADE", ObjItem.getAttribute("EMP_GRADE").getString(), NewRow);
                DataModel_EmpDetail.setValueByVariable("EMP_DOB", ObjItem.getAttribute("EMP_DOB").getString(), NewRow);
            }
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 10, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }

            FormatGrid_ProposalIncrementDetail();
            ResultSet tr = data.getResult("SELECT * FROM (SELECT * FROM SDMLATTPAY.INCREMENT_ENTRY_DETAIL_H WHERE IED_DOC_NO ='" + DocNo + "' ORDER BY REVISION_NO DESC) AS D GROUP BY IED_DOC_NO,IED_PAY_EMP_NO");
            tr.first();
            if (tr.getRow() > 0) {
                while (!tr.isAfterLast()) {
                    Object[] rowData = new Object[1];
                    DataModel_ProposedIncrementDetail.addRow(rowData);
                    int NewRow = TableIncrementStatus.getRowCount() - 1;

                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_DEPARTMENT", tr.getString("IED_DEPARTMENT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_PAY_EMP_NO", tr.getString("IED_PAY_EMP_NO"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_EMP_NAME", tr.getString("IED_EMP_NAME"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_PER", tr.getString("IED_REVISED_PER"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_SPL_PER", tr.getString("IED_REVISED_SPL_PER"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_CTC_PER", tr.getString("IED_REVISED_CTC_PER"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_CTC_SPL_PER", tr.getString("IED_REVISED_CTC_SPL_PER"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_LAST_TOTAL_INCREMENT", tr.getString("IED_LAST_TOTAL_INCREMENT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_TOTAL_INCREMENT", tr.getString("IED_TOTAL_INCREMENT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_TOTAL_SPECIAL_INCREMENT", tr.getString("IED_TOTAL_SPECIAL_INCREMENT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_EMP_GRADE", tr.getString("IED_EMP_GRADE"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", tr.getString("IED_CURRENT_SPECIAL_INCREMENT"), NewRow);

                    //DataModel_ProposedIncrementDetail.setValueByVariable("IED_DIFF_CTC", tr.getString("IED_DIFF_CTC"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_MONTHLY_CTC", tr.getString("IED_CURRENT_MONTHLY_CTC"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_MONTHLY_CTC", tr.getString("IED_REVISED_MONTHLY_CTC"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_BASIC", tr.getString("IED_CURRENT_BASIC"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_BASIC", tr.getString("IED_CURRENT_INC_BASIC"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_BASIC", tr.getString("IED_REVISED_BASIC"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_PERSONAL_PAY", tr.getString("IED_CURRENT_PERSONAL_PAY"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_PERSONAL_PAY", tr.getString("IED_CURRENT_INC_PERSONAL_PAY"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_PERSONAL_PAY", tr.getString("IED_REVISED_PERSONAL_PAY"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_DA_INDEX", tr.getString("IED_CURRENT_DA_INDEX"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_HRA", tr.getString("IED_CURRENT_HRA"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_HRA", tr.getString("IED_CURRENT_INC_HRA"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_HRA", tr.getString("IED_REVISED_HRA"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_AWARD_HRA", tr.getString("IED_CURRENT_AWARD_HRA"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_MAGAZINE", tr.getString("IED_CURRENT_MAGAZINE"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_MAGAZINE", tr.getString("IED_CURRENT_INC_MAGAZINE"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_MAGAZINE", tr.getString("IED_REVISED_MAGAZINE"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_ELECTRICITY", tr.getString("IED_CURRENT_ELECTRICITY"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_ELECTRICITY", tr.getString("IED_CURRENT_INC_ELECTRICITY"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_ELECTRICITY", tr.getString("IED_REVISED_ELECTRICITY"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_PERFORMANCE_ALLOWANCE", tr.getString("IED_CURRENT_PERFORMANCE_ALLOWANCE"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE", tr.getString("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_PERFORMANCE_ALLOWANCE", tr.getString("IED_REVISED_PERFORMANCE_ALLOWANCE"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_CONVEY_ALLOWANCE", tr.getString("IED_CURRENT_CONVEY_ALLOWANCE"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_CONVEY_ALLOWANCE", tr.getString("IED_CURRENT_INC_CONVEY_ALLOWANCE"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_CONVEY_ALLOWANCE", tr.getString("IED_REVISED_CONVEY_ALLOWANCE"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_MEDICAL_PER", tr.getString("IED_CURRENT_MEDICAL_PER"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_MEDICAL_PER", tr.getString("IED_REVISED_MEDICAL_PER"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_MEDICAL_AMOUNT", tr.getString("IED_CURRENT_MEDICAL_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_MEDICAL_AMOUNT", tr.getString("IED_REVISED_MEDICAL_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INFLATION_BONUS_AMOUNT", tr.getString("IED_CURRENT_INFLATION_BONUS_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_INFLATION_BONUS_AMOUNT", tr.getString("IED_REVISED_INFLATION_BONUS_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_PF_AMOUNT", tr.getString("IED_CURRENT_PF_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_PF_AMOUNT", tr.getString("IED_REVISED_PF_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_ESIC_AMOUNT", tr.getString("IED_CURRENT_ESIC_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_ESIC_AMOUNT", tr.getString("IED_REVISED_ESIC_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_GRATUITY_AMOUNT", tr.getString("IED_CURRENT_GRATUITY_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_GRATUITY_AMOUNT", tr.getString("IED_REVISED_GRATUITY_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_PETROL_AMOUNT", tr.getString("IED_CURRENT_PETROL_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_SUPER_ANNUATION_AMOUNT", tr.getString("IED_CURRENT_SUPER_ANNUATION_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_SUPER_ANNUATION_AMOUNT", tr.getString("IED_REVISED_SUPER_ANNUATION_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_YEARLY_CTC", tr.getString("IED_CURRENT_YEARLY_CTC"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_YEARLY_CTC", tr.getString("IED_REVISED_YEARLY_CTC"), NewRow);
                    //DataModel_ProposedIncrementDetail.setValueAt(tr.getString("IED_PROPOSE_PROMOTION"), NewRow,46);
                    if (tr.getInt("IED_PROPOSE_PROMOTION") == 1) {
                        DataModel_ProposedIncrementDetail.setValueAt(true, NewRow, 53);
                    } else {
                        DataModel_ProposedIncrementDetail.setValueAt(false, NewRow, 53);
                    }
                    if (tr.getInt("IED_RESIGNATION") == 1) {
                        DataModel_ProposedIncrementDetail.setValueAt(true, NewRow, 55);
                    } else {
                        DataModel_ProposedIncrementDetail.setValueAt(false, NewRow, 55);
                    }
                    if (tr.getInt("IED_PROBATION") == 1) {
                        DataModel_ProposedIncrementDetail.setValueAt(true, NewRow, 56);
                    } else {
                        DataModel_ProposedIncrementDetail.setValueAt(false, NewRow, 56);
                    }
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REMARK", tr.getString("IED_REMARK"), NewRow);
                    tr.next();

                }
            }
            final TableColumnModel columnModelIS = TableIncrementStatus.getColumnModel();
            for (int column = 0; column < TableIncrementStatus.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < TableIncrementStatus.getRowCount(); row++) {
                    TableCellRenderer renderer = TableIncrementStatus.getCellRenderer(row, column);
                    Component comp = TableIncrementStatus.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 10, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModelIS.getColumn(column).setPreferredWidth(width);
            }
            double mincp = 0, mincctcp = 0;
            int i = 0;
            for (i = 0; i < TableIncrementStatus.getRowCount(); i++) {
                try {
                    mincp = mincp + Double.parseDouble(DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_PER", i));
                } catch (Exception e) {
                }
                try {
                    mincctcp = mincctcp + Double.parseDouble(DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_CTC_PER", i));
                } catch (Exception e) {
                }
            }
            mincp = round(mincp / Table.getRowCount(), 2);
            mincctcp = round(mincctcp / Table.getRowCount(), 2);

            lblavgper.setText("Avg. Increment Basic Proposal " + mincp + "%");
            lblavgperctc.setText("Avg. Increment CTC Proposal " + mincctcp + "%");
            if (mincp == 0) {
                lblavgper.setForeground(Color.BLACK);
            } else if (mincp <= 9) {
                lblavgper.setForeground(new java.awt.Color(0, 102, 0));
            } else {
                lblavgper.setForeground(Color.RED);
            }

            if (mincctcp == 0) {
                lblavgperctc.setForeground(Color.BLACK);
            } else if (mincctcp <= 9) {
                lblavgperctc.setForeground(new java.awt.Color(0, 102, 0));
            } else {
                lblavgperctc.setForeground(Color.RED);
            }
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();

            List = SDMLATTPAY.ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, ModuleId, DocNo);
            for (i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];
                //JOptionPane.showMessageDialog(null, "USER ID : "+ObjFlow.getAttribute("USER_ID").getVal());
                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelApprovalStatus.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridHS();
            HashMap History = objIncrement.getHistoryList(EITLERPGLOBAL.gCompanyID + "", DocNo);
            for (i = 1; i <= History.size(); i++) {
                clsIncrementProposal ObjHistory = (clsIncrementProposal) History.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, Integer.parseInt(ObjHistory.getAttribute("UPDATED_BY").getString()));
                rowData[2] = ObjHistory.getAttribute("ENTRY_DATE").getString();

                String ApprovalStatus = "";

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjHistory.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjHistory.getAttribute("FROM_IP").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
            //============================================================//

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void FormatGrid() {
        try {
            DataModel_EmpDetail = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel_EmpDetail);
            Table.setAutoResizeMode(0);

            DataModel_EmpDetail.addColumn("SrNo"); //0 - Read Only
            DataModel_EmpDetail.addColumn("Department"); //1
            DataModel_EmpDetail.addColumn("Emp No"); //2
            DataModel_EmpDetail.addColumn("Emp Name"); //3
            DataModel_EmpDetail.addColumn("Date of Joining"); //3
            DataModel_EmpDetail.addColumn("Last Increment [MM/YYYY]"); //3
            DataModel_EmpDetail.addColumn("Designation"); //3
            DataModel_EmpDetail.addColumn("Qualification"); //3
            DataModel_EmpDetail.addColumn("Category"); //3
            DataModel_EmpDetail.addColumn("SubCategory"); //3
            DataModel_EmpDetail.addColumn("Grade"); //3
            DataModel_EmpDetail.addColumn("Date of Birth"); //3

            DataModel_EmpDetail.SetVariable(0, "SrNo"); //0 - Read Only
            DataModel_EmpDetail.SetVariable(1, "IED_DEPARTMENT"); //1
            DataModel_EmpDetail.SetVariable(2, "IED_PAY_EMP_NO"); //2
            DataModel_EmpDetail.SetVariable(3, "IED_EMP_NAME"); //2
            DataModel_EmpDetail.SetVariable(4, "IED_EMP_DATE_OF_JOING"); //3
            DataModel_EmpDetail.SetVariable(5, "IED_LAST_INC_DUE_DATE"); //3
            DataModel_EmpDetail.SetVariable(6, "IED_DESIGNATION"); //4
            DataModel_EmpDetail.SetVariable(7, "IED_QUALIFICATION"); //3
            DataModel_EmpDetail.SetVariable(8, "CATEGORY"); //3
            DataModel_EmpDetail.SetVariable(9, "SUB_CATEGORY"); //3
            DataModel_EmpDetail.SetVariable(10, "EMP_GRADE"); //3
            DataModel_EmpDetail.SetVariable(11, "EMP_DOB"); //3

            for (int i = 0; i <= 11; i++) {
                DataModel_EmpDetail.SetReadOnly(i);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGrid_SalaryDetails() {
        try {
            DataModel_SalaryDetail = new EITLTableModel();
            Table_SalaryDetail.removeAll();

            Table_SalaryDetail.setModel(DataModel_SalaryDetail);
            Table_SalaryDetail.setAutoResizeMode(0);

            DataModel_SalaryDetail.addColumn("Basic"); //0 - Read Only
            DataModel_SalaryDetail.addColumn("Personal Pay"); //1
            DataModel_SalaryDetail.addColumn("DA Rate"); //
            DataModel_SalaryDetail.addColumn("HRA"); //
            DataModel_SalaryDetail.addColumn("Award HRA"); //
            DataModel_SalaryDetail.addColumn("Magazine Allowance"); //
            DataModel_SalaryDetail.addColumn("Electricity Allowance"); //
            DataModel_SalaryDetail.addColumn("Performance Allowance"); //
            DataModel_SalaryDetail.addColumn("Conveyance Allowance"); //
            DataModel_SalaryDetail.addColumn("Medical / Education / Hotel %"); //
            DataModel_SalaryDetail.addColumn("Medical /Education / Hotel Amount "); //            
            DataModel_SalaryDetail.addColumn("Inflation / Bonus"); //
            DataModel_SalaryDetail.addColumn("PF13%"); //
            DataModel_SalaryDetail.addColumn("ESIC"); //
            DataModel_SalaryDetail.addColumn("Gratuity 4.81%"); //
            DataModel_SalaryDetail.addColumn("Petrol Amount"); //
            DataModel_SalaryDetail.addColumn("Super Annuation"); //
            DataModel_SalaryDetail.addColumn("CTC Amount (Monthly)"); //
            DataModel_SalaryDetail.addColumn("CTC Amount (Yearly)"); //

            DataModel_SalaryDetail.SetVariable(0, "IED_CURRENT_BASIC"); //0 - Read Only
            DataModel_SalaryDetail.SetVariable(1, "IED_CURRENT_PERSONAL_PAY"); //1
            DataModel_SalaryDetail.SetVariable(2, "IED_CURRENT_DA_INDEX"); //2
            DataModel_SalaryDetail.SetVariable(3, "IED_CURRENT_HRA"); //2
            DataModel_SalaryDetail.SetVariable(4, "IED_CURRENT_AWARD_HRA"); //3
            DataModel_SalaryDetail.SetVariable(5, "IED_CURRENT_MAGAZINE"); //3
            DataModel_SalaryDetail.SetVariable(6, "IED_CURRENT_ELECTRICITY"); //4
            DataModel_SalaryDetail.SetVariable(7, "IED_CURRENT_PERFORMANCE_ALLOWANCE"); //3
            DataModel_SalaryDetail.SetVariable(8, "IED_CURRENT_CONVEY_ALLOWANCE"); //1
            DataModel_SalaryDetail.SetVariable(9, "IED_CURRENT_MEDICAL_PER"); //2
            DataModel_SalaryDetail.SetVariable(10, "IED_CURRENT_MEDICAL_AMOUNT"); //2            
            DataModel_SalaryDetail.SetVariable(11, "IED_CURRENT_INFLATION_BONUS_AMOUNT"); //3
            DataModel_SalaryDetail.SetVariable(12, "IED_CURRENT_PF_AMOUNT"); //4
            DataModel_SalaryDetail.SetVariable(13, "IED_CURRENT_ESIC_AMOUNT"); //4
            DataModel_SalaryDetail.SetVariable(14, "IED_CURRENT_GRATUITY_AMOUNT"); //3
            DataModel_SalaryDetail.SetVariable(15, "IED_CURRENT_PETROL_AMOUNT"); //3
            DataModel_SalaryDetail.SetVariable(16, "IED_CURRENT_SUPER_ANNUATION_AMOUNT"); //3
            DataModel_SalaryDetail.SetVariable(17, "IED_CURRENT_MONTHLY_CTC"); //3
            DataModel_SalaryDetail.SetVariable(18, "IED_CURRENT_YEARLY_CTC"); //3

            for (int i = 0; i <= 18; i++) {
                DataModel_SalaryDetail.SetReadOnly(i);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGrid_LastIncrementDetails() {
        try {
            DataModel_LastIncrementDetail = new EITLTableModel();
            Table_LastIncrement.removeAll();

            Table_LastIncrement.setModel(DataModel_LastIncrementDetail);
            Table_LastIncrement.setAutoResizeMode(0);

            DataModel_LastIncrementDetail.addColumn("Basic/Rate"); //IED_LAST_INC_BASIC
            DataModel_LastIncrementDetail.addColumn("Personal Pay"); //IED_LAST_INC_PERSONAL_PAY
            DataModel_LastIncrementDetail.addColumn("HRA"); //IED_LAST_INC_HRA
            DataModel_LastIncrementDetail.addColumn("Electricity Allowance"); //IED_LAST_INC_ELECTRICITY
            DataModel_LastIncrementDetail.addColumn("Magazine Allowance"); //IED_LAST_INC_MAGAZINE
            DataModel_LastIncrementDetail.addColumn("Performance Allowance"); //IED_LAST_INC_PERFORMANCE_ALLOWANCE
            DataModel_LastIncrementDetail.addColumn("Conveyance Allowance"); //IED_LAST_INC_CONVEY_ALLOWANCE
            DataModel_LastIncrementDetail.addColumn("Total Increment Amount"); //IED_LAST_TOTAL_INCREMENT

            DataModel_LastIncrementDetail.SetVariable(0, "IED_LAST_INC_BASIC"); //0 - Read Only
            DataModel_LastIncrementDetail.SetVariable(1, "IED_LAST_INC_PERSONAL_PAY"); //1
            DataModel_LastIncrementDetail.SetVariable(2, "IED_LAST_INC_HRA"); //2
            DataModel_LastIncrementDetail.SetVariable(3, "IED_LAST_INC_ELECTRICITY"); //2
            DataModel_LastIncrementDetail.SetVariable(4, "IED_LAST_INC_MAGAZINE"); //3
            DataModel_LastIncrementDetail.SetVariable(5, "IED_LAST_INC_PERFORMANCE_ALLOWANCE"); //3
            DataModel_LastIncrementDetail.SetVariable(6, "IED_LAST_INC_CONVEY_ALLOWANCE"); //4
            DataModel_LastIncrementDetail.SetVariable(7, "IED_LAST_TOTAL_INCREMENT"); //3

            for (int i = 0; i <= 7; i++) {
                DataModel_LastIncrementDetail.SetReadOnly(i);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGrid_ProposalIncrement() {
        try {
            DataModel_ProposedIncrement = new EITLTableModel();
            Table_ProposalIncrement.removeAll();

            Table_ProposalIncrement.setModel(DataModel_ProposedIncrement);
            Table_ProposalIncrement.setAutoResizeMode(0);

            DataModel_ProposedIncrement.addColumn("Basic/Rate"); //IED_LAST_INC_BASIC
            DataModel_ProposedIncrement.addColumn("Personal Pay"); //IED_LAST_INC_PERSONAL_PAY
            DataModel_ProposedIncrement.addColumn("HRA"); //IED_LAST_INC_HRA
            DataModel_ProposedIncrement.addColumn("Electricity Allowance"); //IED_LAST_INC_ELECTRICITY
            DataModel_ProposedIncrement.addColumn("Magazine Allowance"); //IED_LAST_INC_MAGAZINE
            DataModel_ProposedIncrement.addColumn("Performance Allowance"); //IED_LAST_INC_PERFORMANCE_ALLOWANCE
            DataModel_ProposedIncrement.addColumn("Conveyance Allowance"); //IED_LAST_INC_CONVEY_ALLOWANCE
            DataModel_ProposedIncrement.addColumn("% Medical / Education / Hotel"); //
            DataModel_ProposedIncrement.addColumn("Proposed Promotion"); //
            DataModel_ProposedIncrement.addColumn("Special Increment");
            DataModel_ProposedIncrement.addColumn("Total Increment Amount"); //IED_LAST_TOTAL_INCREMENT
            DataModel_ProposedIncrement.addColumn("Special Total Increment");
            DataModel_ProposedIncrement.addColumn("Resignation");
            DataModel_ProposedIncrement.addColumn("Probation");
            DataModel_ProposedIncrement.addColumn("Remark");

            DataModel_ProposedIncrement.SetVariable(0, "IED_CURRENT_INC_BASIC"); //0 - Read Only
            DataModel_ProposedIncrement.SetVariable(1, "IED_CURRENT_INC_PERSONAL_PAY"); //1
            DataModel_ProposedIncrement.SetVariable(2, "IED_CURRENT_INC_HRA"); //2
            DataModel_ProposedIncrement.SetVariable(3, "IED_CURRENT_INC_ELECTRICITY"); //3
            DataModel_ProposedIncrement.SetVariable(4, "IED_CURRENT_INC_MAGAZINE"); //
            DataModel_ProposedIncrement.SetVariable(5, "IED_CURRENT_INC_PERFORMANCE_ALLOWANCE"); //3
            DataModel_ProposedIncrement.SetVariable(6, "IED_CURRENT_INC_CONVEY_ALLOWANCE"); //4
            DataModel_ProposedIncrement.SetVariable(7, "IED_REVISED_MEDICAL_PER"); //3
            DataModel_ProposedIncrement.SetVariable(8, "IED_CURRENT_PROPOSED_PROMOTION"); //3
            DataModel_ProposedIncrement.SetVariable(9, "IED_CURRENT_SPECIAL_INCREMENT"); //3
            DataModel_ProposedIncrement.SetVariable(10, "IED_TOTAL_INCREMENT");
            DataModel_ProposedIncrement.SetVariable(11, "IED_TOTAL_SPECIAL_INCREMENT");
            DataModel_ProposedIncrement.SetVariable(12, "IED_RESIGNATION");
            DataModel_ProposedIncrement.SetVariable(13, "IED_PROBATION");
            DataModel_ProposedIncrement.SetVariable(14, "IED_REMARK");

            DataModel_ProposedIncrement.SetReadOnly(2);
            DataModel_ProposedIncrement.SetReadOnly(3);
            DataModel_ProposedIncrement.SetReadOnly(4);
            //DataModel_ProposedIncrement.SetReadOnly(8);
            //DataModel_ProposedIncrement.SetReadOnly(9);
            DataModel_ProposedIncrement.SetReadOnly(10);
            DataModel_ProposedIncrement.SetReadOnly(11);

            Table_ProposalIncrement.getColumnModel().getColumn(9).setMinWidth(0);//Special 
            Table_ProposalIncrement.getColumnModel().getColumn(9).setMaxWidth(0);
            Table_ProposalIncrement.getColumnModel().getColumn(11).setMinWidth(0);//Special 
            Table_ProposalIncrement.getColumnModel().getColumn(11).setMaxWidth(0);

            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
            int ImportCol = DataModel_ProposedIncrement.getColFromVariable("IED_CURRENT_PROPOSED_PROMOTION");
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox = new JCheckBox();
            aCheckBox.setBackground(Color.WHITE);
            aCheckBox.setVisible(true);
            aCheckBox.setEnabled(true);
            aCheckBox.setSelected(false);
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox));
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);

            ImportCol = DataModel_ProposedIncrement.getColFromVariable("IED_RESIGNATION");
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox1 = new JCheckBox();
            aCheckBox1.setBackground(Color.WHITE);
            aCheckBox1.setVisible(true);
            aCheckBox1.setEnabled(true);
            aCheckBox1.setSelected(false);
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox1));
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);

            ImportCol = DataModel_ProposedIncrement.getColFromVariable("IED_PROBATION");
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox2 = new JCheckBox();
            aCheckBox2.setBackground(Color.WHITE);
            aCheckBox2.setVisible(true);
            aCheckBox2.setEnabled(true);
            aCheckBox2.setSelected(false);
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox2));
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGrid_ProposalIncrementDetail() {
        try {
            DataModel_ProposedIncrementDetail = new EITLTableModel();
            TableIncrementStatus.removeAll();

            TableIncrementStatus.setModel(DataModel_ProposedIncrementDetail);
            TableIncrementStatus.setAutoResizeMode(0);

            DataModel_ProposedIncrementDetail.addColumn("Department"); //0 - Read Only
            DataModel_ProposedIncrementDetail.addColumn("Emp No"); //0 - Read Only
            DataModel_ProposedIncrementDetail.addColumn("Emp Name"); //0 - Read Only
            DataModel_ProposedIncrementDetail.addColumn("Grade"); //0 - Read Only
            DataModel_ProposedIncrementDetail.addColumn("Increse Basic %");
            DataModel_ProposedIncrementDetail.addColumn("Special Increse Basic %");
            DataModel_ProposedIncrementDetail.addColumn("Increse in CTC%");
            DataModel_ProposedIncrementDetail.addColumn("Special Increse in CTC%"); //0 - Read Only
//            DataModel_ProposedIncrementDetail.addColumn("Increse in Montly CTC");
            DataModel_ProposedIncrementDetail.addColumn("Last Increment");
            DataModel_ProposedIncrementDetail.addColumn("Proposal Increment");
            DataModel_ProposedIncrementDetail.addColumn("Special Proposal Increment");
            DataModel_ProposedIncrementDetail.addColumn("Current CTC Amount (Yearly)"); //            
            DataModel_ProposedIncrementDetail.addColumn("Proposal CTC Amount (Yearly)"); // 

            DataModel_ProposedIncrementDetail.addColumn("Current Basic"); //0 - Read Only
            DataModel_ProposedIncrementDetail.addColumn("Increment Basic"); //0 - Read Only
            DataModel_ProposedIncrementDetail.addColumn("Proposal Basic"); //0 - Read Only
            DataModel_ProposedIncrementDetail.addColumn("Current Personal Pay "); //1
            DataModel_ProposedIncrementDetail.addColumn("Increment Personal Pay "); //1
            DataModel_ProposedIncrementDetail.addColumn("Proposal Personal Pay "); //1
            DataModel_ProposedIncrementDetail.addColumn("DA Rate"); //
            DataModel_ProposedIncrementDetail.addColumn("Current HRA "); //
            DataModel_ProposedIncrementDetail.addColumn("Increment HRA "); //
            DataModel_ProposedIncrementDetail.addColumn("Proposal HRA "); //
            DataModel_ProposedIncrementDetail.addColumn("Award HRA"); //                        
            DataModel_ProposedIncrementDetail.addColumn("Current Magazine Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Increment Magazine Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Proposal Magazine Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Current Electricity Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Increment Electricity Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Proposal Electricity Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Current Performance Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Increment Performance Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Proposal Performance Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Current Conveyance Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Increment Conveyance Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Proposal Conveyance Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Current Medical / Education / Hotel %"); //
            DataModel_ProposedIncrementDetail.addColumn("Increment Medical / Education / Hotel %"); //            
            DataModel_ProposedIncrementDetail.addColumn("Current Medical /Education / Hotel Amount "); //                                 
            DataModel_ProposedIncrementDetail.addColumn("Proposal Medical /Education / Hotel Amount "); //            
            DataModel_ProposedIncrementDetail.addColumn("Current Inflation / Bonus"); //
            DataModel_ProposedIncrementDetail.addColumn("Proposal Inflation / Bonus"); //
            DataModel_ProposedIncrementDetail.addColumn("Current PF13%"); //
            DataModel_ProposedIncrementDetail.addColumn("Proposal PF13%"); //
            DataModel_ProposedIncrementDetail.addColumn("Current ESIC"); //
            DataModel_ProposedIncrementDetail.addColumn("Proposal ESIC"); //
            DataModel_ProposedIncrementDetail.addColumn("Current Gratuity 4.81%"); //
            DataModel_ProposedIncrementDetail.addColumn("Proposal Gratuity 4.81%"); //
            DataModel_ProposedIncrementDetail.addColumn("Petrol Amount"); //            
            DataModel_ProposedIncrementDetail.addColumn("Current Super Annuation Amount"); //
            DataModel_ProposedIncrementDetail.addColumn("Proposal Super Annuation Amount"); //
            DataModel_ProposedIncrementDetail.addColumn("CTC Monthly Current"); //0 - Read Only
            DataModel_ProposedIncrementDetail.addColumn("CTC Monthly Proposal"); //0 - Read Only          
            DataModel_ProposedIncrementDetail.addColumn("Proposal Promotion");
            DataModel_ProposedIncrementDetail.addColumn("Total Special Increment");
            DataModel_ProposedIncrementDetail.addColumn("Resignation");
            DataModel_ProposedIncrementDetail.addColumn("Probation");
            DataModel_ProposedIncrementDetail.addColumn("Remark");

            DataModel_ProposedIncrementDetail.SetVariable(0, "IED_DEPARTMENT"); //0 - Read Only
            DataModel_ProposedIncrementDetail.SetVariable(1, "IED_PAY_EMP_NO"); //0 - Read Only
            DataModel_ProposedIncrementDetail.SetVariable(2, "IED_EMP_NAME"); //0 - Read Only
            DataModel_ProposedIncrementDetail.SetVariable(3, "IED_EMP_GRADE"); //0 - Read Only
            DataModel_ProposedIncrementDetail.SetVariable(4, "IED_REVISED_PER");
            DataModel_ProposedIncrementDetail.SetVariable(5, "IED_REVISED_SPL_PER");
            DataModel_ProposedIncrementDetail.SetVariable(6, "IED_REVISED_CTC_PER");
            DataModel_ProposedIncrementDetail.SetVariable(7, "IED_REVISED_CTC_SPL_PER");
            DataModel_ProposedIncrementDetail.SetVariable(8, "IED_LAST_TOTAL_INCREMENT");
            DataModel_ProposedIncrementDetail.SetVariable(9, "IED_TOTAL_INCREMENT");
            DataModel_ProposedIncrementDetail.SetVariable(10, "IED_CURRENT_SPECIAL_INCREMENT");
//            DataModel_ProposedIncrementDetail.SetVariable(4, "IED_DIFF_CTC");
            DataModel_ProposedIncrementDetail.SetVariable(11, "IED_CURRENT_YEARLY_CTC"); //3
            DataModel_ProposedIncrementDetail.SetVariable(12, "IED_REVISED_YEARLY_CTC");

            DataModel_ProposedIncrementDetail.SetVariable(13, "IED_CURRENT_BASIC");
            DataModel_ProposedIncrementDetail.SetVariable(14, "IED_CURRENT_INC_BASIC"); //0 - Read Only
            DataModel_ProposedIncrementDetail.SetVariable(15, "IED_REVISED_BASIC"); //0 - Read Only
            DataModel_ProposedIncrementDetail.SetVariable(16, "IED_CURRENT_PERSONAL_PAY");
            DataModel_ProposedIncrementDetail.SetVariable(17, "IED_CURRENT_INC_PERSONAL_PAY"); //1
            DataModel_ProposedIncrementDetail.SetVariable(18, "IED_REVISED_PERSONAL_PAY"); //1
            DataModel_ProposedIncrementDetail.SetVariable(19, "IED_CURRENT_DA_INDEX");
            DataModel_ProposedIncrementDetail.SetVariable(20, "IED_CURRENT_HRA");
            DataModel_ProposedIncrementDetail.SetVariable(21, "IED_CURRENT_INC_HRA"); //2
            DataModel_ProposedIncrementDetail.SetVariable(22, "IED_REVISED_HRA"); //2
            DataModel_ProposedIncrementDetail.SetVariable(23, "IED_CURRENT_AWARD_HRA"); //3
            DataModel_ProposedIncrementDetail.SetVariable(24, "IED_CURRENT_MAGAZINE");
            DataModel_ProposedIncrementDetail.SetVariable(25, "IED_CURRENT_INC_MAGAZINE");
            DataModel_ProposedIncrementDetail.SetVariable(26, "IED_REVISED_MAGAZINE"); //3
            DataModel_ProposedIncrementDetail.SetVariable(27, "IED_CURRENT_ELECTRICITY");
            DataModel_ProposedIncrementDetail.SetVariable(28, "IED_CURRENT_INC_ELECTRICITY");
            DataModel_ProposedIncrementDetail.SetVariable(29, "IED_REVISED_ELECTRICITY"); //4
            DataModel_ProposedIncrementDetail.SetVariable(30, "IED_CURRENT_PERFORMANCE_ALLOWANCE");
            DataModel_ProposedIncrementDetail.SetVariable(31, "IED_CURRENT_INC_PERFORMANCE_ALLOWANCE");
            DataModel_ProposedIncrementDetail.SetVariable(32, "IED_REVISED_PERFORMANCE_ALLOWANCE"); //3
            DataModel_ProposedIncrementDetail.SetVariable(33, "IED_CURRENT_CONVEY_ALLOWANCE");
            DataModel_ProposedIncrementDetail.SetVariable(34, "IED_CURRENT_INC_CONVEY_ALLOWANCE");
            DataModel_ProposedIncrementDetail.SetVariable(35, "IED_REVISED_CONVEY_ALLOWANCE"); //1
            DataModel_ProposedIncrementDetail.SetVariable(36, "IED_CURRENT_MEDICAL_PER");
            DataModel_ProposedIncrementDetail.SetVariable(37, "IED_REVISED_MEDICAL_PER"); //2
            DataModel_ProposedIncrementDetail.SetVariable(38, "IED_CURRENT_MEDICAL_AMOUNT");
            DataModel_ProposedIncrementDetail.SetVariable(39, "IED_REVISED_MEDICAL_AMOUNT"); //2
            DataModel_ProposedIncrementDetail.SetVariable(40, "IED_CURRENT_INFLATION_BONUS_AMOUNT"); //3
            DataModel_ProposedIncrementDetail.SetVariable(41, "IED_REVISED_INFLATION_BONUS_AMOUNT"); //3
            DataModel_ProposedIncrementDetail.SetVariable(42, "IED_CURRENT_PF_AMOUNT");
            DataModel_ProposedIncrementDetail.SetVariable(43, "IED_REVISED_PF_AMOUNT"); //4
            DataModel_ProposedIncrementDetail.SetVariable(44, "IED_CURRENT_ESIC_AMOUNT");
            DataModel_ProposedIncrementDetail.SetVariable(45, "IED_REVISED_ESIC_AMOUNT");
            DataModel_ProposedIncrementDetail.SetVariable(46, "IED_CURRENT_GRATUITY_AMOUNT");
            DataModel_ProposedIncrementDetail.SetVariable(47, "IED_REVISED_GRATUITY_AMOUNT"); //3
            DataModel_ProposedIncrementDetail.SetVariable(48, "IED_CURRENT_PETROL_AMOUNT"); //3
            DataModel_ProposedIncrementDetail.SetVariable(49, "IED_CURRENT_SUPER_ANNUATION_AMOUNT"); //3
            DataModel_ProposedIncrementDetail.SetVariable(50, "IED_REVISED_SUPER_ANNUATION_AMOUNT"); //3
            DataModel_ProposedIncrementDetail.SetVariable(51, "IED_CURRENT_MONTHLY_CTC");
            DataModel_ProposedIncrementDetail.SetVariable(52, "IED_REVISED_MONTHLY_CTC");//3
            DataModel_ProposedIncrementDetail.SetVariable(53, "IED_PROPOSE_PROMOTION");
            DataModel_ProposedIncrementDetail.SetVariable(54, "IED_TOTAL_SPECIAL_INCREMENT");
            DataModel_ProposedIncrementDetail.SetVariable(55, "IED_RESIGNATION");
            DataModel_ProposedIncrementDetail.SetVariable(56, "IED_PROBATION");
            DataModel_ProposedIncrementDetail.SetVariable(57, "IED_REMARK");

            for (int i = 0; i <= 57; i++) {
                DataModel_ProposedIncrementDetail.SetReadOnly(i);
            }
            TableIncrementStatus.getColumnModel().getColumn(5).setMinWidth(0);//Special 
            TableIncrementStatus.getColumnModel().getColumn(5).setMaxWidth(0);
            TableIncrementStatus.getColumnModel().getColumn(7).setMinWidth(0);//Special 
            TableIncrementStatus.getColumnModel().getColumn(7).setMaxWidth(0);
            TableIncrementStatus.getColumnModel().getColumn(10).setMinWidth(0);//Special 
            TableIncrementStatus.getColumnModel().getColumn(10).setMaxWidth(0);
            TableIncrementStatus.getColumnModel().getColumn(54).setMinWidth(0);//Special 
            TableIncrementStatus.getColumnModel().getColumn(54).setMaxWidth(0);
            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
            int ImportCol = DataModel_ProposedIncrementDetail.getColFromVariable("IED_PROPOSE_PROMOTION");
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox = new JCheckBox();
            aCheckBox.setBackground(Color.WHITE);
            aCheckBox.setVisible(true);
            aCheckBox.setEnabled(true);
            aCheckBox.setSelected(false);
            TableIncrementStatus.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox));
            TableIncrementStatus.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);

            ImportCol = DataModel_ProposedIncrementDetail.getColFromVariable("IED_RESIGNATION");
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox1 = new JCheckBox();
            aCheckBox1.setBackground(Color.WHITE);
            aCheckBox1.setVisible(true);
            aCheckBox1.setEnabled(true);
            aCheckBox1.setSelected(false);
            TableIncrementStatus.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox1));
            TableIncrementStatus.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);

            ImportCol = DataModel_ProposedIncrementDetail.getColFromVariable("IED_PROBATION");
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox2 = new JCheckBox();
            aCheckBox2.setBackground(Color.WHITE);
            aCheckBox2.setVisible(true);
            aCheckBox2.setEnabled(true);
            aCheckBox2.setSelected(false);
            TableIncrementStatus.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox2));
            TableIncrementStatus.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);

//            Desktop desktop = Desktop.getDesktop();  
//	          
//	            File f = new File( DIR + txtEmpNo.getText()  +  ".doc");
//	             desktop.open(f);  // opens application (MSWord) associated with .doc file
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridA() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableApprovalStatus.setAutoResizeMode(TableApprovalStatus.AUTO_RESIZE_OFF);

    }

    private void SetMenuForRights() {
        // --- Add Rights --
//        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10077, 100771)) { //7008,70081
//            cmdNew.setEnabled(false);
//        } else {
        cmdNew.setEnabled(false);
//        }

        // --- Edit Rights --
        cmdEdit.setEnabled(true);
//        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10077, 100772)) { //7008,70082
//            cmdEdit.setEnabled(true);
//        } else {
//            cmdEdit.setEnabled(false);
//        }

        // --- Delete Rights --
//        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10077, 100773)) {
//            cmdDelete.setEnabled(true);
//        } else {
        cmdDelete.setEnabled(false);
//        }

        // --- Print Rights --
//        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10077, 100775)) {
//            cmdPreview.setEnabled(true);
//            cmdPrint.setEnabled(true);
//        } else {
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
//        }
    }

    private void SetupApproval() {

        if (cmbHierarchy.getItemCount() > 1) {
            cmbHierarchy.setEnabled(true);
        }
        //JOptionPane.showMessageDialog(null, "Approval Cmb : "+cmbHierarchy.getItemCount());
        //In Edit Mode Hierarchy Should be disabled
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID));
            txtFromRemarks.setText("");
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "Hierarchy Id = "+SelHierarchyID);
        //GenerateFromCombo();
        //GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }

        if (EditMode == 0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            //txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }

        if (clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            OpgReject.setEnabled(false);
        }
        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            //JOptionPane.showMessageDialog(null, "Final Approver");
            OpgApprove.setEnabled(false);
        }
    }

    private void FormatGridHS() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("FROM_IP");

        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(20);
        tcm.getColumn(1).setPreferredWidth(120);
        tcm.getColumn(2).setPreferredWidth(100);
        tcm.getColumn(3).setPreferredWidth(80);
        tcm.getColumn(4).setPreferredWidth(80);
        tcm.getColumn(5).setPreferredWidth(100);
        TableUpdateHistory.setAutoResizeMode(TableUpdateHistory.AUTO_RESIZE_OFF);
    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (EITLERPGLOBAL.gNewUserID == SDMLATTPAY.ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "")) {
                List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + (ModuleId));
            } else {
                List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
            }
        }

        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = SDMLATTPAY.ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "");
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
        }

    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableColumnModel tcm = TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(150);
        tcm.getColumn(5).setPreferredWidth(150);
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("FROM_IP");

//        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
//        tcm.getColumn(0).setPreferredWidth(10);
//        tcm.getColumn(2).setPreferredWidth(50);
//        tcm.getColumn(3).setPreferredWidth(20);
//        tcm.getColumn(4).setPreferredWidth(80);
//        tcm.getColumn(5).setPreferredWidth(70);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        file1 = new javax.swing.JFileChooser();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        Tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Table_SalaryDetail = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        txtEmpNo = new javax.swing.JTextField();
        txtEmpName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        Table_LastIncrement = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        Table_ProposalIncrement = new javax.swing.JTable();
        btnupdate = new javax.swing.JButton();
        txtDept = new javax.swing.JTextField();
        txtcategory = new javax.swing.JTextField();
        lblctcsplper = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblctcper = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        lblsplper = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        lblper = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JFormattedTextField();
        lblavgperctc = new javax.swing.JLabel();
        lblavgper = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        StatusPanel1 = new javax.swing.JPanel();
        jLabel61 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        TableIncrementStatus = new javax.swing.JTable();
        btnEmpMstETE = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        StatusPanel = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        lblTitle = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblStatus1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        ltbPink = new javax.swing.JLabel();

        file1.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 1180, 40);

        Tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        jLabel2.setText("Doc Date");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(200, 10, 90, 30);

        txtDocDate.setEditable(false);
        jPanel1.add(txtDocDate);
        txtDocDate.setBounds(270, 10, 100, 30);

        jLabel1.setText("Employees Details");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 50, 230, 14);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 70, 1150, 130);

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel7.setLayout(null);

        jLabel4.setText("Salary Details");
        jPanel7.add(jLabel4);
        jLabel4.setBounds(10, 70, 230, 20);

        Table_SalaryDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(Table_SalaryDetail);

        jPanel7.add(jScrollPane3);
        jScrollPane3.setBounds(10, 90, 1130, 60);

        jLabel5.setText("Employee");
        jPanel7.add(jLabel5);
        jLabel5.setBounds(10, 0, 80, 30);

        txtEmpNo.setEnabled(false);
        jPanel7.add(txtEmpNo);
        txtEmpNo.setBounds(80, 7, 90, 20);

        txtEmpName.setEnabled(false);
        jPanel7.add(txtEmpName);
        txtEmpName.setBounds(170, 7, 380, 20);

        jLabel6.setText("Last Increment");
        jPanel7.add(jLabel6);
        jLabel6.setBounds(10, 150, 230, 14);

        Table_LastIncrement.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(Table_LastIncrement);

        jPanel7.add(jScrollPane4);
        jScrollPane4.setBounds(10, 170, 1130, 50);

        jLabel7.setText("Proposed Increment");
        jPanel7.add(jLabel7);
        jLabel7.setBounds(10, 210, 230, 40);

        Table_ProposalIncrement.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_ProposalIncrement.setCellSelectionEnabled(true);
        Table_ProposalIncrement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Table_ProposalIncrementMouseClicked(evt);
            }
        });
        Table_ProposalIncrement.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Table_ProposalIncrementKeyReleased(evt);
            }
        });
        jScrollPane5.setViewportView(Table_ProposalIncrement);

        jPanel7.add(jScrollPane5);
        jScrollPane5.setBounds(10, 240, 1130, 60);

        btnupdate.setText("UPDATE");
        btnupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnupdateActionPerformed(evt);
            }
        });
        jPanel7.add(btnupdate);
        btnupdate.setBounds(750, 310, 140, 23);

        txtDept.setEnabled(false);
        jPanel7.add(txtDept);
        txtDept.setBounds(550, 7, 90, 20);

        txtcategory.setEnabled(false);
        jPanel7.add(txtcategory);
        txtcategory.setBounds(640, 7, 170, 20);

        lblctcsplper.setText("Per%");
        jPanel7.add(lblctcsplper);
        lblctcsplper.setBounds(710, 40, 50, 20);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("CTC+Special Per%");
        jPanel7.add(jLabel9);
        jLabel9.setBounds(570, 40, 110, 20);

        lblctcper.setText("Per%");
        jPanel7.add(lblctcper);
        lblctcper.setBounds(470, 40, 50, 20);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("CTC Per%");
        jPanel7.add(jLabel11);
        jLabel11.setBounds(390, 40, 60, 20);

        lblsplper.setText("Per%");
        jPanel7.add(lblsplper);
        lblsplper.setBounds(320, 40, 50, 20);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("Basic+Special Per%");
        jPanel7.add(jLabel13);
        jLabel13.setBounds(180, 40, 130, 20);

        lblper.setText("Per%");
        jPanel7.add(lblper);
        lblper.setBounds(80, 40, 50, 20);

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setText("Basic Per%");
        jPanel7.add(jLabel15);
        jLabel15.setBounds(10, 40, 70, 20);

        jPanel1.add(jPanel7);
        jPanel7.setBounds(10, 210, 1150, 340);

        jLabel3.setText("Doc No.");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(10, 10, 90, 30);

        txtDocNo.setEditable(false);
        jPanel1.add(txtDocNo);
        txtDocNo.setBounds(80, 10, 100, 30);

        lblavgperctc.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblavgperctc.setText("Avg. Increment CTC Proposal ");
        jPanel1.add(lblavgperctc);
        lblavgperctc.setBounds(760, 10, 360, 30);

        lblavgper.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblavgper.setForeground(new java.awt.Color(0, 102, 0));
        lblavgper.setText("Avg. Increment Basic Proposal ");
        jPanel1.add(lblavgper);
        lblavgper.setBounds(380, 10, 370, 30);

        Tab.addTab("Employee Increment Proposal", jPanel1);

        jPanel4.setLayout(null);

        StatusPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StatusPanel1.setLayout(null);

        jLabel61.setText("Increment Status");
        StatusPanel1.add(jLabel61);
        jLabel61.setBounds(12, 10, 242, 14);

        TableIncrementStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(TableIncrementStatus);

        StatusPanel1.add(jScrollPane7);
        jScrollPane7.setBounds(0, 40, 1150, 420);

        jPanel4.add(StatusPanel1);
        StatusPanel1.setBounds(10, 0, 1160, 480);

        btnEmpMstETE.setLabel("Export to Excel");
        btnEmpMstETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpMstETEActionPerformed(evt);
            }
        });
        jPanel4.add(btnEmpMstETE);
        btnEmpMstETE.setBounds(10, 490, 150, 30);

        Tab.addTab("Increment Status", jPanel4);

        jPanel2.setLayout(null);

        Tab2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 23, 66, 14);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(90, 20, 180, 20);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 62, 56, 14);

        txtFrom.setBackground(new java.awt.Color(246, 238, 238));
        txtFrom.setForeground(new java.awt.Color(11, 7, 7));
        Tab2.add(txtFrom);
        txtFrom.setBounds(90, 60, 180, 20);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 95, 62, 14);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(90, 95, 530, 20);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 130, 81, 14);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgRejectActionPerformed(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(90, 130, 180, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 253, 60, 14);

        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(90, 250, 180, 20);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 292, 60, 14);

        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 290, 570, 20);

        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(450, 400, 102, 23);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(630, 95, 33, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(570, 400, 102, 23);

        jPanel2.add(Tab2);
        Tab2.setBounds(10, 0, 760, 460);

        Tab.addTab("Approval", jPanel2);

        jPanel3.setLayout(null);

        StatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StatusPanel.setLayout(null);

        jLabel60.setText("Document Approval Status");
        StatusPanel.add(jLabel60);
        jLabel60.setBounds(12, 10, 242, 14);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableApprovalStatus);

        StatusPanel.add(jScrollPane2);
        jScrollPane2.setBounds(0, 40, 694, 120);

        jLabel19.setText("Document Update History");
        StatusPanel.add(jLabel19);
        jLabel19.setBounds(10, 170, 182, 14);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableUpdateHistory);

        StatusPanel.add(jScrollPane6);
        jScrollPane6.setBounds(10, 190, 540, 130);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdViewHistory);
        cmdViewHistory.setBounds(570, 170, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdNormalView);
        cmdNormalView.setBounds(570, 200, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 230, 132, 24);

        txtAuditRemarks.setEnabled(false);
        StatusPanel.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(570, 260, 129, 20);

        jButton4.setText("Next >>");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton4);
        jButton4.setBounds(660, 290, 100, 30);

        jButton5.setText("<<Previous");
        jButton5.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton5);
        jButton5.setBounds(560, 290, 100, 30);

        jPanel3.add(StatusPanel);
        StatusPanel.setBounds(10, 0, 790, 380);

        Tab.addTab("Status", jPanel3);

        jPanel8.setLayout(null);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("*Calculate basis on [Current Basic+Current Personal Pay+Proposal Basic+Proposal Personal Pay]\n*Not appilcable for BRD STAFF WITH DA\n\nHRA\t\t\t\tELECTRICITY\t\t\tMAGAZINE\n\n>18500\t4500\t\t\t>8100\t500\t\t\t>6000\t300\n>16500\t4000\t\t\t>7100\t400\t\t\t>5000\t200\n>14500\t3700\t\t\t>6100\t300\t\t\t>4000\t100\n>12500\t3400\t\t\t>5100\t200\t\t\t>2999\t 50\n>10500\t3100\t\t\t>4100\t150\n>9500\t2800\t\t\t>3299\t100\n>8500\t2500\n>7500\t2300\n>6500\t2000\n>5500\t1600\n>4500\t1200\n>4000\t 800\n>3500\t 600\n>3000\t 500\n>2500\t 400\n>2000\t 300\n>1599\t 200\n");
        jScrollPane8.setViewportView(jTextArea1);

        jPanel8.add(jScrollPane8);
        jScrollPane8.setBounds(10, 0, 920, 570);

        Tab.addTab("Rules", jPanel8);

        getContentPane().add(Tab);
        Tab.setBounds(0, 70, 1180, 600);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("SDML Employee Increment Proposal");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 1180, 25);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 580, 930, 22);

        lblStatus1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus1.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus1);
        lblStatus1.setBounds(20, 590, 740, 30);
        getContentPane().add(jPanel5);
        jPanel5.setBounds(210, 50, 10, 10);
        getContentPane().add(ltbPink);
        ltbPink.setBounds(10, 70, 0, 0);
    }// </editor-fold>//GEN-END:initComponents


    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgApprove.setEnabled(false);
            OpgApprove.setSelected(false);
        }

        if (clsHierarchy.IsCreator((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgApprove.setEnabled(true);
            OpgReject.setEnabled(false);
            OpgReject.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked

        if (!OpgApprove.isEnabled()) {
            return;
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "SelHierarchyId : "+SelHierarchyID);

        //cmbSendTo.setEnabled(true);
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (SDMLATTPAY.ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "")) {
                cmbSendTo.setEnabled(true);
                txtToRemarks.setEnabled(true);
                txtFromRemarks.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }
        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }

        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(true);
        OpgHold.setSelected(false);
        txtToRemarks.setEnabled(false);
        if (!OpgApprove.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

//        DOC_NO = txtDocNo.getText();
        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);

        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {

                if (OpgApprove.isSelected()) {
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    //JOptionPane.showMessageDialog(null, "Module Id :"+ModuleId+", DOC No : "+sorder_no+", User Id : "+ObjUser.getAttribute("USER_ID").getInt()+", New user Id "+SDMLERPGLOBAL.gNewUserID);
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                    // JOptionPane.showMessageDialog(null, "IncludeUser = "+IncludeUser);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = SDMLATTPAY.ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "");
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }
    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged

    }//GEN-LAST:event_OpgApproveItemStateChanged

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged

    }//GEN-LAST:event_OpgFinalItemStateChanged

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained

    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged

    }//GEN-LAST:event_OpgRejectItemStateChanged

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained

    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged

    }//GEN-LAST:event_OpgHoldItemStateChanged

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained

    }//GEN-LAST:event_OpgHoldFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained

    }//GEN-LAST:event_cmbSendToFocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained

    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed

    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed

    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed

    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained

    }//GEN-LAST:event_Tab2FocusGained

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed

        String DocNo = "";
        objIncrement.ShowHistory(DocNo);
        MoveLast();

    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        objIncrement.HistoryView = false;
        objIncrement.LoadData("");
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed

    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

    }//GEN-LAST:event_jButton5ActionPerformed

    private void TabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabMouseClicked

    }//GEN-LAST:event_TabMouseClicked

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();

    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmdPrintActionPerformed


    private void OpgRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgRejectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgRejectActionPerformed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:     
        selerow = Table.getSelectedRow();
        ShowEmpDetails();
        Table_ProposalIncrementKeyReleased(null);
    }//GEN-LAST:event_TableMouseClicked

    private void btnupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnupdateActionPerformed
        // TODO add your handling code here:
        try {
            Table_ProposalIncrement.getCellEditor().stopCellEditing();
        } catch (Exception e) {
        }
        txtDocNo.requestFocus();
        Table_ProposalIncrement.changeSelection(0, 10, false, false);
        Table_ProposalIncrementKeyReleased(null);
        double totinc;
        try {
            totinc = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_TOTAL_INCREMENT", 0));
        } catch (Exception e) {
            totinc = 0;
        }
        if (totinc == 0) {
            int msv = JOptionPane.showConfirmDialog(null, "Do you want to Update with Zero?");
            if (msv == 0) {
                //Update Increment
                updatedata();
            }
        } else {
            updatedata();
        }
    }//GEN-LAST:event_btnupdateActionPerformed

    private void Table_ProposalIncrementKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_ProposalIncrementKeyReleased
        // TODO add your handling code here:
        ReCalculate();
    }//GEN-LAST:event_Table_ProposalIncrementKeyReleased

    private void Table_ProposalIncrementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Table_ProposalIncrementMouseClicked
        // TODO add your handling code here:
        ReCalculate();
    }//GEN-LAST:event_Table_ProposalIncrementMouseClicked

    private void btnEmpMstETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpMstETEActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);
            toExcel(TableIncrementStatus, new File(file1.getSelectedFile().toString() + ".xls"));
//            exprt.fillData(TableIncrementStatus, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + ".xls successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnEmpMstETEActionPerformed

    private void toExcel(JTable table, File file) {
        try {
            TableModel model = table.getModel();
            FileWriter excel = new FileWriter(file);

            for (int i = 0; i < model.getColumnCount(); i++) {
                if (model.getColumnName(i).equalsIgnoreCase("Special Increse Basic %")
                        || model.getColumnName(i).equalsIgnoreCase("Special Increse in CTC%")
                        || model.getColumnName(i).equalsIgnoreCase("Special Proposal Increment")
                        || model.getColumnName(i).equalsIgnoreCase("Total Special Increment")) {
                } else {
                    excel.write(model.getColumnName(i) + "\t");
                }
            }

            excel.write("\n");

            for (int i = 0; i < model.getRowCount(); i++) {
                for (int j = 0; j < model.getColumnCount(); j++) {
                    if (model.getColumnName(j).equalsIgnoreCase("Special Increse Basic %")
                            || model.getColumnName(j).equalsIgnoreCase("Special Increse in CTC%")
                            || model.getColumnName(j).equalsIgnoreCase("Special Proposal Increment")
                            || model.getColumnName(j).equalsIgnoreCase("Total Special Increment")) {
                    } else {
                        excel.write(model.getValueAt(i, j).toString() + "\t");
                    }
                }
                excel.write("\n");
            }

            excel.close();
        } catch (Exception e) {

        }
    }

    private void ReCalculate() {

        double ibasic, ipp, ihra, iele, imgzn, ipa, ica, imp, ngross, ogross, is;
        ihra = iele = imgzn = is = 0;
        if (DataModel_ProposedIncrement.getValueAt(0, 12).toString().equalsIgnoreCase("true")
                || DataModel_ProposedIncrement.getValueAt(0, 13).toString().equalsIgnoreCase("true")) {
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_BASIC", "0.00", 0);
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_PERSONAL_PAY", "0.00", 0);
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE", "0.00", 0);
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_CONVEY_ALLOWANCE", "0.00", 0);
            DataModel_ProposedIncrement.setValueByVariable("IED_REVISED_MEDICAL_PER", "0", 0);
        }
        try {
            ibasic = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_BASIC", 0));
        } catch (Exception e) {
            ibasic = 0;
        }
        double curbasic = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_BASIC", 0));
        double curpp = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_PERSONAL_PAY", 0));
        double curda = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_DA_INDEX", 0));
        double curhra = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_HRA", 0)) + Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_AWARD_HRA", 0));
        double curele = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_ELECTRICITY", 0));
        double curmgzn = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_MAGAZINE", 0));
        double curpa = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_PERFORMANCE_ALLOWANCE", 0));
        double curca = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_CONVEY_ALLOWANCE", 0));
        double curmp = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_MEDICAL_PER", 0));
        double curma = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_MEDICAL_AMOUNT", 0));

        try {
            ipp = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_PERSONAL_PAY", 0));
        } catch (Exception e) {
            ipp = 0;
        }
        try {
            is = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", 0));
        } catch (Exception e) {
            is = 0;
        }
        if (!txtcategory.getText().equalsIgnoreCase("BRD STAFF WITH DA") 
                && !txtEmpNo.getText().contains("BRD5") 
                && !txtEmpNo.getText().contains("BRD6") 
                && !txtEmpNo.getText().contains("BRD101204") 
                && !txtEmpNo.getText().contains("BRD101963") 
                & !txtEmpNo.getText().contains("BRD102025") 
                && !txtEmpNo.getText().contains("BRD102029") ) {
            double newbasic = curbasic + ibasic + ipp + curpp;
            double nhra, nele, nmgzn;
            if (newbasic > 18500) {
                nhra = 4500;
            } else if (newbasic > 16500) {
                nhra = 4000;
            } else if (newbasic > 14500) {
                nhra = 3700;
            } else if (newbasic > 12500) {
                nhra = 3400;
            } else if (newbasic > 10500) {
                nhra = 3100;
            } else if (newbasic > 9500) {
                nhra = 2800;
            } else if (newbasic > 8500) {
                nhra = 2500;
            } else if (newbasic > 7500) {
                nhra = 2300;
            } else if (newbasic > 6500) {
                nhra = 2000;
            } else if (newbasic > 5500) {
                nhra = 1600;
            } else if (newbasic > 4500) {
                nhra = 1200;
            } else if (newbasic > 4000) {
                nhra = 800;
            } else if (newbasic > 3500) {
                nhra = 600;
            } else if (newbasic > 3000) {
                nhra = 500;
            } else if (newbasic > 2500) {
                nhra = 400;
            } else if (newbasic > 2000) {
                nhra = 300;
            } else if (newbasic > 1599) {
                nhra = 200;
            } else {
                nhra = 0;
            }
            if (curhra != nhra) {
                ihra = nhra - curhra;
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_HRA", String.valueOf(ihra), 0);
            } else {
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_HRA", "0.00", 0);
                ihra = 0;
            }

            if (newbasic > 8100) {
                nele = 500;
            } else if (newbasic > 7100) {
                nele = 400;
            } else if (newbasic > 6100) {
                nele = 300;
            } else if (newbasic > 5100) {
                nele = 200;
            } else if (newbasic > 4100) {
                nele = 150;
            } else if (newbasic > 3299) {
                nele = 100;
            } else {
                nele = 0;
            }
            if (curele != nele) {
                iele = nele - curele;
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_ELECTRICITY", String.valueOf(iele), 0);
            } else {
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_ELECTRICITY", "0.00", 0);
                iele = 0;
            }

            if (newbasic > 6000) {
                nmgzn = 300;
            } else if (newbasic > 5000) {
                nmgzn = 200;
            } else if (newbasic > 4000) {
                nmgzn = 100;
            } else if (newbasic > 2999) {
                nmgzn = 50;
            } else {
                nmgzn = 0;
            }
            if (curmgzn != nmgzn) {
                imgzn = nmgzn - curmgzn;
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_MAGAZINE", String.valueOf(imgzn), 0);
            } else {
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_MAGAZINE", "0.00", 0);
                imgzn = 0;
            }
        }else {
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_HRA", "0.00", 0);
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_MAGAZINE", "0.00", 0);
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_ELECTRICITY", "0.00", 0);
        }
        try {
            ipa = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE", 0));
        } catch (Exception e) {
            ipa = 0;
        }
        try {
            ica = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_CONVEY_ALLOWANCE", 0));
        } catch (Exception e) {
            ica = 0;
        }
        try {
            imp = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_REVISED_MEDICAL_PER", 0));
        } catch (Exception e) {
            imp = 0;
        }
        ogross = curbasic + curpp + curda + curhra + curmgzn + curele + curpa + curca + curma;
        ngross = ogross + ibasic + ipp + ihra + imgzn + iele + ipa + ica;
        if (imp > 0) {
            if (ogross >= esiclimit) {
                if (imp != curmp) {
                    ngross = ngross + ((curbasic + ibasic) * (imp / 100));
                }
            }
        }
        if (ogross < esiclimit && ngross >= esiclimit) {
            DataModel_ProposedIncrement.setValueByVariable("IED_REVISED_MEDICAL_PER", String.valueOf(curmp + 5), 0);
        } else {
            if (ogross < esiclimit) {
                DataModel_ProposedIncrement.setValueByVariable("IED_REVISED_MEDICAL_PER", "", 0);
            }
        }
        //Table_ProposalIncrement.setValueAt(ibasic + ihra + iele + imgzn + ipa + ica, currow, 7);
        DataModel_ProposedIncrement.setValueByVariable("IED_TOTAL_INCREMENT", String.valueOf(ibasic + ipp + ihra + iele + imgzn + ipa + ica), 0);
        DataModel_ProposedIncrement.setValueByVariable("IED_TOTAL_SPECIAL_INCREMENT", String.valueOf(ibasic + ipp + ihra + iele + imgzn + ipa + ica + is), 0);
    }

    private void updatedata() {
        String memp = txtEmpNo.getText();
        int i = 0;
        for (i = 0; i < TableIncrementStatus.getRowCount(); i++) {
            if (memp.equalsIgnoreCase(DataModel_ProposedIncrementDetail.getValueByVariable("IED_PAY_EMP_NO", i))) {
                DataModel_ProposedIncrementDetail.removeRow(i);
                break;
            }
        }
        try {
            double iedsi = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", 0));
        } catch (Exception e) {
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", "0.00", 0);
        }
        Object[] rowData = new Object[1];
        DataModel_ProposedIncrementDetail.addRow(rowData);
        int NewRow = TableIncrementStatus.getRowCount() - 1;
        double cbasic, ibasic, rbasic, cppay, ippay, rppay, cda, chra, ihra, rhra, cmgzn, imgzn, rmgzn, cele, iele, rele, cpa, ipa, rpa, cca, ica, rca, cmp, imp, cma, rma, cinfbns, rinfbns, cpf, rpf, cesic, resic, cgrdty, rgrdty, cpetrol, csa, rsa, cctcm, rctcm, cctcy, rctcy, is;
        double curbasic = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_BASIC", 0));
        double curpp = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_PERSONAL_PAY", 0));
        double curda = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_DA_INDEX", 0));
        double curhra = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_HRA", 0)) + Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_AWARD_HRA", 0));
        double curahra = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_AWARD_HRA", 0));
        double curawardhra = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_AWARD_HRA", 0));
        double curele = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_ELECTRICITY", 0));
        double curmgzn = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_MAGAZINE", 0));
        double curpa = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_PERFORMANCE_ALLOWANCE", 0));
        double curca = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_CONVEY_ALLOWANCE", 0));
        double curmp = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_MEDICAL_PER", 0));
        double curma = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_MEDICAL_AMOUNT", 0));
        double cursa = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_SUPER_ANNUATION_AMOUNT", 0));
        double curinfbns = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_INFLATION_BONUS_AMOUNT", 0));
        double curpetrol = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_PETROL_AMOUNT", 0));
        double curctc = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_MONTHLY_CTC", 0));
        double curctcy = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_YEARLY_CTC", 0));
        double curpf = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_PF_AMOUNT", 0));
        double curgrdty = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_GRATUITY_AMOUNT", 0));
        double curesic = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_ESIC_AMOUNT", 0));
        try {
            ibasic = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_BASIC", 0));
        } catch (Exception e) {
            ibasic = 0;
        }
        try {
            ippay = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_PERSONAL_PAY", 0));
        } catch (Exception e) {
            ippay = 0;
        }
        try {
            ihra = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_HRA", 0));
        } catch (Exception e) {
            ihra = 0;
        }
        try {
            imgzn = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_MAGAZINE", 0));
        } catch (Exception e) {
            imgzn = 0;
        }
        try {
            iele = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_ELECTRICITY", 0));
        } catch (Exception e) {
            iele = 0;
        }
        try {
            ipa = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE", 0));
        } catch (Exception e) {
            ipa = 0;
        }
        try {
            ica = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_CONVEY_ALLOWANCE", 0));
        } catch (Exception e) {
            ica = 0;
        }
        try {
            imp = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_REVISED_MEDICAL_PER", 0));
        } catch (Exception e) {
            imp = 0;
        }
        try {
            is = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", 0));
        } catch (Exception e) {
            is = 0;
        }
        rbasic = curbasic + ibasic;
        rbasic = round(rbasic, 2);
        rppay = curpp + ippay;
        rppay = round(rppay, 2);
        rhra = curhra + ihra;
        rhra = round(rhra, 2);
        rmgzn = curmgzn + imgzn;
        rmgzn = round(rmgzn, 2);
        rele = curele + iele;
        rele = round(rele, 2);
        rpa = curpa + ipa;
        rpa = round(rpa, 2);
        rca = curca + ica;
        rca = round(rca, 2);
        if (curmp < imp) {
            rma = (rbasic + rppay + curda) * (imp / 100);
        } else {
            rma = (rbasic + rppay + curda) * (curmp / 100);
        }
        rma = round(rma, 2);
        if ((rbasic + curda + rppay) < esiclimit) {
            rinfbns = 9087 * 8.3333 / 100;
        } else {
            rinfbns = (rbasic + curda + rppay) * 6 / 100;
        }
        rinfbns = round(rinfbns, 2);
        if ((rbasic + curda + rppay) >= 15000) {
            rpf = (rbasic + curda + rppay) * 13 / 100;
        } else if ((rbasic + curda + rppay + rpa + rmgzn + rca + rele + rma) > 15000) {
            rpf = 1950;
        } else {
            rpf = (rbasic + curda + rppay + rpa + rmgzn + rca + rele + rma) * 13 / 100;
        }
        rpf = round(rpf, 0);
        if ((rbasic + curda + rhra + rca + rele + rppay + rmgzn + rpa + rma) < esiclimit) {
            resic = (rbasic + curda + rhra + rca + rele + rppay + rmgzn + rpa + rma) * 3.25 / 100;
        } else {
            resic = 0;
        }
        resic = Math.ceil(resic);
        rgrdty = (rbasic + curda + rppay) * 4.81 / 100;
        rgrdty = round(rgrdty, 2);
        if (cursa > 0) {
            rsa = (rbasic + curda + rppay) * 7.5 / 100;
        } else {
            rsa = 0;
        }
        rsa = round(rsa, 2);
        rctcm = round(rbasic + rppay + curda + rhra + rmgzn + rele + rpa + rca + rma + rinfbns + rpf + resic + rgrdty + rsa + curpetrol, 2);
        rctcy = round(rctcm * 12, 2);
        double ictcp = round((rctcm - curctc) / curctc * 100, 2);
        double itp, itsp, ictcsp;
        itp = round(Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_TOTAL_INCREMENT", 0)) / (curbasic + curpp + curhra - curahra + curele + curmgzn + curpa + curca) * 100, 2);
        itsp = round(Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_TOTAL_SPECIAL_INCREMENT", 0)) / (curbasic + curpp + curhra - curahra + curele + curmgzn + curpa + curca) * 100, 2);
        ictcsp = round(((rctcm + Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", 0))) - curctc) / curctc * 100, 2);

        DataModel_ProposedIncrementDetail.setValueByVariable("IED_DEPARTMENT", txtDept.getText(), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_PAY_EMP_NO", txtEmpNo.getText(), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_EMP_NAME", txtEmpName.getText(), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_PER", String.valueOf(itp), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_SPL_PER", String.valueOf(itsp), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_CTC_PER", String.valueOf(ictcp), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_CTC_SPL_PER", String.valueOf(ictcsp), NewRow);

        DataModel_ProposedIncrementDetail.setValueByVariable("IED_EMP_GRADE", DataModel_EmpDetail.getValueByVariable("EMP_GRADE", Table.getSelectedRow()), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_LAST_TOTAL_INCREMENT", DataModel_LastIncrementDetail.getValueByVariable("IED_LAST_TOTAL_INCREMENT", 0), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_TOTAL_INCREMENT", DataModel_ProposedIncrement.getValueByVariable("IED_TOTAL_INCREMENT", 0), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_TOTAL_SPECIAL_INCREMENT", DataModel_ProposedIncrement.getValueByVariable("IED_TOTAL_SPECIAL_INCREMENT", 0), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", 0), NewRow);

        //DataModel_ProposedIncrementDetail.setValueByVariable("IED_DIFF_CTC", String.valueOf(round(rctcm - curctc, 2)), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_MONTHLY_CTC", String.valueOf(curctc), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_MONTHLY_CTC", String.valueOf(rctcm), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_BASIC", String.valueOf(curbasic), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_BASIC", String.valueOf(ibasic), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_BASIC", String.valueOf(rbasic), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_PERSONAL_PAY", String.valueOf(curpp), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_PERSONAL_PAY", String.valueOf(ippay), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_PERSONAL_PAY", String.valueOf(rppay), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_DA_INDEX", String.valueOf(curda), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_HRA", String.valueOf(curhra), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_HRA", String.valueOf(ihra), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_HRA", String.valueOf(rhra), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_AWARD_HRA", String.valueOf(curawardhra), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_MAGAZINE", String.valueOf(curmgzn), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_MAGAZINE", String.valueOf(imgzn), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_MAGAZINE", String.valueOf(rmgzn), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_ELECTRICITY", String.valueOf(curele), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_ELECTRICITY", String.valueOf(iele), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_ELECTRICITY", String.valueOf(rele), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_PERFORMANCE_ALLOWANCE", String.valueOf(curpa), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE", String.valueOf(ipa), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_PERFORMANCE_ALLOWANCE", String.valueOf(rpa), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_CONVEY_ALLOWANCE", String.valueOf(curca), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_CONVEY_ALLOWANCE", String.valueOf(ica), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_CONVEY_ALLOWANCE", String.valueOf(rca), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_MEDICAL_PER", String.valueOf(curmp), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_MEDICAL_PER", String.valueOf(imp), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_MEDICAL_AMOUNT", String.valueOf(curma), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_MEDICAL_AMOUNT", String.valueOf(rma), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INFLATION_BONUS_AMOUNT", String.valueOf(curinfbns), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_INFLATION_BONUS_AMOUNT", String.valueOf(rinfbns), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_PF_AMOUNT", String.valueOf(curpf), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_PF_AMOUNT", String.valueOf(rpf), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_ESIC_AMOUNT", String.valueOf(curesic), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_ESIC_AMOUNT", String.valueOf(resic), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_GRATUITY_AMOUNT", String.valueOf(curgrdty), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_GRATUITY_AMOUNT", String.valueOf(rgrdty), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_PETROL_AMOUNT", String.valueOf(curpetrol), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_SUPER_ANNUATION_AMOUNT", String.valueOf(cursa), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_SUPER_ANNUATION_AMOUNT", String.valueOf(rsa), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_YEARLY_CTC", String.valueOf(curctcy), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_YEARLY_CTC", String.valueOf(rctcy), NewRow);
        DataModel_ProposedIncrementDetail.setValueAt(DataModel_ProposedIncrement.getValueAt(0, 8), NewRow, 53);
        DataModel_ProposedIncrementDetail.setValueAt(DataModel_ProposedIncrement.getValueAt(0, 12), NewRow, 55);
        DataModel_ProposedIncrementDetail.setValueAt(DataModel_ProposedIncrement.getValueAt(0, 13), NewRow, 56);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REMARK", DataModel_ProposedIncrement.getValueByVariable("IED_REMARK", 0), NewRow);

        final TableColumnModel columnModel = TableIncrementStatus.getColumnModel();
        for (int column = 0; column < TableIncrementStatus.getColumnCount(); column++) {
            int width = 100; // Min width
            for (int row = 0; row < TableIncrementStatus.getRowCount(); row++) {
                TableCellRenderer renderer = TableIncrementStatus.getCellRenderer(row, column);
                Component comp = TableIncrementStatus.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 10, width);
            }
            if (width > 300) {
                width = 300;
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
        double mincp = 0, mincctcp = 0;
        for (i = 0; i < TableIncrementStatus.getRowCount(); i++) {
            try {
                mincp = mincp + Double.parseDouble(DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_SPL_PER", i));
            } catch (Exception e) {
            }
            try {
                mincctcp = mincctcp + Double.parseDouble(DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_CTC_SPL_PER", i));
            } catch (Exception e) {
            }
        }
        mincp = round(mincp / Table.getRowCount(), 2);
        mincctcp = round(mincctcp / Table.getRowCount(), 2);

        lblavgper.setText("Avg. Increment Basic Proposal " + mincp + "%");
        lblavgperctc.setText("Avg. Increment CTC Proposal " + mincctcp + "%");
        if (mincp == 0) {
            lblavgper.setForeground(Color.BLACK);
        } else if (mincp <= 9) {
            lblavgper.setForeground(new java.awt.Color(0, 102, 0));
        } else {
            lblavgper.setForeground(Color.RED);
        }

        if (mincctcp == 0) {
            lblavgperctc.setForeground(Color.BLACK);
        } else if (mincctcp <= 9) {
            lblavgperctc.setForeground(new java.awt.Color(0, 102, 0));
        } else {
            lblavgperctc.setForeground(Color.RED);
        }
        lblper.setText(String.valueOf(itp) + "%");
        lblsplper.setText(String.valueOf(itsp) + "%");
        lblctcper.setText(String.valueOf(ictcp) + "%");
        lblctcsplper.setText(String.valueOf(ictcsp) + "%");
        JOptionPane.showMessageDialog(this, "Proposal Save...");
    }

    private void ShowEmpDetails() {
        selectedEmpNo = DataModel_EmpDetail.getValueByVariable("IED_PAY_EMP_NO", Table.getSelectedRow());
        selectedEmpName = DataModel_EmpDetail.getValueByVariable("IED_EMP_NAME", Table.getSelectedRow());
        selecteddept = DataModel_EmpDetail.getValueByVariable("IED_DEPARTMENT", Table.getSelectedRow());
        selectedcategory = DataModel_EmpDetail.getValueByVariable("CATEGORY", Table.getSelectedRow());
        txtEmpNo.setText(selectedEmpNo);
        txtEmpName.setText(selectedEmpName);
        txtDept.setText(selecteddept);
        txtcategory.setText(selectedcategory);
        try {
            FormatGrid_SalaryDetails();

            //ResultSet rs = data.getResult("SELECT * FROM SDMLATTPAY.INCREMENT_ENTRY_DETAIL WHERE IED_DOC_NO like  '%-DG52%' AND IED_PAY_EMP_NO = '" + selectedEmpNo + "'");
            //System.out.println("SELECT * FROM SDMLATTPAY.INCREMENT_ENTRY_DETAIL WHERE IED_DOC_NO like  '%-DG52%' AND IED_PAY_EMP_NO = '" + selectedEmpNo + "'");
            Object[] rowData = new Object[1];
            DataModel_SalaryDetail.addRow(rowData);
            //rs.first();
            int i = Table.getSelectedRow() + 1;
            clsIncrementProposalDetails ObjItem = (clsIncrementProposalDetails) objIncrement.hmIncrementProposalDetails.get(Integer.toString(i));

            int NewRow = Table_SalaryDetail.getRowCount() - 1;

            //DataModel_EmpDetail.setValueByVariable("SrNo", Integer.toString(i), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_BASIC", ObjItem.getAttribute("IED_CURRENT_BASIC").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_PERSONAL_PAY", ObjItem.getAttribute("IED_CURRENT_PERSONAL_PAY").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_DA_INDEX", ObjItem.getAttribute("IED_CURRENT_DA_INDEX").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_HRA", ObjItem.getAttribute("IED_CURRENT_HRA").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_AWARD_HRA", ObjItem.getAttribute("IED_CURRENT_AWARD_HRA").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_MAGAZINE", ObjItem.getAttribute("IED_CURRENT_MAGAZINE").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_ELECTRICITY", ObjItem.getAttribute("IED_CURRENT_ELECTRICITY").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_PERFORMANCE_ALLOWANCE", ObjItem.getAttribute("IED_CURRENT_PERFORMANCE_ALLOWANCE").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_CONVEY_ALLOWANCE", ObjItem.getAttribute("IED_CURRENT_CONVEY_ALLOWANCE").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_MEDICAL_PER", ObjItem.getAttribute("IED_CURRENT_MEDICAL_PER").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_MEDICAL_AMOUNT", ObjItem.getAttribute("IED_CURRENT_MEDICAL_AMOUNT").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_INFLATION_BONUS_AMOUNT", ObjItem.getAttribute("IED_CURRENT_INFLATION_BONUS_AMOUNT").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_PF_AMOUNT", ObjItem.getAttribute("IED_CURRENT_PF_AMOUNT").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_ESIC_AMOUNT", ObjItem.getAttribute("IED_CURRENT_ESIC_AMOUNT").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_GRATUITY_AMOUNT", ObjItem.getAttribute("IED_CURRENT_GRATUITY_AMOUNT").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_PETROL_AMOUNT", ObjItem.getAttribute("IED_CURRENT_PETROL_AMOUNT").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_SUPER_ANNUATION_AMOUNT", ObjItem.getAttribute("IED_CURRENT_SUPER_ANNUATION_AMOUNT").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_MONTHLY_CTC", ObjItem.getAttribute("IED_CURRENT_MONTHLY_CTC").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_YEARLY_CTC", ObjItem.getAttribute("IED_CURRENT_YEARLY_CTC").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_YEARLY_CTC", ObjItem.getAttribute("IED_CURRENT_YEARLY_CTC").getString(), NewRow);

            final TableColumnModel columnModel = Table_SalaryDetail.getColumnModel();
            for (int column = 0; column < Table_SalaryDetail.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table_SalaryDetail.getRowCount(); row++) {
                    TableCellRenderer renderer = Table_SalaryDetail.getCellRenderer(row, column);
                    Component comp = Table_SalaryDetail.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 10, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
            FormatGrid_LastIncrementDetails();
            rowData = new Object[1];
            DataModel_LastIncrementDetail.addRow(rowData);
            //rs.first();

            DataModel_LastIncrementDetail.setValueByVariable("IED_LAST_INC_BASIC", ObjItem.getAttribute("IED_LAST_INC_BASIC").getString(), NewRow);
            DataModel_LastIncrementDetail.setValueByVariable("IED_LAST_INC_PERSONAL_PAY", ObjItem.getAttribute("IED_LAST_INC_PERSONAL_PAY").getString(), NewRow);
            DataModel_LastIncrementDetail.setValueByVariable("IED_LAST_INC_HRA", ObjItem.getAttribute("IED_LAST_INC_HRA").getString(), NewRow);
            DataModel_LastIncrementDetail.setValueByVariable("IED_LAST_INC_ELECTRICITY", ObjItem.getAttribute("IED_LAST_INC_ELECTRICITY").getString(), NewRow);
            DataModel_LastIncrementDetail.setValueByVariable("IED_LAST_INC_MAGAZINE", ObjItem.getAttribute("IED_LAST_INC_MAGAZINE").getString(), NewRow);
            DataModel_LastIncrementDetail.setValueByVariable("IED_LAST_INC_PERFORMANCE_ALLOWANCE", ObjItem.getAttribute("IED_LAST_INC_PERFORMANCE_ALLOWANCE").getString(), NewRow);
            DataModel_LastIncrementDetail.setValueByVariable("IED_LAST_INC_CONVEY_ALLOWANCE", ObjItem.getAttribute("IED_LAST_INC_CONVEY_ALLOWANCE").getString(), NewRow);
            DataModel_LastIncrementDetail.setValueByVariable("IED_LAST_TOTAL_INCREMENT", ObjItem.getAttribute("IED_LAST_TOTAL_INCREMENT").getString(), NewRow);

            final TableColumnModel columnModel1 = Table_LastIncrement.getColumnModel();
            for (int column = 0; column < Table_LastIncrement.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table_LastIncrement.getRowCount(); row++) {
                    TableCellRenderer renderer = Table_LastIncrement.getCellRenderer(row, column);
                    Component comp = Table_LastIncrement.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 10, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel1.getColumn(column).setPreferredWidth(width);
            }
            FormatGrid_ProposalIncrement();
            int mfnd = -1;
            for (int i1 = 0; i1 < TableIncrementStatus.getRowCount(); i1++) {
                if (DataModel_ProposedIncrementDetail.getValueByVariable("IED_PAY_EMP_NO", i1).equalsIgnoreCase(txtEmpNo.getText())) {
                    mfnd = i1;
                    break;
                }
            }

            rowData = new Object[1];
            DataModel_ProposedIncrement.addRow(rowData);

            if (mfnd == -1) {
                lblper.setText(ObjItem.getAttribute("IED_REVISED_PER").getString() + "%");
                lblsplper.setText(ObjItem.getAttribute("IED_REVISED_SPL_PER").getString() + "%");
                lblctcper.setText(ObjItem.getAttribute("IED_REVISED_CTC_PER").getString() + "%");
                lblctcsplper.setText(ObjItem.getAttribute("IED_REVISED_CTC_SPL_PER").getString() + "%");

                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_BASIC", ObjItem.getAttribute("IED_CURRENT_INC_BASIC").getString(), NewRow);
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_PERSONAL_PAY", ObjItem.getAttribute("IED_CURRENT_INC_PERSONAL_PAY").getString(), NewRow);
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_HRA", ObjItem.getAttribute("IED_CURRENT_INC_HRA").getString(), NewRow);
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_ELECTRICITY", ObjItem.getAttribute("IED_CURRENT_INC_ELECTRICITY").getString(), NewRow);
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_MAGAZINE", ObjItem.getAttribute("IED_CURRENT_INC_MAGAZINE").getString(), NewRow);
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE", ObjItem.getAttribute("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE").getString(), NewRow);
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_CONVEY_ALLOWANCE", ObjItem.getAttribute("IED_CURRENT_INC_CONVEY_ALLOWANCE").getString(), NewRow);
                DataModel_ProposedIncrement.setValueByVariable("IED_REVISED_MEDICAL_PER", ObjItem.getAttribute("IED_REVISED_MEDICAL_PER").getString(), NewRow);
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", ObjItem.getAttribute("IED_CURRENT_SPECIAL_INCREMENT").getString(), NewRow);
                //DataModel_ProposedIncrement.setValueByVariable("IED_PROPOSE_PROMOTION", ObjItem.getAttribute("IED_PROPOSE_PROMOTION").getString(), NewRow);
                DataModel_ProposedIncrement.setValueAt(ObjItem.getAttribute("IED_PROPOSE_PROMOTION").getBool(), 0, 8);
                DataModel_ProposedIncrement.setValueAt(ObjItem.getAttribute("IED_RESIGNATION").getBool(), 0, 12);
                DataModel_ProposedIncrement.setValueAt(ObjItem.getAttribute("IED_PROBATION").getBool(), 0, 13);

                DataModel_ProposedIncrement.setValueByVariable("IED_TOTAL_INCREMENT", ObjItem.getAttribute("IED_TOTAL_INCREMENT").getString(), NewRow);
                DataModel_ProposedIncrement.setValueByVariable("IED_TOTAL_SPECIAL_INCREMENT", ObjItem.getAttribute("IED_TOTAL_SPECIAL_INCREMENT").getString(), NewRow);
                DataModel_ProposedIncrement.setValueByVariable("IED_REMARK", ObjItem.getAttribute("IED_REMARK").getString(), NewRow);
            } else {
                lblper.setText(DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_PER", mfnd) + "%");
                lblsplper.setText(DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_SPL_PER", mfnd) + "%");
                lblctcper.setText(DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_CTC_PER", mfnd) + "%");
                lblctcsplper.setText(DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_CTC_SPL_PER", mfnd) + "%");

                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_BASIC", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INC_BASIC", mfnd), NewRow);
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_PERSONAL_PAY", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INC_PERSONAL_PAY", mfnd), NewRow);
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_HRA", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INC_HRA", mfnd), NewRow);
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_ELECTRICITY", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INC_ELECTRICITY", mfnd), NewRow);
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_MAGAZINE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INC_MAGAZINE", mfnd), NewRow);
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE", mfnd), NewRow);
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_CONVEY_ALLOWANCE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INC_CONVEY_ALLOWANCE", mfnd), NewRow);
                DataModel_ProposedIncrement.setValueByVariable("IED_REVISED_MEDICAL_PER", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_MEDICAL_PER", mfnd), NewRow);
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", mfnd), NewRow);
                //DataModel_ProposedIncrement.setValueByVariable("IED_PROPOSE_PROMOTION", ObjItem.getAttribute("IED_PROPOSE_PROMOTION").getString(), NewRow);
                if (DataModel_ProposedIncrementDetail.getValueAt(mfnd, 53).toString().equalsIgnoreCase("true")) {
                    DataModel_ProposedIncrement.setValueAt(true, 0, 8);
                } else {
                    DataModel_ProposedIncrement.setValueAt(false, 0, 8);
                }
                if (DataModel_ProposedIncrementDetail.getValueAt(mfnd, 55).toString().equalsIgnoreCase("true")) {
                    DataModel_ProposedIncrement.setValueAt(true, 0, 12);
                } else {
                    DataModel_ProposedIncrement.setValueAt(false, 0, 12);
                }
                if (DataModel_ProposedIncrementDetail.getValueAt(mfnd, 56).toString().equalsIgnoreCase("true")) {
                    DataModel_ProposedIncrement.setValueAt(true, 0, 13);
                } else {
                    DataModel_ProposedIncrement.setValueAt(false, 0, 13);
                }
                DataModel_ProposedIncrement.setValueByVariable("IED_TOTAL_INCREMENT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_TOTAL_INCREMENT", mfnd), NewRow);
                DataModel_ProposedIncrement.setValueByVariable("IED_TOTAL_SPECIAL_INCREMENT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_TOTAL_SPECIAL_INCREMENT", mfnd), NewRow);
                DataModel_ProposedIncrement.setValueByVariable("IED_REMARK", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REMARK", mfnd), NewRow);
            }
            final TableColumnModel columnModel2 = Table_ProposalIncrement.getColumnModel();
            for (int column = 0; column < Table_ProposalIncrement.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table_ProposalIncrement.getRowCount(); row++) {
                    TableCellRenderer renderer = Table_ProposalIncrement.getCellRenderer(row, column);
                    Component comp = Table_ProposalIncrement.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 10, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel2.getColumn(column).setPreferredWidth(width);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void MoveFirst() {
        objIncrement.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        objIncrement.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        objIncrement.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        objIncrement.MoveLast();
        DisplayData();
    }

    private void Add() {
        //  EditMode=EITLERPGLOBAL.ADD;
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "SDMLATTPAY.Employee.frmFindIncrementProposal", true);
        frmFindIncrementProposal ObjFindEmployee = (frmFindIncrementProposal) ObjLoader.getObj();

        if (ObjFindEmployee.Cancelled == false) {
            if (!objIncrement.Filter(ObjFindEmployee.stringFindQuery)) {
                JOptionPane.showMessageDialog(this, "No records found.", "Find  Employee", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    // find rate update by doc no
    public void Find(String docNo) {
        objIncrement.Filter("IED_DOC_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    public void FindWaiting() {
        //     EMP.Filter(" AND PROD_DOC_NO IN (SELECT DISTINCT PROD_DOC_NO FROM PRODUCTION.FELT_PROD_DATA, PRODUCTION.FELT_PROD_DOC_DATA WHERE PROD_DOC_NO=DOC_NO AND USER_ID="+EITLERPGLOBAL.gNewUserID+" AND STATUS='W' AND MODULE_ID="+ModuleId+" AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void Save() {

        if (OpgApprove.isSelected() || OpgFinal.isSelected()) {
            if (Table.getRowCount() != TableIncrementStatus.getRowCount()) {
                JOptionPane.showMessageDialog(this, "Update All Employee Data...", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (OpgFinal.isSelected()) {

        }

        SetData();

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //EMP.LoadData();
        if (EditMode == EITLERPGLOBAL.ADD) {
            if (objIncrement.Insert()) {

//                SelectFirstFree aList = new SelectFirstFree();
//                aList.ModuleID = 849;
//                aList.FirstFreeNo = 363;
//                FFNo = aList.FirstFreeNo;
//                clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, true);
//
//                if (OpgFinal.isSelected()) {
//
//                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + objIncrement.LastError, " SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (objIncrement.Update()) {
                if (OpgFinal.isSelected()) {
                    String mdoc = "";
                    if (txtDocNo.getText().contains("HOD")) {
                        mdoc = "HOD";
                    } else {
                        mdoc = DataModel_EmpDetail.getValueByVariable("IED_DEPARTMENT", 0);
                    }

                    try {
                        SendMail("sunil@dineshmills.com", mdoc + " has been Final Approved", "Increment Proposal Final Approved", "");
                    } catch (Exception ex) {

                    }
                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + objIncrement.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;

        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        EnableToolbar();
        SetMenuForRights();
        SetFields(false);

    }

    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void Edit() {

        String productionDocumentNo = (String) objIncrement.getAttribute("IED_DOC_NO").getObj();
        if (objIncrement.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            SetupApproval();
            //ReasonResetReadonly();
            //cmbOrderReason.setEnabled(false);
            //if (SDMLATTPAY.ApprovalFlow.IsCreator(849, productionDocumentNo)) {
            SetFields(true);
            //} else {
            EnableApproval();
            //}

//            if (EITLERPGLOBAL.gUserDeptID == 39 || EITLERPGLOBAL.gUserDeptID == 27) {
//                SetFields(true);
//            }
        } else {
            JOptionPane.showMessageDialog(this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "EDITING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {

    }

    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = SDMLATTPAY.ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, ModuleId, txtDocNo.getText());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        //========== Setting Up Header Fields ================//
        String FieldName = "";
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

    }

    private void SetFields(boolean pStat) {
        txtDocDate.setEnabled(pStat);

        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        btnupdate.setEnabled(pStat);

        if (!pStat) {
            for (int i = 0; i < DataModel_EmpDetail.getColumnCount(); i++) {
                DataModel_EmpDetail.SetReadOnly(i);
            }
        }
        Table_ProposalIncrement.setEnabled(pStat);

//        txtPayEmpNo.setEnabled(pStat);
        //cmbDesignation.setText("");        
//        txtWeekOff.setEnabled(pStat);
//        txtCompany.setEnabled(pStat);
//        txtDivision.setEnabled(pStat);
        SetupApproval();
    }

    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    private void filter(ArrayList<String> Hierarchy) {
        for (String current : Hierarchy) {
            int n = cmbHierarchyModel.getIndexOf(current);
            if (n != -1) {
                cmbHierarchyModel.setSelectedItem(current);
            }
        }
    }

    private void SetData() {

        DOC_NO = txtDocNo.getText();
        objIncrement.setAttribute("IED_DOC_NO", txtDocNo.getText());
        objIncrement.setAttribute("IED_DOC_DATE", EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));

        objIncrement.setAttribute("MODULE_ID", ModuleId);
        objIncrement.setAttribute("USER_ID", EITLERPGLOBAL.gNewUserID);

        //----- Update Approval Specific Fields -----------//
        objIncrement.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        objIncrement.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        objIncrement.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        objIncrement.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            objIncrement.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            objIncrement.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            objIncrement.setAttribute("APPROVAL_STATUS", "R");
            objIncrement.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            objIncrement.setAttribute("APPROVAL_STATUS", "H");
        }

        if (EditMode == EITLERPGLOBAL.ADD) {
            objIncrement.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            objIncrement.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        } else {
            objIncrement.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            objIncrement.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
            objIncrement.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
            objIncrement.setAttribute("UPDATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        }
        objIncrement.hmIncrementProposalDetails.clear();
        for (int i = 0; i < TableIncrementStatus.getRowCount(); i++) {
            clsIncrementProposalDetails ObjItem = new clsIncrementProposalDetails();
            ObjItem.setAttribute("IED_DEPARTMENT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_DEPARTMENT", i));
            ObjItem.setAttribute("IED_PAY_EMP_NO", DataModel_ProposedIncrementDetail.getValueByVariable("IED_PAY_EMP_NO", i));
            ObjItem.setAttribute("IED_EMP_NAME", DataModel_ProposedIncrementDetail.getValueByVariable("IED_EMP_NAME", i));
            ObjItem.setAttribute("IED_REVISED_PER", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_PER", i));
            ObjItem.setAttribute("IED_REVISED_SPL_PER", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_SPL_PER", i));
            ObjItem.setAttribute("IED_REVISED_CTC_PER", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_CTC_PER", i));
            ObjItem.setAttribute("IED_REVISED_CTC_SPL_PER", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_CTC_SPL_PER", i));
            ObjItem.setAttribute("IED_TOTAL_INCREMENT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_TOTAL_INCREMENT", i));
            ObjItem.setAttribute("IED_TOTAL_SPECIAL_INCREMENT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_TOTAL_SPECIAL_INCREMENT", i));
            ObjItem.setAttribute("IED_EMP_GRADE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_EMP_GRADE", i));
//            ObjItem.setAttribute("IED_DIFF_CTC", DataModel_ProposedIncrementDetail.getValueByVariable("IED_DIFF_CTC", i));
            ObjItem.setAttribute("IED_CURRENT_MONTHLY_CTC", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_MONTHLY_CTC", i));
            ObjItem.setAttribute("IED_REVISED_MONTHLY_CTC", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_MONTHLY_CTC", i));
            ObjItem.setAttribute("IED_CURRENT_BASIC", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_BASIC", i));
            ObjItem.setAttribute("IED_CURRENT_INC_BASIC", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INC_BASIC", i));
            ObjItem.setAttribute("IED_REVISED_BASIC", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_BASIC", i));
            ObjItem.setAttribute("IED_CURRENT_PERSONAL_PAY", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_PERSONAL_PAY", i));
            ObjItem.setAttribute("IED_CURRENT_INC_PERSONAL_PAY", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INC_PERSONAL_PAY", i));
            ObjItem.setAttribute("IED_REVISED_PERSONAL_PAY", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_PERSONAL_PAY", i));
            ObjItem.setAttribute("IED_CURRENT_DA_INDEX", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_DA_INDEX", i));
            ObjItem.setAttribute("IED_CURRENT_HRA", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_HRA", i));
            ObjItem.setAttribute("IED_CURRENT_INC_HRA", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INC_HRA", i));
            ObjItem.setAttribute("IED_REVISED_HRA", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_HRA", i));
            ObjItem.setAttribute("IED_CURRENT_AWARD_HRA", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_AWARD_HRA", i));
            ObjItem.setAttribute("IED_CURRENT_MAGAZINE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_MAGAZINE", i));
            ObjItem.setAttribute("IED_CURRENT_INC_MAGAZINE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INC_MAGAZINE", i));
            ObjItem.setAttribute("IED_REVISED_MAGAZINE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_MAGAZINE", i));
            ObjItem.setAttribute("IED_CURRENT_ELECTRICITY", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_ELECTRICITY", i));
            ObjItem.setAttribute("IED_CURRENT_INC_ELECTRICITY", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INC_ELECTRICITY", i));
            ObjItem.setAttribute("IED_REVISED_ELECTRICITY", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_ELECTRICITY", i));
            ObjItem.setAttribute("IED_CURRENT_PERFORMANCE_ALLOWANCE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_PERFORMANCE_ALLOWANCE", i));
            ObjItem.setAttribute("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE", i));
            ObjItem.setAttribute("IED_CURRENT_SPECIAL_INCREMENT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", i));
            ObjItem.setAttribute("IED_REVISED_PERFORMANCE_ALLOWANCE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_PERFORMANCE_ALLOWANCE", i));
            ObjItem.setAttribute("IED_CURRENT_CONVEY_ALLOWANCE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_CONVEY_ALLOWANCE", i));
            ObjItem.setAttribute("IED_CURRENT_INC_CONVEY_ALLOWANCE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INC_CONVEY_ALLOWANCE", i));
            ObjItem.setAttribute("IED_REVISED_CONVEY_ALLOWANCE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_CONVEY_ALLOWANCE", i));
            ObjItem.setAttribute("IED_CURRENT_MEDICAL_PER", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_MEDICAL_PER", i));
            ObjItem.setAttribute("IED_REVISED_MEDICAL_PER", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_MEDICAL_PER", i));
            ObjItem.setAttribute("IED_CURRENT_MEDICAL_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_MEDICAL_AMOUNT", i));
            ObjItem.setAttribute("IED_REVISED_MEDICAL_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_MEDICAL_AMOUNT", i));
            ObjItem.setAttribute("IED_CURRENT_INFLATION_BONUS_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INFLATION_BONUS_AMOUNT", i));
            ObjItem.setAttribute("IED_REVISED_INFLATION_BONUS_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_INFLATION_BONUS_AMOUNT", i));
            ObjItem.setAttribute("IED_CURRENT_PF_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_PF_AMOUNT", i));
            ObjItem.setAttribute("IED_REVISED_PF_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_PF_AMOUNT", i));
            ObjItem.setAttribute("IED_CURRENT_ESIC_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_ESIC_AMOUNT", i));
            ObjItem.setAttribute("IED_REVISED_ESIC_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_ESIC_AMOUNT", i));
            ObjItem.setAttribute("IED_CURRENT_GRATUITY_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_GRATUITY_AMOUNT", i));
            ObjItem.setAttribute("IED_REVISED_GRATUITY_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_GRATUITY_AMOUNT", i));
            ObjItem.setAttribute("IED_CURRENT_PETROL_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_PETROL_AMOUNT", i));
            ObjItem.setAttribute("IED_CURRENT_SUPER_ANNUATION_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_SUPER_ANNUATION_AMOUNT", i));
            ObjItem.setAttribute("IED_REVISED_SUPER_ANNUATION_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_SUPER_ANNUATION_AMOUNT", i));
            ObjItem.setAttribute("IED_CURRENT_YEARLY_CTC", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_YEARLY_CTC", i));
            ObjItem.setAttribute("IED_REVISED_YEARLY_CTC", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_YEARLY_CTC", i));
            ObjItem.setAttribute("IED_PROPOSE_PROMOTION", DataModel_ProposedIncrementDetail.getValueAt(i, 53).toString());
            ObjItem.setAttribute("IED_RESIGNATION", DataModel_ProposedIncrementDetail.getValueAt(i, 55).toString());
            ObjItem.setAttribute("IED_PROBATION", DataModel_ProposedIncrementDetail.getValueAt(i, 56).toString());
            ObjItem.setAttribute("IED_REMARK", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REMARK", i));

            objIncrement.hmIncrementProposalDetails.put(Integer.toString(objIncrement.hmIncrementProposalDetails.size() + 1), ObjItem);

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JPanel StatusPanel1;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableIncrementStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JTable Table_LastIncrement;
    private javax.swing.JTable Table_ProposalIncrement;
    private javax.swing.JTable Table_SalaryDetail;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton btnEmpMstETE;
    private javax.swing.JButton btnupdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JFileChooser file1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStatus1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblavgper;
    private javax.swing.JLabel lblavgperctc;
    private javax.swing.JLabel lblctcper;
    private javax.swing.JLabel lblctcsplper;
    private javax.swing.JLabel lblper;
    private javax.swing.JLabel lblsplper;
    private javax.swing.JLabel ltbPink;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtDept;
    private javax.swing.JFormattedTextField txtDocDate;
    private javax.swing.JFormattedTextField txtDocNo;
    private javax.swing.JTextField txtEmpName;
    private javax.swing.JTextField txtEmpNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtcategory;
    // End of variables declaration//GEN-END:variables

}
