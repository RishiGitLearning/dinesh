/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SDMLATTPAY.IncrementProposal;

import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import static EITLERP.EITLERPGLOBAL.round;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLTableModel;
import EITLERP.JTextFieldHint;
import EITLERP.LOV;
import EITLERP.ReportRegister;
import EITLERP.clsAuthority;
import EITLERP.data;
import EITLERP.frmPendingApprovals;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.HashMap;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import temp.MBMdecode;

/**
 *
 * @author DAXESH PRAJAPATI
 *
 */
public class FrmIncrementManagementProposal extends javax.swing.JApplet {

    private int EditMode = 0;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbModuleModel;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;

    private EITLTableModel DataModel_EmpDetail;
    private EITLTableModel DataModel_LastIncrementDetail;
    private EITLTableModel DataModel_ProposedIncrement;
    private EITLTableModel DataModel_ProposedIncrementDetail;
    private EITLTableModel DataModel_SalaryDetail;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private int FFNo = 363;
    private int ModuleId = 849;
    private String DOC_NO = "";
    private clsIncrementManagementProposal objIncrement;
    private EITLComboModel cmbSendToModel;
    private static int esiclimit = 21001;

    private frmFindIncrementProposal ObjFindEmployee;
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    public frmPendingApprovals frmPA;

    String selectedEmpNo = "";
    String selectedEmpName = "";
    String selecteddept = "";
    String selectedcategory = "";
    int datalist_index = 1, selerow = -1;

    /**
     * Initializes the applet FrmFeltOrder
     */
    @Override
    public void init() {

        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(dim.width, dim.height);
        initComponents();
        lblTitle.setForeground(Color.WHITE);
        jLabel13.setVisible(false);
        jLabel9.setVisible(false);
        lblsplper.setVisible(false);
        lblctcsplper.setVisible(false);
        FormatGrid();
        //FormatGrid_OldTransaction();

        DefaultSettings();

        FormatGrid_SalaryDetails();
        FormatGrid_LastIncrementDetails();
        FormatGrid_ProposalIncrement();
        FormatGrid_ProposalIncrementDetail();
        try {
            ResultSet rsTmp = data.getResult("SELECT USER() FROM DUAL");
            rsTmp.first();
            String str = rsTmp.getString(1);
            String str_split[] = str.split("@");

            Table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            objIncrement = new clsIncrementManagementProposal();
            objIncrement.condition = " WHERE IED_DOC_NO LIKE '" + EITLERPGLOBAL.getCurrentYear() + "%' AND IED_UPDATE_BY=" + EITLERPGLOBAL.gNewUserID + " AND IED_SR_NO>0  ORDER BY IED_PAY_EMP_NO";
            if (str_split[1].equalsIgnoreCase("200.0.0.100") || str_split[1].equalsIgnoreCase("10.8.0.4")) {
                objIncrement.condition = " WHERE IED_DOC_NO LIKE '" + EITLERPGLOBAL.getCurrentYear() + "%'  AND  IED_UPDATE_BY=18   ORDER BY IED_PAY_EMP_NO";
            }
            boolean load = objIncrement.LoadData();
            if (load) {
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + objIncrement.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
        }

    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    public void DefaultSettings() {
        clearFields();
    }

    private void clearFields() {
        FormatGrid();
    }

    private void DisplayData() {

        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleId)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }

        FormatGrid();
        clearFields();
        try {
            FormatGrid();
            //Now Generate Table
            for (int i = 1; i <= objIncrement.hmIncrementProposalDetails.size(); i++) {
                clsIncrementProposalDetails ObjItem = (clsIncrementProposalDetails) objIncrement.hmIncrementProposalDetails.get(Integer.toString(i));

                Object[] rowData = new Object[1];
                DataModel_EmpDetail.addRow(rowData);
                int NewRow = Table.getRowCount() - 1;
                DataModel_EmpDetail.setValueByVariable("SrNo", Integer.toString(i), NewRow);
                DataModel_EmpDetail.setValueByVariable("IED_DEPARTMENT", ObjItem.getAttribute("IED_DEPARTMENT").getString(), NewRow);
                DataModel_EmpDetail.setValueByVariable("IED_PAY_EMP_NO", ObjItem.getAttribute("IED_PAY_EMP_NO").getString(), NewRow);
                DataModel_EmpDetail.setValueByVariable("IED_EMP_NAME", ObjItem.getAttribute("IED_EMP_NAME").getString(), NewRow);
                DataModel_EmpDetail.setValueByVariable("IED_EMP_DATE_OF_JOING", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("IED_EMP_DATE_OF_JOING").getString()), NewRow);
                DataModel_EmpDetail.setValueByVariable("IED_LAST_INC_DUE_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("IED_LAST_INC_DUE_DATE").getString()), NewRow);
                DataModel_EmpDetail.setValueByVariable("IED_DESIGNATION", ObjItem.getAttribute("IED_DESIGNATION").getString(), NewRow);
                DataModel_EmpDetail.setValueByVariable("IED_QUALIFICATION", ObjItem.getAttribute("IED_QUALIFICATION").getString(), NewRow);
                DataModel_EmpDetail.setValueByVariable("CATEGORY", ObjItem.getAttribute("CATEGORY").getString(), NewRow);
                DataModel_EmpDetail.setValueByVariable("SUB_CATEGORY", ObjItem.getAttribute("SUB_CATEGORY").getString(), NewRow);
                DataModel_EmpDetail.setValueByVariable("EMP_GRADE", ObjItem.getAttribute("EMP_GRADE").getString(), NewRow);
                DataModel_EmpDetail.setValueByVariable("EMP_DOB", ObjItem.getAttribute("EMP_DOB").getString(), NewRow);
            }
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 10, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }

            FormatGrid_ProposalIncrementDetail();
            ResultSet tr = data.getResult("SELECT * FROM (SELECT * FROM SDMLATTPAY.INCREMENT_MANAGEMENT_ENTRY_DETAIL_H WHERE IED_UPDATE_BY =" + EITLERPGLOBAL.gNewUserID + " ORDER BY REVISION_NO DESC) AS D GROUP BY IED_DOC_NO,IED_PAY_EMP_NO");
            tr.first();
            if (tr.getRow() > 0) {
                while (!tr.isAfterLast()) {
                    Object[] rowData = new Object[1];
                    DataModel_ProposedIncrementDetail.addRow(rowData);
                    int NewRow = TableIncrementStatus.getRowCount() - 1;

                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_DEPARTMENT", tr.getString("IED_DEPARTMENT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_PAY_EMP_NO", tr.getString("IED_PAY_EMP_NO"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_EMP_NAME", tr.getString("IED_EMP_NAME"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_PER", tr.getString("IED_REVISED_PER"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_SPL_PER", tr.getString("IED_REVISED_SPL_PER"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_CTC_PER", tr.getString("IED_REVISED_CTC_PER"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_CTC_SPL_PER", tr.getString("IED_REVISED_CTC_SPL_PER"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_LAST_TOTAL_INCREMENT", tr.getString("IED_LAST_TOTAL_INCREMENT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_TOTAL_INCREMENT", tr.getString("IED_TOTAL_INCREMENT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_TOTAL_SPECIAL_INCREMENT", tr.getString("IED_TOTAL_SPECIAL_INCREMENT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_EMP_GRADE", tr.getString("IED_EMP_GRADE"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", tr.getString("IED_CURRENT_SPECIAL_INCREMENT"), NewRow);

                    //DataModel_ProposedIncrementDetail.setValueByVariable("IED_DIFF_CTC", tr.getString("IED_DIFF_CTC"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_MONTHLY_CTC", tr.getString("IED_CURRENT_MONTHLY_CTC"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_MONTHLY_CTC", tr.getString("IED_REVISED_MONTHLY_CTC"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_BASIC", tr.getString("IED_CURRENT_BASIC"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_BASIC", tr.getString("IED_CURRENT_INC_BASIC"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_BASIC", tr.getString("IED_REVISED_BASIC"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_PERSONAL_PAY", tr.getString("IED_CURRENT_PERSONAL_PAY"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_PERSONAL_PAY", tr.getString("IED_CURRENT_INC_PERSONAL_PAY"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_PERSONAL_PAY", tr.getString("IED_REVISED_PERSONAL_PAY"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_DA_INDEX", tr.getString("IED_CURRENT_DA_INDEX"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_HRA", tr.getString("IED_CURRENT_HRA"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_HRA", tr.getString("IED_CURRENT_INC_HRA"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_HRA", tr.getString("IED_REVISED_HRA"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_AWARD_HRA", tr.getString("IED_CURRENT_AWARD_HRA"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_MAGAZINE", tr.getString("IED_CURRENT_MAGAZINE"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_MAGAZINE", tr.getString("IED_CURRENT_INC_MAGAZINE"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_MAGAZINE", tr.getString("IED_REVISED_MAGAZINE"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_ELECTRICITY", tr.getString("IED_CURRENT_ELECTRICITY"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_ELECTRICITY", tr.getString("IED_CURRENT_INC_ELECTRICITY"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_ELECTRICITY", tr.getString("IED_REVISED_ELECTRICITY"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_PERFORMANCE_ALLOWANCE", tr.getString("IED_CURRENT_PERFORMANCE_ALLOWANCE"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE", tr.getString("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_PERFORMANCE_ALLOWANCE", tr.getString("IED_REVISED_PERFORMANCE_ALLOWANCE"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_CONVEY_ALLOWANCE", tr.getString("IED_CURRENT_CONVEY_ALLOWANCE"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_CONVEY_ALLOWANCE", tr.getString("IED_CURRENT_INC_CONVEY_ALLOWANCE"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_CONVEY_ALLOWANCE", tr.getString("IED_REVISED_CONVEY_ALLOWANCE"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_MEDICAL_PER", tr.getString("IED_CURRENT_MEDICAL_PER"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_MEDICAL_PER", tr.getString("IED_REVISED_MEDICAL_PER"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_MEDICAL_AMOUNT", tr.getString("IED_CURRENT_MEDICAL_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_MEDICAL_AMOUNT", tr.getString("IED_REVISED_MEDICAL_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INFLATION_BONUS_AMOUNT", tr.getString("IED_CURRENT_INFLATION_BONUS_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_INFLATION_BONUS_AMOUNT", tr.getString("IED_REVISED_INFLATION_BONUS_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_PF_AMOUNT", tr.getString("IED_CURRENT_PF_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_PF_AMOUNT", tr.getString("IED_REVISED_PF_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_ESIC_AMOUNT", tr.getString("IED_CURRENT_ESIC_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_ESIC_AMOUNT", tr.getString("IED_REVISED_ESIC_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_GRATUITY_AMOUNT", tr.getString("IED_CURRENT_GRATUITY_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_GRATUITY_AMOUNT", tr.getString("IED_REVISED_GRATUITY_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_PETROL_AMOUNT", tr.getString("IED_CURRENT_PETROL_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_SUPER_ANNUATION_AMOUNT", tr.getString("IED_CURRENT_SUPER_ANNUATION_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_SUPER_ANNUATION_AMOUNT", tr.getString("IED_REVISED_SUPER_ANNUATION_AMOUNT"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_YEARLY_CTC", tr.getString("IED_CURRENT_YEARLY_CTC"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_YEARLY_CTC", tr.getString("IED_REVISED_YEARLY_CTC"), NewRow);
                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_ADDITIONAL_AMOUNT", tr.getString("IED_ADDITIONAL_AMOUNT"), NewRow);

                    //DataModel_ProposedIncrementDetail.setValueAt(tr.getString("IED_PROPOSE_PROMOTION"), NewRow,46);
                    if (tr.getInt("IED_PROPOSE_PROMOTION") == 1) {
                        DataModel_ProposedIncrementDetail.setValueAt(true, NewRow, 53);
                    } else {
                        DataModel_ProposedIncrementDetail.setValueAt(false, NewRow, 53);
                    }
                    if (tr.getInt("IED_RESIGNATION") == 1) {
                        DataModel_ProposedIncrementDetail.setValueAt(true, NewRow, 55);
                    } else {
                        DataModel_ProposedIncrementDetail.setValueAt(false, NewRow, 55);
                    }
                    if (tr.getInt("IED_PROBATION") == 1) {
                        DataModel_ProposedIncrementDetail.setValueAt(true, NewRow, 56);
                    } else {
                        DataModel_ProposedIncrementDetail.setValueAt(false, NewRow, 56);
                    }
                    if (tr.getInt("IED_INC") == 1) {
                        DataModel_ProposedIncrementDetail.setValueAt(true, NewRow, 58);
                    } else {
                        DataModel_ProposedIncrementDetail.setValueAt(false, NewRow, 58);
                    }
                    if (tr.getInt("IED_ARREAS") == 1) {
                        DataModel_ProposedIncrementDetail.setValueAt(true, NewRow, 59);
                    } else {
                        DataModel_ProposedIncrementDetail.setValueAt(false, NewRow, 59);
                    }
                    if (tr.getInt("IED_A_INC") == 1) {
                        DataModel_ProposedIncrementDetail.setValueAt(true, NewRow, 61);
                    } else {
                        DataModel_ProposedIncrementDetail.setValueAt(false, NewRow, 61);
                    }
                    if (tr.getInt("IED_A_ARREAS") == 1) {
                        DataModel_ProposedIncrementDetail.setValueAt(true, NewRow, 62);
                    } else {
                        DataModel_ProposedIncrementDetail.setValueAt(false, NewRow, 62);
                    }

                    DataModel_ProposedIncrementDetail.setValueByVariable("IED_REMARK", tr.getString("IED_REMARK"), NewRow);
                    tr.next();

                }
            }
            final TableColumnModel columnModelIS = TableIncrementStatus.getColumnModel();
            for (int column = 0; column < TableIncrementStatus.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < TableIncrementStatus.getRowCount(); row++) {
                    TableCellRenderer renderer = TableIncrementStatus.getCellRenderer(row, column);
                    Component comp = TableIncrementStatus.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 10, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModelIS.getColumn(column).setPreferredWidth(width);
            }
            double mincp = 0;
            int i = 0;
            for (i = 0; i < TableIncrementStatus.getRowCount(); i++) {
                mincp = mincp + Double.parseDouble(DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_PER", i));
            }

            mincp = round(mincp / Table.getRowCount(), 2);

            //============================================================//
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void FormatGrid() {
        try {
            DataModel_EmpDetail = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel_EmpDetail);
            Table.setAutoResizeMode(0);

            DataModel_EmpDetail.addColumn("SrNo"); //0 - Read Only
            DataModel_EmpDetail.addColumn("Department"); //1
            DataModel_EmpDetail.addColumn("Emp No"); //2
            DataModel_EmpDetail.addColumn("Emp Name"); //3
            DataModel_EmpDetail.addColumn("Date of Joining"); //3
            DataModel_EmpDetail.addColumn("Last Increment [MM/YYYY]"); //3
            DataModel_EmpDetail.addColumn("Designation"); //3
            DataModel_EmpDetail.addColumn("Qualification"); //3
            DataModel_EmpDetail.addColumn("Category"); //3
            DataModel_EmpDetail.addColumn("SubCategory"); //3
            DataModel_EmpDetail.addColumn("Grade");
            DataModel_EmpDetail.addColumn("Date Of Birth");

            DataModel_EmpDetail.SetVariable(0, "SrNo"); //0 - Read Only
            DataModel_EmpDetail.SetVariable(1, "IED_DEPARTMENT"); //1
            DataModel_EmpDetail.SetVariable(2, "IED_PAY_EMP_NO"); //2
            DataModel_EmpDetail.SetVariable(3, "IED_EMP_NAME"); //2
            DataModel_EmpDetail.SetVariable(4, "IED_EMP_DATE_OF_JOING"); //3
            DataModel_EmpDetail.SetVariable(5, "IED_LAST_INC_DUE_DATE"); //3
            DataModel_EmpDetail.SetVariable(6, "IED_DESIGNATION"); //4
            DataModel_EmpDetail.SetVariable(7, "IED_QUALIFICATION"); //3
            DataModel_EmpDetail.SetVariable(8, "CATEGORY"); //3
            DataModel_EmpDetail.SetVariable(9, "SUB_CATEGORY"); //3
            DataModel_EmpDetail.SetVariable(10, "EMP_GRADE"); //3
            DataModel_EmpDetail.SetVariable(11, "EMP_DOB"); //3

            for (int i = 0; i <= 11; i++) {
                DataModel_EmpDetail.SetReadOnly(i);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGrid_SalaryDetails() {
        try {
            DataModel_SalaryDetail = new EITLTableModel();
            Table_SalaryDetail.removeAll();

            Table_SalaryDetail.setModel(DataModel_SalaryDetail);
            Table_SalaryDetail.setAutoResizeMode(0);

            DataModel_SalaryDetail.addColumn("Basic"); //0 - Read Only
            DataModel_SalaryDetail.addColumn("Personal Pay"); //1
            DataModel_SalaryDetail.addColumn("DA Rate"); //
            DataModel_SalaryDetail.addColumn("HRA"); //
            DataModel_SalaryDetail.addColumn("Award HRA"); //
            DataModel_SalaryDetail.addColumn("Magazine Allowance"); //
            DataModel_SalaryDetail.addColumn("Electricity Allowance"); //
            DataModel_SalaryDetail.addColumn("Performance Allowance"); //
            DataModel_SalaryDetail.addColumn("Conveyance Allowance"); //
            DataModel_SalaryDetail.addColumn("Medical / Education / Hotel %"); //
            DataModel_SalaryDetail.addColumn("Medical /Education / Hotel Amount "); //            
            DataModel_SalaryDetail.addColumn("Inflation / Bonus"); //
            DataModel_SalaryDetail.addColumn("PF13%"); //
            DataModel_SalaryDetail.addColumn("ESIC"); //
            DataModel_SalaryDetail.addColumn("Gratuity 4.81%"); //
            DataModel_SalaryDetail.addColumn("Petrol Amount"); //
            DataModel_SalaryDetail.addColumn("Super Annuation"); //
            DataModel_SalaryDetail.addColumn("CTC Amount (Monthly)"); //
            DataModel_SalaryDetail.addColumn("CTC Amount (Yearly)"); //

            DataModel_SalaryDetail.SetVariable(0, "IED_CURRENT_BASIC"); //0 - Read Only
            DataModel_SalaryDetail.SetVariable(1, "IED_CURRENT_PERSONAL_PAY"); //1
            DataModel_SalaryDetail.SetVariable(2, "IED_CURRENT_DA_INDEX"); //2
            DataModel_SalaryDetail.SetVariable(3, "IED_CURRENT_HRA"); //2
            DataModel_SalaryDetail.SetVariable(4, "IED_CURRENT_AWARD_HRA"); //3
            DataModel_SalaryDetail.SetVariable(5, "IED_CURRENT_MAGAZINE"); //3
            DataModel_SalaryDetail.SetVariable(6, "IED_CURRENT_ELECTRICITY"); //4
            DataModel_SalaryDetail.SetVariable(7, "IED_CURRENT_PERFORMANCE_ALLOWANCE"); //3
            DataModel_SalaryDetail.SetVariable(8, "IED_CURRENT_CONVEY_ALLOWANCE"); //1
            DataModel_SalaryDetail.SetVariable(9, "IED_CURRENT_MEDICAL_PER"); //2
            DataModel_SalaryDetail.SetVariable(10, "IED_CURRENT_MEDICAL_AMOUNT"); //2            
            DataModel_SalaryDetail.SetVariable(11, "IED_CURRENT_INFLATION_BONUS_AMOUNT"); //3
            DataModel_SalaryDetail.SetVariable(12, "IED_CURRENT_PF_AMOUNT"); //4
            DataModel_SalaryDetail.SetVariable(13, "IED_CURRENT_ESIC_AMOUNT"); //4
            DataModel_SalaryDetail.SetVariable(14, "IED_CURRENT_GRATUITY_AMOUNT"); //3
            DataModel_SalaryDetail.SetVariable(15, "IED_CURRENT_PETROL_AMOUNT"); //3
            DataModel_SalaryDetail.SetVariable(16, "IED_CURRENT_SUPER_ANNUATION_AMOUNT"); //3
            DataModel_SalaryDetail.SetVariable(17, "IED_CURRENT_MONTHLY_CTC"); //3
            DataModel_SalaryDetail.SetVariable(18, "IED_CURRENT_YEARLY_CTC"); //3

            for (int i = 0; i <= 18; i++) {
                DataModel_SalaryDetail.SetReadOnly(i);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGrid_LastIncrementDetails() {
        try {
            DataModel_LastIncrementDetail = new EITLTableModel();
            Table_LastIncrement.removeAll();

            Table_LastIncrement.setModel(DataModel_LastIncrementDetail);
            Table_LastIncrement.setAutoResizeMode(0);

            DataModel_LastIncrementDetail.addColumn("Basic/Rate"); //IED_LAST_INC_BASIC
            DataModel_LastIncrementDetail.addColumn("Personal Pay"); //IED_LAST_INC_PERSONAL_PAY
            DataModel_LastIncrementDetail.addColumn("HRA"); //IED_LAST_INC_HRA
            DataModel_LastIncrementDetail.addColumn("Electricity Allowance"); //IED_LAST_INC_ELECTRICITY
            DataModel_LastIncrementDetail.addColumn("Magazine Allowance"); //IED_LAST_INC_MAGAZINE
            DataModel_LastIncrementDetail.addColumn("Performance Allowance"); //IED_LAST_INC_PERFORMANCE_ALLOWANCE
            DataModel_LastIncrementDetail.addColumn("Conveyance Allowance"); //IED_LAST_INC_CONVEY_ALLOWANCE
            DataModel_LastIncrementDetail.addColumn("Total Increment Amount"); //IED_LAST_TOTAL_INCREMENT
            DataModel_LastIncrementDetail.addColumn("Special Increment Amount");
            DataModel_LastIncrementDetail.addColumn("Special Total Increment Amount");

            DataModel_LastIncrementDetail.SetVariable(0, "IED_LAST_INC_BASIC"); //0 - Read Only
            DataModel_LastIncrementDetail.SetVariable(1, "IED_LAST_INC_PERSONAL_PAY"); //1
            DataModel_LastIncrementDetail.SetVariable(2, "IED_LAST_INC_HRA"); //2
            DataModel_LastIncrementDetail.SetVariable(3, "IED_LAST_INC_ELECTRICITY"); //2
            DataModel_LastIncrementDetail.SetVariable(4, "IED_LAST_INC_MAGAZINE"); //3
            DataModel_LastIncrementDetail.SetVariable(5, "IED_LAST_INC_PERFORMANCE_ALLOWANCE"); //3
            DataModel_LastIncrementDetail.SetVariable(6, "IED_LAST_INC_CONVEY_ALLOWANCE"); //4
            DataModel_LastIncrementDetail.SetVariable(7, "IED_LAST_TOTAL_INCREMENT"); //3

            for (int i = 0; i <= 7; i++) {
                DataModel_LastIncrementDetail.SetReadOnly(i);
            }
            Table_LastIncrement.getColumnModel().getColumn(8).setMinWidth(0);//Special 
            Table_LastIncrement.getColumnModel().getColumn(8).setMaxWidth(0);
            Table_LastIncrement.getColumnModel().getColumn(9).setMinWidth(0);//Special 
            Table_LastIncrement.getColumnModel().getColumn(9).setMaxWidth(0);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGrid_ProposalIncrement() {
        try {
            DataModel_ProposedIncrement = new EITLTableModel();
            Table_ProposalIncrement.removeAll();

            Table_ProposalIncrement.setModel(DataModel_ProposedIncrement);
            Table_ProposalIncrement.setAutoResizeMode(0);

            DataModel_ProposedIncrement.addColumn("Basic/Rate"); //IED_LAST_INC_BASIC
            DataModel_ProposedIncrement.addColumn("Personal Pay"); //IED_LAST_INC_PERSONAL_PAY
            DataModel_ProposedIncrement.addColumn("HRA"); //IED_LAST_INC_HRA
            DataModel_ProposedIncrement.addColumn("Electricity Allowance"); //IED_LAST_INC_ELECTRICITY
            DataModel_ProposedIncrement.addColumn("Magazine Allowance"); //IED_LAST_INC_MAGAZINE
            DataModel_ProposedIncrement.addColumn("Performance Allowance"); //IED_LAST_INC_PERFORMANCE_ALLOWANCE
            DataModel_ProposedIncrement.addColumn("Conveyance Allowance"); //IED_LAST_INC_CONVEY_ALLOWANCE
            DataModel_ProposedIncrement.addColumn("% Medical / Education / Hotel"); //
            DataModel_ProposedIncrement.addColumn("Proposed Promotion"); //
            DataModel_ProposedIncrement.addColumn("Special Increment");
            DataModel_ProposedIncrement.addColumn("Total Increment Amount"); //IED_LAST_TOTAL_INCREMENT
            DataModel_ProposedIncrement.addColumn("Special Total Increment");//IED_LAST_TOTAL_INCREMENT
            DataModel_ProposedIncrement.addColumn("SEND TO HOD");
            DataModel_ProposedIncrement.addColumn("Resignation");
            DataModel_ProposedIncrement.addColumn("Probation");
            DataModel_ProposedIncrement.addColumn("Remark");
            DataModel_ProposedIncrement.addColumn("Increment");
            DataModel_ProposedIncrement.addColumn("Arreas");
            DataModel_ProposedIncrement.addColumn("Additional Amount");
            DataModel_ProposedIncrement.addColumn("Additional Increment");
            DataModel_ProposedIncrement.addColumn("Additional Arreas");

            DataModel_ProposedIncrement.SetVariable(0, "IED_CURRENT_INC_BASIC"); //0 - Read Only
            DataModel_ProposedIncrement.SetVariable(1, "IED_CURRENT_INC_PERSONAL_PAY"); //1
            DataModel_ProposedIncrement.SetVariable(2, "IED_CURRENT_INC_HRA"); //2
            DataModel_ProposedIncrement.SetVariable(3, "IED_CURRENT_INC_ELECTRICITY"); //3
            DataModel_ProposedIncrement.SetVariable(4, "IED_CURRENT_INC_MAGAZINE"); //
            DataModel_ProposedIncrement.SetVariable(5, "IED_CURRENT_INC_PERFORMANCE_ALLOWANCE"); //3
            DataModel_ProposedIncrement.SetVariable(6, "IED_CURRENT_INC_CONVEY_ALLOWANCE"); //4
            DataModel_ProposedIncrement.SetVariable(7, "IED_REVISED_MEDICAL_PER"); //3
            DataModel_ProposedIncrement.SetVariable(8, "IED_CURRENT_PROPOSED_PROMOTION"); //3
            DataModel_ProposedIncrement.SetVariable(9, "IED_CURRENT_SPECIAL_INCREMENT"); //3
            DataModel_ProposedIncrement.SetVariable(10, "IED_TOTAL_INCREMENT");
            DataModel_ProposedIncrement.SetVariable(11, "IED_TOTAL_SPECIAL_INCREMENT");
            DataModel_ProposedIncrement.SetVariable(12, "IED_SEND_TO_HOD");
            DataModel_ProposedIncrement.SetVariable(13, "IED_RESIGNATION");
            DataModel_ProposedIncrement.SetVariable(14, "IED_PROBATION");
            DataModel_ProposedIncrement.SetVariable(15, "IED_REMARK");
            DataModel_ProposedIncrement.SetVariable(16, "IED_INC");
            DataModel_ProposedIncrement.SetVariable(17, "IED_ARREAS");
            DataModel_ProposedIncrement.SetVariable(18, "IED_ADDITIONAL_AMOUNT");
            DataModel_ProposedIncrement.SetVariable(19, "IED_A_INC");
            DataModel_ProposedIncrement.SetVariable(20, "IED_A_ARREAS");

            DataModel_ProposedIncrement.SetReadOnly(2);
            DataModel_ProposedIncrement.SetReadOnly(3);
            DataModel_ProposedIncrement.SetReadOnly(4);
            //DataModel_ProposedIncrement.SetReadOnly(8);
            DataModel_ProposedIncrement.SetReadOnly(10);
            DataModel_ProposedIncrement.SetReadOnly(11);

            Table_ProposalIncrement.getColumnModel().getColumn(9).setMinWidth(0);//Special 
            Table_ProposalIncrement.getColumnModel().getColumn(9).setMaxWidth(0);
            Table_ProposalIncrement.getColumnModel().getColumn(11).setMinWidth(0);//Special 
            Table_ProposalIncrement.getColumnModel().getColumn(11).setMaxWidth(0);

            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
            int ImportCol = DataModel_ProposedIncrement.getColFromVariable("IED_CURRENT_PROPOSED_PROMOTION");
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox = new JCheckBox();
            aCheckBox.setBackground(Color.WHITE);
            aCheckBox.setVisible(true);
            aCheckBox.setEnabled(true);
            aCheckBox.setSelected(false);
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox));
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);

            EITLTableCellRenderer Renderer5 = new EITLTableCellRenderer();
            ImportCol = DataModel_ProposedIncrement.getColFromVariable("IED_SEND_TO_HOD");
            Renderer5.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox5 = new JCheckBox();
            aCheckBox5.setBackground(Color.WHITE);
            aCheckBox5.setVisible(true);
            aCheckBox5.setEnabled(true);
            aCheckBox5.setSelected(false);
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox5));
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer5);

            ImportCol = DataModel_ProposedIncrement.getColFromVariable("IED_RESIGNATION");
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox1 = new JCheckBox();
            aCheckBox1.setBackground(Color.WHITE);
            aCheckBox1.setVisible(true);
            aCheckBox1.setEnabled(true);
            aCheckBox1.setSelected(false);
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox1));
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);

            ImportCol = DataModel_ProposedIncrement.getColFromVariable("IED_PROBATION");
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox2 = new JCheckBox();
            aCheckBox2.setBackground(Color.WHITE);
            aCheckBox2.setVisible(true);
            aCheckBox2.setEnabled(true);
            aCheckBox2.setSelected(false);
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox2));
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);

            ImportCol = DataModel_ProposedIncrement.getColFromVariable("IED_INC");
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox3 = new JCheckBox();
            aCheckBox3.setBackground(Color.WHITE);
            aCheckBox3.setVisible(true);
            aCheckBox3.setEnabled(true);
            aCheckBox3.setSelected(false);
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox3));
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);

            ImportCol = DataModel_ProposedIncrement.getColFromVariable("IED_ARREAS");
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox4 = new JCheckBox();
            aCheckBox4.setBackground(Color.WHITE);
            aCheckBox4.setVisible(true);
            aCheckBox4.setEnabled(true);
            aCheckBox4.setSelected(false);
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox4));
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);

            ImportCol = DataModel_ProposedIncrement.getColFromVariable("IED_A_INC");
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox6 = new JCheckBox();
            aCheckBox6.setBackground(Color.WHITE);
            aCheckBox6.setVisible(true);
            aCheckBox6.setEnabled(true);
            aCheckBox6.setSelected(false);
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox6));
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);

            ImportCol = DataModel_ProposedIncrement.getColFromVariable("IED_A_ARREAS");
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox7 = new JCheckBox();
            aCheckBox7.setBackground(Color.WHITE);
            aCheckBox7.setVisible(true);
            aCheckBox7.setEnabled(true);
            aCheckBox7.setSelected(false);
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox7));
            Table_ProposalIncrement.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGrid_ProposalIncrementDetail() {
        try {
            DataModel_ProposedIncrementDetail = new EITLTableModel();
            TableIncrementStatus.removeAll();

            TableIncrementStatus.setModel(DataModel_ProposedIncrementDetail);
            TableIncrementStatus.setAutoResizeMode(0);

            DataModel_ProposedIncrementDetail.addColumn("Department"); //0 - Read Only
            DataModel_ProposedIncrementDetail.addColumn("Emp No"); //0 - Read Only
            DataModel_ProposedIncrementDetail.addColumn("Emp Name"); //0 - Read Only
            DataModel_ProposedIncrementDetail.addColumn("Grade"); //0 - Read Only
            DataModel_ProposedIncrementDetail.addColumn("Increse Basic %");
            DataModel_ProposedIncrementDetail.addColumn("Special Increse Basic %");
            DataModel_ProposedIncrementDetail.addColumn("Increse in CTC%");
            DataModel_ProposedIncrementDetail.addColumn("Special Increse in CTC%"); //0 - Read Only
//            DataModel_ProposedIncrementDetail.addColumn("Increse in Montly CTC");
            DataModel_ProposedIncrementDetail.addColumn("Last Increment");
            DataModel_ProposedIncrementDetail.addColumn("Proposal Increment");
            DataModel_ProposedIncrementDetail.addColumn("Special Proposal Increment");
            DataModel_ProposedIncrementDetail.addColumn("Current CTC Amount (Yearly)"); //            
            DataModel_ProposedIncrementDetail.addColumn("Proposal CTC Amount (Yearly)"); // 
            DataModel_ProposedIncrementDetail.addColumn("Current Basic"); //0 - Read Only
            DataModel_ProposedIncrementDetail.addColumn("Increment Basic"); //0 - Read Only
            DataModel_ProposedIncrementDetail.addColumn("Proposal Basic"); //0 - Read Only
            DataModel_ProposedIncrementDetail.addColumn("Current Personal Pay "); //1
            DataModel_ProposedIncrementDetail.addColumn("Increment Personal Pay "); //1
            DataModel_ProposedIncrementDetail.addColumn("Proposal Personal Pay "); //1
            DataModel_ProposedIncrementDetail.addColumn("DA Rate"); //
            DataModel_ProposedIncrementDetail.addColumn("Current HRA "); //
            DataModel_ProposedIncrementDetail.addColumn("Increment HRA "); //
            DataModel_ProposedIncrementDetail.addColumn("Proposal HRA "); //
            DataModel_ProposedIncrementDetail.addColumn("Award HRA"); //                        
            DataModel_ProposedIncrementDetail.addColumn("Current Magazine Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Increment Magazine Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Proposal Magazine Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Current Electricity Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Increment Electricity Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Proposal Electricity Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Current Performance Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Increment Performance Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Proposal Performance Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Current Conveyance Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Increment Conveyance Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Proposal Conveyance Allowance "); //
            DataModel_ProposedIncrementDetail.addColumn("Current Medical / Education / Hotel %"); //
            DataModel_ProposedIncrementDetail.addColumn("Increment Medical / Education / Hotel %"); //            
            DataModel_ProposedIncrementDetail.addColumn("Current Medical /Education / Hotel Amount "); //                                 
            DataModel_ProposedIncrementDetail.addColumn("Proposal Medical /Education / Hotel Amount "); //            
            DataModel_ProposedIncrementDetail.addColumn("Current Inflation / Bonus"); //
            DataModel_ProposedIncrementDetail.addColumn("Proposal Inflation / Bonus"); //
            DataModel_ProposedIncrementDetail.addColumn("Current PF13%"); //
            DataModel_ProposedIncrementDetail.addColumn("Proposal PF13%"); //
            DataModel_ProposedIncrementDetail.addColumn("Current ESIC"); //
            DataModel_ProposedIncrementDetail.addColumn("Proposal ESIC"); //
            DataModel_ProposedIncrementDetail.addColumn("Current Gratuity 4.81%"); //
            DataModel_ProposedIncrementDetail.addColumn("Proposal Gratuity 4.81%"); //
            DataModel_ProposedIncrementDetail.addColumn("Petrol Amount"); //            
            DataModel_ProposedIncrementDetail.addColumn("Current Super Annuation Amount"); //
            DataModel_ProposedIncrementDetail.addColumn("Proposal Super Annuation Amount"); //
            DataModel_ProposedIncrementDetail.addColumn("CTC Monthly Current"); //0 - Read Only
            DataModel_ProposedIncrementDetail.addColumn("CTC Monthly Proposal"); //0 - Read Only          
            DataModel_ProposedIncrementDetail.addColumn("Proposal Promotion");
            DataModel_ProposedIncrementDetail.addColumn("Total Special Increment");
            DataModel_ProposedIncrementDetail.addColumn("Resignation");
            DataModel_ProposedIncrementDetail.addColumn("Probation");
            DataModel_ProposedIncrementDetail.addColumn("Remark");
            DataModel_ProposedIncrementDetail.addColumn("Increment");
            DataModel_ProposedIncrementDetail.addColumn("Arreas");
            DataModel_ProposedIncrementDetail.addColumn("Additional Amount");
            DataModel_ProposedIncrementDetail.addColumn("Additional Increment");
            DataModel_ProposedIncrementDetail.addColumn("Additional Arreas");

            DataModel_ProposedIncrementDetail.SetVariable(0, "IED_DEPARTMENT"); //0 - Read Only
            DataModel_ProposedIncrementDetail.SetVariable(1, "IED_PAY_EMP_NO"); //0 - Read Only
            DataModel_ProposedIncrementDetail.SetVariable(2, "IED_EMP_NAME"); //0 - Read Only
            DataModel_ProposedIncrementDetail.SetVariable(3, "IED_EMP_GRADE"); //0 - Read Only
            DataModel_ProposedIncrementDetail.SetVariable(4, "IED_REVISED_PER");
            DataModel_ProposedIncrementDetail.SetVariable(5, "IED_REVISED_SPL_PER");
            DataModel_ProposedIncrementDetail.SetVariable(6, "IED_REVISED_CTC_PER");
            DataModel_ProposedIncrementDetail.SetVariable(7, "IED_REVISED_CTC_SPL_PER");
            DataModel_ProposedIncrementDetail.SetVariable(8, "IED_LAST_TOTAL_INCREMENT");
            DataModel_ProposedIncrementDetail.SetVariable(9, "IED_TOTAL_INCREMENT");
            DataModel_ProposedIncrementDetail.SetVariable(10, "IED_CURRENT_SPECIAL_INCREMENT");
//            DataModel_ProposedIncrementDetail.SetVariable(4, "IED_DIFF_CTC");
            DataModel_ProposedIncrementDetail.SetVariable(11, "IED_CURRENT_YEARLY_CTC"); //3
            DataModel_ProposedIncrementDetail.SetVariable(12, "IED_REVISED_YEARLY_CTC");

            DataModel_ProposedIncrementDetail.SetVariable(13, "IED_CURRENT_BASIC");
            DataModel_ProposedIncrementDetail.SetVariable(14, "IED_CURRENT_INC_BASIC"); //0 - Read Only
            DataModel_ProposedIncrementDetail.SetVariable(15, "IED_REVISED_BASIC"); //0 - Read Only
            DataModel_ProposedIncrementDetail.SetVariable(16, "IED_CURRENT_PERSONAL_PAY");
            DataModel_ProposedIncrementDetail.SetVariable(17, "IED_CURRENT_INC_PERSONAL_PAY"); //1
            DataModel_ProposedIncrementDetail.SetVariable(18, "IED_REVISED_PERSONAL_PAY"); //1
            DataModel_ProposedIncrementDetail.SetVariable(19, "IED_CURRENT_DA_INDEX");
            DataModel_ProposedIncrementDetail.SetVariable(20, "IED_CURRENT_HRA");
            DataModel_ProposedIncrementDetail.SetVariable(21, "IED_CURRENT_INC_HRA"); //2
            DataModel_ProposedIncrementDetail.SetVariable(22, "IED_REVISED_HRA"); //2
            DataModel_ProposedIncrementDetail.SetVariable(23, "IED_CURRENT_AWARD_HRA"); //3
            DataModel_ProposedIncrementDetail.SetVariable(24, "IED_CURRENT_MAGAZINE");
            DataModel_ProposedIncrementDetail.SetVariable(25, "IED_CURRENT_INC_MAGAZINE");
            DataModel_ProposedIncrementDetail.SetVariable(26, "IED_REVISED_MAGAZINE"); //3
            DataModel_ProposedIncrementDetail.SetVariable(27, "IED_CURRENT_ELECTRICITY");
            DataModel_ProposedIncrementDetail.SetVariable(28, "IED_CURRENT_INC_ELECTRICITY");
            DataModel_ProposedIncrementDetail.SetVariable(29, "IED_REVISED_ELECTRICITY"); //4
            DataModel_ProposedIncrementDetail.SetVariable(30, "IED_CURRENT_PERFORMANCE_ALLOWANCE");
            DataModel_ProposedIncrementDetail.SetVariable(31, "IED_CURRENT_INC_PERFORMANCE_ALLOWANCE");
            DataModel_ProposedIncrementDetail.SetVariable(32, "IED_REVISED_PERFORMANCE_ALLOWANCE"); //3
            DataModel_ProposedIncrementDetail.SetVariable(33, "IED_CURRENT_CONVEY_ALLOWANCE");
            DataModel_ProposedIncrementDetail.SetVariable(34, "IED_CURRENT_INC_CONVEY_ALLOWANCE");
            DataModel_ProposedIncrementDetail.SetVariable(35, "IED_REVISED_CONVEY_ALLOWANCE"); //1
            DataModel_ProposedIncrementDetail.SetVariable(36, "IED_CURRENT_MEDICAL_PER");
            DataModel_ProposedIncrementDetail.SetVariable(37, "IED_REVISED_MEDICAL_PER"); //2
            DataModel_ProposedIncrementDetail.SetVariable(38, "IED_CURRENT_MEDICAL_AMOUNT");
            DataModel_ProposedIncrementDetail.SetVariable(39, "IED_REVISED_MEDICAL_AMOUNT"); //2
            DataModel_ProposedIncrementDetail.SetVariable(40, "IED_CURRENT_INFLATION_BONUS_AMOUNT"); //3
            DataModel_ProposedIncrementDetail.SetVariable(41, "IED_REVISED_INFLATION_BONUS_AMOUNT"); //3
            DataModel_ProposedIncrementDetail.SetVariable(42, "IED_CURRENT_PF_AMOUNT");
            DataModel_ProposedIncrementDetail.SetVariable(43, "IED_REVISED_PF_AMOUNT"); //4
            DataModel_ProposedIncrementDetail.SetVariable(44, "IED_CURRENT_ESIC_AMOUNT");
            DataModel_ProposedIncrementDetail.SetVariable(45, "IED_REVISED_ESIC_AMOUNT");
            DataModel_ProposedIncrementDetail.SetVariable(46, "IED_CURRENT_GRATUITY_AMOUNT");
            DataModel_ProposedIncrementDetail.SetVariable(47, "IED_REVISED_GRATUITY_AMOUNT"); //3
            DataModel_ProposedIncrementDetail.SetVariable(48, "IED_CURRENT_PETROL_AMOUNT"); //3
            DataModel_ProposedIncrementDetail.SetVariable(49, "IED_CURRENT_SUPER_ANNUATION_AMOUNT"); //3
            DataModel_ProposedIncrementDetail.SetVariable(50, "IED_REVISED_SUPER_ANNUATION_AMOUNT"); //3
            DataModel_ProposedIncrementDetail.SetVariable(51, "IED_CURRENT_MONTHLY_CTC");
            DataModel_ProposedIncrementDetail.SetVariable(52, "IED_REVISED_MONTHLY_CTC");//3
            DataModel_ProposedIncrementDetail.SetVariable(53, "IED_PROPOSE_PROMOTION");
            DataModel_ProposedIncrementDetail.SetVariable(54, "IED_TOTAL_SPECIAL_INCREMENT");
            DataModel_ProposedIncrementDetail.SetVariable(55, "IED_RESIGNATION");
            DataModel_ProposedIncrementDetail.SetVariable(56, "IED_PROBATION");
            DataModel_ProposedIncrementDetail.SetVariable(57, "IED_REMARK");
            DataModel_ProposedIncrementDetail.SetVariable(58, "IED_INC");
            DataModel_ProposedIncrementDetail.SetVariable(59, "IED_ARREAS");
            DataModel_ProposedIncrementDetail.SetVariable(60, "IED_ADDITIONAL_AMOUNT");
            DataModel_ProposedIncrementDetail.SetVariable(61, "IED_A_INC");
            DataModel_ProposedIncrementDetail.SetVariable(62, "IED_A_ARREAS");

            for (int i = 0; i <= 62; i++) {
                DataModel_ProposedIncrementDetail.SetReadOnly(i);
            }
            TableIncrementStatus.getColumnModel().getColumn(5).setMinWidth(0);//Special 
            TableIncrementStatus.getColumnModel().getColumn(5).setMaxWidth(0);
            TableIncrementStatus.getColumnModel().getColumn(7).setMinWidth(0);//Special 
            TableIncrementStatus.getColumnModel().getColumn(7).setMaxWidth(0);
            TableIncrementStatus.getColumnModel().getColumn(10).setMinWidth(0);//Special 
            TableIncrementStatus.getColumnModel().getColumn(10).setMaxWidth(0);
            TableIncrementStatus.getColumnModel().getColumn(54).setMinWidth(0);//Special 
            TableIncrementStatus.getColumnModel().getColumn(54).setMaxWidth(0);
            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
            int ImportCol = DataModel_ProposedIncrementDetail.getColFromVariable("IED_PROPOSE_PROMOTION");
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox = new JCheckBox();
            aCheckBox.setBackground(Color.WHITE);
            aCheckBox.setVisible(true);
            aCheckBox.setEnabled(true);
            aCheckBox.setSelected(false);
            TableIncrementStatus.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox));
            TableIncrementStatus.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);

            ImportCol = DataModel_ProposedIncrementDetail.getColFromVariable("IED_RESIGNATION");
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox1 = new JCheckBox();
            aCheckBox1.setBackground(Color.WHITE);
            aCheckBox1.setVisible(true);
            aCheckBox1.setEnabled(true);
            aCheckBox1.setSelected(false);
            TableIncrementStatus.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox1));
            TableIncrementStatus.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);

            ImportCol = DataModel_ProposedIncrementDetail.getColFromVariable("IED_PROBATION");
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox2 = new JCheckBox();
            aCheckBox2.setBackground(Color.WHITE);
            aCheckBox2.setVisible(true);
            aCheckBox2.setEnabled(true);
            aCheckBox2.setSelected(false);
            TableIncrementStatus.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox2));
            TableIncrementStatus.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);

            ImportCol = DataModel_ProposedIncrementDetail.getColFromVariable("IED_INC");
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox3 = new JCheckBox();
            aCheckBox3.setBackground(Color.WHITE);
            aCheckBox3.setVisible(true);
            aCheckBox3.setEnabled(true);
            aCheckBox3.setSelected(false);
            TableIncrementStatus.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox3));
            TableIncrementStatus.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);

            ImportCol = DataModel_ProposedIncrementDetail.getColFromVariable("IED_ARREAS");
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox4 = new JCheckBox();
            aCheckBox4.setBackground(Color.WHITE);
            aCheckBox4.setVisible(true);
            aCheckBox4.setEnabled(true);
            aCheckBox4.setSelected(false);
            TableIncrementStatus.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox4));
            TableIncrementStatus.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);

            ImportCol = DataModel_ProposedIncrementDetail.getColFromVariable("IED_A_INC");
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox5 = new JCheckBox();
            aCheckBox5.setBackground(Color.WHITE);
            aCheckBox5.setVisible(true);
            aCheckBox5.setEnabled(true);
            aCheckBox5.setSelected(false);
            TableIncrementStatus.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox5));
            TableIncrementStatus.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);

            ImportCol = DataModel_ProposedIncrementDetail.getColFromVariable("IED_A_ARREAS");
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox6 = new JCheckBox();
            aCheckBox6.setBackground(Color.WHITE);
            aCheckBox6.setVisible(true);
            aCheckBox6.setEnabled(true);
            aCheckBox6.setSelected(false);
            TableIncrementStatus.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox6));
            TableIncrementStatus.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);
//            Desktop desktop = Desktop.getDesktop();  
//	          
//	            File f = new File( DIR + txtEmpNo.getText()  +  ".doc");
//	             desktop.open(f);  // opens application (MSWord) associated with .doc file

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        btngrpfilter = new javax.swing.ButtonGroup();
        reportgroup = new javax.swing.ButtonGroup();
        Tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Table_SalaryDetail = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        txtEmpNo = new javax.swing.JTextField();
        txtEmpName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        Table_LastIncrement = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        Table_ProposalIncrement = new javax.swing.JTable();
        btnupdate = new javax.swing.JButton();
        txtDept = new javax.swing.JTextField();
        txtcategory = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        lblper = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        lblsplper = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        lblctcper = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblctcsplper = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txt_dept = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDesignation = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        orderby = new javax.swing.JComboBox();
        cmdview = new javax.swing.JButton();
        filterpending = new javax.swing.JRadioButton();
        filterall = new javax.swing.JRadioButton();
        cmdreport = new javax.swing.JButton();
        rptdept = new javax.swing.JRadioButton();
        rptdesignation = new javax.swing.JRadioButton();
        rptemp = new javax.swing.JRadioButton();
        rptempwithoutlast = new javax.swing.JRadioButton();
        rptstaff = new javax.swing.JCheckBox();
        rptretainer = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        StatusPanel1 = new javax.swing.JPanel();
        jLabel61 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        TableIncrementStatus = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        lblTitle = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblStatus1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        ltbPink = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        Tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        jLabel1.setText("Employees Details");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 50, 180, 15);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 70, 1150, 130);

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel7.setLayout(null);

        jLabel4.setText("Salary Details");
        jPanel7.add(jLabel4);
        jLabel4.setBounds(10, 70, 230, 20);

        Table_SalaryDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(Table_SalaryDetail);

        jPanel7.add(jScrollPane3);
        jScrollPane3.setBounds(10, 90, 1130, 60);

        jLabel5.setText("Employee");
        jPanel7.add(jLabel5);
        jLabel5.setBounds(10, 0, 80, 30);

        txtEmpNo.setEnabled(false);
        jPanel7.add(txtEmpNo);
        txtEmpNo.setBounds(80, 7, 90, 20);

        txtEmpName.setEnabled(false);
        jPanel7.add(txtEmpName);
        txtEmpName.setBounds(170, 7, 380, 20);

        jLabel6.setText("Last Increment");
        jPanel7.add(jLabel6);
        jLabel6.setBounds(10, 150, 230, 15);

        Table_LastIncrement.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(Table_LastIncrement);

        jPanel7.add(jScrollPane4);
        jScrollPane4.setBounds(10, 170, 1130, 50);

        jLabel7.setText("Proposed Increment");
        jPanel7.add(jLabel7);
        jLabel7.setBounds(10, 210, 230, 40);

        Table_ProposalIncrement.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_ProposalIncrement.setCellSelectionEnabled(true);
        Table_ProposalIncrement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Table_ProposalIncrementMouseClicked(evt);
            }
        });
        Table_ProposalIncrement.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Table_ProposalIncrementKeyReleased(evt);
            }
        });
        jScrollPane5.setViewportView(Table_ProposalIncrement);

        jPanel7.add(jScrollPane5);
        jScrollPane5.setBounds(10, 240, 1130, 60);

        btnupdate.setText("UPDATE");
        btnupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnupdateActionPerformed(evt);
            }
        });
        jPanel7.add(btnupdate);
        btnupdate.setBounds(750, 300, 140, 25);

        txtDept.setEnabled(false);
        jPanel7.add(txtDept);
        txtDept.setBounds(550, 7, 90, 20);

        txtcategory.setEnabled(false);
        jPanel7.add(txtcategory);
        txtcategory.setBounds(640, 7, 170, 20);

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setText("Basic Per%");
        jPanel7.add(jLabel15);
        jLabel15.setBounds(10, 40, 70, 20);

        lblper.setText("Per%");
        jPanel7.add(lblper);
        lblper.setBounds(80, 40, 50, 20);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("Basic+Special Per%");
        jPanel7.add(jLabel13);
        jLabel13.setBounds(180, 40, 130, 20);

        lblsplper.setText("Per%");
        jPanel7.add(lblsplper);
        lblsplper.setBounds(320, 40, 50, 20);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("CTC Per%");
        jPanel7.add(jLabel11);
        jLabel11.setBounds(390, 40, 60, 20);

        lblctcper.setText("Per%");
        jPanel7.add(lblctcper);
        lblctcper.setBounds(470, 40, 50, 20);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("CTC+Special Per%");
        jPanel7.add(jLabel9);
        jLabel9.setBounds(570, 40, 110, 20);

        lblctcsplper.setText("Per%");
        jPanel7.add(lblctcsplper);
        lblctcsplper.setBounds(710, 40, 50, 20);

        jPanel1.add(jPanel7);
        jPanel7.setBounds(10, 210, 1150, 340);

        jLabel2.setText("Department");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(10, 10, 70, 30);

        txt_dept = new JTextFieldHint(new JTextField(),"Search by F1");
        txt_dept.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_deptKeyPressed(evt);
            }
        });
        jPanel1.add(txt_dept);
        txt_dept.setBounds(80, 10, 140, 30);

        jLabel3.setText("Designation");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(250, 10, 70, 30);

        txtDesignation = new JTextFieldHint(new JTextField(),"Search by F1");
        txtDesignation.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDesignationKeyPressed(evt);
            }
        });
        jPanel1.add(txtDesignation);
        txtDesignation.setBounds(320, 10, 160, 30);

        jLabel8.setText("Order By");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(510, 10, 70, 30);

        orderby.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Employee", "Department", "Designation" }));
        jPanel1.add(orderby);
        orderby.setBounds(580, 10, 150, 30);

        cmdview.setText("View");
        cmdview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdviewActionPerformed(evt);
            }
        });
        jPanel1.add(cmdview);
        cmdview.setBounds(970, 0, 130, 30);

        btngrpfilter.add(filterpending);
        filterpending.setText("PENDING");
        jPanel1.add(filterpending);
        filterpending.setBounds(840, 13, 110, 30);

        btngrpfilter.add(filterall);
        filterall.setSelected(true);
        filterall.setText("ALL");
        jPanel1.add(filterall);
        filterall.setBounds(740, 13, 50, 30);

        cmdreport.setText("Report");
        cmdreport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdreportActionPerformed(evt);
            }
        });
        jPanel1.add(cmdreport);
        cmdreport.setBounds(970, 40, 130, 30);

        reportgroup.add(rptdept);
        rptdept.setText("Department");
        jPanel1.add(rptdept);
        rptdept.setBounds(720, 40, 110, 30);

        reportgroup.add(rptdesignation);
        rptdesignation.setText("Designation");
        jPanel1.add(rptdesignation);
        rptdesignation.setBounds(840, 40, 120, 30);

        reportgroup.add(rptemp);
        rptemp.setText("Emp [with last]");
        jPanel1.add(rptemp);
        rptemp.setBounds(560, 40, 160, 30);

        reportgroup.add(rptempwithoutlast);
        rptempwithoutlast.setSelected(true);
        rptempwithoutlast.setText("Emp [without last]");
        jPanel1.add(rptempwithoutlast);
        rptempwithoutlast.setBounds(400, 40, 160, 30);

        rptstaff.setSelected(true);
        rptstaff.setText("Staff");
        jPanel1.add(rptstaff);
        rptstaff.setBounds(190, 43, 80, 30);

        rptretainer.setText("Retainer");
        jPanel1.add(rptretainer);
        rptretainer.setBounds(290, 40, 100, 30);

        Tab.addTab("Employee Increment Proposal", jPanel1);

        jPanel4.setLayout(null);

        StatusPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StatusPanel1.setLayout(null);

        jLabel61.setText("Increment Status");
        StatusPanel1.add(jLabel61);
        jLabel61.setBounds(12, 10, 242, 15);

        TableIncrementStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(TableIncrementStatus);

        StatusPanel1.add(jScrollPane7);
        jScrollPane7.setBounds(0, 40, 1150, 420);

        jPanel4.add(StatusPanel1);
        StatusPanel1.setBounds(10, 0, 1160, 480);

        Tab.addTab("Increment Status", jPanel4);

        jPanel8.setLayout(null);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("*Calculate basis on [Current Basic+Current Personal Pay+Proposal Basic+Proposal Personal Pay]\n*Not appilcable for BRD STAFF WITH DA & Retainer and BRD101582 and BRD101963,BRD102025,BRD102029\n\nHRA\t\t\t\tELECTRICITY\t\t\tMAGAZINE\n\n>18500\t4500\t\t\t>8100\t500\t\t\t>6000\t300\n>16500\t4000\t\t\t>7100\t400\t\t\t>5000\t200\n>14500\t3700\t\t\t>6100\t300\t\t\t>4000\t100\n>12500\t3400\t\t\t>5100\t200\t\t\t>2999\t 50\n>10500\t3100\t\t\t>4100\t150\n>9500\t2800\t\t\t>3299\t100\n>8500\t2500\n>7500\t2300\n>6500\t2000\n>5500\t1600\n>4500\t1200\n>4000\t 800\n>3500\t 600\n>3000\t 500\n>2500\t 400\n>2000\t 300\n>1599\t 200\n");
        jScrollPane8.setViewportView(jTextArea1);

        jPanel8.add(jScrollPane8);
        jScrollPane8.setBounds(10, 0, 920, 570);

        Tab.addTab("Rules", jPanel8);

        getContentPane().add(Tab);
        Tab.setBounds(0, 70, 1180, 600);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("SDML  Management Increment Proposal");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 1180, 25);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 580, 930, 22);

        lblStatus1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus1.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus1);
        lblStatus1.setBounds(20, 590, 740, 30);
        getContentPane().add(jPanel5);
        jPanel5.setBounds(210, 50, 10, 10);
        getContentPane().add(ltbPink);
        ltbPink.setBounds(10, 70, 0, 0);
    }// </editor-fold>//GEN-END:initComponents


    private void TabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabMouseClicked

    }//GEN-LAST:event_TabMouseClicked


    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:     
        selerow = Table.getSelectedRow();
        ShowEmpDetails();
        Table_ProposalIncrementKeyReleased(null);
    }//GEN-LAST:event_TableMouseClicked

    private void btnupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnupdateActionPerformed
        // TODO add your handling code here:
        try {
            Table_ProposalIncrement.getCellEditor().stopCellEditing();
        } catch (Exception e) {
        }
        txtDept.requestFocus();
        Table_ProposalIncrement.changeSelection(0, 10, false, false);
        Table_ProposalIncrementKeyReleased(null);
        double totinc;
        try {
            totinc = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_TOTAL_INCREMENT", 0));
        } catch (Exception e) {
            totinc = 0;
        }
        if (totinc == 0) {
            int msv = JOptionPane.showConfirmDialog(null, "Do you want to Update with Zero?");
            if (msv == 0) {
                //Update Increment
                updatedata();
            }
        } else {
            updatedata();
        }
    }//GEN-LAST:event_btnupdateActionPerformed

    private void Table_ProposalIncrementKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_ProposalIncrementKeyReleased
        // TODO add your handling code here:
        ReCalculate();
    }//GEN-LAST:event_Table_ProposalIncrementKeyReleased

    private void ReCalculate() {

        double ibasic, ipp, ihra, iele, imgzn, ipa, ica, imp, ngross, ogross, is;
        ihra = iele = imgzn = is = 0;
        if (DataModel_ProposedIncrement.getValueAt(0, 13).toString().equalsIgnoreCase("true")
                || DataModel_ProposedIncrement.getValueAt(0, 14).toString().equalsIgnoreCase("true")) {
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_BASIC", "0.00", 0);
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_PERSONAL_PAY", "0.00", 0);
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE", "0.00", 0);
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_CONVEY_ALLOWANCE", "0.00", 0);
            DataModel_ProposedIncrement.setValueByVariable("IED_REVISED_MEDICAL_PER", "0", 0);
        }
        try {
            ibasic = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_BASIC", 0));
        } catch (Exception e) {
            ibasic = 0;
        }
        double curbasic = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_BASIC", 0));
        double curpp = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_PERSONAL_PAY", 0));
        double curda = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_DA_INDEX", 0));
        double curhra = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_HRA", 0)) + Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_AWARD_HRA", 0));
        double curele = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_ELECTRICITY", 0));
        double curmgzn = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_MAGAZINE", 0));
        double curpa = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_PERFORMANCE_ALLOWANCE", 0));
        double curca = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_CONVEY_ALLOWANCE", 0));
        double curmp = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_MEDICAL_PER", 0));
        double curma = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_MEDICAL_AMOUNT", 0));

        try {
            ipp = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_PERSONAL_PAY", 0));
        } catch (Exception e) {
            ipp = 0;
        }
        try {
            is = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", 0));
        } catch (Exception e) {
            is = 0;
        }
        if (!txtcategory.getText().equalsIgnoreCase("BRD STAFF WITH DA")
                && !txtEmpNo.getText().contains("BRD5")
                && !txtEmpNo.getText().contains("BRD6")
                && !txtEmpNo.getText().contains("BRD101582")
                && !txtEmpNo.getText().contains("BRD101963")
                && !txtEmpNo.getText().contains("BRD102025")
                && !txtEmpNo.getText().contains("BRD102029")) {
            double newbasic = curbasic + ibasic + ipp + curpp;
            double nhra, nele, nmgzn;
            if (newbasic > 18500) {
                nhra = 4500;
            } else if (newbasic > 16500) {
                nhra = 4000;
            } else if (newbasic > 14500) {
                nhra = 3700;
            } else if (newbasic > 12500) {
                nhra = 3400;
            } else if (newbasic > 10500) {
                nhra = 3100;
            } else if (newbasic > 9500) {
                nhra = 2800;
            } else if (newbasic > 8500) {
                nhra = 2500;
            } else if (newbasic > 7500) {
                nhra = 2300;
            } else if (newbasic > 6500) {
                nhra = 2000;
            } else if (newbasic > 5500) {
                nhra = 1600;
            } else if (newbasic > 4500) {
                nhra = 1200;
            } else if (newbasic > 4000) {
                nhra = 800;
            } else if (newbasic > 3500) {
                nhra = 600;
            } else if (newbasic > 3000) {
                nhra = 500;
            } else if (newbasic > 2500) {
                nhra = 400;
            } else if (newbasic > 2000) {
                nhra = 300;
            } else if (newbasic > 1599) {
                nhra = 200;
            } else {
                nhra = 0;
            }
            if (curhra != nhra) {
                ihra = nhra - curhra;
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_HRA", String.valueOf(ihra), 0);
            } else {
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_HRA", "0.00", 0);
                ihra = 0;
            }

            if (newbasic > 8100) {
                nele = 500;
            } else if (newbasic > 7100) {
                nele = 400;
            } else if (newbasic > 6100) {
                nele = 300;
            } else if (newbasic > 5100) {
                nele = 200;
            } else if (newbasic > 4100) {
                nele = 150;
            } else if (newbasic > 3299) {
                nele = 100;
            } else {
                nele = 0;
            }
            if (curele != nele) {
                iele = nele - curele;
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_ELECTRICITY", String.valueOf(iele), 0);
            } else {
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_ELECTRICITY", "0.00", 0);
                iele = 0;
            }

            if (newbasic > 6000) {
                nmgzn = 300;
            } else if (newbasic > 5000) {
                nmgzn = 200;
            } else if (newbasic > 4000) {
                nmgzn = 100;
            } else if (newbasic > 2999) {
                nmgzn = 50;
            } else {
                nmgzn = 0;
            }
            if (curmgzn != nmgzn) {
                imgzn = nmgzn - curmgzn;
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_MAGAZINE", String.valueOf(imgzn), 0);
            } else {
                DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_MAGAZINE", "0.00", 0);
                imgzn = 0;
            }
        } else {
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_HRA", "0.00", 0);
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_MAGAZINE", "0.00", 0);
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_ELECTRICITY", "0.00", 0);
        }
        try {
            ipa = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE", 0));
        } catch (Exception e) {
            ipa = 0;
        }
        try {
            ica = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_CONVEY_ALLOWANCE", 0));
        } catch (Exception e) {
            ica = 0;
        }
        try {
            imp = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_REVISED_MEDICAL_PER", 0));
        } catch (Exception e) {
            imp = 0;
        }
        ogross = curbasic + curpp + curda + curhra + curmgzn + curele + curpa + curca + curma;
        ngross = ogross + ibasic + ipp + ihra + imgzn + iele + ipa + ica;
        if (imp > 0) {
            if (ogross >= esiclimit) {
                if (imp != curmp) {
                    ngross = ngross + ((curbasic + ibasic) * (imp / 100));
                }
            }
        }
        if (ogross < esiclimit && ngross >= esiclimit) {
            DataModel_ProposedIncrement.setValueByVariable("IED_REVISED_MEDICAL_PER", String.valueOf(curmp + 5), 0);
        } else {
            if (ogross < esiclimit) {
                DataModel_ProposedIncrement.setValueByVariable("IED_REVISED_MEDICAL_PER", "", 0);
            }
        }
        //Table_ProposalIncrement.setValueAt(ibasic + ihra + iele + imgzn + ipa + ica, currow, 7);
        DataModel_ProposedIncrement.setValueByVariable("IED_TOTAL_INCREMENT", String.valueOf(ibasic + ipp + ihra + iele + imgzn + ipa + ica), 0);
        DataModel_ProposedIncrement.setValueByVariable("IED_TOTAL_SPECIAL_INCREMENT", String.valueOf(ibasic + ipp + ihra + iele + imgzn + ipa + ica + is), 0);

    }
    private void cmdviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdviewActionPerformed
        // TODO add your handling code here:
        try {
            String cnd = "";
            if (txt_dept.getText().length() > 0) {
                cnd = cnd + " AND IED_DEPARTMENT='" + txt_dept.getText() + "'";
            }
            if (txtDesignation.getText().length() > 0) {
                cnd = cnd + " AND DESIGNATION_GROUP='" + txtDesignation.getText() + "'";
            }
            if (filterpending.isSelected()) {
                cnd = cnd + " AND IED_PAY_EMP_NO NOT IN (SELECT IED_PAY_EMP_NO FROM SDMLATTPAY.INCREMENT_MANAGEMENT_ENTRY_DETAIL_H WHERE IED_UPDATE_BY=" + EITLERPGLOBAL.gNewUserID + ")";
            }
            if (orderby.getSelectedIndex() == 0) {
                cnd = cnd + "  ORDER BY IED_PAY_EMP_NO";
            } else if (orderby.getSelectedIndex() == 1) {
                cnd = cnd + "  ORDER BY IED_DEPARTMENT,IED_PAY_EMP_NO";
            } else if (orderby.getSelectedIndex() == 2) {
                cnd = cnd + "  ORDER BY IED_DESIGNATION,IED_PAY_EMP_NO";
            }
            objIncrement.condition = " WHERE IED_SR_NO>0 AND IED_UPDATE_BY=" + EITLERPGLOBAL.gNewUserID + cnd;
            boolean load = objIncrement.LoadData();

            if (load) {
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + objIncrement.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmdviewActionPerformed

    private void txt_deptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_deptKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();
            aList.SQL = "SELECT DISTINCT IED_DEPARTMENT AS DEPARTMENT,IED_DEPARTMENT AS DEPT FROM SDMLATTPAY.INCREMENT_MANAGEMENT_ENTRY_DETAIL WHERE IED_UPDATE_BY=" + EITLERPGLOBAL.gNewUserID;
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                txt_dept.setText(aList.ReturnVal);
            }
        }
    }//GEN-LAST:event_txt_deptKeyPressed

    private void txtDesignationKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDesignationKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();
            aList.SQL = "SELECT DISTINCT DESIGNATION_GROUP,DESIGNATION_GROUP AS DESIGNATION FROM SDMLATTPAY.INCREMENT_MANAGEMENT_ENTRY_DETAIL "
                    + "LEFT JOIN SDMLATTPAY.ATT_DESIGNATION_MASTER DM ON IED_DESIGNATION=NAME "
                    + "WHERE IED_UPDATE_BY=" + EITLERPGLOBAL.gNewUserID;
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                txtDesignation.setText(aList.ReturnVal);
            }
        }
    }//GEN-LAST:event_txtDesignationKeyPressed

    private void cmdreportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdreportActionPerformed
        // TODO add your handling code here:
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        String cndtn = "";
        String grp_cndtn = "";
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();
            parameterMap.put("PMONTH", "");

            if (rptretainer.isSelected()) {
                parameterMap.put("mtitle", "RETAINER");
            }
            if (rptstaff.isSelected()) {
                parameterMap.put("mtitle", "STAFF");
            }
            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            String cnd = " AND IED_SR_NO>0 ";
            if (txt_dept.getText().length() > 0) {
                cnd = cnd + " AND IED_DEPARTMENT='" + txt_dept.getText() + "'";
            }
            if (txtDesignation.getText().length() > 0) {
                cnd = cnd + " AND DESIGNATION_GROUP='" + txtDesignation.getText() + "'";
            }
            if (rptstaff.isSelected()) {
                cnd = cnd + " AND (IED_PAY_EMP_NO LIKE 'BRD1%' OR IED_PAY_EMP_NO LIKE 'BRD2%')";
            }
            if (rptretainer.isSelected()) {
                cnd = cnd + " AND (IED_PAY_EMP_NO LIKE 'BRD5%' OR IED_PAY_EMP_NO LIKE 'BRD6%')";
            }

            String strSQL = "";
            if (rptdept.isSelected()) {
                strSQL = "SELECT M.*, E.*,DATE_FORMAT(FROM_DAYS(DATEDIFF(now(),EMP_BIRTH_DATE)), '%Y')+0 AS AGE, "
                        + "CASE WHEN IED_CURRENT_HRA>0 THEN IED_REVISED_HRA ELSE 0 END AS IEDREVISEDHRA,"
                        + "LEFT(IED_LAST_INC_DUE_DATE,7) AS INC_DUE, "
                        + "(IED_CURRENT_INC_BASIC+IED_CURRENT_INC_HRA+IED_CURRENT_INC_PERSONAL_PAY) AS CURRENT_TOTAL "
                        + "FROM SDMLATTPAY.INCREMENT_MANAGEMENT_ENTRY_DETAIL AS M "
                        + "LEFT JOIN SDMLATTPAY.ATTPAY_EMPMST AS E ON M.IED_PAY_EMP_NO=E.PAY_EMP_NO "
                        + "LEFT JOIN SDMLATTPAY.ATT_DESIGNATION_MASTER AS D ON M.IED_DESIGNATION = D.NAME "
                        + "WHERE IED_UPDATE_BY = " + EITLERPGLOBAL.gNewUserID + "  "
                        //+ "WHERE IED_UPDATE_BY = 72  "
                        + cnd + " "
                        + "ORDER BY IED_DEPARTMENT,M.IED_PAY_EMP_NO";
            }
            if (rptdesignation.isSelected()) {
                strSQL = "SELECT M.*, E.*, D.*,DATE_FORMAT(FROM_DAYS(DATEDIFF(now(),EMP_BIRTH_DATE)), '%Y')+0 AS AGE, "
                        + "CASE WHEN IED_CURRENT_HRA>0 THEN IED_REVISED_HRA ELSE 0 END AS IEDREVISEDHRA, "
                        + "LEFT(IED_LAST_INC_DUE_DATE,7) AS INC_DUE, "
                        + "(IED_CURRENT_INC_BASIC+IED_CURRENT_INC_HRA+IED_CURRENT_INC_PERSONAL_PAY) AS CURRENT_TOTAL "
                        + "FROM SDMLATTPAY.INCREMENT_MANAGEMENT_ENTRY_DETAIL AS M "
                        + "LEFT JOIN SDMLATTPAY.ATTPAY_EMPMST AS E ON M.IED_PAY_EMP_NO=E.PAY_EMP_NO "
                        + "LEFT JOIN SDMLATTPAY.ATT_DESIGNATION_MASTER AS D ON M.IED_DESIGNATION = D.NAME "
                        + "WHERE IED_UPDATE_BY = " + EITLERPGLOBAL.gNewUserID + "  "
                        //+ "WHERE IED_UPDATE_BY = 72  "
                        + cnd + " "
                        + "ORDER BY INCREMENT_PRIORITY,INCREMENT_GROUP,M.IED_PAY_EMP_NO";
            }
            if (rptemp.isSelected() || rptempwithoutlast.isSelected()) {
                strSQL = "SELECT M.*, E.*, D.*,DATE_FORMAT(FROM_DAYS(DATEDIFF(now(),EMP_BIRTH_DATE)), '%Y')+0 AS AGE, "
                        + "CASE WHEN IED_CURRENT_HRA>0 THEN IED_REVISED_HRA ELSE 0 END AS IEDREVISEDHRA, "
                        + "LEFT(IED_LAST_INC_DUE_DATE,7) AS INC_DUE, "
                        + "(IED_CURRENT_INC_BASIC+IED_CURRENT_INC_HRA+IED_CURRENT_INC_PERSONAL_PAY) AS CURRENT_TOTAL "
                        + "FROM SDMLATTPAY.INCREMENT_MANAGEMENT_ENTRY_DETAIL AS M "
                        + "LEFT JOIN SDMLATTPAY.ATTPAY_EMPMST AS E ON M.IED_PAY_EMP_NO=E.PAY_EMP_NO "
                        + "LEFT JOIN SDMLATTPAY.ATT_DESIGNATION_MASTER AS D ON M.IED_DESIGNATION = D.NAME "
                        + "WHERE IED_UPDATE_BY = " + EITLERPGLOBAL.gNewUserID + "  "
                        //+ "WHERE IED_UPDATE_BY = 72  "
                        + cnd + " "
                        + "ORDER BY M.IED_PAY_EMP_NO";
            }
            System.out.println("SQL:" + strSQL);
            if (rptdept.isSelected()) {
                rpt.setReportName("/SDMLATTPAY/IncrementProposal/Increment_data_sheet_dpt_wise.jrxml", 1, strSQL);
            }
            if (rptdesignation.isSelected()) {
                rpt.setReportName("/SDMLATTPAY/IncrementProposal/Increment_data_sheet_desg_wise.jrxml", 1, strSQL);
            }
            if (rptemp.isSelected()) {
                rpt.setReportName("/SDMLATTPAY/IncrementProposal/Increment_data_sheet_emp_wise.jrxml", 1, strSQL);
            }
            if (rptempwithoutlast.isSelected()) {
                rpt.setReportName("/SDMLATTPAY/IncrementProposal/Increment_data_sheet_emp_withoutlastinc_wise.jrxml", 1, strSQL);
            }
            rpt.callReport();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmdreportActionPerformed

    private void Table_ProposalIncrementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Table_ProposalIncrementMouseClicked
        // TODO add your handling code here:
        ReCalculate();
    }//GEN-LAST:event_Table_ProposalIncrementMouseClicked

    private void updatedata() {
        String memp = txtEmpNo.getText();
        int i = 0;
        for (i = 0; i < TableIncrementStatus.getRowCount(); i++) {
            if (memp.equalsIgnoreCase(DataModel_ProposedIncrementDetail.getValueByVariable("IED_PAY_EMP_NO", i))) {
                DataModel_ProposedIncrementDetail.removeRow(i);
                break;
            }
        }
        try {
            double iedsi = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", 0));
        } catch (Exception e) {
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", "0.00", 0);
        }
        Object[] rowData = new Object[1];
        DataModel_ProposedIncrementDetail.addRow(rowData);
        int NewRow = TableIncrementStatus.getRowCount() - 1;
        double cbasic, ibasic, rbasic, cppay, ippay, rppay, cda, chra, ihra, rhra, cmgzn, imgzn, rmgzn, cele, iele, rele, cpa, ipa, rpa, cca, ica, rca, cmp, imp, cma, rma, cinfbns, rinfbns, cpf, rpf, cesic, resic, cgrdty, rgrdty, cpetrol, csa, rsa, cctcm, rctcm, cctcy, rctcy, is;
        double curbasic = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_BASIC", 0));
        double curpp = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_PERSONAL_PAY", 0));
        double curda = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_DA_INDEX", 0));
        double curhra = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_HRA", 0)) + Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_AWARD_HRA", 0));
        double curahra = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_AWARD_HRA", 0));
        double curawardhra = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_AWARD_HRA", 0));
        double curele = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_ELECTRICITY", 0));
        double curmgzn = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_MAGAZINE", 0));
        double curpa = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_PERFORMANCE_ALLOWANCE", 0));
        double curca = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_CONVEY_ALLOWANCE", 0));
        double curmp = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_MEDICAL_PER", 0));
        double curma = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_MEDICAL_AMOUNT", 0));
        double cursa = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_SUPER_ANNUATION_AMOUNT", 0));
        double curinfbns = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_INFLATION_BONUS_AMOUNT", 0));
        double curpetrol = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_PETROL_AMOUNT", 0));
        double curctc = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_MONTHLY_CTC", 0));
        double curctcy = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_YEARLY_CTC", 0));
        double curpf = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_PF_AMOUNT", 0));
        double curgrdty = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_GRATUITY_AMOUNT", 0));
        double curesic = Double.parseDouble(DataModel_SalaryDetail.getValueByVariable("IED_CURRENT_ESIC_AMOUNT", 0));
        try {
            ibasic = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_BASIC", 0));
        } catch (Exception e) {
            ibasic = 0;
        }
        try {
            ippay = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_PERSONAL_PAY", 0));
        } catch (Exception e) {
            ippay = 0;
        }
        try {
            ihra = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_HRA", 0));
        } catch (Exception e) {
            ihra = 0;
        }
        try {
            imgzn = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_MAGAZINE", 0));
        } catch (Exception e) {
            imgzn = 0;
        }
        try {
            iele = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_ELECTRICITY", 0));
        } catch (Exception e) {
            iele = 0;
        }
        try {
            ipa = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE", 0));
        } catch (Exception e) {
            ipa = 0;
        }
        try {
            ica = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_INC_CONVEY_ALLOWANCE", 0));
        } catch (Exception e) {
            ica = 0;
        }
        try {
            imp = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_REVISED_MEDICAL_PER", 0));
        } catch (Exception e) {
            imp = 0;
        }
        try {
            is = Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", 0));
        } catch (Exception e) {
            is = 0;
        }
        rbasic = curbasic + ibasic;
        rbasic = round(rbasic, 2);
        rppay = curpp + ippay;
        rppay = round(rppay, 2);
        rhra = curhra + ihra;
        rhra = round(rhra, 2);
        rmgzn = curmgzn + imgzn;
        rmgzn = round(rmgzn, 2);
        rele = curele + iele;
        rele = round(rele, 2);
        rpa = curpa + ipa;
        rpa = round(rpa, 2);
        rca = curca + ica;
        rca = round(rca, 2);
        if (curmp < imp) {
            rma = (rbasic + rppay + curda) * (imp / 100);
        } else {
            rma = (rbasic + rppay + curda) * (curmp / 100);
        }
        rma = round(rma, 2);
        if (!txtEmpNo.getText().contains("BRD5")
                && !txtEmpNo.getText().contains("BRD6")
                && !txtEmpNo.getText().contains("BRD101582")
                && !txtEmpNo.getText().contains("BRD101963")
                && !txtEmpNo.getText().contains("BRD102025")
                && !txtEmpNo.getText().contains("BRD102029")) {
            if ((rbasic + curda + rppay) < esiclimit) {
                rinfbns = 9087 * 8.3333 / 100;
            } else {
                rinfbns = (rbasic + curda + rppay) * 6 / 100;
            }
            rinfbns = round(rinfbns, 2);
            if ((rbasic + curda + rppay) >= 15000) {
                rpf = (rbasic + curda + rppay) * 13 / 100;
            } else if ((rbasic + curda + rppay + rpa + rmgzn + rca + rele + rma) > 15000) {
                rpf = 1950;
            } else {
                rpf = (rbasic + curda + rppay + rpa + rmgzn + rca + rele + rma) * 13 / 100;
            }
            rpf = round(rpf, 0);
            if ((rbasic + curda + rhra + rca + rele + rppay + rmgzn + rpa + rma) < esiclimit) {
                resic = (rbasic + curda + rhra + rca + rele + rppay + rmgzn + rpa + rma) * 3.25 / 100;
            } else {
                resic = 0;
            }

            resic = Math.ceil(resic);
            rgrdty = (rbasic + curda + rppay) * 4.81 / 100;
            rgrdty = round(rgrdty, 2);
        } else {
            rinfbns = rpf = resic = rgrdty = 0;
        }
        if (cursa > 0) {
            rsa = (rbasic + curda + rppay) * 7.5 / 100;
        } else {
            rsa = 0;
        }
        rsa = round(rsa, 2);
        rctcm = round(rbasic + rppay + curda + rhra + rmgzn + rele + rpa + rca + rma + rinfbns + rpf + resic + rgrdty + rsa + curpetrol, 2);
        rctcy = round(rctcm * 12, 2);
        double ictcp = round((rctcm - curctc) / curctc * 100, 2);
        double itp, itsp, ictcsp;
        itp = round(Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_TOTAL_INCREMENT", 0)) / (curbasic + curpp + curhra - curahra + curele + curmgzn + curpa + curca) * 100, 2);
        itsp = round(Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_TOTAL_SPECIAL_INCREMENT", 0)) / (curbasic + curpp + curhra - curahra + curele + curmgzn + curpa + curca) * 100, 2);
        ictcsp = round(((rctcm + Double.parseDouble(DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", 0))) - curctc) / curctc * 100, 2);

        DataModel_ProposedIncrementDetail.setValueByVariable("IED_DEPARTMENT", txtDept.getText(), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_PAY_EMP_NO", txtEmpNo.getText(), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_EMP_NAME", txtEmpName.getText(), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_PER", String.valueOf(itp), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_SPL_PER", String.valueOf(itsp), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_CTC_PER", String.valueOf(ictcp), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_CTC_SPL_PER", String.valueOf(ictcsp), NewRow);

        DataModel_ProposedIncrementDetail.setValueByVariable("IED_EMP_GRADE", DataModel_EmpDetail.getValueByVariable("EMP_GRADE", Table.getSelectedRow()), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_LAST_TOTAL_INCREMENT", DataModel_LastIncrementDetail.getValueByVariable("IED_LAST_TOTAL_INCREMENT", 0), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_TOTAL_INCREMENT", DataModel_ProposedIncrement.getValueByVariable("IED_TOTAL_INCREMENT", 0), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_TOTAL_SPECIAL_INCREMENT", DataModel_ProposedIncrement.getValueByVariable("IED_TOTAL_SPECIAL_INCREMENT", 0), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", DataModel_ProposedIncrement.getValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", 0), NewRow);

        //DataModel_ProposedIncrementDetail.setValueByVariable("IED_DIFF_CTC", String.valueOf(round(rctcm - curctc, 2)), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_MONTHLY_CTC", String.valueOf(curctc), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_MONTHLY_CTC", String.valueOf(rctcm), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_BASIC", String.valueOf(curbasic), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_BASIC", String.valueOf(ibasic), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_BASIC", String.valueOf(rbasic), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_PERSONAL_PAY", String.valueOf(curpp), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_PERSONAL_PAY", String.valueOf(ippay), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_PERSONAL_PAY", String.valueOf(rppay), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_DA_INDEX", String.valueOf(curda), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_HRA", String.valueOf(curhra), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_HRA", String.valueOf(ihra), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_HRA", String.valueOf(rhra), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_AWARD_HRA", String.valueOf(curawardhra), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_MAGAZINE", String.valueOf(curmgzn), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_MAGAZINE", String.valueOf(imgzn), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_MAGAZINE", String.valueOf(rmgzn), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_ELECTRICITY", String.valueOf(curele), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_ELECTRICITY", String.valueOf(iele), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_ELECTRICITY", String.valueOf(rele), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_PERFORMANCE_ALLOWANCE", String.valueOf(curpa), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE", String.valueOf(ipa), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_PERFORMANCE_ALLOWANCE", String.valueOf(rpa), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_CONVEY_ALLOWANCE", String.valueOf(curca), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INC_CONVEY_ALLOWANCE", String.valueOf(ica), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_CONVEY_ALLOWANCE", String.valueOf(rca), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_MEDICAL_PER", String.valueOf(curmp), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_MEDICAL_PER", String.valueOf(imp), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_MEDICAL_AMOUNT", String.valueOf(curma), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_MEDICAL_AMOUNT", String.valueOf(rma), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_INFLATION_BONUS_AMOUNT", String.valueOf(curinfbns), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_INFLATION_BONUS_AMOUNT", String.valueOf(rinfbns), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_PF_AMOUNT", String.valueOf(curpf), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_PF_AMOUNT", String.valueOf(rpf), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_ESIC_AMOUNT", String.valueOf(curesic), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_ESIC_AMOUNT", String.valueOf(resic), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_GRATUITY_AMOUNT", String.valueOf(curgrdty), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_GRATUITY_AMOUNT", String.valueOf(rgrdty), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_PETROL_AMOUNT", String.valueOf(curpetrol), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_SUPER_ANNUATION_AMOUNT", String.valueOf(cursa), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_SUPER_ANNUATION_AMOUNT", String.valueOf(rsa), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_CURRENT_YEARLY_CTC", String.valueOf(curctcy), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REVISED_YEARLY_CTC", String.valueOf(rctcy), NewRow);
        DataModel_ProposedIncrementDetail.setValueAt(DataModel_ProposedIncrement.getValueAt(0, 8), NewRow, 53);
        DataModel_ProposedIncrementDetail.setValueAt(DataModel_ProposedIncrement.getValueAt(0, 13), NewRow, 55);
        DataModel_ProposedIncrementDetail.setValueAt(DataModel_ProposedIncrement.getValueAt(0, 14), NewRow, 56);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_REMARK", DataModel_ProposedIncrement.getValueByVariable("IED_REMARK", 0), NewRow);
        DataModel_ProposedIncrementDetail.setValueByVariable("IED_ADDITIONAL_AMOUNT", DataModel_ProposedIncrement.getValueByVariable("IED_ADDITIONAL_AMOUNT", 0), NewRow);
        DataModel_ProposedIncrementDetail.setValueAt(DataModel_ProposedIncrement.getValueAt(0, 16), NewRow, 58);
        DataModel_ProposedIncrementDetail.setValueAt(DataModel_ProposedIncrement.getValueAt(0, 17), NewRow, 59);
        DataModel_ProposedIncrementDetail.setValueAt(DataModel_ProposedIncrement.getValueAt(0, 19), NewRow, 61);
        DataModel_ProposedIncrementDetail.setValueAt(DataModel_ProposedIncrement.getValueAt(0, 20), NewRow, 62);
        final TableColumnModel columnModel = TableIncrementStatus.getColumnModel();
        for (int column = 0; column < TableIncrementStatus.getColumnCount(); column++) {
            int width = 100; // Min width
            for (int row = 0; row < TableIncrementStatus.getRowCount(); row++) {
                TableCellRenderer renderer = TableIncrementStatus.getCellRenderer(row, column);
                Component comp = TableIncrementStatus.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 10, width);
            }
            if (width > 300) {
                width = 300;
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
        double mincp = 0, mincctcp = 0;
        for (i = 0; i < TableIncrementStatus.getRowCount(); i++) {
            try {
                mincp = mincp + Double.parseDouble(DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_SPL_PER", i));
            } catch (Exception e) {
            }
            try {
                mincctcp = mincctcp + Double.parseDouble(DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_CTC_SPL_PER", i));
            } catch (Exception e) {
            }
        }
        mincp = round(mincp / Table.getRowCount(), 2);
        mincctcp = round(mincctcp / Table.getRowCount(), 2);

        lblper.setText(String.valueOf(itp) + "%");
        lblsplper.setText(String.valueOf(itsp) + "%");
        lblctcper.setText(String.valueOf(ictcp) + "%");
        lblctcsplper.setText(String.valueOf(ictcsp) + "%");
        if (DataModel_ProposedIncrement.getValueAt(0, 12).toString().equalsIgnoreCase("false")) {
            SetData();
            objIncrement.Update();
        } else {
//            System.out.println("DELETE FROM SDMLATTPAY.INCREMENT_MANAGEMENT_ENTRY_DETAIL "
//                    + "WHERE IED_DEPARTMENT='" + txtDept.getText() + "' AND "
//                    + "IED_DOC_NO=CONCAT(YEAR('" + EITLERPGLOBAL.FinFromDateDB + "'),'-','" + txtDept.getText().substring(0, 4) + "')");
//            data.Execute("DELETE FROM SDMLATTPAY.INCREMENT_MANAGEMENT_ENTRY_DETAIL "
//                    + "WHERE IED_DEPARTMENT='" + txtDept.getText() + "' AND "
//                    + "IED_DOC_NO=CONCAT(YEAR('" + EITLERPGLOBAL.FinFromDateDB + "'),'-','" + txtDept.getText().substring(0, 4) + "')");
            data.Execute("UPDATE SDMLATTPAY.INCREMENT_ENTRY_DETAIL "
                    + "SET APPROVED=0"
                    + "WHERE IED_DEPARTMENT='" + txtDept.getText() + "' AND "
                    + "IED_DOC_NO=CONCAT(YEAR('" + EITLERPGLOBAL.FinFromDateDB + "'),'-','" + txtDept.getText().substring(0, 4) + "')");
            data.Execute("UPDATE SDMLATTPAY.D_COM_DOC_DATA "
                    + "SET STATUS='W'"
                    + "WHERE MODULE_ID=849 AND SR_NO=1 AND "
                    + "DOC_NO=CONCAT(YEAR('" + EITLERPGLOBAL.FinFromDateDB + "'),'-','" + txtDept.getText().substring(0, 4) + "')");
        }
        DisplayData();
        JOptionPane.showMessageDialog(this, "Proposal Save...");

    }

    private void ShowEmpDetails() {
        selectedEmpNo = DataModel_EmpDetail.getValueByVariable("IED_PAY_EMP_NO", Table.getSelectedRow());
        selectedEmpName = DataModel_EmpDetail.getValueByVariable("IED_EMP_NAME", Table.getSelectedRow());
        selecteddept = DataModel_EmpDetail.getValueByVariable("IED_DEPARTMENT", Table.getSelectedRow());
        selectedcategory = DataModel_EmpDetail.getValueByVariable("CATEGORY", Table.getSelectedRow());
        txtEmpNo.setText(selectedEmpNo);
        txtEmpName.setText(selectedEmpName);
        txtDept.setText(selecteddept);
        txtcategory.setText(selectedcategory);
        try {
            FormatGrid_SalaryDetails();

            Object[] rowData = new Object[1];
            DataModel_SalaryDetail.addRow(rowData);
            int i = Table.getSelectedRow() + 1;
            clsIncrementProposalDetails ObjItem = (clsIncrementProposalDetails) objIncrement.hmIncrementProposalDetails.get(Integer.toString(i));

            int NewRow = Table_SalaryDetail.getRowCount() - 1;

            //DataModel_EmpDetail.setValueByVariable("SrNo", Integer.toString(i), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_BASIC", ObjItem.getAttribute("IED_CURRENT_BASIC").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_PERSONAL_PAY", ObjItem.getAttribute("IED_CURRENT_PERSONAL_PAY").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_DA_INDEX", ObjItem.getAttribute("IED_CURRENT_DA_INDEX").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_HRA", ObjItem.getAttribute("IED_CURRENT_HRA").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_AWARD_HRA", ObjItem.getAttribute("IED_CURRENT_AWARD_HRA").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_MAGAZINE", ObjItem.getAttribute("IED_CURRENT_MAGAZINE").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_ELECTRICITY", ObjItem.getAttribute("IED_CURRENT_ELECTRICITY").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_PERFORMANCE_ALLOWANCE", ObjItem.getAttribute("IED_CURRENT_PERFORMANCE_ALLOWANCE").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_CONVEY_ALLOWANCE", ObjItem.getAttribute("IED_CURRENT_CONVEY_ALLOWANCE").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_MEDICAL_PER", ObjItem.getAttribute("IED_CURRENT_MEDICAL_PER").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_MEDICAL_AMOUNT", ObjItem.getAttribute("IED_CURRENT_MEDICAL_AMOUNT").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_INFLATION_BONUS_AMOUNT", ObjItem.getAttribute("IED_CURRENT_INFLATION_BONUS_AMOUNT").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_PF_AMOUNT", ObjItem.getAttribute("IED_CURRENT_PF_AMOUNT").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_ESIC_AMOUNT", ObjItem.getAttribute("IED_CURRENT_ESIC_AMOUNT").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_GRATUITY_AMOUNT", ObjItem.getAttribute("IED_CURRENT_GRATUITY_AMOUNT").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_PETROL_AMOUNT", ObjItem.getAttribute("IED_CURRENT_PETROL_AMOUNT").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_SUPER_ANNUATION_AMOUNT", ObjItem.getAttribute("IED_CURRENT_SUPER_ANNUATION_AMOUNT").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_MONTHLY_CTC", ObjItem.getAttribute("IED_CURRENT_MONTHLY_CTC").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_YEARLY_CTC", ObjItem.getAttribute("IED_CURRENT_YEARLY_CTC").getString(), NewRow);
            DataModel_SalaryDetail.setValueByVariable("IED_CURRENT_YEARLY_CTC", ObjItem.getAttribute("IED_CURRENT_YEARLY_CTC").getString(), NewRow);

            final TableColumnModel columnModel = Table_SalaryDetail.getColumnModel();
            for (int column = 0; column < Table_SalaryDetail.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table_SalaryDetail.getRowCount(); row++) {
                    TableCellRenderer renderer = Table_SalaryDetail.getCellRenderer(row, column);
                    Component comp = Table_SalaryDetail.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 10, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
            FormatGrid_LastIncrementDetails();
            rowData = new Object[1];
            DataModel_LastIncrementDetail.addRow(rowData);
            //rs.first();

            DataModel_LastIncrementDetail.setValueByVariable("IED_LAST_INC_BASIC", ObjItem.getAttribute("IED_LAST_INC_BASIC").getString(), NewRow);
            DataModel_LastIncrementDetail.setValueByVariable("IED_LAST_INC_PERSONAL_PAY", ObjItem.getAttribute("IED_LAST_INC_PERSONAL_PAY").getString(), NewRow);
            DataModel_LastIncrementDetail.setValueByVariable("IED_LAST_INC_HRA", ObjItem.getAttribute("IED_LAST_INC_HRA").getString(), NewRow);
            DataModel_LastIncrementDetail.setValueByVariable("IED_LAST_INC_ELECTRICITY", ObjItem.getAttribute("IED_LAST_INC_ELECTRICITY").getString(), NewRow);
            DataModel_LastIncrementDetail.setValueByVariable("IED_LAST_INC_MAGAZINE", ObjItem.getAttribute("IED_LAST_INC_MAGAZINE").getString(), NewRow);
            DataModel_LastIncrementDetail.setValueByVariable("IED_LAST_INC_PERFORMANCE_ALLOWANCE", ObjItem.getAttribute("IED_LAST_INC_PERFORMANCE_ALLOWANCE").getString(), NewRow);
            DataModel_LastIncrementDetail.setValueByVariable("IED_LAST_INC_CONVEY_ALLOWANCE", ObjItem.getAttribute("IED_LAST_INC_CONVEY_ALLOWANCE").getString(), NewRow);
            DataModel_LastIncrementDetail.setValueByVariable("IED_LAST_TOTAL_INCREMENT", ObjItem.getAttribute("IED_LAST_TOTAL_INCREMENT").getString(), NewRow);

            final TableColumnModel columnModel1 = Table_LastIncrement.getColumnModel();
            for (int column = 0; column < Table_LastIncrement.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table_LastIncrement.getRowCount(); row++) {
                    TableCellRenderer renderer = Table_LastIncrement.getCellRenderer(row, column);
                    Component comp = Table_LastIncrement.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 10, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel1.getColumn(column).setPreferredWidth(width);
            }

            lblper.setText(ObjItem.getAttribute("IED_REVISED_PER").getString() + "%");
            lblsplper.setText(ObjItem.getAttribute("IED_REVISED_SPL_PER").getString() + "%");
            lblctcper.setText(ObjItem.getAttribute("IED_REVISED_CTC_PER").getString() + "%");
            lblctcsplper.setText(ObjItem.getAttribute("IED_REVISED_CTC_SPL_PER").getString() + "%");
            FormatGrid_ProposalIncrement();
            rowData = new Object[1];
            DataModel_ProposedIncrement.addRow(rowData);

            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_BASIC", ObjItem.getAttribute("IED_CURRENT_INC_BASIC").getString(), NewRow);
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_PERSONAL_PAY", ObjItem.getAttribute("IED_CURRENT_INC_PERSONAL_PAY").getString(), NewRow);
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_HRA", ObjItem.getAttribute("IED_CURRENT_INC_HRA").getString(), NewRow);
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_ELECTRICITY", ObjItem.getAttribute("IED_CURRENT_INC_ELECTRICITY").getString(), NewRow);
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_MAGAZINE", ObjItem.getAttribute("IED_CURRENT_INC_MAGAZINE").getString(), NewRow);
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE", ObjItem.getAttribute("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE").getString(), NewRow);
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_INC_CONVEY_ALLOWANCE", ObjItem.getAttribute("IED_CURRENT_INC_CONVEY_ALLOWANCE").getString(), NewRow);
            DataModel_ProposedIncrement.setValueByVariable("IED_REVISED_MEDICAL_PER", ObjItem.getAttribute("IED_REVISED_MEDICAL_PER").getString(), NewRow);
            DataModel_ProposedIncrement.setValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", ObjItem.getAttribute("IED_CURRENT_SPECIAL_INCREMENT").getString(), NewRow);
            //DataModel_ProposedIncrement.setValueByVariable("IED_PROPOSE_PROMOTION", ObjItem.getAttribute("IED_PROPOSE_PROMOTION").getString(), NewRow);
            DataModel_ProposedIncrement.setValueAt(ObjItem.getAttribute("IED_PROPOSE_PROMOTION").getBool(), 0, 8);
            DataModel_ProposedIncrement.setValueAt(false, 0, 12);
            DataModel_ProposedIncrement.setValueAt(ObjItem.getAttribute("IED_RESIGNATION").getBool(), 0, 13);
            DataModel_ProposedIncrement.setValueAt(ObjItem.getAttribute("IED_PROBATION").getBool(), 0, 14);
            DataModel_ProposedIncrement.setValueByVariable("IED_TOTAL_INCREMENT", ObjItem.getAttribute("IED_TOTAL_INCREMENT").getString(), NewRow);
            DataModel_ProposedIncrement.setValueByVariable("IED_TOTAL_SPECIAL_INCREMENT", ObjItem.getAttribute("IED_TOTAL_SPECIAL_INCREMENT").getString(), NewRow);
            DataModel_ProposedIncrement.setValueByVariable("IED_REMARK", ObjItem.getAttribute("IED_REMARK").getString(), NewRow);
            DataModel_ProposedIncrement.setValueAt(ObjItem.getAttribute("IED_INC").getBool(), 0, 16);
            DataModel_ProposedIncrement.setValueAt(ObjItem.getAttribute("IED_ARREAS").getBool(), 0, 17);
            DataModel_ProposedIncrement.setValueByVariable("IED_ADDITIONAL_AMOUNT", ObjItem.getAttribute("IED_ADDITIONAL_AMOUNT").getString(), NewRow);
            DataModel_ProposedIncrement.setValueAt(ObjItem.getAttribute("IED_A_INC").getBool(), 0, 19);
            DataModel_ProposedIncrement.setValueAt(ObjItem.getAttribute("IED_A_ARREAS").getBool(), 0, 20);

            final TableColumnModel columnModel2 = Table_ProposalIncrement.getColumnModel();
            for (int column = 0; column < Table_ProposalIncrement.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table_ProposalIncrement.getRowCount(); row++) {
                    TableCellRenderer renderer = Table_ProposalIncrement.getCellRenderer(row, column);
                    Component comp = Table_ProposalIncrement.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 10, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel2.getColumn(column).setPreferredWidth(width);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void SetData() {

        objIncrement.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
        objIncrement.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        objIncrement.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
        objIncrement.setAttribute("UPDATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());

        objIncrement.hmIncrementProposalDetails.clear();
        for (int i = 0; i < TableIncrementStatus.getRowCount(); i++) {
            clsIncrementProposalDetails ObjItem = new clsIncrementProposalDetails();
            ObjItem.setAttribute("IED_DEPARTMENT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_DEPARTMENT", i));
            ObjItem.setAttribute("IED_PAY_EMP_NO", DataModel_ProposedIncrementDetail.getValueByVariable("IED_PAY_EMP_NO", i));
            ObjItem.setAttribute("IED_EMP_NAME", DataModel_ProposedIncrementDetail.getValueByVariable("IED_EMP_NAME", i));
            ObjItem.setAttribute("IED_REVISED_PER", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_PER", i));
            ObjItem.setAttribute("IED_REVISED_SPL_PER", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_SPL_PER", i));
            ObjItem.setAttribute("IED_REVISED_CTC_PER", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_CTC_PER", i));
            ObjItem.setAttribute("IED_REVISED_CTC_SPL_PER", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_CTC_SPL_PER", i));
            ObjItem.setAttribute("IED_TOTAL_INCREMENT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_TOTAL_INCREMENT", i));
            ObjItem.setAttribute("IED_TOTAL_SPECIAL_INCREMENT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_TOTAL_SPECIAL_INCREMENT", i));
            ObjItem.setAttribute("IED_EMP_GRADE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_EMP_GRADE", i));
//            ObjItem.setAttribute("IED_DIFF_CTC", DataModel_ProposedIncrementDetail.getValueByVariable("IED_DIFF_CTC", i));
            ObjItem.setAttribute("IED_CURRENT_MONTHLY_CTC", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_MONTHLY_CTC", i));
            ObjItem.setAttribute("IED_REVISED_MONTHLY_CTC", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_MONTHLY_CTC", i));
            ObjItem.setAttribute("IED_CURRENT_BASIC", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_BASIC", i));
            ObjItem.setAttribute("IED_CURRENT_INC_BASIC", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INC_BASIC", i));
            ObjItem.setAttribute("IED_REVISED_BASIC", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_BASIC", i));
            ObjItem.setAttribute("IED_CURRENT_PERSONAL_PAY", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_PERSONAL_PAY", i));
            ObjItem.setAttribute("IED_CURRENT_INC_PERSONAL_PAY", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INC_PERSONAL_PAY", i));
            ObjItem.setAttribute("IED_REVISED_PERSONAL_PAY", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_PERSONAL_PAY", i));
            ObjItem.setAttribute("IED_CURRENT_DA_INDEX", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_DA_INDEX", i));
            ObjItem.setAttribute("IED_CURRENT_HRA", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_HRA", i));
            ObjItem.setAttribute("IED_CURRENT_INC_HRA", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INC_HRA", i));
            ObjItem.setAttribute("IED_REVISED_HRA", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_HRA", i));
            ObjItem.setAttribute("IED_CURRENT_AWARD_HRA", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_AWARD_HRA", i));
            ObjItem.setAttribute("IED_CURRENT_MAGAZINE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_MAGAZINE", i));
            ObjItem.setAttribute("IED_CURRENT_INC_MAGAZINE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INC_MAGAZINE", i));
            ObjItem.setAttribute("IED_REVISED_MAGAZINE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_MAGAZINE", i));
            ObjItem.setAttribute("IED_CURRENT_ELECTRICITY", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_ELECTRICITY", i));
            ObjItem.setAttribute("IED_CURRENT_INC_ELECTRICITY", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INC_ELECTRICITY", i));
            ObjItem.setAttribute("IED_REVISED_ELECTRICITY", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_ELECTRICITY", i));
            ObjItem.setAttribute("IED_CURRENT_PERFORMANCE_ALLOWANCE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_PERFORMANCE_ALLOWANCE", i));
            ObjItem.setAttribute("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INC_PERFORMANCE_ALLOWANCE", i));
            ObjItem.setAttribute("IED_CURRENT_SPECIAL_INCREMENT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_SPECIAL_INCREMENT", i));
            ObjItem.setAttribute("IED_REVISED_PERFORMANCE_ALLOWANCE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_PERFORMANCE_ALLOWANCE", i));
            ObjItem.setAttribute("IED_CURRENT_CONVEY_ALLOWANCE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_CONVEY_ALLOWANCE", i));
            ObjItem.setAttribute("IED_CURRENT_INC_CONVEY_ALLOWANCE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INC_CONVEY_ALLOWANCE", i));
            ObjItem.setAttribute("IED_REVISED_CONVEY_ALLOWANCE", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_CONVEY_ALLOWANCE", i));
            ObjItem.setAttribute("IED_CURRENT_MEDICAL_PER", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_MEDICAL_PER", i));
            ObjItem.setAttribute("IED_REVISED_MEDICAL_PER", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_MEDICAL_PER", i));
            ObjItem.setAttribute("IED_CURRENT_MEDICAL_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_MEDICAL_AMOUNT", i));
            ObjItem.setAttribute("IED_REVISED_MEDICAL_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_MEDICAL_AMOUNT", i));
            ObjItem.setAttribute("IED_CURRENT_INFLATION_BONUS_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_INFLATION_BONUS_AMOUNT", i));
            ObjItem.setAttribute("IED_REVISED_INFLATION_BONUS_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_INFLATION_BONUS_AMOUNT", i));
            ObjItem.setAttribute("IED_CURRENT_PF_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_PF_AMOUNT", i));
            ObjItem.setAttribute("IED_REVISED_PF_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_PF_AMOUNT", i));
            ObjItem.setAttribute("IED_CURRENT_ESIC_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_ESIC_AMOUNT", i));
            ObjItem.setAttribute("IED_REVISED_ESIC_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_ESIC_AMOUNT", i));
            ObjItem.setAttribute("IED_CURRENT_GRATUITY_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_GRATUITY_AMOUNT", i));
            ObjItem.setAttribute("IED_REVISED_GRATUITY_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_GRATUITY_AMOUNT", i));
            ObjItem.setAttribute("IED_CURRENT_PETROL_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_PETROL_AMOUNT", i));
            ObjItem.setAttribute("IED_CURRENT_SUPER_ANNUATION_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_SUPER_ANNUATION_AMOUNT", i));
            ObjItem.setAttribute("IED_REVISED_SUPER_ANNUATION_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_SUPER_ANNUATION_AMOUNT", i));
            ObjItem.setAttribute("IED_CURRENT_YEARLY_CTC", DataModel_ProposedIncrementDetail.getValueByVariable("IED_CURRENT_YEARLY_CTC", i));
            ObjItem.setAttribute("IED_REVISED_YEARLY_CTC", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REVISED_YEARLY_CTC", i));
            ObjItem.setAttribute("IED_PROPOSE_PROMOTION", DataModel_ProposedIncrementDetail.getValueAt(i, 53).toString());
            ObjItem.setAttribute("IED_RESIGNATION", DataModel_ProposedIncrementDetail.getValueAt(i, 55).toString());
            ObjItem.setAttribute("IED_PROBATION", DataModel_ProposedIncrementDetail.getValueAt(i, 56).toString());
            ObjItem.setAttribute("IED_REMARK", DataModel_ProposedIncrementDetail.getValueByVariable("IED_REMARK", i));
            ObjItem.setAttribute("IED_ADDITIONAL_AMOUNT", DataModel_ProposedIncrementDetail.getValueByVariable("IED_ADDITIONAL_AMOUNT", i));
            ObjItem.setAttribute("IED_INC", DataModel_ProposedIncrementDetail.getValueAt(i, 58).toString());
            ObjItem.setAttribute("IED_ARREAS", DataModel_ProposedIncrementDetail.getValueAt(i, 59).toString());
            ObjItem.setAttribute("IED_A_INC", DataModel_ProposedIncrementDetail.getValueAt(i, 61).toString());
            ObjItem.setAttribute("IED_A_ARREAS", DataModel_ProposedIncrementDetail.getValueAt(i, 62).toString());

            objIncrement.hmIncrementProposalDetails.put(Integer.toString(objIncrement.hmIncrementProposalDetails.size() + 1), ObjItem);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel StatusPanel1;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableIncrementStatus;
    private javax.swing.JTable Table_LastIncrement;
    private javax.swing.JTable Table_ProposalIncrement;
    private javax.swing.JTable Table_SalaryDetail;
    private javax.swing.ButtonGroup btngrpfilter;
    private javax.swing.JButton btnupdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cmdreport;
    private javax.swing.JButton cmdview;
    private javax.swing.JRadioButton filterall;
    private javax.swing.JRadioButton filterpending;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStatus1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblctcper;
    private javax.swing.JLabel lblctcsplper;
    private javax.swing.JLabel lblper;
    private javax.swing.JLabel lblsplper;
    private javax.swing.JLabel ltbPink;
    private javax.swing.JComboBox orderby;
    private javax.swing.ButtonGroup reportgroup;
    private javax.swing.JRadioButton rptdept;
    private javax.swing.JRadioButton rptdesignation;
    private javax.swing.JRadioButton rptemp;
    private javax.swing.JRadioButton rptempwithoutlast;
    private javax.swing.JCheckBox rptretainer;
    private javax.swing.JCheckBox rptstaff;
    private javax.swing.JTextField txtDept;
    private javax.swing.JTextField txtDesignation;
    private javax.swing.JTextField txtEmpName;
    private javax.swing.JTextField txtEmpNo;
    private javax.swing.JTextField txt_dept;
    private javax.swing.JTextField txtcategory;
    // End of variables declaration//GEN-END:variables

}
