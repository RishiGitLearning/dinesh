/*
 * frmChangePassword.java
 *
 * Created on July 3, 2004, 3:36 PM
 */
package SDMLATTPAY.RokdiReport.Report;

import EITLERP.*;
import EITLERP.Finance.UtilFunctions;
import SDMLATTPAY.Employee.clsMaster;
import TReportWriter.SimpleDataProvider.TTable;
import TReportWriter.TReportEngine;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.io.File;
import java.sql.*;
import javax.swing.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
//import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
//import EITLERP.Sales.clsExcelExporter;

/*<APPLET CODE=frmChangePassword HEIGHT=200 WIDTH=430></APPLET>*/
/**
 *
 * @author Daxesh Prajapati
 */
public class FrmRokdiReport extends javax.swing.JApplet {

    private clsExcel_Exporter exp = new clsExcel_Exporter();

    private EITLTableModel DataModel = new EITLTableModel();

    private EITLComboModel modelDept = new EITLComboModel();
    private EITLComboModel modelShift = new EITLComboModel();
    private EITLComboModel modelMainCategory = new EITLComboModel();
    private EITLComboModel modelCategory = new EITLComboModel();
    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();

    
    public void init() {
        initComponents();
        setSize(1260, 740);

        jLabel1.setForeground(Color.WHITE);
        txtFromDate.setText("");
        txtToDate.setText("");
        btnGenerateReport.setVisible(false);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ExporttoExcelFileChooser = new javax.swing.JFileChooser();
        file1 = new javax.swing.JFileChooser();
        CoffRokadiBtnGrp = new javax.swing.ButtonGroup();
        LCBtnGrp = new javax.swing.ButtonGroup();
        GatePassBtnGrp = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnEmpMstETE = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        btnGenerateReport = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();

        getContentPane().setLayout(null);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setText("Rokdi Report");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 2, 1260, 25);

        jLabel2.setBackground(new java.awt.Color(0, 102, 153));
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 80, 1260, 10);

        btnEmpMstETE.setLabel("Export to Excel");
        btnEmpMstETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpMstETEActionPerformed(evt);
            }
        });
        getContentPane().add(btnEmpMstETE);
        btnEmpMstETE.setBounds(1010, 40, 150, 30);

        jButton1.setText("Show Data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(490, 40, 160, 25);

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblData);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 100, 1150, 440);

        jLabel3.setText("From Date ");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(30, 50, 100, 15);
        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(110, 40, 130, 30);

        jLabel4.setText("To Date");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(250, 50, 80, 15);
        getContentPane().add(txtToDate);
        txtToDate.setBounds(310, 40, 150, 30);

        btnGenerateReport.setText("Generate Report");
        btnGenerateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateReportActionPerformed(evt);
            }
        });
        getContentPane().add(btnGenerateReport);
        btnGenerateReport.setBounds(660, 40, 160, 25);

        jToolBar1.setRollover(true);
        getContentPane().add(jToolBar1);
        jToolBar1.setBounds(650, 40, 18, 4);
    }// </editor-fold>//GEN-END:initComponents


    private void btnEmpMstETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpMstETEActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(tblData, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnEmpMstETEActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        FetchData();
       
    }//GEN-LAST:event_jButton1ActionPerformed
    private void ShowReport() {
        
        try {
            TReportEngine objEngine=new TReportEngine();
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            TReportWriter.SimpleDataProvider.TRow objRow;
            
            objReportData.AddColumn("EMP_NO");
            objReportData.AddColumn("EMP_NAME");
            objReportData.AddColumn("DEPARTMENT");
            objReportData.AddColumn("FROM_DATE_DETAIL");
            objReportData.AddColumn("FROM_PUNCH");
            objReportData.AddColumn("TO_DATE_DETAIL");
            objReportData.AddColumn("TO_PUNCH");
            objReportData.AddColumn("DIFFRENCE");
            
            for (int i = 0; i <= tblData.getRowCount() - 1; i++) {
                if (!DataModel.getValueByVariable("EMP_NO", i).equals("")) {
                    objRow=objReportData.newRow();
                    objRow.setValue("EMP_NO", DataModel.getValueByVariable("EMP_NO", i));
                    objRow.setValue("EMP_NAME", DataModel.getValueByVariable("EMP_NAME", i));
                    objRow.setValue("DEPARTMENT", DataModel.getValueByVariable("DEPARTMENT", i));
                    objRow.setValue("FROM_DATE_DETAIL", EITLERPGLOBAL.formatDateDB(DataModel.getValueByVariable("FROM_DATE", i)));
                    objRow.setValue("FROM_PUNCH", DataModel.getValueByVariable("FROM_PUNCH", i));
                    objRow.setValue("TO_DATE_DETAIL", EITLERPGLOBAL.formatDateDB(DataModel.getValueByVariable("TO_DATE", i)));
                    objRow.setValue("TO_PUNCH", DataModel.getValueByVariable("TO_PUNCH", i));
                    objRow.setValue("DIFFRENCE", DataModel.getValueByVariable("DIFFRENCE", i));
                    
                    objReportData.AddRow(objRow);
                    System.out.println("EMPNO = "+DataModel.getValueByVariable("EMP_NO", i));
                    }
            }
            
            HashMap Parameters=new HashMap();
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE",txtFromDate.getText());
            Parameters.put("TO_DATE",txtToDate.getText());
            //System.out.println("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptFeltOrder.rpt");
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/RokdiReport.rpt",Parameters,objReportData);
            
        }
        catch(Exception e) {
            System.out.println("Error : "+e.getLocalizedMessage());
            e.printStackTrace();
        }
    }
    private void btnGenerateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateReportActionPerformed
        // TODO add your handling code here:
        //GenerateReport();
        ShowReport();
    }//GEN-LAST:event_btnGenerateReportActionPerformed
    private void FetchData()
    {
        FormatGrid();
        if(txtFromDate.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "From date is compulsory");
            txtFromDate.requestFocus();
        }
        if(txtToDate.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "To date is compulsory");
            txtToDate.requestFocus();
        }
        /*String Query = "SELECT DISTINCT EMP_CODE,A_DATETIME FROM SDMLATTPAY.ATT_DATA " +
                        "WHERE MACHINE IN (11) " +
                        "AND A_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND A_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' " +
                        "AND UPDATE_IND NOT IN ('DELETION') " +
                        "ORDER BY EMP_CODE,A_DATE";
        */
//        String Query = "SELECT DISTINCT EMP_CODE,count(distinct A_DATETIME) AS NO_OF_ROW FROM SDMLATTPAY.ATT_DATA WHERE " +
//                        "MACHINE IN (11) AND PUNCH_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND PUNCH_DATE<='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND " +
//                        "UPDATE_IND NOT IN ('DELETION') group by EMP_CODE ORDER BY EMP_CODE,A_DATETIME";
        
//        String Query = "SELECT DISTINCT A.EMP_CODE,count(distinct A.A_DATETIME) AS NO_OF_ROW,B.EMP_NAME,D.Name "
//                + "FROM SDMLATTPAY.ATT_DATA A,SDMLATTPAY.ATTPAY_EMPMST B,SDMLATTPAY.ATT_DEPARTMENT_MASTER D "
//                + "WHERE A.MACHINE IN (11) AND A.PUNCH_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND A.PUNCH_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' "
//                + "AND A.UPDATE_IND NOT IN ('DELETION') AND B.PAY_EMP_NO=A.EMP_CODE AND B.EMP_DEPARTMENT=D.DPTID "
//                + "group by A.EMP_CODE ORDER BY D.DPTID,A.A_DATETIME";
        String Query = "SELECT DISTINCT A.EMP_CODE,count(distinct A.A_DATETIME) AS NO_OF_ROW,B.EMP_NAME,"
                + "D.Name FROM SDMLATTPAY.ATT_DATA A,SDMLATTPAY.ATTPAY_EMPMST B,"
                + "SDMLATTPAY.ATT_DEPARTMENT_MASTER D WHERE A.MACHINE IN (11) AND A.PUNCH_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' "
                + "AND A.PUNCH_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND A.UPDATE_IND NOT IN ('DELETION') "
                + "AND B.PAY_EMP_NO=A.EMP_CODE AND substr(EMP_CODE,1,5)='BRD30' AND B.EMP_DEPARTMENT=D.DPTID "
                + "group by A.EMP_CODE ORDER BY D.DPTCODE,B.PAY_EMP_NO,A.A_DATETIME";
        
        try{System.out.println("MAIN QUERY = "+Query);
             
             ResultSet rsData = data.getResult(Query);
             
             rsData.first();
             while (!rsData.isAfterLast()){ 
             
                int no_of_rows=Integer.parseInt(rsData.getString("NO_OF_ROW"));
                int k=1;
                for(int i=0;i<no_of_rows;i++)
                {
                    
                    if(i%2==0)
                    {
                        String PUNCH_DATE_FROM = "";
                        String PUNCH_DATE_TO = "";
                        boolean new_line = false;
                        Object[] rowData = new Object[1];
                        DataModel.addRow(rowData);
                        int NewRow = tblData.getRowCount() - 1;
                        DataModel.setValueByVariable("SrNo", NewRow+1+"", NewRow);
                        DataModel.setValueByVariable("EMP_NO", rsData.getString("EMP_CODE"), NewRow);
                        DataModel.setValueByVariable("EMP_NAME", rsData.getString("EMP_NAME"), NewRow);
                        DataModel.setValueByVariable("DEPARTMENT", rsData.getString("Name"), NewRow);
                        DataModel.setValueByVariable("PUNCH_ROW", k+"", NewRow);
                        
                        //ODD PUNCHES
                        String PUNCH_FROM ="";
                        String SHIFT_FROM = "";
                        try{
                            String Query_punch1 = "SELECT DISTINCT PUNCH_DATE,A_DATETIME,A_SHIFT FROM SDMLATTPAY.ATT_DATA " +
                            "WHERE MACHINE IN (11) " +
                            "AND PUNCH_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND PUNCH_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' " +
                            "AND UPDATE_IND NOT IN ('DELETION') AND EMP_CODE='"+rsData.getString("EMP_CODE")+"' " +
                            "ORDER BY EMP_CODE,A_DATETIME limit "+(k-1)+",1";
                            ResultSet rs = data.getResult(Query_punch1);
                            rs.first();
                            PUNCH_FROM = rs.getString("A_DATETIME");
                            PUNCH_DATE_FROM = rs.getString("PUNCH_DATE");
                            SHIFT_FROM = rs.getString("A_SHIFT");
//                            System.out.println("sql 1= "+Query_punch1);

                            DataModel.setValueByVariable("FROM_DATE", EITLERPGLOBAL.formatDate(PUNCH_FROM), NewRow);
                            String From_Punch =  PUNCH_FROM.substring(11, 16);
                            DataModel.setValueByVariable("FROM_PUNCH", From_Punch, NewRow);
                        
                        }catch(Exception e)
                        {
                            e.printStackTrace();
                        }
                        //
                        String PUNCH_TO = "";
                        String SHIFT_TO = "";
                        try{
                            String Query_punch2 = "SELECT DISTINCT PUNCH_DATE,A_DATETIME,A_SHIFT FROM SDMLATTPAY.ATT_DATA " +
                                            "WHERE MACHINE IN (11) " +
                                            "AND PUNCH_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND PUNCH_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' " +
                                            "AND UPDATE_IND NOT IN ('DELETION') AND EMP_CODE='"+rsData.getString("EMP_CODE")+"' " +
                                            "ORDER BY EMP_CODE,A_DATETIME limit "+k+",1";
                            //PUNCH_TO = data.getStringValueFromDB(Query_punch2);
                            ResultSet rs = data.getResult(Query_punch2);
                            rs.first();
                            PUNCH_TO = rs.getString("A_DATETIME");
                            PUNCH_DATE_TO = rs.getString("PUNCH_DATE");
                            SHIFT_TO = rs.getString("A_SHIFT");
//                            System.out.println("sql 2= "+Query_punch2);
                            
                            
                            
                            //if(SHIFT_FROM.equals(SHIFT_TO))
                            //{
                                DataModel.setValueByVariable("TO_DATE",  EITLERPGLOBAL.formatDate(PUNCH_TO), NewRow);
                                String From_To =  PUNCH_TO.substring(11, 16);
                                DataModel.setValueByVariable("TO_PUNCH", From_To, NewRow);
                                DataModel.setValueByVariable("PUNCH_DATE_FROM", EITLERPGLOBAL.formatDate(PUNCH_DATE_FROM), NewRow);
                                DataModel.setValueByVariable("PUNCH_DATE_TO", EITLERPGLOBAL.formatDate(PUNCH_DATE_TO), NewRow);
                            //}
                        }catch(Exception e)
                        {
                            //e.printStackTrace();
                        }
                        
                        //
                        //if(SHIFT_FROM.equals(SHIFT_TO))
                        //{
//                            System.out.println("DIFF : SELECT TIMEDIFF('"+PUNCH_TO+"', '"+PUNCH_FROM+"')");
                            String Diff = data.getStringValueFromDB("SELECT TIMEDIFF('"+PUNCH_TO+"', '"+PUNCH_FROM+"')");

                            if(!Diff.equals(""))
                            {
                                Diff = Diff.substring(0,5);
                            }

                            DataModel.setValueByVariable("DIFFRENCE", Diff, NewRow);
                            k=k+2;    
//                        }
//                        else
//                        {
//                            k=k+1;
//                        }
                        
                    }
                }

                rsData.next();
             }
             
         }catch(Exception e)
         {
             e.printStackTrace();
         }
    }
    private void GenerateReport()
    {
        data.Execute("truncate TABLE SDMLATTPAY.ATT_ROKDI_PUNCH_REPORT_TEMP");
        for (int i = 0; i <= tblData.getRowCount() - 1; i++) {
                if (!DataModel.getValueByVariable("EMP_NO", i).equals("")) {
         
                    ResultSet resultSetTemp;
                    Statement statementTemp;
                    try {
                            Connection connection = data.getConn();

                            statementTemp = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                            resultSetTemp = statementTemp.executeQuery("SELECT * FROM  SDMLATTPAY.ATT_ROKDI_PUNCH_REPORT_TEMP WHERE EMP_NO='1'");

                            resultSetTemp.moveToInsertRow();

                            resultSetTemp.updateInt("SR_NO", (i+1));
                            resultSetTemp.updateString("EMP_NO", DataModel.getValueByVariable("EMP_NO", i));
                            resultSetTemp.updateString("EMP_NAME", DataModel.getValueByVariable("EMP_NAME", i));
                            resultSetTemp.updateString("DEPARTMENT", DataModel.getValueByVariable("DEPARTMENT", i));
                            resultSetTemp.updateString("FROM_DATE_DETAIL", EITLERPGLOBAL.formatDateDB(DataModel.getValueByVariable("FROM_DATE", i)));
                            resultSetTemp.updateString("FROM_PUNCH", DataModel.getValueByVariable("FROM_PUNCH", i));
                            resultSetTemp.updateString("TO_DATE_DETAIL", EITLERPGLOBAL.formatDateDB(DataModel.getValueByVariable("TO_DATE", i)));
                            resultSetTemp.updateString("TO_PUNCH", DataModel.getValueByVariable("TO_PUNCH", i));
                            resultSetTemp.updateString("DIFFRENCE", DataModel.getValueByVariable("DIFFRENCE", i));
                            resultSetTemp.updateString("PUNCH_ROW", DataModel.getValueByVariable("PUNCH_ROW", i));
                            
                            resultSetTemp.insertRow();

                        }catch(Exception e)
                        {
                            e.printStackTrace();
                        }
                    }
                }
    }
    private void FormatGrid()
    {
        DataModel = new EITLTableModel();
        tblData.removeAll();
        tblData.setModel(DataModel);

        tblData.setAutoResizeMode(tblData.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Emp Pay No");
        DataModel.addColumn("Emp Name");
        DataModel.addColumn("Department");
        DataModel.addColumn("From Date");
        DataModel.addColumn("From Punch");
        DataModel.addColumn("To Date");
        DataModel.addColumn("To Punch");
        DataModel.addColumn("Difference");
        DataModel.addColumn("Punch Row");
        DataModel.addColumn("Punch Date From");
        DataModel.addColumn("Punch Date To");
        
        DataModel.SetVariable(0, "SrNo"); //0 - Read Only
        DataModel.SetVariable(1, "EMP_NO"); //0 - Read Only
        DataModel.SetVariable(2, "EMP_NAME"); //0 - Read Only
        DataModel.SetVariable(3, "DEPARTMENT"); //0 - Read Only
        DataModel.SetVariable(4, "FROM_DATE"); //0 - Read Only
        DataModel.SetVariable(5, "FROM_PUNCH"); //0 - Read Only
        DataModel.SetVariable(6, "TO_DATE"); //0 - Read Only
        DataModel.SetVariable(7, "TO_PUNCH"); //0 - Read Only
        DataModel.SetVariable(8, "DIFFRENCE"); //0 - Read Only
        DataModel.SetVariable(9, "PUNCH_ROW"); //0 - Read Only
        DataModel.SetVariable(10, "PUNCH_DATE_FROM"); //0 - Read Only
        DataModel.SetVariable(11, "PUNCH_DATE_TO"); //0 - Read Only

        DataModel.TableReadOnly(true);
        tblData.getColumnModel().getColumn(0).setMinWidth(50);
        tblData.getColumnModel().getColumn(1).setMinWidth(80);
        tblData.getColumnModel().getColumn(2).setMinWidth(180);
        tblData.getColumnModel().getColumn(3).setMinWidth(150);
        tblData.getColumnModel().getColumn(4).setMinWidth(100);
        tblData.getColumnModel().getColumn(5).setMinWidth(80);
        tblData.getColumnModel().getColumn(6).setMinWidth(100);
        tblData.getColumnModel().getColumn(7).setMinWidth(80);
        tblData.getColumnModel().getColumn(8).setMinWidth(80);
        tblData.getColumnModel().getColumn(9).setMinWidth(00);
        tblData.getColumnModel().getColumn(9).setMaxWidth(00);
        tblData.getColumnModel().getColumn(10).setMinWidth(110);
        tblData.getColumnModel().getColumn(11).setMinWidth(110);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup CoffRokadiBtnGrp;
    private javax.swing.JFileChooser ExporttoExcelFileChooser;
    private javax.swing.ButtonGroup GatePassBtnGrp;
    private javax.swing.ButtonGroup LCBtnGrp;
    private javax.swing.JButton btnEmpMstETE;
    private javax.swing.JButton btnGenerateReport;
    private javax.swing.JFileChooser file1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTable tblData;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables

    
}
