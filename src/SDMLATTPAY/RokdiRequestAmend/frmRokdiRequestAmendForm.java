/*
 * frmMonthlyAttendance.java
 *
 * Created on August 22, 2013, 11:20 AM
 */
package SDMLATTPAY.RokdiRequestAmend;

/**
 *
 * @author
 */
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.util.HashMap;
import java.net.URL;
import java.io.File;
import TReportWriter.NumWord;

import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.Loader;
import EITLERP.AppletFrame;
import EITLERP.EITLTableCellRenderer;
import EITLERP.FeltSales.common.JavaMail;
import EITLERP.FeltSales.common.JavaMailNew;
import EITLERP.LOV;
import EITLERP.frmPendingApprovals;
//import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.Production.FeltUser;
import EITLERP.SelectFirstFree;
import EITLERP.clsFirstFree;
import EITLERP.data;
import SDMLATTPAY.AdvanceSearch.ATTPAYLOV;
import SDMLATTPAY.Employee.clsMaster;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.table.TableCellRenderer;
import javax.swing.JTextField;

public class frmRokdiRequestAmendForm extends javax.swing.JApplet {

    private int EditMode = 0;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromUserId = 0;
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    private boolean DoNotEvaluate = false;

    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;

    private clsRokdiRequestAmendForm ObjRokdiRequestAmend;

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel modelDept = new EITLComboModel();

    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;
    private int FinalApprovedBy = 0;
    public frmPendingApprovals frmPA;

    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();
    private EITLTableCellRenderer Renderer = new EITLTableCellRenderer();

    /**
     * Creates new form frmFeltFinishing
     */
    public void init() {
        System.gc();
        setSize(1000, 590);
        initComponents();
        lblTitle.setForeground(Color.WHITE);
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        DataModel = new EITLTableModel();
        ObjRokdiRequestAmend = new clsRokdiRequestAmendForm();
        lblTitle.setForeground(Color.WHITE);

        cmdRemove.setVisible(false);

        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
//        GenerateDeptCombo();
        FormatGrid();
        lblRevNo.setVisible(false);

        if (ObjRokdiRequestAmend.LoadData()) {
            ObjRokdiRequestAmend.MoveLast();
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmRokdiRequestAmendForm.this, "Error occured while Loading Data. Error is " + ObjRokdiRequestAmend.LastError, "DATA LOADING ERROR", JOptionPane.ERROR_MESSAGE);
        }

        Table.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        file1 = new javax.swing.JFileChooser();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        txtAmendNo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtAmendDate = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        cmdNextToTab1 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        btnEmpMstETE = new javax.swing.JButton();
        cmbDept = new javax.swing.JComboBox();
        lblDeptCmb1 = new javax.swing.JLabel();
        txtReqDate = new javax.swing.JTextField();
        lblDate = new javax.swing.JLabel();
        txtEmpNo = new javax.swing.JTextField();
        cmdRemove = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        lblEmpNo1 = new javax.swing.JLabel();
        lblDeptCmb = new javax.swing.JLabel();
        cmbShift = new javax.swing.JComboBox();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 990, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("Rokdi Request Amendment Form - ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 990, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel16.setText("Amd No ");
        Tab1.add(jLabel16);
        jLabel16.setBounds(20, 10, 70, 20);

        txtAmendNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtAmendNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtAmendNo.setEnabled(false);
        Tab1.add(txtAmendNo);
        txtAmendNo.setBounds(90, 10, 150, 20);

        jLabel6.setText("Amd Date");
        Tab1.add(jLabel6);
        jLabel6.setBounds(280, 10, 80, 20);

        txtAmendDate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtAmendDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtAmendDate.setEnabled(false);
        Tab1.add(txtAmendDate);
        txtAmendDate.setBounds(370, 10, 102, 20);

        lblRevNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(480, 10, 20, 18);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(670, 390, 90, 25);

        jScrollPane4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jScrollPane4KeyReleased(evt);
            }
        });

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(Table);

        Tab1.add(jScrollPane4);
        jScrollPane4.setBounds(10, 110, 960, 270);

        btnEmpMstETE.setLabel("Export to Excel");
        btnEmpMstETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpMstETEActionPerformed(evt);
            }
        });
        Tab1.add(btnEmpMstETE);
        btnEmpMstETE.setBounds(40, 390, 150, 30);

        cmbDept.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Dept", "WEAVING", "YARN STORE", "MENDING", "NEEDLING", "FINISHING", "CARDING", "WAREHOUSE", "ENGINEERING", "RMG", "SECURITY", "STORES", "PEONS" }));
        cmbDept.setEnabled(false);
        cmbDept.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDeptItemStateChanged(evt);
            }
        });
        Tab1.add(cmbDept);
        cmbDept.setBounds(330, 40, 190, 20);

        lblDeptCmb1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDeptCmb1.setText("Department : ");
        Tab1.add(lblDeptCmb1);
        lblDeptCmb1.setBounds(220, 40, 110, 20);

        txtReqDate = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();
        txtReqDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtReqDate.setEnabled(false);
        txtReqDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtReqDateFocusLost(evt);
            }
        });
        Tab1.add(txtReqDate);
        txtReqDate.setBounds(100, 40, 110, 20);

        lblDate.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblDate.setText("Req Date : ");
        Tab1.add(lblDate);
        lblDate.setBounds(20, 40, 80, 20);

        txtEmpNo = new EITLERP.JTextFieldHint(new JTextField(),"Search by F1");
        txtEmpNo.setToolTipText("Press F1 key for search Employee No");
        txtEmpNo.setEnabled(false);
        txtEmpNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmpNoFocusLost(evt);
            }
        });
        txtEmpNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEmpNoKeyPressed(evt);
            }
        });
        Tab1.add(txtEmpNo);
        txtEmpNo.setBounds(170, 80, 120, 20);

        cmdRemove.setText("Remove");
        cmdRemove.setEnabled(false);
        cmdRemove.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        Tab1.add(cmdRemove);
        cmdRemove.setBounds(520, 80, 80, 20);

        jPanel5.setBackground(new java.awt.Color(153, 153, 153));
        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel5);
        jPanel5.setBounds(10, 70, 960, 5);

        lblEmpNo1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblEmpNo1.setText("Amd Employee No : ");
        Tab1.add(lblEmpNo1);
        lblEmpNo1.setBounds(20, 80, 150, 20);

        lblDeptCmb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDeptCmb.setText("Shift : ");
        Tab1.add(lblDeptCmb);
        lblDeptCmb.setBounds(520, 40, 70, 20);

        cmbShift.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Shift", "1", "2", "3", "4", "5", "6" }));
        cmbShift.setEnabled(false);
        cmbShift.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbShiftItemStateChanged(evt);
            }
        });
        Tab1.add(cmbShift);
        cmbShift.setBounds(590, 40, 110, 20);

        Tab.addTab("Details", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 23, 80, 15);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 20, 184, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 62, 80, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 60, 184, 21);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 97, 61, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 95, 630, 19);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 130, 73, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 130, 184, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 249, 80, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 245, 184, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 288, 80, 15);

        txtToRemarks.setEnabled(false);
        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 286, 630, 19);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(500, 350, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(728, 94, 49, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(620, 350, 102, 25);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 760, 150);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 191, 163, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 210, 640, 180);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(662, 390, 110, 25);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(662, 240, 110, 25);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(662, 210, 110, 25);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(662, 270, 110, 25);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 990, 470);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 540, 990, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
//        new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltFinishing.rpt",new HashMap(),ObjRokdiRequestAmend.getReportData(EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
//        EITLERPGLOBAL.PAGE_BREAK=true;
//        HashMap Parameters = new HashMap();
//        Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());
//        
//        new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/FELTFINISHING.rpt",Parameters,ObjRokdiRequestAmend.getReportData(txtProductionDocumentNo.getText().trim(),EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
//        EITLERPGLOBAL.PAGE_BREAK=true;
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
//        try {
//            URL reportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltFinishing.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&PROD_DATE="+EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText()));
//            EITLERPGLOBAL.loginContext.showDocument(reportFile,"_blank");
//        }
//        catch(Exception e) {
//            JOptionPane.showMessageDialog(frmFeltFinishing.this,"File error "+e.getMessage(),"FILE ERROR",JOptionPane.ERROR_MESSAGE);
//            e.printStackTrace();
//        }

//        PreviewReport();
//        HashMap Parameters = new HashMap();
//        Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());
//
//        new TReportWriter.TReportEngine().PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/Production/FELTFINISHING.rpt", Parameters, ObjRokdiRequestAmend.getReportData(txtProductionDocumentNo.getText().trim(), EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
//        EITLERPGLOBAL.PAGE_BREAK = true;
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4).toString());
            bigEdit.ShowEdit();
        } else {
            JOptionPane.showMessageDialog(frmRokdiRequestAmendForm.this, "Select a row from Document Update History");
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjRokdiRequestAmend.HistoryView = false;
        ObjRokdiRequestAmend.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed

    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjRokdiRequestAmend.ShowHistory(EITLERPGLOBAL.formatDateDB(txtAmendDate.getText()), txtAmendNo.getText());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed

    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        txtAmendDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);

        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (SDMLATTPAY.ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID, 842, txtAmendNo.getText())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjRokdiRequestAmend.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        cmbDept.setSelectedIndex(0);
        Cancel();
        if (ObjRokdiRequestAmend.LoadData()) {
            ObjRokdiRequestAmend.MoveLast();
            DisplayData();
        } else {
        }
        SetFields(false);
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(frmRokdiRequestAmendForm.this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed

    private void jScrollPane4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jScrollPane4KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane4KeyReleased

    private void btnEmpMstETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpMstETEActionPerformed
//         TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnEmpMstETEActionPerformed

    private void txtEmpNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmpNoFocusLost
        // TODO add your handling code here:
        if (!txtEmpNo.getText().trim().substring(8).equals("") && data.IsRecordExist("SELECT * FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpNo.getText().trim().substring(8) + "' AND APPROVED=1 AND CANCELED=0")) {
//            txtEmpName.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpNo.getText() + "'"));
        } else {
            if (!txtEmpNo.getText().trim().substring(8).equals("")) {
                JOptionPane.showMessageDialog(null, "Employee No doesn't exist/under approval.");
            }
            txtEmpNo.setText("");
//            txtEmpName.setText("");
        }
    }//GEN-LAST:event_txtEmpNoFocusLost

    private void txtEmpNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpNoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            ATTPAYLOV aList = new ATTPAYLOV();
            aList.SQL = "SELECT CONCAT(DOC_NO,EMP_ID) AS 'KeyID' ,EMP_ID AS 'Emp No',EMP_NAME AS 'Name' ,ROKDI_TYPE AS 'Type' ,DOC_NO AS 'Doc No' ,DOC_DATE AS 'Doc Date' "
                    + "FROM SDMLATTPAY.ROKDI_REQUEST_FORM_DATA "
                    + "WHERE APPROVED=1 AND CANCELED=0 AND COALESCE(ENTRY_FLAG,'') !='DELETE' "
                    + "AND REQ_DATE='" + EITLERPGLOBAL.formatDateDB(txtReqDate.getText().trim()) + "' "
                    + "AND TRIM(REQ_DEPT)='" + cmbDept.getSelectedItem() + "' "
                    + "AND TRIM(REQ_SHIFT)='" + cmbShift.getSelectedItem() + "' "
                    + "ORDER BY EMP_ID";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtEmpNo.setText(aList.ReturnVal);
//                txtEmpName.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpNo.getText() + "'"));
                Object[] rowData = new Object[45];
                rowData[0] = Integer.toString(Table.getRowCount() + 1);
                rowData[1] = txtEmpNo.getText().trim().substring(8);
                rowData[2] = data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpNo.getText().substring(8) + "'");
                rowData[3] = data.getStringValueFromDB("SELECT ROKDI_TYPE FROM SDMLATTPAY.ROKDI_REQUEST_FORM_DATA WHERE EMP_ID='" + txtEmpNo.getText().substring(8) + "' AND DOC_NO='"+txtEmpNo.getText().trim().substring(0, 8)+"' ");
                rowData[4] = txtEmpNo.getText().trim().substring(0, 8);
                rowData[5] = "";
                rowData[6] = "";
                rowData[7] = "";
                rowData[8] = "";
                DataModel.addRow(rowData);
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
                Table.changeSelection(Table.getRowCount() - 1, 1, false, false);
                Table.requestFocus();
            }
        }
    }//GEN-LAST:event_txtEmpNoKeyPressed

    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if (Table.getRowCount() > 0) {
            DataModel.removeRow(Table.getSelectedRow());
            UpdateSrNo();
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed

    private void cmbDeptItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDeptItemStateChanged
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD) {
            txtReqDate.setEnabled(false);
            cmbDept.setEnabled(false);
            cmbShift.setEnabled(true);
        }
    }//GEN-LAST:event_cmbDeptItemStateChanged

    private void txtReqDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtReqDateFocusLost
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD) {
            txtReqDate.setEnabled(false);
            cmbDept.setEnabled(true);
            cmbShift.setEnabled(false);
        }
    }//GEN-LAST:event_txtReqDateFocusLost

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            if (evt.getKeyCode() == 112 && Table.getSelectedColumn() == 5) //F1 Key pressed
            {
                ATTPAYLOV aList = new ATTPAYLOV();
                aList.SQL = "SELECT PAY_EMP_NO AS 'Emp No',EMP_NAME AS 'Name',DPTNAME AS 'Dept Name',ERP_DEPT AS 'Dept Listed' FROM "
                        + "(SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST WHERE APPROVED=1 AND CANCELED=0 "
                        + "AND (PAY_EMP_NO LIKE ('BRD30%') OR PAY_EMP_NO LIKE ('BRD40%') OR PAY_EMP_NO LIKE ('BRD00%'))  ) AS EMP "
                        + "LEFT JOIN ( SELECT DPTID,NAME AS DPTNAME,ERP_DEPT FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) AS DPT ON DPT.DPTID=EMP.EMP_DEPARTMENT "
                        + "WHERE EMP_DEPARTMENT IN (SELECT CONVERT(DPTID,CHAR (8)) AS DPTID FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER "
                        + "WHERE TRIM(ERP_DEPT)='" + cmbDept.getSelectedItem() + "' GROUP BY ERP_DEPT) "
                        + "ORDER BY PAY_EMP_NO";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;
                //aList.DefaultSearchOn=1;

                if (aList.ShowLOV()) {
                    Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), 5);
                    String empName = data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + aList.ReturnVal + "'");
                    Table.setValueAt(empName, Table.getSelectedRow(), 6);
                    final TableColumnModel columnModel = Table.getColumnModel();
                    for (int column = 0; column < Table.getColumnCount(); column++) {
                        int width = 60; // Min width
                        for (int row = 0; row < Table.getRowCount(); row++) {
                            TableCellRenderer renderer = Table.getCellRenderer(row, column);
                            Component comp = Table.prepareRenderer(renderer, row, column);
                            width = Math.max(comp.getPreferredSize().width + 10, width);
                        }
                        if (width > 300) {
                            width = 300;
                        }
                        columnModel.getColumn(column).setPreferredWidth(width);
                    }
                    Table.changeSelection(Table.getRowCount() - 1, 1, false, false);
                    Table.requestFocus();
                }
            }
            
            if (evt.getKeyCode() == 112 && Table.getSelectedColumn() == 7) //F1 Key pressed
            {
                LOV aList = new LOV();
                aList.SQL = "SELECT ROKDI_TYPE,ROKDI_DESC FROM (SELECT 'R' AS ROKDI_TYPE,'Replacement' AS ROKDI_DESC FROM DUAL UNION ALL SELECT 'E' AS ROKDI_TYPE,'Extra' AS ROKDI_DESC FROM DUAL) AS SUB";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 1;

                if (aList.ShowLOV()) {
                    Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), 7);
                }
            }
        }
    }//GEN-LAST:event_TableKeyPressed

    private void cmbShiftItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbShiftItemStateChanged
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD) {
            txtReqDate.setEnabled(false);
            cmbDept.setEnabled(false);
            cmbShift.setEnabled(false);
        }
        if (EditMode == EITLERPGLOBAL.ADD
                && !cmbShift.getSelectedItem().equals("Select Shift")
                && !cmbDept.getSelectedItem().equals("Select Dept")
                && !txtReqDate.getText().trim().equals("")) {
            txtEmpNo.setEnabled(true);
            cmdRemove.setEnabled(true);
        }
    }//GEN-LAST:event_cmbShiftItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton btnEmpMstETE;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbDept;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbShift;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDeptCmb;
    private javax.swing.JLabel lblDeptCmb1;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblEmpNo1;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAmendDate;
    private javax.swing.JTextField txtAmendNo;
    private javax.swing.JTextField txtEmpNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtReqDate;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables

    private void GenerateDeptCombo() {

        HashMap List = new HashMap();
        clsMaster ObjDept;

        cmbDept.setModel(modelDept);
        modelDept.removeAllElements();  //Clearing previous contents

        ComboData aData = new ComboData();
        aData.Text = "Select Dept";
        aData.Code = 0;
        modelDept.addElement(aData);

        List = clsMaster.getDepartmentList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjDept = (clsMaster) List.get(Integer.toString(i));
//            ComboData 
            aData = new ComboData();
            aData.Text = (String) ObjDept.getAttribute("Name").getObj();
            aData.Code = (long) ObjDept.getAttribute("DPTID").getVal();
            modelDept.addElement(aData);
        }
    }

    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }

    private void SetFields(boolean pStat) {

        txtAmendNo.setEnabled(false);
        txtAmendDate.setEnabled(false);

        txtReqDate.setEnabled(pStat);
        cmbDept.setEnabled(pStat);
        cmbShift.setEnabled(pStat);

        txtEmpNo.setEnabled(false);
        cmdRemove.setEnabled(pStat);

        Table.setEnabled(pStat);

        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);

        SetupApproval();
    }

    private void ClearFields() {
        txtAmendDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtAmendNo.setText("");

        txtReqDate.setText("");
        cmbDept.setSelectedIndex(0);
        cmbShift.setSelectedIndex(0);

        txtEmpNo.setText("");

        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }

    //Display data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, 842)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        //=========== Title Bar Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjRokdiRequestAmend.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                } else {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (ObjRokdiRequestAmend.getAttribute("CANCELED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
            //============================================//

            String amdDocDate = EITLERPGLOBAL.formatDate(ObjRokdiRequestAmend.getAttribute("AMEND_DOC_DATE").getString());
            String amdDocNo = ObjRokdiRequestAmend.getAttribute("AMEND_DOC_NO").getString();
            String amdReqDate = EITLERPGLOBAL.formatDate(ObjRokdiRequestAmend.getAttribute("AMEND_REQ_DATE").getString());
            String amdReqDept = ObjRokdiRequestAmend.getAttribute("AMEND_REQ_DEPT").getString();
            String amdReqShift = ObjRokdiRequestAmend.getAttribute("AMEND_REQ_SHIFT").getString();

            lblTitle.setText("Rokdi Request Amendment Form - " + amdDocNo);
            lblRevNo.setText(Integer.toString((int) ObjRokdiRequestAmend.getAttribute("REVISION_NO").getVal()));

            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) ObjRokdiRequestAmend.getAttribute("HIERARCHY_ID").getVal());
            DoNotEvaluate = true;

            //GenerateHierarchyCombo();
            txtAmendDate.setText(amdDocDate);
            txtAmendNo.setText(amdDocNo);
            txtReqDate.setText(amdReqDate);
//            EITLERPGLOBAL.setComboIndex(cmbDept, Integer.parseInt(attDept));
            cmbDept.setSelectedItem(amdReqDept);
            cmbShift.setSelectedItem(amdReqShift);

            FormatGrid();

            //Now Generate Table
            for (int i = 1; i <= ObjRokdiRequestAmend.hmRokdiRequestAmendDetails.size(); i++) {
                clsRokdiRequestAmendFormDetails ObjRokdiRequestAmendDetails = (clsRokdiRequestAmendFormDetails) ObjRokdiRequestAmend.hmRokdiRequestAmendDetails.get(Integer.toString(i));

                Object[] rowData = new Object[50];

                rowData[0] = ObjRokdiRequestAmendDetails.getAttribute("SR_NO").getString();
                rowData[1] = ObjRokdiRequestAmendDetails.getAttribute("AMEND_EMP_ID").getString();
                rowData[2] = ObjRokdiRequestAmendDetails.getAttribute("AMEND_EMP_NAME").getString();
                rowData[3] = ObjRokdiRequestAmendDetails.getAttribute("REQ_ROKDI_TYPE").getString();
                rowData[4] = ObjRokdiRequestAmendDetails.getAttribute("REQ_DOC_NO").getString();
                rowData[5] = ObjRokdiRequestAmendDetails.getAttribute("REPLACE_EMP_ID").getString();
                rowData[6] = ObjRokdiRequestAmendDetails.getAttribute("REPLACE_EMP_NAME").getString();
                rowData[7] = ObjRokdiRequestAmendDetails.getAttribute("REPLACE_ROKDI_TYPE").getString();
                rowData[8] = ObjRokdiRequestAmendDetails.getAttribute("REPLACE_REMARK").getString();

                DataModel.addRow(rowData);
            }
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 60; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 10, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList = new HashMap();

            hmList = SDMLATTPAY.ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, 842, amdDocNo);
            for (int i = 1; i <= hmList.size(); i++) {
                //clsDocFlow is collection class used for holding approval flow data
                clsDocFlow ObjFlow = (clsDocFlow) hmList.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3] = ObjFlow.getAttribute("STATUS").getString();
                rowData[4] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString());
                rowData[5] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString());
                rowData[6] = ObjFlow.getAttribute("REMARKS").getString();

                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//

            // Generating Grid for Showing Production Details Update History
            FormatGridUpdateHistory();
            HashMap hmApprovalHistory = clsRokdiRequestAmendForm.getHistoryList(txtAmendNo.getText());
            for (int i = 1; i <= hmApprovalHistory.size(); i++) {
                clsRokdiRequestAmendForm ObjRokdiRequestAmend = (clsRokdiRequestAmendForm) hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjRokdiRequestAmend.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(2, (int) ObjRokdiRequestAmend.getAttribute("UPDATED_BY").getVal());
                rowData[2] = ObjRokdiRequestAmend.getAttribute("ENTRY_DATE").getString();

                String ApprovalStatus = "";

                if ((ObjRokdiRequestAmend.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                if ((ObjRokdiRequestAmend.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjRokdiRequestAmend.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                    FinalApprovedBy = (int) ObjRokdiRequestAmend.getAttribute("UPDATED_BY").getVal();
                }

                if ((ObjRokdiRequestAmend.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjRokdiRequestAmend.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjRokdiRequestAmend.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjRokdiRequestAmend.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjRokdiRequestAmend.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjRokdiRequestAmend.getAttribute("FROM_IP").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DoNotEvaluate = false;
    }

    private void FormatGrid() {
        try {
            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            Table.setAutoResizeMode(0);

            DataModel.addColumn("Sr.");
            DataModel.addColumn("Emp ID");
            DataModel.addColumn("Emp Name");
            DataModel.addColumn("Type");
            DataModel.addColumn("Doc No");
            DataModel.addColumn("Replace Emp ID");
            DataModel.addColumn("Replace Emp Name");
            DataModel.addColumn("Replace Type");
            DataModel.addColumn("Replace Remark");

            DataModel.SetVariable(0, "SR_NO");
            DataModel.SetVariable(1, "AMEND_EMP_ID");
            DataModel.SetVariable(2, "AMEND_EMP_NAME");
            DataModel.SetVariable(3, "REQ_ROKDI_TYPE");
            DataModel.SetVariable(4, "REQ_DOC_NO");
            DataModel.SetVariable(5, "REPLACE_EMP_ID");
            DataModel.SetVariable(6, "REPLACE_EMP_NAME");
            DataModel.SetVariable(7, "REPLACE_ROKDI_TYPE");
            DataModel.SetVariable(8, "REPLACE_REMARK");

            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(1);
            DataModel.SetReadOnly(2);
            DataModel.SetReadOnly(3);
            DataModel.SetReadOnly(4);
            DataModel.SetReadOnly(5);
            DataModel.SetReadOnly(6);
            DataModel.SetReadOnly(7);

            Table.getColumnModel().getColumn(0).setMinWidth(50);
            Table.getColumnModel().getColumn(0).setMaxWidth(50);
            Table.getColumnModel().getColumn(1).setMinWidth(80);
//            Table.getColumnModel().getColumn(1).setMaxWidth(80);
            Table.getColumnModel().getColumn(2).setMinWidth(120);
//            Table.getColumnModel().getColumn(2).setMaxWidth(120);
            Table.getColumnModel().getColumn(3).setMinWidth(80);
//            Table.getColumnModel().getColumn(3).setMaxWidth(80);
            Table.getColumnModel().getColumn(4).setMinWidth(80);
//            Table.getColumnModel().getColumn(4).setMaxWidth(80);
            Table.getColumnModel().getColumn(5).setMinWidth(80);
//            Table.getColumnModel().getColumn(5).setMaxWidth(80);
            Table.getColumnModel().getColumn(6).setMinWidth(120);
//            Table.getColumnModel().getColumn(6).setMaxWidth(120);
            Table.getColumnModel().getColumn(7).setMinWidth(80);
//            Table.getColumnModel().getColumn(7).setMaxWidth(80);
            Table.getColumnModel().getColumn(8).setMinWidth(120);
//            Table.getColumnModel().getColumn(8).setMaxWidth(120);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=842 ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=842 ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = SDMLATTPAY.ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, 842, ObjRokdiRequestAmend.getAttribute("DOC_NO").getString());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, 842, txtAmendNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = SDMLATTPAY.ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, 842, txtAmendNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }

        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = SDMLATTPAY.ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, 842, txtAmendNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }

    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
         if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
         cmbHierarchy.setEnabled(true);
         }else {
         cmbHierarchy.setEnabled(false);
         }*/

        // select hold for default approval
        OpgHold.setSelected(true);
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            int FromUserID = SDMLATTPAY.ApprovalFlow.getFromID(EITLERPGLOBAL.gCompanyID, 842, ObjRokdiRequestAmend.getAttribute("AMEND_DOC_NO").getString());
            lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = SDMLATTPAY.ApprovalFlow.getFromRemarks(EITLERPGLOBAL.gCompanyID, 842, FromUserID, ObjRokdiRequestAmend.getAttribute("AMEND_DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (SDMLATTPAY.ApprovalFlow.IsCreator(842, txtAmendNo.getText())) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10085, 100851)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10085, 100852)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10085, 100853)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10085, 100855)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = 842;
        aList.FirstFreeNo = 352;

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        FormatGrid();

        SelPrefix = aList.Prefix; //Selected Prefix;
        SelSuffix = aList.Suffix;
        FFNo = aList.FirstFreeNo;

        SetupApproval();
        //Display newly generated document no.
        txtAmendNo.setText(clsRokdiRequestAmendForm.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 842, FFNo, false));
        txtAmendDate.setText(EITLERPGLOBAL.getCurrentDate());

        lblTitle.setText("Rokdi Request Amendment Form - " + txtAmendNo.getText());
        lblTitle.setBackground(Color.GRAY);

        txtReqDate.setEnabled(true);
        cmbDept.setEnabled(false);
        cmbShift.setEnabled(false);
    }

    private void Edit() {
        String productionDocumentNo = (String) ObjRokdiRequestAmend.getAttribute("AMEND_DOC_NO").getObj();
        if (ObjRokdiRequestAmend.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();

            if (SDMLATTPAY.ApprovalFlow.IsCreator(842, productionDocumentNo)) {
                SetFields(true);
            } else {
                EnableApproval();
            }
            txtReqDate.setEnabled(false);
            cmbDept.setEnabled(false);
            cmbShift.setEnabled(false);
            Table.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(frmRokdiRequestAmendForm.this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "EDITING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {
        if (ObjRokdiRequestAmend.CanDelete(txtAmendNo.getText(), txtAmendDate.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmRokdiRequestAmendForm.this, ObjRokdiRequestAmend.LastError, "DELETION ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Save() {
        String amdDocNo, amdDocDate, amdReqDate, amdReqDept, amdReqShift;
        int i = 0, j = 0;
        amdDocDate = txtAmendDate.getText().trim();
        amdDocNo = txtAmendNo.getText().trim();
        amdReqDate = txtReqDate.getText().trim();
        amdReqDept = cmbDept.getSelectedItem().toString();
        amdReqShift = cmbShift.getSelectedItem().toString();

        if (txtReqDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(frmRokdiRequestAmendForm.this, "Select the Requested Date.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (cmbDept.getSelectedItem().equals("Select Dept")) {
            JOptionPane.showMessageDialog(frmRokdiRequestAmendForm.this, "Select the Department.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (cmbShift.getSelectedItem().equals("Select Shift")) {
            JOptionPane.showMessageDialog(frmRokdiRequestAmendForm.this, "Select the Shift.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Check the no. of items in table
        if (Table.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(frmRokdiRequestAmendForm.this, "Enter Details Before Saving.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // check duplicate piece no in table
            for (int k = 0; k <= Table.getRowCount() - 1; k++) {
                for (int l = k; l <= Table.getRowCount() - 1; l++) {
                    if (l != k && ((String) Table.getValueAt(k, 1)).trim().equals(((String) Table.getValueAt(l, 1)).trim())) {
                        JOptionPane.showMessageDialog(this, "Same Emp ID at Row " + (k + 1) + " and " + (l + 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }

            // check Replace EmpID row in table
            for (int k = 0; k <= Table.getRowCount() - 1; k++) {
                if (((String) Table.getValueAt(k, 5)).trim().equals("")) {
                    JOptionPane.showMessageDialog(this, "Please Select Replace Emp ID at Row " + (k + 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            
            // check Replace Type row in table
            for (int k = 0; k <= Table.getRowCount() - 1; k++) {
                if (((String) Table.getValueAt(k, 7)).trim().equals("")) {
                    JOptionPane.showMessageDialog(this, "Please Select Replace Type at Row " + (k + 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            ObjRokdiRequestAmend.hmRokdiRequestAmendDetails.clear();
            //Check the entered details in Table.
            for (i = 0; i <= Table.getRowCount() - 1; i++) {

                clsRokdiRequestAmendFormDetails ObjRokdiRequestAmendDetails = new clsRokdiRequestAmendFormDetails();

                ObjRokdiRequestAmendDetails.setAttribute("SR_NO", DataModel.getValueByVariable("SR_NO", i));
                ObjRokdiRequestAmendDetails.setAttribute("AMEND_EMP_ID", DataModel.getValueByVariable("AMEND_EMP_ID", i));
                ObjRokdiRequestAmendDetails.setAttribute("AMEND_EMP_NAME", DataModel.getValueByVariable("AMEND_EMP_NAME", i));
                ObjRokdiRequestAmendDetails.setAttribute("REQ_ROKDI_TYPE", DataModel.getValueByVariable("REQ_ROKDI_TYPE", i));
                ObjRokdiRequestAmendDetails.setAttribute("REQ_DOC_NO", DataModel.getValueByVariable("REQ_DOC_NO", i));
                ObjRokdiRequestAmendDetails.setAttribute("REPLACE_EMP_ID", DataModel.getValueByVariable("REPLACE_EMP_ID", i));
                ObjRokdiRequestAmendDetails.setAttribute("REPLACE_EMP_NAME", DataModel.getValueByVariable("REPLACE_EMP_NAME", i));
                ObjRokdiRequestAmendDetails.setAttribute("REPLACE_ROKDI_TYPE", DataModel.getValueByVariable("REPLACE_ROKDI_TYPE", i));
                ObjRokdiRequestAmendDetails.setAttribute("REPLACE_REMARK", DataModel.getValueByVariable("REPLACE_REMARK", i));

                ObjRokdiRequestAmend.hmRokdiRequestAmendDetails.put(Integer.toString(ObjRokdiRequestAmend.hmRokdiRequestAmendDetails.size() + 1), ObjRokdiRequestAmendDetails);
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(frmRokdiRequestAmendForm.this, "Enter Correct Details at Row " + (i + 1) + " and Column " + (j + 1) + ". Error is " + nfe.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            j = 0;
            nfe.printStackTrace();
            return;
        }

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(frmRokdiRequestAmendForm.this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(frmRokdiRequestAmendForm.this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(frmRokdiRequestAmendForm.this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(frmRokdiRequestAmendForm.this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //set data for insert/update
        ObjRokdiRequestAmend.setAttribute("AMEND_DOC_DATE", amdDocDate);
        ObjRokdiRequestAmend.setAttribute("AMEND_DOC_NO", amdDocNo);
        ObjRokdiRequestAmend.setAttribute("AMEND_REQ_DATE", amdReqDate);
        ObjRokdiRequestAmend.setAttribute("AMEND_REQ_DEPT", amdReqDept);
        ObjRokdiRequestAmend.setAttribute("AMEND_REQ_SHIFT", amdReqShift);
        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjRokdiRequestAmend.Insert()) {
                if (OpgFinal.isSelected()) {
                    String sql = "UPDATE SDMLATTPAY.ROKDI_REQUEST_FORM_DATA RR, SDMLATTPAY.ROKDI_REQUEST_AMEND_FORM_DATA RA "
                            + "SET RR.ENTRY_FLAG='DELETE', RR.AMEND_DOC_NO=RA.AMEND_DOC_NO, RR.AMEND_DOC_DATE=RA.AMEND_DOC_DATE "
                            + "WHERE RA.AMEND_DOC_NO='" + txtAmendNo.getText().trim() + "' "
                            + "AND RR.REQ_DATE=RA.AMEND_REQ_DATE AND RR.REQ_DEPT=RA.AMEND_REQ_DEPT AND RR.REQ_SHIFT=RA.AMEND_REQ_SHIFT "
                            + "AND RR.DOC_NO=RA.REQ_DOC_NO AND RR.EMP_ID=RA.AMEND_EMP_ID AND COALESCE(RR.ENTRY_FLAG,'') != 'DELETE' ";
                    data.Execute(sql);

                    sql = "INSERT INTO SDMLATTPAY.ROKDI_REQUEST_FORM_DATA (DOC_NO, DOC_DATE, REQ_DATE, REQ_DEPT, SR_NO, EMP_ID, "
                            + "EMP_NAME, EMP_DEPT, EMP_MAIN_CATEGORY, EMP_SUB_CATEGORY, REQ_SHIFT, ROKDI_TYPE, EMP_REMARK, ENTRY_FLAG, "
                            + "AMEND_DOC_NO, AMEND_DOC_DATE, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, APPROVED, APPROVED_DATE, "
                            + "REJECTED, REJECTED_DATE, CANCELED, HIERARCHY_ID, CHANGED, CHANGED_DATE) "
                            + "SELECT RR.DOC_NO, RA.AMEND_DOC_DATE, RA.AMEND_REQ_DATE, RA.AMEND_REQ_DEPT, RR.SR_NO, RA.REPLACE_EMP_ID, "
                            + "RA.REPLACE_EMP_NAME, '', '', '', RA.AMEND_REQ_SHIFT, RA.REPLACE_ROKDI_TYPE, RA.REPLACE_REMARK, 'ADD', "
                            + "RA.AMEND_DOC_NO, RA.AMEND_DOC_DATE, RA.CREATED_BY, RA.CREATED_DATE, RA.MODIFIED_BY, RA.MODIFIED_DATE, RA.APPROVED, "
                            + "RA.APPROVED_DATE, RA.REJECTED, RA.REJECTED_DATE, RA.CANCELED, RA.HIERARCHY_ID, RA.CHANGED, RA.CHANGED_DATE "
                            + "FROM SDMLATTPAY.ROKDI_REQUEST_FORM_DATA RR, SDMLATTPAY.ROKDI_REQUEST_AMEND_FORM_DATA RA "
                            + "WHERE RA.AMEND_DOC_NO='" + txtAmendNo.getText().trim() + "' "
                            + "AND RR.REQ_DATE=RA.AMEND_REQ_DATE AND RR.REQ_DEPT=RA.AMEND_REQ_DEPT AND RR.REQ_SHIFT=RA.AMEND_REQ_SHIFT "
                            + "AND RR.DOC_NO=RA.REQ_DOC_NO AND RR.EMP_ID=RA.AMEND_EMP_ID AND COALESCE(RR.ENTRY_FLAG,'') = 'DELETE' ";
                    System.out.println("SQL : "+sql);
                    data.Execute(sql);

                    sql = "UPDATE SDMLATTPAY.ATT_DEPARTMENT_MASTER D,SDMLATTPAY.ATTPAY_EMPMST E,SDMLATTPAY.ROKDI_REQUEST_FORM_DATA R "
                            + "SET R.EMP_DEPT=D.NAME "
                            + "WHERE D.DPTID=E.EMP_DEPARTMENT AND E.PAY_EMP_NO=R.EMP_ID AND COALESCE(R.EMP_DEPT,'')='' ";
                    data.Execute(sql);

                    sql = "UPDATE SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER M,SDMLATTPAY.ATTPAY_EMPMST E,SDMLATTPAY.ROKDI_REQUEST_FORM_DATA R "
                            + "SET R.EMP_MAIN_CATEGORY=M.NAME "
                            + "WHERE M.SECID=E.EMP_MAIN_CATEGORY AND E.PAY_EMP_NO=R.EMP_ID AND COALESCE(R.EMP_MAIN_CATEGORY,'')='' ";
                    data.Execute(sql);

                    sql = "UPDATE SDMLATTPAY.ATT_CATEGORY_MASTER C,SDMLATTPAY.ATTPAY_EMPMST E,SDMLATTPAY.ROKDI_REQUEST_FORM_DATA R "
                            + "SET R.EMP_SUB_CATEGORY=C.NAME "
                            + "WHERE C.CTGID=E.EMP_CATEGORY AND E.PAY_EMP_NO=R.EMP_ID AND COALESCE(R.EMP_SUB_CATEGORY,'')='' ";
                    data.Execute(sql);
                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(frmRokdiRequestAmendForm.this, "Error occured while saving. Error is " + ObjRokdiRequestAmend.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjRokdiRequestAmend.Update()) {
                if (OpgFinal.isSelected()) {
                    String sql = "UPDATE SDMLATTPAY.ROKDI_REQUEST_FORM_DATA RR, SDMLATTPAY.ROKDI_REQUEST_AMEND_FORM_DATA RA "
                            + "SET RR.ENTRY_FLAG='DELETE', RR.AMEND_DOC_NO=RA.AMEND_DOC_NO, RR.AMEND_DOC_DATE=RA.AMEND_DOC_DATE "
                            + "WHERE RA.AMEND_DOC_NO='" + txtAmendNo.getText().trim() + "' "
                            + "AND RR.REQ_DATE=RA.AMEND_REQ_DATE AND RR.REQ_DEPT=RA.AMEND_REQ_DEPT AND RR.REQ_SHIFT=RA.AMEND_REQ_SHIFT "
                            + "AND RR.DOC_NO=RA.REQ_DOC_NO AND RR.EMP_ID=RA.AMEND_EMP_ID AND COALESCE(RR.ENTRY_FLAG,'') != 'DELETE' ";
                    data.Execute(sql);

                    sql = "INSERT INTO SDMLATTPAY.ROKDI_REQUEST_FORM_DATA (DOC_NO, DOC_DATE, REQ_DATE, REQ_DEPT, SR_NO, EMP_ID, "
                            + "EMP_NAME, EMP_DEPT, EMP_MAIN_CATEGORY, EMP_SUB_CATEGORY, REQ_SHIFT, ROKDI_TYPE, EMP_REMARK, ENTRY_FLAG, "
                            + "AMEND_DOC_NO, AMEND_DOC_DATE, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, APPROVED, APPROVED_DATE, "
                            + "REJECTED, REJECTED_DATE, CANCELED, HIERARCHY_ID, CHANGED, CHANGED_DATE) "
                            + "SELECT RR.DOC_NO, RA.AMEND_DOC_DATE, RA.AMEND_REQ_DATE, RA.AMEND_REQ_DEPT, RR.SR_NO, RA.REPLACE_EMP_ID, "
                            + "RA.REPLACE_EMP_NAME, '', '', '', RA.AMEND_REQ_SHIFT, RA.REPLACE_ROKDI_TYPE, RA.REPLACE_REMARK, 'ADD', "
                            + "RA.AMEND_DOC_NO, RA.AMEND_DOC_DATE, RA.CREATED_BY, RA.CREATED_DATE, RA.MODIFIED_BY, RA.MODIFIED_DATE, RA.APPROVED, "
                            + "RA.APPROVED_DATE, RA.REJECTED, RA.REJECTED_DATE, RA.CANCELED, RA.HIERARCHY_ID, RA.CHANGED, RA.CHANGED_DATE "
                            + "FROM SDMLATTPAY.ROKDI_REQUEST_FORM_DATA RR, SDMLATTPAY.ROKDI_REQUEST_AMEND_FORM_DATA RA "
                            + "WHERE RA.AMEND_DOC_NO='" + txtAmendNo.getText().trim() + "' "
                            + "AND RR.REQ_DATE=RA.AMEND_REQ_DATE AND RR.REQ_DEPT=RA.AMEND_REQ_DEPT AND RR.REQ_SHIFT=RA.AMEND_REQ_SHIFT "
                            + "AND RR.DOC_NO=RA.REQ_DOC_NO AND RR.EMP_ID=RA.AMEND_EMP_ID AND COALESCE(RR.ENTRY_FLAG,'') = 'DELETE' ";
                    data.Execute(sql);

                    sql = "UPDATE SDMLATTPAY.ATT_DEPARTMENT_MASTER D,SDMLATTPAY.ATTPAY_EMPMST E,SDMLATTPAY.ROKDI_REQUEST_FORM_DATA R "
                            + "SET R.EMP_DEPT=D.NAME "
                            + "WHERE D.DPTID=E.EMP_DEPARTMENT AND E.PAY_EMP_NO=R.EMP_ID AND COALESCE(R.EMP_DEPT,'')='' ";
                    data.Execute(sql);

                    sql = "UPDATE SDMLATTPAY.ATT_MAIN_CATEGORY_MASTER M,SDMLATTPAY.ATTPAY_EMPMST E,SDMLATTPAY.ROKDI_REQUEST_FORM_DATA R "
                            + "SET R.EMP_MAIN_CATEGORY=M.NAME "
                            + "WHERE M.SECID=E.EMP_MAIN_CATEGORY AND E.PAY_EMP_NO=R.EMP_ID AND COALESCE(R.EMP_MAIN_CATEGORY,'')='' ";
                    data.Execute(sql);

                    sql = "UPDATE SDMLATTPAY.ATT_CATEGORY_MASTER C,SDMLATTPAY.ATTPAY_EMPMST E,SDMLATTPAY.ROKDI_REQUEST_FORM_DATA R "
                            + "SET R.EMP_SUB_CATEGORY=C.NAME "
                            + "WHERE C.CTGID=E.EMP_CATEGORY AND E.PAY_EMP_NO=R.EMP_ID AND COALESCE(R.EMP_SUB_CATEGORY,'')='' ";
                    data.Execute(sql);
                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(frmRokdiRequestAmendForm.this, "Error occured while saving editing. Error is " + ObjRokdiRequestAmend.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Sets data to the Details Class Object
    private void SetData() {
        //-------- Update Approval Specific Fields -----------//
        ObjRokdiRequestAmend.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjRokdiRequestAmend.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjRokdiRequestAmend.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjRokdiRequestAmend.setAttribute("FROM_REMARKS", txtToRemarks.getText().trim());
        ObjRokdiRequestAmend.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);

        //ObjRokdiRequestAmend.setAttribute("UPDATED_BY",EITLERPGLOBAL.gNewUserID);
        if (OpgApprove.isSelected()) {
            ObjRokdiRequestAmend.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjRokdiRequestAmend.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjRokdiRequestAmend.setAttribute("APPROVAL_STATUS", "R");
            ObjRokdiRequestAmend.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            ObjRokdiRequestAmend.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjRokdiRequestAmend.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            ObjRokdiRequestAmend.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        } else {
            //ObjRokdiRequestAmend.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            //ObjRokdiRequestAmend.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
            ObjRokdiRequestAmend.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            ObjRokdiRequestAmend.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        }
    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "SDMLATTPAY.RokdiRequestAmend.frmFindRokdiRequestAmendForm", true);
        frmFindRokdiRequestAmendForm ObjFindRokdiRequestAmend = (frmFindRokdiRequestAmendForm) ObjLoader.getObj();

        if (ObjFindRokdiRequestAmend.Cancelled == false) {
            if (!ObjRokdiRequestAmend.Filter(ObjFindRokdiRequestAmend.stringFindQuery)) {
                JOptionPane.showMessageDialog(frmRokdiRequestAmendForm.this, " No records found.", "Find Rokdi Request Amendment Details", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    // find details by production date
    public void Find(String docNo) {
        ObjRokdiRequestAmend.Filter(" AND AMEND_DOC_NO='" + docNo + "' ");
        SetMenuForRights();
        DisplayData();
    }

    // find all pending document
    public void FindWaiting() {
        ObjRokdiRequestAmend.Filter(" AND AMEND_DOC_NO IN (SELECT DISTINCT MA.AMEND_DOC_NO FROM SDMLATTPAY.ROKDI_REQUEST_AMEND_FORM_DATA MA, SDMLATTPAY.D_COM_DOC_DATA D WHERE MA.AMEND_DOC_NO=D.DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=842 AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void MoveFirst() {
        ObjRokdiRequestAmend.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        ObjRokdiRequestAmend.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        ObjRokdiRequestAmend.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        ObjRokdiRequestAmend.MoveLast();
        DisplayData();
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(" " + pMessage);
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Tab1.getComponentCount() - 1; i++) {
            if (Tab1.getComponent(i).getName() != null) {

                FieldName = Tab1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    Tab1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//

        //=============== Setting Table Fields ==================//
//        DataModel.ClearAllReadOnly();
//        Table.setEnabled(false);
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From Ip");
    }

    private void UpdateSrNo() {
        int SrCol = DataModel.getColFromVariable("SR_NO");

        for (int i = 0; i < Table.getRowCount(); i++) {
            Table.setValueAt(Integer.toString(i + 1), i, SrCol);
        }
    }

}
