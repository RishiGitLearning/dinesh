/*
 * frmOBCReturn.java
 *
 * Created on August 7, 2011, 3:10 PM
 */
package EITLERP.Finance;

/**
 *
 * @author bhavesh
 */
/*<APPLET CODE=frmOBCReturn.class HEIGHT=500 WIDTH=665></APPLET>*/
import javax.swing.*;
import java.awt.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import javax.swing.text.*;
import EITLERP.Utils.*;
import java.sql.*;
import java.net.*;
import EITLERP.*;
import EITLERP.Sales.*;

public class frmOBCReturn extends javax.swing.JApplet {

    private int EditMode = 0;
    private clsOBCReturn objOBC;

    private boolean Updating = false;
    private boolean DoNotEvaluate = false;

    private String theDocNo = "";

    private EITLTableModel DataModelA = new EITLTableModel();
    private EITLTableModel DataModelHS = new EITLTableModel();
    private EITLTableModel DataModel = new EITLTableModel();

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    String cellLastValue = "";

    private int SelHierarchyID = 0;
    private int lnFromID = 0;

    private boolean IsGenerating = false;

    public frmPendingApprovals frmPA;

    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;

    /**
     * Creates new form frmTemplate
     */
    public frmOBCReturn() {

    }

    public void init() {
        setSize(669, 550);
        initComponents();

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        GenerateCombos();

        objOBC = new clsOBCReturn();

        SetMenuForRights();

        if (getName().equals("Link")) {

        } else {

            if (objOBC.LoadData(EITLERPGLOBAL.gCompanyID)) {
                objOBC.MoveLast();
                DisplayData();
                SetMenuForRights();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while loading data. Error is " + objOBC.LastError);
            }

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        MainPanel = new javax.swing.JTabbedPane();
        Header = new javax.swing.JPanel();
        txtMainCode = new javax.swing.JTextField();
        lblSubCode = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTextArea3 = new javax.swing.JTextArea();
        lblAccountCode2 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        lblAccountCode3 = new javax.swing.JLabel();
        lblAccountID = new javax.swing.JLabel();
        txtOBCDocNo = new javax.swing.JTextField();
        txtPartyName = new javax.swing.JTextField();
        lblAccountName1 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        lblAccountID1 = new javax.swing.JLabel();
        txtOBCDocDate = new javax.swing.JTextField();
        lblSubCode3 = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        lblAccountID2 = new javax.swing.JLabel();
        txtBankRefNo = new javax.swing.JTextField();
        lblAccountID3 = new javax.swing.JLabel();
        txtBankRefDate = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        cmdShowInvoice = new javax.swing.JButton();
        lblAccountID4 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        lblAccountID5 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        lblAccountID6 = new javax.swing.JLabel();
        txtReasonCode = new javax.swing.JTextField();
        txtReasonDesc = new javax.swing.JTextField();
        cmdNext1 = new javax.swing.JButton();
        cmdShowOBCInvoice = new javax.swing.JButton();
        Approval = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack2 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNext2 = new javax.swing.JButton();
        Status = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        cmdBack3 = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText("OBC Return Entry");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 666, 25);

        Header.setLayout(null);

        Header.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Header.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HeaderMouseClicked(evt);
            }
        });

        txtMainCode.setName("PARTY_CODE");
        txtMainCode.setNextFocusableComponent(txtPartyCode);
        txtMainCode.setEnabled(false);
        Header.add(txtMainCode);
        txtMainCode.setBounds(115, 160, 120, 20);

        lblSubCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode.setText("Main Code :");
        Header.add(lblSubCode);
        lblSubCode.setBounds(10, 160, 100, 20);

        jPanel2.setLayout(null);

        jPanel2.add(jTextArea3);
        jTextArea3.setBounds(177, 29, 0, 15);

        lblAccountCode2.setText("Account Code");
        jPanel2.add(lblAccountCode2);
        lblAccountCode2.setBounds(15, 20, 90, 15);

        jPanel2.add(jTextField3);
        jTextField3.setBounds(119, 18, 80, 19);

        jPanel2.add(jTextField4);
        jTextField4.setBounds(119, 49, 80, 19);

        lblAccountCode3.setText("Account Code");
        jPanel2.add(lblAccountCode3);
        lblAccountCode3.setBounds(15, 51, 90, 15);

        Header.add(jPanel2);
        jPanel2.setBounds(0, 0, 0, 0);

        lblAccountID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountID.setText("OBC Doc No :");
        Header.add(lblAccountID);
        lblAccountID.setBounds(10, 60, 100, 20);

        txtOBCDocNo.setName("PARTY_ID");
        txtOBCDocNo.setNextFocusableComponent(txtRemarks);
        txtOBCDocNo.setEnabled(false);
        txtOBCDocNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtOBCDocNoFocusLost(evt);
            }
        });
        txtOBCDocNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtOBCDocNoKeyPressed(evt);
            }
        });

        Header.add(txtOBCDocNo);
        txtOBCDocNo.setBounds(115, 60, 120, 20);

        txtPartyName.setName("PARTY_NAME");
        txtPartyName.setNextFocusableComponent(txtBankRefNo);
        txtPartyName.setEnabled(false);
        Header.add(txtPartyName);
        txtPartyName.setBounds(115, 135, 440, 20);

        lblAccountName1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountName1.setText("Remarks :");
        Header.add(lblAccountName1);
        lblAccountName1.setBounds(10, 185, 100, 20);

        txtRemarks.setName("DESCRIPTION");
        txtRemarks.setNextFocusableComponent(txtOBCDocNo);
        txtRemarks.setEnabled(false);
        Header.add(txtRemarks);
        txtRemarks.setBounds(115, 185, 515, 20);

        lblAccountID1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountID1.setText("OBC Date :");
        Header.add(lblAccountID1);
        lblAccountID1.setBounds(280, 60, 85, 20);

        txtOBCDocDate.setName("PARTY_ID");
        txtOBCDocDate.setNextFocusableComponent(txtMainCode);
        txtOBCDocDate.setEnabled(false);
        Header.add(txtOBCDocDate);
        txtOBCDocDate.setBounds(370, 60, 120, 20);

        lblSubCode3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode3.setText("Party Code :");
        Header.add(lblSubCode3);
        lblSubCode3.setBounds(10, 110, 100, 20);

        txtPartyCode.setName("PARTY_CODE");
        txtPartyCode.setEnabled(false);
        Header.add(txtPartyCode);
        txtPartyCode.setBounds(115, 110, 120, 20);

        lblAccountID2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountID2.setText("Bank Ref. No. :");
        Header.add(lblAccountID2);
        lblAccountID2.setBounds(10, 85, 100, 20);

        txtBankRefNo.setName("PARTY_ID");
        txtBankRefNo.setNextFocusableComponent(txtBankRefDate);
        txtBankRefNo.setEnabled(false);
        Header.add(txtBankRefNo);
        txtBankRefNo.setBounds(115, 85, 120, 20);

        lblAccountID3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountID3.setText("Invoice Date :");
        Header.add(lblAccountID3);
        lblAccountID3.setBounds(280, 85, 85, 20);

        txtBankRefDate.setName("PARTY_ID");
        txtBankRefDate.setEnabled(false);
        Header.add(txtBankRefDate);
        txtBankRefDate.setBounds(370, 85, 120, 20);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table);

        Header.add(jScrollPane1);
        jScrollPane1.setBounds(10, 240, 500, 140);

        jLabel1.setText("Invoices :");
        Header.add(jLabel1);
        jLabel1.setBounds(10, 215, 110, 20);

        cmdShowInvoice.setText("Show Invoice");
        cmdShowInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowInvoiceActionPerformed(evt);
            }
        });

        Header.add(cmdShowInvoice);
        cmdShowInvoice.setBounds(520, 280, 117, 25);

        lblAccountID4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountID4.setText("Doc No :");
        Header.add(lblAccountID4);
        lblAccountID4.setBounds(10, 10, 100, 20);

        txtDocNo.setName("PARTY_ID");
        txtDocNo.setNextFocusableComponent(txtOBCDocDate);
        txtDocNo.setEnabled(false);
        Header.add(txtDocNo);
        txtDocNo.setBounds(115, 10, 120, 20);

        lblAccountID5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountID5.setText("Date :");
        Header.add(lblAccountID5);
        lblAccountID5.setBounds(280, 10, 85, 20);

        txtDocDate.setName("PARTY_ID");
        txtDocDate.setNextFocusableComponent(txtMainCode);
        txtDocDate.setEnabled(false);
        Header.add(txtDocDate);
        txtDocDate.setBounds(370, 10, 120, 20);

        lblAccountID6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountID6.setText("Reason Code :");
        Header.add(lblAccountID6);
        lblAccountID6.setBounds(10, 35, 100, 20);

        txtReasonCode.setName("PARTY_ID");
        txtReasonCode.setNextFocusableComponent(txtOBCDocNo);
        txtReasonCode.setEnabled(false);
        txtReasonCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtReasonCodeFocusLost(evt);
            }
        });
        txtReasonCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtReasonCodeKeyPressed(evt);
            }
        });

        Header.add(txtReasonCode);
        txtReasonCode.setBounds(115, 35, 120, 20);

        txtReasonDesc.setName("PARTY_NAME");
        txtReasonDesc.setNextFocusableComponent(txtBankRefNo);
        txtReasonDesc.setEnabled(false);
        Header.add(txtReasonDesc);
        txtReasonDesc.setBounds(240, 35, 390, 20);

        cmdNext1.setMnemonic('X');
        cmdNext1.setText("Next >>");
        cmdNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext1ActionPerformed(evt);
            }
        });

        Header.add(cmdNext1);
        cmdNext1.setBounds(536, 365, 90, 25);

        cmdShowOBCInvoice.setText("Show OBC Entry");
        cmdShowOBCInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowOBCInvoiceActionPerformed(evt);
            }
        });

        Header.add(cmdShowOBCInvoice);
        cmdShowOBCInvoice.setBounds(500, 60, 140, 25);

        MainPanel.addTab("OBC Details", Header);

        Approval.setLayout(null);

        Approval.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Hierarchy :");
        Approval.add(jLabel31);
        jLabel31.setBounds(5, 18, 90, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });

        Approval.add(cmbHierarchy);
        cmbHierarchy.setBounds(100, 14, 184, 24);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("From :");
        Approval.add(jLabel32);
        jLabel32.setBounds(5, 52, 90, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Approval.add(txtFrom);
        txtFrom.setBounds(100, 50, 182, 19);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel35.setText("Remarks :");
        Approval.add(jLabel35);
        jLabel35.setBounds(5, 82, 90, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Approval.add(txtFromRemarks);
        txtFromRemarks.setBounds(100, 78, 468, 19);

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Your Action :");
        Approval.add(jLabel36);
        jLabel36.setBounds(5, 120, 90, 15);

        jPanel7.setLayout(null);

        jPanel7.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel7.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel7.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel7.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setEnabled(false);
        jPanel7.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Approval.add(jPanel7);
        jPanel7.setBounds(100, 120, 182, 100);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Send To :");
        Approval.add(jLabel33);
        jLabel33.setBounds(5, 232, 90, 15);

        cmbSendTo.setEnabled(false);
        Approval.add(cmbSendTo);
        cmbSendTo.setBounds(100, 228, 184, 24);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Remarks :");
        Approval.add(jLabel34);
        jLabel34.setBounds(5, 264, 90, 15);

        txtToRemarks.setEnabled(false);
        Approval.add(txtToRemarks);
        txtToRemarks.setBounds(100, 260, 516, 19);

        cmdBack2.setText("<< Back");
        cmdBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack2ActionPerformed(evt);
            }
        });

        Approval.add(cmdBack2);
        cmdBack2.setBounds(430, 365, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        Approval.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(570, 77, 33, 21);

        cmdNext2.setMnemonic('X');
        cmdNext2.setText("Next >>");
        cmdNext2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext2ActionPerformed(evt);
            }
        });

        Approval.add(cmdNext2);
        cmdNext2.setBounds(540, 365, 102, 25);

        MainPanel.addTab("Approval", Approval);

        Status.setLayout(null);

        Status.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status");
        Status.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        Status.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 614, 144);

        lblDocumentHistory.setText("Document Update History");
        Status.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 191, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        Status.add(jScrollPane3);
        jScrollPane3.setBounds(13, 207, 473, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        Status.add(cmdViewHistory);
        cmdViewHistory.setBounds(498, 242, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        Status.add(cmdNormalView);
        cmdNormalView.setBounds(498, 273, 132, 24);

        cmdPreviewA.setText("Preview Report");
        Status.add(cmdPreviewA);
        cmdPreviewA.setBounds(498, 209, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        Status.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(498, 305, 132, 24);

        txtAuditRemarks.setEnabled(false);
        Status.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(500, 340, 129, 19);

        cmdBack3.setText("<< Back");
        cmdBack3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack3ActionPerformed(evt);
            }
        });

        Status.add(cmdBack3);
        cmdBack3.setBounds(510, 370, 102, 25);

        MainPanel.addTab("Status", Status);

        getContentPane().add(MainPanel);
        MainPanel.setBounds(2, 66, 654, 430);
        MainPanel.getAccessibleContext().setAccessibleName("Account Details");
        MainPanel.getAccessibleContext().setAccessibleDescription("Account Details");

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(1, 271, 650, 22);

    }//GEN-END:initComponents

    private void cmdShowOBCInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowOBCInvoiceActionPerformed
        // TODO add your handling code here:
        if (!txtOBCDocNo.getText().trim().equals("")) {
            AppletFrame aFrame = new AppletFrame("OBC Invoice Entry ");
            aFrame.startAppletEx("EITLERP.Finance.frmOBCInvoice", "OBC Invoice Entry");
            frmOBCInvoice ObjDoc = (frmOBCInvoice) aFrame.ObjApplet;
            int CompanyID = EITLERPGLOBAL.gCompanyID;
            ObjDoc.FindEx(CompanyID, txtOBCDocNo.getText().trim());
        }

    }//GEN-LAST:event_cmdShowOBCInvoiceActionPerformed

    private void cmdBack3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack3ActionPerformed
        // TODO add your handling code here:
        MainPanel.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBack3ActionPerformed

    private void cmdNext2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext2ActionPerformed
        // TODO add your handling code here:
        MainPanel.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNext2ActionPerformed

    private void cmdBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack2ActionPerformed
        // TODO add your handling code here:
        MainPanel.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack2ActionPerformed

    private void cmdNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext1ActionPerformed
        // TODO add your handling code here:
        MainPanel.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext1ActionPerformed

    private void txtOBCDocNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOBCDocNoFocusLost
        // TODO add your handling code here:

        ResultSet rsTmp;
        if (!txtOBCDocNo.getText().toString().trim().equals("")) {
            FormatGrid();
            try {
                String SQL = "SELECT *  FROM D_FIN_OBC_INVOICE_HEADER "
                        + "WHERE DOC_NO =  '" + txtOBCDocNo.getText().toString().trim() + "' "
                        + "AND APPROVED = 1 AND CANCELLED = 0 AND (BANK_REFERENCE_NO LIKE 'CC%' OR BANK_REFERENCE_NO LIKE 'BC%') "
                        + "AND MAIN_ACCOUNT_CODE IN('210010','210027') "
                        + "AND BANK_REFERENCE_NO NOT IN(SELECT BANK_REFERENCE_NO FROM D_FIN_OBC ) AND BANK_REFERENCE_DATE <= CURDATE()";
                //System.out.println(SQL);
                rsTmp = data.getResult(SQL, FinanceGlobal.FinURL);
                if (rsTmp.getRow() > 0) {
                    String PartyName = clsAccount.getAccountName(rsTmp.getString("MAIN_ACCOUNT_CODE"), rsTmp.getString("PARTY_CODE"));
                    txtPartyName.setText(PartyName);
                    txtOBCDocDate.setText(EITLERPGLOBAL.formatDate(rsTmp.getString("DOC_DATE")));
                    txtMainCode.setText(rsTmp.getString("MAIN_ACCOUNT_CODE"));
                    txtPartyCode.setText(rsTmp.getString("PARTY_CODE"));
                    txtBankRefNo.setText(rsTmp.getString("BANK_REFERENCE_NO"));
                    txtBankRefDate.setText(EITLERPGLOBAL.formatDate(rsTmp.getString("BANK_REFERENCE_DATE")));

                    SQL = "SELECT *  FROM D_FIN_OBC_INVOICE_DETAIL "
                            + "WHERE DOC_NO =  '" + txtOBCDocNo.getText().toString().trim() + "' ";
                    //System.out.println(SQL);
                    rsTmp = data.getResult(SQL, FinanceGlobal.FinURL);
                    int i = 0;
                    while (!rsTmp.isAfterLast()) {
                        Object[] rowData = new Object[1];
                        DataModel.addRow(rowData);

                        DataModel.setValueByVariable("SR_NO", Integer.toString(i + 1), i);
                        DataModel.setValueByVariable("INVOICE_NO", rsTmp.getString("INVOICE_NO"), i);
                        DataModel.setValueByVariable("INVOICE_DATE", EITLERPGLOBAL.formatDate(rsTmp.getString("INVOICE_DATE")), i);
                        DataModel.setValueByVariable("INVOICE_AMOUNT", String.valueOf(rsTmp.getDouble("INVOICE_AMOUNT")), i);
                        String AgentAlpha = clsSalesInvoice.getAgentAlphaSrNo(rsTmp.getString("INVOICE_NO"), rsTmp.getString("INVOICE_DATE"));
                        DataModel.setValueByVariable("AGENT_SR", AgentAlpha, i);

                        rsTmp.next();
                        i++;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Wrong OBC Invoice Doc No entered. Please verify it.");
                    //txtOBCDocNo.setText("");
                    txtBankRefDate.setText("");
                    txtBankRefNo.setText("");
                    txtPartyCode.setText("");
                    txtPartyName.setText("");
                    txtMainCode.setText("");
                    txtOBCDocNo.requestFocus();
                }
            } catch (Exception e) {
            }
        }

    }//GEN-LAST:event_txtOBCDocNoFocusLost

    private void txtReasonCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtReasonCodeKeyPressed
        // TODO add your handling code here:
        try {

            if (evt.getKeyCode() == 112) {

                LOV aList = new LOV();

                aList.SQL = "SELECT REASON_CODE,REASON_CODE_DESC FROM FINANCE.D_FIN_REASONCODE_MASTER WHERE INVOICE_TYPE = 0 ORDER BY REASON_CODE";
                aList.ReturnCol = 1;
                aList.SecondCol = 2;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;
                aList.UseSpecifiedConn = true;
                aList.dbURL = FinanceGlobal.FinURL;

                if (aList.ShowLOV()) {
                    txtReasonCode.setText(aList.ReturnVal);
                    txtReasonDesc.setText(aList.SecondVal);
                }

            }

        } catch (Exception e) {

        }
    }//GEN-LAST:event_txtReasonCodeKeyPressed

    private void txtOBCDocNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOBCDocNoKeyPressed
        // TODO add your handling code here:
        ResultSet rsTmp;
        try {

            if (evt.getKeyCode() == 112) {

                LOV aList = new LOV();

                aList.SQL = "SELECT  A.DOC_NO, DATE_FORMAT(A.DOC_DATE,'%d/%m/%Y') AS DOC_DATE,A.BANK_REFERENCE_NO, "
                        + "DATE_FORMAT(A.BANK_REFERENCE_DATE,'%d/%m/%Y') AS BANK_REFERENCE_DATE "
                        + "FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                        + "WHERE  A.DOC_NO = B.DOC_NO AND A.APPROVED = 1 AND A.CANCELLED = 0 "
                        + "AND A.BANK_REFERENCE_DATE <= CURDATE() "
                        + "AND A.MAIN_ACCOUNT_CODE IN('210010','210027') " + //AND A.BANK_REFERENCE_NO NOT LIKE 'F6%'
                        "AND (A.BANK_REFERENCE_NO LIKE 'BC%' OR A.BANK_REFERENCE_NO LIKE 'CC%') "
                        + "AND A.BANK_REFERENCE_NO NOT IN(SELECT BANK_REFERENCE_NO FROM D_FIN_OBC ) "
                        + "ORDER BY A.PARTY_CODE,A.BANK_REFERENCE_NO";

                aList.ReturnCol = 1;
                aList.SecondCol = 2;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;
                aList.UseSpecifiedConn = true;
                aList.dbURL = FinanceGlobal.FinURL;

                if (aList.ShowLOV()) {
                    txtOBCDocNo.setText(aList.ReturnVal);
                    txtOBCDocDate.setText(aList.SecondVal);

                    String SQL = "SELECT *  FROM D_FIN_OBC_INVOICE_HEADER "
                            + "WHERE DOC_NO =  '" + aList.ReturnVal + "' "
                            + "AND APPROVED = 1 AND CANCELLED = 0 ";
                    //System.out.println(SQL);
                    rsTmp = data.getResult(SQL, FinanceGlobal.FinURL);
                    if (rsTmp.getRow() > 0) {

                        String PartyName = clsAccount.getAccountName(rsTmp.getString("MAIN_ACCOUNT_CODE"), rsTmp.getString("PARTY_CODE"));
                        txtPartyName.setText(PartyName);
                        txtOBCDocDate.setText(EITLERPGLOBAL.formatDate(rsTmp.getString("DOC_DATE")));
                        txtMainCode.setText(rsTmp.getString("MAIN_ACCOUNT_CODE"));
                        txtPartyCode.setText(rsTmp.getString("PARTY_CODE"));
                        txtBankRefNo.setText(rsTmp.getString("BANK_REFERENCE_NO"));
                        txtBankRefDate.setText(EITLERPGLOBAL.formatDate(rsTmp.getString("BANK_REFERENCE_DATE")));
                    }

                    SQL = "SELECT *  FROM D_FIN_OBC_INVOICE_DETAIL "
                            + "WHERE DOC_NO =  '" + aList.ReturnVal + "' ";
                    //System.out.println(SQL);
                    rsTmp = data.getResult(SQL, FinanceGlobal.FinURL);
                    int i = 0;
                    FormatGrid();
                    while (!rsTmp.isAfterLast()) {
                        Object[] rowData = new Object[1];
                        DataModel.addRow(rowData);

                        DataModel.setValueByVariable("SR_NO", Integer.toString(i + 1), i);
                        DataModel.setValueByVariable("INVOICE_NO", rsTmp.getString("INVOICE_NO"), i);
                        DataModel.setValueByVariable("INVOICE_DATE", EITLERPGLOBAL.formatDate(rsTmp.getString("INVOICE_DATE")), i);
                        DataModel.setValueByVariable("INVOICE_AMOUNT", String.valueOf(rsTmp.getDouble("INVOICE_AMOUNT")), i);
                        String AgentAlpha = clsSalesInvoice.getAgentAlphaSrNo(rsTmp.getString("INVOICE_NO"), rsTmp.getString("INVOICE_DATE"));
                        DataModel.setValueByVariable("AGENT_SR", AgentAlpha, i);
                        rsTmp.next();
                        i++;
                    }

                }

            }
        } catch (Exception e) {
        }

    }//GEN-LAST:event_txtOBCDocNoKeyPressed

    private void txtReasonCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtReasonCodeFocusLost
        // TODO add your handling code here:
        if (!txtReasonCode.getText().toString().trim().equals("")) {
            String ReasonDesc = data.getStringValueFromDB("SELECT REASON_CODE_DESC FROM D_FIN_REASONCODE_MASTER WHERE REASON_CODE = '" + txtReasonCode.getText().toString().trim() + "' AND INVOICE_TYPE = 0 ", FinanceGlobal.FinURL);
            txtReasonDesc.setText(ReasonDesc);
        }

    }//GEN-LAST:event_txtReasonCodeFocusLost

    private void cmdShowInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowInvoiceActionPerformed
        // TODO add your handling code here:
        try {
            if (Table.getSelectedRow() >= 0) {
                String DocNo = DataModel.getValueByVariable("INVOICE_NO", Table.getSelectedRow());
                String DocDate = DataModel.getValueByVariable("INVOICE_DATE", Table.getSelectedRow());
                AppletFrame aFrame = new AppletFrame("Sales Invoice");
                if (DocNo.startsWith("FE/")) {
                    aFrame.startAppletEx("EITLERP.FeltSales.FeltInvReport.frmFeltSalesInvoice", "Sales Invoice");
                    EITLERP.FeltSales.FeltInvReport.frmFeltSalesInvoice ObjDoc = (EITLERP.FeltSales.FeltInvReport.frmFeltSalesInvoice) aFrame.ObjApplet;
                    int CompanyID = UtilFunctions.CInt(DataModel.getValueByVariable("REF_COMPANY_ID", Table.getSelectedRow()));
                    ObjDoc.FindByCompany(CompanyID, DocNo, DocDate);
                } else {
                    aFrame.startAppletEx("EITLERP.Sales.frmSalesInvoice", "Sales Invoice");
                    frmSalesInvoice ObjDoc = (frmSalesInvoice) aFrame.ObjApplet;
                    int CompanyID = UtilFunctions.CInt(DataModel.getValueByVariable("REF_COMPANY_ID", Table.getSelectedRow()));
                    ObjDoc.FindByCompany(CompanyID, DocNo, DocDate);
                }
//                aFrame.startAppletEx("EITLERP.Sales.frmSalesInvoice","Sales Invoice");
//                frmSalesInvoice ObjDoc=(frmSalesInvoice) aFrame.ObjApplet;
//                int CompanyID=EITLERPGLOBAL.gCompanyID;
//                ObjDoc.FindByCompany(CompanyID,DocNo,DocDate);
            } else {
                JOptionPane.showMessageDialog(this, "Select Invoice record.");
                return;
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_cmdShowInvoiceActionPerformed

    private void UpdateSrNo() {
        int SrCol = DataModel.getColFromVariable("SR_NO");

        for (int i = 0; i < Table.getRowCount(); i++) {
            Table.setValueAt(Integer.toString(i + 1), i, SrCol);
        }
    }

    private void HeaderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HeaderMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_HeaderMouseClicked

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if (TableHS.getRowCount() > 0 && TableHS.getSelectedRow() >= 0) {
            txtAuditRemarks.setText((String) TableHS.getValueAt(TableHS.getSelectedRow(), 4));
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText = txtAuditRemarks;
            bigEdit.ShowEdit();
        }

    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        objOBC.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveFirst();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        objOBC.ShowHistory(EITLERPGLOBAL.gCompanyID, objOBC.getAttribute("DOC_NO").getString());
        MoveFirst();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);

    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }

    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();

        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if (ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID, clsOBCReturn.ModuleID, objOBC.getAttribute("DOC_NO").getString(), FinanceGlobal.FinURL)) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateFromCombo();
        }

    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();

    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {

            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        objOBC.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this record ?", "SDML ERP", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Approval;
    private javax.swing.JPanel Header;
    private javax.swing.JTabbedPane MainPanel;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel Status;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdBack3;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdNext2;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowInvoice;
    private javax.swing.JButton cmdShowOBCInvoice;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JLabel lblAccountCode2;
    private javax.swing.JLabel lblAccountCode3;
    private javax.swing.JLabel lblAccountID;
    private javax.swing.JLabel lblAccountID1;
    private javax.swing.JLabel lblAccountID2;
    private javax.swing.JLabel lblAccountID3;
    private javax.swing.JLabel lblAccountID4;
    private javax.swing.JLabel lblAccountID5;
    private javax.swing.JLabel lblAccountID6;
    private javax.swing.JLabel lblAccountName1;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblSubCode;
    private javax.swing.JLabel lblSubCode3;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtBankRefDate;
    private javax.swing.JTextField txtBankRefNo;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtMainCode;
    private javax.swing.JTextField txtOBCDocDate;
    private javax.swing.JTextField txtOBCDocNo;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtPartyName;
    private javax.swing.JTextField txtReasonCode;
    private javax.swing.JTextField txtReasonDesc;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables

    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }

    private void SetFields(boolean pStat) {

        txtRemarks.setEnabled(pStat);
        txtOBCDocNo.setEnabled(pStat);
        txtReasonCode.setEnabled(pStat);

        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);

    }

    private void ClearFields() {

        txtDocNo.setText("");
        txtDocDate.setText("");
        txtMainCode.setText("");
        txtPartyCode.setText("");
        txtPartyName.setText("");
        txtOBCDocDate.setText("");
        txtOBCDocNo.setText("");
        txtReasonCode.setText("");
        txtReasonDesc.setText("");
        txtBankRefNo.setText("");
        txtBankRefDate.setText("");
        txtRemarks.setText("");

        FormatGrid();

    }

    //Didplay data on the Screen
    private void DisplayData() {

        //=========== Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (objOBC.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                }

                if (objOBC.getAttribute("APPROVED").getInt() != 1) {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (objOBC.getAttribute("CANCELLED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }

            }
        } catch (Exception c) {

        }
        //============================================//

        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            int ModuleID = clsOBCReturn.ModuleID;

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleID)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        ClearFields();

        ResultSet rsTmp;
        txtDocNo.setText(objOBC.getAttribute("DOC_NO").getString());
        txtDocDate.setText(objOBC.getAttribute("DOC_DATE").getString());
        txtOBCDocNo.setText(objOBC.getAttribute("OBC_DOC_NO").getString());
        txtReasonCode.setText(objOBC.getAttribute("REASON_CODE").getString());
        String ReasonDesc = data.getStringValueFromDB("SELECT REASON_CODE_DESC FROM D_FIN_REASONCODE_MASTER WHERE REASON_CODE = '" + objOBC.getAttribute("REASON_CODE").getString() + "' ", FinanceGlobal.FinURL);
        txtReasonDesc.setText(ReasonDesc);
        txtRemarks.setText(objOBC.getAttribute("REMARKS").getString());
        lblTitle.setText("OBC Return Entry -" + txtDocNo.getText());

        DoNotEvaluate = true;

        FormatGrid();

        try {
            String SQL = "SELECT *  FROM D_FIN_OBC_INVOICE_HEADER "
                    + "WHERE DOC_NO =  '" + objOBC.getAttribute("OBC_DOC_NO").getString() + "' "
                    + "AND APPROVED = 1 AND CANCELLED = 0 ";
            //System.out.println(SQL);
            rsTmp = data.getResult(SQL, FinanceGlobal.FinURL);
            if (rsTmp.getRow() > 0) {

                String PartyName = clsAccount.getAccountName(rsTmp.getString("MAIN_ACCOUNT_CODE"), rsTmp.getString("PARTY_CODE"));
                txtPartyName.setText(PartyName);
                txtOBCDocDate.setText(EITLERPGLOBAL.formatDate(rsTmp.getString("DOC_DATE")));
                txtMainCode.setText(rsTmp.getString("MAIN_ACCOUNT_CODE"));
                txtPartyCode.setText(rsTmp.getString("PARTY_CODE"));
                txtBankRefNo.setText(rsTmp.getString("BANK_REFERENCE_NO"));
                txtBankRefDate.setText(EITLERPGLOBAL.formatDate(rsTmp.getString("BANK_REFERENCE_DATE")));

                SQL = "SELECT *  FROM D_FIN_OBC_INVOICE_DETAIL "
                        + "WHERE DOC_NO =  '" + objOBC.getAttribute("OBC_DOC_NO").getString() + "' ";
                //System.out.println(SQL);
                rsTmp = data.getResult(SQL, FinanceGlobal.FinURL);
                int i = 0;
                while (!rsTmp.isAfterLast()) {
                    Object[] rowData = new Object[1];
                    DataModel.addRow(rowData);

                    DataModel.setValueByVariable("SR_NO", Integer.toString(i + 1), i);
                    DataModel.setValueByVariable("INVOICE_NO", rsTmp.getString("INVOICE_NO"), i);
                    DataModel.setValueByVariable("INVOICE_DATE", EITLERPGLOBAL.formatDate(rsTmp.getString("INVOICE_DATE")), i);
                    DataModel.setValueByVariable("INVOICE_AMOUNT", String.valueOf(rsTmp.getDouble("INVOICE_AMOUNT")), i);

                    if (txtMainCode.getText().trim().equals("210010")) {
                        String InvDate = EITLERPGLOBAL.formatDate(rsTmp.getString("INVOICE_DATE"));
                        String FinYear = EITLERPGLOBAL.FinancialYear(InvDate);
                        String AgentAlpha = rsTmp.getString("INVOICE_NO") + "/" + FinYear;
                        DataModel.setValueByVariable("AGENT_SR", AgentAlpha, i);
                    } else {

                        DataModel.setValueByVariable("AGENT_SR", DisplayAgentAlpha(i, EITLERPGLOBAL.formatDate(rsTmp.getString("INVOICE_DATE"))), i);
                    }

                    rsTmp.next();
                    i++;
                }

            }

        } catch (Exception e) {
        }

        DoNotEvaluate = false;

        //************ Misc. Display *****************//
        txtToRemarks.setText("");
        SetupApproval();

        EITLERPGLOBAL.setComboIndex(cmbHierarchy, objOBC.getAttribute("HIERARCHY_ID").getInt());

        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List = new HashMap();
        String DocNo = objOBC.getAttribute("DOC_NO").getString();
        List = ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, clsOBCReturn.ModuleID, DocNo);
        for (int i = 1; i <= List.size(); i++) {
            clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
            Object[] rowData = new Object[7];

            rowData[0] = Integer.toString(i);
            rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
            rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
            rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
            rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
            rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
            rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

            DataModelA.addRow(rowData);
        }
        //============================================================//

        //=========================== Audit Trail ===========================//
        FormatGridHS();

        HashMap History = clsOBCReturn.getHistoryList(EITLERPGLOBAL.gCompanyID, objOBC.getAttribute("DOC_NO").getString());
        for (int i = 1; i <= History.size(); i++) {
            clsOBCReturn ObjHistory = (clsOBCReturn) History.get(Integer.toString(i));
            Object[] rowData = new Object[5];

            rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
            rowData[1] = ObjHistory.getAttribute("UPDATED_BY").getString();
            rowData[2] = ObjHistory.getAttribute("ENTRY_DATE").getString();

            String ApprovalStatus = "";

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus = "Approved";
            }

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus = "Final Approved";
            }

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus = "Waiting";
            }

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus = "Rejected";
            }

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus = "Pending";
            }

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus = "Skiped";
            }

            rowData[3] = ApprovalStatus;
            rowData[4] = (String) ObjHistory.getAttribute("APPROVER_REMARKS").getObj();

            DataModelHS.addRow(rowData);
        }
        //=========================== Audit Trail Over ===========================//

        //********************************************//
    }

    private String DisplayAgentAlpha(int RowNo, String InvoiceDate) {
        try {
            String AgentAlpha = clsSalesParty.getAgentAlpha(txtPartyCode.getText().trim());
            String InvoiceNo = DataModel.getValueByVariable("INVOICE_NO", RowNo);
            if (!InvoiceNo.trim().equals("")) {
                AgentAlpha = AgentAlpha + "/" + data.getStringValueFromDB("SELECT AGENT_SR_NO FROM D_SAL_INVOICE_HEADER WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND INVOICE_NO ='" + InvoiceNo + "' AND INVOICE_DATE='" + EITLERPGLOBAL.formatDateDB(InvoiceDate) + "' ");
                String InvDate = EITLERPGLOBAL.formatDateDB(InvoiceDate);
                String FinYear = EITLERPGLOBAL.FinancialYear(InvDate);
                AgentAlpha = AgentAlpha + "/" + FinYear;
            }
            // DataModel.setValueByVariable("AGENT_SR",AgentAlpha,RowNo);
            return AgentAlpha;
        } catch (Exception e) {
            return "";
        }
    }

    //Sets data to the Class Object
    private void SetData() {

        objOBC.setAttribute("PREFIX", SelPrefix);
        objOBC.setAttribute("SUFFIX", SelSuffix);
        objOBC.setAttribute("FFNO", FFNo);

        objOBC.setAttribute("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
        objOBC.setAttribute("DOC_NO", txtDocNo.getText());
        objOBC.setAttribute("DOC_DATE", txtDocDate.getText());
        objOBC.setAttribute("OBC_DOC_NO", txtOBCDocNo.getText());
        objOBC.setAttribute("REASON_CODE", txtReasonCode.getText());
        objOBC.setAttribute("REMARKS", txtRemarks.getText());

        //----- Update Approval Specific Fields -----------//
        objOBC.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        objOBC.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        objOBC.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        objOBC.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            objOBC.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            objOBC.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            objOBC.setAttribute("APPROVAL_STATUS", "R");
            objOBC.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            objOBC.setAttribute("APPROVAL_STATUS", "H");
        }

        if (EditMode == EITLERPGLOBAL.ADD) {
            objOBC.setAttribute("CREATED_BY", EITLERPGLOBAL.gLoginID);
            objOBC.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        } else {
            objOBC.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gLoginID);
            objOBC.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }
        //-------------------------------------------------//
    }

    private void SetMenuForRights() {

        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 12141)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        //if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,12142)) {
        cmdEdit.setEnabled(true);
        //}
        //else {
        //cmdEdit.setEnabled(false);
        //}

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 12143)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 12144)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }

    }

    private void Add() {

        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//

        //Now Generate new document no.
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = clsOBCReturn.ModuleID;

        if (aList.ShowList()) {
            EditMode = EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix = aList.Prefix; //Selected Prefix;
            SelSuffix = aList.Suffix;
            FFNo = aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsOBCReturn.ModuleID, FFNo, false));
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
            txtDocDate.requestFocus();

            lblTitle.setText("OBC Return Entry - " + txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);
        } else {
            JOptionPane.showMessageDialog(null, "You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }

    }

    private void Edit() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        String lDocNo = objOBC.getAttribute("DOC_NO").getString();

        if (objOBC.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {

            EITLERPGLOBAL.ChangeCursorToWait(this);

            EditMode = EITLERPGLOBAL.EDIT;
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            SetupApproval();
            //----------------//

            if (ApprovalFlow.IsCreator(clsOBCReturn.ModuleID, lDocNo) || clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 12142)) {
                SetFields(true);
            } else {
                EnableApproval();
            }

            SetupApproval();
            DisableToolbar();
            txtDocDate.requestFocus();

            EITLERPGLOBAL.ChangeCursorToDefault(this);
        } else {
            JOptionPane.showMessageDialog(null, "You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }

    }

    private void Delete() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        if (objOBC.Delete(EITLERPGLOBAL.gNewUserID)) {
            MoveLast();
        }
    }

    private void Save() {

        EITLERPGLOBAL.ChangeCursorToWait(this);
        if (Validate() == false) {
            return; //Validation failed
        }
        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (objOBC.Insert()) {
                MoveLast();
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while saving. Error is " + objOBC.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (objOBC.Update()) {
                //Nothing to do
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while saving. Error is " + objOBC.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);

        try {
            frmPA.RefreshView();
        } catch (Exception e) {
        }

    }

    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.Finance.frmOBCReturnFind", true);
        frmOBCReturnFind ObjReturn = (frmOBCReturnFind) ObjLoader.getObj();

        if (ObjReturn.Cancelled == false) {
            if (!objOBC.Filter(ObjReturn.strQuery, EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null, "No records found.");
            }
            MoveFirst();
        }
    }

    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objOBC.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objOBC.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objOBC.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objOBC.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    public void FindEx(int pCompanyID, String pDocNo) {
        //objOBC.Filter(" WHERE DOC_NO='"+pDocNo+"' ",pCompanyID);
        objOBC.Filter(" WHERE DOC_NO='" + pDocNo + "' ", pCompanyID);
        objOBC.MoveFirst();
        DisplayData();
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }

    private void FormatGridA() {
        DataModelA = new EITLTableModel();

        TableA.removeAll();
        TableA.setModel(DataModelA);

        //Set the table Readonly
        DataModelA.TableReadOnly(true);

        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");

        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);

    }

    private void FormatGridHS() {
        DataModelHS = new EITLTableModel();

        TableHS.removeAll();
        TableHS.setModel(DataModelHS);

        //Set the table Readonly
        DataModelHS.TableReadOnly(true);

        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");

        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }

    private void SetupApproval() {

        /*if(cmbHierarchy.getItemCount()>1) {
         cmbHierarchy.setEnabled(true);
         }*/
        //In Edit Mode Hierarchy Should be disabled
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {

            int FromUserID = ApprovalFlow.getFromID((int) EITLERPGLOBAL.gCompanyID, clsOBCReturn.ModuleID, objOBC.getAttribute("DOC_NO").getString());
            lnFromID = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = ApprovalFlow.getFromRemarks((int) EITLERPGLOBAL.gCompanyID, clsOBCReturn.ModuleID, FromUserID, objOBC.getAttribute("DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }

        if (EditMode == 0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }

    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = ApprovalFlow.getRemainingUsers((int) EITLERPGLOBAL.gCompanyID, clsOBCReturn.ModuleID, objOBC.getAttribute("DOC_NO").getString());
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
        }

    }

    private void GenerateRejectedUserCombo() {
        HashMap List = new HashMap();
        HashMap DeptList = new HashMap();
        HashMap DeptUsers = new HashMap();

        //----- Generate cmbType ------- //
        cmbToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= List.size(); i++) {
            clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

            /// NEW CODE ///
            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, clsOBCReturn.ModuleID, objOBC.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID, FinanceGlobal.FinURL);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, clsOBCReturn.ModuleID, objOBC.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///

        }
        //------------------------------ //

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, clsOBCReturn.ModuleID, objOBC.getAttribute("DOC_NO").getString());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }

    }

    private void GenerateCombos() {
        try {
            //Generates Combo Boxes
            HashMap List = new HashMap();
            String strCondition = "";
            ResultSet rsTmp;

            cmbHierarchyModel = new EITLComboModel();
            cmbHierarchy.removeAllItems();
            cmbHierarchy.setModel(cmbHierarchyModel);

            List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + clsOBCReturn.ModuleID);

            if (EditMode == EITLERPGLOBAL.EDIT) {
                List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + clsOBCReturn.ModuleID);
            }
            for (int i = 1; i <= List.size(); i++) {
                clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
                ComboData aData = new ComboData();
                aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
                aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
                cmbHierarchyModel.addElement(aData);
            }
        } catch (Exception e) {

        }
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Header.getComponentCount() - 1; i++) {
            if (Header.getComponent(i).getName() != null) {

                FieldName = Header.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {

                    Header.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//
    }

    private void FormatGrid() {
        DataModel = new EITLTableModel();

        Table.removeAll();
        Table.setModel(DataModel);

        //Add the columns
        DataModel.addColumn("Sr.");
        DataModel.addColumn("Agent Alpha");
        DataModel.addColumn("Invoice No.");
        DataModel.addColumn("Invoice Date");
        DataModel.addColumn("Amount");

        Table.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);

        DataModel.SetVariable(0, "SR_NO");
        DataModel.SetVariable(1, "AGENT_SR");
        DataModel.SetVariable(2, "INVOICE_NO");
        DataModel.SetVariable(3, "INVOICE_DATE");
        DataModel.SetVariable(4, "INVOICE_AMOUNT");
        DataModel.TableReadOnly(true);
    }

    private void DisplayInvoiceDetail(int RowNo, String AgentAlpha) {
        try {
            String[] str = AgentAlpha.split("/");
            String Alpha = str[0];
            String AgentSrNo = str[1];
            String Year = str[2];
            String FromDate = "20" + Year.substring(0, 2) + "-04-01";
            String ToDate = "20" + Year.substring(2) + "-03-31";
            String PartyCode = DataModel.getValueByVariable("PARTY_CODE", RowNo);
            String Qry = "SELECT A.INVOICE_NO,A.INVOICE_DATE,A.PARTY_CODE,A.AGENT_SR_NO,A.NET_AMOUNT FROM D_SAL_INVOICE_HEADER A, D_SAL_PARTY_MASTER B "
                    + " WHERE A.AGENT_SR_NO='" + AgentSrNo + "' AND A.INVOICE_DATE>='" + FromDate + "' AND A.INVOICE_DATE <='" + ToDate + "' "
                    + " AND B.AREA_ID='" + Alpha + "' AND A.PARTY_CODE=B.PARTY_CODE ";

            ResultSet rsTmp = data.getResult(Qry);
            if (rsTmp.getRow() > 0) {
                rsTmp.first();
                DataModel.setValueByVariable("INVOICE_NO", rsTmp.getString("INVOICE_NO"), Table.getSelectedRow());
                DataModel.setValueByVariable("INVOICE_DATE", EITLERPGLOBAL.formatDate(rsTmp.getString("INVOICE_DATE")), Table.getSelectedRow());
            }
        } catch (Exception e) {

        }
    }

    private boolean Validate() {

        if (txtOBCDocNo.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Select OBC Doc No.");
            return false;
        }

        if (!data.IsRecordExist("SELECT * FROM D_FIN_OBC_INVOICE_HEADER WHERE DOC_NO='" + txtOBCDocNo.getText().trim() + "' AND CANCELLED=0", FinanceGlobal.FinURL)) {
            JOptionPane.showMessageDialog(null, "Please Select Valid OBC Doc No.");
            return false;
        }

        if (OpgFinal.isSelected()) {
            if (txtReasonCode.getText().toString().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Please Enter Valid Reason Code.");
                return false;
            }
            if (!data.IsRecordExist("SELECT REASON_CODE FROM D_FIN_REASONCODE_MASTER "
                    + "WHERE REASON_CODE = '" + txtReasonCode.getText().toString().trim() + "'  AND INVOICE_TYPE = 0", FinanceGlobal.FinURL)) {
                JOptionPane.showMessageDialog(null, "Invalid Reason Code.Please varify it.");
                return false;
            }
        }

        if (data.IsRecordExist("SELECT OBC_DOC_NO FROM D_FIN_OBC_RETURN_HEADER WHERE CANCELLED = 0 "
                + "AND COMPANY_ID = '" + EITLERPGLOBAL.gCompanyID + "' "
                + "AND OBC_DOC_NO = '" + txtOBCDocNo.getText().toString().trim() + "' "
                + "AND DOC_NO <> '" + txtDocNo.getText().toString().trim() + "' ", FinanceGlobal.FinURL)) {
            JOptionPane.showMessageDialog(null, "OBC Doc Number is already used.Please varify it.");
            return false;
        }

//        
//        if(data.IsRecordExist("SELECT *  FROM D_FIN_OBC_INVOICE_HEADER " +
//        "WHERE DOC_NO =  '" + txtOBCDocNo.getText().toString().trim() + "' " +
//        "AND APPROVED = 1 AND CANCELLED = 0 AND (BANK_REFERENCE_NO LIKE 'CC%' OR BANK_REFERENCE_NO LIKE 'BC%') " +
//        "AND MAIN_ACCOUNT_CODE IN('210010','210027') " +
//        "AND BANK_REFERENCE_NO NOT IN(SELECT BANK_REFERENCE_NO FROM D_FIN_OBC ) AND BANK_REFERENCE_DATE <= CURDATE()",FinanceGlobal.FinURL))
//        {
//            JOptionPane.showMessageDialog(null,"OBC Doc Number is Invalid.Please varify it.");
//            return false;
//        }
//        
        return true;
    }

}
