/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP.Finance;

/**
 *
 * @author  nhpatel
 */
/*<APPLET CODE=frmMR.class HEIGHT=550 WIDTH=665></APPLET>*/

import javax.swing.*;
import java.awt.*;
import EITLERP.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import javax.swing.text.*;
import java.awt.event.*;
import java.net.*;
import EITLERP.Utils.*;
import java.io.*;


public class frmFASItemMapping_1 extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsFASItemMapping ObjFASItem;
    
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromID=0;
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    private EITLTableCellRenderer Rend=new EITLTableCellRenderer();
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbStatusModel;
    private EITLComboModel cmbForDeptModel;
    private EITLComboModel cmbBuyerModel;
    private EITLTableModel DataModelA;
    private EITLComboModel cmbMethodModel;
    
    private EITLTableModel DataModel=new EITLTableModel();
    private boolean Updating=false;
    
    private boolean HistoryView=false;
    private String theDocNo="";
    private EITLTableModel DataModelHS;
    
    private boolean DoNotEvaluate=false;
    
    //public frmPendingApprovals frmPA;
    
    private EITLTableCellRenderer CellPainter=new EITLTableCellRenderer();
    
    private String OldFileName="";
    private JFileChooser fc = new JFileChooser();
    String cellLastValue="";
    
    /** Creates new form frmTemplate */
    public void init() {
        System.gc();
        setSize(675,510);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        // ((JFrame) getParent().getParent().getParent().getParent()).setTitle("Jay");
        
        FormatGrid();
        ObjFASItem=new clsFASItemMapping();
        
        SetMenuForRights();
        
        if(getName().equals("Link")) {
            
        }
        else {
            if(ObjFASItem.LoadData(EITLERPGLOBAL.gCompanyID)) {
                ObjFASItem.MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+ObjFASItem.LastError);
            }
        }
        
        
        DataModel.TableReadOnly(true);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        txtDocNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtItemID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblItemName = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        txtRemarks = new javax.swing.JTextField();
        lblRemarks = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText("FIXED ASSET ITEM MAPPING");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 666, 25);

        Tab1.setLayout(null);

        Tab1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });

        txtDocNo.setEditable(false);
        txtDocNo.setFocusable(false);
        txtDocNo.setNextFocusableComponent(txtDocDate);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(112, 14, 104, 20);

        jLabel3.setText("Date :");
        Tab1.add(jLabel3);
        jLabel3.setBounds(325, 14, 40, 20);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Item ID :");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel6);
        jLabel6.setBounds(20, 45, 85, 20);

        txtItemID.setName("PURPOSE");
        txtItemID.setNextFocusableComponent(txtRemarks);
        txtItemID.setEnabled(false);
        txtItemID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtItemIDFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtItemIDFocusLost(evt);
            }
        });
        txtItemID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemIDKeyPressed(evt);
            }
        });

        Tab1.add(txtItemID);
        txtItemID.setBounds(110, 45, 120, 20);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setNextFocusableComponent(cmdAdd);
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });

        jScrollPane1.setViewportView(Table);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 110, 628, 200);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setNextFocusableComponent(cmdRemove);
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        cmdAdd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdAddFocusGained(evt);
            }
        });

        Tab1.add(cmdAdd);
        cmdAdd.setBounds(430, 320, 90, 24);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        cmdRemove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdRemoveFocusGained(evt);
            }
        });

        Tab1.add(cmdRemove);
        cmdRemove.setBounds(530, 320, 90, 25);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 11));
        jLabel9.setForeground(new java.awt.Color(0, 153, 153));
        jLabel9.setText("Press Insert to Add new row, Delete - Remove row");
        Tab1.add(jLabel9);
        jLabel9.setBounds(10, 262, 294, 14);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Doc No :");
        Tab1.add(jLabel1);
        jLabel1.setBounds(20, 14, 85, 20);

        lblItemName.setText(".....");
        Tab1.add(lblItemName);
        lblItemName.setBounds(235, 45, 380, 20);

        txtDocDate.setEditable(false);
        txtDocDate.setEnabled(false);
        Tab1.add(txtDocDate);
        txtDocDate.setBounds(370, 14, 100, 20);

        txtRemarks.setNextFocusableComponent(cmdAdd);
        txtRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRemarksFocusGained(evt);
            }
        });

        Tab1.add(txtRemarks);
        txtRemarks.setBounds(110, 75, 470, 20);

        lblRemarks.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRemarks.setText("Remarks :");
        Tab1.add(lblRemarks);
        lblRemarks.setBounds(20, 75, 85, 20);

        Tab.addTab("Asset Item Information", Tab1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 654, 380);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 450, 650, 22);

    }//GEN-END:initComponents
    
    private void txtRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Remarks .......");
    }//GEN-LAST:event_txtRemarksFocusGained
    
    private void txtItemIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtItemIDFocusLost
        // TODO add your handling code here:
        lblItemName.setText(clsItem.getItemName(EITLERPGLOBAL.gCompanyID,txtItemID.getText().trim()));
    }//GEN-LAST:event_txtItemIDFocusLost
    
    private void txtItemIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemIDKeyPressed
        // TODO add your handling code here:
        if(EditMode!=0) {
            if(evt.getKeyCode()==112) {
                LOV aList=new LOV();
                aList.SQL="SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID = '" + EITLERPGLOBAL.gCompanyID + "' " +
                "AND APPROVED = 1 AND CANCELLED =0 AND CATEGORY_ID = 1 ORDER BY ITEM_ID";
                
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.SecondCol=2;
                
                if(aList.ShowLOV()) {
                    lblItemName.setText(aList.SecondVal);
                    txtItemID.setText(aList.ReturnVal);
                }
            }
        }
    }//GEN-LAST:event_txtItemIDKeyPressed
    
    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        // TODO add your handling code here:
        if(EditMode!=0) {
            if(evt.getKeyCode()==67&&evt.getModifiersEx()==128) //Ctrl+C Key Combonation
            {
                //Check that any row exist
                if(Table.getRowCount()>0) {
                    //First Add new row
                    Object[] rowData=new Object[1];
                    DataModel.addRow(rowData);
                    int NewRow=Table.getRowCount()-1;
                    
                    //Copy New row with Previous one
                    for(int i=0;i<Table.getColumnCount();i++) {
                        Table.setValueAt(Table.getValueAt(Table.getSelectedRow(),i), NewRow, i);
                    }
                }
            }
        }
    }//GEN-LAST:event_TableKeyReleased
    
    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        // TODO add your handling code here:
        txtDocDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained
    
    private void cmdRemoveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdRemoveFocusGained
        // TODO add your handling code here:
        ShowMessage("Click on this button to remove selected row from the table");
    }//GEN-LAST:event_cmdRemoveFocusGained
    
    private void cmdAddFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdAddFocusGained
        // TODO add your handling code here:
        ShowMessage("Click on this button to add a new row to table");
    }//GEN-LAST:event_cmdAddFocusGained
    
    private void txtItemIDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtItemIDFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the Item Id. Press F1 for Item List");
    }//GEN-LAST:event_txtItemIDFocusGained
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjFASItem.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        try {
            if(Table.getRowCount()>0) {
                
                if(Table.getSelectedRow()!=0) {
                    String FromDate=DataModel.getValueByVariable("FROM_DATE",Table.getSelectedRow()-1);
                    String ToDate = EITLERPGLOBAL.formatDate(clsDepositMaster.deductDays(EITLERPGLOBAL.formatDateDB(FromDate),2));
                    ToDate = ToDate.substring(0,6)+ String.valueOf(Integer.parseInt(ToDate.substring(6))+99);
                    DataModel.setValueByVariable("TO_DATE",ToDate, Table.getSelectedRow()-1);
                }
                int numrows = Table.getRowCount();
                int k = Table.getSelectedRow();
                for(int i = numrows - 1; i >=k; i--){
                    DataModel.removeRow(i);
                }
            }
        }catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        Updating=true;
        Object[] rowData=new Object[9];
        rowData[0]=Integer.toString(Table.getRowCount()+1);
        rowData[1]="";
        rowData[2]="";
        rowData[3]="";
        rowData[4]="";
        rowData[5]="0";
        rowData[6]="0";
        
        DataModel.addRow(rowData);
        Updating=false;
        Table.changeSelection(Table.getRowCount()-1, 1, false,false);
        Table.requestFocus();
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
        if(EditMode!=0) {
            if(Table.getSelectedColumn()==DataModel.getColFromVariable("METHOD_ID")) {
                if(evt.getKeyCode()==112) //F1 Key pressed
                {
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT PARA_CODE,D_COM_PARAMETER_MAST.DESC FROM D_COM_PARAMETER_MAST WHERE PARA_ID='METHOD' AND COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" ORDER BY PARA_CODE ";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=2;
                    
                    if(aList.ShowLOV()) {
                        if(Table.getCellEditor()!=null) {
                            Table.getCellEditor().stopCellEditing();
                        }
                        Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(),DataModel.getColFromVariable("METHOD_ID"));
                        Table.setValueAt(clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "METHOD",Integer.parseInt(aList.ReturnVal)), Table.getSelectedRow(),DataModel.getColFromVariable("METHOD_NAME"));
                    }
                }
            }
        }
    }//GEN-LAST:event_TableKeyPressed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JTable Table;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdTop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblItemName;
    private javax.swing.JLabel lblRemarks;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtItemID;
    private javax.swing.JTextField txtRemarks;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    private void SetFields(boolean pStat) {
        if(EditMode==EITLERPGLOBAL.ADD) {
            txtItemID.setEnabled(pStat);
        } else {
            txtItemID.setEnabled(false);
        }
        txtDocNo.setEnabled(pStat);
        txtDocDate.setEnabled(pStat);
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
    }
    
    private void ClearFields() {
        txtDocNo.setText("");
        txtDocDate.setText("");
        txtItemID.setText("");
        txtRemarks.setText("");
        lblItemName.setText("");
        FormatGrid();
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                if(ObjFASItem.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(ObjFASItem.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(ObjFASItem.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
        } catch(Exception c) {
        }
        //============================================//
        
        ClearFields();
        
        txtDocNo.setText(ObjFASItem.getAttribute("DOC_NO").getString());
        txtDocDate.setText(EITLERPGLOBAL.formatDate(ObjFASItem.getAttribute("DOC_DATE").getString()));
        lblTitle.setText("FIXED ASSET ITEM MAPPING - "+txtDocNo.getText());
        txtItemID.setText(ObjFASItem.getAttribute("ITEM_ID").getString());
        String lItemID = ObjFASItem.getAttribute("ITEM_ID").getString();
        String ItemName = "";
        if(!lItemID.equals("")) {
            if(lItemID.substring(0,2).equals("DI")) {
                ItemName = data.getStringValueFromDB("SELECT ITEM_DESC FROM D_FAS_MASTER_HEADER WHERE ASSET_TYPE = '2'  AND ITEM_ID = '" + lItemID + "' ",FinanceGlobal.FinURL);
            } else {
                ItemName=clsItem.getItemName(EITLERPGLOBAL.gCompanyID, ObjFASItem.getAttribute("ITEM_ID").getString());
            }
        }
        lblItemName.setText(ItemName);
        txtRemarks.setText(ObjFASItem.getAttribute("REMARKS").getString());
        
        FormatGrid();
        //Now Generate Table
        for(int i=1;i<=ObjFASItem.colFASItem.size();i++) {
            clsFASItem ObjItem=(clsFASItem)ObjFASItem.colFASItem.get(Integer.toString(i));
            Object[] rowData=new Object[9];
            
            rowData[0]=Integer.toString(ObjItem.getAttribute("SR_NO").getInt());
            rowData[1]=ObjItem.getAttribute("METHOD_ID").getString();
            rowData[2]=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "METHOD",Integer.parseInt(ObjItem.getAttribute("METHOD_ID").getString()));
            rowData[3]=EITLERPGLOBAL.formatDate(ObjItem.getAttribute("FROM_DATE").getString());
            rowData[4]=EITLERPGLOBAL.formatDate(ObjItem.getAttribute("TO_DATE").getString());
            rowData[5]=Double.toString(ObjItem.getAttribute("BOOK_PER").getDouble());
            rowData[6]=Double.toString(ObjItem.getAttribute("IT_PER").getDouble());
            rowData[7]=ObjItem.getAttribute("REMARKS").getString();
            if(ObjItem.getAttribute("CREATED_BY").getInt()!=0) {
                rowData[8]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,ObjItem.getAttribute("CREATED_BY").getInt());
            } else {
                rowData[8]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,ObjItem.getAttribute("MODIFIED_BY").getInt());
            }
            DataModel.addRow(rowData);
        }
    }
    
    //Sets data to the Class Object
    private void SetData() {
        
        ObjFASItem.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        ObjFASItem.setAttribute("DOC_NO",txtDocNo.getText().trim());
        ObjFASItem.setAttribute("DOC_DATE",txtDocDate.getText());
        ObjFASItem.setAttribute("ITEM_ID",txtItemID.getText().trim());
        ObjFASItem.setAttribute("REMARKS",txtRemarks.getText().trim().replace('\t', ' ').replace('\n',' '));
        ObjFASItem.setAttribute("FFNO",FFNo);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjFASItem.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            ObjFASItem.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDate());
            ObjFASItem.setAttribute("MODIFIED_BY",0);
            ObjFASItem.setAttribute("MODIFIED_DATE","0000-00-00");
        }
        else {
            ObjFASItem.setAttribute("CREATED_BY",0);
            ObjFASItem.setAttribute("CREATED_DATE","0000-00-00");
            ObjFASItem.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
            ObjFASItem.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDate());
        }
        
        //======= Set Line part ============
        ObjFASItem.colFASItem.clear();
        int counter=0;
        for(int i=0;i<Table.getRowCount();i++) {
            clsFASItem ObjItem=new clsFASItem();
            counter++;
            
            ObjItem.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
            ObjItem.setAttribute("DOC_NO",txtDocNo.getText().trim());
            ObjItem.setAttribute("SR_NO",counter);
            ObjItem.setAttribute("METHOD_ID",DataModel.getValueByVariable("METHOD_ID", i));
            ObjItem.setAttribute("FROM_DATE",DataModel.getValueByVariable("FROM_DATE", i));
            ObjItem.setAttribute("TO_DATE",DataModel.getValueByVariable("TO_DATE", i));
            ObjItem.setAttribute("BOOK_PER",Double.parseDouble(DataModel.getValueByVariable("BOOK_PER", i)));
            ObjItem.setAttribute("IT_PER",Double.parseDouble(DataModel.getValueByVariable("IT_PER", i)));
            ObjItem.setAttribute("REMARKS",DataModel.getValueByVariable("REMARKS", i));
            ObjFASItem.colFASItem.put(Integer.toString(ObjFASItem.colFASItem.size()+1), ObjItem);
        }
    }
    
    private void FormatGrid() {
        
        Updating=true; //Stops recursion
        
        try {
            cmdAdd.requestFocus();
            
            DataModel=new EITLTableModel();
            Table.removeAll();
            
            Table.setModel(DataModel);
            TableColumnModel ColModel=Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //Add Columns to it
            DataModel.addColumn("Sr."); //0 - Read Only
            DataModel.addColumn("Method ID"); //1
            DataModel.addColumn("Method Name"); //2
            DataModel.addColumn("From Date"); //3
            DataModel.addColumn("To Date"); //4 //Read Only
            DataModel.addColumn("Book Percentage");//5
            DataModel.addColumn("IT Percentage"); //6
            DataModel.addColumn("Remarks"); //7
            DataModel.addColumn("Created By"); //8
            
            
            DataModel.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModel.SetVariable(1,"METHOD_ID");
            DataModel.SetVariable(2,"METHOD_NAME");
            DataModel.SetVariable(3,"FROM_DATE"); //1
            DataModel.SetVariable(4,"TO_DATE"); //2 //Read Only
            DataModel.SetVariable(5,"BOOK_PER");
            DataModel.SetVariable(6,"IT_PER"); //4
            DataModel.SetVariable(7,"REMARKS"); //5
            DataModel.SetVariable(8,"CREATED_BY"); //6
            
            DataModel.TableReadOnly(false);
            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(1);
            DataModel.SetReadOnly(2);
            DataModel.SetReadOnly(4);
            DataModel.SetReadOnly(8);
            
            //----- Install Table Model Event Listener -------//
            
            Table.getModel().addTableModelListener(new TableModelListener() {
                public void tableChanged(TableModelEvent e) {
                    if (e.getType() == TableModelEvent.UPDATE) {
                        int col = e.getColumn();
                        
                        //=========== Cell Update Prevention Check ===========//
                        String curValue=(String)Table.getValueAt(Table.getSelectedRow(), e.getColumn());
                        if(curValue.equals(cellLastValue)) {
                            return;
                        }
                        //====================================================//
                        
                        if(col==DataModel.getColFromVariable("FROM_DATE")){
                            try {
                                String FromDate=DataModel.getValueByVariable("FROM_DATE",Table.getSelectedRow());
                                if(!FromDate.equals("")) {
                                    String ToDate = EITLERPGLOBAL.formatDate(clsDepositMaster.deductDays(EITLERPGLOBAL.formatDateDB(FromDate),2));
                                    ToDate = ToDate.substring(0,6)+ String.valueOf(Integer.parseInt(ToDate.substring(6))+99);
                                    DataModel.setValueByVariable("TO_DATE",ToDate, Table.getSelectedRow());
                                    
                                    if(Table.getSelectedRow()>0) {
                                        ToDate = DataModel.getValueByVariable("TO_DATE",Table.getSelectedRow());
                                        ToDate = EITLERPGLOBAL.formatDate(clsDepositMaster.deductDays(EITLERPGLOBAL.formatDateDB(FromDate),1));
                                        DataModel.setValueByVariable("TO_DATE",ToDate, Table.getSelectedRow()-1);
                                    }
                                }
                            }
                            catch(Exception ex){
                                //ex.printStackTrace();
                            }
                        }
                    }
                }
            });
            
        } catch(Exception e) {
        }
        Updating=false;
        //Table formatting completed
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,12061)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        //cmdEdit.setEnabled(true);
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,12062)) {
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }
    }
    
    private void Add() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        //Now Generate new document no.
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=clsFASItemMapping.ModuleID;
        //EITLERPGLOBAL.setComboIndex(cmbMethod,0);
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsFASItemMapping.ModuleID , FFNo,  false));
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
            
            lblTitle.setText("FAS ITEM MAPPING - "+txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
        
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        EITLERPGLOBAL.ChangeCursorToWait(this);
        EditMode=EITLERPGLOBAL.EDIT;
        
        //---New Change ---//
        DisplayData();
        //----------------//
        
        SetFields(true);
        DisableToolbar();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Delete() {
        
    }
    
    private void Save() {
        if(!Validate()) {
            return;
        }
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjFASItem.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjFASItem.LastError);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjFASItem.Update()) {
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjFASItem.LastError);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }
    
    private void Cancel() {
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Finance.frmFASItemMappingFind",true);
        frmFASItemMappingFind ObjReturn= (frmFASItemMappingFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!ObjFASItem.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveLast();
        }
        
    }
    
    private void MoveFirst() {
        ObjFASItem.MoveFirst();
        DisplayData();
    }
    
    private void MovePrevious() {
        ObjFASItem.MovePrevious();
        DisplayData();
    }
    
    private void MoveNext() {
        ObjFASItem.MoveNext();
        DisplayData();
    }
    
    private void MoveLast() {
        ObjFASItem.MoveLast();
        DisplayData();
    }
    
    public void FindEx(int pCompanyID,String pDocNo) {
        ObjFASItem.Filter(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND REQ_NO='"+pDocNo+"'",pCompanyID);
        ObjFASItem.MoveLast();
        DisplayData();
    }
    
    public void FindWaiting() {
        ObjFASItem.Filter(" WHERE REQ_NO IN (SELECT D_INV_REQ_HEADER.REQ_NO FROM D_INV_REQ_HEADER,D_COM_DOC_DATA WHERE D_INV_REQ_HEADER.REQ_NO=D_COM_DOC_DATA.DOC_NO AND D_INV_REQ_HEADER.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_INV_REQ_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND MODULE_ID=2)",EITLERPGLOBAL.gCompanyID);
        ObjFASItem.MoveLast();
        DisplayData();
    }
    
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
    
    
    private void EnableApproval() {
        //========== Setting Up Header Fields ================//
        String FieldName="";
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                FieldName=Tab1.getComponent(i).getName();
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        
        //=============== Setting Table Fields ==================//
        DataModel.ClearAllReadOnly();
        for(int i=0;i<Table.getColumnCount();i++) {
            FieldName=DataModel.getVariable(i);
            
            DataModel.SetReadOnly(i);
        }
        //=======================================================//
        
    }
    
    private boolean Validate() {
        //Check the no. of items
        try {
            if(txtItemID.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Please enter Item ID.");
                return false;
            }
            
            if(data.getIntValueFromDB("SELECT COUNT(*) FROM D_FAS_ITEM_MASTER_HEADER WHERE ITEM_ID = '" + txtItemID.getText().trim() + "' AND DOC_NO <> '" + txtDocNo.getText().trim() + "' ",FinanceGlobal.FinURL)>0) {
                JOptionPane.showMessageDialog(null,"Item ID is already Exits in Mapping.");
                return false;
            }
            
            String dIt = txtItemID.getText().substring(0,2);
            if(!txtItemID.getText().substring(0,2).toUpperCase().equals("DI")) {
                if(!clsItem.IsValidItemID(EITLERPGLOBAL.gCompanyID,txtItemID.getText().trim())) {
                    JOptionPane.showMessageDialog(null,"Please enter valid Item ID.");
                    return false;
                }
            }
            
            
            
            if(Table.getRowCount()<=0) {
                JOptionPane.showMessageDialog(null,"Please enter atleast one record in table.");
                return false;
            }
            String PreviosFromDate = "";
            for(int i=0;i<Table.getRowCount();i++) {
                String FromDate = DataModel.getValueByVariable("FROM_DATE", i);
                String ToDate = DataModel.getValueByVariable("TO_DATE", i);
                double BookPer = Double.parseDouble(DataModel.getValueByVariable("BOOK_PER", i));
                double ITPer = Double.parseDouble(DataModel.getValueByVariable("IT_PER", i));
                
                if(FromDate.equals("")) {
                    JOptionPane.showMessageDialog(null,"Please enter From Date at Sr. No. : " + (i+1));
                    return false;
                } else if(!EITLERPGLOBAL.isDate(FromDate)) {
                    JOptionPane.showMessageDialog(null,"Please enter valid From Date at Sr. No. : " + (i+1));
                    return false;
                }
                if(ToDate.equals("")) {
                    JOptionPane.showMessageDialog(null,"Please enter To Date at Sr. No. : " + (i+1));
                    return false;
                } else if(!EITLERPGLOBAL.isDate(ToDate)) {
                    JOptionPane.showMessageDialog(null,"Please enter valid To Date at Sr. No. : " + (i+1));
                    return false;
                }
                
                java.sql.Date DocDate = java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
                java.sql.Date FDate = java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(FromDate));
                
                
                if(BookPer<=0||ITPer<=0) {
                    JOptionPane.showMessageDialog(null,"Please enter valid Book Percentage or Income Tax Percentage at Sr. No. : " + (i+1));
                    return false;
                }
                if(BookPer>=100||ITPer>=100) {
                    JOptionPane.showMessageDialog(null,"Book Percentage or Income Tax Percentage more than 100% at Sr. No. : " + (i+1));
                    return false;
                }
                
                if(i==0) {
                    PreviosFromDate=EITLERPGLOBAL.formatDateDB(FromDate);
                    
                    if(!FromDate.trim().equals("")) {
                        if(FDate.after(DocDate)) {
                            JOptionPane.showMessageDialog(null,"From Date must be after the doc date.");
                            return false;
                        }
                    }
                    
                    
                } else {
                    if(!java.sql.Date.valueOf(PreviosFromDate).before(java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(FromDate)))) {
                        JOptionPane.showMessageDialog(null,"Invalid from date at Sr. No. : " + (i+1));
                        return false;
                    }
                    PreviosFromDate=EITLERPGLOBAL.formatDateDB(FromDate);
                }
                if(EITLERPGLOBAL.compareDate(FromDate,ToDate) != -1) {
                    JOptionPane.showMessageDialog(null,"From Date must be less than To Date at Sr. No. : " + (i+1));
                    return false;
                }
                
            }
            if(EditMode==EITLERPGLOBAL.EDIT) {
                int OldRecord = data.getIntValueFromDB("SELECT COUNT(*) FROM D_FAS_ITEM_MASTER_DETAIL WHERE DOC_NO='"+txtDocNo.getText().trim()+"' ",FinanceGlobal.FinURL);
                if(Table.getRowCount()<OldRecord) {
                    JOptionPane.showMessageDialog(null,"Old Record entered for item id ("+txtItemID.getText().trim()+") was "+OldRecord+".\n New records of "+Table.getRowCount()+" lines.");
                    return false;
                }
                
                java.sql.ResultSet rsData = data.getResult("SELECT * FROM D_FAS_ITEM_MASTER_DETAIL WHERE DOC_NO='"+txtDocNo.getText().trim()+"' ORDER BY SR_NO",FinanceGlobal.FinURL);
                int Counter =0;
                rsData.first();
                while(!rsData.isAfterLast()) {
                    Counter++;
                    
                    if(!rsData.getString("METHOD_ID").equals(DataModel.getValueByVariable("METHOD_ID",Counter-1))) {
                        JOptionPane.showMessageDialog(null,"Method ID in Old Record was "+rsData.getString("METHOD_ID")+" at Sr. No. "+Counter+".\nYou can not change old record.");
                        return false;
                    }
                    if(!rsData.getString("FROM_DATE").equals(EITLERPGLOBAL.formatDateDB(DataModel.getValueByVariable("FROM_DATE",Counter-1)))) {
                        JOptionPane.showMessageDialog(null,"From Date in Old Record was "+EITLERPGLOBAL.formatDate(rsData.getString("FROM_DATE"))+" " +
                        "at Sr. No. "+Counter+".\nYou can not change old record.");
                        return false;
                    }
                    if(rsData.getDouble("BOOK_PER")!=Double.parseDouble(DataModel.getValueByVariable("BOOK_PER",Counter-1))) {
                        JOptionPane.showMessageDialog(null,"Book Percentage in Old Record was "+rsData.getString("BOOK_PER")+" " +
                        "at Sr. No. "+Counter+".\nYou can not change old record.");
                        return false;
                    }
                    if(rsData.getDouble("IT_PER")!=Double.parseDouble(DataModel.getValueByVariable("IT_PER",Counter-1))) {
                        JOptionPane.showMessageDialog(null,"IT Percentage in Old Record was "+rsData.getString("IT_PER")+" " +
                        "at Sr. No. "+Counter+".\nYou can not change old record.");
                        return false;
                    }
                    rsData.next();
                }
            }
        }catch(Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
    
}
