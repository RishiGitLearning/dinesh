/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP.Finance;

/**
 *
 * @author  nhpatel
 */
/*<APPLET CODE=frmMR.class HEIGHT=550 WIDTH=665></APPLET>*/

import javax.swing.*;
import java.awt.*;
import EITLERP.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import javax.swing.text.*;
import java.awt.event.*;
import java.net.*;
import EITLERP.Utils.*;
import java.io.*;
import EITLERP.Purchase.*;
import EITLERP.Stores.*;
import java.sql.*;
import TReportWriter.*;
import EITLERP.Utils.SimpleDataProvider.*;
import EITLERP.Finance.Config.*;
import EITLERP.Finance.ReportsUI.*;

public class frmVoucher extends javax.swing.JApplet {
    
    private int EditMode=0;
    //private clsMaterialRequisition objVoucher;
    private clsVoucher objVoucher;
    
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromID=0;
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbModuleModel;
    
    private EITLTableModel DataModelA=new EITLTableModel();
    private EITLTableModel DataModel=new EITLTableModel();
    private EITLTableModel DataModelHS=new EITLTableModel();
    
    private EITLTableCellRenderer POColor=new EITLTableCellRenderer();
    
    private boolean Updating=false;
    
    private boolean HistoryView=false;
    private String theDocNo="";
    
    private boolean DoNotEvaluate=false;
    
    public frmPendingApprovals frmPA;
    
    String cellLastValue="";
    
    private TReportEngine objEngine=new TReportEngine();
    
    /** Creates new form frmTemplate */
    public void init() {
        System.gc();
        
        setSize(665,570);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        
        GenerateCombos();
        objVoucher=new clsVoucher();
        objVoucher.VoucherType=FinanceGlobal.TYPE_PJV;
        
        SetMenuForRights();
        
        if(getName().equals("Link")) {
            
        }
        else {
            if(objVoucher.LoadData(EITLERPGLOBAL.gCompanyID)) {
                objVoucher.MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+objVoucher.LastError);
            }
        }
        
        txtAuditRemarks.setVisible(false);
        DataModel.TableReadOnly(true);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        mnuOptions = new javax.swing.JPopupMenu();
        mnuSelect = new javax.swing.JPopupMenu();
        mnuSelectExpense = new javax.swing.JMenuItem();
        mnuSelectMIR = new javax.swing.JMenuItem();
        mnuShow = new javax.swing.JPopupMenu();
        mnuAdvancePayment = new javax.swing.JMenuItem();
        mnuBillwisePayment = new javax.swing.JMenuItem();
        mnuShowPO = new javax.swing.JMenuItem();
        mnuShowGRN = new javax.swing.JMenuItem();
        mnuShowExpenseHistory = new javax.swing.JMenuItem();
        mnuShowPurOutstanding = new javax.swing.JMenuItem();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        chkCancelled = new javax.swing.JCheckBox();
        lblRevNo = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtBookCode = new javax.swing.JTextField();
        txtBookName = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtChequeNo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtChequeDate = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtBankName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtChequeAmount = new javax.swing.JTextField();
        lblBalanceAll = new javax.swing.JLabel();
        lblBalance = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtRemarks = new javax.swing.JTextArea();
        cmdChange = new javax.swing.JButton();
        lblDueDate = new javax.swing.JLabel();
        cmdSelect = new javax.swing.JButton();
        cmdShowDocument = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtLegacyNo = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtLegacyDate = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtLinkNo = new javax.swing.JTextField();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack2 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        mnuSelectExpense.setLabel("Select Expense Entry for Payment Voucher");
        mnuSelectExpense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSelectExpenseActionPerformed(evt);
            }
        });

        mnuSelect.add(mnuSelectExpense);

        mnuSelectMIR.setText("Select MIR");
        mnuSelectMIR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSelectMIRActionPerformed(evt);
            }
        });

        mnuSelect.add(mnuSelectMIR);

        mnuAdvancePayment.setText("Advance Payment Details");
        mnuAdvancePayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAdvancePaymentActionPerformed(evt);
            }
        });
        mnuAdvancePayment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mnuAdvancePaymentMouseClicked(evt);
            }
        });

        mnuShow.add(mnuAdvancePayment);

        mnuBillwisePayment.setText("Billwise Payment Details");
        mnuBillwisePayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBillwisePaymentActionPerformed(evt);
            }
        });

        mnuShow.add(mnuBillwisePayment);

        mnuShowPO.setText("Show PO");
        mnuShowPO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShowPOActionPerformed(evt);
            }
        });

        mnuShow.add(mnuShowPO);

        mnuShowGRN.setLabel("Show Reference Document ");
        mnuShowGRN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShowGRNActionPerformed(evt);
            }
        });

        mnuShow.add(mnuShowGRN);

        mnuShowExpenseHistory.setText("Show  Expense History");
        mnuShowExpenseHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShowExpenseHistoryActionPerformed(evt);
            }
        });

        mnuShow.add(mnuShowExpenseHistory);

        mnuShowPurOutstanding.setText("Show Bill Purchase O/S");
        mnuShowPurOutstanding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShowPurOutstandingActionPerformed(evt);
            }
        });

        mnuShow.add(mnuShowPurOutstanding);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" VOUCHER");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 666, 25);

        Tab.setBackground(new java.awt.Color(238, 238, 238));
        Tab1.setLayout(null);

        Tab1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tab1MouseClicked(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Voucher No. :");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel2);
        jLabel2.setBounds(10, 16, 90, 15);

        txtDocNo.setNextFocusableComponent(txtDocDate);
        txtDocNo.setEnabled(false);
        txtDocNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDocNoFocusLost(evt);
            }
        });

        Tab1.add(txtDocNo);
        txtDocNo.setBounds(105, 14, 140, 19);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Date :");
        Tab1.add(jLabel3);
        jLabel3.setBounds(320, 15, 40, 15);

        txtDocDate.setName("REQ_DATE");
        txtDocDate.setNextFocusableComponent(txtBookCode);
        txtDocDate.setEnabled(false);
        txtDocDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDocDateFocusGained(evt);
            }
        });

        Tab1.add(txtDocDate);
        txtDocDate.setBounds(365, 15, 102, 19);

        chkCancelled.setText("Cancelled");
        chkCancelled.setEnabled(false);
        Tab1.add(chkCancelled);
        chkCancelled.setBounds(550, 6, 91, 23);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(297, 15, 44, 15);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Book Code :");
        Tab1.add(jLabel4);
        jLabel4.setBounds(10, 43, 90, 15);

        txtBookCode.setBackground(new java.awt.Color(255, 255, 204));
        txtBookCode.setName("REQ_DATE");
        txtBookCode.setNextFocusableComponent(txtLegacyNo);
        txtBookCode.setEnabled(false);
        txtBookCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBookCodeFocusLost(evt);
            }
        });
        txtBookCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBookCodeKeyPressed(evt);
            }
        });

        Tab1.add(txtBookCode);
        txtBookCode.setBounds(105, 41, 102, 19);

        txtBookName.setName("REMARKS");
        txtBookName.setEnabled(false);
        Tab1.add(txtBookName);
        txtBookName.setBounds(219, 41, 366, 19);

        jPanel2.setLayout(null);

        jPanel2.setBorder(new javax.swing.border.EtchedBorder());
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Cheque No. :");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(5, 12, 88, 15);

        txtChequeNo.setName("REQ_DATE");
        txtChequeNo.setEnabled(false);
        jPanel2.add(txtChequeNo);
        txtChequeNo.setBounds(100, 10, 102, 19);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Cheque Date :");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(210, 13, 90, 15);

        txtChequeDate.setName("REQ_DATE");
        txtChequeDate.setEnabled(false);
        jPanel2.add(txtChequeDate);
        txtChequeDate.setBounds(305, 10, 102, 19);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Bank :");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(410, 13, 40, 15);

        txtBankName.setName("REQ_DATE");
        txtBankName.setNextFocusableComponent(txtChequeAmount);
        txtBankName.setEnabled(false);
        jPanel2.add(txtBankName);
        txtBankName.setBounds(455, 10, 180, 19);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Amount :");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(5, 33, 88, 15);

        txtChequeAmount.setName("REQ_DATE");
        txtChequeAmount.setNextFocusableComponent(Table);
        txtChequeAmount.setEnabled(false);
        jPanel2.add(txtChequeAmount);
        txtChequeAmount.setBounds(100, 31, 102, 19);

        lblBalanceAll.setForeground(new java.awt.Color(153, 153, 153));
        lblBalanceAll.setText("....");
        jPanel2.add(lblBalanceAll);
        lblBalanceAll.setBounds(508, 34, 120, 15);

        lblBalance.setForeground(new java.awt.Color(102, 102, 255));
        lblBalance.setText("....");
        jPanel2.add(lblBalance);
        lblBalance.setBounds(346, 34, 110, 15);

        Tab1.add(jPanel2);
        jPanel2.setBounds(6, 91, 640, 60);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setNextFocusableComponent(cmdAdd);
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });

        jScrollPane1.setViewportView(Table);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(6, 157, 640, 160);

        cmdAdd.setFont(new java.awt.Font("Dialog", 0, 10));
        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add New");
        cmdAdd.setNextFocusableComponent(cmdRemove);
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        cmdAdd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdAddFocusGained(evt);
            }
        });

        Tab1.add(cmdAdd);
        cmdAdd.setBounds(474, 321, 80, 20);

        cmdRemove.setFont(new java.awt.Font("Dialog", 0, 10));
        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        cmdRemove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdRemoveFocusGained(evt);
            }
        });

        Tab1.add(cmdRemove);
        cmdRemove.setBounds(557, 321, 86, 20);

        txtRemarks.setEnabled(false);
        jScrollPane4.setViewportView(txtRemarks);

        Tab1.add(jScrollPane4);
        jScrollPane4.setBounds(7, 360, 630, 60);

        cmdChange.setText("...");
        cmdChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdChangeActionPerformed(evt);
            }
        });

        Tab1.add(cmdChange);
        cmdChange.setBounds(255, 14, 30, 20);

        lblDueDate.setText(".");
        Tab1.add(lblDueDate);
        lblDueDate.setBounds(10, 320, 210, 15);

        cmdSelect.setText("Select");
        cmdSelect.setEnabled(false);
        cmdSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSelectActionPerformed(evt);
            }
        });

        Tab1.add(cmdSelect);
        cmdSelect.setBounds(230, 320, 88, 20);

        cmdShowDocument.setText("Show Document");
        cmdShowDocument.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowDocumentActionPerformed(evt);
            }
        });

        Tab1.add(cmdShowDocument);
        cmdShowDocument.setBounds(330, 320, 136, 20);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Legacy No. :");
        Tab1.add(jLabel9);
        jLabel9.setBounds(10, 69, 90, 15);

        txtLegacyNo.setName("REQ_DATE");
        txtLegacyNo.setNextFocusableComponent(txtLegacyDate);
        txtLegacyNo.setEnabled(false);
        Tab1.add(txtLegacyNo);
        txtLegacyNo.setBounds(105, 67, 102, 19);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Legacy Date :");
        Tab1.add(jLabel10);
        jLabel10.setBounds(215, 70, 90, 15);

        txtLegacyDate.setName("REQ_DATE");
        txtLegacyDate.setNextFocusableComponent(txtLinkNo);
        txtLegacyDate.setEnabled(false);
        Tab1.add(txtLegacyDate);
        txtLegacyDate.setBounds(310, 68, 102, 19);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Link No. :");
        Tab1.add(jLabel11);
        jLabel11.setBounds(440, 70, 60, 15);

        txtLinkNo.setName("REQ_DATE");
        txtLinkNo.setNextFocusableComponent(txtChequeNo);
        txtLinkNo.setEnabled(false);
        Tab1.add(txtLinkNo);
        txtLinkNo.setBounds(510, 70, 102, 19);

        Tab.addTab("Voucher Information", Tab1);

        Tab2.setLayout(null);

        Tab2.setBackground(new java.awt.Color(238, 238, 238));
        Tab2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });

        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Hierarchy :");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 18, 90, 15);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });

        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(110, 14, 184, 24);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("From :");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 52, 90, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(110, 50, 182, 19);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel35.setText("Remarks :");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 82, 90, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(110, 78, 468, 19);

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Your Action :");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 120, 90, 15);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.setEnabled(false);
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.setEnabled(false);
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.setEnabled(false);
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.setEnabled(false);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });

        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(110, 120, 182, 100);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Send To :");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 232, 90, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });

        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(110, 228, 184, 24);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Remarks :");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 264, 90, 15);

        txtToRemarks.setNextFocusableComponent(cmdBack2);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });

        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(110, 260, 516, 19);

        cmdBack2.setText("<< Back");
        cmdBack2.setNextFocusableComponent(cmdRemove);
        cmdBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack2ActionPerformed(evt);
            }
        });

        Tab2.add(cmdBack2);
        cmdBack2.setBounds(534, 350, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(580, 80, 33, 21);

        Tab.addTab("Approval", Tab2);

        jPanel1.setLayout(null);

        jPanel1.setBackground(new java.awt.Color(238, 238, 238));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 614, 144);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 191, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(13, 207, 473, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        jPanel1.add(cmdViewHistory);
        cmdViewHistory.setBounds(498, 242, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        jPanel1.add(cmdNormalView);
        cmdNormalView.setBounds(498, 273, 132, 24);

        cmdPreviewA.setText("Preview Report");
        cmdPreviewA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewAActionPerformed(evt);
            }
        });

        jPanel1.add(cmdPreviewA);
        cmdPreviewA.setBounds(498, 209, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(498, 305, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel1.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(500, 334, 129, 19);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 654, 450);

        lblStatus.setBackground(new java.awt.Color(238, 238, 238));
        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(5, 520, 650, 22);

    }//GEN-END:initComponents
    
    private void mnuShowPurOutstandingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShowPurOutstandingActionPerformed
        // TODO add your handling code here:
        try {
            if(Table.getSelectedRow()>=0) {
                String MainCode = DataModel.getValueByVariable("MAIN_ACCOUNT_CODE", Table.getSelectedRow());
                String PartyCode = DataModel.getValueByVariable("SUB_ACCOUNT_CODE", Table.getSelectedRow());
                if(!PartyCode.equals("")) {
                    new frmRptPartyOutStanding().PreviewPartyReport(MainCode, PartyCode);
                }
            }
        } catch(Exception e) {
        }
    }//GEN-LAST:event_mnuShowPurOutstandingActionPerformed
    
    private void mnuSelectMIRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSelectMIRActionPerformed
        // TODO add your handling code here:
        try {
            frmSelectMIRJob objDialog=new frmSelectMIRJob();
            objDialog.DocNoLabel="MIR No.";
            objDialog.ShowDialog();
            
            if(!objDialog.cancelled) {
                String MIRNo=objDialog.DocNo;
                int RefCompanyID=objDialog.CompanyID;
                String dbURL=clsFinYear.getDBURL(RefCompanyID,EITLERPGLOBAL.FinYearFrom);
                
                ResultSet rsMIR=data.getResult("SELECT MIR_NO,MIR_DATE,INVOICE_NO,INVOICE_DATE FROM D_INV_MIR_HEADER WHERE MIR_NO='"+MIRNo+"' AND APPROVED=1 AND CANCELLED=0",dbURL);
                rsMIR.first();
                /*String SuppID=UtilFunctions.getString(rsMIR,"SUPP_ID","");
                String SQL = "SELECT * FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='125033' AND SUB_ACCOUNT_CODE IN ('602132','604113','619006') AND SUB_ACCOUNT_CODE='"+SuppID+"' ";
                if(!data.IsRecordExist(SQL,FinanceGlobal.FinURL)) {
                    JOptionPane.showMessageDialog(this,"Only 602132,604113 and 619006 parties are allowed.");
                    return;
                }*/
                
                int Type = clsMIRGen.getMIRTypeEx(dbURL, MIRNo);
                double MIRAmount = clsMIRGen.getFreightOtherCharges(MIRNo, dbURL, Type);
                
                if(rsMIR.getRow()>0) {
                    
                    String MIRDate=EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsMIR,"MIR_DATE","0000-00-00"));
                    String InvoiceNo = UtilFunctions.getString(rsMIR,"INVOICE_NO","");
                    String InvoiceDate = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsMIR,"INVOICE_DATE","0000-00-00"));
                    int MIRModuleID=clsMIRGen.getModuleID(MIRNo,dbURL);
                    String PONo = data.getStringValueFromDB("SELECT PO_NO FROM D_INV_MIR_DETAIL WHERE MIR_NO='"+MIRNo+"' ", dbURL);
                    String PODate = EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT PO_DATE FROM D_PUR_PO_HEADER WHERE PO_NO='"+PONo+"' ", dbURL));
                    Object[] rowData=new Object[1];
                    rowData[0]="1";
                    DataModel.addRow(rowData);
                    
                    int NewRow=Table.getRowCount()-1;
                    
                    DataModel.setValueByVariable("SR_NO",Integer.toString(NewRow+1),NewRow);
                    DataModel.setValueByVariable("INVOICE_NO",InvoiceNo,NewRow);
                    DataModel.setValueByVariable("INVOICE_DATE",InvoiceDate,NewRow);
                    DataModel.setValueByVariable("INVOICE_AMOUNT","0",NewRow);
                    DataModel.setValueByVariable("DEDUCTIONS","0",NewRow);
                    DataModel.setValueByVariable("AMOUNT",Double.toString(MIRAmount),NewRow);
                    DataModel.SetUserObject(NewRow, new HashMap());
                    DataModel.setValueByVariable("PO_NO",PONo,NewRow);
                    DataModel.setValueByVariable("PO_DATE",PODate,NewRow);
                    DataModel.setValueByVariable("REF_NO",MIRNo,NewRow);
                    DataModel.setValueByVariable("REF_DATE",MIRDate,NewRow);
                    DataModel.setValueByVariable("MODULE_ID",Integer.toString(MIRModuleID),NewRow);
                    DataModel.setValueByVariable("MODULE_NAME",clsModules.getModuleName(EITLERPGLOBAL.gCompanyID,MIRModuleID),NewRow);
                    DataModel.setValueByVariable("REF_COMPANY_ID",Integer.toString(RefCompanyID),NewRow);
                    DataModel.setValueByVariable("REF_COMPANY_NAME",clsCompany.getCompanyName(RefCompanyID),NewRow);
                    DataModel.setValueByVariable("LINK_NO","",NewRow);
                    DataModel.setValueByVariable("HSN_SAC_CODE","",NewRow);
                    DataModel.setValueByVariable("ITEM_DESCRIPTION","",NewRow);
                    DataModel.setValueByVariable("GSTN_RATE","",NewRow);
                    
                    
                    
                } else {
                    JOptionPane.showMessageDialog(null,"Invalid MIR No. Please correct and retry");
                    return;
                }
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_mnuSelectMIRActionPerformed
    
    private void cmdShowDocumentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowDocumentActionPerformed
        // TODO add your handling code here:
        mnuShow.show(Tab1, cmdShowDocument.getX(), cmdShowDocument.getY()+cmdShowDocument.getHeight());
    }//GEN-LAST:event_cmdShowDocumentActionPerformed
    
    private void cmdSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSelectActionPerformed
        // TODO add your handling code here:
        mnuSelect.show(Tab1, cmdSelect.getX(), cmdSelect.getY()+cmdSelect.getHeight());
    }//GEN-LAST:event_cmdSelectActionPerformed
    
    private void mnuShowExpenseHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShowExpenseHistoryActionPerformed
        // TODO add your handling code here:
        try {
            if(Table.getSelectedRow()>=0) {
                String GRNNo=DataModel.getValueByVariable("REF_NO",Table.getSelectedRow());
                int ModuleID=UtilFunctions.CInt(DataModel.getValueByVariable("MODULE_ID",Table.getSelectedRow()));
                
                if(ModuleID==63) {
                    String ExpenseID=data.getStringValueFromDB("SELECT EXPENSE_ID FROM D_FIN_EXPENSE_TRANSACTION WHERE DOC_NO='"+GRNNo+"'",FinanceGlobal.FinURL);
                    frmExpenseList objList=new frmExpenseList();
                    
                    objList.ExpesneID=ExpenseID;
                    objList.ShowDialog();
                    
                }
                
            }
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_mnuShowExpenseHistoryActionPerformed
    
    private void mnuSelectExpenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSelectExpenseActionPerformed
        // TODO add your handling code here:
        try {
            
            String InvoiceNo="",InvoiceDate="",RefNo="",RefDate="",PONo="",PODate="";
            
            frmSelectionExpense objSelect=new frmSelectionExpense();
            objSelect.ShowDialog();
            
            if(!objSelect.Cancelled) {
                
                double AmountTotal=0;
                
                FormatGrid();
                
                for(int r=1;r<=objSelect.SelectedItems.size();r++) {
                    clsVoucher objItem=(clsVoucher)objSelect.SelectedItems.get(Integer.toString(r));
                    
                    AmountTotal+=(objItem.getAttribute("INVOICE_AMOUNT").getDouble()-objItem.getAttribute("PAID_AMOUNT").getDouble());
                    
                    //==============================================================//
                    //^^^^^^^^^^^^^^^^^^^^^  Credit Entry ^^^^^^^^^^^^^^^^^^^^^^^^^//
                    //=============================================================//
                    Object[] rowData=new Object[1];
                    rowData[0]="1";
                    DataModel.addRow(rowData);
                    
                    int NewRow=Table.getRowCount()-1;
                    
                    String PaymentAc=data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM D_FIN_TR_MAPPING WHERE TR_CODE='"+txtBookCode.getText()+"'",FinanceGlobal.FinURL);
                    
                    if(PaymentAc.trim().equals("")) {
                        PaymentAc="<Payment A/c>";
                    }
                    
                    DataModel.setValueByVariable("EFFECT","Cr", NewRow);
                    DataModel.setValueByVariable("MAIN_ACCOUNT_CODE",PaymentAc, NewRow);
                    DataModel.setValueByVariable("SUB_ACCOUNT_CODE","",NewRow);
                    DataModel.setValueByVariable("ACCOUNT_NAME",clsAccount.getAccountName(PaymentAc, "")  , NewRow);
                    DataModel.setValueByVariable("AMOUNT", Double.toString(objItem.getAttribute("INVOICE_AMOUNT").getDouble()-objItem.getAttribute("PAID_AMOUNT").getDouble()) ,NewRow);
                    DataModel.setValueByVariable("REMARKS","",NewRow);
                    //if(Table.getRowCount()>1) {
                    DataModel.SetUserObject(NewRow,new HashMap());
                    //} else {
                    //DataModel.SetUserObject(0,new HashMap());
                    //}
                    PONo="";
                    PODate="";
                    InvoiceNo=objItem.getAttribute("INVOICE_NO").getString();
                    InvoiceDate=objItem.getAttribute("INVOICE_DATE").getString();
                    RefNo=objItem.getAttribute("DOC_NO").getString();
                    RefDate=objItem.getAttribute("DOC_DATE").getString();
                    
                    DataModel.setValueByVariable("PO_NO","",NewRow);
                    DataModel.setValueByVariable("PO_DATE","0000-00-00",NewRow);
                    DataModel.setValueByVariable("INVOICE_NO",objItem.getAttribute("INVOICE_NO").getString(),NewRow);
                    DataModel.setValueByVariable("INVOICE_DATE",objItem.getAttribute("INVOICE_DATE").getString(),NewRow);
                    DataModel.setValueByVariable("REF_NO",objItem.getAttribute("DOC_NO").getString(),NewRow);
                    DataModel.setValueByVariable("REF_DATE",objItem.getAttribute("DOC_DATE").getString(),NewRow);
                    DataModel.setValueByVariable("MODULE_ID","63",NewRow);
                    DataModel.setValueByVariable("MODULE_NAME",clsModules.getModuleName(EITLERPGLOBAL.gCompanyID, 63), NewRow);
                    DataModel.setValueByVariable("LINK_NO","",NewRow);
                    DataModel.setValueByVariable("HSN_SAC_CODE","",NewRow);
                    DataModel.setValueByVariable("ITEM_DESCRIPTION","",NewRow);
                    DataModel.setValueByVariable("GSTN_RATE","",NewRow);
                    
                    
                    
                }
                
                Object[] rowData=new Object[1];
                
                rowData[0]="1";
                
                DataModel.addRow(rowData);
                
                int NewRow=Table.getRowCount()-1;
                
                DataModel.setValueByVariable("EFFECT","Dr", NewRow);
                DataModel.setValueByVariable("MAIN_ACCOUNT_CODE","", NewRow);
                DataModel.setValueByVariable("SUB_ACCOUNT_CODE","<Party A/c>",NewRow);
                DataModel.setValueByVariable("ACCOUNT_NAME",clsPartyMaster.getAccountName("",objSelect.PartyCode) , NewRow);
                DataModel.setValueByVariable("AMOUNT", Double.toString(AmountTotal) ,NewRow);
                DataModel.SetUserObject(NewRow,new HashMap());
                DataModel.setValueByVariable("REMARKS","",NewRow);
                DataModel.setValueByVariable("PO_NO",PONo,NewRow);
                DataModel.setValueByVariable("PO_DATE",PODate,NewRow);
                DataModel.setValueByVariable("INVOICE_NO",InvoiceNo,NewRow);
                DataModel.setValueByVariable("INVOICE_DATE",InvoiceDate,NewRow);
                DataModel.setValueByVariable("REF_NO",RefNo,NewRow);
                DataModel.setValueByVariable("REF_DATE",RefDate,NewRow);
                DataModel.setValueByVariable("MODULE_ID","63",NewRow);
                DataModel.setValueByVariable("MODULE_NAME",clsModules.getModuleName(EITLERPGLOBAL.gCompanyID, 63), NewRow);
                DataModel.setValueByVariable("LINK_NO","",NewRow);
                DataModel.setValueByVariable("HSN_SAC_CODE","",NewRow);
                DataModel.setValueByVariable("ITEM_DESCRIPTION","",NewRow);
                DataModel.setValueByVariable("GSTN_RATE","",NewRow);
                
                
                
            }
            
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_mnuSelectExpenseActionPerformed
    
    private void mnuShowGRNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShowGRNActionPerformed
        // TODO add your handling code here:
        try {
            
            int ModuleID=UtilFunctions.CInt(DataModel.getValueByVariable("MODULE_ID", Table.getSelectedRow()));
            
            if(ModuleID==7) {
                String DocNo=DataModel.getValueByVariable("REF_NO", Table.getSelectedRow());
                AppletFrame aFrame=new AppletFrame("GRN General");
                aFrame.startAppletEx("EITLERP.Stores.frmGRNGen","GRN General");
                frmGRNGen ObjDoc=(frmGRNGen) aFrame.ObjApplet;
                int CompanyID=UtilFunctions.CInt(DataModel.getValueByVariable("REF_COMPANY_ID", Table.getSelectedRow()));
                ObjDoc.FindByCompany(CompanyID,DocNo);
                
            }
            
            if(ModuleID==8) {
                String DocNo=DataModel.getValueByVariable("REF_NO", Table.getSelectedRow());
                AppletFrame aFrame=new AppletFrame("GRN Raw Material");
                aFrame.startAppletEx("EITLERP.Stores.frmGRN","GRN Raw Material");
                frmGRN ObjDoc=(frmGRN) aFrame.ObjApplet;
                int CompanyID=UtilFunctions.CInt(DataModel.getValueByVariable("REF_COMPANY_ID", Table.getSelectedRow()));
                ObjDoc.FindByCompany(CompanyID,DocNo);
                
            }
            
            if(ModuleID==48) {
                String DocNo=DataModel.getValueByVariable("REF_NO", Table.getSelectedRow());
                AppletFrame aFrame=new AppletFrame("Job Entry");
                aFrame.startAppletEx("EITLERP.Stores.frmJobwork","Job Entry");
                frmJobwork ObjDoc=(frmJobwork) aFrame.ObjApplet;
                int CompanyID=UtilFunctions.CInt(DataModel.getValueByVariable("REF_COMPANY_ID", Table.getSelectedRow()));
                ObjDoc.FindByCompany(CompanyID,DocNo);
                
            }
            
            if(ModuleID==35) {
                String DocNo=DataModel.getValueByVariable("REF_NO", Table.getSelectedRow());
                AppletFrame aFrame=new AppletFrame("MIR Service");
                aFrame.startAppletEx("EITLERP.Stores.frmMIRService","MIR Service");
                EITLERP.Stores.frmMIRService ObjDoc=(EITLERP.Stores.frmMIRService) aFrame.ObjApplet;
                int CompanyID=UtilFunctions.CInt(DataModel.getValueByVariable("REF_COMPANY_ID", Table.getSelectedRow()));
                ObjDoc.FindByCompany(CompanyID,DocNo);
                
            }
            
            
            if(ModuleID==63) {
                String DocNo=DataModel.getValueByVariable("REF_NO", Table.getSelectedRow());
                AppletFrame aFrame=new AppletFrame("Expense Transaction");
                aFrame.startAppletEx("EITLERP.Finance.frmExpenseTransaction","Expense Transaction");
                frmExpenseTransaction ObjDoc=(frmExpenseTransaction) aFrame.ObjApplet;
                int CompanyID=UtilFunctions.CInt(DataModel.getValueByVariable("REF_COMPANY_ID", Table.getSelectedRow()));
                ObjDoc.FindEx(CompanyID, DocNo);
            }
            
            /*if(ModuleID==6) {
                String DocNo=DataModel.getValueByVariable("REF_NO", Table.getSelectedRow());
                AppletFrame aFrame=new AppletFrame("MIR General");
                aFrame.startAppletEx("EITLERP.Stores.frmGRNGen","GRN General");
                frmGRNGen ObjDoc=(frmGRNGen) aFrame.ObjApplet;
                int CompanyID=UtilFunctions.CInt(DataModel.getValueByVariable("REF_COMPANY_ID", Table.getSelectedRow()));
                ObjDoc.FindByCompany(CompanyID,DocNo);
             
            }*/
            
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_mnuShowGRNActionPerformed
    
    private void mnuShowPOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShowPOActionPerformed
        // TODO add your handling code here:
        try {
            
            String PONo=DataModel.getValueByVariable("PO_NO", Table.getSelectedRow());
            if(!PONo.trim().equals("")) {
                String DocNo=PONo;
                int POType=clsPOGen.getPOType(EITLERPGLOBAL.gCompanyID,DocNo);
                AppletFrame aFrame=new AppletFrame("Purchase Order");
                aFrame.startAppletEx("EITLERP.Purchase.frmPOGen","Purchase Order");
                frmPOGen ObjDoc=(frmPOGen) aFrame.ObjApplet;
                ObjDoc.POType=POType;
                int CompanyID=UtilFunctions.CInt(DataModel.getValueByVariable("REF_COMPANY_ID", Table.getSelectedRow()));
                ObjDoc.FindByCompany(CompanyID,DocNo);
                
            }
            
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_mnuShowPOActionPerformed
    
    private void txtDocNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocNoFocusLost
        // TODO add your handling code here:
        try {
            if(txtDocNo.getText().length()==2) {
                //Update this with last voucher no. of this series
                if(data.IsRecordExist("SELECT VOUCHER_NO FROM D_FIN_VOUCHER_HEADER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND VOUCHER_NO LIKE '%"+txtDocNo.getText()+"%'",FinanceGlobal.FinURL)) {
                    String LastDocNo=data.getStringValueFromDB("SELECT MAX(VOUCHER_NO) AS VOUCHER_NO FROM D_FIN_VOUCHER_HEADER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND VOUCHER_NO LIKE '%"+txtDocNo.getText()+"%'",FinanceGlobal.FinURL);
                    txtDocNo.setText(LastDocNo);
                    txtDocNo.requestFocus();
                }
                
            }
            
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_txtDocNoFocusLost
    
    private void cmdChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdChangeActionPerformed
        // TODO add your handling code here:
        txtDocNo.setEnabled(false);
        txtDocNo.requestFocus();
    }//GEN-LAST:event_cmdChangeActionPerformed
    
    private void mnuBillwisePaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBillwisePaymentActionPerformed
        // TODO add your handling code here:
        try {
            
            if(Table.getSelectedRow()>=0) {
                frmRptPartyPaymentInfo objForm=new frmRptPartyPaymentInfo();
                objForm.PartyCode=DataModel.getValueByVariable("SUB_ACCOUNT_CODE", Table.getSelectedRow());
                objForm.PONo=DataModel.getValueByVariable("PO_NO",Table.getSelectedRow());
                objForm.ShowDialog();
            }
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_mnuBillwisePaymentActionPerformed
    
    private void mnuAdvancePaymentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mnuAdvancePaymentMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_mnuAdvancePaymentMouseClicked
    
    private void mnuAdvancePaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAdvancePaymentActionPerformed
        // TODO add your handling code here:
        try {
            if(Table.getSelectedRow()>=0) {
                
                frmRptAdvancePayment objForm=new frmRptAdvancePayment();
                objForm.PartyCode=DataModel.getValueByVariable("SUB_ACCOUNT_CODE", Table.getSelectedRow());
                objForm.PONo=DataModel.getValueByVariable("PO_NO",Table.getSelectedRow());
                objForm.ShowDialog();
            }
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_mnuAdvancePaymentActionPerformed
    
    private void txtBookCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBookCodeFocusLost
        // TODO add your handling code here:
        try {
            if(txtBookCode.getText().trim().equals("") || txtBookCode.getText().length()!=2) {
                JOptionPane.showMessageDialog(null,"Book Code "+txtBookCode.getText().trim()+" is not valid. Please check and correct it");
                txtBookCode.setText("");
                txtBookCode.requestFocus();
                return;
            }
            if(!data.IsRecordExist("SELECT BOOK_CODE FROM D_FIN_BOOK_MASTER WHERE BOOK_CODE='"+txtBookCode.getText().trim()+"'",FinanceGlobal.FinURL)) {
                JOptionPane.showMessageDialog(null,"Book Code "+txtBookCode.getText().trim()+" is not valid. Please check and correct it");
                txtBookCode.setText("");
                txtBookCode.requestFocus();
                return;
            }
            txtBookName.setText(clsBook.getBookName(EITLERPGLOBAL.gCompanyID, txtBookCode.getText()));
            
            if(EditMode==EITLERPGLOBAL.ADD) {
                String newVoucherNo=clsVoucher.getNextVoucherNo(EITLERPGLOBAL.gCompanyID, txtBookCode.getText(), SelPrefix);
                txtDocNo.setText(newVoucherNo);
            }
            
            if(EditMode==EITLERPGLOBAL.EDIT) {
                //if(ApprovalFlow.IsCreator(clsVoucher.ModuleID, objVoucher.getAttribute("VOUCHER_NO").getString()))
                //{
                if(!txtBookCode.getText().trim().equals(objVoucher.getAttribute("BOOK_CODE").getString())) {
                    SelPrefix=txtDocNo.getText().substring(0,2);
                    String newVoucherNo=clsVoucher.getNextVoucherNo(EITLERPGLOBAL.gCompanyID, txtBookCode.getText(), SelPrefix);
                    txtDocNo.setText(newVoucherNo);
                    objVoucher.ChangeVoucherNo=true;
                }
                //}
            }
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_txtBookCodeFocusLost
    
    private void txtBookCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBookCodeKeyPressed
        // TODO add your handling code here:
        try {
            
            if(evt.getKeyCode()==112) {
                String BookCode = "";
                if(EITLERPGLOBAL.gCompanyID==2) {
                    BookCode="('40','41','42','43')";
                } else {
                    BookCode="('61','63')";
                }
                LOV aList=new LOV();
                
                aList.SQL="SELECT BOOK_CODE,BOOK_NAME FROM D_FIN_BOOK_MASTER WHERE BOOK_CODE IN "+BookCode+" ORDER BY BOOK_NAME";
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=FinanceGlobal.FinURL;
                
                if(aList.ShowLOV()) {
                    txtBookCode.setText(aList.ReturnVal);
                    txtBookName.setText(clsBook.getBookName(EITLERPGLOBAL.gCompanyID, txtBookCode.getText()));
                }
                
            }
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_txtBookCodeKeyPressed
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
        
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void cmdPreviewAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewAActionPerformed
        // TODO add your handling code here:
        PreviewAuditReport();
    }//GEN-LAST:event_cmdPreviewAActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        objVoucher.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo=txtDocNo.getText();
        objVoucher.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        // TODO add your handling code here:
        if(EditMode!=0) {
            if(evt.getKeyCode()==67&&evt.getModifiersEx()==128) //Ctrl+C Key Combonation
            {
                //Check that any row exist
                if(Table.getRowCount()>0) {
                    //First Add new row
                    Object[] rowData=new Object[1];
                    DataModel.addRow(rowData);
                    int NewRow=Table.getRowCount()-1;
                    
                    //Copy New row with Previous one
                    for(int i=0;i<Table.getColumnCount();i++) {
                        Table.setValueAt(Table.getValueAt(Table.getSelectedRow(),i), NewRow, i);
                    }
                }
            }
        }
        
    }//GEN-LAST:event_TableKeyReleased
    
    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        // TODO add your handling code here:
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained
    
    private void cmdBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack2ActionPerformed
    
    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        // TODO add your handling code here:
        txtDocDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void cmdRemoveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdRemoveFocusGained
        // TODO add your handling code here:
        ShowMessage("Click on this button to remove selected row from the table");
    }//GEN-LAST:event_cmdRemoveFocusGained
    
    private void cmdAddFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdAddFocusGained
        // TODO add your handling code here:
        ShowMessage("Click on this button to add a new row to table");
    }//GEN-LAST:event_cmdAddFocusGained
    
    private void txtDocDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter MR Date");
    }//GEN-LAST:event_txtDocDateFocusGained
    
    private void Tab1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tab1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Tab1MouseClicked
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if(ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID,2,txtDocNo.getText())) {
                cmbSendTo.setEnabled(true);
            }
            else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateFromCombo();
        }
        
        
        
        
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgHoldItemStateChanged
    
    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_OpgRejectItemStateChanged
    
    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgFinalItemStateChanged
    
    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgApproveItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        objVoucher.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        
        try {
            if(Table.getRowCount()>0) {
                int CurrentRow=Table.getSelectedRow();
                int clearRow = Table.getSelectedRow();
                if(CurrentRow>0) {
                    CurrentRow--;
                }
                
                DataModel.removeRow(Table.getSelectedRow());
                
                if(Table.getRowCount()-1>CurrentRow) {
                    Table.changeSelection(CurrentRow, DataModel.getColFromVariable("AMOUNT"),false,false);
                }
                //UpdateTotals();
                for(int i=0;i<Table.getRowCount();i++) {
                    try {
                        if(!DataModel.getUserObject(i).equals("") ) {
                            
                        } else {
                            //DataModel.SetUserObject(clearRow,new HashMap());
                            DataModel.SetUserObject(i,new HashMap());
                        }
                    } catch(Exception e) {
                        DataModel.SetUserObject(i,new HashMap());
                    }
                }
                
                
            }
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        Updating=true;
        Object[] rowData=new Object[7];
        rowData[0]=Integer.toString(Table.getRowCount()+1);
        rowData[1]="";
        rowData[2]="";
        rowData[3]="";
        rowData[4]="";
        rowData[5]="0";
        rowData[6]="0";
        DataModel.addRow(rowData);
        
        if(Table.getRowCount()>1) {
            int NewRow=Table.getRowCount()-1;
            
            //Add Last Row References
            DataModel.SetUserObject(NewRow,new HashMap());
            DataModel.setValueByVariable("PO_NO",DataModel.getValueByVariable("PO_NO", NewRow-1) ,NewRow);
            DataModel.setValueByVariable("PO_DATE",DataModel.getValueByVariable("PO_DATE", NewRow-1) ,NewRow);
            DataModel.setValueByVariable("INVOICE_NO",DataModel.getValueByVariable("INVOICE_NO", NewRow-1) ,NewRow);
            DataModel.setValueByVariable("INVOICE_DATE",DataModel.getValueByVariable("INVOICE_DATE", NewRow-1),NewRow);
            DataModel.setValueByVariable("REF_NO",DataModel.getValueByVariable("REF_NO", NewRow-1),NewRow);
            DataModel.setValueByVariable("REF_DATE",DataModel.getValueByVariable("REF_DATE", NewRow-1),NewRow);
            DataModel.setValueByVariable("MODULE_ID",DataModel.getValueByVariable("MODULE_ID", NewRow-1) ,NewRow);
            DataModel.setValueByVariable("MODULE_NAME",DataModel.getValueByVariable("MODULE_NAME", NewRow-1), NewRow);
            DataModel.setValueByVariable("INVOICE_AMOUNT",DataModel.getValueByVariable("INVOICE_AMOUNT", NewRow-1), NewRow);
            DataModel.setValueByVariable("REF_COMPANY_ID",DataModel.getValueByVariable("REF_COMPANY_ID", NewRow-1), NewRow);
            DataModel.setValueByVariable("REF_COMPANY_NAME",DataModel.getValueByVariable("REF_COMPANY_NAME", NewRow-1), NewRow);
            DataModel.setValueByVariable("LINK_NO","",NewRow);
            DataModel.setValueByVariable("HSN_SAC_CODE",DataModel.getValueByVariable("HSN_SAC_CODE", NewRow-1), NewRow);
            DataModel.setValueByVariable("ITEM_DESCRIPTION",DataModel.getValueByVariable("ITEM_DESCRIPTION", NewRow-1), NewRow);
            DataModel.setValueByVariable("GSTN_RATE",DataModel.getValueByVariable("GSTN_RATE", NewRow-1), NewRow); 
            
            
        } else {
            DataModel.SetUserObject(0,new HashMap());
        }
        Updating=false;
        
        
        Table.changeSelection(Table.getRowCount()-1, 1, false,false);
        Table.requestFocus();
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
        try {
            
            if(evt.getKeyCode()==112) { //F1 Key
                if(Table.getSelectedColumn()==DataModel.getColFromVariable("DEDUCTIONS")) {
                    frmPaymentDeductions objForm=new frmPaymentDeductions();
                    objForm.vType = FinanceGlobal.TYPE_PJV;
                    //objForm.InvoiceNo=DataModel.getValueByVariable("INVOICE_NO", Table.getSelectedRow());
                    if(DataModel.getUserObject(Table.getSelectedRow()).equals("") ) {
                        objForm.colDeductions=new HashMap();
                    }
                    else {
                        objForm.colDeductions=(HashMap)DataModel.getUserObject(Table.getSelectedRow());
                    }
                    
                    if(objForm.ShowList()) //Ok Pressed
                    {
                        DataModel.SetUserObject(Table.getSelectedRow(),objForm.colDeductions);
                        //Show Updated Qty.
                        double TotalAmount=0;
                        for(int i=1;i<=objForm.colDeductions.size();i++) {
                            clsVoucherItem ObjItemLot=(clsVoucherItem)objForm.colDeductions.get(Integer.toString(i));
                            TotalAmount=TotalAmount+ObjItemLot.getAttribute("AMOUNT").getDouble();
                        }
                        
                        if(EditMode!=0) {
                            DataModel.setValueByVariable("DEDUCTIONS",Double.toString(TotalAmount),Table.getSelectedRow());
                        }
                    }
                }
            }
            
            if(EditMode!=0) //Only Process keys when in editing mode
            {
                
                if(Table.getSelectedColumn()==DataModel.getColFromVariable("EFFECT")) {
                    if(evt.getKeyCode()==67) {
                        DataModel.setValueByVariable("EFFECT","Cr", Table.getSelectedRow());
                    }
                    if(evt.getKeyCode()==68){
                        DataModel.setValueByVariable("EFFECT","Dr", Table.getSelectedRow());
                    }
                }
                
                if(evt.getKeyCode()==112) //F1 Key pressed
                {
                    
                    if(Table.getSelectedColumn()==DataModel.getColFromVariable("MODULE_NAME")) {
                        LOV aList=new LOV();
                        
                        aList.SQL="SELECT MODULE_ID,MODULE_DESC FROM D_COM_MODULES WHERE MODULE_ID IN (7,8,48,63) ORDER BY MODULE_DESC";
                        aList.ReturnCol=1;
                        aList.ShowReturnCol=true;
                        aList.DefaultSearchOn=2;
                        aList.UseSpecifiedConn=false;
                        
                        if(aList.ShowLOV()) {
                            if(Table.getCellEditor()!=null) {
                                Table.getCellEditor().stopCellEditing();
                            }
                            Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(),DataModel.getColFromVariable("MODULE_ID"));
                        }
                    }
                    
                    
                    if(Table.getSelectedColumn()==DataModel.getColFromVariable("MAIN_ACCOUNT_CODE")) {
                        LOV aList=new LOV();
                        
                        aList.SQL="SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL WHERE APPROVED=1 ORDER BY ACCOUNT_NAME";
                        aList.ReturnCol=1;
                        aList.ShowReturnCol=true;
                        aList.DefaultSearchOn=2;
                        aList.UseSpecifiedConn=true;
                        aList.dbURL=FinanceGlobal.FinURL;
                        
                        if(aList.ShowLOV()) {
                            if(Table.getCellEditor()!=null) {
                                Table.getCellEditor().stopCellEditing();
                            }
                            Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(),DataModel.getColFromVariable("MAIN_ACCOUNT_CODE"));
                        }
                    }
                    
                    
                    if(Table.getSelectedColumn()==DataModel.getColFromVariable("SUB_ACCOUNT_CODE")) {
                        LOV aList=new LOV();
                        
                        aList.SQL="SELECT PARTY_CODE,PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE APPROVED=1 ORDER BY PARTY_NAME";
                        aList.ReturnCol=1;
                        aList.ShowReturnCol=true;
                        aList.DefaultSearchOn=2;
                        aList.UseSpecifiedConn=true;
                        aList.dbURL=FinanceGlobal.FinURL;
                        
                        if(aList.ShowLOV()) {
                            if(Table.getCellEditor()!=null) {
                                Table.getCellEditor().stopCellEditing();
                            }
                            Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(),DataModel.getColFromVariable("SUB_ACCOUNT_CODE"));
                        }
                    }
                }
            }
        } catch(Exception e){
        }
    }//GEN-LAST:event_TableKeyPressed
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        //Set Default Send to User
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkCancelled;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdChange;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdSelect;
    private javax.swing.JButton cmdShowDocument;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblBalance;
    private javax.swing.JLabel lblBalanceAll;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblDueDate;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JMenuItem mnuAdvancePayment;
    private javax.swing.JMenuItem mnuBillwisePayment;
    private javax.swing.JPopupMenu mnuOptions;
    private javax.swing.JPopupMenu mnuSelect;
    private javax.swing.JMenuItem mnuSelectExpense;
    private javax.swing.JMenuItem mnuSelectMIR;
    private javax.swing.JPopupMenu mnuShow;
    private javax.swing.JMenuItem mnuShowExpenseHistory;
    private javax.swing.JMenuItem mnuShowGRN;
    private javax.swing.JMenuItem mnuShowPO;
    private javax.swing.JMenuItem mnuShowPurOutstanding;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtBankName;
    private javax.swing.JTextField txtBookCode;
    private javax.swing.JTextField txtBookName;
    private javax.swing.JTextField txtChequeAmount;
    private javax.swing.JTextField txtChequeDate;
    private javax.swing.JTextField txtChequeNo;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtLegacyDate;
    private javax.swing.JTextField txtLegacyNo;
    private javax.swing.JTextField txtLinkNo;
    private javax.swing.JTextArea txtRemarks;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    
    private void SetFields(boolean pStat) {
        
        //txtDocDate.setEnabled(pStat);
        txtBookCode.setEnabled(pStat);
        txtChequeNo.setEnabled(pStat);
        txtChequeDate.setEnabled(pStat);
        txtBankName.setEnabled(pStat);
        txtChequeAmount.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        //txtLegacyNo.setEnabled(pStat);
        txtLinkNo.setEnabled(pStat);
        //txtLegacyDate.setEnabled(pStat);
        
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        cmdSelect.setEnabled(pStat);
        
        SetupApproval();
        
        if(!pStat) {
            txtDocNo.setEnabled(pStat);
        }
        
    }
    
    
    private void ClearFields() {
        
        txtDocNo.setText("");
        txtDocDate.setText("");
        txtBookCode.setText("");
        txtBookName.setText("");
        txtChequeNo.setText("");
        txtChequeDate.setText("");
        txtBankName.setText("");
        txtChequeAmount.setText("");
        txtRemarks.setText("");
        txtLegacyNo.setText("");
        txtLinkNo.setText("");
        txtLegacyDate.setText("");
        
        FormatGrid();
        FormatGridA();
        FormatGridHS();
        
        lblDueDate.setText("");
        lblBalance.setText("");
        lblBalanceAll.setText("");
        
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        try {
            //=========== Color Indication ===============//
            
            if(EditMode==0) {
                if(objVoucher.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(objVoucher.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(objVoucher.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
            
            //============================================//
            
            
            //========= Authority Delegation Check =====================//
            if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
                int ModuleID=clsVoucher.PJVModuleID;
                
                if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                    EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
                }
                else {
                    EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
                }
            }
            //==========================================================//
            
            objVoucher.ChangeVoucherNo=false;
            
            ClearFields();
            
            System.out.println("Test 1");
            txtDocNo.setText(objVoucher.objPayment.getAttribute("VOUCHER_NO").getString());
            lblTitle.setText("VOUCHER - "+txtDocNo.getText());
            lblRevNo.setText(Integer.toString(objVoucher.objPayment.getAttribute("REVISION_NO").getInt()));
            txtDocDate.setText(objVoucher.objPayment.getAttribute("VOUCHER_DATE").getString());
            chkCancelled.setSelected(objVoucher.objPayment.getAttribute("CANCELLED").getBool());
            txtBookCode.setText(objVoucher.objPayment.getAttribute("BOOK_CODE").getString());
            txtBookName.setText(clsBook.getBookName(EITLERPGLOBAL.gCompanyID, txtBookCode.getText()));
            txtChequeNo.setText(objVoucher.objPayment.getAttribute("CHEQUE_NO").getString());
            txtChequeDate.setText(objVoucher.objPayment.getAttribute("CHEQUE_DATE").getString());
            txtBankName.setText(objVoucher.objPayment.getAttribute("BANK_NAME").getString());
            txtChequeAmount.setText(Double.toString(objVoucher.objPayment.getAttribute("CHEQUE_AMOUNT").getDouble()));
            txtLegacyNo.setText(objVoucher.objPayment.getAttribute("LEGACY_NO").getString());
            txtLinkNo.setText(objVoucher.objPayment.getAttribute("LINK_NO").getString());
            txtLegacyDate.setText(objVoucher.objPayment.getAttribute("LEGACY_DATE").getString());
            
            txtRemarks.setText(objVoucher.objPayment.getAttribute("REMARKS").getString());
            
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,objVoucher.objPayment.getAttribute("HIERARCHY_ID").getInt());
            
            DoNotEvaluate=true;
            
            
            FormatGrid();
            //Now Generate Table
            for(int i=1;i<=objVoucher.objPayment.colVoucherItems.size();i++) {
                clsVoucherItem ObjItem=(clsVoucherItem)objVoucher.objPayment.colVoucherItems.get(Integer.toString(i));
                Object[] rowData=new Object[1];
                DataModel.addRow(rowData);
                
                int NewRow=Table.getRowCount()-1;
                
                if(ObjItem.getAttribute("EFFECT").getString().equals("C")) {
                    DataModel.setValueByVariable("EFFECT","Cr", NewRow);
                } else {
                    DataModel.setValueByVariable("EFFECT","Dr", NewRow);
                }
                
              //  System.out.println("String Get  dATA1 :"  +i);
                DataModel.setValueByVariable("SR_NO",Integer.toString(i), NewRow);
                DataModel.setValueByVariable("MAIN_ACCOUNT_CODE",ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString(), NewRow);
                DataModel.setValueByVariable("SUB_ACCOUNT_CODE",ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString(),NewRow);
                DataModel.setValueByVariable("ACCOUNT_NAME",clsAccount.getAccountName(ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString(), ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString()), NewRow);
                DataModel.setValueByVariable("AMOUNT",EITLERPGLOBAL.formatNumber(ObjItem.getAttribute("AMOUNT").getDouble()),NewRow);
                DataModel.setValueByVariable("REMARKS",ObjItem.getAttribute("REMARKS").getString(),NewRow);
                DataModel.SetUserObject(NewRow,ObjItem.getAttribute("INVOICE_DEDUCTIONS").getObj());
                DataModel.setValueByVariable("DEDUCTIONS",Double.toString(ObjItem.getAttribute("DEDUCTION_AMOUNT").getVal()),NewRow);
                System.out.println("Test 1");
                DataModel.setValueByVariable("PO_NO",ObjItem.getAttribute("PO_NO").getString(),NewRow);
                DataModel.setValueByVariable("PO_DATE",ObjItem.getAttribute("PO_DATE").getString(),NewRow);
                DataModel.setValueByVariable("INVOICE_NO",ObjItem.getAttribute("INVOICE_NO").getString(),NewRow);
                DataModel.setValueByVariable("INVOICE_DATE",ObjItem.getAttribute("INVOICE_DATE").getString(),NewRow);
                DataModel.setValueByVariable("INVOICE_AMOUNT",Double.toString(ObjItem.getAttribute("INVOICE_AMOUNT").getDouble()),NewRow);
                DataModel.setValueByVariable("REF_NO",ObjItem.getAttribute("GRN_NO").getString(),NewRow);
                DataModel.setValueByVariable("REF_DATE",ObjItem.getAttribute("GRN_DATE").getString(),NewRow);
                DataModel.setValueByVariable("MODULE_ID",Integer.toString(ObjItem.getAttribute("MODULE_ID").getInt()),NewRow);
                DataModel.setValueByVariable("REF_COMPANY_ID",Integer.toString(ObjItem.getAttribute("REF_COMPANY_ID").getInt()),NewRow);
                DataModel.setValueByVariable("REF_COMPANY_NAME",clsCompany.getCityName(ObjItem.getAttribute("REF_COMPANY_ID").getInt()),NewRow);
                DataModel.setValueByVariable("MODULE_NAME",clsModules.getModuleName(EITLERPGLOBAL.gCompanyID, ObjItem.getAttribute("MODULE_ID").getInt()), NewRow);
                System.out.println("String Get  dATA2 :"  +i);
                DataModel.setValueByVariable("LINK_NO",ObjItem.getAttribute("LINK_NO").getString(),NewRow);
                System.out.println("String Get  dATA3 :"  +i);
                DataModel.setValueByVariable("HSN_SAC_CODE",ObjItem.getAttribute("HSN_SAC_CODE").getString(),NewRow);
                System.out.println("String Get  dATA4 :"  +ObjItem.getAttribute("HSN_SAC_CODE").getString());
                DataModel.setValueByVariable("ITEM_DESCRIPTION",ObjItem.getAttribute("ITEM_DESCRIPTION").getString(),NewRow);
                System.out.println("String Get  dATA5 :"  +ObjItem.getAttribute("ITEM_DESCRIPTION").getString());
                DataModel.setValueByVariable("GSTN_RATE",ObjItem.getAttribute("GSTN_RATE").getString(),NewRow);
                System.out.println("String Get  dATA6 :"  +i);
                
                
                
                
                
                
            }
            
            DoNotEvaluate=false;
            
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List=new HashMap();
            String DocNo=objVoucher.getAttribute("VOUCHER_NO").getString();
            List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, clsVoucher.PJVModuleID, DocNo);
            for(int i=1;i<=List.size();i++) {
                clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
                Object[] rowData=new Object[7];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
                rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
                
                DataModelA.addRow(rowData);
            }
            
            //Showing Audit Trial History
            FormatGridHS();
            HashMap History=clsVoucher.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for(int i=1;i<=History.size();i++) {
                clsVoucher ObjHistory=(clsVoucher)History.get(Integer.toString(i));
                Object[] rowData=new Object[5];
                
                rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1]=ObjHistory.getAttribute("UPDATED_BY").getString();
                rowData[2]=ObjHistory.getAttribute("ENTRY_DATE").getString();
                
                String ApprovalStatus="";
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                    ApprovalStatus="Approved";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                    ApprovalStatus="Final Approved";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                    ApprovalStatus="Waiting";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                    ApprovalStatus="Rejected";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                    ApprovalStatus="Pending";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                    ApprovalStatus="Skiped";
                }
                
                
                rowData[3]=ApprovalStatus;
                rowData[4]=ObjHistory.getAttribute("APPROVER_REMARKS").getString();
                
                DataModelHS.addRow(rowData);
            }
            //============================================================//
            
        } catch(Exception c) {
            
        }
        
        DisplayAdditionalInfo();
    }
    
    private void SetData() {
        
        if(txtDocNo.isEnabled()) {
            objVoucher.UseSpecificVoucherNo=true;
            objVoucher.SpecificVoucherNo=txtDocNo.getText();
        } else {
            objVoucher.UseSpecificVoucherNo=false;
        }
        
        objVoucher.setAttribute("PREFIX",SelPrefix);
        objVoucher.setAttribute("SUFFIX",SelSuffix);
        objVoucher.setAttribute("FFNO",FFNo);
        objVoucher.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        objVoucher.setAttribute("VOUCHER_NO",txtDocNo.getText());
        objVoucher.setAttribute("VOUCHER_DATE",txtDocDate.getText());
        objVoucher.setAttribute("VOUCHER_TYPE",FinanceGlobal.TYPE_PJV);
        objVoucher.setAttribute("BOOK_CODE",txtBookCode.getText());
        objVoucher.setAttribute("CHEQUE_NO",txtChequeNo.getText());
        objVoucher.setAttribute("CHEQUE_DATE",txtChequeDate.getText());
        objVoucher.setAttribute("BANK_NAME",txtBankName.getText());
        objVoucher.setAttribute("CHEQUE_AMOUNT",UtilFunctions.CDbl(txtChequeAmount.getText()));
        
        objVoucher.setAttribute("REMARKS",txtRemarks.getText());
        objVoucher.setAttribute("LEGACY_NO",txtLegacyNo.getText());
        objVoucher.setAttribute("LEGACY_DATE",txtLegacyDate.getText());
        objVoucher.setAttribute("LINK_NO",txtLinkNo.getText());
        
        
        //----- Update Approval Specific Fields -----------//
        objVoucher.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        objVoucher.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        objVoucher.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        objVoucher.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            objVoucher.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            objVoucher.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            objVoucher.setAttribute("APPROVAL_STATUS","R");
            objVoucher.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            objVoucher.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            objVoucher.setAttribute("CREATED_BY",EITLERPGLOBAL.gLoginID);
            objVoucher.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        } else {
            objVoucher.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gLoginID);
            objVoucher.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        
        //======================= Convert PJV Format to Normal Format ============================//
        
        objVoucher.colVoucherItems.clear();
        int VoucherSrNo=0;
        //Get normal Entry first
        clsVoucherItem objItem =new clsVoucherItem();
        for(int i=0;i<Table.getRowCount();i++) {
            if(!DataModel.getUserObject(i).equals("") ) {
                
                HashMap objDeductions = (HashMap)DataModel.getUserObject(i);
                if(objDeductions.size() > 0) {
                    continue;
                }
                objItem = new clsVoucherItem();
                VoucherSrNo++;
                objItem.setAttribute("SR_NO",VoucherSrNo);
                if(DataModel.getValueByVariable("EFFECT",i).equals("Cr")) {
                    objItem.setAttribute("EFFECT","C");
                } else {
                    objItem.setAttribute("EFFECT","D");
                }
                objItem.setAttribute("ACCOUNT_ID",1); //Default Value
                objItem.setAttribute("MAIN_ACCOUNT_CODE",DataModel.getValueByVariable("MAIN_ACCOUNT_CODE",i));
                objItem.setAttribute("SUB_ACCOUNT_CODE",DataModel.getValueByVariable("SUB_ACCOUNT_CODE",i));
                objItem.setAttribute("AMOUNT",EITLERPGLOBAL.round(UtilFunctions.CDbl(DataModel.getValueByVariable("AMOUNT",i)),2));
                objItem.setAttribute("REMARKS",DataModel.getValueByVariable("REMARKS",i));
                objItem.setAttribute("PO_NO",DataModel.getValueByVariable("PO_NO",i));
                objItem.setAttribute("PO_DATE",DataModel.getValueByVariable("PO_DATE",i));
                objItem.setAttribute("INVOICE_NO",DataModel.getValueByVariable("INVOICE_NO",i));
                objItem.setAttribute("INVOICE_DATE",DataModel.getValueByVariable("INVOICE_DATE",i));
                objItem.setAttribute("INVOICE_AMOUNT",UtilFunctions.CDbl(DataModel.getValueByVariable("INVOICE_AMOUNT",i)));
                objItem.setAttribute("GRN_NO",DataModel.getValueByVariable("REF_NO",i));
                objItem.setAttribute("GRN_DATE",DataModel.getValueByVariable("REF_DATE",i));
                objItem.setAttribute("MODULE_ID",UtilFunctions.CInt(DataModel.getValueByVariable("MODULE_ID",i)));
                objItem.setAttribute("REF_COMPANY_ID",UtilFunctions.CInt(DataModel.getValueByVariable("REF_COMPANY_ID",i)));
                objItem.setAttribute("IS_DEDUCTION",0);
                objItem.setAttribute("LINK_NO",DataModel.getValueByVariable("LINK_NO",i));
                objItem.setAttribute("HSN_SAC_CODE",DataModel.getValueByVariable("HSN_SAC_CODE",i));
                objItem.setAttribute("ITEM_DESCRIPTION",DataModel.getValueByVariable("ITEM_DESCRIPTION",i));
                objItem.setAttribute("GSTN_RATE",DataModel.getValueByVariable("GSTN_RATE",i));
                
                objVoucher.colVoucherItems.put(Integer.toString(objVoucher.colVoucherItems.size()+1), objItem);
            }
        }
        
        //Get deduction Entry
        for(int i=0;i<Table.getRowCount();i++) {
            try {
                if(!DataModel.getUserObject(i).equals("")) {
                    
                    HashMap objDeductions=(HashMap)DataModel.getUserObject(i);
                    int RefSrNo=0;
                    if(objDeductions.size() == 0) {
                        continue;
                    } else {
                        RefSrNo = i+1;
                    }
                    
                    for(int j=1;j<=objDeductions.size();j++) {
                        clsVoucherItem objDeduction=(clsVoucherItem)objDeductions.get(Integer.toString(j));
                        
                        if((!objDeduction.getAttribute("MAIN_ACCOUNT_CODE").getString().trim().equals(""))&&(objDeduction.getAttribute("AMOUNT").getDouble()>0)&&(objDeduction.getAttribute("DOC_TYPE").getInt()==1)) {
                            
                            objItem=new clsVoucherItem();
                            VoucherSrNo++;
                            objItem.setAttribute("SR_NO",VoucherSrNo);
                            objItem.setAttribute("EFFECT","D");
                            objItem.setAttribute("ACCOUNT_ID",1); //Default Value
                            objItem.setAttribute("MAIN_ACCOUNT_CODE",DataModel.getValueByVariable("MAIN_ACCOUNT_CODE",i));
                            objItem.setAttribute("SUB_ACCOUNT_CODE",DataModel.getValueByVariable("SUB_ACCOUNT_CODE",i));
                            objItem.setAttribute("AMOUNT",EITLERPGLOBAL.round(objDeduction.getAttribute("AMOUNT").getDouble(),2));
                            objItem.setAttribute("APPLICABLE_AMOUNT",EITLERPGLOBAL.round(objDeduction.getAttribute("APPLICABLE_AMOUNT").getDouble(),2));
                            objItem.setAttribute("PERCENTAGE",EITLERPGLOBAL.round(objDeduction.getAttribute("PERCENTAGE").getDouble(),3));
                            objItem.setAttribute("REMARKS",objDeduction.getAttribute("REMARKS").getString());
                            objItem.setAttribute("PO_NO",DataModel.getValueByVariable("PO_NO",i));
                            objItem.setAttribute("PO_DATE",DataModel.getValueByVariable("PO_DATE",i));
                            objItem.setAttribute("INVOICE_NO",DataModel.getValueByVariable("INVOICE_NO",i));
                            objItem.setAttribute("INVOICE_DATE",DataModel.getValueByVariable("INVOICE_DATE",i));
                            objItem.setAttribute("INVOICE_AMOUNT",UtilFunctions.CDbl(DataModel.getValueByVariable("INVOICE_AMOUNT",i)));
                            objItem.setAttribute("GRN_NO",DataModel.getValueByVariable("REF_NO",i));
                            objItem.setAttribute("GRN_DATE",DataModel.getValueByVariable("REF_DATE",i));
                            objItem.setAttribute("MODULE_ID",UtilFunctions.CInt(DataModel.getValueByVariable("MODULE_ID",i)));
                            objItem.setAttribute("REF_COMPANY_ID",UtilFunctions.CInt(DataModel.getValueByVariable("REF_COMPANY_ID",i)));
                            objItem.setAttribute("IS_DEDUCTION",1);
                            objItem.setAttribute("REF_SR_NO",RefSrNo);
                            objItem.setAttribute("HSN_SAC_CODE",DataModel.getValueByVariable("HSN_SAC_CODE",i));
                            objItem.setAttribute("ITEM_DESCRIPTION",DataModel.getValueByVariable("ITEM_DESCRIPTION",i));
                            objItem.setAttribute("GSTN_RATE",DataModel.getValueByVariable("GSTN_RATE",i));
                            
                            objVoucher.colVoucherItems.put(Integer.toString(objVoucher.colVoucherItems.size()+1), objItem);
                            
                            VoucherSrNo++;
                            objItem=new clsVoucherItem();
                            objItem.setAttribute("SR_NO",VoucherSrNo);
                            objItem.setAttribute("EFFECT","C");
                            objItem.setAttribute("ACCOUNT_ID",1); //Default Value
                            objItem.setAttribute("MAIN_ACCOUNT_CODE",objDeduction.getAttribute("MAIN_ACCOUNT_CODE").getString());
                            objItem.setAttribute("SUB_ACCOUNT_CODE","");
                            objItem.setAttribute("AMOUNT",EITLERPGLOBAL.round(objDeduction.getAttribute("AMOUNT").getDouble(),2));
                            objItem.setAttribute("APPLICABLE_AMOUNT",EITLERPGLOBAL.round(objDeduction.getAttribute("APPLICABLE_AMOUNT").getDouble(),2));
                            objItem.setAttribute("PERCENTAGE",EITLERPGLOBAL.round(objDeduction.getAttribute("PERCENTAGE").getDouble(),3));
                            objItem.setAttribute("REMARKS",objDeduction.getAttribute("REMARKS").getString());
                            objItem.setAttribute("PO_NO",DataModel.getValueByVariable("PO_NO",i));
                            objItem.setAttribute("PO_DATE",DataModel.getValueByVariable("PO_DATE",i));
                            objItem.setAttribute("INVOICE_NO",DataModel.getValueByVariable("INVOICE_NO",i));
                            objItem.setAttribute("INVOICE_DATE",DataModel.getValueByVariable("INVOICE_DATE",i));
                            objItem.setAttribute("INVOICE_AMOUNT",UtilFunctions.CDbl(DataModel.getValueByVariable("INVOICE_AMOUNT",i)));
                            objItem.setAttribute("GRN_NO",DataModel.getValueByVariable("REF_NO",i));
                            objItem.setAttribute("GRN_DATE",DataModel.getValueByVariable("REF_DATE",i));
                            objItem.setAttribute("MODULE_ID",UtilFunctions.CInt(DataModel.getValueByVariable("MODULE_ID",i)));
                            objItem.setAttribute("REF_COMPANY_ID",UtilFunctions.CInt(DataModel.getValueByVariable("REF_COMPANY_ID",i)));
                            objItem.setAttribute("IS_DEDUCTION",1);
                            objItem.setAttribute("REF_SR_NO",RefSrNo);
                            objItem.setAttribute("HSN_SAC_CODE",DataModel.getValueByVariable("HSN_SAC_CODE",i));
                            objItem.setAttribute("ITEM_DESCRIPTION",DataModel.getValueByVariable("ITEM_DESCRIPTION",i));
                            objItem.setAttribute("GSTN_RATE",DataModel.getValueByVariable("GSTN_RATE",i));
                                                       
                            objVoucher.colVoucherItems.put(Integer.toString(objVoucher.colVoucherItems.size()+1), objItem);
                        }
                    }
                }
                
            }catch(Exception e) {}
        }
        //========================================================================================//
    }
    
    private void FormatGrid() {
        
        Updating=true; //Stops recursion
        
        try {
            
            EITLTableCellRenderer cellRender=new EITLTableCellRenderer();
            cellRender.setHorizontalAlignment(JLabel.RIGHT);
            
            POColor=new EITLTableCellRenderer();
            
            cmdAdd.requestFocus();
            
            DataModel=new EITLTableModel();
            Table.removeAll();
            
            Table.setModel(DataModel);
            TableColumnModel ColModel=Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            DataModel.addColumn("Sr."); //0 - Read Only
            DataModel.addColumn("Cr/Dr"); //1
            DataModel.addColumn("Main Code"); //2 //Read Only
            DataModel.addColumn("Sub Code");//3
            DataModel.addColumn("A/c Name"); //4
            DataModel.addColumn("Amount"); //5
            DataModel.addColumn("Deductions");
            DataModel.addColumn("Remarks"); //6 Remarks
            DataModel.addColumn("PO NO.");//7
            DataModel.addColumn("PO Date");//8
            DataModel.addColumn("Invoice No.");//9
            DataModel.addColumn("Invoice Date");//10
            DataModel.addColumn("Invoice Amount");//11
            DataModel.addColumn("Ref No.");//12
            DataModel.addColumn("Ref Date");//13
            DataModel.addColumn("Document");//14
            DataModel.addColumn("Module ID");//15
            DataModel.addColumn("Company");//15
            DataModel.addColumn("Company ID");//15
            DataModel.addColumn("Link No.");
            DataModel.addColumn("HSN_SAC_Code.");
            DataModel.addColumn("Item_Description");
            DataModel.addColumn("GSTN_Rate");

            
            
            
            
            
            DataModel.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModel.SetVariable(1,"EFFECT"); //1
            DataModel.SetVariable(2,"MAIN_ACCOUNT_CODE"); //2 //Read Only
            DataModel.SetVariable(3,"SUB_ACCOUNT_CODE"); //2 //Read Only
            DataModel.SetVariable(4,"ACCOUNT_NAME"); //2 //Read Only
            DataModel.SetVariable(5,"AMOUNT"); //2 //Read Only
            
            DataModel.SetVariable(6,"DEDUCTIONS");
            
            DataModel.SetVariable(7,"REMARKS"); //2 //Read Only
            DataModel.SetVariable(8,"PO_NO");
            DataModel.SetVariable(9,"PO_DATE");
            DataModel.SetVariable(10,"INVOICE_NO");
            DataModel.SetVariable(11,"INVOICE_DATE");
            DataModel.SetVariable(12,"INVOICE_AMOUNT");
            DataModel.SetVariable(13,"REF_NO");
            DataModel.SetVariable(14,"REF_DATE");
            DataModel.SetVariable(15,"MODULE_NAME");
            DataModel.SetVariable(16,"MODULE_ID");
            DataModel.SetVariable(17,"REF_COMPANY_NAME");
            DataModel.SetVariable(18,"REF_COMPANY_ID");
            DataModel.SetVariable(19,"LINK_NO");
            DataModel.SetVariable(20,"HSN_SAC_CODE");
            DataModel.SetVariable(21,"ITEM_DESCRIPTION");
            DataModel.SetVariable(22,"GSTN_RATE");
     
            
            DataModel.TableReadOnly(false);
            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(1);
            DataModel.SetReadOnly(4);
            DataModel.SetReadOnly(6);
            //DataModel.SetReadOnly(8);
            //DataModel.SetReadOnly(9);
            DataModel.SetReadOnly(14);
            DataModel.SetReadOnly(15);
            DataModel.SetReadOnly(17);
            DataModel.SetReadOnly(18);
            
            DataModel.SetNumeric(5,true);
            DataModel.SetNumeric(6,true);
            DataModel.SetNumeric(0,true);
            DataModel.SetNumeric(15,true);
            
            Table.getColumnModel().getColumn(15).setMaxWidth(0);
            Table.getColumnModel().getColumn(5).setCellRenderer(cellRender);
            Table.getColumnModel().getColumn(8).setCellRenderer(POColor);
            
            //------- Install Table List Selection Listener ------//
            Table.getColumnModel().getSelectionModel().addListSelectionListener(
            new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent e) {
                    int last=Table.getSelectedColumn();
                    String strVar=DataModel.getVariable(last);
                    
                    
                    //=============== Cell Editing Routine =======================//
                    try {
                        cellLastValue=(String)Table.getValueAt(Table.getSelectedRow(),Table.getSelectedColumn());
                        
                        Table.editCellAt(Table.getSelectedRow(),Table.getSelectedColumn());
                        if(Table.getEditorComponent() instanceof JTextComponent) {
                            ((JTextComponent)Table.getEditorComponent()).selectAll();
                        }
                    }
                    catch(Exception cell){}
                    //============= Cell Editing Routine Ended =================//
                    
                    ShowMessage("Ready");
                    
                    
                    
                    if(last==DataModel.getColFromVariable("EFFECT")) {
                        ShowMessage("Press C/D to specify Cr./Dr.");
                    }
                    
                    if(last==DataModel.getColFromVariable("MAIN_ACCOUNT_CODE")||last==DataModel.getColFromVariable("SUB_ACCOUNT_CODE")) {
                        
                        String MainCode=DataModel.getValueByVariable("MAIN_ACCOUNT_CODE", Table.getSelectedRow());
                        String SubCode=DataModel.getValueByVariable("SUB_ACCOUNT_CODE", Table.getSelectedRow());
                        double Balance=clsAccount.getClosingBalance(MainCode, SubCode, EITLERPGLOBAL.getCurrentDateDB(),true);
                        
                        if(Balance<0) {
                            lblBalance.setText(Double.toString(Math.abs(Balance))+" Cr.");
                        }
                        else {
                            lblBalance.setText(Double.toString(Math.abs(Balance))+" Dr.");
                        }
                        
                        Balance=clsAccount.getClosingBalanceAll(MainCode, SubCode, EITLERPGLOBAL.getCurrentDateDB(),false);
                        
                        if(Balance<0) {
                            lblBalanceAll.setText(Double.toString(Math.abs(Balance))+" Cr.");
                        }
                        else {
                            lblBalanceAll.setText(Double.toString(Math.abs(Balance))+" Dr.");
                        }
                    }
                }
            }
            );
            //===================================================//
            
            
            
            //----- Install Table Model Event Listener -------//
            Table.getModel().addTableModelListener(new TableModelListener() {
                public void tableChanged(TableModelEvent e) {
                    if (e.getType() == TableModelEvent.UPDATE) {
                        int col = e.getColumn();
                        
                        //=========== Cell Update Prevention Check ===========//
                        String curValue=(String)Table.getValueAt(Table.getSelectedRow(), e.getColumn());
                        if(curValue.equals(cellLastValue)) {
                            return;
                        }
                        //====================================================//
                        
                        if(DoNotEvaluate) {
                            return;
                        }
                        
                        if(col==DataModel.getColFromVariable("PO_NO")) {
                            //String BarodaURL=clsFinYear.getDBURL(2,EITLERPGLOBAL.FinYearFrom);
                            //String AnkURL=clsFinYear.getDBURL(3,EITLERPGLOBAL.FinYearFrom);
                            String CurrentURL=clsFinYear.getDBURL(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.FinYearFrom);
                            String PONo=DataModel.getValueByVariable("PO_NO", Table.getSelectedRow());
                            
                            //if(data.IsRecordExist("SELECT PO_NO FROM D_PUR_PO_HEADER WHERE PO_NO='"+PONo+"'",BarodaURL)) {
                            if(data.IsRecordExist("SELECT PO_NO FROM D_PUR_PO_HEADER WHERE PO_NO='"+PONo+"'",CurrentURL)) {
                                //String PODate=data.getStringValueFromDB("SELECT PO_DATE FROM D_PUR_PO_HEADER WHERE PO_NO='"+PONo+"'",BarodaURL);
                                String PODate=data.getStringValueFromDB("SELECT PO_DATE FROM D_PUR_PO_HEADER WHERE PO_NO='"+PONo+"'",CurrentURL);
                                DoNotEvaluate=true;
                                DataModel.setValueByVariable("PO_DATE",EITLERPGLOBAL.formatDate(PODate),Table.getSelectedRow());
                                DataModel.setValueByVariable("REF_COMPANY_ID",Integer.toString(EITLERPGLOBAL.gCompanyID),Table.getSelectedRow());
                                DoNotEvaluate=false;
                            }
                            
                            /*if(data.IsRecordExist("SELECT PO_NO FROM D_PUR_PO_HEADER WHERE PO_NO='"+PONo+"'",AnkURL)) {
                                String PODate=data.getStringValueFromDB("SELECT PO_DATE FROM D_PUR_PO_HEADER WHERE PO_NO='"+PONo+"'",AnkURL);
                                DoNotEvaluate=true;
                                DataModel.setValueByVariable("PO_DATE",EITLERPGLOBAL.formatDate(PODate),Table.getSelectedRow());
                                DataModel.setValueByVariable("REF_COMPANY_ID","3",Table.getSelectedRow());
                                DoNotEvaluate=false;
                            }*/
                        }
                        
                        
                        if(col==DataModel.getColFromVariable("AMOUNT")) {
                            DoNotEvaluate=true;
                            double fAmount=UtilFunctions.CDbl(DataModel.getValueByVariable("AMOUNT", Table.getSelectedRow()));
                            DataModel.setValueByVariable("AMOUNT",EITLERPGLOBAL.formatNumber(fAmount), Table.getSelectedRow());
                            DoNotEvaluate=false;
                        }
                        
                        if(col==DataModel.getColFromVariable("DEDUCTIONS")) {
                            DoNotEvaluate=true;
                            //double InvoiceAmount=UtilFunctions.CDbl(DataModel.getValueByVariable("INVOICE_AMOUNT", Table.getSelectedRow()));
                            
                            double DeductionAmount=UtilFunctions.CDbl(DataModel.getValueByVariable("DEDUCTIONS", Table.getSelectedRow()));
                            if(DeductionAmount>0) {
                                DataModel.setValueByVariable("AMOUNT",Double.toString(DeductionAmount), Table.getSelectedRow());
                            }
                            DoNotEvaluate=false;
                            UpdateTotals();
                        }
                        
                        if(col==DataModel.getColFromVariable("AMOUNT")) {
                            UpdateTotals();
                        }
                        
                        
                        if(col==DataModel.getColFromVariable("MODULE_ID")) {
                            int ModuleID=UtilFunctions.CInt(DataModel.getValueByVariable("MODULE_ID", Table.getSelectedRow()));
                            DataModel.setValueByVariable("MODULE_NAME",clsModules.getModuleName(EITLERPGLOBAL.gCompanyID, ModuleID), Table.getSelectedRow());
                        }
                        
                        
                        if(col==DataModel.getColFromVariable("MAIN_ACCOUNT_CODE")||col==DataModel.getColFromVariable("SUB_ACCOUNT_CODE")){
                            try {
                                String MainCode=DataModel.getValueByVariable("MAIN_ACCOUNT_CODE", Table.getSelectedRow());
                                String SubCode=DataModel.getValueByVariable("SUB_ACCOUNT_CODE", Table.getSelectedRow());
                                String AccountName=clsAccount.getAccountName(MainCode,SubCode);
                                DataModel.setValueByVariable("ACCOUNT_NAME",AccountName, Table.getSelectedRow());
                                
                                
                                double Balance=clsAccount.getClosingBalance(MainCode, SubCode, EITLERPGLOBAL.getCurrentDateDB(),true);
                                
                                if(Balance<0) {
                                    lblBalance.setText(Double.toString(Math.abs(Balance))+" Cr.");
                                }
                                else {
                                    lblBalance.setText(Double.toString(Math.abs(Balance))+" Dr.");
                                }
                                
                            }
                            catch(Exception ex){}
                        }
                    }
                }
            });
        }
        catch(Exception e) {
            
        }
        Updating=false;
        //Table formatting completed
    }
    
    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        String strCondition="";
        
        //----- Generate cmbType ------- //
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsVoucher.PJVModuleID);
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsVoucher.PJVModuleID);
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(EITLERPGLOBAL.gNewUserID==ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, clsVoucher.PJVModuleID ,txtDocNo.getText())) {
                List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+(clsVoucher.PJVModuleID));
            }
            else {
                List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+(clsVoucher.PJVModuleID));
            }
        }
        
        for(int i=1;i<=List.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
        
    }
    
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, clsVoucher.PJVModuleID ,objVoucher.getAttribute("VOUCHER_NO").getString());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
        
    }
    
    
    private void SetupApproval() {
        
        // --- Hierarchy Change Rights Check --------
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10522)) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }*/
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, clsVoucher.PJVModuleID ,objVoucher.getAttribute("VOUCHER_NO").getString());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,clsVoucher.PJVModuleID,FromUserID,objVoucher.getAttribute("VOUCHER_NO").getString());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        
        //In Edit Mode Hierarchy Should be disabled
        //        if(EditMode==EITLERPGLOBAL.EDIT) {
        //            cmbHierarchy.setEnabled(false);
        //        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10521)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,72)) {
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }*/
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10523)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10524)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
        
        cmdPreview.setEnabled(true);
    }
    
    private void Add() {
        
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        
        //Now Generate new document no.
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=clsVoucher.PJVModuleID;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsVoucher.PJVModuleID , FFNo,  false));
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
            txtDocDate.requestFocus();
            
            lblTitle.setText("VOUCHER - "+txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
        
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=objVoucher.getAttribute("VOUCHER_NO").getString();
        FindEx(EITLERPGLOBAL.gCompanyID, lDocNo);
        if(objVoucher.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID,clsVoucher.PJVModuleID)) {
            EditMode=EITLERPGLOBAL.EDIT;
            
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//
            
            if(ApprovalFlow.IsCreator(clsVoucher.PJVModuleID ,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10522)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            SetupApproval();
            DisableToolbar();
            txtDocDate.requestFocus();
            
            for (int i = 0; i <= Table.getRowCount() - 1; i++) {
                String SuppCode = DataModel.getValueByVariable("SUB_ACCOUNT_CODE", i);
                if(!SuppCode.equals("")){
                String MSMEUAN = data.getStringValueFromDB("SELECT MSME_UAN FROM D_COM_SUPP_MASTER WHERE SUPPLIER_CODE='" + SuppCode + "'");
                if (!MSMEUAN.equals("")) {
                    if (!MSMEUAN.equals("N/A")) {
                        JOptionPane.showMessageDialog(null, "This party " + SuppCode + " is MSME Party. Please proceed immediately");

                    }
                }
                String MSMEDIC = data.getStringValueFromDB("SELECT MSME_DIC_NO FROM D_COM_SUPP_MASTER WHERE SUPPLIER_CODE='" + SuppCode + "'");
                if (!MSMEDIC.equals("")) {
                    if (!MSMEDIC.equals("N/A")) {
                        JOptionPane.showMessageDialog(null, "This party " + SuppCode + " is MSME Party. Please proceed immediately");

                    }
                }
                int MSME=data.getIntValueFromDB("SELECT MSME FROM D_COM_SUPP_MASTER WHERE SUPPLIER_CODE='"+SuppCode+"'");
            if(MSME==1){
                   JOptionPane.showMessageDialog(null, "This party "+SuppCode+" is MSME Party. Please proceed immediately");
             
            }
                }
            }
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=objVoucher.getAttribute("VOUCHER_NO").getString();
        
        if(objVoucher.CanDelete(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            if(objVoucher.Delete(EITLERPGLOBAL.gNewUserID)) {
                MoveLast();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while deleting. Error is "+objVoucher.LastError);
            }
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot delete this record. It is either approved/rejected record or waiting approval for other user or is referred in other documents");
        }
    }
    
    private void Save() {
        
        if(!Validate()) {
            return;
        }
        
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(objVoucher.Insert()) {
                //MoveLast();
                //DisplayData();
objVoucher.Close();
                if(objVoucher.LoadData(EITLERPGLOBAL.gCompanyID)) {
                objVoucher.MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+objVoucher.LastError);
            }
            }
            else {
                JOptionPane.showMessageDialog(null," "+objVoucher.LastError);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(objVoucher.Update()) {
                //DisplayData();
objVoucher.Close();
                if(objVoucher.LoadData(EITLERPGLOBAL.gCompanyID)) {
                objVoucher.MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+objVoucher.LastError);
            }
            }
            else {
                JOptionPane.showMessageDialog(null," "+objVoucher.LastError);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            frmPA.RefreshView();
        }catch(Exception e){}
    }
    
    private boolean Validate() {
        //Form level validations
        try {
            if(txtDocDate.getText().equals("")) {
                JOptionPane.showMessageDialog(this,"Please enter document date");
                return false;
            }
            
            String BookCode = "";
            if(EITLERPGLOBAL.gCompanyID==2) {
                if(!data.IsRecordExist("SELECT BOOK_CODE FROM D_FIN_BOOK_MASTER WHERE BOOK_CODE IN ('40','41','42','43','44') AND BOOK_CODE='"+txtBookCode.getText().trim()+"' ",FinanceGlobal.FinURL)) {
                    JOptionPane.showMessageDialog(this,"Wrong book code selection for Brd.");
                    return false;
                }
            } else {
                if(!data.IsRecordExist("SELECT BOOK_CODE FROM D_FIN_BOOK_MASTER WHERE BOOK_CODE IN ('61','63','64','65') AND BOOK_CODE='"+txtBookCode.getText().trim()+"' ",FinanceGlobal.FinURL)) {
                    JOptionPane.showMessageDialog(this,"Wrong book code selection for Ank.");
                    return false;
                }
            }
            if(cmbHierarchy.getSelectedIndex()==-1) {
                JOptionPane.showMessageDialog(this,"Please select the hierarchy.");
                return false;
            }
            
            if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
                JOptionPane.showMessageDialog(this,"Please select the Approval Action");
                return false;
            }
            
            //Check the no. of items
            if(Table.getRowCount()<=0) {
                JOptionPane.showMessageDialog(this,"Please enter some items.");
                return false;
            }
            boolean FoundSpecificMainCode=false;
            //Check negative Qty.
            for(int i=0;i<=Table.getRowCount()-1;i++) {
                double Amount=UtilFunctions.CDbl(DataModel.getValueByVariable("AMOUNT",i));
                if(Amount<=0) {
                    JOptionPane.showMessageDialog(this,"Please enter proper amount.");
                    return false;
                }
                
                String MainCode = DataModel.getValueByVariable("MAIN_ACCOUNT_CODE",i);
                
                if(data.getIntValueFromDB("SELECT IS_SUBSIDAIRY FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE='"+MainCode+"' ", FinanceGlobal.FinURL)==1) {
                    String PartyCode = DataModel.getValueByVariable("SUB_ACCOUNT_CODE",i);
                    if(PartyCode.equals("")) {
                        JOptionPane.showMessageDialog(this,"Insert Party Code");
                        return false;
                    }
                }
                
                if(MainCode.trim().equals("125019")) {
                    FoundSpecificMainCode=true;
                }
            }
            
            /*if(!OpgReject.isSelected()) {
                for(int i=0;i<=Table.getRowCount()-1;i++) {
                     String MainCode = DataModel.getValueByVariable("MAIN_ACCOUNT_CODE",i);
                    String RefNo = DataModel.getValueByVariable("REF_NO",i);
                    if(data.IsRecordExist("SELECT MAIN_ACCOUNT_CODE FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE " +
                    "IN ('201193','201227','201409','201430','201203','201210','201234','201241','201258','201265','201272'," +
                    "'201344','201368','201399','201410','201412','201416','201423','201447') " +
                    "AND MAIN_ACCOUNT_CODE  = '"+MainCode+"' ", FinanceGlobal.FinURL) && !RefNo.equals(""))
                    {
                        //ResultSet rsGrnItem  =
                         ResultSet rsGrnItem = data.getResult("SELECT ITEM_ID FROM D_INV_GRN_DETAIL WHERE COMPANY_ID='" + EITLERPGLOBAL.gCompanyID + "' AND GRN_NO='"+RefNo+"'");
             
                         rsGrnItem.first();
                         while(!rsGrnItem.isAfterLast()) {
                             String ItemID  = rsGrnItem.getString("ITEM_ID");
                             if(!data.IsRecordExist("SELECT ITEM_ID FROM D_FAS_ITEM_MASTER_HEADER WHERE ITEM_ID = '" + ItemID + "' ",FinanceGlobal.FinURL)) {
                                 String Msg = ItemID + " is not Exists in Asset Item Mapping Form.\n Do You Want to Enter in Asset Item Mapping Form ? ";
                                 if(JOptionPane.showConfirmDialog(this,Msg,"Missing Asset Item Entry",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE)==JOptionPane.YES_OPTION) {
                                     AppletFrame aFrame=new AppletFrame("Asset Item Mapping");
                                     aFrame.startAppletEx("EITLERP.Finance.frmFASItemMapping","Asset Item Mapping");
                                     frmFASItemMapping ObjItem=(frmFASItemMapping) aFrame.ObjApplet;
                                     ObjItem.FindEx((int)EITLERPGLOBAL.gCompanyID,"1");
                                     return false;
                                 }
                             }
                             rsGrnItem.next();
                         }
                    }
                }
            }*/
            
            if(FoundSpecificMainCode) {
                for(int i=0;i<=Table.getRowCount()-1;i++) {
                    String PONo = DataModel.getValueByVariable("PO_NO",i);
                    if(PONo.equals("")) {
                        JOptionPane.showMessageDialog(this,"Insert PO No.");
                        return false;
                    }
                }
            }
            
            if(!EITLERPGLOBAL.isDate(txtDocDate.getText())) {
                JOptionPane.showMessageDialog(this,"Invalid Vourche Date. Please enter date in DD/MM/YYYY format");
                return false;
            }
            
            if(OpgReject.isSelected()&&txtToRemarks.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(this,"Please enter the remarks for rejection");
                return false;
            }
            
            if( (OpgApprove.isSelected()||OpgReject.isSelected())&&cmbSendTo.getItemCount()<=0) {
                JOptionPane.showMessageDialog(this,"Please select the user, to whom rejected document to be send");
                return false;
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
        return true;
    }
    
    private void Cancel() {
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Finance.frmVoucherFind",true);
        frmVoucherFind ObjReturn= (frmVoucherFind) ObjLoader.getObj();
        ObjReturn.VoucherType=FinanceGlobal.TYPE_PJV;
        
        if(ObjReturn.Cancelled==false) {
            if(!objVoucher.Filter(ObjReturn.strQuery+" AND VOUCHER_TYPE="+FinanceGlobal.TYPE_PJV,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveLast();
        }
    }
    
    private void MoveFirst() {
        objVoucher.MoveFirst();
        DisplayData();
    }
    
    private void MovePrevious() {
        objVoucher.MovePrevious();
        DisplayData();
    }
    
    private void MoveNext() {
        objVoucher.MoveNext();
        DisplayData();
    }
    
    private void MoveLast() {
        objVoucher.MoveLast();
        DisplayData();
    }
    
    public void FindEx(int pCompanyID,String pDocNo) {
        objVoucher.Filter(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND VOUCHER_NO='"+pDocNo+"'",pCompanyID);
        objVoucher.MoveLast();
        DisplayData();
    }
    
    public void FindWaiting() {
        //        objVoucher.Filter(" WHERE VOUCHER_NO IN (SELECT D_INV_REQ_HEADER.REQ_NO FROM D_INV_REQ_HEADER,D_COM_DOC_DATA WHERE D_INV_REQ_HEADER.REQ_NO=D_COM_DOC_DATA.DOC_NO AND D_INV_REQ_HEADER.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_INV_REQ_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND MODULE_ID=2)",EITLERPGLOBAL.gCompanyID);
        //        objVoucher.MoveLast();
        //        DisplayData();
    }
    
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Tab1.getComponent(i).setEnabled(true);
                }
                
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        
        //=============== Setting Table Fields ==================//
        DataModel.ClearAllReadOnly();
        for(int i=0;i<Table.getColumnCount();i++) {
            FieldName=DataModel.getVariable(i);
            
            if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
                //Do Nothing
            }
            else {
                DataModel.SetReadOnly(i);
            }
        }
        //=======================================================//
        
    }
    
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    
    private void PreviewAuditReport() {
        try {
            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptMaterialREQA.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText());
            //EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"Error Previwing "+e.getMessage());
        }
    }
    
    private void GenerateRejectedUserCombo() {
        HashMap List=new HashMap();
        HashMap DeptList=new HashMap();
        HashMap DeptUsers=new HashMap();
        
        //----- Generate cmbType ------- //
        cmbToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);
        
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            
            
            /// NEW CODE ///
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, clsVoucher.PJVModuleID, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID,EITLERPGLOBAL.DatabaseURL);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, clsVoucher.PJVModuleID , txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            }
            else {
                if(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///
            
            
        }
        //------------------------------ //
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, clsVoucher.PJVModuleID,txtDocNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
        
    }
    
    
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
    
    
    
    
    
    
    
    private void DisplayAdditionalInfo() {
        try {
            
            // ********** Indicate PO for Fully/Partial executed by colors ***************//
            POColor.removeBackColors();
            
            for(int i=0;i<Table.getRowCount();i++) {
                String PONo=DataModel.getValueByVariable("PO_NO", i);
                String GRNNo=DataModel.getValueByVariable("REF_NO",i);
                
                //**** PO Indication **** //
                if(!PONo.trim().equals("")) {
                    POColor.setBackColor(i, DataModel.getColFromVariable("PO_NO"), Color.CYAN);
                    
                    
                    ResultSet rsTmp=data.getResult("SELECT SUM(QTY) AS QTY,SUM(RECD_QTY) AS RECD_QTY FROM D_PUR_PO_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND PO_NO='"+PONo+"'");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        if(rsTmp.getDouble("RECD_QTY")>=rsTmp.getDouble("QTY")) {
                            POColor.setBackColor(i, DataModel.getColFromVariable("PO_NO"), Color.GREEN);
                        }
                    }
                }
                //*************************//
                
                //***** Due Date Indication *****//
                lblDueDate.setText("");
                if(objVoucher.getAttribute("APPROVED").getInt()==0&&(!GRNNo.trim().equals(""))) {
                    String PartyCode="";
                    String MIRNo="";
                    String MIRDate="";
                    int PaymentDays=0;
                    
                    ResultSet rsTmp=data.getResult("SELECT DISTINCT(MIR_NO) AS MIR_NO FROM D_INV_GRN_DETAIL WHERE GRN_NO='"+GRNNo+"' AND MIR_NO<>'' AND COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        MIRNo=rsTmp.getString("MIR_NO");
                        
                        rsTmp=data.getResult("SELECT MIR_DATE,SUPP_ID FROM D_INV_MIR_HEADER WHERE MIR_NO='"+MIRNo+"' AND COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            PartyCode=rsTmp.getString("SUPP_ID");
                            MIRDate=rsTmp.getString("MIR_DATE");
                            
                            rsTmp=data.getResult("SELECT PAYMENT_DAYS FROM D_COM_SUPP_MASTER WHERE SUPPLIER_CODE='"+PartyCode+"' AND COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
                            rsTmp.first();
                            
                            if(rsTmp.getRow()>0) {
                                PaymentDays=rsTmp.getInt("PAYMENT_DAYS");
                                
                                if(PaymentDays>0) {
                                    String DueDate=EITLERPGLOBAL.formatDate(EITLERPGLOBAL.addDaysToDate(MIRDate, PaymentDays, "yyyy-MM-dd"));
                                    lblDueDate.setText("Payment Due Date :"+DueDate);
                                    
                                }
                            }
                            
                        }
                    }
                }
                //*******************************//
                
            }
            //*********************************************************************************//
            
            
            
            
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    
    private void UpdateBlockNo() {
        try {
            int BlockNo=1;
            boolean BlockStartRow=true;
            String prevEffect="",Effect="";
            
            DataModel.SetUserObject(0, Integer.toString(BlockNo));
            
            
            for(int i=0;i<Table.getRowCount();i++) {
                if(BlockStartRow) {
                    prevEffect=DataModel.getValueByVariable("EFFECT", i);
                    BlockStartRow=false;
                }
                else {
                    prevEffect=DataModel.getValueByVariable("EFFECT", i-1);
                }
                
                
                Effect=DataModel.getValueByVariable("EFFECT", i);
                
                DataModel.SetUserObject(i, Integer.toString(BlockNo));
                
                if(!Effect.equals(prevEffect)) {
                    BlockNo++;
                    BlockStartRow=true;
                }
                
            }
            
        }
        catch(Exception e) {
            
        }
    }
    
    
    private void UpdateTotals() {
        
        //===================== Update Totals ========================//
        try {
            
            if(Table.getSelectedRow()<Table.getRowCount()-1) {
                
                //UpdateBlockNo(); //Assigns block no. to each entry
                
                int BlockNo=UtilFunctions.CInt((String)DataModel.getUserObject(Table.getSelectedRow()));
                String CurrentEffect=DataModel.getValueByVariable("EFFECT",Table.getSelectedRow());
                int OppositeAcRow=0;
                boolean OppositeAcFound=false;
                double OppositeTotal=0;
                int DrCount=0,CrCount=0;
                
                for(int i=0;i<Table.getRowCount();i++) {
                    if(UtilFunctions.CInt((String)DataModel.getUserObject(i))==BlockNo) {
                        if(DataModel.getValueByVariable("EFFECT",i).equals("Cr")) {
                            CrCount++;
                        }
                        else {
                            DrCount++;
                        }
                        
                        if(!DataModel.getValueByVariable("EFFECT",i).equals(CurrentEffect)) {
                            OppositeAcFound=true;
                            OppositeAcRow=i;
                            break;
                        }
                        else {
                            OppositeTotal+=UtilFunctions.CDbl(DataModel.getValueByVariable("AMOUNT",i));
                        }
                    }
                }
                
                
                if(OppositeAcFound) {
                    
                    OppositeTotal=EITLERPGLOBAL.round(OppositeTotal,2);
                    
                    if(CrCount==DrCount) {
                        DoNotEvaluate=true;
                        DataModel.setValueByVariable("AMOUNT",Double.toString(OppositeTotal),OppositeAcRow);
                        DoNotEvaluate=false;
                    }
                    
                    if(CrCount>DrCount) {
                        if(CurrentEffect.equals("Cr")) {
                            DoNotEvaluate=true;
                            DataModel.setValueByVariable("AMOUNT",Double.toString(OppositeTotal),OppositeAcRow);
                            DoNotEvaluate=false;
                            
                        }
                    }
                    
                    if(DrCount>CrCount) {
                        if(CurrentEffect.equals("Dr")) {
                            DoNotEvaluate=true;
                            DataModel.setValueByVariable("AMOUNT",Double.toString(OppositeTotal),OppositeAcRow);
                            DoNotEvaluate=false;
                            
                        }
                        
                    }
                    
                }
                
            }
        }
        catch(Exception v) {
            
        }
        //==================================================================//
        
    }
    
    
    private void PreviewReport() {
        String strSQL = "SELECT VOUCHER_NO FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='"+txtDocNo.getText().trim()+"' AND CANCELLED=0"; //AND APPROVED=1
        if(EditMode==0 && data.IsRecordExist(strSQL,FinanceGlobal.FinURL)) {
            //if(EditMode==0) {
            
            try {
                
                TTable objReports=new TTable();
                objReports.AddColumn("ReportName");
                
                HashMap TRReports=clsReportsConfig.getReportNamesForTR(txtBookCode.getText().trim());
                
                for(int i=1;i<=TRReports.size();i++) {
                    clsConfig objConfig=(clsConfig)TRReports.get(Integer.toString(i));
                    
                    TRow objRow=new TRow();
                    objRow.setValue("ReportName",objConfig.ReportName);
                    objReports.AddRow(objRow);
                }
                
                LOVEx SimpleLOV=new LOVEx(objReports,1);
                
                SimpleLOV.ShowLOV();
                
                if(!SimpleLOV.Cancelled) {
                    clsConfig objConfig=(clsConfig)TRReports.get(Integer.toString(SimpleLOV.SelectedRow));
                    
                    
                    if(objConfig.ProcessType==4) //PJV Consolidated Report
                    {
                        HashMap Parameters=new HashMap();
                        Parameters.put("VOUCHER_NO",txtDocNo.getText());
                        
                        String STMainCode = data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+txtDocNo.getText().trim()+"' AND LENGTH(MAIN_ACCOUNT_CODE)=9 AND EFFECT='D'",FinanceGlobal.FinURL);
                        double STAmount = 0;
                        String STCode = "";
                        if(!STMainCode.equals("")) {
                            STAmount = data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+txtDocNo.getText().trim()+"' AND LENGTH(MAIN_ACCOUNT_CODE)=9 AND EFFECT='D'",FinanceGlobal.FinURL);
                            STCode = STMainCode.substring(STMainCode.indexOf(".")+1);
                        }
                        Parameters.put("ST",STCode);
                        Parameters.put("ST_RS",Double.toString(STAmount));
                        
                        String RemarkTDS = "";
                        String RemarkESI = "";
                        ResultSet rsTmp = data.getResult("SELECT MAIN_ACCOUNT_CODE,APPLICABLE_AMOUNT,PERCENTAGE FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+txtDocNo.getText().trim()+"' AND EFFECT='C' AND IS_DEDUCTION=1",FinanceGlobal.FinURL);
                        rsTmp.first();
                        if(rsTmp.getRow() > 0 ) {
                            while(!rsTmp.isAfterLast()) {
                                if(rsTmp.getString("MAIN_ACCOUNT_CODE").trim().equals("127176")) {
                                    RemarkTDS = "TDS ON Rs. " + rsTmp.getString("APPLICABLE_AMOUNT") + " @ " + rsTmp.getString("PERCENTAGE");
                                } else if(rsTmp.getString("MAIN_ACCOUNT_CODE").equals("127035")) {
                                    RemarkESI = "ESI ON Rs. " + rsTmp.getString("APPLICABLE_AMOUNT") + " @ " + rsTmp.getString("PERCENTAGE");
                                }
                                rsTmp.next();
                            }
                        }
                        Parameters.put("REMARK_TDS",RemarkTDS);
                        Parameters.put("REMARK_ESI",RemarkESI);
                        
                        TReportWriter.SimpleDataProvider.TTable objData=clsVoucherReports.getBriefPJVReport(txtDocNo.getText());
                        objEngine.PreviewReport(objConfig.ReportFileName,Parameters,objData);
                    }
                    
                    
                    if(objConfig.ProcessType!=4) {
                        HashMap Parameters=new HashMap();
                        Parameters.put("VOUCHER_NO",txtDocNo.getText());
                        
                        String STMainCode = data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+txtDocNo.getText().trim()+"' AND LENGTH(MAIN_ACCOUNT_CODE)=9 AND EFFECT='D'",FinanceGlobal.FinURL);
                        double STAmount = 0;
                        String STCode = "";
                        if(!STMainCode.equals("")) {
                            STAmount = data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+txtDocNo.getText().trim()+"' AND LENGTH(MAIN_ACCOUNT_CODE)=9 AND EFFECT='D'",FinanceGlobal.FinURL);
                            STCode = STMainCode.substring(STMainCode.indexOf(".")+1);
                        }
                        Parameters.put("ST",STCode);
                        Parameters.put("ST_RS",Double.toString(STAmount));
                        
                        String RemarkTDS = "";
                        String RemarkESI = "";
                        ResultSet rsTmp = data.getResult("SELECT MAIN_ACCOUNT_CODE,APPLICABLE_AMOUNT,PERCENTAGE FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+txtDocNo.getText().trim()+"' AND EFFECT='C' AND IS_DEDUCTION=1",FinanceGlobal.FinURL);
                        rsTmp.first();
                        if(rsTmp.getRow() > 0 ) {
                            while(!rsTmp.isAfterLast()) {
                                if(rsTmp.getString("MAIN_ACCOUNT_CODE").trim().equals("127176")) {
                                    RemarkTDS = "TDS ON Rs. " + rsTmp.getString("APPLICABLE_AMOUNT") + " @ " + rsTmp.getString("PERCENTAGE");
                                } else if(rsTmp.getString("MAIN_ACCOUNT_CODE").equals("127035")) {
                                    RemarkESI = "ESI ON Rs. " + rsTmp.getString("APPLICABLE_AMOUNT") + " @ " + rsTmp.getString("PERCENTAGE");
                                }
                                rsTmp.next();
                            }
                        }
                        Parameters.put("REMARK_TDS",RemarkTDS);
                        Parameters.put("REMARK_ESI",RemarkESI);
                        
                        TReportWriter.SimpleDataProvider.TTable objData=clsVoucherReports.getVoucherReport(txtDocNo.getText(), objConfig.ProcessType);
                        objEngine.PreviewReport(objConfig.ReportFileName,Parameters,objData);
                    }
                    
                }
                
            }
            catch(Exception e) {
                
            }
            
        }
    }
    
    
}
