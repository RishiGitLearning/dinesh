/*
 * frmFAMovement.java
 *
 * Created on March 28, 2011, 10:30 AM
 */

package EITLERP.Finance;

import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import java.text.*;
import javax.swing.text.*;
import java.net.*;
import java.io.*;
import EITLERP.Utils.*;
import EITLERP.ReportUI.*;
import java.sql.*;
import java.math.BigDecimal;
import net.sf.jasperreports.engine.*;

/**
 *
 * @author  root
 */
public class frmSchJV extends javax.swing.JApplet {
    
    private int EditMode=0;
    private EITLTableModel DataModelL;
    private EITLTableModel DataModelSchJV;
    private EITLTableCellRenderer Renderer=new EITLTableCellRenderer();
    private boolean Updating=false;
    
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromID=0;
    
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private String SelNo = ""; //Selected Prefix Number
    private int FFNo=0;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel cmbStatusModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbGroupCodeModel;
    private EITLTableModel DataModelA;
    private clsSchJV ObjSchJV;
    
    private boolean HistoryView=false;
    private String theDocNo="";
    private EITLTableModel DataModelHS;
    
    public frmPendingApprovals frmPA;
    
    String cellLastValue="";
    private double CreditBalance = 0;
    private double DebitBalance = 0;
    /** Initializes the applet frmFAMovement */
    public void init() {
        
        System.gc();
        setSize(775,535);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        GenerateCombos();
        FormatGridAM();
        SetMenuForRights();
        ObjSchJV = new clsSchJV();
        DataModelSchJV.TableReadOnly(true);
        
        
        if(getName().equals("Link")) {
            //Do not load the data.. as FindEx will follow
        }
        else {
            if(ObjSchJV.LoadData(EITLERPGLOBAL.gCompanyID)) {
                ObjSchJV.MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+ObjSchJV.LastError);
            }
        }
        
        txtAuditRemarks.setVisible(false);
        
        
        
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        cmdAmend = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        lblDocNo = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        txtDocDate = new javax.swing.JTextField();
        lblRemarks = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        cmdNext_Header = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        lblRevNo = new javax.swing.JLabel();
        cmdRemarksBig = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableSchJV = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        txtAsOnDate = new javax.swing.JTextField();
        lblDocNo1 = new javax.swing.JLabel();
        lblDocNo2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdPrev = new javax.swing.JButton();
        cmdFromRemarksBi = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("Top");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("Add");
        cmdNew.setNextFocusableComponent(txtAsOnDate);
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.setNextFocusableComponent(txtAsOnDate);
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Filter");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        cmdAmend.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdAmend.setText("Amend");
        cmdAmend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAmendActionPerformed(evt);
            }
        });

        ToolBar.add(cmdAmend);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText("SCHEDULEWISE REPORT'S JOURNAL VOUCHER ENTRY");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 804, 25);

        Tab1.setLayout(null);

        Tab1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });

        lblDocNo.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblDocNo.setText("                    Doc No :");
        lblDocNo.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(lblDocNo);
        lblDocNo.setBounds(10, 10, 135, 20);

        txtDocNo.setBackground(new java.awt.Color(204, 204, 255));
        txtDocNo.setEditable(false);
        txtDocNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDocNo.setEnabled(false);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(150, 10, 100, 20);

        txtDocDate.setName("INQUIRY_DATE");
        txtDocDate.setEnabled(false);
        Tab1.add(txtDocDate);
        txtDocDate.setBounds(360, 10, 100, 20);

        lblRemarks.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblRemarks.setText("         Remarks :");
        lblRemarks.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(lblRemarks);
        lblRemarks.setBounds(10, 70, 135, 20);

        txtRemarks.setName("REMARKS");
        txtRemarks.setNextFocusableComponent(cmdAdd);
        txtRemarks.setEnabled(false);
        txtRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRemarksFocusGained(evt);
            }
        });

        Tab1.add(txtRemarks);
        txtRemarks.setBounds(150, 70, 354, 20);

        cmdNext_Header.setFont(new java.awt.Font("Tahoma", 1, 12));
        cmdNext_Header.setMnemonic('n');
        cmdNext_Header.setText("Next >>");
        cmdNext_Header.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext_HeaderActionPerformed(evt);
            }
        });

        Tab1.add(cmdNext_Header);
        cmdNext_Header.setBounds(650, 350, 90, 23);

        jLabel6.setText("Schedule JV Detail : ");
        Tab1.add(jLabel6);
        jLabel6.setBounds(20, 110, 160, 20);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(260, 10, 30, 20);

        cmdRemarksBig.setText("...");
        Tab1.add(cmdRemarksBig);
        cmdRemarksBig.setBounds(510, 70, 38, 19);

        TableSchJV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableSchJV.setNextFocusableComponent(cmdNext_Header);
        TableSchJV.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableSchJVKeyPressed(evt);
            }
        });

        jScrollPane3.setViewportView(TableSchJV);

        Tab1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 140, 720, 200);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add ");
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });

        Tab1.add(cmdAdd);
        cmdAdd.setBounds(480, 110, 100, 23);

        cmdRemove.setMnemonic('L');
        cmdRemove.setText("Remove");
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });

        Tab1.add(cmdRemove);
        cmdRemove.setBounds(590, 110, 100, 23);

        txtAsOnDate.setName("INQUIRY_DATE");
        txtAsOnDate.setNextFocusableComponent(txtRemarks);
        txtAsOnDate.setEnabled(false);
        txtAsOnDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtAsOnDateFocusGained(evt);
            }
        });

        Tab1.add(txtAsOnDate);
        txtAsOnDate.setBounds(150, 40, 100, 20);

        lblDocNo1.setText("Date : ");
        lblDocNo1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(lblDocNo1);
        lblDocNo1.setBounds(320, 10, 40, 20);

        lblDocNo2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblDocNo2.setText("            As On Date :");
        lblDocNo2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(lblDocNo2);
        lblDocNo2.setBounds(10, 40, 135, 20);

        Tab.addTab("Header", Tab1);

        jPanel3.setLayout(null);

        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPanel3FocusGained(evt);
            }
        });

        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Hierarchy ");
        jPanel3.add(jLabel31);
        jLabel31.setBounds(20, 16, 100, 20);

        cmbHierarchy.setEditable(true);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });

        jPanel3.add(cmbHierarchy);
        cmbHierarchy.setBounds(125, 16, 184, 22);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("From");
        jPanel3.add(jLabel32);
        jLabel32.setBounds(20, 46, 100, 20);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.add(txtFrom);
        txtFrom.setBounds(125, 46, 182, 19);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.add(txtFromRemarks);
        txtFromRemarks.setBounds(125, 76, 518, 19);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel35.setText("Remarks");
        jPanel3.add(jLabel35);
        jLabel35.setBounds(20, 76, 100, 20);

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Your Action");
        jPanel3.add(jLabel36);
        jLabel36.setBounds(20, 126, 100, 20);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });

        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        jPanel3.add(jPanel6);
        jPanel6.setBounds(125, 116, 182, 100);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Send To");
        jPanel3.add(jLabel33);
        jLabel33.setBounds(20, 226, 100, 20);

        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });

        jPanel3.add(cmbSendTo);
        cmbSendTo.setBounds(125, 226, 184, 22);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Remarks");
        jPanel3.add(jLabel34);
        jLabel34.setBounds(20, 256, 100, 20);

        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });

        jPanel3.add(txtToRemarks);
        txtToRemarks.setBounds(125, 256, 516, 19);

        cmdPrev.setFont(new java.awt.Font("Tahoma", 1, 12));
        cmdPrev.setMnemonic('p');
        cmdPrev.setText("<<Previous");
        cmdPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrevActionPerformed(evt);
            }
        });

        jPanel3.add(cmdPrev);
        cmdPrev.setBounds(610, 300, 110, 23);

        cmdFromRemarksBi.setText("...");
        jPanel3.add(cmdFromRemarksBi);
        cmdFromRemarksBi.setBounds(650, 76, 42, 19);

        Tab.addTab("Approval Hierarchy", jPanel3);

        jPanel5.setLayout(null);

        jPanel5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status");
        jPanel5.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 14);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel5.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 660, 144);

        lblDocumentHistory.setText("Document Update History");
        jPanel5.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 190, 182, 14);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(TableHS);

        jPanel5.add(jScrollPane4);
        jScrollPane4.setBounds(13, 206, 514, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        jPanel5.add(cmdViewHistory);
        cmdViewHistory.setBounds(534, 234, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        jPanel5.add(cmdNormalView);
        cmdNormalView.setBounds(534, 262, 132, 24);

        cmdPreviewA.setText("Preview Report");
        cmdPreviewA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewAActionPerformed(evt);
            }
        });

        jPanel5.add(cmdPreviewA);
        cmdPreviewA.setBounds(534, 207, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        jPanel5.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(534, 291, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel5.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(537, 327, 129, 19);

        Tab.addTab("Status", jPanel5);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 750, 410);

        lblStatus.setForeground(new java.awt.Color(0, 102, 255));
        lblStatus.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(5, 480, 750, 25);

    }//GEN-END:initComponents
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if(TableSchJV.getRowCount()>0) {
            
            DataModelSchJV.removeRow(TableSchJV.getSelectedRow());
            UpdateSrNo();
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void cmdAmendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAmendActionPerformed
        // TODO add your handling code here:
        if(EditMode==0) {
            Amend();
        }
    }//GEN-LAST:event_cmdAmendActionPerformed
    
    private void txtAsOnDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAsOnDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Please Enter As On Date in DD/MM/YYYY Format ");
    }//GEN-LAST:event_txtAsOnDateFocusGained
    
    private void TableSchJVKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableSchJVKeyPressed
        // TODO add your handling code here:
        
        try {
            if(EditMode!=0) //Only Process keys when in editing mode
            {
                if(evt.getKeyCode()==112) //F1 Key pressed
                {
                    if(TableSchJV.getSelectedColumn()==1) {
                        LOV aList=new LOV();
                        
                        aList.SQL="SELECT GROUP_CODE,ACCOUNT_NAME FROM D_FIN_GROUP_CODE_MASTER WHERE GROUP_CODE <> '0' ORDER BY CONVERT(GROUP_CODE,SIGNED)";
                        aList.ReturnCol=1;
                        aList.SecondCol = 2;
                        aList.ShowReturnCol=true;
                        aList.DefaultSearchOn=2;
                        aList.UseSpecifiedConn=true;
                        aList.dbURL=FinanceGlobal.FinURL;
                        
                        if(aList.ShowLOV()) {
                            if(TableSchJV.getCellEditor()!=null) {
                                TableSchJV.getCellEditor().stopCellEditing();
                            }
                            TableSchJV.setValueAt(aList.ReturnVal, TableSchJV.getSelectedRow(),1);
                            TableSchJV.setValueAt(aList.SecondVal, TableSchJV.getSelectedRow(),2);
                        }
                    }
                }
                
            }
            if(EditMode!=0) //Only Process keys when in editing mode
            {
                if(TableSchJV.getSelectedColumn()==DataModelSchJV.getColFromVariable("EFFECT")) {
                    if(evt.getKeyCode()==67) {
                        DataModelSchJV.setValueByVariable("EFFECT","Cr", TableSchJV.getSelectedRow());
                    }
                    if(evt.getKeyCode()==68){
                        DataModelSchJV.setValueByVariable("EFFECT","Dr", TableSchJV.getSelectedRow());
                    }
                }
                if(TableSchJV.getSelectedColumn()==DataModelSchJV.getColFromVariable("INDICATOR")) {
                    if(evt.getKeyCode()==76) {
                        DataModelSchJV.setValueByVariable("INDICATOR","L", TableSchJV.getSelectedRow());
                    }
                    if(evt.getKeyCode()==83){
                        DataModelSchJV.setValueByVariable("INDICATOR","S", TableSchJV.getSelectedRow());
                    }
                    if(evt.getKeyCode()==78){
                        DataModelSchJV.setValueByVariable("INDICATOR","N", TableSchJV.getSelectedRow());
                    }
                }
            }
            
            if(EditMode!=0) {
                if(evt.getKeyCode()==112) {//F1 Key pressed
                    if(TableSchJV.getSelectedColumn()==DataModelSchJV.getColFromVariable("BASE_MAIN_ACCOUNT_CODE")) {
                        LOV aList=new LOV();
                        
                        aList.SQL="SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL WHERE APPROVED=1 AND CANCELLED = 0 ORDER BY MAIN_ACCOUNT_CODE"; //AND GROUP_CODE = '0' 
                        aList.ReturnCol=1;
                        aList.ShowReturnCol=true;
                        aList.DefaultSearchOn=2;
                        aList.UseSpecifiedConn=true;
                        aList.dbURL=FinanceGlobal.FinURL;
                        
                        if(aList.ShowLOV()) {
                            if(TableSchJV.getCellEditor()!=null) {
                                TableSchJV.getCellEditor().stopCellEditing();
                            }
                            TableSchJV.setValueAt(aList.ReturnVal, TableSchJV.getSelectedRow(),DataModelSchJV.getColFromVariable("BASE_MAIN_ACCOUNT_CODE"));
                        }
                    }
                }
            }
        } catch(Exception e) {
        }
    }//GEN-LAST:event_TableSchJVKeyPressed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        
        Updating=true;
        Object[] rowData=new Object[11];
        rowData[0]=Integer.toString(TableSchJV.getRowCount()+1);
        rowData[1]="";
        rowData[2]="";
        rowData[3]="999999";
        rowData[4]="";
        rowData[5]="";
        rowData[6]="";
        rowData[7]="0";
        rowData[8]="";
        rowData[9]="";
        rowData[10]="";
        DataModelSchJV.addRow(rowData);
        Updating=false;
        TableSchJV.changeSelection(TableSchJV.getRowCount()-1, 1, false,false);
        TableSchJV.requestFocus();
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        // TODO add your handling code here:
        ShowMessage("Select approval action");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        // TODO add your handling code here:
        ShowMessage("Select approval action");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        // TODO add your handling code here:
        ShowMessage("Select approval action");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        // TODO add your handling code here:
        ShowMessage("Select approval action");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if(ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID,clsSchJV.ModuleID,txtDocNo.getText(),FinanceGlobal.FinURL)) {
                cmbSendTo.setEnabled(true);
            }
            else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateFromCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
        
        
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(true);
        OpgHold.setSelected(false);
        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
        
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void cmdNext_HeaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext_HeaderActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext_HeaderActionPerformed
    
    private void cmdPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrevActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdPrevActionPerformed
    
    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        // TODO add your handling code here:
        txtRemarks.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained
    
    private void jPanel3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel3FocusGained
        // TODO add your handling code here:
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_jPanel3FocusGained
    
    private void cmdPreviewAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewAActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo=txtDocNo.getText();
        ObjSchJV.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjSchJV.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void txtRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter remarks for this document");
    }//GEN-LAST:event_txtRemarksFocusGained
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjSchJV.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        // Delete();
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JTable TableSchJV;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdAmend;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBi;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext_Header;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPrev;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemarksBig;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblDocNo;
    private javax.swing.JLabel lblDocNo1;
    private javax.swing.JLabel lblDocNo2;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRemarks;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAsOnDate;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    private void FormatGridAM() {
        
        Updating=true;
        cmdAdd.requestFocus();
        DataModelSchJV=new EITLTableModel();
        
        TableSchJV.removeAll();
        TableSchJV.setModel(DataModelSchJV);
        
        
        //Add the columns
        DataModelSchJV.addColumn("Sr.No"); //0 READ ONLY
        DataModelSchJV.addColumn("Group Code"); //1
        DataModelSchJV.addColumn("Account Name"); //2
        DataModelSchJV.addColumn("Main Code."); //3 READ ONLY
        DataModelSchJV.addColumn("Base Main Code"); //4  READ ONLY
        DataModelSchJV.addColumn("Link Code"); //5 READ ONLY
        DataModelSchJV.addColumn("Description"); //6 READ ONLY
        DataModelSchJV.addColumn("Amount"); //7 READ ONLY
        DataModelSchJV.addColumn("Effect"); //8 READ ONLY
        DataModelSchJV.addColumn("Indicator"); //9 READ ONLY
        DataModelSchJV.addColumn("Remarks"); //10
        
        DataModelSchJV.SetVariable(0, "SR_NO");
        DataModelSchJV.SetVariable(1, "GROUP_CODE");
        DataModelSchJV.SetVariable(2, "ACCOUNT_NAME");
        DataModelSchJV.SetVariable(3, "MAIN_ACCOUNT_CODE");
        DataModelSchJV.SetVariable(4, "BASE_MAIN_ACCOUNT_CODE");
        DataModelSchJV.SetVariable(5, "LINK_CODE");
        DataModelSchJV.SetVariable(6, "LINK_NAME");
        DataModelSchJV.SetVariable(7, "AMOUNT");
        DataModelSchJV.SetVariable(8, "EFFECT");
        DataModelSchJV.SetVariable(9, "INDICATOR");
        DataModelSchJV.SetVariable(10, "REMARKS");
        
        TableSchJV.setAutoResizeMode(TableSchJV.AUTO_RESIZE_OFF);
        
        DataModelSchJV.TableReadOnly(false);
        DataModelSchJV.SetReadOnly(0);
        DataModelSchJV.SetReadOnly(1);
        DataModelSchJV.SetReadOnly(2);
        DataModelSchJV.SetReadOnly(3);
        DataModelSchJV.SetReadOnly(4);
        DataModelSchJV.SetReadOnly(8);
        DataModelSchJV.SetReadOnly(9);
        DataModelSchJV.SetNumeric(7,true);
        
        
        
        //------- Install Table List Selection Listener ------//
        TableSchJV.getColumnModel().getSelectionModel().addListSelectionListener(
        new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                int last=TableSchJV.getSelectedColumn();
                String strVar=DataModelSchJV.getVariable(last);
                
                //=============== Cell Editing Routine =======================//
                try {
                    cellLastValue=(String)TableSchJV.getValueAt(TableSchJV.getSelectedRow(),TableSchJV.getSelectedColumn());
                    
                    TableSchJV.editCellAt(TableSchJV.getSelectedRow(),TableSchJV.getSelectedColumn());
                    if(TableSchJV.getEditorComponent() instanceof JTextComponent) {
                        ((JTextComponent)TableSchJV.getEditorComponent()).selectAll();
                    }
                }
                catch(Exception cell){}
                //============= Cell Editing Routine Ended =================//
                
                ShowMessage("Ready");
                if(last==DataModelSchJV.getColFromVariable("GROUP_CODE")) {
                    ShowMessage("Press F1 Key to select Group Code ");
                }
                
                if(last==DataModelSchJV.getColFromVariable("BASE_MAIN_ACCOUNT_CODE")) {
                    ShowMessage("Press F1 Key to select Base Main Account Code ");
                }
                if(last==DataModelSchJV.getColFromVariable("LINK_CODE")) {
                    ShowMessage("Enter Linkage Code ");
                }
                if(last==DataModelSchJV.getColFromVariable("LINK_NAME")) {
                    ShowMessage("Enter Description ");
                }
                if(last==DataModelSchJV.getColFromVariable("AMOUNT")) {
                    ShowMessage("Enter Amount ");
                }
                
                if(last==DataModelSchJV.getColFromVariable("EFFECT")) {
                    ShowMessage("Press C/D to specify Cr./Dr.");
                }
                
                if(last==DataModelSchJV.getColFromVariable("INDICATOR")) {
                    ShowMessage("Press L - Long Term, S - Short Term and N - None");
                }
                if(last==DataModelSchJV.getColFromVariable("REMARKS")) {
                    ShowMessage("Enter Remarks ");
                }
            }
        });
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        
    }
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    private void ClearFields() {
        
        
        txtDocNo.setText("");
        txtDocDate.setText("");
        txtAsOnDate.setText("");
        txtRemarks.setText("");
        txtToRemarks.setText("");
        
        FormatGridA();
        FormatGridAM();
        FormatGridHS();
    }
    
    private void SetFields(boolean pStat) {
        
        txtRemarks.setEnabled(pStat);
        txtAsOnDate.setEnabled(pStat);
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        
        cmbHierarchy.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        DataModelSchJV.TableReadOnly(!pStat);
        
        
        SetupApproval();
        
        
    }
    
    private void GenerateCombos() {
        //Generates Combo Boxes
        
        //Please Fill Up Module ID
        HashMap List=new HashMap();
        String strCondition="";
        
        //----- Generate cmbType ------- //
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID = '"+clsSchJV.ModuleID+"' ");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID = '"+clsSchJV.ModuleID+"' ");
        }
        for(int i=1;i<=List.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
        
        ComboData aData=new ComboData();
        
        clsUser ObjUser=new clsUser();
        ObjUser.LoadData(EITLERPGLOBAL.gCompanyID);
        List=ObjUser.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID));
        for(int i=1;i<=List.size();i++) {
            ObjUser=(clsUser) List.get(Integer.toString(i));
            
            aData=new ComboData();
            
            aData.Text=(String) ObjUser.getAttribute("USER_NAME").getObj();
            aData.Code=(long)ObjUser.getAttribute("USER_ID").getVal();
            
            
        }
        
    }
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbSendToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbSendToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbSendToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbSendToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbSendToModel);
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, clsSchJV.ModuleID,(String)ObjSchJV.getAttribute("DOC_NO").getObj());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjSchJV.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjSchJV.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjSchJV.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjSchJV.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    public void FindWaiting() {
        ObjSchJV.Filter(" WHERE DOC_NO IN (SELECT D_FIN_SCH_JV_HEADER.DOC_NO FROM FINANCE.D_FIN_SCH_JV_HEADER,D_COM_DOC_DATA WHERE FINANCE.D_FIN_SCH_JV_HEADER.DOC_NO=D_COM_DOC_DATA.DOC_NO AND FINANCE.D_FIN_SCH_JV_HEADER.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND FINANCE.D_FIN_SCH_JV_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND MODULE_ID="+clsSchJV.ModuleID+")",EITLERPGLOBAL.gCompanyID);
        ObjSchJV.MoveLast();
        DisplayData();
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        ShowMessage("Ready");
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,12201)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,12203)) {
            cmdAmend.setEnabled(true);
        }
        else {
            cmdAmend.setEnabled(false);
        }
        //        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,12202)) {
        //            cmdEdit.setEnabled(true);
        //        }
        //        else {
        //            cmdEdit.setEnabled(false);
        //        }
        //cmdEdit.setEnabled(true);
        // --- Print Rights --
        //        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,12205)) {
        //            cmdPreview.setEnabled(true);
        //            cmdPrint.setEnabled(true);
        //        }
        //        else {
        //            cmdPreview.setEnabled(false);
        //            cmdPrint.setEnabled(false);
        //        }
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Tab1.getComponent(i).setEnabled(true);
                }
                
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        
        
        //=============== Setting Table Fields ==================//
       /* DataModelL.ClearAllReadOnly();
        for(int i=0;i<TableL.getColumnCount();i++) {
            FieldName=DataModelL.getVariable(i);
        
            if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
                //Do Nothing
            }
            else {
                DataModelL.SetReadOnly(i);
            }
        }*/
        //=======================================================//
        
    }
    
    private void DisplayData() {
        
        try {
            if(EditMode==0) {
                if(ObjSchJV.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(ObjSchJV.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(ObjSchJV.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
                
                
            }
        }
        catch(Exception c) {
            
        }
        //============================================//
        
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=clsSchJV.ModuleID;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        
        try{
            ClearFields();
            
            txtDocNo.setText((String)ObjSchJV.getAttribute("DOC_NO").getObj());
            lblTitle.setText("SCHEDULEWISE REPORT'S JOURNAL VOUCHER ENTRY - "+txtDocNo.getText());
            lblRevNo.setText(Integer.toString((int)ObjSchJV.getAttribute("REVISION_NO").getVal()));
            txtDocDate.setText(EITLERPGLOBAL.formatDate((String)ObjSchJV.getAttribute("DOC_DATE").getObj()));
            txtAsOnDate.setText(EITLERPGLOBAL.formatDate((String)ObjSchJV.getAttribute("AS_ON_DATE").getObj()));
            txtRemarks.setText((String)ObjSchJV.getAttribute("REMARKS").getObj());
            
            
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,(int)ObjSchJV.getAttribute("HIERARCHY_ID").getVal());
            //========= Display Line Items =============//
            FormatGridAM();
            
            for(int i=1;i<=ObjSchJV.colLineItems.size();i++) {
                //Insert New Row
                Object[] rowData=new Object[1];
                DataModelSchJV.addRow(rowData);
                int NewRow=TableSchJV.getRowCount()-1;
                
                clsSchJVDetail ObjItem=(clsSchJVDetail) ObjSchJV.colLineItems.get(Integer.toString(i));
                
                
                DataModelSchJV.setValueByVariable("SR_NO",Integer.toString(i),NewRow);
                DataModelSchJV.setValueByVariable("GROUP_CODE",(String)ObjItem.getAttribute("GROUP_CODE").getObj(),NewRow);
                
                
                String AccountName =  data.getStringValueFromDB("SELECT ACCOUNT_NAME FROM D_FIN_GROUP_CODE_MASTER WHERE GROUP_CODE = '" +(String)ObjItem.getAttribute("GROUP_CODE").getObj() + "' ",FinanceGlobal.FinURL);
                DataModelSchJV.setValueByVariable("ACCOUNT_NAME",AccountName,NewRow);
                DataModelSchJV.setValueByVariable("MAIN_ACCOUNT_CODE",(String)ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getObj(),NewRow);
                DataModelSchJV.setValueByVariable("BASE_MAIN_ACCOUNT_CODE",(String)ObjItem.getAttribute("BASE_MAIN_ACCOUNT_CODE").getObj(),NewRow);
                DataModelSchJV.setValueByVariable("LINK_CODE",(String)ObjItem.getAttribute("LINK_CODE").getObj(),NewRow);
                DataModelSchJV.setValueByVariable("LINK_NAME",(String)ObjItem.getAttribute("LINK_NAME").getObj(),NewRow);
                DataModelSchJV.setValueByVariable("AMOUNT",new BigDecimal(ObjItem.getAttribute("AMOUNT").getDouble()).setScale(2,BigDecimal.ROUND_HALF_UP).toString(),NewRow);
                DataModelSchJV.setValueByVariable("EFFECT",(String)ObjItem.getAttribute("EFFECT").getObj(),NewRow);
                DataModelSchJV.setValueByVariable("INDICATOR",ObjItem.getAttribute("INDICATOR").getString(),NewRow);
                DataModelSchJV.setValueByVariable("REMARKS",(String)ObjItem.getAttribute("REMARKS").getObj(),NewRow);
                
            }
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List=new HashMap();
            String DocNo=(String)ObjSchJV.getAttribute("DOC_NO").getObj();
            List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, clsSchJV.ModuleID, DocNo);
            for(int i=1;i<=List.size();i++) {
                clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
                Object[] rowData=new Object[7];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
                rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
                
                DataModelA.addRow(rowData);
            }
            
            
            
            //Showing Audit Trial History
            FormatGridHS();
            HashMap History=clsSchJV.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for(int i=1;i<=History.size();i++) {
                clsSchJV ObjHistory=(clsSchJV)History.get(Integer.toString(i));
                Object[] rowData=new Object[5];
                
                rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(long)ObjHistory.getAttribute("UPDATED_BY").getVal());
                rowData[2]=EITLERPGLOBAL.formatDate((String)ObjHistory.getAttribute("ENTRY_DATE").getObj());
                
                String ApprovalStatus="";
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                    ApprovalStatus="Approved";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                    ApprovalStatus="Final Approved";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                    ApprovalStatus="Waiting";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("H")) {
                    ApprovalStatus="Waiting";
                }
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                    ApprovalStatus="Rejected";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                    ApprovalStatus="Pending";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                    ApprovalStatus="Skiped";
                }
                
                
                rowData[3]=ApprovalStatus;
                rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
                
                DataModelHS.addRow(rowData);
            }
            //============================================================//
            
            
            //============================================================//
            
            
            
            
            
            if(EditMode==0) {
                DataModelSchJV.TableReadOnly(true);
            }
        }
        catch(Exception e){}
    }
    
    private void Add() {
        
        
        //----------------------------------//
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=clsSchJV.ModuleID;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            FormatGridAM();
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            
            SelNo = aList.DocNo;
            SetupApproval();
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsSchJV.ModuleID, FFNo,false));
            //txtInquiryNo.setText(SelPrefix + txtInquiryNo.getText());
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
            txtDocDate.requestFocus();
            
            lblTitle.setText("SCHEDULEWISE REPORT'S JOURNAL VOUCHER ENTRY - "+txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);
            
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
        
    }
    
    private void Edit(){
        
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=(String)ObjSchJV.getAttribute("DOC_NO").getObj();
        if(ObjSchJV.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID))  {
            EditMode=EITLERPGLOBAL.EDIT;
            
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//
            
            if(ApprovalFlow.IsCreator(clsSchJV.ModuleID ,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,12202)) {
                SetFields(true);
            } else {
                EnableApproval();
            }
            
            DisableToolbar();
            txtDocDate.requestFocus();
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
        
    }
    
    private void Save(){
        
        if(Validate()==false) {
            return; //Validation failed
        }
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjSchJV.Insert())   {
                MoveLast();
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjSchJV.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjSchJV.Update()) {
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjSchJV.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.AMEND) {
            if(ObjSchJV.Amend()) {
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjSchJV.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        
        try {
            frmPA.RefreshView();
        }
        catch(Exception e){}
        ShowMessage("Ready ..........");
        EITLERPGLOBAL.ChangeCursorToDefault(this);
        
        
    }
    
    private void SetData() {
        ObjSchJV.setAttribute("PREFIX",SelPrefix);
        ObjSchJV.setAttribute("SUFFIX",SelSuffix);
        ObjSchJV.setAttribute("FFNO",FFNo);
        ObjSchJV.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        ObjSchJV.setAttribute("DOC_NO",txtDocNo.getText());
        ObjSchJV.setAttribute("DOC_DATE",EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
        ObjSchJV.setAttribute("AS_ON_DATE",EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText()));
        ObjSchJV.setAttribute("REMARKS",txtRemarks.getText());
        
        
        ObjSchJV.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjSchJV.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjSchJV.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjSchJV.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        
        if(OpgApprove.isSelected()) {
            ObjSchJV.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjSchJV.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjSchJV.setAttribute("APPROVAL_STATUS","R");
        }
        
        if(OpgHold.isSelected()) {
            ObjSchJV.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjSchJV.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            ObjSchJV.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        else {
            ObjSchJV.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
            ObjSchJV.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        
        ObjSchJV.colLineItems.clear();
        //        ObjSchJV.colSupp.clear();
        
        for(int i=0;i<TableSchJV.getRowCount();i++) {
            clsSchJVDetail ObjSchJVItem=new clsSchJVDetail();
            
            ObjSchJVItem.setAttribute("SR_NO",Integer.toString(i));
            ObjSchJVItem.setAttribute("GROUP_CODE",(String) DataModelSchJV.getValueByVariable("GROUP_CODE",i));
            ObjSchJVItem.setAttribute("MAIN_ACCOUNT_CODE",(String) DataModelSchJV.getValueByVariable("MAIN_ACCOUNT_CODE",i));
            ObjSchJVItem.setAttribute("BASE_MAIN_ACCOUNT_CODE",(String) DataModelSchJV.getValueByVariable("BASE_MAIN_ACCOUNT_CODE",i));
            ObjSchJVItem.setAttribute("LINK_CODE",(String) DataModelSchJV.getValueByVariable("LINK_CODE",i));
            ObjSchJVItem.setAttribute("LINK_NAME",(String) DataModelSchJV.getValueByVariable("LINK_NAME",i));
            ObjSchJVItem.setAttribute("AMOUNT",Double.parseDouble(DataModelSchJV.getValueByVariable("AMOUNT",i)));
            ObjSchJVItem.setAttribute("EFFECT",(String) DataModelSchJV.getValueByVariable("EFFECT",i));
            ObjSchJVItem.setAttribute("INDICATOR", DataModelSchJV.getValueByVariable("INDICATOR",i).toString());
            ObjSchJVItem.setAttribute("REMARKS",DataModelSchJV.getValueByVariable("REMARKS",i));
            
            if(EditMode==EITLERPGLOBAL.ADD) {
                ObjSchJVItem.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
                ObjSchJVItem.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            }
            else {
                ObjSchJVItem.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
                ObjSchJVItem.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            }
            ObjSchJV.colLineItems.put(Integer.toString(ObjSchJV.colLineItems.size()+1),ObjSchJVItem);
        }
        
        
    }
    
    private boolean Validate() {
        if(txtAsOnDate.getText().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter As on Date....");
            return false;
        }
        if(!EITLERPGLOBAL.isDate(txtAsOnDate.getText().toString().trim())) {
            JOptionPane.showMessageDialog(null,"Invalid date format . Please enter DD/MM/YYYY format .....");
            return false;
        }
        HashMap checkedMainCode =  new HashMap();
        for(int i=0;i<TableSchJV.getRowCount();i++) {
            String GroupCode = DataModelSchJV.getValueByVariable("GROUP_CODE", i);
            if(GroupCode.equals("")) {
                JOptionPane.showMessageDialog(null,"Please Enter Group Code Using F1 Key at Sr No. "+(i+1)+" ");
                return false;
            }
            
            String BaseMainCode = DataModelSchJV.getValueByVariable("BASE_MAIN_ACCOUNT_CODE", i);
            boolean Found =false;
            for(int k=1;k<=checkedMainCode.size();k++) {
                if(checkedMainCode.get(Integer.toString(k)).toString().equals(BaseMainCode)) {
                    Found =true;
                    break;
                }
            }
            if(Found) {
                continue;
            }
            checkedMainCode.put(Integer.toString(checkedMainCode.size()+1), BaseMainCode);
            CreditBalance=0;
            DebitBalance=0;
            double CrTotal = 0;
            double DrTotal = 0;
            getAccountBalance(BaseMainCode);
            if(BaseMainCode.equals("")) {
                JOptionPane.showMessageDialog(null,"Please Enter Base Main Code Using F1 Key at Sr No. "+(i+1)+" ");
                return false;
            }
            String LinkCode = DataModelSchJV.getValueByVariable("LINK_CODE", i);
            if(LinkCode.equals("")) {
                JOptionPane.showMessageDialog(null,"Please Enter Link Code at Sr No. "+(i+1)+" ");
                return false;
            }
            else if(LinkCode.length()!=6) {
                JOptionPane.showMessageDialog(null,"Please Enter only 6 digit Link Code at Sr No. "+(i+1)+" ");
                return false;
            }
            String LinkName = DataModelSchJV.getValueByVariable("LINK_NAME", i);
            if(LinkName.equals("")) {
                JOptionPane.showMessageDialog(null,"Please Enter Description at Sr No. "+(i+1)+" ");
                return false;
            }
            
            double Amount = Double.parseDouble(DataModelSchJV.getValueByVariable("AMOUNT", i));
            if(Amount <= 0) {
                JOptionPane.showMessageDialog(null,"Please Enter Amount greater than zero at Sr No. "+(i+1)+" ");
                return false;
            }
            
            String Effect = DataModelSchJV.getValueByVariable("EFFECT", i);
            if(Effect.equals("")) {
                JOptionPane.showMessageDialog(null,"Please Enter Effect either Cr. or Dr. at Sr No. "+(i+1)+" ");
                return false;
            }
            
            for(int j=0;j<TableSchJV.getRowCount();j++) {
                if(i!=j) {
                    if(BaseMainCode.equals(DataModelSchJV.getValueByVariable("BASE_MAIN_ACCOUNT_CODE", j))) { //&& Effect.equals(DataModelSchJV.getValueByVariable("EFFECT", j))
                        if(DataModelSchJV.getValueByVariable("EFFECT", j).equals("Dr")) {
                            DrTotal += Double.parseDouble(DataModelSchJV.getValueByVariable("AMOUNT", j));
                        }
                        if(DataModelSchJV.getValueByVariable("EFFECT", j).equals("Cr")) {
                            CrTotal += Double.parseDouble(DataModelSchJV.getValueByVariable("AMOUNT", j));
                        }
                    }
                } else {
                    if(Effect.equals("Dr")) {
                        DrTotal += Amount;
                    }
                    if(Effect.equals("Cr")) {
                        CrTotal += Amount;
                    }
                }
            }
            System.out.println("Dr Total : " + new BigDecimal(DrTotal).setScale(2, BigDecimal.ROUND_HALF_UP));
            System.out.println("Cr Total : " + new BigDecimal(CrTotal).setScale(2, BigDecimal.ROUND_HALF_UP));
            System.out.println("Debit Balance : " + new BigDecimal(DebitBalance).setScale(2,BigDecimal.ROUND_HALF_UP));
            System.out.println("Credit Balance : " + new BigDecimal(CreditBalance).setScale(2,BigDecimal.ROUND_HALF_UP));
            if(new BigDecimal(DrTotal).setScale(2, BigDecimal.ROUND_HALF_UP).compareTo(new BigDecimal(DebitBalance).setScale(2,BigDecimal.ROUND_HALF_UP))!=0) {
                JOptionPane.showMessageDialog(this,"Main Code ("+BaseMainCode+") debit balance does not match with trial balance.");
                return false;
            }
            if(new BigDecimal(CrTotal).setScale(2, BigDecimal.ROUND_HALF_UP).compareTo(new BigDecimal(CreditBalance).setScale(2,BigDecimal.ROUND_HALF_UP))!=0) {
                JOptionPane.showMessageDialog(this,"Main Code ("+BaseMainCode+") credit balance does not match with trial balance.");
                return false;
            }
        }
        
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the hierarchy.");
            return false;
        }
        
        if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null,"Please select the Approval Action");
            return false;
        }
        
        if(OpgReject.isSelected()&&txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter the remarks for rejection");
            return false;
        }
        
        if( (OpgApprove.isSelected()||OpgReject.isSelected())&&cmbSendTo.getItemCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please select the user, to whom rejected document to be send");
            return false;
        }
        
        if(TableSchJV.getRowCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please enter which at least one detail in table....");
            return false;
        }
        
        
        return true;
    }
    
    
    private void getAccountBalance(String MainCode) {
        try {
            double Amount=0.0 ;
            double DrTotal=0;
            double CrTotal=0;
            ResultSet rsAccount = null;
            if(clsAccount.IsSubsidairyAccount(MainCode)) {
                rsAccount = data.getResult("SELECT MAIN_ACCOUNT_CODE,PARTY_CODE AS SUB_ACCOUNT_CODE FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = '"+MainCode+"' AND PARTY_CODE<>0 ORDER BY MAIN_ACCOUNT_CODE, PARTY_CODE",FinanceGlobal.FinURL);
            } else {
                rsAccount = data.getResult("SELECT MAIN_ACCOUNT_CODE FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE = '"+MainCode+"' ORDER BY MAIN_ACCOUNT_CODE",FinanceGlobal.FinURL);
            }
            rsAccount.first();
            while(!rsAccount.isAfterLast()) {
                if(clsAccount.IsSubsidairyAccount(MainCode)) {
                    Amount = (new clsAccount()).getClosingBalance(rsAccount.getString("MAIN_ACCOUNT_CODE"),rsAccount.getString("SUB_ACCOUNT_CODE"),EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()),true);
                } else {
                    Amount = (new clsAccount()).getClosingBalance(rsAccount.getString("MAIN_ACCOUNT_CODE"),"",EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()),true);
                }
                
                if(Amount > 0) {
                    DrTotal+=Amount;
                } else if(Amount < 0){
                    CrTotal+=Math.abs(Amount);
                }
                rsAccount.next();
            }
            CreditBalance = CrTotal;
            DebitBalance = DrTotal;
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void SetupApproval() {
        // --- Hierarchy Change Rights Check --------
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, clsSchJV.ModuleID ,(String)ObjSchJV.getAttribute("DOC_NO").getObj());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,clsSchJV.ModuleID ,FromUserID,(String)ObjSchJV.getAttribute("DOC_NO").getObj());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void GenerateRejectedUserCombo() {
        HashMap List=new HashMap();
        HashMap DeptList=new HashMap();
        HashMap DeptUsers=new HashMap();
        
        //----- Generate cmbType ------- //
        cmbToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);
        
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            
            
            /// NEW CODE ///
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID,clsSchJV.ModuleID, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID,clsSchJV.ModuleID , txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            }
            else {
                if(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///
            
            
        }
        //------------------------------ //
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID,clsSchJV.ModuleID,txtDocNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
    }
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Finance.frmSchJVFind",true);
        frmSchJVFind ObjReturn= (frmSchJVFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!ObjSchJV.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveLast();
        }
    }
    
    public void FindEx(int pCompanyID,String pDocNo) {
        ObjSchJV.Filter(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND DOC_NO='"+pDocNo+"'",pCompanyID);
        ObjSchJV.MoveLast();
        DisplayData();
    }
    private void UpdateSrNo() {
        int SrCol=DataModelSchJV.getColFromVariable("SR_NO");
        for(int i=0;i<TableSchJV.getRowCount();i++) {
            TableSchJV.setValueAt(Integer.toString(i+1), i, SrCol);
        }
    }
    
    private void Amend(){
        String lDocNo=(String)ObjSchJV.getAttribute("DOC_NO").getObj();
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        EditMode=EITLERPGLOBAL.AMEND;
        GenerateCombos();
        
        //---New Change ---//
        GenerateCombos();
        DisplayData();
        //----------------//
        
        if(ApprovalFlow.IsCreator(clsSchJV.ModuleID,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,12202)) {
            SetFields(true);
        }
        else {
            EnableApproval();
        }
        
        DisableToolbar();
        
        cmdAdd.setEnabled(false);
        cmbHierarchy.setEnabled(true);
        cmdAdd.setEnabled(true);
        OpgHold.setSelected(true);
        
        
        
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
}
