/*
 * frmCalcInterest.java
 *
 * Created on August 18, 2008, 3:37 PM
 */
/*<APPLET CODE=frmCalcInterest.class HEIGHT=500 WIDTH=800*/

package EITLERP.Finance;

/**
 *
 * @author  MRUGESH THAKER
 * @version
 */
import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.*;
import EITLERP.Stores.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import java.text.*;
import javax.swing.text.*;
import java.net.*;
import java.io.*;
import EITLERP.Utils.*;
import EITLERP.ReportUI.*;

public class frmCalcInterest extends javax.swing.JApplet {
    
    private int EditMode=0;
    private EITLTableModel DataModelL;
    private EITLTableCellRenderer Renderer=new EITLTableCellRenderer();
    
    private clsCalcInterest objCalcInterest;
    
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromID=0;
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private String SelNo = ""; //Selected Prefix Number
    private int FFNo=0;
    
    private EITLComboModel cmbHierarchyModel;
    
    private EITLComboModel cmbSendToModel;
    
    private EITLTableModel DataModelA;
    private EITLTableModel DataModelHS;
    
    private boolean HistoryView=false;
    private String theDocNo="";
    
    
    public frmPendingApprovals frmPA;
    
    String cellLastValue="";
    
    /** Creates new form frmTemplate */
    public void init() {
        
        System.gc();
        setSize(745,540);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        FormatGrid();
        
        GenerateCombos();
        objCalcInterest=new clsCalcInterest();
        
        SetupApproval();
        SetMenuForRights();
        
        if(getName().equals("Link")) {
            //Do not display record
        }
        else {
            
            if(objCalcInterest.LoadData(EITLERPGLOBAL.gCompanyID)) {
                objCalcInterest.MoveLast();
                DisplayData();
                ShowMessage("Ready ..........");
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+objCalcInterest.LastError);
            }
        }
        txtAuditRemarks.setVisible(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableL = new javax.swing.JTable();
        cmdNext_Detail = new javax.swing.JButton();
        cmdPrev_Detail = new javax.swing.JButton();
        txtBookCode = new javax.swing.JTextField();
        lblBookCode = new javax.swing.JLabel();
        cmdShowReceipt = new javax.swing.JButton();
        lblGrossInterest = new javax.swing.JLabel();
        txtGrossInterest = new javax.swing.JTextField();
        txtSearch = new javax.swing.JTextField();
        lblSearch = new javax.swing.JLabel();
        cmdSearch = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdPrev = new javax.swing.JButton();
        cmdFromRemarksBi = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        Tab1 = new javax.swing.JPanel();
        lblDocNo = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        lblDocDate = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        lblRemarks = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        cmdNext_Header = new javax.swing.JButton();
        lblEffectiveDate = new javax.swing.JLabel();
        txtEffectiveDate = new javax.swing.JTextField();
        cmdRemarksBig = new javax.swing.JButton();
        cmdGenerate = new javax.swing.JButton();
        chkTDSOnly = new javax.swing.JCheckBox();
        warrtantgenerate = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("Top");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("Add");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Filter");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 730, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" INTEREST CALCULATION");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 730, 25);

        jPanel2.setLayout(null);

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel22.setFont(new java.awt.Font("Arial", 1, 12));
        jLabel22.setText("Interest Calculation");
        jPanel2.add(jLabel22);
        jLabel22.setBounds(10, 20, 122, 15);

        TableL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableL.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        TableL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TableLMousePressed(evt);
            }
        });

        jScrollPane1.setViewportView(TableL);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(10, 44, 690, 280);

        cmdNext_Detail.setFont(new java.awt.Font("Tahoma", 1, 12));
        cmdNext_Detail.setMnemonic('x');
        cmdNext_Detail.setText("Next ");
        cmdNext_Detail.setNextFocusableComponent(cmdPrev_Detail);
        cmdNext_Detail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext_DetailActionPerformed(evt);
            }
        });

        jPanel2.add(cmdNext_Detail);
        cmdNext_Detail.setBounds(610, 350, 90, 25);

        cmdPrev_Detail.setFont(new java.awt.Font("Tahoma", 1, 12));
        cmdPrev_Detail.setMnemonic('o');
        cmdPrev_Detail.setText("Previous");
        cmdPrev_Detail.setNextFocusableComponent(cmdNext_Detail);
        cmdPrev_Detail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrev_DetailActionPerformed(evt);
            }
        });

        jPanel2.add(cmdPrev_Detail);
        cmdPrev_Detail.setBounds(510, 350, 90, 25);

        txtBookCode.setEnabled(false);
        txtBookCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBookCodeKeyPressed(evt);
            }
        });

        jPanel2.add(txtBookCode);
        txtBookCode.setBounds(90, 349, 50, 19);

        lblBookCode.setText("Book Code :");
        jPanel2.add(lblBookCode);
        lblBookCode.setBounds(10, 350, 76, 15);

        cmdShowReceipt.setFont(new java.awt.Font("Tahoma", 1, 12));
        cmdShowReceipt.setMnemonic('o');
        cmdShowReceipt.setText("Show Receipt");
        cmdShowReceipt.setNextFocusableComponent(cmdNext_Detail);
        cmdShowReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowReceiptActionPerformed(evt);
            }
        });

        jPanel2.add(cmdShowReceipt);
        cmdShowReceipt.setBounds(157, 348, 130, 25);

        lblGrossInterest.setText("Gross Interest :");
        jPanel2.add(lblGrossInterest);
        lblGrossInterest.setBounds(295, 354, 96, 15);

        txtGrossInterest.setEnabled(false);
        jPanel2.add(txtGrossInterest);
        txtGrossInterest.setBounds(393, 351, 98, 19);

        jPanel2.add(txtSearch);
        txtSearch.setBounds(425, 15, 122, 19);

        lblSearch.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSearch.setText("Search :");
        jPanel2.add(lblSearch);
        lblSearch.setBounds(345, 16, 76, 15);

        cmdSearch.setFont(new java.awt.Font("Tahoma", 1, 12));
        cmdSearch.setMnemonic('o');
        cmdSearch.setText("Go");
        cmdSearch.setNextFocusableComponent(cmdNext_Detail);
        cmdSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSearchActionPerformed(evt);
            }
        });

        jPanel2.add(cmdSearch);
        cmdSearch.setBounds(553, 14, 53, 20);

        jTabbedPane1.addTab("Interest Detail", jPanel2);

        jPanel3.setLayout(null);

        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Hierarchy :");
        jPanel3.add(jLabel31);
        jLabel31.setBounds(5, 18, 80, 15);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });

        jPanel3.add(cmbHierarchy);
        cmbHierarchy.setBounds(88, 16, 184, 24);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("From :");
        jPanel3.add(jLabel32);
        jLabel32.setBounds(5, 48, 80, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.add(txtFrom);
        txtFrom.setBounds(88, 46, 182, 19);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.add(txtFromRemarks);
        txtFromRemarks.setBounds(88, 76, 518, 19);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel35.setText("Remarks :");
        jPanel3.add(jLabel35);
        jLabel35.setBounds(5, 78, 80, 15);

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Your Action :");
        jPanel3.add(jLabel36);
        jLabel36.setBounds(5, 118, 80, 15);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.setEnabled(false);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.setEnabled(false);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.setEnabled(false);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.setEnabled(false);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });

        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        jPanel3.add(jPanel6);
        jPanel6.setBounds(88, 116, 182, 100);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Send To :");
        jPanel3.add(jLabel33);
        jLabel33.setBounds(5, 229, 80, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });

        jPanel3.add(cmbSendTo);
        cmbSendTo.setBounds(88, 226, 184, 24);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Remarks :");
        jPanel3.add(jLabel34);
        jLabel34.setBounds(5, 258, 80, 15);

        txtToRemarks.setNextFocusableComponent(cmdPrev);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });

        jPanel3.add(txtToRemarks);
        txtToRemarks.setBounds(88, 256, 516, 19);

        cmdPrev.setFont(new java.awt.Font("Tahoma", 1, 12));
        cmdPrev.setMnemonic('p');
        cmdPrev.setText("Previous");
        cmdPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrevActionPerformed(evt);
            }
        });

        jPanel3.add(cmdPrev);
        cmdPrev.setBounds(600, 300, 90, 25);

        cmdFromRemarksBi.setText("...");
        cmdFromRemarksBi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBiActionPerformed(evt);
            }
        });

        jPanel3.add(cmdFromRemarksBi);
        cmdFromRemarksBi.setBounds(610, 76, 42, 19);

        jTabbedPane1.addTab("Approval Hierarchy", jPanel3);

        jPanel5.setLayout(null);

        jPanel5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status");
        jPanel5.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel5.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 660, 144);

        lblDocumentHistory.setText("Document Update History");
        jPanel5.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 190, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(TableHS);

        jPanel5.add(jScrollPane4);
        jScrollPane4.setBounds(13, 206, 514, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        jPanel5.add(cmdViewHistory);
        cmdViewHistory.setBounds(534, 234, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        jPanel5.add(cmdNormalView);
        cmdNormalView.setBounds(534, 262, 132, 24);

        cmdPreviewA.setText("Preview Report");
        cmdPreviewA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewAActionPerformed(evt);
            }
        });

        jPanel5.add(cmdPreviewA);
        cmdPreviewA.setBounds(534, 207, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        jPanel5.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(534, 291, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel5.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(537, 327, 129, 19);

        jTabbedPane1.addTab("Status", jPanel5);

        Tab1.setLayout(null);

        Tab1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        lblDocNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDocNo.setText(" Doc No. :");
        Tab1.add(lblDocNo);
        lblDocNo.setBounds(25, 30, 100, 15);

        txtDocNo.setBackground(new java.awt.Color(204, 204, 255));
        txtDocNo.setEditable(false);
        txtDocNo.setNextFocusableComponent(txtDocDate);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(130, 30, 140, 19);

        lblDocDate.setDisplayedMnemonic('d');
        lblDocDate.setLabelFor(txtDocDate);
        lblDocDate.setText(" Doc Date :");
        Tab1.add(lblDocDate);
        lblDocDate.setBounds(305, 30, 68, 15);

        txtDocDate.setBackground(new java.awt.Color(204, 204, 255));
        txtDocDate.setEditable(false);
        txtDocDate.setName("INQUIRY_DATE");
        txtDocDate.setNextFocusableComponent(txtEffectiveDate);
        txtDocDate.setEnabled(false);
        txtDocDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDocDateFocusGained(evt);
            }
        });

        Tab1.add(txtDocDate);
        txtDocDate.setBounds(380, 30, 140, 19);

        lblRemarks.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRemarks.setText(" Remarks :");
        Tab1.add(lblRemarks);
        lblRemarks.setBounds(25, 110, 100, 15);

        txtRemarks.setName("REMARKS");
        txtRemarks.setNextFocusableComponent(cmdRemarksBig);
        txtRemarks.setEnabled(false);
        txtRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRemarksFocusGained(evt);
            }
        });

        Tab1.add(txtRemarks);
        txtRemarks.setBounds(130, 110, 354, 19);

        cmdNext_Header.setFont(new java.awt.Font("Tahoma", 1, 12));
        cmdNext_Header.setMnemonic('n');
        cmdNext_Header.setText("Next ");
        cmdNext_Header.setNextFocusableComponent(txtEffectiveDate);
        cmdNext_Header.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext_HeaderActionPerformed(evt);
            }
        });

        Tab1.add(cmdNext_Header);
        cmdNext_Header.setBounds(540, 340, 90, 25);

        lblEffectiveDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEffectiveDate.setText(" Effective Date :");
        Tab1.add(lblEffectiveDate);
        lblEffectiveDate.setBounds(25, 70, 100, 15);

        txtEffectiveDate.setName("LAST_QUOT_DATE");
        txtEffectiveDate.setNextFocusableComponent(txtRemarks);
        txtEffectiveDate.setEnabled(false);
        txtEffectiveDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtEffectiveDateFocusGained(evt);
            }
        });

        Tab1.add(txtEffectiveDate);
        txtEffectiveDate.setBounds(130, 70, 140, 19);

        cmdRemarksBig.setText("...");
        cmdRemarksBig.setNextFocusableComponent(cmdGenerate);
        cmdRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemarksBigActionPerformed(evt);
            }
        });

        Tab1.add(cmdRemarksBig);
        cmdRemarksBig.setBounds(490, 110, 38, 19);

        cmdGenerate.setFont(new java.awt.Font("Tahoma", 1, 12));
        cmdGenerate.setMnemonic('n');
        cmdGenerate.setText("Generate");
        cmdGenerate.setNextFocusableComponent(cmdNext_Header);
        cmdGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGenerateActionPerformed(evt);
            }
        });
        cmdGenerate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdGenerateFocusGained(evt);
            }
        });

        Tab1.add(cmdGenerate);
        cmdGenerate.setBounds(210, 160, 160, 25);

        chkTDSOnly.setText("TDS Only");
        chkTDSOnly.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        chkTDSOnly.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        chkTDSOnly.setEnabled(false);
        Tab1.add(chkTDSOnly);
        chkTDSOnly.setBounds(380, 70, 97, 15);

        warrtantgenerate.setText("jButton1");
        warrtantgenerate.setEnabled(false);
        warrtantgenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                warrtantgenerateActionPerformed(evt);
            }
        });

        Tab1.add(warrtantgenerate);
        warrtantgenerate.setBounds(50, 210, 70, 25);

        jTabbedPane1.addTab("Interest Header", Tab1);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(2, 66, 720, 409);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(5, 480, 710, 22);

    }//GEN-END:initComponents

    private void warrtantgenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warrtantgenerateActionPerformed
       objCalcInterest.generateWarrant();
    }//GEN-LAST:event_warrtantgenerateActionPerformed
    
    private void cmdSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSearchActionPerformed
        // TODO add your handling code here:
        searchWithin(' ');
    }//GEN-LAST:event_cmdSearchActionPerformed
    
    private void TableLMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableLMousePressed
        // TODO add your handling code here:
        if(TableL.getSelectedRow() != -1) {
            String Type = TableL.getValueAt(TableL.getSelectedRow(),2).toString();
            if(Type.equals("CD")) {
                String ReceiptNo = TableL.getValueAt(TableL.getSelectedRow(),1).toString();
                String Partycode = TableL.getValueAt(TableL.getSelectedRow(),6).toString();
                String SQL = "SELECT SUM(B.INTEREST_AMOUNT) FROM D_FD_INT_CALC_HEADER A, D_FD_INT_CALC_DETAIL B " +
                "WHERE A.DOC_NO=B.DOC_NO AND B.RECEIPT_NO='"+ReceiptNo+"' AND B.PARTY_CODE='"+Partycode+"' AND A.TDS_ONLY=0 ";
                double gInterest = data.getDoubleValueFromDB(SQL,FinanceGlobal.FinURL);
                txtGrossInterest.setText(Double.toString(gInterest));
            } else {
                txtGrossInterest.setText(TableL.getValueAt(TableL.getSelectedRow(),8).toString());
            }
        }
    }//GEN-LAST:event_TableLMousePressed
    
    private void cmdShowReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowReceiptActionPerformed
        // TODO add your handling code here:
        if(TableL.getSelectedRow() != -1) {
            String ReceiptNo = TableL.getValueAt(TableL.getSelectedRow(),1).toString();
            AppletFrame aFrame=new AppletFrame("Deposit Master");
            aFrame.startAppletEx("EITLERP.Finance.frmDepositMaster","Deposit Master");
            frmDepositMaster ObjDepositMaster=(frmDepositMaster) aFrame.ObjApplet;
            //String pCondition="SELECT RECEIPT_NO FROM D_FD_DEPOSIT_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND RECEIPT_NO='";
            //int PartyID = data.getIntValueFromDB(pCondition,FinanceGlobal.FinURL);
            ObjDepositMaster.FindEx(EITLERPGLOBAL.gCompanyID,ReceiptNo);
        } else {
            JOptionPane.showMessageDialog(null,"Please select record.");
            return;
        }
    }//GEN-LAST:event_cmdShowReceiptActionPerformed
    
    private void txtBookCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBookCodeKeyPressed
        // TODO add your handling code here:
        if(EditMode==EITLERPGLOBAL.ADD || EditMode==EITLERPGLOBAL.EDIT) {
            if(evt.getKeyCode() == 112) {
                LOV aList=new LOV();
                
                aList.SQL="SELECT BOOK_CODE, MAIN_ACCOUNT_CODE, BOOK_NAME AS BANK_NAME FROM D_FIN_BOOK_MASTER WHERE MAIN_ACCOUNT_CODE<>'' ORDER BY MAIN_ACCOUNT_CODE";
                aList.ReturnCol=1;
                aList.SecondCol=2;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=FinanceGlobal.FinURL;
                
                if(aList.ShowLOV()) {
                    txtBookCode.setText(aList.ReturnVal);
                }
            }
        }
    }//GEN-LAST:event_txtBookCodeKeyPressed
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        // TODO add your handling code here:
        ShowMessage("Select option for keeping document as Hold ............");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        // TODO add your handling code here:
        ShowMessage("Select option for Rejecting a document ............");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        // TODO add your handling code here:
        ShowMessage("Select option for Approving as Final Approval ............");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        // TODO add your handling code here:
        ShowMessage("Select option for only Approval ............");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void cmdGenerateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdGenerateFocusGained
        // TODO add your handling code here:
        ShowMessage("Generate record of calculated interest....");
    }//GEN-LAST:event_cmdGenerateFocusGained
    
    private void txtEffectiveDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEffectiveDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Effective Date...");
    }//GEN-LAST:event_txtEffectiveDateFocusGained
    
    private void cmdGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGenerateActionPerformed
        // TODO add your handling code here:
        try {
            if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 1086,10861)) {
                if(txtEffectiveDate.getText().equals("")) {
                    JOptionPane.showMessageDialog(null,"Please Insert Effective Date.");
                    txtEffectiveDate.requestFocus();
                    return;
                } else if(!EITLERPGLOBAL.isDate(txtEffectiveDate.getText())) {
                    JOptionPane.showMessageDialog(null,"Please Insert valid Effective Date in DD/MM/YY Format");
                    txtEffectiveDate.requestFocus();
                    return;
                }
                
                FormatGrid();
                
                HashMap List = new HashMap();
                int DepositType = 0;
                List.clear();
                List = objCalcInterest.getItemListCDFD(txtEffectiveDate.getText());
                System.out.println("Size = " + List.size());
                if(List.size() > 0) {
                    for(int i=1;i<=List.size();i++) {
                        //Insert New Row
                        clsCalcInterestItem ObjItem=(clsCalcInterestItem) List.get(Integer.toString(i));
                        Object[] rowData=new Object[16];
                        
                        rowData[0]=Integer.toString((int)ObjItem.getAttribute("SR_NO").getVal());
                        rowData[1]=ObjItem.getAttribute("RECEIPT_NO").getString();
                        
                        DepositType = data.getIntValueFromDB("SELECT B.SCHEME_TYPE FROM D_FD_DEPOSIT_MASTER A, D_FD_SCHEME_MASTER B WHERE A.SCHEME_ID=B.SCHEME_ID AND A.RECEIPT_NO='"+ObjItem.getAttribute("RECEIPT_NO").getString()+"' ",FinanceGlobal.FinURL);
                        if(DepositType == 1) {
                            rowData[2]="FD";
                        } else if( DepositType == 2) {
                            rowData[2]="LD";
                        } else if(DepositType == 3 ) {
                            rowData[2]="CD";
                        }
                        
                        rowData[3]=Integer.toString((int)ObjItem.getAttribute("INTEREST_DAYS").getVal());
                        rowData[4]=Double.toString(ObjItem.getAttribute("INTEREST_RATE").getDouble());
                        rowData[5]=ObjItem.getAttribute("INT_MAIN_ACCOUNT_CODE").getString();
                        rowData[6]=ObjItem.getAttribute("PARTY_CODE").getString();
                        rowData[7]=ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString();
                        rowData[8]=Double.toString(ObjItem.getAttribute("INTEREST_AMOUNT").getDouble());
                        rowData[9]=Double.toString(ObjItem.getAttribute("TDS_AMOUNT").getDouble());
                        rowData[10]=Double.toString(ObjItem.getAttribute("NET_INTEREST").getDouble());
                        rowData[11]=Integer.toString(ObjItem.getAttribute("LEGACY_WARRANT_NO").getInt());
                        rowData[12]=ObjItem.getAttribute("WARRANT_NO").getString();
                        rowData[13]=EITLERPGLOBAL.formatDate(ObjItem.getAttribute("WARRANT_DATE").getString());
                        rowData[14]=Integer.toString(ObjItem.getAttribute("MICR_NO").getInt());
                        rowData[15]=ObjItem.getAttribute("WARRANT_CLEAR").getString();
                        
                        DataModelL.addRow(rowData);
                    }
                    jTabbedPane1.setSelectedIndex(1);
                } else {
                    JOptionPane.showMessageDialog(null,"No Record Found...");
                }
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmdGenerateActionPerformed
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdFromRemarksBiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBiActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBiActionPerformed
    
    private void cmdRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdRemarksBigActionPerformed
    
    private void cmdPreviewAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewAActionPerformed
        // TODO add your handling code here:
        PreviewAuditReport();
    }//GEN-LAST:event_cmdPreviewAActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        objCalcInterest.LoadData(EITLERPGLOBAL.gCompanyID);
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo=txtDocNo.getText();
        objCalcInterest.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Specify Additional Remarks required ..........");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Person name to whom an Inquiry is to be sent ..........");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Hierarchy Name from a given list ..........");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void txtRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Special remarks for Highlighting a document ..........");
    }//GEN-LAST:event_txtRemarksFocusGained
    
    private void txtDocDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Inquiry Date in format of DD/MM/YYYY ..........");
    }//GEN-LAST:event_txtDocDateFocusGained
    
    private void cmdPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrevActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_cmdPrevActionPerformed
    
    private void cmdPrev_DetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrev_DetailActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(0);
    }//GEN-LAST:event_cmdPrev_DetailActionPerformed
    
    private void cmdNext_DetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext_DetailActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNext_DetailActionPerformed
    
    private void cmdNext_HeaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext_HeaderActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext_HeaderActionPerformed
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(true);
        OpgHold.setSelected(false);
        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(true);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);
        
        SetupApproval();
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        //Delete();
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel Tab1;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JTable TableL;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkTDSOnly;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBi;
    private javax.swing.JButton cmdGenerate;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext_Detail;
    private javax.swing.JButton cmdNext_Header;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPrev;
    private javax.swing.JButton cmdPrev_Detail;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemarksBig;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdSearch;
    private javax.swing.JButton cmdShowReceipt;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblBookCode;
    private javax.swing.JLabel lblDocDate;
    private javax.swing.JLabel lblDocNo;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblEffectiveDate;
    private javax.swing.JLabel lblGrossInterest;
    private javax.swing.JLabel lblRemarks;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtBookCode;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtEffectiveDate;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtGrossInterest;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JButton warrtantgenerate;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                if(objCalcInterest.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(objCalcInterest.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(objCalcInterest.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
        }
        catch(Exception e) {
        }
        //============================================//
        
        try{
            ClearFields();
            
            txtDocNo.setText(objCalcInterest.getAttribute("DOC_NO").getString());
            txtDocDate.setText(EITLERPGLOBAL.formatDate(objCalcInterest.getAttribute("DOC_DATE").getString()));
            txtEffectiveDate.setText(EITLERPGLOBAL.formatDate(objCalcInterest.getAttribute("EFFECTIVE_DATE").getString()));
            txtRemarks.setText(objCalcInterest.getAttribute("REMARKS").getString());
            txtBookCode.setText(objCalcInterest.getAttribute("BOOK_CODE").getString());
            if(objCalcInterest.getAttribute("TDS_ONLY").getInt()==1){
                chkTDSOnly.setSelected(true);
            } else {
                chkTDSOnly.setSelected(false);
            }
            
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,(int)objCalcInterest.getAttribute("HIERARCHY_ID").getVal());
            
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List=new HashMap();
            String DocNo=(String)objCalcInterest.getAttribute("DOC_NO").getObj();
            List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, 86, DocNo);
            for(int i=1;i<=List.size();i++) {
                clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
                Object[] rowData=new Object[7];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
                rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
                
                DataModelA.addRow(rowData);
            }
            
            FormatGridHS();
            HashMap History=clsCalcInterest.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for(int i=1;i<=History.size();i++) {
                clsCalcInterest ObjHistory=(clsCalcInterest)History.get(Integer.toString(i));
                Object[] rowData=new Object[5];
                
                rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1]=ObjHistory.getAttribute("UPDATED_BY").getString();
                rowData[2]=EITLERPGLOBAL.formatDate((String)ObjHistory.getAttribute("ENTRY_DATE").getObj());
                
                String ApprovalStatus="";
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                    ApprovalStatus="Approved";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                    ApprovalStatus="Final Approved";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                    ApprovalStatus="Waiting";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                    ApprovalStatus="Rejected";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                    ApprovalStatus="Pending";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                    ApprovalStatus="Skiped";
                }
                
                
                rowData[3]=ApprovalStatus;
                rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
                
                DataModelHS.addRow(rowData);
            }
            
            //========= Display Line Items =============//
            FormatGrid();
            int DepositType = 0;
            
            for(int i=1;i<=objCalcInterest.colLineItems.size();i++) {
                //Insert New Row
                clsCalcInterestItem ObjItem=(clsCalcInterestItem) objCalcInterest.colLineItems.get(Integer.toString(i));
                Object[] rowData=new Object[16];
                
                rowData[0]=Integer.toString((int)ObjItem.getAttribute("SR_NO").getVal());
                rowData[1]=ObjItem.getAttribute("RECEIPT_NO").getString();
                
                DepositType = data.getIntValueFromDB("SELECT B.SCHEME_TYPE FROM D_FD_DEPOSIT_MASTER A, D_FD_SCHEME_MASTER B WHERE A.SCHEME_ID=B.SCHEME_ID AND A.RECEIPT_NO='"+ObjItem.getAttribute("RECEIPT_NO").getString()+"' ",FinanceGlobal.FinURL);
                if(DepositType == 1) {
                    rowData[2]="FD";
                } else if( DepositType == 2) {
                    rowData[2]="LD";
                } else if(DepositType == 3 ) {
                    rowData[2]="CD";
                }
                
                rowData[3]=Integer.toString((int)ObjItem.getAttribute("INTEREST_DAYS").getVal());
                rowData[4]=Double.toString(ObjItem.getAttribute("INTEREST_RATE").getDouble());
                
                rowData[5]=ObjItem.getAttribute("INT_MAIN_ACCOUNT_CODE").getString();
                rowData[6]=ObjItem.getAttribute("PARTY_CODE").getString();
                rowData[7]=ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString();
                rowData[8]=Double.toString(ObjItem.getAttribute("INTEREST_AMOUNT").getDouble());
                rowData[9]=Double.toString(ObjItem.getAttribute("TDS_AMOUNT").getDouble());
                rowData[10]=Double.toString(ObjItem.getAttribute("NET_INTEREST").getDouble());
                rowData[11]=Integer.toString(ObjItem.getAttribute("LEGACY_WARRANT_NO").getInt());
                rowData[12]=ObjItem.getAttribute("WARRANT_NO").getString();
                rowData[13]=EITLERPGLOBAL.formatDate(ObjItem.getAttribute("WARRANT_DATE").getString());
                rowData[14]=Integer.toString(ObjItem.getAttribute("MICR_NO").getInt());
                rowData[15]=ObjItem.getAttribute("WARRANT_CLEAR").getString();
                DataModelL.addRow(rowData);
            }
            
            DataModelL.TableReadOnly(true);
        }catch(Exception e){
        }
    }
    
    //Sets data to the Class Object
    private void SetData() {
        objCalcInterest.setAttribute("FFNO",FFNo);
        objCalcInterest.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        objCalcInterest.setAttribute("DOC_NO",txtDocNo.getText());
        objCalcInterest.setAttribute("DOC_DATE",txtDocDate.getText());
        objCalcInterest.setAttribute("EFFECTIVE_DATE",txtEffectiveDate.getText());
        objCalcInterest.setAttribute("REMARKS",txtRemarks.getText());
        objCalcInterest.setAttribute("BOOK_CODE",txtBookCode.getText());
        if(chkTDSOnly.isSelected()) {
            objCalcInterest.setAttribute("TDS_ONLY",1);
        } else {
            objCalcInterest.setAttribute("TDS_ONLY",0);
        }
        
        objCalcInterest.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        objCalcInterest.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        objCalcInterest.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        objCalcInterest.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        
        if(OpgApprove.isSelected()) {
            objCalcInterest.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            objCalcInterest.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            objCalcInterest.setAttribute("APPROVAL_STATUS","R");
            objCalcInterest.setAttribute("REJECTED_REMARKS",txtToRemarks.getText());
        }
        
        if(OpgHold.isSelected()) {
            objCalcInterest.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            objCalcInterest.setAttribute("CREATED_BY",EITLERPGLOBAL.gLoginID);
            objCalcInterest.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        else {
            objCalcInterest.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gLoginID);
            objCalcInterest.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        
        objCalcInterest.colLineItems.clear();
        
        for(int i=0;i<TableL.getRowCount();i++) {
            clsCalcInterestItem objCalcInterestItem = new clsCalcInterestItem();
            
            objCalcInterestItem.setAttribute("SR_NO",Integer.parseInt(TableL.getValueAt(i, 0).toString()));
            objCalcInterestItem.setAttribute("RECEIPT_NO", TableL.getValueAt(i, 1).toString());
            objCalcInterestItem.setAttribute("INTEREST_DAYS",Integer.parseInt(TableL.getValueAt(i, 3).toString()));
            objCalcInterestItem.setAttribute("INTEREST_RATE",Double.parseDouble(TableL.getValueAt(i,4).toString()));
            objCalcInterestItem.setAttribute("INT_MAIN_ACCOUNT_CODE",TableL.getValueAt(i,5).toString());
            objCalcInterestItem.setAttribute("PARTY_CODE",TableL.getValueAt(i,6).toString());
            objCalcInterestItem.setAttribute("MAIN_ACCOUNT_CODE",TableL.getValueAt(i,7).toString());
            objCalcInterestItem.setAttribute("INTEREST_AMOUNT",Double.parseDouble(TableL.getValueAt(i,8).toString()));
            objCalcInterestItem.setAttribute("TDS_AMOUNT",Double.parseDouble(TableL.getValueAt(i,9).toString()));
            objCalcInterestItem.setAttribute("NET_INTEREST",Double.parseDouble(TableL.getValueAt(i,10).toString()));
            objCalcInterestItem.setAttribute("LEGACY_WARRANT_NO",Integer.parseInt(TableL.getValueAt(i,11).toString()));
            objCalcInterestItem.setAttribute("WARRANT_NO",TableL.getValueAt(i,12).toString());
            objCalcInterestItem.setAttribute("WARRANT_DATE",TableL.getValueAt(i,13).toString());
            objCalcInterestItem.setAttribute("MICR_NO",Integer.parseInt(TableL.getValueAt(i,14).toString()));
            objCalcInterestItem.setAttribute("WARRANT_CLEAR",TableL.getValueAt(i,15).toString());
            if(EditMode==EITLERPGLOBAL.ADD) {
                objCalcInterestItem.setAttribute("CREATED_BY",EITLERPGLOBAL.gLoginID);
                objCalcInterestItem.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            }
            else {
                objCalcInterestItem.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gLoginID);
                objCalcInterestItem.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            }
            objCalcInterest.colLineItems.put(Integer.toString(objCalcInterest.colLineItems.size()+1),objCalcInterestItem);
        }
    }
    
    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        String strCondition="";
        
        //----- Generate cmbType ------- //
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=86");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=86");
        }
        for(int i=1;i<=List.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
    }
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbSendToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbSendToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbSendToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbSendToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbSendToModel);
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, 86,(String)objCalcInterest.getAttribute("DOC_NO").getObj());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e) {
        }
    }
    
      
    private void GenerateRejectedUserCombo() {
        HashMap List=new HashMap();
        HashMap DeptList=new HashMap();
        HashMap DeptUsers=new HashMap();
        
        //----- Generate cmbType ------- //
        cmbSendToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);
        
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            
            
            /// NEW CODE ///
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, clsCalcInterest.ModuleID, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID,EITLERPGLOBAL.DatabaseURL);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, clsCalcInterest.ModuleID , txtDocNo.getText().trim(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            }
            else {
                if(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///
            
            
        }
        //------------------------------ //
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, clsCalcInterest.ModuleID,txtDocNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
        
    }
    
    
    private void SetupApproval() {
        // --- Hierarchy Change Rights Check --------
        /*if(cmbHierarchy.getItemCount()>1) {
            cmbHierarchy.setEnabled(true);
        }*/
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, 86,objCalcInterest.getAttribute("DOC_NO").getString());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,86,FromUserID,objCalcInterest.getAttribute("DOC_NO").getString());
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,objCalcInterest.getAttribute("HIERARCHY_ID").getInt());
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void FormatGrid() {
        DataModelL=new EITLTableModel();
        
        TableL.removeAll();
        TableL.setModel(DataModelL);
        
        //Set the table Readonly
        DataModelL.TableReadOnly(true);
        
        //Add the columns
        DataModelL.addColumn("Sr.");
        DataModelL.addColumn("Receipt No.");
        DataModelL.addColumn("Deposit Type");
        DataModelL.addColumn("Interest Days");
        DataModelL.addColumn("Interest Rate");
        DataModelL.addColumn("Int. Main Account Code");
        DataModelL.addColumn("Party Code");
        DataModelL.addColumn("Main Account Code");
        DataModelL.addColumn("Interest Amount");
        DataModelL.addColumn("TDS Amount");
        DataModelL.addColumn("Net Interest");
        DataModelL.addColumn("Legacy Warrant No");
        DataModelL.addColumn("Warrant No");
        DataModelL.addColumn("Warrant Date");
        DataModelL.addColumn("MICR No");
        DataModelL.addColumn("Warrant Clear");
        
        TableColumnModel ColModel=TableL.getColumnModel();
        TableL.setAutoResizeMode(TableL.AUTO_RESIZE_OFF);
        
        Renderer = new EITLTableCellRenderer();
        for(int j=0;j<TableL.getColumnCount();j++) {
            TableL.getColumnModel().getColumn(j).setCellRenderer(Renderer);
        }
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objCalcInterest.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objCalcInterest.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objCalcInterest.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objCalcInterest.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        ShowMessage("Ready");
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void SetFields(boolean pStat) {
        //txtDocNo.setEnabled(pStat);
        //txtDocDate.setEnabled(pStat);
        txtEffectiveDate.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        
        txtBookCode.setEnabled(pStat);
        
        cmbHierarchy.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        SetupApproval();
        
        DataModelL.TableReadOnly(!pStat);
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 1086,10861)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 1086,10863)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 1086,10864)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    private void Add() {
        
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=86;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            objCalcInterest.colLineItems.clear();
            
            FormatGrid();
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            
            
            SelNo = aList.DocNo;
            SetupApproval();
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 86, FFNo,false));
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
            txtEffectiveDate.requestFocus();
            
            lblTitle.setText("INTERESST CALCULATION - " + txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
    }
    
    private void ClearFields() {
        txtDocNo.setText("");
        txtDocDate.setText("");
        txtEffectiveDate.setText("");
        txtRemarks.setText("");
        txtToRemarks.setText("");
        
        txtBookCode.setText("");
        
        FormatGrid();
        FormatGridA();
        FormatGridHS();
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=objCalcInterest.getAttribute("DOC_NO").getString();
        if(objCalcInterest.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            EITLERPGLOBAL.ChangeCursorToWait(this);
            EditMode=EITLERPGLOBAL.EDIT;
            GenerateCombos();
            
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//
            
            if(ApprovalFlow.IsCreator(86,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 1088,10882)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            DisableToolbar();
            cmbHierarchy.setEnabled(true);
            
            
            OpgHold.setSelected(true);
            EITLERPGLOBAL.ChangeCursorToDefault(this);
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=objCalcInterest.getAttribute("DOC_NO").getString();
        
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            if(objCalcInterest.CanDelete(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
                if(objCalcInterest.Delete(EITLERPGLOBAL.gNewUserID)) {
                    MoveLast();
                }
                else {
                    JOptionPane.showMessageDialog(null,"Error occured while deleting. Error is "+objCalcInterest.LastError);
                }
            }
            else {
                JOptionPane.showMessageDialog(null,"You cannot delete this record. It is either approved/rejected record or waiting approval for other user or is referred in other documents");
            }
        }
    }
    
    private void Save() {
        //Form level validations
        if(Validate()==false) {
            return; //Validation failed
        }
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(objCalcInterest.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+objCalcInterest.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(objCalcInterest.Update()) {
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+objCalcInterest.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
        
        try {
            frmPA.RefreshView();
        }
        catch(Exception e){}
        ShowMessage("Ready ..........");
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Finance.frmCalcInterestFind",true);
        frmCalcInterestFind ObjReturn= (frmCalcInterestFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            //Add PO Type
            if(!ObjReturn.strQuery.trim().equals("")) {
                ObjReturn.strQuery=ObjReturn.strQuery;
            }
            else {
                ObjReturn.strQuery=" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND INQUIRY_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND INQUIRY_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' ";
            }
            
            
            if(!objCalcInterest.Filter(ObjReturn.strQuery)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveLast();
        }
    }
    
    public void FindEx(int pCompanyID , String pDocNo) {
        objCalcInterest.Filter(" WHERE COMPANY_ID="+pCompanyID+" AND DOC_NO='"+pDocNo+"' ");
        objCalcInterest.MoveFirst();
        DisplayData();
    }
    
    private boolean Validate() {
        int ValidEntryCount=0;
        
        //Validates Item Entries
        if(TableL.getRowCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please enter at least one item");
            return false;
        }
        
      /*int docDate = Integer.parseInt(EITLERPGLOBAL.getCurrentDate().substring(0,2));
        if(docDate>25 && docDate<=31) {
            JOptionPane.showMessageDialog(null,"Not allowed to process between date 25th  to 31st");
            return false;
        }*/
        
        //Now Header level validations
        if(txtEffectiveDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter Effective Date.");
            return false;
        } else if(!EITLERPGLOBAL.isDate(txtEffectiveDate.getText())) {
            JOptionPane.showMessageDialog(null,"Please enter Effective Date in DD/MM/YY Format.");
            return false;
        }
        
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the hierarchy.");
            return false;
        }
        
        if(txtBookCode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert Book Code.");
            return false;
        }
        
        if(OpgReject.isSelected()) {
            if(txtToRemarks.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Please insert Remarks for rejection.");
                return false;
            }
        }
        
        boolean found = false;
        String PCode = "";
        for(int i=0; i<TableL.getRowCount();i++) {
            String InterestCode = TableL.getValueAt(i,5).toString();
            String PartyCode = TableL.getValueAt(i,6).toString();
            String MainCode = TableL.getValueAt(i,7).toString();
            
            if(!data.IsRecordExist("SELECT PARTY_CODE FROM D_FIN_PARTY_MASTER WHERE PARTY_CODE='"+PartyCode+"' AND MAIN_ACCOUNT_CODE='"+MainCode+"' ",FinanceGlobal.FinURL)) {
                PCode += PartyCode +" --- "+MainCode+"\n";
                found = true;
            }
        }
        if(found) {
            JOptionPane.showMessageDialog(null,"Please insert party code(s) with Main Account Code(s) \n" + PCode);
            return false;
        }
        
        return true;
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Tab1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        //=============== Setting Table Fields ==================//
        DataModelL.ClearAllReadOnly();
        for(int i=0;i<TableL.getColumnCount();i++) {
            FieldName=DataModelL.getVariable(i);
            
            if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
                //Do Nothing
            }
            else {
                DataModelL.SetReadOnly(i);
            }
        }
        //=======================================================//
    }
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    private void PreviewReport() {
        HashMap Params=new HashMap();
        
        Params.put("comp_id", new Integer(EITLERPGLOBAL.gCompanyID));
        Params.put("doc_no",txtDocNo.getText());
        
        try {
            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptCalcInterest.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"File error "+e.getMessage());
        }
    }
    
    private void PreviewAuditReport() {
        try {
            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptCalcInterestAudit.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"Error Previwing "+e.getMessage());
        }
    }
    
    private void searchWithin(char recentKey) {
        
        try {
            
            Renderer.removeBackColors();
            
            TableL.repaint();
            
            String searchString=txtSearch.getText().trim();
            
            if(!searchString.trim().equals("")) {
                
                if(recentKey!=' ') {
                    searchString=searchString+recentKey;
                }
                
                searchString=searchString.toLowerCase();
                
                int currentCol=TableL.getSelectedColumn();
                
                for(int i=0;i<=DataModelL.getRowCount()-1;i++) {
                    
                    if(DataModelL.getValueAt(i,currentCol).toString().toLowerCase().trim().indexOf(searchString)!=-1) {
                        
                        DataModelL.changeSelection(i, currentCol, false,false);
                        
                        for(int j=0;j<DataModelL.getColumnCount();j++) {
                            Renderer.setBackColor(i, j, Color.YELLOW);
                        }
                        
                    }
                }
            }
        } catch(Exception e) {
        }
    }
}