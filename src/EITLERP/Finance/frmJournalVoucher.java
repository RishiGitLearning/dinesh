/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */
package EITLERP.Finance;

/**
 *
 * @author nhpatel
 */
/*<APPLET CODE=frmMR.class HEIGHT=550 WIDTH=665></APPLET>*/
import javax.swing.*;
import java.awt.*;
import EITLERP.*;
import EITLERP.Sales.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import javax.swing.text.*;
import java.awt.event.*;
import java.net.*;
import EITLERP.Utils.*;
import java.io.*;
import EITLERP.Purchase.*;
import EITLERP.Stores.*;
import java.sql.*;
import TReportWriter.*;
import EITLERP.Utils.SimpleDataProvider.*;
import EITLERP.Finance.Config.*;
import EITLERP.Finance.ReportsUI.*;

public class frmJournalVoucher extends javax.swing.JApplet {

    private int EditMode = 0;
    //private clsMaterialRequisition objVoucher;
    private clsVoucher objVoucher;

    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbModuleModel;

    private EITLTableModel DataModelA = new EITLTableModel();
    private EITLTableModel DataModel = new EITLTableModel();
    private EITLTableModel DataModelHS = new EITLTableModel();

    private EITLTableCellRenderer POColor = new EITLTableCellRenderer();

    private boolean Updating = false;
    private boolean TravelVoucher = false;
    private boolean HistoryView = false;
    private String theDocNo = "";

    private boolean DoNotEvaluate = false;

    public frmPendingApprovals frmPA;

    String cellLastValue = "";

    private TReportEngine objEngine = new TReportEngine();

    /**
     * Creates new form frmTemplate
     */
    public void init() {
        setSize(665, 595);
        initComponents();

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        GenerateCombos();
        objVoucher = new clsVoucher();

        SetMenuForRights();

        if (getName().equals("Link")) {

        } else {
            objVoucher.VoucherType = FinanceGlobal.TYPE_JOURNAL;
            if (objVoucher.LoadData(EITLERPGLOBAL.gCompanyID)) {
                objVoucher.MoveLast();
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while loading data. Error is " + objVoucher.LastError);
            }
        }

        txtAuditRemarks.setVisible(false);
        DataModel.TableReadOnly(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        mnuSelect = new javax.swing.JPopupMenu();
        mnuSelectPJV = new javax.swing.JMenuItem();
        mnuSelectExpense = new javax.swing.JMenuItem();
        mnuSelectReceipt = new javax.swing.JMenuItem();
        mnuSelectInvoice = new javax.swing.JMenuItem();
        mnuSelectDebitNote = new javax.swing.JMenuItem();
        mnuSelectJV = new javax.swing.JMenuItem();
        mnuShow = new javax.swing.JPopupMenu();
        mnuAdvancePayment = new javax.swing.JMenuItem();
        mnuShowPO = new javax.swing.JMenuItem();
        mnuBillwisePayment = new javax.swing.JMenuItem();
        mnuShowGRN = new javax.swing.JMenuItem();
        mnuShowExpenseHistory = new javax.swing.JMenuItem();
        mnuShowRefDoc = new javax.swing.JMenuItem();
        mnuShowAdvAmount = new javax.swing.JMenuItem();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        chkCancelled = new javax.swing.JCheckBox();
        lblRevNo = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtBookCode = new javax.swing.JTextField();
        txtBookName = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtChequeNo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtChequeDate = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtBankName = new javax.swing.JTextField();
        lblEmployeeNo = new javax.swing.JLabel();
        txtEmployeeNo = new javax.swing.JTextField();
        lblBalanceAll = new javax.swing.JLabel();
        lblBalance = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtRemarks = new javax.swing.JTextArea();
        cmdChange = new javax.swing.JButton();
        lblDueDate = new javax.swing.JLabel();
        cmdShow = new javax.swing.JButton();
        cmdSelect = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtLegacyNo = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtLegacyDate = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtLinkNo = new javax.swing.JTextField();
        chkAutoAdj = new javax.swing.JCheckBox();
        txtReasonCode = new javax.swing.JTextField();
        txtReasonCodeName = new javax.swing.JTextField();
        lblResonCode = new javax.swing.JLabel();
        cmdReasoncodeBig = new javax.swing.JButton();
        lblPAN = new javax.swing.JLabel();
        txtPAN = new javax.swing.JTextField();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack2 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        mnuSelectPJV.setText("Select PJV for Payment Voucher");
        mnuSelectPJV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSelectPJVActionPerformed(evt);
            }
        });
        mnuSelect.add(mnuSelectPJV);

        mnuSelectExpense.setText("Select Expense Entry fot Payment Voucher");
        mnuSelectExpense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSelectExpenseActionPerformed(evt);
            }
        });
        mnuSelect.add(mnuSelectExpense);

        mnuSelectReceipt.setText("Select Advance Receipt");
        mnuSelectReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSelectReceiptActionPerformed(evt);
            }
        });
        mnuSelect.add(mnuSelectReceipt);

        mnuSelectInvoice.setText("Select Invoice");
        mnuSelectInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSelectInvoiceActionPerformed(evt);
            }
        });
        mnuSelect.add(mnuSelectInvoice);

        mnuSelectDebitNote.setText("Select Debit Note");
        mnuSelectDebitNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSelectDebitNoteActionPerformed(evt);
            }
        });
        mnuSelect.add(mnuSelectDebitNote);

        mnuSelectJV.setText("Select JV");
        mnuSelectJV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSelectJVActionPerformed(evt);
            }
        });
        mnuSelect.add(mnuSelectJV);

        mnuAdvancePayment.setText("Advance Payment Details");
        mnuAdvancePayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAdvancePaymentActionPerformed(evt);
            }
        });
        mnuShow.add(mnuAdvancePayment);

        mnuShowPO.setText("Show PO");
        mnuShowPO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShowPOActionPerformed(evt);
            }
        });
        mnuShow.add(mnuShowPO);

        mnuBillwisePayment.setText("Billwise Payment Details");
        mnuBillwisePayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBillwisePaymentActionPerformed(evt);
            }
        });
        mnuShow.add(mnuBillwisePayment);

        mnuShowGRN.setText("Show Invoice");
        mnuShowGRN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShowGRNActionPerformed(evt);
            }
        });
        mnuShow.add(mnuShowGRN);

        mnuShowExpenseHistory.setText("Show Expense History");
        mnuShowExpenseHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShowExpenseHistoryActionPerformed(evt);
            }
        });
        mnuShow.add(mnuShowExpenseHistory);

        mnuShowRefDoc.setText("Show Reference Document");
        mnuShowRefDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShowRefDocActionPerformed(evt);
            }
        });
        mnuShow.add(mnuShowRefDoc);

        mnuShowAdvAmount.setText("Show Advance Amount");
        mnuShowAdvAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShowAdvAmountActionPerformed(evt);
            }
        });
        mnuShow.add(mnuShowAdvAmount);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText(" JOURNAL VOUCHER");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 666, 25);

        Tab.setBackground(new java.awt.Color(238, 238, 238));

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tab1MouseClicked(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Voucher No. :");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel2);
        jLabel2.setBounds(20, 16, 85, 15);

        txtDocNo.setEnabled(false);
        txtDocNo.setNextFocusableComponent(txtDocDate);
        txtDocNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDocNoFocusLost(evt);
            }
        });
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(110, 14, 140, 19);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Date :");
        Tab1.add(jLabel3);
        jLabel3.setBounds(373, 16, 40, 15);

        txtDocDate.setName("REQ_DATE"); // NOI18N
        txtDocDate.setNextFocusableComponent(txtBookCode);
        txtDocDate.setEnabled(false);
        txtDocDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDocDateFocusGained(evt);
            }
        });
        Tab1.add(txtDocDate);
        txtDocDate.setBounds(417, 14, 102, 19);

        chkCancelled.setText("Cancelled");
        chkCancelled.setEnabled(false);
        Tab1.add(chkCancelled);
        chkCancelled.setBounds(550, 6, 91, 23);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(297, 15, 44, 15);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Book Code :");
        Tab1.add(jLabel4);
        jLabel4.setBounds(20, 43, 85, 15);

        txtBookCode.setBackground(new java.awt.Color(255, 255, 204));
        txtBookCode.setName("REQ_DATE"); // NOI18N
        txtBookCode.setNextFocusableComponent(txtLegacyNo);
        txtBookCode.setEnabled(false);
        txtBookCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBookCodeFocusLost(evt);
            }
        });
        txtBookCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBookCodeKeyPressed(evt);
            }
        });
        Tab1.add(txtBookCode);
        txtBookCode.setBounds(110, 41, 102, 19);

        txtBookName.setName("REMARKS"); // NOI18N
        txtBookName.setEnabled(false);
        Tab1.add(txtBookName);
        txtBookName.setBounds(219, 41, 366, 19);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(null);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Cheque No. :");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(5, 12, 95, 15);

        txtChequeNo.setName("REQ_DATE"); // NOI18N
        txtChequeNo.setEnabled(false);
        jPanel2.add(txtChequeNo);
        txtChequeNo.setBounds(105, 10, 97, 19);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Date :");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(203, 13, 40, 15);

        txtChequeDate.setName("REQ_DATE"); // NOI18N
        txtChequeDate.setEnabled(false);
        jPanel2.add(txtChequeDate);
        txtChequeDate.setBounds(246, 12, 102, 19);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Bank :");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(347, 13, 40, 15);

        txtBankName.setName("REQ_DATE"); // NOI18N
        txtBankName.setNextFocusableComponent(txtEmployeeNo);
        txtBankName.setEnabled(false);
        jPanel2.add(txtBankName);
        txtBankName.setBounds(389, 12, 240, 19);

        lblEmployeeNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEmployeeNo.setText("Employee No :");
        jPanel2.add(lblEmployeeNo);
        lblEmployeeNo.setBounds(5, 35, 95, 15);

        txtEmployeeNo.setName("REQ_DATE"); // NOI18N
        txtEmployeeNo.setNextFocusableComponent(Table);
        txtEmployeeNo.setEnabled(false);
        jPanel2.add(txtEmployeeNo);
        txtEmployeeNo.setBounds(107, 35, 102, 18);

        lblBalanceAll.setForeground(new java.awt.Color(153, 153, 153));
        lblBalanceAll.setText("....");
        jPanel2.add(lblBalanceAll);
        lblBalanceAll.setBounds(508, 38, 120, 15);

        lblBalance.setForeground(new java.awt.Color(102, 102, 255));
        lblBalance.setText("....");
        jPanel2.add(lblBalance);
        lblBalance.setBounds(351, 37, 110, 15);

        Tab1.add(jPanel2);
        jPanel2.setBounds(4, 90, 640, 60);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setNextFocusableComponent(cmdAdd);
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(6, 218, 640, 150);

        cmdAdd.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add New");
        cmdAdd.setNextFocusableComponent(cmdRemove);
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        cmdAdd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdAddFocusGained(evt);
            }
        });
        Tab1.add(cmdAdd);
        cmdAdd.setBounds(474, 380, 80, 20);

        cmdRemove.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        cmdRemove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdRemoveFocusGained(evt);
            }
        });
        Tab1.add(cmdRemove);
        cmdRemove.setBounds(557, 380, 86, 20);

        txtRemarks.setEnabled(false);
        jScrollPane4.setViewportView(txtRemarks);

        Tab1.add(jScrollPane4);
        jScrollPane4.setBounds(7, 425, 630, 40);

        cmdChange.setText("...");
        cmdChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdChangeActionPerformed(evt);
            }
        });
        Tab1.add(cmdChange);
        cmdChange.setBounds(262, 14, 30, 20);

        lblDueDate.setText(".");
        Tab1.add(lblDueDate);
        lblDueDate.setBounds(5, 380, 260, 15);

        cmdShow.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        cmdShow.setMnemonic('A');
        cmdShow.setText("Show Doc");
        cmdShow.setNextFocusableComponent(cmdRemove);
        cmdShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowActionPerformed(evt);
            }
        });
        Tab1.add(cmdShow);
        cmdShow.setBounds(305, 380, 80, 20);

        cmdSelect.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        cmdSelect.setMnemonic('A');
        cmdSelect.setText("Select");
        cmdSelect.setNextFocusableComponent(cmdRemove);
        cmdSelect.setEnabled(false);
        cmdSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSelectActionPerformed(evt);
            }
        });
        Tab1.add(cmdSelect);
        cmdSelect.setBounds(390, 380, 80, 20);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Legacy No. :");
        Tab1.add(jLabel9);
        jLabel9.setBounds(20, 69, 85, 15);

        txtLegacyNo.setName("REQ_DATE"); // NOI18N
        txtLegacyNo.setNextFocusableComponent(txtLegacyDate);
        txtLegacyNo.setEnabled(false);
        Tab1.add(txtLegacyNo);
        txtLegacyNo.setBounds(110, 67, 102, 19);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Date :");
        Tab1.add(jLabel10);
        jLabel10.setBounds(220, 70, 40, 15);

        txtLegacyDate.setName("REQ_DATE"); // NOI18N
        txtLegacyDate.setNextFocusableComponent(txtLinkNo);
        txtLegacyDate.setEnabled(false);
        Tab1.add(txtLegacyDate);
        txtLegacyDate.setBounds(264, 69, 102, 19);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Link No. :");
        Tab1.add(jLabel11);
        jLabel11.setBounds(375, 71, 80, 15);

        txtLinkNo.setName("REQ_DATE"); // NOI18N
        txtLinkNo.setNextFocusableComponent(txtChequeNo);
        txtLinkNo.setEnabled(false);
        Tab1.add(txtLinkNo);
        txtLinkNo.setBounds(461, 69, 102, 19);

        chkAutoAdj.setText("Do not include this voucher in auto-adjustment");
        chkAutoAdj.setEnabled(false);
        Tab1.add(chkAutoAdj);
        chkAutoAdj.setBounds(10, 190, 330, 18);

        txtReasonCode.setText("NA");
        txtReasonCode.setEnabled(false);
        txtReasonCode.setName("REQ_DATE"); // NOI18N
        txtReasonCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtReasonCodeFocusLost(evt);
            }
        });
        txtReasonCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtReasonCodeKeyPressed(evt);
            }
        });
        Tab1.add(txtReasonCode);
        txtReasonCode.setBounds(110, 159, 102, 20);

        txtReasonCodeName.setEditable(false);
        txtReasonCodeName.setName("REQ_DATE"); // NOI18N
        txtReasonCodeName.setEnabled(false);
        Tab1.add(txtReasonCodeName);
        txtReasonCodeName.setBounds(220, 160, 370, 19);

        lblResonCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblResonCode.setText("Rea. Code :");
        Tab1.add(lblResonCode);
        lblResonCode.setBounds(10, 155, 90, 20);

        cmdReasoncodeBig.setText("...");
        cmdReasoncodeBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdReasoncodeBigActionPerformed(evt);
            }
        });
        Tab1.add(cmdReasoncodeBig);
        cmdReasoncodeBig.setBounds(600, 160, 33, 21);

        lblPAN.setText("Threshold Receipt (As on Date PAN Base) : ");
        Tab1.add(lblPAN);
        lblPAN.setBounds(170, 400, 320, 20);

        txtPAN.setEditable(false);
        txtPAN.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        Tab1.add(txtPAN);
        txtPAN.setBounds(480, 400, 160, 20);

        Tab.addTab("Voucher Information", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Hierarchy :");
        Tab2.add(jLabel31);
        jLabel31.setBounds(5, 18, 90, 15);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(105, 14, 184, 24);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("From :");
        Tab2.add(jLabel32);
        jLabel32.setBounds(5, 52, 90, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(105, 50, 182, 19);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel35.setText("Remarks :");
        Tab2.add(jLabel35);
        jLabel35.setBounds(5, 82, 90, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(105, 78, 468, 19);

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Your Action :");
        Tab2.add(jLabel36);
        jLabel36.setBounds(5, 120, 90, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(105, 120, 182, 100);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Send To :");
        Tab2.add(jLabel33);
        jLabel33.setBounds(5, 232, 90, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(105, 228, 184, 24);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Remarks :");
        Tab2.add(jLabel34);
        jLabel34.setBounds(5, 264, 90, 15);

        txtToRemarks.setNextFocusableComponent(cmdBack2);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(105, 260, 516, 19);

        cmdBack2.setText("<< Back");
        cmdBack2.setNextFocusableComponent(cmdRemove);
        cmdBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBack2);
        cmdBack2.setBounds(534, 350, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(559, 77, 33, 21);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 614, 144);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 191, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(13, 207, 473, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewHistory);
        cmdViewHistory.setBounds(498, 242, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        jPanel1.add(cmdNormalView);
        cmdNormalView.setBounds(498, 273, 132, 24);

        cmdPreviewA.setText("Preview Report");
        cmdPreviewA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewAActionPerformed(evt);
            }
        });
        jPanel1.add(cmdPreviewA);
        cmdPreviewA.setBounds(498, 209, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(498, 305, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel1.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(506, 334, 129, 19);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 654, 500);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(4, 570, 650, 22);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdReasoncodeBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdReasoncodeBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtReasonCodeName;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdReasoncodeBigActionPerformed

    private void txtReasonCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtReasonCodeFocusLost
        if (!txtReasonCode.getText().trim().equals("")) {
            int InvoiceType = 0;
            if (!txtBookCode.getText().trim().equals("")) {
                if (txtBookCode.getText().trim().equals("13")) {
                    InvoiceType = 1;
                } else if (txtBookCode.getText().trim().equals("17")) {
                    InvoiceType = 2;
                } else if (txtBookCode.getText().trim().equals("19")) {
                    InvoiceType = 3;
                } else {
                    InvoiceType = 99;
                    txtReasonCode.setText("NA");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please enter Book code first");
                txtBookCode.requestFocus();
            }
            String SQL = "SELECT REASON_CODE_DESC,REASON_CODE FROM D_FIN_REASONCODE_MASTER WHERE INVOICE_TYPE=" + InvoiceType + " AND REASON_CODE='" + txtReasonCode.getText().trim() + "' ";

            if (data.IsRecordExist(SQL, FinanceGlobal.FinURL)) {
                txtReasonCodeName.setText(data.getStringValueFromDB(SQL, FinanceGlobal.FinURL));
            } else {
                JOptionPane.showMessageDialog(null, "Invalid Reason Code.");
                txtReasonCodeName.setText("");
            }

        }
    }//GEN-LAST:event_txtReasonCodeFocusLost

    private void txtReasonCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtReasonCodeKeyPressed
        try {

            if (evt.getKeyCode() == 112) {
                LOV aList = new LOV();
                int InvoiceType = 0;
                if (!txtBookCode.getText().trim().equals("")) {
                    if (txtBookCode.getText().trim().equals("13")) {
                        InvoiceType = 1;
                    } else if (txtBookCode.getText().trim().equals("17")) {
                        InvoiceType = 2;
                    } else if (txtBookCode.getText().trim().equals("19")) {
                        InvoiceType = 3;
                    } else {
                        InvoiceType = 99;
                        txtReasonCode.setText("NA");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please enter Book code first");
                    //txtBookCode.requestFocus();
                }

                aList.SQL = " SELECT REASON_CODE,REASON_CODE_DESC FROM D_FIN_REASONCODE_MASTER WHERE INVOICE_TYPE=" + InvoiceType + "  ";//AND REASON_CODE='" + txtReasonCode.getText().trim() + "'
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.SecondCol = 2;
                aList.DefaultSearchOn = 2;
                aList.UseSpecifiedConn = true;
                aList.dbURL = FinanceGlobal.FinURL;

                if (aList.ShowLOV()) {
                    txtReasonCode.setText(aList.ReturnVal);
                    txtReasonCodeName.setText(aList.SecondVal);
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtReasonCodeKeyPressed

    private void mnuSelectJVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSelectJVActionPerformed
        // TODO add your handling code here:
        try {
            frmSelectJV objSelect = new frmSelectJV();
            if (Table.getRowCount() > 0 && Table.getSelectedRow() >= 0) {
                objSelect.PartyCode = DataModel.getValueByVariable("SUB_ACCOUNT_CODE", Table.getSelectedRow());
            }
            objSelect.ShowDialog();

            if (!objSelect.Cancelled) {

                double AmountTotal = 0;

                for (int r = 1; r <= objSelect.SelectedItems.size(); r++) {
                    clsVoucher objItem = (clsVoucher) objSelect.SelectedItems.get(Integer.toString(r));

                    Object[] rowData = new Object[1];
                    rowData[0] = "1";
                    DataModel.addRow(rowData);

                    int NewRow = Table.getRowCount() - 1;
                    DataModel.setValueByVariable("SR_NO", Integer.toString(r), NewRow);
                    DataModel.setValueByVariable("SUB_ACCOUNT_CODE", objSelect.PartyCode, NewRow);
                    DataModel.setValueByVariable("INVOICE_NO", objItem.getAttribute("INVOICE_NO").getString(), NewRow);
                    DataModel.setValueByVariable("INVOICE_DATE", objItem.getAttribute("INVOICE_DATE").getString(), NewRow);
                    DataModel.setValueByVariable("INVOICE_AMOUNT", Double.toString(objItem.getAttribute("INVOICE_AMOUNT").getDouble()), NewRow);
                    DataModel.setValueByVariable("AMOUNT", Double.toString(objItem.getAttribute("AMOUNT").getDouble()), NewRow);
                    DataModel.setValueByVariable("PO_NO", objItem.getAttribute("PO_NO").getString(), NewRow);
                    DataModel.setValueByVariable("PO_DATE", objItem.getAttribute("PO_DATE").getString(), NewRow);
                    DataModel.setValueByVariable("REF_NO", objItem.getAttribute("VOUCHER_NO").getString(), NewRow);
                    DataModel.setValueByVariable("REF_DATE", objItem.getAttribute("VOUCHER_DATE").getString(), NewRow);
                    DataModel.setValueByVariable("MODULE_ID", Integer.toString(clsVoucher.JournalVoucherModuleID), NewRow);
                    DataModel.setValueByVariable("MODULE_NAME", clsModules.getModuleName(EITLERPGLOBAL.gCompanyID, clsVoucher.JournalVoucherModuleID), NewRow);
                    DataModel.setValueByVariable("REF_COMPANY_ID", Integer.toString(objItem.getAttribute("COMPANY_ID").getInt()), NewRow);
                    DataModel.setValueByVariable("REF_COMPANY_NAME", clsCompany.getCompanyName(objItem.getAttribute("COMPANY_ID").getInt()), NewRow);
                    DataModel.setValueByVariable("LINK_NO", objItem.getAttribute("LINK_NO").getString(), NewRow);

                    DataModel.setValueByVariable("HSN_SAC_CODE", objItem.getAttribute("HSN_SAC_CODE").getString(), NewRow);
                    DataModel.setValueByVariable("ITEM_DESCRIPTION", objItem.getAttribute("ITEM_DESCRIPTION").getString(), NewRow);
                    DataModel.setValueByVariable("GSTN_RATE", objItem.getAttribute("GSTN_RATE").getString(), NewRow);
                    DataModel.setValueByVariable("GR_INVOICE_NO", objItem.getAttribute("GR_INVOICE_NO").getString(), NewRow);
                    DataModel.setValueByVariable("GR_INVOICE_DATE", objItem.getAttribute("GR_INVOICE_DATE").getString(), NewRow);
                    DataModel.setValueByVariable("GR_NO", objItem.getAttribute("GR_NO").getString(), NewRow);
                    DataModel.setValueByVariable("GR_DATE", objItem.getAttribute("GR_DATE").getString(), NewRow);
                }
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_mnuSelectJVActionPerformed

    private void mnuSelectDebitNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSelectDebitNoteActionPerformed
        // TODO add your handling code here:
        try {
            frmSelectionDebitVoucher objSelect = new frmSelectionDebitVoucher();
            objSelect.PartyCode = DataModel.getValueByVariable("SUB_ACCOUNT_CODE", Table.getSelectedRow());
            objSelect.MainCode = DataModel.getValueByVariable("MAIN_ACCOUNT_CODE", Table.getSelectedRow());
            objSelect.ShowDialog();
            if (!objSelect.Cancelled) {
                double AmountTotal = 0;
                for (int r = 1; r <= objSelect.SelectedItems.size(); r++) {
                    clsVoucher objItem = (clsVoucher) objSelect.SelectedItems.get(Integer.toString(r));
                    Object[] rowData = new Object[1];
                    rowData[0] = "1";
                    DataModel.addRow(rowData);
                    int NewRow = Table.getRowCount() - 1;
                    DataModel.setValueByVariable("SR_NO", Integer.toString(r), NewRow);
                    DataModel.setValueByVariable("MAIN_ACCOUNT_CODE", objSelect.MainCode, NewRow);
                    DataModel.setValueByVariable("SUB_ACCOUNT_CODE", objSelect.PartyCode, NewRow);
                    DataModel.setValueByVariable("ACCOUNT_NAME", clsAccount.getAccountName(objSelect.MainCode, objSelect.PartyCode), NewRow);
                    DataModel.setValueByVariable("LINK_NO", objItem.getAttribute("LINK_NO").getString(), NewRow);
                    DataModel.setValueByVariable("AMOUNT", Double.toString(objItem.getAttribute("AMOUNT").getDouble()), NewRow);
                    DataModel.setValueByVariable("INVOICE_NO", objItem.getAttribute("INVOICE_NO").getString(), NewRow);
                    DataModel.setValueByVariable("INVOICE_DATE", objItem.getAttribute("INVOICE_DATE").getString(), NewRow);
                    String InvNo = objItem.getAttribute("INVOICE_NO").getString();
                    String InvDate = EITLERPGLOBAL.formatDateDB(objItem.getAttribute("INVOICE_DATE").getString());
                    DataModel.setValueByVariable("INVOICE_AMOUNT", Double.toString(clsSalesInvoice.getInvoiceTotal(EITLERPGLOBAL.gCompanyID, InvNo, InvDate)), NewRow);
                    DataModel.setValueByVariable("VALUE_DATE", txtDocDate.getText().trim(), NewRow);
                    DataModel.setValueByVariable("PO_NO", objItem.getAttribute("PO_NO").getString(), NewRow);
                    DataModel.setValueByVariable("PO_DATE", objItem.getAttribute("PO_DATE").getString(), NewRow);

                    DataModel.setValueByVariable("REF_NO", objItem.getAttribute("VOUCHER_NO").getString(), NewRow);
                    DataModel.setValueByVariable("REF_DATE", objItem.getAttribute("VOUCHER_DATE").getString(), NewRow);
                    DataModel.setValueByVariable("MODULE_ID", Integer.toString(clsVoucher.getVoucherModuleID(FinanceGlobal.TYPE_DEBIT_NOTE)), NewRow);
                    DataModel.setValueByVariable("MODULE_NAME", clsModules.getModuleName(EITLERPGLOBAL.gCompanyID, clsVoucher.getVoucherModuleID(FinanceGlobal.TYPE_DEBIT_NOTE)), NewRow);
                    DataModel.setValueByVariable("REF_COMPANY_ID", Integer.toString(objItem.getAttribute("COMPANY_ID").getInt()), NewRow);
                    DataModel.setValueByVariable("REF_COMPANY_NAME", clsCompany.getCompanyName(objItem.getAttribute("COMPANY_ID").getInt()), NewRow);
                    //DisplayAgentAlpha(NewRow,objItem.getAttribute("INVOICE_DATE").getString());

                    DataModel.setValueByVariable("HSN_SAC_CODE", objItem.getAttribute("HSN_SAC_CODE").getString(), NewRow);
                    DataModel.setValueByVariable("ITEM_DESCRIPTION", objItem.getAttribute("ITEM_DESCRIPTION").getString(), NewRow);
                    DataModel.setValueByVariable("GSTN_RATE", objItem.getAttribute("GSTN_RATE").getString(), NewRow);
                    DataModel.setValueByVariable("GR_INVOICE_NO", objItem.getAttribute("GR_INVOICE_NO").getString(), NewRow);
                    DataModel.setValueByVariable("GR_INVOICE_DATE", objItem.getAttribute("GR_INVOICE_DATE").getString(), NewRow);
                    DataModel.setValueByVariable("GR_NO", objItem.getAttribute("GR_NO").getString(), NewRow);
                    DataModel.setValueByVariable("GR_DATE", objItem.getAttribute("GR_DATE").getString(), NewRow);
                }
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_mnuSelectDebitNoteActionPerformed

    private void mnuShowAdvAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShowAdvAmountActionPerformed
        // TODO add your handling code here:
        try {
            String MainCode = DataModel.getValueByVariable("MAIN_ACCOUNT_CODE", Table.getSelectedRow());
            String SubCode = DataModel.getValueByVariable("SUB_ACCOUNT_CODE", Table.getSelectedRow());
            frmLedger.advReceiptDetail(MainCode, SubCode, EITLERPGLOBAL.getCurrentDateDB());
        } catch (Exception e) {
        }
    }//GEN-LAST:event_mnuShowAdvAmountActionPerformed

    private void mnuSelectInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSelectInvoiceActionPerformed
        // TODO add your handling code here:
        try {

            frmSelectionReceiptVoucher objSelect = new frmSelectionReceiptVoucher();
            if (Table.getRowCount() > 0 && Table.getSelectedRow() >= 0) {
                objSelect.PartyCode = DataModel.getValueByVariable("DEDUCTION_CODE", Table.getSelectedRow());
            }
            objSelect.ShowDialog();

            if (!objSelect.Cancelled) {

                double AmountTotal = 0;

                for (int r = 1; r <= objSelect.SelectedItems.size(); r++) {
                    clsVoucher objItem = (clsVoucher) objSelect.SelectedItems.get(Integer.toString(r));

                    Object[] rowData = new Object[1];
                    rowData[0] = "1";
                    DataModel.addRow(rowData);

                    int NewRow = Table.getRowCount() - 1;
                    DataModel.setValueByVariable("EFFECT", "Cr", NewRow);
                    DataModel.setValueByVariable("SR_NO", Integer.toString(r), NewRow);
                    DataModel.setValueByVariable("SUB_ACCOUNT_CODE", objSelect.PartyCode, NewRow);
                    DataModel.setValueByVariable("INVOICE_NO", objItem.getAttribute("INVOICE_NO").getString(), NewRow);
                    DataModel.setValueByVariable("INVOICE_DATE", objItem.getAttribute("INVOICE_DATE").getString(), NewRow);
                    DataModel.setValueByVariable("INVOICE_AMOUNT", Double.toString(objItem.getAttribute("AMOUNT").getDouble()), NewRow);
                    DataModel.setValueByVariable("VALUE_DATE", txtDocDate.getText().trim(), NewRow);
                    DataModel.setValueByVariable("AMOUNT", Double.toString(objItem.getAttribute("AMOUNT").getDouble()), NewRow);
                    DataModel.SetUserObject(NewRow, new HashMap());
                    DataModel.setValueByVariable("PO_NO", objItem.getAttribute("PO_NO").getString(), NewRow);
                    DataModel.setValueByVariable("PO_DATE", objItem.getAttribute("PO_DATE").getString(), NewRow);
                    DataModel.setValueByVariable("REF_NO", objItem.getAttribute("INVOICE_NO").getString(), NewRow);
                    DataModel.setValueByVariable("REF_DATE", objItem.getAttribute("INVOICE_DATE").getString(), NewRow);
                    DataModel.setValueByVariable("MODULE_ID", Integer.toString(objItem.getAttribute("MODULE_ID").getInt()), NewRow);
                    DataModel.setValueByVariable("MODULE_NAME", clsModules.getModuleName(EITLERPGLOBAL.gCompanyID, objItem.getAttribute("MODULE_ID").getInt()), NewRow);
                    DataModel.setValueByVariable("REF_COMPANY_ID", Integer.toString(objItem.getAttribute("COMPANY_ID").getInt()), NewRow);
                    DataModel.setValueByVariable("REF_COMPANY_NAME", clsCompany.getCompanyName(objItem.getAttribute("COMPANY_ID").getInt()), NewRow);
                    DataModel.setValueByVariable("LINK_NO", "", NewRow);

                    DataModel.setValueByVariable("HSN_SAC_CODE", objItem.getAttribute("HSN_SAC_CODE").getString(), NewRow);
                    DataModel.setValueByVariable("ITEM_DESCRIPTION", objItem.getAttribute("ITEM_DESCRIPTION").getString(), NewRow);
                    DataModel.setValueByVariable("GSTN_RATE", objItem.getAttribute("GSTN_RATE").getString(), NewRow);
                    DataModel.setValueByVariable("GR_INVOICE_NO", objItem.getAttribute("GR_INVOICE_NO").getString(), NewRow);
                    DataModel.setValueByVariable("GR_INVOICE_DATE", objItem.getAttribute("GR_INVOICE_DATE").getString(), NewRow);
                    DataModel.setValueByVariable("GR_NO", objItem.getAttribute("GR_NO").getString(), NewRow);
                    DataModel.setValueByVariable("GR_DATE", objItem.getAttribute("GR_DATE").getString(), NewRow);

                    DisplayAgentAlpha(NewRow, objItem.getAttribute("INVOICE_DATE").getString());
                    if (objItem.getAttribute("INVOICE_NO").getString().substring(0, 1).trim().equals("F")) {
                        String InvNo = objItem.getAttribute("INVOICE_NO").getString();
                        String InvDate = EITLERPGLOBAL.formatDateDB(objItem.getAttribute("INVOICE_DATE").getString());
                        String FinYear = EITLERPGLOBAL.FinancialYear(InvDate);
                        String Link = InvNo + "/" + FinYear;

                        DataModel.setValueByVariable("LINK_NO", Link, NewRow);
                        //DataModel.setValueByVariable("AGENT_SR",Link,RowNo);
                    }
                }

                UpdateTotals();
            }

        } catch (Exception e) {

        }
    }//GEN-LAST:event_mnuSelectInvoiceActionPerformed

    private void DisplayAgentAlpha(int RowNo, String InvoiceDate) {
        try {
            String AgentAlpha = clsSalesParty.getAgentAlpha(DataModel.getValueByVariable("SUB_ACCOUNT_CODE", RowNo));
            String InvoiceNo = DataModel.getValueByVariable("INVOICE_NO", RowNo);
            if (!InvoiceNo.trim().equals("")) {
                AgentAlpha = AgentAlpha + "/" + data.getStringValueFromDB("SELECT AGENT_SR_NO FROM D_SAL_INVOICE_HEADER WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND INVOICE_NO ='" + InvoiceNo + "' AND INVOICE_DATE='" + EITLERPGLOBAL.formatDateDB(InvoiceDate) + "' ");
                String InvDate = EITLERPGLOBAL.formatDateDB(InvoiceDate);
                String FinYear = EITLERPGLOBAL.FinancialYear(InvDate);
                AgentAlpha = AgentAlpha + "/" + FinYear;
            }
            DataModel.setValueByVariable("LINK_NO", AgentAlpha, RowNo);
        } catch (Exception e) {
        }
    }

    private void mnuShowRefDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShowRefDocActionPerformed
        // TODO add your handling code here:
        System.out.println("refdoc");
        try {
            String DocNo = DataModel.getValueByVariable("REF_NO", Table.getSelectedRow());
            clsVoucher.OpenVoucher(DocNo, new frmPendingApprovals());
            //            int VoucherType = clsVoucher.getVoucherType(DocNo);
            //
            //            AppletFrame aFrame=new AppletFrame("Voucher");
            //
            //            aFrame.startAppletEx("EITLERP.Finance.frmReceiptVoucher","Receipt Vocuher");
            //            frmReceiptVoucher ObjDoc=(frmReceiptVoucher) aFrame.ObjApplet;
            //            int CompanyID=UtilFunctions.CInt(DataModel.getValueByVariable("REF_COMPANY_ID", Table.getSelectedRow()));
            //            ObjDoc.FindByCompany(CompanyID,DocNo);

        } catch (Exception e) {

        }
    }//GEN-LAST:event_mnuShowRefDocActionPerformed

    private void mnuSelectReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSelectReceiptActionPerformed
        // TODO add your handling code here:
        try {

            frmSelectionAdvReceipt objSelect = new frmSelectionAdvReceipt();
            if (Table.getRowCount() > 0 && Table.getSelectedRow() >= 0) {
                objSelect.MainCode = DataModel.getValueByVariable("MAIN_ACCOUNT_CODE", Table.getSelectedRow());
                objSelect.PartyCode = DataModel.getValueByVariable("SUB_ACCOUNT_CODE", Table.getSelectedRow());
            }
            objSelect.ShowDialog();

            if (!objSelect.Cancelled) {

                double AmountTotal = 0;
                //FormatGrid();
                for (int r = 1; r <= objSelect.SelectedItems.size(); r++) {
                    clsVoucher objItem = (clsVoucher) objSelect.SelectedItems.get(Integer.toString(r));

                    Object[] rowData = new Object[1];
                    DataModel.addRow(rowData);

                    int NewRow = Table.getRowCount() - 1;

                    DataModel.setValueByVariable("SR_NO", Integer.toString(r), NewRow);
                    DataModel.setValueByVariable("EFFECT", "Dr", NewRow);
                    DataModel.setValueByVariable("MAIN_ACCOUNT_CODE", objSelect.MainCode, NewRow);
                    DataModel.setValueByVariable("SUB_ACCOUNT_CODE", objSelect.PartyCode, NewRow);
                    DataModel.setValueByVariable("ACCOUNT_NAME", clsAccount.getAccountName(objSelect.MainCode, objSelect.PartyCode), NewRow);
                    DataModel.setValueByVariable("INVOICE_NO", objItem.getAttribute("INVOICE_NO").getString(), NewRow);
                    DataModel.setValueByVariable("INVOICE_DATE", objItem.getAttribute("INVOICE_DATE").getString(), NewRow);
                    DataModel.setValueByVariable("INVOICE_AMOUNT", Double.toString(objItem.getAttribute("AMOUNT").getDouble()), NewRow);
                    DataModel.setValueByVariable("VALUE_DATE", objItem.getAttribute("VALUE_DATE").getString(), NewRow);
                    DataModel.setValueByVariable("AMOUNT", Double.toString(objItem.getAttribute("AMOUNT").getDouble()), NewRow);
                    DataModel.setValueByVariable("PO_NO", objItem.getAttribute("PO_NO").getString(), NewRow);
                    DataModel.setValueByVariable("PO_DATE", objItem.getAttribute("PO_DATE").getString(), NewRow);
                    DataModel.setValueByVariable("REF_NO", objItem.getAttribute("VOUCHER_NO").getString(), NewRow);
                    DataModel.setValueByVariable("REF_DATE", objItem.getAttribute("VOUCHER_DATE").getString(), NewRow);
                    DataModel.setValueByVariable("MODULE_ID", Integer.toString(clsVoucher.getVoucherModuleID(FinanceGlobal.TYPE_RECEIPT)), NewRow);
                    DataModel.setValueByVariable("MODULE_NAME", clsModules.getModuleName(EITLERPGLOBAL.gCompanyID, clsVoucher.getVoucherModuleID(FinanceGlobal.TYPE_RECEIPT)), NewRow);
                    DataModel.setValueByVariable("REF_COMPANY_ID", Integer.toString(objItem.getAttribute("COMPANY_ID").getInt()), NewRow);
                    DataModel.setValueByVariable("REF_COMPANY_NAME", clsCompany.getCompanyName(objItem.getAttribute("COMPANY_ID").getInt()), NewRow);

                    DataModel.setValueByVariable("HSN_SAC_CODE", objItem.getAttribute("HSN_SAC_CODE").getString(), NewRow);
                    DataModel.setValueByVariable("ITEM_DESCRIPTION", objItem.getAttribute("ITEM_DESCRIPTION").getString(), NewRow);
                    DataModel.setValueByVariable("GSTN_RATE", objItem.getAttribute("GSTN_RATE").getString(), NewRow);
                    DataModel.setValueByVariable("GR_INVOICE_NO", objItem.getAttribute("GR_INVOICE_NO").getString(), NewRow);
                    DataModel.setValueByVariable("GR_INVOICE_DATE", objItem.getAttribute("GR_INVOICE_DATE").getString(), NewRow);
                    DataModel.setValueByVariable("GR_NO", objItem.getAttribute("GR_NO").getString(), NewRow);
                    DataModel.setValueByVariable("GR_DATE", objItem.getAttribute("GR_DATE").getString(), NewRow);

                }

                UpdateTotals();
            }

        } catch (Exception e) {

        }
    }//GEN-LAST:event_mnuSelectReceiptActionPerformed

    private void cmdSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSelectActionPerformed
        // TODO add your handling code here:
        mnuSelect.show(Tab1, cmdSelect.getX(), cmdSelect.getY() + cmdSelect.getHeight());
    }//GEN-LAST:event_cmdSelectActionPerformed

    private void cmdShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowActionPerformed
        // TODO add your handling code here:
        mnuShow.show(Tab1, cmdShow.getX(), cmdShow.getY() + cmdShow.getHeight());
    }//GEN-LAST:event_cmdShowActionPerformed

    private void mnuShowExpenseHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShowExpenseHistoryActionPerformed
        // TODO add your handling code here:
        try {
            if (Table.getSelectedRow() >= 0) {
                String GRNNo = DataModel.getValueByVariable("REF_NO", Table.getSelectedRow());
                int ModuleID = UtilFunctions.CInt(DataModel.getValueByVariable("MODULE_ID", Table.getSelectedRow()));

                if (ModuleID == 63) {
                    String ExpenseID = data.getStringValueFromDB("SELECT EXPENSE_ID FROM D_FIN_EXPENSE_TRANSACTION WHERE DOC_NO='" + GRNNo + "'", FinanceGlobal.FinURL);
                    frmExpenseList objList = new frmExpenseList();

                    objList.ExpesneID = ExpenseID;
                    objList.ShowDialog();

                }

            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_mnuShowExpenseHistoryActionPerformed

    private void mnuSelectExpenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSelectExpenseActionPerformed
        // TODO add your handling code here:
        try {

            String InvoiceNo = "", InvoiceDate = "", RefNo = "", RefDate = "", PONo = "", PODate = "";

            frmSelectionExpense objSelect = new frmSelectionExpense();
            objSelect.ShowDialog();

            if (!objSelect.Cancelled) {

                double AmountTotal = 0;

                FormatGrid();

                for (int r = 1; r <= objSelect.SelectedItems.size(); r++) {
                    clsVoucher objItem = (clsVoucher) objSelect.SelectedItems.get(Integer.toString(r));

                    AmountTotal += (objItem.getAttribute("INVOICE_AMOUNT").getDouble() - objItem.getAttribute("PAID_AMOUNT").getDouble());

                    //==============================================================//
                    //^^^^^^^^^^^^^^^^^^^^^  Credit Entry ^^^^^^^^^^^^^^^^^^^^^^^^^//
                    //=============================================================//
                    Object[] rowData = new Object[1];
                    rowData[0] = "1";
                    DataModel.addRow(rowData);

                    int NewRow = Table.getRowCount() - 1;

                    String PaymentAc = data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM D_FIN_TR_MAPPING WHERE TR_CODE='" + txtBookCode.getText() + "'", FinanceGlobal.FinURL);

                    if (PaymentAc.trim().equals("")) {
                        PaymentAc = "<Payment A/c>";
                    }

                    DataModel.setValueByVariable("EFFECT", "Cr", NewRow);
                    DataModel.setValueByVariable("MAIN_ACCOUNT_CODE", PaymentAc, NewRow);
                    DataModel.setValueByVariable("SUB_ACCOUNT_CODE", "", NewRow);
                    DataModel.setValueByVariable("ACCOUNT_NAME", clsAccount.getAccountName(PaymentAc, ""), NewRow);
                    DataModel.setValueByVariable("AMOUNT", Double.toString(objItem.getAttribute("INVOICE_AMOUNT").getDouble() - objItem.getAttribute("PAID_AMOUNT").getDouble()), NewRow);
                    DataModel.setValueByVariable("REMARKS", "", NewRow);

                    PONo = "";
                    PODate = "";
                    InvoiceNo = objItem.getAttribute("INVOICE_NO").getString();
                    InvoiceDate = objItem.getAttribute("INVOICE_DATE").getString();
                    RefNo = objItem.getAttribute("DOC_NO").getString();
                    RefDate = objItem.getAttribute("DOC_DATE").getString();

                    DataModel.setValueByVariable("PO_NO", "", NewRow);
                    DataModel.setValueByVariable("PO_DATE", "0000-00-00", NewRow);
                    DataModel.setValueByVariable("INVOICE_NO", objItem.getAttribute("INVOICE_NO").getString(), NewRow);
                    DataModel.setValueByVariable("INVOICE_DATE", objItem.getAttribute("INVOICE_DATE").getString(), NewRow);
                    DataModel.setValueByVariable("REF_NO", objItem.getAttribute("DOC_NO").getString(), NewRow);
                    DataModel.setValueByVariable("REF_DATE", objItem.getAttribute("DOC_DATE").getString(), NewRow);
                    DataModel.setValueByVariable("MODULE_ID", "63", NewRow);
                    DataModel.setValueByVariable("MODULE_NAME", clsModules.getModuleName(EITLERPGLOBAL.gCompanyID, 63), NewRow);
                    DataModel.setValueByVariable("LINK_NO", "", NewRow);
                }

                Object[] rowData = new Object[1];

                rowData[0] = "1";

                DataModel.addRow(rowData);

                int NewRow = Table.getRowCount() - 1;

                DataModel.setValueByVariable("EFFECT", "Dr", NewRow);
                DataModel.setValueByVariable("MAIN_ACCOUNT_CODE", "", NewRow);
                DataModel.setValueByVariable("SUB_ACCOUNT_CODE", "<Party A/c>", NewRow);
                DataModel.setValueByVariable("ACCOUNT_NAME", clsPartyMaster.getAccountName("", objSelect.PartyCode), NewRow);
                DataModel.setValueByVariable("AMOUNT", Double.toString(AmountTotal), NewRow);
                DataModel.setValueByVariable("REMARKS", "", NewRow);
                DataModel.setValueByVariable("PO_NO", PONo, NewRow);
                DataModel.setValueByVariable("PO_DATE", PODate, NewRow);
                DataModel.setValueByVariable("INVOICE_NO", InvoiceNo, NewRow);
                DataModel.setValueByVariable("INVOICE_DATE", InvoiceDate, NewRow);
                DataModel.setValueByVariable("REF_NO", RefNo, NewRow);
                DataModel.setValueByVariable("REF_DATE", RefDate, NewRow);
                DataModel.setValueByVariable("MODULE_ID", "63", NewRow);
                DataModel.setValueByVariable("MODULE_NAME", clsModules.getModuleName(EITLERPGLOBAL.gCompanyID, 63), NewRow);
                DataModel.setValueByVariable("LINK_NO", "", NewRow);
            }

        } catch (Exception e) {

        }

    }//GEN-LAST:event_mnuSelectExpenseActionPerformed

    private void mnuShowGRNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShowGRNActionPerformed
        // TODO add your handling code here:
        try {

            int ModuleID = UtilFunctions.CInt(DataModel.getValueByVariable("MODULE_ID", Table.getSelectedRow()));

            try {
                String DocNo = DataModel.getValueByVariable("INVOICE_NO", Table.getSelectedRow());
                String DocDate = DataModel.getValueByVariable("INVOICE_DATE", Table.getSelectedRow());
                AppletFrame aFrame = new AppletFrame("Sales Invoice");
                if (DocNo.startsWith("FE/")) {
                    aFrame.startAppletEx("EITLERP.FeltSales.FeltInvReport.frmFeltSalesInvoice", "Sales Invoice");
                    EITLERP.FeltSales.FeltInvReport.frmFeltSalesInvoice ObjDoc = (EITLERP.FeltSales.FeltInvReport.frmFeltSalesInvoice) aFrame.ObjApplet;
                    int CompanyID = UtilFunctions.CInt(DataModel.getValueByVariable("REF_COMPANY_ID", Table.getSelectedRow()));
                    ObjDoc.FindByCompany(CompanyID, DocNo, DocDate);
                } else {
                    aFrame.startAppletEx("EITLERP.Sales.frmSalesInvoice", "Sales Invoice");
                    frmSalesInvoice ObjDoc = (frmSalesInvoice) aFrame.ObjApplet;
                    int CompanyID = UtilFunctions.CInt(DataModel.getValueByVariable("REF_COMPANY_ID", Table.getSelectedRow()));
                    ObjDoc.FindByCompany(CompanyID, DocNo, DocDate);
                }
//                aFrame.startAppletEx("EITLERP.Sales.frmSalesInvoice", "Sales Invoice");
//                frmSalesInvoice ObjDoc = (frmSalesInvoice) aFrame.ObjApplet;
//                int CompanyID = UtilFunctions.CInt(DataModel.getValueByVariable("REF_COMPANY_ID", Table.getSelectedRow()));
//                ObjDoc.FindByCompany(CompanyID, DocNo, DocDate);

            } catch (Exception e) {

            }

        } catch (Exception e) {

        }

    }//GEN-LAST:event_mnuShowGRNActionPerformed

    private void mnuShowPOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShowPOActionPerformed
        // TODO add your handling code here:
        try {

            String PONo = DataModel.getValueByVariable("PO_NO", Table.getSelectedRow());
            if (!PONo.trim().equals("")) {
                String DocNo = PONo;
                int POType = clsPOGen.getPOType(EITLERPGLOBAL.gCompanyID, DocNo);
                AppletFrame aFrame = new AppletFrame("Purchase Order");
                aFrame.startAppletEx("EITLERP.Purchase.frmPOGen", "Purchase Order");
                frmPOGen ObjDoc = (frmPOGen) aFrame.ObjApplet;
                ObjDoc.POType = POType;
                int CompanyID = UtilFunctions.CInt(DataModel.getValueByVariable("REF_COMPANY_ID", Table.getSelectedRow()));
                ObjDoc.FindByCompany(CompanyID, DocNo);
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_mnuShowPOActionPerformed

    private void txtDocNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocNoFocusLost
        // TODO add your handling code here:
        try {
            if (txtDocNo.getText().length() == 2) {
                //Update this with last voucher no. of this series
                if (data.IsRecordExist("SELECT VOUCHER_NO FROM D_FIN_VOUCHER_HEADER WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND VOUCHER_NO LIKE '%" + txtDocNo.getText() + "%'", FinanceGlobal.FinURL)) {
                    String LastDocNo = data.getStringValueFromDB("SELECT MAX(VOUCHER_NO) AS VOUCHER_NO FROM D_FIN_VOUCHER_HEADER WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND VOUCHER_NO LIKE '%" + txtDocNo.getText() + "%'", FinanceGlobal.FinURL);
                    txtDocNo.setText(LastDocNo);
                    txtDocNo.requestFocus();
                }
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtDocNoFocusLost

    private void cmdChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdChangeActionPerformed
        // TODO add your handling code here:
        txtDocNo.setEnabled(false);
        txtDocNo.requestFocus();
    }//GEN-LAST:event_cmdChangeActionPerformed

    private void mnuSelectPJVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSelectPJVActionPerformed
        // TODO add your handling code here:
        try {

            frmSelectionPaymentVoucher objSelect = new frmSelectionPaymentVoucher();
            objSelect.ShowDialog();

            if (!objSelect.Cancelled) {

                double AmountTotal = 0;

                FormatGrid();

                for (int r = 1; r <= objSelect.SelectedItems.size(); r++) {
                    clsVoucher objItem = (clsVoucher) objSelect.SelectedItems.get(Integer.toString(r));

                    AmountTotal += objItem.getAttribute("AMOUNT").getDouble();

                    Object[] rowData = new Object[1];
                    rowData[0] = "1";
                    DataModel.addRow(rowData);

                    int NewRow = Table.getRowCount() - 1;

                    String PaymentAc = data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM D_FIN_TR_MAPPING WHERE TR_CODE='" + txtBookCode.getText() + "'", FinanceGlobal.FinURL);

                    if (PaymentAc.trim().equals("")) {
                        PaymentAc = "<Payment A/c>";
                    }

                    DataModel.setValueByVariable("EFFECT", "Cr", NewRow);
                    DataModel.setValueByVariable("MAIN_ACCOUNT_CODE", PaymentAc, NewRow);
                    DataModel.setValueByVariable("SUB_ACCOUNT_CODE", "", NewRow);
                    DataModel.setValueByVariable("ACCOUNT_NAME", clsAccount.getAccountName(PaymentAc, ""), NewRow);
                    DataModel.setValueByVariable("AMOUNT", Double.toString(objItem.getAttribute("AMOUNT").getDouble() - objItem.getAttribute("AMOUNT_PAID").getDouble()), NewRow);
                    DataModel.setValueByVariable("REMARKS", "", NewRow);
                    DataModel.setValueByVariable("PO_NO", objItem.getAttribute("PO_NO").getString(), NewRow);
                    DataModel.setValueByVariable("PO_DATE", objItem.getAttribute("PO_DATE").getString(), NewRow);
                    DataModel.setValueByVariable("INVOICE_NO", objItem.getAttribute("INVOICE_NO").getString(), NewRow);
                    DataModel.setValueByVariable("INVOICE_DATE", objItem.getAttribute("INVOICE_DATE").getString(), NewRow);
                    DataModel.setValueByVariable("REF_NO", objItem.getAttribute("GRN_NO").getString(), NewRow);
                    DataModel.setValueByVariable("REF_DATE", objItem.getAttribute("GRN_DATE").getString(), NewRow);
                    DataModel.setValueByVariable("MODULE_ID", Integer.toString(objItem.getAttribute("MODULE_ID").getInt()), NewRow);
                    DataModel.setValueByVariable("MODULE_NAME", clsModules.getModuleName(EITLERPGLOBAL.gCompanyID, objItem.getAttribute("MODULE_ID").getInt()), NewRow);
                    DataModel.setValueByVariable("LINK_NO", "", NewRow);

                    DataModel.setValueByVariable("HSN_SAC_CODE", objItem.getAttribute("HSN_SAC_CODE").getString(), NewRow);
                    DataModel.setValueByVariable("ITEM_DESCRIPTION", objItem.getAttribute("ITEM_DESCRIPTION").getString(), NewRow);
                    DataModel.setValueByVariable("GSTN_RATE", objItem.getAttribute("GSTN_RATE").getString(), NewRow);
                    DataModel.setValueByVariable("GR_INVOICE_NO", objItem.getAttribute("GR_INVOICE_NO").getString(), NewRow);
                    DataModel.setValueByVariable("GR_INVOICE_DATE", objItem.getAttribute("GR_INVOICE_DATE").getString(), NewRow);
                    DataModel.setValueByVariable("GR_NO", objItem.getAttribute("GR_NO").getString(), NewRow);
                    DataModel.setValueByVariable("GR_DATE", objItem.getAttribute("GR_DATE").getString(), NewRow);
                }

                Object[] rowData = new Object[1];

                rowData[0] = "1";

                DataModel.addRow(rowData);

                int NewRow = Table.getRowCount() - 1;

                DataModel.setValueByVariable("EFFECT", "Dr", NewRow);
                DataModel.setValueByVariable("MAIN_ACCOUNT_CODE", clsPartyMaster.getMainAccountCode(objSelect.PartyCode), NewRow);
                DataModel.setValueByVariable("SUB_ACCOUNT_CODE", objSelect.PartyCode, NewRow);
                DataModel.setValueByVariable("ACCOUNT_NAME", clsPartyMaster.getAccountName(clsPartyMaster.getMainAccountCode(objSelect.PartyCode), objSelect.PartyCode), NewRow);
                DataModel.setValueByVariable("AMOUNT", Double.toString(AmountTotal), NewRow);
                DataModel.setValueByVariable("REMARKS", "", NewRow);
            }

        } catch (Exception e) {

        }
    }//GEN-LAST:event_mnuSelectPJVActionPerformed

    private void mnuBillwisePaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBillwisePaymentActionPerformed
        // TODO add your handling code here:
        try {

            if (Table.getSelectedRow() >= 0) {
                frmRptPartyPaymentInfo objForm = new frmRptPartyPaymentInfo();
                objForm.PartyCode = DataModel.getValueByVariable("SUB_ACCOUNT_CODE", Table.getSelectedRow());
                objForm.PONo = DataModel.getValueByVariable("PO_NO", Table.getSelectedRow());
                objForm.ShowDialog();
            }
        } catch (Exception e) {

        }

    }//GEN-LAST:event_mnuBillwisePaymentActionPerformed

    private void mnuAdvancePaymentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mnuAdvancePaymentMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_mnuAdvancePaymentMouseClicked

    private void mnuAdvancePaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAdvancePaymentActionPerformed
        // TODO add your handling code here:
        try {

            if (Table.getSelectedRow() >= 0) {

                frmRptAdvancePayment objForm = new frmRptAdvancePayment();
                objForm.PartyCode = DataModel.getValueByVariable("SUB_ACCOUNT_CODE", Table.getSelectedRow());
                objForm.PONo = DataModel.getValueByVariable("PO_NO", Table.getSelectedRow());
                objForm.ShowDialog();
            }
        } catch (Exception e) {

        }

    }//GEN-LAST:event_mnuAdvancePaymentActionPerformed

    private void txtBookCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBookCodeFocusLost
        if (txtBookCode.getText().trim().equals("13") || txtBookCode.getText().trim().equals("17") || txtBookCode.getText().trim().equals("19")) {
            txtLegacyNo.setEnabled(true);
            txtLegacyDate.setEnabled(true);
        } else {
            txtLegacyNo.setEnabled(false);
            txtLegacyDate.setEnabled(false);
        }

        try {
            if (txtBookCode.getText().trim().equals("") || txtBookCode.getText().length() != 2) {
                JOptionPane.showMessageDialog(null, "Book Code " + txtBookCode.getText().trim() + " is not valid. Please check and correct it");
                txtBookCode.setText("");
                txtBookCode.requestFocus();
                return;
            }
            if (!data.IsRecordExist("SELECT BOOK_CODE FROM D_FIN_BOOK_MASTER WHERE BOOK_CODE='" + txtBookCode.getText().trim() + "'", FinanceGlobal.FinURL)) {
                JOptionPane.showMessageDialog(null, "Book Code " + txtBookCode.getText().trim() + " is not valid. Please check and correct it");
                txtBookCode.setText("");
                txtBookCode.requestFocus();
                return;
            }
            txtBookName.setText(clsBook.getBookName(EITLERPGLOBAL.gCompanyID, txtBookCode.getText()));

            if (EditMode == EITLERPGLOBAL.ADD) {
                String newVoucherNo = clsVoucher.getNextVoucherNo(EITLERPGLOBAL.gCompanyID, txtBookCode.getText(), SelPrefix);
                txtDocNo.setText(newVoucherNo);
            }

            if (EditMode == EITLERPGLOBAL.EDIT) {
                //if(ApprovalFlow.IsCreator(clsVoucher.ModuleID, objVoucher.getAttribute("VOUCHER_NO").getString()))
                //{
                if (!txtBookCode.getText().trim().equals(objVoucher.getAttribute("BOOK_CODE").getString())) {
                    SelPrefix = txtDocNo.getText().substring(0, 2);
                    String newVoucherNo = clsVoucher.getNextVoucherNo(EITLERPGLOBAL.gCompanyID, txtBookCode.getText(), SelPrefix);
                    txtDocNo.setText(newVoucherNo);
                    objVoucher.ChangeVoucherNo = true;
                }
                //}
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtBookCodeFocusLost

    private void txtBookCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBookCodeKeyPressed
        // TODO add your handling code here:
        try {

            if (evt.getKeyCode() == 112) {
                LOV aList = new LOV();

                aList.SQL = "SELECT BOOK_CODE,BOOK_NAME FROM D_FIN_BOOK_MASTER ORDER BY BOOK_NAME";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;
                aList.UseSpecifiedConn = true;
                aList.dbURL = FinanceGlobal.FinURL;

                if (aList.ShowLOV()) {
                    txtBookCode.setText(aList.ReturnVal);
                    txtBookName.setText(clsBook.getBookName(EITLERPGLOBAL.gCompanyID, txtBookCode.getText()));
                }

            }

        } catch (Exception e) {

        }
    }//GEN-LAST:event_txtBookCodeKeyPressed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if (TableHS.getRowCount() > 0 && TableHS.getSelectedRow() >= 0) {
            txtAuditRemarks.setText((String) TableHS.getValueAt(TableHS.getSelectedRow(), 4));
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText = txtAuditRemarks;
            bigEdit.ShowEdit();
        }

    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdPreviewAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewAActionPerformed
        // TODO add your handling code here:
        PreviewAuditReport();
    }//GEN-LAST:event_cmdPreviewAActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        objVoucher.VoucherType = FinanceGlobal.TYPE_JOURNAL;
        objVoucher.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo = txtDocNo.getText();
        objVoucher.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        // TODO add your handling code here:
        if (EditMode != 0) {
            if (evt.getKeyCode() == 67 && evt.getModifiersEx() == 128) //Ctrl+C Key Combonation
            {
                //Check that any row exist
                if (Table.getRowCount() > 0) {
                    //First Add new row
                    Object[] rowData = new Object[1];
                    DataModel.addRow(rowData);
                    int NewRow = Table.getRowCount() - 1;

                    //Copy New row with Previous one
                    for (int i = 0; i < Table.getColumnCount(); i++) {
                        Table.setValueAt(Table.getValueAt(Table.getSelectedRow(), i), NewRow, i);
                    }
                }
            }
        }

    }//GEN-LAST:event_TableKeyReleased

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        // TODO add your handling code here:
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void cmdBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack2ActionPerformed

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        // TODO add your handling code here:
        txtDocDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void cmdRemoveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdRemoveFocusGained
        // TODO add your handling code here:
        ShowMessage("Click on this button to remove selected row from the table");
    }//GEN-LAST:event_cmdRemoveFocusGained

    private void cmdAddFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdAddFocusGained
        // TODO add your handling code here:
        ShowMessage("Click on this button to add a new row to table");
    }//GEN-LAST:event_cmdAddFocusGained

    private void txtDocDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter MR Date");
    }//GEN-LAST:event_txtDocDateFocusGained

    private void Tab1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tab1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Tab1MouseClicked

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();

        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if (ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID, 2, txtDocNo.getText())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateFromCombo();
        }


    }//GEN-LAST:event_OpgApproveMouseClicked

    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgHoldItemStateChanged

    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_OpgRejectItemStateChanged

    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgFinalItemStateChanged

    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgApproveItemStateChanged

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        objVoucher.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        if (EditMode == 0 && txtBookCode.getText().toString().equals("14") && txtDocNo.getText().startsWith("CN")) {
            CNPreviewReport();
        } else {
            PreviewReport();
        }
//        PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this record ?", "SDML ERP", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:

        try {
            if (Table.getRowCount() > 0) {
                int CurrentRow = Table.getSelectedRow();

                if (CurrentRow > 0) {
                    CurrentRow--;
                }

                DataModel.removeRow(Table.getSelectedRow());

                if (Table.getRowCount() - 1 > CurrentRow) {
                    Table.changeSelection(CurrentRow, DataModel.getColFromVariable("AMOUNT"), false, false);
                }
                UpdateTotals();
                UpdateSrNo();
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_cmdRemoveActionPerformed

    private void UpdateSrNo() {
        int SrCol = DataModel.getColFromVariable("SR_NO");
        for (int i = 0; i < Table.getRowCount(); i++) {
            Table.setValueAt(Integer.toString(i + 1), i, SrCol);
        }
    }
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        Updating = true;
        Object[] rowData = new Object[14];
        rowData[0] = Integer.toString(Table.getRowCount() + 1);
        rowData[1] = "";
        rowData[2] = "";
        rowData[3] = "";
        rowData[4] = "0";
        rowData[5] = "";
        rowData[6] = "";
        rowData[13] = txtDocDate.getText().trim();
        DataModel.addRow(rowData);

        if (Table.getRowCount() > 1) {
            int NewRow = Table.getRowCount() - 1;

            //Add Last Row References
            DataModel.setValueByVariable("PO_NO", DataModel.getValueByVariable("PO_NO", NewRow - 1), NewRow);
            DataModel.setValueByVariable("PO_DATE", DataModel.getValueByVariable("PO_DATE", NewRow - 1), NewRow);
            DataModel.setValueByVariable("INVOICE_NO", DataModel.getValueByVariable("INVOICE_NO", NewRow - 1), NewRow);
            DataModel.setValueByVariable("INVOICE_DATE", DataModel.getValueByVariable("INVOICE_DATE", NewRow - 1), NewRow);
            DataModel.setValueByVariable("REF_NO", "", NewRow);
            DataModel.setValueByVariable("REF_DATE", "0000-00-00", NewRow);
            DataModel.setValueByVariable("MODULE_ID", "0", NewRow);
            DataModel.setValueByVariable("MODULE_NAME", "", NewRow);
            DataModel.setValueByVariable("INVOICE_AMOUNT", DataModel.getValueByVariable("INVOICE_AMOUNT", NewRow - 1), NewRow);
            DataModel.setValueByVariable("REF_COMPANY_ID", DataModel.getValueByVariable("REF_COMPANY_ID", NewRow - 1), NewRow);
            DataModel.setValueByVariable("REF_COMPANY_NAME", DataModel.getValueByVariable("REF_COMPANY_NAME", NewRow - 1), NewRow);
            DataModel.setValueByVariable("LINK_NO", "", NewRow);

            DataModel.setValueByVariable("HSN_SAC_CODE", "", NewRow);
            DataModel.setValueByVariable("ITEM_DESCRIPTION", "", NewRow);
            DataModel.setValueByVariable("GSTN_RATE", "", NewRow);
            DataModel.setValueByVariable("GR_INVOICE_NO", "", NewRow);
            DataModel.setValueByVariable("GR_INVOICE_DATE", "", NewRow);
            DataModel.setValueByVariable("GR_NO", "", NewRow);
            DataModel.setValueByVariable("GR_DATE", "", NewRow);

        }
        Updating = false;

        Table.changeSelection(Table.getRowCount() - 1, 1, false, false);
        Table.requestFocus();
    }//GEN-LAST:event_cmdAddActionPerformed

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
        try {
            if (EditMode != 0) //Only Process keys when in editing mode
            {

                if (Table.getSelectedColumn() == DataModel.getColFromVariable("EFFECT")) {

                    if (evt.getKeyCode() == 67) {
                        DataModel.setValueByVariable("EFFECT", "Cr", Table.getSelectedRow());
                    }

                    if (evt.getKeyCode() == 68) {
                        DataModel.setValueByVariable("EFFECT", "Dr", Table.getSelectedRow());
                    }
                }

                if (evt.getKeyCode() == 112) //F1 Key pressed
                {

                    if (Table.getSelectedColumn() == DataModel.getColFromVariable("MODULE_NAME")) {
                        LOV aList = new LOV();

                        aList.SQL = "SELECT MODULE_ID,MODULE_DESC FROM D_COM_MODULES WHERE MODULE_ID IN (7,8,48,63) ORDER BY MODULE_DESC";
                        aList.ReturnCol = 1;
                        aList.ShowReturnCol = true;
                        aList.DefaultSearchOn = 2;
                        aList.UseSpecifiedConn = false;

                        if (aList.ShowLOV()) {
                            if (Table.getCellEditor() != null) {
                                Table.getCellEditor().stopCellEditing();
                            }
                            Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), DataModel.getColFromVariable("MODULE_ID"));
                        }
                    }

                    if (Table.getSelectedColumn() == DataModel.getColFromVariable("MAIN_ACCOUNT_CODE")) {
                        LOV aList = new LOV();

                        aList.SQL = "SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL WHERE APPROVED=1 ORDER BY ACCOUNT_NAME";
                        aList.ReturnCol = 1;
                        aList.ShowReturnCol = true;
                        aList.DefaultSearchOn = 2;
                        aList.UseSpecifiedConn = true;
                        aList.dbURL = FinanceGlobal.FinURL;

                        if (aList.ShowLOV()) {
                            if (Table.getCellEditor() != null) {
                                Table.getCellEditor().stopCellEditing();
                            }
                            Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), DataModel.getColFromVariable("MAIN_ACCOUNT_CODE"));
                        }
                    }

                    if (Table.getSelectedColumn() == DataModel.getColFromVariable("SUB_ACCOUNT_CODE")) {
                        LOV aList = new LOV();

                        aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE APPROVED=1 ORDER BY PARTY_NAME";
                        aList.ReturnCol = 1;
                        aList.ShowReturnCol = true;
                        aList.DefaultSearchOn = 2;
                        aList.UseSpecifiedConn = true;
                        aList.dbURL = FinanceGlobal.FinURL;

                        if (aList.ShowLOV()) {
                            if (Table.getCellEditor() != null) {
                                Table.getCellEditor().stopCellEditing();
                            }
                            Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), DataModel.getColFromVariable("SUB_ACCOUNT_CODE"));
                        }
                    }
                }

            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_TableKeyPressed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //Set Default Send to User
    }//GEN-LAST:event_cmbHierarchyItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkAutoAdj;
    private javax.swing.JCheckBox chkCancelled;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdChange;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdReasoncodeBig;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdSelect;
    private javax.swing.JButton cmdShow;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblBalance;
    private javax.swing.JLabel lblBalanceAll;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblDueDate;
    private javax.swing.JLabel lblEmployeeNo;
    private javax.swing.JLabel lblPAN;
    private javax.swing.JLabel lblResonCode;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JMenuItem mnuAdvancePayment;
    private javax.swing.JMenuItem mnuBillwisePayment;
    private javax.swing.JPopupMenu mnuSelect;
    private javax.swing.JMenuItem mnuSelectDebitNote;
    private javax.swing.JMenuItem mnuSelectExpense;
    private javax.swing.JMenuItem mnuSelectInvoice;
    private javax.swing.JMenuItem mnuSelectJV;
    private javax.swing.JMenuItem mnuSelectPJV;
    private javax.swing.JMenuItem mnuSelectReceipt;
    private javax.swing.JPopupMenu mnuShow;
    private javax.swing.JMenuItem mnuShowAdvAmount;
    private javax.swing.JMenuItem mnuShowExpenseHistory;
    private javax.swing.JMenuItem mnuShowGRN;
    private javax.swing.JMenuItem mnuShowPO;
    private javax.swing.JMenuItem mnuShowRefDoc;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtBankName;
    private javax.swing.JTextField txtBookCode;
    private javax.swing.JTextField txtBookName;
    private javax.swing.JTextField txtChequeDate;
    private javax.swing.JTextField txtChequeNo;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtEmployeeNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtLegacyDate;
    private javax.swing.JTextField txtLegacyNo;
    private javax.swing.JTextField txtLinkNo;
    private javax.swing.JTextField txtPAN;
    private javax.swing.JTextField txtReasonCode;
    private javax.swing.JTextField txtReasonCodeName;
    private javax.swing.JTextArea txtRemarks;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables

    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }

    private void SetFields(boolean pStat) {

        txtDocDate.setEnabled(pStat);
        txtBookCode.setEnabled(pStat);
        txtChequeNo.setEnabled(pStat);
        txtChequeDate.setEnabled(pStat);
        txtBankName.setEnabled(pStat);
        txtEmployeeNo.setEnabled(false);
        txtRemarks.setEnabled(pStat);
        chkAutoAdj.setEnabled(pStat);
        if (txtBookCode.getText().trim().equals("13") || txtBookCode.getText().trim().equals("17") || txtBookCode.getText().trim().equals("19")) {
            txtLegacyNo.setEnabled(pStat);
            txtLegacyDate.setEnabled(pStat);
        }
        txtLinkNo.setEnabled(pStat);

        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        cmdSelect.setEnabled(pStat);

        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        txtReasonCode.setEnabled(pStat);

        SetupApproval();

        if (!pStat) {
            txtDocNo.setEnabled(pStat);
        }

    }

    private void ClearFields() {

        txtDocNo.setText("");
        txtDocDate.setText("");
        txtBookCode.setText("");
        txtBookName.setText("");
        txtChequeNo.setText("");
        txtChequeDate.setText("");
        txtBankName.setText("");
        txtEmployeeNo.setText("");
        txtRemarks.setText("");
        txtLegacyNo.setText("");
        txtLegacyDate.setText("");
        txtLinkNo.setText("");
        chkAutoAdj.setSelected(true);
        txtReasonCode.setText("");
        FormatGrid();
        FormatGridA();
        FormatGridHS();

        lblDueDate.setText("");
        lblBalance.setText("");
        lblBalanceAll.setText("");

    }

    //Didplay data on the Screen
    private void DisplayData() {
        lblPAN.setVisible(false);
        txtPAN.setVisible(false);

        try {
            //=========== Color Indication ===============//

            if (EditMode == 0) {
                if (objVoucher.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                }

                if (objVoucher.getAttribute("APPROVED").getInt() != 1) {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (objVoucher.getAttribute("CANCELLED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }
            }

            //============================================//
            //========= Authority Delegation Check =====================//
            if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
                int ModuleID = clsVoucher.JournalVoucherModuleID;

                if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleID)) {
                    EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
                } else {
                    EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
                }
            }
            //==========================================================//

            objVoucher.ChangeVoucherNo = false;

            ClearFields();

            txtDocNo.setText(objVoucher.getAttribute("VOUCHER_NO").getString());
            lblTitle.setText("JOURNAL VOUCHER - " + txtDocNo.getText());
            lblRevNo.setText(Integer.toString(objVoucher.getAttribute("REVISION_NO").getInt()));
            txtDocDate.setText(objVoucher.getAttribute("VOUCHER_DATE").getString());
            chkCancelled.setSelected(objVoucher.getAttribute("CANCELLED").getBool());
            txtBookCode.setText(objVoucher.getAttribute("BOOK_CODE").getString());
            txtBookName.setText(clsBook.getBookName(EITLERPGLOBAL.gCompanyID, txtBookCode.getText()));
            txtChequeNo.setText(objVoucher.getAttribute("CHEQUE_NO").getString());
            txtChequeDate.setText(objVoucher.getAttribute("CHEQUE_DATE").getString());
            txtBankName.setText(objVoucher.getAttribute("BANK_NAME").getString());
            //txtChequeAmount.setText(Double.toString(objVoucher.getAttribute("CHEQUE_AMOUNT").getDouble()));
            txtEmployeeNo.setText(objVoucher.getAttribute("EMPLOYEE_NO").getString());
            txtRemarks.setText(objVoucher.getAttribute("REMARKS").getString());
            txtLegacyNo.setText(objVoucher.getAttribute("LEGACY_NO").getString());
            txtLegacyDate.setText(objVoucher.getAttribute("LEGACY_DATE").getString());
            txtLinkNo.setText(objVoucher.getAttribute("LINK_NO").getString());
            if (objVoucher.objPayment.getAttribute("EXCLUDE_IN_ADJ").getInt() == 0) {
                chkAutoAdj.setSelected(false);
            } else {
                chkAutoAdj.setSelected(true);
            }
            txtReasonCode.setText(objVoucher.objPayment.getAttribute("REASON_CODE").getString());
            txtReasonCodeName.setText(clsAccount.getReasonCodeDesc(objVoucher.objPayment.getAttribute("MAIN_ACCOUNT_CODE").getString(), objVoucher.objPayment.getAttribute("REASON_CODE").getString()));
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, objVoucher.getAttribute("HIERARCHY_ID").getInt());

            DoNotEvaluate = true;

            String tMainCode = "";
            String tSubCode = "";

            FormatGrid();
            //Now Generate Table
            for (int i = 1; i <= objVoucher.colVoucherItems.size(); i++) {
                clsVoucherItem ObjItem = (clsVoucherItem) objVoucher.colVoucherItems.get(Integer.toString(i));
                Object[] rowData = new Object[1];
                DataModel.addRow(rowData);

                int NewRow = Table.getRowCount() - 1;

                if (ObjItem.getAttribute("EFFECT").getString().equals("C")) {
                    DataModel.setValueByVariable("EFFECT", "Cr", NewRow);
                } else {
                    DataModel.setValueByVariable("EFFECT", "Dr", NewRow);
                }

                DataModel.setValueByVariable("SR_NO", Integer.toString(i), NewRow);
                DataModel.setValueByVariable("MAIN_ACCOUNT_CODE", ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString(), NewRow);
                DataModel.setValueByVariable("SUB_ACCOUNT_CODE", ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString(), NewRow);
                DataModel.setValueByVariable("ACCOUNT_NAME", clsAccount.getAccountName(ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString(), ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString()), NewRow);
                DataModel.setValueByVariable("AMOUNT", EITLERPGLOBAL.formatNumber(ObjItem.getAttribute("AMOUNT").getDouble()), NewRow);
                DataModel.setValueByVariable("REMARKS", ObjItem.getAttribute("REMARKS").getString(), NewRow);

                DataModel.setValueByVariable("PO_NO", ObjItem.getAttribute("PO_NO").getString(), NewRow);
                DataModel.setValueByVariable("PO_DATE", ObjItem.getAttribute("PO_DATE").getString(), NewRow);
                DataModel.setValueByVariable("INVOICE_NO", ObjItem.getAttribute("INVOICE_NO").getString(), NewRow);
                DataModel.setValueByVariable("INVOICE_DATE", ObjItem.getAttribute("INVOICE_DATE").getString(), NewRow);
                DataModel.setValueByVariable("INVOICE_AMOUNT", Double.toString(ObjItem.getAttribute("INVOICE_AMOUNT").getDouble()), NewRow);
                DataModel.setValueByVariable("VALUE_DATE", ObjItem.getAttribute("VALUE_DATE").getString(), NewRow);
                DataModel.setValueByVariable("REF_NO", ObjItem.getAttribute("GRN_NO").getString(), NewRow);
                DataModel.setValueByVariable("REF_DATE", ObjItem.getAttribute("GRN_DATE").getString(), NewRow);
                DataModel.setValueByVariable("MODULE_ID", Integer.toString(ObjItem.getAttribute("MODULE_ID").getInt()), NewRow);
                DataModel.setValueByVariable("REF_COMPANY_ID", Integer.toString(ObjItem.getAttribute("REF_COMPANY_ID").getInt()), NewRow);
                DataModel.setValueByVariable("REF_COMPANY_NAME", clsCompany.getCityName(ObjItem.getAttribute("REF_COMPANY_ID").getInt()), NewRow);
                DataModel.setValueByVariable("MODULE_NAME", clsModules.getModuleName(EITLERPGLOBAL.gCompanyID, ObjItem.getAttribute("MODULE_ID").getInt()), NewRow);
                DataModel.setValueByVariable("LINK_NO", ObjItem.getAttribute("LINK_NO").getString(), NewRow);

                DataModel.setValueByVariable("HSN_SAC_CODE", ObjItem.getAttribute("HSN_SAC_CODE").getString(), NewRow);
                DataModel.setValueByVariable("ITEM_DESCRIPTION", ObjItem.getAttribute("ITEM_DESCRIPTION").getString(), NewRow);
                DataModel.setValueByVariable("GSTN_RATE", ObjItem.getAttribute("GSTN_RATE").getString(), NewRow);
                DataModel.setValueByVariable("GR_INVOICE_NO", ObjItem.getAttribute("GR_INVOICE_NO").getString(), NewRow);
                DataModel.setValueByVariable("GR_INVOICE_DATE", ObjItem.getAttribute("GR_INVOICE_DATE").getString(), NewRow);
                DataModel.setValueByVariable("GR_NO", ObjItem.getAttribute("GR_NO").getString(), NewRow);
                DataModel.setValueByVariable("GR_DATE", ObjItem.getAttribute("GR_DATE").getString(), NewRow);

                tMainCode = ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString();
                tSubCode = ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString();
            }

            if (tMainCode.equals("210010") && !tSubCode.equals("")) {
                lblPAN.setVisible(true);
                txtPAN.setVisible(true);
                String receiptAmt = data.getStringValueFromDB("SELECT RC_AMT FROM  (SELECT PARTY_CODE,PARTY_NAME,PAN_NO,SUBSTRING(GSTIN_NO,3,10) AS GSTIN_PAN,CITY_ID FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 ) AS PM  LEFT JOIN  "
                        + " (SELECT GSTIN_PAN AS V_PAN,SUM(AMOUNT) AS RC_AMT FROM  (SELECT B.SUB_ACCOUNT_CODE, P.PARTY_NAME, SUBSTRING(TRIM(P.GSTIN_NO),3,10) AS GSTIN_PAN, SUM(B.AMOUNT) AS AMOUNT, GROUP_CONCAT(A.VOUCHER_NO) "
                        + " FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B, DINESHMILLS.D_SAL_PARTY_MASTER P "
                        + "  WHERE A.VOUCHER_NO = B.VOUCHER_NO AND P.PARTY_CODE = B.SUB_ACCOUNT_CODE  AND A.VOUCHER_DATE>='" + EITLERPGLOBAL.FinFromDateDB + "' AND A.VOUCHER_DATE<=CURDATE() "
                        //                            + " AND A.VOUCHER_TYPE IN (6,7,8,9) AND B.MAIN_ACCOUNT_CODE='210010' AND A.APPROVED=1 AND A.CANCELLED=0 AND A.EXCLUDE_IN_ADJ =0 "
                        + " AND (A.VOUCHER_TYPE IN (6,8,9,12) OR (A.VOUCHER_TYPE IN (7) AND A.EXCLUDE_IN_ADJ =0) ) AND B.MAIN_ACCOUNT_CODE='210010' AND A.APPROVED=1 AND A.CANCELLED=0 "
                        + " AND B.EFFECT='C' AND B.MODULE_ID <>65 GROUP BY B.SUB_ACCOUNT_CODE  ) AS AMT GROUP BY GSTIN_PAN ) AS VPAN  "
                        + " ON VPAN.V_PAN = PM.GSTIN_PAN WHERE PM.PARTY_CODE ='" + tSubCode + "'");
                txtPAN.setText(receiptAmt + "");
            }

            DoNotEvaluate = false;

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();
            String DocNo = objVoucher.getAttribute("VOUCHER_NO").getString();
            List = ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, clsVoucher.JournalVoucherModuleID, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelA.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridHS();
            HashMap History = clsVoucher.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for (int i = 1; i <= History.size(); i++) {
                clsVoucher ObjHistory = (clsVoucher) History.get(Integer.toString(i));
                Object[] rowData = new Object[5];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = ObjHistory.getAttribute("UPDATED_BY").getString();
                rowData[2] = ObjHistory.getAttribute("ENTRY_DATE").getString();

                String ApprovalStatus = "";

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjHistory.getAttribute("APPROVER_REMARKS").getString();

                DataModelHS.addRow(rowData);
            }
            //============================================================//

        } catch (Exception c) {

        }

        DisplayAdditionalInfo();
    }

    //Sets data to the Class Object
    private void SetData() {

        if (txtDocNo.isEnabled()) {
            objVoucher.UseSpecificVoucherNo = true;
            objVoucher.SpecificVoucherNo = txtDocNo.getText();
        } else {
            objVoucher.UseSpecificVoucherNo = false;
        }

        objVoucher.setAttribute("PREFIX", SelPrefix);
        objVoucher.setAttribute("SUFFIX", SelSuffix);
        objVoucher.setAttribute("FFNO", FFNo);
        objVoucher.setAttribute("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
        objVoucher.setAttribute("VOUCHER_NO", txtDocNo.getText());
        objVoucher.setAttribute("VOUCHER_DATE", txtDocDate.getText());
        objVoucher.setAttribute("VOUCHER_TYPE", FinanceGlobal.TYPE_JOURNAL);
        objVoucher.setAttribute("BOOK_CODE", txtBookCode.getText());

        System.out.println(objVoucher.getAttribute("BOOK_CODE").getString());
        objVoucher.setAttribute("CHEQUE_NO", txtChequeNo.getText());
        objVoucher.setAttribute("CHEQUE_DATE", txtChequeDate.getText());
        objVoucher.setAttribute("BANK_NAME", txtBankName.getText());
        //objVoucher.setAttribute("CHEQUE_AMOUNT",UtilFunctions.CDbl(txtChequeAmount.getText()));
        objVoucher.setAttribute("EMPLOYEE_NO", txtEmployeeNo.getText().trim());
        objVoucher.setAttribute("REMARKS", txtRemarks.getText());
        objVoucher.setAttribute("LEGACY_NO", txtLegacyNo.getText());
        objVoucher.setAttribute("LEGACY_DATE", txtLegacyDate.getText());
        objVoucher.setAttribute("REASON_CODE", txtReasonCode.getText());
        objVoucher.setAttribute("LINK_NO", txtLinkNo.getText());

        if (chkAutoAdj.isSelected()) {
            objVoucher.setAttribute("EXCLUDE_IN_ADJ", 1);
        } else {
            objVoucher.setAttribute("EXCLUDE_IN_ADJ", 0);
        }

        //----- Update Approval Specific Fields -----------//
        objVoucher.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        objVoucher.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        objVoucher.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        objVoucher.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            objVoucher.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            objVoucher.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            objVoucher.setAttribute("APPROVAL_STATUS", "R");
            objVoucher.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            objVoucher.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            objVoucher.setAttribute("CREATED_BY", EITLERPGLOBAL.gLoginID);
            System.out.println("dbcurrentdate" + EITLERPGLOBAL.getCurrentDateDB());
            objVoucher.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        } else {
            objVoucher.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gLoginID);
            System.out.println("dbcurrentdate" + EITLERPGLOBAL.getCurrentDateDB());
            objVoucher.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }

        //======= Set Line part ============
        objVoucher.colVoucherItems.clear();

        for (int i = 0; i < Table.getRowCount(); i++) {
            clsVoucherItem objItem = new clsVoucherItem();
            objItem.setAttribute("SR_NO", i + 1);

            if (DataModel.getValueByVariable("EFFECT", i).equals("Cr")) {
                objItem.setAttribute("EFFECT", "C");
            } else {
                objItem.setAttribute("EFFECT", "D");
            }

            objItem.setAttribute("ACCOUNT_ID", 1); //Default Value
            objItem.setAttribute("MAIN_ACCOUNT_CODE", DataModel.getValueByVariable("MAIN_ACCOUNT_CODE", i));
            objItem.setAttribute("SUB_ACCOUNT_CODE", DataModel.getValueByVariable("SUB_ACCOUNT_CODE", i));
            objItem.setAttribute("AMOUNT", EITLERPGLOBAL.round(UtilFunctions.CDbl(DataModel.getValueByVariable("AMOUNT", i)), 2));
            objItem.setAttribute("REMARKS", DataModel.getValueByVariable("REMARKS", i));
            objItem.setAttribute("PO_NO", DataModel.getValueByVariable("PO_NO", i));
            objItem.setAttribute("PO_DATE", DataModel.getValueByVariable("PO_DATE", i));
            objItem.setAttribute("INVOICE_NO", DataModel.getValueByVariable("INVOICE_NO", i));
            objItem.setAttribute("INVOICE_DATE", DataModel.getValueByVariable("INVOICE_DATE", i));
            objItem.setAttribute("INVOICE_AMOUNT", UtilFunctions.CDbl(DataModel.getValueByVariable("INVOICE_AMOUNT", i)));
            objItem.setAttribute("VALUE_DATE", DataModel.getValueByVariable("VALUE_DATE", i));
            objItem.setAttribute("GRN_NO", DataModel.getValueByVariable("REF_NO", i));
            objItem.setAttribute("GRN_DATE", DataModel.getValueByVariable("REF_DATE", i));
            objItem.setAttribute("MODULE_ID", UtilFunctions.CInt(DataModel.getValueByVariable("MODULE_ID", i)));
            objItem.setAttribute("REF_COMPANY_ID", UtilFunctions.CInt(DataModel.getValueByVariable("REF_COMPANY_ID", i)));
            String MainAccountCode = DataModel.getValueByVariable("MAIN_ACCOUNT_CODE", i);
            if ((!DataModel.getValueByVariable("INVOICE_NO", i).equals("")) && (MainAccountCode.equals("210027") || MainAccountCode.equals("210010") || MainAccountCode.equals("210072")) && (DataModel.getValueByVariable("LINK_NO", i).equals(""))) {
                objItem.setAttribute("LINK_NO", clsSalesInvoice.getAgentAlphaSrNo(DataModel.getValueByVariable("INVOICE_NO", i), EITLERPGLOBAL.formatDateDB(DataModel.getValueByVariable("INVOICE_DATE", i))));
            } else {
                objItem.setAttribute("LINK_NO", DataModel.getValueByVariable("LINK_NO", i));
            }

            objItem.setAttribute("HSN_SAC_CODE", DataModel.getValueByVariable("HSN_SAC_CODE", i));
            objItem.setAttribute("ITEM_DESCRIPTION", DataModel.getValueByVariable("ITEM_DESCRIPTION", i));
            objItem.setAttribute("GSTN_RATE", DataModel.getValueByVariable("GSTN_RATE", i));
            objItem.setAttribute("GR_INVOICE_NO", DataModel.getValueByVariable("GR_INVOICE_NO", i));
            objItem.setAttribute("GR_INVOICE_DATE", DataModel.getValueByVariable("GR_INVOICE_DATE", i));
            objItem.setAttribute("GR_NO", DataModel.getValueByVariable("GR_NO", i));
            objItem.setAttribute("GR_DATE", DataModel.getValueByVariable("GR_DATE", i));

            objVoucher.colVoucherItems.put(Integer.toString(objVoucher.colVoucherItems.size() + 1), objItem);
        }

        //System.out.println(objVoucher.getAttribute("BOOK_CODE").getString());
    }

    private void FormatGrid() {

        Updating = true; //Stops recursion

        try {

            EITLTableCellRenderer cellRender = new EITLTableCellRenderer();
            cellRender.setHorizontalAlignment(JLabel.RIGHT);

            POColor = new EITLTableCellRenderer();

            cmdAdd.requestFocus();

            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            TableColumnModel ColModel = Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            DataModel.addColumn("Sr."); //0 - Read Only
            DataModel.addColumn("Cr/Dr"); //1
            DataModel.addColumn("Main Code"); //2 //Read Only
            DataModel.addColumn("Sub Code");//3
            DataModel.addColumn("A/c Name"); //4
            DataModel.addColumn("Link No.");//5
            DataModel.addColumn("Amount"); //6
            DataModel.addColumn("Remarks"); //7 Remarks
            DataModel.addColumn("PO NO.");//8
            DataModel.addColumn("PO Date");//9
            DataModel.addColumn("Invoice No.");//10
            DataModel.addColumn("Invoice Date");//11
            DataModel.addColumn("Invoice Amount");//12
            DataModel.addColumn("Value Date");//13
            DataModel.addColumn("Ref No.");//14
            DataModel.addColumn("Ref Date");//15
            DataModel.addColumn("Document");//16
            DataModel.addColumn("Module ID");//17
            DataModel.addColumn("Company");//18
            DataModel.addColumn("Company ID");//19
            DataModel.addColumn("HSN_SAC_CODE");//20
            DataModel.addColumn("Item Description");//21
            DataModel.addColumn("GSTN Rate");//22
            DataModel.addColumn("GR Inv No");//23
            DataModel.addColumn("GR Inv Date");//24
            DataModel.addColumn("GR No");//25
            DataModel.addColumn("GR Date");//26

            DataModel.SetVariable(0, "SR_NO"); //0 - Read Only
            DataModel.SetVariable(1, "EFFECT"); //1
            DataModel.SetVariable(2, "MAIN_ACCOUNT_CODE"); //2 //Read Only
            DataModel.SetVariable(3, "SUB_ACCOUNT_CODE"); //2 //Read Only
            DataModel.SetVariable(4, "ACCOUNT_NAME"); //2 //Read Only
            DataModel.SetVariable(5, "LINK_NO");
            DataModel.SetVariable(6, "AMOUNT"); //2 //Read Only
            DataModel.SetVariable(7, "REMARKS"); //2 //Read Only
            DataModel.SetVariable(8, "PO_NO");
            DataModel.SetVariable(9, "PO_DATE");
            DataModel.SetVariable(10, "INVOICE_NO");
            DataModel.SetVariable(11, "INVOICE_DATE");
            DataModel.SetVariable(12, "INVOICE_AMOUNT");
            DataModel.SetVariable(13, "VALUE_DATE");
            DataModel.SetVariable(14, "REF_NO");
            DataModel.SetVariable(15, "REF_DATE");
            DataModel.SetVariable(16, "MODULE_NAME");
            DataModel.SetVariable(17, "MODULE_ID");
            DataModel.SetVariable(18, "REF_COMPANY_NAME");
            DataModel.SetVariable(19, "REF_COMPANY_ID");
            DataModel.SetVariable(20, "HSN_SAC_CODE");
            DataModel.SetVariable(21, "ITEM_DESCRIPTION");
            DataModel.SetVariable(22, "GSTN_RATE");
            DataModel.SetVariable(23, "GR_INVOICE_NO");
            DataModel.SetVariable(24, "GR_INVOICE_DATE");
            DataModel.SetVariable(25, "GR_NO");
            DataModel.SetVariable(26, "GR_DATE");

            DataModel.TableReadOnly(false);
            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(1);
            DataModel.SetReadOnly(4);
            DataModel.SetReadOnly(14);
            DataModel.SetReadOnly(15);
            DataModel.SetReadOnly(16);
            DataModel.SetReadOnly(18);
            DataModel.SetReadOnly(19);

            DataModel.SetNumeric(6, true);
            DataModel.SetNumeric(0, true);
            DataModel.SetNumeric(12, true);

            Table.getColumnModel().getColumn(16).setMaxWidth(0);
            Table.getColumnModel().getColumn(6).setCellRenderer(cellRender);
            Table.getColumnModel().getColumn(8).setCellRenderer(POColor);

            //------- Install Table List Selection Listener ------//
            Table.getColumnModel().getSelectionModel().addListSelectionListener(
                    new ListSelectionListener() {
                        public void valueChanged(ListSelectionEvent e) {
                            int last = Table.getSelectedColumn();
                            String strVar = DataModel.getVariable(last);

                            //=============== Cell Editing Routine =======================//
                            try {
                                cellLastValue = (String) Table.getValueAt(Table.getSelectedRow(), Table.getSelectedColumn());

                                Table.editCellAt(Table.getSelectedRow(), Table.getSelectedColumn());
                                if (Table.getEditorComponent() instanceof JTextComponent) {
                                    ((JTextComponent) Table.getEditorComponent()).selectAll();
                                }
                            } catch (Exception cell) {
                            }
                            //============= Cell Editing Routine Ended =================//

                            ShowMessage("Ready");

                            if (last == DataModel.getColFromVariable("EFFECT")) {
                                ShowMessage("Press C/D to specify Cr./Dr.");
                            }

                            if (last == DataModel.getColFromVariable("MAIN_ACCOUNT_CODE") || last == DataModel.getColFromVariable("SUB_ACCOUNT_CODE")) {

                                String MainCode = DataModel.getValueByVariable("MAIN_ACCOUNT_CODE", Table.getSelectedRow());
                                String SubCode = DataModel.getValueByVariable("SUB_ACCOUNT_CODE", Table.getSelectedRow());
                                double Balance = 0;
                                //clsAccount.getClosingBalance(MainCode, SubCode, EITLERPGLOBAL.getCurrentDateDB(),true);

                                if (Balance < 0) {
                                    lblBalance.setText(Double.toString(Math.abs(Balance)) + " Cr.");
                                } else {
                                    lblBalance.setText(Double.toString(Math.abs(Balance)) + " Dr.");
                                }

                                Balance = 0;
                                //clsAccount.getClosingBalanceAll(MainCode, SubCode, EITLERPGLOBAL.getCurrentDateDB(),false);

                                if (Balance < 0) {
                                    lblBalanceAll.setText(Double.toString(Math.abs(Balance)) + " Cr.");
                                } else {
                                    lblBalanceAll.setText(Double.toString(Math.abs(Balance)) + " Dr.");
                                }
                            }
                        }
                    }
            );
            //===================================================//

            //----- Install Table Model Event Listener -------//
            Table.getModel().addTableModelListener(new TableModelListener() {
                public void tableChanged(TableModelEvent e) {
                    if (e.getType() == TableModelEvent.UPDATE) {
                        int col = e.getColumn();

                        //=========== Cell Update Prevention Check ===========//
                        String curValue = (String) Table.getValueAt(Table.getSelectedRow(), e.getColumn());
                        if (curValue.equals(cellLastValue)) {
                            return;
                        }
                        //====================================================//

                        if (DoNotEvaluate) {
                            return;
                        }

                        if (col == DataModel.getColFromVariable("PO_NO")) {

                            String BarodaURL = clsFinYear.getDBURL(2, EITLERPGLOBAL.FinYearFrom);
                            String AnkURL = clsFinYear.getDBURL(3, EITLERPGLOBAL.FinYearFrom);
                            String PONo = DataModel.getValueByVariable("PO_NO", Table.getSelectedRow());
                            if (PONo.equals("")) {
                                DataModel.setValueByVariable("PO_DATE", "0000-00-00", Table.getSelectedRow());
                                DataModel.setValueByVariable("REF_COMPANY_ID", "0", Table.getSelectedRow());
                            } else {

                                if (data.IsRecordExist("SELECT PO_NO FROM D_PUR_PO_HEADER WHERE PO_NO='" + PONo + "'", BarodaURL)) {
                                    String PODate = data.getStringValueFromDB("SELECT PO_DATE FROM D_PUR_PO_HEADER WHERE PO_NO='" + PONo + "'", BarodaURL);
                                    DoNotEvaluate = true;
                                    DataModel.setValueByVariable("PO_DATE", EITLERPGLOBAL.formatDate(PODate), Table.getSelectedRow());
                                    DataModel.setValueByVariable("REF_COMPANY_ID", "2", Table.getSelectedRow());
                                    DoNotEvaluate = false;
                                }

                                if (data.IsRecordExist("SELECT PO_NO FROM D_PUR_PO_HEADER WHERE PO_NO='" + PONo + "'", AnkURL)) {
                                    String PODate = data.getStringValueFromDB("SELECT PO_DATE FROM D_PUR_PO_HEADER WHERE PO_NO='" + PONo + "'", AnkURL);
                                    DoNotEvaluate = true;
                                    DataModel.setValueByVariable("PO_DATE", EITLERPGLOBAL.formatDate(PODate), Table.getSelectedRow());
                                    DataModel.setValueByVariable("REF_COMPANY_ID", "3", Table.getSelectedRow());
                                    DoNotEvaluate = false;
                                }
                            }
                        }

                        if (col == DataModel.getColFromVariable("AMOUNT")) {
                            DoNotEvaluate = true;
                            double fAmount = UtilFunctions.CDbl(DataModel.getValueByVariable("AMOUNT", Table.getSelectedRow()));
                            DataModel.setValueByVariable("AMOUNT", EITLERPGLOBAL.formatNumber(fAmount), Table.getSelectedRow());
                            DoNotEvaluate = false;
                        }

                        if (col == DataModel.getColFromVariable("AMOUNT")) {
                            UpdateTotals();
                        }

                        if (col == DataModel.getColFromVariable("MODULE_ID")) {
                            int ModuleID = UtilFunctions.CInt(DataModel.getValueByVariable("MODULE_ID", Table.getSelectedRow()));
                            DataModel.setValueByVariable("MODULE_NAME", clsModules.getModuleName(EITLERPGLOBAL.gCompanyID, ModuleID), Table.getSelectedRow());
                        }

                        if (col == DataModel.getColFromVariable("MAIN_ACCOUNT_CODE") || col == DataModel.getColFromVariable("SUB_ACCOUNT_CODE")) {
                            try {
                                String MainCode = DataModel.getValueByVariable("MAIN_ACCOUNT_CODE", Table.getSelectedRow());
                                String SubCode = DataModel.getValueByVariable("SUB_ACCOUNT_CODE", Table.getSelectedRow());
                                String AccountName = clsAccount.getAccountName(MainCode, SubCode);
                                DataModel.setValueByVariable("ACCOUNT_NAME", AccountName, Table.getSelectedRow());

                                //                                double Balance=clsAccount.getClosingBalance(MainCode, SubCode, EITLERPGLOBAL.getCurrentDateDB(),true);
                                //
                                //                                if(Balance<0) {
                                //                                    lblBalance.setText(Double.toString(Math.abs(Balance))+" Cr.");
                                //                                }
                                //                                else {
                                //                                    lblBalance.setText(Double.toString(Math.abs(Balance))+" Dr.");
                                //                                }
                            } catch (Exception ex) {
                            }
                        }
                    }
                }
            });
        } catch (Exception e) {

        }
        Updating = false;
        //Table formatting completed
    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + clsVoucher.JournalVoucherModuleID);

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + clsVoucher.JournalVoucherModuleID);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (EITLERPGLOBAL.gNewUserID == ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, clsVoucher.JournalVoucherModuleID, txtDocNo.getText())) {
                List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + (clsVoucher.JournalVoucherModuleID));
            } else {
                List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + (clsVoucher.JournalVoucherModuleID));
            }
        }

        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //

    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = ApprovalFlow.getRemainingUsers((int) EITLERPGLOBAL.gCompanyID, clsVoucher.JournalVoucherModuleID, objVoucher.getAttribute("VOUCHER_NO").getString());
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
        }

    }

    private void SetupApproval() {

        // --- Hierarchy Change Rights Check --------
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10892)) {
         cmbHierarchy.setEnabled(true);
         }
         else {
         cmbHierarchy.setEnabled(false);
         }*/
        //In Edit Mode Hierarchy Should be disabled
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            int FromUserID = ApprovalFlow.getFromID((int) EITLERPGLOBAL.gCompanyID, clsVoucher.JournalVoucherModuleID, objVoucher.getAttribute("VOUCHER_NO").getString());
            lnFromID = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = ApprovalFlow.getFromRemarks((int) EITLERPGLOBAL.gCompanyID, clsVoucher.JournalVoucherModuleID, FromUserID, objVoucher.getAttribute("VOUCHER_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy Should be disabled
        //        if(EditMode==EITLERPGLOBAL.EDIT) {
        //            cmbHierarchy.setEnabled(false);
        //        }
        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 10891)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,72)) {
         cmdEdit.setEnabled(true);
         }
         else {
         cmdEdit.setEnabled(false);
         }*/

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 10893)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 10894)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }

        cmdPreview.setEnabled(true);
    }

    private void Add() {

        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//

        //Now Generate new document no.
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = clsVoucher.JournalVoucherModuleID;

        if (aList.ShowList()) {
            EditMode = EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix = aList.Prefix; //Selected Prefix;
            SelSuffix = aList.Suffix;
            FFNo = aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsVoucher.JournalVoucherModuleID, FFNo, false));
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
            txtDocDate.requestFocus();
            if (txtDocNo.getText().trim().startsWith("TE")) {
                TravelVoucher = true;
                txtEmployeeNo.setEnabled(true);
            }
            lblTitle.setText("JOURNAL VOUCHER - " + txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);
        } else {
            JOptionPane.showMessageDialog(null, "You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }

    }

    private void Edit() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//

        String lDocNo = objVoucher.getAttribute("VOUCHER_NO").getString();
        if (objVoucher.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID, clsVoucher.JournalVoucherModuleID)) {
            EditMode = EITLERPGLOBAL.EDIT;

            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//

            if (ApprovalFlow.IsCreator(clsVoucher.JournalVoucherModuleID, lDocNo) || clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 10892)) {
                SetFields(true);
            } else {
                EnableApproval();
            }

            SetupApproval();
            DisableToolbar();
            txtDocDate.requestFocus();
        } else {
            JOptionPane.showMessageDialog(null, "You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }

    private void Delete() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//

        String lDocNo = objVoucher.getAttribute("VOUCHER_NO").getString();

        if (objVoucher.CanDelete(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            if (objVoucher.Delete(EITLERPGLOBAL.gNewUserID)) {
                MoveLast();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while deleting. Error is " + objVoucher.LastError);
            }
        } else {
            JOptionPane.showMessageDialog(null, "You cannot delete this record. It is either approved/rejected record or waiting approval for other user or is referred in other documents");
        }
    }

    private void Save() {
        if (!Validate()) {
            return;
        }

        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (objVoucher.Insert()) {
                MoveLast();
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, " " + objVoucher.LastError);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (objVoucher.Update()) {
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, " " + objVoucher.LastError);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            frmPA.RefreshView();
        } catch (Exception e) {
        }
    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.Finance.frmVoucherFind", true);
        frmVoucherFind ObjReturn = (frmVoucherFind) ObjLoader.getObj();

        if (ObjReturn.Cancelled == false) {
            if (!objVoucher.Filter(ObjReturn.strQuery + " AND VOUCHER_TYPE=" + FinanceGlobal.TYPE_JOURNAL, EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null, "No records found.");
            }
            MoveLast();
        }
    }

    public void FindByCompany(int pCompanyID, String pDocNo) {
        String dbURL = clsFinYear.getDBURL(pCompanyID, EITLERPGLOBAL.FinYearFrom);
        objVoucher.Filter(" WHERE COMPANY_ID=" + Integer.toString(pCompanyID) + " AND VOUCHER_NO='" + pDocNo + "'", pCompanyID);
        objVoucher.MoveLast();
        DisplayData();
    }

    private void MoveFirst() {
        objVoucher.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        objVoucher.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        objVoucher.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        objVoucher.MoveLast();
        DisplayData();
    }

    public void FindEx(int pCompanyID, String pDocNo) {
        objVoucher.Filter(" WHERE COMPANY_ID=" + Integer.toString(pCompanyID) + " AND VOUCHER_NO='" + pDocNo + "' AND VOUCHER_TYPE=" + FinanceGlobal.TYPE_JOURNAL, pCompanyID);
        objVoucher.MoveLast();
        DisplayData();
    }

    public void FindWaiting() {
        //        objVoucher.Filter(" WHERE VOUCHER_NO IN (SELECT D_INV_REQ_HEADER.REQ_NO FROM D_INV_REQ_HEADER,D_COM_DOC_DATA WHERE D_INV_REQ_HEADER.REQ_NO=D_COM_DOC_DATA.DOC_NO AND D_INV_REQ_HEADER.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_INV_REQ_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND MODULE_ID=2)",EITLERPGLOBAL.gCompanyID);
        //        objVoucher.MoveLast();
        //        DisplayData();
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }

    private void FormatGridA() {
        DataModelA = new EITLTableModel();

        TableA.removeAll();
        TableA.setModel(DataModelA);

        //Set the table Readonly
        DataModelA.TableReadOnly(true);

        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");

        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);

    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Tab1.getComponentCount() - 1; i++) {
            if (Tab1.getComponent(i).getName() != null) {

                FieldName = Tab1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {

                    Tab1.getComponent(i).setEnabled(true);
                }

            }
        }
        //=============== Header Fields Setup Complete =================//

        //=============== Setting Table Fields ==================//
        DataModel.ClearAllReadOnly();
        for (int i = 0; i < Table.getColumnCount(); i++) {
            FieldName = DataModel.getVariable(i);

            if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
                //Do Nothing
            } else {
                DataModel.SetReadOnly(i);
            }
        }
        //=======================================================//

    }

    private void FormatGridHS() {
        DataModelHS = new EITLTableModel();

        TableHS.removeAll();
        TableHS.setModel(DataModelHS);

        //Set the table Readonly
        DataModelHS.TableReadOnly(true);

        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");

        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }

    private void PreviewAuditReport() {
        try {
            URL ReportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/rptMaterialREQA.jsp?dbURL=" + EITLERPGLOBAL.DatabaseURL + "&CompanyID=" + EITLERPGLOBAL.gCompanyID + "&DocNo=" + txtDocNo.getText());
            //EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error Previwing " + e.getMessage());
        }
    }

    private void GenerateRejectedUserCombo() {
        HashMap List = new HashMap();
        HashMap DeptList = new HashMap();
        HashMap DeptUsers = new HashMap();

        //----- Generate cmbType ------- //
        cmbToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= List.size(); i++) {
            clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

            /// NEW CODE ///
            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, clsVoucher.JournalVoucherModuleID, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, clsVoucher.JournalVoucherModuleID, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            } else {
                if (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///

        }
        //------------------------------ //

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, clsVoucher.JournalVoucherModuleID, txtDocNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }

    }

    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while (c != null) {
            if (c instanceof Frame) {
                return (Frame) c;
            }

            c = c.getParent();
        }
        return (Frame) null;
    }

    private void DisplayAdditionalInfo() {
        try {

            // ********** Indicate PO for Fully/Partial executed by colors ***************//
            POColor.removeBackColors();

            for (int i = 0; i < Table.getRowCount(); i++) {
                String PONo = DataModel.getValueByVariable("PO_NO", i);
                String GRNNo = DataModel.getValueByVariable("REF_NO", i);

                //**** PO Indication **** //
                if (!PONo.trim().equals("")) {
                    POColor.setBackColor(i, DataModel.getColFromVariable("PO_NO"), Color.CYAN);

                    ResultSet rsTmp = data.getResult("SELECT SUM(QTY) AS QTY,SUM(RECD_QTY) AS RECD_QTY FROM D_PUR_PO_DETAIL WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND PO_NO='" + PONo + "'");
                    rsTmp.first();

                    if (rsTmp.getRow() > 0) {
                        if (rsTmp.getDouble("RECD_QTY") >= rsTmp.getDouble("QTY")) {
                            POColor.setBackColor(i, DataModel.getColFromVariable("PO_NO"), Color.GREEN);
                        }
                    }
                }
                //*************************//

                //***** Due Date Indication *****//
                lblDueDate.setText("");
                if (objVoucher.getAttribute("APPROVED").getInt() == 0 && (!GRNNo.trim().equals(""))) {
                    String PartyCode = "";
                    String MIRNo = "";
                    String MIRDate = "";
                    int PaymentDays = 0;

                    ResultSet rsTmp = data.getResult("SELECT DISTINCT(MIR_NO) AS MIR_NO FROM D_INV_GRN_DETAIL WHERE GRN_NO='" + GRNNo + "' AND MIR_NO<>'' AND COMPANY_ID=" + EITLERPGLOBAL.gCompanyID);
                    rsTmp.first();

                    if (rsTmp.getRow() > 0) {
                        MIRNo = rsTmp.getString("MIR_NO");

                        rsTmp = data.getResult("SELECT MIR_DATE,SUPP_ID FROM D_INV_MIR_HEADER WHERE MIR_NO='" + MIRNo + "' AND COMPANY_ID=" + EITLERPGLOBAL.gCompanyID);
                        rsTmp.first();

                        if (rsTmp.getRow() > 0) {
                            PartyCode = rsTmp.getString("SUPP_ID");
                            MIRDate = rsTmp.getString("MIR_DATE");

                            rsTmp = data.getResult("SELECT PAYMENT_DAYS FROM D_COM_SUPP_MASTER WHERE SUPPLIER_CODE='" + PartyCode + "' AND COMPANY_ID=" + EITLERPGLOBAL.gCompanyID);
                            rsTmp.first();

                            if (rsTmp.getRow() > 0) {
                                PaymentDays = rsTmp.getInt("PAYMENT_DAYS");

                                if (PaymentDays > 0) {
                                    String DueDate = EITLERPGLOBAL.formatDate(EITLERPGLOBAL.addDaysToDate(MIRDate, PaymentDays, "yyyy-MM-dd"));
                                    lblDueDate.setText("Payment Due Date :" + DueDate);

                                }
                            }

                        }
                    }
                }
                //*******************************//
            }
            //*********************************************************************************//
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void UpdateBlockNo() {
        try {
            int BlockNo = 1;
            boolean BlockStartRow = true;
            String prevEffect = "", Effect = "";

            DataModel.SetUserObject(0, Integer.toString(BlockNo));

            for (int i = 0; i < Table.getRowCount(); i++) {
                if (BlockStartRow) {
                    prevEffect = DataModel.getValueByVariable("EFFECT", i);
                    BlockStartRow = false;
                } else {
                    prevEffect = DataModel.getValueByVariable("EFFECT", i - 1);
                }

                Effect = DataModel.getValueByVariable("EFFECT", i);

                DataModel.SetUserObject(i, Integer.toString(BlockNo));

                if (!Effect.equals(prevEffect)) {
                    BlockNo++;
                    BlockStartRow = true;
                }

            }

        } catch (Exception e) {
        }
    }

    private void UpdateTotals() {

        //===================== Update Totals ========================//
        try {

            if (Table.getSelectedRow() < Table.getRowCount() - 1) {

                UpdateBlockNo(); //Assigns block no. to each entry

                int BlockNo = UtilFunctions.CInt((String) DataModel.getUserObject(Table.getSelectedRow()));
                String CurrentEffect = DataModel.getValueByVariable("EFFECT", Table.getSelectedRow());
                int OppositeAcRow = 0;
                boolean OppositeAcFound = false;
                double OppositeTotal = 0;
                int DrCount = 0, CrCount = 0;

                for (int i = 0; i < Table.getRowCount(); i++) {
                    if (UtilFunctions.CInt((String) DataModel.getUserObject(i)) == BlockNo) {
                        if (DataModel.getValueByVariable("EFFECT", i).equals("Cr")) {
                            CrCount++;
                        } else {
                            DrCount++;
                        }

                        if (!DataModel.getValueByVariable("EFFECT", i).equals(CurrentEffect)) {
                            OppositeAcFound = true;
                            OppositeAcRow = i;
                            break;
                        } else {
                            OppositeTotal += UtilFunctions.CDbl(DataModel.getValueByVariable("AMOUNT", i));
                        }
                    }
                }

                if (OppositeAcFound) {

                    OppositeTotal = EITLERPGLOBAL.round(OppositeTotal, 2);

                    if (CrCount == DrCount) {
                        DoNotEvaluate = true;
                        DataModel.setValueByVariable("AMOUNT", Double.toString(OppositeTotal), OppositeAcRow);
                        DoNotEvaluate = false;
                    }

                    if (CrCount > DrCount) {
                        if (CurrentEffect.equals("Cr")) {
                            DoNotEvaluate = true;
                            DataModel.setValueByVariable("AMOUNT", Double.toString(OppositeTotal), OppositeAcRow);
                            DoNotEvaluate = false;

                        }
                    }

                    if (DrCount > CrCount) {
                        if (CurrentEffect.equals("Dr")) {
                            DoNotEvaluate = true;
                            DataModel.setValueByVariable("AMOUNT", Double.toString(OppositeTotal), OppositeAcRow);
                            DoNotEvaluate = false;

                        }

                    }

                }

            }
        } catch (Exception v) {
        }
        //==================================================================//
    }

    private void PreviewReport() {
        if (EditMode == 0) {

            try {

                TTable objReports = new TTable();
                objReports.AddColumn("ReportName");

                HashMap TRReports = clsReportsConfig.getReportNamesForTR(txtBookCode.getText().trim());

                for (int i = 1; i <= TRReports.size(); i++) {
                    clsConfig objConfig = (clsConfig) TRReports.get(Integer.toString(i));

                    TRow objRow = new TRow();
                    objRow.setValue("ReportName", objConfig.ReportName);
                    objReports.AddRow(objRow);
                }

                LOVEx SimpleLOV = new LOVEx(objReports, 1);

                SimpleLOV.ShowLOV();

                if (!SimpleLOV.Cancelled) {
                    clsConfig objConfig = (clsConfig) TRReports.get(Integer.toString(SimpleLOV.SelectedRow));

                    if (objConfig.ProcessType == 1) //PJV Consolidated Report
                    {
                        HashMap Parameters = new HashMap();
                        Parameters.put("VOUCHER_NO", txtDocNo.getText());

                        TReportWriter.SimpleDataProvider.TTable objData = clsVoucherReports.getGeneralVoucherReport(txtDocNo.getText());
                        objEngine.PreviewReport(objConfig.ReportFileName, Parameters, objData);
                    }

                    if (objConfig.ProcessType == 0) {
                        HashMap Parameters = new HashMap();
                        Parameters.put("VOUCHER_NO", txtDocNo.getText());

                        TReportWriter.SimpleDataProvider.TTable objData = clsVoucherReports.getVoucherReport(txtDocNo.getText(), objConfig.ProcessType);
                        objEngine.PreviewReport(objConfig.ReportFileName, Parameters, objData);
                    }
                    
                    if (objConfig.ProcessType == 3) {
                        HashMap Parameters = new HashMap();
                        Parameters.put("VOUCHER_NO", txtDocNo.getText());

                        TReportWriter.SimpleDataProvider.TTable objData = clsVoucherReports.getVoucherReport(txtDocNo.getText(), objConfig.ProcessType);
                        objEngine.PreviewReport(objConfig.ReportFileName, Parameters, objData);
                    }

                }
            } catch (Exception e) {
            }
        }
    }

    private boolean Validate() {
        String Msg = "";
        //Form level validations
        if (txtDocDate.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter document date");
            return false;
        }

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please select the hierarchy.");
            return false;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null, "Please select the Approval Action");
            return false;
        }

        //Check the no. of items
        if (Table.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(null, "Please enter some items.");
            return false;
        }

        //Check negative Qty.
        for (int i = 0; i <= Table.getRowCount() - 1; i++) {
            double Amount = UtilFunctions.CDbl(DataModel.getValueByVariable("AMOUNT", i));
            String Effect = DataModel.getValueByVariable("EFFECT", i).substring(0, 1);
            String RefDocNo = DataModel.getValueByVariable("REF_NO", i);
            String InvNo = DataModel.getValueByVariable("INVOICE_NO", i);
            String InvDate = DataModel.getValueByVariable("INVOICE_DATE", i);

            if (Amount <= 0) {
                JOptionPane.showMessageDialog(null, "Please enter amount");
                return false;
            }

            String MainCode = DataModel.getValueByVariable("MAIN_ACCOUNT_CODE", i);
            String PartyCode = DataModel.getValueByVariable("SUB_ACCOUNT_CODE", i);

            boolean FoundMainCode = data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MAINCODE WHERE MAIN_ACCOUNT_CODE='" + MainCode + "' ");
            if (MainCode.equals("210010") || MainCode.equals("210027") || MainCode.equals("210072") || FoundMainCode) {
                String ValueDate = EITLERPGLOBAL.formatDateDB(DataModel.getValueByVariable("VALUE_DATE", i).trim());

                if (ValueDate.equals("")) {
                    JOptionPane.showMessageDialog(null, "Please Insert Value Date in DD/MM/YYYY format.");
                    return false;
                }

                if (!EITLERPGLOBAL.isDate(EITLERPGLOBAL.formatDate(ValueDate))) {
                    JOptionPane.showMessageDialog(null, "Invalid Value Date. Please enter date in DD/MM/YYYY format");
                    return false;
                }
                // Change by prath on 11-03-2010
                if (java.sql.Date.valueOf(ValueDate).after(java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(txtDocDate.getText().trim())))) {
                    JOptionPane.showMessageDialog(this, "Please enter valid Value Date");
                    return false;
                }
            }

            if (data.getIntValueFromDB("SELECT IS_SUBSIDAIRY FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE='" + MainCode + "' ", FinanceGlobal.FinURL) == 1) {
                if (PartyCode.equals("")) {
                    JOptionPane.showMessageDialog(this, "Insert Party Code");
                    return false;
                }
            }

            int VoucherType = clsVoucher.getVoucherType(DataModel.getValueByVariable("REF_NO", i));
            if (Effect.equals("D") && VoucherType != 0) {
                String VoucherNo = txtDocNo.getText().trim();

                double ReceiptAmount = data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL "
                        + "WHERE VOUCHER_NO='" + RefDocNo + "' AND EFFECT='C' AND MAIN_ACCOUNT_CODE='" + MainCode + "' "
                        + "AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND (INVOICE_NO='' OR INVOICE_NO LIKE 'DUM%') "
                        + "AND GRN_NO='' AND MODULE_ID<>" + clsVoucher.DebitNoteModuleID, FinanceGlobal.FinURL);

                if (MainCode.equals("132802")) {
                    ReceiptAmount = data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL "
                            + "WHERE VOUCHER_NO='" + RefDocNo + "' AND EFFECT='C' AND MAIN_ACCOUNT_CODE='" + MainCode + "' "
                            + "AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND (INVOICE_NO='' OR INVOICE_NO LIKE 'F0%' OR INVOICE_NO LIKE 'B0%' OR INVOICE_NO LIKE 'DUM%') "
                            + "AND GRN_NO='' AND MODULE_ID<>" + clsVoucher.DebitNoteModuleID, FinanceGlobal.FinURL);
                }

                String SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO=B.VOUCHER_NO "
                        + "AND B.GRN_NO='" + RefDocNo + "' AND B.EFFECT='D' AND A.VOUCHER_NO<>'" + VoucherNo + "' AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                        + "AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND A.APPROVED=0 AND A.CANCELLED=0 AND A.BOOK_CODE<>99 ";
                double AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                double AdjustAmount = Amount;
                if ((AdjustedAmount + AdjustAmount) > ReceiptAmount) {
                    Msg = "Already Adjusted Amount is " + AdjustedAmount + ". \n"
                            + "Receipt amount is " + ReceiptAmount + ". \n"
                            + "You are trying to adjust Rs. " + (Math.abs(ReceiptAmount - AdjustedAmount - AdjustAmount)) + " more.";
                    JOptionPane.showMessageDialog(this, Msg, "Wrong Adjustment", JOptionPane.ERROR_MESSAGE);
                    return false;
                }

                double otherAdjAmount = 0;
                for (int j = 0; j < Table.getRowCount(); j++) {
                    if (i != j) {
                        String otherRefDocNo = DataModel.getValueByVariable("REF_NO", j);
                        String otherEffect = DataModel.getValueByVariable("EFFECT", j);
                        if (RefDocNo.equals(otherRefDocNo) && (otherEffect.equals(Effect))) {
                            otherAdjAmount += UtilFunctions.CDbl(DataModel.getValueByVariable("AMOUNT", j));
                        }
                    }
                }

                if ((AdjustedAmount + AdjustAmount + otherAdjAmount) > ReceiptAmount) {
                    Msg = "Already Adjusted Amount is " + AdjustedAmount + ". \n"
                            + "Receipt amount is " + ReceiptAmount + ". \n"
                            + "You are trying to adjust Rs. " + (Math.abs(ReceiptAmount - AdjustedAmount - AdjustAmount - otherAdjAmount)) + " more.";
                    JOptionPane.showMessageDialog(this, Msg, "Wrong Adjustment", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
            }

            if (!InvNo.equals("") && !InvDate.equals("") && !InvNo.startsWith("DUM") && (MainCode.equals("210010") || MainCode.equals("210027") || MainCode.equals("210072"))) {
                if (!EITLERPGLOBAL.isDate(InvDate)) {
                    JOptionPane.showMessageDialog(null, "Invalid invoice date in row " + (i + 1));
                    return false;
                }
                double InvoiceAmount = clsSalesInvoice.getInvoiceAmount(InvNo, EITLERPGLOBAL.formatDateDB(InvDate));
                String SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO=B.VOUCHER_NO "
                        + "AND B.INVOICE_NO='" + InvNo + "' AND B.EFFECT='C' AND B.INVOICE_DATE='" + EITLERPGLOBAL.formatDateDB(InvDate) + "' "
                        + "AND A.CANCELLED=0 AND A.VOUCHER_NO<>'" + txtDocNo.getText().trim() + "' AND A.BOOK_CODE<>'99' "
                        + //"AND A.VOUCHER_TYPE<>"+FinanceGlobal.TYPE_SALES_JOURNAL;
                        "AND A.VOUCHER_TYPE<>" + FinanceGlobal.TYPE_SALES_JOURNAL + "' AND A.BOOK_CODE <> 93";
                double AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                double AdjustAmount = Amount;
                if ((AdjustedAmount + AdjustAmount) > InvoiceAmount) {
                    Msg = "Already Adjusted Amount is " + AdjustedAmount + ". \n"
                            + "Invoice amount is " + InvoiceAmount + ". \n"
                            + "You are trying to adjust Rs. " + (Math.abs(InvoiceAmount - AdjustedAmount - AdjustAmount)) + " more.";
                    JOptionPane.showMessageDialog(this, Msg, "Wrong Adjustment", JOptionPane.ERROR_MESSAGE);
                    return false;
                }

                double otherAdjAmount = 0;
                for (int j = 0; j < Table.getRowCount(); j++) {
                    String oInvNo = DataModel.getValueByVariable("INVOICE_NO", j);
                    String oInvDate = DataModel.getValueByVariable("INVOICE_DATE", j);
                    if (oInvNo.equals(InvNo) && oInvDate.equals(InvDate)) {
                        if (i != j && DataModel.getValueByVariable("EFFECT", j).substring(0, 1).equals("C")) {
                            String otherRefDocNo = DataModel.getValueByVariable("REF_DOC_NO", j);
                            if (RefDocNo.equals(otherRefDocNo)) {
                                otherAdjAmount += UtilFunctions.CDbl(DataModel.getValueByVariable("AMOUNT", j));
                            }
                        }
                    }
                }

                if ((AdjustedAmount + AdjustAmount + otherAdjAmount) > InvoiceAmount) {
                    Msg = "Already Adjusted Amount is " + AdjustedAmount + ". \n"
                            + "SJ/Invoice amount is " + InvoiceAmount + ". \n"
                            + "You are trying to adjust Rs. " + (Math.abs(InvoiceAmount - AdjustedAmount - AdjustAmount - otherAdjAmount)) + " more.";
                    JOptionPane.showMessageDialog(this, Msg, "Wrong Adjustment", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
            }
        }

        for (int i = 0; i <= Table.getRowCount() - 1; i++) {
            String PONo = DataModel.getValueByVariable("PO_NO", i);
            String InvoiceNo = DataModel.getValueByVariable("INVOICE_NO", i);
            double Amount = Double.parseDouble(DataModel.getValueByVariable("AMOUNT", i));
            String Effect = DataModel.getValueByVariable("EFFECT", i).substring(0, 1);
            String MainCode = DataModel.getValueByVariable("MAIN_ACCOUNT_CODE", i);
            String PartyCode = DataModel.getValueByVariable("SUB_ACCOUNT_CODE", i);
            if (MainCode.equals("125019") && Effect.equals("C")) {
                if (PONo.equals("") || InvoiceNo.equals("")) {
                    JOptionPane.showMessageDialog(this, "Please enter PO No. and invoice no");
                    return false;
                }
            }
            if (!OpgReject.isSelected()) {
                if (MainCode.equals("125019") && Effect.equals("D")) {
                    if (PONo.equals("")) {
                        JOptionPane.showMessageDialog(this, "Please enter PO No.");
                        return false;
                    }

                    if (!PONo.equals("") && !InvoiceNo.equals("")) {
                        //String SQL = "SELECT * FROM D_FIN_VOUCHER_DETAIL WHERE EFFECT='C' AND PO_NO='"+PONo+"' AND INVOICE_NO='"+InvoiceNo+"' ";
                        String SQL = "SELECT * FROM D_FIN_VOUCHER_DETAIL WHERE MAIN_ACCOUNT_CODE='125019' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND EFFECT='C' AND PO_NO='" + PONo + "' AND INVOICE_NO='" + InvoiceNo + "' ";
                        if (!data.IsRecordExist(SQL, FinanceGlobal.FinURL)) {
                            JOptionPane.showMessageDialog(this, "Wrong PO and Invoice entered.", "Wrong PO and Invoice", JOptionPane.ERROR_MESSAGE);
                            return false;
                        }
                        for (int j = 0; j <= Table.getRowCount() - 1; j++) {
                            if (i != j) {
                                String OtherPONo = DataModel.getValueByVariable("PO_NO", j);
                                String OtherInvoiceNo = DataModel.getValueByVariable("INVOICE_NO", j);
                                String OtherEffect = DataModel.getValueByVariable("INVOICE_NO", j);
                                if (OtherPONo.equals(PONo) && OtherInvoiceNo.equals(InvoiceNo) && OtherEffect.equals(Effect)) {
                                    Amount += Double.parseDouble(DataModel.getValueByVariable("AMOUNT", j));
                                }
                            }
                        }
                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.CANCELLED=0 AND B.MAIN_ACCOUNT_CODE='125019' "
                                + "AND B.SUB_ACCOUNT_CODE='" + PartyCode.trim() + "' AND B.EFFECT='C' "
                                + "AND B.PO_NO='" + PONo + "' AND B.INVOICE_NO='" + InvoiceNo + "' ";
                        double CreditAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.CANCELLED=0 AND A.VOUCHER_NO<>'" + txtDocNo.getText().trim() + "' "
                                + "AND B.MAIN_ACCOUNT_CODE='125019' AND B.SUB_ACCOUNT_CODE='" + PartyCode.trim() + "' AND B.EFFECT='D' "
                                + "AND B.PO_NO='" + PONo + "' AND B.INVOICE_NO='" + InvoiceNo + "' ";
                        double AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                        if ((Amount + AdjustedAmount) > CreditAmount) {
                            Msg = "Po No.: " + PONo + " and Invoice No.: " + InvoiceNo + "\n"
                                    + "Invoice Amount : " + CreditAmount + "\n"
                                    + "Already adjusted Amount : " + AdjustedAmount + "\n"
                                    + "Current Adjustment : " + Amount + "\n"
                                    + "You are trying to adjust " + (Amount + AdjustedAmount - CreditAmount) + " more.";
                            JOptionPane.showMessageDialog(this, Msg, "Wrong Adjustment", JOptionPane.ERROR_MESSAGE);
                            return false;
                        }
                    }
                }
            }
        }

        if (!EITLERPGLOBAL.isDate(txtDocDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid Vourche Date. Please enter date in DD/MM/YYYY format");
            return false;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter the remarks for rejection");
            return false;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(null, "Please select the user, to whom rejected document to be send");
            return false;
        }

        if (txtDocNo.getText().trim().startsWith("TE")) {
            if (txtEmployeeNo.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Please enter employee no.");
                return false;
            }
        }

        if (!OpgReject.isSelected()) {
            if (!txtDocNo.getText().trim().startsWith("CN")) {
                if (!txtDocDate.getText().trim().substring(3, 5).equals("03")) {
                    int Result = clsVoucher.ValidateVoucherEntry(EditMode, EITLERPGLOBAL.formatDateDB(txtDocDate.getText().trim()));
                    if (Result == EITLERPGLOBAL.ADD) {
                        JOptionPane.showMessageDialog(this, "Month is Closed. \nYou can not create voucher(s).");
                        return false;
                    } else if (Result == EITLERPGLOBAL.EDIT) {
                        JOptionPane.showMessageDialog(this, "Month is Closed. \nYou can not Approve / Final Approve voucher(s).\n Either you have to cancel voucher or change voucher date.");
                        return false;
                    }
                }
            }
        }
        /*
         if(!txtBookCode.getText().trim().equals("14")) {
         if(txtReasonCode.getText().equals("") || txtReasonCodeName.getText().equals("")) {
         JOptionPane.showMessageDialog(null,"Please Enter Reason Code.");
         return false;
         }
         }
         */
        if (!txtReasonCode.getText().trim().equals("")) {
            int InvoiceType = 0;
            if (txtBookCode.getText().trim().equals("13")) {
                InvoiceType = 1;
            } else if (txtBookCode.getText().trim().equals("17")) {
                InvoiceType = 2;
            } else if (txtBookCode.getText().trim().equals("19")) {
                InvoiceType = 3;
            } else {
                InvoiceType = 99;
                txtReasonCode.setText("NA");
            }

            String SQL = "SELECT REASON_CODE_DESC,REASON_CODE FROM D_FIN_REASONCODE_MASTER WHERE INVOICE_TYPE=" + InvoiceType + " AND REASON_CODE='" + txtReasonCode.getText().trim() + "' ";
            /*
             if(!txtBookCode.getText().trim().equals("14")) {
             if(!data.IsRecordExist(SQL,FinanceGlobal.FinURL)) {
             JOptionPane.showMessageDialog(null,"Invalid Reason Code.");
             return false;
             }
             }
             */
        }

        return true;
    }

    private void CNPreviewReport() {
        if (EditMode == 0) {
            
        String draftSQL = "",detailSQL = "";
        String voucherNo = txtDocNo.getText().toString();
        draftSQL = "SELECT * FROM PRODUCTION.D_CREDIT_NOTE_HEADER WHERE CNH_FIN_VOUCHER_NO = '"+voucherNo+"' AND CNH_TYPE LIKE 'FELTCASH%' ";
        detailSQL = "SELECT * FROM PRODUCTION.D_CREDIT_NOTE_HEADER H, PRODUCTION.D_CREDIT_NOTE_DETAIL D WHERE H.CNH_NO=D.CND_NO AND H.CNH_FIN_VOUCHER_NO = '"+voucherNo+"' AND H.CNH_TYPE LIKE 'FELTCASH%' ";
        
        try {

            Connection Conn = data.getConn();
            Statement st = Conn.createStatement();

            HashMap parameterMap = new HashMap();
            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

//            System.out.println("Draft QUERY : " + draftSQL);
            rpt.setReportName("/EITLERP/FeltSales/FeltCash09/CreditNote09Draft.jrxml", 1, draftSQL);
            rpt.callReport();
            
            HashMap parameterMapDetail = new HashMap();
            parameterMapDetail.put("RUNDATE", EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime());
            ReportRegister rptDetail = new ReportRegister(parameterMapDetail, Conn);
            
            rptDetail.setReportName("/EITLERP/FeltSales/FeltCash09/CreditNote09Detail.jrxml", 1, detailSQL);
            rptDetail.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        }

            
        }
    }

}
