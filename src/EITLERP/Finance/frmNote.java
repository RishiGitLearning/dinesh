/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP.Finance;

/**
 *
 * @author  nitin
 */
/*<APPLET CODE=frmInward.class HEIGHT=500 WIDTH=665></APPLET>*/

import javax.swing.*;
import java.awt.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import javax.swing.text.*;
import EITLERP.Utils.*;
import java.sql.*;
import java.net.*;
import EITLERP.*;


public class frmNote extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsNote objNote;
    
    private boolean Updating=false;
    private String theDocNo="";
    private EITLComboModel cmbFromModel;
    private EITLTableModel DataModelS;
    /** Creates new form frmTemplate */
    public frmNote() {
        
        setSize(665,430);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        cmbFromModel=new EITLComboModel();
        GenerateYearCombo();
        objNote=new clsNote();
        FormatGridSubNote();
        if(objNote.LoadData(EITLERPGLOBAL.gCompanyID)) {
            objNote.MoveFirst();
            DisplayData();
            SetMenuForRights();
        }
        else {
            JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+objNote.LastError);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        cmdCopy = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        lblNote = new javax.swing.JLabel();
        txtNote = new javax.swing.JTextField();
        lblNoteName = new javax.swing.JLabel();
        txtNoteName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        lblFromYear = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TableSubNotes = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        cmbFromYear = new javax.swing.JComboBox();
        txtToYear = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        cmdCopy.setFont(new java.awt.Font("Verdana", 0, 10));
        cmdCopy.setText("Copy Notes");
        cmdCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCopyActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCopy);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" NOTE MASTER");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 666, 25);

        Tab1.setLayout(null);

        Tab1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        lblNote.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblNote.setText("Note : ");
        Tab1.add(lblNote);
        lblNote.setBounds(10, 13, 100, 15);

        txtNote.setEnabled(false);
        txtNote.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNoteFocusGained(evt);
            }
        });

        Tab1.add(txtNote);
        txtNote.setBounds(130, 11, 124, 21);

        lblNoteName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblNoteName.setText("Note Name : ");
        Tab1.add(lblNoteName);
        lblNoteName.setBounds(10, 40, 100, 15);

        txtNoteName.setEnabled(false);
        txtNoteName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNoteNameFocusGained(evt);
            }
        });

        Tab1.add(txtNoteName);
        txtNoteName.setBounds(130, 40, 400, 21);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Add Sub Notes Heading : ");
        Tab1.add(jLabel1);
        jLabel1.setBounds(10, 110, 160, 14);

        lblFromYear.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFromYear.setText("For the Year : ");
        Tab1.add(lblFromYear);
        lblFromYear.setBounds(10, 70, 100, 15);

        TableSubNotes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(TableSubNotes);

        Tab1.add(jScrollPane5);
        jScrollPane5.setBounds(20, 130, 610, 100);

        cmdAdd.setText("Add");
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });

        Tab1.add(cmdAdd);
        cmdAdd.setBounds(40, 240, 59, 25);

        cmdRemove.setText("Remove");
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });

        Tab1.add(cmdRemove);
        cmdRemove.setBounds(130, 240, 83, 25);

        cmbFromYear.setToolTipText("");
        cmbFromYear.setEnabled(false);
        cmbFromYear.setOpaque(false);
        cmbFromYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFromYearItemStateChanged(evt);
            }
        });
        cmbFromYear.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbFromYearFocusGained(evt);
            }
        });

        Tab1.add(cmbFromYear);
        cmbFromYear.setBounds(130, 70, 102, 21);

        txtToYear.setEnabled(false);
        Tab1.add(txtToYear);
        txtToYear.setBounds(280, 70, 70, 19);

        jLabel2.setText("--");
        Tab1.add(jLabel2);
        jLabel2.setBounds(250, 70, 20, 15);

        Tab.addTab("Note Header", Tab1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 654, 300);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(4, 370, 650, 22);

    }//GEN-END:initComponents

    private void cmbFromYearFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbFromYearFocusGained
        // TODO add your handling code here:
        showMessage("Select From Year.");
    }//GEN-LAST:event_cmbFromYearFocusGained

    private void txtNoteNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNoteNameFocusGained
        // TODO add your handling code here:
        showMessage("Enter Note Name.");
    }//GEN-LAST:event_txtNoteNameFocusGained

    private void txtNoteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNoteFocusGained
        // TODO add your handling code here:
        showMessage("Enter Note No.");
    }//GEN-LAST:event_txtNoteFocusGained
    
    private void cmdCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCopyActionPerformed
        // TODO add your handling code here:
        //SelectFinancialYear.PCode = txtPartyCode.getText().trim(); 
        
        SelectFinancialYear ObjFyear=new SelectFinancialYear();
        if(ObjFyear.ShowList()) {
            int yearFromCopy = ObjFyear.SelYearFromGetCopy;
            //int yearToCopy = yearFromCopy+1;
            int yearFromPaste = ObjFyear.SelYearFromSetCopy;
            if(data.IsRecordExist("SELECT * FROM D_FIN_NOTE_MASTER WHERE YEAR_FROM="+yearFromPaste+"",FinanceGlobal.FinURL)) {
                JOptionPane.showMessageDialog(this,yearFromPaste+" already added in note master.","Copy Error",JOptionPane.ERROR_MESSAGE);
                return;
            }
            //int yearToPaste = yearFromPaste+1;
            System.out.println("Copy : " + yearFromCopy);
            System.out.println("Paste : " + yearFromPaste);
            if(!objNote.InsertCopy(yearFromCopy,yearFromPaste)) {
                JOptionPane.showMessageDialog(this,"Error occured during coping previous year data.","Copy Error",JOptionPane.ERROR_MESSAGE);
            }
   
        }
   
    }//GEN-LAST:event_cmdCopyActionPerformed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        int i =  TableSubNotes.getRowCount();
        Object[] rowData=new Object[4];
        rowData[0]= Integer.toString(i+1);
        rowData[1]="";
        DataModelS.addRow(rowData);
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if(TableSubNotes.getRowCount()>0) {
            DataModelS.removeRow(TableSubNotes.getSelectedRow());
            UpdateSubNoteSrNo();
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void cmbFromYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFromYearItemStateChanged
        // TODO add your handling code here:
        try {
            int ToYear=Integer.parseInt((String)cmbFromYear.getSelectedItem())+1;
            txtToYear.setText(Integer.toString(ToYear));
        } catch(Exception e) {
        }
    }//GEN-LAST:event_cmbFromYearItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        objNote.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JTable TableSubNotes;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbFromYear;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdCopy;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdTop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblFromYear;
    private javax.swing.JLabel lblNote;
    private javax.swing.JLabel lblNoteName;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtNote;
    private javax.swing.JTextField txtNoteName;
    private javax.swing.JTextField txtToYear;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    
    private void SetFields(boolean pStat) {
        txtNote.setEnabled(pStat);
        txtNoteName.setEnabled(pStat);
        cmbFromYear.setEnabled(pStat);
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
    }
    
    private void ClearFields() {
        txtNote.setText("");
        txtNoteName.setText("");
        FormatGridSubNote();
        //cmbFromYear.setSelectedIndex(0);
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        txtNote.setText(Integer.toString(objNote.getAttribute("NOTE").getInt()));
        txtNoteName.setText(objNote.getAttribute("NOTE_NAME").getString());
        EITLERPGLOBAL.setComboIndex(cmbFromYear,objNote.getAttribute("YEAR_FROM").getInt());
        txtToYear.setText(Integer.toString(objNote.getAttribute("YEAR_TO").getInt()));
        FormatGridSubNote();
        for(int i=1;i<=objNote.colSubNote.size();i++) {
            clsSubNote ObjSubNote=(clsSubNote)objNote.colSubNote.get(Integer.toString(i));
            Object[] rowData=new Object[2];
            rowData[0]=Integer.toString(i);
            rowData[1]=ObjSubNote.getAttribute("SUB_NOTE_NAME").getString();
            DataModelS.addRow(rowData);
        }
        if(EditMode==0) {
            DataModelS.TableReadOnly(true);
        }
    }
    
    private void FormatGridSubNote() {
        DataModelS=new EITLTableModel();
        
        TableSubNotes.removeAll();
        TableSubNotes.setModel(DataModelS);
        
        //Set the table Readonly
        //DataModelS.TableReadOnly(true);
        
        //Add the columns
        DataModelS.addColumn("Sr. No.");//0
        DataModelS.addColumn("Sub Note Name");//0
        
        DataModelS.SetVariable(0,"SR_NO");
        DataModelS.SetVariable(1,"SUB_NOTE_NAME");
        DataModelS.SetReadOnly(0);
        TableSubNotes.setAutoResizeMode(TableSubNotes.AUTO_RESIZE_OFF);
        TableSubNotes.getColumnModel().getColumn(0).setPreferredWidth(50);
        TableSubNotes.getColumnModel().getColumn(1).setPreferredWidth(500);
    }
    
    //Sets data to the Class Object
    private void SetData() {
        objNote.setAttribute("NOTE",Integer.parseInt(txtNote.getText()));
        objNote.setAttribute("NOTE_NAME",txtNoteName.getText());
        int YearFrom=Integer.parseInt(cmbFromYear.getSelectedItem().toString());
        objNote.setAttribute("YEAR_FROM",YearFrom);
        objNote.setAttribute("YEAR_TO",Integer.parseInt(txtToYear.getText().trim()));
        if(EditMode == EITLERPGLOBAL.ADD) {
            objNote.setAttribute("CREATED_BY",EITLERPGLOBAL.gLoginID);
            objNote.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        } else {
            objNote.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gLoginID);
            objNote.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        objNote.colSubNote.clear();
        
        for(int i=0;i<TableSubNotes.getRowCount();i++) {
            clsSubNote ObjSubNote = new clsSubNote();
            
            ObjSubNote.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
            ObjSubNote.setAttribute("NOTE",Integer.parseInt(txtNote.getText()));
            ObjSubNote.setAttribute("SR_NO",Integer.parseInt(DataModelS.getValueByVariable("SR_NO",i)));
            ObjSubNote.setAttribute("YEAR_FROM",YearFrom);
            ObjSubNote.setAttribute("SUB_NOTE_NAME",DataModelS.getValueByVariable("SUB_NOTE_NAME",i));
            
            objNote.colSubNote.put(Integer.toString(objNote.colSubNote.size()+1),ObjSubNote);
        }
    }
    
    private void GenerateYearCombo() {
        HashMap List=new HashMap();
        
        cmbFromYear.setModel(cmbFromModel);
        cmbFromYear.removeAllItems();
        
        List=clsFinYear.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
        
        
        for(int i=1;i<=List.size();i++) {
            clsFinYear ObjYear =(clsFinYear) List.get(Integer.toString(i));
            
            ComboData cmbData=new ComboData();
            cmbData.Text=Integer.toString((int)ObjYear.getAttribute("YEAR_FROM").getVal());
            cmbData.Code=(int)ObjYear.getAttribute("YEAR_FROM").getVal();
            cmbData.strCode =Integer.toString((int)ObjYear.getAttribute("YEAR_FROM").getVal());
            cmbFromModel.addElement(cmbData);
        }
    }
    private void SetMenuForRights() {
        
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,20111)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,20112)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }
        
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,20113)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
    }
    
    private void Add() {
        
        EditMode=EITLERPGLOBAL.ADD;
        SetFields(true);
        int CurFinYear=EITLERPGLOBAL.getCurrentFinYear();
        EITLERPGLOBAL.setComboIndex(cmbFromYear,CurFinYear);
        DisableToolbar();
        ClearFields();
    }
    
    private void Edit() {
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        EditMode=EITLERPGLOBAL.EDIT;
        
        //---New Change ---//
        DisplayData();
        //----------------//
        
        SetFields(true);
        txtNote.setEnabled(false);
        DisableToolbar();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Delete() {
        String Msg = "Once you delete Note then " +
        "\n1. Note " +
        "\n2. It's Sub Note " +
        "\n3. It's mapping will not recover. " +
        "\n Do you want delete current note?";
        if(JOptionPane.showConfirmDialog(this,Msg,"Delete Confirmation", JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            if(objNote.Delete()) {
                MoveLast();
                DisplayData();
            }
        }
    }
    
    private void Save() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        if(!Validate()) {
            EITLERPGLOBAL.ChangeCursorToDefault(this);
            return;
        }
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(objNote.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+objNote.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(objNote.Update()) {
                //Nothing to do
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+objNote.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Finance.frmNoteFind",true);
        frmNoteFind ObjReturn= (frmNoteFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!objNote.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveFirst();
        }
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objNote.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objNote.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objNote.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objNote.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    public void FindEx(int pCompanyID,int pDocNo) {
        objNote.Filter(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND NOTE="+pDocNo+" ",EITLERPGLOBAL.gCompanyID);
        objNote.MoveFirst();
        DisplayData();
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void UpdateSubNoteSrNo() {
        int SrCol=DataModelS.getColFromVariable("SR_NO");
        
        for(int i=0;i<TableSubNotes.getRowCount();i++) {
            TableSubNotes.setValueAt(Integer.toString(i+1), i, SrCol);
        }
    }
    
    private boolean Validate() {
        if(txtNote.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Insert Note");
            return false;
        }
        
        if(txtNoteName.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Insert Note Name");
            return false;
        }
        return true;
    }
    
    private void showMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
}
