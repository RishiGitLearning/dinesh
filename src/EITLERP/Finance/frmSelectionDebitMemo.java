/*
 * frmSelectionPaymentVoucher.java
 *
 * Created on September 28, 2007, 12:01 PM
 */
package EITLERP.Finance;

/**
 *
 * @author root
 */
import EITLERP.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.event.*;
import javax.swing.text.*;
import java.util.*;
import java.awt.Frame;
import java.awt.*;
import java.sql.*;
import EITLERP.Sales.*;
import EITLERP.Sales.DebitMemoReceiptMapping.clsDebitMemoReceiptMapping;

public class frmSelectionDebitMemo extends javax.swing.JApplet {

    private EITLTableModel DataModel = new EITLTableModel();
    private EITLTableModel DataModelDM = new EITLTableModel();
    private EITLTableCellRenderer Render = new EITLTableCellRenderer();
    private JDialog aDialog;
    public boolean Cancelled = false;
    public clsVoucher objSelectedItem = new clsVoucher();
    public HashMap SelectedItems = new HashMap();
    public String PartyCode = "";
    public String MainCode = "";
    private EITLComboModel cmbFromModel;

    public frmSelectionDebitMemo() {
        initComponents();
        GenerateYearCombo();
        cmbFromYear.setEnabled(false);
        chkYearOption.setSelected(false);
    }

    /**
     * Initializes the applet frmSelectionPaymentVoucher
     */
    public void init() {
        setSize(700, 475);
        initComponents();
        GenerateYearCombo();
        cmbFromYear.setEnabled(false);
        chkYearOption.setSelected(false);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        txtPartyName = new javax.swing.JTextField();
        cmdNext = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtInvoiceNo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cmbFromYear = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        txtToYear = new javax.swing.JTextField();
        lblMainCode = new javax.swing.JLabel();
        txtMainAccountCode = new javax.swing.JTextField();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        chkYearOption = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdSelect = new javax.swing.JButton();
        cmdClose = new javax.swing.JButton();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(null);

        lblTitle.setBackground(new java.awt.Color(0, 153, 204));
        lblTitle.setText(" SELECT DEBIT MEMO");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 1, 666, 25);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Party Code :");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(5, 32, 80, 16);

        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });
        jPanel1.add(txtPartyCode);
        txtPartyCode.setBounds(90, 30, 130, 28);

        txtPartyName.setEnabled(false);
        jPanel1.add(txtPartyName);
        txtPartyName.setBounds(90, 55, 500, 28);

        cmdNext.setText("Next >>");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        jPanel1.add(cmdNext);
        cmdNext.setBounds(550, 230, 88, 28);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Invoice No. :");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(5, 82, 80, 16);

        txtInvoiceNo.setEnabled(false);
        jPanel1.add(txtInvoiceNo);
        txtInvoiceNo.setBounds(90, 80, 130, 28);

        jLabel6.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("From Date :");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(5, 107, 80, 15);

        cmbFromYear.setOpaque(false);
        cmbFromYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFromYearItemStateChanged(evt);
            }
        });
        jPanel1.add(cmbFromYear);
        cmbFromYear.setBounds(90, 165, 102, 28);

        jLabel7.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("To Date :");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(205, 108, 60, 15);

        txtToYear.setEditable(false);
        txtToYear.setOpaque(false);
        jPanel1.add(txtToYear);
        txtToYear.setBounds(240, 168, 102, 28);

        lblMainCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMainCode.setText("Main Code :");
        jPanel1.add(lblMainCode);
        lblMainCode.setBounds(5, 7, 80, 16);
        jPanel1.add(txtMainAccountCode);
        txtMainAccountCode.setBounds(90, 5, 130, 28);

        txtFromDate.setEnabled(false);
        jPanel1.add(txtFromDate);
        txtFromDate.setBounds(90, 105, 100, 28);

        txtToDate.setEnabled(false);
        jPanel1.add(txtToDate);
        txtToDate.setBounds(275, 105, 100, 28);

        jLabel8.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Year :");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(5, 170, 80, 15);

        jLabel9.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("To :");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(205, 170, 24, 15);

        chkYearOption.setText(" Year Option");
        chkYearOption.setEnabled(false);
        chkYearOption.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkYearOptionItemStateChanged(evt);
            }
        });
        jPanel1.add(chkYearOption);
        chkYearOption.setBounds(10, 140, 130, 20);

        Tab.addTab("Select Party", jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(null);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(9, 37, 620, 180);

        cmdSelect.setText("Select");
        cmdSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSelectActionPerformed(evt);
            }
        });
        jPanel2.add(cmdSelect);
        cmdSelect.setBounds(424, 232, 100, 28);

        cmdClose.setText("Close");
        cmdClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCloseActionPerformed(evt);
            }
        });
        jPanel2.add(cmdClose);
        cmdClose.setBounds(533, 232, 100, 28);

        Tab.addTab("Select DM", jPanel2);

        getContentPane().add(Tab);
        Tab.setBounds(3, 32, 650, 290);
    }// </editor-fold>//GEN-END:initComponents

    private void chkYearOptionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkYearOptionItemStateChanged
        // TODO add your handling code here:
        if (chkYearOption.isSelected()) {
            cmbFromYear.setEnabled(true);
            txtToYear.setEnabled(true);
            txtToYear.setText("");
            txtFromDate.setText("");
            txtFromDate.setEnabled(false);
            txtFromDate.setEditable(false);
            txtToDate.setText("");
            txtToDate.setEnabled(false);
            txtToDate.setEditable(false);
            GenerateYearCombo();
        } else {
            cmbFromYear.setEnabled(false);
            txtToYear.setEnabled(false);
            txtToYear.setText("");
            txtFromDate.setText("");
            txtFromDate.setEnabled(true);
            txtFromDate.setEditable(true);
            txtToDate.setText("");
            txtToDate.setEnabled(true);
            txtToDate.setEditable(true);
        }
    }//GEN-LAST:event_chkYearOptionItemStateChanged

    private void cmbFromYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFromYearItemStateChanged
        // TODO add your handling code here:
        int ToYear = Integer.parseInt((String) cmbFromYear.getSelectedItem()) + 1;
        txtToYear.setText(Integer.toString(ToYear));
    }//GEN-LAST:event_cmbFromYearItemStateChanged

    private void cmdCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCloseActionPerformed
        // TODO add your handling code here:
        Cancelled = true;
        aDialog.dispose();
    }//GEN-LAST:event_cmdCloseActionPerformed

    private void cmdSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSelectActionPerformed
        // TODO add your handling code here:

        int chkCnt = 0;
        String a = "";

        for (int i = 0; i < Table.getRowCount(); i++) {
            if (Table.getValueAt(i, 0).equals(true)) {
                String invNo = Table.getValueAt(i, 5).toString();
                chkCnt++;
                if (chkCnt == 1) {
                    a = invNo;
                }
                if (chkCnt > 1 && !invNo.equals(a)) {
                    JOptionPane.showMessageDialog(null, "You can select any one invoice no.");
                    for (int j = 0; j < Table.getRowCount(); j++) {
                        Table.setValueAt(new Boolean(false), j, 0);
                    }
                    return;
                }
            }

        }

        try {

            SelectedItems.clear();

            for (int r = 0; r < Table.getRowCount(); r++) {
                if (Table.getValueAt(r, 0).equals(new Boolean(true))) {
                    //clsVoucher objItem=new clsVoucher();
                    clsDebitMemoReceiptMapping objItem = new clsDebitMemoReceiptMapping();

                    objItem.setAttribute("DEBITMEMO_NO", DataModel.getValueByVariable("DEBITMEMO_NO", r));
                    objItem.setAttribute("DEBITMEMO_DATE", DataModel.getValueByVariable("DEBITMEMO_DATE", r));
                    objItem.setAttribute("RECEIPT_VOUCHER_NO", DataModel.getValueByVariable("RECEIPT_VOUCHER_NO", r));
                    objItem.setAttribute("INVOICE_NO", DataModel.getValueByVariable("INVOICE_NO", r));
                    objItem.setAttribute("INVOICE_DATE", DataModel.getValueByVariable("INVOICE_DATE", r));
                    objItem.setAttribute("INVOICE_DUE_DATE", DataModel.getValueByVariable("INVOICE_DUE_DATE", r));
                    objItem.setAttribute("VALUE_DATE", DataModel.getValueByVariable("VALUE_DUE_DATE", r));
                    objItem.setAttribute("DAYS", UtilFunctions.CInt(DataModel.getValueByVariable("DAYS", r)));
                    objItem.setAttribute("INVOICE_AMOUNT", UtilFunctions.CDbl(DataModel.getValueByVariable("INVOICE_AMOUNT", r)));
                    objItem.setAttribute("INTEREST_PER", UtilFunctions.CDbl(DataModel.getValueByVariable("INTEREST_PER", r)));
                    objItem.setAttribute("INTEREST_AMT", UtilFunctions.CDbl(DataModel.getValueByVariable("INTEREST_AMT", r)));
                    objItem.setAttribute("DEBITNOTE_VOUCHER_NO", DataModel.getValueByVariable("DEBITNOTE_VOUCHER_NO", r));
                    objItem.setAttribute("DEBITNOTE_VOUCHERDATE", DataModel.getValueByVariable("DEBITNOTE_VOUCHER_DATE", r));
                    objItem.setAttribute("DEBIT_NOTE_AMOUNT", UtilFunctions.CDbl(DataModel.getValueByVariable("DEBIT_NOTE_AMOUNT", r)));
                    objItem.setAttribute("COMPANY_ID", UtilFunctions.CInt(DataModel.getValueByVariable("COMPANY_ID", r)));
                    objItem.setAttribute("HSN_SAC_CODE", DataModel.getValueByVariable("HSN_SAC_CODE", r));

                    SelectedItems.put(Integer.toString(SelectedItems.size() + 1), objItem);
                }
            }

            PartyCode = txtPartyCode.getText();
            MainCode = txtMainAccountCode.getText();

            Cancelled = false;
            aDialog.dispose();

        } catch (Exception e) {
            e.printStackTrace();
            Cancelled = true;
            aDialog.dispose();
        }
    }//GEN-LAST:event_cmdSelectActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_formMouseClicked

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        GenerateGridDebitMemo();
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextActionPerformed

    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
        // TODO add your handling code here:
        if (!txtMainAccountCode.getText().trim().equals("")) {
            txtPartyName.setText(clsPartyMaster.getAccountName(txtMainAccountCode.getText().trim(), txtPartyCode.getText()));
        } else {
            txtPartyName.setText(clsPartyMaster.getAccountName("", txtPartyCode.getText()));
        }

    }//GEN-LAST:event_txtPartyCodeFocusLost

    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) {
            LOV aList = new LOV();

            aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE APPROVED=1 ORDER BY PARTY_NAME";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            aList.UseSpecifiedConn = true;
            aList.dbURL = FinanceGlobal.FinURL;

            if (aList.ShowLOV()) {
                txtPartyCode.setText(aList.ReturnVal);
                txtPartyName.setText(clsPartyMaster.getAccountName("", txtPartyCode.getText()));
            }

        }

    }//GEN-LAST:event_txtPartyCodeKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JTable Table;
    private javax.swing.JCheckBox chkYearOption;
    private javax.swing.JComboBox cmbFromYear;
    private javax.swing.JButton cmdClose;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdSelect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMainCode;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtInvoiceNo;
    private javax.swing.JTextField txtMainAccountCode;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtPartyName;
    private javax.swing.JTextField txtToDate;
    private javax.swing.JTextField txtToYear;
    // End of variables declaration//GEN-END:variables

    private void FormatGrid() {
        try {

            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            TableColumnModel ColModel = Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            DataModel.addColumn("*");
            DataModel.addColumn("Sr."); //0 - Read Only
            DataModel.addColumn("DBMemo No"); //1
            DataModel.addColumn("DBMemo Date"); //2 //Read Only
            DataModel.addColumn("Receipt V/C No"); //3
            DataModel.addColumn("Inv No"); //3
            DataModel.addColumn("Inv Date"); //3
            DataModel.addColumn("Due Date"); //4
            DataModel.addColumn("Value Date"); //5
            DataModel.addColumn("Days"); //6
            DataModel.addColumn("Invoice Amt"); //7
            DataModel.addColumn("Interest Per"); //8
            DataModel.addColumn("Interest Amt"); //8
            DataModel.addColumn("DebitNote No");
            DataModel.addColumn("DebitNote Date");
            DataModel.addColumn("DebitNote Amt");
            DataModel.addColumn("Company Id");
            DataModel.addColumn("HSN SAC Code");

            DataModel.SetVariable(0, "SELECT"); //0 - Read Only
            DataModel.SetVariable(1, "SR_NO"); //0 - Read Only
            DataModel.SetVariable(2, "DEBITMEMO_NO"); //1
            DataModel.SetVariable(3, "DEBITMEMO_DATE"); //2 //Read Only
            DataModel.SetVariable(4, "RECEIPT_VOUCHER_NO"); //2 //Read Only
            DataModel.SetVariable(5, "INVOICE_NO"); //2 //Read Only
            DataModel.SetVariable(6, "INVOICE_DATE");
            DataModel.SetVariable(7, "INVOICE_DUE_DATE"); //2 //Read Only
            DataModel.SetVariable(8, "VALUE_DATE"); //2 //Read Only
            DataModel.SetVariable(9, "DAYS"); //2 //Read Only
            DataModel.SetVariable(10, "INVOICE_AMOUNT"); //2 //Read Only
            DataModel.SetVariable(11, "INTEREST_PER"); //2 //Read Only
            DataModel.SetVariable(12, "INTEREST_AMT"); //2 //Read Only
            DataModel.SetVariable(13, "DEBITNOTE_VOUCHER_NO"); //2 //Read Only
            DataModel.SetVariable(14, "DEBITNOTE_VOUCHER_DATE"); //2 //Read Only
            DataModel.SetVariable(15, "DEBIT_NOTE_AMOUNT"); //2 //Read Only            
            DataModel.SetVariable(16, "COMPANY_ID"); //2 //Read Only            
            DataModel.SetVariable(17, "HSN_SAC_CODE");

            DataModel.TableReadOnly(false);

            DataModel.SetReadOnly(1);
            DataModel.SetReadOnly(2);
            DataModel.SetReadOnly(3);
            DataModel.SetReadOnly(4);
            DataModel.SetReadOnly(5);
            DataModel.SetReadOnly(6);
            DataModel.SetReadOnly(7);
            DataModel.SetReadOnly(8);
            DataModel.SetReadOnly(9);
            DataModel.SetReadOnly(10);
            DataModel.SetReadOnly(11);
            DataModel.SetReadOnly(12);
            DataModel.SetReadOnly(13);
            DataModel.SetReadOnly(14);
            DataModel.SetReadOnly(15);
            DataModel.SetReadOnly(16);

            Render.setCustomComponent(0, "CheckBox");
            Table.getColumnModel().getColumn(0).setCellRenderer(Render);
            Table.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));

        } catch (Exception e) {

        }

    }

    private void GenerateGridDebitMemo() {
        try {

            if (txtMainAccountCode.getText().trim().equals("") || txtPartyCode.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(this, "Insert Main Code and Party Code");
                return;
            }

            HashMap List = new HashMap();
            FormatGrid();
            String FromDate = "";
            String ToDate = "";
            String MainCode = txtMainAccountCode.getText().trim();
            String SubCode = txtPartyCode.getText().trim();

            if (chkYearOption.isSelected()) {
                FromDate = EITLERPGLOBAL.getComboCode(cmbFromYear) + "-04-01";
                ToDate = txtToYear.getText().trim() + "-03-31";
            } else {
                FromDate = EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
                ToDate = EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());
            }

            //String strSQL="SELECT * FROM FINANCE.D_FIN_DEBITMEMO_RECEIPT_MAPPING WHERE APPROVED=1 AND CANCELLED=0 ORDER BY DEBITNOTE_VOUCHER_NO";
            String strSQL = "SELECT * FROM FINANCE.D_FIN_DEBITMEMO_RECEIPT_MAPPING WHERE APPROVED=1 AND CANCELLED=0 AND DEBITNOTE_VOUCHER_NO=''";
            if (!txtPartyCode.getText().trim().equals("")) {
                strSQL += " AND DB_PARTY_CODE= '" + SubCode + "' ";
            }
            strSQL += " ORDER BY DEBITMEMO_DATE,DEBITMEMO_NO";
            ResultSet rsDM = data.getResult(strSQL, FinanceGlobal.FinURL);
            rsDM.first();

            if (rsDM.getRow() > 0) {
                while (!rsDM.isAfterLast()) {

                    Object[] rowData = new Object[1];
                    DataModel.addRow(rowData);
                    int NewIndex = Table.getRowCount() - 1;
                    DataModel.setValueByVariable("SELECT", new Boolean(false), NewIndex);
                    DataModel.setValueByVariable("SR_NO", Integer.toString(NewIndex + 1), NewIndex);
                    DataModel.setValueByVariable("DEBITMEMO_NO", UtilFunctions.getString(rsDM, "DEBITMEMO_NO", ""), NewIndex);
                    DataModel.setValueByVariable("DEBITMEMO_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsDM, "DEBITMEMO_DATE", "")), NewIndex);
                    DataModel.setValueByVariable("RECEIPT_VOUCHER_NO", UtilFunctions.getString(rsDM, "RECEIPT_VOUCHER_NO", ""), NewIndex);
                    DataModel.setValueByVariable("INVOICE_NO", UtilFunctions.getString(rsDM, "INVOICE_NO", ""), NewIndex);
                    DataModel.setValueByVariable("INVOICE_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsDM, "INVOICE_DATE", "")), NewIndex);
                    DataModel.setValueByVariable("INVOICE_DUE_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsDM, "INVOICE_DUE_DATE", "")), NewIndex);
                    DataModel.setValueByVariable("VALUE_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsDM, "VALUE_DATE", "")), NewIndex);
                    DataModel.setValueByVariable("DAYS", Integer.toString(UtilFunctions.getInt(rsDM, "DAYS", 0)), NewIndex);
                    DataModel.setValueByVariable("INVOICE_AMOUNT", Double.toString(UtilFunctions.getDouble(rsDM, "INVOICE_AMOUNT", 0)), NewIndex);
                    DataModel.setValueByVariable("INTEREST_PER", Double.toString(UtilFunctions.getDouble(rsDM, "INTEREST_PER", 0)), NewIndex);
                    DataModel.setValueByVariable("INTEREST_AMT", Double.toString(UtilFunctions.getDouble(rsDM, "INTEREST_AMT", 0)), NewIndex);
                    DataModel.setValueByVariable("DEBITNOTE_VOUCHER_NO", UtilFunctions.getString(rsDM, "DEBITNOTE_VOUCHER_NO", ""), NewIndex);
                    DataModel.setValueByVariable("DEBITNOTE_VOUCHER_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsDM, "DEBITNOTE_VOUCHER_DATE", "")), NewIndex);
                    DataModel.setValueByVariable("DEBIT_NOTE_AMOUNT", Double.toString(UtilFunctions.getDouble(rsDM, "DEBIT_NOTE_AMOUNT", 0)), NewIndex);
                    DataModel.setValueByVariable("COMPANY_ID", Integer.toString(UtilFunctions.getInt(rsDM, "COMPANY_ID", 0)), NewIndex);
                    DataModel.setValueByVariable("HSN_SAC_CODE", UtilFunctions.getString(rsDM, "HSN_SAC_CODE", ""), NewIndex);
                    rsDM.next();
                }
            }
        } catch (Exception e) {

            e.printStackTrace();
        }

    }

    public boolean ShowDialog() {
        try {

            setSize(682, 352);
            txtPartyCode.setText(PartyCode);
            GenerateYearCombo();
            cmbFromYear.setEnabled(false);
            chkYearOption.setSelected(false);
            EITLERPGLOBAL.setComboIndex(cmbFromYear, EITLERPGLOBAL.FinYearFrom);

            Frame f = findParentFrame(this);

            aDialog = new JDialog(f, "Select DM", true);

            aDialog.getContentPane().add("Center", this);
            Dimension appletSize = this.getSize();
            aDialog.setSize(appletSize);
            aDialog.setResizable(false);

            //Place it to center of the screen
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            aDialog.setLocation((int) (screenSize.width - appletSize.getWidth()) / 2, (int) (screenSize.height - appletSize.getHeight()) / 2);

            aDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
            aDialog.show();
        } catch (Exception e) {
        }
        return !Cancelled;
    }

    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while (c != null) {
            if (c instanceof Frame) {
                return (Frame) c;
            }

            c = c.getParent();
        }
        return (Frame) null;
    }

    private void GenerateYearCombo() {
        HashMap List = new HashMap();

        cmbFromModel = new EITLComboModel();
        cmbFromYear.setModel(cmbFromModel);
        cmbFromYear.removeAllItems();

        List = clsFinYear.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID);

        for (int i = 1; i <= List.size(); i++) {
            clsFinYear ObjYear = (clsFinYear) List.get(Integer.toString(i));

            ComboData cmbData = new ComboData();
            cmbData.Text = Integer.toString((int) ObjYear.getAttribute("YEAR_FROM").getVal());
            cmbData.Code = (int) ObjYear.getAttribute("YEAR_FROM").getVal();
            cmbData.strCode = Integer.toString((int) ObjYear.getAttribute("YEAR_FROM").getVal());
            cmbFromModel.addElement(cmbData);
        }
    }

}
