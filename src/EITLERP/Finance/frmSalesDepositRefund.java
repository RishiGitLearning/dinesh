/*
 * frmDepositRefund.java
 *
 * Created on November 15, 2008, 1:04 PM
 */

package EITLERP.Finance;

/**
 *
 * @author  Mrugesh Thaker
 */
/*<APPLET CODE=frmInward.class HEIGHT=500 WIDTH=665></APPLET>*/

import javax.swing.*;
import java.awt.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import javax.swing.text.*;
import EITLERP.Utils.*;
import java.sql.*;
import java.net.*;
import EITLERP.*;

public class frmSalesDepositRefund extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsSalesDepositRefund objSalesDepositRefund;
    
    private boolean Updating=false;
    
    private String theDocNo="";
    private EITLTableModel DataModelOut;
    private EITLTableModel DataModelL;
    private EITLTableModel DataModelA;
    private EITLTableModel DataModelHS;
    private EITLTableCellRenderer Renderer=new EITLTableCellRenderer();
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    private int SelHierarchyID=0;
    private int lnFromID=0;
    
    private boolean IsGenerating=false;
    
    public frmPendingApprovals frmPA;
    
    /** Creates new form frmTemplate */
    public frmSalesDepositRefund() {
        
        setSize(920,550);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        FormatGrid();
        FormatGridOut();
        GenerateCombos();
        
        objSalesDepositRefund = new clsSalesDepositRefund();
        
        SetMenuForRights();
        
        if(getName().equals("Link")) {
        } else {
            if(objSalesDepositRefund.LoadData(EITLERPGLOBAL.gCompanyID)) {
                objSalesDepositRefund.MoveLast();
                DisplayData();
                SetMenuForRights();
            } else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+objSalesDepositRefund.LastError);
            }
        }
        ShowMessage("Ready...");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Header = new javax.swing.JTabbedPane();
        Panel1 = new javax.swing.JPanel();
        jTextArea2 = new javax.swing.JTextArea();
        txtDocDate = new javax.swing.JTextField();
        lblDocDate = new javax.swing.JLabel();
        lblDocNo = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        cmdNext1 = new javax.swing.JButton();
        lblPartyCode = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        lblRefundDate = new javax.swing.JLabel();
        txtRefundDate = new javax.swing.JTextField();
        lblPrincipleAmount = new javax.swing.JLabel();
        txtPrincipleAmount = new javax.swing.JTextField();
        lblApplicantName = new javax.swing.JLabel();
        txtPartyName = new javax.swing.JTextField();
        lblBankMainCode = new javax.swing.JLabel();
        txtBankMainCode = new javax.swing.JTextField();
        lblBankName = new javax.swing.JLabel();
        txtBankName = new javax.swing.JTextField();
        lblChequeNo = new javax.swing.JLabel();
        txtChequeNo = new javax.swing.JTextField();
        lblChequeDate = new javax.swing.JLabel();
        txtChequeDate = new javax.swing.JTextField();
        txtPreviousIntAmount = new javax.swing.JTextField();
        lblPreviousIntAmount = new javax.swing.JLabel();
        lblGrossIntAmount = new javax.swing.JLabel();
        txtGrossIntAmount = new javax.swing.JTextField();
        lblTotalPrincipleAmount = new javax.swing.JLabel();
        txtTotalPrincipleAmount = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableOutStanding = new javax.swing.JTable();
        chkFundTransfer = new javax.swing.JCheckBox();
        txtFundTransfer = new javax.swing.JTextField();
        txtFundName = new javax.swing.JTextField();
        cmdGenerateOutstanding = new javax.swing.JButton();
        lblCurrentTDSAmount = new javax.swing.JLabel();
        txtCurrentTDSAmount = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblNetIntAmount = new javax.swing.JLabel();
        txtNetIntAmount = new javax.swing.JTextField();
        lblFinalPayment = new javax.swing.JLabel();
        txtFinalAmount = new javax.swing.JTextField();
        chkDoNotIncludeInterest = new javax.swing.JCheckBox();
        chkDaywiseInterest = new javax.swing.JCheckBox();
        txtDaywiseInterest = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtValueDate = new javax.swing.JTextField();
        txtVoucherDate = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableL = new javax.swing.JTable();
        lblDocNo1 = new javax.swing.JLabel();
        cmdShowReceipt = new javax.swing.JButton();
        cmdNext2 = new javax.swing.JButton();
        cmdBack2 = new javax.swing.JButton();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack3 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 950, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText("SALES DEPOSIT REFUND - ");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 950, 25);

        Panel1.setLayout(null);

        Panel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Panel1.add(jTextArea2);
        jTextArea2.setBounds(177, 29, 0, 15);

        txtDocDate.setEditable(false);
        txtDocDate.setName("PARTY_CODE");
        txtDocDate.setEnabled(false);
        Panel1.add(txtDocDate);
        txtDocDate.setBounds(575, 10, 120, 19);

        lblDocDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDocDate.setText("Doc Date :");
        lblDocDate.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Panel1.add(lblDocDate);
        lblDocDate.setBounds(420, 10, 150, 20);

        lblDocNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDocNo.setText("Doc No. :");
        Panel1.add(lblDocNo);
        lblDocNo.setBounds(5, 10, 120, 20);

        txtDocNo.setEditable(false);
        txtDocNo.setName("PARTY_ID");
        txtDocNo.setNextFocusableComponent(txtDocDate);
        txtDocNo.setEnabled(false);
        Panel1.add(txtDocNo);
        txtDocNo.setBounds(130, 10, 125, 19);

        cmdNext1.setText("Next>>");
        cmdNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext1ActionPerformed(evt);
            }
        });

        Panel1.add(cmdNext1);
        cmdNext1.setBounds(640, 350, 102, 25);

        lblPartyCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPartyCode.setText("Party Code :");
        Panel1.add(lblPartyCode);
        lblPartyCode.setBounds(5, 35, 120, 20);

        txtPartyCode.setName("PARTY_CODE");
        txtPartyCode.setEnabled(false);
        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });

        Panel1.add(txtPartyCode);
        txtPartyCode.setBounds(130, 35, 125, 19);

        lblRefundDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRefundDate.setText("Refund Date :");
        Panel1.add(lblRefundDate);
        lblRefundDate.setBounds(5, 110, 120, 20);

        txtRefundDate.setName("PARTY_CODE");
        txtRefundDate.setEnabled(false);
        Panel1.add(txtRefundDate);
        txtRefundDate.setBounds(130, 110, 125, 19);

        lblPrincipleAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPrincipleAmount.setText("Principle Amount :");
        Panel1.add(lblPrincipleAmount);
        lblPrincipleAmount.setBounds(5, 60, 120, 20);

        txtPrincipleAmount.setName("PARTY_CODE");
        txtPrincipleAmount.setEnabled(false);
        Panel1.add(txtPrincipleAmount);
        txtPrincipleAmount.setBounds(130, 60, 125, 19);

        lblApplicantName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblApplicantName.setText("Party Name :");
        lblApplicantName.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Panel1.add(lblApplicantName);
        lblApplicantName.setBounds(420, 35, 150, 20);

        txtPartyName.setName("PARTY_CODE");
        txtPartyName.setEnabled(false);
        Panel1.add(txtPartyName);
        txtPartyName.setBounds(575, 35, 300, 19);

        lblBankMainCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBankMainCode.setText("Bank Main Code :");
        Panel1.add(lblBankMainCode);
        lblBankMainCode.setBounds(5, 85, 120, 20);

        txtBankMainCode.setName("PARTY_CODE");
        txtBankMainCode.setNextFocusableComponent(txtRefundDate);
        txtBankMainCode.setEnabled(false);
        txtBankMainCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBankMainCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBankMainCodeFocusLost(evt);
            }
        });
        txtBankMainCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBankMainCodeKeyPressed(evt);
            }
        });

        Panel1.add(txtBankMainCode);
        txtBankMainCode.setBounds(130, 85, 125, 19);

        lblBankName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBankName.setText("Bank Name :");
        lblBankName.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Panel1.add(lblBankName);
        lblBankName.setBounds(420, 85, 150, 20);

        txtBankName.setEditable(false);
        txtBankName.setName("PARTY_CODE");
        txtBankName.setEnabled(false);
        Panel1.add(txtBankName);
        txtBankName.setBounds(575, 85, 300, 19);

        lblChequeNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblChequeNo.setText("Cheque No. :");
        Panel1.add(lblChequeNo);
        lblChequeNo.setBounds(5, 135, 120, 20);

        txtChequeNo.setName("PARTY_CODE");
        txtChequeNo.setNextFocusableComponent(txtChequeDate);
        txtChequeNo.setEnabled(false);
        Panel1.add(txtChequeNo);
        txtChequeNo.setBounds(130, 135, 125, 19);

        lblChequeDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblChequeDate.setText("Cheque Date :");
        lblChequeDate.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Panel1.add(lblChequeDate);
        lblChequeDate.setBounds(420, 135, 150, 20);

        txtChequeDate.setName("PARTY_CODE");
        txtChequeDate.setNextFocusableComponent(cmdNext1);
        txtChequeDate.setEnabled(false);
        Panel1.add(txtChequeDate);
        txtChequeDate.setBounds(575, 135, 120, 19);

        txtPreviousIntAmount.setName("PARTY_CODE");
        txtPreviousIntAmount.setEnabled(false);
        Panel1.add(txtPreviousIntAmount);
        txtPreviousIntAmount.setBounds(130, 160, 125, 19);

        lblPreviousIntAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPreviousIntAmount.setText("Acc. Int. Amount :");
        Panel1.add(lblPreviousIntAmount);
        lblPreviousIntAmount.setBounds(4, 160, 120, 20);

        lblGrossIntAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblGrossIntAmount.setText("Gross Int. Amt :");
        lblGrossIntAmount.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Panel1.add(lblGrossIntAmount);
        lblGrossIntAmount.setBounds(5, 185, 120, 20);

        txtGrossIntAmount.setName("PARTY_CODE");
        txtGrossIntAmount.setEnabled(false);
        Panel1.add(txtGrossIntAmount);
        txtGrossIntAmount.setBounds(130, 185, 125, 19);

        lblTotalPrincipleAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTotalPrincipleAmount.setText("Total Principle Amount :");
        lblTotalPrincipleAmount.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Panel1.add(lblTotalPrincipleAmount);
        lblTotalPrincipleAmount.setBounds(420, 60, 150, 20);

        txtTotalPrincipleAmount.setName("PARTY_CODE");
        txtTotalPrincipleAmount.setEnabled(false);
        Panel1.add(txtTotalPrincipleAmount);
        txtTotalPrincipleAmount.setBounds(575, 60, 120, 19);

        TableOutStanding.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableOutStanding.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(TableOutStanding);

        Panel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 240, 350, 110);

        chkFundTransfer.setText(" Fund Transfer :");
        chkFundTransfer.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        chkFundTransfer.setEnabled(false);
        chkFundTransfer.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkFundTransferItemStateChanged(evt);
            }
        });

        Panel1.add(chkFundTransfer);
        chkFundTransfer.setBounds(450, 110, 123, 20);

        txtFundTransfer.setEditable(false);
        txtFundTransfer.setName("PARTY_CODE");
        txtFundTransfer.setNextFocusableComponent(txtRefundDate);
        txtFundTransfer.setEnabled(false);
        txtFundTransfer.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFundTransferFocusLost(evt);
            }
        });
        txtFundTransfer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFundTransferKeyPressed(evt);
            }
        });

        Panel1.add(txtFundTransfer);
        txtFundTransfer.setBounds(575, 110, 120, 19);

        txtFundName.setEditable(false);
        txtFundName.setName("PARTY_CODE");
        txtFundName.setNextFocusableComponent(txtRefundDate);
        txtFundName.setEnabled(false);
        Panel1.add(txtFundName);
        txtFundName.setBounds(700, 110, 175, 19);

        cmdGenerateOutstanding.setText("Generate Ledger Bal.");
        cmdGenerateOutstanding.setEnabled(false);
        cmdGenerateOutstanding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGenerateOutstandingActionPerformed(evt);
            }
        });

        Panel1.add(cmdGenerateOutstanding);
        cmdGenerateOutstanding.setBounds(10, 360, 161, 25);

        lblCurrentTDSAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCurrentTDSAmount.setText("TDS Amount :");
        Panel1.add(lblCurrentTDSAmount);
        lblCurrentTDSAmount.setBounds(5, 210, 120, 20);

        txtCurrentTDSAmount.setName("PARTY_CODE");
        txtCurrentTDSAmount.setEnabled(false);
        Panel1.add(txtCurrentTDSAmount);
        txtCurrentTDSAmount.setBounds(130, 210, 125, 19);

        jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        jLabel1.setText("(Till refund date in Ledger)");
        Panel1.add(jLabel1);
        jLabel1.setBounds(260, 160, 170, 20);

        jLabel2.setForeground(new java.awt.Color(255, 0, 51));
        jLabel2.setText("(For current year from April to refund date)");
        Panel1.add(jLabel2);
        jLabel2.setBounds(260, 185, 270, 20);

        jLabel3.setForeground(new java.awt.Color(255, 0, 51));
        jLabel3.setText("(For current year from April to refund date)");
        Panel1.add(jLabel3);
        jLabel3.setBounds(260, 210, 310, 20);

        lblNetIntAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblNetIntAmount.setText("Net Int. Amount :");
        Panel1.add(lblNetIntAmount);
        lblNetIntAmount.setBounds(370, 240, 120, 15);

        txtNetIntAmount.setName("PARTY_CODE");
        txtNetIntAmount.setEnabled(false);
        Panel1.add(txtNetIntAmount);
        txtNetIntAmount.setBounds(500, 240, 125, 19);

        lblFinalPayment.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFinalPayment.setText("Final Payment :");
        Panel1.add(lblFinalPayment);
        lblFinalPayment.setBounds(370, 265, 120, 15);

        txtFinalAmount.setBackground(new java.awt.Color(255, 255, 204));
        txtFinalAmount.setFont(new java.awt.Font("Dialog", 1, 12));
        txtFinalAmount.setName("PARTY_CODE");
        txtFinalAmount.setEnabled(false);
        Panel1.add(txtFinalAmount);
        txtFinalAmount.setBounds(500, 265, 125, 19);

        chkDoNotIncludeInterest.setText(" Do not include accmulated interest");
        chkDoNotIncludeInterest.setEnabled(false);
        chkDoNotIncludeInterest.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkDoNotIncludeInterestItemStateChanged(evt);
            }
        });

        Panel1.add(chkDoNotIncludeInterest);
        chkDoNotIncludeInterest.setBounds(575, 160, 250, 20);

        chkDaywiseInterest.setText("<html>Daywise Interest<br>Calculation</html>");
        chkDaywiseInterest.setEnabled(false);
        Panel1.add(chkDaywiseInterest);
        chkDaywiseInterest.setBounds(260, 105, 130, 30);

        txtDaywiseInterest.setFont(new java.awt.Font("Dialog", 1, 12));
        txtDaywiseInterest.setName("PARTY_CODE");
        txtDaywiseInterest.setEnabled(false);
        Panel1.add(txtDaywiseInterest);
        txtDaywiseInterest.setBounds(535, 185, 340, 19);

        jLabel4.setText("Value Date:");
        Panel1.add(jLabel4);
        jLabel4.setBounds(420, 290, 70, 20);

        jLabel5.setText("Voucher Date:");
        Panel1.add(jLabel5);
        jLabel5.setBounds(405, 320, 90, 20);

        txtValueDate.setEnabled(false);
        Panel1.add(txtValueDate);
        txtValueDate.setBounds(500, 290, 120, 19);

        txtVoucherDate.setEnabled(false);
        Panel1.add(txtVoucherDate);
        txtVoucherDate.setBounds(500, 320, 120, 19);

        Header.addTab("Header", Panel1);

        jPanel1.setLayout(null);

        TableL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableL.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane4.setViewportView(TableL);

        jPanel1.add(jScrollPane4);
        jScrollPane4.setBounds(10, 44, 730, 280);

        lblDocNo1.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblDocNo1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblDocNo1.setText("Receipt Detail");
        jPanel1.add(lblDocNo1);
        lblDocNo1.setBounds(10, 14, 90, 20);

        cmdShowReceipt.setFont(new java.awt.Font("Tahoma", 1, 11));
        cmdShowReceipt.setText("Insert Receipt");
        cmdShowReceipt.setEnabled(false);
        cmdShowReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowReceiptActionPerformed(evt);
            }
        });

        jPanel1.add(cmdShowReceipt);
        cmdShowReceipt.setBounds(230, 11, 120, 24);

        cmdNext2.setText("Next>>");
        cmdNext2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext2ActionPerformed(evt);
            }
        });

        jPanel1.add(cmdNext2);
        cmdNext2.setBounds(640, 350, 102, 25);

        cmdBack2.setText("<< Back");
        cmdBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack2ActionPerformed(evt);
            }
        });

        jPanel1.add(cmdBack2);
        cmdBack2.setBounds(530, 350, 102, 25);

        Header.addTab("Detail", jPanel1);

        Tab2.setLayout(null);

        Tab2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Hierarchy :");
        Tab2.add(jLabel31);
        jLabel31.setBounds(17, 17, 65, 15);

        cmbHierarchy.setNextFocusableComponent(txtFrom);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });

        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 14, 184, 24);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("From :");
        Tab2.add(jLabel32);
        jLabel32.setBounds(43, 52, 40, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setNextFocusableComponent(txtFromRemarks);
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 50, 182, 19);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel35.setText("Remarks :");
        Tab2.add(jLabel35);
        jLabel35.setBounds(19, 80, 65, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setNextFocusableComponent(cmdFromRemarksBig);
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 78, 468, 19);

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Your Action :");
        Tab2.add(jLabel36);
        jLabel36.setBounds(5, 120, 80, 15);

        jPanel7.setLayout(null);

        jPanel7.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel7.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel7.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel7.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.setEnabled(false);
        jPanel7.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel7);
        jPanel7.setBounds(88, 120, 182, 100);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Send To :");
        Tab2.add(jLabel33);
        jLabel33.setBounds(25, 232, 60, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });

        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(88, 228, 184, 24);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Remarks :");
        Tab2.add(jLabel34);
        jLabel34.setBounds(20, 264, 65, 15);

        txtToRemarks.setNextFocusableComponent(cmdBack3);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });

        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(88, 260, 516, 19);

        cmdBack3.setText("<< Back");
        cmdBack3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack3ActionPerformed(evt);
            }
        });

        Tab2.add(cmdBack3);
        cmdBack3.setBounds(620, 350, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.setNextFocusableComponent(OpgApprove);
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(559, 77, 33, 21);

        Header.addTab("Approval", Tab2);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel26.setText("Document Approval Status");
        jPanel6.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 14);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel6.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 614, 144);

        lblDocumentHistory.setFont(new java.awt.Font("Tahoma", 1, 11));
        lblDocumentHistory.setText("Document Update History");
        jPanel6.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 191, 182, 14);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel6.add(jScrollPane3);
        jScrollPane3.setBounds(13, 207, 473, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        jPanel6.add(cmdViewHistory);
        cmdViewHistory.setBounds(498, 242, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        jPanel6.add(cmdNormalView);
        cmdNormalView.setBounds(498, 273, 132, 24);

        cmdPreviewA.setText("Preview Report");
        jPanel6.add(cmdPreviewA);
        cmdPreviewA.setBounds(498, 209, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        jPanel6.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(498, 305, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel6.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(500, 340, 129, 19);

        Header.addTab("Status", jPanel6);

        getContentPane().add(Header);
        Header.setBounds(2, 66, 890, 420);
        Header.getAccessibleContext().setAccessibleName("Header");
        Header.getAccessibleContext().setAccessibleDescription("Header");

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 490, 890, 23);

    }//GEN-END:initComponents
        
    private void chkDoNotIncludeInterestItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkDoNotIncludeInterestItemStateChanged
        // TODO add your handling code here:
        if(EditMode!=0) {
            if(chkDoNotIncludeInterest.isSelected()) {
                txtFinalAmount.setText(Double.toString(EITLERPGLOBAL.round(Double.parseDouble(txtPrincipleAmount.getText().trim()) + Double.parseDouble(txtGrossIntAmount.getText().trim()) - Double.parseDouble(txtCurrentTDSAmount.getText().trim()),0)));
            } else {
                txtFinalAmount.setText(Double.toString(EITLERPGLOBAL.round(Double.parseDouble(txtPrincipleAmount.getText().trim()) + Double.parseDouble(txtPreviousIntAmount.getText().trim()) + Double.parseDouble(txtGrossIntAmount.getText().trim()) - Double.parseDouble(txtCurrentTDSAmount.getText().trim()),0)));
            }
        }
    }//GEN-LAST:event_chkDoNotIncludeInterestItemStateChanged
    
    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
        // TODO add your handling code here:
        if(txtPartyCode.getText().trim().equals("")) {
            txtPartyName.setText("");
        } else {
            txtPartyName.setText(data.getStringValueFromDB("SELECT PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE IN ('210027','210072') AND PARTY_CODE='"+txtPartyCode.getText().trim()+"' AND APPROVED=1 AND CANCELLED=0",FinanceGlobal.FinURL));
        }
    }//GEN-LAST:event_txtPartyCodeFocusLost
    
    private void txtFundTransferFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFundTransferFocusLost
        // TODO add your handling code here:
        if(!txtFundTransfer.getText().trim().equals("")) {
            if(data.IsRecordExist("SELECT BOOK_NAME FROM D_FIN_BOOK_MASTER WHERE MAIN_ACCOUNT_CODE='"+txtFundTransfer.getText().trim()+"' ",FinanceGlobal.FinURL)) {
                txtFundName.setText(data.getStringValueFromDB("SELECT BOOK_NAME FROM D_FIN_BOOK_MASTER WHERE MAIN_ACCOUNT_CODE='"+txtFundTransfer.getText().trim()+"' ",FinanceGlobal.FinURL));
            } else {
                txtFundName.setText("");
            }
        } else {
            txtFundName.setText("");
        }
    }//GEN-LAST:event_txtFundTransferFocusLost
    
    private void cmdNext2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext2ActionPerformed
        // TODO add your handling code here:
        Header.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNext2ActionPerformed
    
    private void cmdBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack2ActionPerformed
        // TODO add your handling code here:
        Header.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack2ActionPerformed
    
    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        // TODO add your handling code here:
        if(EditMode==EITLERPGLOBAL.ADD || EditMode==EITLERPGLOBAL.EDIT) {
            if(evt.getKeyCode()==112) {//F1 Key pressed
                LOV aList=new LOV();
                
                aList.SQL="SELECT PARTY_CODE,PARTY_NAME "+
                " FROM D_FIN_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND MAIN_ACCOUNT_CODE IN ('210010','210027','210034','210072') "+
                " ORDER BY PARTY_CODE ";
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=FinanceGlobal.FinURL;
                
                if(aList.ShowLOV()) {
                    txtPartyCode.setText(aList.ReturnVal);
                    txtPartyName.setText(data.getStringValueFromDB("SELECT PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE PARTY_CODE='"+txtPartyCode.getText().trim()+"' ",FinanceGlobal.FinURL));
                }
            }
        }
    }//GEN-LAST:event_txtPartyCodeKeyPressed
    
    private void txtFundTransferKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFundTransferKeyPressed
        // TODO add your handling code here:
        if(EditMode==EITLERPGLOBAL.ADD || EditMode==EITLERPGLOBAL.EDIT) {
            if(evt.getKeyCode() == 112) {
                LOV aList=new LOV();
                
                aList.SQL="SELECT BOOK_CODE, MAIN_ACCOUNT_CODE, BOOK_NAME AS BANK_NAME FROM D_FIN_BOOK_MASTER WHERE MAIN_ACCOUNT_CODE<>'' ORDER BY MAIN_ACCOUNT_CODE";
                aList.ReturnCol=1;
                aList.SecondCol=2;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=FinanceGlobal.FinURL;
                
                if(aList.ShowLOV()) {
                    String MainAccountCode = data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM D_FIN_BOOK_MASTER WHERE BOOK_CODE='"+ aList.ReturnVal + "' ",FinanceGlobal.FinURL);
                    txtFundTransfer.setText(MainAccountCode);
                    txtFundName.setText(data.getStringValueFromDB("SELECT BOOK_NAME FROM D_FIN_BOOK_MASTER WHERE BOOK_CODE='"+aList.ReturnVal+"'", FinanceGlobal.FinURL));
                    txtRefundDate.requestFocus();
                }
            }
        }
    }//GEN-LAST:event_txtFundTransferKeyPressed
    
    private void cmdGenerateOutstandingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGenerateOutstandingActionPerformed
        // TODO add your handling code here:
        if(txtPartyCode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert party code.");
            return;
        }
        
        if(!data.IsRecordExist("SELECT * FROM D_FIN_PARTY_MASTER WHERE PARTY_CODE='"+txtPartyCode.getText().trim()+"' ",FinanceGlobal.FinURL)) {
            JOptionPane.showMessageDialog(null,"Please insert appropriate party code.");
            return;
        }
        /*
        if(txtRefundDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert refund date.");
            return;
        } else if(!(EITLERPGLOBAL.isDate(txtRefundDate.getText().trim()))) {
            JOptionPane.showMessageDialog(null,"Please Enter The Refund Date in DD/MM/YYYY Format.");
            return;
        }
        */
        FormatGridOut();
        String PartyCode = txtPartyCode.getText().trim();
        String RefundDate = txtRefundDate.getText().trim();
        
        Object[] rowData=new Object[4];
        rowData[0]=Integer.toString(1);
        rowData[1]="210027";
        double Amount = 0;
        
        //Amount = objSalesDepositRefund.getOutStanding("210027",PartyCode,EITLERPGLOBAL.formatDateDB(RefundDate));
        //Amount = clsAccount.getClosingBalance("210027",PartyCode,EITLERPGLOBAL.formatDateDB(RefundDate),true);
        Amount = clsAccount.getClosingBalance("210027",PartyCode,EITLERPGLOBAL.formatDateDB(txtDocDate.getText()),true);
        
        if(Amount < 0) {
            Amount = Math.abs(Amount);
            rowData[2]=Double.toString(Amount);
            rowData[3]="Cr";
        } else {
            rowData[2]=Double.toString(Amount);
            rowData[3]="Dr";
        }
        DataModelOut.addRow(rowData);
        
        rowData=new Object[4];
        rowData[0]=Integer.toString(2);
        rowData[1]="133155";
        Amount = 0;
        
        //Amount = objSalesDepositRefund.getOutStanding("133155",PartyCode,EITLERPGLOBAL.formatDateDB(RefundDate));
        //Amount = clsAccount.getClosingBalance("133155",PartyCode,EITLERPGLOBAL.formatDateDB(RefundDate),true);
        Amount = clsAccount.getClosingBalance("133155",PartyCode,EITLERPGLOBAL.formatDateDB(txtDocDate.getText()),true);
        if(Amount < 0) {
            Amount = Math.abs(Amount);
            rowData[2]=Double.toString(Amount);
            rowData[3]="Cr";
        } else {
            rowData[2]=Double.toString(Amount);
            rowData[3]="Dr";
        }
        DataModelOut.addRow(rowData);
        
        rowData=new Object[4];
        rowData[0]=Integer.toString(3);
        rowData[1]="133162";
        Amount = 0;
        
        //Amount = objSalesDepositRefund.getOutStanding("133162",PartyCode,EITLERPGLOBAL.formatDateDB(RefundDate));
        //Amount = clsAccount.getClosingBalance("133162",PartyCode,EITLERPGLOBAL.formatDateDB(RefundDate),true);
        Amount = clsAccount.getClosingBalance("133162",PartyCode,EITLERPGLOBAL.formatDateDB(txtDocDate.getText()),true);
        if(Amount < 0) {
            Amount = Math.abs(Amount);
            rowData[2]=Double.toString(Amount);
            rowData[3]="Cr";
        } else {
            rowData[2]=Double.toString(Amount);
            rowData[3]="Dr";
        }
        DataModelOut.addRow(rowData);
        
        rowData=new Object[4];
        rowData[0]=Integer.toString(4);
        rowData[1]="133203";
        Amount = 0;
        
        //Amount = objSalesDepositRefund.getOutStanding("133203",PartyCode,EITLERPGLOBAL.formatDateDB(RefundDate));
        //Amount = clsAccount.getClosingBalance("133203",PartyCode,EITLERPGLOBAL.formatDateDB(RefundDate),true);
        Amount = clsAccount.getClosingBalance("133203",PartyCode,EITLERPGLOBAL.formatDateDB(txtDocDate.getText()),true);
        if(Amount < 0) {
            Amount = Math.abs(Amount);
            rowData[2]=Double.toString(Amount);
            rowData[3]="Cr";
        } else {
            rowData[2]=Double.toString(Amount);
            rowData[3]="Dr";
        }
        DataModelOut.addRow(rowData);
    }//GEN-LAST:event_cmdGenerateOutstandingActionPerformed
    
    private void cmdShowReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowReceiptActionPerformed
        // TODO add your handling code here:
        if(txtPartyCode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert party code.");
            return;
        }
        
        if(!data.IsRecordExist("SELECT * FROM D_FIN_PARTY_MASTER WHERE PARTY_CODE='"+txtPartyCode.getText().trim()+"' ",FinanceGlobal.FinURL)) {
            JOptionPane.showMessageDialog(null,"Please insert appropriate party code.");
            return;
        }
        
        if(txtRefundDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert refund date.");
            return;
        } else if(!(EITLERPGLOBAL.isDate(txtRefundDate.getText().trim()))) {
            JOptionPane.showMessageDialog(null,"Please Enter The Refund Date in DD/MM/YYYY Format.");
            return;
        }
        
        SelectReceipt.PCode = txtPartyCode.getText().trim();
        SelectReceipt ObjReceipt=new SelectReceipt();
        String PartyCode = txtPartyCode.getText().trim();
        double PrincipleAmount = 0;
        double TotalPrincipleAmount = 0;
        FormatGrid();
        if(ObjReceipt.ShowList()) {
            for(int i=1;i<=ObjReceipt.colSelItems.size();i++) {
                clsSalesDepositRefundItem ObjItem = (clsSalesDepositRefundItem)ObjReceipt.colSelItems.get(Integer.toString(i));
                Object[] rowData=new Object[8];
                
                rowData[0]=Integer.toString(ObjItem.getAttribute("SR_NO").getInt());
                rowData[1]=ObjItem.getAttribute("RECEIPT_NO").getString();
                rowData[2]=ObjItem.getAttribute("RECEIPT_DATE").getString();
                rowData[3]=ObjItem.getAttribute("EFFECTIVE_DATE").getString();
                rowData[4]=ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString();
                rowData[5]=ObjItem.getAttribute("INTEREST_MAIN_CODE").getString();
                rowData[6]=Double.toString(ObjItem.getAttribute("INTEREST_RATE").getDouble());
                rowData[7]=Double.toString(ObjItem.getAttribute("AMOUNT").getDouble());
                PrincipleAmount += ObjItem.getAttribute("AMOUNT").getDouble();
                DataModelL.addRow(rowData);
            }
            DataModelL.TableReadOnly(true);
            UpdateSrNo();
            
            txtPrincipleAmount.setText(Double.toString(PrincipleAmount));
            TotalPrincipleAmount = data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FD_SALES_DEPOSIT_MASTER WHERE PARTY_CODE='"+PartyCode+"' AND DEPOSIT_STATUS=0 AND APPROVED=1 AND CANCELLED=0",FinanceGlobal.FinURL);
            txtTotalPrincipleAmount.setText(Double.toString(TotalPrincipleAmount));
            
            double previousInterest = 0;
            String MainAccountCode = data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM D_FD_SALES_DEPOSIT_MASTER WHERE PARTY_CODE='"+txtPartyCode.getText().trim()+"' ",FinanceGlobal.FinURL);
            //previousInterest = objSalesDepositRefund.getPreviousInterest(PartyCode,MainAccountCode,EITLERPGLOBAL.formatDateDB(txtRefundDate.getText().trim()));
            previousInterest = objSalesDepositRefund.getPreviousInterest(PartyCode,MainAccountCode,EITLERPGLOBAL.formatDateDB(txtDocDate.getText().trim()));
            if(previousInterest < 0) {
                previousInterest *= -1;
            }
            txtPreviousIntAmount.setText(Double.toString(previousInterest));
            
            double currentInterest = 0;
            
            /* //commented by vivek on 28/02/2014 for day wise interest calculation. start 
            if(TableL.getRowCount() > 0 ) {
                for(int i=0; i < TableL.getRowCount(); i++) {
                    String ReceiptNo = TableL.getValueAt(i, 1).toString();
                    currentInterest += objSalesDepositRefund.getCurrentInterest(ReceiptNo, PartyCode, EITLERPGLOBAL.formatDateDB(txtRefundDate.getText().trim()));
                }
            } // comment by vivek on 28/02/2014 for day wise interest calculation. end
             */
            
            /*
            //new code by vivek on 28/02/2014 for day wise interest calculation. start 
            if(chkDaywiseInterest.isSelected()){
                if(TableL.getRowCount() > 0 ) {
                    for(int i=0; i < TableL.getRowCount(); i++) {
                        String ReceiptNo = TableL.getValueAt(i, 1).toString();
                        currentInterest += objSalesDepositRefund.getDaywiseCurrentInterest(ReceiptNo, PartyCode, EITLERPGLOBAL.formatDateDB(txtRefundDate.getText().trim()));
                    }
                    txtDaywiseInterest.setText("Based on DAYWISE calculation method.");
                }
            }else if(TableL.getRowCount() > 0 ) {
                for(int i=0; i < TableL.getRowCount(); i++) {
                    String ReceiptNo = TableL.getValueAt(i, 1).toString();
                    currentInterest += objSalesDepositRefund.getCurrentInterest(ReceiptNo, PartyCode, EITLERPGLOBAL.formatDateDB(txtRefundDate.getText().trim()));
                }
                txtDaywiseInterest.setText("Based on 15 DAY calculation method.");
            }
            // new code by vivek on 28/02/2014 for day wise interest calculation. end
            */
            
            txtGrossIntAmount.setText(Double.toString(currentInterest));
            
            
            double currentTDSAmount = 0;
            /*
            String pCondition = " WHERE PARTY_CODE='"+PartyCode+"' AND RECEIPT_NO NOT IN('";
            if(TableL.getRowCount() > 0 ) {
                for(int i=0; i < TableL.getRowCount(); i++) {
                    String ReceiptNo = TableL.getValueAt(i, 1).toString();
                    pCondition += ReceiptNo+"','";
                }
            }
            pCondition = pCondition.substring(0,pCondition.length()-2);
            pCondition += ") AND APPROVED=1 AND CANCELLED=0 ";
            //System.out.println(pCondition);
            double otherInterest = objSalesDepositRefund.getTDSAmount(pCondition);
            double totalInterest = otherInterest + currentInterest;
            if(totalInterest > 5000) {
                currentTDSAmount = objSalesDepositRefund.calculateTDSAmount(currentInterest,PartyCode);
            }
                    */
            txtGrossIntAmount.setText(Double.toString(currentInterest));
            txtCurrentTDSAmount.setText(Double.toString(currentTDSAmount));
            txtNetIntAmount.setText(Double.toString(EITLERPGLOBAL.round(currentInterest - currentTDSAmount,0)));
            if(chkDoNotIncludeInterest.isSelected()) {
                txtFinalAmount.setText(Double.toString(EITLERPGLOBAL.round(Double.parseDouble(txtPrincipleAmount.getText().trim()) + currentInterest - currentTDSAmount,0)));
            } else {
                txtFinalAmount.setText(Double.toString(EITLERPGLOBAL.round(Double.parseDouble(txtPrincipleAmount.getText().trim()) + previousInterest + currentInterest - currentTDSAmount,0)));
            }
            
        }
    }//GEN-LAST:event_cmdShowReceiptActionPerformed
    
    private void chkFundTransferItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkFundTransferItemStateChanged
        // TODO add your handling code here:
        if(EditMode==EITLERPGLOBAL.ADD || EditMode==EITLERPGLOBAL.EDIT) {
            if(chkFundTransfer.isSelected()) {
                txtFundTransfer.setEnabled(true);
                txtFundTransfer.setEditable(true);
                txtBankMainCode.setText("");
                txtBankName.setText("");
                txtBankMainCode.setEditable(false);
                txtBankMainCode.setEnabled(false);
                txtBankName.setEnabled(false);
                txtFundTransfer.requestFocus();
                txtChequeNo.setText("");
                txtChequeDate.setText("");
                txtChequeNo.setEnabled(false);
                txtChequeDate.setEnabled(false);
                txtValueDate.setEnabled(true);
                txtVoucherDate.setEnabled(true);
            } else {
                txtFundTransfer.setText("");
                txtFundName.setText("");
                txtFundTransfer.setEnabled(false);
                txtFundTransfer.setEditable(false);
                txtBankMainCode.setEditable(true);
                txtBankMainCode.setEnabled(true);
                txtBankName.setEnabled(true);
                txtBankMainCode.requestFocus();
                txtChequeNo.setText("");
                txtChequeDate.setText("");
                txtChequeNo.setEnabled(true);
                txtChequeDate.setEnabled(true);
                txtValueDate.setEnabled(false);
                txtVoucherDate.setEnabled(false);
            }
        }
    }//GEN-LAST:event_chkFundTransferItemStateChanged
    
    private void txtBankMainCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBankMainCodeFocusLost
        // TODO add your handling code here:
        if(!txtBankMainCode.getText().trim().equals("")) {
            if(data.IsRecordExist("SELECT BOOK_NAME FROM D_FIN_BOOK_MASTER WHERE MAIN_ACCOUNT_CODE='"+txtBankMainCode.getText().trim()+"' ",FinanceGlobal.FinURL)) {
                txtBankName.setText(data.getStringValueFromDB("SELECT BOOK_NAME FROM D_FIN_BOOK_MASTER WHERE MAIN_ACCOUNT_CODE='"+txtBankMainCode.getText().trim()+"' ",FinanceGlobal.FinURL));
            } else {
                txtBankName.setText("");
            }
        } else {
            txtBankName.setText("");
        }
    }//GEN-LAST:event_txtBankMainCodeFocusLost
    
    private void txtBankMainCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBankMainCodeKeyPressed
        // TODO add your handling code here:
        if(EditMode==EITLERPGLOBAL.ADD || EditMode==EITLERPGLOBAL.EDIT) {
            if(evt.getKeyCode() == 112) {
                LOV aList=new LOV();
                
                aList.SQL="SELECT BOOK_CODE, MAIN_ACCOUNT_CODE, BOOK_NAME AS BANK_NAME FROM D_FIN_BOOK_MASTER WHERE MAIN_ACCOUNT_CODE<>'' ORDER BY MAIN_ACCOUNT_CODE";
                aList.ReturnCol=1;
                aList.SecondCol=2;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=FinanceGlobal.FinURL;
                
                if(aList.ShowLOV()) {
                    String MainAccountCode = data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM D_FIN_BOOK_MASTER WHERE BOOK_CODE='"+ aList.ReturnVal + "' ",FinanceGlobal.FinURL);
                    txtBankMainCode.setText(MainAccountCode);
                    txtBankName.setText(data.getStringValueFromDB("SELECT BOOK_NAME FROM D_FIN_BOOK_MASTER WHERE BOOK_CODE='"+aList.ReturnVal+"'", FinanceGlobal.FinURL));
                    txtRefundDate.requestFocus();
                }
            }
        }
    }//GEN-LAST:event_txtBankMainCodeKeyPressed
    
    private void txtBankMainCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBankMainCodeFocusGained
        // TODO add your handling code here:
        ShowMessage("Press F1...");
    }//GEN-LAST:event_txtBankMainCodeFocusGained
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter extra Remarks for further Approval person hints ............");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Users list from selection for further approval hierarchy ............");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Hierarchy from given list for Approval ............");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void cmdBack3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack3ActionPerformed
        // TODO add your handling code here:
        Header.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBack3ActionPerformed
    
    private void cmdNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext1ActionPerformed
        // TODO add your handling code here:
        //clsSalesDepositRefund obj= new clsSalesDepositRefund();
        //obj.PostPaymentVoucher(2, txtDocNo.getText());
        Header.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext1ActionPerformed
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        objSalesDepositRefund.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveFirst();
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        objSalesDepositRefund.ShowHistory(EITLERPGLOBAL.gCompanyID, objSalesDepositRefund.getAttribute("DOC_NO").toString());
        MoveFirst();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if(ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID,clsSalesDepositRefund.ModuleID , txtDocNo.getText(),FinanceGlobal.FinURL)) {
                //objSalesDepositRefund.getAttribute("DOC_NO").toString()
                cmbSendTo.setEnabled(true);
            }
            else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateFromCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        objSalesDepositRefund.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            //Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Header;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel Panel1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JTable TableL;
    private javax.swing.JTable TableOutStanding;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox chkDaywiseInterest;
    private javax.swing.JCheckBox chkDoNotIncludeInterest;
    private javax.swing.JCheckBox chkFundTransfer;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdBack3;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdGenerateOutstanding;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdNext2;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowReceipt;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel lblApplicantName;
    private javax.swing.JLabel lblBankMainCode;
    private javax.swing.JLabel lblBankName;
    private javax.swing.JLabel lblChequeDate;
    private javax.swing.JLabel lblChequeNo;
    private javax.swing.JLabel lblCurrentTDSAmount;
    private javax.swing.JLabel lblDocDate;
    private javax.swing.JLabel lblDocNo;
    private javax.swing.JLabel lblDocNo1;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblFinalPayment;
    private javax.swing.JLabel lblGrossIntAmount;
    private javax.swing.JLabel lblNetIntAmount;
    private javax.swing.JLabel lblPartyCode;
    private javax.swing.JLabel lblPreviousIntAmount;
    private javax.swing.JLabel lblPrincipleAmount;
    private javax.swing.JLabel lblRefundDate;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTotalPrincipleAmount;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtBankMainCode;
    private javax.swing.JTextField txtBankName;
    private javax.swing.JTextField txtChequeDate;
    private javax.swing.JTextField txtChequeNo;
    private javax.swing.JTextField txtCurrentTDSAmount;
    private javax.swing.JTextField txtDaywiseInterest;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFinalAmount;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtFundName;
    private javax.swing.JTextField txtFundTransfer;
    private javax.swing.JTextField txtGrossIntAmount;
    private javax.swing.JTextField txtNetIntAmount;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtPartyName;
    private javax.swing.JTextField txtPreviousIntAmount;
    private javax.swing.JTextField txtPrincipleAmount;
    private javax.swing.JTextField txtRefundDate;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtTotalPrincipleAmount;
    private javax.swing.JTextField txtValueDate;
    private javax.swing.JTextField txtVoucherDate;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    private void SetFields(boolean pStat) {
        txtPartyCode.setEnabled(pStat);
        txtBankMainCode.setEnabled(pStat);
        txtRefundDate.setEnabled(pStat);
        txtChequeNo.setEnabled(pStat);
        txtChequeDate.setEnabled(pStat);
        chkFundTransfer.setEnabled(pStat);
        
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,11451)) {
            cmdGenerateOutstanding.setEnabled(pStat);
            cmdShowReceipt.setEnabled(pStat);
            chkDoNotIncludeInterest.setEnabled(pStat);
        } else {
            cmdGenerateOutstanding.setEnabled(false);
            cmdShowReceipt.setEnabled(false);
            chkDoNotIncludeInterest.setEnabled(false);
        }
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        chkDaywiseInterest.setEnabled(pStat);
    }
    
    private void ClearFields() {
        txtDocNo.setText("");
        txtDocDate.setText("");
        txtPartyCode.setText("");
        txtPartyName.setText("");
        txtBankMainCode.setText("");
        txtBankName.setText("");
        txtFundTransfer.setText("");
        txtFundName.setText("");
        chkFundTransfer.setSelected(false);
        txtPrincipleAmount.setText("0.00");
        txtTotalPrincipleAmount.setText("0.00");
        txtPreviousIntAmount.setText("0.00");
        chkDoNotIncludeInterest.setSelected(false);
        txtGrossIntAmount.setText("0.00");
        txtNetIntAmount.setText("0.00");
        txtCurrentTDSAmount.setText("0.00");
        txtFinalAmount.setText("0.00");
        
        txtRefundDate.setText("");
        txtChequeNo.setText("");
        txtChequeDate.setText("");
        chkDaywiseInterest.setSelected(false);
        txtDaywiseInterest.setText("");
        lblTitle.setText("");
        
        txtValueDate.setText("");
        txtVoucherDate.setText("");
        
        FormatGrid();
        FormatGridOut();
        FormatGridA();
        FormatGridHS();
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                if(objSalesDepositRefund.getAttribute("APPROVED").getBool()) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(!objSalesDepositRefund.getAttribute("APPROVED").getBool()) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(objSalesDepositRefund.getAttribute("CANCELLED").getBool()) {
                    lblTitle.setBackground(Color.RED);
                }
            }
        }catch(Exception e) {
        }
        //============================================//
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=clsSalesDepositRefund.ModuleID;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        ClearFields();
        
        lblTitle.setText("SALES DEPOSIT REFUND - " + objSalesDepositRefund.getAttribute("DOC_NO").getString());
        txtDocNo.setText(objSalesDepositRefund.getAttribute("DOC_NO").getString());
        txtDocDate.setText(EITLERPGLOBAL.formatDate(objSalesDepositRefund.getAttribute("DOC_DATE").getString()));
        txtPartyCode.setText(objSalesDepositRefund.getAttribute("PARTY_CODE").getString());
        txtPartyName.setText(objSalesDepositRefund.getAttribute("PARTY_NAME").getString());
        txtBankMainCode.setText(objSalesDepositRefund.getAttribute("BANK_MAIN_CODE").getString());
        txtBankName.setText(objSalesDepositRefund.getAttribute("BANK_NAME").getString());
        txtFundTransfer.setText(objSalesDepositRefund.getAttribute("FUND_TRANSFER").getString());
        if(!txtFundTransfer.getText().trim().equals("")) {
            chkFundTransfer.setSelected(true);
            txtFundName.setText(data.getStringValueFromDB("SELECT BOOK_NAME FROM D_FIN_BOOK_MASTER WHERE MAIN_ACCOUNT_CODE='"+txtFundTransfer.getText().trim()+"' ",FinanceGlobal.FinURL));
        } else {
            chkFundTransfer.setSelected(false);
            txtFundName.setText("");
        }
        
        if(objSalesDepositRefund.getAttribute("EXCLUDE_INTEREST").getBool()) {
            chkDoNotIncludeInterest.setSelected(true);
        } else {
            chkDoNotIncludeInterest.setSelected(false);
        }
        
        txtPrincipleAmount.setText(Double.toString(objSalesDepositRefund.getAttribute("PRINCIPLE_AMOUNT").getDouble()));
        txtTotalPrincipleAmount.setText(Double.toString(objSalesDepositRefund.getAttribute("TOTAL_PRINCIPLE_AMOUNT").getDouble()));
        txtPreviousIntAmount.setText(Double.toString(objSalesDepositRefund.getAttribute("PREVIOUS_INTEREST_AMOUNT").getDouble()));
        
        txtGrossIntAmount.setText(Double.toString(objSalesDepositRefund.getAttribute("CURRENT_INTEREST_AMOUNT").getDouble() + objSalesDepositRefund.getAttribute("CURRENT_TDS_AMOUNT").getDouble()));
        txtNetIntAmount.setText(Double.toString(objSalesDepositRefund.getAttribute("CURRENT_INTEREST_AMOUNT").getDouble()));
        txtCurrentTDSAmount.setText(Double.toString(objSalesDepositRefund.getAttribute("CURRENT_TDS_AMOUNT").getDouble()));
        //txtFinalAmount.setText(Double.toString(objSalesDepositRefund.getAttribute("PRINCIPLE_AMOUNT").getDouble() + objSalesDepositRefund.getAttribute("CURRENT_INTEREST_AMOUNT").getDouble()));
        
        txtRefundDate.setText(EITLERPGLOBAL.formatDate(objSalesDepositRefund.getAttribute("REFUND_DATE").getString()));
        txtChequeNo.setText(objSalesDepositRefund.getAttribute("CHEQUE_NO").getString());
        txtChequeDate.setText(EITLERPGLOBAL.formatDate(objSalesDepositRefund.getAttribute("CHEQUE_DATE").getString()));
        txtValueDate.setText(EITLERPGLOBAL.formatDate(objSalesDepositRefund.getAttribute("VALUE_DATE").getString()));
        txtVoucherDate.setText(EITLERPGLOBAL.formatDate(objSalesDepositRefund.getAttribute("VOUCHER_DATE").getString()));
        if(chkDoNotIncludeInterest.isSelected()) {
            txtFinalAmount.setText(Double.toString(EITLERPGLOBAL.round(Double.parseDouble(txtPrincipleAmount.getText().trim()) + Double.parseDouble(txtGrossIntAmount.getText().trim()) - Double.parseDouble(txtCurrentTDSAmount.getText().trim()),0)));
        } else {
            txtFinalAmount.setText(Double.toString(EITLERPGLOBAL.round(Double.parseDouble(txtPrincipleAmount.getText().trim()) + Double.parseDouble(txtPreviousIntAmount.getText().trim()) + Double.parseDouble(txtGrossIntAmount.getText().trim()) - Double.parseDouble(txtCurrentTDSAmount.getText().trim()),0)));
        }
        
        chkDaywiseInterest.setSelected(objSalesDepositRefund.getAttribute("DAYWISE_INTEREST").getBool());
        if(objSalesDepositRefund.getAttribute("DAYWISE_INTEREST").getBool()) txtDaywiseInterest.setText("Based on DAYWISE calculation method.");
        else txtDaywiseInterest.setText("Based on 15 DAY calculation method.");
        
        //============== Receiptwise detail of party ====================
        FormatGrid();
        
        for(int i=1;i<=objSalesDepositRefund.colLineItems.size();i++) {
            //Insert New Row
            clsSalesDepositRefundItem ObjItem=(clsSalesDepositRefundItem) objSalesDepositRefund.colLineItems.get(Integer.toString(i));
            Object[] rowData=new Object[8];
            
            rowData[0]=Integer.toString(ObjItem.getAttribute("SR_NO").getInt());
            rowData[1]=ObjItem.getAttribute("RECEIPT_NO").getString();
            rowData[2]=EITLERPGLOBAL.formatDate(ObjItem.getAttribute("RECEIPT_DATE").getString());
            rowData[3]=EITLERPGLOBAL.formatDate(ObjItem.getAttribute("EFFECTIVE_DATE").getString());
            rowData[4]=ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString();
            rowData[5]=ObjItem.getAttribute("INTEREST_MAIN_CODE").getString();
            rowData[6]=Double.toString(ObjItem.getAttribute("INTEREST_RATE").getDouble());
            rowData[7]=Double.toString(ObjItem.getAttribute("AMOUNT").getDouble());
            
            DataModelL.addRow(rowData);
        }
        
        DataModelL.TableReadOnly(true);
        //===============================================================
        
        //============== Party Outstanding ====================
        FormatGridOut();
        for(int i=1;i<=objSalesDepositRefund.colLineItemsOut.size();i++) {
            //Insert New Row
            clsOutStandingItem ObjItem=(clsOutStandingItem) objSalesDepositRefund.colLineItemsOut.get(Integer.toString(i));
            Object[] rowData=new Object[4];
            
            rowData[0]=Integer.toString(ObjItem.getAttribute("SR_NO").getInt());
            rowData[1]=ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString();
            rowData[2]=Double.toString(ObjItem.getAttribute("AMOUNT").getDouble());
            rowData[3]=ObjItem.getAttribute("EFFECT").getString();
            
            DataModelOut.addRow(rowData);
        }
        
        DataModelOut.TableReadOnly(true);
        //=====================================================
        
        SetupApproval();
        
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,objSalesDepositRefund.getAttribute("HIERARCHY_ID").getString());
        
        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List=new HashMap();
        String DocNo=objSalesDepositRefund.getAttribute("DOC_NO").getString();
        List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, clsSalesDepositRefund.ModuleID , DocNo);
        for(int i=1;i<=List.size();i++) {
            clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
            Object[] rowData=new Object[7];
            
            rowData[0]=Integer.toString(i);
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
            rowData[2]=ObjFlow.getAttribute("STATUS").getString();
            rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
            rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
            rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
            rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
            
            DataModelA.addRow(rowData);
        }
        //============================================================//
        
        //=========================== Audit Trail ===========================//
        FormatGridHS();
        
        HashMap History=clsSalesDepositRefund.getHistoryList(EITLERPGLOBAL.gCompanyID, objSalesDepositRefund.getAttribute("DOC_NO").getString());
        for(int i=1;i<=History.size();i++) {
            clsSalesDepositRefund ObjHistory=(clsSalesDepositRefund)History.get(Integer.toString(i));
            Object[] rowData=new Object[5];
            
            rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
            rowData[1]=ObjHistory.getAttribute("UPDATED_BY").getString();
            rowData[2]=ObjHistory.getAttribute("ENTRY_DATE").getString();
            
            String ApprovalStatus="";
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus="Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus="Final Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus="Waiting";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus="Rejected";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus="Pending";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus="Skiped";
            }
            
            rowData[3]=ApprovalStatus;
            rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
            
            DataModelHS.addRow(rowData);
        }
        //=========================== Audit Trail Over ===========================//
    }
    
    //Sets data to the Class Object
    private void SetData() {
        
        objSalesDepositRefund.setAttribute("FFNO",FFNo);
        objSalesDepositRefund.setAttribute("DOC_NO",txtDocNo.getText().trim());
        objSalesDepositRefund.setAttribute("DOC_DATE",txtDocDate.getText().trim());
        objSalesDepositRefund.setAttribute("PARTY_CODE",txtPartyCode.getText().trim());
        objSalesDepositRefund.setAttribute("PARTY_NAME",txtPartyName.getText().trim());
        objSalesDepositRefund.setAttribute("BANK_MAIN_CODE",txtBankMainCode.getText().trim());
        objSalesDepositRefund.setAttribute("BANK_NAME",txtBankName.getText().trim());
        objSalesDepositRefund.setAttribute("FUND_TRANSFER",txtFundTransfer.getText().trim());
        objSalesDepositRefund.setAttribute("PRINCIPLE_AMOUNT", Double.parseDouble(txtPrincipleAmount.getText().trim()));
        objSalesDepositRefund.setAttribute("TOTAL_PRINCIPLE_AMOUNT", Double.parseDouble(txtTotalPrincipleAmount.getText().trim()));
        objSalesDepositRefund.setAttribute("PREVIOUS_INTEREST_AMOUNT", Double.parseDouble(txtPreviousIntAmount.getText().trim()));
        if(chkDoNotIncludeInterest.isSelected()) {
            objSalesDepositRefund.setAttribute("EXCLUDE_INTEREST", true);
        } else {
            objSalesDepositRefund.setAttribute("EXCLUDE_INTEREST", false);
        }
        objSalesDepositRefund.setAttribute("CURRENT_INTEREST_AMOUNT", Double.parseDouble(txtNetIntAmount.getText().trim()));
        objSalesDepositRefund.setAttribute("CURRENT_TDS_AMOUNT", Double.parseDouble(txtCurrentTDSAmount.getText().trim()));
        objSalesDepositRefund.setAttribute("REFUND_DATE",txtRefundDate.getText().trim());
        objSalesDepositRefund.setAttribute("CHEQUE_NO",txtChequeNo.getText().trim());
        objSalesDepositRefund.setAttribute("CHEQUE_DATE",txtChequeDate.getText().trim());
        objSalesDepositRefund.setAttribute("VALUE_DATE",txtValueDate.getText().trim());//new code by ashutosh on 12/08/2015 for insert value date
        objSalesDepositRefund.setAttribute("VOUCHER_DATE",txtVoucherDate.getText().trim());//new code by ashutosh on 12/08/2015 for insert voucher date
        
        
        if(txtDaywiseInterest.getText().trim().equals("Based on DAYWISE calculation method.")) objSalesDepositRefund.setAttribute("DAYWISE_INTEREST", true); //new code by vivek on 28/02/2014 for day wise interest calculation 
        else objSalesDepositRefund.setAttribute("DAYWISE_INTEREST", false); //new code by vivek on 28/02/2014 for day wise interest calculation 
        
        
        objSalesDepositRefund.colLineItems.clear();
        
        for(int i=0;i<TableL.getRowCount();i++) {
            clsSalesDepositRefundItem ObjItem = new clsSalesDepositRefundItem();
            
            ObjItem.setAttribute("SR_NO",Integer.parseInt(TableL.getValueAt(i, 0).toString()));
            ObjItem.setAttribute("RECEIPT_NO", TableL.getValueAt(i, 1).toString());
            ObjItem.setAttribute("RECEIPT_DATE",TableL.getValueAt(i, 2).toString());
            ObjItem.setAttribute("EFFECTIVE_DATE",TableL.getValueAt(i,3).toString());
            ObjItem.setAttribute("MAIN_ACCOUNT_CODE",TableL.getValueAt(i,4).toString());
            ObjItem.setAttribute("INTEREST_MAIN_CODE",TableL.getValueAt(i,5).toString());
            ObjItem.setAttribute("INTEREST_RATE",Double.parseDouble(TableL.getValueAt(i,6).toString()));
            ObjItem.setAttribute("AMOUNT",Double.parseDouble(TableL.getValueAt(i,7).toString()));
            
            if(EditMode==EITLERPGLOBAL.ADD) {
                ObjItem.setAttribute("CREATED_BY",EITLERPGLOBAL.gLoginID);
                ObjItem.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            }
            else {
                ObjItem.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gLoginID);
                ObjItem.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            }
            objSalesDepositRefund.colLineItems.put(Integer.toString(objSalesDepositRefund.colLineItems.size()+1),ObjItem);
        }
        
        
        objSalesDepositRefund.colLineItemsOut.clear();
        
        for(int i=0;i<TableOutStanding.getRowCount();i++) {
            clsOutStandingItem ObjItemOut = new clsOutStandingItem();
            
            ObjItemOut.setAttribute("SR_NO",Integer.parseInt(TableOutStanding.getValueAt(i, 0).toString()));
            ObjItemOut.setAttribute("MAIN_ACCOUNT_CODE",TableOutStanding.getValueAt(i,1).toString());
            ObjItemOut.setAttribute("AMOUNT",Double.parseDouble(TableOutStanding.getValueAt(i,2).toString()));
            ObjItemOut.setAttribute("EFFECT",TableOutStanding.getValueAt(i,3).toString());
            
            if(EditMode==EITLERPGLOBAL.ADD) {
                ObjItemOut.setAttribute("CREATED_BY",EITLERPGLOBAL.gLoginID);
                ObjItemOut.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            } else {
                ObjItemOut.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gLoginID);
                ObjItemOut.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            }
            objSalesDepositRefund.colLineItemsOut.put(Integer.toString(objSalesDepositRefund.colLineItemsOut.size()+1),ObjItemOut);
        }
        
        //----- Update Approval Specific Fields -----------//
        objSalesDepositRefund.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        objSalesDepositRefund.setAttribute("FROM",EITLERPGLOBAL.gUserID);
        objSalesDepositRefund.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        objSalesDepositRefund.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            objSalesDepositRefund.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            objSalesDepositRefund.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            objSalesDepositRefund.setAttribute("APPROVAL_STATUS","R");
            objSalesDepositRefund.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            objSalesDepositRefund.setAttribute("APPROVAL_STATUS","H");
        }
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            objSalesDepositRefund.setAttribute("CREATED_BY",EITLERPGLOBAL.gLoginID);
            objSalesDepositRefund.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDate());
        } else {
            objSalesDepositRefund.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gLoginID);
            objSalesDepositRefund.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDate());
        }
        //-------------------------------------------------//
    }
    
    private void SetMenuForRights() {
        
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,11451)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,11452)) {
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,11453)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,11454)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    private void Add() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        //Now Generate new document no.
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=clsSalesDepositRefund.ModuleID;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo = aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsSalesDepositRefund.ModuleID , FFNo,  false));
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
            txtPartyCode.requestFocus();
            
            lblTitle.setText("SALES DEPOSIT REFUND - " + txtDocNo.getText());
            lblTitle.setBackground(Color.LIGHT_GRAY);
        } else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        String DocNo=objSalesDepositRefund.getAttribute("DOC_NO").getString();
        
        if(objSalesDepositRefund.IsEditable(EITLERPGLOBAL.gCompanyID, DocNo, EITLERPGLOBAL.gUserID)) {
            
            EITLERPGLOBAL.ChangeCursorToWait(this);
            
            EditMode=EITLERPGLOBAL.EDIT;
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            SetupApproval();
            //----------------//
            
            if(ApprovalFlow.IsCreator(clsSalesDepositRefund.ModuleID ,DocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 1145,11452)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            SetupApproval();
            DisableToolbar();
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        if(objSalesDepositRefund.Delete(EITLERPGLOBAL.gUserID)) {
            MoveLast();
        }
    }
    
    private void Save() {
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        if(!Validate()) {
            EITLERPGLOBAL.ChangeCursorToDefault(this);
            return;
        }
        
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(objSalesDepositRefund.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+objSalesDepositRefund.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(objSalesDepositRefund.Update()) {
                //Nothing to do
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+objSalesDepositRefund.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
        
        ShowMessage("Ready...");
        try {
            frmPA.RefreshView();
        } catch(Exception e) {
        }
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ClearFields();
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
        ShowMessage("Ready...");
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Finance.frmSalesDepositRefundFind",true);
        frmSalesDepositRefundFind ObjReturn= (frmSalesDepositRefundFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!objSalesDepositRefund.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveFirst();
        }
    }
    
    public void FindEx(int pCompanyID, String pDocNo) {
        objSalesDepositRefund.Filter(" WHERE COMPANY_ID="+pCompanyID+" AND DOC_NO='"+pDocNo+"' ", pCompanyID);
        objSalesDepositRefund.MoveFirst();
        DisplayData();
    }
    
    private void FormatGridOut() {
        DataModelOut=new EITLTableModel();
        
        TableOutStanding.removeAll();
        TableOutStanding.setModel(DataModelOut);
        
        //Set the table Readonly
        DataModelOut.TableReadOnly(true);
        
        //Add the columns
        DataModelOut.addColumn("Sr.");
        DataModelOut.addColumn("Main Account Code");
        DataModelOut.addColumn("Amount");
        DataModelOut.addColumn("Effect");
        
        TableColumnModel ColModel=TableOutStanding.getColumnModel();
        TableOutStanding.setAutoResizeMode(TableOutStanding.AUTO_RESIZE_OFF);
    }
    
    private void FormatGrid() {
        DataModelL=new EITLTableModel();
        TableL.removeAll();
        TableL.setModel(DataModelL);
        
        //Set the table Readonly
        DataModelL.TableReadOnly(true);
        
        //Add the columns
        DataModelL.addColumn("Sr.");
        DataModelL.addColumn("Receipt No.");
        DataModelL.addColumn("Receipt Date");
        DataModelL.addColumn("Effective Date");
        DataModelL.addColumn("Main Account Code");
        DataModelL.addColumn("Interest Main Code");
        DataModelL.addColumn("Interest Rate");
        DataModelL.addColumn("Amount");
        
        TableColumnModel ColModel=TableL.getColumnModel();
        TableL.setAutoResizeMode(TableL.AUTO_RESIZE_OFF);
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objSalesDepositRefund.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objSalesDepositRefund.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objSalesDepositRefund.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objSalesDepositRefund.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void UpdateSrNo() {
        int SrCol=DataModelL.getColFromVariable("SR_NO");
        
        for(int i=0;i<TableL.getRowCount();i++) {
            TableL.setValueAt(Integer.toString(i+1), i, SrCol);
        }
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
    }
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    private void SetupApproval() {
        
        if(cmbHierarchy.getItemCount()>1) {
            cmbHierarchy.setEnabled(true);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, clsSalesDepositRefund.ModuleID , objSalesDepositRefund.getAttribute("DOC_NO").toString());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,clsSalesDepositRefund.ModuleID ,FromUserID,objSalesDepositRefund.getAttribute("DOC_NO").toString());
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,objSalesDepositRefund.getAttribute("HIERARCHY_ID").getInt());
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, clsSalesDepositRefund.ModuleID ,objSalesDepositRefund.getAttribute("DOC_NO").toString());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e) {
        }
    }
    
    private void GenerateRejectedUserCombo() {
        HashMap List=new HashMap();
        HashMap DeptList=new HashMap();
        HashMap DeptUsers=new HashMap();
        
        //----- Generate cmbType ------- //
        cmbToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gUserID,true);
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            
            /// NEW CODE ///
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, clsSalesDepositRefund.ModuleID , objSalesDepositRefund.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, clsSalesDepositRefund.ModuleID, objSalesDepositRefund.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt() , EITLERPGLOBAL.gUserID);
                }
                
                if(IncludeUser&&(( ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gUserID)) {
                    cmbToModel.addElement(aData);
                }
            }
            else {
                if((ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///
        }
        //------------------------------ //
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, clsSalesDepositRefund.ModuleID , objSalesDepositRefund.getAttribute("DOC_NO").getString());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
    }
    
    private void GenerateCombos() {
        try {
            //Generates Combo Boxes
            HashMap List=new HashMap();
            String strCondition="";
            
            cmbHierarchyModel=new EITLComboModel();
            cmbHierarchy.removeAllItems();
            cmbHierarchy.setModel(cmbHierarchyModel);
            
            List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsSalesDepositRefund.ModuleID);
            
            if(EditMode==EITLERPGLOBAL.EDIT) {
                List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsSalesDepositRefund.ModuleID );
            }
            for(int i=1;i<=List.size();i++) {
                clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
                ComboData aData=new ComboData();
                aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
                aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
                cmbHierarchyModel.addElement(aData);
            }
        }
        catch(Exception e) {
        }
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Panel1.getComponentCount()-1;i++) {
            if(Panel1.getComponent(i).getName()!=null) {
                
                FieldName=Panel1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, SelHierarchy, "H", FieldName)) {
                    
                    Panel1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//
    }
    
    private boolean Validate() {
        
        if(txtPartyCode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter Party Code.");
            return false;
        }
        
        if(txtBankMainCode.getText().trim().equals("") && txtFundTransfer.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter either Bank Main Code or Fund transfer code.");
            return false;
        }
        
        if(txtBankMainCode.getText().trim().length()>0){
        if(txtBankMainCode.getText().trim().length()!=6){
            JOptionPane.showMessageDialog(null,"Please Enter valid Bank Main Code.");
            return false;
        }
        }
        
        int DeptID = clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID);
        if(DeptID!=33 && txtFundTransfer.getText().equals("") && !txtBankMainCode.getText().equals("")) {
            String BankMainCode = txtBankMainCode.getText().trim();
            if(BankMainCode.equals("999999")) {
                JOptionPane.showMessageDialog(null,"Please Enter valid Bank Main Code.");
                txtBankMainCode.requestFocus();
                return false;
            }
        }
        
        if(DeptID!=33 && !txtFundTransfer.getText().equals("") && txtBankMainCode.getText().equals("")) {
            String MainCode = txtFundTransfer.getText();
            if(MainCode.equals("999999")) {
                JOptionPane.showMessageDialog(null,"Please Enter valid Main Account Code for Fund Transfer.");
                txtFundTransfer.requestFocus();
                return false;
            }
        }
        
        if(txtRefundDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter The Refund Date in DD/MM/YYYY Format.");
            return false;
        } else if(!(EITLERPGLOBAL.isDate(txtRefundDate.getText().trim()))) {
            JOptionPane.showMessageDialog(null,"Please Enter The Refund Date in DD/MM/YYYY Format.");
            return false;
        }
        
        if(txtChequeNo.getText().trim().equals("") && !chkFundTransfer.isSelected()) {
            JOptionPane.showMessageDialog(null,"Please Enter The Cheque No.");
            return false;
        }
        
        if(txtChequeDate.getText().trim().equals("") && !chkFundTransfer.isSelected()) {
            JOptionPane.showMessageDialog(null,"Please Enter The Cheque Date in DD/MM/YYYY Format.");
            return false;
        } else if(!(EITLERPGLOBAL.isDate(txtChequeDate.getText().trim())) && !chkFundTransfer.isSelected()) {
            JOptionPane.showMessageDialog(null,"Please Enter The Cheque Date in DD/MM/YYYY Format.");
            return false;
        }
        
        if(TableL.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(null,"Please insert receipt(s) for party.");
            return false;
        }
        
        if(TableOutStanding.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(null,"Please generate outstanding.");
            return false;
        }
        
        if(txtValueDate.getText().trim().equals("") && chkFundTransfer.isSelected()) {
            JOptionPane.showMessageDialog(null,"Please Enter The Value Date");
            return false;
        }
        
        if(txtVoucherDate.getText().trim().equals("") && chkFundTransfer.isSelected()) {
            JOptionPane.showMessageDialog(null,"Please Enter The Voucher Date");
            return false;
        }
        return true;
    }
}
