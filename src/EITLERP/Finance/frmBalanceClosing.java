/*
 * frmStockClosing.java
 *
 * Created on November 22, 2005, 4:39 PM
 */

package EITLERP.Finance;

/**
 *
 * @author  root
 */

import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.JOptionPane;
//import java.awt.*;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.data;
import EITLERP.LOV;
import EITLERP.clsUser;
import EITLERP.clsCompany;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import EITLERP.clsFinYear;
//import javax.swing.event.*;
import java.util.HashMap;
import TReportWriter.TReportEngine;

public class frmBalanceClosing extends javax.swing.JApplet {
    
    private EITLTableModel DataModel=new EITLTableModel();
    String CurrptedVouchers = "";
    String ListofParty = "";
    public boolean ProcessDone = false;
    private TReportEngine objEngine=new TReportEngine();
    /** Initializes the applet frmStockClosing */
    public void init() {
        System.gc();
        setSize(510,474);
        initComponents();
        FormatGrid();
        GenerateGrid();
        if(EITLERPGLOBAL.gUserID!=1 && EITLERPGLOBAL.gUserID!=16) {
            cmdCloseBalance.setEnabled(false);
        }
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        BgClosing = new javax.swing.ButtonGroup();
        PanelLabel = new javax.swing.JPanel();
        SubPanel = new javax.swing.JLabel();
        lblClosingInfo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdExit = new javax.swing.JButton();
        MainPanel = new javax.swing.JTabbedPane();
        ClosingLedgerBalance = new javax.swing.JPanel();
        lblCreateUpdateEntry = new javax.swing.JLabel();
        lblFromDate = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        lblTodate = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        cmdCloseBalance = new javax.swing.JButton();
        OpgCreateClosing = new javax.swing.JRadioButton();
        OpgUpdateClosing = new javax.swing.JRadioButton();
        OpgNone = new javax.swing.JRadioButton();
        lblStatus = new javax.swing.JLabel();
        lblProgressInfo = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        PanelLabel.setLayout(null);

        PanelLabel.setBackground(new java.awt.Color(204, 204, 255));
        PanelLabel.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        SubPanel.setText("MANAGE CLOSING BALANCE");
        PanelLabel.add(SubPanel);
        SubPanel.setBounds(9, 7, 179, 15);

        getContentPane().add(PanelLabel);
        PanelLabel.setBounds(-2, 0, 502, 28);

        lblClosingInfo.setText("Closing Balances List :");
        getContentPane().add(lblClosingInfo);
        lblClosingInfo.setBounds(4, 31, 150, 18);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                TableMouseReleased(evt);
            }
        });

        jScrollPane1.setViewportView(Table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(7, 55, 480, 150);

        cmdExit.setText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        getContentPane().add(cmdExit);
        cmdExit.setBounds(370, 430, 113, 25);

        ClosingLedgerBalance.setLayout(null);

        ClosingLedgerBalance.setBorder(new javax.swing.border.EtchedBorder());
        lblCreateUpdateEntry.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCreateUpdateEntry.setText("Create/Update Closing Entry :");
        ClosingLedgerBalance.add(lblCreateUpdateEntry);
        lblCreateUpdateEntry.setBounds(10, 10, 190, 15);

        lblFromDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFromDate.setText("From Date :");
        ClosingLedgerBalance.add(lblFromDate);
        lblFromDate.setBounds(10, 80, 76, 15);

        txtFromDate.setEditable(false);
        txtFromDate.setEnabled(false);
        ClosingLedgerBalance.add(txtFromDate);
        txtFromDate.setBounds(90, 80, 117, 21);

        lblTodate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTodate.setText("To Date :");
        ClosingLedgerBalance.add(lblTodate);
        lblTodate.setBounds(230, 80, 62, 15);

        ClosingLedgerBalance.add(txtToDate);
        txtToDate.setBounds(300, 80, 117, 21);

        cmdCloseBalance.setText("Close Balance");
        cmdCloseBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCloseBalanceActionPerformed(evt);
            }
        });

        ClosingLedgerBalance.add(cmdCloseBalance);
        cmdCloseBalance.setBounds(313, 140, 140, 24);

        OpgCreateClosing.setText(" Create Closing");
        BgClosing.add(OpgCreateClosing);
        OpgCreateClosing.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgCreateClosingItemStateChanged(evt);
            }
        });

        ClosingLedgerBalance.add(OpgCreateClosing);
        OpgCreateClosing.setBounds(10, 40, 140, 20);

        OpgUpdateClosing.setText(" Update Closing");
        BgClosing.add(OpgUpdateClosing);
        OpgUpdateClosing.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgUpdateClosingItemStateChanged(evt);
            }
        });

        ClosingLedgerBalance.add(OpgUpdateClosing);
        OpgUpdateClosing.setBounds(160, 40, 140, 20);

        OpgNone.setSelected(true);
        OpgNone.setText(" None");
        BgClosing.add(OpgNone);
        OpgNone.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgNoneItemStateChanged(evt);
            }
        });

        ClosingLedgerBalance.add(OpgNone);
        OpgNone.setBounds(310, 40, 140, 20);

        lblStatus.setText("...");
        ClosingLedgerBalance.add(lblStatus);
        lblStatus.setBounds(10, 120, 280, 15);

        lblProgressInfo.setText("...");
        ClosingLedgerBalance.add(lblProgressInfo);
        lblProgressInfo.setBounds(10, 140, 280, 15);

        MainPanel.addTab("Closing Ledger Balance", ClosingLedgerBalance);

        getContentPane().add(MainPanel);
        MainPanel.setBounds(9, 219, 485, 200);

    }//GEN-END:initComponents
    
    private void OpgCreateClosingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgCreateClosingItemStateChanged
        // TODO add your handling code here:
        if(OpgCreateClosing.isSelected()) {
            String FromDate = EITLERPGLOBAL.addDaysToDate(EITLERPGLOBAL.formatDateDB(DataModel.getValueByVariable("CLOSING_DATE",Table.getRowCount()-1)),1,"yyyy-MM-dd");
            txtFromDate.setText(EITLERPGLOBAL.formatDate(FromDate));
            txtToDate.setText("");
            txtToDate.setEnabled(true);
        } else {
            txtFromDate.setText("");
            txtToDate.setText("");
            txtToDate.setEnabled(false);
        }
    }//GEN-LAST:event_OpgCreateClosingItemStateChanged
    
    private void TableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseReleased
        // TODO add your handling code here:
        if(OpgUpdateClosing.isSelected()) {
            if(Table.getSelectedRow()<0) {
                JOptionPane.showMessageDialog(this,"First select Entry from Closing Balance List.","Wrong Selection",JOptionPane.ERROR_MESSAGE);
                txtToDate.setText("");
                txtFromDate.setText("");
                txtToDate.setEnabled(false);
                OpgNone.setSelected(true);
            } else {
                if(Table.getRowCount()==(Table.getSelectedRow()+1)) {
                    JOptionPane.showMessageDialog(this,"You can not Select last closing.","Wrong Selection",JOptionPane.ERROR_MESSAGE);
                    txtToDate.setText("");
                    txtFromDate.setText("");
                    txtToDate.setEnabled(false);
                    OpgNone.setSelected(true);
                    //Table.clearSelection();
                    Table.changeSelection(Table.getSelectedRow(), Table.getSelectedColumn(), false,false);
                } else {
                    String FromDate = EITLERPGLOBAL.addDaysToDate(EITLERPGLOBAL.formatDateDB(DataModel.getValueByVariable("CLOSING_DATE",Table.getSelectedRow())),1,"yyyy-MM-dd");
                    String ToDate = EITLERPGLOBAL.formatDateDB(DataModel.getValueByVariable("CLOSING_DATE",Table.getSelectedRow()+1));
                    txtFromDate.setText(EITLERPGLOBAL.formatDate(FromDate));
                    txtToDate.setText(EITLERPGLOBAL.formatDate(ToDate));
                    txtToDate.setEnabled(false);
                }
            }
        }
    }//GEN-LAST:event_TableMouseReleased
    
    private void OpgUpdateClosingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgUpdateClosingItemStateChanged
        // TODO add your handling code here:
        if(OpgUpdateClosing.isSelected()) {
            if(Table.getSelectedRow()<0) {
                JOptionPane.showMessageDialog(this,"First select Entry from Closing Balance List.","Wrong Selection",JOptionPane.ERROR_MESSAGE);
                txtToDate.setText("");
                txtFromDate.setText("");
                txtToDate.setEnabled(false);
                OpgNone.setSelected(true);
            } else {
                if(Table.getRowCount()==(Table.getSelectedRow()+1)) {
                    JOptionPane.showMessageDialog(this,"You can not Select last closing.","Wrong Selection",JOptionPane.ERROR_MESSAGE);
                    txtToDate.setText("");
                    txtFromDate.setText("");
                    txtToDate.setEnabled(false);
                    OpgNone.setSelected(true);
                    //Table.clearSelection();
                    Table.changeSelection(Table.getSelectedRow(), Table.getSelectedColumn(), false,false);
                } else {
                    String FromDate = EITLERPGLOBAL.addDaysToDate(EITLERPGLOBAL.formatDateDB(DataModel.getValueByVariable("CLOSING_DATE",Table.getSelectedRow())),1,"yyyy-MM-dd");
                    String ToDate = EITLERPGLOBAL.formatDateDB(DataModel.getValueByVariable("CLOSING_DATE",Table.getSelectedRow()+1));
                    txtFromDate.setText(EITLERPGLOBAL.formatDate(FromDate));
                    txtToDate.setText(EITLERPGLOBAL.formatDate(ToDate));
                    txtToDate.setEnabled(false);
                }
            }
        }
    }//GEN-LAST:event_OpgUpdateClosingItemStateChanged
    
    private void OpgNoneItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgNoneItemStateChanged
        // TODO add your handling code here:
        if(OpgNone.isSelected()) {
            txtFromDate.setText("");
            txtToDate.setText("");
            txtToDate.setEnabled(false);
        }
    }//GEN-LAST:event_OpgNoneItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdCloseBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCloseBalanceActionPerformed
        // TODO add your handling code here:
        new Thread() {
            public void run() {
                try {
                    lblStatus.setText("Wait while validating records...");
                    cmdCloseBalance.setEnabled(false);
                    cmdExit.setEnabled(false);
                    if(!Validate()) {
                        cmdCloseBalance.setEnabled(true);
                        cmdExit.setEnabled(true);
                        return;
                    }
                    lblStatus.setText("Validating finished...");
                    if(OpgCreateClosing.isSelected()) {
                       CreateClosing();
                      
                    } else if(OpgUpdateClosing.isSelected()) {
                       UpdateClosing();
                    }
                    cmdCloseBalance.setEnabled(true);
                    cmdExit.setEnabled(true);
                } catch(Exception e) {
                    cmdCloseBalance.setEnabled(true);
                    cmdExit.setEnabled(true);
                    e.printStackTrace();
                }
            };
        }.start();
        
    }//GEN-LAST:event_cmdCloseBalanceActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup BgClosing;
    private javax.swing.JPanel ClosingLedgerBalance;
    private javax.swing.JTabbedPane MainPanel;
    private javax.swing.JRadioButton OpgCreateClosing;
    private javax.swing.JRadioButton OpgNone;
    private javax.swing.JRadioButton OpgUpdateClosing;
    private javax.swing.JPanel PanelLabel;
    private javax.swing.JLabel SubPanel;
    private javax.swing.JTable Table;
    private javax.swing.JButton cmdCloseBalance;
    private javax.swing.JButton cmdExit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblClosingInfo;
    private javax.swing.JLabel lblCreateUpdateEntry;
    private javax.swing.JLabel lblFromDate;
    private javax.swing.JLabel lblProgressInfo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTodate;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables
    
    
    private void FormatGrid() {
        DataModel=new EITLTableModel();
        
        Table.removeAll();
        
        Table.setModel(DataModel);
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        DataModel.addColumn("Sr No.");
        DataModel.addColumn("Closing Date");
        DataModel.addColumn("Remarks");
        DataModel.addColumn("Created By");
        DataModel.addColumn("Created Date");
        
        DataModel.SetVariable(0,"SR_NO"); //0 - Read Only
        DataModel.SetVariable(1,"CLOSING_DATE"); //1
        DataModel.SetVariable(2,"REMARKS"); //2 //Read Only
        DataModel.SetVariable(3,"CREATED_BY"); //1
        DataModel.SetVariable(4,"CREATED_DATE"); //2 //Read Only
        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setPreferredWidth(60);
        Table.getColumnModel().getColumn(1).setPreferredWidth(90);
        Table.getColumnModel().getColumn(2).setPreferredWidth(250);
        Table.getColumnModel().getColumn(3).setPreferredWidth(100);
        Table.getColumnModel().getColumn(4).setPreferredWidth(90);
    }
    
    
    private void GenerateGrid() {
        try {
            FormatGrid();
            ResultSet rsTmp=data.getResult("SELECT * FROM D_FIN_OPENING_HEADER ORDER BY ENTRY_DATE",FinanceGlobal.FinURL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    int EntryNo=rsTmp.getInt("ENTRY_NO");
                    String EntryDate=EITLERPGLOBAL.formatDate(rsTmp.getString("ENTRY_DATE"));
                    String Remarks= rsTmp.getString("REMARKS");
                    Object[] rowData=new Object[1];
                    DataModel.addRow(rowData);
                    int NewRow=Table.getRowCount()-1;
                    DataModel.setValueByVariable("SR_NO",Integer.toString(EntryNo), NewRow);
                    DataModel.setValueByVariable("CLOSING_DATE",EntryDate,NewRow);
                    DataModel.setValueByVariable("REMARKS",Remarks,NewRow);
                    DataModel.setValueByVariable("CREATED_BY",rsTmp.getString("CREATED_BY"),NewRow);
                    DataModel.setValueByVariable("CREATED_DATE",EITLERPGLOBAL.formatDate(rsTmp.getString("CREATED_DATE")),NewRow);
                    rsTmp.next();
                }
            }
        } catch(Exception e) {
        }
    }
    
    private boolean Validate() {
        boolean Found = false;
        String VoucherNo = "",UserName="",ReceivedDate="";
        int CompanyID =0;
        String Msg = "Below mention Voucher(s) are pending to be approve or cancell between "+txtFromDate.getText().trim() + " and " + txtToDate.getText().trim()+"\n";
        Msg += EITLERPGLOBAL.padRight(15,"COMPANY", " ") + EITLERPGLOBAL.padRight(15,"VOUCHER NO", " ") + EITLERPGLOBAL.padRightEx("PENDING FROM", " ", 20) + "  USER NAME" +"\n";
        try {
            String FromDate = EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
            String ToDate = EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());
            if(OpgNone.isSelected()) {
                JOptionPane.showMessageDialog(this,"Select Type \n1. Create Closing. \n2. Update Closing.","Wrong Selection",JOptionPane.ERROR_MESSAGE);
                lblStatus.setText("...");
                lblProgressInfo.setText("...");
                return false;
            }
            
            if(txtToDate.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(this,"Please enter TO date.");
                lblStatus.setText("...");
                lblProgressInfo.setText("...");
                return false;
            } else if(!EITLERPGLOBAL.isDate(txtToDate.getText())) {
                JOptionPane.showMessageDialog(this,"Please enter valid to date");
                lblStatus.setText("...");
                lblProgressInfo.setText("...");
                return false;
            }
            
            if(java.sql.Date.valueOf(ToDate).before(java.sql.Date.valueOf(FromDate)) || java.sql.Date.valueOf(ToDate).compareTo(java.sql.Date.valueOf(FromDate))<=0) {
                JOptionPane.showMessageDialog(this,"Wrong TO Date.\n To Date is after From Date.","Wrong Input",JOptionPane.ERROR_MESSAGE);
                lblStatus.setText("...");
                lblProgressInfo.setText("...");
                return false;
            }
            
            lblStatus.setText("Validating parties...");            
            System.out.println ("1"+ProcessDone);
            //CheckParty();            
            CheckParty1();            
            System.out.println ("2"+ProcessDone);
            System.out.println ("1. done ");
            //ProcessDone =true;
            //while(!ProcessDone) {
                //Wait until process is completed ...
           // }
            ProcessDone=false;
            if(!ListofParty.equals("")) {
                JOptionPane.showMessageDialog(this,ListofParty,"Missing Parties in Party Master",JOptionPane.ERROR_MESSAGE);
                ListofParty="";
                lblStatus.setText("...");
                lblProgressInfo.setText("...");
                return false;
            }
            
            lblStatus.setText("Validating Vouchers...");
            //CheckVouchers();
            CheckVouchers1();
            //ProcessDone =true;
           // while(!ProcessDone) {
                //Wait until process is completed ...
           // }
            ProcessDone=false;
            if(!CurrptedVouchers.equals("")) {
                CurrptedVouchers="";
                lblStatus.setText("...");
                lblProgressInfo.setText("...");
                return false;
            }
            
            lblStatus.setText("Finding unapproved vouchers...");
            String SQL = "SELECT DISTINCT COMPANY_ID,VOUCHER_NO FROM D_FIN_VOUCHER_HEADER WHERE APPROVED=0 AND CANCELLED=0 " +
            "AND VOUCHER_DATE>='"+FromDate+"' AND VOUCHER_DATE<='"+ToDate+"' ";
            ResultSet rsData = data.getResult(SQL,FinanceGlobal.FinURL);
            rsData.first();
            
            if(rsData.getRow()>0) {
                while(!rsData.isAfterLast()) {
                    CompanyID = rsData.getInt("COMPANY_ID");
                    VoucherNo = rsData.getString("VOUCHER_NO");
                    UserName = clsUser.getUserName(CompanyID,data.getIntValueFromDB("SELECT USER_ID FROM D_COM_DOC_DATA WHERE DOC_NO='"+VoucherNo+"' AND STATUS='W'",clsFinYear.getDBURL(CompanyID,Integer.parseInt(FromDate.substring(0,4)))));
                    ReceivedDate = EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT RECEIVED_DATE FROM D_COM_DOC_DATA WHERE DOC_NO='"+VoucherNo+"' AND STATUS='W'",clsFinYear.getDBURL(CompanyID,Integer.parseInt(FromDate.substring(0,4)))));
                    Msg += EITLERPGLOBAL.padRight(15,clsCompany.getCityName(CompanyID), " ") + EITLERPGLOBAL.padRight(15,VoucherNo," ") + EITLERPGLOBAL.padRightEx(ReceivedDate," ",20) + UserName+"\n";
                    Found = true;
                    rsData.next();
                }
            }
            if(Found) {
                Msg += "Kindly approve or cancell it.";
                JOptionPane.showMessageDialog(this,Msg,"Pending Voucher List",JOptionPane.ERROR_MESSAGE );
                lblStatus.setText("...");
                lblProgressInfo.setText("...");
                return false;
            }
            
            if(OpgUpdateClosing.isSelected()) {
                if(java.sql.Date.valueOf(FromDate).before(java.sql.Date.valueOf("2010-04-01"))) {
                    JOptionPane.showMessageDialog(this,"As closing system is online after 01/04/2010. \nSo you can not select later date to update closing.","Wrong Updation",JOptionPane.ERROR_MESSAGE );
                    lblStatus.setText("...");
                    lblProgressInfo.setText("...");
                    return false;
                }
            }
        } catch(Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
    
    private void CreateClosing() {
        try {
            new Thread() {
                public void run() {
                    Connection Conn=null;
                    Statement stClosingHeader=null,stClosingDetail=null;
                    ResultSet rsClosingHeader=null,rsClosingDetail=null,rsGL=null,rsParty=null;
                    long SrNo = 0;
                    String MainAccountCode = "",SubAccountCode="";
                    double Amount = 0.0;
                    try {
                        String FromDate = EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
                        String ToDate =  EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());
                        lblStatus.setText("Wait while gethering information...");
                        Conn = data.getConn(FinanceGlobal.FinURL);
                        stClosingHeader = Conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                        rsClosingHeader = stClosingHeader.executeQuery("SELECT * FROM D_FIN_OPENING_HEADER LIMIT 1");
                        
                        stClosingDetail = Conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                        rsClosingDetail = stClosingDetail.executeQuery("SELECT * FROM D_FIN_OPENING_DETAIL LIMIT 1");
                        
                        String SQL = "SELECT MAX(ENTRY_NO) FROM D_FIN_OPENING_HEADER ORDER BY ENTRY_DATE";
                        int EntryNo = data.getIntValueFromDB(SQL,FinanceGlobal.FinURL)+1;
                        lblStatus.setText("Creating closing for nominals...");
                        rsClosingHeader.moveToInsertRow();
                        rsClosingHeader.updateInt("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
                        rsClosingHeader.updateLong("ENTRY_NO",EntryNo);
                        rsClosingHeader.updateString("ENTRY_DATE", ToDate);
                        rsClosingHeader.updateString("REMARKS","CLOSING BALANCE AS ON " + EITLERPGLOBAL.formatDate(ToDate));
                        rsClosingHeader.updateString("CREATED_BY",EITLERPGLOBAL.gLoginID);
                        rsClosingHeader.updateString("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
                        rsClosingHeader.updateString("MODIFIED_BY",EITLERPGLOBAL.gLoginID);
                        rsClosingHeader.updateString("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
                        rsClosingHeader.updateBoolean("CHANGED", true);
                        rsClosingHeader.updateString("CHANGED_DATE", EITLERPGLOBAL.getCurrentDateDB());
                        rsClosingHeader.insertRow();
                        
                        SrNo = 0;
                        SQL = "SELECT MAIN_ACCOUNT_CODE FROM D_FIN_GL WHERE SUB_ACCOUNT_CODE='' AND APPROVED=1 AND CANCELLED=0 ORDER BY MAIN_ACCOUNT_CODE";
                        rsGL = data.getResult(SQL,FinanceGlobal.FinURL);
                        rsGL.first();
                        while(!rsGL.isAfterLast()) {
                            SrNo++;
                            MainAccountCode = rsGL.getString("MAIN_ACCOUNT_CODE");
                            lblProgressInfo.setText(MainAccountCode);
                            rsClosingDetail.moveToInsertRow();
                            rsClosingDetail.updateInt("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
                            rsClosingDetail.updateLong("ENTRY_NO",EntryNo);
                            rsClosingDetail.updateLong("SR_NO",SrNo);
                            rsClosingDetail.updateString("MAIN_ACCOUNT_CODE",MainAccountCode);
                            rsClosingDetail.updateString("SUB_ACCOUNT_CODE","");
                            Amount = clsAccount.getClosingBalance(MainAccountCode, "", ToDate,true);
                            if(Amount<0) {
                                rsClosingDetail.updateDouble("AMOUNT",Math.abs(Amount));
                                rsClosingDetail.updateString("EFFECT","C");
                            } else {
                                rsClosingDetail.updateDouble("AMOUNT",Amount);
                                rsClosingDetail.updateString("EFFECT","D");
                            }
                            rsClosingDetail.updateString("CREATED_BY",EITLERPGLOBAL.gLoginID);
                            rsClosingDetail.updateString("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
                            rsClosingDetail.updateString("MODIFIED_BY",EITLERPGLOBAL.gLoginID);
                            rsClosingDetail.updateString("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
                            rsClosingDetail.updateBoolean("CHANGED", true);
                            rsClosingDetail.updateString("CHANGED_DATE", EITLERPGLOBAL.getCurrentDateDB());
                            rsClosingDetail.insertRow();
                            rsGL.next();
                        }
                        lblStatus.setText("Creating closing for subsidairy...");
                        SQL = "SELECT DISTINCT MAIN_ACCOUNT_CODE,PARTY_CODE FROM D_FIN_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND MAIN_ACCOUNT_CODE<>'' AND PARTY_CODE<>'' ORDER BY MAIN_ACCOUNT_CODE,PARTY_CODE";
                        rsParty = data.getResult(SQL,FinanceGlobal.FinURL);
                        rsParty.first();
                        while(!rsParty.isAfterLast()) {
                            SrNo++;
                            MainAccountCode = rsParty.getString("MAIN_ACCOUNT_CODE");
                            SubAccountCode = rsParty.getString("PARTY_CODE");
                            lblProgressInfo.setText(MainAccountCode + "  " + SubAccountCode);
                            rsClosingDetail.moveToInsertRow();
                            rsClosingDetail.updateInt("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
                            rsClosingDetail.updateLong("ENTRY_NO",EntryNo);
                            rsClosingDetail.updateLong("SR_NO",SrNo);
                            rsClosingDetail.updateString("MAIN_ACCOUNT_CODE",MainAccountCode);
                            rsClosingDetail.updateString("SUB_ACCOUNT_CODE",SubAccountCode);
                            Amount = clsAccount.getClosingBalance(MainAccountCode, SubAccountCode, ToDate,true);
                            if(Amount<0) {
                                rsClosingDetail.updateDouble("AMOUNT",Math.abs(Amount));
                                rsClosingDetail.updateString("EFFECT","C");
                            } else {
                                rsClosingDetail.updateDouble("AMOUNT",Amount);
                                rsClosingDetail.updateString("EFFECT","D");
                            }
                            rsClosingDetail.updateString("CREATED_BY",EITLERPGLOBAL.gLoginID);
                            rsClosingDetail.updateString("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
                            rsClosingDetail.updateString("MODIFIED_BY",EITLERPGLOBAL.gLoginID);
                            rsClosingDetail.updateString("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
                            rsClosingDetail.updateBoolean("CHANGED", true);
                            rsClosingDetail.updateString("CHANGED_DATE", EITLERPGLOBAL.getCurrentDateDB());
                            rsClosingDetail.insertRow();
                            rsParty.next();
                        }
                        lblStatus.setText("Finished...");
                        lblProgressInfo.setText("...");
                        GenerateGrid();
                    } catch(Exception e) {
                        lblStatus.setText("error...");
                        lblProgressInfo.setText("...");
                        JOptionPane.showMessageDialog(null,e.getMessage());
                        e.printStackTrace();
                    }
                };
            }.start();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    private void UpdateClosing() {
        try {
            new Thread() {
                public void run() {
                    Connection Conn=null;
                    Statement stClosingHeader=null,stClosingDetail=null;
                    ResultSet rsClosingHeader=null,rsClosingDetail=null,rsGL=null,rsParty=null;
                    long SrNo = 0;
                    String MainAccountCode = "",SubAccountCode="",Effect="";
                    double Amount = 0.0;
                    try {
                        String FromDate = EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
                        String ToDate =  EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());
                        lblStatus.setText("Wait while gethering information...");
                        
                        Conn = data.getConn(FinanceGlobal.FinURL);
                        stClosingHeader = Conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                        rsClosingHeader = stClosingHeader.executeQuery("SELECT * FROM D_FIN_OPENING_HEADER LIMIT 1");
                        
                        stClosingDetail = Conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                        rsClosingDetail = stClosingDetail.executeQuery("SELECT * FROM D_FIN_OPENING_DETAIL LIMIT 1");
                        
                        String SQL = "SELECT MAX(ENTRY_NO) FROM D_FIN_OPENING_HEADER WHERE ENTRY_DATE<'"+ToDate+"' ORDER BY ENTRY_DATE";
                        int EntryNo = data.getIntValueFromDB(SQL,FinanceGlobal.FinURL)+1;
                        lblStatus.setText("Updating closing for nominals...");
                        
                        SrNo = 0;
                        SQL = "SELECT MAIN_ACCOUNT_CODE FROM D_FIN_GL WHERE SUB_ACCOUNT_CODE='' ORDER BY MAIN_ACCOUNT_CODE";
                        rsGL = data.getResult(SQL,FinanceGlobal.FinURL);
                        rsGL.first();
                        while(!rsGL.isAfterLast()) {
                            MainAccountCode = rsGL.getString("MAIN_ACCOUNT_CODE");
                            lblProgressInfo.setText(MainAccountCode);
                            Amount = clsAccount.getClosingBalance(MainAccountCode, "", ToDate,true);
                            if(Amount<0) {
                                Effect="C";
                            } else {
                                Effect="D";
                            }
                            if(data.IsRecordExist("SELECT * FROM D_FIN_OPENING_DETAIL WHERE ENTRY_NO="+EntryNo+" AND MAIN_ACCOUNT_CODE='"+MainAccountCode+"' AND SUB_ACCOUNT_CODE='' ",FinanceGlobal.FinURL)) {
                                data.Execute("UPDATE D_FIN_OPENING_DETAIL SET AMOUNT="+Math.abs(Amount)+",EFFECT='"+Effect+"' WHERE ENTRY_NO="+EntryNo+" AND MAIN_ACCOUNT_CODE='"+MainAccountCode+"' AND SUB_ACCOUNT_CODE='' ",FinanceGlobal.FinURL);
                            } else {
                                SrNo = data.getIntValueFromDB("SELECT MAX(SR_NO) FROM D_FIN_OPENING_DETAIL WHERE ENTRY_NO="+EntryNo+" ",FinanceGlobal.FinURL)+1;
                                rsClosingDetail.moveToInsertRow();
                                rsClosingDetail.updateInt("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
                                rsClosingDetail.updateLong("ENTRY_NO",EntryNo);
                                rsClosingDetail.updateLong("SR_NO",SrNo);
                                rsClosingDetail.updateString("MAIN_ACCOUNT_CODE",MainAccountCode);
                                rsClosingDetail.updateString("SUB_ACCOUNT_CODE","");
                                if(Amount<0) {
                                    rsClosingDetail.updateDouble("AMOUNT",Math.abs(Amount));
                                    rsClosingDetail.updateString("EFFECT","C");
                                } else {
                                    rsClosingDetail.updateDouble("AMOUNT",Amount);
                                    rsClosingDetail.updateString("EFFECT","D");
                                }
                                rsClosingDetail.updateString("CREATED_BY",EITLERPGLOBAL.gLoginID);
                                rsClosingDetail.updateString("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
                                rsClosingDetail.updateString("MODIFIED_BY",EITLERPGLOBAL.gLoginID);
                                rsClosingDetail.updateString("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
                                rsClosingDetail.updateBoolean("CHANGED", true);
                                rsClosingDetail.updateString("CHANGED_DATE", EITLERPGLOBAL.getCurrentDateDB());
                                rsClosingDetail.insertRow();
                            }
                            rsGL.next();
                        }
                        
                        lblStatus.setText("Updating closing for subsidairy...");
                        SQL = "SELECT DISTINCT MAIN_ACCOUNT_CODE,PARTY_CODE FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE<>'' AND PARTY_CODE<>'' ORDER BY MAIN_ACCOUNT_CODE,PARTY_CODE";
                        rsParty = data.getResult(SQL,FinanceGlobal.FinURL);
                        rsParty.first();
                        while(!rsParty.isAfterLast()) {
                            //SrNo++;
                            MainAccountCode = rsParty.getString("MAIN_ACCOUNT_CODE");
                            SubAccountCode = rsParty.getString("PARTY_CODE");
                            lblProgressInfo.setText(MainAccountCode + "  " + SubAccountCode);
                            
                            Amount = clsAccount.getClosingBalance(MainAccountCode, SubAccountCode, ToDate,true);
                            if(Amount<0) {
                                Effect="C";
                            } else {
                                Effect="D";
                            }
                            
                            if(data.IsRecordExist("SELECT * FROM D_FIN_OPENING_DETAIL WHERE ENTRY_NO="+EntryNo+" AND MAIN_ACCOUNT_CODE='"+MainAccountCode+"' AND SUB_ACCOUNT_CODE='"+SubAccountCode+"' ",FinanceGlobal.FinURL)) {
                                data.Execute("UPDATE D_FIN_OPENING_DETAIL SET AMOUNT="+Math.abs(Amount)+",EFFECT='"+Effect+"' WHERE ENTRY_NO="+EntryNo+" AND MAIN_ACCOUNT_CODE='"+MainAccountCode+"' AND SUB_ACCOUNT_CODE='"+SubAccountCode+"' ",FinanceGlobal.FinURL);
                            } else {
                                SrNo = data.getIntValueFromDB("SELECT MAX(SR_NO) FROM D_FIN_OPENING_DETAIL WHERE ENTRY_NO="+EntryNo+" ",FinanceGlobal.FinURL)+1;
                                rsClosingDetail.moveToInsertRow();
                                rsClosingDetail.updateInt("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
                                rsClosingDetail.updateLong("ENTRY_NO",EntryNo);
                                rsClosingDetail.updateLong("SR_NO",SrNo);
                                rsClosingDetail.updateString("MAIN_ACCOUNT_CODE",MainAccountCode);
                                rsClosingDetail.updateString("SUB_ACCOUNT_CODE",SubAccountCode);
                                if(Amount<0) {
                                    rsClosingDetail.updateDouble("AMOUNT",Math.abs(Amount));
                                    rsClosingDetail.updateString("EFFECT","C");
                                } else {
                                    rsClosingDetail.updateDouble("AMOUNT",Amount);
                                    rsClosingDetail.updateString("EFFECT","D");
                                }
                                rsClosingDetail.updateString("CREATED_BY",EITLERPGLOBAL.gLoginID);
                                rsClosingDetail.updateString("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
                                rsClosingDetail.updateString("MODIFIED_BY",EITLERPGLOBAL.gLoginID);
                                rsClosingDetail.updateString("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
                                rsClosingDetail.updateBoolean("CHANGED", true);
                                rsClosingDetail.updateString("CHANGED_DATE", EITLERPGLOBAL.getCurrentDateDB());
                                rsClosingDetail.insertRow();
                            }
                            rsParty.next();
                        }
                        lblStatus.setText("Finished...");
                        lblProgressInfo.setText("...");
                        GenerateGrid();
                    } catch(Exception e) {
                        lblStatus.setText("error...");
                        lblProgressInfo.setText("...");
                        JOptionPane.showMessageDialog(null,e.getMessage());
                        e.printStackTrace();
                    }
                };
            }.start();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    public void CheckParty() {
        ProcessDone=false;
        new Thread() {
            public void run() {
                try {
                    String SQL = "SELECT MAIN_ACCOUNT_CODE FROM D_FIN_GL WHERE IS_SUBSIDAIRY=1 AND APPROVED=1 AND CANCELLED=0 ORDER BY MAIN_ACCOUNT_CODE";
                    ResultSet rsGL = data.getResult(SQL,FinanceGlobal.FinURL);
                    ResultSet rsMainCode = null;
                    rsGL.first();
                    while(!rsGL.isAfterLast()) {
                        System.out.println ("MainCode");
                        String MainCode = rsGL.getString("MAIN_ACCOUNT_CODE");
                        //System.out.println("MainCode : " + MainCode);
                        SQL="SELECT ENTRY_NO FROM D_FIN_OPENING_HEADER WHERE ENTRY_DATE<CURDATE() ORDER BY ENTRY_DATE DESC";
                        int EntryNo=data.getIntValueFromDB(SQL,FinanceGlobal.FinURL);
                        SQL="SELECT ENTRY_DATE FROM D_FIN_OPENING_HEADER WHERE ENTRY_NO="+EntryNo;
                        String OpeningDate=data.getStringValueFromDB(SQL,FinanceGlobal.FinURL);
                        SQL="(SELECT DISTINCT MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE FROM D_FIN_OPENING_DETAIL " +
                        "WHERE MAIN_ACCOUNT_CODE='"+MainCode+"' AND SUB_ACCOUNT_CODE<>'' AND ENTRY_NO="+EntryNo+") " +
                        "UNION " +
                        "(SELECT DISTINCT B.MAIN_ACCOUNT_CODE,B.SUB_ACCOUNT_CODE FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B " +
                        "WHERE A.CANCELLED=0 AND A.VOUCHER_DATE>'"+OpeningDate+"' AND A.VOUCHER_DATE<=CURDATE() " +
                        "AND B.MAIN_ACCOUNT_CODE='"+MainCode+"' AND A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 ) " +
                        "ORDER BY MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE ";
                        rsMainCode = data.getResult(SQL,FinanceGlobal.FinURL);
                        rsMainCode.first();
                        System.out.println (MainCode);
                        if(rsMainCode.getRow()>0) {
                            while(!rsMainCode.isAfterLast()) {
                                String SubCode = rsMainCode.getString("SUB_ACCOUNT_CODE");
                                lblProgressInfo.setText(MainCode + " " + SubCode);
                                if(!data.IsRecordExist("SELECT * FROM D_FIN_PARTY_MASTER WHERE PARTY_CODE='"+SubCode+"' AND MAIN_ACCOUNT_CODE='"+MainCode+"' AND APPROVED=1 AND CANCELLED=0",FinanceGlobal.FinURL)) {
                                   // System.out.println("Party Code : " + SubCode + " Main Code : " + MainCode);
                                    ListofParty += "Main Code : " + MainCode + " Party Code : " + SubCode+"\n";
                                }
                                 System.out.println("Party Code : " + SubCode + " Main Code : " + MainCode);
                                 rsMainCode.next();
                            }
                        }
                        
                        rsGL.next();
                    }
                    ProcessDone = true;
                    System.out.println(ProcessDone);
                } catch (Exception e) {
                    ProcessDone = true;
                    JOptionPane.showMessageDialog(null,e.getMessage());
                    e.printStackTrace();
                    
                }
            };
        }.start();
    }
    
    public void CheckParty1() {
        ProcessDone=false;        
                try {
                    String SQL = "SELECT MAIN_ACCOUNT_CODE FROM D_FIN_GL WHERE IS_SUBSIDAIRY=1 AND APPROVED=1 AND CANCELLED=0 ORDER BY MAIN_ACCOUNT_CODE";
                    ResultSet rsGL = data.getResult(SQL,FinanceGlobal.FinURL);
                    ResultSet rsMainCode = null;
                    rsGL.first();
                    while(!rsGL.isAfterLast()) {
                        System.out.println ("MainCode");
                        String MainCode = rsGL.getString("MAIN_ACCOUNT_CODE");
                        //System.out.println("MainCode : " + MainCode);
                        SQL="SELECT ENTRY_NO FROM D_FIN_OPENING_HEADER WHERE ENTRY_DATE<CURDATE() ORDER BY ENTRY_DATE DESC";
                        int EntryNo=data.getIntValueFromDB(SQL,FinanceGlobal.FinURL);
                        SQL="SELECT ENTRY_DATE FROM D_FIN_OPENING_HEADER WHERE ENTRY_NO="+EntryNo;
                        String OpeningDate=data.getStringValueFromDB(SQL,FinanceGlobal.FinURL);
                        SQL="(SELECT DISTINCT MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE FROM D_FIN_OPENING_DETAIL " +
                        "WHERE MAIN_ACCOUNT_CODE='"+MainCode+"' AND SUB_ACCOUNT_CODE<>'' AND ENTRY_NO="+EntryNo+") " +
                        "UNION " +
                        "(SELECT DISTINCT B.MAIN_ACCOUNT_CODE,B.SUB_ACCOUNT_CODE FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B " +
                        "WHERE A.CANCELLED=0 AND A.VOUCHER_DATE>'"+OpeningDate+"' AND A.VOUCHER_DATE<=CURDATE() " +
                        "AND B.MAIN_ACCOUNT_CODE='"+MainCode+"' AND A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 ) " +
                        "ORDER BY MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE ";
                        rsMainCode = data.getResult(SQL,FinanceGlobal.FinURL);
                        rsMainCode.first();
                        System.out.println (MainCode);
                        if(rsMainCode.getRow()>0) {
                            while(!rsMainCode.isAfterLast()) {
                                String SubCode = rsMainCode.getString("SUB_ACCOUNT_CODE");
                                lblProgressInfo.setText(MainCode + " " + SubCode);
                                if(!data.IsRecordExist("SELECT * FROM D_FIN_PARTY_MASTER WHERE PARTY_CODE='"+SubCode+"' AND MAIN_ACCOUNT_CODE='"+MainCode+"' AND APPROVED=1 AND CANCELLED=0",FinanceGlobal.FinURL)) {
                                    System.out.println("Party Code : " + SubCode + " Main Code : " + MainCode);
                                    ListofParty += "Main Code : " + MainCode + " Party Code : " + SubCode+"\n";
                                }
                                 //System.out.println("Party Code : " + SubCode + " Main Code : " + MainCode);
                                 rsMainCode.next();
                            }
                        }
                        
                        rsGL.next();
                    }
                    ProcessDone = true;
                    System.out.println(ProcessDone);
                } catch (Exception e) {
                    ProcessDone = true;
                    JOptionPane.showMessageDialog(null,e.getMessage());
                    e.printStackTrace();
                    
                }            
    }
    
    private void CheckVouchers() {
        new Thread() {
            public void run() {
                try {
                    
                    TReportWriter.SimpleDataProvider.TRow objRow;
                    TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
                    String strSQL = "";
                    int Counter = 0;
                    objReportData.AddColumn("SR_NO");
                    objReportData.AddColumn("VOUCHER_NO");
                    objReportData.AddColumn("TABLE");
                    
                    
                    TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
                    objOpeningRow.setValue("SR_NO","");
                    objOpeningRow.setValue("VOUCHER_NO","");
                    objOpeningRow.setValue("TABLE","");
                    
                    strSQL = "SELECT DISTINCT VOUCHER_NO,COMPANY_ID FROM D_FIN_VOUCHER_HEADER " +
                    "WHERE VOUCHER_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) +"' " +
                    "AND VOUCHER_TYPE<> '5' AND VOUCHER_DATE<='"+ EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) +"' " +
                    "AND CANCELLED=0 AND VOUCHER_NO NOT LIKE 'M%' ORDER BY COMPANY_ID,VOUCHER_NO";
                    System.out.println(strSQL);
                    
                    ResultSet rsData=data.getResult(strSQL,FinanceGlobal.FinURL);
                    rsData.first();
                    
                    Counter=0;
                    int UserID = EITLERPGLOBAL.gNewUserID;
                    if(rsData.getRow()>0) {
                        while(!rsData.isAfterLast()) {
                            String VoucherNo = UtilFunctions.getString(rsData,"VOUCHER_NO", "");
                            lblProgressInfo.setText(VoucherNo);
                            int CompanyID = UtilFunctions.getInt(rsData,"COMPANY_ID", 0);
                            String dbURL = clsFinYear.getDBURL(CompanyID,Integer.parseInt(EITLERPGLOBAL.getFinYearStartDate(EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim())).substring(0,4)));
                            if(!data.IsRecordExist("SELECT * FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"'",FinanceGlobal.FinURL)) {
                                Counter++;
                                objRow=objReportData.newRow();
                                objRow.setValue("SR_NO",Integer.toString(Counter));
                                objRow.setValue("VOUCHER_NO",VoucherNo);
                                objRow.setValue("TABLE","D_FIN_VOUCHER_DETAIL");
                                objReportData.AddRow(objRow);
                            }
                            if(!data.IsRecordExist("SELECT * FROM D_FIN_VOUCHER_DETAIL_EX WHERE VOUCHER_NO='"+VoucherNo+"'",FinanceGlobal.FinURL)) {
                                Counter++;
                                objRow=objReportData.newRow();
                                objRow.setValue("SR_NO",Integer.toString(Counter));
                                objRow.setValue("VOUCHER_NO",VoucherNo);
                                objRow.setValue("TABLE","D_FIN_VOUCHER_DETAIL_EX");
                                objReportData.AddRow(objRow);
                            }
                /*           if(!data.IsRecordExist("SELECT * FROM D_COM_DOC_DATA WHERE DOC_NO='"+VoucherNo+"' ", dbURL)) {
                        Counter++;
                                objRow=objReportData.newRow();
                                objRow.setValue("SR_NO",Integer.toString(Counter));
                                objRow.setValue("VOUCHER_NO",VoucherNo);
                                objRow.setValue("TABLE","D_COM_DOC_DATA");
                                objReportData.AddRow(objRow);
                            }
                 */
                            rsData.next();
                        }
                    }
                    
                    HashMap Parameters=new HashMap();
                    Parameters.put("COMPANY_ID",Integer.toString(EITLERPGLOBAL.gCompanyID));
                    Parameters.put("FROM_DATE",txtFromDate.getText().trim());
                    Parameters.put("TO_DATE",txtToDate.getText().trim());
                    Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
                    if(objReportData.getRowCount()>0) {
                        CurrptedVouchers = "Found";
                        objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptCurrptedVouchers.rpt",Parameters,objReportData);
                    }
                    ProcessDone = true;
                } catch(Exception e) {
                    ProcessDone = true;
                    e.printStackTrace();
                }
            };
        }.start();
    }
    
    private void CheckVouchers1() {
              try {
                    
                    TReportWriter.SimpleDataProvider.TRow objRow;
                    TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
                    String strSQL = "";
                    int Counter = 0;
                    objReportData.AddColumn("SR_NO");
                    objReportData.AddColumn("VOUCHER_NO");
                    objReportData.AddColumn("TABLE");
                    
                    
                    TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
                    objOpeningRow.setValue("SR_NO","");
                    objOpeningRow.setValue("VOUCHER_NO","");
                    objOpeningRow.setValue("TABLE","");
                    
                    strSQL = "SELECT DISTINCT VOUCHER_NO,COMPANY_ID FROM D_FIN_VOUCHER_HEADER " +
                    "WHERE VOUCHER_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) +"' " +
                    "AND VOUCHER_TYPE<> '5' AND VOUCHER_DATE<='"+ EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) +"' " +
                    "AND CANCELLED=0 AND VOUCHER_NO NOT LIKE 'M%' ORDER BY COMPANY_ID,VOUCHER_NO";
                    System.out.println(strSQL);
                    
                    ResultSet rsData=data.getResult(strSQL,FinanceGlobal.FinURL);
                    rsData.first();
                    
                    Counter=0;
                    int UserID = EITLERPGLOBAL.gNewUserID;
                    if(rsData.getRow()>0) {
                        while(!rsData.isAfterLast()) {
                            String VoucherNo = UtilFunctions.getString(rsData,"VOUCHER_NO", "");
                            lblProgressInfo.setText(VoucherNo);
                            int CompanyID = UtilFunctions.getInt(rsData,"COMPANY_ID", 0);
                            String dbURL = clsFinYear.getDBURL(CompanyID,Integer.parseInt(EITLERPGLOBAL.getFinYearStartDate(EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim())).substring(0,4)));
                            if(!data.IsRecordExist("SELECT * FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"'",FinanceGlobal.FinURL)) {
                                Counter++;
                                objRow=objReportData.newRow();
                                objRow.setValue("SR_NO",Integer.toString(Counter));
                                objRow.setValue("VOUCHER_NO",VoucherNo);
                                objRow.setValue("TABLE","D_FIN_VOUCHER_DETAIL");
                                objReportData.AddRow(objRow);
                            }
                            if(!data.IsRecordExist("SELECT * FROM D_FIN_VOUCHER_DETAIL_EX WHERE VOUCHER_NO='"+VoucherNo+"'",FinanceGlobal.FinURL)) {
                                Counter++;
                                objRow=objReportData.newRow();
                                objRow.setValue("SR_NO",Integer.toString(Counter));
                                objRow.setValue("VOUCHER_NO",VoucherNo);
                                objRow.setValue("TABLE","D_FIN_VOUCHER_DETAIL_EX");
                                objReportData.AddRow(objRow);
                            }
                /*           if(!data.IsRecordExist("SELECT * FROM D_COM_DOC_DATA WHERE DOC_NO='"+VoucherNo+"' ", dbURL)) {
                        Counter++;
                                objRow=objReportData.newRow();
                                objRow.setValue("SR_NO",Integer.toString(Counter));
                                objRow.setValue("VOUCHER_NO",VoucherNo);
                                objRow.setValue("TABLE","D_COM_DOC_DATA");
                                objReportData.AddRow(objRow);
                            }
                 */
                            rsData.next();
                        }
                    }
                    
                    HashMap Parameters=new HashMap();
                    Parameters.put("COMPANY_ID",Integer.toString(EITLERPGLOBAL.gCompanyID));
                    Parameters.put("FROM_DATE",txtFromDate.getText().trim());
                    Parameters.put("TO_DATE",txtToDate.getText().trim());
                    Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
                    if(objReportData.getRowCount()>0) {
                        CurrptedVouchers = "Found";
                        objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptCurrptedVouchers.rpt",Parameters,objReportData);
                        //objEngine.PreviewReport("http://200.0.0.227:8080/SDMLERP/EITLERP/Reports/finance/rptCurrptedVouchers.rpt",Parameters,objReportData);
                    }
                    ProcessDone = true;
                } catch(Exception e) {
                    ProcessDone = true;
                    e.printStackTrace();
                }        
        
    }
}
