/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP.Finance;

/**
 *
 * @author  nitin
 */
/*<APPLET CODE=frmInward.class HEIGHT=500 WIDTH=665></APPLET>*/

import javax.swing.*;
import java.awt.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import javax.swing.text.*;
import EITLERP.Utils.*;
import java.sql.*;
import java.net.*;
import EITLERP.*;
import TReportWriter.*;
import EITLERP.Utils.SimpleDataProvider.*;
import EITLERP.Finance.Config.*;
import EITLERP.Finance.ReportsUI.*;
import EITLERP.Stores.frmMIRService;


public class frmExpenseTransaction extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsExpenseTransaction objExpense;
    
    private boolean Updating=false;
    
    private String theDocNo="";
    
    private EITLTableModel DataModelA;
    private EITLTableModel DataModelHS;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbModuleModel;
    
    private int SelHierarchyID=0;
    private int lnFromID=0;
    
    private boolean IsGenerating=false;
    
    public frmPendingApprovals frmPA;
    
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    private TReportEngine objEngine=new TReportEngine();
    
    /** Creates new form frmTemplate */
    public frmExpenseTransaction() {
        
        setSize(668,550);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        GenerateCombos();
        
        objExpense=new clsExpenseTransaction();
        
        SetMenuForRights();
        
        if(getName().equals("Link")) {
            
        }
        else {
            
            if(objExpense.LoadData(EITLERPGLOBAL.gCompanyID)) {
                objExpense.MoveFirst();
                DisplayData();
                SetMenuForRights();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+objExpense.LastError);
            }
            
        }
        
        txtAuditRemarks.setVisible(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Header = new javax.swing.JTabbedPane();
        Panel1 = new javax.swing.JPanel();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jTextArea3 = new javax.swing.JTextArea();
        lblAccountCode2 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        lblAccountCode3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtExpenseID = new javax.swing.JTextField();
        txtExpenseName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtExpenseDate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtFromReading = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtToReading = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtExpenseDetails = new javax.swing.JTextArea();
        jLabel22 = new javax.swing.JLabel();
        txtInvoiceAmount = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        txtAmount1Caption = new javax.swing.JTextField();
        txtAmount1 = new javax.swing.JTextField();
        txtAmount2Caption = new javax.swing.JTextField();
        txtAmount2 = new javax.swing.JTextField();
        txtAmount3Caption = new javax.swing.JTextField();
        txtAmount3 = new javax.swing.JTextField();
        txtAmount4Caption = new javax.swing.JTextField();
        txtAmount4 = new javax.swing.JTextField();
        txtAmount5Caption = new javax.swing.JTextField();
        txtAmount5 = new javax.swing.JTextField();
        cmdHistory = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        txtmir = new javax.swing.JTextField();
        lblmirdate = new java.awt.Label();
        cmdviewmir = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        txtInvoiceNo = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtInvoiceDate = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtPartyName = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtPincode = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txtRefDocNo = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtRefDocDate = new javax.swing.JTextField();
        cmbModule = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack2 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        txtAuditRemarks = new javax.swing.JTextField();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText(" MISC. EXPENSE ENTRY");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 666, 25);

        Panel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Panel1MouseClicked(evt);
            }
        });
        Panel1.setLayout(null);
        Panel1.add(jTextArea2);
        jTextArea2.setBounds(177, 29, 0, 17);

        jPanel2.setLayout(null);
        jPanel2.add(jTextArea3);
        jTextArea3.setBounds(177, 29, 0, 17);

        lblAccountCode2.setText("Account Code");
        jPanel2.add(lblAccountCode2);
        lblAccountCode2.setBounds(15, 20, 90, 17);
        jPanel2.add(jTextField3);
        jTextField3.setBounds(119, 18, 80, 27);
        jPanel2.add(jTextField4);
        jTextField4.setBounds(119, 49, 80, 27);

        lblAccountCode3.setText("Account Code");
        jPanel2.add(lblAccountCode3);
        lblAccountCode3.setBounds(15, 51, 90, 17);

        Panel1.add(jPanel2);
        jPanel2.setBounds(0, 0, 0, 0);

        jLabel1.setText("Doc No.");
        Panel1.add(jLabel1);
        jLabel1.setBounds(45, 22, 60, 17);

        txtDocNo.setEnabled(false);
        Panel1.add(txtDocNo);
        txtDocNo.setBounds(101, 20, 110, 27);

        jLabel2.setText("Date");
        Panel1.add(jLabel2);
        jLabel2.setBounds(229, 22, 60, 17);

        txtDocDate.setEnabled(false);
        Panel1.add(txtDocDate);
        txtDocDate.setBounds(285, 20, 110, 27);

        jLabel3.setText("Expense Code");
        Panel1.add(jLabel3);
        jLabel3.setBounds(11, 51, 90, 17);

        txtExpenseID.setEnabled(false);
        txtExpenseID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtExpenseIDFocusLost(evt);
            }
        });
        txtExpenseID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtExpenseIDKeyPressed(evt);
            }
        });
        Panel1.add(txtExpenseID);
        txtExpenseID.setBounds(101, 49, 110, 27);

        txtExpenseName.setEditable(false);
        Panel1.add(txtExpenseName);
        txtExpenseName.setBounds(215, 49, 390, 27);

        jLabel4.setText("Expense Date");
        Panel1.add(jLabel4);
        jLabel4.setBounds(11, 85, 90, 17);

        txtExpenseDate.setNextFocusableComponent(txtAmount1Caption);
        txtExpenseDate.setEnabled(false);
        Panel1.add(txtExpenseDate);
        txtExpenseDate.setBounds(101, 83, 110, 27);

        jLabel5.setForeground(new java.awt.Color(0, 0, 255));
        jLabel5.setText("Expense for the period");
        Panel1.add(jLabel5);
        jLabel5.setBounds(352, 131, 200, 17);

        jLabel6.setText("From Date");
        Panel1.add(jLabel6);
        jLabel6.setBounds(374, 157, 70, 17);

        txtFromDate.setNextFocusableComponent(txtToDate);
        txtFromDate.setEnabled(false);
        Panel1.add(txtFromDate);
        txtFromDate.setBounds(449, 156, 110, 27);

        jLabel7.setText("To Date");
        Panel1.add(jLabel7);
        jLabel7.setBounds(389, 182, 60, 17);

        txtToDate.setNextFocusableComponent(txtFromReading);
        txtToDate.setEnabled(false);
        Panel1.add(txtToDate);
        txtToDate.setBounds(449, 181, 110, 27);

        jLabel8.setForeground(new java.awt.Color(0, 0, 255));
        jLabel8.setText("Reading Details");
        Panel1.add(jLabel8);
        jLabel8.setBounds(355, 213, 200, 17);

        jLabel9.setText("From Reading");
        Panel1.add(jLabel9);
        jLabel9.setBounds(355, 237, 90, 17);

        txtFromReading.setNextFocusableComponent(txtToReading);
        txtFromReading.setEnabled(false);
        Panel1.add(txtFromReading);
        txtFromReading.setBounds(449, 235, 170, 27);

        jLabel10.setText("To Reading");
        Panel1.add(jLabel10);
        jLabel10.setBounds(370, 261, 80, 17);

        txtToReading.setNextFocusableComponent(txtExpenseDetails);
        txtToReading.setEnabled(false);
        Panel1.add(txtToReading);
        txtToReading.setBounds(449, 259, 170, 27);

        jLabel11.setForeground(new java.awt.Color(0, 0, 255));
        jLabel11.setText("Expense Details");
        Panel1.add(jLabel11);
        jLabel11.setBounds(10, 330, 200, 17);

        txtExpenseDetails.setEnabled(false);
        jScrollPane1.setViewportView(txtExpenseDetails);

        Panel1.add(jScrollPane1);
        jScrollPane1.setBounds(13, 350, 600, 50);

        jLabel22.setText("Total Amount Rs.");
        Panel1.add(jLabel22);
        jLabel22.setBounds(22, 262, 130, 17);

        txtInvoiceAmount.setBackground(new java.awt.Color(255, 255, 204));
        txtInvoiceAmount.setNextFocusableComponent(txtFromDate);
        txtInvoiceAmount.setEnabled(false);
        Panel1.add(txtInvoiceAmount);
        txtInvoiceAmount.setBounds(151, 258, 100, 27);

        jLabel23.setForeground(new java.awt.Color(0, 0, 255));
        jLabel23.setText("Amount Bifurcation");
        Panel1.add(jLabel23);
        jLabel23.setBounds(11, 119, 200, 17);

        txtAmount1Caption.setNextFocusableComponent(txtAmount1);
        txtAmount1Caption.setEnabled(false);
        Panel1.add(txtAmount1Caption);
        txtAmount1Caption.setBounds(11, 140, 130, 27);

        txtAmount1.setNextFocusableComponent(txtAmount2Caption);
        txtAmount1.setEnabled(false);
        txtAmount1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAmount1FocusLost(evt);
            }
        });
        Panel1.add(txtAmount1);
        txtAmount1.setBounds(151, 140, 100, 27);

        txtAmount2Caption.setNextFocusableComponent(txtAmount2);
        txtAmount2Caption.setEnabled(false);
        Panel1.add(txtAmount2Caption);
        txtAmount2Caption.setBounds(11, 163, 130, 27);

        txtAmount2.setNextFocusableComponent(txtAmount3Caption);
        txtAmount2.setEnabled(false);
        txtAmount2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAmount2FocusLost(evt);
            }
        });
        Panel1.add(txtAmount2);
        txtAmount2.setBounds(151, 163, 100, 27);

        txtAmount3Caption.setNextFocusableComponent(txtAmount3);
        txtAmount3Caption.setEnabled(false);
        Panel1.add(txtAmount3Caption);
        txtAmount3Caption.setBounds(11, 186, 130, 27);

        txtAmount3.setNextFocusableComponent(txtAmount4Caption);
        txtAmount3.setEnabled(false);
        txtAmount3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAmount3FocusLost(evt);
            }
        });
        Panel1.add(txtAmount3);
        txtAmount3.setBounds(151, 186, 100, 27);

        txtAmount4Caption.setNextFocusableComponent(txtAmount4);
        txtAmount4Caption.setEnabled(false);
        Panel1.add(txtAmount4Caption);
        txtAmount4Caption.setBounds(11, 209, 130, 27);

        txtAmount4.setNextFocusableComponent(txtAmount5Caption);
        txtAmount4.setEnabled(false);
        txtAmount4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAmount4FocusLost(evt);
            }
        });
        Panel1.add(txtAmount4);
        txtAmount4.setBounds(151, 209, 100, 27);

        txtAmount5Caption.setNextFocusableComponent(txtAmount5);
        txtAmount5Caption.setEnabled(false);
        Panel1.add(txtAmount5Caption);
        txtAmount5Caption.setBounds(11, 232, 130, 27);

        txtAmount5.setNextFocusableComponent(txtInvoiceAmount);
        txtAmount5.setEnabled(false);
        txtAmount5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAmount5FocusLost(evt);
            }
        });
        Panel1.add(txtAmount5);
        txtAmount5.setBounds(151, 232, 100, 27);

        cmdHistory.setText("Show Past History");
        cmdHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdHistoryActionPerformed(evt);
            }
        });
        Panel1.add(cmdHistory);
        cmdHistory.setBounds(445, 77, 160, 29);

        jLabel24.setForeground(new java.awt.Color(0, 0, 255));
        jLabel24.setText("MIR Service Detail");
        Panel1.add(jLabel24);
        jLabel24.setBounds(10, 280, 130, 17);

        txtmir.setToolTipText("Press F1 key for search MIR No.");
        txtmir.setEnabled(false);
        txtmir = new JTextFieldHint(new JTextField(),"Search by F1");
        txtmir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtmirKeyPressed(evt);
            }
        });
        Panel1.add(txtmir);
        txtmir.setBounds(10, 300, 130, 27);

        lblmirdate.setText("MIR Date");
        Panel1.add(lblmirdate);
        lblmirdate.setBounds(150, 300, 100, 20);

        cmdviewmir.setText("View MIR");
        cmdviewmir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdviewmirActionPerformed(evt);
            }
        });
        Panel1.add(cmdviewmir);
        cmdviewmir.setBounds(270, 300, 110, 29);

        Header.addTab("Expense Details", Panel1);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel12.setText("Invoice No.");
        jPanel1.add(jLabel12);
        jLabel12.setBounds(30, 19, 80, 17);

        txtInvoiceNo.setEnabled(false);
        jPanel1.add(txtInvoiceNo);
        txtInvoiceNo.setBounds(113, 17, 130, 27);

        jLabel13.setText("Date");
        jPanel1.add(jLabel13);
        jLabel13.setBounds(251, 19, 40, 17);

        txtInvoiceDate.setEnabled(false);
        jPanel1.add(txtInvoiceDate);
        txtInvoiceDate.setBounds(296, 17, 130, 27);

        jLabel14.setText("Party Name");
        jPanel1.add(jLabel14);
        jLabel14.setBounds(30, 49, 80, 17);

        txtPartyName.setEnabled(false);
        jPanel1.add(txtPartyName);
        txtPartyName.setBounds(113, 47, 310, 27);

        jLabel15.setText("Address");
        jPanel1.add(jLabel15);
        jLabel15.setBounds(31, 80, 80, 17);

        txtAddress.setEnabled(false);
        jPanel1.add(txtAddress);
        txtAddress.setBounds(113, 78, 310, 27);

        jLabel16.setText("City");
        jPanel1.add(jLabel16);
        jLabel16.setBounds(32, 112, 80, 17);

        txtCity.setEnabled(false);
        jPanel1.add(txtCity);
        txtCity.setBounds(113, 110, 130, 27);

        jLabel17.setText("Pin");
        jPanel1.add(jLabel17);
        jLabel17.setBounds(253, 112, 40, 17);

        txtPincode.setEnabled(false);
        jPanel1.add(txtPincode);
        txtPincode.setBounds(296, 110, 130, 27);

        jLabel18.setForeground(new java.awt.Color(0, 0, 255));
        jLabel18.setText("Reference Document");
        jPanel1.add(jLabel18);
        jLabel18.setBounds(29, 164, 200, 17);

        jLabel19.setText("Doc No.");
        jPanel1.add(jLabel19);
        jLabel19.setBounds(35, 189, 80, 17);

        txtRefDocNo.setEnabled(false);
        jPanel1.add(txtRefDocNo);
        txtRefDocNo.setBounds(113, 187, 130, 27);

        jLabel20.setText("Date");
        jPanel1.add(jLabel20);
        jLabel20.setBounds(256, 189, 40, 17);

        txtRefDocDate.setEnabled(false);
        jPanel1.add(txtRefDocDate);
        txtRefDocDate.setBounds(296, 187, 130, 27);

        cmbModule.setEnabled(false);
        jPanel1.add(cmbModule);
        cmbModule.setBounds(113, 218, 190, 27);

        jLabel21.setText("Document");
        jPanel1.add(jLabel21);
        jLabel21.setBounds(35, 223, 80, 17);

        Header.addTab("Party Details", jPanel1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(16, 18, 66, 17);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 14, 184, 27);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(20, 52, 56, 17);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 50, 182, 27);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(20, 82, 62, 17);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 78, 468, 27);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 120, 86, 17);

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel7.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel7.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 22);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel7.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel7.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        jPanel7.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel7);
        jPanel7.setBounds(88, 120, 182, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(18, 232, 60, 17);

        cmbSendTo.setEnabled(false);
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(88, 228, 184, 27);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(16, 264, 60, 17);

        txtToRemarks.setEnabled(false);
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 260, 516, 27);

        cmdBack2.setText("<< Back");
        Tab2.add(cmdBack2);
        cmdBack2.setBounds(534, 350, 102, 29);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(559, 77, 33, 21);

        Header.addTab("Approval", Tab2);

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel6.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel6.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 17);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel6.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 614, 144);

        lblDocumentHistory.setText("Document Update History");
        jPanel6.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 191, 182, 17);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel6.add(jScrollPane3);
        jScrollPane3.setBounds(13, 207, 473, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        jPanel6.add(cmdViewHistory);
        cmdViewHistory.setBounds(498, 242, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        jPanel6.add(cmdNormalView);
        cmdNormalView.setBounds(498, 273, 132, 24);

        cmdPreviewA.setText("Preview Report");
        jPanel6.add(cmdPreviewA);
        cmdPreviewA.setBounds(498, 209, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel6.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(498, 305, 132, 24);

        Header.addTab("Status", jPanel6);

        getContentPane().add(Header);
        Header.setBounds(2, 66, 654, 450);
        Header.getAccessibleContext().setAccessibleName("Account Details");
        Header.getAccessibleContext().setAccessibleDescription("Account Details");

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(1, 271, 650, 22);

        txtAuditRemarks.setEnabled(false);
        getContentPane().add(txtAuditRemarks);
        txtAuditRemarks.setBounds(525, 461, 129, 27);
    }// </editor-fold>//GEN-END:initComponents
    
    private void cmdHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdHistoryActionPerformed
        // TODO add your handling code here:
        try {
            
            
            String ExpenseID=txtExpenseID.getText();
            frmExpenseList objList=new frmExpenseList();
            objList.ExpesneID=ExpenseID;
            objList.ShowDialog();
            
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_cmdHistoryActionPerformed
    
    private void txtAmount5FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAmount5FocusLost
        // TODO add your handling code here:
        doTotal();
    }//GEN-LAST:event_txtAmount5FocusLost
    
    private void txtAmount4FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAmount4FocusLost
        // TODO add your handling code here:
        doTotal();
    }//GEN-LAST:event_txtAmount4FocusLost
    
    private void txtAmount3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAmount3FocusLost
        // TODO add your handling code here:
        doTotal();
    }//GEN-LAST:event_txtAmount3FocusLost
    
    private void txtAmount2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAmount2FocusLost
        // TODO add your handling code here:
        doTotal();
    }//GEN-LAST:event_txtAmount2FocusLost
    
    private void txtAmount1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAmount1FocusLost
        // TODO add your handling code here:
        doTotal();
    }//GEN-LAST:event_txtAmount1FocusLost
    
    private void txtExpenseIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtExpenseIDFocusLost
        // TODO add your handling code here:
        txtExpenseName.setText(clsExpense.getExpenseName(txtExpenseID.getText()));
        
        try {
            
            
            if(EditMode==EITLERPGLOBAL.ADD) {
                String MainCode=clsExpense.getMainCode(txtExpenseID.getText());
                
                if(data.IsRecordExist("SELECT * FROM D_FIN_EXPENSE_CAPTIONS WHERE MAIN_ACCOUNT_CODE='"+MainCode+"'",FinanceGlobal.FinURL)) {
                    ResultSet rsTmp=data.getResult("SELECT * FROM D_FIN_EXPENSE_CAPTIONS WHERE MAIN_ACCOUNT_CODE='"+MainCode+"'",FinanceGlobal.FinURL);
                    rsTmp.first();
                    if(rsTmp.getRow()>0) {
                        txtAmount1Caption.setText(UtilFunctions.getString(rsTmp,"CAPTION_1",""));
                        txtAmount2Caption.setText(UtilFunctions.getString(rsTmp,"CAPTION_2",""));
                        txtAmount3Caption.setText(UtilFunctions.getString(rsTmp,"CAPTION_3",""));
                        txtAmount4Caption.setText(UtilFunctions.getString(rsTmp,"CAPTION_4",""));
                        txtAmount5Caption.setText(UtilFunctions.getString(rsTmp,"CAPTION_5",""));
                    }
                }
            }
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_txtExpenseIDFocusLost
    
    private void txtExpenseIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtExpenseIDKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==112) {
            
            LOV aList=new LOV();
            
            aList.SQL="SELECT EXPENSE_ID,EXPENSE_DESCRIPTION FROM D_FIN_EXPENSE_MASTER WHERE APPROVED=1 ORDER BY EXPENSE_DESCRIPTION";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            aList.UseSpecifiedConn=true;
            aList.dbURL=FinanceGlobal.FinURL;
            
            if(aList.ShowLOV()) {
                txtExpenseID.setText(aList.ReturnVal);
                txtExpenseName.setText(clsExpense.getExpenseName(txtExpenseID.getText()));
            }
        }
    }//GEN-LAST:event_txtExpenseIDKeyPressed
    
    private void Panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Panel1MouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_Panel1MouseClicked
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
        
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        objExpense.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveFirst();
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        objExpense.ShowHistory(EITLERPGLOBAL.gCompanyID, objExpense.getAttribute("DOC_NO").getString());
        MoveFirst();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
        
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
        
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if(ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID,clsExpenseTransaction.ModuleID , objExpense.getAttribute("DOC_NO").getString())) {
                cmbSendTo.setEnabled(true);
            }
            else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateFromCombo();
        }
        
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
        
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        objExpense.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void txtmirKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtmirKeyPressed
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {

            if (evt.getKeyCode() == 112) //F1 Key pressed
            {
                LOV aList = new LOV();
                //aList.SQL="SELECT PARTY_CODE,NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER ORDER BY NAME";
                //                aList.SQL = "SELECT NULL,PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='210010' AND LEFT(PARTY_CODE,1)='8' ";
                aList.SQL = "SELECT CONCAT(MIR_NO,DATE_FORMAT(MIR_DATE,'%d/%m/%Y')) AS SELE_KEY,MIR_NO,DATE_FORMAT(MIR_DATE,'%d/%m/%Y') AS MIR_DATE,I.SUPP_ID,SUPP_NAME AS NAME,INVOICE_NO,DATE_FORMAT(INVOICE_DATE,'%d/%m/%Y') AS INVOICE_DATE FROM D_INV_MIR_HEADER I "
                        + " LEFT JOIN D_COM_SUPP_MASTER M "
                        + " ON I.SUPP_ID=M.SUPPLIER_CODE "
                        + " WHERE I.MIR_TYPE=3 AND I.APPROVED=1 AND (I.CANCELLED=0 OR I.CANCELLED IS NULL)";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 1;
                //aList.DefaultSearchOn=1;

                if (aList.ShowLOV()) {
                    txtmir.setText(aList.ReturnVal.substring(0, 7));
                    lblmirdate.setText(aList.ReturnVal.substring(7));
                    String s = "SELECT CONCAT(MIR_NO,DATE_FORMAT(MIR_DATE,'%d/%m/%Y')) AS SELE_KEY,MIR_NO,"
                            + "DATE_FORMAT(MIR_DATE,'%d/%m/%Y') AS MIR_DATE,I.SUPP_ID,SUPP_NAME AS NAME,"
                            + "INVOICE_NO,DATE_FORMAT(INVOICE_DATE,'%d/%m/%Y') AS INVOICE_DATE,ADD1,CITY,PINCODE "
                            + " FROM D_INV_MIR_HEADER I "
                            + " LEFT JOIN D_COM_SUPP_MASTER M "
                            + " ON I.SUPP_ID=M.SUPPLIER_CODE "
                            + " WHERE I.MIR_TYPE=3 AND I.APPROVED=1 AND (I.CANCELLED=0 OR I.CANCELLED IS NULL) "
                            + " AND MIR_NO='" + txtmir.getText() + "' AND DATE_FORMAT(MIR_DATE,'%d/%m/%Y')='" + lblmirdate.getText() + "'";
                    try {
                        ResultSet t = data.getResult(s);
                        t.first();
                        txtInvoiceNo.setText(t.getString("INVOICE_NO"));
                        txtInvoiceDate.setText(t.getString("INVOICE_DATE"));
                        txtPartyName.setText(t.getString("NAME"));
                        txtAddress.setText(t.getString("ADD1"));
                        txtCity.setText(t.getString("CITY"));
                        txtPincode.setText(t.getString("PINCODE"));
                        txtRefDocNo.setText(t.getString("MIR_NO"));
                        txtRefDocDate.setText(t.getString("MIR_DATE"));                        
                        cmbModule.setSelectedItem("MIR Service");
                        
                        double taxableAmt=0;
                        double cgst=0;
                        double sgst=0;
                        double igst=0;
                        double netAmt=0;
                        taxableAmt = data.getDoubleValueFromDB("SELECT TOTAL_AMOUNT FROM D_INV_MIR_DETAIL WHERE MIR_NO='"+t.getString("MIR_NO")+"'");
                        netAmt = data.getDoubleValueFromDB("SELECT NET_AMOUNT FROM D_INV_MIR_DETAIL WHERE MIR_NO='"+t.getString("MIR_NO")+"'");
                        cgst = data.getDoubleValueFromDB("SELECT COLUMN_3_AMT FROM D_INV_MIR_DETAIL WHERE MIR_NO='"+t.getString("MIR_NO")+"'");
                        sgst = data.getDoubleValueFromDB("SELECT COLUMN_4_AMT FROM D_INV_MIR_DETAIL WHERE MIR_NO='"+t.getString("MIR_NO")+"'");
                        igst = data.getDoubleValueFromDB("SELECT COLUMN_5_AMT FROM D_INV_MIR_DETAIL WHERE MIR_NO='"+t.getString("MIR_NO")+"'");
                        
                        if(taxableAmt!=0){
                        txtAmount1Caption.setText("Taxable Amt");
                        txtAmount1.setText(Double.toString(taxableAmt));
                        }
                        if(igst==0){
                            if(cgst!=0){
                                txtAmount2Caption.setText("CGST");
                                txtAmount2.setText(Double.toString(cgst));
                            }
                            if(sgst!=0){
                                txtAmount3Caption.setText("SGST");
                                txtAmount3.setText(Double.toString(sgst));
                            }
                        }else{                            
                                txtAmount2Caption.setText("IGST");
                                txtAmount2.setText(Double.toString(igst));                            
                        }
                        if(netAmt!=0){
                            txtInvoiceAmount.setText(Double.toString(netAmt)); 
                        }
                        //doTotal();
                    } catch (Exception q) {

                    }

                }
            }
        }
    }//GEN-LAST:event_txtmirKeyPressed

    private void cmdviewmirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdviewmirActionPerformed
if (txtmir.getText().trim().length() >= 7) {
            String DocNo = txtmir.getText();
            AppletFrame aFrame = new AppletFrame("MIR Service");
            aFrame.startAppletEx("EITLERP.Stores.frmMIRService", "MIR Service");
            frmMIRService ObjItem = (frmMIRService) aFrame.ObjApplet;            
            ObjItem.FindEx(EITLERPGLOBAL.gCompanyID,txtmir.getText());
            
            aFrame.setVisible(true);
            aFrame.dispose();
        } else {
            JOptionPane.showMessageDialog(null, "Select Service MIR to View..." + objExpense.LastError);
        }
    }//GEN-LAST:event_cmdviewmirActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Header;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel Panel1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbModule;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdHistory;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JButton cmdviewmir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JLabel lblAccountCode2;
    private javax.swing.JLabel lblAccountCode3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private java.awt.Label lblmirdate;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtAmount1;
    private javax.swing.JTextField txtAmount1Caption;
    private javax.swing.JTextField txtAmount2;
    private javax.swing.JTextField txtAmount2Caption;
    private javax.swing.JTextField txtAmount3;
    private javax.swing.JTextField txtAmount3Caption;
    private javax.swing.JTextField txtAmount4;
    private javax.swing.JTextField txtAmount4Caption;
    private javax.swing.JTextField txtAmount5;
    private javax.swing.JTextField txtAmount5Caption;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtExpenseDate;
    private javax.swing.JTextArea txtExpenseDetails;
    private javax.swing.JTextField txtExpenseID;
    private javax.swing.JTextField txtExpenseName;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtFromReading;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtInvoiceAmount;
    private javax.swing.JTextField txtInvoiceDate;
    private javax.swing.JTextField txtInvoiceNo;
    private javax.swing.JTextField txtPartyName;
    private javax.swing.JTextField txtPincode;
    private javax.swing.JTextField txtRefDocDate;
    private javax.swing.JTextField txtRefDocNo;
    private javax.swing.JTextField txtToDate;
    private javax.swing.JTextField txtToReading;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtmir;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    
    private void SetFields(boolean pStat) {
        
        //txtDocDate.setEnabled(pStat);
        txtExpenseID.setEnabled(pStat);
        txtExpenseDate.setEnabled(pStat);
        txtFromDate.setEnabled(pStat);
        txtToDate.setEnabled(pStat);
        txtFromReading.setEnabled(pStat);
        txtToReading.setEnabled(pStat);
        txtExpenseDetails.setEnabled(pStat);
        txtInvoiceNo.setEnabled(pStat);
        txtInvoiceDate.setEnabled(pStat);
        txtPartyName.setEnabled(pStat);
        txtAddress.setEnabled(pStat);
        txtCity.setEnabled(pStat);
        txtPincode.setEnabled(pStat);
        txtRefDocNo.setEnabled(pStat);
        txtRefDocDate.setEnabled(pStat);
        cmbModule.setEnabled(pStat);
        txtInvoiceAmount.setEnabled(pStat);
        txtmir.setEnabled(pStat);
        
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        txtAmount1Caption.setEnabled(pStat);
        txtAmount1.setEnabled(pStat);
        txtAmount2Caption.setEnabled(pStat);
        txtAmount2.setEnabled(pStat);
        txtAmount3Caption.setEnabled(pStat);
        txtAmount3.setEnabled(pStat);
        txtAmount4Caption.setEnabled(pStat);
        txtAmount4.setEnabled(pStat);
        txtAmount5Caption.setEnabled(pStat);
        txtAmount5.setEnabled(pStat);
        
    }
    
    private void ClearFields() {
        
        txtDocNo.setText("");
        txtDocDate.setText("");
        txtExpenseID.setText("");
        txtExpenseDate.setText("");
        txtFromDate.setText("");
        txtToDate.setText("");
        txtFromReading.setText("");
        txtToReading.setText("");
        txtExpenseDetails.setText("");
        txtInvoiceNo.setText("");
        txtInvoiceDate.setText("");
        txtPartyName.setText("");
        txtAddress.setText("");
        txtCity.setText("");
        txtPincode.setText("");
        txtRefDocNo.setText("");
        txtRefDocDate.setText("");
        txtInvoiceAmount.setText("");
        txtmir.setText("");
        lblmirdate.setText("");
        
        txtAmount1Caption.setText("");
        txtAmount1.setText("");
        txtAmount2Caption.setText("");
        txtAmount2.setText("");
        txtAmount3Caption.setText("");
        txtAmount3.setText("");
        txtAmount4Caption.setText("");
        txtAmount4.setText("");
        txtAmount5Caption.setText("");
        txtAmount5.setText("");
        
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                if(objExpense.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(objExpense.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(objExpense.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
                
                
            }
        }
        catch(Exception c) {
            
        }
        //============================================//
        
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=clsExpenseTransaction.ModuleID;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        
        ClearFields();
        
        
        txtDocNo.setText(objExpense.getAttribute("DOC_NO").getString());
        txtDocDate.setText(objExpense.getAttribute("DOC_DATE").getString());
        txtExpenseID.setText(objExpense.getAttribute("EXPENSE_ID").getString());
        txtExpenseName.setText(clsExpense.getExpenseName(objExpense.getAttribute("EXPENSE_ID").getString()));
        txtExpenseDate.setText(objExpense.getAttribute("EXPENSE_DATE").getString());
        txtFromDate.setText(objExpense.getAttribute("FROM_DATE").getString());
        txtToDate.setText(objExpense.getAttribute("TO_DATE").getString());
        txtFromReading.setText(objExpense.getAttribute("FROM_READING").getString());
        txtToReading.setText(objExpense.getAttribute("TO_READING").getString());
        txtExpenseDetails.setText(objExpense.getAttribute("EXPENSE_DESCRIPTION").getString());
        txtInvoiceNo.setText(objExpense.getAttribute("INVOICE_NO").getString());
        txtInvoiceDate.setText(objExpense.getAttribute("INVOICE_DATE").getString());
        txtInvoiceAmount.setText(Double.toString(objExpense.getAttribute("INVOICE_AMOUNT").getDouble()));
        txtPartyName.setText(objExpense.getAttribute("PARTY_NAME").getString());
        txtAddress.setText(objExpense.getAttribute("ADDRESS").getString());
        txtCity.setText(objExpense.getAttribute("CITY").getString());
        txtPincode.setText(objExpense.getAttribute("PINCODE").getString());
        txtRefDocNo.setText(objExpense.getAttribute("REF_DOC_NO").getString());
        txtRefDocDate.setText(objExpense.getAttribute("REF_DOC_DATE").getString());
        txtmir.setText(objExpense.getAttribute("MIR_NO").getString());
        try {
            lblmirdate.setText(EITLERPGLOBAL.formatDate(objExpense.getAttribute("MIR_DATE").getString()));
        } catch (Exception a) {
            lblmirdate.setText("");
        }
        EITLERPGLOBAL.setComboIndex(cmbModule,objExpense.getAttribute("MODULE_ID").getInt());
        
        
        txtAmount1Caption.setText(objExpense.getAttribute("AMOUNT1_CAPTION").getString());
        txtAmount1.setText(Double.toString(objExpense.getAttribute("AMOUNT1").getDouble()));
        txtAmount2Caption.setText(objExpense.getAttribute("AMOUNT2_CAPTION").getString());
        txtAmount2.setText(Double.toString(objExpense.getAttribute("AMOUNT2").getDouble()));
        txtAmount3Caption.setText(objExpense.getAttribute("AMOUNT3_CAPTION").getString());
        txtAmount3.setText(Double.toString(objExpense.getAttribute("AMOUNT3").getDouble()));
        txtAmount4Caption.setText(objExpense.getAttribute("AMOUNT4_CAPTION").getString());
        txtAmount4.setText(Double.toString(objExpense.getAttribute("AMOUNT4").getDouble()));
        txtAmount5Caption.setText(objExpense.getAttribute("AMOUNT5_CAPTION").getString());
        txtAmount5.setText(Double.toString(objExpense.getAttribute("AMOUNT5").getDouble()));
        
        //************ Misc. Display *****************//
        txtToRemarks.setText("");
        SetupApproval();
        
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,objExpense.getAttribute("HIERARCHY_ID").getInt());
        
        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List=new HashMap();
        String DocNo=objExpense.getAttribute("DOC_NO").getString();
        List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, clsExpenseTransaction.ModuleID , DocNo);
        for(int i=1;i<=List.size();i++) {
            clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
            Object[] rowData=new Object[7];
            
            rowData[0]=Integer.toString(i);
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
            rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
            rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
            rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
            rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
            rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
            
            DataModelA.addRow(rowData);
        }
        //============================================================//
        
        
        //=========================== Audit Trail ===========================//
        FormatGridHS();
        
        HashMap History=clsExpenseTransaction.getHistoryList(EITLERPGLOBAL.gCompanyID, objExpense.getAttribute("DOC_NO").getString());
        for(int i=1;i<=History.size();i++) {
            clsExpenseTransaction ObjHistory=(clsExpenseTransaction)History.get(Integer.toString(i));
            Object[] rowData=new Object[5];
            
            rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
            rowData[1]=ObjHistory.getAttribute("UPDATED_BY").getString();
            rowData[2]=ObjHistory.getAttribute("ENTRY_DATE").getString();
            
            String ApprovalStatus="";
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus="Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus="Final Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus="Waiting";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus="Rejected";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus="Pending";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus="Skiped";
            }
            
            rowData[3]=ApprovalStatus;
            rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
            
            DataModelHS.addRow(rowData);
        }
        //=========================== Audit Trail Over ===========================//
        
        //********************************************//
        
    }
    
    //Sets data to the Class Object
    private void SetData() {
        
        objExpense.setAttribute("PREFIX",SelPrefix);
        objExpense.setAttribute("SUFFIX",SelSuffix);
        objExpense.setAttribute("FFNO",FFNo);
        
        objExpense.setAttribute("DOC_NO",txtDocNo.getText());
        objExpense.setAttribute("DOC_DATE",txtDocDate.getText());
        objExpense.setAttribute("EXPENSE_ID",txtExpenseID.getText());
        objExpense.setAttribute("EXPENSE_DATE",txtExpenseDate.getText());
        objExpense.setAttribute("FROM_DATE",txtFromDate.getText());
        objExpense.setAttribute("TO_DATE",txtToDate.getText());
        objExpense.setAttribute("FROM_READING",txtFromReading.getText());
        objExpense.setAttribute("TO_READING",txtToReading.getText());
        objExpense.setAttribute("EXPENSE_DESCRIPTION",txtExpenseDetails.getText());
        objExpense.setAttribute("INVOICE_NO",txtInvoiceNo.getText());
        objExpense.setAttribute("INVOICE_DATE",txtInvoiceDate.getText());
        objExpense.setAttribute("INVOICE_AMOUNT",UtilFunctions.CDbl(txtInvoiceAmount.getText()));
        objExpense.setAttribute("PARTY_NAME",txtPartyName.getText());
        objExpense.setAttribute("ADDRESS",txtAddress.getText());
        objExpense.setAttribute("CITY",txtCity.getText());
        objExpense.setAttribute("PINCODE",txtPincode.getText());
        objExpense.setAttribute("REF_DOC_NO",txtRefDocNo.getText());
        objExpense.setAttribute("REF_DOC_DATE",txtRefDocDate.getText());
        objExpense.setAttribute("MIR_NO", txtmir.getText());
        objExpense.setAttribute("MIR_DATE", EITLERPGLOBAL.formatDateDB(lblmirdate.getText()));
        objExpense.setAttribute("MODULE_ID",EITLERPGLOBAL.getComboCode(cmbModule));
        
        objExpense.setAttribute("AMOUNT1_CAPTION",txtAmount1Caption.getText());
        objExpense.setAttribute("AMOUNT1",UtilFunctions.CDbl(txtAmount1.getText()));
        objExpense.setAttribute("AMOUNT2_CAPTION",txtAmount2Caption.getText());
        objExpense.setAttribute("AMOUNT2",UtilFunctions.CDbl(txtAmount2.getText()));
        objExpense.setAttribute("AMOUNT3_CAPTION",txtAmount3Caption.getText());
        objExpense.setAttribute("AMOUNT3",UtilFunctions.CDbl(txtAmount3.getText()));
        objExpense.setAttribute("AMOUNT4_CAPTION",txtAmount4Caption.getText());
        objExpense.setAttribute("AMOUNT4",UtilFunctions.CDbl(txtAmount4.getText()));
        objExpense.setAttribute("AMOUNT5_CAPTION",txtAmount5Caption.getText());
        objExpense.setAttribute("AMOUNT5",UtilFunctions.CDbl(txtAmount5.getText()));
        
        //----- Update Approval Specific Fields -----------//
        objExpense.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        objExpense.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        objExpense.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        objExpense.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            objExpense.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            objExpense.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            objExpense.setAttribute("APPROVAL_STATUS","R");
            objExpense.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            objExpense.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
    }
    
    
    private void SetMenuForRights() {
        
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10631)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        //if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,152)) {
        cmdEdit.setEnabled(true);
        //}
        //else {
        //cmdEdit.setEnabled(false);
        //}
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10633)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10634)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
        
    }
    
    private void Add() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        //Now Generate new document no.
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=clsExpenseTransaction.ModuleID;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsExpenseTransaction.ModuleID , FFNo,  false));
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
            txtDocDate.requestFocus();
            
            lblTitle.setText("EXPENSE TRANSACTION - "+txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
        
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        String lDocNo=objExpense.getAttribute("DOC_NO").getString();
        
        if(objExpense.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            
            EITLERPGLOBAL.ChangeCursorToWait(this);
            
            EditMode=EITLERPGLOBAL.EDIT;
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            SetupApproval();
            //----------------//
            
            if(ApprovalFlow.IsCreator(clsExpenseTransaction.ModuleID ,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10632)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            
            SetupApproval();
            DisableToolbar();
            txtDocDate.requestFocus();
            
            EITLERPGLOBAL.ChangeCursorToDefault(this);
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
        
        
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        if(objExpense.Delete(EITLERPGLOBAL.gNewUserID)) {
            MoveLast();
        }
    }
    
    private void Save() {
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        if(!data.IsRecordExist("SELECT EXPENSE_ID FROM D_FIN_EXPENSE_MASTER WHERE EXPENSE_ID='"+txtExpenseID.getText().trim()+"' AND APPROVED=1 AND CANCELLED=0",FinanceGlobal.FinURL)) {
            JOptionPane.showMessageDialog(this, "Wrong Expense code or Expense code master not final approved.");
            return;
        }
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(objExpense.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+objExpense.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(objExpense.Update()) {
                //Nothing to do
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+objExpense.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
        
        try {
            frmPA.RefreshView();
        }catch(Exception e){}
        
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Finance.frmExpenseFind",true);
        frmExpenseFind ObjReturn= (frmExpenseFind) ObjLoader.getObj();
         
        if(ObjReturn.Cancelled==false) {
            if(!objExpense.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveFirst();
        }
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objExpense.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objExpense.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objExpense.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objExpense.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    public void FindEx(int pCompanyID,String pDocNo) {
        objExpense.Filter(" WHERE DOC_NO='"+pDocNo+"' ",pCompanyID);
        objExpense.MoveFirst();
        DisplayData();
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        
    }
    
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    
    private void SetupApproval() {
        
        /*if(cmbHierarchy.getItemCount()>1) {
            cmbHierarchy.setEnabled(true);
        }*/
        
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, clsExpenseTransaction.ModuleID , objExpense.getAttribute("DOC_NO").getString());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,clsExpenseTransaction.ModuleID ,FromUserID,objExpense.getAttribute("DOC_NO").getString());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
        
    }
    
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, clsExpenseTransaction.ModuleID ,objExpense.getAttribute("DOC_NO").getString());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
        
    }
    
    private void GenerateRejectedUserCombo() {
        HashMap List=new HashMap();
        HashMap DeptList=new HashMap();
        HashMap DeptUsers=new HashMap();
        
        //----- Generate cmbType ------- //
        cmbToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);
        
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            
            
            /// NEW CODE ///
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID,clsExpenseTransaction.ModuleID , objExpense.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, clsExpenseTransaction.ModuleID, objExpense.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt() , EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(( ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            }
            else {
                if((ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///
            
            
            
        }
        //------------------------------ //
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, clsExpenseTransaction.ModuleID , objExpense.getAttribute("DOC_NO").getString());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
        
    }
    
    
    private void GenerateCombos() {
        try {
            //Generates Combo Boxes
            HashMap List=new HashMap();
            String strCondition="";
            ResultSet rsTmp;
            
            cmbHierarchyModel=new EITLComboModel();
            cmbHierarchy.removeAllItems();
            cmbHierarchy.setModel(cmbHierarchyModel);
            
            List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsExpenseTransaction.ModuleID);
            
            if(EditMode==EITLERPGLOBAL.EDIT) {
                List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsExpenseTransaction.ModuleID );
            }
            for(int i=1;i<=List.size();i++) {
                clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
                ComboData aData=new ComboData();
                aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
                aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
                cmbHierarchyModel.addElement(aData);
            }
            
            
            cmbModuleModel=new EITLComboModel();
            cmbModule.removeAllItems();
            cmbModule.setModel(cmbModuleModel);
            
            List=clsModules.getList("");
            
            for(int i=1;i<=List.size();i++) {
                clsModules objModule=(clsModules)List.get(Integer.toString(i));
                
                ComboData aData=new ComboData();
                aData.Code=objModule.getAttribute("MODULE_ID").getInt();
                aData.Text=objModule.getAttribute("MODULE_DESC").getString();
                
                cmbModuleModel.addElement(aData);
            }
            
        }
        catch(Exception e) {
            
        }
    }
    
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
    }
    
    private void doTotal() {
        try {
            double Amount=0;
            
            if(UtilFunctions.CDbl(txtAmount1.getText())>0) {
                Amount+=UtilFunctions.CDbl(txtAmount1.getText());
            }
            
            if(UtilFunctions.CDbl(txtAmount2.getText())>0) {
                Amount+=UtilFunctions.CDbl(txtAmount2.getText());
            }
            
            if(UtilFunctions.CDbl(txtAmount3.getText())>0) {
                Amount+=UtilFunctions.CDbl(txtAmount3.getText());
            }
            
            if(UtilFunctions.CDbl(txtAmount4.getText())>0) {
                Amount+=UtilFunctions.CDbl(txtAmount4.getText());
            }
            
            if(UtilFunctions.CDbl(txtAmount5.getText())>0) {
                Amount+=UtilFunctions.CDbl(txtAmount5.getText());
            }
            
            txtInvoiceAmount.setText(Double.toString(Amount));
            
        }
        catch(Exception e) {
            
        }
    }
    
    private void PreviewReport() {
        if(EditMode==0) {
            
            try {
                
                HashMap Parameters=new HashMap();
                EITLERPGLOBAL.PAGE_BREAK=true;
                String ReportFile="http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptExpenseSlip.rpt";
                TReportWriter.SimpleDataProvider.TTable objData=clsGeneralReports.getExpenseSlipPrint(EITLERPGLOBAL.gCompanyID, txtDocNo.getText());
                objEngine.PreviewReport(ReportFile ,Parameters,objData);
                
                
            }
            catch(Exception e) {
                
            }
            
        }
    }
    
}
