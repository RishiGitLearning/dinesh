/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP.Finance;

/**
 *
 * @author  nitin
 */
/*<APPLET CODE=frmInward.class HEIGHT=500 WIDTH=665></APPLET>*/

import javax.swing.*;
import java.awt.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import javax.swing.text.*;
import EITLERP.Utils.*;
import java.sql.*;
import java.net.*;
import EITLERP.*;
import EITLERP.Purchase.*;
import EITLERP.Stores.*;
import EITLERP.Finance.*;
import EITLERP.Finance.ReportsUI.*;

public class frmCrAdjustment extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsCrAdjustment objCrAdjustment;
    
    private boolean Updating=false;
    
    private String theDocNo="";
    
    private EITLTableModel DataModel;
    private EITLTableModel DataModelA;
    private EITLTableModel DataModelHS;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    
    private int SelHierarchyID=0;
    private int lnFromID=0;
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    private boolean IsGenerating=false;
    
    public frmPendingApprovals frmPA;
    public int SelectionType=0;
    
    /** Creates new form frmTemplate */
    public frmCrAdjustment() {
        
        setSize(665,480);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        GenerateCombos();
        
        objCrAdjustment=new clsCrAdjustment();
        
        SetMenuForRights();
        
        if(getName().equals("Link")) {
            
        } else {
            if(objCrAdjustment.LoadData(EITLERPGLOBAL.gCompanyID)) {
                objCrAdjustment.MoveLast();
                DisplayData();
                SetMenuForRights();
            } else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+objCrAdjustment.LastError);
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        mnuInfo = new javax.swing.JPopupMenu();
        mnuShowPJV = new javax.swing.JMenuItem();
        mnuShowPaymentVoucher = new javax.swing.JMenuItem();
        mnuSelectionType = new javax.swing.JPopupMenu();
        mnuCreditorsCrToDr = new javax.swing.JMenuItem();
        mnuCreditorsDrToCr = new javax.swing.JMenuItem();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Header = new javax.swing.JTabbedPane();
        Panel1 = new javax.swing.JPanel();
        jTextArea2 = new javax.swing.JTextArea();
        txtDocDate = new javax.swing.JTextField();
        lblSubCode = new javax.swing.JLabel();
        lblAccountID = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        lblAccountName1 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdRemove = new javax.swing.JButton();
        cmdInfo = new javax.swing.JButton();
        cmdAdd = new javax.swing.JButton();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack2 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        mnuShowPJV.setLabel("Show  PJV");
        mnuShowPJV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShowPJVActionPerformed(evt);
            }
        });

        mnuInfo.add(mnuShowPJV);

        mnuShowPaymentVoucher.setActionCommand("Show Payment");
        mnuShowPaymentVoucher.setLabel("Show Payment");
        mnuShowPaymentVoucher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShowPaymentVoucherActionPerformed(evt);
            }
        });

        mnuInfo.add(mnuShowPaymentVoucher);

        mnuCreditorsCrToDr.setText("Credit To Debit");
        mnuCreditorsCrToDr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCreditorsCrToDrActionPerformed(evt);
            }
        });

        mnuSelectionType.add(mnuCreditorsCrToDr);

        mnuCreditorsDrToCr.setText("Debit To Credit");
        mnuCreditorsDrToCr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCreditorsDrToCrActionPerformed(evt);
            }
        });

        mnuSelectionType.add(mnuCreditorsDrToCr);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" ADVANCE PAYMENT ADJUSTMENT (CREDITORS)");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 666, 25);

        Panel1.setLayout(null);

        Panel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Panel1MouseClicked(evt);
            }
        });

        Panel1.add(jTextArea2);
        jTextArea2.setBounds(177, 29, 0, 15);

        txtDocDate.setName("PARTY_CODE");
        txtDocDate.setNextFocusableComponent(txtRemarks);
        txtDocDate.setEnabled(false);
        Panel1.add(txtDocDate);
        txtDocDate.setBounds(245, 16, 120, 19);

        lblSubCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode.setText("Date :");
        Panel1.add(lblSubCode);
        lblSubCode.setBounds(200, 19, 40, 15);

        lblAccountID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountID.setText("Doc No. :");
        Panel1.add(lblAccountID);
        lblAccountID.setBounds(10, 18, 60, 15);

        txtDocNo.setName("PARTY_ID");
        txtDocNo.setEnabled(false);
        Panel1.add(txtDocNo);
        txtDocNo.setBounds(75, 16, 120, 19);

        lblAccountName1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountName1.setText("Remarks :");
        Panel1.add(lblAccountName1);
        lblAccountName1.setBounds(10, 267, 65, 15);

        txtRemarks.setName("DESCRIPTION");
        txtRemarks.setEnabled(false);
        Panel1.add(txtRemarks);
        txtRemarks.setBounds(80, 266, 550, 19);

        jLabel1.setText("Adjustment Information :");
        Panel1.add(jLabel1);
        jLabel1.setBounds(14, 64, 180, 15);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table);

        Panel1.add(jScrollPane1);
        jScrollPane1.setBounds(12, 83, 620, 140);

        cmdRemove.setMnemonic('A');
        cmdRemove.setText("Remove");
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });

        Panel1.add(cmdRemove);
        cmdRemove.setBounds(531, 229, 100, 25);

        cmdInfo.setMnemonic('A');
        cmdInfo.setText("Info.");
        cmdInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdInfoActionPerformed(evt);
            }
        });

        Panel1.add(cmdInfo);
        cmdInfo.setBounds(339, 229, 90, 25);

        cmdAdd.setText("Add");
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });

        Panel1.add(cmdAdd);
        cmdAdd.setBounds(436, 229, 88, 25);

        Header.addTab("Header Information", Panel1);

        Tab2.setLayout(null);

        Tab2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Hierarchy :");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 18, 85, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });

        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(100, 14, 184, 24);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("From :");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 52, 85, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(100, 50, 182, 19);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel35.setText("Remarks :");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 82, 85, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(100, 80, 468, 19);

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Your Action :");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 120, 85, 15);

        jPanel7.setLayout(null);

        jPanel7.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel7.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel7.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel7.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setEnabled(false);
        jPanel7.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel7);
        jPanel7.setBounds(100, 120, 182, 100);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Send To :");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 232, 85, 15);

        cmbSendTo.setEnabled(false);
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(100, 228, 184, 24);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Remarks :");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 264, 85, 15);

        txtToRemarks.setEnabled(false);
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(100, 260, 516, 19);

        cmdBack2.setText("<< Back");
        Tab2.add(cmdBack2);
        cmdBack2.setBounds(533, 326, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(575, 80, 33, 21);

        Header.addTab("Approval", Tab2);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status :");
        jPanel6.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel6.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 614, 144);

        lblDocumentHistory.setText("Document Update History :");
        jPanel6.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 191, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel6.add(jScrollPane3);
        jScrollPane3.setBounds(13, 207, 473, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        jPanel6.add(cmdViewHistory);
        cmdViewHistory.setBounds(498, 242, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        jPanel6.add(cmdNormalView);
        cmdNormalView.setBounds(498, 273, 132, 24);

        cmdPreviewA.setText("Preview Report");
        jPanel6.add(cmdPreviewA);
        cmdPreviewA.setBounds(498, 209, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        jPanel6.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(498, 305, 132, 24);

        txtAuditRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtAuditRemarks.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        txtAuditRemarks.setEnabled(false);
        jPanel6.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(499, 333, 129, 17);

        Header.addTab("Status", jPanel6);

        getContentPane().add(Header);
        Header.setBounds(2, 66, 654, 390);
        Header.getAccessibleContext().setAccessibleName("Account Details");
        Header.getAccessibleContext().setAccessibleDescription("Account Details");

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(1, 271, 650, 22);

    }//GEN-END:initComponents
    
    private void mnuCreditorsDrToCrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCreditorsDrToCrActionPerformed
        // TODO add your handling code here:
        try {
            frmCreditorsDrToCr objSelect=new frmCreditorsDrToCr();
            objSelect.ShowDialog();
            objSelect.DocDate = EITLERPGLOBAL.formatDateDB(txtDocDate.getText().trim());
            objSelect.thisDocNo = txtDocNo.getText().trim();
            if(!objSelect.Cancelled) {
                FormatGrid();
                SelectionType = 2;
                for(int i=0; i<objSelect.objSelectedVoucher.size();i++) {
                    
                    clsCrAdjustmentItem objItem = (clsCrAdjustmentItem)objSelect.objSelectedVoucher.get(Integer.toString(i+1));
                    Object[] rowData = new Object[1];
                    DataModel.addRow(rowData);
                    int NewIndex=Table.getRowCount()-1;
                    
                    DataModel.setValueByVariable("SR_NO",Integer.toString(NewIndex+1), NewIndex);
                    DataModel.setValueByVariable("PJV_NO",objItem.getAttribute("PJV_NO").getString(), NewIndex);
                    DataModel.setValueByVariable("PJV_DATE",objItem.getAttribute("PJV_DATE").getString(), NewIndex);
                    DataModel.setValueByVariable("ADJ_AMOUNT",Double.toString(objItem.getAttribute("ADJ_AMOUNT").getDouble()), NewIndex);
                    DataModel.setValueByVariable("MAIN_ACCOUNT_CODE",objItem.getAttribute("MAIN_ACCOUNT_CODE").getString(), NewIndex);
                    DataModel.setValueByVariable("SUB_ACCOUNT_CODE",objItem.getAttribute("SUB_ACCOUNT_CODE").getString(), NewIndex);
                    DataModel.setValueByVariable("ACCOUNT_NAME",clsAccount.getAccountName(objItem.getAttribute("MAIN_ACCOUNT_CODE").getString(),objItem.getAttribute("SUB_ACCOUNT_CODE").getString()), NewIndex);
                    DataModel.setValueByVariable("PO_NO",objItem.getAttribute("PO_NO").getString(), NewIndex);
                    DataModel.setValueByVariable("PO_DATE",objItem.getAttribute("PO_DATE").getString(), NewIndex);
                    DataModel.setValueByVariable("GRN_NO",objItem.getAttribute("GRN_NO").getString(), NewIndex);
                    DataModel.setValueByVariable("GRN_DATE",objItem.getAttribute("GRN_DATE").getString(), NewIndex);
                    DataModel.setValueByVariable("INVOICE_NO",objItem.getAttribute("INVOICE_NO").getString(), NewIndex);
                    DataModel.setValueByVariable("INVOICE_DATE",objItem.getAttribute("INVOICE_DATE").getString(), NewIndex);
                    DataModel.setValueByVariable("REF_MODULE_ID",Integer.toString(objItem.getAttribute("REF_MODULE_ID").getInt()), NewIndex);
                    DataModel.setValueByVariable("PJV_COMPANY_ID",Integer.toString(objItem.getAttribute("PJV_COMPANY_ID").getInt()), NewIndex);
                    DataModel.setValueByVariable("VOUCHER_NO",objItem.getAttribute("VOUCHER_NO").getString(), NewIndex);
                    DataModel.setValueByVariable("VOUCHER_SR_NO",Integer.toString(objItem.getAttribute("VOUCHER_SR_NO").getInt()), NewIndex);
                    DataModel.setValueByVariable("VOUCHER_DATE",objItem.getAttribute("VOUCHER_DATE").getString(), NewIndex);
                    DataModel.setValueByVariable("PAYMENT_AMOUNT",Double.toString(objItem.getAttribute("PAYMENT_AMOUNT").getDouble()), NewIndex);
                    DataModel.setValueByVariable("VOUCHER_COMPANY_ID",Integer.toString(objItem.getAttribute("VOUCHER_COMPANY_ID").getInt()), NewIndex);
                    DataModel.setValueByVariable("REMARKS","", NewIndex);
                    DataModel.setValueByVariable("SELECTION_TYPE",Integer.toString(SelectionType), NewIndex);
                }
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_mnuCreditorsDrToCrActionPerformed
    
    private void mnuCreditorsCrToDrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCreditorsCrToDrActionPerformed
        // TODO add your handling code here:
        try {
            frmCreditorsCrToDr objSelect=new frmCreditorsCrToDr();
            objSelect.ShowDialog();
            objSelect.DocDate = EITLERPGLOBAL.formatDateDB(txtDocDate.getText().trim());
            objSelect.thisDocNo = txtDocNo.getText().trim();
            if(!objSelect.Cancelled) {
                FormatGrid();
                SelectionType = 1;
                for(int i=0; i<objSelect.objSelectedVoucher.size();i++) {
                    
                    clsCrAdjustmentItem objItem = (clsCrAdjustmentItem)objSelect.objSelectedVoucher.get(Integer.toString(i+1));
                    Object[] rowData = new Object[1];
                    DataModel.addRow(rowData);
                    int NewIndex=Table.getRowCount()-1;
                    
                    DataModel.setValueByVariable("SR_NO",Integer.toString(NewIndex+1), NewIndex);
                    DataModel.setValueByVariable("PJV_NO",objItem.getAttribute("PJV_NO").getString(), NewIndex);
                    DataModel.setValueByVariable("PJV_DATE",objItem.getAttribute("PJV_DATE").getString(), NewIndex);
                    DataModel.setValueByVariable("ADJ_AMOUNT",Double.toString(objItem.getAttribute("ADJ_AMOUNT").getDouble()), NewIndex);
                    DataModel.setValueByVariable("MAIN_ACCOUNT_CODE",objItem.getAttribute("MAIN_ACCOUNT_CODE").getString(), NewIndex);
                    DataModel.setValueByVariable("SUB_ACCOUNT_CODE",objItem.getAttribute("SUB_ACCOUNT_CODE").getString(), NewIndex);
                    DataModel.setValueByVariable("ACCOUNT_NAME",clsAccount.getAccountName(objItem.getAttribute("MAIN_ACCOUNT_CODE").getString(),objItem.getAttribute("SUB_ACCOUNT_CODE").getString()), NewIndex);
                    DataModel.setValueByVariable("PO_NO",objItem.getAttribute("PO_NO").getString(), NewIndex);
                    DataModel.setValueByVariable("PO_DATE",objItem.getAttribute("PO_DATE").getString(), NewIndex);
                    DataModel.setValueByVariable("GRN_NO",objItem.getAttribute("GRN_NO").getString(), NewIndex);
                    DataModel.setValueByVariable("GRN_DATE",objItem.getAttribute("GRN_DATE").getString(), NewIndex);
                    DataModel.setValueByVariable("INVOICE_NO",objItem.getAttribute("INVOICE_NO").getString(), NewIndex);
                    DataModel.setValueByVariable("INVOICE_DATE",objItem.getAttribute("INVOICE_DATE").getString(), NewIndex);
                    DataModel.setValueByVariable("REF_MODULE_ID",Integer.toString(objItem.getAttribute("REF_MODULE_ID").getInt()), NewIndex);
                    DataModel.setValueByVariable("PJV_COMPANY_ID",Integer.toString(objItem.getAttribute("PJV_COMPANY_ID").getInt()), NewIndex);
                    DataModel.setValueByVariable("VOUCHER_NO",objItem.getAttribute("VOUCHER_NO").getString(), NewIndex);
                    DataModel.setValueByVariable("VOUCHER_SR_NO",Integer.toString(objItem.getAttribute("VOUCHER_SR_NO").getInt()), NewIndex);
                    DataModel.setValueByVariable("VOUCHER_DATE",objItem.getAttribute("VOUCHER_DATE").getString(), NewIndex);
                    DataModel.setValueByVariable("PAYMENT_AMOUNT",Double.toString(objItem.getAttribute("PAYMENT_AMOUNT").getDouble()), NewIndex);
                    DataModel.setValueByVariable("VOUCHER_COMPANY_ID",Integer.toString(objItem.getAttribute("VOUCHER_COMPANY_ID").getInt()), NewIndex);
                    DataModel.setValueByVariable("REMARKS","", NewIndex);
                    DataModel.setValueByVariable("SELECTION_TYPE",Integer.toString(SelectionType), NewIndex);
                }
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_mnuCreditorsCrToDrActionPerformed
    
    private void mnuShowPaymentVoucherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShowPaymentVoucherActionPerformed
        // TODO add your handling code here:
        try {
            if(Table.getSelectedRow()>=0) {
                String DocNo=DataModel.getValueByVariable("VOUCHER_NO",Table.getSelectedRow());
                clsVoucher.OpenVoucher(DocNo, null);
            }
        } catch(Exception e) {
        }
    }//GEN-LAST:event_mnuShowPaymentVoucherActionPerformed
        
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        mnuSelectionType.show(Panel1, cmdAdd.getX(), cmdAdd.getY()+cmdAdd.getHeight());
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void mnuShowPJVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShowPJVActionPerformed
        // TODO add your handling code here:
        try {
            if(Table.getSelectedRow()>=0) {
                String DocNo=DataModel.getValueByVariable("PJV_NO",Table.getSelectedRow());
                clsVoucher.OpenVoucher(DocNo, null);
            }
        } catch(Exception e) {
        }
    }//GEN-LAST:event_mnuShowPJVActionPerformed
    
    private void cmdInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInfoActionPerformed
        // TODO add your handling code here:
        mnuInfo.show(Panel1, cmdInfo.getX(), cmdInfo.getY()+cmdInfo.getHeight());
    }//GEN-LAST:event_cmdInfoActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if(Table.getRowCount()>0) {
            DataModel.removeRow(Table.getSelectedRow());
        }
        
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void Panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Panel1MouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_Panel1MouseClicked
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
        
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        objCrAdjustment.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveFirst();
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        objCrAdjustment.ShowHistory(EITLERPGLOBAL.gCompanyID, objCrAdjustment.getAttribute("DOC_NO").getString());
        MoveFirst();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
        
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
        
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if(ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID,clsCrAdjustment.ModuleID , objCrAdjustment.getAttribute("DOC_NO").getString())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateFromCombo();
        }
        
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
        
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        objCrAdjustment.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Header;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel Panel1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdInfo;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel lblAccountID;
    private javax.swing.JLabel lblAccountName1;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblSubCode;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JMenuItem mnuCreditorsCrToDr;
    private javax.swing.JMenuItem mnuCreditorsDrToCr;
    private javax.swing.JPopupMenu mnuInfo;
    private javax.swing.JPopupMenu mnuSelectionType;
    private javax.swing.JMenuItem mnuShowPJV;
    private javax.swing.JMenuItem mnuShowPaymentVoucher;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    
    private void SetFields(boolean pStat) {
        
        //txtDocDate.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        
        cmdRemove.setEnabled(pStat);
        cmdAdd.setEnabled(pStat);
        
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        DataModel.TableReadOnly(!pStat);
        
        SetupApproval();
    }
    
    private void ClearFields() {
        
        
        txtDocNo.setText("");
        txtDocDate.setText("");
        txtRemarks.setText("");
        
        FormatGrid();
        FormatGridA();
        FormatGridHS();
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                if(objCrAdjustment.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(objCrAdjustment.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(objCrAdjustment.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
        }
        catch(Exception c) {
            
        }
        //============================================//
        
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=clsCrAdjustment.ModuleID;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        
        ClearFields();
        
        txtDocNo.setText(objCrAdjustment.getAttribute("DOC_NO").getString());
        txtDocDate.setText(EITLERPGLOBAL.formatDate(objCrAdjustment.getAttribute("DOC_DATE").getString()));
        txtRemarks.setText(objCrAdjustment.getAttribute("REMARKS").getString());
        
        lblTitle.setText("ADVANCE PAYMENT ADJUSTMENT (CREDITORS) -"+txtDocNo.getText());
        
        
        //************ Misc. Display *****************//
        txtToRemarks.setText("");
        SetupApproval();
        
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,objCrAdjustment.getAttribute("HIERARCHY_ID").getInt());
        
        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List=new HashMap();
        String DocNo=objCrAdjustment.getAttribute("DOC_NO").getString();
        List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, clsCrAdjustment.ModuleID , DocNo);
        for(int i=1;i<=List.size();i++) {
            clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
            Object[] rowData=new Object[7];
            
            rowData[0]=Integer.toString(i);
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
            rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
            rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
            rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
            rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
            rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
            
            DataModelA.addRow(rowData);
        }
        //============================================================//
        
        
        //=========================== Audit Trail ===========================//
        FormatGridHS();
        
        HashMap History=clsCrAdjustment.getHistoryList(EITLERPGLOBAL.gCompanyID, objCrAdjustment.getAttribute("DOC_NO").getString());
        for(int i=1;i<=History.size();i++) {
            clsCrAdjustment ObjHistory=(clsCrAdjustment)History.get(Integer.toString(i));
            Object[] rowData=new Object[5];
            
            rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
            rowData[1]=ObjHistory.getAttribute("UPDATED_BY").getString();
            rowData[2]=ObjHistory.getAttribute("ENTRY_DATE").getString();
            
            String ApprovalStatus="";
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus="Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus="Final Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus="Waiting";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus="Rejected";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus="Pending";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus="Skiped";
            }
            
            rowData[3]=ApprovalStatus;
            rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
            
            DataModelHS.addRow(rowData);
        }
        //=========================== Audit Trail Over ===========================//
        
        
        FormatGrid();
        
        for(int i=1;i<=objCrAdjustment.colItems.size();i++) {
            clsCrAdjustmentItem objItem=(clsCrAdjustmentItem) objCrAdjustment.colItems.get(Integer.toString(i));
            
            Object[] rowData=new Object[1];
            DataModel.addRow(rowData);
            
            int NewRow=Table.getRowCount()-1;
            DataModel.setValueByVariable("SR_NO",Integer.toString(i), NewRow);
            DataModel.setValueByVariable("VOUCHER_NO",objItem.getAttribute("VOUCHER_NO").getString(),NewRow);
            DataModel.setValueByVariable("VOUCHER_DATE",EITLERPGLOBAL.formatDate(objItem.getAttribute("VOUCHER_DATE").getString()),NewRow);
            DataModel.setValueByVariable("ADJ_AMOUNT",Double.toString(objItem.getAttribute("ADJUST_AMOUNT").getDouble()),NewRow);
            DataModel.setValueByVariable("MAIN_ACCOUNT_CODE",objItem.getAttribute("MAIN_ACCOUNT_CODE").getString(),NewRow);
            DataModel.setValueByVariable("SUB_ACCOUNT_CODE",objItem.getAttribute("SUB_ACCOUNT_CODE").getString(),NewRow);
            DataModel.setValueByVariable("ACCOUNT_NAME",clsAccount.getAccountName(objItem.getAttribute("MAIN_ACCOUNT_CODE").getString(),objItem.getAttribute("SUB_ACCOUNT_CODE").getString()),NewRow);
            DataModel.setValueByVariable("VOUCHER_SR_NO",Integer.toString(objItem.getAttribute("VOUCHER_SR_NO").getInt()),NewRow);
            DataModel.setValueByVariable("PAYMENT_AMOUNT",Double.toString(objItem.getAttribute("PAYMENT_AMOUNT").getDouble()),NewRow);
            DataModel.setValueByVariable("PJV_NO",objItem.getAttribute("PJV_NO").getString(),NewRow);
            DataModel.setValueByVariable("PJV_DATE",EITLERPGLOBAL.formatDate(objItem.getAttribute("PJV_DATE").getString()),NewRow);
            DataModel.setValueByVariable("PO_NO",objItem.getAttribute("PO_NO").getString(),NewRow);
            DataModel.setValueByVariable("PO_DATE",EITLERPGLOBAL.formatDate(objItem.getAttribute("PO_DATE").getString()),NewRow);
            DataModel.setValueByVariable("GRN_NO",objItem.getAttribute("GRN_NO").getString(),NewRow);
            DataModel.setValueByVariable("GRN_DATE",EITLERPGLOBAL.formatDate(objItem.getAttribute("GRN_DATE").getString()),NewRow);
            DataModel.setValueByVariable("INVOICE_NO",objItem.getAttribute("INVOICE_NO").getString(),NewRow);
            DataModel.setValueByVariable("INVOICE_DATE",EITLERPGLOBAL.formatDate(objItem.getAttribute("INVOICE_DATE").getString()),NewRow);
            DataModel.setValueByVariable("REMARKS",objItem.getAttribute("REMARKS").getString(),NewRow);
            DataModel.setValueByVariable("REF_MODULE_ID",Integer.toString(objItem.getAttribute("REF_MODULE_ID").getInt()),NewRow);
            DataModel.setValueByVariable("VOUCHER_COMPANY_ID",Integer.toString(objItem.getAttribute("VOUCHER_COMPANY_ID").getInt()),NewRow);
            DataModel.setValueByVariable("PJV_COMPANY_ID",Integer.toString(objItem.getAttribute("PJV_COMPANY_ID").getInt()),NewRow);
            DataModel.setValueByVariable("SELECTION_TYPE",Integer.toString(objItem.getAttribute("SELECTION_TYPE").getInt()),NewRow);
        }
        //********************************************//
        
    }
    
    //Sets data to the Class Object
    private void SetData() {
        objCrAdjustment.setAttribute("PREFIX",SelPrefix);
        objCrAdjustment.setAttribute("SUFFIX",SelSuffix);
        objCrAdjustment.setAttribute("FFNO",FFNo);
        
        objCrAdjustment.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        objCrAdjustment.setAttribute("DOC_DATE",txtDocDate.getText());
        objCrAdjustment.setAttribute("REMARKS",txtRemarks.getText());
        
        //----- Update Approval Specific Fields -----------//
        objCrAdjustment.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        objCrAdjustment.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        objCrAdjustment.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        objCrAdjustment.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            objCrAdjustment.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            objCrAdjustment.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            objCrAdjustment.setAttribute("APPROVAL_STATUS","R");
            objCrAdjustment.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            objCrAdjustment.setAttribute("APPROVAL_STATUS","H");
        }
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            objCrAdjustment.setAttribute("CREATED_BY",EITLERPGLOBAL.gLoginID);
            objCrAdjustment.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDate());
            objCrAdjustment.setAttribute("MODIFIED_BY","");
            objCrAdjustment.setAttribute("MODIFIED_DATE","0000-00-00");
        } else {
            objCrAdjustment.setAttribute("CREATED_BY","");
            objCrAdjustment.setAttribute("CREATED_DATE","0000-00-00");
            objCrAdjustment.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gLoginID);
            objCrAdjustment.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDate());
        }
        
        objCrAdjustment.colItems.clear();
        
        for(int i=0;i<Table.getRowCount();i++) {
            clsCrAdjustmentItem objItem=new clsCrAdjustmentItem();
            
            objItem.setAttribute("SR_NO",i+1);
            objItem.setAttribute("VOUCHER_NO",DataModel.getValueByVariable("VOUCHER_NO", i));
            objItem.setAttribute("VOUCHER_DATE",DataModel.getValueByVariable("VOUCHER_DATE", i));
            objItem.setAttribute("VOUCHER_SR_NO",UtilFunctions.CInt(DataModel.getValueByVariable("VOUCHER_SR_NO", i)));
            objItem.setAttribute("MAIN_ACCOUNT_CODE",DataModel.getValueByVariable("MAIN_ACCOUNT_CODE", i));
            objItem.setAttribute("SUB_ACCOUNT_CODE",DataModel.getValueByVariable("SUB_ACCOUNT_CODE", i));
            objItem.setAttribute("PAYMENT_AMOUNT",UtilFunctions.CDbl(DataModel.getValueByVariable("PAYMENT_AMOUNT", i)));
            objItem.setAttribute("PJV_NO",DataModel.getValueByVariable("PJV_NO", i));
            objItem.setAttribute("PJV_DATE",DataModel.getValueByVariable("PJV_DATE", i));
            objItem.setAttribute("ADJUST_AMOUNT",UtilFunctions.CDbl(DataModel.getValueByVariable("ADJ_AMOUNT", i)));
            objItem.setAttribute("PO_NO",DataModel.getValueByVariable("PO_NO", i));
            objItem.setAttribute("PO_DATE",DataModel.getValueByVariable("PO_DATE", i));
            objItem.setAttribute("GRN_NO",DataModel.getValueByVariable("GRN_NO", i));
            objItem.setAttribute("GRN_DATE",DataModel.getValueByVariable("GRN_DATE", i));
            objItem.setAttribute("INVOICE_NO",DataModel.getValueByVariable("INVOICE_NO", i));
            objItem.setAttribute("INVOICE_DATE",DataModel.getValueByVariable("INVOICE_DATE", i));
            objItem.setAttribute("REMARKS",DataModel.getValueByVariable("REMARKS", i));
            objItem.setAttribute("REF_MODULE_ID",UtilFunctions.CInt(DataModel.getValueByVariable("REF_MODULE_ID", i)));
            objItem.setAttribute("VOUCHER_COMPANY_ID",UtilFunctions.CInt(DataModel.getValueByVariable("VOUCHER_COMPANY_ID", i)));
            objItem.setAttribute("PJV_COMPANY_ID",UtilFunctions.CInt(DataModel.getValueByVariable("PJV_COMPANY_ID", i)));
            objItem.setAttribute("SELECTION_TYPE",UtilFunctions.CInt(DataModel.getValueByVariable("SELECTION_TYPE", i)));
            objCrAdjustment.colItems.put(Integer.toString(objCrAdjustment.colItems.size()+1),objItem);
        }
        //--------------------------------------------------------------------------------------------------//
    }
    
    private void SetMenuForRights() {
        
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10531)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        //if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10532)) {
        cmdEdit.setEnabled(true);
        //}
        //else {
        //cmdEdit.setEnabled(false);
        //}
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10533)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10534)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    private void Add() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        //Now Generate new document no.
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=clsCrAdjustment.ModuleID;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsCrAdjustment.ModuleID , FFNo,  false));
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
            txtDocDate.requestFocus();
            
            lblTitle.setText("ADVANCE PAYMENT ADJUSTMENT - "+txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);
        } else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=objCrAdjustment.getAttribute("DOC_NO").getString();
        
        if(objCrAdjustment.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            
            EITLERPGLOBAL.ChangeCursorToWait(this);
            
            EditMode=EITLERPGLOBAL.EDIT;
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            SetupApproval();
            //----------------//
            
            if(ApprovalFlow.IsCreator(clsCrAdjustment.ModuleID ,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10532)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            
            SetupApproval();
            DisableToolbar();
            txtDocDate.requestFocus();
            
            EITLERPGLOBAL.ChangeCursorToDefault(this);
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
        
        
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        if(objCrAdjustment.Delete(EITLERPGLOBAL.gNewUserID)) {
            MoveLast();
        }
    }
    
    private void Save() {
        
        if(!Validate()) {
            return;
        }
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(objCrAdjustment.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null," "+objCrAdjustment.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(objCrAdjustment.Update()) {
                //Nothing to do
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null," "+objCrAdjustment.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
        
        try {
            frmPA.RefreshView();
        }catch(Exception e){}
        
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Finance.frmCrAdjFind",true);
        frmCrAdjFind ObjReturn= (frmCrAdjFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!objCrAdjustment.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveFirst();
        }
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objCrAdjustment.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objCrAdjustment.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objCrAdjustment.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objCrAdjustment.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    public void FindEx(int pCompanyID,String pDocNo) {
        objCrAdjustment.FilterEx(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND DOC_NO='"+pDocNo+"' ",pCompanyID);
        objCrAdjustment.MoveFirst();
        DisplayData();
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        
    }
    
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    
    private void SetupApproval() {
        
        /*if(cmbHierarchy.getItemCount()>1) {
            cmbHierarchy.setEnabled(true);
        }*/
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, clsCrAdjustment.ModuleID , objCrAdjustment.getAttribute("DOC_NO").getString());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,clsCrAdjustment.ModuleID ,FromUserID,objCrAdjustment.getAttribute("DOC_NO").getString());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
        
    }
    
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, clsCrAdjustment.ModuleID ,objCrAdjustment.getAttribute("DOC_NO").getString());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
        
    }
    
    private void GenerateRejectedUserCombo() {
        HashMap List=new HashMap();
        HashMap DeptList=new HashMap();
        HashMap DeptUsers=new HashMap();
        
        //----- Generate cmbType ------- //
        cmbToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);
        
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            
            
            /// NEW CODE ///
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID,clsCrAdjustment.ModuleID , objCrAdjustment.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, clsCrAdjustment.ModuleID, objCrAdjustment.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt() , EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(( ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            }
            else {
                if((ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///
            
            
            
        }
        //------------------------------ //
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, clsCrAdjustment.ModuleID , objCrAdjustment.getAttribute("DOC_NO").getString());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
        
    }
    
    
    private void GenerateCombos() {
        try {
            //Generates Combo Boxes
            HashMap List=new HashMap();
            String strCondition="";
            ResultSet rsTmp;
            
            cmbHierarchyModel=new EITLComboModel();
            cmbHierarchy.removeAllItems();
            cmbHierarchy.setModel(cmbHierarchyModel);
            
            List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsCrAdjustment.ModuleID);
            
            if(EditMode==EITLERPGLOBAL.EDIT) {
                List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsCrAdjustment.ModuleID );
            }
            for(int i=1;i<=List.size();i++) {
                clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
                ComboData aData=new ComboData();
                aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
                aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
                cmbHierarchyModel.addElement(aData);
            }
        } catch(Exception e) {
        }
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Panel1.getComponentCount()-1;i++) {
            if(Panel1.getComponent(i).getName()!=null) {
                
                FieldName=Panel1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Panel1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//
    }
    
    private void FormatGrid() {
        
        Updating=true; //Stops recursion
        
        try {
            
            cmdRemove.requestFocus();
            
            DataModel=new EITLTableModel();
            Table.removeAll();
            
            Table.setModel(DataModel);
            TableColumnModel ColModel=Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            DataModel.addColumn("Sr."); //0
            DataModel.addColumn("PJV No."); //1
            DataModel.addColumn("PJV Date."); //2
            DataModel.addColumn("Adj Amount"); //3
            DataModel.addColumn("Main Account Code"); //4
            DataModel.addColumn("Sub Account Code"); //5
            DataModel.addColumn("Account Name"); //6
            DataModel.addColumn("PO No."); //7
            DataModel.addColumn("PO Date"); //8
            DataModel.addColumn("GRN No."); //9
            DataModel.addColumn("GRN Date"); //10
            DataModel.addColumn("Invoice No."); //11
            DataModel.addColumn("Invoice Date"); //12
            DataModel.addColumn("Ref. Module ID"); //13
            DataModel.addColumn("PJV CompanyID"); //14
            DataModel.addColumn("Payment Voucher No."); //15
            DataModel.addColumn("Voucher Sr. No."); //16
            DataModel.addColumn("Voucher Date"); //17
            DataModel.addColumn("Payment Amount"); //18
            DataModel.addColumn("Payment Voucher CompanyID"); //19
            DataModel.addColumn("Remarks"); //20
            DataModel.addColumn("Selection"); //21
            
            DataModel.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModel.SetVariable(1,"PJV_NO"); //0 - Read Only
            DataModel.SetVariable(2,"PJV_DATE"); //0 - Read Only
            DataModel.SetVariable(3,"ADJ_AMOUNT"); //
            DataModel.SetVariable(4,"MAIN_ACCOUNT_CODE"); //
            DataModel.SetVariable(5,"SUB_ACCOUNT_CODE"); //
            DataModel.SetVariable(6,"ACCOUNT_NAME"); //
            DataModel.SetVariable(7,"PO_NO"); //0 - Read Only
            DataModel.SetVariable(8,"PO_DATE"); //0 - Read Only
            DataModel.SetVariable(9,"GRN_NO"); //0 - Read Only
            DataModel.SetVariable(10,"GRN_DATE"); //0 - Read Only
            DataModel.SetVariable(11,"INVOICE_NO"); //0 - Read Only
            DataModel.SetVariable(12,"INVOICE_DATE"); //0 - Read Only
            DataModel.SetVariable(13,"REF_MODULE_ID"); //0 - Read Only
            DataModel.SetVariable(14,"PJV_COMPANY_ID"); //0 - Read Only
            DataModel.SetVariable(15,"VOUCHER_NO"); //0 - Read Only
            DataModel.SetVariable(16,"VOUCHER_SR_NO"); //0 - Read Only
            DataModel.SetVariable(17,"VOUCHER_DATE"); //0 - Read Only
            DataModel.SetVariable(18,"PAYMENT_AMOUNT"); //0 - Read Only
            DataModel.SetVariable(19,"VOUCHER_COMPANY_ID"); //0 - Read Only
            DataModel.SetVariable(20,"REMARKS"); //0 - Read Only
            DataModel.SetVariable(21,"SELECTION_TYPE"); //20 - Read Only
            
            DataModel.TableReadOnly(true);
            
            for(int i=0;i<DataModel.getColumnCount();i++) {
                DataModel.SetReadOnly(i);
            }
            DataModel.ResetReadOnly(20);
        } catch(Exception e) {
        }
        Updating=false;
        //Table formatting completed
    }
    
    private boolean Validate() {
        if(Table.getRowCount()<=0) {
            JOptionPane.showMessageDialog(this,"Enter atleast one record.","Wrong Adjustment",JOptionPane.ERROR_MESSAGE);
            return false;
        }
//        String Msg ="";
//        for(int i=0;i<Table.getRowCount();i++) {
//            String PaymentVoucher = DataModel.getValueByVariable("VOUCHER_NO", i);
//            double PaymentAmount = UtilFunctions.CDbl(DataModel.getValueByVariable("PAYMENT_AMOUNT", i));
//            String PJVNo = DataModel.getValueByVariable("PJV_NO", i);
//            double AdjustAmount = UtilFunctions.CDbl(DataModel.getValueByVariable("ADJ_AMOUNT", i));
//            String PONo = DataModel.getValueByVariable("PO_NO", i);
//            String PODate = EITLERPGLOBAL.formatDateDB(DataModel.getValueByVariable("PO_DATE", i));
//            String InvoiceNo = DataModel.getValueByVariable("INVOICE_NO", i);
//            String InvoiceDate = EITLERPGLOBAL.formatDateDB(DataModel.getValueByVariable("INVOICE_DATE", i));
//            String MainCode = DataModel.getValueByVariable("MAIN_ACCOUNT_CODE", i);
//            String SubCode = DataModel.getValueByVariable("SUB_ACCOUNT_CODE", i);
//            int VoucherSrNo = Integer.parseInt(DataModel.getValueByVariable("VOUCHER_SR_NO", i));
//            if(data.IsRecordExist("SELECT B.* FROM D_FIN_CR_ADJ_HEADER A,  D_FIN_CR_ADJ_DETAIL B WHERE A.DOC_NO=B.DOC_NO AND B.VOUCHER_NO='"+PaymentVoucher+"' AND A.DOC_NO<>'"+txtDocNo.getText().trim()+"' AND A.APPROVED=0 AND A.CANCELLED=0 ",FinanceGlobal.FinURL)) {
//                Msg = "Payment Voucher already in use in other adjustment document. ";
//                JOptionPane.showMessageDialog(this,Msg,"Wrong Adjustment",JOptionPane.ERROR_MESSAGE);
//                return false;
//            }
//            
//            if(data.IsRecordExist("SELECT B.* FROM D_FIN_CR_ADJ_HEADER A,  D_FIN_CR_ADJ_DETAIL B WHERE A.DOC_NO=B.DOC_NO AND B.PJV_NO='"+PJVNo+"' AND A.DOC_NO<>'"+txtDocNo.getText().trim()+"' AND A.APPROVED=0 AND A.CANCELLED=0 ",FinanceGlobal.FinURL)) {
//                Msg = "PJV Voucher already in use in other adjustment document. ";
//                JOptionPane.showMessageDialog(this,Msg,"Wrong Adjustment",JOptionPane.ERROR_MESSAGE);
//                return false;
//            }
//            
//            for(int j=0;j<Table.getRowCount();j++) {
//                if(i!=j) {
//                    String OtherPaymentVoucher = DataModel.getValueByVariable("VOUCHER_NO", j);
//                    if(OtherPaymentVoucher.equals(PaymentVoucher)) {
//                        JOptionPane.showMessageDialog(this,"Payment Voucher ("+PaymentVoucher+") is already in use. \nIt is repeated at serial no : " + (i+1));
//                        return false;
//                    }
//                }
//            }
//            
//            if(AdjustAmount > PaymentAmount) {
//                Msg = "Adjust Amount ("+AdjustAmount+") is more then Payment Amount("+PaymentAmount+").";
//                JOptionPane.showMessageDialog(this,Msg,"Wrong Adjustment",JOptionPane.ERROR_MESSAGE);
//                return false;
//            }
//            
//            double PJVAmount = data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+PJVNo+"' AND EFFECT='C' ",FinanceGlobal.FinURL);
//            double AdjustedAmount = data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE MAIN_ACCOUNT_CODE='"+MainCode+"' AND SUB_ACCOUNT_CODE='"+SubCode+"' AND INVOICE_NO='"+InvoiceNo+"' AND PO_NO='"+PONo+"' AND EFFECT='D' ",FinanceGlobal.FinURL);
//            if((AdjustedAmount+AdjustAmount) > PJVAmount) {
//                Msg = "Already Adjusted Amount is "+AdjustedAmount+". \n" +
//                "PO/Invoice amount is "+PJVAmount+". \n" +
//                "You are trying to adjust Rs. "+(Math.abs(PJVAmount-AdjustedAmount-AdjustAmount))+" more.";
//                JOptionPane.showMessageDialog(this,Msg,"Wrong Adjustment",JOptionPane.ERROR_MESSAGE);
//                return false;
//            }
//            
//            double otherAdjAmount = 0;
//            for(int j=0;j<Table.getRowCount();j++) {
//                if(i!=j) {
//                    String otherPJVNo = DataModel.getValueByVariable("PJV_NO", j);
//                    if(PJVNo.equals(otherPJVNo)) {
//                        otherAdjAmount += UtilFunctions.CDbl(DataModel.getValueByVariable("ADJ_AMOUNT", j));
//                    }
//                }
//            }
//            
//            if((AdjustedAmount+AdjustAmount+otherAdjAmount) > PJVAmount) {
//                Msg = "Already Adjusted Amount is "+AdjustedAmount+". \n" +
//                "PO/Invoice amount is "+PJVAmount+". \n" +
//                "You are trying to adjust Rs. "+(Math.abs(PJVAmount-AdjustedAmount-AdjustAmount-otherAdjAmount))+" more.";
//                JOptionPane.showMessageDialog(this,Msg,"Wrong Adjustment",JOptionPane.ERROR_MESSAGE);
//                return false;
//            }
//            
//            String strSQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO=B.VOUCHER_NO " +
//            "AND A.VOUCHER_NO='"+PaymentVoucher+"' AND B.EFFECT='D' AND B.MAIN_ACCOUNT_CODE='"+MainCode+"' AND B.SR_NO="+VoucherSrNo+ " " +
//            "AND B.SUB_ACCOUNT_CODE='"+SubCode+"' AND B.INVOICE_NO='' AND A.APPROVED=1 AND A.CANCELLED=0 ";
//            double AmountCanAdjust = data.getDoubleValueFromDB(strSQL, FinanceGlobal.FinURL);
//            if(AmountCanAdjust<AdjustAmount) {
//                Msg = "Balance Debit Amount is "+AmountCanAdjust+" at Sr. No. "+VoucherSrNo+" in Voucher No :" +PaymentVoucher + ".\n" +
//                "You are trying to adjust Rs. "+AdjustAmount+".\n " +
//                "Not Possible...!";
//                JOptionPane.showMessageDialog(this,Msg,"Wrong Adjustment",JOptionPane.ERROR_MESSAGE);
//                return false;
//            }
//        }
        return true;
    }
}
