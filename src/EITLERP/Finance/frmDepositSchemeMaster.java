/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP.Finance;

/**
 *
 * @author  nitin
 */
/*<APPLET CODE=frmInward.class HEIGHT=500 WIDTH=665></APPLET>*/

import javax.swing.*;
import java.awt.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import javax.swing.text.*;
import EITLERP.Utils.*;
import java.sql.*;
import java.net.*;
import EITLERP.*;


public class frmDepositSchemeMaster extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsDepositSchemeMaster objSchemeMst;
    
    private boolean Updating=false;
    
    private String theDocNo="";
    
    private EITLTableModel DataModelA;
    private EITLTableModel DataModelDtl;
    private EITLTableModel DataModelHS;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbDepositTypeModel;
    private EITLComboModel cmbIntCalcTypeModel;
    private EITLComboModel cmbSchemeTypeModel;
    
    private int SelHierarchyID=0;
    private int lnFromID=0;
    
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    private boolean IsGenerating=false;
    
    /** Creates new form frmTemplate */
    public frmDepositSchemeMaster() {
        
        setSize(680,580);
        initComponents();
        
        GenerateCombos();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        cmbDepositType.enable(false);
        cmbIntCalcType.enable(false);
        cmbSchemeType.enable(false);
        objSchemeMst=new clsDepositSchemeMaster();
        
        SetMenuForRights();
        
        if(getName().equals("Link")) {
            
        }
        else {
            
            if(objSchemeMst.LoadData(EITLERPGLOBAL.gCompanyID)) {
                objSchemeMst.MoveFirst();
                DisplayData();
                SetMenuForRights();
                SetFields(false);
                ShowMessage("Ready ........");
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+objSchemeMst.LastError);
            }
        }
        //DataModelDtl.TableReadOnly(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        txtAuditRemarks = new javax.swing.JTextField();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Header = new javax.swing.JTabbedPane();
        Panel1 = new javax.swing.JPanel();
        jTextArea2 = new javax.swing.JTextArea();
        txtSchemeName = new javax.swing.JTextField();
        lblSubCode = new javax.swing.JLabel();
        lblAccountID = new javax.swing.JLabel();
        txtSchemeID = new javax.swing.JTextField();
        txtMinAmount = new javax.swing.JTextField();
        lblAccountName = new javax.swing.JLabel();
        lblAccountName1 = new javax.swing.JLabel();
        txtIntCalcPeriod = new javax.swing.JTextField();
        lblSubCode1 = new javax.swing.JLabel();
        txtMinPeriod = new javax.swing.JTextField();
        lblSubCode2 = new javax.swing.JLabel();
        lblSubCode4 = new javax.swing.JLabel();
        lblSubCode5 = new javax.swing.JLabel();
        lblSubCode6 = new javax.swing.JLabel();
        lblSubCode7 = new javax.swing.JLabel();
        txtIntAccCode = new javax.swing.JTextField();
        txtDepositAccCode = new javax.swing.JTextField();
        txtDedPercentage = new javax.swing.JTextField();
        cmbDepositType = new javax.swing.JComboBox();
        cmbIntCalcType = new javax.swing.JComboBox();
        txtIntAccName = new javax.swing.JTextField();
        txtDepositAccName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableDtl = new javax.swing.JTable();
        cmdAddDtl = new javax.swing.JButton();
        cmdRemoveDtl = new javax.swing.JButton();
        lblAccountName2 = new javax.swing.JLabel();
        cmbSchemeType = new javax.swing.JComboBox();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack2 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        txtAuditRemarks.setEnabled(false);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 660, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" DEPOSIT SCHEME MASTER");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 660, 25);

        Panel1.setLayout(null);

        Panel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Panel1.add(jTextArea2);
        jTextArea2.setBounds(177, 29, 0, 15);

        txtSchemeName.setName("PARTY_CODE");
        txtSchemeName.setNextFocusableComponent(txtMinAmount);
        txtSchemeName.setEnabled(false);
        txtSchemeName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSchemeNameFocusGained(evt);
            }
        });

        Panel1.add(txtSchemeName);
        txtSchemeName.setBounds(170, 50, 410, 19);

        lblSubCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode.setText("Scheme Name :");
        lblSubCode.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode);
        lblSubCode.setBounds(5, 51, 162, 15);

        lblAccountID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountID.setText("Scheme ID :");
        lblAccountID.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblAccountID);
        lblAccountID.setBounds(5, 21, 162, 15);

        txtSchemeID.setEditable(false);
        txtSchemeID.setName("PARTY_ID");
        txtSchemeID.setNextFocusableComponent(txtSchemeName);
        txtSchemeID.setEnabled(false);
        txtSchemeID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSchemeIDFocusGained(evt);
            }
        });

        Panel1.add(txtSchemeID);
        txtSchemeID.setBounds(170, 20, 120, 19);

        txtMinAmount.setName("PARTY_NAME");
        txtMinAmount.setNextFocusableComponent(cmbIntCalcType);
        txtMinAmount.setEnabled(false);
        txtMinAmount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMinAmountFocusGained(evt);
            }
        });

        Panel1.add(txtMinAmount);
        txtMinAmount.setBounds(170, 80, 90, 19);

        lblAccountName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountName.setText("Minimum Amount :");
        lblAccountName.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblAccountName);
        lblAccountName.setBounds(5, 80, 162, 15);

        lblAccountName1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountName1.setText("Interest Calculation Period :");
        lblAccountName1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblAccountName1);
        lblAccountName1.setBounds(260, 112, 175, 15);

        txtIntCalcPeriod.setName("DESCRIPTION");
        txtIntCalcPeriod.setNextFocusableComponent(txtDedPercentage);
        txtIntCalcPeriod.setEnabled(false);
        txtIntCalcPeriod.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtIntCalcPeriodFocusGained(evt);
            }
        });

        Panel1.add(txtIntCalcPeriod);
        txtIntCalcPeriod.setBounds(439, 110, 60, 19);

        lblSubCode1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode1.setText("Minimum Period :");
        lblSubCode1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode1);
        lblSubCode1.setBounds(5, 110, 162, 15);

        txtMinPeriod.setName("PARTY_CODE");
        txtMinPeriod.setNextFocusableComponent(txtIntCalcPeriod);
        txtMinPeriod.setEnabled(false);
        txtMinPeriod.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMinPeriodFocusGained(evt);
            }
        });

        Panel1.add(txtMinPeriod);
        txtMinPeriod.setBounds(170, 110, 60, 19);

        lblSubCode2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode2.setText("Interest Calculation Type :");
        lblSubCode2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode2);
        lblSubCode2.setBounds(260, 82, 175, 15);

        lblSubCode4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode4.setText("Deposit Type :");
        lblSubCode4.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode4);
        lblSubCode4.setBounds(260, 144, 175, 15);

        lblSubCode5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode5.setText("Interest Account Code :");
        lblSubCode5.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode5);
        lblSubCode5.setBounds(5, 170, 162, 15);

        lblSubCode6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode6.setText("Deposit Account Code :");
        lblSubCode6.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode6);
        lblSubCode6.setBounds(5, 200, 162, 15);

        lblSubCode7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode7.setText("Percentage of Deduction :");
        lblSubCode7.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode7);
        lblSubCode7.setBounds(5, 142, 162, 15);

        txtIntAccCode.setName("PARTY_ID");
        txtIntAccCode.setNextFocusableComponent(txtDepositAccCode);
        txtIntAccCode.setEnabled(false);
        txtIntAccCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtIntAccCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIntAccCodeFocusLost(evt);
            }
        });
        txtIntAccCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtIntAccCodeKeyPressed(evt);
            }
        });

        Panel1.add(txtIntAccCode);
        txtIntAccCode.setBounds(170, 170, 120, 19);

        txtDepositAccCode.setName("PARTY_ID");
        txtDepositAccCode.setNextFocusableComponent(cmdAddDtl);
        txtDepositAccCode.setEnabled(false);
        txtDepositAccCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDepositAccCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDepositAccCodeFocusLost(evt);
            }
        });
        txtDepositAccCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDepositAccCodeKeyPressed(evt);
            }
        });

        Panel1.add(txtDepositAccCode);
        txtDepositAccCode.setBounds(170, 200, 120, 19);

        txtDedPercentage.setName("PARTY_ID");
        txtDedPercentage.setNextFocusableComponent(cmbDepositType);
        txtDedPercentage.setEnabled(false);
        txtDedPercentage.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDedPercentageFocusGained(evt);
            }
        });

        Panel1.add(txtDedPercentage);
        txtDedPercentage.setBounds(170, 140, 60, 19);

        cmbDepositType.setNextFocusableComponent(txtIntAccCode);
        cmbDepositType.setEnabled(false);
        cmbDepositType.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbDepositTypeFocusGained(evt);
            }
        });

        Panel1.add(cmbDepositType);
        cmbDepositType.setBounds(439, 140, 150, 24);

        cmbIntCalcType.setNextFocusableComponent(txtMinPeriod);
        cmbIntCalcType.setEnabled(false);
        cmbIntCalcType.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbIntCalcTypeFocusGained(evt);
            }
        });

        Panel1.add(cmbIntCalcType);
        cmbIntCalcType.setBounds(439, 80, 150, 24);

        txtIntAccName.setName("REMARKS");
        txtIntAccName.setEnabled(false);
        Panel1.add(txtIntAccName);
        txtIntAccName.setBounds(300, 170, 280, 19);

        txtDepositAccName.setName("REMARKS");
        txtDepositAccName.setEnabled(false);
        Panel1.add(txtDepositAccName);
        txtDepositAccName.setBounds(300, 200, 280, 19);

        TableDtl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Title 1"
            }
        ));
        jScrollPane1.setViewportView(TableDtl);

        Panel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 260, 640, 110);

        cmdAddDtl.setFont(new java.awt.Font("Dialog", 0, 10));
        cmdAddDtl.setMnemonic('A');
        cmdAddDtl.setText("Add New");
        cmdAddDtl.setNextFocusableComponent(cmdRemoveDtl);
        cmdAddDtl.setEnabled(false);
        cmdAddDtl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddDtlActionPerformed(evt);
            }
        });
        cmdAddDtl.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdAddDtlFocusGained(evt);
            }
        });

        Panel1.add(cmdAddDtl);
        cmdAddDtl.setBounds(460, 380, 80, 20);

        cmdRemoveDtl.setFont(new java.awt.Font("Dialog", 0, 10));
        cmdRemoveDtl.setMnemonic('R');
        cmdRemoveDtl.setText("Remove");
        cmdRemoveDtl.setNextFocusableComponent(txtSchemeID);
        cmdRemoveDtl.setEnabled(false);
        cmdRemoveDtl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveDtlActionPerformed(evt);
            }
        });
        cmdRemoveDtl.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdRemoveDtlFocusGained(evt);
            }
        });

        Panel1.add(cmdRemoveDtl);
        cmdRemoveDtl.setBounds(550, 380, 86, 20);

        lblAccountName2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountName2.setText("Scheme Type :");
        lblAccountName2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblAccountName2);
        lblAccountName2.setBounds(260, 23, 175, 15);

        cmbSchemeType.setNextFocusableComponent(txtMinPeriod);
        cmbSchemeType.setEnabled(false);
        Panel1.add(cmbSchemeType);
        cmbSchemeType.setBounds(439, 20, 150, 24);

        Header.addTab("Scheme Details", Panel1);

        Tab2.setLayout(null);

        Tab2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(16, 18, 66, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });

        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 14, 184, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(20, 52, 56, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 50, 182, 19);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(20, 82, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 78, 468, 19);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 120, 86, 15);

        jPanel7.setLayout(null);

        jPanel7.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel7.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel7.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel7.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setEnabled(false);
        jPanel7.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel7);
        jPanel7.setBounds(88, 120, 182, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(18, 232, 60, 15);

        cmbSendTo.setEnabled(false);
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(88, 228, 184, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(16, 264, 60, 15);

        txtToRemarks.setEnabled(false);
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 260, 516, 19);

        cmdBack2.setText("<< Back");
        cmdBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack2ActionPerformed(evt);
            }
        });

        Tab2.add(cmdBack2);
        cmdBack2.setBounds(534, 350, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(559, 77, 33, 21);

        Header.addTab("Approval", Tab2);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status");
        jPanel6.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel6.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 614, 144);

        lblDocumentHistory.setText("Document Update History");
        jPanel6.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 191, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel6.add(jScrollPane3);
        jScrollPane3.setBounds(13, 207, 473, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        jPanel6.add(cmdViewHistory);
        cmdViewHistory.setBounds(498, 242, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        jPanel6.add(cmdNormalView);
        cmdNormalView.setBounds(498, 273, 132, 24);

        cmdPreviewA.setText("Preview Report");
        cmdPreviewA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewAActionPerformed(evt);
            }
        });

        jPanel6.add(cmdPreviewA);
        cmdPreviewA.setBounds(498, 209, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        jPanel6.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(498, 305, 132, 24);

        Header.addTab("Status", jPanel6);

        getContentPane().add(Header);
        Header.setBounds(0, 70, 660, 440);
        Header.getAccessibleContext().setAccessibleName("Scheme Details");
        Header.getAccessibleContext().setAccessibleDescription("Scheme Details");

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(3, 515, 655, 22);

    }//GEN-END:initComponents
    
    private void txtDepositAccCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDepositAccCodeFocusLost
        // TODO add your handling code here:
        if(!txtDepositAccCode.getText().trim().equals("")) {
            txtDepositAccName.setText(data.getStringValueFromDB("SELECT ACCOUNT_NAME FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE='"+txtDepositAccCode.getText()+"' ",FinanceGlobal.FinURL));
        }
        else {
            txtDepositAccName.setText("");
        }
    }//GEN-LAST:event_txtDepositAccCodeFocusLost
    
    private void txtIntAccCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIntAccCodeFocusLost
        // TODO add your handling code here:
        if(!txtIntAccCode.getText().trim().equals("")) {
            txtIntAccName.setText(data.getStringValueFromDB("SELECT ACCOUNT_NAME FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE='"+txtIntAccCode.getText()+"' ",FinanceGlobal.FinURL));
        } else {
            txtIntAccName.setText("");
        }
    }//GEN-LAST:event_txtIntAccCodeFocusLost
    
    private void txtDedPercentageFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDedPercentageFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Percentage of Deposit...");
    }//GEN-LAST:event_txtDedPercentageFocusGained
    
    private void txtDepositAccCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDepositAccCodeFocusGained
        // TODO add your handling code here:
        ShowMessage("Press F1...");
    }//GEN-LAST:event_txtDepositAccCodeFocusGained
    
    private void txtIntAccCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIntAccCodeFocusGained
        // TODO add your handling code here:
        ShowMessage("Press F1...");
    }//GEN-LAST:event_txtIntAccCodeFocusGained
    
    private void cmbDepositTypeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbDepositTypeFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Deposit Type...");
    }//GEN-LAST:event_cmbDepositTypeFocusGained
    
    private void txtIntCalcPeriodFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIntCalcPeriodFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Interest Calculation Period for Scheme...");
    }//GEN-LAST:event_txtIntCalcPeriodFocusGained
    
    private void cmbIntCalcTypeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbIntCalcTypeFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Interest Calculation Type...");
    }//GEN-LAST:event_cmbIntCalcTypeFocusGained
    
    private void txtMinPeriodFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMinPeriodFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Minimum Period Required in Months...");
    }//GEN-LAST:event_txtMinPeriodFocusGained
    
    private void txtMinAmountFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMinAmountFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Minimum Amount Required...");
    }//GEN-LAST:event_txtMinAmountFocusGained
    
    private void txtSchemeNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSchemeNameFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Scheme Name...");
    }//GEN-LAST:event_txtSchemeNameFocusGained
    
    private void txtSchemeIDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSchemeIDFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Scheme ID...");
    }//GEN-LAST:event_txtSchemeIDFocusGained
    
    private void cmdPreviewAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewAActionPerformed
    
    private void cmdBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack2ActionPerformed
        // TODO add your handling code here:
        Header.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack2ActionPerformed
    
    private void cmdRemoveDtlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveDtlActionPerformed
        // TODO add your handling code here:
        try {
            if(TableDtl.getRowCount()>0) {
                int CurrentRow=TableDtl.getSelectedRow();
                
                if(CurrentRow>0) {
                    CurrentRow--;
                }
                
                DataModelDtl.removeRow(TableDtl.getSelectedRow());
                
                if(TableDtl.getRowCount()-1>CurrentRow) {
                    TableDtl.changeSelection(CurrentRow, DataModelDtl.getColFromVariable("INTEREST_MONTH"),false,false);
                    //TableDtl.changeSelection(CurrentRow, DataModelDtl.getColFromVariable("INTEREST_PERCENTAGE"),false,false);
                    //TableDtl.changeSelection(CurrentRow, DataModelDtl.getColFromVariable("PERCENTAGE_OF_BROKER"),false,false);
                }
                UpdateSrNo();
            }
        }
        catch(Exception e) {
        }
    }//GEN-LAST:event_cmdRemoveDtlActionPerformed
    
    private void cmdRemoveDtlFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdRemoveDtlFocusGained
        // TODO add your handling code here:
        ShowMessage("Click on this button to remove selected row from the table");
    }//GEN-LAST:event_cmdRemoveDtlFocusGained
    
    private void cmdAddDtlFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdAddDtlFocusGained
        // TODO add your handling code here:
        ShowMessage("Click on this button to add a new row to table");
    }//GEN-LAST:event_cmdAddDtlFocusGained
    
    private void cmdAddDtlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddDtlActionPerformed
        // TODO add your handling code here:
        try {
            Object[] rowData=new Object[4];
            rowData[0]=Integer.toString(TableDtl.getRowCount()+1);
            rowData[1]="";
            rowData[2]="";
            rowData[3]="";
            DataModelDtl.addRow(rowData);
            TableDtl.changeSelection(TableDtl.getRowCount()-1, 1, false,false);
            //TableDtl.changeSelection(TableDtl.getRowCount()-1, 2, false,false);
            //TableDtl.changeSelection(TableDtl.getRowCount()-1, 3, false,false);
            TableDtl.requestFocus();
        }
        catch(Exception e) {
        }
    }//GEN-LAST:event_cmdAddDtlActionPerformed
    
    private void txtDepositAccCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDepositAccCodeKeyPressed
        // TODO add your handling code here:
        try {
            
            if(evt.getKeyCode()==112) {
                LOV aList=new LOV();
                
                aList.SQL="SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL ORDER BY ACCOUNT_NAME";
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=FinanceGlobal.FinURL;
                
                if(aList.ShowLOV()) {
                    txtDepositAccCode.setText(aList.ReturnVal);
                    txtDepositAccName.setText(data.getStringValueFromDB("SELECT ACCOUNT_NAME FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE='"+txtDepositAccCode.getText()+"' ",FinanceGlobal.FinURL));
                }
            }
        }
        catch(Exception e) {
        }
    }//GEN-LAST:event_txtDepositAccCodeKeyPressed
    
    private void txtIntAccCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIntAccCodeKeyPressed
        // TODO add your handling code here:
        try {
            
            if(evt.getKeyCode()==112) {
                LOV aList=new LOV();
                
                aList.SQL="SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL ORDER BY ACCOUNT_NAME";
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=FinanceGlobal.FinURL;
                
                if(aList.ShowLOV()) {
                    txtIntAccCode.setText(aList.ReturnVal);
                    txtIntAccName.setText(data.getStringValueFromDB("SELECT ACCOUNT_NAME FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE='"+txtIntAccCode.getText()+"' ",FinanceGlobal.FinURL));
                }
            }
        }
        catch(Exception e) {
        }
    }//GEN-LAST:event_txtIntAccCodeKeyPressed
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        objSchemeMst.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveFirst();
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        objSchemeMst.ShowHistory(EITLERPGLOBAL.gCompanyID, objSchemeMst.getAttribute("SCHEME_ID").getString());
        MoveFirst();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
        
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if(ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID,clsDepositSchemeMaster.ModuleID , Integer.toString(objSchemeMst.getAttribute("SCHEME_ID").getInt()))) {
                cmbSendTo.setEnabled(true);
            }
            else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateFromCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
        
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        objSchemeMst.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            //Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Header;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel Panel1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableDtl;
    private javax.swing.JTable TableHS;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cmbDepositType;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbIntCalcType;
    private javax.swing.JComboBox cmbSchemeType;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdAddDtl;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemoveDtl;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel lblAccountID;
    private javax.swing.JLabel lblAccountName;
    private javax.swing.JLabel lblAccountName1;
    private javax.swing.JLabel lblAccountName2;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblSubCode;
    private javax.swing.JLabel lblSubCode1;
    private javax.swing.JLabel lblSubCode2;
    private javax.swing.JLabel lblSubCode4;
    private javax.swing.JLabel lblSubCode5;
    private javax.swing.JLabel lblSubCode6;
    private javax.swing.JLabel lblSubCode7;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtDedPercentage;
    private javax.swing.JTextField txtDepositAccCode;
    private javax.swing.JTextField txtDepositAccName;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtIntAccCode;
    private javax.swing.JTextField txtIntAccName;
    private javax.swing.JTextField txtIntCalcPeriod;
    private javax.swing.JTextField txtMinAmount;
    private javax.swing.JTextField txtMinPeriod;
    private javax.swing.JTextField txtSchemeID;
    private javax.swing.JTextField txtSchemeName;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    private void SetFields(boolean pStat) {
        
        txtDedPercentage.setEnabled(pStat);
        txtDepositAccCode.setEnabled(pStat);
        txtIntAccCode.setEnabled(pStat);
        txtIntCalcPeriod.setEnabled(pStat);
        txtMinAmount.setEnabled(pStat);
        txtMinPeriod.setEnabled(pStat);
        txtSchemeID.setEnabled(pStat);
        txtSchemeName.setEnabled(pStat);
        cmbDepositType.setEnabled(pStat);
        cmbIntCalcType.setEnabled(pStat);
        cmbSchemeType.setEnabled(pStat);
        
        cmdAddDtl.setEnabled(pStat);
        cmdRemoveDtl.setEnabled(pStat);
        
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        jScrollPane1.setEnabled(pStat);
        TableDtl.setEnabled(pStat);
    }
    
    private void ClearFields() {
        
        txtSchemeID.setText("");
        cmbSchemeType.setSelectedIndex(0);
        txtSchemeName.setText("");
        txtMinAmount.setText("");
        txtMinPeriod.setText("");
        cmbIntCalcType.setSelectedIndex(0);
        txtIntCalcPeriod.setText("");
        cmbDepositType.setSelectedIndex(0);
        txtIntAccCode.setText("");
        txtIntAccName.setText("");
        txtDepositAccCode.setText("");
        txtDepositAccName.setText("");
        txtDedPercentage.setText("");
        
        FormatGridDetail();
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                if(objSchemeMst.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(objSchemeMst.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setText("DEPOSIT SCHEME MASTER");
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(objSchemeMst.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
        }
        catch(Exception c) {
        }
        //============================================//
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=clsDepositSchemeMaster.ModuleID;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        ClearFields();
        
        txtSchemeID.setText(objSchemeMst.getAttribute("SCHEME_ID").getString());
        EITLERPGLOBAL.setComboIndex(cmbSchemeType, objSchemeMst.getAttribute("SCHEME_TYPE").getInt());
        txtSchemeName.setText(objSchemeMst.getAttribute("SCHEME_NAME").getString());
        txtMinAmount.setText(Integer.toString(objSchemeMst.getAttribute("MINIMUM_AMOUNT").getInt()));
        txtMinPeriod.setText(Integer.toString(objSchemeMst.getAttribute("MINIMUM_PERIOD").getInt()));
        EITLERPGLOBAL.setComboIndex(cmbIntCalcType,objSchemeMst.getAttribute("INTEREST_CALCULATION_TYPE").getInt());
        txtIntCalcPeriod.setText(Integer.toString(objSchemeMst.getAttribute("INTEREST_CALCULATION_PERIOD").getInt()));
        txtDedPercentage.setText(Integer.toString(objSchemeMst.getAttribute("PM_DEDUCTION_PERCENTAGE").getInt()));
        EITLERPGLOBAL.setComboIndex(cmbDepositType,objSchemeMst.getAttribute("DEPOSIT_TYPE_ID").getInt());
        txtIntAccCode.setText(objSchemeMst.getAttribute("INT_MAIN_ACCOUNT_CODE").getString());
        txtIntAccName.setText(data.getStringValueFromDB("SELECT ACCOUNT_NAME FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE='"+ txtIntAccCode.getText().trim() +"' ",FinanceGlobal.FinURL));
        txtDepositAccCode.setText(objSchemeMst.getAttribute("DEPOSIT_MAIN_ACCOUNT_CODE").getString());
        txtDepositAccName.setText(data.getStringValueFromDB("SELECT ACCOUNT_NAME FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE='"+ txtDepositAccCode.getText().trim() +"' ",FinanceGlobal.FinURL));
        //************ Misc. Display *****************//
        txtToRemarks.setText("");
        SetupApproval();
        
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,objSchemeMst.getAttribute("HIERARCHY_ID").getInt());
        
        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List=new HashMap();
        String DocNo=objSchemeMst.getAttribute("SCHEME_ID").getString();
        List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, clsDepositSchemeMaster.ModuleID , DocNo);
        for(int i=1;i<=List.size();i++) {
            clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
            Object[] rowData=new Object[7];
            
            rowData[0]=Integer.toString(i);
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
            rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
            rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
            rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
            rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
            rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
            
            DataModelA.addRow(rowData);
        }
        //============================================================//
        
        FormatGridDetail();
        //=========Now Generate Table====================//
        for(int i=1;i<=objSchemeMst.colSchemePeriod.size();i++) {
            clsDepositSchemePeriod ObjItem=(clsDepositSchemePeriod)objSchemeMst.colSchemePeriod.get(Integer.toString(i));
            Object[] rowData=new Object[1];
            DataModelDtl.addRow(rowData);
            
            int NewRow=TableDtl.getRowCount()-1;
            
            DataModelDtl.setValueByVariable("SR_NO",Integer.toString(i), NewRow);
            DataModelDtl.setValueByVariable("INTEREST_MONTH",Integer.toString(ObjItem.getAttribute("INTEREST_MONTH").getInt()),NewRow);
            DataModelDtl.setValueByVariable("INTEREST_PERCENTAGE",String.valueOf(ObjItem.getAttribute("INTEREST_PERCENTAGE").getDouble()),NewRow);
            DataModelDtl.setValueByVariable("PERCENTAGE_OF_BROKER",String.valueOf(ObjItem.getAttribute("PERCENTAGE_OF_BROKER").getDouble()),NewRow);
        }
        //===============================================//
        
        //=========================== Audit Trail ===========================//
        FormatGridHS();
        
        HashMap History=clsDepositSchemeMaster.getHistoryList(EITLERPGLOBAL.gCompanyID, objSchemeMst.getAttribute("SCHEME_ID").getString());
        for(int i=1;i<=History.size();i++) {
            clsDepositSchemeMaster ObjHistory=(clsDepositSchemeMaster)History.get(Integer.toString(i));
            Object[] rowData=new Object[5];
            
            rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
            rowData[1]=ObjHistory.getAttribute("UPDATED_BY").getString();
            rowData[2]=ObjHistory.getAttribute("ENTRY_DATE").getString();
            
            String ApprovalStatus="";
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus="Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus="Final Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus="Waiting";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus="Rejected";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus="Pending";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus="Skiped";
            }
            
            rowData[3]=ApprovalStatus;
            rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
            
            DataModelHS.addRow(rowData);
        }
        //=========================== Audit Trail Over ===========================//
        
        //********************************************//
        
    }
    
    //Sets data to the Class Object
    private void SetData() {
        objSchemeMst.setAttribute("FFNO",FFNo);
        objSchemeMst.setAttribute("SCHEME_ID",txtSchemeID.getText());
        objSchemeMst.setAttribute("SCHEME_TYPE", EITLERPGLOBAL.getComboCode(cmbSchemeType));
        objSchemeMst.setAttribute("SCHEME_NAME",txtSchemeName.getText());
        objSchemeMst.setAttribute("MINIMUM_AMOUNT",UtilFunctions.CDbl(txtMinAmount.getText()));
        objSchemeMst.setAttribute("MINIMUM_PERIOD",UtilFunctions.CDbl(txtMinPeriod.getText()));
        objSchemeMst.setAttribute("INTEREST_CALCULATION_TYPE",EITLERPGLOBAL.getComboCode(cmbIntCalcType));
        objSchemeMst.setAttribute("INTEREST_CALCULATION_PERIOD",UtilFunctions.CInt(txtIntCalcPeriod.getText()));
        objSchemeMst.setAttribute("PM_DEDUCTION_PERCENTAGE",UtilFunctions.CDbl(txtDedPercentage.getText()));
        objSchemeMst.setAttribute("DEPOSIT_TYPE_ID",EITLERPGLOBAL.getComboCode(cmbDepositType));
        objSchemeMst.setAttribute("INT_MAIN_ACCOUNT_CODE",txtIntAccCode.getText());
        objSchemeMst.setAttribute("DEPOSIT_MAIN_ACCOUNT_CODE",txtDepositAccCode.getText());
        
        
        //----- Update Approval Specific Fields -----------//
        objSchemeMst.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        objSchemeMst.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        objSchemeMst.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        objSchemeMst.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            objSchemeMst.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            objSchemeMst.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            objSchemeMst.setAttribute("APPROVAL_STATUS","R");
            objSchemeMst.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            objSchemeMst.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        //======= Set Line part ============
        objSchemeMst.colSchemePeriod.clear();
        
        for(int i=0;i<TableDtl.getRowCount();i++) {
            clsDepositSchemePeriod objItem=new clsDepositSchemePeriod();
            objItem.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
            objItem.setAttribute("SCHEME_ID",txtSchemeID.getText());
            objItem.setAttribute("SR_NO",i+1);
            objItem.setAttribute("INTEREST_MONTH",UtilFunctions.CInt(DataModelDtl.getValueByVariable("INTEREST_MONTH",i)));
            objItem.setAttribute("INTEREST_PERCENTAGE",Double.parseDouble(DataModelDtl.getValueByVariable("INTEREST_PERCENTAGE",i)));
            objItem.setAttribute("PERCENTAGE_OF_BROKER",Double.parseDouble(DataModelDtl.getValueByVariable("PERCENTAGE_OF_BROKER",i)));
            
            objSchemeMst.colSchemePeriod.put(Integer.toString(objSchemeMst.colSchemePeriod.size()+1), objItem);
        }
    }
    
    private void SetMenuForRights() {
        
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10841)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10842)) {
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10843)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10844)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    private void Add() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=84;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo = aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtSchemeID.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID,84,FFNo,false));
            txtSchemeName.requestFocus();
            
            lblTitle.setText("DEPOSIT SCHEME MASTER - " + txtSchemeID.getText());
            lblTitle.setBackground(Color.BLUE);
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        String SchemeID=objSchemeMst.getAttribute("SCHEME_ID").getString();
        String lDocNo=SchemeID;
        
        
        if(objSchemeMst.IsEditable(EITLERPGLOBAL.gCompanyID, SchemeID, EITLERPGLOBAL.gNewUserID)) {
            
            EITLERPGLOBAL.ChangeCursorToWait(this);
            
            EditMode=EITLERPGLOBAL.EDIT;
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            SetupApproval();
            //----------------//
            
            if(ApprovalFlow.IsCreator(clsDepositSchemeMaster.ModuleID ,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10492)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            
            SetupApproval();
            DisableToolbar();
            txtSchemeName.requestFocus();
            
            EITLERPGLOBAL.ChangeCursorToDefault(this);
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        if(objSchemeMst.Delete(EITLERPGLOBAL.gNewUserID)) {
            MoveLast();
        }
    }
    
    private boolean Validate() {
        if(txtSchemeID.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter Scheme ID.");
            return false;
        }
        
        if(txtSchemeName.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter Scheme Name.");
            return false;
        }
        
        if(txtMinAmount.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter Minimum Amount.");
            return false;
        }
        
        if(txtMinPeriod.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter Minimum Period.");
            return false;
        }
        
        if(txtIntCalcPeriod.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter Interest Period.");
            return false;
        }
        
        if(cmbIntCalcType.getSelectedIndex()==0) {
            JOptionPane.showMessageDialog(null,"Please Select Interest Calculation Type.");
            return false;
        }
        
        if(cmbSchemeType.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null,"Please Select Scheme Type.");
            return false;
        }
        
        if(cmbDepositType.getSelectedIndex()==0) {
            JOptionPane.showMessageDialog(null,"Please Select Deposit Type.");
            return false;
        }
        
        if(txtIntAccCode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Select Interst Main Account Code.");
            return false;
        }
        
        if(txtDepositAccCode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Select Deposit Main Account Code.");
            return false;
        }
        
        if(TableDtl.getRowCount() < 0 ) {
            JOptionPane.showMessageDialog(null,"Please Enter Deposit Period.");
            return false;
        }
        return true;
    }
    
    private void Save() {
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        if(!Validate()) {
            EITLERPGLOBAL.ChangeCursorToDefault(this);
            return;
        }
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(objSchemeMst.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+objSchemeMst.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(objSchemeMst.Update()) {
                //Nothing to do
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+objSchemeMst.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        lblTitle.setText(" DEPOSIT SCHEME MASTER");
        lblTitle.setBackground(Color.GRAY);
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Find() {
        
        Loader ObjLoader=new Loader(this,"EITLERP.Finance.frmDepositSchemeFind",true);
        frmDepositSchemeFind ObjReturn= (frmDepositSchemeFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!objSchemeMst.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveFirst();
        }
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objSchemeMst.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objSchemeMst.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objSchemeMst.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objSchemeMst.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    public void FindEx(int pCompanyID,int pDocNo) {
        objSchemeMst.Filter(" WHERE SCHEME_ID="+pDocNo,pCompanyID);
        objSchemeMst.MoveFirst();
        DisplayData();
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
    }
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    
    private void SetupApproval() {
        
        /*if(cmbHierarchy.getItemCount()>1) {
            cmbHierarchy.setEnabled(true);
        }*/
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, clsDepositSchemeMaster.ModuleID , Integer.toString(objSchemeMst.getAttribute("SCHEME_ID").getInt()));
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,clsDepositSchemeMaster.ModuleID ,FromUserID,Integer.toString(objSchemeMst.getAttribute("SCHEME_ID").getInt()));
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
        
    }
    
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, clsDepositSchemeMaster.ModuleID ,Integer.toString(objSchemeMst.getAttribute("SCHEME_ID").getInt()));
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e) {
        }
    }
    
    private void GenerateRejectedUserCombo() {
        HashMap List=new HashMap();
        HashMap DeptList=new HashMap();
        HashMap DeptUsers=new HashMap();
        
        //----- Generate cmbType ------- //
        cmbToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);
        
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            
            
            /// NEW CODE ///
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID,clsDepositSchemeMaster.ModuleID , Integer.toString(objSchemeMst.getAttribute("SCHEME_ID").getInt()), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, clsDepositSchemeMaster.ModuleID, Integer.toString(objSchemeMst.getAttribute("SCHEME_ID").getInt()), ObjUser.getAttribute("USER_ID").getInt() , EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(( ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            }
            else {
                if((ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }// END NEW CODE //
        }
        //------------------------------ //
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, clsDepositSchemeMaster.ModuleID , Integer.toString(objSchemeMst.getAttribute("SCHEME_ID").getInt()));
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
    }
    
    private void GenerateCombos() {
        try {
            
            //Generates Combo Boxes
            
            //---- Generate Interest Calculation Type ----
            cmbIntCalcTypeModel=new EITLComboModel();
            cmbIntCalcType.removeAllItems();
            cmbIntCalcType.setModel(cmbIntCalcTypeModel);
            
            ComboData objData=new ComboData();
            objData.Code=0;
            objData.Text="";
            cmbIntCalcTypeModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=1;
            objData.Text="Fixed";
            cmbIntCalcTypeModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=2;
            objData.Text="Cumulative";
            cmbIntCalcTypeModel.addElement(objData);
            // ---- End of Interest Calculation Type ----
            
            
            //---- Generate Deposit Type ----
            HashMap TypeList=new HashMap();
            String str_Condition="";
            ResultSet rsDepositeType;
            
            cmbDepositTypeModel=new EITLComboModel();
            cmbDepositType.removeAllItems();
            cmbDepositType.setModel(cmbDepositTypeModel);
            
            str_Condition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" ";
            
            
            TypeList=clsDepositTypeMaster.getList(str_Condition);
            
            ComboData dData=new ComboData();
            dData.Text="";
            dData.Code=0;
            cmbDepositTypeModel.addElement(dData);
            
            for(int i=1;i<=TypeList.size();i++) {
                clsDepositTypeMaster ObjType=(clsDepositTypeMaster) TypeList.get(Integer.toString(i));
                dData=new ComboData();
                dData.Code=ObjType.getAttribute("DEPOSIT_TYPE_ID").getInt();
                dData.Text=ObjType.getAttribute("DEPOSIT_TYPE_NAME").getString();
                cmbDepositTypeModel.addElement(dData);
            }
            // ---- End of Deposit Type ----
            
            
            //-------- Generate Scheme Type Combo --//
            cmbSchemeTypeModel = new EITLComboModel();
            cmbSchemeType.removeAllItems();
            cmbSchemeType.setModel(cmbSchemeTypeModel);
            
            ComboData sData=new ComboData();
            sData.Code=0;
            sData.Text="";
            cmbSchemeTypeModel.addElement(sData);
            
            sData=new ComboData();
            sData.Code=1;
            sData.Text="FD";
            cmbSchemeTypeModel.addElement(sData);
            
            sData=new ComboData();
            sData.Code=2;
            sData.Text="LD";
            cmbSchemeTypeModel.addElement(sData);
            
            sData=new ComboData();
            sData.Code=3;
            sData.Text="CD";
            cmbSchemeTypeModel.addElement(sData);
            
            sData=new ComboData();
            sData.Code=4;
            sData.Text="DD";
            cmbSchemeTypeModel.addElement(sData);
            
            sData=new ComboData();
            sData.Code=5;
            sData.Text="ND";
            cmbSchemeTypeModel.addElement(sData);
            
            sData=new ComboData();
            sData.Code=6;
            sData.Text="SL";
            cmbSchemeTypeModel.addElement(sData);
            // ---- End of Scheme Type-----
            
            HashMap List=new HashMap();
            String strCondition="";
            ResultSet rsTmp;
            
            cmbHierarchyModel=new EITLComboModel();
            cmbHierarchy.removeAllItems();
            cmbHierarchy.setModel(cmbHierarchyModel);
            
            List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsDepositSchemeMaster.ModuleID);
            
            if(EditMode==EITLERPGLOBAL.EDIT) {
                List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsDepositSchemeMaster.ModuleID );
            }
            for(int i=1;i<=List.size();i++) {
                clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
                ComboData aData=new ComboData();
                aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
                aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
                cmbHierarchyModel.addElement(aData);
            }
            
        }
        catch(Exception e) {
        }
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Panel1.getComponentCount()-1;i++) {
            if(Panel1.getComponent(i).getName()!=null) {
                
                FieldName=Panel1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Panel1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//
    }
    
    private void FormatGridDetail() {
        try {
            
            DataModelDtl=new EITLTableModel();
            
            EITLTableCellRenderer cellRender=new EITLTableCellRenderer();
            cellRender.setHorizontalAlignment(JLabel.RIGHT);
            
            //cmdAddDtl.requestFocus();
            
            TableDtl.removeAll();
            TableDtl.setModel(DataModelDtl);
            
            TableColumnModel ColModel=TableDtl.getColumnModel();
            TableDtl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //Add the columns
            DataModelDtl.addColumn("Sr. No."); //0 Read Only
            DataModelDtl.addColumn("Interest Month"); //1
            DataModelDtl.addColumn("Interest Percentage");
            DataModelDtl.addColumn("Percentage of Broker");
            
            DataModelDtl.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModelDtl.SetVariable(1,"INTEREST_MONTH"); //1
            DataModelDtl.SetVariable(2,"INTEREST_PERCENTAGE");
            DataModelDtl.SetVariable(3,"PERCENTAGE_OF_BROKER");
            
            DataModelDtl.TableReadOnly(false);
            DataModelDtl.SetReadOnly(0);
            //DataModelDtl.SetVariable(1, "");
            
            DataModelDtl.SetNumeric(0,true);
            DataModelDtl.SetNumeric(1, true);
            DataModelDtl.SetNumeric(2, true);
            DataModelDtl.SetNumeric(3, true);
            
            
            TableDtl.getColumnModel().getColumn(1).setCellRenderer(cellRender);
            //Table formatting completed
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void UpdateSrNo() {
        int SrCol=DataModelDtl.getColFromVariable("SR_NO");
        
        for(int i=0;i<TableDtl.getRowCount();i++) {
            TableDtl.setValueAt(Integer.toString(i+1), i, SrCol);
        }
    }
}