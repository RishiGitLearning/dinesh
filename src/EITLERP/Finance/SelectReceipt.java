package EITLERP.Finance;

/**
 *
 * @author  nhpatel
 */
/*<APPLET CODE=SelectMIR.Class HEIGHT=400 WIDTH=700></APPLET>*/

import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;


public class SelectReceipt extends javax.swing.JApplet {
    
    private EITLTableModel DataModel;
    private EITLTableCellRenderer Rend=new EITLTableCellRenderer();
    
    public boolean Cancelled=true;
    public HashMap colSelItems=new HashMap();
    private JDialog aDialog;
    public int ModuleID=0;
    private String SelReceiptNo="";
    
    public static String selPartyCode="";
    
    public String SQL;
    public int ReturnCol;
    public boolean ShowReturnCol;
    public int DefaultSearchOn;
    String ReturnVal="";
    public static String PCode = "";
    public boolean CopyHeader=true;
    public clsSalesDepositMaster ObjReceipt;
    
    private EITLComboModel cmbDeptModel;
    private int SelDeptID=0;
    
    /** Creates new form LOV */
    public SelectReceipt() {
        System.gc();
        initComponents();
        FormatGrid();
        txtPartyCode.setText(PCode);
        txtPartyName.setText(data.getStringValueFromDB("SELECT PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE PARTY_CODE='"+PCode+"' ",FinanceGlobal.FinURL));
        //GenerateCombo();
        //int DeptID=clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID);
        //EITLERPGLOBAL.setComboIndex(cmbDept,DeptID);
        
    }
    
    public void init() {
        System.gc();
        setSize(740,470);
        initComponents();
        FormatGrid();
        txtPartyCode.setText(PCode);
        txtPartyName.setText(data.getStringValueFromDB("SELECT PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE PARTY_CODE='"+PCode+"' ",FinanceGlobal.FinURL));
        //GenerateCombo();
        
        //int DeptID=clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID);
        //EITLERPGLOBAL.setComboIndex(cmbDept,DeptID);
        
    }
    
    public SelectReceipt(String pSQL, int pReturnCol, boolean pShowReturnCol, int pDefaultSearchOn) {
        initComponents();
        DataModel=new EITLTableModel();
        SQL=pSQL;
        ReturnCol=pReturnCol;
        ShowReturnCol=pShowReturnCol;
        DefaultSearchOn=pDefaultSearchOn;
        //  lblSearch.setDisplayedMnemonic('S');
        //  lblSearch.setLabelFor((Component) txtSearch);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel1 = new javax.swing.JLabel();
        lblPartyCode = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        cmdShow = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        cmdOK = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdSelectAll = new javax.swing.JButton();
        cmdClearAll = new javax.swing.JButton();
        chkCopyHeader = new javax.swing.JCheckBox();
        txtPartyName = new javax.swing.JTextField();

        getContentPane().setLayout(null);

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12));
        jLabel1.setText("Select Receipt from the List");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 10, 350, 15);

        lblPartyCode.setDisplayedMnemonic('M');
        lblPartyCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPartyCode.setText("Party Code :");
        getContentPane().add(lblPartyCode);
        lblPartyCode.setBounds(5, 68, 65, 14);

        txtPartyCode.setEditable(false);
        txtPartyCode.setEnabled(false);
        getContentPane().add(txtPartyCode);
        txtPartyCode.setBounds(76, 65, 106, 21);

        cmdShow.setMnemonic('S');
        cmdShow.setText("Show Items");
        cmdShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowActionPerformed(evt);
            }
        });

        getContentPane().add(cmdShow);
        cmdShow.setBounds(450, 65, 114, 22);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(12, 124, 660, 225);

        jPanel4.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jPanel4);
        jPanel4.setBounds(8, 110, 662, 6);

        cmdOK.setText("OK");
        cmdOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOKActionPerformed(evt);
            }
        });

        getContentPane().add(cmdOK);
        cmdOK.setBounds(502, 356, 78, 23);

        cmdCancel.setText("Cancel");
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        getContentPane().add(cmdCancel);
        cmdCancel.setBounds(586, 356, 79, 23);

        cmdSelectAll.setText("Select All");
        cmdSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSelectAllActionPerformed(evt);
            }
        });

        getContentPane().add(cmdSelectAll);
        cmdSelectAll.setBounds(16, 358, 106, 23);

        cmdClearAll.setText("Clear All");
        cmdClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdClearAllActionPerformed(evt);
            }
        });
        cmdClearAll.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmdClearAllKeyPressed(evt);
            }
        });

        getContentPane().add(cmdClearAll);
        cmdClearAll.setBounds(134, 358, 102, 23);

        chkCopyHeader.setMnemonic('C');
        chkCopyHeader.setSelected(true);
        chkCopyHeader.setText("Copy Header Information");
        getContentPane().add(chkCopyHeader);
        chkCopyHeader.setBounds(502, 10, 170, 23);

        txtPartyName.setEditable(false);
        txtPartyName.setEnabled(false);
        getContentPane().add(txtPartyName);
        txtPartyName.setBounds(190, 65, 250, 21);

    }//GEN-END:initComponents
    
    private void cmdOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOKActionPerformed
        // TODO add your handling code here:
        if(Table.getRowCount()<=0) {
            Cancelled=true;
        }
        else {
            SetList();
            Cancelled=false;
        }
        aDialog.dispose();
    }//GEN-LAST:event_cmdOKActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancelled=true;
        aDialog.dispose();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSelectAllActionPerformed
        // TODO add your handling code here:
        for(int i=0;i<Table.getRowCount();i++) {
            DataModel.setValueAt(Boolean.valueOf(true), i, 0);
        }
    }//GEN-LAST:event_cmdSelectAllActionPerformed
    
    private void cmdClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdClearAllActionPerformed
        // TODO add your handling code here:
        for(int i=0;i<Table.getRowCount();i++) {
            DataModel.setValueAt(Boolean.valueOf(false), i, 0);
        }
    }//GEN-LAST:event_cmdClearAllActionPerformed
    
    private void cmdClearAllKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmdClearAllKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdClearAllKeyPressed
    
    private void cmdShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowActionPerformed
        // TODO add your handling code here:
        SelReceiptNo=txtPartyCode.getText();
        //
        //String docStatus=clsSalesDepositMaster.getDocStatus(EITLERPGLOBAL.gCompanyID, SelReceiptNo);
        //
        //        if(!docStatus.trim().equals("")) {
        //            JOptionPane.showMessageDialog(null,docStatus);
        //            return;
        //        }
        
        FormatGrid();
        GenerateGrid();
        
        if(Table.getRowCount()<=0) {
            JOptionPane.showMessageDialog(null,"No Receipt Found.");
        }
    }//GEN-LAST:event_cmdShowActionPerformed
    
    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        // Add your handling code here:
        try {
            if(evt.getKeyCode()==10) //Enter key pressed
            {
                if(Table.getRowCount()<=0) {
                    Cancelled=true;
                }
                else {
                    Cancelled=false;
                    ReturnVal=(String) DataModel.getValueAt(Table.getSelectedRow(),ReturnCol-1);
                }
                aDialog.dispose();
                return;
            }
            
            if(evt.getKeyCode()==27) //Escape key pressed
            {
                Cancelled=true;
                ReturnVal="";
                aDialog.dispose();
                return;
            }
            
            if(evt.getKeyCode()==40) //Down Arrow key pressed
            {
                if(Table.getSelectedRow()<Table.getRowCount()) {
                    Table.changeSelection(Table.getSelectedRow()+1,DefaultSearchOn-1,false,false);
                }
                return;
            }
            
            
            if(evt.getKeyCode()==38) //Up Arrow key pressed
            {
                if(Table.getSelectedRow()>=0) {
                    Table.changeSelection(Table.getSelectedRow()-1,DefaultSearchOn-1,false,false);
                }
                
                return;
            }
            
        }
        catch(Exception e)
        {}
    }//GEN-LAST:event_txtSearchKeyPressed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JCheckBox chkCopyHeader;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdClearAll;
    private javax.swing.JButton cmdOK;
    private javax.swing.JButton cmdSelectAll;
    private javax.swing.JButton cmdShow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPartyCode;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtPartyName;
    // End of variables declaration//GEN-END:variables
    
    
    private void FormatGrid() {
        DataModel=new EITLTableModel();
        
        Table.removeAll();
        
        Table.setModel(DataModel);
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        for(int i=1;i<=9;i++) {
            DataModel.SetReadOnly(i);
        }
        
        //Add Columns to it
        DataModel.addColumn(""); //0 Selection
        DataModel.addColumn("Sr.");//1
        DataModel.addColumn("Receipt No");//2
        DataModel.addColumn("Receipt Date");//3
        DataModel.addColumn("Effective Date");//4
        DataModel.addColumn("Main Account Code");//5
        DataModel.addColumn("Interest Main Code");//6
        DataModel.addColumn("Interest Rate");//7
        DataModel.addColumn("Amount");//8
        //DataModel.addColumn("Indent Qty");//9
        //DataModel.addColumn("Issued Qty");//9
        
        Rend.setCustomComponent(0,"CheckBox");
        Table.getColumnModel().getColumn(0).setCellRenderer(Rend);
        Table.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));
    }
    
    private void GenerateGrid() {
        HashMap List=new HashMap();
        String PartyCode=txtPartyCode.getText();
        
        if(!PartyCode.equals("")) {
            List=clsSalesDepositMaster.getReceiptList(EITLERPGLOBAL.gCompanyID, PartyCode);
            //List=clsMaterialRequisition.getMRItemList(EITLERPGLOBAL.gCompanyID, PartyCode,false);
            for(int i=1;i<=List.size();i++) {
                clsSalesDepositRefundItem ObjItem=(clsSalesDepositRefundItem)List.get(Integer.toString(i));
                Object[] rowData=new Object[11];
             
                rowData[0]=Boolean.valueOf(true); //By default selected
                rowData[1]=Integer.toString(ObjItem.getAttribute("SR_NO").getInt());
                rowData[2]=ObjItem.getAttribute("RECEIPT_NO").getString();
                rowData[3]=ObjItem.getAttribute("RECEIPT_DATE").getString();
                rowData[4]=ObjItem.getAttribute("EFFECTIVE_DATE").getString();
                rowData[5]=ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString();
                rowData[6]=ObjItem.getAttribute("INTEREST_MAIN_CODE").getString();
                rowData[7]=Double.toString(ObjItem.getAttribute("INTEREST_RATE").getDouble());
                rowData[8]=Double.toString(ObjItem.getAttribute("AMOUNT").getDouble());
                //rowData[9]=Double.toString(ObjItem.getAttribute("INDENT_QTY").getVal());
                //rowData[10]=Double.toString(ObjItem.getAttribute("ISSUED_QTY").getVal());
             
                DataModel.addRow(rowData);
             
                //Set the Collection
                DataModel.SetUserObject(Table.getRowCount()-1, ObjItem);
            }
        }
        
    }
    
    private void SetList() {
        int SrNo=0;
        HashMap List=new HashMap();
        
        colSelItems.clear();
        String PartyCode=txtPartyCode.getText().trim();
         
        /*//========= Get the MR Object =============//
        clsMaterialRequisition tmpObj=new clsMaterialRequisition();
        ObjMR=(clsMaterialRequisition)tmpObj.getObject(EITLERPGLOBAL.gCompanyID, MRNo);
         
        CopyHeader=chkCopyHeader.isSelected();
        //===========================================//*/
         
         
        List=clsSalesDepositMaster.getReceiptList(EITLERPGLOBAL.gCompanyID, PartyCode);
        //Scan the Table to get selected items
        for(int i=1;i<=List.size();i++) {
            clsSalesDepositRefundItem ObjItem=(clsSalesDepositRefundItem)List.get(Integer.toString(i));
            SrNo=ObjItem.getAttribute("SR_NO").getInt();
         
            //Search in the table for SrNo.
            for(int j=0;j<Table.getRowCount();j++) {
                if(Integer.parseInt(Table.getValueAt(j, 1).toString())==SrNo) {
                    if(Table.getValueAt(j,0).toString().equals("true")) {
                        //Selected Item
                        colSelItems.put(Integer.toString(colSelItems.size()+1),ObjItem);
                    }
                }
            }
        }
    }
    
    
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
    
    public boolean ShowList() {
        try {
            
            FormatGrid();
            
            setSize(710,430);
            
            Frame f=findParentFrame(this);
            
            aDialog=new JDialog(f,"Select Receipts",true);
            
            aDialog.getContentPane().add("Center",this);
            Dimension appletSize = this.getSize();
            aDialog.setSize(appletSize);
            aDialog.setResizable(false);
            
            //Place it to center of the screen
            Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
            aDialog.setLocation((int)(screenSize.width-appletSize.getWidth())/2,(int)(screenSize.height-appletSize.getHeight())/2);
            
            aDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
            aDialog.show();
        }
        catch(Exception e) {
        }
        return !Cancelled;
    }
    
    private void GenerateCombo() {
    }
    
}

