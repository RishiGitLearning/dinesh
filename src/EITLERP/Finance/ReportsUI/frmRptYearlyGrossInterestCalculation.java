package EITLERP.Finance.ReportsUI;

import EITLERP.*;
import EITLERP.Finance.*;
import EITLERP.Utils.*;
import EITLERP.Utils.SimpleDataProvider.*;
import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.net.*;
import java.util.*;
import TReportWriter.*;

public class frmRptYearlyGrossInterestCalculation extends javax.swing.JApplet {
    
    private EITLComboModel cmbFreshRenewModel;
    private EITLComboModel cmbMonthModel;
    private EITLComboModel cmbReceiptTypeModel;
    private TReportEngine objEngine=new TReportEngine();
    private TReportWriter.SimpleDataProvider.TTable objData = new TReportWriter.SimpleDataProvider.TTable();
    ResultSet rsMain;
    ResultSet rsOpening;
    TReportWriter.SimpleDataProvider.TRow objRow;
    //TReportWriter.SimpleDataProvider.TTable objReportData = new TReportWriter.SimpleDataProvider.TTable();
    TReportWriter.SimpleDataProvider.TTable objReportData ;
    String MaturityDate = "", EffectiveDate="", newEffectiveDate="", CalEffectiveDate="",BaseFinLastDate="",NewFinLastDate="";
    String StartDate="", EndDate="", Mon="", ReceiptNo="", PartyCode="";
    int Days=0;
    int Months = 6;
    double interestAmount, Rate,Amount,GrossInterest;
    double nyear = Months/12.0;
    double nTimes = 12.0/Months;
    double TotalInterest=0;
    
    /** Initializes the applet frmRptGRNInfo */
    public void init() {
        setSize(600,400);
        initComponents();
        GenerateCombo();
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jTabbedPane1 = new javax.swing.JTabbedPane();
        MonthlyTab = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        Year = new javax.swing.JLabel();
        jList1 = new javax.swing.JList();
        txtYear = new javax.swing.JTextField();
        cmbMonth = new javax.swing.JComboBox();
        cmbFreshRenewal = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        cmbMonthlyPreview = new javax.swing.JButton();
        cmbMonthlyExit = new javax.swing.JButton();
        YearlyTab = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFromYear = new javax.swing.JTextField();
        txtToYear = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cmbReceiptType = new javax.swing.JComboBox();
        cmbYearlyPreview = new javax.swing.JButton();
        cmbYearlyExit = new javax.swing.JButton();

        getContentPane().setLayout(null);

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        MonthlyTab.setLayout(null);

        jLabel4.setText("Month");
        MonthlyTab.add(jLabel4);
        jLabel4.setBounds(40, 40, 70, 15);

        Year.setText("Year ");
        MonthlyTab.add(Year);
        Year.setBounds(320, 40, 70, 15);

        MonthlyTab.add(jList1);
        jList1.setBounds(150, 50, 0, 0);

        MonthlyTab.add(txtYear);
        txtYear.setBounds(400, 40, 80, 19);

        MonthlyTab.add(cmbMonth);
        cmbMonth.setBounds(160, 30, 130, 24);

        MonthlyTab.add(cmbFreshRenewal);
        cmbFreshRenewal.setBounds(160, 80, 130, 24);

        jLabel6.setText("Fresh/Rewnewal");
        MonthlyTab.add(jLabel6);
        jLabel6.setBounds(20, 90, 130, 15);

        cmbMonthlyPreview.setText("Preview");
        cmbMonthlyPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMonthlyPreviewActionPerformed(evt);
            }
        });

        MonthlyTab.add(cmbMonthlyPreview);
        cmbMonthlyPreview.setBounds(60, 190, 90, 25);

        cmbMonthlyExit.setText("Exit");
        MonthlyTab.add(cmbMonthlyExit);
        cmbMonthlyExit.setBounds(210, 190, 80, 25);

        jTabbedPane1.addTab("Monthly Report", MonthlyTab);

        YearlyTab.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("From Year :");
        YearlyTab.add(jLabel1);
        jLabel1.setBounds(10, 22, 90, 14);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("To Year :");
        YearlyTab.add(jLabel2);
        jLabel2.setBounds(235, 22, 90, 14);

        txtFromYear.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFromYearFocusLost(evt);
            }
        });

        YearlyTab.add(txtFromYear);
        txtFromYear.setBounds(110, 20, 100, 19);

        txtToYear.setEditable(false);
        YearlyTab.add(txtToYear);
        txtToYear.setBounds(335, 20, 100, 19);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("FD/LD/CD :");
        YearlyTab.add(jLabel3);
        jLabel3.setBounds(10, 50, 90, 14);

        YearlyTab.add(cmbReceiptType);
        cmbReceiptType.setBounds(110, 50, 160, 24);

        cmbYearlyPreview.setText("Preview");
        cmbYearlyPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbYearlyPreviewActionPerformed(evt);
            }
        });

        YearlyTab.add(cmbYearlyPreview);
        cmbYearlyPreview.setBounds(60, 90, 100, 25);

        cmbYearlyExit.setText("Exit");
        YearlyTab.add(cmbYearlyExit);
        cmbYearlyExit.setBounds(200, 90, 100, 25);

        jTabbedPane1.addTab("Yearly Report", YearlyTab);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(0, 0, 590, 370);

    }//GEN-END:initComponents
    
    private void txtFromYearFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFromYearFocusLost
        // TODO add your handling code here:
        txtToYear.setText(String.valueOf(Integer.parseInt(txtFromYear.getText())+1));
        
    }//GEN-LAST:event_txtFromYearFocusLost
    
    private void cmbMonthlyPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMonthlyPreviewActionPerformed
        // TODO add your handling code here:
        GenerateMonthlyReport();
    }//GEN-LAST:event_cmbMonthlyPreviewActionPerformed
    
    private void cmbYearlyPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbYearlyPreviewActionPerformed
        // TODO add your handling code here:
        GenerateYearlyReport();
    }//GEN-LAST:event_cmbYearlyPreviewActionPerformed
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MonthlyTab;
    private javax.swing.JLabel Year;
    private javax.swing.JPanel YearlyTab;
    private javax.swing.JComboBox cmbFreshRenewal;
    private javax.swing.JComboBox cmbMonth;
    private javax.swing.JButton cmbMonthlyExit;
    private javax.swing.JButton cmbMonthlyPreview;
    private javax.swing.JComboBox cmbReceiptType;
    private javax.swing.JButton cmbYearlyExit;
    private javax.swing.JButton cmbYearlyPreview;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList jList1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField txtFromYear;
    private javax.swing.JTextField txtToYear;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
    
    
    private void GenerateCombo() {
        
        //--- Generate Type Combo ------//
        ComboData aData=new ComboData();
        
        cmbMonthModel=new EITLComboModel();
        cmbMonth.removeAllItems();
        cmbMonth.setModel(cmbMonthModel);
        
        aData=new ComboData();
        aData.Code=0;
        aData.Text="Select Month";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=1;
        aData.Text="January";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=2;
        aData.Text="February";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=3;
        aData.Text="March";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=4;
        aData.Text="April";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=5;
        aData.Text="May";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=6;
        aData.Text="June";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=7;
        aData.Text="July";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=8;
        aData.Text="August";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=9;
        aData.Text="September";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=10;
        aData.Text="October";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=11;
        aData.Text="November";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=12;
        aData.Text="December";
        cmbMonthModel.addElement(aData);
        
        cmbReceiptTypeModel=new EITLComboModel();
        cmbReceiptType.removeAllItems();
        cmbReceiptType.setModel(cmbReceiptTypeModel);
        
        
        cmbFreshRenewModel=new EITLComboModel();
        cmbFreshRenewal.removeAllItems();
        cmbFreshRenewal.setModel(cmbFreshRenewModel);
        
        
        aData=new ComboData();
        aData.Code=0;
        aData.Text="Select Entry Type";
        cmbFreshRenewModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=1;
        aData.Text="FRESH";
        cmbFreshRenewModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=2;
        aData.Text="RENEWAL";
        cmbFreshRenewModel.addElement(aData);
        
        
        //==========
        cmbReceiptTypeModel=new EITLComboModel();
        cmbReceiptType.removeAllItems();
        cmbReceiptType.setModel(cmbReceiptTypeModel);
        
        
        aData=new ComboData();
        aData.Code=0;
        aData.Text="Select Receipt Type";
        cmbReceiptTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=1;
        aData.Text="FD";
        cmbReceiptTypeModel.addElement(aData);
        
        
        aData=new ComboData();
        aData.Code=2;
        aData.Text="LD";
        cmbReceiptTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=3;
        aData.Text="CD";
        cmbReceiptTypeModel.addElement(aData);
        
    }
    
    private boolean Validate() {
        //Form level validations
        
        if(txtYear.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter Year.");
            return false;
        } else if(txtYear.getText().trim().length() != 4 ) {
            JOptionPane.showMessageDialog(null,"Invalid Year in YYYY format.");
            return false;
        }
        
        
        return true;
    }
    
    
    private void GenerateYearlyReport(){
        objReportData = new TReportWriter.SimpleDataProvider.TTable();
        try {
            String Str;
            
            
            objReportData.AddColumn("SCHEME");
            objReportData.AddColumn("RECEIPT_NO");
            objReportData.AddColumn("LEGACY_NO");
            objReportData.AddColumn("RECEIPT_DATE");
            objReportData.AddColumn("DUE_DATE");
            objReportData.AddColumn("AMOUNT");
            
            objReportData.AddColumn("PARTY_CODE");
            objReportData.AddColumn("APPLICANT_NAME");
            
            objReportData.AddColumn("MAIN_CODE");
            
            objReportData.AddColumn("JAN");
            objReportData.AddColumn("FEB");
            objReportData.AddColumn("MAR");
            objReportData.AddColumn("APR");
            objReportData.AddColumn("MAY");
            objReportData.AddColumn("JUN");
            objReportData.AddColumn("JUL");
            objReportData.AddColumn("AUG");
            objReportData.AddColumn("SEP");
            objReportData.AddColumn("OCT");
            objReportData.AddColumn("NOV");
            objReportData.AddColumn("DEC");
            
            objReportData.AddColumn("GROSS_INT");
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            objOpeningRow.setValue("SCHEME","");
            objOpeningRow.setValue("RECEIPT_NO","");
            objOpeningRow.setValue("LEGACY_NO","");
            objOpeningRow.setValue("RECEIPT_DATE","0000-00-00");
            objOpeningRow.setValue("DUE_DATE","0000-00-00");
            objOpeningRow.setValue("AMOUNT","");
            objOpeningRow.setValue("PARTY_CODE","");
            objOpeningRow.setValue("APPLICANT_NAME","");
            objOpeningRow.setValue("MAIN_CODE","");
            objOpeningRow.setValue("JAN","");
            objOpeningRow.setValue("FEB","");
            objOpeningRow.setValue("MAR","");
            objOpeningRow.setValue("APR","");
            objOpeningRow.setValue("MAY","");
            objOpeningRow.setValue("JUN","");
            objOpeningRow.setValue("JUL","");
            objOpeningRow.setValue("AUG","");
            objOpeningRow.setValue("SEP","");
            objOpeningRow.setValue("OCT","");
            objOpeningRow.setValue("NOV","");
            objOpeningRow.setValue("DEC","");
            objOpeningRow.setValue("GROSS_INT","");
            
            StartDate = txtFromYear.getText() + "-"+ "04"+"-"+"01";
            EndDate =txtToYear.getText() + "-"+ "03"+"-"+"31";
            
            
            int type = cmbReceiptType.getSelectedIndex();
            
            Str="SELECT A.DEPOSIT_STATUS, A.DEPOSIT_ENTRY_TYPE, A.SCHEME_ID, A.RECEIPT_NO,  A.MAIN_ACCOUNT_CODE, " +
            "CASE WHEN B.SCHEME_TYPE=1 THEN 'FD'  WHEN B.SCHEME_TYPE=2 THEN 'LD' WHEN B.SCHEME_TYPE=3 THEN 'CD' ELSE '' END SCHEME, "+
            "A.PARTY_CODE, A.APPLICANT_NAME, A.AMOUNT, A.LEGACY_NO, A.RECEIPT_DATE , A.MATURITY_DATE , " +
            "A.DEPOSIT_TYPE_ID,  A.INTEREST_RATE, A.EFFECTIVE_DATE, A.DEPOSIT_PERIOD  " +
            "FROM D_FD_DEPOSIT_MASTER A, D_FD_SCHEME_MASTER B WHERE A.SCHEME_ID = B.SCHEME_ID AND A.APPROVED=1 AND A.CANCELLED=0 " +
            "AND B.SCHEME_TYPE="+type+"  AND A.MATURITY_DATE >='"+ StartDate+"'  " +
            "AND ( A.PM_DATE >'"+StartDate+"' OR A.PM_DATE='' OR A.PM_DATE ='0000-00-00') " +
            "AND A.RECEIPT_DATE < '"+StartDate+"' " +
            //"AND A.RECEIPT_NO='M025070' " +
            "ORDER BY A.PARTY_CODE, A.RECEIPT_DATE";
            
            rsMain = data.getResult(Str,FinanceGlobal.FinURL);
            rsMain.first();
            while (!rsMain.isAfterLast()){
                if (type==3){
                    CDCalculation();
                }else {
                    FDLDCalculation();
                }
                rsMain.next();
            }
            
            HashMap Parameters=new HashMap();
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            
            Parameters.put("FROM_YEAR",txtFromYear.getText());
            Parameters.put("TO_YEAR",txtToYear.getText());
            
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptGrossInterestCalculationNew.rpt",Parameters,objReportData);
        }
        catch (Exception e){
            e.printStackTrace();
        }
        
        
    }
    
    private void GenerateMonthlyReport(){
        objReportData = new TReportWriter.SimpleDataProvider.TTable();
        try {
            String Str;
            
            objReportData.AddColumn("SCHEME");
            objReportData.AddColumn("RECEIPT_NO");
            objReportData.AddColumn("LEGACY_NO");
            objReportData.AddColumn("RECEIPT_DATE");
            objReportData.AddColumn("DUE_DATE");
            objReportData.AddColumn("AMOUNT");
            
            objReportData.AddColumn("PARTY_CODE");
            objReportData.AddColumn("APPLICANT_NAME");
            
            objReportData.AddColumn("MAIN_CODE");
            
            objReportData.AddColumn("JAN");
            objReportData.AddColumn("FEB");
            objReportData.AddColumn("MAR");
            objReportData.AddColumn("APR");
            objReportData.AddColumn("MAY");
            objReportData.AddColumn("JUN");
            objReportData.AddColumn("JUL");
            objReportData.AddColumn("AUG");
            objReportData.AddColumn("SEP");
            objReportData.AddColumn("OCT");
            objReportData.AddColumn("NOV");
            objReportData.AddColumn("DEC");
            objReportData.AddColumn("GROSS_INT");
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            objOpeningRow.setValue("SCHEME","");
            objOpeningRow.setValue("RECEIPT_NO","");
            objOpeningRow.setValue("LEGACY_NO","");
            objOpeningRow.setValue("RECEIPT_DATE","0000-00-00");
            objOpeningRow.setValue("DUE_DATE","0000-00-00");
            objOpeningRow.setValue("AMOUNT","");
            objOpeningRow.setValue("PARTY_CODE","");
            objOpeningRow.setValue("APPLICANT_NAME","");
            objOpeningRow.setValue("MAIN_CODE","");
            objOpeningRow.setValue("JAN","");
            objOpeningRow.setValue("FEB","");
            objOpeningRow.setValue("MAR","");
            objOpeningRow.setValue("APR","");
            objOpeningRow.setValue("MAY","");
            objOpeningRow.setValue("JUN","");
            objOpeningRow.setValue("JUL","");
            objOpeningRow.setValue("AUG","");
            objOpeningRow.setValue("SEP","");
            objOpeningRow.setValue("OCT","");
            objOpeningRow.setValue("NOV","");
            objOpeningRow.setValue("DEC","");
            objOpeningRow.setValue("GROSS_INT","");
            //String str =txtYear.getText() +"-" + EITLERPGLOBAL.padLeftEx(Integer.toString(cmbMonth.getSelectedIndex()),"0",2) +"-"+"01";
            
            StartDate = EITLERPGLOBAL.getFinYearStartDate(txtYear.getText() +"-" + EITLERPGLOBAL.padLeftEx(Integer.toString(cmbMonth.getSelectedIndex()),"0",2) +"-"+"01");
            EndDate     = EITLERPGLOBAL.getFinYearEndDate(StartDate);
            
            
            int FreshRenew = EITLERPGLOBAL.getComboCode(cmbFreshRenewal);
            int Month  = EITLERPGLOBAL.getComboCode(cmbMonth);
            String CMon = EITLERPGLOBAL.getMonthName(txtYear.getText() +"-" +EITLERPGLOBAL.padLeftEx(Integer.toString(cmbMonth.getSelectedIndex()),"0",2)+"-"+"01");
            
            Str = "SELECT A.DEPOSIT_STATUS, A.DEPOSIT_ENTRY_TYPE, A.SCHEME_ID, A.RECEIPT_NO,  A.MAIN_ACCOUNT_CODE, " +
            "CASE WHEN B.SCHEME_TYPE=1 THEN 'FD'  WHEN B.SCHEME_TYPE=2 THEN 'LD' WHEN B.SCHEME_TYPE=3 THEN 'CD' ELSE '' END SCHEME, " +
            "A.PARTY_CODE, A.APPLICANT_NAME, A.AMOUNT, A.LEGACY_NO, A.RECEIPT_DATE , A.MATURITY_DATE , " +
            "A.DEPOSIT_TYPE_ID,  A.INTEREST_RATE, A.EFFECTIVE_DATE, A.DEPOSIT_PERIOD " +
            "FROM D_FD_DEPOSIT_MASTER A,  D_FD_SCHEME_MASTER B " +
            "WHERE A.SCHEME_ID = B.SCHEME_ID AND A.APPROVED=1 AND A.CANCELLED=0 " +
            "AND YEAR (RECEIPT_DATE) = "+txtYear.getText() +" AND MONTH(RECEIPT_DATE)= "+Month+" AND DEPOSIT_ENTRY_TYPE="+FreshRenew+" " +
            "ORDER BY PARTY_CODE, RECEIPT_DATE";
            
            
            rsMain = data.getResult(Str,FinanceGlobal.FinURL);
            rsMain.first();
            while (!rsMain.isAfterLast()){
                String PartyCode = rsMain.getString("PARTY_CODE");
                System.out.println("\n"+"PARTY CODE '"+PartyCode +"'\n\n  ");
                objRow=objReportData.newRow();
                OpeningFDLDCDCalculation();
                objRow.setValue("SCHEME","");
                objRow.setValue("RECEIPT_NO", "OPENING");
                objRow.setValue("RECEIPT_DATE","0000-00-00");
                objRow.setValue("DUE_DATE","0000-00-00");
                objRow.setValue("AMOUNT", "");
                objReportData.AddRow(objRow);
                
                while (!rsMain.isAfterLast() && PartyCode.equals(rsMain.getString("PARTY_CODE"))){
                    if (rsMain.getString("SCHEME").equals("FD")|| rsMain.getString("SCHEME").equals("LD") ){
                        MonthlyFDLDCalculation();
                    }else {
                        MonthlyCDCalculation();
                    }
                    rsMain.next();
                }
            }
            
            HashMap Parameters=new HashMap();
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            
            Parameters.put("FROM_YEAR",txtFromYear.getText());
            Parameters.put("TO_YEAR",txtToYear.getText());
            
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptGrossInterestCalculationNew.rpt",Parameters,objReportData);
        }
        catch (Exception e){
            e.printStackTrace();
        }
        
        
    }
    
    
    private void CDCalculation(){
        
        objRow=objReportData.newRow();
        
        objRow.setValue("SCHEME",UtilFunctions.getString(rsMain,"SCHEME",""));
        objRow.setValue("RECEIPT_NO",UtilFunctions.getString(rsMain,"RECEIPT_NO",""));
        objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsMain,"LEGACY_NO",""));
        objRow.setValue("RECEIPT_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsMain,"RECEIPT_DATE","0000-00-00")));
        objRow.setValue("DUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsMain,"MATURITY_DATE","0000-00-00")));
        objRow.setValue("AMOUNT",UtilFunctions.getString(rsMain,"AMOUNT",""));
        objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsMain,"PARTY_CODE",""));
        objRow.setValue("APPLICANT_NAME",UtilFunctions.getString(rsMain,"APPLICANT_NAME",""));
        
        System.out.println("\n"+"Receipt No. "+ UtilFunctions.getString(rsMain,"RECEIPT_NO","")+"\n\n");
        EffectiveDate = UtilFunctions.getString(rsMain,"EFFECTIVE_DATE","0000-00-00");
        MaturityDate = UtilFunctions.getString(rsMain,"MATURITY_DATE","0000-00-00");
        Amount =UtilFunctions.getDouble(rsMain,"AMOUNT",0);
        Rate =UtilFunctions.getDouble(rsMain,"INTEREST_RATE",0);
        int Counter=0;
        int Year1 = 0;
        int Year2 = 0;
        int Month1 = 0;
        int Month2 = 0;
        double GrossInterest=0;
        
        while(!java.sql.Date.valueOf(EffectiveDate).after(java.sql.Date.valueOf(MaturityDate))  && java.sql.Date.valueOf(EffectiveDate).compareTo(java.sql.Date.valueOf(MaturityDate))!=0) {
            Counter++;
            newEffectiveDate = clsDepositMaster.deductDays(clsCalcInterest.addMonthToDate(EffectiveDate, 6),1);
            CalEffectiveDate  = clsDepositMaster.deductDays(clsCalcInterest.addMonthToDate(EffectiveDate, 6),1);
            
            BaseFinLastDate = EITLERPGLOBAL.getFinYearEndDate(EffectiveDate);
            NewFinLastDate  = EITLERPGLOBAL.getFinYearEndDate(newEffectiveDate);
            
            if(!BaseFinLastDate.equals(NewFinLastDate)) {
                newEffectiveDate = BaseFinLastDate;
                
                // First Stage Calculation
                Days =EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(EffectiveDate),java.sql.Date.valueOf(newEffectiveDate))+1;
                
                Year1 = Integer.parseInt(EffectiveDate.substring(0,4));
                Month1 = Integer.parseInt(EffectiveDate.substring(5,7));
                Year2 = Integer.parseInt(newEffectiveDate.substring(0,4));
                Month2 = Integer.parseInt(newEffectiveDate.substring(5,7));
                if(Year1==Year2 && (Month2>3)) {
                    Year1++;
                }
                
                GregorianCalendar cal = new GregorianCalendar();
                if(cal.isLeapYear(Year1)) {
                    interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),0);
                } else {
                    interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),0);
                }
                
                
                Amount = EITLERPGLOBAL.round(Amount+interestAmount,0) ;
                if (((java.sql.Date.valueOf(newEffectiveDate).after(java.sql.Date.valueOf(StartDate)) && java.sql.Date.valueOf(newEffectiveDate).before(java.sql.Date.valueOf(EndDate))) || java.sql.Date.valueOf(newEffectiveDate).equals(java.sql.Date.valueOf(EndDate))) && (!java.sql.Date.valueOf(newEffectiveDate).after(java.sql.Date.valueOf(MaturityDate))))  {
                    System.out.println(Counter+"\t"+ EITLERPGLOBAL.round(Amount,0) + "\t" +EITLERPGLOBAL.round(interestAmount,0)+ "\t" +newEffectiveDate);
                    
                    Mon = EITLERPGLOBAL.getMonthName(newEffectiveDate).trim();
                    for (int i=1;i<=12;i++){
                        if (i == EITLERPGLOBAL.getMonth(newEffectiveDate)){
                            GrossInterest= GrossInterest + interestAmount;
                            objRow.setValue(Mon,Double.toString(interestAmount));
                        }
                    }
                }
                
                
                newEffectiveDate = EITLERPGLOBAL.addDaysToDate(newEffectiveDate,1,"yyyy-MM-dd");
                // Second Stage Calculation
                Days =EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(newEffectiveDate),java.sql.Date.valueOf(CalEffectiveDate))+1;
                
                Year1 = Integer.parseInt(EffectiveDate.substring(0,4));
                Month1 = Integer.parseInt(EffectiveDate.substring(5,7));
                Year2 = Integer.parseInt(newEffectiveDate.substring(0,4));
                Month2 = Integer.parseInt(newEffectiveDate.substring(5,7));
                if(Year1==Year2 && (Month2>3)) {
                    Year1++;
                }
                
                if(cal.isLeapYear(Year1)) {
                    interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),0);
                } else {
                    interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),0);
                }
                
                //interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),0);
                Amount = EITLERPGLOBAL.round(Amount+interestAmount,0) ;
                if ((java.sql.Date.valueOf(CalEffectiveDate).after(java.sql.Date.valueOf(StartDate)) && java.sql.Date.valueOf(CalEffectiveDate).before(java.sql.Date.valueOf(EndDate))) && (!java.sql.Date.valueOf(newEffectiveDate).after(java.sql.Date.valueOf(MaturityDate)))) {
                    System.out.println(Counter+"\t"+ EITLERPGLOBAL.round(Amount,0) + "\t" +EITLERPGLOBAL.round(interestAmount,0)+ "\t" +CalEffectiveDate);
                    
                    Mon = EITLERPGLOBAL.getMonthName(CalEffectiveDate);
                    for (int i=1;i<=12;i++){
                        if (i == EITLERPGLOBAL.getMonth(CalEffectiveDate)){
                            GrossInterest= GrossInterest + interestAmount;
                            objRow.setValue(Mon,Double.toString(interestAmount));
                        }
                    }
                    
                }
                EffectiveDate = EITLERPGLOBAL.addDaysToDate(CalEffectiveDate,1,"yyyy-MM-dd");
            } else{
                
                
                Days =EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(EffectiveDate),java.sql.Date.valueOf(newEffectiveDate))+1;
                
                Year1 = Integer.parseInt(EffectiveDate.substring(0,4));
                Month1 = Integer.parseInt(EffectiveDate.substring(5,7));
                Year2 = Integer.parseInt(newEffectiveDate.substring(0,4));
                Month2 = Integer.parseInt(newEffectiveDate.substring(5,7));
                if(Year1==Year2 && (Month2>3)) {
                    Year1++;
                }
                
                GregorianCalendar cal = new GregorianCalendar();
                if(cal.isLeapYear(Year1)) {
                    interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),0);
                } else {
                    interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),0);
                }
                
                
                Amount = EITLERPGLOBAL.round(Amount+interestAmount,0) ;
                if (((java.sql.Date.valueOf(newEffectiveDate).after(java.sql.Date.valueOf(StartDate)) && java.sql.Date.valueOf(newEffectiveDate).before(java.sql.Date.valueOf(EndDate))) || java.sql.Date.valueOf(newEffectiveDate).equals(java.sql.Date.valueOf(EndDate))) && (!java.sql.Date.valueOf(newEffectiveDate).after(java.sql.Date.valueOf(MaturityDate))))  {
                    System.out.println(Counter+"\t"+ EITLERPGLOBAL.round(Amount,0) + "\t" +EITLERPGLOBAL.round(interestAmount,0)+ "\t" +newEffectiveDate);
                    
                    Mon = EITLERPGLOBAL.getMonthName(newEffectiveDate).trim();
                    for (int i=1;i<=12;i++){
                        if (i == EITLERPGLOBAL.getMonth(newEffectiveDate)){
                            GrossInterest= GrossInterest + interestAmount;
                            objRow.setValue(Mon,Double.toString(interestAmount));
                        }
                    }
                }
                EffectiveDate = EITLERPGLOBAL.addDaysToDate(newEffectiveDate,1,"yyyy-MM-dd");
            }
        }
        objRow.setValue("GROSS_INT",Double.toString(GrossInterest));
        objReportData.AddRow(objRow);
    }
    
    
    private void FDLDCalculation(){
        
        objRow=objReportData.newRow();
        
        objRow.setValue("SCHEME",UtilFunctions.getString(rsMain,"SCHEME",""));
        objRow.setValue("RECEIPT_NO",UtilFunctions.getString(rsMain,"RECEIPT_NO",""));
        objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsMain,"LEGACY_NO",""));
        objRow.setValue("RECEIPT_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsMain,"RECEIPT_DATE","0000-00-00")));
        objRow.setValue("DUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsMain,"MATURITY_DATE","0000-00-00")));
        objRow.setValue("AMOUNT",UtilFunctions.getString(rsMain,"AMOUNT",""));
        objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsMain,"PARTY_CODE",""));
        objRow.setValue("APPLICANT_NAME",UtilFunctions.getString(rsMain,"APPLICANT_NAME",""));
        
        System.out.println("\n"+"Receipt No. "+ UtilFunctions.getString(rsMain,"RECEIPT_NO","")+"\n\n");
        
        ReceiptNo =UtilFunctions.getString(rsMain,"RECEIPT_NO","");
        PartyCode=UtilFunctions.getString(rsMain,"PARTY_CODE","");
        EffectiveDate = UtilFunctions.getString(rsMain,"EFFECTIVE_DATE","0000-00-00");
        MaturityDate = UtilFunctions.getString(rsMain,"MATURITY_DATE","0000-00-00");
        Amount =UtilFunctions.getDouble(rsMain,"AMOUNT",0);
        Rate =UtilFunctions.getDouble(rsMain,"INTEREST_RATE",0);
        
        int Counter=0;
        int Year1 = 0;
        int Year2 = 0;
        int Month1 = 0;
        int Month2 = 0;
        double GrossInterest=0;
        //(java.sql.Date.valueOf(EffectiveDate).compareTo(java.sql.Date.valueOf(MaturityDate)))==0
        while(java.sql.Date.valueOf(EffectiveDate).before(java.sql.Date.valueOf(MaturityDate))) {
            newEffectiveDate = getNextInterestDate(ReceiptNo, PartyCode, EffectiveDate);
            //calculation
            Days =EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(EffectiveDate),java.sql.Date.valueOf(newEffectiveDate))+1;
            
            Year1 = Integer.parseInt(EffectiveDate.substring(0,4));
            Month1 = Integer.parseInt(EffectiveDate.substring(5,7));
            Year2 = Integer.parseInt(newEffectiveDate.substring(0,4));
            Month2 = Integer.parseInt(newEffectiveDate.substring(5,7));
            if(Year1==Year2 && (Month2>3)) {
                Year1++;
            }
            GregorianCalendar cal = new GregorianCalendar();
            if(cal.isLeapYear(Year1)) {
                interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),2);
            } else {
                interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),2);
            }
            EffectiveDate = EITLERPGLOBAL.addDaysToDate(newEffectiveDate, 1, "yyyy-MM-dd");
            
            if (((java.sql.Date.valueOf(newEffectiveDate).after(java.sql.Date.valueOf(StartDate)) && java.sql.Date.valueOf(newEffectiveDate).before(java.sql.Date.valueOf(EndDate))) || java.sql.Date.valueOf(newEffectiveDate).equals(java.sql.Date.valueOf(EndDate))) && (!java.sql.Date.valueOf(newEffectiveDate).after(java.sql.Date.valueOf(MaturityDate))))  {
                System.out.println(Counter+"\t"+ EITLERPGLOBAL.round(Amount,2) + "\t" +EITLERPGLOBAL.round(interestAmount,0)+ "\t" +newEffectiveDate);
                
                Mon = EITLERPGLOBAL.getMonthName(newEffectiveDate).trim();
                for (int i=1;i<=12;i++){
                    if (i == EITLERPGLOBAL.getMonth(newEffectiveDate)){
                        objRow.setValue(Mon,Double.toString(interestAmount));
                        GrossInterest= GrossInterest + interestAmount;
                    }
                }
            }
            
        }
        objRow.setValue("GROSS_INT",Double.toString(GrossInterest));
        objReportData.AddRow(objRow);
    }
    
    
    private void MonthlyFDLDCalculation(){
        
        objRow=objReportData.newRow();
        
        objRow.setValue("SCHEME",UtilFunctions.getString(rsMain,"SCHEME",""));
        objRow.setValue("RECEIPT_NO",UtilFunctions.getString(rsMain,"RECEIPT_NO",""));
        objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsMain,"LEGACY_NO",""));
        objRow.setValue("RECEIPT_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsMain,"RECEIPT_DATE","0000-00-00")));
        objRow.setValue("DUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsMain,"MATURITY_DATE","0000-00-00")));
        objRow.setValue("AMOUNT",UtilFunctions.getString(rsMain,"AMOUNT",""));
        objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsMain,"PARTY_CODE",""));
        objRow.setValue("APPLICANT_NAME",UtilFunctions.getString(rsMain,"APPLICANT_NAME",""));
        
        System.out.println("\n"+"Receipt No. "+ UtilFunctions.getString(rsMain,"RECEIPT_NO","")+"\n\n");
        
        ReceiptNo =UtilFunctions.getString(rsMain,"RECEIPT_NO","");
        PartyCode=UtilFunctions.getString(rsMain,"PARTY_CODE","");
        EffectiveDate = UtilFunctions.getString(rsMain,"EFFECTIVE_DATE","0000-00-00");
        MaturityDate = UtilFunctions.getString(rsMain,"MATURITY_DATE","0000-00-00");
        Amount =UtilFunctions.getDouble(rsMain,"AMOUNT",0);
        Rate =UtilFunctions.getDouble(rsMain,"INTEREST_RATE",0);
        
        int Counter=0;
        int Year1 = 0;
        int Year2 = 0;
        int Month1 = 0;
        int Month2 = 0;
        double GrossInterest=0;
        //(java.sql.Date.valueOf(EffectiveDate).compareTo(java.sql.Date.valueOf(MaturityDate)))==0
        while(java.sql.Date.valueOf(EffectiveDate).before(java.sql.Date.valueOf(MaturityDate))) {
            newEffectiveDate = getNextInterestDate(ReceiptNo, PartyCode, EffectiveDate);
            //calculation
            Days =EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(EffectiveDate),java.sql.Date.valueOf(newEffectiveDate))+1;
            
            Year1 = Integer.parseInt(EffectiveDate.substring(0,4));
            Month1 = Integer.parseInt(EffectiveDate.substring(5,7));
            Year2 = Integer.parseInt(newEffectiveDate.substring(0,4));
            Month2 = Integer.parseInt(newEffectiveDate.substring(5,7));
            if(Year1==Year2 && (Month2>3)) {
                Year1++;
            }
            GregorianCalendar cal = new GregorianCalendar();
            if(cal.isLeapYear(Year1)) {
                interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),2);
            } else {
                interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),2);
            }
            EffectiveDate = EITLERPGLOBAL.addDaysToDate(newEffectiveDate, 1, "yyyy-MM-dd");
            
            if (((java.sql.Date.valueOf(newEffectiveDate).after(java.sql.Date.valueOf(StartDate))
            && java.sql.Date.valueOf(newEffectiveDate).before(java.sql.Date.valueOf(EndDate)))
            || java.sql.Date.valueOf(newEffectiveDate).equals(java.sql.Date.valueOf(EndDate))))
                //            && (!java.sql.Date.valueOf(newEffectiveDate).after(java.sql.Date.valueOf(MaturityDate))))
            {
                System.out.println(Counter+"\t"+ EITLERPGLOBAL.round(Amount,2) + "\t" +EITLERPGLOBAL.round(interestAmount,0)+ "\t" +newEffectiveDate);
                
                Mon = EITLERPGLOBAL.getMonthName(newEffectiveDate).trim();
                for (int i=1;i<=12;i++){
                    if (i == EITLERPGLOBAL.getMonth(newEffectiveDate)){
                        objRow.setValue(Mon,Double.toString(interestAmount));
                        GrossInterest= GrossInterest + interestAmount;
                    }
                }
            }
            
        }
        objRow.setValue("GROSS_INT",Double.toString(GrossInterest));
        objReportData.AddRow(objRow);
    }
    
    
    private void MonthlyCDCalculation(){
        
        objRow=objReportData.newRow();
        
        objRow.setValue("SCHEME",UtilFunctions.getString(rsMain,"SCHEME",""));
        objRow.setValue("RECEIPT_NO",UtilFunctions.getString(rsMain,"RECEIPT_NO",""));
        objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsMain,"LEGACY_NO",""));
        objRow.setValue("RECEIPT_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsMain,"RECEIPT_DATE","0000-00-00")));
        objRow.setValue("DUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsMain,"MATURITY_DATE","0000-00-00")));
        objRow.setValue("AMOUNT",UtilFunctions.getString(rsMain,"AMOUNT",""));
        objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsMain,"PARTY_CODE",""));
        objRow.setValue("APPLICANT_NAME",UtilFunctions.getString(rsMain,"APPLICANT_NAME",""));
        
        System.out.println("\n"+"Receipt No. "+ UtilFunctions.getString(rsMain,"RECEIPT_NO","")+"\n\n");
        EffectiveDate = UtilFunctions.getString(rsMain,"EFFECTIVE_DATE","0000-00-00");
        MaturityDate = UtilFunctions.getString(rsMain,"MATURITY_DATE","0000-00-00");
        Amount =UtilFunctions.getDouble(rsMain,"AMOUNT",0);
        Rate =UtilFunctions.getDouble(rsMain,"INTEREST_RATE",0);
        int Counter=0;
        int Year1 = 0;
        int Year2 = 0;
        int Month1 = 0;
        int Month2 = 0;
        double GrossInterest=0;
        
        while(!java.sql.Date.valueOf(EffectiveDate).after(java.sql.Date.valueOf(MaturityDate))) {
            Counter++;
            //newEffectiveDate = clsCalcInterest.addMonthToDate(EffectiveDate, 6);
            newEffectiveDate = clsDepositMaster.deductDays(clsCalcInterest.addMonthToDate(EffectiveDate, 6),1);
            //CalEffectiveDate = clsCalcInterest.addMonthToDate(EffectiveDate, 6);
            CalEffectiveDate  = clsDepositMaster.deductDays(clsCalcInterest.addMonthToDate(EffectiveDate, 6),1);
            
            BaseFinLastDate = EITLERPGLOBAL.getFinYearEndDate(EffectiveDate);
            NewFinLastDate  = EITLERPGLOBAL.getFinYearEndDate(newEffectiveDate);
            
            if(!BaseFinLastDate.equals(NewFinLastDate)) {
                newEffectiveDate = BaseFinLastDate;
                
                // First Stage Calculation
                Days =EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(EffectiveDate),java.sql.Date.valueOf(newEffectiveDate))+1;
                
                Year1 = Integer.parseInt(EffectiveDate.substring(0,4));
                Month1 = Integer.parseInt(EffectiveDate.substring(5,7));
                Year2 = Integer.parseInt(newEffectiveDate.substring(0,4));
                Month2 = Integer.parseInt(newEffectiveDate.substring(5,7));
                if(Year1==Year2 && (Month2>3)) {
                    Year1++;
                }
                
                GregorianCalendar cal = new GregorianCalendar();
                if(cal.isLeapYear(Year1)) {
                    interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),0);
                } else {
                    interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),0);
                }
                
                
                Amount = EITLERPGLOBAL.round(Amount+interestAmount,0) ;
                if (((java.sql.Date.valueOf(newEffectiveDate).after(java.sql.Date.valueOf(StartDate)) && java.sql.Date.valueOf(newEffectiveDate).before(java.sql.Date.valueOf(EndDate))) || java.sql.Date.valueOf(newEffectiveDate).equals(java.sql.Date.valueOf(EndDate))) && (!java.sql.Date.valueOf(newEffectiveDate).after(java.sql.Date.valueOf(MaturityDate))))  {
                    System.out.println(Counter+"\t"+ EITLERPGLOBAL.round(Amount,0) + "\t" +EITLERPGLOBAL.round(interestAmount,0)+ "\t" +newEffectiveDate);
                    
                    Mon = EITLERPGLOBAL.getMonthName(newEffectiveDate).trim();
                    for (int i=1;i<=12;i++){
                        if (i == EITLERPGLOBAL.getMonth(newEffectiveDate)){
                            GrossInterest= GrossInterest + interestAmount;
                            objRow.setValue(Mon,Double.toString(interestAmount));
                        }
                    }
                }
                
                
                newEffectiveDate = EITLERPGLOBAL.addDaysToDate(newEffectiveDate,1,"yyyy-MM-dd");
                // Second Stage Calculation
                Days =EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(newEffectiveDate),java.sql.Date.valueOf(CalEffectiveDate))+1;
                
                Year1 = Integer.parseInt(EffectiveDate.substring(0,4));
                Month1 = Integer.parseInt(EffectiveDate.substring(5,7));
                Year2 = Integer.parseInt(newEffectiveDate.substring(0,4));
                Month2 = Integer.parseInt(newEffectiveDate.substring(5,7));
                if(Year1==Year2 && (Month2>3)) {
                    Year1++;
                }
                
                if(cal.isLeapYear(Year1)) {
                    interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),0);
                } else {
                    interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),0);
                }
                
                //interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),0);
                Amount = EITLERPGLOBAL.round(Amount+interestAmount,0) ;
                if ((java.sql.Date.valueOf(CalEffectiveDate).after(java.sql.Date.valueOf(StartDate)) && java.sql.Date.valueOf(CalEffectiveDate).before(java.sql.Date.valueOf(EndDate))) && (!java.sql.Date.valueOf(newEffectiveDate).after(java.sql.Date.valueOf(MaturityDate)))) {
                    System.out.println(Counter+"\t"+ EITLERPGLOBAL.round(Amount,0) + "\t" +EITLERPGLOBAL.round(interestAmount,0)+ "\t" +CalEffectiveDate);
                    
                    Mon = EITLERPGLOBAL.getMonthName(CalEffectiveDate);
                    for (int i=1;i<=12;i++){
                        if (i == EITLERPGLOBAL.getMonth(CalEffectiveDate)){
                            GrossInterest= GrossInterest + interestAmount;
                            objRow.setValue(Mon,Double.toString(interestAmount));
                        }
                    }
                    
                }
                EffectiveDate = EITLERPGLOBAL.addDaysToDate(CalEffectiveDate,1,"yyyy-MM-dd");
            } else{
                
                
                Days =EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(EffectiveDate),java.sql.Date.valueOf(newEffectiveDate))+1;
                
                Year1 = Integer.parseInt(EffectiveDate.substring(0,4));
                Month1 = Integer.parseInt(EffectiveDate.substring(5,7));
                Year2 = Integer.parseInt(newEffectiveDate.substring(0,4));
                Month2 = Integer.parseInt(newEffectiveDate.substring(5,7));
                if(Year1==Year2 && (Month2>3)) {
                    Year1++;
                }
                
                GregorianCalendar cal = new GregorianCalendar();
                if(cal.isLeapYear(Year1)) {
                    interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),0);
                } else {
                    interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),0);
                }
                
                
                Amount = EITLERPGLOBAL.round(Amount+interestAmount,0) ;
                if (((java.sql.Date.valueOf(newEffectiveDate).after(java.sql.Date.valueOf(StartDate)) && java.sql.Date.valueOf(newEffectiveDate).before(java.sql.Date.valueOf(EndDate))) || java.sql.Date.valueOf(newEffectiveDate).equals(java.sql.Date.valueOf(EndDate))) && (!java.sql.Date.valueOf(newEffectiveDate).after(java.sql.Date.valueOf(MaturityDate))))  {
                    System.out.println(Counter+"\t"+ EITLERPGLOBAL.round(Amount,0) + "\t" +EITLERPGLOBAL.round(interestAmount,0)+ "\t" +newEffectiveDate);
                    
                    Mon = EITLERPGLOBAL.getMonthName(newEffectiveDate).trim();
                    for (int i=1;i<=12;i++){
                        if (i == EITLERPGLOBAL.getMonth(newEffectiveDate)){
                            GrossInterest= GrossInterest + interestAmount;
                            objRow.setValue(Mon,Double.toString(interestAmount));
                        }
                    }
                }
                EffectiveDate = EITLERPGLOBAL.addDaysToDate(newEffectiveDate,1,"yyyy-MM-dd");
            }
        }
        objRow.setValue("GROSS_INT",Double.toString(GrossInterest));
        objReportData.AddRow(objRow);
    }
    
    
    private String getNextInterestDate(String ReceiptNo, String PartyCode, String EffectiveDate){
        String nextInterestCalcDate = "";
        boolean Find = true;
        String tmpDate = "";
        try {
            int EffectiveYear = EITLERPGLOBAL.getYear(EffectiveDate);
            
            ResultSet rsDate = data.getResult("SELECT * FROM D_FD_INT_CALC_DATE ORDER BY INTEREST_MONTH",FinanceGlobal.FinURL);
            rsDate.first();
            
            while(!rsDate.isAfterLast() && Find) {
                tmpDate = EffectiveYear +"-"+ rsDate.getString("INTEREST_MONTH") +"-"+ rsDate.getString("INTEREST_DAYS");
                if(java.sql.Date.valueOf(tmpDate).after(java.sql.Date.valueOf(EffectiveDate))) {
                    nextInterestCalcDate=tmpDate;
                    Find=false;
                }
                rsDate.next();
            }
            
            if(Find) {
                rsDate.first();
                EffectiveYear++;
                while(!rsDate.isAfterLast() && Find){
                    tmpDate = EffectiveYear +"-"+ rsDate.getString("INTEREST_MONTH") +"-"+ rsDate.getString("INTEREST_DAYS");
                    if(java.sql.Date.valueOf(tmpDate).after(java.sql.Date.valueOf(EffectiveDate))) {
                        nextInterestCalcDate=tmpDate;
                        Find=false;
                    }
                    rsDate.next();
                }
            }
            
            if(java.sql.Date.valueOf(nextInterestCalcDate).compareTo(java.sql.Date.valueOf(MaturityDate))==0 || java.sql.Date.valueOf(nextInterestCalcDate).after(java.sql.Date.valueOf(MaturityDate))) {
                nextInterestCalcDate = clsDepositMaster.deductDays(MaturityDate,1);
            }
        }catch(Exception e) {
        }
        
        return nextInterestCalcDate;
    }
    
    private void OpeningFDLDCDCalculation(){
        
        try{
            String PartyCode=UtilFunctions.getString(rsMain,"PARTY_CODE","");
            String ReceiptDate =UtilFunctions.getString(rsMain,"RECEIPT_DATE","0000-00-00");
            String UptoPreviousMonthLastDate= clsDepositMaster.deductDays(ReceiptDate,EITLERPGLOBAL.getDayOfMonth(ReceiptDate));
            
            String Str = "SELECT A.DEPOSIT_STATUS, A.DEPOSIT_ENTRY_TYPE, A.SCHEME_ID, A.RECEIPT_NO,  A.MAIN_ACCOUNT_CODE, " +
            "CASE WHEN B.SCHEME_TYPE=1 THEN 'FD'  WHEN B.SCHEME_TYPE=2 THEN 'LD' " +
            "WHEN B.SCHEME_TYPE=3 THEN 'CD' ELSE '' END SCHEME, A.PARTY_CODE, A.APPLICANT_NAME, A.AMOUNT, A.LEGACY_NO, " +
            "A.RECEIPT_DATE , A.MATURITY_DATE , A.DEPOSIT_TYPE_ID,  A.INTEREST_RATE, A.EFFECTIVE_DATE, A.DEPOSIT_PERIOD, A.PM_DATE  " +
            "FROM D_FD_DEPOSIT_MASTER A, D_FD_SCHEME_MASTER B " +
            "WHERE A.SCHEME_ID = B.SCHEME_ID AND A.APPROVED=1 " +
            "AND A.CANCELLED=0  AND PARTY_CODE ='"+PartyCode+"' " +
            "AND A.MATURITY_DATE >='"+EITLERPGLOBAL.getFinYearStartDate(ReceiptDate)+"'  " +
            "AND ( A.PM_DATE >'"+EITLERPGLOBAL.getFinYearStartDate(ReceiptDate)+"'  OR A.PM_DATE='' OR A.PM_DATE ='0000-00-00') " +
            "AND A.RECEIPT_DATE < '"+UptoPreviousMonthLastDate+"' ORDER BY A.PARTY_CODE, A.RECEIPT_DATE";
            
            rsOpening = data.getResult(Str,FinanceGlobal.FinURL);
            TotalInterest=0;
            
            rsOpening.first();
            
            while (rsOpening.getRow()>0 && !rsOpening.isAfterLast()){
                String OpeningReceiptNo = UtilFunctions.getString(rsOpening,"RECEIPT_NO","");
                String Scheme = UtilFunctions.getString(rsOpening, "SCHEME", "");
                if (rsOpening.getString("SCHEME").equals("FD")|| rsOpening.getString("SCHEME").equals("LD") ){
                    OpeningFDLDCalculation();
                }else {
                    OpeningCDCalculation();
                }
                rsOpening.next();
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
        
    }
    
    private void OpeningCDCalculation(){
        
        //        objRow=objReportData.newRow();
        
        objRow.setValue("SCHEME",UtilFunctions.getString(rsOpening,"SCHEME",""));
        objRow.setValue("RECEIPT_NO",UtilFunctions.getString(rsOpening,"RECEIPT_NO",""));
        objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsOpening,"LEGACY_NO",""));
        objRow.setValue("RECEIPT_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsOpening,"RECEIPT_DATE","0000-00-00")));
        objRow.setValue("DUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsOpening,"MATURITY_DATE","0000-00-00")));
        objRow.setValue("AMOUNT",UtilFunctions.getString(rsOpening,"AMOUNT",""));
        objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsOpening,"PARTY_CODE",""));
        objRow.setValue("APPLICANT_NAME",UtilFunctions.getString(rsOpening,"APPLICANT_NAME",""));
        
        System.out.println("\n"+"Receipt No. "+ UtilFunctions.getString(rsOpening,"RECEIPT_NO","")+"\n\n");
        EffectiveDate = UtilFunctions.getString(rsOpening,"EFFECTIVE_DATE","0000-00-00");
        MaturityDate = UtilFunctions.getString(rsOpening,"MATURITY_DATE","0000-00-00");
        Amount =UtilFunctions.getDouble(rsOpening,"AMOUNT",0);
        Rate =UtilFunctions.getDouble(rsOpening,"INTEREST_RATE",0);
        int Counter=0;
        int Year1 = 0;
        int Year2 = 0;
        int Month1 = 0;
        int Month2 = 0;
        double GrossInterest=0;
        
        while(!java.sql.Date.valueOf(EffectiveDate).after(java.sql.Date.valueOf(MaturityDate)) && java.sql.Date.valueOf(EffectiveDate).compareTo(java.sql.Date.valueOf(MaturityDate))!=0) {
            Counter++;
            newEffectiveDate = clsDepositMaster.deductDays(clsCalcInterest.addMonthToDate(EffectiveDate, 6),1);
            CalEffectiveDate  = clsDepositMaster.deductDays(clsCalcInterest.addMonthToDate(EffectiveDate, 6),1);
            
            BaseFinLastDate = EITLERPGLOBAL.getFinYearEndDate(EffectiveDate);
            NewFinLastDate  = EITLERPGLOBAL.getFinYearEndDate(newEffectiveDate);
            
            if(!BaseFinLastDate.equals(NewFinLastDate)) {
                newEffectiveDate = BaseFinLastDate;
                // First Stage Calculation
                if ((java.sql.Date.valueOf(newEffectiveDate).before(java.sql.Date.valueOf(EndDate)))
                || (java.sql.Date.valueOf(newEffectiveDate).equals(java.sql.Date.valueOf(EndDate)))) {
                    
                    
                    Days =EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(EffectiveDate),java.sql.Date.valueOf(newEffectiveDate))+1;
                    
                    Year1 = Integer.parseInt(EffectiveDate.substring(0,4));
                    Month1 = Integer.parseInt(EffectiveDate.substring(5,7));
                    Year2 = Integer.parseInt(newEffectiveDate.substring(0,4));
                    Month2 = Integer.parseInt(newEffectiveDate.substring(5,7));
                    if(Year1==Year2 && (Month2>3)) {
                        Year1++;
                    }
                    
                    GregorianCalendar cal = new GregorianCalendar();
                    if(cal.isLeapYear(Year1)) {
                        interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),0);
                    } else {
                        interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),0);
                    }
                    
                    
                    Amount = EITLERPGLOBAL.round(Amount+interestAmount,0) ;
                    //                if (((java.sql.Date.valueOf(newEffectiveDate).after(java.sql.Date.valueOf(StartDate)) && java.sql.Date.valueOf(newEffectiveDate).before(java.sql.Date.valueOf(EndDate))) || java.sql.Date.valueOf(newEffectiveDate).equals(java.sql.Date.valueOf(EndDate))) && (!java.sql.Date.valueOf(newEffectiveDate).after(java.sql.Date.valueOf(MaturityDate))))  {
                    //                    if ((java.sql.Date.valueOf(newEffectiveDate).before(java.sql.Date.valueOf(EndDate)))
                    //                    || (java.sql.Date.valueOf(newEffectiveDate).equals(java.sql.Date.valueOf(EndDate)))) {
                    
                    System.out.println(Counter+"\t"+ EITLERPGLOBAL.round(Amount,0) + "\t" +EITLERPGLOBAL.round(interestAmount,0)+ "\t" +newEffectiveDate);
                    
                    Mon = EITLERPGLOBAL.getMonthName(newEffectiveDate).trim();
                    for (int i=1;i<=12;i++){
                        if (i == EITLERPGLOBAL.getMonth(newEffectiveDate)){
                            GrossInterest= GrossInterest + interestAmount;
                            //                          objRow.setValue(Mon,Double.parseDouble(objRow.getValue(Mon)) + Double.toString(interestAmount));
                            objRow.setValue(Mon,  Double.toString(UtilFunctions.getDobleFromObject(objRow, Mon)+interestAmount)); 
                        }
                    }
                    //                    }
                }
                // Second Stage Calculation
                newEffectiveDate = EITLERPGLOBAL.addDaysToDate(newEffectiveDate,1,"yyyy-MM-dd");
                
                if ((java.sql.Date.valueOf(newEffectiveDate).before(java.sql.Date.valueOf(EndDate)))
                || (java.sql.Date.valueOf(newEffectiveDate).equals(java.sql.Date.valueOf(EndDate)))) {
                    
                    
                    Days =EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(newEffectiveDate),java.sql.Date.valueOf(CalEffectiveDate))+1;
                    
                    Year1 = Integer.parseInt(EffectiveDate.substring(0,4));
                    Month1 = Integer.parseInt(EffectiveDate.substring(5,7));
                    Year2 = Integer.parseInt(newEffectiveDate.substring(0,4));
                    Month2 = Integer.parseInt(newEffectiveDate.substring(5,7));
                    if(Year1==Year2 && (Month2>3)) {
                        Year1++;
                    }
                    GregorianCalendar cal = new GregorianCalendar();
                    if(cal.isLeapYear(Year1)) {
                        interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),0);
                    } else {
                        interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),0);
                    }
                    
                    //interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),0);
                    Amount = EITLERPGLOBAL.round(Amount+interestAmount,0) ;
                    //                if ((java.sql.Date.valueOf(CalEffectiveDate).after(java.sql.Date.valueOf(StartDate)) && java.sql.Date.valueOf(CalEffectiveDate).before(java.sql.Date.valueOf(EndDate))) && (!java.sql.Date.valueOf(newEffectiveDate).after(java.sql.Date.valueOf(MaturityDate)))) {
                    if ((java.sql.Date.valueOf(CalEffectiveDate).before(java.sql.Date.valueOf(EndDate)))
                    || (java.sql.Date.valueOf(CalEffectiveDate).equals(java.sql.Date.valueOf(EndDate)))) {
                        
                        System.out.println(Counter+"\t"+ EITLERPGLOBAL.round(Amount,0) + "\t" +EITLERPGLOBAL.round(interestAmount,0)+ "\t" +CalEffectiveDate);
                        
                        Mon = EITLERPGLOBAL.getMonthName(CalEffectiveDate);
                        for (int i=1;i<=12;i++){
                            if (i == EITLERPGLOBAL.getMonth(CalEffectiveDate)){
                                GrossInterest= GrossInterest + interestAmount;
                                //objRow.setValue(Mon,Double.parseDouble(objRow.getValue(Mon)) + Double.toString(interestAmount));
                                objRow.setValue(Mon,  Double.toString(UtilFunctions.getDobleFromObject(objRow, Mon)+interestAmount));
                            }
                        }
                        
                    }
                    
                }
                EffectiveDate = EITLERPGLOBAL.addDaysToDate(CalEffectiveDate,1,"yyyy-MM-dd");
                
            } else{
                
                
                Days =EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(EffectiveDate),java.sql.Date.valueOf(newEffectiveDate))+1;
                
                Year1 = Integer.parseInt(EffectiveDate.substring(0,4));
                Month1 = Integer.parseInt(EffectiveDate.substring(5,7));
                Year2 = Integer.parseInt(newEffectiveDate.substring(0,4));
                Month2 = Integer.parseInt(newEffectiveDate.substring(5,7));
                if(Year1==Year2 && (Month2>3)) {
                    Year1++;
                }
                
                GregorianCalendar cal = new GregorianCalendar();
                if(cal.isLeapYear(Year1)) {
                    interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),0);
                } else {
                    interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),0);
                }
                
                Amount = EITLERPGLOBAL.round(Amount+interestAmount,0) ;
                //                if (((java.sql.Date.valueOf(newEffectiveDate).after(java.sql.Date.valueOf(StartDate)) && java.sql.Date.valueOf(newEffectiveDate).before(java.sql.Date.valueOf(EndDate))) || java.sql.Date.valueOf(newEffectiveDate).equals(java.sql.Date.valueOf(EndDate))) && (!java.sql.Date.valueOf(newEffectiveDate).after(java.sql.Date.valueOf(MaturityDate))))  {
                if ((java.sql.Date.valueOf(CalEffectiveDate).before(java.sql.Date.valueOf(EndDate)))
                || (java.sql.Date.valueOf(CalEffectiveDate).equals(java.sql.Date.valueOf(EndDate)))) {
                    
                    System.out.println(Counter+"\t"+ EITLERPGLOBAL.round(Amount,0) + "\t" +EITLERPGLOBAL.round(interestAmount,0)+ "\t" +newEffectiveDate);
                    
                    Mon = EITLERPGLOBAL.getMonthName(newEffectiveDate).trim();
                    for (int i=1;i<=12;i++){
                        if (i == EITLERPGLOBAL.getMonth(newEffectiveDate)){
                            GrossInterest= GrossInterest + interestAmount;
                            objRow.setValue(Mon,  Double.toString(UtilFunctions.getDobleFromObject(objRow, Mon)+interestAmount));
                            //objRow.setValue(Mon,Double.parseDouble(objRow.getValue(Mon)) +Double.toString(interestAmount));
                        }
                    }
                }
                EffectiveDate = EITLERPGLOBAL.addDaysToDate(newEffectiveDate,1,"yyyy-MM-dd");
            }
        }
        //objRow.setValue("GROSS_INT",Double.parseDouble(objRow.getValue("GROSS_INT")) +Double.toString(GrossInterest));
        objRow.setValue("GROSS_INT",Double.toString(UtilFunctions.getDobleFromObject(objRow, "GROSS_INT")+GrossInterest));
        //        objReportData.AddRow(objRow);
    }
    
    private void OpeningFDLDCalculation(){
        try{
            //        objRow=objReportData.newRow();
            
            objRow.setValue("SCHEME",UtilFunctions.getString(rsOpening,"SCHEME",""));
            objRow.setValue("RECEIPT_NO",UtilFunctions.getString(rsOpening,"RECEIPT_NO",""));
            objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsOpening,"LEGACY_NO",""));
            objRow.setValue("RECEIPT_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsOpening,"RECEIPT_DATE","0000-00-00")));
            objRow.setValue("DUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsOpening,"MATURITY_DATE","0000-00-00")));
            objRow.setValue("AMOUNT",UtilFunctions.getString(rsOpening,"AMOUNT",""));
            objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsOpening,"PARTY_CODE",""));
            objRow.setValue("APPLICANT_NAME",UtilFunctions.getString(rsOpening,"APPLICANT_NAME",""));
            
            System.out.println("\n"+"Receipt No. "+ UtilFunctions.getString(rsOpening,"RECEIPT_NO","")+"\n\n");
            
            ReceiptNo =UtilFunctions.getString(rsOpening,"RECEIPT_NO","");
            PartyCode=UtilFunctions.getString(rsOpening,"PARTY_CODE","");
            EffectiveDate = UtilFunctions.getString(rsOpening,"EFFECTIVE_DATE","0000-00-00");
            MaturityDate = UtilFunctions.getString(rsOpening,"MATURITY_DATE","0000-00-00");
            Amount =UtilFunctions.getDouble(rsOpening,"AMOUNT",0);
            Rate =UtilFunctions.getDouble(rsOpening,"INTEREST_RATE",0);
            
            int Counter=0;
            int Year1 = 0;
            int Year2 = 0;
            int Month1 = 0;
            int Month2 = 0;
            double GrossInterest=0;
            //(java.sql.Date.valueOf(EffectiveDate).compareTo(java.sql.Date.valueOf(MaturityDate)))==0
            while(java.sql.Date.valueOf(EffectiveDate).before(java.sql.Date.valueOf(MaturityDate))) {
                newEffectiveDate = getNextInterestDate(ReceiptNo, PartyCode, EffectiveDate);
                //calculation
                Days =EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(EffectiveDate),java.sql.Date.valueOf(newEffectiveDate))+1;
                
                Year1 = Integer.parseInt(EffectiveDate.substring(0,4));
                Month1 = Integer.parseInt(EffectiveDate.substring(5,7));
                Year2 = Integer.parseInt(newEffectiveDate.substring(0,4));
                Month2 = Integer.parseInt(newEffectiveDate.substring(5,7));
                if(Year1==Year2 && (Month2>3)) {
                    Year1++;
                }
                GregorianCalendar cal = new GregorianCalendar();
                if(cal.isLeapYear(Year1)) {
                    interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),2);
                } else {
                    interestAmount = EITLERPGLOBAL.round(((Amount * Rate * Days)/36500),2);
                }
                EffectiveDate = EITLERPGLOBAL.addDaysToDate(newEffectiveDate, 1, "yyyy-MM-dd");
                
                //            if (((java.sql.Date.valueOf(newEffectiveDate).after(java.sql.Date.valueOf(StartDate))
                //            && java.sql.Date.valueOf(newEffectiveDate).before(java.sql.Date.valueOf(EndDate)))
                //            || java.sql.Date.valueOf(newEffectiveDate).equals(java.sql.Date.valueOf(EndDate)))
                //            && (!java.sql.Date.valueOf(newEffectiveDate).after(java.sql.Date.valueOf(MaturityDate))))  {
                
                if ((java.sql.Date.valueOf(newEffectiveDate).before(java.sql.Date.valueOf(EndDate)))
                || (java.sql.Date.valueOf(newEffectiveDate).equals(java.sql.Date.valueOf(EndDate)))) {
                    
                    System.out.println(Counter+"\t"+ EITLERPGLOBAL.round(Amount,2) + "\t" +EITLERPGLOBAL.round(interestAmount,0)+ "\t" +newEffectiveDate);
                    
                    Mon = EITLERPGLOBAL.getMonthName(newEffectiveDate).trim();
                    //                    double tmpMon=0;
                    for (int i=1;i<=12;i++){
                        if (i == EITLERPGLOBAL.getMonth(newEffectiveDate)){
                            //                            if (!objRow.getValue(Mon).equals("")){
                            //                                tmpMon =Double.parseDouble(objRow.getValue(Mon));
                            //                                tmpMon =Double.parseDouble(objRow.getValue(Mon))+ interestAmount;
                            //                            }
                            //                            else
                            //                            {
                            //                                tmpMon = interestAmount;
                            //                            }
                            
                            objRow.setValue(Mon,  Double.toString(UtilFunctions.getDobleFromObject(objRow, Mon)+interestAmount));
                            
                            //                            System.out.println(tmpMon);
                            
                            //                            objRow.setValue(Mon,Double.toString(tmpMon));
                            
                            //                        objRow.setValue(Mon,Double.parseDouble(objRow.getValue(Mon)) + Double.toString(interestAmount));
                            
                            GrossInterest= GrossInterest + interestAmount;
                        }
                    }
                }
                
            }
            //objRow.setValue("GROSS_INT",Double.parseDouble(objRow.getValue("GROSS_INT")) + Double.toString(GrossInterest));
            objRow.setValue("GROSS_INT",Double.toString(UtilFunctions.getDobleFromObject(objRow, "GROSS_INT")+GrossInterest));
            //        objReportData.AddRow(objRow);
        }
        catch (Exception e){
            e.printStackTrace();
        }
    }
    
    
}
