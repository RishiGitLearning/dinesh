/*
 * frmTrialBalance.java
 *
 * Created on December 20, 2007, 6:27 AM
 */

package EITLERP.Finance.ReportsUI;

/**
 *
 * @author  lenovo
 */

import EITLERP.*;
import javax.swing.*;
import java.awt.*;
import javax.sql.*;
import java.util.*;
import java.sql.* ;
import EITLERP.Finance.*;
import javax.swing.table.*;
import javax.swing.text.*;
import TReportWriter.*;
import java.text.*;
import EITLERP.Finance.ReportsUI.*;
import java.math.BigDecimal;
import EITLERP.Utils.frmProgress;
import java.net.URL;

public class frmTrialBalanceOLD extends javax.swing.JApplet {
    
    clsAccount objAccount;
    EITLTableModel TableModelT;
    HashMap props;
    EITLComboModel cmbModel;
    //HashMap Credit= new HashMap();
    //HashMap Debit = new HashMap();
    private EITLTableCellRenderer RowFormat=new EITLTableCellRenderer();
    private boolean ProcessCompleted=false;
    private TReportEngine objEngine=new TReportEngine();
    private TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
    private TReportWriter.SimpleDataProvider.TTable objSHData=new TReportWriter.SimpleDataProvider.TTable();
    private EITLTableCellRenderer CellAlign=new EITLTableCellRenderer();
    DecimalFormat dFormat=new DecimalFormat("###0.00");
    private static double CrTotal = 0;
    private static double DrTotal = 0;
    private boolean ProcessDone = false;
    
    public Variant getAttribute(String PropName) {
        return (Variant) props.get(PropName);
    }
    
    public void setAttribute(String PropName,Object Value) {
        props.put(PropName,new Variant(Value));
    }
    
    public void setAttribute(String PropName,int Value) {
        props.put(PropName,new Variant(Value));
    }
    
    public void setAttribute(String PropName,long Value) {
        props.put(PropName,new Variant(Value));
    }
    
    public void setAttribute(String PropName,double Value) {
        props.put(PropName,new Variant(Value));
    }
    
    public void setAttribute(String PropName,float Value) {
        props.put(PropName,new Variant(Value));
    }
    
    public void setAttribute(String PropName,boolean Value) {
        props.put(PropName,new Variant(Value));
    }
    
    public frmTrialBalanceOLD() {
        props = new HashMap();
        props.put("MAIN_ACCOUNT_CODE", new Variant(""));
        props.put("SUB_ACCOUNT_CODE", new Variant(""));
        props.put("ACCOUNT_NAME",new Variant(""));
        props.put("DEBIT",new Variant(0.0));
        props.put("CREDIT",new Variant(0.0));
    }
    
    /** Initializes the applet frmTrialBalance */
    public void init() {
        initComponents();
        setSize(770,600);
        txtAsOnDate.requestFocus();
        cmbModel = new EITLComboModel();
        GenerateCombo();
        txtFromAmt.setEnabled(false);
        txtToAmt.setEnabled(false);
        txtFromAmt.setText("");
        txtToAmt.setText("");
        txtAsOnDate.setText(EITLERPGLOBAL.getCurrentDate());
        
        FormatGridN();
        
        Bar.setVisible(false);
        lblStatus.setVisible(false);
        
        
        
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        mnuSelectReport = new javax.swing.JPopupMenu();
        mnuTrialBalance = new javax.swing.JMenuItem();
        mnuScheduleTrialBalance = new javax.swing.JMenuItem();
        MainPanel = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtAsOnDate = new javax.swing.JTextField();
        btnEnter = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cmbType = new javax.swing.JComboBox();
        Bar = new javax.swing.JProgressBar();
        lblStatus = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtMainCode = new javax.swing.JTextField();
        chkApproved = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtFromAmt = new javax.swing.JTextField();
        txtToAmt = new javax.swing.JTextField();
        chkAmount = new javax.swing.JCheckBox();
        chkPartyAdd = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TResult = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        cmdSearch = new javax.swing.JButton();
        lblDebitTotal = new javax.swing.JLabel();
        lblCreditTotal = new javax.swing.JLabel();
        cmdGenerateReport = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();

        mnuTrialBalance.setText("Trial Balance");
        mnuTrialBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuTrialBalanceActionPerformed(evt);
            }
        });

        mnuSelectReport.add(mnuTrialBalance);

        mnuScheduleTrialBalance.setText("Schedule Trail Balance");
        mnuScheduleTrialBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuScheduleTrialBalanceActionPerformed(evt);
            }
        });

        mnuSelectReport.add(mnuScheduleTrialBalance);

        getContentPane().setLayout(null);

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        MainPanel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                MainPanelFocusGained(evt);
            }
        });

        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.EtchedBorder());
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        jLabel1.setText("As On Date :");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(26, 32, 100, 20);

        txtAsOnDate.setNextFocusableComponent(btnEnter);
        txtAsOnDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAsOnDateActionPerformed(evt);
            }
        });

        jPanel1.add(txtAsOnDate);
        txtAsOnDate.setBounds(130, 30, 120, 20);

        btnEnter.setText("Generate");
        btnEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnterActionPerformed(evt);
            }
        });

        jPanel1.add(btnEnter);
        btnEnter.setBounds(210, 270, 100, 25);

        jLabel2.setText("Report for");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(26, 72, 80, 20);

        cmbType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbTypeItemStateChanged(evt);
            }
        });

        jPanel1.add(cmbType);
        cmbType.setBounds(130, 70, 180, 20);

        jPanel1.add(Bar);
        Bar.setBounds(30, 230, 180, 20);

        lblStatus.setText(".");
        jPanel1.add(lblStatus);
        lblStatus.setBounds(30, 200, 180, 15);

        jLabel3.setText("Main Code :");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(25, 109, 100, 20);

        txtMainCode.setNextFocusableComponent(btnEnter);
        txtMainCode.setEnabled(false);
        txtMainCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMainCodeKeyPressed(evt);
            }
        });

        jPanel1.add(txtMainCode);
        txtMainCode.setBounds(130, 110, 120, 20);

        chkApproved.setSelected(true);
        chkApproved.setText("Only Approved Vouchers");
        jPanel1.add(chkApproved);
        chkApproved.setBounds(340, 30, 209, 23);

        jLabel4.setText("Amount From :");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(30, 170, 100, 20);

        jLabel5.setText("TO :");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(260, 170, 30, 20);

        txtFromAmt.setNextFocusableComponent(btnEnter);
        jPanel1.add(txtFromAmt);
        txtFromAmt.setBounds(130, 170, 120, 20);

        txtToAmt.setNextFocusableComponent(btnEnter);
        jPanel1.add(txtToAmt);
        txtToAmt.setBounds(290, 170, 120, 20);

        chkAmount.setText("Insert Amount Range");
        chkAmount.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkAmountItemStateChanged(evt);
            }
        });

        jPanel1.add(chkAmount);
        chkAmount.setBounds(30, 140, 180, 23);

        chkPartyAdd.setText("Include Party Address");
        jPanel1.add(chkPartyAdd);
        chkPartyAdd.setBounds(210, 140, 180, 23);

        MainPanel.addTab("As On Date", jPanel1);

        jPanel2.setLayout(null);

        jScrollPane1.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        TResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TResult);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(2, 36, 750, 380);

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel2.add(jButton1);
        jButton1.setBounds(653, 422, 100, 25);

        jLabel11.setFont(new java.awt.Font("Dialog", 0, 9));
        jLabel11.setText("Click on the column,  type keywords in search textbox and click on Go button to search.");
        jPanel2.add(jLabel11);
        jLabel11.setBounds(12, 14, 410, 11);

        jLabel12.setText("Search");
        jPanel2.add(jLabel12);
        jLabel12.setBounds(445, 13, 50, 15);

        jPanel2.add(txtSearch);
        txtSearch.setBounds(500, 10, 130, 19);

        cmdSearch.setFont(new java.awt.Font("Dialog", 0, 10));
        cmdSearch.setText("Go");
        cmdSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSearchActionPerformed(evt);
            }
        });

        jPanel2.add(cmdSearch);
        cmdSearch.setBounds(640, 11, 100, 20);

        lblDebitTotal.setFont(new java.awt.Font("Dialog", 1, 14));
        lblDebitTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDebitTotal.setText("...");
        jPanel2.add(lblDebitTotal);
        lblDebitTotal.setBounds(261, 428, 160, 17);

        lblCreditTotal.setFont(new java.awt.Font("Dialog", 1, 14));
        lblCreditTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCreditTotal.setText("...");
        jPanel2.add(lblCreditTotal);
        lblCreditTotal.setBounds(430, 428, 160, 17);

        cmdGenerateReport.setText("Generate Report");
        cmdGenerateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGenerateReportActionPerformed(evt);
            }
        });

        jPanel2.add(cmdGenerateReport);
        cmdGenerateReport.setBounds(160, 430, 150, 22);

        MainPanel.addTab("View Result", jPanel2);

        getContentPane().add(MainPanel);
        MainPanel.setBounds(1, 35, 800, 530);

        jPanel3.setLayout(null);

        jPanel3.setBackground(new java.awt.Color(0, 153, 204));
        jPanel3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel6.setText("TRIAL BALANCE");
        jPanel3.add(jLabel6);
        jLabel6.setBounds(9, 8, 230, 15);

        getContentPane().add(jPanel3);
        jPanel3.setBounds(1, 2, 800, 30);

    }//GEN-END:initComponents
    
    private void mnuScheduleTrialBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuScheduleTrialBalanceActionPerformed
        // TODO add your handling code here:
        if(txtAsOnDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter the Date");
            txtAsOnDate.requestFocus();
            return;
        }
        
        if(!txtAsOnDate.getText().trim().equals("")) {
            if(!EITLERPGLOBAL.isDate(txtAsOnDate.getText().trim())) {
                JOptionPane.showMessageDialog(null,"Please Enter the Date in dd/mm/yyyy format");
                txtAsOnDate.requestFocus();
                return;
            }
        }
        System.gc();
        objSHData=new TReportWriter.SimpleDataProvider.TTable();
        ProcessDone = false;
        data.Execute("DELETE FROM D_FIN_REPORT_TRANSACTION WHERE REPORT_ID=3 AND USER_ID="+EITLERPGLOBAL.gUserID,FinanceGlobal.FinURL);
        new Thread() {
            public void run() {
                try {
                    String CurrentYearDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    String PreviousYearDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim().substring(0,6)+Integer.toString(Integer.parseInt(txtAsOnDate.getText().trim().substring(6,10))-1));
                    //String strSQL = "SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME,SH_CODE,GROUP_CODE FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE LIKE '%000' AND APPROVED=1 AND CANCELLED=0 AND SH_CODE NOT LIKE '00%' ORDER BY SH_CODE,MAIN_ACCOUNT_CODE "; //AND MAIN_ACCOUNT_CODE='101000'  104000
                    //String strSQL = "SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME,SH_CODE,GROUP_CODE FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE LIKE '%000' AND APPROVED=1 AND CANCELLED=0 ORDER BY MAIN_ACCOUNT_CODE"; //AND MAIN_ACCOUNT_CODE='101000'  104000
                    String strSQL = "SELECT * FROM D_FIN_GROUP_CODE_MASTER ORDER BY MAIN_ACCOUNT_CODE";
                    ResultSet rsMainCodeHeader = data.getResult(strSQL,FinanceGlobal.FinURL);
                    rsMainCodeHeader.first();
                    frmProgress objProgress = new frmProgress();
                    objProgress.Initialize();
                    objProgress.ShowDialog();
                    int MaxCount = data.getIntValueFromDB("SELECT COUNT(MAIN_ACCOUNT_CODE) FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE LIKE '%000' AND APPROVED=1 AND CANCELLED=0 AND SH_CODE NOT LIKE '00%' ORDER BY SH_CODE,MAIN_ACCOUNT_CODE ",FinanceGlobal.FinURL);//SH_CODE,
                    objProgress.SetMax(MaxCount);
                    objProgress.SetMin(0);
                    objProgress.SetValue(0);
                    objProgress.repaint();
                    objProgress.SetText("Starting Process...");
                    MaxCount = 0;
                    Connection Conn=data.getConn(FinanceGlobal.FinURL);
                    Statement Stmt=Conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
                    ResultSet rsReportData = Stmt.executeQuery("SELECT * FROM D_FIN_REPORT_TRANSACTION LIMIT 1");
                    int Counter=0;
                    if(rsMainCodeHeader.getRow()>0) {
                        while(!rsMainCodeHeader.isAfterLast()) {
                            String MainCodeHeader = UtilFunctions.getString(rsMainCodeHeader, "MAIN_ACCOUNT_CODE", "");
                            String AccountNameHeader = UtilFunctions.getString(rsMainCodeHeader, "ACCOUNT_NAME", "");
                            String ShCodeHeader = UtilFunctions.getString(rsMainCodeHeader, "SH_CODE", "").trim();
                            String GroupCodeHeader = UtilFunctions.getString(rsMainCodeHeader, "GROUP_CODE", "").trim();
                            MaxCount++;
                            objProgress.SetValue(MaxCount);
                            objProgress.SetText("Processing : "+ AccountNameHeader + "  " + MainCodeHeader );
                            objProgress.repaint();
                            
                            //strSQL = "SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME,SH_CODE FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE NOT LIKE '%000' AND SH_CODE LIKE '"+ShCodeHeader.substring(0,2)+"%' AND APPROVED=1 AND CANCELLED=0 AND SH_CODE NOT LIKE '00%' ORDER BY MAIN_ACCOUNT_CODE";//SH_CODE,MAIN_ACCOUNT_CODE ";
                            strSQL = "SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME,SH_CODE FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE NOT LIKE '%000' " +
                            "AND GROUP_CODE = '"+GroupCodeHeader+"' AND APPROVED=1 AND CANCELLED=0 ORDER BY MAIN_ACCOUNT_CODE";//SH_CODE,MAIN_ACCOUNT_CODE ";
                            
                            ResultSet rsMainCodeDetail = data.getResult(strSQL,FinanceGlobal.FinURL);
                            rsMainCodeDetail.first();
                            if(rsMainCodeDetail.getRow()>0) {
                                while(!rsMainCodeDetail.isAfterLast()) {
                                    String MainCodeDetail = UtilFunctions.getString(rsMainCodeDetail, "MAIN_ACCOUNT_CODE", "");
                                    String AccountNameDetail = UtilFunctions.getString(rsMainCodeDetail, "ACCOUNT_NAME", "");
                                    String ShCodeDetail = UtilFunctions.getString(rsMainCodeDetail, "SH_CODE", "").trim();
                                    //                                    if(MainCodeDetail.equals("125019") || MainCodeDetail.equals("106016")) {
                                    //                                        boolean halt=true;
                                    //                                    }
                                    Counter++;
                                    rsReportData.moveToInsertRow();
                                    rsReportData.updateInt("SR_NO", Counter);
                                    rsReportData.updateInt("REPORT_ID", 3);
                                    rsReportData.updateInt("USER_ID", EITLERPGLOBAL.gUserID);
                                    rsReportData.updateString("COLUMN_1", MainCodeHeader);
                                    rsReportData.updateString("COLUMN_2", ShCodeHeader.substring(0,2));
                                    rsReportData.updateString("COLUMN_3", AccountNameHeader);
                                    rsReportData.updateString("COLUMN_4", MainCodeDetail);
                                    rsReportData.updateString("COLUMN_5", ShCodeDetail);
                                    rsReportData.updateString("COLUMN_6", AccountNameDetail);
                                    BigDecimal PreviousBalance = new BigDecimal(clsAccount.getClosingBalance(MainCodeDetail,"", PreviousYearDate,true)).setScale(2,BigDecimal.ROUND_HALF_UP);
                                    BigDecimal CurrentBalance = new BigDecimal(clsAccount.getClosingBalance(MainCodeDetail,"", CurrentYearDate,true)).setScale(2,BigDecimal.ROUND_HALF_UP);
                                    //rsReportData.updateString("COLUMN_7", new BigDecimal(Math.abs(clsAccount.getClosingBalance(MainCodeDetail,"", PreviousYearDate,true))).setScale(2,BigDecimal.ROUND_HALF_UP).toString());
                                    //rsReportData.updateString("COLUMN_8", new BigDecimal(Math.abs(clsAccount.getClosingBalance(MainCodeDetail,"", CurrentYearDate,true))).setScale(2,BigDecimal.ROUND_HALF_UP).toString());
                                    rsReportData.updateString("COLUMN_7", PreviousBalance.toString());
                                    rsReportData.updateString("COLUMN_8", CurrentBalance.toString());
                                    rsReportData.updateString("COLUMN_9", GroupCodeHeader);
                                    rsReportData.insertRow();
                                    strSQL = "SELECT * FROM D_FIN_SCH_JV_HEADER A,D_FIN_SCH_JV_DETAIL B "+
                                    "WHERE A.DOC_NO = B.DOC_NO AND A.APPROVED =1 AND A.CANCELLED= 0 "+
                                    "AND A.AS_ON_DATE ='" + EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()) + "' AND BASE_MAIN_ACCOUNT_CODE = '" + MainCodeDetail + "' ";
                                    //if(GroupCodeHeader.equals("0")) {
                                    if(data.IsRecordExist(strSQL,FinanceGlobal.FinURL)) {
                                        Counter++;
                                        rsReportData.moveToInsertRow();
                                        rsReportData.updateInt("SR_NO", Counter);
                                        rsReportData.updateInt("REPORT_ID", 3);
                                        rsReportData.updateInt("USER_ID", EITLERPGLOBAL.gUserID);
                                        rsReportData.updateString("COLUMN_1", MainCodeHeader);
                                        rsReportData.updateString("COLUMN_2", ShCodeHeader.substring(0,2));
                                        rsReportData.updateString("COLUMN_3", AccountNameHeader);
                                        rsReportData.updateString("COLUMN_4", MainCodeDetail);
                                        rsReportData.updateString("COLUMN_5", ShCodeDetail);
                                        rsReportData.updateString("COLUMN_6", AccountNameDetail);
                                        
                                        CurrentBalance = CurrentBalance.multiply(new BigDecimal(-1));
                                        
                                        //double temp = Double.parseDouble(CurrentBalance.toString()) *-1;
                                        //CurrentBalance = new BigDecimal(temp);
                                        rsReportData.updateString("COLUMN_7", "0.00");
                                        rsReportData.updateString("COLUMN_8", CurrentBalance.toString());
                                        rsReportData.updateString("COLUMN_9", GroupCodeHeader);
                                        rsReportData.insertRow();
                                    }
                                    //}
                                    
                                    if(data.IsRecordExist(strSQL,FinanceGlobal.FinURL)) {
                                        ResultSet rsDummy = data.getResult(strSQL,FinanceGlobal.FinURL);
                                        while(!rsDummy.isAfterLast()) {
                                            Counter++;
                                            rsReportData.moveToInsertRow();
                                            rsReportData.updateInt("SR_NO", Counter);
                                            rsReportData.updateInt("REPORT_ID", 3);
                                            rsReportData.updateInt("USER_ID", EITLERPGLOBAL.gUserID);
                                            rsReportData.updateString("COLUMN_1", rsDummy.getString("LINK_CODE"));
                                            rsReportData.updateString("COLUMN_2", "00");
                                            rsReportData.updateString("COLUMN_3", data.getStringValueFromDB("SELECT ACCOUNT_NAME FROM D_FIN_GROUP_CODE_MASTER WHERE GROUP_CODE = '" + rsDummy.getString("GROUP_CODE") + "' ",FinanceGlobal.FinURL));
                                            rsReportData.updateString("COLUMN_4", rsDummy.getString("MAIN_ACCOUNT_CODE"));
                                            rsReportData.updateString("COLUMN_5", rsDummy.getString("LINK_CODE"));
                                            rsReportData.updateString("COLUMN_6", rsDummy.getString("LINK_NAME"));
                                            //CurrentBalance = new BigDecimal(temp);
                                            rsReportData.updateString("COLUMN_7", "0.00");
                                            
                                            if(rsDummy.getString("EFFECT").equals("Dr")) {
                                                rsReportData.updateString("COLUMN_8", rsDummy.getString("AMOUNT"));
                                            } else {
                                                rsReportData.updateString("COLUMN_8", "-"+rsDummy.getString("AMOUNT"));
                                            }
                                            rsReportData.updateString("COLUMN_9", rsDummy.getString("GROUP_CODE"));
                                            rsReportData.insertRow();
                                            
                                            rsDummy.next();
                                        }
                                    }
                                    rsMainCodeDetail.next();
                                }
                            }
                            rsMainCodeHeader.next();
                        }
                    }
                    ProcessDone = true;
                    objProgress.Hide();
                    
                    try {
                        URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptSchedulewiseTB.jsp?dbURL="+FinanceGlobal.FinURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&AsOnDate="+txtAsOnDate.getText()+"&UserId="+EITLERPGLOBAL.gUserID);
                        System.out.println(ReportFile);
                        EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
                    } catch(Exception e) {
                        JOptionPane.showMessageDialog(null,"File error "+e.getMessage());
                    }
                } catch (Exception e) {
                    ProcessDone = true;
                    e.printStackTrace();
                }
            };
        }.start();
    }//GEN-LAST:event_mnuScheduleTrialBalanceActionPerformed
    
    private void mnuTrialBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuTrialBalanceActionPerformed
        // TODO add your handling code here:
        if(!txtAsOnDate.getText().trim().equals("")) {
            if(EITLERPGLOBAL.isDate(txtAsOnDate.getText().trim())) {
                if(cmbType.getSelectedIndex()==0) {
                    GenerateNominal();
                } else {
                    GenerateSubsidary();
                }
            } else {
                JOptionPane.showMessageDialog(null,"Please Enter the Date in dd/mm/yyyy format");
                txtAsOnDate.requestFocus();
            }
        } else {
            JOptionPane.showMessageDialog(null,"Please Enter the Date");
            txtAsOnDate.requestFocus();
        }
    }//GEN-LAST:event_mnuTrialBalanceActionPerformed
    
    private void txtMainCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMainCodeKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMainCodeKeyPressed
    
    private void MainPanelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_MainPanelFocusGained
        // TODO add your handling code here:
        
    }//GEN-LAST:event_MainPanelFocusGained
    
    private void chkAmountItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkAmountItemStateChanged
        // TODO add your handling code here:
        if(chkAmount.isSelected()) {
            txtFromAmt.setEnabled(true);
            txtToAmt.setEnabled(true);
            txtFromAmt.setText("");
            txtToAmt.setText("");
        }
        else {
            txtFromAmt.setEnabled(false);
            txtToAmt.setEnabled(false);
            txtFromAmt.setText("");
            txtToAmt.setText("");
        }
        
    }//GEN-LAST:event_chkAmountItemStateChanged
    
    private void cmdGenerateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGenerateReportActionPerformed
        // TODO add your handling code here:
        mnuSelectReport.show(jPanel2, cmdGenerateReport.getX(), cmdGenerateReport.getY()+cmdGenerateReport.getHeight());
    }//GEN-LAST:event_cmdGenerateReportActionPerformed
    
    private void cmbTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTypeItemStateChanged
        // TODO add your handling code here:
        if(cmbType.getSelectedIndex()==1) {
            txtMainCode.setEnabled(true);
        }
    }//GEN-LAST:event_cmbTypeItemStateChanged
    
    private void cmdSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSearchActionPerformed
        // TODO add your handling code here:
        searchWithin(' ');
    }//GEN-LAST:event_cmdSearchActionPerformed
    
    private void btnEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnterActionPerformed
        // TODO add your handling code here:
        //Credit.clear();
        //Debit.clear();
        if(!txtAsOnDate.getText().trim().equals("")) {
            if(EITLERPGLOBAL.isDate(txtAsOnDate.getText().trim())) {
                if(cmbType.getSelectedIndex()==0) {
                    getAccountBalanceN();
                } else {
                    
                    getAccountBalanceS();
                }
            } else {
                JOptionPane.showMessageDialog(null,"Please Enter the Date in dd/mm/yyyy format");
                txtAsOnDate.requestFocus();
            }
        } else {
            JOptionPane.showMessageDialog(null,"Please Enter the Date");
            txtAsOnDate.requestFocus();
        }
    }//GEN-LAST:event_btnEnterActionPerformed
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formMouseClicked
    
    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jPanel1MouseClicked
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        MainPanel.setSelectedIndex(0);
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void txtAsOnDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAsOnDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAsOnDateActionPerformed
    
    private void FormatGridN() {
        TResult.removeAll();
        TableModelT = new EITLTableModel();
        TResult.setModel(TableModelT);
        TableModelT.addColumn("Main Code");
        TableModelT.addColumn("Account Name");
        TableModelT.addColumn("Debit");
        TableModelT.addColumn("Credit");
        TableModelT.addColumn("SH. Code");
        
        TableModelT.SetVariable(0,"MAIN_CODE");
        TableModelT.SetVariable(1,"ACCOUNT_NAME");
        TableModelT.SetVariable(2,"DEBIT_AMOUNT");
        TableModelT.SetVariable(3,"CREDIT_AMOUNT");
        TableModelT.SetVariable(4,"SH_CODE");
        
        RowFormat =new EITLTableCellRenderer();
        
        for(int j=0;j<TResult.getColumnCount();j++) {
            TResult.getColumnModel().getColumn(j).setCellRenderer(RowFormat);
        }
        
        CellAlign=new EITLTableCellRenderer();
        CellAlign.setHorizontalAlignment(JLabel.RIGHT);
        
        TResult.getColumnModel().getColumn(3).setCellRenderer(CellAlign);
        TResult.getColumnModel().getColumn(4).setCellRenderer(CellAlign);
        
    }
    
    private void GenerateCombo() {
        cmbType.setModel(cmbModel);
        ComboData aData = new ComboData();
        aData.Text="Nominal Ledger";
        aData.Code=1;
        cmbModel.addElement(aData);
        aData.Text="Subsidary Ledger";
        aData.Code=2;
        cmbModel.addElement(aData);
        cmbType.setSelectedIndex(0);
    }
    
    private void getAccountBalanceN() {
        
        new Thread(){
            
            public void run(){
                
                
                try {
                    
                    double Amount =0.0;
                    int DrCount = 0;
                    int CrCount = 0;
                    int Counter=0;
                    double DrTotal=0;
                    double CrTotal=0;
                    double FromAmt=0;
                    double ToAmt = 0;
                    
                    HashMap Credit= new HashMap();
                    HashMap Debit = new HashMap();
                    if(chkAmount.isSelected()) {
                        if(txtFromAmt.getText().trim().equals("") || txtToAmt.getText().trim().equals("")) {
                            JOptionPane.showMessageDialog(null,"Please enter From and To amount.");
                            
                            return;
                        }
                        FromAmt = Double.parseDouble(txtFromAmt.getText().trim());
                        ToAmt = Double.parseDouble(txtToAmt.getText().trim());
                        if(FromAmt>ToAmt)  {
                            JOptionPane.showMessageDialog(null,"From Amount must be less then to amount");
                            return;
                        }
                        
                        if(ToAmt<FromAmt)  {
                            JOptionPane.showMessageDialog(null,"To Amount must be grater then From amount");
                            return;
                        }
                    }
                    int Count=data.getIntValueFromDB("SELECT COUNT(*) AS ACCOUNT_COUNT  FROM D_FIN_GL ORDER BY MAIN_ACCOUNT_CODE",FinanceGlobal.FinURL);
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Count);
                    Bar.setMinimum(0);
                    Bar.setValue(0);
                    
                    ResultSet rsAccount =data.getResult("SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL ORDER BY MAIN_ACCOUNT_CODE",FinanceGlobal.FinURL); //WHERE APPROVED=1
                    rsAccount.first();
                    while(!rsAccount.isAfterLast()) {
                        Counter++;
                        Bar.setValue(Counter);
                        lblStatus.setText("Processing Record "+Counter);
                        
                        
                        if(rsAccount.getString("MAIN_ACCOUNT_CODE").equals("133203")) {
                            boolean halt=true;
                        }
                        
                        if(chkApproved.isSelected()) {
                            Amount = clsAccount.getClosingBalance(rsAccount.getString("MAIN_ACCOUNT_CODE"),"",EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()),true);
                        }
                        else {
                            Amount =  clsAccount.getAvailableClosingBalance(rsAccount.getString("MAIN_ACCOUNT_CODE"),"",EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()));
                        }
                        
                        // System.out.println("Main Code : "+rsAccount.getString("MAIN_ACCOUNT_CODE")+ " : " + "Amount is : ===>> "+Amount);
                        
                        clsTrialBalance ObjTrial = new clsTrialBalance();
                        ObjTrial.setAttribute("MAIN_ACCOUNT_CODE",rsAccount.getString("MAIN_ACCOUNT_CODE")) ;
                        ObjTrial.setAttribute("ACCOUNT_NAME",rsAccount.getString("ACCOUNT_NAME")) ;
                        
                        if(chkAmount.isSelected()) {
                            FromAmt = Double.parseDouble(txtFromAmt.getText().trim());
                            ToAmt = Double.parseDouble(txtToAmt.getText().trim());
                            if(Math.abs(Amount) >= FromAmt && Math.abs(Amount) <= ToAmt) {
                                // do nothing
                            } else {
                                rsAccount.next();
                                continue;
                            }
                        }
                        
                        
                        if(Amount > 0) {
                            DrTotal+=Amount;
                            ObjTrial.setAttribute("DEBIT", dFormat.format(Amount)) ;
                            Debit.put(Integer.toString(DrCount), ObjTrial);
                            DrCount++;
                            rsAccount.next();
                        } else if(Amount < 0){
                            CrTotal+=Math.abs(Amount);
                            ObjTrial.setAttribute("CREDIT",dFormat.format(Math.abs(Amount))) ;
                            Debit.put(Integer.toString(DrCount), ObjTrial);
                            DrCount++;
                            rsAccount.next();
                        } else {
                            rsAccount.next();
                        }
                    }
                    
                    lblDebitTotal.setText(dFormat.format(DrTotal));
                    lblCreditTotal.setText(dFormat.format(CrTotal));
                    
                    FormatGridN();
                    GenerateGridN(Debit);
                    ProcessCompleted=true;
                    lblStatus.setText("Completed...");
                    //DrTotal=0.0;
                    // CrTotal=0.0;
                    // Debit.clear();
                    // Credit.clear();
                    
                }
                catch(Exception e) {
                    ProcessCompleted=true;
                    e.printStackTrace();
                }
                
                MainPanel.setSelectedIndex(1);
                Bar.setVisible(false);
                lblStatus.setVisible(false);
            };
        }.start();
        
    }
    
    private void GenerateGridN(HashMap List) {
        
        DrTotal=0.0;
        CrTotal=0.0;
        objData = new TReportWriter.SimpleDataProvider.TTable();
        
        for(int i=0;i<=List.size()-1;i++) {
            clsTrialBalance ObjBalance =(clsTrialBalance)List.get(Integer.toString(i));
            Object[] rowData = new Object[List.size()];
            
            String SHCode=data.getStringValueFromDB("SELECT SH_CODE FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE='"+ObjBalance.getAttribute("MAIN_ACCOUNT_CODE").getString()+"'",FinanceGlobal.FinURL);
            
            TableModelT.addRow(rowData);
            TResult.setValueAt(ObjBalance.getAttribute("MAIN_ACCOUNT_CODE").getString(),i,0);
            TResult.setValueAt(ObjBalance.getAttribute("ACCOUNT_NAME").getString(),i,1);
            TResult.setValueAt(ObjBalance.getAttribute("DEBIT").getString(), i, 2);
            TResult.setValueAt(ObjBalance.getAttribute("CREDIT").getString(), i,3);
            TResult.setValueAt(SHCode, i,4);
            
            TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
            objRow.setValue("MAIN_CODE",(String)ObjBalance.getAttribute("MAIN_ACCOUNT_CODE").getObj());
            objRow.setValue("AC_NAME",(String)ObjBalance.getAttribute("ACCOUNT_NAME").getObj());
            objRow.setValue("DEBIT",ObjBalance.getAttribute("DEBIT").getString());
            objRow.setValue("CREDIT",ObjBalance.getAttribute("CREDIT").getString());
            if (SHCode.trim().equals("000000")) {
                SHCode="";
            }
            objRow.setValue("SH_CODE",SHCode);
            objData.AddRow(objRow);
        }
    }
    
    
    private void FormatGridS() {
        TResult.removeAll();
        TableModelT = new EITLTableModel();
        TResult.setModel(TableModelT);
        TableModelT.addColumn("Main Code");
        TableModelT.addColumn("Sub Code");
        TableModelT.addColumn("Account Name");
        //TableModelT.addColumn("Address");
        TableModelT.addColumn("Debit");
        TableModelT.addColumn("Credit");
        TableModelT.addColumn("SH. Code");
        
        TableModelT.SetVariable(0,"MAIN_CODE");
        TableModelT.SetVariable(1,"ACCOUNT_NAME");
        //  TableModelT.SetVariable(2,"ADDRESS");
        TableModelT.SetVariable(2,"DEBIT_AMOUNT");
        TableModelT.SetVariable(3,"CREDIT_AMOUNT");
        TableModelT.SetVariable(4,"SH_CODE");
        
        RowFormat =new EITLTableCellRenderer();
        
        for(int j=0;j<TResult.getColumnCount();j++) {
            TResult.getColumnModel().getColumn(j).setCellRenderer(RowFormat);
        }
        
        CellAlign=new EITLTableCellRenderer();
        CellAlign.setHorizontalAlignment(JLabel.RIGHT);
        
        TResult.getColumnModel().getColumn(3).setCellRenderer(CellAlign);
        TResult.getColumnModel().getColumn(4).setCellRenderer(CellAlign);
        
    }
    
    private void getAccountBalanceS() {
        new Thread() {
            public void run() {
                try {
                    double Amount=0.0 ;
                    int DrCount = 0;
                    int CrCount = 0;
                    int Counter=0;
                    double DrTotal=0;
                    double CrTotal=0;
                    
                    
                    double FromAmt = 0;
                    double ToAmt = 0;
                    
                    
                    if(chkAmount.isSelected()) {
                        if(txtFromAmt.getText().trim().equals("") || txtToAmt.getText().trim().equals("")) {
                            JOptionPane.showMessageDialog(null,"Please enter From and To amount.");
                            
                            return;
                        }
                        FromAmt = Double.parseDouble(txtFromAmt.getText().trim());
                        ToAmt = Double.parseDouble(txtToAmt.getText().trim());
                        if(FromAmt>ToAmt)  {
                            JOptionPane.showMessageDialog(null,"From Amount must be less then to amount");
                            return;
                        }
                        
                        if(ToAmt<FromAmt)  {
                            JOptionPane.showMessageDialog(null,"To Amount must be grater then From amount");
                            return;
                        }
                    }
                    
                    HashMap Credit= new HashMap();
                    HashMap Debit = new HashMap();
                    
                    //System.out.println("Start");
                    int Count=data.getIntValueFromDB("SELECT COUNT(*) AS ACCOUNT_COUNT  FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = '"+txtMainCode.getText().trim()+"' ORDER BY MAIN_ACCOUNT_CODE, PARTY_CODE",FinanceGlobal.FinURL);
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Count);
                    Bar.setMinimum(0);
                    Bar.setValue(0);
                    ResultSet rsAccount =data.getResult("SELECT MAIN_ACCOUNT_CODE,PARTY_CODE AS SUB_ACCOUNT_CODE,PARTY_NAME AS ACCOUNT_NAME,ADDRESS FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = '"+txtMainCode.getText().trim()+"' AND PARTY_CODE<>0 ORDER BY MAIN_ACCOUNT_CODE, PARTY_CODE",FinanceGlobal.FinURL);
                    rsAccount.first();
                    while(!rsAccount.isAfterLast()) {
                        Counter++;
                        Bar.setValue(Counter);
                        lblStatus.setText("Processing Record "+Counter);
                        
                        //Amount = (new clsAccount()).getAvailableOpeningBalance(rsAccount.getString("MAIN_ACCOUNT_CODE"),rsAccount.getString("SUB_ACCOUNT_CODE"),EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()));
                        
                        if(chkApproved.isSelected()) {
                            Amount = (new clsAccount()).getClosingBalance(rsAccount.getString("MAIN_ACCOUNT_CODE"),rsAccount.getString("SUB_ACCOUNT_CODE"),EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()),true);
                        } else {
                            Amount = (new clsAccount()).getAvailableClosingBalance(rsAccount.getString("MAIN_ACCOUNT_CODE"),rsAccount.getString("SUB_ACCOUNT_CODE"),EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()));
                        }
                        // System.out.println("Main Code : "+rsAccount.getString("MAIN_ACCOUNT_CODE")+ " : " + "Amount is : ===>> "+Amount);
                        clsTrialBalance ObjTrial = new clsTrialBalance();
                        ObjTrial.setAttribute("MAIN_ACCOUNT_CODE",rsAccount.getString("MAIN_ACCOUNT_CODE")) ;
                        ObjTrial.setAttribute("SUB_ACCOUNT_CODE",rsAccount.getString("SUB_ACCOUNT_CODE")) ;
                        ObjTrial.setAttribute("ACCOUNT_NAME",rsAccount.getString("ACCOUNT_NAME")) ;
                        if(chkPartyAdd.isSelected()) {
                            ObjTrial.setAttribute("ADDRESS",rsAccount.getString("ADDRESS")) ;
                        } else {
                            ObjTrial.setAttribute("ADDRESS","") ;
                        }
                        
                        if(chkAmount.isSelected()) {
                            FromAmt = Double.parseDouble(txtFromAmt.getText().trim());
                            ToAmt = Double.parseDouble(txtToAmt.getText().trim());
                            if(Math.abs(Amount) >= FromAmt && Math.abs(Amount) <= ToAmt) {
                                // do nothing
                            } else {
                                rsAccount.next();
                                continue;
                            }
                        }
                        
                        if(Amount > 0) {
                            DrTotal+=Amount;
                            ObjTrial.setAttribute("DEBIT",dFormat.format(Amount)) ;
                            rsAccount.next();
                            Debit.put(Integer.toString(DrCount), ObjTrial);
                            DrCount++;
                        }
                        else if(Amount < 0){
                            //System.out.println(" "+Amount);
                            CrTotal+=Math.abs(Amount);
                            ObjTrial.setAttribute("CREDIT",dFormat.format(Math.abs(Amount))) ;
                            rsAccount.next();
                            Debit.put(Integer.toString(DrCount), ObjTrial);
                            DrCount++;
                        }
                        else {
                            //                            ObjTrial.setAttribute("CREDIT","");
                            //                            ObjTrial.setAttribute("DEBIT","");
                            //                            Deer.toString(DrCount), ObjTrial);
                            //                            DrCount++;
                            rsAccount.next();
                        }
                        
                        
                    }
                    
                    lblDebitTotal.setText(dFormat.format(DrTotal));
                    lblCreditTotal.setText(dFormat.format(CrTotal));
                    
                    //System.out.println("Credit is : " + CrTotal);
                    // System.out.println("Dedit is : " + DrTotal);
                    
                    FormatGridS();
                    GenerateGridS(Debit);
                    ProcessCompleted=true;
                    lblStatus.setText("Completed...");
                    //DrTotal=0.0;
                    // CrTotal=0.0;
                    //Debit.clear();
                    //Credit.clear();
                }
                catch(Exception e) {
                    ProcessCompleted=true;
                    e.printStackTrace();
                }
                
                MainPanel.setSelectedIndex(1);
                Bar.setVisible(false);
                lblStatus.setVisible(false);
                
            };
        }.start();
    }
    
    private void GenerateGridS(HashMap List) {
        
        DrTotal=0.0;
        CrTotal=0.0;
        
        objData = new TReportWriter.SimpleDataProvider.TTable();
        for(int i=0;i<=List.size()-1;i++) {
            clsTrialBalance ObjBalance =(clsTrialBalance)List.get(Integer.toString(i));
            Object[] rowData = new Object[List.size()];
            
            String SHCode=data.getStringValueFromDB("SELECT SH_CODE FROM D_FIN_PARTY_MASTER WHERE PARTY_CODE='"+ObjBalance.getAttribute("SUB_ACCOUNT_CODE").getString()+"'",FinanceGlobal.FinURL);
            
            TableModelT.addRow(rowData);
            TResult.setValueAt(ObjBalance.getAttribute("MAIN_ACCOUNT_CODE").getString(),i,0);
            TResult.setValueAt(ObjBalance.getAttribute("SUB_ACCOUNT_CODE").getString(),i,1);
            TResult.setValueAt(ObjBalance.getAttribute("ACCOUNT_NAME").getString().trim(),i,2);
            //TResult.setValueAt(ObjBalance.getAttribute("ADDRESS").getString(), i,3);
            TResult.setValueAt(ObjBalance.getAttribute("DEBIT").getString(), i,3);
            TResult.setValueAt(ObjBalance.getAttribute("CREDIT").getString(), i,4);
            TResult.setValueAt(SHCode, i,5);
            
            
            TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
            
            objRow.setValue("MAIN_CODE",(String)ObjBalance.getAttribute("MAIN_ACCOUNT_CODE").getObj());
            objRow.setValue("SUB_CODE",(String)ObjBalance.getAttribute("SUB_ACCOUNT_CODE").getObj());
            objRow.setValue("AC_NAME",((String)ObjBalance.getAttribute("ACCOUNT_NAME").getObj()).trim());
            /*if(chkPartyAdd.isSelected()) {
                objRow.setValue("ADDRESS",((String)ObjBalance.getAttribute("ADDRESS").getObj()).trim());
            } else {
                objRow.setValue("ADDRESS","");
            }*/
            objRow.setValue("DEBIT",ObjBalance.getAttribute("DEBIT").getString());
            objRow.setValue("CREDIT",ObjBalance.getAttribute("CREDIT").getString());
            String dr="",cr="";
            dr = ObjBalance.getAttribute("DEBIT").getString();
            cr = ObjBalance.getAttribute("CREDIT").getString();
            
            if (dr.trim().equals("")) {
                DrTotal = DrTotal;
            }
            else {
                
                DrTotal = DrTotal + EITLERPGLOBAL.round(Double.parseDouble(ObjBalance.getAttribute("DEBIT").getString()), 2) ;
            }
            if (cr.trim().equals("")) {
                CrTotal = CrTotal;
            }
            else {
                
                CrTotal = CrTotal +  EITLERPGLOBAL.round(Double.parseDouble(ObjBalance.getAttribute("CREDIT").getString()),2);
            }
            if (SHCode.trim().equals("000000")) {
                SHCode="";
            }
            objRow.setValue("SH_CODE",SHCode);
            //System.out.println("Credit is in Grid : " + CrTotal);
            //System.out.println("Dedit is in Grid  : " + DrTotal);
            objData.AddRow(objRow);
            
            
        }
        //List.clear();
        
    }
    
    
    
    private void searchWithin(char recentKey) {
        
        try {
            
            RowFormat.removeBackColors();
            CellAlign.removeBackColors();
            
            TResult.repaint();
            
            String searchString=txtSearch.getText();
            
            if(!searchString.trim().equals("")) {
                
                
                if(recentKey!=' ') {
                    searchString=searchString+recentKey;
                }
                
                searchString=searchString.toLowerCase();
                
                int currentCol=TResult.getSelectedColumn();
                
                for(int i=0;i<=TResult.getRowCount()-1;i++) {
                    
                    if(TResult.getValueAt(i,currentCol).toString().toLowerCase().indexOf(searchString)!=-1) {
                        
                        TResult.changeSelection(i, currentCol, false,false);
                        RowFormat.setBackColor(i, currentCol, Color.YELLOW);
                       /* for(int j=0;j<TableModelT.getColumnCount();j++) {
                            RowFormat.setBackColor(i, j, Color.YELLOW);
                        }*/
                        
                    }
                }
                TResult.repaint();
            }
        }
        catch(Exception e) {
            
        }
        
    }
    
    private void GenerateNominal() {
        try {
            
            HashMap Parameters=new HashMap();
            Parameters.put("ON_DATE",txtAsOnDate.getText());
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptNominalLedger.rpt",Parameters,objData);
            //objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptSchedNominalLedger.rpt",Parameters,objData);
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    private void GenerateSubsidary() {
        try {
            
            HashMap Parameters=new HashMap();
            Parameters.put("ON_DATE",txtAsOnDate.getText());
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            String AccName = data.getStringValueFromDB("SELECT ACCOUNT_NAME FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE='"+txtMainCode.getText().trim()+"' ",FinanceGlobal.FinURL);
            Parameters.put("MAIN_CODE",txtMainCode.getText().trim() + " - " + AccName);
            
            
            // System.out.println("Credit is in : " + CrTotal);
            // System.out.println("Dedit is in  : " + DrTotal);
            
            double Diff_cr = CrTotal - DrTotal;
            double Diff_dr = DrTotal - CrTotal;
            if (Diff_cr < 0) {
                Diff_cr = 0;
            }
            if (Diff_dr < 0) {
                Diff_dr = 0;
            }
            
            // System.out.println("Credit Diff issssss : " + Diff_cr);
            // System.out.println("Dedit Diff  isssssss : " + Diff_dr);
            
            // System.out.println("===================================================");
            Parameters.put("DIFF_CR",Double.toString(Diff_cr));
            Parameters.put("DIFF_DR",Double.toString(Diff_dr));
            
            double CrTotal = 0;
            double DrTotal = 0;
            if(chkPartyAdd.isSelected()) {
                objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptSubsidaryLedgerWithAdd.rpt",Parameters,objData);
            }
            else {
                objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptSubsidaryLedger.rpt",Parameters,objData);
            }
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar Bar;
    private javax.swing.JTabbedPane MainPanel;
    private javax.swing.JTable TResult;
    private javax.swing.JButton btnEnter;
    private javax.swing.JCheckBox chkAmount;
    private javax.swing.JCheckBox chkApproved;
    private javax.swing.JCheckBox chkPartyAdd;
    private javax.swing.JComboBox cmbType;
    private javax.swing.JButton cmdGenerateReport;
    private javax.swing.JButton cmdSearch;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCreditTotal;
    private javax.swing.JLabel lblDebitTotal;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JMenuItem mnuScheduleTrialBalance;
    private javax.swing.JPopupMenu mnuSelectReport;
    private javax.swing.JMenuItem mnuTrialBalance;
    private javax.swing.JTextField txtAsOnDate;
    private javax.swing.JTextField txtFromAmt;
    private javax.swing.JTextField txtMainCode;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtToAmt;
    // End of variables declaration//GEN-END:variables
    
}

