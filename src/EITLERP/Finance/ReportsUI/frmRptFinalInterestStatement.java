package EITLERP.Finance.ReportsUI;

import EITLERP.*;
import EITLERP.Finance.*;
import EITLERP.Utils.*;
import EITLERP.Utils.SimpleDataProvider.*;
import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.net.*;
import java.util.*;
import java.text.*;
import TReportWriter.*;

public class frmRptFinalInterestStatement extends javax.swing.JApplet {
    
    private EITLComboModel cmbReceiptTypeModel;
    private EITLComboModel cmbReportTypeModel;
    private EITLComboModel cmbMonthModel;
    private EITLComboModel cmbConditionModel;
    private TReportEngine objEngine=new TReportEngine();
    private TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
    private Character mychar = new Character('0');
    
    /** Initializes the applet frmRptGRNInfo */
    public void init() {
        setSize(425,325);
        initComponents();
        GenerateCombo();
        lblEffectivefrom.setVisible(false);
        lblEffectiveless.setVisible(false);
        lblEffectiveto.setVisible(false);
        txtFromDate.setVisible(false);
        txtToDate.setVisible(false);
        cmbCondition.setEnabled(false);
        txtHeader.setEnabled(false);
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtYear = new javax.swing.JTextField();
        cmdPreview = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        cmbCondition = new javax.swing.JComboBox();
        cmdPreviewSummary = new javax.swing.JButton();
        cmbReceiptType = new javax.swing.JComboBox();
        chkOnlyMaturityWarrant = new javax.swing.JCheckBox();
        lblCondition = new javax.swing.JLabel();
        cmbMonth = new javax.swing.JComboBox();
        lblEffectiveless = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        lblEffectivefrom = new javax.swing.JLabel();
        lblEffectiveto = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        lblHeader = new javax.swing.JLabel();
        txtHeader = new javax.swing.JTextField();

        getContentPane().setLayout(null);

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jPanel3.setLayout(null);

        jPanel3.setBackground(new java.awt.Color(0, 153, 204));
        jPanel3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel6.setText("INTEREST STATEMENT WITH WARRANT NO REPORT");
        jPanel3.add(jLabel6);
        jLabel6.setBounds(9, 8, 350, 15);

        getContentPane().add(jPanel3);
        jPanel3.setBounds(0, 2, 800, 30);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Month :");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(20, 70, 90, 20);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Year :");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(239, 72, 51, 17);

        txtYear.setColumns(10);
        getContentPane().add(txtYear);
        txtYear.setBounds(295, 71, 90, 20);

        cmdPreview.setText("Preview Report");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        getContentPane().add(cmdPreview);
        cmdPreview.setBounds(69, 260, 130, 25);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Receipt Type :");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(20, 100, 90, 15);

        cmbCondition.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbConditionItemStateChanged(evt);
            }
        });

        getContentPane().add(cmbCondition);
        cmbCondition.setBounds(115, 172, 181, 22);

        cmdPreviewSummary.setText("Cumulative Interest");
        cmdPreviewSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewSummaryActionPerformed(evt);
            }
        });

        getContentPane().add(cmdPreviewSummary);
        cmdPreviewSummary.setBounds(229, 260, 160, 25);

        getContentPane().add(cmbReceiptType);
        cmbReceiptType.setBounds(115, 100, 104, 24);

        chkOnlyMaturityWarrant.setSelected(true);
        chkOnlyMaturityWarrant.setText("Only Maturity Warrant");
        chkOnlyMaturityWarrant.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkOnlyMaturityWarrantItemStateChanged(evt);
            }
        });

        getContentPane().add(chkOnlyMaturityWarrant);
        chkOnlyMaturityWarrant.setBounds(231, 103, 171, 19);

        lblCondition.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCondition.setText("Condition :");
        getContentPane().add(lblCondition);
        lblCondition.setBounds(21, 174, 90, 18);

        getContentPane().add(cmbMonth);
        cmbMonth.setBounds(115, 70, 124, 24);

        lblEffectiveless.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEffectiveless.setText("Effective date less then :");
        getContentPane().add(lblEffectiveless);
        lblEffectiveless.setBounds(11, 207, 163, 16);

        txtFromDate.setColumns(10);
        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(183, 205, 90, 20);

        lblEffectivefrom.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEffectivefrom.setText("Effective date from :");
        getContentPane().add(lblEffectivefrom);
        lblEffectivefrom.setBounds(13, 208, 163, 14);

        lblEffectiveto.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEffectiveto.setText("Effective date to :");
        getContentPane().add(lblEffectiveto);
        lblEffectiveto.setBounds(12, 232, 163, 17);

        txtToDate.setColumns(10);
        getContentPane().add(txtToDate);
        txtToDate.setBounds(182, 229, 90, 20);

        lblHeader.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblHeader.setText("Header :");
        getContentPane().add(lblHeader);
        lblHeader.setBounds(55, 146, 56, 18);

        txtHeader.setColumns(10);
        txtHeader.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtHeaderKeyReleased(evt);
            }
        });

        getContentPane().add(txtHeader);
        txtHeader.setBounds(115, 143, 184, 20);

    }//GEN-END:initComponents
    
    private void txtHeaderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHeaderKeyReleased
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        String tmpText = txtHeader.getText();
        String str = mychar.toString(c);
        if(mychar.isLetter(c)) {
            if(txtHeader.getText().length()<=10) {
                if(mychar.isLowerCase(c)) {
                    tmpText = tmpText.replace(c,mychar.toUpperCase(c));
                    txtHeader.setText(tmpText);
                } else {
                    txtHeader.setText(tmpText);
                }
            } else {
                tmpText=txtHeader.getText().trim().substring(0,10);
                txtHeader.setText(tmpText);
            }
        } else if(mychar.isSpaceChar(c)) {
            if(txtHeader.getText().length()<=10) {
                txtHeader.setText(tmpText);
            } else {
                tmpText=txtHeader.getText().trim().substring(0,10);
                txtHeader.setText(tmpText);
            }
        } else {
            StringBuffer strb = new StringBuffer(tmpText);
            while(strb.indexOf(str)>=0) {
                strb.deleteCharAt(strb.indexOf(str));
                tmpText = new String(strb);
            }
            txtHeader.setText(tmpText);
        }
    }//GEN-LAST:event_txtHeaderKeyReleased
    
    private void cmbConditionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbConditionItemStateChanged
        // TODO add your handling code here:
        if(cmbCondition.getSelectedIndex()==0) {
            lblEffectivefrom.setVisible(false);
            lblEffectiveto.setVisible(false);
            lblEffectiveless.setVisible(false);
            txtFromDate.setVisible(false);
            txtToDate.setVisible(false);
            txtFromDate.setText("");
            txtToDate.setText("");
        } else if(cmbCondition.getSelectedIndex()==1) {
            lblEffectivefrom.setVisible(false);
            lblEffectiveto.setVisible(false);
            lblEffectiveless.setVisible(true);
            txtFromDate.setVisible(true);
            txtToDate.setVisible(false);
            txtFromDate.setText("");
            txtToDate.setText("");
        } else if(cmbCondition.getSelectedIndex()==2) {
            lblEffectivefrom.setVisible(true);
            lblEffectiveto.setVisible(true);
            lblEffectiveless.setVisible(false);
            txtFromDate.setVisible(true);
            txtToDate.setVisible(true);
            txtFromDate.setText("");
            txtToDate.setText("");
        }
    }//GEN-LAST:event_cmbConditionItemStateChanged
    
    private void chkOnlyMaturityWarrantItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkOnlyMaturityWarrantItemStateChanged
        // TODO add your handling code here:
        if(chkOnlyMaturityWarrant.isSelected()) {
            lblEffectivefrom.setVisible(false);
            lblEffectiveless.setVisible(false);
            lblEffectiveto.setVisible(false);
            txtFromDate.setVisible(false);
            txtToDate.setVisible(false);
            txtFromDate.setText("");
            txtToDate.setText("");
            cmbCondition.setEnabled(false);
            cmbCondition.setSelectedIndex(0);
            txtHeader.setEnabled(false);
            txtHeader.setText("");
        } else {
            cmbCondition.setSelectedIndex(0);
            cmbCondition.setEnabled(true);
            txtHeader.setEnabled(true);
            txtHeader.setText("");
            txtFromDate.setText("");
            txtToDate.setText("");
        }
    }//GEN-LAST:event_chkOnlyMaturityWarrantItemStateChanged
    
    private void cmdPreviewSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewSummaryActionPerformed
        // TODO add your handling code here:
        if ( ! Validate()) {
            return;
        }
        GenerateSummary();
    }//GEN-LAST:event_cmdPreviewSummaryActionPerformed
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        if ( ! Validate()) {
            return;
        }
        GenerateReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkOnlyMaturityWarrant;
    private javax.swing.JComboBox cmbCondition;
    private javax.swing.JComboBox cmbMonth;
    private javax.swing.JComboBox cmbReceiptType;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewSummary;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblCondition;
    private javax.swing.JLabel lblEffectivefrom;
    private javax.swing.JLabel lblEffectiveless;
    private javax.swing.JLabel lblEffectiveto;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtHeader;
    private javax.swing.JTextField txtToDate;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
    
    private void GenerateReport() {
        try {
            int ReceiptType = cmbReceiptType.getSelectedIndex() + 1;
            int nMonth = cmbMonth.getSelectedIndex() ;
            
            String strSQL = "";
            String Condition = "";
            String Date = txtYear.getText().trim()+"-"+nMonth+"-01";
            String LastDate = data.getStringValueFromDB("SELECT LAST_DAY('"+Date+"') FROM DUAL",FinanceGlobal.FinURL);
            if(ReceiptType == 1 || ReceiptType == 2) {
                TReportWriter.SimpleDataProvider.TRow objRow;
                TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
                
                objReportData.AddColumn("SR_NO");
                objReportData.AddColumn("WARRANT_NO");
                objReportData.AddColumn("BROKER_CODE");
                objReportData.AddColumn("RECEIPT_NO");
                objReportData.AddColumn("LEGACY_NO");
                objReportData.AddColumn("PARTY_CODE");
                objReportData.AddColumn("DEPOSITORS_NAME");
                objReportData.AddColumn("PRINCIPLE_AMOUNT");
                objReportData.AddColumn("PERIOD");
                objReportData.AddColumn("FROM_DATE");
                objReportData.AddColumn("IN_UPTO");
                objReportData.AddColumn("DUE_DATE");
                objReportData.AddColumn("RATE");
                objReportData.AddColumn("DAYS");
                objReportData.AddColumn("INTEREST");
                objReportData.AddColumn("I_TAX");
                objReportData.AddColumn("NET_INTEREST");
                
                TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
                objOpeningRow.setValue("SR_NO","");
                objOpeningRow.setValue("WARRANT_NO","");
                objOpeningRow.setValue("BROKER_CODE","");
                objOpeningRow.setValue("RECEIPT_NO","");
                objOpeningRow.setValue("LEGACY_NO","");
                objOpeningRow.setValue("PARTY_CODE","");
                objOpeningRow.setValue("DEPOSITORS_NAME","");
                objOpeningRow.setValue("PRINCIPLE_AMOUNT","");
                objOpeningRow.setValue("PERIOD","");
                objOpeningRow.setValue("FROM_DATE","0000-00-00");
                objOpeningRow.setValue("IN_UPTO","");
                objOpeningRow.setValue("DUE_DATE","0000-00-00");
                objOpeningRow.setValue("RATE","");
                objOpeningRow.setValue("DAYS","");
                objOpeningRow.setValue("INTEREST","");
                objOpeningRow.setValue("I_TAX","");
                objOpeningRow.setValue("NET_INTEREST","");
                
                String StartDate = txtYear.getText().trim()+"-"+EITLERPGLOBAL.padLeft(2, Integer.toString(nMonth),"0")+"-01";
                String EndDate = data.getStringValueFromDB("SELECT LAST_DAY('"+StartDate+"') FROM DUAL");
                
                strSQL = "SELECT INTCALDTL.WARRANT_NO,INTCALDTL.LEGACY_WARRANT_NO,DMST.BROKER_CODE,DMST.RECEIPT_NO,DMST.LEGACY_NO,DMST.PARTY_CODE,DMST.APPLICANT_NAME,DMST.AMOUNT,DMST.DEPOSIT_PERIOD, "+
                "DMST.MATURITY_DATE AS DUE_DATE,INTCALDTL.INTEREST_RATE,INTCALDTL.INTEREST_DAYS,INTCALDTL.INTEREST_AMOUNT,INTCALDTL.TDS_AMOUNT, "+
                "INTCALDTL.NET_INTEREST,SMST.SCHEME_TYPE "+
                "FROM D_FD_INT_CALC_DETAIL INTCALDTL,D_FD_DEPOSIT_MASTER DMST,D_FD_SCHEME_MASTER SMST "+
                "WHERE DMST.RECEIPT_NO = INTCALDTL.RECEIPT_NO "+
                "AND DMST.SCHEME_ID = SMST.SCHEME_ID "+
                "AND DMST.REJECTED = 0 "+
                "AND DMST.CANCELLED=0 "+
                "AND DMST.APPROVED=1 "+
                "AND SMST.SCHEME_TYPE = "+ReceiptType+" "+
                "AND INTCALDTL.COMPANY_ID = '"+ EITLERPGLOBAL.gCompanyID +"' "+
                "AND MONTH(INTCALDTL.WARRANT_DATE) = "+ nMonth +" "+ // NEW CHANGE FOR MATURITY
                "AND YEAR(INTCALDTL.WARRANT_DATE) =  "+ txtYear.getText().trim() + " "+ // NEW CHANGE FOR MATURITY
                "AND INTCALDTL.WARRANT_DATE>='"+Date+"' AND INTCALDTL.WARRANT_DATE<='"+LastDate+"' ";
                if(chkOnlyMaturityWarrant.isSelected() && !cmbCondition.isEnabled()) {
                    Condition += "AND DMST.MATURITY_DATE>='"+StartDate+"' AND DMST.MATURITY_DATE<='"+EndDate+"' ";
                } else {
                    if(!txtFromDate.getText().trim().equals("")) {
                        if(lblEffectiveless.isVisible()) {
                            Condition+="AND DMST.RECEIPT_DATE<='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                        } else {
                            Condition+="AND DMST.RECEIPT_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                        }
                    }
                    if(!txtToDate.getText().trim().equals("")) {
                        Condition+="AND DMST.RECEIPT_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                    }
                    Condition += "AND DMST.MATURITY_DATE>='"+EITLERPGLOBAL.addDaysToDate(EndDate,1,"yyyy-MM-dd")+"' ";
                }
                
                //strSQL += Condition + " ORDER BY DAY(DMST.MATURITY_DATE),MONTH(DMST.MATURITY_DATE),INTCALDTL.LEGACY_WARRANT_NO";
                strSQL += Condition + " ORDER BY WARRANT_NO";
                
                
                ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
                rsTmp.first();
                
                int Counter = 0;
                
                if(rsTmp.getRow()>0) {
                    while(!rsTmp.isAfterLast()) {
                        Counter ++;
                        objRow=objReportData.newRow();
                        
                        objRow.setValue("SR_NO",Integer.toString(Counter));
                        objRow.setValue("WARRANT_NO",UtilFunctions.getString(rsTmp,"WARRANT_NO",""));
                        objRow.setValue("LEGACY_WARRANT_NO",UtilFunctions.getString(rsTmp,"LEGACY_WARRANT_NO",""));
                        objRow.setValue("BROKER_CODE",UtilFunctions.getString(rsTmp,"BROKER_CODE",""));
                        objRow.setValue("RECEIPT_NO",UtilFunctions.getString(rsTmp,"RECEIPT_NO",""));
                        objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsTmp,"LEGACY_NO",""));
                        
                        //System.out.println("LEGACY NO=" + UtilFunctions.getString(rsTmp,"LEGACY_NO",""));
                        
                        objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsTmp,"PARTY_CODE",""));
                        
                        String PartyCode = UtilFunctions.getString(rsTmp,"PARTY_CODE","");
                        
                        objRow.setValue("DEPOSITORS_NAME",UtilFunctions.getString(rsTmp,"APPLICANT_NAME",""));
                        objRow.setValue("PRINCIPLE_AMOUNT",UtilFunctions.getString(rsTmp,"AMOUNT",""));
                        objRow.setValue("PERIOD",UtilFunctions.getString(rsTmp,"DEPOSIT_PERIOD",""));
                        
                        String ReceiptNo = UtilFunctions.getString(rsTmp,"RECEIPT_NO","");
                        String eDate = data.getStringValueFromDB("SELECT EFFECTIVE_DATE FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+ ReceiptNo +"' AND PARTY_CODE='"+PartyCode+"' ",FinanceGlobal.FinURL);
                        String SQLQuery = "SELECT INTEREST_DAYS FROM D_FD_INT_CALC_DETAIL WHERE RECEIPT_NO='"+ ReceiptNo +"' AND PARTY_CODE='"+PartyCode+"' ORDER BY WARRANT_DATE";
                        ResultSet rsResult = data.getResult(SQLQuery,FinanceGlobal.FinURL);
                        
                        int InterestDays = 0;
                        /*if(ReceiptNo.equals("M015114")) {
                            System.out.println();
                        }*/
                        rsResult.beforeFirst();
                        while(rsResult.next()){
                            if(rsResult.isLast()) {
                                break;
                            }
                            InterestDays = rsResult.getInt("INTEREST_DAYS");
                            eDate = EITLERPGLOBAL.addDaysToDate(eDate, rsResult.getInt("INTEREST_DAYS"),"yyyy-MM-dd");
                        }
                        rsResult.close();
                        
                        String DueDate = UtilFunctions.getString(rsTmp,"DUE_DATE","0000-00-00");
                        String uptoDate = LastDate;
                        if(java.sql.Date.valueOf(LastDate).after(java.sql.Date.valueOf(DueDate)) || java.sql.Date.valueOf(LastDate).compareTo(java.sql.Date.valueOf(DueDate))==0) {
                            uptoDate = clsDepositMaster.deductDays(DueDate, 1);
                        }
                        
                        objRow.setValue("FROM_DATE",EITLERPGLOBAL.formatDate(eDate));
                        objRow.setValue("IN_UPTO",EITLERPGLOBAL.formatDate(uptoDate));
                        objRow.setValue("DUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"DUE_DATE","0000-00-00")));
                        objRow.setValue("RATE",UtilFunctions.getString(rsTmp,"INTEREST_RATE",""));
                        objRow.setValue("DAYS",UtilFunctions.getString(rsTmp,"INTEREST_DAYS",""));
                        objRow.setValue("INTEREST",Double.toString(UtilFunctions.getDouble(rsTmp,"INTEREST_AMOUNT",0)));
                        objRow.setValue("I_TAX",Double.toString(UtilFunctions.getDouble(rsTmp,"TDS_AMOUNT",0)));
                        objRow.setValue("NET_INTEREST",Double.toString(UtilFunctions.getDouble(rsTmp,"NET_INTEREST",0)));
                        
                        objReportData.AddRow(objRow);
                        
                        rsTmp.next();
                    }
                }
                
                int Comp_ID = EITLERPGLOBAL.gCompanyID;
                String month_year = cmbMonth.getSelectedItem().toString().toUpperCase() + " " + txtYear.getText().trim();
                String Scheme_type="";
                if(ReceiptType == 1) {
                    Scheme_type="FD";
                }
                if(ReceiptType == 2) {
                    Scheme_type="LD";
                }
                if(ReceiptType == 3) {
                    Scheme_type="CD";
                }
                HashMap Parameters=new HashMap();
                Parameters.put("MONTH_YEAR",month_year);
                Parameters.put("SCHEME_TYPE",Scheme_type);
                String Header = "";
                if(chkOnlyMaturityWarrant.isSelected()) {
                    Header = "INTEREST STATEMENT FOR MATURITY ";
                } else {
                    Header = "INTEREST STATEMENT FOR HALF YEARLY " + txtHeader.getText().trim();
                }
                Parameters.put("HEADER",Header);
                Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
                
                objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptInterestStatementforMaturity.rpt",Parameters,objReportData);
            }
            
            
            if(ReceiptType == 3) {
                TReportWriter.SimpleDataProvider.TRow objRow;
                TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
                
                objReportData.AddColumn("SR_NO");
                objReportData.AddColumn("WARRANT_NO");
                objReportData.AddColumn("BROKER_CODE");
                objReportData.AddColumn("DEPOSIT_SCHEME");
                objReportData.AddColumn("RECEIPT_NO");
                objReportData.AddColumn("LEGACY_NO");
                objReportData.AddColumn("STATUS");
                objReportData.AddColumn("PARTY_CODE");
                objReportData.AddColumn("DEPOSITORS_NAME");
                objReportData.AddColumn("RECEIPT_DATE");
                objReportData.AddColumn("DUE_DATE");
                objReportData.AddColumn("AMOUNT");
                objReportData.AddColumn("INTEREST_AMOUNT");
                objReportData.AddColumn("MATURITY_AMOUNT");
                objReportData.AddColumn("TAX_AMOUNT");
                objReportData.AddColumn("NET_AMOUNT");
                objReportData.AddColumn("TO_DATE");
                objReportData.AddColumn("FROM_DATE");
                
                TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
                objOpeningRow.setValue("SR_NO","");
                objOpeningRow.setValue("WARRANT_NO","");
                objOpeningRow.setValue("BROKER_CODE","");
                objOpeningRow.setValue("DEPOSIT_SCHEME","");
                objOpeningRow.setValue("RECEIPT_NO","");
                objOpeningRow.setValue("LEGACY_NO","");
                objOpeningRow.setValue("STATUS","");
                objOpeningRow.setValue("PARTY_CODE","");
                objOpeningRow.setValue("DEPOSITORS_NAME","");
                objOpeningRow.setValue("RECEIPT_DATE","0000-00-00");
                objOpeningRow.setValue("DUE_DATE","0000-00-00");
                objOpeningRow.setValue("AMOUNT","");
                objOpeningRow.setValue("INTEREST_AMOUNT","");
                objOpeningRow.setValue("MATURITY_AMOUNT","");
                objOpeningRow.setValue("TAX_AMOUNT","");
                objOpeningRow.setValue("NET_AMOUNT","");
                objOpeningRow.setValue("TO_DATE","0000-00-00");
                objOpeningRow.setValue("FROM_DATE","0000-00-00");
                
                strSQL = "SELECT INTCALDTL.WARRANT_NO,INTCALDTL.LEGACY_WARRANT_NO,DMST.BROKER_CODE,DMST.RECEIPT_NO,DMST.LEGACY_NO,DMST.PARTY_CODE,DMST.APPLICANT_NAME, "+
                "DMST.RECEIPT_DATE ,DMST.MATURITY_DATE,DMST.AMOUNT,INTCALDTL.INTEREST_AMOUNT, "+
                "DMST.AMOUNT+INTCALDTL.INTEREST_AMOUNT AS MATURITY_AMOUNT, "+
                "INTCALDTL.TDS_AMOUNT, "+
                "(INTCALDTL.INTEREST_AMOUNT) - INTCALDTL.TDS_AMOUNT AS NET_AMOUNT, "+
                "CONCAT('"+ txtYear.getText().trim() + "','-','"+ nMonth +"-01')  AS TO_DATE, "+
                "LAST_DAY(CONCAT('"+ txtYear.getText().trim() + "','-','"+ nMonth +"-30')) AS FROM_DATE, "+
                "CASE SMST.SCHEME_TYPE "+
                "WHEN 1 THEN 'FD' "+
                "WHEN 2 THEN 'LD' "+
                "WHEN 3 THEN 'CD' "+
                "END AS  DEPOSIT_SCHEME, "+
                "CASE WHEN DMST.DEPOSITER_STATUS = 1 THEN 'E' WHEN DMST.DEPOSITER_STATUS = 2 THEN 'S' "+
                "WHEN DMST.DEPOSITER_STATUS = 3 THEN 'C'  WHEN DMST.DEPOSITER_STATUS = 4 THEN 'I' "+
                "WHEN DMST.DEPOSITER_STATUS = 5 THEN 'D' ELSE '' END DEPOSITER_STATUS, "+
                "DMST.BROKER_CODE "+
                "FROM D_FD_INT_CALC_DETAIL INTCALDTL,D_FD_DEPOSIT_MASTER DMST,D_FD_SCHEME_MASTER SMST "+ //D_FD_INT_CALC_DETAIL INTCALHDR,
                "WHERE DMST.RECEIPT_NO = INTCALDTL.RECEIPT_NO "+
                "AND DMST.REJECTED = 0 "+
                "AND DMST.SCHEME_ID = SMST.SCHEME_ID AND SMST.SCHEME_TYPE = '3' "+
                "AND INTCALDTL.COMPANY_ID = '"+ EITLERPGLOBAL.gCompanyID +"' "+
                "AND INTCALDTL.WARRANT_NO <> '0000000' "+
                "AND INTCALDTL.WARRANT_DATE  >= CONCAT('"+ txtYear.getText().trim() + "','-','"+ nMonth +"-01') "+
                "AND INTCALDTL.WARRANT_DATE  <=LAST_DAY(CONCAT('"+ txtYear.getText().trim() + "','-','"+ nMonth +"-01')) "+
                "ORDER BY INTCALDTL.WARRANT_NO";
                
                
                ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
                rsTmp.first();
                
                
                int Counter = 0;
                
                if(rsTmp.getRow()>0) {
                    while(!rsTmp.isAfterLast()) {
                        Counter ++;
                        String PartyCode = UtilFunctions.getString(rsTmp,"PARTY_CODE","");
                        String ReceiptNo = UtilFunctions.getString(rsTmp,"RECEIPT_NO","");
                        //fd prematurity activity start
                        String sql="SELECT SUM(B.INTEREST_AMOUNT) FROM D_FD_INT_CALC_HEADER A, D_FD_INT_CALC_DETAIL B " +
                        "WHERE A.DOC_NO=B.DOC_NO AND B.RECEIPT_NO='"+ReceiptNo+"' AND B.PARTY_CODE='"+PartyCode+"' AND B.DOC_NO='000102'";
                        double LastProvisionAmount=data.getDoubleValueFromDB(sql,FinanceGlobal.FinURL);
                        //fd prematurity activity end
                        String SQL = "SELECT SUM(B.INTEREST_AMOUNT) FROM D_FD_INT_CALC_HEADER A, D_FD_INT_CALC_DETAIL B " +
                        "WHERE A.DOC_NO=B.DOC_NO AND B.RECEIPT_NO='"+ReceiptNo+"' AND B.PARTY_CODE='"+PartyCode+"' AND A.TDS_ONLY=0 ";
                        double interestAmount = data.getDoubleValueFromDB(SQL,FinanceGlobal.FinURL);
                        SQL = "SELECT SUM(B.TDS_AMOUNT) FROM D_FD_INT_CALC_HEADER A, D_FD_INT_CALC_DETAIL B " +
                        "WHERE A.DOC_NO=B.DOC_NO AND B.RECEIPT_NO='"+ReceiptNo+"' AND B.PARTY_CODE='"+PartyCode+"' ";
                        double TDSAmount = data.getDoubleValueFromDB(SQL,FinanceGlobal.FinURL);
                        SQL = "SELECT SUM(B.NET_INTEREST) FROM D_FD_INT_CALC_HEADER A, D_FD_INT_CALC_DETAIL B " +
                        "WHERE A.DOC_NO=B.DOC_NO AND B.RECEIPT_NO='"+ReceiptNo+"' AND B.PARTY_CODE='"+PartyCode+"' AND A.TDS_ONLY=0 ";
                        double NetAmount = EITLERPGLOBAL.round(interestAmount - TDSAmount+LastProvisionAmount, 2);
                        //double NetAmount = data.getDoubleValueFromDB(SQL,FinanceGlobal.FinURL);
                        double Amount = UtilFunctions.getDouble(rsTmp,"AMOUNT",0);
                        objRow=objReportData.newRow();
                        
                        objRow.setValue("SR_NO",Integer.toString(Counter));
                        objRow.setValue("WARRANT_NO",UtilFunctions.getString(rsTmp,"WARRANT_NO",""));
                        objRow.setValue("LEGACY_WARRANT_NO",UtilFunctions.getString(rsTmp,"LEGACY_WARRANT_NO",""));
                        objRow.setValue("BROKER_CODE",UtilFunctions.getString(rsTmp,"BROKER_CODE",""));
                        objRow.setValue("DEPOSIT_SCHEME",UtilFunctions.getString(rsTmp,"DEPOSIT_SCHEME",""));
                        objRow.setValue("RECEIPT_NO",UtilFunctions.getString(rsTmp,"RECEIPT_NO",""));
                        objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsTmp,"LEGACY_NO",""));
                        objRow.setValue("STATUS",UtilFunctions.getString(rsTmp,"DEPOSITER_STATUS",""));
                        objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsTmp,"PARTY_CODE",""));
                        objRow.setValue("DEPOSITORS_NAME",UtilFunctions.getString(rsTmp,"APPLICANT_NAME",""));
                        objRow.setValue("RECEIPT_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"RECEIPT_DATE","0000-00-00")));
                        objRow.setValue("DUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"MATURITY_DATE","0000-00-00")));
                        objRow.setValue("AMOUNT",Double.toString(UtilFunctions.getDouble(rsTmp,"AMOUNT",0)));
                        
                        objRow.setValue("INTEREST_AMOUNT",Double.toString(interestAmount+LastProvisionAmount));
                        objRow.setValue("MATURITY_AMOUNT",Double.toString(interestAmount + Amount+LastProvisionAmount));
                        objRow.setValue("TAX_AMOUNT",Double.toString(TDSAmount));
                        objRow.setValue("NET_AMOUNT",Double.toString(NetAmount));
                        objRow.setValue("TO_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"TO_DATE","0000-00-00")));
                        objRow.setValue("FROM_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"FROM_DATE","0000-00-00")));
                        
                        
                        objReportData.AddRow(objRow);
                        
                        rsTmp.next();
                    }
                }
                
                int Comp_ID = EITLERPGLOBAL.gCompanyID;
                String month_year = cmbMonth.getSelectedItem() + " " + txtYear.getText().trim();
                
                HashMap Parameters=new HashMap();
                Parameters.put("MONTH_YEAR",month_year);
                Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
                
                objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptInterestStatementforMaturityCD.rpt",Parameters,objReportData);
            }
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    private void GenerateCombo() {
        
        //--- Generate Type Combo ------//
        ComboData aData=new ComboData();
        
        cmbMonthModel=new EITLComboModel();
        cmbMonth.removeAllItems();
        cmbMonth.setModel(cmbMonthModel);
        
        aData=new ComboData();
        aData.Code=0;
        aData.Text="Select Month";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=1;
        aData.Text="January";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=2;
        aData.Text="February";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=3;
        aData.Text="March";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=4;
        aData.Text="April";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=5;
        aData.Text="May";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=6;
        aData.Text="June";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=7;
        aData.Text="July";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=8;
        aData.Text="August";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=9;
        aData.Text="September";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=10;
        aData.Text="October";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=11;
        aData.Text="November";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=12;
        aData.Text="December";
        cmbMonthModel.addElement(aData);
        
        
        
        cmbReceiptTypeModel=new EITLComboModel();
        cmbReceiptType.removeAllItems();
        cmbReceiptType.setModel(cmbReceiptTypeModel);
        
        aData=new ComboData();
        aData.Code=1;
        aData.Text="FD";
        cmbReceiptTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=2;
        aData.Text="LD";
        cmbReceiptTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=3;
        aData.Text="CD";
        cmbReceiptTypeModel.addElement(aData);
        
        
        cmbReportTypeModel=new EITLComboModel();
        //cmbReportType.removeAllItems();
        //  cmbReportType.setModel(cmbReportTypeModel);
        
        cmbConditionModel=new EITLComboModel();
        cmbCondition.removeAllItems();
        cmbCondition.setModel(cmbConditionModel);
        
        aData=new ComboData();
        aData.Code=0;
        aData.Text="Select Condition";
        cmbConditionModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=1;
        aData.Text="Effective Date less then";
        cmbConditionModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=2;
        aData.Text="Effective Date between";
        cmbConditionModel.addElement(aData);
    }
    
    private void GenerateSummary() {
        try {
            int ReceiptType = cmbReceiptType.getSelectedIndex() + 1;
            int nMonth = cmbMonth.getSelectedIndex() ;
            
            if(ReceiptType ==3) {
                int yyyy = Integer.parseInt(txtYear.getText().trim());
                int fromyyyy=0;
                int toyyyy=0;
                if(nMonth == 1 || nMonth == 2 || nMonth == 3) {
                    fromyyyy=yyyy-1;
                    toyyyy=yyyy;
                }
                if(nMonth == 4 || nMonth == 5 || nMonth == 6 || nMonth == 7 || nMonth == 8 || nMonth == 9 || nMonth == 10 || nMonth == 11 || nMonth == 12 ) {
                    fromyyyy=yyyy;
                    toyyyy=yyyy+1;
                }
                
                String strSQL = "";
                
                
                TReportWriter.SimpleDataProvider.TRow objRow;
                TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
                
                objReportData.AddColumn("SR_NO");
                objReportData.AddColumn("RECEIPT_NO");
                objReportData.AddColumn("PARTY_CODE");
                objReportData.AddColumn("DEPOSITORS_NAME");
                objReportData.AddColumn("PRINCIPLE_AMOUNT");
                objReportData.AddColumn("CUMULATIVE_AMOUNT");
                objReportData.AddColumn("PERIOD");
                objReportData.AddColumn("INTEREST_DATE");
                objReportData.AddColumn("INTEREST_AMOUNT");
                objReportData.AddColumn("INT_CUM");
                objReportData.AddColumn("TAX");
                objReportData.AddColumn("UP_TAX");
                objReportData.AddColumn("RECEIPT_DATE");
                
                //objReportData.AddColumn("DUE_DATE");
                //objReportData.AddColumn("RECEIPT_DATE");
                
                
                TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
                objOpeningRow.setValue("SR_NO","");
                objOpeningRow.setValue("RECEIPT_NO","");
                objOpeningRow.setValue("PARTY_CODE","");
                objOpeningRow.setValue("DEPOSITORS_NAME","");
                objOpeningRow.setValue("PRINCIPLE_AMOUNT","");
                objOpeningRow.setValue("CUMULATIVE_AMOUNT","");
                objOpeningRow.setValue("PERIOD","");
                objOpeningRow.setValue("INTEREST_DATE","0000-00-00");
                objOpeningRow.setValue("INTEREST_AMOUNT","");
                objOpeningRow.setValue("INT_CUM","");
                objOpeningRow.setValue("TAX","");
                objOpeningRow.setValue("UP_TAX","");
                objOpeningRow.setValue("RECEIPT_DATE","0000-00-00");
                
                
                strSQL = "SELECT DMST.RECEIPT_NO,DMST.PARTY_CODE,DMST.APPLICANT_NAME, "+
                "DMST.AMOUNT,(DMST.AMOUNT+INTCALDTL.INTEREST_AMOUNT)-INTCALDTL.NET_INTEREST AS CUM_AMOUNT,DMST.DEPOSIT_PERIOD,DMST.INT_CALC_DATE, "+
                "INTCALDTL.NET_INTEREST,INTCALDTL.INTEREST_AMOUNT,INTCALDTL.TDS_AMOUNT, "+
                "DMST.RECEIPT_DATE "+
                "FROM D_FD_INT_CALC_DETAIL INTCALDTL,D_FD_DEPOSIT_MASTER DMST,D_FD_SCHEME_MASTER SMST "+
                "WHERE DMST.RECEIPT_NO = INTCALDTL.RECEIPT_NO "+
                "AND DMST.SCHEME_ID = SMST.SCHEME_ID "+
                "AND DMST.REJECTED = 0 "+
                "AND SMST.SCHEME_TYPE = '3' "+
                "AND INTCALDTL.COMPANY_ID = '"+ EITLERPGLOBAL.gCompanyID +"' "+
                "AND INTCALDTL.WARRANT_NO <> '0000000' "+
                //"AND DMST.MATURITY_DATE  >= CONCAT('"+ txtYear.getText().trim() + "','-','"+ nMonth +"-01') "+
                //"AND DMST.MATURITY_DATE  <=CONCAT('" + toyyyy + "','-','03-01') "+
                "AND DMST.MATURITY_DATE  >= CONCAT('"+ txtYear.getText().trim() + "','-','"+ nMonth +"-01') "+
                "AND DMST.MATURITY_DATE  <=LAST_DAY(CONCAT('"+ txtYear.getText().trim() + "','-','"+ nMonth +"-01')) "+
                "ORDER BY DMST.RECEIPT_NO";
                
                
                ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
                rsTmp.first();
                
                int Counter = 0;
                
                if(rsTmp.getRow()>0) {
                    while(!rsTmp.isAfterLast()) {
                        Counter ++;
                        objRow=objReportData.newRow();
                        
                        objRow.setValue("SR_NO",Integer.toString(Counter));
                        objRow.setValue("RECEIPT_NO",UtilFunctions.getString(rsTmp,"RECEIPT_NO",""));
                        objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsTmp,"PARTY_CODE",""));
                        objRow.setValue("DEPOSITORS_NAME",UtilFunctions.getString(rsTmp,"APPLICANT_NAME",""));
                        objRow.setValue("PRINCIPLE_AMOUNT",UtilFunctions.getString(rsTmp,"AMOUNT",""));
                        objRow.setValue("CUMULATIVE_AMOUNT",UtilFunctions.getString(rsTmp,"CUM_AMOUNT",""));
                        objRow.setValue("PERIOD",UtilFunctions.getString(rsTmp,"DEPOSIT_PERIOD",""));
                        objRow.setValue("INTEREST_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"INT_CALC_DATE","0000-00-00")));
                        objRow.setValue("INTEREST_AMOUNT",UtilFunctions.getString(rsTmp,"NET_INTEREST",""));
                        objRow.setValue("INT_CUM",UtilFunctions.getString(rsTmp,"INTEREST_AMOUNT",""));
                        objRow.setValue("TAX",UtilFunctions.getString(rsTmp,"TDS_AMOUNT",""));
                        
                        //up_tax calculation
                        String up_tax = data.getStringValueFromDB("SELECT SUM(TDS_AMOUNT) FROM D_FD_INT_CALC_DETAIL WHERE RECEIPT_NO='" + UtilFunctions.getString(rsTmp,"RECEIPT_NO","") + "' GROUP BY RECEIPT_NO",FinanceGlobal.FinURL);
                        
                        objRow.setValue("UP_TAX",up_tax);
                        objRow.setValue("RECEIPT_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"RECEIPT_DATE","0000-00-00")));
                        
                        objReportData.AddRow(objRow);
                        
                        rsTmp.next();
                    }
                }
                
                int Comp_ID = EITLERPGLOBAL.gCompanyID;
                String fromyear = "APR "+ fromyyyy;
                String toyear = "MAR "+ toyyyy;
                String Scheme_type="";
                
                HashMap Parameters=new HashMap();
                //Parameters.put("COMPANY_ID",Integer.toString(Comp_ID));
                Parameters.put("FROM_YEAR",fromyear);
                Parameters.put("TO_YEAR",toyear);
                Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
                
                objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptInterestStatementforCumulativePeriod.rpt",Parameters,objReportData);
                
                
                
            }
            else {
                
            }
        }
        catch(Exception e) {
            
        }
    }
    private boolean Validate() {
        //Form level validations
        
        if(txtYear.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter Year");
            return false;
        } else if(txtYear.getText().trim().length() != 4 ) {
            JOptionPane.showMessageDialog(null,"Invalid Year in YYYY format.");
            return false;
        }
        
        if(cmbMonth.getSelectedIndex()==0 ) {
            JOptionPane.showMessageDialog(this,"Please select Month & Condition...");
            return false;
        }
        
        if(cmbCondition.isEnabled()) {
            if(cmbCondition.getSelectedIndex()==0) {
                JOptionPane.showMessageDialog(this,"Please select Month & Condition...");
                return false;
            }
            
            if(cmbCondition.getSelectedIndex()==1) {
                if(txtFromDate.getText().trim().equals("")) {
                    JOptionPane.showMessageDialog(this,"Please insert effective date less then...");
                    return false;
                } else if(!EITLERPGLOBAL.isDate(txtFromDate.getText().trim())) {
                    JOptionPane.showMessageDialog(this,"Please insert proper effective date less then...");
                    return false;
                }
            }
            
            if(cmbCondition.getSelectedIndex()==2) {
                if(txtFromDate.getText().trim().equals("")) {
                    JOptionPane.showMessageDialog(this,"Please insert effective date from...");
                    return false;
                } else if(!EITLERPGLOBAL.isDate(txtFromDate.getText().trim())) {
                    JOptionPane.showMessageDialog(this,"Please insert proper effective date from...");
                    return false;
                }
                
                if(txtToDate.getText().trim().equals("")) {
                    JOptionPane.showMessageDialog(this,"Please insert effective date to...");
                    return false;
                } else if(!EITLERPGLOBAL.isDate(txtToDate.getText().trim())) {
                    JOptionPane.showMessageDialog(this,"Please insert proper effective date to...");
                    return false;
                }
            }
        }
        return true;
    }
    
    
}
