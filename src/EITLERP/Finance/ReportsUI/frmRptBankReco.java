/*
 * frmRptReco.java
 *
 * Created on March 31, 2010, 10:16 AM
 */

package EITLERP.Finance.ReportsUI;


import EITLERP.*;
import EITLERP.Finance.*;
import EITLERP.Utils.*;
import EITLERP.Utils.SimpleDataProvider.*;
import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.net.*;
import java.util.*;
import java.text.*;
import TReportWriter.*;
/*
 *  @author prathmesh shah
 *
 */
public class frmRptBankReco extends javax.swing.JApplet {
    
    private EITLComboModel cmbReceiptTypeModel;
    private EITLComboModel cmbReportTypeModel;
    private EITLComboModel cmbMonthModel;
    private EITLComboModel cmbConditionModel;
    private TReportEngine objEngine=new TReportEngine();
    private TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
    private Character mychar = new Character('0');
    
    /** Initializes the applet frmRptGRNInfo */
    public void init() {
        setSize(300,320);
        initComponents();
        selectionPanel.setVisible(false);
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        bgSelection = new javax.swing.ButtonGroup();
        bg1234 = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        lblAsOnDate = new javax.swing.JLabel();
        lblBookCode = new javax.swing.JLabel();
        txtAsOnDate = new javax.swing.JTextField();
        cmdPreview = new javax.swing.JButton();
        lblBookName = new javax.swing.JLabel();
        txtBookCode = new javax.swing.JTextField();
        opgIandP = new javax.swing.JRadioButton();
        opgI = new javax.swing.JRadioButton();
        cmdSummary = new javax.swing.JButton();
        selectionPanel = new javax.swing.JPanel();
        opg1 = new javax.swing.JRadioButton();
        opg4 = new javax.swing.JRadioButton();
        opg3 = new javax.swing.JRadioButton();
        opg2 = new javax.swing.JRadioButton();

        getContentPane().setLayout(null);

        jPanel3.setLayout(null);

        jPanel3.setBackground(new java.awt.Color(0, 153, 204));
        jPanel3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel6.setText(" BANK RECONCILIZATION");
        jPanel3.add(jLabel6);
        jLabel6.setBounds(9, 8, 200, 14);

        getContentPane().add(jPanel3);
        jPanel3.setBounds(0, 2, 325, 30);

        lblAsOnDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAsOnDate.setText("As On Date :");
        getContentPane().add(lblAsOnDate);
        lblAsOnDate.setBounds(5, 42, 85, 15);

        lblBookCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBookCode.setText("Book Code :");
        getContentPane().add(lblBookCode);
        lblBookCode.setBounds(5, 67, 85, 15);

        txtAsOnDate.setColumns(10);
        getContentPane().add(txtAsOnDate);
        txtAsOnDate.setBounds(95, 40, 110, 20);

        cmdPreview.setText("Preview Report");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        getContentPane().add(cmdPreview);
        cmdPreview.setBounds(10, 240, 130, 25);

        lblBookName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblBookName.setText("...");
        getContentPane().add(lblBookName);
        lblBookName.setBounds(10, 90, 270, 15);

        txtBookCode.setColumns(10);
        txtBookCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBookCodeFocusLost(evt);
            }
        });
        txtBookCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBookCodeKeyPressed(evt);
            }
        });

        getContentPane().add(txtBookCode);
        txtBookCode.setBounds(95, 65, 110, 20);

        opgIandP.setSelected(true);
        opgIandP.setText(" Issued & Presented");
        bgSelection.add(opgIandP);
        getContentPane().add(opgIandP);
        opgIandP.setBounds(20, 110, 200, 15);

        opgI.setText(" Issued but not presented");
        bgSelection.add(opgI);
        opgI.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                opgIItemStateChanged(evt);
            }
        });

        getContentPane().add(opgI);
        opgI.setBounds(20, 130, 200, 15);

        cmdSummary.setText("Summary");
        cmdSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSummaryActionPerformed(evt);
            }
        });

        getContentPane().add(cmdSummary);
        cmdSummary.setBounds(150, 240, 130, 25);

        selectionPanel.setLayout(null);

        selectionPanel.setBorder(new javax.swing.border.EtchedBorder());
        opg1.setSelected(true);
        opg1.setText(" Cheque Issued but not presented");
        bg1234.add(opg1);
        selectionPanel.add(opg1);
        opg1.setBounds(5, 5, 260, 15);

        opg4.setText(" Credited by bank but not accounted");
        bg1234.add(opg4);
        selectionPanel.add(opg4);
        opg4.setBounds(5, 65, 260, 15);

        opg3.setText(" Debited by bank but not accounted");
        bg1234.add(opg3);
        selectionPanel.add(opg3);
        opg3.setBounds(5, 45, 260, 15);

        opg2.setText(" Cheque deposited but not presented");
        bg1234.add(opg2);
        selectionPanel.add(opg2);
        opg2.setBounds(5, 25, 260, 15);

        getContentPane().add(selectionPanel);
        selectionPanel.setBounds(5, 150, 270, 85);

    }//GEN-END:initComponents
    
    private void opgIItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_opgIItemStateChanged
        // TODO add your handling code here:
        if(opgI.isSelected()) {
            selectionPanel.setVisible(true);
        } else {
            selectionPanel.setVisible(false);
        }
        
    }//GEN-LAST:event_opgIItemStateChanged
    
    private void cmdSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSummaryActionPerformed
        // TODO add your handling code here:
        if (!Validate()) {
            return;
        }
        GenerateSummary();
    }//GEN-LAST:event_cmdSummaryActionPerformed
    
    private void txtBookCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBookCodeFocusLost
        // TODO add your handling code here:
        if(!txtBookCode.getText().trim().equals("")) {
            lblBookName.setText(clsBook.getBookName(EITLERPGLOBAL.gCompanyID, txtBookCode.getText().trim()));
        } else {
            lblBookName.setText("...");
        }
    }//GEN-LAST:event_txtBookCodeFocusLost
    
    private void txtBookCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBookCodeKeyPressed
        // TODO add your handling code here:
        try {
            if(evt.getKeyCode()==112) {
                LOV aList=new LOV();
                
                aList.SQL="SELECT BOOK_CODE,BOOK_NAME FROM D_FIN_BOOK_MASTER ORDER BY BOOK_NAME";
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=FinanceGlobal.FinURL;
                
                if(aList.ShowLOV()) {
                    txtBookCode.setText(aList.ReturnVal);
                    lblBookName.setText(clsBook.getBookName(EITLERPGLOBAL.gCompanyID, txtBookCode.getText()));
                }
            }
        } catch(Exception e) {
        }
    }//GEN-LAST:event_txtBookCodeKeyPressed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        if ( ! Validate()) {
            return;
        }
        if(opgIandP.isSelected()) {
            GenerateReportIandP();
        }
        
        if(opgI.isSelected()) {
            GenerateReportI();
        }
        
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bg1234;
    private javax.swing.ButtonGroup bgSelection;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdSummary;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblAsOnDate;
    private javax.swing.JLabel lblBookCode;
    private javax.swing.JLabel lblBookName;
    private javax.swing.JRadioButton opg1;
    private javax.swing.JRadioButton opg2;
    private javax.swing.JRadioButton opg3;
    private javax.swing.JRadioButton opg4;
    private javax.swing.JRadioButton opgI;
    private javax.swing.JRadioButton opgIandP;
    private javax.swing.JPanel selectionPanel;
    private javax.swing.JTextField txtAsOnDate;
    private javax.swing.JTextField txtBookCode;
    // End of variables declaration//GEN-END:variables
    
    private void GenerateReportIandP() {
        try {
            
            String strSQL = "";
            String Condition = "";
            String AsOnDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
            String BookCode = txtBookCode.getText().trim();
            String MainCode = clsBook.getBookMainCode(EITLERPGLOBAL.gCompanyID, BookCode);
            
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("SR_NO");
            objReportData.AddColumn("VOUCHER_NO");
            objReportData.AddColumn("VOUCHER_DATE");
            objReportData.AddColumn("LEGACY_NO");
            objReportData.AddColumn("LEGACY_DATE");
            objReportData.AddColumn("CHEQUE_NO");
            objReportData.AddColumn("CHEQUE_DATE");
            objReportData.AddColumn("MAIN_ACCOUNT_CODE");
            objReportData.AddColumn("SUB_ACCOUNT_CODE");
            objReportData.AddColumn("ACCOUNT_NAME");
            objReportData.AddColumn("REMARKS");
            objReportData.AddColumn("REALIZATION_DATE");
            objReportData.AddColumn("CR_AMOUNT");
            objReportData.AddColumn("DR_AMOUNT");
            objReportData.AddColumn("EFFECT");
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            
            objOpeningRow.setValue("SR_NO","");
            objOpeningRow.setValue("VOUCHER_NO","");
            objOpeningRow.setValue("VOUCHER_DATE","0000-00-00");
            objOpeningRow.setValue("LEGACY_NO","");
            objOpeningRow.setValue("LEGACY_DATE","0000-00-00");
            objOpeningRow.setValue("CHEQUE_NO","");
            objOpeningRow.setValue("CHEQUE_DATE","0000-00-00");
            objOpeningRow.setValue("MAIN_ACCOUNT_CODE","");
            objOpeningRow.setValue("SUB_ACCOUNT_CODE","");
            objOpeningRow.setValue("ACCOUNT_NAME","");
            objOpeningRow.setValue("REMARKS","");
            objOpeningRow.setValue("REALIZATION_DATE","0000-00-00");
            objOpeningRow.setValue("CR_AMOUNT","");
            objOpeningRow.setValue("DR_AMOUNT","");
            objOpeningRow.setValue("EFFECT","");
            
            String StartDate = EITLERPGLOBAL.getFinYearStartDate(AsOnDate);
            
            
            strSQL ="SELECT DISTINCT A.VOUCHER_NO FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B " +
            "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND A.VOUCHER_DATE>='"+StartDate+"' AND A.VOUCHER_DATE<='"+AsOnDate+"' " +
            "AND A.APPROVED=1 AND A.CANCELLED=0 AND B.IS_DEDUCTION <>1 AND B.MAIN_ACCOUNT_CODE='"+MainCode+"' " +
            "AND A.REALIZATION_DATE<>'' AND A.REALIZATION_DATE<>'0000-00-00' " +
            "AND A.REALIZATION_DATE>='"+StartDate+"' AND A.REALIZATION_DATE<='"+AsOnDate+"' ORDER BY A.VOUCHER_DATE";
            
            Condition = "ISSUED AND PRESENTED";
            
            
            ResultSet rsRecords=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsRecords.first();
            String VoucherNo;
            int Counter = 0;
            if(rsRecords.getRow()>0) {
                while(!rsRecords.isAfterLast()) {
                    VoucherNo = UtilFunctions.getString(rsRecords,"VOUCHER_NO", "");
                    strSQL ="SELECT VOUCHER_DATE, LEGACY_NO, LEGACY_DATE, CHEQUE_NO, CHEQUE_DATE, REALIZATION_DATE, REMARKS " +
                    "FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='"+VoucherNo+"' ";
                    
                    ResultSet rsVoucher=data.getResult(strSQL,FinanceGlobal.FinURL);
                    String VoucherDate = UtilFunctions.getString(rsVoucher,"VOUCHER_DATE","0000-00-00");
                    String LegacyNo = UtilFunctions.getString(rsVoucher,"LEGACY_NO", "");
                    String LegacyDate = UtilFunctions.getString(rsVoucher,"LEGACY_DATE","0000-00-00");
                    String ChequeNo = UtilFunctions.getString(rsVoucher,"CHEQUE_NO", "");
                    String ChequeDate = UtilFunctions.getString(rsVoucher,"CHEQUE_DATE","0000-00-00");
                    String RealizationDate = UtilFunctions.getString(rsVoucher,"REALIZATION_DATE","0000-00-00");
                    String Remarks = UtilFunctions.getString(rsVoucher,"REMARKS", "");
                    
                    strSQL = "SELECT MAIN_ACCOUNT_CODE, SUB_ACCOUNT_CODE, SUM(AMOUNT) AS AMOUNT,EFFECT " +
                    "FROM D_FIN_VOUCHER_DETAIL_EX WHERE VOUCHER_NO='"+VoucherNo+"' AND MAIN_ACCOUNT_CODE<>'"+MainCode+"' " +
                    "AND IS_DEDUCTION<>1 GROUP BY MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE ORDER BY MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE";
                    
                    rsVoucher=data.getResult(strSQL,FinanceGlobal.FinURL);
                    rsVoucher.first();
                    
                    while(!rsVoucher.isAfterLast()) {
                        Counter ++;
                        objRow=objReportData.newRow();
                        objRow.setValue("SR_NO",Integer.toString(Counter));
                        objRow.setValue("VOUCHER_NO",VoucherNo);
                        objRow.setValue("VOUCHER_DATE",EITLERPGLOBAL.formatDate(VoucherDate));
                        objRow.setValue("LEGACY_NO",LegacyNo);
                        objRow.setValue("LEGACY_DATE",EITLERPGLOBAL.formatDate(LegacyDate));
                        objRow.setValue("CHEQUE_NO",ChequeNo);
                        objRow.setValue("CHEQUE_DATE",EITLERPGLOBAL.formatDate(ChequeDate));
                        objRow.setValue("MAIN_ACCOUNT_CODE",UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE",""));
                        objRow.setValue("SUB_ACCOUNT_CODE",UtilFunctions.getString(rsVoucher,"SUB_ACCOUNT_CODE",""));
                        objRow.setValue("ACCOUNT_NAME",clsAccount.getAccountName(UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE",""),UtilFunctions.getString(rsVoucher,"SUB_ACCOUNT_CODE","")));
                        objRow.setValue("REMARKS",Remarks);
                        objRow.setValue("REALIZATION_DATE",EITLERPGLOBAL.formatDate(RealizationDate));
                        
                        if (UtilFunctions.getString(rsVoucher, "EFFECT","").equals("C")){
                            objRow.setValue("CR_AMOUNT",Double.toString(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0)));
                            objRow.setValue("DR_AMOUNT","");
                        } else {
                            objRow.setValue("CR_AMOUNT","");
                            objRow.setValue("DR_AMOUNT",Double.toString(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0)));
                        }
                        objRow.setValue("EFFECT",UtilFunctions.getString(rsVoucher, "EFFECT",""));
                        objReportData.AddRow(objRow);
                        rsVoucher.next();
                    }
                    rsRecords.next();
                }
            }
            HashMap Parameters = new HashMap();
            Parameters.put("BANK_NAME",BookCode+" - " + clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode));
            Parameters.put("CONDITION",Condition);
            Parameters.put("BANK_NAME",BookCode+" - " + clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode));
            Parameters.put("AS_ON_DATE",EITLERPGLOBAL.formatDate(AsOnDate));
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptBankReco.rpt",Parameters,objReportData);
            
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    private void GenerateReportI() {
        try {
            
            String strSQL = "";
            String Condition = "";
            String AsOnDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
            String BookCode = txtBookCode.getText().trim();
            String MainCode = clsBook.getBookMainCode(EITLERPGLOBAL.gCompanyID, BookCode);
            String Effect = "";
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("SR_NO");
            objReportData.AddColumn("VOUCHER_NO");
            objReportData.AddColumn("VOUCHER_DATE");
            objReportData.AddColumn("LEGACY_NO");
            objReportData.AddColumn("LEGACY_DATE");
            objReportData.AddColumn("CHEQUE_NO");
            objReportData.AddColumn("CHEQUE_DATE");
            objReportData.AddColumn("MAIN_ACCOUNT_CODE");
            objReportData.AddColumn("SUB_ACCOUNT_CODE");
            objReportData.AddColumn("ACCOUNT_NAME");
            objReportData.AddColumn("REMARKS");
            objReportData.AddColumn("REALIZATION_DATE");
            objReportData.AddColumn("CR_AMOUNT");
            objReportData.AddColumn("DR_AMOUNT");
            objReportData.AddColumn("EFFECT");
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            
            objOpeningRow.setValue("SR_NO","");
            objOpeningRow.setValue("VOUCHER_NO","");
            objOpeningRow.setValue("VOUCHER_DATE","0000-00-00");
            objOpeningRow.setValue("LEGACY_NO","");
            objOpeningRow.setValue("LEGACY_DATE","0000-00-00");
            objOpeningRow.setValue("CHEQUE_NO","");
            objOpeningRow.setValue("CHEQUE_DATE","0000-00-00");
            objOpeningRow.setValue("MAIN_ACCOUNT_CODE","");
            objOpeningRow.setValue("SUB_ACCOUNT_CODE","");
            objOpeningRow.setValue("ACCOUNT_NAME","");
            objOpeningRow.setValue("REMARKS","");
            objOpeningRow.setValue("REALIZATION_DATE","0000-00-00");
            objOpeningRow.setValue("CR_AMOUNT","");
            objOpeningRow.setValue("DR_AMOUNT","");
            objOpeningRow.setValue("EFFECT","");
            
            String StartDate = clsCalcInterest.addMonthToDate(AsOnDate, -12);
            //EITLERPGLOBAL.getFinYearStartDate(AsOnDate);
            
            strSQL ="SELECT DISTINCT A.VOUCHER_NO FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B " +
            "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND A.VOUCHER_DATE>='"+StartDate+"' AND A.VOUCHER_DATE<='"+AsOnDate+"' " +
            "AND A.APPROVED=1 AND A.CANCELLED=0 AND B.IS_DEDUCTION <>1  AND B.MAIN_ACCOUNT_CODE='"+MainCode+"' " +
            "AND (A.REALIZATION_DATE='' OR A.REALIZATION_DATE='0000-00-00' OR A.REALIZATION_DATE>'"+AsOnDate+"') ";
            
            if(opg1.isSelected()) {
                strSQL +="AND A.VOUCHER_TYPE IN ("+FinanceGlobal.TYPE_PAYMENT+","+FinanceGlobal.TYPE_PAYMENT_2+") ORDER BY A.VOUCHER_DATE ";
                Condition = "CHEQUE ISSUED BUT NOT PRESENTED";
            } else if(opg2.isSelected()) {
                strSQL +="AND A.VOUCHER_TYPE IN ("+FinanceGlobal.TYPE_RECEIPT+") ORDER BY A.VOUCHER_DATE ";
                Condition = "CHEQUE DEPOSITED BUT NOT PRESENTED";
            } else if(opg3.isSelected()) {
                strSQL ="SELECT SR_NO AS VOUCHER_NO FROM D_FIN_DUMMY_VOUCHER WHERE VOUCHER_DATE>='"+StartDate+"' " +
                "AND VOUCHER_DATE<= '"+AsOnDate+"' " +
                "AND MAIN_ACCOUNT_CODE='"+MainCode+"' AND EFFECT='D' " +
                "AND (ACCOUNT_DATE='' OR ACCOUNT_DATE='0000-00-00' OR ACCOUNT_DATE>'"+AsOnDate+"') " +
                "ORDER BY VOUCHER_DATE ";
                Effect="D";
                Condition = "DEBITED BY BANK BUT NOT ACCOUNTED";
            } else if(opg4.isSelected()) {
                
                strSQL ="SELECT SR_NO AS VOUCHER_NO,VOUCHER_DATE FROM D_FIN_DUMMY_VOUCHER WHERE VOUCHER_DATE>='"+StartDate+"' " +
                "AND VOUCHER_DATE<= '"+AsOnDate+"' " +
                "AND MAIN_ACCOUNT_CODE='"+MainCode+"' AND EFFECT='C' " +
                "AND (ACCOUNT_DATE='' OR ACCOUNT_DATE='0000-00-00' OR ACCOUNT_DATE>'"+AsOnDate+"') " + 
                "ORDER BY VOUCHER_DATE ";
                Effect="C";
                Condition = "CREDITED BY BANK BUT NOT ACCOUNTED";
            }
            
            ResultSet rsRecords=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsRecords.first();
            String VoucherNo;
            int Counter = 0;
            if(rsRecords.getRow()>0) {
                while(!rsRecords.isAfterLast()) {
                    VoucherNo = UtilFunctions.getString(rsRecords,"VOUCHER_NO", "");
                    
                    if(opg1.isSelected() || opg2.isSelected()) {
                        strSQL ="SELECT VOUCHER_DATE, LEGACY_NO, LEGACY_DATE, CHEQUE_NO, CHEQUE_DATE, REALIZATION_DATE, REMARKS " +
                        "FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='"+VoucherNo+"' ";
                    } else if(opg3.isSelected() || opg4.isSelected()) {
                        if(Character.isLetter(VoucherNo.charAt(0))) {
                            strSQL ="SELECT VOUCHER_DATE, LEGACY_NO, LEGACY_DATE, CHEQUE_NO, CHEQUE_DATE, ACCOUNT_DATE, REMARKS " +
                            "FROM D_FIN_VOUCHER_HEADER WHERE MAIN_ACCOUNT_CODE='"+MainCode+"' AND EFFECT='"+Effect+"' AND VOUCHER_NO='"+VoucherNo+"' ";
                        }
                        if(Character.isDigit(VoucherNo.charAt(0))) {
                            strSQL ="SELECT VOUCHER_DATE, '' AS LEGACY_NO, '' AS LEGACY_DATE, '' AS CHEQUE_NO, '' AS CHEQUE_DATE, ACCOUNT_DATE, REMARKS " +
                            "FROM D_FIN_DUMMY_VOUCHER WHERE MAIN_ACCOUNT_CODE='"+MainCode+"' AND EFFECT='"+Effect+"' AND SR_NO='"+VoucherNo+"' ";
                        }
                    }
                    
                    ResultSet rsVoucher=data.getResult(strSQL,FinanceGlobal.FinURL);
                    String VoucherDate = UtilFunctions.getString(rsVoucher,"VOUCHER_DATE","0000-00-00");
                    String LegacyNo = UtilFunctions.getString(rsVoucher,"LEGACY_NO", "");
                    String LegacyDate = UtilFunctions.getString(rsVoucher,"LEGACY_DATE","0000-00-00");
                    String ChequeNo = UtilFunctions.getString(rsVoucher,"CHEQUE_NO", "");
                    String ChequeDate = UtilFunctions.getString(rsVoucher,"CHEQUE_DATE","0000-00-00");
                    String RealizationDate = "";
                    if(opg1.isSelected() || opg2.isSelected()) {
                        RealizationDate = UtilFunctions.getString(rsVoucher,"REALIZATION_DATE","0000-00-00");
                    } else if(opg3.isSelected() || opg4.isSelected()) {
                        RealizationDate = UtilFunctions.getString(rsVoucher,"ACCOUNT_DATE","0000-00-00");
                    }
                    
                    String Remarks = UtilFunctions.getString(rsVoucher,"REMARKS", "");
                    
                    if(opg1.isSelected() || opg2.isSelected()) {
                        strSQL = "SELECT MAIN_ACCOUNT_CODE, SUB_ACCOUNT_CODE, SUM(AMOUNT) AS AMOUNT,EFFECT " +
                        "FROM D_FIN_VOUCHER_DETAIL_EX WHERE VOUCHER_NO='"+VoucherNo+"' AND MAIN_ACCOUNT_CODE<>'"+MainCode+"' " +
                        "AND IS_DEDUCTION<>1 GROUP BY MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE ORDER BY MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE";
                    } else if(opg3.isSelected() || opg4.isSelected()) {
                        if(Character.isLetter(VoucherNo.charAt(0))) {
                            strSQL = "SELECT MAIN_ACCOUNT_CODE, SUB_ACCOUNT_CODE, SUM(AMOUNT) AS AMOUNT,EFFECT " +
                            "FROM D_FIN_VOUCHER_DETAIL_EX WHERE VOUCHER_NO='"+VoucherNo+"' AND MAIN_ACCOUNT_CODE<>'"+MainCode+"' " +
                            "AND IS_DEDUCTION<>1 GROUP BY MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE ORDER BY MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE";
                        }
                        if(Character.isDigit(VoucherNo.charAt(0))) {
                            strSQL ="SELECT MAIN_ACCOUNT_CODE, '' AS SUB_ACCOUNT_CODE, AMOUNT ,EFFECT " +
                            "FROM D_FIN_DUMMY_VOUCHER WHERE MAIN_ACCOUNT_CODE='"+MainCode+"' AND EFFECT='"+Effect+"' AND SR_NO='"+VoucherNo+"' " +
                            "ORDER BY MAIN_ACCOUNT_CODE";
                        }
                    }
                    
                    rsVoucher=data.getResult(strSQL,FinanceGlobal.FinURL);
                    rsVoucher.first();
                    
                    while(!rsVoucher.isAfterLast()) {
                        Counter ++;
                        objRow=objReportData.newRow();
                        objRow.setValue("SR_NO",Integer.toString(Counter));
                        objRow.setValue("VOUCHER_NO",VoucherNo);
                        objRow.setValue("VOUCHER_DATE",EITLERPGLOBAL.formatDate(VoucherDate));
                        objRow.setValue("LEGACY_NO",LegacyNo);
                        objRow.setValue("LEGACY_DATE",EITLERPGLOBAL.formatDate(LegacyDate));
                        objRow.setValue("CHEQUE_NO",ChequeNo);
                        objRow.setValue("CHEQUE_DATE",EITLERPGLOBAL.formatDate(ChequeDate));
                        objRow.setValue("MAIN_ACCOUNT_CODE",UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE",""));
                        objRow.setValue("SUB_ACCOUNT_CODE",UtilFunctions.getString(rsVoucher,"SUB_ACCOUNT_CODE",""));
                        objRow.setValue("ACCOUNT_NAME",clsAccount.getAccountName(UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE",""),UtilFunctions.getString(rsVoucher,"SUB_ACCOUNT_CODE","")));
                        objRow.setValue("REMARKS",Remarks);
                        objRow.setValue("REALIZATION_DATE",EITLERPGLOBAL.formatDate(RealizationDate));
                        
                        if (UtilFunctions.getString(rsVoucher, "EFFECT","").equals("C")){
                            objRow.setValue("CR_AMOUNT",Double.toString(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0)));
                            objRow.setValue("DR_AMOUNT","");
                        } else {
                            objRow.setValue("CR_AMOUNT","");
                            objRow.setValue("DR_AMOUNT",Double.toString(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0)));
                        }
                        objRow.setValue("EFFECT",UtilFunctions.getString(rsVoucher, "EFFECT",""));
                        objReportData.AddRow(objRow);
                        rsVoucher.next();
                    }
                    rsRecords.next();
                }
            }
            HashMap Parameters = new HashMap();
            Parameters.put("BANK_NAME",BookCode+" - " + clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode));
            Parameters.put("CONDITION",Condition);
            Parameters.put("BANK_NAME",BookCode+" - " + clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode));
            Parameters.put("AS_ON_DATE",EITLERPGLOBAL.formatDate(AsOnDate));
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            if(objReportData.getRowCount() > 0) {
                objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptBankReco.rpt",Parameters,objReportData);
            } else {
                JOptionPane.showMessageDialog(this,"No Record Found...","Bank Reco.",JOptionPane.INFORMATION_MESSAGE);
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    private void GenerateSummary() {
        try {
            String strSQL = "";
            String Condition = "";
            String AsOnDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
            String BookCode = txtBookCode.getText().trim();
            String MainCode = clsBook.getBookMainCode(EITLERPGLOBAL.gCompanyID, BookCode);
            double Balance = 0,ClosingBalance = 0;
            String StartDate = clsCalcInterest.addMonthToDate(AsOnDate, -12);
            //EITLERPGLOBAL.getFinYearStartDate(AsOnDate);
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("NAME");
            objReportData.AddColumn("CR_AMOUNT");
            objReportData.AddColumn("DR_AMOUNT");
            objReportData.AddColumn("EFFECT");
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow = objReportData.newRow();
            objOpeningRow.setValue("NAME","");
            objOpeningRow.setValue("CR_AMOUNT","");
            objOpeningRow.setValue("DR_AMOUNT","");
            objOpeningRow.setValue("EFFECT","");
            
            // get Opening
            objRow = objReportData.newRow();
            objRow.setValue("NAME", "BALANCE AS PER BANK BOOK");
            Balance = clsAccount.getClosingBalance(MainCode, "", AsOnDate,true);
            if(Balance<0) {
                objRow.setValue("CR_AMOUNT",Double.toString(Math.abs(Balance)));
                objRow.setValue("DR_AMOUNT","0");
                objRow.setValue("EFFECT","C");
            } else {
                objRow.setValue("CR_AMOUNT","0");
                objRow.setValue("DR_AMOUNT",Double.toString(Balance));
                objRow.setValue("EFFECT","D");
            }
            objReportData.AddRow(objRow);
            // get Issued but not cleared
            strSQL = "SELECT SUM(B.AMOUNT) AS AMOUNT,B.EFFECT FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B " +
            "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND A.VOUCHER_DATE>='"+StartDate+"' AND A.VOUCHER_DATE<='"+AsOnDate+"' " +
            "AND A.APPROVED=1 AND A.CANCELLED=0 AND A.VOUCHER_TYPE IN(2,6,10)  AND B.IS_DEDUCTION <>1  " +
            "AND B.MAIN_ACCOUNT_CODE='"+MainCode+"' AND (A.REALIZATION_DATE='' OR A.REALIZATION_DATE='0000-00-00' OR A.REALIZATION_DATE>'"+AsOnDate+"') " +
            "GROUP BY B.MAIN_ACCOUNT_CODE,B.EFFECT ";
            
            ResultSet rsIssPre = data.getResult(strSQL,FinanceGlobal.FinURL);
            rsIssPre.first();
            if(rsIssPre.getRow()>0) {
                while (!rsIssPre.isAfterLast()){
                    objRow = objReportData.newRow();
                    
                    if(UtilFunctions.getString(rsIssPre,"EFFECT","").equals("C")) {
                        objRow.setValue("NAME", "CHEQUE ISSUED BUT NOT PRESENTED");
                        objRow.setValue("CR_AMOUNT","0");
                        objRow.setValue("DR_AMOUNT",Double.toString(UtilFunctions.getDouble(rsIssPre,"AMOUNT",0)));
                        objRow.setValue("EFFECT","C");
                    } else {
                        objRow.setValue("NAME", "CHEQUE DEPOSITED BUT NOT PRESENTED");
                        objRow.setValue("CR_AMOUNT",Double.toString(UtilFunctions.getDouble(rsIssPre,"AMOUNT",0)));
                        objRow.setValue("DR_AMOUNT","0");
                        objRow.setValue("EFFECT","D");
                    }
                    objReportData.AddRow(objRow);
                    rsIssPre.next();
                }
            }
            /*// get Issued and cleared
            strSQL = "SELECT SUM(B.AMOUNT) AS AMOUNT,B.EFFECT FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B " +
            "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND A.VOUCHER_DATE>='"+StartDate+"' AND A.VOUCHER_DATE<='"+AsOnDate+"' " +
            "AND A.APPROVED=1 AND A.CANCELLED=0 AND A.VOUCHER_TYPE IN(2,6,10)  AND B.IS_DEDUCTION <>1 " +
            "AND B.MAIN_ACCOUNT_CODE='"+MainCode+"' AND A.REALIZATION_DATE<>'' AND A.REALIZATION_DATE<>'0000-00-00' " +
            "AND A.REALIZATION_DATE>='"+StartDate+"' AND A.REALIZATION_DATE<='"+AsOnDate+"' " +
            "GROUP BY B.MAIN_ACCOUNT_CODE,B.EFFECT ";
             
            ResultSet rsIssClr = data.getResult(strSQL,FinanceGlobal.FinURL);
            rsIssClr.first();
            if (rsIssClr.getRow()>0){
                while (!rsIssClr.isAfterLast()){
                    objRow = objReportData.newRow();
                    objRow.setValue("NAME", "ISSUED AND CLEARED");
                    if(UtilFunctions.getString(rsIssClr,"EFFECT","").equals("C")) {
                        objRow.setValue("CR_AMOUNT",Double.toString(UtilFunctions.getDouble(rsIssClr,"AMOUNT",0)));
                        objRow.setValue("DR_AMOUNT","");
                        objRow.setValue("EFFECT","C");
                    } else {
                        objRow.setValue("CR_AMOUNT","");
                        objRow.setValue("DR_AMOUNT",Double.toString(UtilFunctions.getDouble(rsIssClr,"AMOUNT",0)));
                        objRow.setValue("EFFECT","D");
                    }
                    objReportData.AddRow(objRow);
                    rsIssClr.next();
                }
            }*/
                
            strSQL ="SELECT SUM(AMOUNT) AS AMOUNT, EFFECT FROM D_FIN_DUMMY_VOUCHER WHERE VOUCHER_DATE>='"+StartDate+"' " +
            "AND VOUCHER_DATE<='"+AsOnDate+"' " +
            "AND MAIN_ACCOUNT_CODE='"+MainCode+"' AND (ACCOUNT_DATE='' OR ACCOUNT_DATE='0000-00-00' OR ACCOUNT_DATE>'"+AsOnDate+"') " +
            "AND EFFECT='D' GROUP BY MAIN_ACCOUNT_CODE";
            ResultSet rsDIss = data.getResult(strSQL,FinanceGlobal.FinURL);
            rsDIss.first();
            if(rsDIss.getRow() > 0) {
                while (!rsDIss.isAfterLast()){
                    objRow = objReportData.newRow();
                    objRow.setValue("NAME", "DEBITED BY BANK BUT NOT ACCOUNTED");
                    objRow.setValue("CR_AMOUNT",Double.toString(UtilFunctions.getDouble(rsDIss,"AMOUNT",0)));
                    objRow.setValue("DR_AMOUNT","0");
                    objRow.setValue("EFFECT","D");
                    objReportData.AddRow(objRow);
                    rsDIss.next();
                }
            } else {
                objRow = objReportData.newRow();
                objRow.setValue("NAME", "DEBITED BY BANK BUT NOT ACCOUNTED");
                objRow.setValue("CR_AMOUNT","0");
                objRow.setValue("DR_AMOUNT","0");
                objRow.setValue("EFFECT","D");
                objReportData.AddRow(objRow);
            }
            
            
            /*strSQL ="SELECT SUM(AMOUNT) AS AMOUNT, EFFECT FROM D_FIN_DUMMY_VOUCHER WHERE VOUCHER_DATE>='"+StartDate+"' " +
            "AND VOUCHER_DATE<='"+AsOnDate+"' AND APPROVED=1 AND (CANCELLED_DATE='' OR CANCELLED_DATE='0000-00-00' OR CANCELLED_DATE>'"+AsOnDate+"') " +
            "AND MAIN_ACCOUNT_CODE='"+MainCode+"' AND (REALIZATION_DATE='' OR REALIZATION_DATE='0000-00-00' OR REALIZATION_DATE>'"+AsOnDate+"') " +
            "AND EFFECT='C' GROUP BY MAIN_ACCOUNT_CODE";
             
             
            strSQL ="SELECT * FROM " +
            "(SELECT SUM(AMOUNT) AS AMOUNT FROM D_FIN_DUMMY_VOUCHER WHERE VOUCHER_DATE>='"+StartDate+"' " +
            "AND APPROVED=1 AND VOUCHER_DATE>REALIZATION_DATE " +
            "AND (CANCELLED_DATE='' OR CANCELLED_DATE='0000-00-00' OR CANCELLED_DATE<'"+AsOnDate+"') " +
            "AND MAIN_ACCOUNT_CODE='"+MainCode+"' AND EFFECT='C' " +
            "UNION " +
            "SELECT SUM(B.AMOUNT) AS AMOUNT FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B " +
            "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND A.VOUCHER_DATE>'"+AsOnDate+"' " +
            "AND A.APPROVED=1 AND A.CANCELLED=0 AND B.IS_DEDUCTION <>1  AND B.MAIN_ACCOUNT_CODE='"+MainCode+"' " +
            "AND (A.REALIZATION_DATE='' OR A.REALIZATION_DATE='0000-00-00' OR A.REALIZATION_DATE<'"+AsOnDate+"') " +
            "AND A.VOUCHER_TYPE IN ("+FinanceGlobal.TYPE_RECEIPT+")) TEMP ORDER BY TEMP.VOUCHER_DATE "; */
            
            /*strSQL ="SELECT SUM(AMOUNT) AS AMOUNT FROM " +
            "(SELECT SUM(AMOUNT) AS AMOUNT FROM D_FIN_DUMMY_VOUCHER WHERE VOUCHER_DATE>='"+StartDate+"' " +
            "AND APPROVED=1 AND VOUCHER_DATE>REALIZATION_DATE " +
            "AND (CANCELLED_DATE='' OR CANCELLED_DATE='0000-00-00' OR CANCELLED_DATE<'"+AsOnDate+"') " +
            "AND MAIN_ACCOUNT_CODE='"+MainCode+"' AND EFFECT='C' " +
            "UNION " +
            "SELECT SUM(B.AMOUNT) AS AMOUNT FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B " +
            "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND A.VOUCHER_DATE>'"+AsOnDate+"' " +
            "AND A.APPROVED=1 AND A.CANCELLED=0 AND B.IS_DEDUCTION <>1  " +
            "AND B.MAIN_ACCOUNT_CODE='"+MainCode+"' AND A.VOUCHER_TYPE IN ("+FinanceGlobal.TYPE_RECEIPT+") " +
            "AND (A.REALIZATION_DATE='' OR A.REALIZATION_DATE='0000-00-00' OR A.REALIZATION_DATE<='"+AsOnDate+"') " +
            ") TEMP ";*/
            strSQL ="SELECT SUM(AMOUNT) AS AMOUNT, EFFECT FROM D_FIN_DUMMY_VOUCHER WHERE VOUCHER_DATE>='"+StartDate+"' " +
            "AND VOUCHER_DATE<='"+AsOnDate+"' " +
            "AND MAIN_ACCOUNT_CODE='"+MainCode+"' AND (ACCOUNT_DATE='' OR ACCOUNT_DATE='0000-00-00' OR ACCOUNT_DATE>'"+AsOnDate+"') " +
            "AND EFFECT='C' GROUP BY MAIN_ACCOUNT_CODE";
            
            ResultSet rsCIss = data.getResult(strSQL,FinanceGlobal.FinURL);
            rsCIss.first();
            
            if(rsCIss.getRow() > 0) {
                while (!rsCIss.isAfterLast()){
                    objRow = objReportData.newRow();
                    objRow.setValue("NAME", "CREDITED BY BANK BUT NOT ACCOUNTED");
                    objRow.setValue("CR_AMOUNT","0");
                    objRow.setValue("DR_AMOUNT",Double.toString(UtilFunctions.getDouble(rsCIss,"AMOUNT",0)));
                    objRow.setValue("EFFECT","C");
                    objReportData.AddRow(objRow);
                    rsCIss.next();
                }
            } else {
                objRow = objReportData.newRow();
                objRow.setValue("NAME", "CREDITED BY BANK BUT NOT ACCOUNTED");
                objRow.setValue("CR_AMOUNT","0");
                objRow.setValue("DR_AMOUNT","0");
                objRow.setValue("EFFECT","D");
                objReportData.AddRow(objRow);
            }
            
            HashMap Parameters = new HashMap();
            Parameters.put("BANK_NAME",BookCode+" - " + clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode));
            Parameters.put("AS_ON_DATE",EITLERPGLOBAL.formatDate(AsOnDate));
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptBankRecoSummary.rpt",Parameters,objReportData);
        } catch(Exception e) {
        }
    }
    
    private boolean Validate() {
        //Form level validations
        
        if(txtAsOnDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Please Enter As On Date.");
            return false;
        }
        
        if(!EITLERPGLOBAL.isDate(txtAsOnDate.getText().trim())) {
            JOptionPane.showMessageDialog(this,"Please Enter valid As On Date.");
            return false;
        }
        
        if(txtBookCode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Please Enter Book Code.");
            return false;
        }
        return true;
    }
    
    
}
