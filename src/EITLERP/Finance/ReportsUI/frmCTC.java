/*
 * frmChangePassword.java
 *
 * Created on July 3, 2004, 3:36 PM
 */
package EITLERP.Finance.ReportsUI;

import EITLERP.*;
import static EITLERP.FeltSales.common.JavaMail.SendMail;
import SDMLATTPAY.AdvanceSearch.ATTPAYLOV;
import SDMLATTPAY.Employee.clsMaster;
import java.awt.Color;
import java.awt.Component;
import java.io.File;
import java.sql.*;
import java.text.DecimalFormat;
import javax.swing.*;
import java.util.HashMap;
import java.util.Random;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
//import EITLERP.Sales.clsExcelExporter;

/*<APPLET CODE=frmChangePassword HEIGHT=200 WIDTH=430></APPLET>*/
/**
 *
 * @author Daxesh Prajapati
 */
public class frmCTC extends javax.swing.JApplet {

    private EITLTableModel DataModel = new EITLTableModel();
    private EITLComboModel FinYearModel = new EITLComboModel();
    
    private EITLComboModel modelDept = new EITLComboModel();

    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();

    //GenerateInvoiceParameterModificationCombo();
    /**
     * Initializes the applet frmChangePassword
     */
    public void init() {
        initComponents();
        setSize(1000, 740);
        GenerateDeptCombo();
        cmbDept.setVisible(false);

//        String otp = "";
//        while (true) {
//            try {
//                otp = new DecimalFormat("000000").format(new Random().nextInt(999999));
//                //System.out.println(otp);
//
//                String pBody = "", pSubject = "", recievers = "", pcc = "";
//                pSubject = "OTP for Login";
//                pBody = "OTP for Login is  " + otp;
//
//                recievers = data.getStringValueFromDB("SELECT EXTERNAL_EMAIL FROM DINESHMILLS.D_COM_USER_MASTER WHERE USER_ID='" + EITLERPGLOBAL.gUserID + "'");
//                pBody = pBody + "<br><br><br>**** This is an auto-generated email, please do not reply ****<br><br>";
//
//                SendMail(recievers, pBody, pSubject, pcc);
//            } catch (Exception e) {
//            }
//            String motp = JOptionPane.showInputDialog("Enter OTP");
//            if (motp.equalsIgnoreCase(otp)) {

                jLabel1.setForeground(Color.WHITE);
                txtMonth.setText("");
                txtYear.setText("");

                GenerateFinYearCombo();

                cmbMonth.setSelectedIndex(EITLERPGLOBAL.getCurrentMonth());
                cmbFinYear.setSelectedIndex(0);
                //txtMonth.setText(EITLERPGLOBAL.getCurrentMonth() + "");
                txtYear.setText(EITLERPGLOBAL.getCurrentYear() + "");
//                break;

//            } else {
//                JOptionPane.showMessageDialog(this, "Invalid OTP...");
//            }
//        }
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ExporttoExcelFileChooser = new javax.swing.JFileChooser();
        file1 = new javax.swing.JFileChooser();
        CoffRokadiBtnGrp = new javax.swing.ButtonGroup();
        LCBtnGrp = new javax.swing.ButtonGroup();
        GatePassBtnGrp = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        TabList = new javax.swing.JTabbedPane();
        Panel1 = new javax.swing.JPanel();
        Panel2 = new javax.swing.JPanel();
        Panel3 = new javax.swing.JPanel();
        Panel4 = new javax.swing.JPanel();
        Panel5 = new javax.swing.JPanel();
        Panel6 = new javax.swing.JPanel();
        Panel7 = new javax.swing.JPanel();
        Panel8 = new javax.swing.JPanel();
        Panel9 = new javax.swing.JPanel();
        Panel10 = new javax.swing.JPanel();
        Panel11 = new javax.swing.JPanel();
        Panel12 = new javax.swing.JPanel();
        Panel13 = new javax.swing.JPanel();
        Panel14 = new javax.swing.JPanel();
        Panel15 = new javax.swing.JPanel();
        Panel16 = new javax.swing.JPanel();
        Panel17 = new javax.swing.JPanel();
        Panel18 = new javax.swing.JPanel();
        Panel19 = new javax.swing.JPanel();
        Panel20 = new javax.swing.JPanel();
        Panel21 = new javax.swing.JPanel();
        Panel22 = new javax.swing.JPanel();
        Panel23 = new javax.swing.JPanel();
        jScrollPane25 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        btnETE = new javax.swing.JButton();
        btnView1 = new javax.swing.JButton();
        lblMonth = new javax.swing.JLabel();
        txtMonth = new javax.swing.JTextField();
        lblFinYear = new javax.swing.JLabel();
        txtYear = new javax.swing.JTextField();
        lblYear = new javax.swing.JLabel();
        cmbMonth = new javax.swing.JComboBox();
        cmbFinYear = new javax.swing.JComboBox();
        txtEmpCode = new javax.swing.JTextField();
        txtEmpName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cmbDept = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        txtDeptCode = new javax.swing.JTextField();
        txtDeptName = new javax.swing.JTextField();

        getContentPane().setLayout(null);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setText("CTC");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 2, 1020, 25);

        TabList.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabListStateChanged(evt);
            }
        });

        Panel1.setLayout(null);
        TabList.addTab("Worker Cummulative", Panel1);

        Panel2.setLayout(null);
        TabList.addTab("Worker Monthly", Panel2);

        Panel3.setLayout(null);
        TabList.addTab("Staff Cummulative", Panel3);

        Panel4.setLayout(null);
        TabList.addTab("Staff Monthly", Panel4);

        Panel5.setLayout(null);
        TabList.addTab("Retainer Cummulative", Panel5);

        Panel6.setLayout(null);
        TabList.addTab("Retainer Monthly", Panel6);

        Panel7.setLayout(null);
        TabList.addTab("KMS Contractor Cummulative", Panel7);

        Panel8.setLayout(null);
        TabList.addTab("KMS Contractor Monthly", Panel8);

        Panel9.setLayout(null);
        TabList.addTab("HR Smart Contractor Cummulative", Panel9);

        Panel10.setLayout(null);
        TabList.addTab("HR Smart Contractor Monthly", Panel10);

        Panel11.setLayout(null);
        TabList.addTab("HR Smart Theoritical", Panel11);

        Panel12.setLayout(null);
        TabList.addTab("KMS Theoritical", Panel12);

        Panel13.setLayout(null);
        TabList.addTab("Retainer Theoritical", Panel13);

        Panel14.setLayout(null);
        TabList.addTab("Staff Theoritical", Panel14);

        Panel15.setLayout(null);
        TabList.addTab("Worker Theoritical", Panel15);

        Panel16.setLayout(null);
        TabList.addTab("DeptWise Theoritical", Panel16);

        Panel17.setLayout(null);
        TabList.addTab("DeptWise Actual", Panel17);

        Panel18.setLayout(null);
        TabList.addTab("DeptWise Cummulative", Panel18);

        Panel19.setLayout(null);
        TabList.addTab("Ex Staff Theoritical", Panel19);

        Panel20.setLayout(null);
        TabList.addTab("Ex Retainer Theoritical", Panel20);

        Panel21.setLayout(null);
        TabList.addTab("Ex HR Smart Theoritical", Panel21);

        Panel22.setLayout(null);
        TabList.addTab("Ex KMS Theoritical", Panel22);

        Panel23.setLayout(null);
        TabList.addTab("Ex Worker Theoritical", Panel23);

        getContentPane().add(TabList);
        TabList.setBounds(0, 90, 1000, 90);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane25.setViewportView(Table);

        getContentPane().add(jScrollPane25);
        jScrollPane25.setBounds(10, 190, 980, 410);

        btnETE.setLabel("Export to Excel");
        btnETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnETEActionPerformed(evt);
            }
        });
        getContentPane().add(btnETE);
        btnETE.setBounds(830, 60, 150, 25);

        btnView1.setText("View");
        btnView1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnView1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnView1);
        btnView1.setBounds(830, 30, 100, 25);

        lblMonth.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMonth.setText("Month : ");
        getContentPane().add(lblMonth);
        lblMonth.setBounds(30, 30, 60, 20);

        txtMonth = new JTextFieldHint(new JTextField(),"Multiple Entry Seprated by comma(,) ");
        txtMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMonthActionPerformed(evt);
            }
        });
        getContentPane().add(txtMonth);
        txtMonth.setBounds(90, 30, 280, 20);

        lblFinYear.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFinYear.setText("Fin Year : ");
        getContentPane().add(lblFinYear);
        lblFinYear.setBounds(10, 50, 80, 20);

        txtYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtYearActionPerformed(evt);
            }
        });
        txtYear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtYearKeyPressed(evt);
            }
        });
        getContentPane().add(txtYear);
        txtYear.setBounds(90, 50, 70, 20);

        lblYear.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYear.setText(" Year : ");
        getContentPane().add(lblYear);
        lblYear.setBounds(30, 50, 60, 20);

        cmbMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        getContentPane().add(cmbMonth);
        cmbMonth.setBounds(90, 30, 100, 20);

        cmbFinYear.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(cmbFinYear);
        cmbFinYear.setBounds(90, 50, 130, 20);

        txtEmpCode = new JTextFieldHint(new JTextField(),"Press F!");
        txtEmpCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtEmpCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmpCodeFocusLost(evt);
            }
        });
        txtEmpCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEmpCodeKeyPressed(evt);
            }
        });
        getContentPane().add(txtEmpCode);
        txtEmpCode.setBounds(480, 30, 80, 20);

        txtEmpName.setEnabled(false);
        txtEmpName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtEmpNameFocusGained(evt);
            }
        });
        txtEmpName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEmpNameKeyPressed(evt);
            }
        });
        getContentPane().add(txtEmpName);
        txtEmpName.setBounds(560, 30, 210, 20);

        jLabel5.setText(" Department :");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(370, 50, 100, 20);

        cmbDept.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbDept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDeptActionPerformed(evt);
            }
        });
        getContentPane().add(cmbDept);
        cmbDept.setBounds(780, 50, 50, 20);

        jLabel6.setText("Emp Code :");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(390, 30, 80, 20);

        txtDeptCode = new JTextFieldHint(new JTextField(),"Press F!");
        txtDeptCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDeptCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDeptCodeFocusLost(evt);
            }
        });
        txtDeptCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDeptCodeKeyPressed(evt);
            }
        });
        getContentPane().add(txtDeptCode);
        txtDeptCode.setBounds(480, 50, 80, 20);

        txtDeptName.setEnabled(false);
        txtDeptName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDeptNameFocusGained(evt);
            }
        });
        txtDeptName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDeptNameKeyPressed(evt);
            }
        });
        getContentPane().add(txtDeptName);
        txtDeptName.setBounds(560, 50, 210, 20);
    }// </editor-fold>//GEN-END:initComponents


    private void btnETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnETEActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnETEActionPerformed

    private void TabListStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabListStateChanged
        // TODO add your handling code here:
        if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Worker Cummulative")
                || TabList.getTitleAt(TabList.getSelectedIndex()).equals("Staff Cummulative")
                || TabList.getTitleAt(TabList.getSelectedIndex()).equals("Retainer Cummulative")
                || TabList.getTitleAt(TabList.getSelectedIndex()).equals("KMS Contractor Cummulative")
                || TabList.getTitleAt(TabList.getSelectedIndex()).equals("HR Smart Contractor Cummulative")
                || TabList.getTitleAt(TabList.getSelectedIndex()).equals("DeptWise Cummulative")) {

            FormatGrid();
            lblMonth.setVisible(true);
            txtMonth.setVisible(true);
            cmbMonth.setVisible(false);
            txtYear.setVisible(false);
            lblYear.setVisible(false);
            cmbFinYear.setVisible(true);
            lblFinYear.setVisible(true);

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Worker Monthly")
                || TabList.getTitleAt(TabList.getSelectedIndex()).equals("Staff Monthly")
                || TabList.getTitleAt(TabList.getSelectedIndex()).equals("Retainer Monthly")
                || TabList.getTitleAt(TabList.getSelectedIndex()).equals("KMS Contractor Monthly")
                || TabList.getTitleAt(TabList.getSelectedIndex()).equals("HR Smart Contractor Monthly")
                || TabList.getTitleAt(TabList.getSelectedIndex()).equals("DeptWise Actual")) {

            FormatGrid();
            lblMonth.setVisible(true);
            txtMonth.setVisible(false);
            cmbMonth.setVisible(true);
            txtYear.setVisible(true);
            lblYear.setVisible(true);
            cmbFinYear.setVisible(false);
            lblFinYear.setVisible(false);

        } else {

            FormatGrid();
            lblMonth.setVisible(false);
            txtMonth.setVisible(false);
            cmbMonth.setVisible(false);
            txtYear.setVisible(false);
            lblYear.setVisible(false);
            cmbFinYear.setVisible(false);
            lblFinYear.setVisible(false);

        }
    }//GEN-LAST:event_TabListStateChanged

    private void txtMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMonthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMonthActionPerformed

    private void txtYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtYearActionPerformed

    private void txtYearKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtYearKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtYearKeyPressed

    private void btnView1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnView1ActionPerformed
        // TODO add your handling code here:
        if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Worker Cummulative")) {
            GenerateWC();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Staff Cummulative")) {
            GenerateSC();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Retainer Cummulative")) {
            GenerateRC();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("KMS Contractor Cummulative")) {
            GenerateKMSC();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("HR Smart Contractor Cummulative")) {
            GenerateHRSC();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Worker Monthly")) {
            GenerateWM();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Staff Monthly")) {
            GenerateSM();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Retainer Monthly")) {
            GenerateRM();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("KMS Contractor Monthly")) {
            GenerateKMSM();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("HR Smart Contractor Monthly")) {
            GenerateHRSM();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Worker Theoritical")) {
            GenerateWT();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Staff Theoritical")) {
            GenerateST();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Retainer Theoritical")) {
            GenerateRT();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("KMS Theoritical")) {
            GenerateKMST();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("HR Smart Theoritical")) {
            GenerateHRST();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("DeptWise Theoritical")) {
            GenerateDeptT();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("DeptWise Actual")) {
            GenerateDeptA();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("DeptWise Cummulative")) {
            GenerateDeptC();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Ex Staff Theoritical")) {
            GenerateExST();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Ex Retainer Theoritical")) {
            GenerateExRT();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Ex HR Smart Theoritical")) {
            GenerateExHRST();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Ex KMS Theoritical")) {
            GenerateExKMST();
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Ex Worker Theoritical")) {
            GenerateExWT();
        } 
        else {
            FormatGrid();
        }
    }//GEN-LAST:event_btnView1ActionPerformed

    private void txtEmpCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmpCodeFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmpCodeFocusGained

    private void txtEmpCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmpCodeFocusLost
        if (!txtEmpCode.getText().trim().equals("") && data.IsRecordExist("SELECT * FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpCode.getText().trim() + "' AND APPROVED=1 AND CANCELED=0")) {
            txtEmpName.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpCode.getText() + "'"));
        } else {
            if (!txtEmpCode.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Employee No doesn't exist/under approval.");
            }
            txtEmpCode.setText("");
            txtEmpName.setText("");
        }
    }//GEN-LAST:event_txtEmpCodeFocusLost

    private void txtEmpCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpCodeKeyPressed
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            ATTPAYLOV aList = new ATTPAYLOV();
            if (TabList.getTitleAt(TabList.getSelectedIndex()).startsWith("Ex")){
//                || TabList.getTitleAt(TabList.getSelectedIndex()).equals("Staff Cummulative")
//                || TabList.getTitleAt(TabList.getSelectedIndex()).equals("Retainer Cummulative")
//                || TabList.getTitleAt(TabList.getSelectedIndex()).equals("KMS Contractor Cummulative")
//                || TabList.getTitleAt(TabList.getSelectedIndex()).equals("HR Smart Contractor Cummulative")
//                || TabList.getTitleAt(TabList.getSelectedIndex()).equals("DeptWise Cummulative")) {
                //aList.SQL = "SELECT PAY_EMP_NO,EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE APPROVED=1 AND CANCELED=0 AND EMP_LEFT_DATE!='0000-00-00'";
                aList.SQL = "SELECT PAY_EMP_NO,EMP_NAME,Name FROM\n"
                        + "(SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST  WHERE APPROVED=1 AND CANCELED=0 AND EMP_LEFT_DATE!='0000-00-00') A\n"
                        + "LEFT JOIN\n"
                        + "(SELECT DPTID,Name FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) B\n"
                        + "ON A.EMP_DEPARTMENT=B.DPTID";
            }else{
                //aList.SQL = "SELECT PAY_EMP_NO,EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE APPROVED=1 AND CANCELED=0 AND EMP_LEFT_DATE='0000-00-00'";
                aList.SQL = "SELECT PAY_EMP_NO,EMP_NAME,Name FROM\n"
                        + "(SELECT PAY_EMP_NO,EMP_NAME,EMP_DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST WHERE APPROVED=1 AND CANCELED=0 AND EMP_LEFT_DATE='0000-00-00') A\n"
                        + "LEFT JOIN\n"
                        + "(SELECT DPTID,Name FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER ) B\n"
                        + "ON A.EMP_DEPARTMENT=B.DPTID";
            }

                
            
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtEmpCode.setText(aList.ReturnVal);
                txtEmpName.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpCode.getText() + "'"));
            }
        }
    }//GEN-LAST:event_txtEmpCodeKeyPressed

    private void txtEmpNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmpNameFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmpNameFocusGained

    private void txtEmpNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpNameKeyPressed
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            ATTPAYLOV aList = new ATTPAYLOV();
            aList.SQL = "SELECT PAY_EMP_NO,EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE APPROVED=1 AND CANCELED=0";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtEmpCode.setText(aList.ReturnVal);
                txtEmpName.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtEmpCode.getText() + "'"));
            }
        }
    }//GEN-LAST:event_txtEmpNameKeyPressed

    private void cmbDeptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDeptActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbDeptActionPerformed

    private void txtDeptCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDeptCodeFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDeptCodeFocusGained

    private void txtDeptCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDeptCodeFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDeptCodeFocusLost

    private void txtDeptCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDeptCodeKeyPressed
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            ATTPAYLOV aList = new ATTPAYLOV();
            aList.SQL="SELECT DPTID,Name FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER "
                    + "UNION ALL SELECT GROUP_CONCAT(DPTID),DEPT_HEAD_CTC FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER GROUP BY DEPT_HEAD_CTC";                
            
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtDeptCode.setText(aList.ReturnVal);
                if(aList.ReturnVal.contains(",")){
                    txtDeptName.setText(data.getStringValueFromDB("SELECT DEPT_HEAD_CTC FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER WHERE DPTID IN (" + txtDeptCode.getText() + ")"));
                }else{
                    txtDeptName.setText(data.getStringValueFromDB("SELECT Name FROM SDMLATTPAY.ATT_DEPARTMENT_MASTER WHERE DPTID=" + txtDeptCode.getText() + ""));
                }
                
            }
        }
    }//GEN-LAST:event_txtDeptCodeKeyPressed

    private void txtDeptNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDeptNameFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDeptNameFocusGained

    private void txtDeptNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDeptNameKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDeptNameKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup CoffRokadiBtnGrp;
    private javax.swing.JFileChooser ExporttoExcelFileChooser;
    private javax.swing.ButtonGroup GatePassBtnGrp;
    private javax.swing.ButtonGroup LCBtnGrp;
    private javax.swing.JPanel Panel1;
    private javax.swing.JPanel Panel10;
    private javax.swing.JPanel Panel11;
    private javax.swing.JPanel Panel12;
    private javax.swing.JPanel Panel13;
    private javax.swing.JPanel Panel14;
    private javax.swing.JPanel Panel15;
    private javax.swing.JPanel Panel16;
    private javax.swing.JPanel Panel17;
    private javax.swing.JPanel Panel18;
    private javax.swing.JPanel Panel19;
    private javax.swing.JPanel Panel2;
    private javax.swing.JPanel Panel20;
    private javax.swing.JPanel Panel21;
    private javax.swing.JPanel Panel22;
    private javax.swing.JPanel Panel23;
    private javax.swing.JPanel Panel3;
    private javax.swing.JPanel Panel4;
    private javax.swing.JPanel Panel5;
    private javax.swing.JPanel Panel6;
    private javax.swing.JPanel Panel7;
    private javax.swing.JPanel Panel8;
    private javax.swing.JPanel Panel9;
    private javax.swing.JTabbedPane TabList;
    private javax.swing.JTable Table;
    private javax.swing.JButton btnETE;
    private javax.swing.JButton btnView1;
    private javax.swing.JComboBox cmbDept;
    private javax.swing.JComboBox cmbFinYear;
    private javax.swing.JComboBox cmbMonth;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JLabel lblFinYear;
    private javax.swing.JLabel lblMonth;
    private javax.swing.JLabel lblYear;
    private javax.swing.JTextField txtDeptCode;
    private javax.swing.JTextField txtDeptName;
    private javax.swing.JTextField txtEmpCode;
    private javax.swing.JTextField txtEmpName;
    private javax.swing.JTextField txtMonth;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables

    private void GenerateFinYearCombo() {
        ResultSet rsTmp;
        Connection tmpConn;
        Statement tmpStmt;

        tmpConn = data.getCreatedConn();

        HashMap List = new HashMap();

        cmbFinYear.setModel(FinYearModel);
        FinYearModel.removeAllElements();  //Clearing previous contents

        ComboData aData = new ComboData();
        try {
            tmpStmt = tmpConn.createStatement();
            rsTmp = tmpStmt.executeQuery("SELECT DISTINCT FIN_YEAR FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC ORDER BY FIN_YEAR DESC");

            while (rsTmp.next()) {
                aData = new ComboData();
                aData.Text = rsTmp.getString("FIN_YEAR");
                aData.strCode = rsTmp.getString("FIN_YEAR");
                FinYearModel.addElement(aData);
            }
            rsTmp.close();
            tmpStmt.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGrid() {
        try {
            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            DataModel.ClearAllReadOnly();

            DataModel.TableReadOnly(true);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridWC() {
        try {
            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Fin Year\",'' AS \"Department\",'' AS \"    \","
                    + "'' AS \"Paid Days\",'' AS \"Present Days\",'' AS \"Basic\",'' AS \"DA\",'' AS \"Adhoc Pay\",'' AS \"Award HRA\", '' AS \"Wash. Alw.\","
                    + "'' AS \"Wash. Mth.\",'' AS \"Furnishing Amount\",'' AS \"Bonus Amount\",'' AS \"PH Amount\","
                    + "'' AS \"PF Contribution\",'' AS \"ESIC Contribution\",'' AS \"Gratuity Amount\",'' AS \"CTC Amount\","
                    + "'' AS \"RUNTIME\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
                DataModel.SetReadOnly(i);
            }
            DataModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateWC() {
        try {
            if (txtMonth.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Enter Month");
                txtMonth.setText("");
                return;
            }
            String cndtn="";
            String grp_cndtn="";
            if(!txtEmpCode.getText().trim().equals("")){
                String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
                cndtn+= " AND PAY_EMPID='"+txtEmpCode.getText().trim()+"' ";
            }
            if (!txtDeptCode.getText().trim().equals("")) {                
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }

            FormatGridWC(); //clear existing content of table
            ResultSet rsTmp;

//            String cndtn = "";
//            if (!txtMonth.getText().equals("")) {
//   String[] pMths = txtMonth.getText().split(",");
//   for (int i = 0; i < pMths.length; i++) {
//  if (i == 0) {
//      cndtn += " AND (PAY_MONTH = " + pMths[i] + " ";
//  } else {
//      cndtn += " OR PAY_MONTH = " + pMths[i] + " ";
//  }
//   }
//   cndtn += ") ";
//            }
            String strSQL = "";

            strSQL = "SELECT *,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME FROM "
                    + "( "
                    + "SELECT FIN_YEAR, PAY_DEPARTMENT, "
                    + "'TOTAL' AS PAY_DIVISION,ROUND(SUM(PAID_DAYS),2) AS PAID_DAYS,ROUND(SUM(PRESENT_DAYS),2) AS PRESENT_DAYS,ROUND(SUM(BASIC),2) AS BASIC,ROUND(SUM(DA),2) AS DA,ROUND(SUM(ADHOC_PAY),2) AS ADHOC_PAY,ROUND(SUM(AWARD_HRA),2) AS AWARD_HRA, "
                    + "ROUND(SUM(WASH_ALW),2) AS WASH_ALW,ROUND(SUM(WASH_MTH),2) AS WASH_MTH,ROUND(SUM(FURNISHING),2) AS FURNISHING,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PAID_H),2) AS PAID_H,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,"
                    + "ROUND(SUM(GRATUITY),2) AS GRATUITY,ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC_ACTUAL ,2 AS S FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,5) IN ('BRD30')  "+cndtn+grp_cndtn
                    + "AND FIN_YEAR = '" + cmbFinYear.getSelectedItem() + "' AND PAY_MONTH IN (" + txtMonth.getText() + ") AND TOTAL_CTC_ACTUAL>0 "
                    + "GROUP BY UPPER(PAY_DEPARTMENT) "
                    + "UNION ALL "
                    + "SELECT FIN_YEAR,'ZZ.GRAND TOTAL' AS  PAY_DEPARTMENT, "
                    + "'TOTAL' AS PAY_DIVISION,'TOTAL' AS PAID_DAYS,'TOTAL' AS PRESENT_DAYS,ROUND(SUM(BASIC),2) AS BASIC,ROUND(SUM(DA),2) AS DA,ROUND(SUM(ADHOC_PAY),2) AS ADHOC_PAY,ROUND(SUM(AWARD_HRA),2) AS AWARD_HRA, "
                    + "ROUND(SUM(WASH_ALW),2) AS WASH_ALW,ROUND(SUM(WASH_MTH),2) AS WASH_MTH,ROUND(SUM(FURNISHING),2) AS FURNISHING,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PAID_H),2) AS PAID_H,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,"
                    + "ROUND(SUM(GRATUITY),2) AS GRATUITY,ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC_ACTUAL ,3 AS S FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,5) IN ('BRD30') "+cndtn+grp_cndtn
                    + "AND FIN_YEAR = '" + cmbFinYear.getSelectedItem() + "' AND PAY_MONTH IN (" + txtMonth.getText() + ") AND TOTAL_CTC_ACTUAL>0 "
                    + ") AS M "
                    + "ORDER BY S,PAY_DEPARTMENT";

//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("FIN_YEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_DEPARTMENT");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_DIVISION");
                    p++;
                    rowData[p] = rsTmp.getString("PAID_DAYS");
                    p++;
                    rowData[p] = rsTmp.getString("PRESENT_DAYS");
                    p++;
                    rowData[p] = rsTmp.getString("BASIC");
                    p++;
                    rowData[p] = rsTmp.getString("DA");
                    p++;
                    rowData[p] = rsTmp.getString("ADHOC_PAY");
                    p++;
                    rowData[p] = rsTmp.getString("AWARD_HRA");
                    p++;
                    rowData[p] = rsTmp.getString("WASH_ALW");
                    p++;
                    rowData[p] = rsTmp.getString("WASH_MTH");
                    p++;
                    rowData[p] = rsTmp.getString("FURNISHING");
                    p++;
                    rowData[p] = rsTmp.getString("BONUS_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("PAID_H");
                    p++;
                    rowData[p] = rsTmp.getString("PF_EMPL_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("ESIC_EMP_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("GRATUITY");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_ACTUAL");
                    p++;
//  rowData[p] = rsTmp.getString("S");
//  p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridWM() {
        try {
            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Month\",'' AS \"Year\",'' AS \"Emp Code\","
                    + "'' AS \"Employee Name\",'' AS \"Category\",'' AS \"Department\",'' AS \"Grade\","
                    + "'' AS \"Paid Days\",'' AS \"Present Days\",'' AS \"Basic\",'' AS \"DA\",'' AS \"Adhoc Pay\",'' AS \"Award HRA\", '' AS \"Wash. Alw.\","
                    + "'' AS \"Wash. Mth.\",'' AS \"Furnishing Amount\",'' AS \"Bonus Amount\",'' AS \"PH Amount\","
                    + "'' AS \"PF Contribution\",'' AS \"ESIC Contribution\",'' AS \"Gratuity Amount\",'' AS \"CTC Amount\","
                    + "'' AS \"RUNTIME\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
                DataModel.SetReadOnly(i);
            }
            DataModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateWM() {
        try {
            if (cmbMonth.getSelectedItem().equals("Select")) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Select Month");
                cmbMonth.setSelectedIndex(0);
                return;
            }
            if (txtYear.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Enter Year");
                txtYear.setText("");
                return;
            }
            if (txtYear.getText().trim().length() != 4) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Enter Valid Year");
                txtYear.setText("");
                return;
            }
            if (!EITLERPGLOBAL.IsNumber(txtYear.getText().trim())) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Enter Valid Year");
                txtYear.setText("");
                return;
            }
            String cndtn="";
            String grp_cndtn="";
            if(!txtEmpCode.getText().trim().equals("")){
                String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
                cndtn+= " AND PAY_EMPCODE='"+txtEmpCode.getText().trim()+"' ";
            }
//            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
//                grp_cndtn += " AND SDML_DEPT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
//            }
            if (!txtDeptCode.getText().trim().equals("")) {
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }

            FormatGridWM(); //clear existing content of table
            ResultSet rsTmp;

//            String cndtn = "";
//            if (!txtMonth.getText().equals("")) {
//   String[] pMths = txtMonth.getText().split(",");
//   for (int i = 0; i < pMths.length; i++) {
//  if (i == 0) {
//      cndtn += " AND (PAY_MONTH = " + pMths[i] + " ";
//  } else {
//      cndtn += " OR PAY_MONTH = " + pMths[i] + " ";
//  }
//   }
//   cndtn += ") ";
//            }
            String strSQL = "";

            strSQL = "SELECT *,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME FROM "
                    + "( "
                    + "SELECT PAY_MONTH,PAY_YEAR,PAY_EMPCODE,MAS_EMP_NAME,PAY_CATEGORY,PAY_DEPARTMENT,PAY_DIVISION,PAID_DAYS,PRESENT_DAYS,BASIC,DA,ADHOC_PAY,AWARD_HRA, "
                    + "WASH_ALW,WASH_MTH,FURNISHING,BONUS_AMOUNT,PAID_H,PF_EMPL_AMOUNT,ESIC_EMP_AMOUNT,GRATUITY, "
                    + "TOTAL_CTC_ACTUAL,1 AS S FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,5) IN ('BRD30') "+cndtn+grp_cndtn+" AND PAY_YEAR =  " + txtYear.getText() + " AND PAY_MONTH= " + cmbMonth.getSelectedItem() + " AND TOTAL_CTC_ACTUAL>0 "
                    + "UNION ALL "
                    + "SELECT PAY_MONTH,PAY_YEAR,'TOTAL' AS PAY_EMPCODE,'TOTAL' AS MAS_EMP_NAME,'TOTAL' AS PAY_CATEGORY "
                    + ",CONCAT(PAY_DEPARTMENT, '  TOTAL') AS  PAY_DEPARTMENT, "
                    + "'TOTAL' AS PAY_DIVISION,'TOTAL' AS PAID_DAYS,'TOTAL' AS PRESENT_DAYS,ROUND(SUM(BASIC),2) AS BASIC,ROUND(SUM(DA),2) AS DA,ROUND(SUM(ADHOC_PAY),2) AS ADHOC_PAY,ROUND(SUM(AWARD_HRA),2) AS AWARD_HRA, "
                    + "ROUND(SUM(WASH_ALW),2) AS WASH_ALW,ROUND(SUM(WASH_MTH),2) AS WASH_MTH,ROUND(SUM(FURNISHING),2) AS FURNISHING,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PAID_H),2) AS PAID_H,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,"
                    + "ROUND(SUM(GRATUITY),2) AS GRATUITY,ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC_ACTUAL ,2 AS S FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,5) IN ('BRD30') "+cndtn+grp_cndtn+" AND PAY_YEAR =  " + txtYear.getText() + " AND PAY_MONTH= " + cmbMonth.getSelectedItem() + "  AND TOTAL_CTC_ACTUAL>0 "
                    + "GROUP BY PAY_DEPARTMENT "
                    + "UNION ALL "
                    + "SELECT PAY_MONTH,PAY_YEAR,'GRAND TOTAL' AS PAY_EMPCODE,'GRAND TOTAL' AS MAS_EMP_NAME,'GRAND TOTAL' AS PAY_CATEGORY,'ZZ.GRAND TOTAL' AS PAY_DEPARTMENT,'GRAND TOTAL' AS  PAY_DIVISION,'GRAND TOTAL' AS  PAID_DAYS,'GRAND TOTAL' AS  PRESENT_DAYS,ROUND(SUM(BASIC),2) AS BASIC,ROUND(SUM(DA),2) AS DA,ROUND(SUM(ADHOC_PAY),2) AS ADHOC_PAY,ROUND(SUM(AWARD_HRA),2) AS AWARD_HRA, "
                    + "ROUND(SUM(WASH_ALW),2) AS WASH_ALW,ROUND(SUM(WASH_MTH),2) AS WASH_MTH,ROUND(SUM(FURNISHING),2) AS FURNISHING,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PAID_H),2) AS PAID_H,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,"
                    + "ROUND(SUM(GRATUITY),2) AS GRATUITY,ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC_ACTUAL,3 AS S FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,5) IN ('BRD30') "+cndtn+grp_cndtn+" AND PAY_YEAR =  " + txtYear.getText() + " AND PAY_MONTH= " + cmbMonth.getSelectedItem() + "  AND TOTAL_CTC_ACTUAL>0 "
                    + ") AS M "
                    + "ORDER BY PAY_DEPARTMENT,S,PAY_EMPCODE";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PAY_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_YEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_EMPCODE");
                    p++;
                    rowData[p] = rsTmp.getString("MAS_EMP_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_CATEGORY");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_DEPARTMENT");
                    p++;                    
                    rowData[p] = rsTmp.getString("PAY_DIVISION");
                    p++;                    
                    rowData[p] = rsTmp.getString("PAID_DAYS");
                    p++;
                    rowData[p] = rsTmp.getString("PRESENT_DAYS");
                    p++;
                    rowData[p] = rsTmp.getString("BASIC");
                    p++;
                    rowData[p] = rsTmp.getString("DA");
                    p++;
                    rowData[p] = rsTmp.getString("ADHOC_PAY");
                    p++;
                    rowData[p] = rsTmp.getString("AWARD_HRA");
                    p++;
                    rowData[p] = rsTmp.getString("WASH_ALW");
                    p++;
                    rowData[p] = rsTmp.getString("WASH_MTH");
                    p++;
                    rowData[p] = rsTmp.getString("FURNISHING");
                    p++;
                    rowData[p] = rsTmp.getString("BONUS_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("PAID_H");
                    p++;
                    rowData[p] = rsTmp.getString("PF_EMPL_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("ESIC_EMP_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("GRATUITY");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_ACTUAL");
                    p++;
//  rowData[p] = rsTmp.getString("S");
//  p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridSC() {
        try {
            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Fin Year\",'' AS \"Department\",'' AS \"Grade\","
                    + "'' AS \"Paid Days\",'' AS \"Present Days\",'' AS \"Basic\",'' AS \"DA\",'' AS \"Personal Pay\",'' AS \"HRA\",'' AS \"Award HRA\","
                    + "'' AS \"Conveyance. Alw.\",'' AS \"Electricity Alw.\",'' AS \"Magazine Alw.\","
                    + "'' AS \"Performance Alw.\",'' AS \"Medical/Edu./Hotel Alw.\","
                    + "'' AS \"Bonus Amount\",'' AS \"PH Amount\",'' AS \"PF Contribution\",'' AS \"ESIC Contribution\","
                    + "'' AS \"Gratuity Amount\",'' AS \"Inflation Amount\",'' AS \"Super Annuation Amount\",'' AS \"CTC Amount\","
                    + "'' AS \"RUNTIME\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
                DataModel.SetReadOnly(i);
            }
            DataModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateSC() {
        try {
            if (txtMonth.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Enter Month");
                txtMonth.setText("");
                return;
            }
            String cndtn="";
            String grp_cndtn="";
            if(!txtEmpCode.getText().trim().equals("")){
                String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
                cndtn+= " AND PAY_EMPID='"+txtEmpCode.getText().trim()+"' ";
            }
            if (!txtDeptCode.getText().trim().equals("")) {                
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }

            FormatGridSC(); //clear existing content of table
            ResultSet rsTmp;

//            String cndtn = "";
//            if (!txtMonth.getText().equals("")) {
//   String[] pMths = txtMonth.getText().split(",");
//   for (int i = 0; i < pMths.length; i++) {
//  if (i == 0) {
//      cndtn += " AND (PAY_MONTH = " + pMths[i] + " ";
//  } else {
//      cndtn += " OR PAY_MONTH = " + pMths[i] + " ";
//  }
//   }
//   cndtn += ") ";
//            }
            String strSQL = "";

            strSQL = "SELECT *,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME FROM "
                    + "( "
                    + "SELECT FIN_YEAR, PAY_DEPARTMENT, "
                    + "'TOTAL' AS PAY_GRADE,ROUND(SUM(PAID_DAYS),2) AS PAID_DAYS,ROUND(SUM(PRESENT_DAYS),2) AS PRESENT_DAYS,ROUND(SUM(BASIC),2) AS BASIC,ROUND(SUM(DA),2) AS DA,ROUND(SUM(PERSONAL_PAY),2) AS PERSONAL_PAY,ROUND(SUM(HRA),2) AS HRA,ROUND(SUM(AWARD_HRA),2) AS AWARD_HRA, "
                    + "ROUND(SUM(CONVEYANCE),2) AS CONVEYANCE,ROUND(SUM(ELECTRICITY),2) AS ELECTRICITY,ROUND(SUM(MAGAZINE_ALW),2) AS MAGAZINE_ALW,ROUND(SUM(PERFORMANCE_ALW),2) AS PERFORMANCE_ALW,ROUND(SUM(MED_EDU_HOT_AMT),2) AS MED_EDU_HOT_AMT,ROUND(SUM(BONUS_AMOUNT),2) BONUS_AMOUNT,"
                    + "ROUND(SUM(PAID_H),2) AS PAID_H,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(GRATUITY),2) AS GRATUITY,ROUND(SUM(INFLATION),2) AS INFLATION,ROUND(SUM(SUPER_ANNUATION),2) AS SUPER_ANNUATION, "
                    + "ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC_ACTUAL,2 AS S  FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,5) IN ('BRD10','BRD20') "+cndtn+grp_cndtn
                    + "AND FIN_YEAR = '" + cmbFinYear.getSelectedItem() + "' AND PAY_MONTH IN (" + txtMonth.getText().trim() + ") AND TOTAL_CTC_ACTUAL>0 "
                    + "GROUP BY PAY_DEPARTMENT "
                    + "UNION ALL "
                    + "SELECT FIN_YEAR,'ZZ.GRAND TOTAL' AS  PAY_DEPARTMENT, "
                    + "'TOTAL' AS PAY_GRADE,'TOTAL' AS PAID_DAYS,'TOTAL' AS PRESENT_DAYS,ROUND(SUM(BASIC),2) AS BASIC,ROUND(SUM(DA),2) AS DA,ROUND(SUM(PERSONAL_PAY),2) AS PERSONAL_PAY,ROUND(SUM(HRA),2) AS HRA,ROUND(SUM(AWARD_HRA),2) AS AWARD_HRA, "
                    + "ROUND(SUM(CONVEYANCE),2) AS CONVEYANCE,ROUND(SUM(ELECTRICITY),2) AS ELECTRICITY,ROUND(SUM(MAGAZINE_ALW),2) AS MAGAZINE_ALW,ROUND(SUM(PERFORMANCE_ALW),2) AS PERFORMANCE_ALW,ROUND(SUM(MED_EDU_HOT_AMT),2) AS MED_EDU_HOT_AMT,ROUND(SUM(BONUS_AMOUNT),2) BONUS_AMOUNT,"
                    + "ROUND(SUM(PAID_H),2) AS PAID_H,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(GRATUITY),2) AS GRATUITY,ROUND(SUM(INFLATION),2) AS INFLATION,ROUND(SUM(SUPER_ANNUATION),2) AS SUPER_ANNUATION, "
                    + "ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC_ACTUAL,2 AS S  FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,5) IN ('BRD10','BRD20') "+cndtn+grp_cndtn
                    + "AND FIN_YEAR = '" + cmbFinYear.getSelectedItem() + "' AND PAY_MONTH IN (" + txtMonth.getText().trim() + ") AND TOTAL_CTC_ACTUAL>0 "
                    + ") AS M "
                    + "ORDER BY PAY_DEPARTMENT,S";

//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("FIN_YEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_DEPARTMENT");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_GRADE");
                    p++;
                    rowData[p] = rsTmp.getString("PAID_DAYS");
                    p++;
                    rowData[p] = rsTmp.getString("PRESENT_DAYS");
                    p++;
                    rowData[p] = rsTmp.getString("BASIC");
                    p++;
                    rowData[p] = rsTmp.getString("DA");
                    p++;
                    rowData[p] = rsTmp.getString("PERSONAL_PAY");
                    p++;
                    rowData[p] = rsTmp.getString("HRA");
                    p++;
                    rowData[p] = rsTmp.getString("AWARD_HRA");
                    p++;
                    rowData[p] = rsTmp.getString("CONVEYANCE");
                    p++;
                    rowData[p] = rsTmp.getString("ELECTRICITY");
                    p++;
                    rowData[p] = rsTmp.getString("MAGAZINE_ALW");
                    p++;
                    rowData[p] = rsTmp.getString("PERFORMANCE_ALW");
                    p++;
                    rowData[p] = rsTmp.getString("MED_EDU_HOT_AMT");
                    p++;
                    rowData[p] = rsTmp.getString("BONUS_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("PAID_H");
                    p++;
                    rowData[p] = rsTmp.getString("PF_EMPL_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("ESIC_EMP_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("GRATUITY");
                    p++;
                    rowData[p] = rsTmp.getString("INFLATION");
                    p++;
                    rowData[p] = rsTmp.getString("SUPER_ANNUATION");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_ACTUAL");
                    p++;
//  rowData[p] = rsTmp.getString("S");
//  p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridSM() {
        try {
            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Month\",'' AS \"Year\",'' AS \"Emp Code\","
                    + "'' AS \"Employee Name\",'' AS \"Category\",'' AS \"Department\",'' AS \"Designation\",'' AS \"Grade\","
                    + "'' AS \"Paid Days\",'' AS \"Present Days\",'' AS \"Basic\",'' AS \"DA\",'' AS \"Personal Pay\",'' AS \"HRA\",'' AS \"Award HRA\","
                    + "'' AS \"Conveyance. Alw.\",'' AS \"Electricity Alw.\",'' AS \"Magazine Alw.\","
                    + "'' AS \"Performance Alw.\",'' AS \"Medical/Edu./Hotel Alw.\","
                    + "'' AS \"Bonus Amount\",'' AS \"PH Amount\",'' AS \"PF Contribution\",'' AS \"ESIC Contribution\","
                    + "'' AS \"Gratuity Amount\",'' AS \"Inflation Amount\",'' AS \"Super Annuation Amount\",'' AS \"CTC Amount\","
                    + "'' AS \"RUNTIME\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
                DataModel.SetReadOnly(i);
            }
            DataModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateSM() {
        try {
            if (cmbMonth.getSelectedItem().equals("Select")) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Select Month");
                cmbMonth.setSelectedIndex(0);
                return;
            }
            if (txtYear.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Enter Year");
                txtYear.setText("");
                return;
            }
            if (txtYear.getText().trim().length() != 4) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Enter Valid Year");
                txtYear.setText("");
                return;
            }
            if (!EITLERPGLOBAL.IsNumber(txtYear.getText().trim())) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Enter Valid Year");
                txtYear.setText("");
                return;
            }
            String cndtn="";
            String grp_cndtn="";
            if(!txtEmpCode.getText().trim().equals("")){
                String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
                cndtn+= " AND PAY_EMPCODE='"+txtEmpCode.getText().trim()+"' ";
            }
//            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
//                grp_cndtn += " AND SDML_DEPT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
//            }
            if (!txtDeptCode.getText().trim().equals("")) {                
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }
            
            FormatGridSM(); //clear existing content of table
            ResultSet rsTmp;

//            String cndtn = "";
//            if (!txtMonth.getText().equals("")) {
//   String[] pMths = txtMonth.getText().split(",");
//   for (int i = 0; i < pMths.length; i++) {
//  if (i == 0) {
//      cndtn += " AND (PAY_MONTH = " + pMths[i] + " ";
//  } else {
//      cndtn += " OR PAY_MONTH = " + pMths[i] + " ";
//  }
//   }
//   cndtn += ") ";
//            }
            String strSQL = "";

            strSQL = "SELECT *,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME FROM "
                    + "( "
                    + "SELECT PAY_MONTH,PAY_YEAR,PAY_EMPCODE,MAS_EMP_NAME,PAY_CATEGORY,PAY_DEPARTMENT,PAY_DESIGNATION,COALESCE(PAY_GRADE,'') PAY_GRADE,PAID_DAYS,PRESENT_DAYS,BASIC,DA,PERSONAL_PAY,HRA,AWARD_HRA, "
                    + "CONVEYANCE,ELECTRICITY,MAGAZINE_ALW,PERFORMANCE_ALW,MED_EDU_HOT_AMT,BONUS_AMOUNT,PAID_H,PF_EMPL_AMOUNT,ESIC_EMP_AMOUNT,GRATUITY,INFLATION,SUPER_ANNUATION, "
                    + "TOTAL_CTC_ACTUAL,1 AS S  FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,5) IN ('BRD10','BRD20') "+cndtn+grp_cndtn 
                    + " AND PAY_YEAR = " + txtYear.getText() + " AND PAY_MONTH= " + cmbMonth.getSelectedItem() + " "
                    + "AND TOTAL_CTC_ACTUAL > 0 "
                    + "UNION ALL "
                    + "SELECT PAY_MONTH,PAY_YEAR,'TOTAL' AS PAY_EMPCODE,'TOTAL' AS MAS_EMP_NAME,'TOTAL' AS PAY_CATEGORY, "
                    + "CONCAT(PAY_DEPARTMENT, '  TOTAL') AS  PAY_DEPARTMENT, "
                    + "'TOTAL' AS PAY_DESIGNATION,'TOTAL' AS PAY_GRADE,'TOTAL' AS PAID_DAYS,'TOTAL' AS PRESENT_DAYS,ROUND(SUM(BASIC),2) AS BASIC,ROUND(SUM(DA),2) AS DA,ROUND(SUM(PERSONAL_PAY),2) AS PERSONAL_PAY,ROUND(SUM(HRA),2) AS HRA,ROUND(SUM(AWARD_HRA),2) AS AWARD_HRA, "
                    + "ROUND(SUM(CONVEYANCE),2) AS CONVEYANCE,ROUND(SUM(ELECTRICITY),2) AS ELECTRICITY,ROUND(SUM(MAGAZINE_ALW),2) AS MAGAZINE_ALW,ROUND(SUM(PERFORMANCE_ALW),2) AS PERFORMANCE_ALW,ROUND(SUM(MED_EDU_HOT_AMT),2) AS MED_EDU_HOT_AMT,ROUND(SUM(BONUS_AMOUNT),2) BONUS_AMOUNT,"
                    + "ROUND(SUM(PAID_H),2) AS PAID_H,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(GRATUITY),2) AS GRATUITY,ROUND(SUM(INFLATION),2) AS INFLATION,ROUND(SUM(SUPER_ANNUATION),2) AS SUPER_ANNUATION, "
                    + "ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC_ACTUAL,2 AS S  FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,5) IN ('BRD10','BRD20') "+cndtn+grp_cndtn
                    + " AND PAY_YEAR = " + txtYear.getText() + " AND PAY_MONTH= " + cmbMonth.getSelectedItem() + " "
                    + "AND TOTAL_CTC_ACTUAL > 0 "
                    + "GROUP BY PAY_DEPARTMENT "
                    + "UNION ALL "
                    + "SELECT PAY_MONTH,PAY_YEAR,'GRAND TOTAL' AS PAY_EMPCODE,'GRAND TOTAL' AS MAS_EMP_NAME,'GRAND TOTAL' AS PAY_CATEGORY,'ZZ.GRAND TOTAL' AS PAY_DEPARTMENT, "
                    + "'GRAND TOTAL' AS PAY_DESIGNATION,'GRAND TOTAL' AS PAY_GRADE,'GRAND TOTAL' AS PAID_DAYS,'GRAND TOTAL' AS PRESENT_DAYS,ROUND(SUM(BASIC),2) AS BASIC,ROUND(SUM(DA),2) AS DA,ROUND(SUM(PERSONAL_PAY),2) AS PERSONAL_PAY,ROUND(SUM(HRA),2) AS HRA,ROUND(SUM(AWARD_HRA),2) AS AWARD_HRA, "
                    + "ROUND(SUM(CONVEYANCE),2) AS CONVEYANCE,ROUND(SUM(ELECTRICITY),2) AS ELECTRICITY,ROUND(SUM(MAGAZINE_ALW),2) AS MAGAZINE_ALW,ROUND(SUM(PERFORMANCE_ALW),2) AS PERFORMANCE_ALW,ROUND(SUM(MED_EDU_HOT_AMT),2) AS MED_EDU_HOT_AMT,ROUND(SUM(BONUS_AMOUNT),2) BONUS_AMOUNT,"
                    + "ROUND(SUM(PAID_H),2) AS PAID_H,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(GRATUITY),2) AS GRATUITY,ROUND(SUM(INFLATION),2) AS INFLATION,ROUND(SUM(SUPER_ANNUATION),2) AS SUPER_ANNUATION, "
                    + "ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC_ACTUAL,3 AS S  FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,5) IN ('BRD10','BRD20') "+cndtn+grp_cndtn
                    + " AND PAY_YEAR = " + txtYear.getText() + " AND PAY_MONTH= " + cmbMonth.getSelectedItem() + " "
                    + "AND TOTAL_CTC_ACTUAL > 0 "
                    + ") AS M "
                    + "ORDER BY PAY_DEPARTMENT,S,PAY_EMPCODE";

//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PAY_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_YEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_EMPCODE");
                    p++;
                    rowData[p] = rsTmp.getString("MAS_EMP_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_CATEGORY");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_DEPARTMENT");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_DESIGNATION");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_GRADE");
                    p++;
                    rowData[p] = rsTmp.getString("PAID_DAYS");
                    p++;
                    rowData[p] = rsTmp.getString("PRESENT_DAYS");
                    p++;
                    rowData[p] = rsTmp.getString("BASIC");
                    p++;
                    rowData[p] = rsTmp.getString("DA");
                    p++;
                    rowData[p] = rsTmp.getString("PERSONAL_PAY");
                    p++;
                    rowData[p] = rsTmp.getString("HRA");
                    p++;
                    rowData[p] = rsTmp.getString("AWARD_HRA");
                    p++;
                    rowData[p] = rsTmp.getString("CONVEYANCE");
                    p++;
                    rowData[p] = rsTmp.getString("ELECTRICITY");
                    p++;
                    rowData[p] = rsTmp.getString("MAGAZINE_ALW");
                    p++;
                    rowData[p] = rsTmp.getString("PERFORMANCE_ALW");
                    p++;
                    rowData[p] = rsTmp.getString("MED_EDU_HOT_AMT");
                    p++;
                    rowData[p] = rsTmp.getString("BONUS_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("PAID_H");
                    p++;
                    rowData[p] = rsTmp.getString("PF_EMPL_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("ESIC_EMP_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("GRATUITY");
                    p++;
                    rowData[p] = rsTmp.getString("INFLATION");
                    p++;
                    rowData[p] = rsTmp.getString("SUPER_ANNUATION");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_ACTUAL");
                    p++;
//  rowData[p] = rsTmp.getString("S");
//  p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridRC() {
        try {
            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Fin Year\",'' AS \"Department\",'' AS \"Grade\","
                    + "'' AS \"Paid Days\",'' AS \"Present Days\",'' AS \"Retainer Fee\",'' AS \"Covid 19 Pay Cut\",'' AS \"CTC Amount\","
                    + "'' AS \"RUNTIME\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
                DataModel.SetReadOnly(i);
            }
            DataModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateRC() {
        try {
            if (txtMonth.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Enter Month");
                txtMonth.setText("");
                return;
            }
            String cndtn="";
            String grp_cndtn="";
            if(!txtEmpCode.getText().trim().equals("")){
                String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
                cndtn+= " AND PAY_EMPID='"+txtEmpCode.getText().trim()+"' ";
            }
            if (!txtDeptCode.getText().trim().equals("")) {                
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }
            FormatGridRC(); //clear existing content of table
            ResultSet rsTmp;

//            String cndtn = "";
//            if (!txtMonth.getText().equals("")) {
//   String[] pMths = txtMonth.getText().split(",");
//   for (int i = 0; i < pMths.length; i++) {
//  if (i == 0) {
//      cndtn += " AND (PAY_MONTH = " + pMths[i] + " ";
//  } else {
//      cndtn += " OR PAY_MONTH = " + pMths[i] + " ";
//  }
//   }
//   cndtn += ") ";
//            }
            String strSQL = "";

            strSQL = "SELECT *,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME FROM "
                    + "( "
                    + "SELECT FIN_YEAR,PAY_DEPARTMENT,'TOTAL' AS PAY_GRADE,ROUND(SUM(PAID_DAYS),2) AS PAID_DAYS, ROUND(SUM(PRESENT_DAYS),2) AS PRESENT_DAYS,ROUND(SUM(RETAINER_FEE),2) AS RETAINER_FEE,ROUND(SUM(COVID_19_PAY_CUT),2) AS COVID_19_PAY_CUT,ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC_ACTUAL,2 as S "
                    + "FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,5) IN ('BRD50','BRD60') "+cndtn+grp_cndtn
                    + "AND FIN_YEAR = '" + cmbFinYear.getSelectedItem() + "' AND PAY_MONTH IN (" + txtMonth.getText().trim() + ") AND TOTAL_CTC_ACTUAL>0 "
                    + "GROUP BY PAY_DEPARTMENT "
                    + "UNION ALL "
                    + "SELECT FIN_YEAR,'ZZ.GRAND TOTAL ' AS PAY_DEPARTMENT,'TOTAL' AS PAY_GRADE,'TOTAL' AS PAID_DAYS, 'TOTAL' AS PRESENT_DAYS, ROUND(SUM(RETAINER_FEE),2) AS RETAINER_FEE,ROUND(SUM(COVID_19_PAY_CUT),2) AS COVID_19_PAY_CUT,ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC_ACTUAL,3 as S "
                    + "FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,5) IN ('BRD50','BRD60') "+cndtn+grp_cndtn
                    + "AND FIN_YEAR = '" + cmbFinYear.getSelectedItem() + "' AND PAY_MONTH IN (" + txtMonth.getText().trim() + ") AND TOTAL_CTC_ACTUAL>0 "
                    + ") AS M "
                    + "ORDER BY S,PAY_DEPARTMENT";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("FIN_YEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_DEPARTMENT");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_GRADE");
                    p++;
                    rowData[p] = rsTmp.getString("PAID_DAYS");
                    p++;
                    rowData[p] = rsTmp.getString("PRESENT_DAYS");
                    p++;
                    rowData[p] = rsTmp.getString("RETAINER_FEE");
                    p++;
                    rowData[p] = rsTmp.getString("COVID_19_PAY_CUT");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_ACTUAL");
                    p++;
//  rowData[p] = rsTmp.getString("S");
//  p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridRM() {
        try {
            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Month\",'' AS \"Year\",'' AS \"Emp Code\","
                    + "'' AS \"Employee Name\",'' AS \"Category\",'' AS \"Department\",'' AS \"Designation\",'' AS \"Grade\","
                    + "'' AS \"Paid Days\",'' AS \"Present Days\",'' AS \"Retainer Fee\",'' AS \"Covid 19 Pay Cut\",'' AS \"CTC Amount\","
                    + "'' AS \"RUNTIME\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
                DataModel.SetReadOnly(i);
            }
            DataModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateRM() {
        try {
            if (cmbMonth.getSelectedItem().equals("Select")) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Select Month");
                cmbMonth.setSelectedIndex(0);
                return;
            }
            if (txtYear.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Enter Year");
                txtYear.setText("");
                return;
            }
            if (txtYear.getText().trim().length() != 4) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Enter Valid Year");
                txtYear.setText("");
                return;
            }
            if (!EITLERPGLOBAL.IsNumber(txtYear.getText().trim())) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Enter Valid Year");
                txtYear.setText("");
                return;
            }
            String cndtn="";
            String grp_cndtn="";
            if(!txtEmpCode.getText().trim().equals("")){
                String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
                cndtn+= " AND PAY_EMPCODE='"+txtEmpCode.getText().trim()+"' ";
            }
//            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
//                grp_cndtn += " AND SDML_DEPT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
//            }
            if (!txtDeptCode.getText().trim().equals("")) {                
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }

            FormatGridRM(); //clear existing content of table
            ResultSet rsTmp;

//            String cndtn = "";
//            if (!txtMonth.getText().equals("")) {
//   String[] pMths = txtMonth.getText().split(",");
//   for (int i = 0; i < pMths.length; i++) {
//  if (i == 0) {
//      cndtn += " AND (PAY_MONTH = " + pMths[i] + " ";
//  } else {
//      cndtn += " OR PAY_MONTH = " + pMths[i] + " ";
//  }
//   }
//   cndtn += ") ";
//            }
            String strSQL = "";

            strSQL = "SELECT *,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME FROM "
                    + "(SELECT PAY_MONTH,PAY_YEAR,PAY_EMPCODE,MAS_EMP_NAME,PAY_CATEGORY,PAY_DEPARTMENT, "
                    + "PAY_DESIGNATION,COALESCE(PAY_GRADE,'') PAY_GRADE,PAID_DAYS,PRESENT_DAYS,RETAINER_FEE,COVID_19_PAY_CUT,TOTAL_CTC_ACTUAL,1 as S "
                    + "FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,5) IN ('BRD50','BRD60') "+cndtn+grp_cndtn+" AND TOTAL_CTC_ACTUAL >0 "
                    + "AND PAY_YEAR = " + txtYear.getText() + " AND PAY_MONTH= " + cmbMonth.getSelectedItem() + " "
                    + "UNION ALL "
                    + "SELECT PAY_MONTH,PAY_YEAR,'TOTAL' AS PAY_EMPCODE,'TOTAL' AS MAS_EMP_NAME,'TOTAL' AS PAY_CATEGORY, "
                    + "CONCAT(PAY_DEPARTMENT, '  TOTAL') AS  PAY_DEPARTMENT, "
                    + "'TOTAL' AS PAY_DESIGNATION,'TOTAL' AS PAY_GRADE,'TOTAL' AS PAID_DAYS,'TOTAL' AS PRESENT_DAYS, ROUND(SUM(RETAINER_FEE),2) AS RETAINER_FEE,ROUND(SUM(COVID_19_PAY_CUT),2) AS COVID_19_PAY_CUT,ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC_ACTUAL,2 as S "
                    + "FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,5) IN ('BRD50','BRD60') "+cndtn+grp_cndtn+" AND TOTAL_CTC_ACTUAL >0 "
                    + "AND PAY_YEAR = " + txtYear.getText() + " AND PAY_MONTH= " + cmbMonth.getSelectedItem() + " "
                    + "GROUP BY PAY_DEPARTMENT "
                    + "UNION ALL "
                    + "SELECT PAY_MONTH,PAY_YEAR,'GRAND TOTAL' AS PAY_EMPCODE,'GRAND TOTAL' AS MAS_EMP_NAME,'GRAND TOTAL' AS PAY_CATEGORY,'ZZ.GRAND TOTAL' AS PAY_DEPARTMENT, "
                    + "'GRAND TOTAL' AS PAY_DESIGNATION,'GRAND TOTAL' AS PAY_GRADE,'GRAND TOTAL' AS PAID_DAYS,'GRAND TOTAL' AS PRESENT_DAYS, ROUND(SUM(RETAINER_FEE),2) AS RETAINER_FEE,ROUND(SUM(COVID_19_PAY_CUT),2) AS COVID_19_PAY_CUT,ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC_ACTUAL,3 as S "
                    + "FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,5) IN ('BRD50','BRD60') "+cndtn+grp_cndtn+" AND TOTAL_CTC_ACTUAL >0 "
                    + "AND PAY_YEAR = " + txtYear.getText() + " AND PAY_MONTH= " + cmbMonth.getSelectedItem() + " ) AS M "
                    + "ORDER BY PAY_DEPARTMENT,S,PAY_EMPCODE";

//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PAY_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_YEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_EMPCODE");
                    p++;
                    rowData[p] = rsTmp.getString("MAS_EMP_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_CATEGORY");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_DEPARTMENT");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_DESIGNATION");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_GRADE");
                    p++;
                    rowData[p] = rsTmp.getString("PAID_DAYS");
                    p++;
                    rowData[p] = rsTmp.getString("PRESENT_DAYS");
                    p++;
                    rowData[p] = rsTmp.getString("RETAINER_FEE");
                    p++;
                    rowData[p] = rsTmp.getString("COVID_19_PAY_CUT");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_ACTUAL");
                    p++;
//  rowData[p] = rsTmp.getString("S");
//  p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridCC() {
        try {
            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Fin Year\",'' AS \"Department\",'' AS \"Grade\","
                    + "'' AS \"Paid Days\",'' AS \"Present Days\",'' AS \"Basic\",'' AS \"Bonus Amount\",'' AS \"PF Contribution\",'' AS \"ESIC Contribution\","
                    + "'' AS \"Service Charge\",'' AS \"CTC Amount\","
                    + "'' AS \"RUNTIME\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
                DataModel.SetReadOnly(i);
            }
            DataModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void FormatGridCM() {
        try {
            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Month\",'' AS \"Year\",'' AS \"Emp Code\","
                    + "'' AS \"Employee Name\",'' AS \"Category\",'' AS \"Department\","
                    + "'' AS \"Paid Days\",'' AS \"Present Days\",'' AS \"Basic\",'' AS \"Bonus Amount\",'' AS \"PF Contribution\",'' AS \"ESIC Contribution\","
                    + "'' AS \"Service Charge\",'' AS \"CTC Amount\","
                    + "'' AS \"RUNTIME\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
                DataModel.SetReadOnly(i);
            }
            DataModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateKMSC() {
        try {
            if (txtMonth.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Enter Month");
                txtMonth.setText("");
                return;
            }
            String cndtn="";
            String grp_cndtn="";
            if(!txtEmpCode.getText().trim().equals("")){
                String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
                cndtn+= " AND PAY_EMPID='"+txtEmpCode.getText().trim()+"' ";
            }
            if (!txtDeptCode.getText().trim().equals("")) {                
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }

            FormatGridCC(); //clear existing content of table
            ResultSet rsTmp;

//            String cndtn = "";
//            if (!txtMonth.getText().equals("")) {
//   String[] pMths = txtMonth.getText().split(",");
//   for (int i = 0; i < pMths.length; i++) {
//  if (i == 0) {
//      cndtn += " AND (PAY_MONTH = " + pMths[i] + " ";
//  } else {
//      cndtn += " OR PAY_MONTH = " + pMths[i] + " ";
//  }
//   }
//   cndtn += ") ";
//            }
            String strSQL = "";

            strSQL = "SELECT *,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME FROM "
                    + "( "
                    + "SELECT FIN_YEAR, PAY_DEPARTMENT, "
                    + "'TOTAL' AS PAY_GRADE,ROUND(SUM(PAID_DAYS),2) AS PAID_DAYS,ROUND(SUM(PRESENT_DAYS),2) AS PRESENT_DAYS,ROUND(SUM(BASIC),2) AS BASIC,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(CON_SERVICE_CHARGE_AMOUNT),2) AS CON_SERVICE_CHARGE_AMOUNT, "
                    + "ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC_ACTUAL,2 AS S  FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,6) IN ('BRD003') "+cndtn+grp_cndtn
                    + "AND FIN_YEAR = '" + cmbFinYear.getSelectedItem() + "' AND PAY_MONTH IN (" + txtMonth.getText().trim() + ") AND TOTAL_CTC_ACTUAL>0 "
                    + "GROUP BY PAY_DEPARTMENT "
                    + "UNION ALL "
                    + "SELECT FIN_YEAR,' ZZ.GRAND TOTAL' AS PAY_DEPARTMENT, "
                    + "'TOTAL' AS PAY_GRADE,'TOTAL' AS PAID_DAYS,'TOTAL' AS PRESENT_DAYS,ROUND(SUM(BASIC),2) AS BASIC,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(CON_SERVICE_CHARGE_AMOUNT),2) AS CON_SERVICE_CHARGE_AMOUNT, "
                    + "ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC_ACTUAL,3 AS S  FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,6) IN ('BRD003') "+cndtn+grp_cndtn
                    + "AND FIN_YEAR = '" + cmbFinYear.getSelectedItem() + "' AND PAY_MONTH IN (" + txtMonth.getText().trim() + ") AND TOTAL_CTC_ACTUAL>0 "
                    + ") AS M "
                    + "ORDER BY S,PAY_DEPARTMENT";

//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("FIN_YEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_DEPARTMENT");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_GRADE");
                    p++;
                    rowData[p] = rsTmp.getString("PAID_DAYS");
                    p++;
                    rowData[p] = rsTmp.getString("PRESENT_DAYS");
                    p++;
                    rowData[p] = rsTmp.getString("BASIC");
                    p++;
                    rowData[p] = rsTmp.getString("BONUS_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("PF_EMPL_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("ESIC_EMP_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("CON_SERVICE_CHARGE_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_ACTUAL");
                    p++;
//  rowData[p] = rsTmp.getString("S");
//  p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateKMSM() {
        try {
            if (cmbMonth.getSelectedItem().equals("Select")) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Select Month");
                cmbMonth.setSelectedIndex(0);
                return;
            }
            if (txtYear.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Enter Year");
                txtYear.setText("");
                return;
            }
            if (txtYear.getText().trim().length() != 4) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Enter Valid Year");
                txtYear.setText("");
                return;
            }
            if (!EITLERPGLOBAL.IsNumber(txtYear.getText().trim())) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Enter Valid Year");
                txtYear.setText("");
                return;
            }
            String cndtn="";
            String grp_cndtn="";
            if(!txtEmpCode.getText().trim().equals("")){
                String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
                cndtn+= " AND PAY_EMPCODE='"+txtEmpCode.getText().trim()+"' ";
            }
//            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
//                grp_cndtn += " AND SDML_DEPT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
//            }
            if (!txtDeptCode.getText().trim().equals("")) {                
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }
            
            FormatGridCM(); //clear existing content of table
            ResultSet rsTmp;

//            String cndtn = "";
//            if (!txtMonth.getText().equals("")) {
//   String[] pMths = txtMonth.getText().split(",");
//   for (int i = 0; i < pMths.length; i++) {
//  if (i == 0) {
//      cndtn += " AND (PAY_MONTH = " + pMths[i] + " ";
//  } else {
//      cndtn += " OR PAY_MONTH = " + pMths[i] + " ";
//  }
//   }
//   cndtn += ") ";
//            }
            String strSQL = "";

            strSQL = "SELECT *,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME FROM "
                    + "( "
                    + "SELECT PAY_MONTH,PAY_YEAR,PAY_EMPCODE,MAS_EMP_NAME,PAY_CATEGORY,PAY_DEPARTMENT,PAY_DIVISION,PAID_DAYS,PRESENT_DAYS,BASIC,BONUS_AMOUNT,PF_EMPL_AMOUNT,ESIC_EMP_AMOUNT,CON_SERVICE_CHARGE_AMOUNT, "
                    + "TOTAL_CTC_ACTUAL,1 AS S FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,6) IN ('BRD003') "+cndtn+grp_cndtn
                    + "AND PAY_YEAR = " + txtYear.getText() + " AND PAY_MONTH= " + cmbMonth.getSelectedItem() + " "
                    + "AND TOTAL_CTC_ACTUAL > 0 "
                    + "UNION ALL "
                    + "SELECT PAY_MONTH,PAY_YEAR,'TOTAL' AS PAY_EMPCODE,'TOTAL' AS MAS_EMP_NAME,'TOTAL' AS PAY_CATEGORY, "
                    + "CONCAT(PAY_DEPARTMENT, '  TOTAL') AS  PAY_DEPARTMENT, "
                    + "'TOTAL' AS PAY_GRADE,'TOTAL' AS PAID_DAYS,'TOTAL' AS PRESENT_DAYS,ROUND(SUM(BASIC),2) AS BASIC,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(CON_SERVICE_CHARGE_AMOUNT),2) AS CON_SERVICE_CHARGE_AMOUNT, "
                    + "ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC_ACTUAL,2 AS S  FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,6) IN ('BRD003') "+cndtn+grp_cndtn
                    + "AND PAY_YEAR = " + txtYear.getText() + " AND PAY_MONTH= " + cmbMonth.getSelectedItem() + " "
                    + "AND TOTAL_CTC_ACTUAL > 0 "
                    + "GROUP BY PAY_DEPARTMENT "
                    + "UNION ALL "
                    + "SELECT PAY_MONTH,PAY_YEAR,'GRAND TOTAL' AS PAY_EMPCODE,'GRAND TOTAL' AS MAS_EMP_NAME,'GRAND TOTAL' AS PAY_CATEGORY,'ZZ.GRAND TOTAL' AS PAY_DEPARTMENT, "
                    + "'GRAND TOTAL' AS PAY_GRADE,'GRAND TOTAL' AS PAID_DAYS,'GRAND TOTAL' AS PRESENT_DAYS,ROUND(SUM(BASIC),2) AS BASIC,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(CON_SERVICE_CHARGE_AMOUNT),2) AS CON_SERVICE_CHARGE_AMOUNT, "
                    + "ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC_ACTUAL,3 AS S  FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,6) IN ('BRD003') "+cndtn+grp_cndtn
                    + "AND PAY_YEAR = " + txtYear.getText() + " AND PAY_MONTH= " + cmbMonth.getSelectedItem() + " "
                    + "AND TOTAL_CTC_ACTUAL > 0 "
                    + ") AS M "
                    + "ORDER BY PAY_DEPARTMENT,S,PAY_EMPCODE";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PAY_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_YEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_EMPCODE");
                    p++;
                    rowData[p] = rsTmp.getString("MAS_EMP_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_CATEGORY");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_DEPARTMENT");
                    p++;
                    rowData[p] = rsTmp.getString("PAID_DAYS");
                    p++;
                    rowData[p] = rsTmp.getString("PRESENT_DAYS");
                    p++;
//  rowData[p] = rsTmp.getString("PAY_DIVISION");
//  p++;
                    rowData[p] = rsTmp.getString("BASIC");
                    p++;
                    rowData[p] = rsTmp.getString("BONUS_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("PF_EMPL_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("ESIC_EMP_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("CON_SERVICE_CHARGE_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_ACTUAL");
                    p++;
//  rowData[p] = rsTmp.getString("S");
//  p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateHRSC() {
        try {
            if (txtMonth.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Enter Month");
                txtMonth.setText("");
                return;
            }
            String cndtn="";
            String grp_cndtn="";
            if(!txtEmpCode.getText().trim().equals("")){
                String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
                cndtn+= " AND PAY_EMPID='"+txtEmpCode.getText().trim()+"' ";
            }
            if (!txtDeptCode.getText().trim().equals("")) {                
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }
            FormatGridCC(); //clear existing content of table
            ResultSet rsTmp;

//            String cndtn = "";
//            if (!txtMonth.getText().equals("")) {
//   String[] pMths = txtMonth.getText().split(",");
//   for (int i = 0; i < pMths.length; i++) {
//  if (i == 0) {
//      cndtn += " AND (PAY_MONTH = " + pMths[i] + " ";
//  } else {
//      cndtn += " OR PAY_MONTH = " + pMths[i] + " ";
//  }
//   }
//   cndtn += ") ";
//            }
            String strSQL = "";

            strSQL = "SELECT *,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME FROM "
                    + "( "
                    + "SELECT FIN_YEAR, PAY_DEPARTMENT, "
                    + "'TOTAL' AS PAY_GRADE,ROUND(SUM(PAID_DAYS),2) AS PAID_DAYS,ROUND(SUM(PRESENT_DAYS),2) AS PRESENT_DAYS,ROUND(SUM(BASIC),2) AS BASIC,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(CON_SERVICE_CHARGE_AMOUNT),2) AS CON_SERVICE_CHARGE_AMOUNT, "
                    + "ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC_ACTUAL,2 AS S  FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,6) IN ('BRD002','BRD004','BRD001''BRD007') "+cndtn+grp_cndtn
                    + "AND FIN_YEAR = '" + cmbFinYear.getSelectedItem() + "' AND PAY_MONTH IN (" + txtMonth.getText().trim() + ") AND TOTAL_CTC_ACTUAL>0 "
                    + "GROUP BY PAY_DEPARTMENT "
                    + "UNION ALL "
                    + "SELECT FIN_YEAR,' ZZ.GRAND TOTAL' AS PAY_DEPARTMENT, "
                    + "'TOTAL' AS PAY_GRADE,'TOTAL' AS PAID_DAYS,'TOTAL' AS PRESENT_DAYS,ROUND(SUM(BASIC),2) AS BASIC,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(CON_SERVICE_CHARGE_AMOUNT),2) AS CON_SERVICE_CHARGE_AMOUNT, "
                    + "ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC_ACTUAL,3 AS S  FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,6) IN ('BRD002','BRD004','BRD001''BRD007') "+cndtn+grp_cndtn
                    + "AND FIN_YEAR = '" + cmbFinYear.getSelectedItem() + "' AND PAY_MONTH IN (" + txtMonth.getText().trim() + ") AND TOTAL_CTC_ACTUAL>0 "
                    + ") AS M "
                    + "ORDER BY S,PAY_DEPARTMENT";

//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("FIN_YEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_DEPARTMENT");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_GRADE");
                    p++;
                    rowData[p] = rsTmp.getString("PAID_DAYS");
                    p++;
                    rowData[p] = rsTmp.getString("PRESENT_DAYS");
                    p++;
                    rowData[p] = rsTmp.getString("BASIC");
                    p++;
                    rowData[p] = rsTmp.getString("BONUS_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("PF_EMPL_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("ESIC_EMP_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("CON_SERVICE_CHARGE_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_ACTUAL");
                    p++;
//  rowData[p] = rsTmp.getString("S");
//  p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateHRSM() {
        try {
            if (cmbMonth.getSelectedItem().equals("Select")) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Select Month");
                cmbMonth.setSelectedIndex(0);
                return;
            }
            if (txtYear.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Enter Year");
                txtYear.setText("");
                return;
            }
            if (txtYear.getText().trim().length() != 4) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Enter Valid Year");
                txtYear.setText("");
                return;
            }
            if (!EITLERPGLOBAL.IsNumber(txtYear.getText().trim())) {
                JOptionPane.showMessageDialog(frmCTC.this, "Please Enter Valid Year");
                txtYear.setText("");
                return;
            }
            String cndtn="";
            String grp_cndtn="";
            if(!txtEmpCode.getText().trim().equals("")){
                String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
                cndtn+= " AND PAY_EMPCODE='"+txtEmpCode.getText().trim()+"' ";
            }
//            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
//                grp_cndtn += " AND SDML_DEPT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
//            }
            if (!txtDeptCode.getText().trim().equals("")) {                
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }

            FormatGridCM(); //clear existing content of table
            ResultSet rsTmp;

//            String cndtn = "";
//            if (!txtMonth.getText().equals("")) {
//   String[] pMths = txtMonth.getText().split(",");
//   for (int i = 0; i < pMths.length; i++) {
//  if (i == 0) {
//      cndtn += " AND (PAY_MONTH = " + pMths[i] + " ";
//  } else {
//      cndtn += " OR PAY_MONTH = " + pMths[i] + " ";
//  }
//   }
//   cndtn += ") ";
//            }
            String strSQL = "";

            strSQL = "SELECT *,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME FROM "
                    + "( "
                    + "SELECT PAY_MONTH,PAY_YEAR,PAY_EMPCODE,MAS_EMP_NAME,PAY_CATEGORY,PAY_DEPARTMENT,PAY_DIVISION,PAID_DAYS,PRESENT_DAYS,BASIC,BONUS_AMOUNT,PF_EMPL_AMOUNT,ESIC_EMP_AMOUNT,CON_SERVICE_CHARGE_AMOUNT, "
                    + "TOTAL_CTC_ACTUAL,1 AS S FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,6) IN ('BRD002','BRD004','BRD001''BRD007') "+cndtn+grp_cndtn
                    + "AND PAY_YEAR = " + txtYear.getText() + " AND PAY_MONTH= " + cmbMonth.getSelectedItem() + " "
                    + "AND TOTAL_CTC_ACTUAL > 0 "
                    + "UNION ALL "
                    + "SELECT PAY_MONTH,PAY_YEAR,'TOTAL' AS PAY_EMPCODE,'TOTAL' AS MAS_EMP_NAME,'TOTAL' AS PAY_CATEGORY, "
                    + "CONCAT(PAY_DEPARTMENT, '  TOTAL') AS  PAY_DEPARTMENT, "
                    + "'TOTAL' AS PAY_GRADE,'TOTAL' AS PAID_DAYS,'TOTAL' AS PRESENT_DAYS,ROUND(SUM(BASIC),2) AS BASIC,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(CON_SERVICE_CHARGE_AMOUNT),2) AS CON_SERVICE_CHARGE_AMOUNT, "
                    + "ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC_ACTUAL,2 AS S  FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,6) IN ('BRD002','BRD004','BRD001''BRD007') "+cndtn+grp_cndtn
                    + "AND PAY_YEAR = " + txtYear.getText() + " AND PAY_MONTH= " + cmbMonth.getSelectedItem() + " "
                    + "AND TOTAL_CTC_ACTUAL > 0 "
                    + "GROUP BY PAY_DEPARTMENT "
                    + "UNION ALL "
                    + "SELECT PAY_MONTH,PAY_YEAR,'GRAND TOTAL' AS PAY_EMPCODE,'GRAND TOTAL' AS MAS_EMP_NAME,'GRAND TOTAL' AS PAY_CATEGORY,'ZZ.GRAND TOTAL' AS PAY_DEPARTMENT, "
                    + "'GRAND TOTAL' AS PAY_GRADE,'GRAND TOTAL' AS PAID_DAYS,'GRAND TOTAL' AS PRESENT_DAYS,ROUND(SUM(BASIC),2) AS BASIC,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(CON_SERVICE_CHARGE_AMOUNT),2) AS CON_SERVICE_CHARGE_AMOUNT, "
                    + "ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC_ACTUAL,3 AS S  FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPCODE,1,6) IN ('BRD002','BRD004','BRD001''BRD007') "+cndtn+grp_cndtn
                    + "AND PAY_YEAR = " + txtYear.getText() + " AND PAY_MONTH= " + cmbMonth.getSelectedItem() + " "
                    + "AND TOTAL_CTC_ACTUAL > 0 "
                    + ") AS M "
                    + "ORDER BY PAY_DEPARTMENT,S,PAY_EMPCODE";

//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PAY_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_YEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_EMPCODE");
                    p++;
                    rowData[p] = rsTmp.getString("MAS_EMP_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_CATEGORY");
                    p++;
                    rowData[p] = rsTmp.getString("PAY_DEPARTMENT");
                    p++;
                    rowData[p] = rsTmp.getString("PAID_DAYS");
                    p++;
                    rowData[p] = rsTmp.getString("PRESENT_DAYS");
                    p++;
//  rowData[p] = rsTmp.getString("PAY_DIVISION");
//  p++;
                    rowData[p] = rsTmp.getString("BASIC");
                    p++;
                    rowData[p] = rsTmp.getString("BONUS_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("PF_EMPL_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("ESIC_EMP_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("CON_SERVICE_CHARGE_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_ACTUAL");
                    p++;
//  rowData[p] = rsTmp.getString("S");
//  p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridCT() {
        try {
            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Emp Code\",'' AS \"Employee Name\","
                    + "'' AS \"Date of Join\",'' AS \"Category\",'' AS \"Department\","
                    + "'' AS \"Basic\",'' AS \"Bonus Amount\",'' AS \"PF Contribution\",'' AS \"ESIC Contribution\","
                    + "'' AS \"Service Charge\",'' AS \"CTC(Monthly) Amount\",'' AS \"CTC(Yearly) Amount\","
                    + "'' AS \"RUNTIME\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
                DataModel.SetReadOnly(i);
            }
            DataModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void FormatGridExCT() {
        try {
            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Emp Code\",'' AS \"Employee Name\","
                    + "'' AS \"Date of Join\",'' AS \"Date of Leave\",'' AS \"Category\",'' AS \"Department\","
                    + "'' AS \"Basic\",'' AS \"Bonus Amount\",'' AS \"PF Contribution\",'' AS \"ESIC Contribution\","
                    + "'' AS \"Service Charge\",'' AS \"CTC(Monthly) Amount\",'' AS \"CTC(Yearly) Amount\","
                    + "'' AS \"RUNTIME\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
                DataModel.SetReadOnly(i);
            }
            DataModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    
    private void GenerateHRST() {
        try {
            String cndtn="";
            String grp_cndtn="";
            if(!txtEmpCode.getText().trim().equals("")){
                String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
                cndtn+= " AND PAY_EMPID='"+txtEmpCode.getText().trim()+"' ";
            }
//            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
//                grp_cndtn += " AND SDML_DEPT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
//            }
            if (!txtDeptCode.getText().trim().equals("")) {
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }
            
            FormatGridCT(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT *,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME FROM "
                    + "( "
                    + "SELECT "
                    + "PAY_EMPID,EMP_NAME,DATE_OF_BIRTH,DATE_FORMAT(DATE_OF_JOINING ,'%d/%m/%Y') AS DATE_OF_JOINING,CATEGORY,DEPARTMENT,COALESCE(GRADE,'') GRADE,ROUND(BASIC_PAY,2) AS BASIC_PAY,ROUND(BONUS_AMOUNT,2) AS BONUS_AMOUNT,ROUND(PF_EMPL_AMOUNT,2) AS PF_EMPL_AMOUNT,ROUND(ESIC_EMP_AMOUNT,2) AS ESIC_EMP_AMOUNT,ROUND(CON_SERVICE_CHARGE_AMOUNT,2) AS CON_SERVICE_CHARGE_AMOUNT,ROUND(TOTAL_CTC_MONTHLY,2) AS TOTAL_CTC_MONTHLY,ROUND(TOTAL_CTC_YEARLY,2) AS TOTAL_CTC_YEARLY,1 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPID,1,6) IN ('BRD002','BRD004','BRD001''BRD007') "
                    + "AND DATE_OF_LEAVING = '0000-00-00' "+cndtn+grp_cndtn
                    + "UNION ALL "
                    + " SELECT "
                    + "'TOTAL' AS PAY_EMPID, CONCAT('TOTAL NO. (',COUNT(*),')') AS EMP_NAME,'TOTAL' AS DATE_OF_BIRTH,'TOTAL' AS DATE_OF_JOINING,'TOTAL' AS CATEGORY,CONCAT(DEPARTMENT, '  TOTAL') AS DEPARTMENT,'TOTAL' AS GRADE "
                    + ",ROUND(SUM(BASIC_PAY),2) AS BASIC_PAY,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(CON_SERVICE_CHARGE_AMOUNT),2) AS CON_SERVICE_CHARGE_AMOUNT,ROUND(SUM(TOTAL_CTC_MONTHLY),2) AS TOTAL_CTC_MONTHLY,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC_YEARLY,2 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPID,1,6) IN ('BRD002','BRD004','BRD001''BRD007') "
                    + "AND DATE_OF_LEAVING = '0000-00-00' "+cndtn+grp_cndtn
                    + "GROUP BY DEPARTMENT "
                    + "UNION ALL "
                    + " SELECT "
                    + "'GRAND TOTAL' AS PAY_EMPID,CONCAT('TOTAL NO. (',COUNT(*),')')  AS EMP_NAME,'GRAND TOTAL' AS DATE_OF_BIRTH,'GRAND TOTAL' AS DATE_OF_JOINING,'GRAND TOTAL' AS CATEGORY,'ZZ.GRAND TOTAL' AS DEPARTMENT,'GRAND TOTAL' AS GRADE "
                    + ",ROUND(SUM(BASIC_PAY),2) AS BASIC_PAY,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(CON_SERVICE_CHARGE_AMOUNT),2) AS CON_SERVICE_CHARGE_AMOUNT,ROUND(SUM(TOTAL_CTC_MONTHLY),2) AS TOTAL_CTC_MONTHLY,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC_YEARLY,2 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPID,1,6) IN ('BRD002','BRD004','BRD001''BRD007') "
                    + "AND DATE_OF_LEAVING = '0000-00-00' "+cndtn+grp_cndtn
                    + ") AS M "
                    + "ORDER BY DEPARTMENT,S,PAY_EMPID";

//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PAY_EMPID");
                    p++;
                    rowData[p] = rsTmp.getString("EMP_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("DATE_OF_JOINING");
                    p++;
                    rowData[p] = rsTmp.getString("CATEGORY");
                    p++;
                    rowData[p] = rsTmp.getString("DEPARTMENT");
                    p++;
                    rowData[p] = rsTmp.getString("BASIC_PAY");
                    p++;
                    rowData[p] = rsTmp.getString("BONUS_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("PF_EMPL_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("ESIC_EMP_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("CON_SERVICE_CHARGE_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_MONTHLY");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_YEARLY");
                    p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private void GenerateExHRST() {
        try {
            String cndtn="";
            String grp_cndtn="";
            if(!txtEmpCode.getText().trim().equals("")){
                String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
                cndtn+= " AND PAY_EMPID='"+txtEmpCode.getText().trim()+"' ";
            }
//            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
//                grp_cndtn += " AND SDML_DEPT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
//            }
            if (!txtDeptCode.getText().trim().equals("")) {                
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }
            
            FormatGridExCT(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT *,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME FROM "
                    + "( "
                    + "SELECT "
                    + "PAY_EMPID,EMP_NAME,DATE_OF_BIRTH,DATE_FORMAT(DATE_OF_JOINING ,'%d/%m/%Y') AS DATE_OF_JOINING,DATE_FORMAT(DATE_OF_LEAVING ,'%d/%m/%Y') AS DATE_OF_LEAVING,CATEGORY,DEPARTMENT,COALESCE(GRADE,'') GRADE,ROUND(BASIC_PAY,2) AS BASIC_PAY,ROUND(BONUS_AMOUNT,2) AS BONUS_AMOUNT,ROUND(PF_EMPL_AMOUNT,2) AS PF_EMPL_AMOUNT,ROUND(ESIC_EMP_AMOUNT,2) AS ESIC_EMP_AMOUNT,ROUND(CON_SERVICE_CHARGE_AMOUNT,2) AS CON_SERVICE_CHARGE_AMOUNT,ROUND(TOTAL_CTC_MONTHLY,2) AS TOTAL_CTC_MONTHLY,ROUND(TOTAL_CTC_YEARLY,2) AS TOTAL_CTC_YEARLY,1 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC_LEFT "
                    + "WHERE SUBSTRING(PAY_EMPID,1,6) IN ('BRD002','BRD004','BRD001''BRD007') "
                    + "AND DATE_OF_LEAVING != '0000-00-00' "+cndtn+grp_cndtn
                    + "UNION ALL "
                    + " SELECT "
                    + "'TOTAL' AS PAY_EMPID, CONCAT('TOTAL NO. (',COUNT(*),')') AS EMP_NAME,'TOTAL' AS DATE_OF_BIRTH,'TOTAL' AS DATE_OF_JOINING,'TOTAL' AS DATE_OF_LEAVING,'TOTAL' AS CATEGORY,CONCAT(DEPARTMENT, '  TOTAL') AS DEPARTMENT,'TOTAL' AS GRADE "
                    + ",ROUND(SUM(BASIC_PAY),2) AS BASIC_PAY,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(CON_SERVICE_CHARGE_AMOUNT),2) AS CON_SERVICE_CHARGE_AMOUNT,ROUND(SUM(TOTAL_CTC_MONTHLY),2) AS TOTAL_CTC_MONTHLY,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC_YEARLY,2 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC_LEFT "
                    + "WHERE SUBSTRING(PAY_EMPID,1,6) IN ('BRD002','BRD004','BRD001''BRD007') "
                    + "AND DATE_OF_LEAVING != '0000-00-00' "+cndtn+grp_cndtn
                    + "GROUP BY DEPARTMENT "
                    + "UNION ALL "
                    + " SELECT "
                    + "'GRAND TOTAL' AS PAY_EMPID,CONCAT('TOTAL NO. (',COUNT(*),')')  AS EMP_NAME,'GRAND TOTAL' AS DATE_OF_BIRTH,'GRAND TOTAL' AS DATE_OF_JOINING,'GRAND TOTAL' AS DATE_OF_LEAVING,'GRAND TOTAL' AS CATEGORY,'ZZ.GRAND TOTAL' AS DEPARTMENT,'GRAND TOTAL' AS GRADE "
                    + ",ROUND(SUM(BASIC_PAY),2) AS BASIC_PAY,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(CON_SERVICE_CHARGE_AMOUNT),2) AS CON_SERVICE_CHARGE_AMOUNT,ROUND(SUM(TOTAL_CTC_MONTHLY),2) AS TOTAL_CTC_MONTHLY,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC_YEARLY,2 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC_LEFT "
                    + "WHERE SUBSTRING(PAY_EMPID,1,6) IN ('BRD002','BRD004','BRD001''BRD007') "
                    + "AND DATE_OF_LEAVING != '0000-00-00' "+cndtn+grp_cndtn
                    + ") AS M "
                    + "ORDER BY DEPARTMENT,S,PAY_EMPID";

//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PAY_EMPID");
                    p++;
                    rowData[p] = rsTmp.getString("EMP_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("DATE_OF_JOINING");
                    p++;
                    rowData[p] = rsTmp.getString("DATE_OF_LEAVING");
                    p++;
                    rowData[p] = rsTmp.getString("CATEGORY");
                    p++;
                    rowData[p] = rsTmp.getString("DEPARTMENT");
                    p++;
                    rowData[p] = rsTmp.getString("BASIC_PAY");
                    p++;
                    rowData[p] = rsTmp.getString("BONUS_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("PF_EMPL_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("ESIC_EMP_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("CON_SERVICE_CHARGE_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_MONTHLY");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_YEARLY");
                    p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }


    private void GenerateKMST() {
        try {
            String cndtn="";
            String grp_cndtn="";
            if(!txtEmpCode.getText().trim().equals("")){
                String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
                cndtn+= " AND PAY_EMPID='"+txtEmpCode.getText().trim()+"' ";
            }
//            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
//                grp_cndtn += " AND SDML_DEPT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
//            }
            if (!txtDeptCode.getText().trim().equals("")) {                
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }
            
            FormatGridCT(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT *,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME FROM "
                    + "( "
                    + "SELECT "
                    + "PAY_EMPID,EMP_NAME,DATE_OF_BIRTH,DATE_FORMAT(DATE_OF_JOINING ,'%d/%m/%Y') AS DATE_OF_JOINING,CATEGORY,DEPARTMENT,COALESCE(GRADE,'') GRADE,ROUND(BASIC_PAY,2) AS BASIC_PAY,ROUND(BONUS_AMOUNT,2) AS BONUS_AMOUNT,ROUND(PF_EMPL_AMOUNT,2) AS PF_EMPL_AMOUNT,ROUND(ESIC_EMP_AMOUNT,2) AS ESIC_EMP_AMOUNT,ROUND(CON_SERVICE_CHARGE_AMOUNT,2) AS CON_SERVICE_CHARGE_AMOUNT,ROUND(TOTAL_CTC_MONTHLY,2) AS TOTAL_CTC_MONTHLY,ROUND(TOTAL_CTC_YEARLY,2) AS TOTAL_CTC_YEARLY,1 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPID,1,6) IN ('BRD003') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING = '0000-00-00' "
                    + "UNION ALL "
                    + " SELECT "
                    + "'TOTAL' AS PAY_EMPID, CONCAT('TOTAL NO. (',COUNT(*),')') AS EMP_NAME,'TOTAL' AS DATE_OF_BIRTH,'TOTAL' AS DATE_OF_JOINING,'TOTAL' AS CATEGORY,CONCAT(DEPARTMENT, '  TOTAL') AS DEPARTMENT,'TOTAL' AS GRADE "
                    + ",ROUND(SUM(BASIC_PAY),2) AS BASIC_PAY,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(CON_SERVICE_CHARGE_AMOUNT),2) AS CON_SERVICE_CHARGE_AMOUNT,ROUND(SUM(TOTAL_CTC_MONTHLY),2) AS TOTAL_CTC_MONTHLY,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC_YEARLY,2 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPID,1,6) IN ('BRD003') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING = '0000-00-00' "
                    + "GROUP BY DEPARTMENT "
                    + "UNION ALL "
                    + " SELECT "
                    + "'GRAND TOTAL' AS PAY_EMPID,CONCAT('TOTAL NO. (',COUNT(*),')')  AS EMP_NAME,'GRAND TOTAL' AS DATE_OF_BIRTH,'GRAND TOTAL' AS DATE_OF_JOINING,'GRAND TOTAL' AS CATEGORY,'ZZ.GRAND TOTAL' AS DEPARTMENT,'GRAND TOTAL' AS GRADE "
                    + ",ROUND(SUM(BASIC_PAY),2) AS BASIC_PAY,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(CON_SERVICE_CHARGE_AMOUNT),2) AS CON_SERVICE_CHARGE_AMOUNT,ROUND(SUM(TOTAL_CTC_MONTHLY),2) AS TOTAL_CTC_MONTHLY,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC_YEARLY,2 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPID,1,6) IN ('BRD003') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING = '0000-00-00' "
                    + ") AS M "
                    + "ORDER BY DEPARTMENT,S,PAY_EMPID";

//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PAY_EMPID");
                    p++;
                    rowData[p] = rsTmp.getString("EMP_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("DATE_OF_JOINING");
                    p++;
                    rowData[p] = rsTmp.getString("CATEGORY");
                    p++;
                    rowData[p] = rsTmp.getString("DEPARTMENT");
                    p++;
                    rowData[p] = rsTmp.getString("BASIC_PAY");
                    p++;
                    rowData[p] = rsTmp.getString("BONUS_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("PF_EMPL_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("ESIC_EMP_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("CON_SERVICE_CHARGE_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_MONTHLY");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_YEARLY");
                    p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateExKMST() {
        try {
            String cndtn="";
            String grp_cndtn="";
            if(!txtEmpCode.getText().trim().equals("")){
                String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
                cndtn+= " AND PAY_EMPID='"+txtEmpCode.getText().trim()+"' ";
            }
//            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
//                grp_cndtn += " AND SDML_DEPT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
//            }
            if (!txtDeptCode.getText().trim().equals("")) {            
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }
            
            FormatGridExCT(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT *,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME FROM "
                    + "( "
                    + "SELECT "
                    + "PAY_EMPID,EMP_NAME,DATE_OF_BIRTH,DATE_FORMAT(DATE_OF_JOINING ,'%d/%m/%Y') AS DATE_OF_JOINING,DATE_FORMAT(DATE_OF_LEAVING ,'%d/%m/%Y') AS DATE_OF_LEAVING,CATEGORY,DEPARTMENT,COALESCE(GRADE,'') GRADE,ROUND(BASIC_PAY,2) AS BASIC_PAY,ROUND(BONUS_AMOUNT,2) AS BONUS_AMOUNT,ROUND(PF_EMPL_AMOUNT,2) AS PF_EMPL_AMOUNT,ROUND(ESIC_EMP_AMOUNT,2) AS ESIC_EMP_AMOUNT,ROUND(CON_SERVICE_CHARGE_AMOUNT,2) AS CON_SERVICE_CHARGE_AMOUNT,ROUND(TOTAL_CTC_MONTHLY,2) AS TOTAL_CTC_MONTHLY,ROUND(TOTAL_CTC_YEARLY,2) AS TOTAL_CTC_YEARLY,1 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC_LEFT "
                    + "WHERE SUBSTRING(PAY_EMPID,1,6) IN ('BRD003') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING != '0000-00-00' "
                    + "UNION ALL "
                    + " SELECT "
                    + "'TOTAL' AS PAY_EMPID, CONCAT('TOTAL NO. (',COUNT(*),')') AS EMP_NAME,'TOTAL' AS DATE_OF_BIRTH,'TOTAL' AS DATE_OF_JOINING,'TOTAL' AS DATE_OF_LEAVING,'TOTAL' AS CATEGORY,CONCAT(DEPARTMENT, '  TOTAL') AS DEPARTMENT,'TOTAL' AS GRADE "
                    + ",ROUND(SUM(BASIC_PAY),2) AS BASIC_PAY,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(CON_SERVICE_CHARGE_AMOUNT),2) AS CON_SERVICE_CHARGE_AMOUNT,ROUND(SUM(TOTAL_CTC_MONTHLY),2) AS TOTAL_CTC_MONTHLY,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC_YEARLY,2 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC_LEFT "
                    + "WHERE SUBSTRING(PAY_EMPID,1,6) IN ('BRD003') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING != '0000-00-00' "
                    + "GROUP BY DEPARTMENT "
                    + "UNION ALL "
                    + " SELECT "
                    + "'GRAND TOTAL' AS PAY_EMPID,CONCAT('TOTAL NO. (',COUNT(*),')')  AS EMP_NAME,'GRAND TOTAL' AS DATE_OF_BIRTH,'GRAND TOTAL' AS DATE_OF_JOINING,'GRAND TOTAL' AS DATE_OF_LEAVING,'GRAND TOTAL' AS CATEGORY,'ZZ.GRAND TOTAL' AS DEPARTMENT,'GRAND TOTAL' AS GRADE "
                    + ",ROUND(SUM(BASIC_PAY),2) AS BASIC_PAY,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(CON_SERVICE_CHARGE_AMOUNT),2) AS CON_SERVICE_CHARGE_AMOUNT,ROUND(SUM(TOTAL_CTC_MONTHLY),2) AS TOTAL_CTC_MONTHLY,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC_YEARLY,2 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC_LEFT "
                    + "WHERE SUBSTRING(PAY_EMPID,1,6) IN ('BRD003') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING != '0000-00-00' "
                    + ") AS M "
                    + "ORDER BY DEPARTMENT,S,PAY_EMPID";

//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PAY_EMPID");
                    p++;
                    rowData[p] = rsTmp.getString("EMP_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("DATE_OF_JOINING");
                    p++;
                    rowData[p] = rsTmp.getString("DATE_OF_LEAVING");
                    p++;
                    rowData[p] = rsTmp.getString("CATEGORY");
                    p++;
                    rowData[p] = rsTmp.getString("DEPARTMENT");
                    p++;
                    rowData[p] = rsTmp.getString("BASIC_PAY");
                    p++;
                    rowData[p] = rsTmp.getString("BONUS_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("PF_EMPL_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("ESIC_EMP_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("CON_SERVICE_CHARGE_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_MONTHLY");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_YEARLY");
                    p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    
    private void FormatGridRT() {
        try {
            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Emp Code\",'' AS \"Employee Name\","
                    + "'' AS \"Date of Birth\",'' AS \"Date of Join\",'' AS \"Category\",'' AS \"Department\",'' AS \"Designation\","
                    + "'' AS \"Retainer Fee\",'' AS \"CTC(Monthly) Amount\",'' AS \"CTC(Yearly) Amount\","
                    + "'' AS \"RUNTIME\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
                DataModel.SetReadOnly(i);
            }
            DataModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void FormatGridExRT() {
        try {
            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Emp Code\",'' AS \"Employee Name\","
                    + "'' AS \"Date of Birth\",'' AS \"Date of Join\",'' AS \"Date of Leave\",'' AS \"Category\",'' AS \"Department\",'' AS \"Designation\","
                    + "'' AS \"Retainer Fee\",'' AS \"CTC(Monthly) Amount\",'' AS \"CTC(Yearly) Amount\","
                    + "'' AS \"RUNTIME\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
                DataModel.SetReadOnly(i);
            }
            DataModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    
    private void GenerateRT() {
        try {
            String cndtn="";
            String grp_cndtn="";
            if(!txtEmpCode.getText().trim().equals("")){
                String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
                cndtn+= " AND PAY_EMPID='"+txtEmpCode.getText().trim()+"' ";
            }
//            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
//                grp_cndtn += " AND SDML_DEPT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
//            }
            if (!txtDeptCode.getText().trim().equals("")) {                
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }
            
            FormatGridRT(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT *,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME FROM "
                    + "( "
                    + "SELECT "
                    + "PAY_EMPID,EMP_NAME,DATE_FORMAT(DATE_OF_BIRTH ,'%d/%m/%Y') AS DATE_OF_BIRTH,DATE_FORMAT(DATE_OF_JOINING ,'%d/%m/%Y') AS DATE_OF_JOINING,CATEGORY,DEPARTMENT,DESIGNATION,COALESCE(GRADE,'') GRADE,ROUND(RETAINER_FEE,2) AS RETAINER_FEE,ROUND(TOTAL_CTC_MONTHLY,2) AS TOTAL_CTC_MONTHLY,ROUND(TOTAL_CTC_YEARLY,2) AS TOTAL_CTC_YEARLY,1 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPID,1,5) IN ('BRD50','BRD60') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING = '0000-00-00' "
                    + "UNION ALL "
                    + "SELECT "
                    + "'TOTAL' AS PAY_EMPID, CONCAT('TOTAL NO. (',COUNT(*),')') AS EMP_NAME,'TOTAL' AS DATE_OF_BIRTH,'TOTAL' AS DATE_OF_JOINING,'TOTAL' AS CATEGORY,CONCAT(DEPARTMENT, '  TOTAL') AS DEPARTMENT,'TOTAL' AS DESIGNATION,'TOTAL' AS GRADE,ROUND(SUM(RETAINER_FEE),2) AS RETAINER_FEE,ROUND(SUM(TOTAL_CTC_MONTHLY),2) AS TOTAL_CTC_MONTHLY,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC_YEARLY,2 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPID,1,5) IN ('BRD50','BRD60') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING = '0000-00-00' "
                    + "GROUP BY DEPARTMENT "
                    + "UNION ALL "
                    + "SELECT "
                    + "'GRAND TOTAL' AS PAY_EMPID,CONCAT('TOTAL NO. (',COUNT(*),')')  AS EMP_NAME,'GRAND TOTAL' AS DATE_OF_BIRTH,'GRAND TOTAL' AS DATE_OF_JOINING,'GRAND TOTAL' AS CATEGORY,'ZZ.GRAND TOTAL' AS DEPARTMENT,'GRAND TOTAL' AS DESIGNATION,'GRAND TOTAL' AS GRADE,ROUND(SUM(RETAINER_FEE),2) AS RETAINER_FEE,ROUND(SUM(TOTAL_CTC_MONTHLY),2) AS TOTAL_CTC_MONTHLY,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC_YEARLY,2 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPID,1,5) IN ('BRD50','BRD60') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING = '0000-00-00' "
                    + ") AS M "
                    + "ORDER BY DEPARTMENT,S,PAY_EMPID";

//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PAY_EMPID");
                    p++;
                    rowData[p] = rsTmp.getString("EMP_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("DATE_OF_BIRTH");
                    p++;
                    rowData[p] = rsTmp.getString("DATE_OF_JOINING");
                    p++;
                    rowData[p] = rsTmp.getString("CATEGORY");
                    p++;
                    rowData[p] = rsTmp.getString("DEPARTMENT");
                    p++;
                    rowData[p] = rsTmp.getString("DESIGNATION");
                    p++;
                    rowData[p] = rsTmp.getString("RETAINER_FEE");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_MONTHLY");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_YEARLY");
                    p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateExRT() {
        try {
            String cndtn="";
            String grp_cndtn="";
            if(!txtEmpCode.getText().trim().equals("")){
                String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
                cndtn+= " AND PAY_EMPID='"+txtEmpCode.getText().trim()+"' ";
            }
//            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
//                grp_cndtn += " AND SDML_DEPT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
//            }
            if (!txtDeptCode.getText().trim().equals("")) {             
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }
            FormatGridExRT(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT *,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME FROM "
                    + "( "
                    + "SELECT "
                    + "PAY_EMPID,EMP_NAME,DATE_FORMAT(DATE_OF_BIRTH ,'%d/%m/%Y') AS DATE_OF_BIRTH,DATE_FORMAT(DATE_OF_JOINING ,'%d/%m/%Y') AS DATE_OF_JOINING,DATE_FORMAT(DATE_OF_LEAVING ,'%d/%m/%Y') AS DATE_OF_LEAVING,CATEGORY,DEPARTMENT,DESIGNATION,COALESCE(GRADE,'') GRADE,ROUND(RETAINER_FEE,2) AS RETAINER_FEE,ROUND(TOTAL_CTC_MONTHLY,2) AS TOTAL_CTC_MONTHLY,ROUND(TOTAL_CTC_YEARLY,2) AS TOTAL_CTC_YEARLY,1 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC_LEFT "
                    + "WHERE SUBSTRING(PAY_EMPID,1,5) IN ('BRD50','BRD60') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING != '0000-00-00' "
                    + "UNION ALL "
                    + "SELECT "
                    + "'TOTAL' AS PAY_EMPID, CONCAT('TOTAL NO. (',COUNT(*),')') AS EMP_NAME,'TOTAL' AS DATE_OF_BIRTH,'TOTAL' AS DATE_OF_JOINING,'TOTAL' AS DATE_OF_LEAVING,'TOTAL' AS CATEGORY,CONCAT(DEPARTMENT, '  TOTAL') AS DEPARTMENT,'TOTAL' AS DESIGNATION,'TOTAL' AS GRADE,ROUND(SUM(RETAINER_FEE),2) AS RETAINER_FEE,ROUND(SUM(TOTAL_CTC_MONTHLY),2) AS TOTAL_CTC_MONTHLY,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC_YEARLY,2 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC_LEFT "
                    + "WHERE SUBSTRING(PAY_EMPID,1,5) IN ('BRD50','BRD60') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING != '0000-00-00' "
                    + "GROUP BY DEPARTMENT "
                    + "UNION ALL "
                    + "SELECT "
                    + "'GRAND TOTAL' AS PAY_EMPID,CONCAT('TOTAL NO. (',COUNT(*),')')  AS EMP_NAME,'GRAND TOTAL' AS DATE_OF_BIRTH,'GRAND TOTAL' AS DATE_OF_JOINING,'GRAND TOTAL' AS DATE_OF_LEAVING,'GRAND TOTAL' AS CATEGORY,'ZZ.GRAND TOTAL' AS DEPARTMENT,'GRAND TOTAL' AS DESIGNATION,'GRAND TOTAL' AS GRADE,ROUND(SUM(RETAINER_FEE),2) AS RETAINER_FEE,ROUND(SUM(TOTAL_CTC_MONTHLY),2) AS TOTAL_CTC_MONTHLY,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC_YEARLY,2 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC_LEFT "
                    + "WHERE SUBSTRING(PAY_EMPID,1,5) IN ('BRD50','BRD60') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING != '0000-00-00' "
                    + ") AS M "
                    + "ORDER BY DEPARTMENT,S,PAY_EMPID";

//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PAY_EMPID");
                    p++;
                    rowData[p] = rsTmp.getString("EMP_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("DATE_OF_BIRTH");
                    p++;
                    rowData[p] = rsTmp.getString("DATE_OF_JOINING");
                    p++;
                    rowData[p] = rsTmp.getString("DATE_OF_LEAVING");
                    p++;
                    rowData[p] = rsTmp.getString("CATEGORY");
                    p++;
                    rowData[p] = rsTmp.getString("DEPARTMENT");
                    p++;
                    rowData[p] = rsTmp.getString("DESIGNATION");
                    p++;
                    rowData[p] = rsTmp.getString("RETAINER_FEE");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_MONTHLY");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_YEARLY");
                    p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    
    private void FormatGridST() {
        try {
            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Emp Code\",'' AS \"Employee Name\","
                    + "'' AS \"Date of Birth\",'' AS \"Date of Join\",'' AS \"Category\",'' AS \"Department\",'' AS \"Designation\",'' AS \"Grade\","
                    + "'' AS \"Basic\",'' AS \"DA\",'' AS \"Personal Pay\",'' AS \"HRA\",'' AS \"Award HRA\","
                    + "'' AS \"Conveyance. Alw.\",'' AS \"Electricity Alw.\",'' AS \"Magazine Alw.\","
                    + "'' AS \"Performance Alw.\",'' AS \"Medical/Edu./Hotel Alw.\","
                    + "'' AS \"Bonus Amount\",'' AS \"PF Contribution\",'' AS \"ESIC Contribution\","
                    + "'' AS \"Gratuity Amount\",'' AS \"Inflation Amount\",'' AS \"Super Annuation Amount\","
                    + "'' AS \"CTC(Monthly) Amount\",'' AS \"CTC(Yearly) Amount\","
                    + "'' AS \"RUNTIME\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
                DataModel.SetReadOnly(i);
            }
            DataModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void FormatGridExST() {
        try {
            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Emp Code\",'' AS \"Employee Name\","
                    + "'' AS \"Date of Birth\",'' AS \"Date of Join\",'' AS \"Date of Leave\",'' AS \"Category\",'' AS \"Department\",'' AS \"Designation\",'' AS \"Grade\","
                    + "'' AS \"Basic\",'' AS \"DA\",'' AS \"Personal Pay\",'' AS \"HRA\",'' AS \"Award HRA\","
                    + "'' AS \"Conveyance. Alw.\",'' AS \"Electricity Alw.\",'' AS \"Magazine Alw.\","
                    + "'' AS \"Performance Alw.\",'' AS \"Medical/Edu./Hotel Alw.\","
                    + "'' AS \"Bonus Amount\",'' AS \"PF Contribution\",'' AS \"ESIC Contribution\","
                    + "'' AS \"Gratuity Amount\",'' AS \"Inflation Amount\",'' AS \"Super Annuation Amount\","
                    + "'' AS \"CTC(Monthly) Amount\",'' AS \"CTC(Yearly) Amount\","
                    + "'' AS \"RUNTIME\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
                DataModel.SetReadOnly(i);
            }
            DataModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    
    private void GenerateST() {
        try {
            String cndtn="";
            String grp_cndtn="";
            if(!txtEmpCode.getText().trim().equals("")){
                String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
                cndtn+= " AND PAY_EMPID='"+txtEmpCode.getText().trim()+"' ";
            }
//            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
//                grp_cndtn += " AND SDML_DEPT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
//            }
            if (!txtDeptCode.getText().trim().equals("")) {                
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }
            
            FormatGridST(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT *,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME FROM "
                    + "( "
                    + "SELECT "
                    + "PAY_EMPID,EMP_NAME,DATE_FORMAT(DATE_OF_BIRTH ,'%d/%m/%Y') AS DATE_OF_BIRTH,DATE_FORMAT(DATE_OF_JOINING ,'%d/%m/%Y') AS DATE_OF_JOINING,CATEGORY,DEPARTMENT,DESIGNATION,COALESCE(GRADE,'') GRADE,ROUND(BASIC_PAY,2) AS BASIC_PAY,ROUND(DA_INDEX,2) AS DA_INDEX,ROUND(PERSONAL_PAY,2) AS PERSONAL_PAY,ROUND(HRA,2) AS HRA,ROUND(AWARD_HRA,2) AS AWARD_HRA,ROUND(CONVEYANCE,2) AS CONVEYANCE,ROUND(ELECTRICITY,2) AS ELECTRICITY,ROUND(MAGAZINE,2) AS MAGAZINE,ROUND(PERFORMANCE_ALW,2) AS PERFORMANCE_ALW,ROUND(MED_EDU_HOT_AMT,2) AS MED_EDU_HOT_AMT,ROUND(BONUS_AMOUNT,2) AS BONUS_AMOUNT,ROUND(PF_EMPL_AMOUNT,2) AS PF_EMPL_AMOUNT,ROUND(ESIC_EMP_AMOUNT,2) AS ESIC_EMP_AMOUNT,ROUND(GRATUITY,2) AS GRATUITY,ROUND(INFLATION_AMOUNT,2) AS INFLATION_AMOUNT,ROUND(SUPER_ANNUATION_AMOUNT,2) AS SUPER_ANNUATION_AMOUNT,ROUND(TOTAL_CTC_MONTHLY,2) AS TOTAL_CTC_MONTHLY,ROUND(TOTAL_CTC_YEARLY,2) AS TOTAL_CTC_YEARLY,1 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPID,1,5) IN ('BRD10','BRD20') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING = '0000-00-00' "
                    + "UNION ALL "
                    + "SELECT "
                    + "'TOTAL' AS PAY_EMPID, CONCAT('TOTAL NO. (',COUNT(*),')') AS EMP_NAME,'TOTAL' AS DATE_OF_BIRTH,'TOTAL' AS DATE_OF_JOINING,'TOTAL' AS CATEGORY,CONCAT(DEPARTMENT, '  TOTAL') AS DEPARTMENT,'TOTAL' AS DESIGNATION,'TOTAL' AS GRADE,ROUND(SUM(BASIC_PAY),2) AS BASIC_PAY,ROUND(SUM(DA_INDEX),2) AS DA_INDEX,ROUND(SUM(PERSONAL_PAY),2) AS PERSONAL_PAY,ROUND(SUM(HRA),2) AS HRA,ROUND(SUM(AWARD_HRA),2) AS AWARD_HRA,ROUND(SUM(CONVEYANCE),2) AS CONVEYANCE,ROUND(SUM(ELECTRICITY),2) AS ELECTRICITY, ROUND(SUM(MAGAZINE),2) AS MAGAZINE, ROUND(SUM(PERFORMANCE_ALW),2) AS PERFORMANCE_ALW, ROUND(SUM(MED_EDU_HOT_AMT),2) AS MED_EDU_HOT_AMT, ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT, ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT, ROUND(SUM(GRATUITY),2) AS GRATUITY, ROUND(SUM(INFLATION_AMOUNT),2) AS INFLATION_AMOUNT,ROUND(SUM(SUPER_ANNUATION_AMOUNT),2) AS SUPER_ANNUATION_AMOUNT,ROUND(SUM(TOTAL_CTC_MONTHLY),2) AS TOTAL_CTC_MONTHLY,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC_YEARLY,2 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPID,1,5) IN ('BRD10','BRD20') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING = '0000-00-00' "
                    + "GROUP BY DEPARTMENT "
                    + "UNION ALL "
                    + "SELECT "
                    + "'GRAND TOTAL' AS PAY_EMPID,CONCAT('TOTAL NO. (',COUNT(*),')')  AS EMP_NAME,'GRAND TOTAL' AS DATE_OF_BIRTH,'GRAND TOTAL' AS DATE_OF_JOINING,'GRAND TOTAL' AS CATEGORY,'ZZ.GRAND TOTAL' AS DEPARTMENT,'GRAND TOTAL' AS DESIGNATION,'GRAND TOTAL' AS GRADE,ROUND(SUM(BASIC_PAY),2) AS BASIC_PAY,ROUND(SUM(DA_INDEX),2) AS DA_INDEX,ROUND(SUM(PERSONAL_PAY),2) AS PERSONAL_PAY,ROUND(SUM(HRA),2) AS HRA,ROUND(SUM(AWARD_HRA),2) AS AWARD_HRA,ROUND(SUM(CONVEYANCE),2) AS CONVEYANCE,ROUND(SUM(ELECTRICITY),2) AS ELECTRICITY, ROUND(SUM(MAGAZINE),2) AS MAGAZINE, ROUND(SUM(PERFORMANCE_ALW),2) AS PERFORMANCE_ALW, ROUND(SUM(MED_EDU_HOT_AMT),2) AS MED_EDU_HOT_AMT, ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT, ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT, ROUND(SUM(GRATUITY),2) AS GRATUITY, ROUND(SUM(INFLATION_AMOUNT),2) AS INFLATION_AMOUNT,ROUND(SUM(SUPER_ANNUATION_AMOUNT),2) AS SUPER_ANNUATION_AMOUNT,ROUND(SUM(TOTAL_CTC_MONTHLY),2) AS TOTAL_CTC_MONTHLY,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC_YEARLY,2 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC "
                    + "WHERE SUBSTRING(PAY_EMPID,1,5) IN ('BRD10','BRD20') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING = '0000-00-00' "
                    + ") AS M "
                    + "ORDER BY DEPARTMENT,S,PAY_EMPID";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PAY_EMPID");
                    p++;
                    rowData[p] = rsTmp.getString("EMP_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("DATE_OF_BIRTH");
                    p++;
                    rowData[p] = rsTmp.getString("DATE_OF_JOINING");
                    p++;
                    rowData[p] = rsTmp.getString("CATEGORY");
                    p++;
                    rowData[p] = rsTmp.getString("DEPARTMENT");
                    p++;
                    rowData[p] = rsTmp.getString("DESIGNATION");
                    p++;
                    rowData[p] = rsTmp.getString("GRADE");
                    p++;                    
                    rowData[p] = rsTmp.getString("BASIC_PAY");
                    p++;
                    rowData[p] = rsTmp.getString("DA_INDEX");
                    p++;
                    rowData[p] = rsTmp.getString("PERSONAL_PAY");
                    p++;
                    rowData[p] = rsTmp.getString("HRA");
                    p++;
                    rowData[p] = rsTmp.getString("AWARD_HRA");
                    p++;
                    rowData[p] = rsTmp.getString("CONVEYANCE");
                    p++;
                    rowData[p] = rsTmp.getString("ELECTRICITY");
                    p++;
                    rowData[p] = rsTmp.getString("MAGAZINE");
                    p++;
                    rowData[p] = rsTmp.getString("PERFORMANCE_ALW");
                    p++;
                    rowData[p] = rsTmp.getString("MED_EDU_HOT_AMT");
                    p++;
                    rowData[p] = rsTmp.getString("BONUS_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("PF_EMPL_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("ESIC_EMP_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("GRATUITY");
                    p++;
                    rowData[p] = rsTmp.getString("INFLATION_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("SUPER_ANNUATION_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_MONTHLY");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_YEARLY");
                    p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateExST() {
        try {
            String cndtn="";
            String grp_cndtn="";
            if(!txtEmpCode.getText().trim().equals("")){
                String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
                cndtn+= " AND PAY_EMPID='"+txtEmpCode.getText().trim()+"' ";
            }
//            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
//                grp_cndtn += " AND SDML_DEPT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
//            }
            if (!txtDeptCode.getText().trim().equals("")) {                
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }
            FormatGridExST(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT *,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME FROM "
                    + "( "
                    + "SELECT "
                    + "PAY_EMPID,EMP_NAME,DATE_FORMAT(DATE_OF_BIRTH ,'%d/%m/%Y') AS DATE_OF_BIRTH,DATE_FORMAT(DATE_OF_JOINING ,'%d/%m/%Y') AS DATE_OF_JOINING,DATE_FORMAT(DATE_OF_LEAVING ,'%d/%m/%Y') AS DATE_OF_LEAVING,CATEGORY,DEPARTMENT,DESIGNATION,COALESCE(GRADE,'') AS GRADE,ROUND(BASIC_PAY,2) AS BASIC_PAY,ROUND(DA_INDEX,2) AS DA_INDEX,ROUND(PERSONAL_PAY,2) AS PERSONAL_PAY,ROUND(HRA,2) AS HRA,ROUND(AWARD_HRA,2) AS AWARD_HRA,ROUND(CONVEYANCE,2) AS CONVEYANCE,ROUND(ELECTRICITY,2) AS ELECTRICITY,ROUND(MAGAZINE,2) AS MAGAZINE,ROUND(PERFORMANCE_ALW,2) AS PERFORMANCE_ALW,ROUND(MED_EDU_HOT_AMT,2) AS MED_EDU_HOT_AMT,ROUND(BONUS_AMOUNT,2) AS BONUS_AMOUNT,ROUND(PF_EMPL_AMOUNT,2) AS PF_EMPL_AMOUNT,ROUND(ESIC_EMP_AMOUNT,2) AS ESIC_EMP_AMOUNT,ROUND(GRATUITY,2) AS GRATUITY,ROUND(INFLATION_AMOUNT,2) AS INFLATION_AMOUNT,ROUND(SUPER_ANNUATION_AMOUNT,2) AS SUPER_ANNUATION_AMOUNT,ROUND(TOTAL_CTC_MONTHLY,2) AS TOTAL_CTC_MONTHLY,ROUND(TOTAL_CTC_YEARLY,2) AS TOTAL_CTC_YEARLY,1 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC_LEFT "
                    + "WHERE SUBSTRING(PAY_EMPID,1,5) IN ('BRD10','BRD20') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING != '0000-00-00' "
                    + "UNION ALL "
                    + "SELECT "
                    + "'TOTAL' AS PAY_EMPID, CONCAT('TOTAL NO. (',COUNT(*),')') AS EMP_NAME,'TOTAL' AS DATE_OF_BIRTH,'TOTAL' AS DATE_OF_JOINING,'TOTAL' AS DATE_OF_LEAVING,'TOTAL' AS CATEGORY,CONCAT(DEPARTMENT, '  TOTAL') AS DEPARTMENT,'TOTAL' AS DESIGNATION,'TOTAL' AS GRADE,ROUND(SUM(BASIC_PAY),2) AS BASIC_PAY,ROUND(SUM(DA_INDEX),2) AS DA_INDEX,ROUND(SUM(PERSONAL_PAY),2) AS PERSONAL_PAY,ROUND(SUM(HRA),2) AS HRA,ROUND(SUM(AWARD_HRA),2) AS AWARD_HRA,ROUND(SUM(CONVEYANCE),2) AS CONVEYANCE,ROUND(SUM(ELECTRICITY),2) AS ELECTRICITY, ROUND(SUM(MAGAZINE),2) AS MAGAZINE, ROUND(SUM(PERFORMANCE_ALW),2) AS PERFORMANCE_ALW, ROUND(SUM(MED_EDU_HOT_AMT),2) AS MED_EDU_HOT_AMT, ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT, ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT, ROUND(SUM(GRATUITY),2) AS GRATUITY, ROUND(SUM(INFLATION_AMOUNT),2) AS INFLATION_AMOUNT,ROUND(SUM(SUPER_ANNUATION_AMOUNT),2) AS SUPER_ANNUATION_AMOUNT,ROUND(SUM(TOTAL_CTC_MONTHLY),2) AS TOTAL_CTC_MONTHLY,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC_YEARLY,2 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC_LEFT "
                    + "WHERE SUBSTRING(PAY_EMPID,1,5) IN ('BRD10','BRD20') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING != '0000-00-00' "
                    + "GROUP BY DEPARTMENT "
                    + "UNION ALL "
                    + "SELECT "
                    + "'GRAND TOTAL' AS PAY_EMPID,CONCAT('TOTAL NO. (',COUNT(*),')')  AS EMP_NAME,'GRAND TOTAL' AS DATE_OF_BIRTH,'GRAND TOTAL' AS DATE_OF_JOINING,'GRAND TOTAL' AS DATE_OF_LEAVING,'GRAND TOTAL' AS CATEGORY,'ZZ.GRAND TOTAL' AS DEPARTMENT,'GRAND TOTAL' AS DESIGNATION,'GRAND TOTAL' AS GRADE,ROUND(SUM(BASIC_PAY),2) AS BASIC_PAY,ROUND(SUM(DA_INDEX),2) AS DA_INDEX,ROUND(SUM(PERSONAL_PAY),2) AS PERSONAL_PAY,ROUND(SUM(HRA),2) AS HRA,ROUND(SUM(AWARD_HRA),2) AS AWARD_HRA,ROUND(SUM(CONVEYANCE),2) AS CONVEYANCE,ROUND(SUM(ELECTRICITY),2) AS ELECTRICITY, ROUND(SUM(MAGAZINE),2) AS MAGAZINE, ROUND(SUM(PERFORMANCE_ALW),2) AS PERFORMANCE_ALW, ROUND(SUM(MED_EDU_HOT_AMT),2) AS MED_EDU_HOT_AMT, ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT, ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT,ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT, ROUND(SUM(GRATUITY),2) AS GRATUITY, ROUND(SUM(INFLATION_AMOUNT),2) AS INFLATION_AMOUNT,ROUND(SUM(SUPER_ANNUATION_AMOUNT),2) AS SUPER_ANNUATION_AMOUNT,ROUND(SUM(TOTAL_CTC_MONTHLY),2) AS TOTAL_CTC_MONTHLY,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC_YEARLY,2 AS S FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC_LEFT "
                    + "WHERE SUBSTRING(PAY_EMPID,1,5) IN ('BRD10','BRD20') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING != '0000-00-00' "
                    + ") AS M "
                    + "ORDER BY DEPARTMENT,S,PAY_EMPID";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PAY_EMPID");
                    p++;
                    rowData[p] = rsTmp.getString("EMP_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("DATE_OF_BIRTH");
                    p++;
                    rowData[p] = rsTmp.getString("DATE_OF_JOINING");
                    p++;
                    rowData[p] = rsTmp.getString("DATE_OF_LEAVING");
                    p++;
                    rowData[p] = rsTmp.getString("CATEGORY");
                    p++;
                    rowData[p] = rsTmp.getString("DEPARTMENT");
                    p++;
                    rowData[p] = rsTmp.getString("DESIGNATION");
                    p++;
                    rowData[p] = rsTmp.getString("GRADE");
                    p++;
                    rowData[p] = rsTmp.getString("BASIC_PAY");
                    p++;
                    rowData[p] = rsTmp.getString("DA_INDEX");
                    p++;
                    rowData[p] = rsTmp.getString("PERSONAL_PAY");
                    p++;
                    rowData[p] = rsTmp.getString("HRA");
                    p++;
                    rowData[p] = rsTmp.getString("AWARD_HRA");
                    p++;
                    rowData[p] = rsTmp.getString("CONVEYANCE");
                    p++;
                    rowData[p] = rsTmp.getString("ELECTRICITY");
                    p++;
                    rowData[p] = rsTmp.getString("MAGAZINE");
                    p++;
                    rowData[p] = rsTmp.getString("PERFORMANCE_ALW");
                    p++;
                    rowData[p] = rsTmp.getString("MED_EDU_HOT_AMT");
                    p++;
                    rowData[p] = rsTmp.getString("BONUS_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("PF_EMPL_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("ESIC_EMP_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("GRATUITY");
                    p++;
                    rowData[p] = rsTmp.getString("INFLATION_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("SUPER_ANNUATION_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_MONTHLY");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_YEARLY");
                    p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    
    private void FormatGridWT() {
        try {
            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Emp Code\",'' AS \"Employee Name\","
                    + "'' AS \"Date of Birth\",'' AS \"Date of Join\",'' AS \"Category\",'' AS \"Department\","
                    + "'' AS \"Basic\",'' AS \"DA\",'' AS \"Adhoc Pay\",'' AS \"Award HRA\", '' AS \"Wash. Alw.\","
                    + "'' AS \"Wash. Mth.\",'' AS \"Furnishing Amount\",'' AS \"Bonus Amount\","
                    + "'' AS \"PF Contribution\",'' AS \"ESIC Contribution\",'' AS \"Gratuity Amount\","
                    + "'' AS \"CTC(Monthly) Amount\",'' AS \"CTC(Yearly) Amount\","
                    + "'' AS \"RUNTIME\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
                DataModel.SetReadOnly(i);
            }
            DataModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void FormatGridExWT() {
        try {
            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Emp Code\",'' AS \"Employee Name\","
                    + "'' AS \"Date of Birth\",'' AS \"Date of Join\",'' AS \"Date of Leave\",'' AS \"Category\",'' AS \"Department\","
                    + "'' AS \"Basic\",'' AS \"DA\",'' AS \"Adhoc Pay\",'' AS \"Award HRA\", '' AS \"Wash. Alw.\","
                    + "'' AS \"Wash. Mth.\",'' AS \"Furnishing Amount\",'' AS \"Bonus Amount\","
                    + "'' AS \"PF Contribution\",'' AS \"ESIC Contribution\",'' AS \"Gratuity Amount\","
                    + "'' AS \"CTC(Monthly) Amount\",'' AS \"CTC(Yearly) Amount\","
                    + "'' AS \"RUNTIME\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
                DataModel.SetReadOnly(i);
            }
            DataModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    
    private void GenerateWT() {
        try {
            String cndtn="";
            String grp_cndtn="";
            if(!txtEmpCode.getText().trim().equals("")){
                String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
                cndtn+= " AND PAY_EMPID='"+txtEmpCode.getText().trim()+"' ";
            }
            if (!txtDeptCode.getText().trim().equals("")) {                
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }
            FormatGridWT(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT *,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME FROM "
                    + "( "
                    + "SELECT "
                    + "PAY_EMPID,EMP_NAME,DATE_FORMAT(DATE_OF_BIRTH ,'%d/%m/%Y') AS DATE_OF_BIRTH,DATE_FORMAT(DATE_OF_JOINING ,'%d/%m/%Y') AS DATE_OF_JOINING,CATEGORY,DEPARTMENT,ROUND(BASIC_PAY,2) AS BASIC_PAY,ROUND(DA_INDEX,2) AS DA_INDEX, "
                    + "ROUND(ADHOC_PAY,2) AS ADHOC_PAY,ROUND(AWARD_HRA,2) AS AWARD_HRA,ROUND(WASH_ALW,2) AS WASH_ALW,ROUND(WASH_MONTH,2) AS WASH_MONTH,ROUND(FURNISHING,2) AS FURNISHING,ROUND(BONUS_AMOUNT,2) AS BONUS_AMOUNT,ROUND(PF_EMPL_AMOUNT,2) AS PF_EMPL_AMOUNT, "
                    + "ROUND(ESIC_EMP_AMOUNT,2) AS ESIC_EMP_AMOUNT,ROUND(GRATUITY,2) AS GRATUITY,ROUND(TOTAL_CTC_MONTHLY,2) AS TOTAL_CTC_MONTHLY,ROUND(TOTAL_CTC_YEARLY,2) AS TOTAL_CTC_YEARLY,1 AS S "
                    + "FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC WHERE SUBSTRING(PAY_EMPID,1,5) IN ('BRD30') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING = '0000-00-00' "
                    + "UNION ALL "
                    + "SELECT "
                    + "'TOTAL' AS PAY_EMPID,'TOTAL' AS EMP_NAME,'TOTAL' AS DATE_OF_BIRTH,'TOTAL' AS DATE_OF_JOINING,'TOTAL' AS CATEGORY,CONCAT(DEPARTMENT, '  TOTAL') AS DEPARTMENT,ROUND(SUM(BASIC_PAY),2) AS BASIC_PAY,ROUND(SUM(DA_INDEX),2) AS DA_INDEX, "
                    + "ROUND(SUM(ADHOC_PAY),2) AS ADHOC_PAY,ROUND(SUM(AWARD_HRA),2) AS AWARD_HRA,ROUND(SUM(WASH_ALW),2) AS WASH_ALW,ROUND(SUM(WASH_MONTH),2) AS WASH_MONTH,ROUND(SUM(FURNISHING),2) AS FURNISHING,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT, "
                    + "ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(GRATUITY),2) AS GRATUITY,ROUND(SUM(TOTAL_CTC_MONTHLY),2) AS TOTAL_CTC_MONTHLY,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC_YEARLY ,2 AS S "
                    + "FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC WHERE SUBSTRING(PAY_EMPID,1,5) IN ('BRD30') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING = '0000-00-00' "
                    + "GROUP BY DEPARTMENT "
                    + "  "
                    + "UNION ALL "
                    + "SELECT 'GRAND TOTAL' AS PAY_EMPID,'GRAND TOTAL' AS EMP_NAME,'GRAND TOTAL' AS DATE_OF_BIRTH,'GRAND TOTAL' AS DATE_OF_JOINING,'GRAND TOTAL' AS CATEGORY,'ZZ.GRAND TOTAL' AS DEPARTMENT,ROUND(SUM(BASIC_PAY),2) AS BASIC_PAY,ROUND(SUM(DA_INDEX),2) AS DA_INDEX, "
                    + "ROUND(SUM(ADHOC_PAY),2) AS ADHOC_PAY,ROUND(SUM(AWARD_HRA),2) AS AWARD_HRA,ROUND(SUM(WASH_ALW),2) AS WASH_ALW,ROUND(SUM(WASH_MONTH),2) AS WASH_MONTH,ROUND(SUM(FURNISHING),2) AS FURNISHING,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT, "
                    + "ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(GRATUITY),2) AS GRATUITY,ROUND(SUM(TOTAL_CTC_MONTHLY),2) AS TOTAL_CTC_MONTHLY,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC_YEARLY ,3 AS S "
                    + "FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC WHERE SUBSTRING(PAY_EMPID,1,5) IN ('BRD30') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING = '0000-00-00') AS M "
                    + "ORDER BY DEPARTMENT,S,PAY_EMPID";

//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PAY_EMPID");
                    p++;
                    rowData[p] = rsTmp.getString("EMP_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("DATE_OF_BIRTH");
                    p++;
                    rowData[p] = rsTmp.getString("DATE_OF_JOINING");
                    p++;
                    rowData[p] = rsTmp.getString("CATEGORY");
                    p++;
                    rowData[p] = rsTmp.getString("DEPARTMENT");
                    p++;
                    rowData[p] = rsTmp.getString("BASIC_PAY");
                    p++;
                    rowData[p] = rsTmp.getString("DA_INDEX");
                    p++;
                    rowData[p] = rsTmp.getString("ADHOC_PAY");
                    p++;
                    rowData[p] = rsTmp.getString("AWARD_HRA");
                    p++;
                    rowData[p] = rsTmp.getString("WASH_ALW");
                    p++;
                    rowData[p] = rsTmp.getString("WASH_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("FURNISHING");
                    p++;
                    rowData[p] = rsTmp.getString("BONUS_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("PF_EMPL_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("ESIC_EMP_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("GRATUITY");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_MONTHLY");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_YEARLY");
                    p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateExWT() {
        try {
            String cndtn="";
            String grp_cndtn="";
            if(!txtEmpCode.getText().trim().equals("")){
                String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
                cndtn+= " AND PAY_EMPID='"+txtEmpCode.getText().trim()+"' ";
            }
            //if (!cmbDept.getSelectedItem().equals("Select Dept")) {
                //grp_cndtn += " AND SDML_DEPT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";            
            //}
            if (!txtDeptCode.getText().trim().equals("")) {                
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }
            
            FormatGridExWT(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT *,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME FROM "
                    + "( "
                    + "SELECT "
                    + "PAY_EMPID,EMP_NAME,DATE_FORMAT(DATE_OF_BIRTH ,'%d/%m/%Y') AS DATE_OF_BIRTH,DATE_FORMAT(DATE_OF_JOINING ,'%d/%m/%Y') AS DATE_OF_JOINING,DATE_FORMAT(DATE_OF_LEAVING ,'%d/%m/%Y') AS DATE_OF_LEAVING,CATEGORY,DEPARTMENT,ROUND(BASIC_PAY,2) AS BASIC_PAY,ROUND(DA_INDEX,2) AS DA_INDEX, "
                    + "ROUND(ADHOC_PAY,2) AS ADHOC_PAY,ROUND(AWARD_HRA,2) AS AWARD_HRA,ROUND(WASH_ALW,2) AS WASH_ALW,ROUND(WASH_MONTH,2) AS WASH_MONTH,ROUND(FURNISHING,2) AS FURNISHING,ROUND(BONUS_AMOUNT,2) AS BONUS_AMOUNT,ROUND(PF_EMPL_AMOUNT,2) AS PF_EMPL_AMOUNT, "
                    + "ROUND(ESIC_EMP_AMOUNT,2) AS ESIC_EMP_AMOUNT,ROUND(GRATUITY,2) AS GRATUITY,ROUND(TOTAL_CTC_MONTHLY,2) AS TOTAL_CTC_MONTHLY,ROUND(TOTAL_CTC_YEARLY,2) AS TOTAL_CTC_YEARLY,1 AS S "
                    + "FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC WHERE SUBSTRING(PAY_EMPID,1,5) IN ('BRD30') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING != '0000-00-00' "
                    + "UNION ALL "
                    + "SELECT "
                    + "'TOTAL' AS PAY_EMPID,'TOTAL' AS EMP_NAME,'TOTAL' AS DATE_OF_BIRTH,'TOTAL' AS DATE_OF_JOINING,'TOTAL' AS DATE_OF_LEAVING,'TOTAL' AS CATEGORY,CONCAT(DEPARTMENT, '  TOTAL') AS DEPARTMENT,ROUND(SUM(BASIC_PAY),2) AS BASIC_PAY,ROUND(SUM(DA_INDEX),2) AS DA_INDEX, "
                    + "ROUND(SUM(ADHOC_PAY),2) AS ADHOC_PAY,ROUND(SUM(AWARD_HRA),2) AS AWARD_HRA,ROUND(SUM(WASH_ALW),2) AS WASH_ALW,ROUND(SUM(WASH_MONTH),2) AS WASH_MONTH,ROUND(SUM(FURNISHING),2) AS FURNISHING,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT, "
                    + "ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(GRATUITY),2) AS GRATUITY,ROUND(SUM(TOTAL_CTC_MONTHLY),2) AS TOTAL_CTC_MONTHLY,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC_YEARLY ,2 AS S "
                    + "FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC WHERE SUBSTRING(PAY_EMPID,1,5) IN ('BRD30') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING != '0000-00-00' "
                    + "GROUP BY DEPARTMENT "
                    + "  "
                    + "UNION ALL "
                    + "SELECT 'GRAND TOTAL' AS PAY_EMPID,'GRAND TOTAL' AS EMP_NAME,'GRAND TOTAL' AS DATE_OF_BIRTH,'GRAND TOTAL' AS DATE_OF_JOINING,'GRAND TOTAL' AS DATE_OF_LEAVING,'GRAND TOTAL' AS CATEGORY,'ZZ.GRAND TOTAL' AS DEPARTMENT,ROUND(SUM(BASIC_PAY),2) AS BASIC_PAY,ROUND(SUM(DA_INDEX),2) AS DA_INDEX, "
                    + "ROUND(SUM(ADHOC_PAY),2) AS ADHOC_PAY,ROUND(SUM(AWARD_HRA),2) AS AWARD_HRA,ROUND(SUM(WASH_ALW),2) AS WASH_ALW,ROUND(SUM(WASH_MONTH),2) AS WASH_MONTH,ROUND(SUM(FURNISHING),2) AS FURNISHING,ROUND(SUM(BONUS_AMOUNT),2) AS BONUS_AMOUNT,ROUND(SUM(PF_EMPL_AMOUNT),2) AS PF_EMPL_AMOUNT, "
                    + "ROUND(SUM(ESIC_EMP_AMOUNT),2) AS ESIC_EMP_AMOUNT,ROUND(SUM(GRATUITY),2) AS GRATUITY,ROUND(SUM(TOTAL_CTC_MONTHLY),2) AS TOTAL_CTC_MONTHLY,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC_YEARLY ,3 AS S "
                    + "FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC WHERE SUBSTRING(PAY_EMPID,1,5) IN ('BRD30') "+cndtn+grp_cndtn
                    + "AND DATE_OF_LEAVING != '0000-00-00') AS M "
                    + "ORDER BY DEPARTMENT,S,PAY_EMPID";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PAY_EMPID");
                    p++;
                    rowData[p] = rsTmp.getString("EMP_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("DATE_OF_BIRTH");
                    p++;
                    rowData[p] = rsTmp.getString("DATE_OF_JOINING");
                    p++;
                    rowData[p] = rsTmp.getString("DATE_OF_LEAVING");
                    p++;
                    rowData[p] = rsTmp.getString("CATEGORY");
                    p++;
                    rowData[p] = rsTmp.getString("DEPARTMENT");
                    p++;
                    rowData[p] = rsTmp.getString("BASIC_PAY");
                    p++;
                    rowData[p] = rsTmp.getString("DA_INDEX");
                    p++;
                    rowData[p] = rsTmp.getString("ADHOC_PAY");
                    p++;
                    rowData[p] = rsTmp.getString("AWARD_HRA");
                    p++;
                    rowData[p] = rsTmp.getString("WASH_ALW");
                    p++;
                    rowData[p] = rsTmp.getString("WASH_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("FURNISHING");
                    p++;
                    rowData[p] = rsTmp.getString("BONUS_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("PF_EMPL_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("ESIC_EMP_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("GRATUITY");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_MONTHLY");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_YEARLY");
                    p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    
    private void FormatGridDeptWise() {
        try {
            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \" \",'' AS \"Department\","
                    + "'' AS \"Staff Nos.\",'' AS \"Staff Amount\",'' AS \"Retainer Nos.\",'' AS \"Retainer Amount\","
                    + "'' AS \"Total Nos.(Staff+Retainer)\",'' AS \"Total Amount(Staff+Retainer)\","
                    + "'' AS \"Permanent Workers Nos.\",'' AS \"Permanent Workers Amount\","
                    + "'' AS \"Badli Workers Nos.\",'' AS \"Badli Workers Amount\","
                    + "'' AS \"Total Workers Nos.\",'' AS \"Total Workers Amount\","
                    + "'' AS \"KMS Cont Nos.\",'' AS \"KMS Cont Amount\",'' AS \"SmartHR Cont Nos.\",'' AS \"SmartHR Cont Amount\","
                    + "'' AS \"Total Nos.(KMS+SHR)\",'' AS \"Total Amount(KMS+SHR)\","
                    + "'' AS \"Grand Total Nos.\",'' AS \"Grand Total Amount\","
                    + "'' AS \"RUNTIME\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
                DataModel.SetReadOnly(i);
            }
            DataModel.TableReadOnly(true);
            final TableColumnModel columnModel = Table.getColumnModel();
            for (int column = 0; column < Table.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table.getRowCount(); row++) {
                    TableCellRenderer renderer = Table.getCellRenderer(row, column);
                    Component comp = Table.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateDeptT() {
        try {
            String cndtn="";
            String grp_cndtn="";
            if(!txtEmpCode.getText().trim().equals("")){
                String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
                cndtn+= " AND PAY_EMPCODE='"+txtEmpCode.getText().trim()+"' ";
            }
//            if (!cmbDept.getSelectedItem().equals("Select Dept")) {
//                grp_cndtn += " AND SDML_DEPT= " + modelDept.getCode(cmbDept.getSelectedIndex()) + " ";
//            }
            if (!txtDeptCode.getText().trim().equals("")) {                
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }
            
            FormatGridDeptWise(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT DEPT_HEAD,DEPT_GROUP, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_STAFF' THEN 1 ELSE 0 END,0)) AS CNT_STAFF, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_STAFF' THEN TOTAL_CTC_YEARLY ELSE 0 END ,0)),2) AS CTC_STAFF, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_RETAINER'THEN 1 ELSE 0 END,0)) AS CNT_RETAINER, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_RETAINER' THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS CTC_RETAINER, "
                    + "SUM(COALESCE( CASE WHEN SDML_CATG IN ('BRD_RETAINER','BRD_STAFF') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_STF_RET, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_RETAINER','BRD_STAFF')  THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS TOTAL_CTC_STF_RET, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_PW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER') THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS CTC_PW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_BADLI_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_BW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_BADLI_WORKER') THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS CTC_BW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER','BRD_BADLI_WORKER') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_PW_BW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER','BRD_BADLI_WORKER') THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS TOTAL_CTC_PW_BW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('KMS_WORKER') THEN 1 ELSE 0 END ,0)) AS CNT_KMS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('KMS_WORKER') THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS CTC_KMS, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_HRS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER') THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS CTC_HRS, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER','KMS_WORKER') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_KMS_HRS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER','KMS_WORKER') THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS TOTAL_CTC_KMS_HRS, "
                    + "COUNT(*) AS TOTAL_CNT,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME "
                    + "FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC "
                    + "WHERE DATE_OF_LEAVING = '0000-00-00' "
                    + "GROUP BY DEPT_HEAD,DEPT_GROUP "
                    + "UNION ALL "
                    + "SELECT DEPT_HEAD,CONCAT('99. TOTAL ',DEPT_HEAD ) AS DEPT_GROUP, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_STAFF' THEN 1 ELSE 0 END,0)) AS CNT_STAFF, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_STAFF' THEN TOTAL_CTC_YEARLY ELSE 0 END ,0)),2) AS CTC_STAFF, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_RETAINER'THEN 1 ELSE 0 END,0)) AS CNT_RETAINER, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_RETAINER' THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS CTC_RETAINER, "
                    + "SUM(COALESCE( CASE WHEN SDML_CATG IN ('BRD_RETAINER','BRD_STAFF') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_STF_RET, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_RETAINER','BRD_STAFF')  THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS TOTAL_CTC_STF_RET, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_PW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER') THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS CTC_PW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_BADLI_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_BW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_BADLI_WORKER') THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS CTC_BW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER','BRD_BADLI_WORKER') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_PW_BW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER','BRD_BADLI_WORKER') THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS TOTAL_CTC_PW_BW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('KMS_WORKER') THEN 1 ELSE 0 END ,0)) AS CNT_KMS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('KMS_WORKER') THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS CTC_KMS, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_HRS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER') THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS CTC_HRS, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER','KMS_WORKER') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_KMS_HRS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER','KMS_WORKER') THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS TOTAL_CTC_KMS_HRS, "
                    + "COUNT(*) AS TOTAL_CNT,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME "
                    + "FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC "
                    + "WHERE DATE_OF_LEAVING = '0000-00-00' "
                    + "GROUP BY DEPT_HEAD "
                    + "UNION ALL "
                    + "SELECT 'Z.GRAND TOTAL' AS DEPT_HEAD,'Z.GRAND TOTAL ' AS DEPT_GROUP, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_STAFF' THEN 1 ELSE 0 END,0)) AS CNT_STAFF, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_STAFF' THEN TOTAL_CTC_YEARLY ELSE 0 END ,0)),2) AS CTC_STAFF, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_RETAINER'THEN 1 ELSE 0 END,0)) AS CNT_RETAINER, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_RETAINER' THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS CTC_RETAINER, "
                    + "SUM(COALESCE( CASE WHEN SDML_CATG IN ('BRD_RETAINER','BRD_STAFF') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_STF_RET, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_RETAINER','BRD_STAFF')  THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS TOTAL_CTC_STF_RET, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_PW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER') THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS CTC_PW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_BADLI_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_BW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_BADLI_WORKER') THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS CTC_BW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER','BRD_BADLI_WORKER') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_PW_BW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER','BRD_BADLI_WORKER') THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS TOTAL_CTC_PW_BW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('KMS_WORKER') THEN 1 ELSE 0 END ,0)) AS CNT_KMS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('KMS_WORKER') THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS CTC_KMS, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_HRS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER') THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS CTC_HRS, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER','KMS_WORKER') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_KMS_HRS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER','KMS_WORKER') THEN TOTAL_CTC_YEARLY ELSE 0 END,0)),2) AS TOTAL_CTC_KMS_HRS, "
                    + "COUNT(*) AS TOTAL_CNT,ROUND(SUM(TOTAL_CTC_YEARLY),2) AS TOTAL_CTC,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME "
                    + "FROM SDMLATTPAY.ATTPAY_EMPMST_FROM_SPP_CTC "
                    + "WHERE DATE_OF_LEAVING = '0000-00-00' "
                    + "ORDER BY DEPT_HEAD,DEPT_GROUP";
                    
//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("DEPT_HEAD");
                    p++;
                    rowData[p] = rsTmp.getString("DEPT_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("CNT_STAFF");
                    p++;
                    rowData[p] = rsTmp.getString("CTC_STAFF");
                    p++;
                    rowData[p] = rsTmp.getString("CNT_RETAINER");
                    p++;
                    rowData[p] = rsTmp.getString("CTC_RETAINER");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CNT_STF_RET");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_STF_RET");
                    p++;
                    rowData[p] = rsTmp.getString("CNT_PW");
                    p++;
                    rowData[p] = rsTmp.getString("CTC_PW");
                    p++;
                    rowData[p] = rsTmp.getString("CNT_BW");
                    p++;
                    rowData[p] = rsTmp.getString("CTC_BW");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CNT_PW_BW");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_PW_BW");
                    p++;
                    rowData[p] = rsTmp.getString("CNT_KMS");
                    p++;
                    rowData[p] = rsTmp.getString("CTC_KMS");
                    p++;
                    rowData[p] = rsTmp.getString("CNT_HRS");
                    p++;
                    rowData[p] = rsTmp.getString("CTC_HRS");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CNT_KMS_HRS");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_KMS_HRS");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CNT");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC");
                    p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateDeptA() {
        try {
            //String cndtn="";
            String grp_cndtn="";
            //if(!txtEmpCode.getText().trim().equals("")){
            //    String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
            //    cndtn+= " AND PAY_EMPCODE='"+txtEmpCode.getText().trim()+"' ";
            //}
            if (!txtDeptCode.getText().trim().equals("")) {                
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }
            FormatGridDeptWise(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT DEPT_HEAD,DEPT_GROUP, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_STAFF' THEN 1 ELSE 0 END,0)) AS CNT_STAFF, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_STAFF' THEN TOTAL_CTC_ACTUAL ELSE 0 END ,0)),2) AS CTC_STAFF, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_RETAINER'THEN 1 ELSE 0 END,0)) AS CNT_RETAINER, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_RETAINER' THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_RETAINER, "
                    + "SUM(COALESCE( CASE WHEN SDML_CATG IN ('BRD_RETAINER','BRD_STAFF') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_STF_RET, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_RETAINER','BRD_STAFF')  THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS TOTAL_CTC_STF_RET, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_PW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_PW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_BADLI_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_BW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_BADLI_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_BW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER','BRD_BADLI_WORKER') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_PW_BW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER','BRD_BADLI_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS TOTAL_CTC_PW_BW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('KMS_WORKER') THEN 1 ELSE 0 END ,0)) AS CNT_KMS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('KMS_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_KMS, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_HRS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_HRS, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER','KMS_WORKER') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_KMS_HRS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER','KMS_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS TOTAL_CTC_KMS_HRS, "
                    + "COUNT(*) AS TOTAL_CNT,ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME "
                    + "FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE PAY_YEAR =  " + txtYear.getText() + " AND PAY_MONTH= " + cmbMonth.getSelectedItem() + " AND TOTAL_CTC_ACTUAL>0 "+grp_cndtn
                    + "GROUP BY DEPT_HEAD,DEPT_GROUP "
                    + "UNION ALL "
                    + "SELECT DEPT_HEAD,CONCAT('99. TOTAL ',DEPT_HEAD ) AS DEPT_GROUP, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_STAFF' THEN 1 ELSE 0 END,0)) AS CNT_STAFF, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_STAFF' THEN TOTAL_CTC_ACTUAL ELSE 0 END ,0)),2) AS CTC_STAFF, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_RETAINER'THEN 1 ELSE 0 END,0)) AS CNT_RETAINER, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_RETAINER' THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_RETAINER, "
                    + "SUM(COALESCE( CASE WHEN SDML_CATG IN ('BRD_RETAINER','BRD_STAFF') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_STF_RET, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_RETAINER','BRD_STAFF')  THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS TOTAL_CTC_STF_RET, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_PW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_PW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_BADLI_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_BW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_BADLI_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_BW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER','BRD_BADLI_WORKER') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_PW_BW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER','BRD_BADLI_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS TOTAL_CTC_PW_BW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('KMS_WORKER') THEN 1 ELSE 0 END ,0)) AS CNT_KMS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('KMS_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_KMS, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_HRS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_HRS, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER','KMS_WORKER') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_KMS_HRS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER','KMS_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS TOTAL_CTC_KMS_HRS, "
                    + "COUNT(*) AS TOTAL_CNT,ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME "
                    + "FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE PAY_YEAR =  " + txtYear.getText() + " AND PAY_MONTH= " + cmbMonth.getSelectedItem() + " AND TOTAL_CTC_ACTUAL>0 "+grp_cndtn
                    + "GROUP BY DEPT_HEAD "
                    + "UNION ALL "
                    + "SELECT 'Z.GRAND TOTAL' AS DEPT_HEAD,'Z.GRAND TOTAL ' AS DEPT_GROUP, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_STAFF' THEN 1 ELSE 0 END,0)) AS CNT_STAFF, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_STAFF' THEN TOTAL_CTC_ACTUAL ELSE 0 END ,0)),2) AS CTC_STAFF, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_RETAINER'THEN 1 ELSE 0 END,0)) AS CNT_RETAINER, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_RETAINER' THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_RETAINER, "
                    + "SUM(COALESCE( CASE WHEN SDML_CATG IN ('BRD_RETAINER','BRD_STAFF') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_STF_RET, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_RETAINER','BRD_STAFF')  THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS TOTAL_CTC_STF_RET, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_PW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_PW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_BADLI_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_BW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_BADLI_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_BW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER','BRD_BADLI_WORKER') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_PW_BW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER','BRD_BADLI_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS TOTAL_CTC_PW_BW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('KMS_WORKER') THEN 1 ELSE 0 END ,0)) AS CNT_KMS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('KMS_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_KMS, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_HRS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_HRS, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER','KMS_WORKER') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_KMS_HRS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER','KMS_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS TOTAL_CTC_KMS_HRS, "
                    + "COUNT(*) AS TOTAL_CNT,ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME "
                    + "FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE PAY_YEAR =  " + txtYear.getText() + " AND PAY_MONTH= " + cmbMonth.getSelectedItem() + " AND TOTAL_CTC_ACTUAL>0 "+grp_cndtn
                    + "ORDER BY DEPT_HEAD,DEPT_GROUP";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("DEPT_HEAD");
                    p++;
                    rowData[p] = rsTmp.getString("DEPT_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("CNT_STAFF");
                    p++;
                    rowData[p] = rsTmp.getString("CTC_STAFF");
                    p++;
                    rowData[p] = rsTmp.getString("CNT_RETAINER");
                    p++;
                    rowData[p] = rsTmp.getString("CTC_RETAINER");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CNT_STF_RET");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_STF_RET");
                    p++;
                    rowData[p] = rsTmp.getString("CNT_PW");
                    p++;
                    rowData[p] = rsTmp.getString("CTC_PW");
                    p++;
                    rowData[p] = rsTmp.getString("CNT_BW");
                    p++;
                    rowData[p] = rsTmp.getString("CTC_BW");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CNT_PW_BW");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_PW_BW");
                    p++;
                    rowData[p] = rsTmp.getString("CNT_KMS");
                    p++;
                    rowData[p] = rsTmp.getString("CTC_KMS");
                    p++;
                    rowData[p] = rsTmp.getString("CNT_HRS");
                    p++;
                    rowData[p] = rsTmp.getString("CTC_HRS");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CNT_KMS_HRS");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_KMS_HRS");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CNT");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC");
                    p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateDeptC() {
        try {
            //String cndtn="";
            String grp_cndtn="";
            //if(!txtEmpCode.getText().trim().equals("")){
            //    String empDeptID=data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtEmpCode.getText().trim()+"'");
            //    cndtn+= " AND PAY_EMPCODE='"+txtEmpCode.getText().trim()+"' ";
            //}
            if (!txtDeptCode.getText().trim().equals("")) {                
                grp_cndtn += " AND SDML_DEPT IN (" + txtDeptCode.getText().trim() + ") ";
            }
            
            FormatGridDeptWise(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT DEPT_HEAD,DEPT_GROUP, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_STAFF' THEN 1 ELSE 0 END,0)) AS CNT_STAFF, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_STAFF' THEN TOTAL_CTC_ACTUAL ELSE 0 END ,0)),2) AS CTC_STAFF, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_RETAINER'THEN 1 ELSE 0 END,0)) AS CNT_RETAINER, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_RETAINER' THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_RETAINER, "
                    + "SUM(COALESCE( CASE WHEN SDML_CATG IN ('BRD_RETAINER','BRD_STAFF') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_STF_RET, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_RETAINER','BRD_STAFF')  THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS TOTAL_CTC_STF_RET, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_PW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_PW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_BADLI_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_BW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_BADLI_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_BW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER','BRD_BADLI_WORKER') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_PW_BW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER','BRD_BADLI_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS TOTAL_CTC_PW_BW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('KMS_WORKER') THEN 1 ELSE 0 END ,0)) AS CNT_KMS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('KMS_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_KMS, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_HRS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_HRS, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER','KMS_WORKER') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_KMS_HRS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER','KMS_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS TOTAL_CTC_KMS_HRS, "
                    + "COUNT(*) AS TOTAL_CNT,ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME "
                    + "FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE FIN_YEAR = '" + cmbFinYear.getSelectedItem() + "' AND PAY_MONTH IN (" + txtMonth.getText().trim() + ") AND TOTAL_CTC_ACTUAL>0 "+grp_cndtn
                    + "GROUP BY DEPT_HEAD,DEPT_GROUP "
                    + "UNION ALL "
                    + "SELECT DEPT_HEAD,CONCAT('99. TOTAL ',DEPT_HEAD ) AS DEPT_GROUP, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_STAFF' THEN 1 ELSE 0 END,0)) AS CNT_STAFF, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_STAFF' THEN TOTAL_CTC_ACTUAL ELSE 0 END ,0)),2) AS CTC_STAFF, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_RETAINER'THEN 1 ELSE 0 END,0)) AS CNT_RETAINER, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_RETAINER' THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_RETAINER, "
                    + "SUM(COALESCE( CASE WHEN SDML_CATG IN ('BRD_RETAINER','BRD_STAFF') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_STF_RET, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_RETAINER','BRD_STAFF')  THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS TOTAL_CTC_STF_RET, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_PW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_PW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_BADLI_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_BW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_BADLI_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_BW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER','BRD_BADLI_WORKER') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_PW_BW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER','BRD_BADLI_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS TOTAL_CTC_PW_BW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('KMS_WORKER') THEN 1 ELSE 0 END ,0)) AS CNT_KMS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('KMS_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_KMS, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_HRS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_HRS, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER','KMS_WORKER') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_KMS_HRS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER','KMS_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS TOTAL_CTC_KMS_HRS, "
                    + "COUNT(*) AS TOTAL_CNT,ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME "
                    + "FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE FIN_YEAR = '" + cmbFinYear.getSelectedItem() + "' AND PAY_MONTH IN (" + txtMonth.getText().trim() + ") AND TOTAL_CTC_ACTUAL>0 "+grp_cndtn
                    + "GROUP BY DEPT_HEAD "
                    + "UNION ALL "
                    + "SELECT 'Z.GRAND TOTAL' AS DEPT_HEAD,'Z.GRAND TOTAL ' AS DEPT_GROUP, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_STAFF' THEN 1 ELSE 0 END,0)) AS CNT_STAFF, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_STAFF' THEN TOTAL_CTC_ACTUAL ELSE 0 END ,0)),2) AS CTC_STAFF, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_RETAINER'THEN 1 ELSE 0 END,0)) AS CNT_RETAINER, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG ='BRD_RETAINER' THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_RETAINER, "
                    + "SUM(COALESCE( CASE WHEN SDML_CATG IN ('BRD_RETAINER','BRD_STAFF') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_STF_RET, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_RETAINER','BRD_STAFF')  THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS TOTAL_CTC_STF_RET, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_PW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_PW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_BADLI_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_BW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_BADLI_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_BW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER','BRD_BADLI_WORKER') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_PW_BW, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('BRD_PERMANENT_WORKER','BRD_BADLI_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS TOTAL_CTC_PW_BW, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('KMS_WORKER') THEN 1 ELSE 0 END ,0)) AS CNT_KMS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('KMS_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_KMS, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER') THEN 1 ELSE 0 END,0)) AS CNT_HRS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS CTC_HRS, "
                    + "SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER','KMS_WORKER') THEN 1 ELSE 0 END,0)) AS TOTAL_CNT_KMS_HRS, "
                    + "ROUND(SUM(COALESCE(CASE WHEN SDML_CATG IN ('HRSMART_WORKER','KMS_WORKER') THEN TOTAL_CTC_ACTUAL ELSE 0 END,0)),2) AS TOTAL_CTC_KMS_HRS, "
                    + "COUNT(*) AS TOTAL_CNT,ROUND(SUM(TOTAL_CTC_ACTUAL),2) AS TOTAL_CTC,DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS RUNTIME "
                    + "FROM SDMLATTPAY.PAYROLL_MTH_SUMMARY_FROM_SPP_CTC "
                    + "WHERE FIN_YEAR = '" + cmbFinYear.getSelectedItem() + "' AND PAY_MONTH IN (" + txtMonth.getText().trim() + ") AND TOTAL_CTC_ACTUAL>0 "+grp_cndtn
                    + "ORDER BY DEPT_HEAD,DEPT_GROUP";

//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("DEPT_HEAD");
                    p++;
                    rowData[p] = rsTmp.getString("DEPT_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("CNT_STAFF");
                    p++;
                    rowData[p] = rsTmp.getString("CTC_STAFF");
                    p++;
                    rowData[p] = rsTmp.getString("CNT_RETAINER");
                    p++;
                    rowData[p] = rsTmp.getString("CTC_RETAINER");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CNT_STF_RET");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_STF_RET");
                    p++;
                    rowData[p] = rsTmp.getString("CNT_PW");
                    p++;
                    rowData[p] = rsTmp.getString("CTC_PW");
                    p++;
                    rowData[p] = rsTmp.getString("CNT_BW");
                    p++;
                    rowData[p] = rsTmp.getString("CTC_BW");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CNT_PW_BW");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_PW_BW");
                    p++;
                    rowData[p] = rsTmp.getString("CNT_KMS");
                    p++;
                    rowData[p] = rsTmp.getString("CTC_KMS");
                    p++;
                    rowData[p] = rsTmp.getString("CNT_HRS");
                    p++;
                    rowData[p] = rsTmp.getString("CTC_HRS");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CNT_KMS_HRS");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC_KMS_HRS");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CNT");
                    p++;
                    rowData[p] = rsTmp.getString("TOTAL_CTC");
                    p++;
                    rowData[p] = rsTmp.getString("RUNTIME");
                    p++;

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private void GenerateDeptCombo() {

        HashMap List = new HashMap();
        clsMaster ObjDept;

        cmbDept.setModel(modelDept);
        modelDept.removeAllElements();  //Clearing previous contents

        ComboData aData = new ComboData();
        aData.Text = "Select Dept";
        aData.Code = 0;
        modelDept.addElement(aData);

        List = clsMaster.getDepartmentList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjDept = (clsMaster) List.get(Integer.toString(i));
//            ComboData 
            aData = new ComboData();
            aData.Text = (String) ObjDept.getAttribute("Name").getObj();
            aData.Code = (long) ObjDept.getAttribute("DPTID").getVal();
            modelDept.addElement(aData);
        }
    }

}
