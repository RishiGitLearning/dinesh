/*
 * frmrptOutStanding.java
 *
 * Created on February 17, 2008, 12:31 PM
 */
package EITLERP.Finance.ReportsUI;

/**
 *
 * @author nisarg
 */
import EITLERP.data;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.LOV;
import EITLERP.ComboData;
import EITLERP.EITLTableModel;
import EITLERP.Finance.*;
import javax.swing.JOptionPane;
import java.util.HashMap;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import TReportWriter.TReportEngine;
import EITLERP.Utils.frmProgress;
import java.net.URL;
import EITLERP.Sales.clsSalesInvoice;
import java.math.BigDecimal;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.File;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.sql.PreparedStatement;
import java.sql.PreparedStatement.*;
import java.sql.*;

public class frmRptDebtorsOutStanding extends javax.swing.JApplet {

    String strSQL = "";
    private clsExcelExporter exp = new clsExcelExporter();
    private clsExcelExporterDet expDet = new clsExcelExporterDet();
    private clsExcelExporterSum expSum = new clsExcelExporterSum();
    private clsExcelExporterInv expInv = new clsExcelExporterInv();
    private TReportEngine objEngine = new TReportEngine();
    private EITLComboModel cmbInvoiceTypeModel;
    private EITLTableModel DataModel = new EITLTableModel();
    private EITLTableModel DataModelDebotOutStanding = new EITLTableModel();
    private EITLTableModel DataModelDebotOutStandingDetail = new EITLTableModel();
    private EITLTableModel DataModelInvoiceWiseDebotOutStanding = new EITLTableModel();
    private EITLComboModel cmbDebotOutStandingModel = new EITLComboModel();
    private EITLComboModel cmbDebotOutStandingModelDetail = new EITLComboModel();
    private long ReportID = 1;
    private boolean ProcessDone = false;

    /**
     * Initializes the applet frmrptOutStanding
     */
    public void init() {

        setSize(800, 600);
        initComponents();
        GenerateCombo();
        chkWithoutProcess.setSelected(true);
        txtAsOnDate.setText(EITLERPGLOBAL.getCurrentDate());
        Bar.setVisible(false);
        lblStatus.setVisible(false);
        mnuPreview248OS1.setEnabled(false);
        mnuPreview248OSText1.setEnabled(false);
        mnuPreviewBankThroughStmt1.setEnabled(false);
        txtBookCode.setText("");
        txtBookCode.setEnabled(false);
        FormatGridDebotOutStanding();
        FormatGridDebotOutStandingDetail();
        FormatGridInvoiceWiseDebotOutStanding();
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgReportType = new javax.swing.ButtonGroup();
        bgEffect = new javax.swing.ButtonGroup();
        mnuReportType = new javax.swing.JPopupMenu();
        mnuPreviewTextReportSTG1 = new javax.swing.JMenuItem();
        mnuPreviewTextReport1 = new javax.swing.JMenuItem();
        mnuPreviewPDFReport1 = new javax.swing.JMenuItem();
        mnuPreview248OS1 = new javax.swing.JMenuItem();
        mnuPreviewMatchReport1 = new javax.swing.JMenuItem();
        mnuPreviewBankReport1 = new javax.swing.JMenuItem();
        mnuTransferBalance1 = new javax.swing.JMenuItem();
        mnuPreviewBankThroughStmt1 = new javax.swing.JMenuItem();
        mnuPreview248OSText1 = new javax.swing.JMenuItem();
        ScheduleVIDebtors1 = new javax.swing.JMenuItem();
        mnuSecurityDepositRecievable1 = new javax.swing.JMenuItem();
        mnuSecurityDepositPayable1 = new javax.swing.JMenuItem();
        mnuCARE = new javax.swing.JMenuItem();
        lblAsonDate = new javax.swing.JLabel();
        txtAsOnDate = new javax.swing.JTextField();
        cmdSelectReportType = new javax.swing.JButton();
        lblMainCode = new javax.swing.JLabel();
        txtMainCode = new javax.swing.JTextField();
        Bar = new javax.swing.JProgressBar();
        NamePanel = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblSubCode = new javax.swing.JLabel();
        txtSubCode = new javax.swing.JTextField();
        lblSubCodeName = new javax.swing.JLabel();
        cmbInvoiceType = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        PanelChargeCode = new javax.swing.JPanel();
        Opg248Only = new javax.swing.JRadioButton();
        Opg28Only = new javax.swing.JRadioButton();
        OpgAll = new javax.swing.JRadioButton();
        Opg4Only = new javax.swing.JRadioButton();
        Opg1Only = new javax.swing.JRadioButton();
        chkWithoutProcess = new javax.swing.JCheckBox();
        PanelEffect = new javax.swing.JPanel();
        OpgNone = new javax.swing.JRadioButton();
        OpgOnlyDebit = new javax.swing.JRadioButton();
        OpgOnlyCredit = new javax.swing.JRadioButton();
        lblBookCode = new javax.swing.JLabel();
        txtBookCode = new javax.swing.JTextField();
        lblBookCodeExample = new javax.swing.JLabel();
        lblAgentwise = new javax.swing.JLabel();
        txtAgentwise = new javax.swing.JTextField();
        chkAgentwise = new javax.swing.JCheckBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        TablePartySummary = new javax.swing.JScrollPane();
        TableDebotOutStandingDetail = new javax.swing.JTable();
        cmdShowPartyWiseSummary = new javax.swing.JButton();
        cmdPartyWiseSummaryExportToExcel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane19 = new javax.swing.JScrollPane();
        TableDebotOutStanding = new javax.swing.JTable();
        cmdAgeWiseExportToExcel = new javax.swing.JButton();
        cmdShowAgeWise = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        TablePartySummary1 = new javax.swing.JScrollPane();
        TableInvoiceWiseDebotOutStanding = new javax.swing.JTable();
        cmdInvoiceWise = new javax.swing.JButton();
        cmdInvoiceWiseExportToExcel = new javax.swing.JButton();
        lblMainCode1 = new javax.swing.JLabel();

        mnuPreviewTextReportSTG1.setText("Preview Text Report STG");
        mnuPreviewTextReportSTG1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPreviewTextReportSTG1ActionPerformed(evt);
            }
        });
        mnuReportType.add(mnuPreviewTextReportSTG1);

        mnuPreviewTextReport1.setText("Preview Text Report FLT & FF");
        mnuPreviewTextReport1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPreviewTextReport1ActionPerformed(evt);
            }
        });
        mnuReportType.add(mnuPreviewTextReport1);

        mnuPreviewPDFReport1.setText("Preview PDF Report");
        mnuPreviewPDFReport1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPreviewPDFReport1ActionPerformed(evt);
            }
        });
        mnuReportType.add(mnuPreviewPDFReport1);

        mnuPreview248OS1.setText("Preview 2458 O/S");
        mnuPreview248OS1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPreview248OS1ActionPerformed(evt);
            }
        });
        mnuReportType.add(mnuPreview248OS1);

        mnuPreviewMatchReport1.setText("Preview Match Report");
        mnuPreviewMatchReport1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPreviewMatchReport1ActionPerformed(evt);
            }
        });
        mnuReportType.add(mnuPreviewMatchReport1);

        mnuPreviewBankReport1.setText("Bank Statement");
        mnuPreviewBankReport1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPreviewBankReport1ActionPerformed(evt);
            }
        });
        mnuReportType.add(mnuPreviewBankReport1);

        mnuTransferBalance1.setText("Transfer Balance");
        mnuTransferBalance1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuTransferBalance1ActionPerformed(evt);
            }
        });
        mnuReportType.add(mnuTransferBalance1);

        mnuPreviewBankThroughStmt1.setText("Bank Through O/S");
        mnuPreviewBankThroughStmt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPreviewBankThroughStmt1ActionPerformed(evt);
            }
        });
        mnuReportType.add(mnuPreviewBankThroughStmt1);

        mnuPreview248OSText1.setText("Preview 248 OS Text");
        mnuPreview248OSText1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPreview248OSText1ActionPerformed(evt);
            }
        });
        mnuReportType.add(mnuPreview248OSText1);

        ScheduleVIDebtors1.setText("Schedule VI Detors");
        ScheduleVIDebtors1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScheduleVIDebtors1ActionPerformed(evt);
            }
        });
        mnuReportType.add(ScheduleVIDebtors1);

        mnuSecurityDepositRecievable1.setText("Security Deposit Recievable");
        mnuSecurityDepositRecievable1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSecurityDepositRecievable1ActionPerformed(evt);
            }
        });
        mnuReportType.add(mnuSecurityDepositRecievable1);

        mnuSecurityDepositPayable1.setText("Security Deposit Payable");
        mnuSecurityDepositPayable1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSecurityDepositPayable1ActionPerformed(evt);
            }
        });
        mnuReportType.add(mnuSecurityDepositPayable1);

        mnuCARE.setText("CARE");
        mnuCARE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCAREActionPerformed(evt);
            }
        });
        mnuReportType.add(mnuCARE);

        getContentPane().setLayout(null);

        lblAsonDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAsonDate.setText("As On Date :");
        getContentPane().add(lblAsonDate);
        lblAsonDate.setBounds(5, 40, 85, 15);
        getContentPane().add(txtAsOnDate);
        txtAsOnDate.setBounds(95, 40, 100, 19);

        cmdSelectReportType.setText("Report Type");
        cmdSelectReportType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSelectReportTypeActionPerformed(evt);
            }
        });
        getContentPane().add(cmdSelectReportType);
        cmdSelectReportType.setBounds(620, 40, 130, 25);

        lblMainCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMainCode.setText("SALES PURPOSE ONLY :");
        getContentPane().add(lblMainCode);
        lblMainCode.setBounds(10, 180, 170, 15);
        getContentPane().add(txtMainCode);
        txtMainCode.setBounds(100, 90, 70, 19);

        Bar.setStringPainted(true);
        getContentPane().add(Bar);
        Bar.setBounds(270, 160, 210, 20);

        NamePanel.setBackground(new java.awt.Color(0, 153, 204));
        NamePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        NamePanel.setMinimumSize(new java.awt.Dimension(799, 30));
        NamePanel.setPreferredSize(new java.awt.Dimension(790, 30));
        NamePanel.setLayout(null);

        lblName.setText("PARTY OUTSTANDING STATEMENT");
        NamePanel.add(lblName);
        lblName.setBounds(9, 8, 230, 15);

        getContentPane().add(NamePanel);
        NamePanel.setBounds(0, 0, 780, 30);

        lblStatus.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblStatus.setText("-");
        getContentPane().add(lblStatus);
        lblStatus.setBounds(270, 140, 140, 15);

        lblSubCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode.setText("Sub Code :");
        getContentPane().add(lblSubCode);
        lblSubCode.setBounds(10, 110, 80, 15);

        txtSubCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSubCodeFocusLost(evt);
            }
        });
        txtSubCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSubCodeKeyPressed(evt);
            }
        });
        getContentPane().add(txtSubCode);
        txtSubCode.setBounds(100, 110, 70, 19);

        lblSubCodeName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSubCodeName.setText("...");
        getContentPane().add(lblSubCodeName);
        lblSubCodeName.setBounds(20, 130, 220, 15);

        cmbInvoiceType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbInvoiceTypeItemStateChanged(evt);
            }
        });
        getContentPane().add(cmbInvoiceType);
        cmbInvoiceType.setBounds(95, 65, 130, 20);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Type :");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(5, 65, 85, 15);

        PanelChargeCode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PanelChargeCode.setLayout(null);

        bgReportType.add(Opg248Only);
        Opg248Only.setText("2,4,5,8 Only");
        Opg248Only.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Opg248OnlyItemStateChanged(evt);
            }
        });
        Opg248Only.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Opg248OnlyActionPerformed(evt);
            }
        });
        PanelChargeCode.add(Opg248Only);
        Opg248Only.setBounds(5, 5, 100, 15);

        bgReportType.add(Opg28Only);
        Opg28Only.setText("2,8 Only");
        Opg28Only.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Opg28OnlyItemStateChanged(evt);
            }
        });
        PanelChargeCode.add(Opg28Only);
        Opg28Only.setBounds(115, 5, 100, 15);

        bgReportType.add(OpgAll);
        OpgAll.setSelected(true);
        OpgAll.setText("All");
        OpgAll.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgAllItemStateChanged(evt);
            }
        });
        PanelChargeCode.add(OpgAll);
        OpgAll.setBounds(235, 5, 100, 15);

        bgReportType.add(Opg4Only);
        Opg4Only.setText(" 1,4 Only");
        Opg4Only.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Opg4OnlyItemStateChanged(evt);
            }
        });
        PanelChargeCode.add(Opg4Only);
        Opg4Only.setBounds(115, 30, 100, 15);

        bgReportType.add(Opg1Only);
        Opg1Only.setText(" 1 Only");
        Opg1Only.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Opg1OnlyItemStateChanged(evt);
            }
        });
        PanelChargeCode.add(Opg1Only);
        Opg1Only.setBounds(5, 30, 100, 15);

        getContentPane().add(PanelChargeCode);
        PanelChargeCode.setBounds(250, 40, 340, 50);

        chkWithoutProcess.setSelected(true);
        chkWithoutProcess.setText(" Without process");
        chkWithoutProcess.setEnabled(false);
        getContentPane().add(chkWithoutProcess);
        chkWithoutProcess.setBounds(250, 120, 130, 15);

        PanelEffect.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PanelEffect.setLayout(null);

        bgEffect.add(OpgNone);
        OpgNone.setSelected(true);
        OpgNone.setText(" None");
        PanelEffect.add(OpgNone);
        OpgNone.setBounds(235, 5, 100, 15);

        bgEffect.add(OpgOnlyDebit);
        OpgOnlyDebit.setText(" Debit Only");
        PanelEffect.add(OpgOnlyDebit);
        OpgOnlyDebit.setBounds(115, 5, 100, 15);

        bgEffect.add(OpgOnlyCredit);
        OpgOnlyCredit.setText(" Credit Only");
        PanelEffect.add(OpgOnlyCredit);
        OpgOnlyCredit.setBounds(5, 5, 100, 15);

        getContentPane().add(PanelEffect);
        PanelEffect.setBounds(250, 90, 340, 25);

        lblBookCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBookCode.setText("Book Code :");
        getContentPane().add(lblBookCode);
        lblBookCode.setBounds(390, 120, 80, 15);
        getContentPane().add(txtBookCode);
        txtBookCode.setBounds(480, 120, 110, 19);

        lblBookCodeExample.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblBookCodeExample.setText("e.g. 55,54,13,14");
        getContentPane().add(lblBookCodeExample);
        lblBookCodeExample.setBounds(480, 140, 140, 15);

        lblAgentwise.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAgentwise.setText("Agent code :");
        getContentPane().add(lblAgentwise);
        lblAgentwise.setBounds(110, 150, 80, 15);

        txtAgentwise.setEnabled(false);
        getContentPane().add(txtAgentwise);
        txtAgentwise.setBounds(200, 150, 40, 19);

        chkAgentwise.setText(" Agentwise");
        chkAgentwise.setEnabled(false);
        chkAgentwise.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkAgentwiseItemStateChanged(evt);
            }
        });
        getContentPane().add(chkAgentwise);
        chkAgentwise.setBounds(10, 150, 104, 15);

        jTabbedPane1.setToolTipText("");
        jTabbedPane1.setAutoscrolls(true);
        jTabbedPane1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseEntered(evt);
            }
        });

        jPanel3.setLayout(null);

        TablePartySummary.setAutoscrolls(true);

        TableDebotOutStandingDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablePartySummary.setViewportView(TableDebotOutStandingDetail);

        jPanel3.add(TablePartySummary);
        TablePartySummary.setBounds(20, 40, 730, 200);

        cmdShowPartyWiseSummary.setText("Show List");
        cmdShowPartyWiseSummary.setMargin(new java.awt.Insets(2, 4, 2, 4));
        cmdShowPartyWiseSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowPartyWiseSummaryActionPerformed(evt);
            }
        });
        jPanel3.add(cmdShowPartyWiseSummary);
        cmdShowPartyWiseSummary.setBounds(260, 10, 100, 25);

        cmdPartyWiseSummaryExportToExcel.setText("Export to Excel");
        cmdPartyWiseSummaryExportToExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPartyWiseSummaryExportToExcelActionPerformed(evt);
            }
        });
        jPanel3.add(cmdPartyWiseSummaryExportToExcel);
        cmdPartyWiseSummaryExportToExcel.setBounds(10, 10, 140, 25);

        jTabbedPane1.addTab("DebtorOutStanding Detail", jPanel3);

        jPanel2.setLayout(null);

        TableDebotOutStanding.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane19.setViewportView(TableDebotOutStanding);

        jPanel2.add(jScrollPane19);
        jScrollPane19.setBounds(20, 50, 710, 170);

        cmdAgeWiseExportToExcel.setText("Export to Excel");
        cmdAgeWiseExportToExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAgeWiseExportToExcelActionPerformed(evt);
            }
        });
        jPanel2.add(cmdAgeWiseExportToExcel);
        cmdAgeWiseExportToExcel.setBounds(20, 10, 140, 25);

        cmdShowAgeWise.setText("DebotOutStanding Report");
        cmdShowAgeWise.setMargin(new java.awt.Insets(2, 4, 2, 4));
        cmdShowAgeWise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowAgeWiseActionPerformed(evt);
            }
        });
        jPanel2.add(cmdShowAgeWise);
        cmdShowAgeWise.setBounds(200, 10, 180, 30);

        jTabbedPane1.addTab("DebtorOutStanding Summary", jPanel2);

        jPanel4.setLayout(null);

        TablePartySummary1.setAutoscrolls(true);

        TableInvoiceWiseDebotOutStanding.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablePartySummary1.setViewportView(TableInvoiceWiseDebotOutStanding);

        jPanel4.add(TablePartySummary1);
        TablePartySummary1.setBounds(20, 40, 730, 200);

        cmdInvoiceWise.setText("Show List");
        cmdInvoiceWise.setMargin(new java.awt.Insets(2, 4, 2, 4));
        cmdInvoiceWise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdInvoiceWiseActionPerformed(evt);
            }
        });
        jPanel4.add(cmdInvoiceWise);
        cmdInvoiceWise.setBounds(260, 10, 100, 25);

        cmdInvoiceWiseExportToExcel.setText("Export to Excel");
        cmdInvoiceWiseExportToExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdInvoiceWiseExportToExcelActionPerformed(evt);
            }
        });
        jPanel4.add(cmdInvoiceWiseExportToExcel);
        cmdInvoiceWiseExportToExcel.setBounds(10, 10, 140, 25);

        jTabbedPane1.addTab("Invoice wise DebtorOutStanding", jPanel4);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(10, 200, 760, 280);

        lblMainCode1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMainCode1.setText("Main Code :");
        getContentPane().add(lblMainCode1);
        lblMainCode1.setBounds(10, 90, 80, 15);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdInvoiceWiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInvoiceWiseActionPerformed
        // TODO add your handling code here:
        FormatGridInvoiceWiseDebotOutStanding();
        GenerateInvoiceWiseDebotOutStanding();  
    }//GEN-LAST:event_cmdInvoiceWiseActionPerformed

    private void cmdInvoiceWiseExportToExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInvoiceWiseExportToExcelActionPerformed
        // TODO add your handling code here:
        try {
            
            expInv.fillData(TableInvoiceWiseDebotOutStanding, new File("/root/Desktop/InvoiceWiseDebotOutStanding.xls"));
            expInv.fillData(TableInvoiceWiseDebotOutStanding, new File("D://InvoiceWiseDebotOutStanding.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
            + "'/root/Desktop/InvoiceWiseDebotOutStanding.xls' successfully in Linux PC or 'D://InvoiceWiseDebotOutStanding.xls' successfully in Windows PC    ", "Message",
            JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_cmdInvoiceWiseExportToExcelActionPerformed

    private void mnuSecurityDepositPayable1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSecurityDepositPayable1ActionPerformed
        // TODO add your handling code here:
        txtMainCode.setText("132802");
        txtMainCode.setEnabled(false);
        if (!Validate()) {
            return;
        }
        ReportID = 1;
        new Thread() {
            public void run() {

                double CrAmount = 0, DrAmount = 0, ClosingBalance = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", PartyType = "";
                ResultSet rsParty = null, rsInvoice = null, rsOpening = null, rsVoucher = null;
                int EntryNo = 0, Max = 0, Counter = 0;
                HashMap tempList = new HashMap();
                HashMap ReportList = new HashMap();
                clsDebtorsOutstandingItems ObjItem = new clsDebtorsOutstandingItems();
                boolean PartyChange = false;
                int InvoiceType = 0;
                try {
                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                    } else if (txtMainCode.getText().trim().equals("210072")) {
                        InvoiceType = 3;
                    } else if (txtMainCode.getText().trim().equals("132802")) {
                        InvoiceType = 2;
                    }
                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = EITLERPGLOBAL.FinFromDateDB;
                    SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
                    FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
                    // ------------------------------

                    // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                    MainCode = txtMainCode.getText();
                    PartyCode = txtSubCode.getText().trim();
                    // ------------------------------

                    if (!chkWithoutProcess.isSelected()) {
                        // CALL MATCH AND UNMATCH ENTRIES BEFORE GENERATING REPORT
                        FindMatchInvoice(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebits(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebitsFromClosing(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        // ------------------------------
                    }

                    // COUNT PARTIES FOR OUTSTANDING , SET MAIN_ACCOUNT_CODE AND PARTY_CODE (IF EXISTS IN txtPartyCode)
                    String Condition = "";
                    if (chkAgentwise.isSelected()) {
                        Condition = " AND SUB_ACCOUNT_CODE LIKE '" + txtAgentwise.getText().trim() + "%' ";
                    } else {
                        if (!txtSubCode.getText().equals("")) {
                            Condition = " AND SUB_ACCOUNT_CODE='" + txtSubCode.getText().trim() + "' ";
                        }
                    }

                    /*Condition = " AND SUB_ACCOUNT_CODE IN ('239905','270000','559901','619913','670201','510501','510201','412607','319907','311912'," +
                     "'300170','300156','300153','179904','278801','278901','308801','470000','480000','510000','550000','570000','580000','600000'," +
                     "'158801','171165','170000','175790','176830','176084','218801','218844','230943','231705','231703','300157','301756','307757'," +
                     "'308843','308817') ";*/
                    String EffectCondition = "";
                    if (OpgOnlyCredit.isSelected()) {
                        EffectCondition = " AND EFFECT='C' ";
                    } else if (OpgOnlyDebit.isSelected()) {
                        EffectCondition = " AND EFFECT='D' ";
                    }

                    String BookCodeCondition = "";
                    if (!txtBookCode.getText().trim().equals("")) {
                        BookCodeCondition = " AND BOOK_CODE IN (" + txtBookCode.getText().trim() + ") ";
                    }
                    SQL = "(SELECT DISTINCT SUB_ACCOUNT_CODE FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                            + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND ENTRY_NO=" + EntryNo + Condition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                            + " UNION "
                            + "(SELECT DISTINCT B.SUB_ACCOUNT_CODE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL) "
                            + "AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' AND A.APPROVED=1 AND A.CANCELLED=0) "
                            + "ORDER BY SUB_ACCOUNT_CODE ";
                    System.out.println(SQL);
                    rsParty = data.getResult(SQL, FinanceGlobal.FinURL);
                    rsParty.last();
                    Max = rsParty.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter = 0;
                    rsParty.first();
                    // --------------------------------------------------------------------------------------------------

                    if (rsParty.getRow() > 0) {
                        while (!rsParty.isAfterLast()) {

                            Counter++;

                            Bar.setValue(Counter);
                            Bar.repaint();
                            // GET PARTY NAME AND DISPLAY IT
                            PartyCode = rsParty.getString("SUB_ACCOUNT_CODE");
                            lblStatus.setText("Party : " + PartyCode);
                            PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                            //data.getStringValueFromDB("SELECT PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='"+MainCode+"' AND PARTY_CODE='"+PartyCode+"' ",FinanceGlobal.FinURL);
                            // -----------------------------

                            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
                            SQL = "(SELECT BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT "
                                    + "FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND ENTRY_NO=" + EntryNo + EffectCondition + BookCodeCondition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                                    + "UNION ALL "
                                    + "(SELECT A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT "
                                    + "FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND A.APPROVED=1 AND A.CANCELLED=0 " + EffectCondition + BookCodeCondition
                                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' "
                                    + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL )) "
                                    + //"ORDER BY INVOICE_NO,VOUCHER_DATE,LINK_NO ";
                                    "ORDER BY INVOICE_NO,YEAR(VOUCHER_DATE),MONTH(VOUCHER_DATE),DAY(VOUCHER_DATE),LINK_NO,EFFECT DESC ";
                            System.out.println(SQL);
                            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
                            rsInvoice.first();
                            InvoiceNo = "";
                            InvoiceDate = "";
                            PartyType = "";
                            PartyChange = false;
                            // ---------------------------------------------------------------------
                            CrAmount = 0;
                            DrAmount = 0;
                            if (rsInvoice.getRow() > 0) {
                                while (!rsInvoice.isAfterLast()) {

                                    if (!PartyChange) {
                                        ClosingBalance = Math.abs(clsAccount.getClosingBalance(MainCode, PartyCode, ToDate, true));
                                        PartyType = data.getStringValueFromDB("SELECT DOCUMENT_THROUGH FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + PartyCode + "' AND MAIN_ACCOUNT_CODE='" + MainCode + "' ");
                                        PartyChange = true;
                                    }

                                    ObjItem = new clsDebtorsOutstandingItems();
                                    ObjItem.setAttribute("MAIN_ACCOUNT_CODE", MainCode);
                                    ObjItem.setAttribute("SUB_ACCOUNT_CODE", PartyCode);
                                    ObjItem.setAttribute("PARTY_NAME", PartyName);
                                    ObjItem.setAttribute("PARTY_TYPE", PartyType);
                                    ObjItem.setAttribute("BOOK_CODE", UtilFunctions.getString(rsInvoice, "BOOK_CODE", ""));
                                    ObjItem.setAttribute("VOUCHER_NO", UtilFunctions.getString(rsInvoice, "VOUCHER_NO", ""));
                                    ObjItem.setAttribute("VOUCHER_DATE", UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", ""));
                                    ObjItem.setAttribute("LEGACY_NO", UtilFunctions.getString(rsInvoice, "LEGACY_NO", ""));
                                    ObjItem.setAttribute("INVOICE_NO", UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""));
                                    ObjItem.setAttribute("INVOICE_DATE", UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                    String ChargeCode = "";
                                    String OBC_NO = "";
                                    String BaleNo = "";
                                    String LrNo = "";
                                    if (clsVoucher.getVoucherType(UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "")) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        ChargeCode = clsSalesInvoice.getInvoiceChargeCode(UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""), UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                        if (InvoiceType == 2 && (ChargeCode.startsWith("1") || ChargeCode.startsWith("4"))) {
                                            SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                                    + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                                    + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                    + "AND B.INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' "
                                                    + "AND B.INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ";
                                            OBC_NO = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                        } else if (ChargeCode.startsWith("1") && InvoiceType == 1) {
                                            SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                                    + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                                    + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                    + "AND B.INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' "
                                                    + "AND B.INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ";
                                            OBC_NO = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                        }

                                        BaleNo = data.getStringValueFromDB("SELECT BALE_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' AND INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ");
                                        // LrNo = data.getStringValueFromDB("SELECT LR_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='"+UtilFunctions.getString(rsInvoice,"INVOICE_NO","")+"' AND INVOICE_DATE='"+UtilFunctions.getString(rsInvoice,"INVOICE_DATE","")+"' ",FinanceGlobal.FinURL);
                                        LrNo = data.getStringValueFromDB("SELECT LR_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' AND INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ");
                                    } else {
                                        if (!UtilFunctions.getString(rsInvoice, "BOOK_CODE", "").equals("14")) {
                                            ChargeCode = data.getStringValueFromDB("SELECT REASON_CODE FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='" + UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "") + "' ", FinanceGlobal.FinURL);
                                        }
                                    }

                                    ObjItem.setAttribute("CHARGE_CODE", ChargeCode);
                                    String LinkNo = "";
                                    if (UtilFunctions.getString(rsInvoice, "LINK_NO", "").length() > 14) {
                                        LinkNo = UtilFunctions.getString(rsInvoice, "LINK_NO", "").substring(0, 14);
                                    } else {
                                        if (UtilFunctions.getString(rsInvoice, "LINK_NO", "").equals("") && clsVoucher.getVoucherType(UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "")) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                            LinkNo = clsSalesInvoice.getAgentAlphaSrNo(UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""), UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                        } else {
                                            LinkNo = UtilFunctions.getString(rsInvoice, "LINK_NO", "");
                                        }
                                    }
                                    ObjItem.setAttribute("LINK_NO", LinkNo);

                                    ObjItem.setAttribute("OBC_NO", OBC_NO);
                                    ObjItem.setAttribute("BALE_NO", BaleNo);
                                    ObjItem.setAttribute("LR_NO", LrNo);

                                    ObjItem.setAttribute("EFFECT", UtilFunctions.getString(rsInvoice, "EFFECT", ""));
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                        CrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                        ObjItem.setAttribute("CREDIT_AMOUNT", UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0));
                                        ObjItem.setAttribute("DEBIT_AMOUNT", 0);
                                    }
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                        DrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                        ObjItem.setAttribute("CREDIT_AMOUNT", 0);
                                        ObjItem.setAttribute("DEBIT_AMOUNT", UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0));
                                    }
                                    ObjItem.setAttribute("CLOSING_BALANCE", ClosingBalance);
                                    tempList.put(Integer.toString(tempList.size() + 1), ObjItem);
                                    rsInvoice.next();
                                }
                                if (EITLERPGLOBAL.round(ClosingBalance, 2) != EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2)) {
                                    if (OpgNone.isSelected() && txtBookCode.getText().trim().equals("")) {
                                        String Msg = "Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2);
                                        JOptionPane.showMessageDialog(null, Msg);
                                        System.out.println("Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2));
                                    }
                                }

                                ReportList = appendList(tempList, ReportList);
                                tempList.clear();
                            }
                            rsParty.next();
                            //EITLERPGLOBAL.PAGE_BREAK=true;
                        }
                    }
                    if (ReportList.size() > 0) {
                        if (txtSubCode.getText().trim().equals("") && (!chkAgentwise.isSelected()) && cmbInvoiceTypeModel.getCode(cmbInvoiceType.getSelectedIndex()) == 1) {
                            generateReportSuitting(ReportList, txtAsOnDate.getText().trim());
                        } else {
                            generateReport(ReportList, txtAsOnDate.getText().trim());
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();        
    }//GEN-LAST:event_mnuSecurityDepositPayable1ActionPerformed

    private void mnuSecurityDepositRecievable1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSecurityDepositRecievable1ActionPerformed
        // TODO add your handling code here:
        txtMainCode.setText("132803");
        txtMainCode.setEnabled(false);
        if (!Validate()) {
            return;
        }
        ReportID = 1;
        new Thread() {
            public void run() {

                double CrAmount = 0, DrAmount = 0, ClosingBalance = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", PartyType = "";
                ResultSet rsParty = null, rsInvoice = null, rsOpening = null, rsVoucher = null;
                int EntryNo = 0, Max = 0, Counter = 0;
                HashMap tempList = new HashMap();
                HashMap ReportList = new HashMap();
                clsDebtorsOutstandingItems ObjItem = new clsDebtorsOutstandingItems();
                boolean PartyChange = false;
                int InvoiceType = 0;
                try {
                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                    } else if (txtMainCode.getText().trim().equals("210072")) {
                        InvoiceType = 3;
                    } else if (txtMainCode.getText().trim().equals("132803")) {
                        InvoiceType = 2;
                    }
                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = EITLERPGLOBAL.FinFromDateDB;
                    SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
                    FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
                    // ------------------------------

                    // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                    MainCode = txtMainCode.getText();
                    PartyCode = txtSubCode.getText().trim();
                    // ------------------------------

                    if (!chkWithoutProcess.isSelected()) {
                        // CALL MATCH AND UNMATCH ENTRIES BEFORE GENERATING REPORT
                        FindMatchInvoice(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebits(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebitsFromClosing(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        // ------------------------------
                    }

                    // COUNT PARTIES FOR OUTSTANDING , SET MAIN_ACCOUNT_CODE AND PARTY_CODE (IF EXISTS IN txtPartyCode)
                    String Condition = "";
                    if (chkAgentwise.isSelected()) {
                        Condition = " AND SUB_ACCOUNT_CODE LIKE '" + txtAgentwise.getText().trim() + "%' ";
                    } else {
                        if (!txtSubCode.getText().equals("")) {
                            Condition = " AND SUB_ACCOUNT_CODE='" + txtSubCode.getText().trim() + "' ";
                        }
                    }

                    /*Condition = " AND SUB_ACCOUNT_CODE IN ('239905','270000','559901','619913','670201','510501','510201','412607','319907','311912'," +
                     "'300170','300156','300153','179904','278801','278901','308801','470000','480000','510000','550000','570000','580000','600000'," +
                     "'158801','171165','170000','175790','176830','176084','218801','218844','230943','231705','231703','300157','301756','307757'," +
                     "'308843','308817') ";*/
                    String EffectCondition = "";
                    if (OpgOnlyCredit.isSelected()) {
                        EffectCondition = " AND EFFECT='C' ";
                    } else if (OpgOnlyDebit.isSelected()) {
                        EffectCondition = " AND EFFECT='D' ";
                    }

                    String BookCodeCondition = "";
                    if (!txtBookCode.getText().trim().equals("")) {
                        BookCodeCondition = " AND BOOK_CODE IN (" + txtBookCode.getText().trim() + ") ";
                    }
                    SQL = "(SELECT DISTINCT SUB_ACCOUNT_CODE FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                            + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND ENTRY_NO=" + EntryNo + Condition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                            + " UNION "
                            + "(SELECT DISTINCT B.SUB_ACCOUNT_CODE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL) "
                            + "AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' AND A.APPROVED=1 AND A.CANCELLED=0) "
                            + "ORDER BY SUB_ACCOUNT_CODE ";
                    System.out.println(SQL);
                    rsParty = data.getResult(SQL, FinanceGlobal.FinURL);
                    rsParty.last();
                    Max = rsParty.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter = 0;
                    rsParty.first();
                    // --------------------------------------------------------------------------------------------------

                    if (rsParty.getRow() > 0) {
                        while (!rsParty.isAfterLast()) {

                            Counter++;

                            Bar.setValue(Counter);
                            Bar.repaint();
                            // GET PARTY NAME AND DISPLAY IT
                            PartyCode = rsParty.getString("SUB_ACCOUNT_CODE");
                            lblStatus.setText("Party : " + PartyCode);
                            PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                            //data.getStringValueFromDB("SELECT PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='"+MainCode+"' AND PARTY_CODE='"+PartyCode+"' ",FinanceGlobal.FinURL);
                            // -----------------------------

                            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
                            SQL = "(SELECT BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT "
                                    + "FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND ENTRY_NO=" + EntryNo + EffectCondition + BookCodeCondition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                                    + "UNION ALL "
                                    + "(SELECT A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT "
                                    + "FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND A.APPROVED=1 AND A.CANCELLED=0 " + EffectCondition + BookCodeCondition
                                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' "
                                    + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL )) "
                                    + //"ORDER BY INVOICE_NO,VOUCHER_DATE,LINK_NO ";
                                    "ORDER BY INVOICE_NO,YEAR(VOUCHER_DATE),MONTH(VOUCHER_DATE),DAY(VOUCHER_DATE),LINK_NO,EFFECT DESC ";
                            System.out.println(SQL);
                            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
                            rsInvoice.first();
                            InvoiceNo = "";
                            InvoiceDate = "";
                            PartyType = "";
                            PartyChange = false;
                            // ---------------------------------------------------------------------
                            CrAmount = 0;
                            DrAmount = 0;
                            if (rsInvoice.getRow() > 0) {
                                while (!rsInvoice.isAfterLast()) {

                                    if (!PartyChange) {
                                        ClosingBalance = Math.abs(clsAccount.getClosingBalance(MainCode, PartyCode, ToDate, true));
                                        PartyType = data.getStringValueFromDB("SELECT DOCUMENT_THROUGH FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + PartyCode + "' AND MAIN_ACCOUNT_CODE='" + MainCode + "' ");
                                        PartyChange = true;
                                    }

                                    ObjItem = new clsDebtorsOutstandingItems();
                                    ObjItem.setAttribute("MAIN_ACCOUNT_CODE", MainCode);
                                    ObjItem.setAttribute("SUB_ACCOUNT_CODE", PartyCode);
                                    ObjItem.setAttribute("PARTY_NAME", PartyName);
                                    ObjItem.setAttribute("PARTY_TYPE", PartyType);
                                    ObjItem.setAttribute("BOOK_CODE", UtilFunctions.getString(rsInvoice, "BOOK_CODE", ""));
                                    ObjItem.setAttribute("VOUCHER_NO", UtilFunctions.getString(rsInvoice, "VOUCHER_NO", ""));
                                    ObjItem.setAttribute("VOUCHER_DATE", UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", ""));
                                    ObjItem.setAttribute("LEGACY_NO", UtilFunctions.getString(rsInvoice, "LEGACY_NO", ""));
                                    ObjItem.setAttribute("INVOICE_NO", UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""));
                                    ObjItem.setAttribute("INVOICE_DATE", UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                    String ChargeCode = "";
                                    String OBC_NO = "";
                                    String BaleNo = "";
                                    String LrNo = "";
                                    if (clsVoucher.getVoucherType(UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "")) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        ChargeCode = clsSalesInvoice.getInvoiceChargeCode(UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""), UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                        if (InvoiceType == 2 && (ChargeCode.startsWith("1") || ChargeCode.startsWith("4"))) {
                                            SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                                    + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                                    + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                    + "AND B.INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' "
                                                    + "AND B.INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ";
                                            OBC_NO = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                        } else if (ChargeCode.startsWith("1") && InvoiceType == 1) {
                                            SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                                    + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                                    + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                    + "AND B.INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' "
                                                    + "AND B.INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ";
                                            OBC_NO = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                        }

                                        BaleNo = data.getStringValueFromDB("SELECT BALE_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' AND INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ");
                                        // LrNo = data.getStringValueFromDB("SELECT LR_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='"+UtilFunctions.getString(rsInvoice,"INVOICE_NO","")+"' AND INVOICE_DATE='"+UtilFunctions.getString(rsInvoice,"INVOICE_DATE","")+"' ",FinanceGlobal.FinURL);
                                        LrNo = data.getStringValueFromDB("SELECT LR_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' AND INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ");
                                    } else {
                                        if (!UtilFunctions.getString(rsInvoice, "BOOK_CODE", "").equals("14")) {
                                            ChargeCode = data.getStringValueFromDB("SELECT REASON_CODE FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='" + UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "") + "' ", FinanceGlobal.FinURL);
                                        }
                                    }

                                    ObjItem.setAttribute("CHARGE_CODE", ChargeCode);
                                    String LinkNo = "";
                                    if (UtilFunctions.getString(rsInvoice, "LINK_NO", "").length() > 14) {
                                        LinkNo = UtilFunctions.getString(rsInvoice, "LINK_NO", "").substring(0, 14);
                                    } else {
                                        if (UtilFunctions.getString(rsInvoice, "LINK_NO", "").equals("") && clsVoucher.getVoucherType(UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "")) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                            LinkNo = clsSalesInvoice.getAgentAlphaSrNo(UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""), UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                        } else {
                                            LinkNo = UtilFunctions.getString(rsInvoice, "LINK_NO", "");
                                        }
                                    }
                                    ObjItem.setAttribute("LINK_NO", LinkNo);

                                    ObjItem.setAttribute("OBC_NO", OBC_NO);
                                    ObjItem.setAttribute("BALE_NO", BaleNo);
                                    ObjItem.setAttribute("LR_NO", LrNo);

                                    ObjItem.setAttribute("EFFECT", UtilFunctions.getString(rsInvoice, "EFFECT", ""));
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                        CrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                        ObjItem.setAttribute("CREDIT_AMOUNT", UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0));
                                        ObjItem.setAttribute("DEBIT_AMOUNT", 0);
                                    }
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                        DrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                        ObjItem.setAttribute("CREDIT_AMOUNT", 0);
                                        ObjItem.setAttribute("DEBIT_AMOUNT", UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0));
                                    }
                                    ObjItem.setAttribute("CLOSING_BALANCE", ClosingBalance);
                                    tempList.put(Integer.toString(tempList.size() + 1), ObjItem);
                                    rsInvoice.next();
                                }
                                if (EITLERPGLOBAL.round(ClosingBalance, 2) != EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2)) {
                                    if (OpgNone.isSelected() && txtBookCode.getText().trim().equals("")) {
                                        String Msg = "Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2);
                                        JOptionPane.showMessageDialog(null, Msg);
                                        System.out.println("Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2));
                                    }
                                }

                                ReportList = appendList(tempList, ReportList);
                                tempList.clear();
                            }
                            rsParty.next();
                            //EITLERPGLOBAL.PAGE_BREAK=true;
                        }
                    }
                    if (ReportList.size() > 0) {
                        if (txtSubCode.getText().trim().equals("") && (!chkAgentwise.isSelected()) && cmbInvoiceTypeModel.getCode(cmbInvoiceType.getSelectedIndex()) == 1) {
                            generateReportSuitting(ReportList, txtAsOnDate.getText().trim());
                        } else {
                            generateReport(ReportList, txtAsOnDate.getText().trim());
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();
    }//GEN-LAST:event_mnuSecurityDepositRecievable1ActionPerformed

    private void ScheduleVIDebtorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScheduleVIDebtors1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ScheduleVIDebtors1ActionPerformed

    private void mnuPreview248OSText1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPreview248OSText1ActionPerformed
        // TODO add your handling code here:
        if (!Validate()) {
            return;
        }
        ReportID = 2;
        new Thread() {
            public void run() {

                double CrAmount = 0, DrAmount = 0, ClosingBalance = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", BookCode = "", ChargeCode = "";
                ResultSet rsParty = null, rsInvoice = null, rsOpening = null, rsVoucher = null, rsReport = null;
                int EntryNo = 0, Max = 0, Counter = 0, RecordCounter = 0;
                Connection conn = null;
                Statement stmt = null;
                boolean PartyChange = false;
                int InvoiceType = 0;

                try {
                    data.Execute("DELETE FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=2", FinanceGlobal.FinURL);
                    conn = data.getConn(FinanceGlobal.FinURL);
                    stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                        BookCode = " AND BOOK_CODE IN ('09','18') ";
                        ChargeCode = " AND CHARGE_CODE IN ('02','08') ";
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                        BookCode = " AND BOOK_CODE IN ('01','12','16') ";
                        ChargeCode = " AND CHARGE_CODE IN ('02','04','08','05') ";
                    }
                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = EITLERPGLOBAL.FinFromDateDB;
                    SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
                    FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
                    // ------------------------------

                    // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                    MainCode = txtMainCode.getText();
                    PartyCode = txtSubCode.getText().trim();
                    // ------------------------------

                    /*if(!chkWithoutProcess.isSelected()) {
                     // CALL MATCH AND UNMATCH ENTRIES BEFORE GENERATING REPORT
                     FindMatchInvoice(MainCode, PartyCode, FromDate, ToDate);
                     while(!ProcessDone) {
                     //Wait until process is completed ...
                     }
                     ProcessDone=false;
                     FindMatchDebits(MainCode, PartyCode, FromDate, ToDate);
                     while(!ProcessDone) {
                     //Wait until process is completed ...
                     }
                     ProcessDone=false;
                     FindMatchDebitsFromClosing(MainCode, PartyCode, FromDate, ToDate);
                     while(!ProcessDone) {
                     //Wait until process is completed ...
                     }
                     ProcessDone=false;
                     // ------------------------------
                     }*/
                    // COUNT PARTIES FOR OUTSTANDING , SET MAIN_ACCOUNT_CODE AND PARTY_CODE (IF EXISTS IN txtPartyCode)
                    String Condition = "";
                    if (chkAgentwise.isSelected()) {
                        Condition = " AND SUB_ACCOUNT_CODE LIKE '" + txtAgentwise.getText().trim() + "%' ";
                    } else {
                        if (!txtSubCode.getText().equals("")) {
                            Condition = " AND SUB_ACCOUNT_CODE='" + txtSubCode.getText().trim() + "' ";
                        }
                    }

                    SQL = "(SELECT DISTINCT SUB_ACCOUNT_CODE FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                            + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND ENTRY_NO=" + EntryNo + Condition + " "
                            + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00') " + BookCode + " ) "
                            + " UNION "
                            + "(SELECT DISTINCT B.SUB_ACCOUNT_CODE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " "
                            + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL) "
                            + "AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' AND A.APPROVED=1 AND A.CANCELLED=0 " + BookCode + " ) "
                            + "ORDER BY SUB_ACCOUNT_CODE ";

                    rsParty = data.getResult(SQL, FinanceGlobal.FinURL);
                    rsParty.last();
                    Max = rsParty.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter = 0;
                    rsParty.first();
                    // --------------------------------------------------------------------------------------------------

                    // Prepare resultset for entering o/s data into report transaction table
                    //rsReport = stmt.executeQuery("SELECT * FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID="+EITLERPGLOBAL.gUserID+" AND REPORT_ID=1 LIMIT 1");
                    TReportWriter.SimpleDataProvider.TTable objData = new TReportWriter.SimpleDataProvider.TTable();
                    RecordCounter = 0;
                    // --------------------------------------------------------------------------------------------------

                    if (rsParty.getRow() > 0) {
                        while (!rsParty.isAfterLast()) {
                            Counter++;
                            Bar.setValue(Counter);
                            Bar.repaint();
                            // GET PARTY NAME AND DISPLAY IT
                            PartyCode = rsParty.getString("SUB_ACCOUNT_CODE");
                            lblStatus.setText("Party : " + PartyCode);
                            PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                            // -----------------------------
                            /*SQL = "SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='"+PartyCode+"' AND MAIN_ACCOUNT_CODE='"+txtMainCode.getText().trim()+"' " +ChargeCode;
                             if(!data.IsRecordExist(SQL)) {
                             rsParty.next();
                             continue;
                             }*/

                            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
                            SQL = "(SELECT BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND ENTRY_NO=" + EntryNo + " AND EFFECT='D' AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00') " + BookCode + " ) "
                                    + "UNION ALL "
                                    + "(SELECT A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='D' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) " + BookCode + " ) "
                                    + "ORDER BY VOUCHER_DATE ";

                            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
                            rsInvoice.first();
                            InvoiceNo = "";
                            InvoiceDate = "";
                            PartyChange = false;
                            // ---------------------------------------------------------------------
                            CrAmount = 0;
                            DrAmount = 0;
                            int Counter1 = 0, Counter2 = 0;
                            if (rsInvoice.getRow() > 0) {
                                while (!rsInvoice.isAfterLast()) {

                                    String VoucherNo = UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "");
                                    InvoiceNo = UtilFunctions.getString(rsInvoice, "INVOICE_NO", "");
                                    InvoiceDate = UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "");
                                    double DebitAmount = 0;
                                    double AdjustedAmount = 0;
                                    if (clsVoucher.getVoucherType(VoucherNo) != FinanceGlobal.TYPE_SALES_JOURNAL && clsVoucher.getVoucherType(VoucherNo) != FinanceGlobal.TYPE_DEBIT_NOTE) {
                                        rsInvoice.next();
                                        continue;
                                    }
                                    if (InvoiceType == 2 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        if (!clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8")) {
                                            rsInvoice.next();
                                            continue;
                                        }
                                    } else if (InvoiceType == 1 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        if (!clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("5") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("4")) {
                                            rsInvoice.next();
                                            continue;
                                        }
                                    }

                                    if (!data.IsRecordExist("SELECT * FROM D_FIN_DEBITNOTE_RECEIPT_MAPPING WHERE DEBITNOTE_VOUCHER_NO='" + VoucherNo + "'", FinanceGlobal.FinURL)
                                            && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_DEBIT_NOTE) {
                                        rsInvoice.next();
                                        continue;
                                    }

                                    if (clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                                + "AND MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                                + "AND INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + InvoiceDate + "' "
                                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                                + "AND B.MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                                + "AND B.INVOICE_DATE='" + InvoiceDate + "' AND B.INVOICE_NO='" + InvoiceNo + "' ";

                                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                                    } else {
                                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                                + "AND MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                                + "AND B.MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                                + "AND B.GRN_NO='" + VoucherNo + "' ";
                                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                                    }
                                    if (DebitAmount == AdjustedAmount) {
                                        rsInvoice.next();
                                        continue;
                                    }
                                    RecordCounter++;
                                    objData.AddColumn("SR_NO");
                                    objData.AddColumn("REPORT_ID");
                                    objData.AddColumn("USER_ID");
                                    objData.AddColumn("MAIN_ACCOUNT_CODE");
                                    objData.AddColumn("SUB_ACCOUNT_CODE");
                                    objData.AddColumn("PARTY_NAME");
                                    objData.AddColumn("BOOK_CODE");
                                    objData.AddColumn("VOUCHER_NO");
                                    objData.AddColumn("LEGACY_NO");
                                    objData.AddColumn("VOUCHER_DATE");
                                    objData.AddColumn("INVOICE_NO");
                                    objData.AddColumn("LINK_NO");
                                    objData.AddColumn("INVOICE_DATE");
                                    objData.AddColumn("CHARGE_CODE");
                                    objData.AddColumn("BANK_REF_NO");
                                    objData.AddColumn("DEBIT_AMOUNT");
                                    objData.AddColumn("CREDIT_AMOUNT");
                                    objData.AddColumn("AMOUNT");

                                    /*rsReport.moveToInsertRow();
                                     rsReport.updateLong("SR_NO",RecordCounter);
                                     rsReport.updateLong("REPORT_ID",ReportID);
                                     rsReport.updateLong("USER_ID",EITLERPGLOBAL.gUserID);
                                     rsReport.updateString("COLUMN_1",MainCode);
                                     rsReport.updateString("COLUMN_2",PartyCode);
                                     rsReport.updateString("COLUMN_3",PartyName);
                                     rsReport.updateString("COLUMN_4",UtilFunctions.getString(rsInvoice,"VOUCHER_NO",""));
                                     rsReport.updateString("COLUMN_5",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsInvoice,"VOUCHER_DATE","")));*/
                                    String VoucherDate = UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", "");
                                    int VoucherType = clsVoucher.getVoucherType(VoucherNo);
                                    String LinkNo = "";
                                    String vType = "";
                                    String DueDate = "";
                                    if (VoucherType == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        LinkNo = clsSalesInvoice.getAgentAlphaSrNo(InvoiceNo, InvoiceDate);
                                        DueDate = data.getStringValueFromDB("SELECT DUE_DATE FROM DINESHMILLS.D_SAL_INVOICE_HEADER WHERE INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + InvoiceDate + "' AND APPROVED=1 AND CANCELLED=0 ");
                                        vType = "Inv";
                                    } else {
                                        LinkNo = EITLERPGLOBAL.padLeftEx(VoucherNo.substring(VoucherNo.length() - 5), "0", 6) + "/" + EITLERPGLOBAL.getFinYearStartDate(VoucherDate).substring(2, 4) + EITLERPGLOBAL.getFinYearEndDate(VoucherDate).substring(2, 4);
                                        DueDate = VoucherDate;
                                        vType = "Dbn";
                                    }

                                    objData.AddColumn("LINKNO");
                                    objData.AddColumn("LEGACY_NO");
                                    objData.AddColumn("INVOICE_NO");
                                    objData.AddColumn("DEBITAMOUNT");
                                    objData.AddColumn("DUEDATE");
                                    objData.AddColumn("DAYS50");
                                    objData.AddColumn("DAYS51-90");
                                    objData.AddColumn("DAYS90");
                                    objData.AddColumn("VTYPE");
                                    objData.AddColumn("DAYDIFF");
                                    objData.AddColumn("AMTDIFF");
                                    objData.AddColumn("INVCOUNTER");
                                    objData.AddColumn("DBNCOUNTER");

                                    TReportWriter.SimpleDataProvider.TRow objRow = objData.newRow();

                                    /*rsReport.updateString("COLUMN_6",LinkNo);
                                     rsReport.updateString("COLUMN_7",UtilFunctions.getString(rsInvoice,"LEGACY_NO",""));
                                     rsReport.updateString("COLUMN_8",InvoiceNo);
                                     rsReport.updateString("COLUMN_9",EITLERPGLOBAL.formatDate(InvoiceDate));
                                     rsReport.updateString("COLUMN_10",Double.toString(DebitAmount));
                                     rsReport.updateString("COLUMN_11",EITLERPGLOBAL.formatDate(DueDate));
                                     */
                                    // GET PARTY NAME AND DISPLAY IT
                                    //String VoucherNo = UtilFunctions.getString(rsParty,"VOUCHER_NO","");
                                    //String VoucherDate = UtilFunctions.getString(rsParty,"VOUCHER_DATE","");
                                    InvoiceNo = UtilFunctions.getString(rsParty, "INVOICE_NO", "");
                                    InvoiceDate = UtilFunctions.getString(rsParty, "INVOICE_DATE", "");
                                    String MatchedDate = UtilFunctions.getString(rsParty, "MATCHED_DATE", "");
                                    //String GRNNo = UtilFunctions.getString(rsParty,"GRN_NO","");
                                    //String GRNDate = UtilFunctions.getString(rsParty,"GRN_DATE","");
                                    PartyCode = UtilFunctions.getString(rsParty, "SUB_ACCOUNT_CODE", "");
                                    lblStatus.setText("Party : " + PartyCode);
                                    PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                                    // -----------------------------

                                    /*objRow.setValue("MAIN_ACCOUNT_CODE",MainCode);
                                     objRow.setValue("SUB_ACCOUNT_CODE",PartyCode);
                                     objRow.setValue("PARTY_NAME",PartyName);
                                     objRow.setValue("BOOK_CODE",UtilFunctions.getString(rsParty,"BOOK_CODE",""));
                                     objRow.setValue("VOUCHER_NO",VoucherNo);
                                     objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsParty,"LEGACY_NO",""));
                                     objRow.setValue("VOUCHER_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsParty,"VOUCHER_DATE","")));
                                     objRow.setValue("INVOICE_NO",InvoiceNo);
                                     objRow.setValue("LINK_NO",UtilFunctions.getString(rsParty,"LINK_NO",""));
                                     objRow.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(InvoiceDate));
                                     objRow.setValue("DEBIT_AMOUNT",Double.toString(UtilFunctions.getDouble(rsParty,"AMOUNT",0)));
                                     objRow.setValue("CREDIT_AMOUNT","0");*/
                                    //objRow.setValue("AMOUNT", Double.toString(UtilFunctions.getDouble(rsParty,"AMOUNT", 0)));
                                    objRow = objData.newRow();
                                    objRow.setValue("SR_NO", UtilFunctions.getString(rsParty, "RecordCounter", ""));
                                    objRow.setValue("REPORT_ID", UtilFunctions.getString(rsParty, "ReportID", ""));
                                    objRow.setValue("USER_ID", UtilFunctions.getString(rsParty, EITLERPGLOBAL.gUserID, ""));
                                    objRow.setValue("MAIN_ACCOUNT_CODE", MainCode);
                                    objRow.setValue("SUB_ACCOUNT_CODE", PartyCode);
                                    objRow.setValue("PARTY_NAME", PartyName);
                                    objRow.setValue("BOOK_CODE", UtilFunctions.getString(rsParty, "BOOK_CODE", ""));
                                    objRow.setValue("VOUCHER_NO", UtilFunctions.getString(rsInvoice, "VOUCHER_NO", ""));
                                    objRow.setValue("VOUCHER_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", "")));
                                    int DayDiff = EITLERPGLOBAL.getDayDifference(UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", ""), EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()), "yyyy-MM-dd");
                                    double Amount = 0;
                                    String DAY = null;
                                    String AMT = null;
                                    if (DayDiff <= 50) {
                                        objRow.setValue("DAYS50", Double.toString(EITLERPGLOBAL.round(DebitAmount - AdjustedAmount, 2)));
                                        //DAY=(objRow.getValue("DAYS50").toString());
                                        //System.out.println(DAY);
                                    } else if (DayDiff >= 51 && DayDiff <= 90) {
                                        objRow.setValue("DAYS51-90", Double.toString(EITLERPGLOBAL.round(DebitAmount - AdjustedAmount, 2)));
                                    } else {
                                        objRow.setValue("DAYS90", Double.toString(EITLERPGLOBAL.round(DebitAmount - AdjustedAmount, 2)));
                                    }
                                    objRow.setValue("LINKNO", LinkNo);
                                    objRow.setValue("VTYPE", vType);
                                    if (vType.equals("Inv")) {
                                        objRow.setValue("INVCOUNTER", "1");
                                        objRow.setValue("DBNCOUNTER", "0");
                                    }
                                    if (vType.equals("Dbn")) {
                                        objRow.setValue("INVCOUNTER", "0");
                                        objRow.setValue("DBNCOUNTER", "1");
                                    }
                                    objRow.setValue("DAYDIFF", Integer.toString(DayDiff));
                                    objRow.setValue("AMTDIFF", Double.toString(EITLERPGLOBAL.round(DebitAmount - AdjustedAmount, 2))); //COLUMN_15
                                    objRow.setValue("DUEDATE", EITLERPGLOBAL.formatDate(DueDate));
                                    objRow.setValue("AMOUNT", Double.toString(DebitAmount)); //COLUMN_10
                                    objData.AddRow(objRow);
                                    rsInvoice.next();
                                }
                            }
                            rsParty.next();
                        }
                    }
                    HashMap Parameters = new HashMap();
                    Parameters.put("OUT_DATE", txtAsOnDate.getText().trim());
                    Parameters.put("RUN_DATE", EITLERPGLOBAL.getCurrentDate());
                    if (txtMainCode.getText().trim().equals("210010")) {
                        Parameters.put("SALES_TYPE", "FELT SALES - 210010");
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        Parameters.put("SALES_TYPE", "SUITING SALES - 210027");
                    } else if (txtMainCode.getText().trim().equals("210072")) {
                        Parameters.put("SALES_TYPE", "FILTER FABRICS - 210072");
                    } else if (txtMainCode.getText().trim().equals("132803")) {
                        Parameters.put("SALES_TYPE", "SD RECIEVABLE - 132803");
                    } else if (txtMainCode.getText().trim().equals("132802")) {
                        Parameters.put("SALES_TYPE", "SD PAYABLES - 132802");

                    }
                    objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptDebtorsOutstandingText.rpt", Parameters, objData);
                } catch (Exception e) {
                    e.printStackTrace();
                }

                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();
    }//GEN-LAST:event_mnuPreview248OSText1ActionPerformed

    private void mnuPreviewBankThroughStmt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPreviewBankThroughStmt1ActionPerformed
        // TODO add your handling code here:
        if (!Validate()) {
            return;
        }
        ReportID = 2;
        new Thread() {
            public void run() {
                double CrAmount = 0, DrAmount = 0, ClosingBalance = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", BookCode = "", ChargeCode = "";
                ResultSet rsParty = null, rsInvoice = null, rsOpening = null, rsVoucher = null, rsReport = null;
                int EntryNo = 0, Max = 0, Counter = 0, RecordCounter = 0;
                Connection conn = null;
                Statement stmt = null;
                boolean PartyChange = false;
                int InvoiceType = 0;

                try {
                    data.Execute("DELETE FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=2", FinanceGlobal.FinURL);
                    conn = data.getConn(FinanceGlobal.FinURL);
                    stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                        BookCode = " AND BOOK_CODE IN ('09') ";
                        //ChargeCode = " AND CHARGE_CODE IN ('04') ";
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                        BookCode = " AND BOOK_CODE IN ('01') ";
                        //ChargeCode = " AND CHARGE_CODE IN ('01') ";
                    }
                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = EITLERPGLOBAL.FinFromDateDB;
                    SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
                    FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
                    // ------------------------------

                    // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                    MainCode = txtMainCode.getText();
                    PartyCode = txtSubCode.getText().trim();
                    // ------------------------------

                    // COUNT PARTIES FOR OUTSTANDING , SET MAIN_ACCOUNT_CODE AND PARTY_CODE (IF EXISTS IN txtPartyCode)
                    String Condition = "";
                    if (!txtSubCode.getText().equals("")) {
                        Condition = " AND SUB_ACCOUNT_CODE='" + txtSubCode.getText().trim() + "' ";
                    }

                    SQL = "(SELECT DISTINCT SUB_ACCOUNT_CODE FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                            + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND ENTRY_NO=" + EntryNo + Condition + " "
                            + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00') " + BookCode + " ) "
                            + " UNION "
                            + "(SELECT DISTINCT B.SUB_ACCOUNT_CODE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " "
                            + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL) "
                            + "AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' AND A.APPROVED=1 AND A.CANCELLED=0 " + BookCode + " ) "
                            + "ORDER BY SUB_ACCOUNT_CODE ";

                    rsParty = data.getResult(SQL, FinanceGlobal.FinURL);
                    rsParty.last();
                    Max = rsParty.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter = 0;
                    rsParty.first();
                    // --------------------------------------------------------------------------------------------------

                    // Prepare resultset for entering o/s data into report transaction table
                    rsReport = stmt.executeQuery("SELECT * FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=1 LIMIT 1");
                    RecordCounter = 0;
                    // --------------------------------------------------------------------------------------------------

                    if (rsParty.getRow() > 0) {
                        while (!rsParty.isAfterLast()) {
                            Counter++;
                            Bar.setValue(Counter);
                            Bar.repaint();
                            // GET PARTY NAME AND DISPLAY IT
                            PartyCode = rsParty.getString("SUB_ACCOUNT_CODE");
                            lblStatus.setText("Party : " + PartyCode);
                            PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                            // -----------------------------

                            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
                            SQL = "(SELECT BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND ENTRY_NO=" + EntryNo + " AND EFFECT='D' AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00') " + BookCode + " ) "
                                    + "UNION ALL "
                                    + "(SELECT A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='D' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) " + BookCode + " ) "
                                    + "ORDER BY VOUCHER_DATE ";

                            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
                            rsInvoice.first();
                            InvoiceNo = "";
                            InvoiceDate = "";
                            PartyChange = false;
                            // ---------------------------------------------------------------------
                            CrAmount = 0;
                            DrAmount = 0;
                            if (rsInvoice.getRow() > 0) {
                                while (!rsInvoice.isAfterLast()) {

                                    String VoucherNo = UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "");
                                    InvoiceNo = UtilFunctions.getString(rsInvoice, "INVOICE_NO", "");
                                    InvoiceDate = UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "");
                                    double DebitAmount = 0;
                                    double AdjustedAmount = 0;
                                    if (clsVoucher.getVoucherType(VoucherNo) != FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        rsInvoice.next();
                                        continue;
                                    }
                                    if (InvoiceType == 2 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        if (!clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("1") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("4")) {
                                            rsInvoice.next();
                                            continue;
                                        }
                                    } else if (InvoiceType == 1 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        if (!clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("1")) {
                                            rsInvoice.next();
                                            continue;
                                        }
                                    }

                                    if (clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                                + "AND MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                                + "AND INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + InvoiceDate + "' "
                                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                                + "AND B.MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                                + "AND B.INVOICE_DATE='" + InvoiceDate + "' AND B.INVOICE_NO='" + InvoiceNo + "' ";

                                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                                    }

                                    if (DebitAmount == AdjustedAmount) {
                                        rsInvoice.next();
                                        continue;
                                    }
                                    RecordCounter++;
                                    rsReport.moveToInsertRow();
                                    rsReport.updateLong("SR_NO", RecordCounter);
                                    rsReport.updateLong("REPORT_ID", ReportID);
                                    rsReport.updateLong("USER_ID", EITLERPGLOBAL.gUserID);
                                    rsReport.updateString("COLUMN_1", MainCode);
                                    rsReport.updateString("COLUMN_2", PartyCode);
                                    rsReport.updateString("COLUMN_3", PartyName);
                                    rsReport.updateString("COLUMN_4", UtilFunctions.getString(rsInvoice, "VOUCHER_NO", ""));
                                    rsReport.updateString("COLUMN_5", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", "")));
                                    String VoucherDate = UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", "");
                                    int VoucherType = clsVoucher.getVoucherType(VoucherNo);
                                    String LinkNo = "";
                                    String vType = "";
                                    String DueDate = "";
                                    int Days = 0;

                                    if (VoucherType == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        LinkNo = clsSalesInvoice.getAgentAlphaSrNo(InvoiceNo, InvoiceDate);
                                        Days = data.getIntValueFromDB("SELECT CREDIT_DAYS FROM D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND PARTY_CODE='" + PartyCode + "' ");
                                        DueDate = EITLERPGLOBAL.addDaysToDate(InvoiceDate, Days, "yyyy-MM-dd");
                                        vType = "Inv";
                                    }
                                    String OBC_NO = "";
                                    String OBC_DATE = "";
                                    ChargeCode = clsSalesInvoice.getInvoiceChargeCode(UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""), UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                    if ((InvoiceType == 2 || InvoiceType == 1) && (ChargeCode.startsWith("1") || ChargeCode.startsWith("4"))) {
                                        SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                                + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                                + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                + "AND B.INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' "
                                                + "AND B.INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ";
                                        OBC_NO = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                        SQL = "SELECT A.BANK_REFERENCE_DATE FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                                + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                                + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                + "AND B.INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' "
                                                + "AND B.INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ";
                                        OBC_DATE = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                    }

                                    rsReport.updateString("COLUMN_6", LinkNo);
                                    rsReport.updateString("COLUMN_7", UtilFunctions.getString(rsInvoice, "LEGACY_NO", ""));
                                    rsReport.updateString("COLUMN_8", InvoiceNo);
                                    rsReport.updateString("COLUMN_9", EITLERPGLOBAL.formatDate(InvoiceDate));
                                    rsReport.updateString("COLUMN_10", Double.toString(DebitAmount));
                                    rsReport.updateString("COLUMN_11", EITLERPGLOBAL.formatDate(DueDate));

                                    int DayDiff = EITLERPGLOBAL.getDayDifference(UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", ""), EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()), "yyyy-MM-dd");
                                    double Amount = 0;
                                    if (DayDiff <= 50) {
                                        rsReport.updateString("COLUMN_12", "50");
                                    } else if (DayDiff >= 51 && DayDiff <= 90) {
                                        rsReport.updateString("COLUMN_12", "51-90");
                                    } else {
                                        rsReport.updateString("COLUMN_12", "90");
                                    }
                                    rsReport.updateString("COLUMN_13", vType);
                                    rsReport.updateString("COLUMN_14", Integer.toString(DayDiff));
                                    rsReport.updateString("COLUMN_15", Double.toString(EITLERPGLOBAL.round(DebitAmount - AdjustedAmount, 2)));
                                    rsReport.updateString("COLUMN_16", OBC_NO);
                                    rsReport.updateString("COLUMN_17", EITLERPGLOBAL.formatDate(OBC_DATE));
                                    rsReport.insertRow();
                                    rsInvoice.next();
                                }
                            }
                            rsParty.next();
                        }
                    }
                    if (data.getIntValueFromDB("SELECT COUNT(*) FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=2", FinanceGlobal.FinURL) > 0) {
                        String SaleType = "";

                        if (txtMainCode.getText().trim().equals("210010")) {
                            SaleType = "FELT SALES - 210010";
                        } else if (txtMainCode.getText().trim().equals("210027")) {
                            SaleType = "SUITING SALES - 210027";
                        } else if (txtMainCode.getText().trim().equals("210072")) {
                            SaleType = "FILTER FABRICS - 210072";
                        }

                        URL ReportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptDebtorsOutstanding14.jsp?dbURL=" + FinanceGlobal.FinURL + "&AsOnDate=" + txtAsOnDate.getText().trim() + "&SaleType=" + SaleType + "&UserId=" + EITLERPGLOBAL.gUserID);
                        System.out.println(ReportFile);
                        EITLERPGLOBAL.loginContext.showDocument(ReportFile, "_blank");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();
    }//GEN-LAST:event_mnuPreviewBankThroughStmt1ActionPerformed

    private void mnuTransferBalance1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuTransferBalance1ActionPerformed
        // TODO add your handling code here:
        int InvoiceType = EITLERPGLOBAL.getComboCode(cmbInvoiceType);
        if (InvoiceType == 1) {
            txtMainCode.setText("210027");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 2) {
            txtMainCode.setText("210010");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 3) {
            txtMainCode.setText("210072");
            txtMainCode.setEnabled(false);
        }
        try {
            int packetSize = 1024;
            int serverPort = 50000;
            DatagramSocket socket = null; //How we send packets
            DatagramPacket packet = null; //what we send it in
            InetAddress address = null; //Where to send
            String messageSend = null; //Message to be send
            String messageReturn = null; //What we get back  from the Server
            byte[] data;
            InvoiceType = 0;
            if (txtMainCode.getText().trim().equals("210010")) {
                InvoiceType = 2;
            } else if (txtMainCode.getText().trim().equals("210027")) {
                InvoiceType = 1;
            }
            // Gets the IP address of the Server
            //address = InetAddress.getByName(args[0]);

            address = InetAddress.getByName("200.0.0.227");//
            System.out.println(address);

            socket = new DatagramSocket();
            data = new byte[packetSize];
            messageSend = new String(Integer.toString(InvoiceType));
            messageSend.getBytes(0, messageSend.length(), data, 0);

            // remember datagrams hold bytes
            packet = new DatagramPacket(data, data.length, address, serverPort);
            System.out.println(" Trying to Send the packet ");

            // sends the packet
            socket.send(packet);

            //packet is reinitialized to use it for recieving
            packet = new DatagramPacket(data, data.length);

            // Receives the packet from the server
            socket.receive(packet);

            // display message received
            messageReturn = new String(packet.getData(), 0);
            System.out.println("Message Returned : "
                    + messageReturn.trim());
        } catch (Exception e) {
            e.printStackTrace();
        }
        /*new Thread() {
         public void run() {
         try {
         double MainBalance=0, SubBalance=0;
         String GroupMainParty="", GroupSubParty="",Record="";
         String InvoiceNo="",InvoiceDate="",strMainBalance="",strBalance="",strDecimal="";
         ResultSet rsMainParty = null,rsSubParty = null;
         HashMap List = new HashMap();
         int InvoiceType = 0;
         if(txtMainCode.getText().trim().equals("210010")) {
         InvoiceType = 2;
         } else if(txtMainCode.getText().trim().equals("210027")) {
         InvoiceType = 1;
         }
         rsMainParty = data.getResult("SELECT GROUP_MAIN_PARTY FROM D_FIN_PARTY_GROUPING_HEADER WHERE INVOICE_TYPE=" +InvoiceType+ " ORDER BY GROUP_MAIN_PARTY",FinanceGlobal.FinURL);
         rsMainParty.first();
         if(rsMainParty.getRow()>0) {
         while(!rsMainParty.isAfterLast()) {
         Record = "";
         MainBalance=0;
         GroupMainParty = rsMainParty.getString("GROUP_MAIN_PARTY");
         MainBalance=BalanceTransfer(txtMainCode.getText().trim(), GroupMainParty);
         
         rsSubParty = data.getResult("SELECT GROUP_SUB_PARTY FROM D_FIN_PARTY_GROUPING_DETAIL WHERE GROUP_MAIN_PARTY='"+GroupMainParty+"' AND INVOICE_TYPE=" +InvoiceType+ " ORDER BY GROUP_SUB_PARTY",FinanceGlobal.FinURL);
         rsSubParty.first();
         if(rsSubParty.getRow()>0) {
         while(!rsSubParty.isAfterLast()) {
         GroupSubParty = rsSubParty.getString("GROUP_SUB_PARTY");
         SubBalance = EITLERPGLOBAL.round(SubBalance+BalanceTransfer(txtMainCode.getText().trim(), GroupSubParty),2);
         rsSubParty.next();
         }
         }
         
         strMainBalance = new BigDecimal(MainBalance+SubBalance).setScale(2,BigDecimal.ROUND_HALF_UP).toString();;
         strBalance = strMainBalance.substring(0,strMainBalance.indexOf("."));
         strDecimal = strMainBalance.substring(strMainBalance.indexOf(".")+1);
         if(strBalance.length()<10) {
         strBalance = EITLERPGLOBAL.padLeftEx(strBalance, "0", 10);
         } else {
         JOptionPane.showMessageDialog(null,"Party Code : " + GroupMainParty + " " +
         "\nBalance more then 10+2 format. \n File can not generated." +
         "\nContact Administrator and EDP head.");
         return;
         }
         
         if(strDecimal.length()<2) {
         strDecimal = EITLERPGLOBAL.padRightEx(strDecimal, "0", 2);
         }
         
         Record = GroupMainParty+strBalance+strDecimal+"000000000000";
         System.out.println(Record);
         List.put(Integer.toString(List.size()+1), Record);
         rsMainParty.next();
         }
         }
         
         String PrintLine = "";
         // WRITE TO FILE
         boolean sucess = new File("/data/Balance_Transfer_Cobol/").mkdir();
         if(sucess) {
         JOptionPane.showMessageDialog(null,"Directory created...");
         }
         String FileName = "/data/Balance_Transfer_Cobol/"+EITLERPGLOBAL.getCurrentDateDB().substring(8,10)+EITLERPGLOBAL.getCurrentDateDB().substring(5,7)+EITLERPGLOBAL.getCurrentDateDB().substring(0,4)+".txt";
         File file = new File(FileName);
         
         boolean exists = file.createNewFile();
         if(!exists) {
         JOptionPane.showMessageDialog(null,"File Already exists...");
         }
         BufferedWriter aFile=new BufferedWriter(new FileWriter(file));
         
         for(int i=1;i<=List.size();i++) {
         PrintLine = List.get(Integer.toString(i)).toString();
         System.out.println(PrintLine);
         aFile.write(PrintLine);
         aFile.newLine();
         }
         aFile.close();
         JOptionPane.showMessageDialog(null,"File Created successfully.");
         
         } catch(Exception e) {
         e.printStackTrace();
         }
         
         Bar.setVisible(false);
         lblStatus.setVisible(false);
         };
         }.start();*/
    }//GEN-LAST:event_mnuTransferBalance1ActionPerformed

    private void mnuPreviewBankReport1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPreviewBankReport1ActionPerformed
        // TODO add your handling code here:
        int InvoiceType = EITLERPGLOBAL.getComboCode(cmbInvoiceType);
        if (InvoiceType == 1) {
            txtMainCode.setText("210027");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 2) {
            txtMainCode.setText("210010");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 3) {
            txtMainCode.setText("210072");
            txtMainCode.setEnabled(false);
        }
        if (!Validate()) {
            return;
        }
        new Thread() {
            public void run() {

                double TBAmount = 0, Above90Days = 0, Below90Days = 0, CrAmount = 0, DrAmount = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", BookCode = "", ChargeCode = "";
                ResultSet rsParty = null, rsInvoice = null, rsOpening = null, rsVoucher = null, rsReport = null;
                int EntryNo = 0, Max = 0, Counter = 0, RecordCounter = 0;
                Connection conn = null;
                Statement stmt = null;
                boolean PartyChange = false;
                int InvoiceType = 0;
                try {
                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                    } else if (txtMainCode.getText().trim().equals("210072")) {
                        InvoiceType = 3;
                    }

                    TReportWriter.SimpleDataProvider.TTable objData = new TReportWriter.SimpleDataProvider.TTable();
                    objData.AddColumn("SR_NO");
                    objData.AddColumn("SUB_ACCOUNT_CODE");
                    objData.AddColumn("PARTY_NAME");
                    objData.AddColumn("BELOW_90_DAYS");
                    objData.AddColumn("ABOVE_90_DAYS");
                    objData.AddColumn("CLOSING_BALANCE");

                    TReportWriter.SimpleDataProvider.TRow objRow = objData.newRow();

                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = EITLERPGLOBAL.FinFromDateDB;
                    SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
                    FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
                    // ------------------------------

                    ResultSet rsAccount = data.getResult("SELECT MAIN_ACCOUNT_CODE,PARTY_CODE,PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = '" + txtMainCode.getText().trim() + "' AND PARTY_CODE<>0 AND PARTY_CODE<>'' ORDER BY MAIN_ACCOUNT_CODE, PARTY_CODE", FinanceGlobal.FinURL);
                    rsAccount.first();
                    rsAccount.last();
                    Counter = rsAccount.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Counter);
                    Bar.setMinimum(0);
                    Counter = 0;
                    Bar.setValue(Counter);
                    rsAccount.first();
                    int SrNo = 0;
                    Counter = 0;
                    while (!rsAccount.isAfterLast()) {
                        // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                        MainCode = txtMainCode.getText();
                        PartyCode = rsAccount.getString("PARTY_CODE");
                        // ------------------------------
                        TBAmount = (new clsAccount()).getClosingBalance(rsAccount.getString("MAIN_ACCOUNT_CODE"), rsAccount.getString("PARTY_CODE"), EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()), true);
                        Counter++;
                        lblStatus.setText(PartyCode);
                        Bar.setValue(Counter);
                        Bar.repaint();
                        if (TBAmount > 0) {
                            SrNo++;
                            objRow = objData.newRow();
                            objRow.setValue("SR_NO", Integer.toString(SrNo));
                            objRow.setValue("SUB_ACCOUNT_CODE", PartyCode);
                            objRow.setValue("PARTY_NAME", clsAccount.getAccountName(MainCode, PartyCode));

                            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
                            SQL = "(SELECT BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT "
                                    + "FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND ENTRY_NO=" + EntryNo + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                                    + "UNION ALL "
                                    + "(SELECT A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT "
                                    + "FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND A.APPROVED=1 AND A.CANCELLED=0 AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' "
                                    + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL )) "
                                    + "ORDER BY INVOICE_NO,YEAR(VOUCHER_DATE),MONTH(VOUCHER_DATE),DAY(VOUCHER_DATE),LINK_NO,EFFECT DESC ";

                            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
                            rsInvoice.first();
                            InvoiceNo = "";
                            InvoiceDate = "";
                            PartyChange = false;
                            // ---------------------------------------------------------------------
                            Above90Days = 0;
                            Below90Days = 0;
                            CrAmount = 0;
                            DrAmount = 0;
                            String VoucherNo = "";
                            String VoucherDate = "";
                            if (rsInvoice.getRow() > 0) {
                                while (!rsInvoice.isAfterLast()) {
                                    CrAmount = 0;
                                    DrAmount = 0;
                                    VoucherNo = UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "");
                                    VoucherDate = UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", "");
                                    InvoiceNo = UtilFunctions.getString(rsInvoice, "INVOICE_NO", "");
                                    InvoiceDate = UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "");
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                        CrAmount = CrAmount + UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                    }

                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                        DrAmount = DrAmount + UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                    }

                                    int DayDiff = EITLERPGLOBAL.getDayDifference(VoucherDate, EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()), "yyyy-MM-dd");
                                    if (DayDiff <= 90) {
                                        Below90Days = Below90Days + DrAmount - CrAmount;
                                    } else if (DayDiff > 90) {
                                        Above90Days = Above90Days + DrAmount - CrAmount;
                                    }
                                    rsInvoice.next();
                                }
                            }
                            if (Above90Days < 0) {
                                Below90Days = Below90Days + Above90Days;
                                Above90Days = 0;
                            }
                            if (Below90Days < 0) {
                                Above90Days = Above90Days + Below90Days;
                                Below90Days = 0;
                            }
                            objRow.setValue("BELOW_90_DAYS", Double.toString(Below90Days));
                            objRow.setValue("ABOVE_90_DAYS", Double.toString(Above90Days));
                            objRow.setValue("CLOSING_BALANCE", Double.toString(Below90Days + Above90Days));
                            objData.AddRow(objRow);
                            //System.out.println("Party Code : " + PartyCode + " Below 90 Days : " + EITLERPGLOBAL.padLeftEx(Double.toString(EITLERPGLOBAL.round(Below90Days,2)), " ", 10) + " Above 90 Days : " + EITLERPGLOBAL.padLeftEx(Double.toString(EITLERPGLOBAL.round(Above90Days,2)), " ", 10) + " Balance : " + EITLERPGLOBAL.padLeftEx(Double.toString(EITLERPGLOBAL.round((Below90Days+Above90Days),2)), " ", 10));
                        }
                        rsAccount.next();
                    }
                    HashMap Parameters = new HashMap();
                    Parameters.put("OUT_DATE", txtAsOnDate.getText().trim());
                    Parameters.put("RUN_DATE", EITLERPGLOBAL.getCurrentDate());
                    if (txtMainCode.getText().trim().equals("210010")) {
                        Parameters.put("SALES_TYPE", "FELT SALES - 210010");
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        Parameters.put("SALES_TYPE", "SUITING SALES - 210027");
                    }
                    objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptBankStatement.rpt", Parameters, objData);
                } catch (Exception e) {
                    e.printStackTrace();
                }

                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();
    }//GEN-LAST:event_mnuPreviewBankReport1ActionPerformed

    private void mnuPreviewMatchReport1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPreviewMatchReport1ActionPerformed
        // TODO add your handling code here:
        int InvoiceType = EITLERPGLOBAL.getComboCode(cmbInvoiceType);
        if (InvoiceType == 1) {
            txtMainCode.setText("210027");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 2) {
            txtMainCode.setText("210010");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 3) {
            txtMainCode.setText("210072");
            txtMainCode.setEnabled(false);
        }
        if (!Validate()) {
            return;
        }

        new Thread() {
            public void run() {

                double CrAmount = 0, DrAmount = 0, ClosingBalance = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", BookCode = "", ChargeCode = "";
                ResultSet rsParty = null, rsVoucher = null;
                int EntryNo = 0, Max = 0, Counter = 0, RecordCounter = 0;
                boolean PartyChange = false;
                int InvoiceType = 0;

                try {

                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                    } else if (txtMainCode.getText().trim().equals("210072")) {
                        InvoiceType = 3;
                    }
                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = ToDate.substring(0, 8) + "01";
                    // ------------------------------

                    // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                    MainCode = txtMainCode.getText();
                    PartyCode = txtSubCode.getText().trim();
                    // ------------------------------

                    // COUNT PARTIES FOR OUTSTANDING , SET MAIN_ACCOUNT_CODE AND PARTY_CODE (IF EXISTS IN txtPartyCode)
                    String Condition = "";
                    if (!txtSubCode.getText().equals("")) {
                        Condition = " AND SUB_ACCOUNT_CODE='" + txtSubCode.getText() + "' ";
                    }

                    SQL = "SELECT A.VOUCHER_NO,A.LEGACY_NO,A.VOUCHER_DATE,A.BOOK_CODE, B.MAIN_ACCOUNT_CODE,B.SUB_ACCOUNT_CODE, "
                            + "B.EFFECT,SUM(B.AMOUNT) AS AMOUNT,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.MATCHED_DATE "
                            + "FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MATCHED_DATE>='" + FromDate + "' AND B.MATCHED_DATE<='" + ToDate + "' AND B.EFFECT='D' "
                            + "AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " "
                            + "AND A.APPROVED=1 AND A.CANCELLED=0 "
                            + "GROUP BY A.VOUCHER_NO "
                            + "ORDER BY B.SUB_ACCOUNT_CODE, A.VOUCHER_DATE,A.VOUCHER_NO ";
                    //,B.GRN_NO,B.GRN_DATE

                    rsParty = data.getResult(SQL, FinanceGlobal.FinURL);
                    rsParty.last();
                    Max = rsParty.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter = 0;
                    rsParty.first();
                    // --------------------------------------------------------------------------------------------------

                    // Preparing Treport object
                    TReportWriter.SimpleDataProvider.TTable objData = new TReportWriter.SimpleDataProvider.TTable();
                    objData.AddColumn("MAIN_ACCOUNT_CODE");
                    objData.AddColumn("SUB_ACCOUNT_CODE");
                    objData.AddColumn("PARTY_NAME");
                    objData.AddColumn("BOOK_CODE");
                    objData.AddColumn("VOUCHER_NO");
                    objData.AddColumn("LEGACY_NO");
                    objData.AddColumn("VOUCHER_DATE");
                    objData.AddColumn("INVOICE_NO");
                    objData.AddColumn("LINK_NO");
                    objData.AddColumn("INVOICE_DATE");
                    objData.AddColumn("CHARGE_CODE");
                    objData.AddColumn("BANK_REF_NO");
                    objData.AddColumn("RTN_CD");
                    objData.AddColumn("EFFECT");
                    objData.AddColumn("DEBIT_AMOUNT");
                    objData.AddColumn("CREDIT_AMOUNT");
                    TReportWriter.SimpleDataProvider.TRow objRow = objData.newRow();
                    // --------------------------------------------------------------------------------------------------

                    if (rsParty.getRow() > 0) {
                        while (!rsParty.isAfterLast()) {
                            Counter++;
                            Bar.setValue(Counter);
                            Bar.repaint();

                            // GET PARTY NAME AND DISPLAY IT
                            String VoucherNo = UtilFunctions.getString(rsParty, "VOUCHER_NO", "");
                            String VoucherDate = UtilFunctions.getString(rsParty, "VOUCHER_DATE", "");
                            InvoiceNo = UtilFunctions.getString(rsParty, "INVOICE_NO", "");
                            InvoiceDate = UtilFunctions.getString(rsParty, "INVOICE_DATE", "");
                            String MatchedDate = UtilFunctions.getString(rsParty, "MATCHED_DATE", "");
                            //String GRNNo = UtilFunctions.getString(rsParty,"GRN_NO","");
                            //String GRNDate = UtilFunctions.getString(rsParty,"GRN_DATE","");
                            PartyCode = UtilFunctions.getString(rsParty, "SUB_ACCOUNT_CODE", "");
                            lblStatus.setText("Party : " + PartyCode);
                            PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                            // -----------------------------
                            double DebitAmount = 0;
                            double AdjustedAmount = 0;
                            objRow = objData.newRow();
                            objRow.setValue("MAIN_ACCOUNT_CODE", MainCode);
                            objRow.setValue("SUB_ACCOUNT_CODE", PartyCode);
                            objRow.setValue("PARTY_NAME", PartyName);
                            objRow.setValue("BOOK_CODE", UtilFunctions.getString(rsParty, "BOOK_CODE", ""));
                            objRow.setValue("VOUCHER_NO", VoucherNo);
                            objRow.setValue("LEGACY_NO", UtilFunctions.getString(rsParty, "LEGACY_NO", ""));
                            objRow.setValue("VOUCHER_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsParty, "VOUCHER_DATE", "")));
                            objRow.setValue("INVOICE_NO", InvoiceNo);
                            objRow.setValue("LINK_NO", UtilFunctions.getString(rsParty, "LINK_NO", ""));
                            objRow.setValue("INVOICE_DATE", EITLERPGLOBAL.formatDate(InvoiceDate));
                            objRow.setValue("EFFECT", "D");
                            objRow.setValue("DEBIT_AMOUNT", Double.toString(UtilFunctions.getDouble(rsParty, "AMOUNT", 0)));
                            objRow.setValue("RTN_CD", "");
                            objRow.setValue("CREDIT_AMOUNT", "0");
                            if (clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                ChargeCode = clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate);
                                objRow.setValue("CHARGE_CODE", ChargeCode);
                                String RefNo = "";
                                if ((ChargeCode.startsWith("1") || ChargeCode.startsWith("4")) && InvoiceType == 2) {
                                    SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                            + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                            + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                            + "AND B.INVOICE_NO='" + InvoiceNo + "' AND B.INVOICE_DATE='" + InvoiceDate + "' ";
                                    RefNo = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                    if (RefNo.equals("")) {
                                        RefNo = "F";
                                    }
                                } else if (ChargeCode.startsWith("1") && InvoiceType == 1) {
                                    SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                            + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                            + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                            + "AND B.INVOICE_NO='" + InvoiceNo + "' AND B.INVOICE_DATE='" + InvoiceDate + "' ";
                                    RefNo = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                } else {
                                    RefNo = "";
                                }
                                objRow.setValue("BANK_REF_NO", RefNo);
                                SQL = "SELECT VOUCHER_NO, MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,EFFECT,AMOUNT,INVOICE_NO,INVOICE_DATE, "
                                        + "LINK_NO,MATCHED_DATE FROM D_FIN_VOUCHER_DETAIL "
                                        + "WHERE MATCHED_DATE='" + MatchedDate + "' AND INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + InvoiceDate + "' "
                                        + "AND EFFECT='C' AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' ";
                                //GRN_NO,GRN_DATE,
                                rsVoucher = data.getResult(SQL, FinanceGlobal.FinURL);
                            } else {
                                objRow.setValue("CHARGE_CODE", "");
                                objRow.setValue("BANK_REF_NO", "");
                                SQL = "SELECT VOUCHER_NO, MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,EFFECT,AMOUNT,INVOICE_NO,INVOICE_DATE,"
                                        + "LINK_NO,MATCHED_DATE FROM D_FIN_VOUCHER_DETAIL "
                                        + "WHERE MATCHED_DATE='" + MatchedDate + "' AND GRN_NO='" + VoucherNo + "' AND GRN_DATE='" + VoucherDate + "' "
                                        + "AND EFFECT='C' AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' ";
                                //GRN_NO,GRN_DATE,
                                rsVoucher = data.getResult(SQL, FinanceGlobal.FinURL);
                            }
                            objData.AddRow(objRow);
                            if (rsVoucher.getRow() > 0) {
                                while (!rsVoucher.isAfterLast()) {
                                    VoucherNo = UtilFunctions.getString(rsVoucher, "VOUCHER_NO", "");
                                    objRow = objData.newRow();
                                    objRow.setValue("MAIN_ACCOUNT_CODE", MainCode);
                                    objRow.setValue("SUB_ACCOUNT_CODE", PartyCode);
                                    objRow.setValue("PARTY_NAME", PartyName);
                                    objRow.setValue("BOOK_CODE", data.getStringValueFromDB("SELECT BOOK_CODE FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='" + VoucherNo + "' ", FinanceGlobal.FinURL));
                                    objRow.setValue("VOUCHER_NO", VoucherNo);
                                    objRow.setValue("LEGACY_NO", data.getStringValueFromDB("SELECT LEGACY_NO FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='" + VoucherNo + "' ", FinanceGlobal.FinURL));
                                    objRow.setValue("VOUCHER_DATE", EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT VOUCHER_DATE FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='" + VoucherNo + "' ", FinanceGlobal.FinURL)));
                                    objRow.setValue("INVOICE_NO", UtilFunctions.getString(rsVoucher, "INVOICE_NO", ""));
                                    objRow.setValue("LINK_NO", data.getStringValueFromDB("SELECT LINK_NO FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='" + VoucherNo + "' ", FinanceGlobal.FinURL));
                                    objRow.setValue("INVOICE_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher, "INVOICE_DATE", "")));
                                    objRow.setValue("EFFECT", "C");
                                    objRow.setValue("DEBIT_AMOUNT", "0");
                                    objRow.setValue("RTN_CD", "");
                                    objRow.setValue("CREDIT_AMOUNT", Double.toString(UtilFunctions.getDouble(rsVoucher, "AMOUNT", 0)));
                                    objRow.setValue("CHARGE_CODE", "");
                                    objRow.setValue("BANK_REF_NO", "");
                                    objData.AddRow(objRow);
                                    rsVoucher.next();
                                }
                            }
                            rsParty.next();
                        }
                    }

                    HashMap Parameters = new HashMap();
                    Parameters.put("OUT_DATE", txtAsOnDate.getText().trim());
                    Parameters.put("RUN_DATE", EITLERPGLOBAL.getCurrentDate());
                    if (txtMainCode.getText().trim().equals("210010")) {
                        Parameters.put("SALES_TYPE", "FELT SALES - 210010");
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        Parameters.put("SALES_TYPE", "SUITING SALES - 210027");
                    } else if (txtMainCode.getText().trim().equals("210072")) {
                        Parameters.put("SALES_TYPE", "FILTER FABRICS - 210072");
                    } else if (txtMainCode.getText().trim().equals("132803")) {
                        Parameters.put("SALES_TYPE", "SD RECIEVABLE - 132803");
                    } else if (txtMainCode.getText().trim().equals("132802")) {
                        Parameters.put("SALES_TYPE", "SD PAYABLES - 132802");

                    }
                    objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptDebtorMatch.rpt", Parameters, objData);
                } catch (Exception e) {
                    e.printStackTrace();
                }

                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();
    }//GEN-LAST:event_mnuPreviewMatchReport1ActionPerformed

    private void mnuPreview248OS1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPreview248OS1ActionPerformed
        // TODO add your handling code here:
        if (!Validate()) {
            return;
        }
        ReportID = 2;
        new Thread() {
            public void run() {

                double CrAmount = 0, DrAmount = 0, ClosingBalance = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", BookCode = "", ChargeCode = "";
                ResultSet rsParty = null, rsInvoice = null, rsOpening = null, rsVoucher = null, rsReport = null;
                int EntryNo = 0, Max = 0, Counter = 0, RecordCounter = 0;
                Connection conn = null;
                Statement stmt = null;
                boolean PartyChange = false;
                int InvoiceType = 0;

                try {
                    data.Execute("DELETE FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=2", FinanceGlobal.FinURL);
                    conn = data.getConn(FinanceGlobal.FinURL);
                    stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                        BookCode = " AND BOOK_CODE IN ('09','18') ";
                        ChargeCode = " AND CHARGE_CODE IN ('02','08') ";
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                        BookCode = " AND BOOK_CODE IN ('01','12','16') ";
                        ChargeCode = " AND CHARGE_CODE IN ('02','04','08','05') ";
                    }
                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = EITLERPGLOBAL.FinFromDateDB;
                    SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
                    FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
                    // ------------------------------

                    // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                    MainCode = txtMainCode.getText();
                    PartyCode = txtSubCode.getText().trim();
                    // ------------------------------

                    /*if(!chkWithoutProcess.isSelected()) {
                     // CALL MATCH AND UNMATCH ENTRIES BEFORE GENERATING REPORT
                     FindMatchInvoice(MainCode, PartyCode, FromDate, ToDate);
                     while(!ProcessDone) {
                     //Wait until process is completed ...
                     }
                     ProcessDone=false;
                     FindMatchDebits(MainCode, PartyCode, FromDate, ToDate);
                     while(!ProcessDone) {
                     //Wait until process is completed ...
                     }
                     ProcessDone=false;
                     FindMatchDebitsFromClosing(MainCode, PartyCode, FromDate, ToDate);
                     while(!ProcessDone) {
                     //Wait until process is completed ...
                     }
                     ProcessDone=false;
                     // ------------------------------
                     }*/
                    // COUNT PARTIES FOR OUTSTANDING , SET MAIN_ACCOUNT_CODE AND PARTY_CODE (IF EXISTS IN txtPartyCode)
                    String Condition = "";
                    if (chkAgentwise.isSelected()) {
                        Condition = " AND SUB_ACCOUNT_CODE LIKE '" + txtAgentwise.getText().trim() + "%' ";
                    } else {
                        if (!txtSubCode.getText().equals("")) {
                            Condition = " AND SUB_ACCOUNT_CODE='" + txtSubCode.getText().trim() + "' ";
                        }
                    }

                    SQL = "(SELECT DISTINCT SUB_ACCOUNT_CODE FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                            + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND ENTRY_NO=" + EntryNo + Condition + " "
                            + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00') " + BookCode + " ) "
                            + " UNION "
                            + "(SELECT DISTINCT B.SUB_ACCOUNT_CODE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " "
                            + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL) "
                            + "AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' AND A.APPROVED=1 AND A.CANCELLED=0 " + BookCode + " ) "
                            + "ORDER BY SUB_ACCOUNT_CODE ";

                    rsParty = data.getResult(SQL, FinanceGlobal.FinURL);
                    rsParty.last();
                    Max = rsParty.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter = 0;
                    rsParty.first();
                    // --------------------------------------------------------------------------------------------------

                    // Prepare resultset for entering o/s data into report transaction table
                    rsReport = stmt.executeQuery("SELECT * FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=1 LIMIT 1");
                    RecordCounter = 0;
                    // --------------------------------------------------------------------------------------------------

                    if (rsParty.getRow() > 0) {
                        while (!rsParty.isAfterLast()) {
                            Counter++;
                            Bar.setValue(Counter);
                            Bar.repaint();
                            // GET PARTY NAME AND DISPLAY IT
                            PartyCode = rsParty.getString("SUB_ACCOUNT_CODE");
                            lblStatus.setText("Party : " + PartyCode);
                            PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                            // -----------------------------
                            /*SQL = "SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='"+PartyCode+"' AND MAIN_ACCOUNT_CODE='"+txtMainCode.getText().trim()+"' " +ChargeCode;
                             if(!data.IsRecordExist(SQL)) {
                             rsParty.next();
                             continue;
                             }*/

                            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
                            SQL = "(SELECT BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND ENTRY_NO=" + EntryNo + " AND EFFECT='D' AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00') " + BookCode + " ) "
                                    + "UNION ALL "
                                    + "(SELECT A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='D' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) " + BookCode + " ) "
                                    + "ORDER BY VOUCHER_DATE ";

                            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
                            rsInvoice.first();
                            InvoiceNo = "";
                            InvoiceDate = "";
                            PartyChange = false;
                            // ---------------------------------------------------------------------
                            CrAmount = 0;
                            DrAmount = 0;
                            if (rsInvoice.getRow() > 0) {
                                while (!rsInvoice.isAfterLast()) {

                                    String VoucherNo = UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "");
                                    InvoiceNo = UtilFunctions.getString(rsInvoice, "INVOICE_NO", "");
                                    InvoiceDate = UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "");
                                    double DebitAmount = 0;
                                    double AdjustedAmount = 0;
                                    if (clsVoucher.getVoucherType(VoucherNo) != FinanceGlobal.TYPE_SALES_JOURNAL && clsVoucher.getVoucherType(VoucherNo) != FinanceGlobal.TYPE_DEBIT_NOTE) {
                                        rsInvoice.next();
                                        continue;
                                    }
                                    if (InvoiceType == 2 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        if (!clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8")) {
                                            rsInvoice.next();
                                            continue;
                                        }
                                    } else if (InvoiceType == 1 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        if (!clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("5") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("4")) {
                                            rsInvoice.next();
                                            continue;
                                        }
                                    }

                                    if (!data.IsRecordExist("SELECT * FROM D_FIN_DEBITNOTE_RECEIPT_MAPPING WHERE DEBITNOTE_VOUCHER_NO='" + VoucherNo + "'", FinanceGlobal.FinURL)
                                            && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_DEBIT_NOTE) {
                                        rsInvoice.next();
                                        continue;
                                    }

                                    if (clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                                + "AND MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                                + "AND INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + InvoiceDate + "' "
                                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                                + "AND B.MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                                + "AND B.INVOICE_DATE='" + InvoiceDate + "' AND B.INVOICE_NO='" + InvoiceNo + "' ";

                                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                                    } else {
                                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                                + "AND MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                                + "AND B.MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                                + "AND B.GRN_NO='" + VoucherNo + "' ";
                                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                                    }
                                    if (DebitAmount == AdjustedAmount) {
                                        rsInvoice.next();
                                        continue;
                                    }
                                    RecordCounter++;
                                    rsReport.moveToInsertRow();
                                    rsReport.updateLong("SR_NO", RecordCounter);
                                    rsReport.updateLong("REPORT_ID", ReportID);
                                    rsReport.updateLong("USER_ID", EITLERPGLOBAL.gUserID);
                                    rsReport.updateString("COLUMN_1", MainCode);
                                    rsReport.updateString("COLUMN_2", PartyCode);
                                    rsReport.updateString("COLUMN_3", PartyName);
                                    rsReport.updateString("COLUMN_4", UtilFunctions.getString(rsInvoice, "VOUCHER_NO", ""));
                                    rsReport.updateString("COLUMN_5", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", "")));
                                    String VoucherDate = UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", "");
                                    int VoucherType = clsVoucher.getVoucherType(VoucherNo);
                                    String LinkNo = "";
                                    String vType = "";
                                    String DueDate = "";
                                    if (VoucherType == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        LinkNo = clsSalesInvoice.getAgentAlphaSrNo(InvoiceNo, InvoiceDate);
                                        DueDate = data.getStringValueFromDB("SELECT DUE_DATE FROM DINESHMILLS.D_SAL_INVOICE_HEADER WHERE INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + InvoiceDate + "' AND APPROVED=1 AND CANCELLED=0 ");
                                        vType = "Inv";
                                    } else {
                                        LinkNo = EITLERPGLOBAL.padLeftEx(VoucherNo.substring(VoucherNo.length() - 5), "0", 6) + "/" + EITLERPGLOBAL.getFinYearStartDate(VoucherDate).substring(2, 4) + EITLERPGLOBAL.getFinYearEndDate(VoucherDate).substring(2, 4);
                                        DueDate = VoucherDate;
                                        vType = "Dbn";
                                    }
                                    rsReport.updateString("COLUMN_6", LinkNo);
                                    rsReport.updateString("COLUMN_7", UtilFunctions.getString(rsInvoice, "LEGACY_NO", ""));
                                    rsReport.updateString("COLUMN_8", InvoiceNo);
                                    rsReport.updateString("COLUMN_9", EITLERPGLOBAL.formatDate(InvoiceDate));
                                    rsReport.updateString("COLUMN_10", Double.toString(DebitAmount));
                                    rsReport.updateString("COLUMN_11", EITLERPGLOBAL.formatDate(DueDate));

                                    int DayDiff = EITLERPGLOBAL.getDayDifference(UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", ""), EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()), "yyyy-MM-dd");
                                    double Amount = 0;
                                    if (DayDiff <= 50) {
                                        rsReport.updateString("COLUMN_12", "50");
                                    } else if (DayDiff >= 51 && DayDiff <= 90) {
                                        rsReport.updateString("COLUMN_12", "51-90");
                                    } else {
                                        rsReport.updateString("COLUMN_12", "90");
                                    }
                                    rsReport.updateString("COLUMN_13", vType);
                                    rsReport.updateString("COLUMN_14", Integer.toString(DayDiff));
                                    rsReport.updateString("COLUMN_15", Double.toString(EITLERPGLOBAL.round(DebitAmount - AdjustedAmount, 2)));
                                    rsReport.insertRow();
                                    rsInvoice.next();
                                }
                            }
                            rsParty.next();
                        }
                    }
                    if (data.getIntValueFromDB("SELECT COUNT(*) FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=2", FinanceGlobal.FinURL) > 0) {
                        String SaleType = "";

                        if (txtMainCode.getText().trim().equals("210010")) {
                            SaleType = "FELT SALES - 210010";
                        } else if (txtMainCode.getText().trim().equals("210027")) {
                            SaleType = "SUITING SALES - 210027";
                        } else if (txtMainCode.getText().trim().equals("210072")) {
                            SaleType = "FILTER FABRICS - 210072";
                        }

                        URL ReportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptDebtorsOutstanding2.jsp?dbURL=" + FinanceGlobal.FinURL + "&AsOnDate=" + txtAsOnDate.getText().trim() + "&SaleType=" + SaleType + "&UserId=" + EITLERPGLOBAL.gUserID);
                        System.out.println(ReportFile);
                        EITLERPGLOBAL.loginContext.showDocument(ReportFile, "_blank");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();
    }//GEN-LAST:event_mnuPreview248OS1ActionPerformed

    private void mnuPreviewPDFReport1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPreviewPDFReport1ActionPerformed
        // TODO add your handling code here:
        int InvoiceType = EITLERPGLOBAL.getComboCode(cmbInvoiceType);
        if (InvoiceType == 1) {
            txtMainCode.setText("210027");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 2) {
            txtMainCode.setText("210010");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 3) {
            txtMainCode.setText("210072");
            txtMainCode.setEnabled(false);
        }
        if (!Validate()) {
            return;
        }
        ReportID = 1;
        new Thread() {
            public void run() {

                double CrAmount = 0, DrAmount = 0, ClosingBalance = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "";
                ResultSet rsParty = null, rsInvoice = null, rsOpening = null, rsVoucher = null, rsReport = null;
                int EntryNo = 0, Max = 0, Counter = 0, RecordCounter = 0;
                Connection conn = null;
                Statement stmt = null;
                boolean PartyChange = false;
                int InvoiceType = 0;
                try {
                    data.Execute("DELETE FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=1", FinanceGlobal.FinURL);
                    conn = data.getConn(FinanceGlobal.FinURL);
                    stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    //rsReport = stmt.executeQuery("SELECT * FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID="+EITLERPGLOBAL.gUserID+" AND REPORT_ID=1 LIMIT 1");
                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                    } else if (txtMainCode.getText().trim().equals("210072")) {
                        InvoiceType = 3;
                    }
                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = EITLERPGLOBAL.FinFromDateDB;
                    SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
                    FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
                    // ------------------------------

                    // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                    MainCode = txtMainCode.getText();
                    PartyCode = txtSubCode.getText().trim();
                    // ------------------------------

                    if (!chkWithoutProcess.isSelected()) {
                        // CALL MATCH AND UNMATCH ENTRIES BEFORE GENERATING REPORT
                        FindMatchInvoice(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebits(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebitsFromClosing(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        // ------------------------------
                    }

                    // COUNT PARTIES FOR OUTSTANDING , SET MAIN_ACCOUNT_CODE AND PARTY_CODE (IF EXISTS IN txtPartyCode)
                    String Condition = "";
                    if (!txtSubCode.getText().equals("")) {
                        Condition = " AND SUB_ACCOUNT_CODE='" + txtSubCode.getText() + "' ";
                    }
                    
                    String EffectCondition = "";
                    if (OpgOnlyCredit.isSelected()) {
                        EffectCondition = " AND EFFECT='C' ";
                    } else if (OpgOnlyDebit.isSelected()) {
                        EffectCondition = " AND EFFECT='D' ";
                    }

                    String BookCodeCondition = "";
                    if (!txtBookCode.getText().trim().equals("")) {
                        BookCodeCondition = " AND BOOK_CODE IN (" + txtBookCode.getText().trim() + ") ";
                    }

                    SQL = "(SELECT DISTINCT SUB_ACCOUNT_CODE FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                            + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND ENTRY_NO=" + EntryNo + Condition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                            + " UNION "
                            + "(SELECT DISTINCT B.SUB_ACCOUNT_CODE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL) "
                            + "AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' AND A.APPROVED=1 AND A.CANCELLED=0) "
                            + "ORDER BY SUB_ACCOUNT_CODE ";

                    rsParty = data.getResult(SQL, FinanceGlobal.FinURL);
                    rsParty.last();
                    Max = rsParty.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter = 0;
                    rsParty.first();
                    // --------------------------------------------------------------------------------------------------

                    // Prepare resultset for entering o/s data into report transaction table
                    rsReport = stmt.executeQuery("SELECT * FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=1 LIMIT 1");
                    RecordCounter = 0;
                    // --------------------------------------------------------------------------------------------------

                    if (rsParty.getRow() > 0) {
                        while (!rsParty.isAfterLast()) {

                            Counter++;

                            Bar.setValue(Counter);
                            Bar.repaint();
                            // GET PARTY NAME AND DISPLAY IT
                            PartyCode = rsParty.getString("SUB_ACCOUNT_CODE");
                            lblStatus.setText("Party : " + PartyCode);
                            PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                            // -----------------------------

                            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
                            SQL = "(SELECT BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                                    //+ "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND ENTRY_NO=" + EntryNo + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND ENTRY_NO=" + EntryNo + EffectCondition + BookCodeCondition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                                    + "UNION ALL "
                                    + "(SELECT A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                    //+ "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 " + EffectCondition + BookCodeCondition
                                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL )) "
                                    + "ORDER BY VOUCHER_DATE ";

                            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
                            rsInvoice.first();
                            InvoiceNo = "";
                            InvoiceDate = "";
                            PartyChange = false;
                            // ---------------------------------------------------------------------
                            CrAmount = 0;
                            DrAmount = 0;
                            if (rsInvoice.getRow() > 0) {
                                while (!rsInvoice.isAfterLast()) {

                                    if (!PartyChange) {
                                        ClosingBalance = Math.abs(clsAccount.getClosingBalance(MainCode, PartyCode, ToDate, true));
                                        PartyChange = true;
                                    }

                                    RecordCounter++;
                                    rsReport.moveToInsertRow();
                                    rsReport.updateLong("SR_NO", RecordCounter);
                                    rsReport.updateLong("REPORT_ID", ReportID);
                                    rsReport.updateLong("USER_ID", EITLERPGLOBAL.gUserID);
                                    rsReport.updateString("COLUMN_1", MainCode);
                                    rsReport.updateString("COLUMN_2", PartyCode);
                                    rsReport.updateString("COLUMN_3", PartyName);
                                    rsReport.updateString("COLUMN_4", UtilFunctions.getString(rsInvoice, "BOOK_CODE", ""));
                                    rsReport.updateString("COLUMN_5", UtilFunctions.getString(rsInvoice, "VOUCHER_NO", ""));
                                    rsReport.updateString("COLUMN_6", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", "")));
                                    rsReport.updateString("COLUMN_7", UtilFunctions.getString(rsInvoice, "LEGACY_NO", ""));
                                    rsReport.updateString("COLUMN_8", UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""));
                                    rsReport.updateString("COLUMN_9", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "")));
                                    rsReport.updateString("COLUMN_10", UtilFunctions.getString(rsInvoice, "LINK_NO", ""));
                                    rsReport.updateString("COLUMN_11", UtilFunctions.getString(rsInvoice, "EFFECT", ""));
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                        CrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                    }
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                        DrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                    }
                                    rsReport.updateString("COLUMN_12", Double.toString(UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0)));
                                    rsReport.updateString("COLUMN_13", "0");
                                    rsReport.updateString("COLUMN_14", Double.toString(ClosingBalance));
                                    int DayDiff = EITLERPGLOBAL.getDayDifference(UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", ""), EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()), "yyyy-MM-dd");
                                    double Amount = 0;
                                    if (DayDiff <= 30) {
                                        rsReport.updateString("COLUMN_15", "30");
                                    } else if (DayDiff >= 31 && DayDiff <= 60) {
                                        rsReport.updateString("COLUMN_15", "31-60");
                                    } else if (DayDiff >= 61 && DayDiff <= 180) {
                                        rsReport.updateString("COLUMN_15", "61-180");
                                    } else {
                                        rsReport.updateString("COLUMN_15", "180");
                                    }

                                    if (clsVoucher.getVoucherType(UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "")) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        rsReport.updateString("COLUMN_16", clsSalesInvoice.getInvoiceChargeCode(UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""), UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "")));
                                    } else {
                                        rsReport.updateString("COLUMN_16", "");
                                    }

                                    if (txtAsOnDate.getText().trim().equals("")) {
                                        rsReport.updateString("COLUMN_29", EITLERPGLOBAL.getCurrentDateDB());
                                    } else {
                                        rsReport.updateString("COLUMN_29", EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText()));
                                    }
                                    
                                    rsReport.insertRow();
                                    rsInvoice.next();
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                }
                                if (EITLERPGLOBAL.round(ClosingBalance, 2) != EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2)) {
                                    if (OpgNone.isSelected() && txtBookCode.getText().trim().equals("")) {
                                    String Msg = "Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2);
                                    JOptionPane.showMessageDialog(null, Msg);
                                    System.out.println("Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2));
                                }
                                }
                            }
                            rsParty.next();
                        }
                    }
                    
                    
                    data.Execute("UPDATE  FINANCE.D_FIN_REPORT_TRANSACTION, DINESHMILLS.D_SAL_PARTY_MASTER SET COLUMN_22 = CHARGE_CODE,COLUMN_23 =PARTY_NAME ,COLUMN_24= DISPATCH_STATION,COLUMN_20 = PARTY_TYPE WHERE USER_ID = '"+EITLERPGLOBAL.gUserID+"' AND REPORT_ID =1 AND COLUMN_1 = MAIN_ACCOUNT_CODE AND PARTY_CODE = COLUMN_2");
                    
                    data.Execute("UPDATE  FINANCE.D_FIN_REPORT_TRANSACTION SET COLUMN_21 = 'INV' WHERE  USER_ID = '"+EITLERPGLOBAL.gUserID+"' AND REPORT_ID =1 AND SUBSTRING(COLUMN_5,1,2) ='SJ'");
                    
                    data.Execute("UPDATE  FINANCE.D_FIN_REPORT_TRANSACTION SET COLUMN_21 = 'DBN' WHERE  USER_ID = '"+EITLERPGLOBAL.gUserID+"' AND REPORT_ID =1 AND SUBSTRING(COLUMN_5,1,2) ='DN'");
                    
                    data.Execute("UPDATE  FINANCE.D_FIN_REPORT_TRANSACTION SET COLUMN_21 = 'CDN' WHERE  USER_ID = '"+EITLERPGLOBAL.gUserID+"' AND REPORT_ID =1 AND SUBSTRING(COLUMN_5,1,2) ='CN'");
                    
                    data.Execute("UPDATE  FINANCE.D_FIN_REPORT_TRANSACTION,  DINESHMILLS.D_SAL_INVOICE_HEADER SET COLUMN_25 = DUE_DATE,COLUMN_26 = CONCAT(SUBSTRING(DUE_DATE,9,2),'/',SUBSTRING(DUE_DATE,6,2),'/',SUBSTRING(DUE_DATE,1,4)),COLUMN_27 = INVOICE_DATE, COLUMN_30 = DATEDIFF(COLUMN_29,INVOICE_DATE) WHERE USER_ID = '"+EITLERPGLOBAL.gUserID+"' AND REPORT_ID =1  AND COLUMN_1 = 210027  AND COLUMN_8 = INVOICE_NO  AND INVOICE_DATE = CONCAT(SUBSTRING(COLUMN_9,7,4),'-',SUBSTRING(COLUMN_9,4,2),'-',SUBSTRING(COLUMN_9,1,2))  AND PARTY_CODE = COLUMN_2  AND INVOICE_TYPE =1");
                    
                    data.Execute("UPDATE  FINANCE.D_FIN_REPORT_TRANSACTION,  DINESHMILLS.D_SAL_INVOICE_HEADER SET COLUMN_25 = DUE_DATE,COLUMN_26 = CONCAT(SUBSTRING(DUE_DATE,9,2),'/',SUBSTRING(DUE_DATE,6,2),'/',SUBSTRING(DUE_DATE,1,4)),COLUMN_27 = INVOICE_DATE, COLUMN_30 = DATEDIFF(COLUMN_29,INVOICE_DATE) WHERE USER_ID = '"+EITLERPGLOBAL.gUserID+"' AND REPORT_ID =1  AND COLUMN_1 = 210010  AND COLUMN_8 = INVOICE_NO  AND INVOICE_DATE = CONCAT(SUBSTRING(COLUMN_9,7,4),'-',SUBSTRING(COLUMN_9,4,2),'-',SUBSTRING(COLUMN_9,1,2))  AND PARTY_CODE = COLUMN_2  AND INVOICE_TYPE =2");
                    
                    data.Execute("UPDATE  FINANCE.D_FIN_REPORT_TRANSACTION,  DINESHMILLS.D_SAL_INVOICE_HEADER SET COLUMN_25 = DUE_DATE,COLUMN_26 = CONCAT(SUBSTRING(DUE_DATE,9,2),'/',SUBSTRING(DUE_DATE,6,2),'/',SUBSTRING(DUE_DATE,1,4)),COLUMN_27 = INVOICE_DATE, COLUMN_30 = DATEDIFF(COLUMN_29,INVOICE_DATE) WHERE USER_ID = '"+EITLERPGLOBAL.gUserID+"' AND REPORT_ID =1  AND COLUMN_1 = 210072  AND COLUMN_8 = INVOICE_NO  AND INVOICE_DATE = CONCAT(SUBSTRING(COLUMN_9,7,4),'-',SUBSTRING(COLUMN_9,4,2),'-',SUBSTRING(COLUMN_9,1,2))  AND PARTY_CODE = COLUMN_2  AND INVOICE_TYPE =3");

                    
                    
                    
                    if (data.getIntValueFromDB("SELECT COUNT(*) FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=1", FinanceGlobal.FinURL) > 0) {
                        String SaleType = "";

                        if (txtMainCode.getText().trim().equals("210010")) {
                            SaleType = "FELT SALES - 210010";
                        } else if (txtMainCode.getText().trim().equals("210027")) {
                            SaleType = "SUITING SALES - 210027";
                        } else if (txtMainCode.getText().trim().equals("210072")) {
                            SaleType = "FILTER FABRICS - 210072";
                        }

                        URL ReportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptDebtorsOutstanding.jsp?dbURL=" + FinanceGlobal.FinURL + "&AsOnDate=" + txtAsOnDate.getText().trim() + "&SaleType=" + SaleType + "&UserId=" + EITLERPGLOBAL.gUserID);
                        System.out.println(ReportFile);
                        EITLERPGLOBAL.loginContext.showDocument(ReportFile, "_blank");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();
    }//GEN-LAST:event_mnuPreviewPDFReport1ActionPerformed

    private void mnuPreviewTextReport1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPreviewTextReport1ActionPerformed
        // TODO add your handling code here:
        int InvoiceType = EITLERPGLOBAL.getComboCode(cmbInvoiceType);
        if (InvoiceType == 1) {
            txtMainCode.setText("210027");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 2) {
            txtMainCode.setText("210010");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 3) {
            txtMainCode.setText("210072");
            txtMainCode.setEnabled(false);
        }
        if (!Validate()) {
            return;
        }
        ReportID = 1;
        new Thread() {
            public void run() {

                double CrAmount = 0, DrAmount = 0, ClosingBalance = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", PartyType = "";
                ResultSet rsParty = null, rsInvoice = null, rsOpening = null, rsVoucher = null;
                int EntryNo = 0, Max = 0, Counter = 0;
                HashMap tempList = new HashMap();
                HashMap ReportList = new HashMap();
                clsDebtorsOutstandingItems ObjItem = new clsDebtorsOutstandingItems();
                boolean PartyChange = false;
                int InvoiceType = 0;
                try {
                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                    } else if (txtMainCode.getText().trim().equals("210072")) {
                        InvoiceType = 3;
                    }
                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = EITLERPGLOBAL.FinFromDateDB;
                    SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
                    FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
                    // ------------------------------

                    // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                    MainCode = txtMainCode.getText();
                    PartyCode = txtSubCode.getText().trim();
                    // ------------------------------

                    if (!chkWithoutProcess.isSelected()) {
                        // CALL MATCH AND UNMATCH ENTRIES BEFORE GENERATING REPORT
                        FindMatchInvoice(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebits(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebitsFromClosing(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        // ------------------------------
                    }

                    // COUNT PARTIES FOR OUTSTANDING , SET MAIN_ACCOUNT_CODE AND PARTY_CODE (IF EXISTS IN txtPartyCode)
                    String Condition = "";
                    if (chkAgentwise.isSelected()) {
                        Condition = " AND SUB_ACCOUNT_CODE LIKE '" + txtAgentwise.getText().trim() + "%' ";
                    } else {
                        if (!txtSubCode.getText().equals("")) {
                            Condition = " AND SUB_ACCOUNT_CODE='" + txtSubCode.getText().trim() + "' ";
                        }
                    }

                    /*Condition = " AND SUB_ACCOUNT_CODE IN ('239905','270000','559901','619913','670201','510501','510201','412607','319907','311912'," +
                     "'300170','300156','300153','179904','278801','278901','308801','470000','480000','510000','550000','570000','580000','600000'," +
                     "'158801','171165','170000','175790','176830','176084','218801','218844','230943','231705','231703','300157','301756','307757'," +
                     "'308843','308817') ";*/
                    String EffectCondition = "";
                    if (OpgOnlyCredit.isSelected()) {
                        EffectCondition = " AND EFFECT='C' ";
                    } else if (OpgOnlyDebit.isSelected()) {
                        EffectCondition = " AND EFFECT='D' ";
                    }

                    String BookCodeCondition = "";
                    if (!txtBookCode.getText().trim().equals("")) {
                        BookCodeCondition = " AND BOOK_CODE IN (" + txtBookCode.getText().trim() + ") ";
                    }
                    SQL = "(SELECT DISTINCT SUB_ACCOUNT_CODE FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                            + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND ENTRY_NO=" + EntryNo + Condition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                            + " UNION "
                            + "(SELECT DISTINCT B.SUB_ACCOUNT_CODE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL) "
                            + "AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' AND A.APPROVED=1 AND A.CANCELLED=0) "
                            + "ORDER BY SUB_ACCOUNT_CODE ";
                    System.out.println(SQL);
                    rsParty = data.getResult(SQL, FinanceGlobal.FinURL);
                    rsParty.last();
                    Max = rsParty.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter = 0;
                    rsParty.first();
                    // --------------------------------------------------------------------------------------------------

                    if (rsParty.getRow() > 0) {
                        while (!rsParty.isAfterLast()) {

                            Counter++;

                            Bar.setValue(Counter);
                            Bar.repaint();
                            // GET PARTY NAME AND DISPLAY IT
                            PartyCode = rsParty.getString("SUB_ACCOUNT_CODE");
                            lblStatus.setText("Party : " + PartyCode);
                            PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                            //data.getStringValueFromDB("SELECT PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='"+MainCode+"' AND PARTY_CODE='"+PartyCode+"' ",FinanceGlobal.FinURL);
                            // -----------------------------

                            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
                            SQL = "(SELECT BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT "
                                    + "FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND ENTRY_NO=" + EntryNo + EffectCondition + BookCodeCondition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                                    + "UNION ALL "
                                    + "(SELECT A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT "
                                    + "FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND A.APPROVED=1 AND A.CANCELLED=0 " + EffectCondition + BookCodeCondition
                                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' "
                                    + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL )) "
                                    + //"ORDER BY INVOICE_NO,VOUCHER_DATE,LINK_NO ";
                                    "ORDER BY INVOICE_NO,YEAR(VOUCHER_DATE),MONTH(VOUCHER_DATE),DAY(VOUCHER_DATE),LINK_NO,EFFECT DESC ";
                            System.out.println(SQL);
                            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
                            rsInvoice.first();
                            InvoiceNo = "";
                            InvoiceDate = "";
                            PartyType = "";
                            PartyChange = false;
                            // ---------------------------------------------------------------------
                            CrAmount = 0;
                            DrAmount = 0;
                            if (rsInvoice.getRow() > 0) {
                                while (!rsInvoice.isAfterLast()) {

                                    if (!PartyChange) {
                                        ClosingBalance = Math.abs(clsAccount.getClosingBalance(MainCode, PartyCode, ToDate, true));
                                        PartyType = data.getStringValueFromDB("SELECT DOCUMENT_THROUGH FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + PartyCode + "' AND MAIN_ACCOUNT_CODE='" + MainCode + "' ");
                                        PartyChange = true;
                                    }

                                    ObjItem = new clsDebtorsOutstandingItems();
                                    ObjItem.setAttribute("MAIN_ACCOUNT_CODE", MainCode);
                                    ObjItem.setAttribute("SUB_ACCOUNT_CODE", PartyCode);
                                    ObjItem.setAttribute("PARTY_NAME", PartyName);
                                    ObjItem.setAttribute("PARTY_TYPE", PartyType);
                                    ObjItem.setAttribute("BOOK_CODE", UtilFunctions.getString(rsInvoice, "BOOK_CODE", ""));
                                    ObjItem.setAttribute("VOUCHER_NO", UtilFunctions.getString(rsInvoice, "VOUCHER_NO", ""));
                                    ObjItem.setAttribute("VOUCHER_DATE", UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", ""));
                                    ObjItem.setAttribute("LEGACY_NO", UtilFunctions.getString(rsInvoice, "LEGACY_NO", ""));
                                    ObjItem.setAttribute("INVOICE_NO", UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""));
                                    ObjItem.setAttribute("INVOICE_DATE", UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                    String ChargeCode = "";
                                    String OBC_NO = "";
                                    String BaleNo = "";
                                    String LrNo = "";
                                    if (clsVoucher.getVoucherType(UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "")) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        ChargeCode = clsSalesInvoice.getInvoiceChargeCode(UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""), UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                        if (InvoiceType == 2 && (ChargeCode.startsWith("1") || ChargeCode.startsWith("4"))) {
                                            SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                                    + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                                    + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                    + "AND B.INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' "
                                                    + "AND B.INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ";
                                            OBC_NO = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                        } else if (ChargeCode.startsWith("1") && InvoiceType == 1) {
                                            SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                                    + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                                    + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                    + "AND B.INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' "
                                                    + "AND B.INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ";
                                            OBC_NO = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                        }

                                        BaleNo = data.getStringValueFromDB("SELECT BALE_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' AND INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ");
                                        // LrNo = data.getStringValueFromDB("SELECT LR_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='"+UtilFunctions.getString(rsInvoice,"INVOICE_NO","")+"' AND INVOICE_DATE='"+UtilFunctions.getString(rsInvoice,"INVOICE_DATE","")+"' ",FinanceGlobal.FinURL);
                                        LrNo = data.getStringValueFromDB("SELECT LR_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' AND INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ");
                                    } else {
                                        if (!UtilFunctions.getString(rsInvoice, "BOOK_CODE", "").equals("14")) {
                                            ChargeCode = data.getStringValueFromDB("SELECT REASON_CODE FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='" + UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "") + "' ", FinanceGlobal.FinURL);
                                        }
                                    }

                                    ObjItem.setAttribute("CHARGE_CODE", ChargeCode);
                                    String LinkNo = "";
                                    if (UtilFunctions.getString(rsInvoice, "LINK_NO", "").length() > 14) {
                                        LinkNo = UtilFunctions.getString(rsInvoice, "LINK_NO", "").substring(0, 14);
                                    } else {
                                        if (UtilFunctions.getString(rsInvoice, "LINK_NO", "").equals("") && clsVoucher.getVoucherType(UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "")) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                            LinkNo = clsSalesInvoice.getAgentAlphaSrNo(UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""), UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                        } else {
                                            LinkNo = UtilFunctions.getString(rsInvoice, "LINK_NO", "");
                                        }
                                    }
                                    ObjItem.setAttribute("LINK_NO", LinkNo);

                                    ObjItem.setAttribute("OBC_NO", OBC_NO);
                                    ObjItem.setAttribute("BALE_NO", BaleNo);
                                    ObjItem.setAttribute("LR_NO", LrNo);

                                    ObjItem.setAttribute("EFFECT", UtilFunctions.getString(rsInvoice, "EFFECT", ""));
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                        CrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                        ObjItem.setAttribute("CREDIT_AMOUNT", UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0));
                                        ObjItem.setAttribute("DEBIT_AMOUNT", 0);
                                    }
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                        DrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                        ObjItem.setAttribute("CREDIT_AMOUNT", 0);
                                        ObjItem.setAttribute("DEBIT_AMOUNT", UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0));
                                    }
                                    ObjItem.setAttribute("CLOSING_BALANCE", ClosingBalance);
                                    tempList.put(Integer.toString(tempList.size() + 1), ObjItem);
                                    rsInvoice.next();
                                }
                                if (EITLERPGLOBAL.round(ClosingBalance, 2) != EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2)) {
                                    if (OpgNone.isSelected() && txtBookCode.getText().trim().equals("")) {
                                        String Msg = "Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2);
                                        JOptionPane.showMessageDialog(null, Msg);
                                        System.out.println("Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2));
                                    }
                                }

                                ReportList = appendList(tempList, ReportList);
                                tempList.clear();
                            }
                            rsParty.next();
                            //EITLERPGLOBAL.PAGE_BREAK=true;
                        }
                    }
                    if (ReportList.size() > 0) {
                        if (txtSubCode.getText().trim().equals("") && (!chkAgentwise.isSelected()) && cmbInvoiceTypeModel.getCode(cmbInvoiceType.getSelectedIndex()) == 1) {
                            generateReportSuitting(ReportList, txtAsOnDate.getText().trim());
                        } else {
                            generateReport(ReportList, txtAsOnDate.getText().trim());
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();
    }//GEN-LAST:event_mnuPreviewTextReport1ActionPerformed

    private void mnuPreviewTextReportSTG1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPreviewTextReportSTG1ActionPerformed
        // TODO add your handling code here:
        if (!Validate()) {
            return;
        }
        ReportID = 1;
        new Thread() {
            public void run() {

                double CrAmount = 0, DrAmount = 0, ClosingBalance = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", PartyType = "";
                ResultSet rsParty = null, rsInvoice = null, rsOpening = null, rsVoucher = null;
                int EntryNo = 0, Max = 0, Counter = 0;
                HashMap tempList = new HashMap();
                HashMap ReportList = new HashMap();
                clsDebtorsOutstandingItems ObjItem = new clsDebtorsOutstandingItems();
                boolean PartyChange = false;
                int InvoiceType = 0;
                try {
                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                    } else if (txtMainCode.getText().trim().equals("210072")) {
                        InvoiceType = 3;
                    } else if (txtMainCode.getText().trim().equals("132803")) {
                        InvoiceType = 4;
                    } else if (txtMainCode.getText().trim().equals("132802")) {
                        InvoiceType = 5;
                    }
                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = EITLERPGLOBAL.FinFromDateDB;
                    SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
                    FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
                    // ------------------------------

                    // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                    MainCode = txtMainCode.getText();
                    PartyCode = txtSubCode.getText().trim();
                    // ------------------------------

                    if (!chkWithoutProcess.isSelected()) {
                        // CALL MATCH AND UNMATCH ENTRIES BEFORE GENERATING REPORT
                        FindMatchInvoice(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebits(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebitsFromClosing(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        // ------------------------------
                    }

                    // COUNT PARTIES FOR OUTSTANDING , SET MAIN_ACCOUNT_CODE AND PARTY_CODE (IF EXISTS IN txtPartyCode)
                    String Condition = "";
                    if (chkAgentwise.isSelected()) {
                        Condition = " AND SUB_ACCOUNT_CODE LIKE '" + txtAgentwise.getText().trim() + "%' ";
                    } else {
                        if (!txtSubCode.getText().equals("")) {
                            Condition = " AND SUB_ACCOUNT_CODE='" + txtSubCode.getText().trim() + "' ";
                        }
                    }

                    /*Condition = " AND SUB_ACCOUNT_CODE IN ('239905','270000','559901','619913','670201','510501','510201','412607','319907','311912'," +
                     "'300170','300156','300153','179904','278801','278901','308801','470000','480000','510000','550000','570000','580000','600000'," +
                     "'158801','171165','170000','175790','176830','176084','218801','218844','230943','231705','231703','300157','301756','307757'," +
                     "'308843','308817') ";*/
                    String EffectCondition = "";
                    if (OpgOnlyCredit.isSelected()) {
                        EffectCondition = " AND EFFECT='C' ";
                    } else if (OpgOnlyDebit.isSelected()) {
                        EffectCondition = " AND EFFECT='D' ";
                    }

                    String BookCodeCondition = "";
                    if (!txtBookCode.getText().trim().equals("")) {
                        BookCodeCondition = " AND BOOK_CODE IN (" + txtBookCode.getText().trim() + ") ";
                    }
                    SQL = "(SELECT DISTINCT SUB_ACCOUNT_CODE FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                            + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND ENTRY_NO=" + EntryNo + Condition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                            + " UNION "
                            + "(SELECT DISTINCT B.SUB_ACCOUNT_CODE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL) "
                            + "AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' AND A.APPROVED=1 AND A.CANCELLED=0) "
                            + "ORDER BY SUB_ACCOUNT_CODE ";
                    System.out.println(SQL);
                    rsParty = data.getResult(SQL, FinanceGlobal.FinURL);
                    rsParty.last();
                    Max = rsParty.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter = 0;
                    rsParty.first();
                    // --------------------------------------------------------------------------------------------------

                    if (rsParty.getRow() > 0) {
                        while (!rsParty.isAfterLast()) {

                            Counter++;

                            Bar.setValue(Counter);
                            Bar.repaint();
                            // GET PARTY NAME AND DISPLAY IT
                            PartyCode = rsParty.getString("SUB_ACCOUNT_CODE");
                            lblStatus.setText("Party : " + PartyCode);
                            PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                            //data.getStringValueFromDB("SELECT PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='"+MainCode+"' AND PARTY_CODE='"+PartyCode+"' ",FinanceGlobal.FinURL);
                            // -----------------------------

                            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
                            SQL = "(SELECT BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT "
                                    + "FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND ENTRY_NO=" + EntryNo + EffectCondition + BookCodeCondition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                                    + "UNION ALL "
                                    + "(SELECT A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT "
                                    + "FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND A.APPROVED=1 AND A.CANCELLED=0 " + EffectCondition + BookCodeCondition
                                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' "
                                    + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL )) "
                                    + //"ORDER BY INVOICE_NO,VOUCHER_DATE,LINK_NO ";
                                    "ORDER BY INVOICE_NO,YEAR(VOUCHER_DATE),MONTH(VOUCHER_DATE),DAY(VOUCHER_DATE),LINK_NO,EFFECT DESC ";
                            System.out.println(SQL);
                            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
                            rsInvoice.first();
                            InvoiceNo = "";
                            InvoiceDate = "";
                            PartyType = "";
                            PartyChange = false;
                            // ---------------------------------------------------------------------
                            CrAmount = 0;
                            DrAmount = 0;
                            if (rsInvoice.getRow() > 0) {
                                while (!rsInvoice.isAfterLast()) {

                                    if (!PartyChange) {
                                        ClosingBalance = Math.abs(clsAccount.getClosingBalance(MainCode, PartyCode, ToDate, true));
                                        PartyType = data.getStringValueFromDB("SELECT DOCUMENT_THROUGH FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + PartyCode + "' AND MAIN_ACCOUNT_CODE='" + MainCode + "' ");
                                        PartyChange = true;
                                    }

                                    ObjItem = new clsDebtorsOutstandingItems();
                                    ObjItem.setAttribute("MAIN_ACCOUNT_CODE", MainCode);
                                    ObjItem.setAttribute("SUB_ACCOUNT_CODE", PartyCode);
                                    ObjItem.setAttribute("PARTY_NAME", PartyName);
                                    ObjItem.setAttribute("PARTY_TYPE", PartyType);
                                    ObjItem.setAttribute("BOOK_CODE", UtilFunctions.getString(rsInvoice, "BOOK_CODE", ""));
                                    //ObjItem.setAttribute("VOUCHER_NO", UtilFunctions.getString(rsInvoice,"VOUCHER_NO","")); //Modification for prefix c start
                                    String Remarks = data.getStringValueFromDB("SELECT REMARKS FROM FINANCE.D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='" + UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "") + "'", FinanceGlobal.FinURL);
                                    if (Remarks.equalsIgnoreCase("Generated By Auto Debit Note System.")) {
                                        ObjItem.setAttribute("VOUCHER_NO", "C" + " " + UtilFunctions.getString(rsInvoice, "VOUCHER_NO", ""));
                                    } else {
                                        ObjItem.setAttribute("VOUCHER_NO", " " + " " + UtilFunctions.getString(rsInvoice, "VOUCHER_NO", ""));
                                    }
                                    //modification for prefix c end
                                    ObjItem.setAttribute("VOUCHER_DATE", UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", ""));
                                    ObjItem.setAttribute("LEGACY_NO", UtilFunctions.getString(rsInvoice, "LEGACY_NO", ""));
                                    ObjItem.setAttribute("INVOICE_NO", UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""));
                                    ObjItem.setAttribute("INVOICE_DATE", UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                    String ChargeCode = "";
                                    String OBC_NO = "";
                                    String BaleNo = "";
                                    String LrNo = "";
                                    if (clsVoucher.getVoucherType(UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "")) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        ChargeCode = clsSalesInvoice.getInvoiceChargeCode(UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""), UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                        if (InvoiceType == 2 && (ChargeCode.startsWith("1") || ChargeCode.startsWith("4"))) {
                                            SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                                    + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                                    + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                    + "AND B.INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' "
                                                    + "AND B.INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ";
                                            OBC_NO = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                        } else if (ChargeCode.startsWith("1") && InvoiceType == 1) {
                                            SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                                    + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                                    + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                    + "AND B.INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' "
                                                    + "AND B.INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ";
                                            OBC_NO = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                        }

                                        BaleNo = data.getStringValueFromDB("SELECT BALE_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' AND INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ");
                                        // LrNo = data.getStringValueFromDB("SELECT LR_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='"+UtilFunctions.getString(rsInvoice,"INVOICE_NO","")+"' AND INVOICE_DATE='"+UtilFunctions.getString(rsInvoice,"INVOICE_DATE","")+"' ",FinanceGlobal.FinURL);
                                        LrNo = data.getStringValueFromDB("SELECT LR_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' AND INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ");
                                    } else {
                                        if (!UtilFunctions.getString(rsInvoice, "BOOK_CODE", "").equals("14")) {
                                            ChargeCode = data.getStringValueFromDB("SELECT REASON_CODE FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='" + UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "") + "' ", FinanceGlobal.FinURL);
                                        }
                                    }

                                    ObjItem.setAttribute("CHARGE_CODE", ChargeCode);
                                    String LinkNo = "";
                                    if (UtilFunctions.getString(rsInvoice, "LINK_NO", "").length() > 14) {
                                        LinkNo = UtilFunctions.getString(rsInvoice, "LINK_NO", "").substring(0, 14);
                                    } else {
                                        if (UtilFunctions.getString(rsInvoice, "LINK_NO", "").equals("") && clsVoucher.getVoucherType(UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "")) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                            LinkNo = clsSalesInvoice.getAgentAlphaSrNo(UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""), UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                        } else {
                                            LinkNo = UtilFunctions.getString(rsInvoice, "LINK_NO", "");
                                        }
                                    }
                                    ObjItem.setAttribute("LINK_NO", LinkNo);

                                    ObjItem.setAttribute("OBC_NO", OBC_NO);
                                    ObjItem.setAttribute("BALE_NO", BaleNo);
                                    ObjItem.setAttribute("LR_NO", LrNo);

                                    ObjItem.setAttribute("EFFECT", UtilFunctions.getString(rsInvoice, "EFFECT", ""));
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                        CrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                        ObjItem.setAttribute("CREDIT_AMOUNT", UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0));
                                        ObjItem.setAttribute("DEBIT_AMOUNT", 0);
                                    }
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                        DrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                        ObjItem.setAttribute("CREDIT_AMOUNT", 0);
                                        ObjItem.setAttribute("DEBIT_AMOUNT", UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0));
                                    }
                                    ObjItem.setAttribute("CLOSING_BALANCE", ClosingBalance);
                                    tempList.put(Integer.toString(tempList.size() + 1), ObjItem);
                                    rsInvoice.next();
                                }
                                if (EITLERPGLOBAL.round(ClosingBalance, 2) != EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2)) {
                                    if (OpgNone.isSelected() && txtBookCode.getText().trim().equals("")) {
                                        String Msg = "Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2);
                                        JOptionPane.showMessageDialog(null, Msg);
                                        System.out.println("Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2));
                                    }
                                }

                                ReportList = appendList(tempList, ReportList);
                                tempList.clear();
                            }
                            rsParty.next();
                            //EITLERPGLOBAL.PAGE_BREAK=true;
                        }
                    }
                    if (ReportList.size() > 0) {
                        //if(txtSubCode.getText().trim().equals("") && (!chkAgentwise.isSelected()) && cmbInvoiceTypeModel.getCode(cmbInvoiceType.getSelectedIndex())==1) {
                        generateReportSuittingUpdated(ReportList, txtAsOnDate.getText().trim());
                        //} else {
                        //    generateReport(ReportList,txtAsOnDate.getText().trim());
                        //}
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();                 
    }//GEN-LAST:event_mnuPreviewTextReportSTG1ActionPerformed

    private void mnuSecurityDepositPayableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSecurityDepositPayableActionPerformed
        txtMainCode.setText("132802");
        txtMainCode.setEnabled(false);
        if (!Validate()) {
            return;
        }
        ReportID = 1;
        new Thread() {
            public void run() {

                double CrAmount = 0, DrAmount = 0, ClosingBalance = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", PartyType = "";
                ResultSet rsParty = null, rsInvoice = null, rsOpening = null, rsVoucher = null;
                int EntryNo = 0, Max = 0, Counter = 0;
                HashMap tempList = new HashMap();
                HashMap ReportList = new HashMap();
                clsDebtorsOutstandingItems ObjItem = new clsDebtorsOutstandingItems();
                boolean PartyChange = false;
                int InvoiceType = 0;
                try {
                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                    } else if (txtMainCode.getText().trim().equals("210072")) {
                        InvoiceType = 3;
                    } else if (txtMainCode.getText().trim().equals("132802")) {
                        InvoiceType = 2;
                    }
                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = EITLERPGLOBAL.FinFromDateDB;
                    SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
                    FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
                    // ------------------------------

                    // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                    MainCode = txtMainCode.getText();
                    PartyCode = txtSubCode.getText().trim();
                    // ------------------------------

                    if (!chkWithoutProcess.isSelected()) {
                        // CALL MATCH AND UNMATCH ENTRIES BEFORE GENERATING REPORT
                        FindMatchInvoice(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebits(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebitsFromClosing(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        // ------------------------------
                    }

                    // COUNT PARTIES FOR OUTSTANDING , SET MAIN_ACCOUNT_CODE AND PARTY_CODE (IF EXISTS IN txtPartyCode)
                    String Condition = "";
                    if (chkAgentwise.isSelected()) {
                        Condition = " AND SUB_ACCOUNT_CODE LIKE '" + txtAgentwise.getText().trim() + "%' ";
                    } else {
                        if (!txtSubCode.getText().equals("")) {
                            Condition = " AND SUB_ACCOUNT_CODE='" + txtSubCode.getText().trim() + "' ";
                        }
                    }

                    /*Condition = " AND SUB_ACCOUNT_CODE IN ('239905','270000','559901','619913','670201','510501','510201','412607','319907','311912'," +
                     "'300170','300156','300153','179904','278801','278901','308801','470000','480000','510000','550000','570000','580000','600000'," +
                     "'158801','171165','170000','175790','176830','176084','218801','218844','230943','231705','231703','300157','301756','307757'," +
                     "'308843','308817') ";*/
                    String EffectCondition = "";
                    if (OpgOnlyCredit.isSelected()) {
                        EffectCondition = " AND EFFECT='C' ";
                    } else if (OpgOnlyDebit.isSelected()) {
                        EffectCondition = " AND EFFECT='D' ";
                    }

                    String BookCodeCondition = "";
                    if (!txtBookCode.getText().trim().equals("")) {
                        BookCodeCondition = " AND BOOK_CODE IN (" + txtBookCode.getText().trim() + ") ";
                    }
                    SQL = "(SELECT DISTINCT SUB_ACCOUNT_CODE FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                            + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND ENTRY_NO=" + EntryNo + Condition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                            + " UNION "
                            + "(SELECT DISTINCT B.SUB_ACCOUNT_CODE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL) "
                            + "AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' AND A.APPROVED=1 AND A.CANCELLED=0) "
                            + "ORDER BY SUB_ACCOUNT_CODE ";
                    System.out.println(SQL);
                    rsParty = data.getResult(SQL, FinanceGlobal.FinURL);
                    rsParty.last();
                    Max = rsParty.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter = 0;
                    rsParty.first();
                    // --------------------------------------------------------------------------------------------------

                    if (rsParty.getRow() > 0) {
                        while (!rsParty.isAfterLast()) {

                            Counter++;

                            Bar.setValue(Counter);
                            Bar.repaint();
                            // GET PARTY NAME AND DISPLAY IT
                            PartyCode = rsParty.getString("SUB_ACCOUNT_CODE");
                            lblStatus.setText("Party : " + PartyCode);
                            PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                            //data.getStringValueFromDB("SELECT PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='"+MainCode+"' AND PARTY_CODE='"+PartyCode+"' ",FinanceGlobal.FinURL);
                            // -----------------------------

                            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
                            SQL = "(SELECT BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT "
                                    + "FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND ENTRY_NO=" + EntryNo + EffectCondition + BookCodeCondition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                                    + "UNION ALL "
                                    + "(SELECT A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT "
                                    + "FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND A.APPROVED=1 AND A.CANCELLED=0 " + EffectCondition + BookCodeCondition
                                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' "
                                    + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL )) "
                                    + //"ORDER BY INVOICE_NO,VOUCHER_DATE,LINK_NO ";
                                    "ORDER BY INVOICE_NO,YEAR(VOUCHER_DATE),MONTH(VOUCHER_DATE),DAY(VOUCHER_DATE),LINK_NO,EFFECT DESC ";
                            System.out.println(SQL);
                            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
                            rsInvoice.first();
                            InvoiceNo = "";
                            InvoiceDate = "";
                            PartyType = "";
                            PartyChange = false;
                            // ---------------------------------------------------------------------
                            CrAmount = 0;
                            DrAmount = 0;
                            if (rsInvoice.getRow() > 0) {
                                while (!rsInvoice.isAfterLast()) {

                                    if (!PartyChange) {
                                        ClosingBalance = Math.abs(clsAccount.getClosingBalance(MainCode, PartyCode, ToDate, true));
                                        PartyType = data.getStringValueFromDB("SELECT DOCUMENT_THROUGH FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + PartyCode + "' AND MAIN_ACCOUNT_CODE='" + MainCode + "' ");
                                        PartyChange = true;
                                    }

                                    ObjItem = new clsDebtorsOutstandingItems();
                                    ObjItem.setAttribute("MAIN_ACCOUNT_CODE", MainCode);
                                    ObjItem.setAttribute("SUB_ACCOUNT_CODE", PartyCode);
                                    ObjItem.setAttribute("PARTY_NAME", PartyName);
                                    ObjItem.setAttribute("PARTY_TYPE", PartyType);
                                    ObjItem.setAttribute("BOOK_CODE", UtilFunctions.getString(rsInvoice, "BOOK_CODE", ""));
                                    ObjItem.setAttribute("VOUCHER_NO", UtilFunctions.getString(rsInvoice, "VOUCHER_NO", ""));
                                    ObjItem.setAttribute("VOUCHER_DATE", UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", ""));
                                    ObjItem.setAttribute("LEGACY_NO", UtilFunctions.getString(rsInvoice, "LEGACY_NO", ""));
                                    ObjItem.setAttribute("INVOICE_NO", UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""));
                                    ObjItem.setAttribute("INVOICE_DATE", UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                    String ChargeCode = "";
                                    String OBC_NO = "";
                                    String BaleNo = "";
                                    String LrNo = "";
                                    if (clsVoucher.getVoucherType(UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "")) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        ChargeCode = clsSalesInvoice.getInvoiceChargeCode(UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""), UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                        if (InvoiceType == 2 && (ChargeCode.startsWith("1") || ChargeCode.startsWith("4"))) {
                                            SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                                    + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                                    + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                    + "AND B.INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' "
                                                    + "AND B.INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ";
                                            OBC_NO = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                        } else if (ChargeCode.startsWith("1") && InvoiceType == 1) {
                                            SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                                    + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                                    + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                    + "AND B.INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' "
                                                    + "AND B.INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ";
                                            OBC_NO = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                        }

                                        BaleNo = data.getStringValueFromDB("SELECT BALE_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' AND INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ");
                                        // LrNo = data.getStringValueFromDB("SELECT LR_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='"+UtilFunctions.getString(rsInvoice,"INVOICE_NO","")+"' AND INVOICE_DATE='"+UtilFunctions.getString(rsInvoice,"INVOICE_DATE","")+"' ",FinanceGlobal.FinURL);
                                        LrNo = data.getStringValueFromDB("SELECT LR_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' AND INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ");
                                    } else {
                                        if (!UtilFunctions.getString(rsInvoice, "BOOK_CODE", "").equals("14")) {
                                            ChargeCode = data.getStringValueFromDB("SELECT REASON_CODE FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='" + UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "") + "' ", FinanceGlobal.FinURL);
                                        }
                                    }

                                    ObjItem.setAttribute("CHARGE_CODE", ChargeCode);
                                    String LinkNo = "";
                                    if (UtilFunctions.getString(rsInvoice, "LINK_NO", "").length() > 14) {
                                        LinkNo = UtilFunctions.getString(rsInvoice, "LINK_NO", "").substring(0, 14);
                                    } else {
                                        if (UtilFunctions.getString(rsInvoice, "LINK_NO", "").equals("") && clsVoucher.getVoucherType(UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "")) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                            LinkNo = clsSalesInvoice.getAgentAlphaSrNo(UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""), UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                        } else {
                                            LinkNo = UtilFunctions.getString(rsInvoice, "LINK_NO", "");
                                        }
                                    }
                                    ObjItem.setAttribute("LINK_NO", LinkNo);

                                    ObjItem.setAttribute("OBC_NO", OBC_NO);
                                    ObjItem.setAttribute("BALE_NO", BaleNo);
                                    ObjItem.setAttribute("LR_NO", LrNo);

                                    ObjItem.setAttribute("EFFECT", UtilFunctions.getString(rsInvoice, "EFFECT", ""));
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                        CrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                        ObjItem.setAttribute("CREDIT_AMOUNT", UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0));
                                        ObjItem.setAttribute("DEBIT_AMOUNT", 0);
                                    }
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                        DrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                        ObjItem.setAttribute("CREDIT_AMOUNT", 0);
                                        ObjItem.setAttribute("DEBIT_AMOUNT", UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0));
                                    }
                                    ObjItem.setAttribute("CLOSING_BALANCE", ClosingBalance);
                                    tempList.put(Integer.toString(tempList.size() + 1), ObjItem);
                                    rsInvoice.next();
                                }
                                if (EITLERPGLOBAL.round(ClosingBalance, 2) != EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2)) {
                                    if (OpgNone.isSelected() && txtBookCode.getText().trim().equals("")) {
                                        String Msg = "Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2);
                                        JOptionPane.showMessageDialog(null, Msg);
                                        System.out.println("Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2));
                                    }
                                }

                                ReportList = appendList(tempList, ReportList);
                                tempList.clear();
                            }
                            rsParty.next();
                            //EITLERPGLOBAL.PAGE_BREAK=true;
                        }
                    }
                    if (ReportList.size() > 0) {
                        if (txtSubCode.getText().trim().equals("") && (!chkAgentwise.isSelected()) && cmbInvoiceTypeModel.getCode(cmbInvoiceType.getSelectedIndex()) == 1) {
                            generateReportSuitting(ReportList, txtAsOnDate.getText().trim());
                        } else {
                            generateReport(ReportList, txtAsOnDate.getText().trim());
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();        
    }//GEN-LAST:event_mnuSecurityDepositPayableActionPerformed

    private void mnuSecurityDepositRecievableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSecurityDepositRecievableActionPerformed
        txtMainCode.setText("132803");
        txtMainCode.setEnabled(false);
        if (!Validate()) {
            return;
        }
        ReportID = 1;
        new Thread() {
            public void run() {

                double CrAmount = 0, DrAmount = 0, ClosingBalance = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", PartyType = "";
                ResultSet rsParty = null, rsInvoice = null, rsOpening = null, rsVoucher = null;
                int EntryNo = 0, Max = 0, Counter = 0;
                HashMap tempList = new HashMap();
                HashMap ReportList = new HashMap();
                clsDebtorsOutstandingItems ObjItem = new clsDebtorsOutstandingItems();
                boolean PartyChange = false;
                int InvoiceType = 0;
                try {
                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                    } else if (txtMainCode.getText().trim().equals("210072")) {
                        InvoiceType = 3;
                    } else if (txtMainCode.getText().trim().equals("132803")) {
                        InvoiceType = 2;
                    }
                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = EITLERPGLOBAL.FinFromDateDB;
                    SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
                    FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
                    // ------------------------------

                    // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                    MainCode = txtMainCode.getText();
                    PartyCode = txtSubCode.getText().trim();
                    // ------------------------------

                    if (!chkWithoutProcess.isSelected()) {
                        // CALL MATCH AND UNMATCH ENTRIES BEFORE GENERATING REPORT
                        FindMatchInvoice(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebits(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebitsFromClosing(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        // ------------------------------
                    }

                    // COUNT PARTIES FOR OUTSTANDING , SET MAIN_ACCOUNT_CODE AND PARTY_CODE (IF EXISTS IN txtPartyCode)
                    String Condition = "";
                    if (chkAgentwise.isSelected()) {
                        Condition = " AND SUB_ACCOUNT_CODE LIKE '" + txtAgentwise.getText().trim() + "%' ";
                    } else {
                        if (!txtSubCode.getText().equals("")) {
                            Condition = " AND SUB_ACCOUNT_CODE='" + txtSubCode.getText().trim() + "' ";
                        }
                    }

                    /*Condition = " AND SUB_ACCOUNT_CODE IN ('239905','270000','559901','619913','670201','510501','510201','412607','319907','311912'," +
                     "'300170','300156','300153','179904','278801','278901','308801','470000','480000','510000','550000','570000','580000','600000'," +
                     "'158801','171165','170000','175790','176830','176084','218801','218844','230943','231705','231703','300157','301756','307757'," +
                     "'308843','308817') ";*/
                    String EffectCondition = "";
                    if (OpgOnlyCredit.isSelected()) {
                        EffectCondition = " AND EFFECT='C' ";
                    } else if (OpgOnlyDebit.isSelected()) {
                        EffectCondition = " AND EFFECT='D' ";
                    }

                    String BookCodeCondition = "";
                    if (!txtBookCode.getText().trim().equals("")) {
                        BookCodeCondition = " AND BOOK_CODE IN (" + txtBookCode.getText().trim() + ") ";
                    }
                    SQL = "(SELECT DISTINCT SUB_ACCOUNT_CODE FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                            + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND ENTRY_NO=" + EntryNo + Condition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                            + " UNION "
                            + "(SELECT DISTINCT B.SUB_ACCOUNT_CODE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL) "
                            + "AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' AND A.APPROVED=1 AND A.CANCELLED=0) "
                            + "ORDER BY SUB_ACCOUNT_CODE ";
                    System.out.println(SQL);
                    rsParty = data.getResult(SQL, FinanceGlobal.FinURL);
                    rsParty.last();
                    Max = rsParty.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter = 0;
                    rsParty.first();
                    // --------------------------------------------------------------------------------------------------

                    if (rsParty.getRow() > 0) {
                        while (!rsParty.isAfterLast()) {

                            Counter++;

                            Bar.setValue(Counter);
                            Bar.repaint();
                            // GET PARTY NAME AND DISPLAY IT
                            PartyCode = rsParty.getString("SUB_ACCOUNT_CODE");
                            lblStatus.setText("Party : " + PartyCode);
                            PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                            //data.getStringValueFromDB("SELECT PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='"+MainCode+"' AND PARTY_CODE='"+PartyCode+"' ",FinanceGlobal.FinURL);
                            // -----------------------------

                            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
                            SQL = "(SELECT BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT "
                                    + "FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND ENTRY_NO=" + EntryNo + EffectCondition + BookCodeCondition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                                    + "UNION ALL "
                                    + "(SELECT A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT "
                                    + "FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND A.APPROVED=1 AND A.CANCELLED=0 " + EffectCondition + BookCodeCondition
                                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' "
                                    + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL )) "
                                    + //"ORDER BY INVOICE_NO,VOUCHER_DATE,LINK_NO ";
                                    "ORDER BY INVOICE_NO,YEAR(VOUCHER_DATE),MONTH(VOUCHER_DATE),DAY(VOUCHER_DATE),LINK_NO,EFFECT DESC ";
                            System.out.println(SQL);
                            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
                            rsInvoice.first();
                            InvoiceNo = "";
                            InvoiceDate = "";
                            PartyType = "";
                            PartyChange = false;
                            // ---------------------------------------------------------------------
                            CrAmount = 0;
                            DrAmount = 0;
                            if (rsInvoice.getRow() > 0) {
                                while (!rsInvoice.isAfterLast()) {

                                    if (!PartyChange) {
                                        ClosingBalance = Math.abs(clsAccount.getClosingBalance(MainCode, PartyCode, ToDate, true));
                                        PartyType = data.getStringValueFromDB("SELECT DOCUMENT_THROUGH FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + PartyCode + "' AND MAIN_ACCOUNT_CODE='" + MainCode + "' ");
                                        PartyChange = true;
                                    }

                                    ObjItem = new clsDebtorsOutstandingItems();
                                    ObjItem.setAttribute("MAIN_ACCOUNT_CODE", MainCode);
                                    ObjItem.setAttribute("SUB_ACCOUNT_CODE", PartyCode);
                                    ObjItem.setAttribute("PARTY_NAME", PartyName);
                                    ObjItem.setAttribute("PARTY_TYPE", PartyType);
                                    ObjItem.setAttribute("BOOK_CODE", UtilFunctions.getString(rsInvoice, "BOOK_CODE", ""));
                                    ObjItem.setAttribute("VOUCHER_NO", UtilFunctions.getString(rsInvoice, "VOUCHER_NO", ""));
                                    ObjItem.setAttribute("VOUCHER_DATE", UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", ""));
                                    ObjItem.setAttribute("LEGACY_NO", UtilFunctions.getString(rsInvoice, "LEGACY_NO", ""));
                                    ObjItem.setAttribute("INVOICE_NO", UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""));
                                    ObjItem.setAttribute("INVOICE_DATE", UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                    String ChargeCode = "";
                                    String OBC_NO = "";
                                    String BaleNo = "";
                                    String LrNo = "";
                                    if (clsVoucher.getVoucherType(UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "")) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        ChargeCode = clsSalesInvoice.getInvoiceChargeCode(UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""), UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                        if (InvoiceType == 2 && (ChargeCode.startsWith("1") || ChargeCode.startsWith("4"))) {
                                            SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                                    + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                                    + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                    + "AND B.INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' "
                                                    + "AND B.INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ";
                                            OBC_NO = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                        } else if (ChargeCode.startsWith("1") && InvoiceType == 1) {
                                            SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                                    + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                                    + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                    + "AND B.INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' "
                                                    + "AND B.INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ";
                                            OBC_NO = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                        }

                                        BaleNo = data.getStringValueFromDB("SELECT BALE_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' AND INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ");
                                        // LrNo = data.getStringValueFromDB("SELECT LR_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='"+UtilFunctions.getString(rsInvoice,"INVOICE_NO","")+"' AND INVOICE_DATE='"+UtilFunctions.getString(rsInvoice,"INVOICE_DATE","")+"' ",FinanceGlobal.FinURL);
                                        LrNo = data.getStringValueFromDB("SELECT LR_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' AND INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ");
                                    } else {
                                        if (!UtilFunctions.getString(rsInvoice, "BOOK_CODE", "").equals("14")) {
                                            ChargeCode = data.getStringValueFromDB("SELECT REASON_CODE FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='" + UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "") + "' ", FinanceGlobal.FinURL);
                                        }
                                    }

                                    ObjItem.setAttribute("CHARGE_CODE", ChargeCode);
                                    String LinkNo = "";
                                    if (UtilFunctions.getString(rsInvoice, "LINK_NO", "").length() > 14) {
                                        LinkNo = UtilFunctions.getString(rsInvoice, "LINK_NO", "").substring(0, 14);
                                    } else {
                                        if (UtilFunctions.getString(rsInvoice, "LINK_NO", "").equals("") && clsVoucher.getVoucherType(UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "")) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                            LinkNo = clsSalesInvoice.getAgentAlphaSrNo(UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""), UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                        } else {
                                            LinkNo = UtilFunctions.getString(rsInvoice, "LINK_NO", "");
                                        }
                                    }
                                    ObjItem.setAttribute("LINK_NO", LinkNo);

                                    ObjItem.setAttribute("OBC_NO", OBC_NO);
                                    ObjItem.setAttribute("BALE_NO", BaleNo);
                                    ObjItem.setAttribute("LR_NO", LrNo);

                                    ObjItem.setAttribute("EFFECT", UtilFunctions.getString(rsInvoice, "EFFECT", ""));
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                        CrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                        ObjItem.setAttribute("CREDIT_AMOUNT", UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0));
                                        ObjItem.setAttribute("DEBIT_AMOUNT", 0);
                                    }
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                        DrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                        ObjItem.setAttribute("CREDIT_AMOUNT", 0);
                                        ObjItem.setAttribute("DEBIT_AMOUNT", UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0));
                                    }
                                    ObjItem.setAttribute("CLOSING_BALANCE", ClosingBalance);
                                    tempList.put(Integer.toString(tempList.size() + 1), ObjItem);
                                    rsInvoice.next();
                                }
                                if (EITLERPGLOBAL.round(ClosingBalance, 2) != EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2)) {
                                    if (OpgNone.isSelected() && txtBookCode.getText().trim().equals("")) {
                                        String Msg = "Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2);
                                        JOptionPane.showMessageDialog(null, Msg);
                                        System.out.println("Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2));
                                    }
                                }

                                ReportList = appendList(tempList, ReportList);
                                tempList.clear();
                            }
                            rsParty.next();
                            //EITLERPGLOBAL.PAGE_BREAK=true;
                        }
                    }
                    if (ReportList.size() > 0) {
                        if (txtSubCode.getText().trim().equals("") && (!chkAgentwise.isSelected()) && cmbInvoiceTypeModel.getCode(cmbInvoiceType.getSelectedIndex()) == 1) {
                            generateReportSuitting(ReportList, txtAsOnDate.getText().trim());
                        } else {
                            generateReport(ReportList, txtAsOnDate.getText().trim());
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();
    }//GEN-LAST:event_mnuSecurityDepositRecievableActionPerformed

    private void mnuPreviewTextReportSTGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPreviewTextReportSTGActionPerformed
        if (!Validate()) {
            return;
        }
        ReportID = 1;
        new Thread() {
            public void run() {

                double CrAmount = 0, DrAmount = 0, ClosingBalance = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", PartyType = "";
                ResultSet rsParty = null, rsInvoice = null, rsOpening = null, rsVoucher = null;
                int EntryNo = 0, Max = 0, Counter = 0;
                HashMap tempList = new HashMap();
                HashMap ReportList = new HashMap();
                clsDebtorsOutstandingItems ObjItem = new clsDebtorsOutstandingItems();
                boolean PartyChange = false;
                int InvoiceType = 0;
                try {
                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                    } else if (txtMainCode.getText().trim().equals("210072")) {
                        InvoiceType = 3;
                    } else if (txtMainCode.getText().trim().equals("132803")) {
                        InvoiceType = 4;
                    } else if (txtMainCode.getText().trim().equals("132802")) {
                        InvoiceType = 5;
                    }
                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = EITLERPGLOBAL.FinFromDateDB;
                    SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
                    FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
                    // ------------------------------

                    // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                    MainCode = txtMainCode.getText();
                    PartyCode = txtSubCode.getText().trim();
                    // ------------------------------

                    if (!chkWithoutProcess.isSelected()) {
                        // CALL MATCH AND UNMATCH ENTRIES BEFORE GENERATING REPORT
                        FindMatchInvoice(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebits(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebitsFromClosing(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        // ------------------------------
                    }

                    // COUNT PARTIES FOR OUTSTANDING , SET MAIN_ACCOUNT_CODE AND PARTY_CODE (IF EXISTS IN txtPartyCode)
                    String Condition = "";
                    if (chkAgentwise.isSelected()) {
                        Condition = " AND SUB_ACCOUNT_CODE LIKE '" + txtAgentwise.getText().trim() + "%' ";
                    } else {
                        if (!txtSubCode.getText().equals("")) {
                            Condition = " AND SUB_ACCOUNT_CODE='" + txtSubCode.getText().trim() + "' ";
                        }
                    }

                    /*Condition = " AND SUB_ACCOUNT_CODE IN ('239905','270000','559901','619913','670201','510501','510201','412607','319907','311912'," +
                     "'300170','300156','300153','179904','278801','278901','308801','470000','480000','510000','550000','570000','580000','600000'," +
                     "'158801','171165','170000','175790','176830','176084','218801','218844','230943','231705','231703','300157','301756','307757'," +
                     "'308843','308817') ";*/
                    String EffectCondition = "";
                    if (OpgOnlyCredit.isSelected()) {
                        EffectCondition = " AND EFFECT='C' ";
                    } else if (OpgOnlyDebit.isSelected()) {
                        EffectCondition = " AND EFFECT='D' ";
                    }

                    String BookCodeCondition = "";
                    if (!txtBookCode.getText().trim().equals("")) {
                        BookCodeCondition = " AND BOOK_CODE IN (" + txtBookCode.getText().trim() + ") ";
                    }
                    SQL = "(SELECT DISTINCT SUB_ACCOUNT_CODE FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                            + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND ENTRY_NO=" + EntryNo + Condition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                            + " UNION "
                            + "(SELECT DISTINCT B.SUB_ACCOUNT_CODE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL) "
                            + "AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' AND A.APPROVED=1 AND A.CANCELLED=0) "
                            + "ORDER BY SUB_ACCOUNT_CODE ";
                    System.out.println(SQL);
                    rsParty = data.getResult(SQL, FinanceGlobal.FinURL);
                    rsParty.last();
                    Max = rsParty.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter = 0;
                    rsParty.first();
                    // --------------------------------------------------------------------------------------------------

                    if (rsParty.getRow() > 0) {
                        while (!rsParty.isAfterLast()) {

                            Counter++;

                            Bar.setValue(Counter);
                            Bar.repaint();
                            // GET PARTY NAME AND DISPLAY IT
                            PartyCode = rsParty.getString("SUB_ACCOUNT_CODE");
                            lblStatus.setText("Party : " + PartyCode);
                            PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                            //data.getStringValueFromDB("SELECT PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='"+MainCode+"' AND PARTY_CODE='"+PartyCode+"' ",FinanceGlobal.FinURL);
                            // -----------------------------

                            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
                            SQL = "(SELECT BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT "
                                    + "FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND ENTRY_NO=" + EntryNo + EffectCondition + BookCodeCondition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                                    + "UNION ALL "
                                    + "(SELECT A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT "
                                    + "FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND A.APPROVED=1 AND A.CANCELLED=0 " + EffectCondition + BookCodeCondition
                                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' "
                                    + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL )) "
                                    + //"ORDER BY INVOICE_NO,VOUCHER_DATE,LINK_NO ";
                                    "ORDER BY INVOICE_NO,YEAR(VOUCHER_DATE),MONTH(VOUCHER_DATE),DAY(VOUCHER_DATE),LINK_NO,EFFECT DESC ";
                            System.out.println(SQL);
                            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
                            rsInvoice.first();
                            InvoiceNo = "";
                            InvoiceDate = "";
                            PartyType = "";
                            PartyChange = false;
                            // ---------------------------------------------------------------------
                            CrAmount = 0;
                            DrAmount = 0;
                            if (rsInvoice.getRow() > 0) {
                                while (!rsInvoice.isAfterLast()) {

                                    if (!PartyChange) {
                                        ClosingBalance = Math.abs(clsAccount.getClosingBalance(MainCode, PartyCode, ToDate, true));
                                        PartyType = data.getStringValueFromDB("SELECT DOCUMENT_THROUGH FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + PartyCode + "' AND MAIN_ACCOUNT_CODE='" + MainCode + "' ");
                                        PartyChange = true;
                                    }

                                    ObjItem = new clsDebtorsOutstandingItems();
                                    ObjItem.setAttribute("MAIN_ACCOUNT_CODE", MainCode);
                                    ObjItem.setAttribute("SUB_ACCOUNT_CODE", PartyCode);
                                    ObjItem.setAttribute("PARTY_NAME", PartyName);
                                    ObjItem.setAttribute("PARTY_TYPE", PartyType);
                                    ObjItem.setAttribute("BOOK_CODE", UtilFunctions.getString(rsInvoice, "BOOK_CODE", ""));
                                    //ObjItem.setAttribute("VOUCHER_NO", UtilFunctions.getString(rsInvoice,"VOUCHER_NO","")); //Modification for prefix c start
                                    String Remarks = data.getStringValueFromDB("SELECT REMARKS FROM FINANCE.D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='" + UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "") + "'", FinanceGlobal.FinURL);
                                    if (Remarks.equalsIgnoreCase("Generated By Auto Debit Note System.")) {
                                        ObjItem.setAttribute("VOUCHER_NO", "C" + " " + UtilFunctions.getString(rsInvoice, "VOUCHER_NO", ""));
                                    } else {
                                        ObjItem.setAttribute("VOUCHER_NO", " " + " " + UtilFunctions.getString(rsInvoice, "VOUCHER_NO", ""));
                                    }
                                    //modification for prefix c end
                                    ObjItem.setAttribute("VOUCHER_DATE", UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", ""));
                                    ObjItem.setAttribute("LEGACY_NO", UtilFunctions.getString(rsInvoice, "LEGACY_NO", ""));
                                    ObjItem.setAttribute("INVOICE_NO", UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""));
                                    ObjItem.setAttribute("INVOICE_DATE", UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                    String ChargeCode = "";
                                    String OBC_NO = "";
                                    String BaleNo = "";
                                    String LrNo = "";
                                    if (clsVoucher.getVoucherType(UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "")) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        ChargeCode = clsSalesInvoice.getInvoiceChargeCode(UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""), UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                        if (InvoiceType == 2 && (ChargeCode.startsWith("1") || ChargeCode.startsWith("4"))) {
                                            SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                                    + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                                    + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                    + "AND B.INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' "
                                                    + "AND B.INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ";
                                            OBC_NO = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                        } else if (ChargeCode.startsWith("1") && InvoiceType == 1) {
                                            SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                                    + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                                    + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                    + "AND B.INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' "
                                                    + "AND B.INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ";
                                            OBC_NO = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                        }

                                        BaleNo = data.getStringValueFromDB("SELECT BALE_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' AND INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ");
                                        // LrNo = data.getStringValueFromDB("SELECT LR_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='"+UtilFunctions.getString(rsInvoice,"INVOICE_NO","")+"' AND INVOICE_DATE='"+UtilFunctions.getString(rsInvoice,"INVOICE_DATE","")+"' ",FinanceGlobal.FinURL);
                                        LrNo = data.getStringValueFromDB("SELECT LR_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' AND INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ");
                                    } else {
                                        if (!UtilFunctions.getString(rsInvoice, "BOOK_CODE", "").equals("14")) {
                                            ChargeCode = data.getStringValueFromDB("SELECT REASON_CODE FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='" + UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "") + "' ", FinanceGlobal.FinURL);
                                        }
                                    }

                                    ObjItem.setAttribute("CHARGE_CODE", ChargeCode);
                                    String LinkNo = "";
                                    if (UtilFunctions.getString(rsInvoice, "LINK_NO", "").length() > 14) {
                                        LinkNo = UtilFunctions.getString(rsInvoice, "LINK_NO", "").substring(0, 14);
                                    } else {
                                        if (UtilFunctions.getString(rsInvoice, "LINK_NO", "").equals("") && clsVoucher.getVoucherType(UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "")) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                            LinkNo = clsSalesInvoice.getAgentAlphaSrNo(UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""), UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                        } else {
                                            LinkNo = UtilFunctions.getString(rsInvoice, "LINK_NO", "");
                                        }
                                    }
                                    ObjItem.setAttribute("LINK_NO", LinkNo);

                                    ObjItem.setAttribute("OBC_NO", OBC_NO);
                                    ObjItem.setAttribute("BALE_NO", BaleNo);
                                    ObjItem.setAttribute("LR_NO", LrNo);

                                    ObjItem.setAttribute("EFFECT", UtilFunctions.getString(rsInvoice, "EFFECT", ""));
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                        CrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                        ObjItem.setAttribute("CREDIT_AMOUNT", UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0));
                                        ObjItem.setAttribute("DEBIT_AMOUNT", 0);
                                    }
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                        DrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                        ObjItem.setAttribute("CREDIT_AMOUNT", 0);
                                        ObjItem.setAttribute("DEBIT_AMOUNT", UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0));
                                    }
                                    ObjItem.setAttribute("CLOSING_BALANCE", ClosingBalance);
                                    tempList.put(Integer.toString(tempList.size() + 1), ObjItem);
                                    rsInvoice.next();
                                }
                                if (EITLERPGLOBAL.round(ClosingBalance, 2) != EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2)) {
                                    if (OpgNone.isSelected() && txtBookCode.getText().trim().equals("")) {
                                        String Msg = "Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2);
                                        JOptionPane.showMessageDialog(null, Msg);
                                        System.out.println("Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2));
                                    }
                                }

                                ReportList = appendList(tempList, ReportList);
                                tempList.clear();
                            }
                            rsParty.next();
                            //EITLERPGLOBAL.PAGE_BREAK=true;
                        }
                    }
                    if (ReportList.size() > 0) {
                        //if(txtSubCode.getText().trim().equals("") && (!chkAgentwise.isSelected()) && cmbInvoiceTypeModel.getCode(cmbInvoiceType.getSelectedIndex())==1) {
                        generateReportSuittingUpdated(ReportList, txtAsOnDate.getText().trim());
                        //} else {
                        //    generateReport(ReportList,txtAsOnDate.getText().trim());
                        //}
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();                 
    }//GEN-LAST:event_mnuPreviewTextReportSTGActionPerformed

    private void Opg248OnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Opg248OnlyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Opg248OnlyActionPerformed

    private void ScheduleVIDebtors1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScheduleVIDebtorsActionPerformed
        // TODO add your handling code here:
        int InvoiceType = EITLERPGLOBAL.getComboCode(cmbInvoiceType);
        if (InvoiceType == 1) {
            txtMainCode.setText("210027");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 2) {
            txtMainCode.setText("210010");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 3) {
            txtMainCode.setText("210072");
            txtMainCode.setEnabled(false);
        }
        if (!Validate()) {
            return;
        }
        ReportID = 1;
        new Thread() {
            public void run() {

                double Below180Day = 0, Above180Day = 0, TotalBalance = 0, ClosingBalance = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", PartyType = "";
                ResultSet rsParty = null, rsInvoice = null, rsOpening = null, rsVoucher = null;
                int EntryNo = 0, Max = 0, Counter = 0;
                HashMap tempList = new HashMap();
                HashMap ReportList = new HashMap();
                clsDebtorsOutstandingItems ObjItem = new clsDebtorsOutstandingItems();
                boolean PartyChange = false;
                int InvoiceType = 0;
                TReportWriter.SimpleDataProvider.TTable objData = new TReportWriter.SimpleDataProvider.TTable();
                try {
                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                    } else if (txtMainCode.getText().trim().equals("210072")) {
                        InvoiceType = 3;
                    } else if (txtMainCode.getText().trim().equals("132803")) {
                        InvoiceType = 4;
                    } else if (txtMainCode.getText().trim().equals("132802")) {
                        InvoiceType = 5;
                    }
                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = EITLERPGLOBAL.FinFromDateDB;
                    SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
                    FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
                    // ------------------------------

                    // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                    MainCode = txtMainCode.getText();
                    PartyCode = txtSubCode.getText().trim();
                    // ------------------------------

                    // COUNT PARTIES FOR OUTSTANDING , SET MAIN_ACCOUNT_CODE AND PARTY_CODE (IF EXISTS IN txtPartyCode)
                    String Condition = "";
                    if (chkAgentwise.isSelected()) {
                        Condition = " AND SUB_ACCOUNT_CODE LIKE '" + txtAgentwise.getText().trim() + "%' ";
                    } else {
                        if (!txtSubCode.getText().equals("")) {
                            Condition = " AND SUB_ACCOUNT_CODE='" + txtSubCode.getText().trim() + "' ";
                        }
                    }

                    SQL = "(SELECT DISTINCT SUB_ACCOUNT_CODE FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                            + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND ENTRY_NO=" + EntryNo + Condition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                            + " UNION "
                            + "(SELECT DISTINCT B.SUB_ACCOUNT_CODE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL) "
                            + "AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' AND A.APPROVED=1 AND A.CANCELLED=0) "
                            + "ORDER BY SUB_ACCOUNT_CODE ";
                    System.out.println(SQL);
                    rsParty = data.getResult(SQL, FinanceGlobal.FinURL);
                    rsParty.last();
                    Max = rsParty.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter = 0;
                    rsParty.first();
                    // --------------------------------------------------------------------------------------------------

                    objData.AddColumn("MAIN_ACCOUNT_CODE");
                    objData.AddColumn("SUB_ACCOUNT_CODE");
                    objData.AddColumn("PARTY_NAME");
                    objData.AddColumn("ABOVE_180_DAYS");
                    objData.AddColumn("BELOW_180_DAYS");
                    objData.AddColumn("TOTAL_BALANCE");
                    TReportWriter.SimpleDataProvider.TRow objRow = objData.newRow();
                    if (rsParty.getRow() > 0) {
                        while (!rsParty.isAfterLast()) {

                            Counter++;

                            Bar.setValue(Counter);
                            Bar.repaint();
                            // GET PARTY NAME AND DISPLAY IT
                            PartyCode = rsParty.getString("SUB_ACCOUNT_CODE");
                            /*ClosingBalance = clsAccount.getClosingBalance(MainCode, PartyCode, ToDate, true);
                            if (ClosingBalance <= 0) {
                                rsParty.next();
                                continue;
                            }*/ //commented as on 5/5/2021 by Ashutosh for Dr o/s and Schedule VI discrepancy
                            ClosingBalance = 0;
                            lblStatus.setText("Party : " + PartyCode);
                            PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                            //data.getStringValueFromDB("SELECT PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='"+MainCode+"' AND PARTY_CODE='"+PartyCode+"' ",FinanceGlobal.FinURL);
                            // -----------------------------

                            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
                            SQL = "(SELECT VOUCHER_NO,VOUCHER_DATE,INVOICE_NO,INVOICE_DATE,AMOUNT,EFFECT "
                                    + "FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND ENTRY_NO=" + EntryNo + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                                    + "UNION ALL "
                                    + "(SELECT A.VOUCHER_NO,A.VOUCHER_DATE,B.INVOICE_NO,B.INVOICE_DATE,B.AMOUNT,B.EFFECT "
                                    + "FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND A.APPROVED=1 AND A.CANCELLED=0 "
                                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' "
                                    + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL )) "
                                    + //"ORDER BY INVOICE_NO,VOUCHER_DATE,LINK_NO ";
                                    "ORDER BY INVOICE_NO,YEAR(VOUCHER_DATE),MONTH(VOUCHER_DATE),DAY(VOUCHER_DATE),EFFECT DESC ";
                            System.out.println(SQL);
                            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
                            rsInvoice.first();
                            InvoiceNo = "";
                            InvoiceDate = "";
                            PartyType = "";
                            PartyChange = false;
                            // ---------------------------------------------------------------------

                            Above180Day = 0;
                            Below180Day = 0;
                            TotalBalance = 0;
                            if (rsInvoice.getRow() > 0) {
                                while (!rsInvoice.isAfterLast()) {
                                    String DueDate = "";
                                    InvoiceNo = UtilFunctions.getString(rsInvoice, "INVOICE_NO", "");
                                    InvoiceDate = UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "");
                                    if (clsVoucher.getVoucherType(UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", "")) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        DueDate = data.getStringValueFromDB("SELECT DUE_DATE FROM DINESHMILLS.D_SAL_INVOICE_HEADER WHERE INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + InvoiceDate + "' AND APPROVED=1 AND CANCELLED=0 ");
                                    } else {
                                        DueDate = UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", "");
                                    }
                                    if (DueDate.equals("") || DueDate == null) {
                                        JOptionPane.showMessageDialog(null, "Due date does not exists in Invoice No: " + InvoiceNo + " and Invoice Date: " + InvoiceDate);
                                        return;
                                    }

                                    String StartDate = clsDepositMaster.deductDays(ToDate, 180);
                                    if (java.sql.Date.valueOf(DueDate).after(java.sql.Date.valueOf(StartDate))) { //&& java.sql.Date.valueOf(DueDate).before(java.sql.Date.valueOf(ToDate))
                                        if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                            Below180Day -= UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            TotalBalance -= UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                        }
                                        if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                            Below180Day += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            TotalBalance += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                        }
                                    } else {
                                        if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                            Above180Day -= UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            TotalBalance -= UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                        }
                                        if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                            Above180Day += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            TotalBalance += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                        }
                                    }
                                    rsInvoice.next();
                                }
                                if (Below180Day < 0) {
                                    Above180Day = Above180Day - (Below180Day * -1);
                                    Below180Day = 0;
                                }

                                if (Above180Day < 0) {
                                    Below180Day = Below180Day - (Above180Day * -1);
                                    Above180Day = 0;
                                }

                                //////////////////////////////////////
                                objRow = objData.newRow();
                                objRow.setValue("MAIN_ACCOUNT_CODE", MainCode);
                                objRow.setValue("SUB_ACCOUNT_CODE", PartyCode);
                                objRow.setValue("PARTY_NAME", PartyName);
                                objRow.setValue("ABOVE_180_DAYS", Double.toString(Above180Day));
                                objRow.setValue("BELOW_180_DAYS", Double.toString(Below180Day));
                                objRow.setValue("TOTAL_BALANCE", Double.toString(TotalBalance));
                                objData.AddRow(objRow);
                                //System.out.println("Main Code : " + MainCode + " Party Code : " + PartyCode + " PartyName : " + PartyName + " Above180Day : " + Above180Day + " Below180Day : " + Below180Day + " TotalBalance : " + TotalBalance);
                            }
                            rsParty.next();
                        }
                    }
                    // Generate report
                } catch (Exception e) {
                    e.printStackTrace();
                    Bar.setVisible(false);
                    lblStatus.setVisible(false);
                }
                HashMap Parameters = new HashMap();
                Parameters.put("OUT_DATE", txtAsOnDate.getText().trim());
                Parameters.put("RUN_DATE", EITLERPGLOBAL.getCurrentDate());
                if (txtMainCode.getText().trim().equals("210010")) {
                    Parameters.put("SALES_TYPE", "FELT SALES - 210010");
                } else if (txtMainCode.getText().trim().equals("210027")) {
                    Parameters.put("SALES_TYPE", "SUITING SALES - 210027");
                } else if (txtMainCode.getText().trim().equals("210072")) {
                    Parameters.put("SALES_TYPE", "FILTER FABRICS - 210072");
                } else if (txtMainCode.getText().trim().equals("132803")) {
                    Parameters.put("SALES_TYPE", "SD RECIEVABLE - 132803");
                } else if (txtMainCode.getText().trim().equals("132802")) {
                    Parameters.put("SALES_TYPE", "SD PAYABLES - 132802");
                }
                objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptScheduleVIDebtors.rpt", Parameters, objData);
                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();
    }//GEN-LAST:event_ScheduleVIDebtorsActionPerformed
    
    private void mnuPreview248OSTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPreview248OSTextActionPerformed
        // TODO add your handling code here:
        if (!Validate()) {
            return;
        }
        ReportID = 2;
        new Thread() {
            public void run() {

                double CrAmount = 0, DrAmount = 0, ClosingBalance = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", BookCode = "", ChargeCode = "";
                ResultSet rsParty = null, rsInvoice = null, rsOpening = null, rsVoucher = null, rsReport = null;
                int EntryNo = 0, Max = 0, Counter = 0, RecordCounter = 0;
                Connection conn = null;
                Statement stmt = null;
                boolean PartyChange = false;
                int InvoiceType = 0;

                try {
                    data.Execute("DELETE FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=2", FinanceGlobal.FinURL);
                    conn = data.getConn(FinanceGlobal.FinURL);
                    stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                        BookCode = " AND BOOK_CODE IN ('09','18') ";
                        ChargeCode = " AND CHARGE_CODE IN ('02','08') ";
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                        BookCode = " AND BOOK_CODE IN ('01','12','16') ";
                        ChargeCode = " AND CHARGE_CODE IN ('02','04','08','05') ";
                    }
                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = EITLERPGLOBAL.FinFromDateDB;
                    SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
                    FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
                    // ------------------------------

                    // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                    MainCode = txtMainCode.getText();
                    PartyCode = txtSubCode.getText().trim();
                    // ------------------------------

                    /*if(!chkWithoutProcess.isSelected()) {
                     // CALL MATCH AND UNMATCH ENTRIES BEFORE GENERATING REPORT
                     FindMatchInvoice(MainCode, PartyCode, FromDate, ToDate);
                     while(!ProcessDone) {
                     //Wait until process is completed ...
                     }
                     ProcessDone=false;
                     FindMatchDebits(MainCode, PartyCode, FromDate, ToDate);
                     while(!ProcessDone) {
                     //Wait until process is completed ...
                     }
                     ProcessDone=false;
                     FindMatchDebitsFromClosing(MainCode, PartyCode, FromDate, ToDate);
                     while(!ProcessDone) {
                     //Wait until process is completed ...
                     }
                     ProcessDone=false;
                     // ------------------------------
                     }*/
                    // COUNT PARTIES FOR OUTSTANDING , SET MAIN_ACCOUNT_CODE AND PARTY_CODE (IF EXISTS IN txtPartyCode)
                    String Condition = "";
                    if (chkAgentwise.isSelected()) {
                        Condition = " AND SUB_ACCOUNT_CODE LIKE '" + txtAgentwise.getText().trim() + "%' ";
                    } else {
                        if (!txtSubCode.getText().equals("")) {
                            Condition = " AND SUB_ACCOUNT_CODE='" + txtSubCode.getText().trim() + "' ";
                        }
                    }

                    SQL = "(SELECT DISTINCT SUB_ACCOUNT_CODE FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                            + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND ENTRY_NO=" + EntryNo + Condition + " "
                            + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00') " + BookCode + " ) "
                            + " UNION "
                            + "(SELECT DISTINCT B.SUB_ACCOUNT_CODE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " "
                            + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL) "
                            + "AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' AND A.APPROVED=1 AND A.CANCELLED=0 " + BookCode + " ) "
                            + "ORDER BY SUB_ACCOUNT_CODE ";

                    rsParty = data.getResult(SQL, FinanceGlobal.FinURL);
                    rsParty.last();
                    Max = rsParty.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter = 0;
                    rsParty.first();
                    // --------------------------------------------------------------------------------------------------

                    // Prepare resultset for entering o/s data into report transaction table
                    //rsReport = stmt.executeQuery("SELECT * FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID="+EITLERPGLOBAL.gUserID+" AND REPORT_ID=1 LIMIT 1");
                    TReportWriter.SimpleDataProvider.TTable objData = new TReportWriter.SimpleDataProvider.TTable();
                    RecordCounter = 0;
                    // --------------------------------------------------------------------------------------------------

                    if (rsParty.getRow() > 0) {
                        while (!rsParty.isAfterLast()) {
                            Counter++;
                            Bar.setValue(Counter);
                            Bar.repaint();
                            // GET PARTY NAME AND DISPLAY IT
                            PartyCode = rsParty.getString("SUB_ACCOUNT_CODE");
                            lblStatus.setText("Party : " + PartyCode);
                            PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                            // -----------------------------
                            /*SQL = "SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='"+PartyCode+"' AND MAIN_ACCOUNT_CODE='"+txtMainCode.getText().trim()+"' " +ChargeCode;
                             if(!data.IsRecordExist(SQL)) {
                             rsParty.next();
                             continue;
                             }*/

                            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
                            SQL = "(SELECT BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND ENTRY_NO=" + EntryNo + " AND EFFECT='D' AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00') " + BookCode + " ) "
                                    + "UNION ALL "
                                    + "(SELECT A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='D' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) " + BookCode + " ) "
                                    + "ORDER BY VOUCHER_DATE ";

                            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
                            rsInvoice.first();
                            InvoiceNo = "";
                            InvoiceDate = "";
                            PartyChange = false;
                            // ---------------------------------------------------------------------
                            CrAmount = 0;
                            DrAmount = 0;
                            int Counter1 = 0, Counter2 = 0;
                            if (rsInvoice.getRow() > 0) {
                                while (!rsInvoice.isAfterLast()) {

                                    String VoucherNo = UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "");
                                    InvoiceNo = UtilFunctions.getString(rsInvoice, "INVOICE_NO", "");
                                    InvoiceDate = UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "");
                                    double DebitAmount = 0;
                                    double AdjustedAmount = 0;
                                    if (clsVoucher.getVoucherType(VoucherNo) != FinanceGlobal.TYPE_SALES_JOURNAL && clsVoucher.getVoucherType(VoucherNo) != FinanceGlobal.TYPE_DEBIT_NOTE) {
                                        rsInvoice.next();
                                        continue;
                                    }
                                    if (InvoiceType == 2 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        if (!clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8")) {
                                            rsInvoice.next();
                                            continue;
                                        }
                                    } else if (InvoiceType == 1 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        if (!clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("5") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("4")) {
                                            rsInvoice.next();
                                            continue;
                                        }
                                    }

                                    if (!data.IsRecordExist("SELECT * FROM D_FIN_DEBITNOTE_RECEIPT_MAPPING WHERE DEBITNOTE_VOUCHER_NO='" + VoucherNo + "'", FinanceGlobal.FinURL)
                                            && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_DEBIT_NOTE) {
                                        rsInvoice.next();
                                        continue;
                                    }

                                    if (clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                                + "AND MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                                + "AND INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + InvoiceDate + "' "
                                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                                + "AND B.MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                                + "AND B.INVOICE_DATE='" + InvoiceDate + "' AND B.INVOICE_NO='" + InvoiceNo + "' ";

                                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                                    } else {
                                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                                + "AND MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                                + "AND B.MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                                + "AND B.GRN_NO='" + VoucherNo + "' ";
                                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                                    }
                                    if (DebitAmount == AdjustedAmount) {
                                        rsInvoice.next();
                                        continue;
                                    }
                                    RecordCounter++;
                                    objData.AddColumn("SR_NO");
                                    objData.AddColumn("REPORT_ID");
                                    objData.AddColumn("USER_ID");
                                    objData.AddColumn("MAIN_ACCOUNT_CODE");
                                    objData.AddColumn("SUB_ACCOUNT_CODE");
                                    objData.AddColumn("PARTY_NAME");
                                    objData.AddColumn("BOOK_CODE");
                                    objData.AddColumn("VOUCHER_NO");
                                    objData.AddColumn("LEGACY_NO");
                                    objData.AddColumn("VOUCHER_DATE");
                                    objData.AddColumn("INVOICE_NO");
                                    objData.AddColumn("LINK_NO");
                                    objData.AddColumn("INVOICE_DATE");
                                    objData.AddColumn("CHARGE_CODE");
                                    objData.AddColumn("BANK_REF_NO");
                                    objData.AddColumn("DEBIT_AMOUNT");
                                    objData.AddColumn("CREDIT_AMOUNT");
                                    objData.AddColumn("AMOUNT");

                                    /*rsReport.moveToInsertRow();
                                     rsReport.updateLong("SR_NO",RecordCounter);
                                     rsReport.updateLong("REPORT_ID",ReportID);
                                     rsReport.updateLong("USER_ID",EITLERPGLOBAL.gUserID);
                                     rsReport.updateString("COLUMN_1",MainCode);
                                     rsReport.updateString("COLUMN_2",PartyCode);
                                     rsReport.updateString("COLUMN_3",PartyName);
                                     rsReport.updateString("COLUMN_4",UtilFunctions.getString(rsInvoice,"VOUCHER_NO",""));
                                     rsReport.updateString("COLUMN_5",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsInvoice,"VOUCHER_DATE","")));*/
                                    String VoucherDate = UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", "");
                                    int VoucherType = clsVoucher.getVoucherType(VoucherNo);
                                    String LinkNo = "";
                                    String vType = "";
                                    String DueDate = "";
                                    if (VoucherType == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        LinkNo = clsSalesInvoice.getAgentAlphaSrNo(InvoiceNo, InvoiceDate);
                                        DueDate = data.getStringValueFromDB("SELECT DUE_DATE FROM DINESHMILLS.D_SAL_INVOICE_HEADER WHERE INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + InvoiceDate + "' AND APPROVED=1 AND CANCELLED=0 ");
                                        vType = "Inv";
                                    } else {
                                        LinkNo = EITLERPGLOBAL.padLeftEx(VoucherNo.substring(VoucherNo.length() - 5), "0", 6) + "/" + EITLERPGLOBAL.getFinYearStartDate(VoucherDate).substring(2, 4) + EITLERPGLOBAL.getFinYearEndDate(VoucherDate).substring(2, 4);
                                        DueDate = VoucherDate;
                                        vType = "Dbn";
                                    }

                                    objData.AddColumn("LINKNO");
                                    objData.AddColumn("LEGACY_NO");
                                    objData.AddColumn("INVOICE_NO");
                                    objData.AddColumn("DEBITAMOUNT");
                                    objData.AddColumn("DUEDATE");
                                    objData.AddColumn("DAYS50");
                                    objData.AddColumn("DAYS51-90");
                                    objData.AddColumn("DAYS90");
                                    objData.AddColumn("VTYPE");
                                    objData.AddColumn("DAYDIFF");
                                    objData.AddColumn("AMTDIFF");
                                    objData.AddColumn("INVCOUNTER");
                                    objData.AddColumn("DBNCOUNTER");

                                    TReportWriter.SimpleDataProvider.TRow objRow = objData.newRow();

                                    /*rsReport.updateString("COLUMN_6",LinkNo);
                                     rsReport.updateString("COLUMN_7",UtilFunctions.getString(rsInvoice,"LEGACY_NO",""));
                                     rsReport.updateString("COLUMN_8",InvoiceNo);
                                     rsReport.updateString("COLUMN_9",EITLERPGLOBAL.formatDate(InvoiceDate));
                                     rsReport.updateString("COLUMN_10",Double.toString(DebitAmount));
                                     rsReport.updateString("COLUMN_11",EITLERPGLOBAL.formatDate(DueDate));
                                     */
                                    // GET PARTY NAME AND DISPLAY IT
                                    //String VoucherNo = UtilFunctions.getString(rsParty,"VOUCHER_NO","");
                                    //String VoucherDate = UtilFunctions.getString(rsParty,"VOUCHER_DATE","");
                                    InvoiceNo = UtilFunctions.getString(rsParty, "INVOICE_NO", "");
                                    InvoiceDate = UtilFunctions.getString(rsParty, "INVOICE_DATE", "");
                                    String MatchedDate = UtilFunctions.getString(rsParty, "MATCHED_DATE", "");
                                    //String GRNNo = UtilFunctions.getString(rsParty,"GRN_NO","");
                                    //String GRNDate = UtilFunctions.getString(rsParty,"GRN_DATE","");
                                    PartyCode = UtilFunctions.getString(rsParty, "SUB_ACCOUNT_CODE", "");
                                    lblStatus.setText("Party : " + PartyCode);
                                    PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                                    // -----------------------------

                                    /*objRow.setValue("MAIN_ACCOUNT_CODE",MainCode);
                                     objRow.setValue("SUB_ACCOUNT_CODE",PartyCode);
                                     objRow.setValue("PARTY_NAME",PartyName);
                                     objRow.setValue("BOOK_CODE",UtilFunctions.getString(rsParty,"BOOK_CODE",""));
                                     objRow.setValue("VOUCHER_NO",VoucherNo);
                                     objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsParty,"LEGACY_NO",""));
                                     objRow.setValue("VOUCHER_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsParty,"VOUCHER_DATE","")));
                                     objRow.setValue("INVOICE_NO",InvoiceNo);
                                     objRow.setValue("LINK_NO",UtilFunctions.getString(rsParty,"LINK_NO",""));
                                     objRow.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(InvoiceDate));
                                     objRow.setValue("DEBIT_AMOUNT",Double.toString(UtilFunctions.getDouble(rsParty,"AMOUNT",0)));
                                     objRow.setValue("CREDIT_AMOUNT","0");*/
                                    //objRow.setValue("AMOUNT", Double.toString(UtilFunctions.getDouble(rsParty,"AMOUNT", 0)));
                                    objRow = objData.newRow();
                                    objRow.setValue("SR_NO", UtilFunctions.getString(rsParty, "RecordCounter", ""));
                                    objRow.setValue("REPORT_ID", UtilFunctions.getString(rsParty, "ReportID", ""));
                                    objRow.setValue("USER_ID", UtilFunctions.getString(rsParty, EITLERPGLOBAL.gUserID, ""));
                                    objRow.setValue("MAIN_ACCOUNT_CODE", MainCode);
                                    objRow.setValue("SUB_ACCOUNT_CODE", PartyCode);
                                    objRow.setValue("PARTY_NAME", PartyName);
                                    objRow.setValue("BOOK_CODE", UtilFunctions.getString(rsParty, "BOOK_CODE", ""));
                                    objRow.setValue("VOUCHER_NO", UtilFunctions.getString(rsInvoice, "VOUCHER_NO", ""));
                                    objRow.setValue("VOUCHER_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", "")));
                                    int DayDiff = EITLERPGLOBAL.getDayDifference(UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", ""), EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()), "yyyy-MM-dd");
                                    double Amount = 0;
                                    String DAY = null;
                                    String AMT = null;
                                    if (DayDiff <= 50) {
                                        objRow.setValue("DAYS50", Double.toString(EITLERPGLOBAL.round(DebitAmount - AdjustedAmount, 2)));
                                        //DAY=(objRow.getValue("DAYS50").toString());
                                        //System.out.println(DAY);
                                    } else if (DayDiff >= 51 && DayDiff <= 90) {
                                        objRow.setValue("DAYS51-90", Double.toString(EITLERPGLOBAL.round(DebitAmount - AdjustedAmount, 2)));
                                    } else {
                                        objRow.setValue("DAYS90", Double.toString(EITLERPGLOBAL.round(DebitAmount - AdjustedAmount, 2)));
                                    }
                                    objRow.setValue("LINKNO", LinkNo);
                                    objRow.setValue("VTYPE", vType);
                                    if (vType.equals("Inv")) {
                                        objRow.setValue("INVCOUNTER", "1");
                                        objRow.setValue("DBNCOUNTER", "0");
                                    }
                                    if (vType.equals("Dbn")) {
                                        objRow.setValue("INVCOUNTER", "0");
                                        objRow.setValue("DBNCOUNTER", "1");
                                    }
                                    objRow.setValue("DAYDIFF", Integer.toString(DayDiff));
                                    objRow.setValue("AMTDIFF", Double.toString(EITLERPGLOBAL.round(DebitAmount - AdjustedAmount, 2))); //COLUMN_15
                                    objRow.setValue("DUEDATE", EITLERPGLOBAL.formatDate(DueDate));
                                    objRow.setValue("AMOUNT", Double.toString(DebitAmount)); //COLUMN_10
                                    objData.AddRow(objRow);
                                    rsInvoice.next();
                                }
                            }
                            rsParty.next();
                        }
                    }
                    HashMap Parameters = new HashMap();
                    Parameters.put("OUT_DATE", txtAsOnDate.getText().trim());
                    Parameters.put("RUN_DATE", EITLERPGLOBAL.getCurrentDate());
                    if (txtMainCode.getText().trim().equals("210010")) {
                        Parameters.put("SALES_TYPE", "FELT SALES - 210010");
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        Parameters.put("SALES_TYPE", "SUITING SALES - 210027");
                    } else if (txtMainCode.getText().trim().equals("210072")) {
                        Parameters.put("SALES_TYPE", "FILTER FABRICS - 210072");
                    } else if (txtMainCode.getText().trim().equals("132803")) {
                        Parameters.put("SALES_TYPE", "SD RECIEVABLE - 132803");
                    } else if (txtMainCode.getText().trim().equals("132802")) {
                        Parameters.put("SALES_TYPE", "SD PAYABLES - 132802");

                    }
                    objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptDebtorsOutstandingText.rpt", Parameters, objData);
                } catch (Exception e) {
                    e.printStackTrace();
                }

                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();
    }//GEN-LAST:event_mnuPreview248OSTextActionPerformed
    
    private void mnuPreviewBankThroughStmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPreviewBankThroughStmtActionPerformed
        // TODO add your handling code here:
        if (!Validate()) {
            return;
        }
        ReportID = 2;
        new Thread() {
            public void run() {
                double CrAmount = 0, DrAmount = 0, ClosingBalance = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", BookCode = "", ChargeCode = "";
                ResultSet rsParty = null, rsInvoice = null, rsOpening = null, rsVoucher = null, rsReport = null;
                int EntryNo = 0, Max = 0, Counter = 0, RecordCounter = 0;
                Connection conn = null;
                Statement stmt = null;
                boolean PartyChange = false;
                int InvoiceType = 0;

                try {
                    data.Execute("DELETE FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=2", FinanceGlobal.FinURL);
                    conn = data.getConn(FinanceGlobal.FinURL);
                    stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                        BookCode = " AND BOOK_CODE IN ('09') ";
                        //ChargeCode = " AND CHARGE_CODE IN ('04') ";
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                        BookCode = " AND BOOK_CODE IN ('01') ";
                        //ChargeCode = " AND CHARGE_CODE IN ('01') ";
                    }
                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = EITLERPGLOBAL.FinFromDateDB;
                    SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
                    FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
                    // ------------------------------

                    // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                    MainCode = txtMainCode.getText();
                    PartyCode = txtSubCode.getText().trim();
                    // ------------------------------

                    // COUNT PARTIES FOR OUTSTANDING , SET MAIN_ACCOUNT_CODE AND PARTY_CODE (IF EXISTS IN txtPartyCode)
                    String Condition = "";
                    if (!txtSubCode.getText().equals("")) {
                        Condition = " AND SUB_ACCOUNT_CODE='" + txtSubCode.getText().trim() + "' ";
                    }

                    SQL = "(SELECT DISTINCT SUB_ACCOUNT_CODE FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                            + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND ENTRY_NO=" + EntryNo + Condition + " "
                            + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00') " + BookCode + " ) "
                            + " UNION "
                            + "(SELECT DISTINCT B.SUB_ACCOUNT_CODE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " "
                            + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL) "
                            + "AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' AND A.APPROVED=1 AND A.CANCELLED=0 " + BookCode + " ) "
                            + "ORDER BY SUB_ACCOUNT_CODE ";

                    rsParty = data.getResult(SQL, FinanceGlobal.FinURL);
                    rsParty.last();
                    Max = rsParty.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter = 0;
                    rsParty.first();
                    // --------------------------------------------------------------------------------------------------

                    // Prepare resultset for entering o/s data into report transaction table
                    rsReport = stmt.executeQuery("SELECT * FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=1 LIMIT 1");
                    RecordCounter = 0;
                    // --------------------------------------------------------------------------------------------------

                    if (rsParty.getRow() > 0) {
                        while (!rsParty.isAfterLast()) {
                            Counter++;
                            Bar.setValue(Counter);
                            Bar.repaint();
                            // GET PARTY NAME AND DISPLAY IT
                            PartyCode = rsParty.getString("SUB_ACCOUNT_CODE");
                            lblStatus.setText("Party : " + PartyCode);
                            PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                            // -----------------------------

                            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
                            SQL = "(SELECT BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND ENTRY_NO=" + EntryNo + " AND EFFECT='D' AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00') " + BookCode + " ) "
                                    + "UNION ALL "
                                    + "(SELECT A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='D' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) " + BookCode + " ) "
                                    + "ORDER BY VOUCHER_DATE ";

                            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
                            rsInvoice.first();
                            InvoiceNo = "";
                            InvoiceDate = "";
                            PartyChange = false;
                            // ---------------------------------------------------------------------
                            CrAmount = 0;
                            DrAmount = 0;
                            if (rsInvoice.getRow() > 0) {
                                while (!rsInvoice.isAfterLast()) {

                                    String VoucherNo = UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "");
                                    InvoiceNo = UtilFunctions.getString(rsInvoice, "INVOICE_NO", "");
                                    InvoiceDate = UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "");
                                    double DebitAmount = 0;
                                    double AdjustedAmount = 0;
                                    if (clsVoucher.getVoucherType(VoucherNo) != FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        rsInvoice.next();
                                        continue;
                                    }
                                    if (InvoiceType == 2 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        if (!clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("1") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("4")) {
                                            rsInvoice.next();
                                            continue;
                                        }
                                    } else if (InvoiceType == 1 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        if (!clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("1")) {
                                            rsInvoice.next();
                                            continue;
                                        }
                                    }

                                    if (clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                                + "AND MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                                + "AND INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + InvoiceDate + "' "
                                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                                + "AND B.MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                                + "AND B.INVOICE_DATE='" + InvoiceDate + "' AND B.INVOICE_NO='" + InvoiceNo + "' ";

                                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                                    }

                                    if (DebitAmount == AdjustedAmount) {
                                        rsInvoice.next();
                                        continue;
                                    }
                                    RecordCounter++;
                                    rsReport.moveToInsertRow();
                                    rsReport.updateLong("SR_NO", RecordCounter);
                                    rsReport.updateLong("REPORT_ID", ReportID);
                                    rsReport.updateLong("USER_ID", EITLERPGLOBAL.gUserID);
                                    rsReport.updateString("COLUMN_1", MainCode);
                                    rsReport.updateString("COLUMN_2", PartyCode);
                                    rsReport.updateString("COLUMN_3", PartyName);
                                    rsReport.updateString("COLUMN_4", UtilFunctions.getString(rsInvoice, "VOUCHER_NO", ""));
                                    rsReport.updateString("COLUMN_5", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", "")));
                                    String VoucherDate = UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", "");
                                    int VoucherType = clsVoucher.getVoucherType(VoucherNo);
                                    String LinkNo = "";
                                    String vType = "";
                                    String DueDate = "";
                                    int Days = 0;

                                    if (VoucherType == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        LinkNo = clsSalesInvoice.getAgentAlphaSrNo(InvoiceNo, InvoiceDate);
                                        Days = data.getIntValueFromDB("SELECT CREDIT_DAYS FROM D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND PARTY_CODE='" + PartyCode + "' ");
                                        DueDate = EITLERPGLOBAL.addDaysToDate(InvoiceDate, Days, "yyyy-MM-dd");
                                        vType = "Inv";
                                    }
                                    String OBC_NO = "";
                                    String OBC_DATE = "";
                                    ChargeCode = clsSalesInvoice.getInvoiceChargeCode(UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""), UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                    if ((InvoiceType == 2 || InvoiceType == 1) && (ChargeCode.startsWith("1") || ChargeCode.startsWith("4"))) {
                                        SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                                + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                                + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                + "AND B.INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' "
                                                + "AND B.INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ";
                                        OBC_NO = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                        SQL = "SELECT A.BANK_REFERENCE_DATE FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                                + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                                + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                + "AND B.INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' "
                                                + "AND B.INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ";
                                        OBC_DATE = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                    }

                                    rsReport.updateString("COLUMN_6", LinkNo);
                                    rsReport.updateString("COLUMN_7", UtilFunctions.getString(rsInvoice, "LEGACY_NO", ""));
                                    rsReport.updateString("COLUMN_8", InvoiceNo);
                                    rsReport.updateString("COLUMN_9", EITLERPGLOBAL.formatDate(InvoiceDate));
                                    rsReport.updateString("COLUMN_10", Double.toString(DebitAmount));
                                    rsReport.updateString("COLUMN_11", EITLERPGLOBAL.formatDate(DueDate));

                                    int DayDiff = EITLERPGLOBAL.getDayDifference(UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", ""), EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()), "yyyy-MM-dd");
                                    double Amount = 0;
                                    if (DayDiff <= 50) {
                                        rsReport.updateString("COLUMN_12", "50");
                                    } else if (DayDiff >= 51 && DayDiff <= 90) {
                                        rsReport.updateString("COLUMN_12", "51-90");
                                    } else {
                                        rsReport.updateString("COLUMN_12", "90");
                                    }
                                    rsReport.updateString("COLUMN_13", vType);
                                    rsReport.updateString("COLUMN_14", Integer.toString(DayDiff));
                                    rsReport.updateString("COLUMN_15", Double.toString(EITLERPGLOBAL.round(DebitAmount - AdjustedAmount, 2)));
                                    rsReport.updateString("COLUMN_16", OBC_NO);
                                    rsReport.updateString("COLUMN_17", EITLERPGLOBAL.formatDate(OBC_DATE));
                                    rsReport.insertRow();
                                    rsInvoice.next();
                                }
                            }
                            rsParty.next();
                        }
                    }
                    if (data.getIntValueFromDB("SELECT COUNT(*) FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=2", FinanceGlobal.FinURL) > 0) {
                        String SaleType = "";

                        if (txtMainCode.getText().trim().equals("210010")) {
                            SaleType = "FELT SALES - 210010";
                        } else if (txtMainCode.getText().trim().equals("210027")) {
                            SaleType = "SUITING SALES - 210027";
                        } else if (txtMainCode.getText().trim().equals("210072")) {
                            SaleType = "FILTER FABRICS - 210072";
                        }

                        URL ReportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptDebtorsOutstanding14.jsp?dbURL=" + FinanceGlobal.FinURL + "&AsOnDate=" + txtAsOnDate.getText().trim() + "&SaleType=" + SaleType + "&UserId=" + EITLERPGLOBAL.gUserID);
                        System.out.println(ReportFile);
                        EITLERPGLOBAL.loginContext.showDocument(ReportFile, "_blank");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();
    }//GEN-LAST:event_mnuPreviewBankThroughStmtActionPerformed
    
    private void Opg4OnlyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Opg4OnlyItemStateChanged
        // TODO add your handling code here:
        if (Opg4Only.isSelected()) {
            mnuPreview248OS1.setEnabled(false);
            mnuPreview248OSText1.setEnabled(false);
            mnuPreviewBankThroughStmt1.setEnabled(true);
        }
    }//GEN-LAST:event_Opg4OnlyItemStateChanged

    private void Opg28OnlyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Opg28OnlyItemStateChanged
        // TODO add your handling code here:
        if (Opg28Only.isSelected()) {
            mnuPreview248OS1.setEnabled(true);
            mnuPreview248OSText1.setEnabled(true);
            mnuPreviewBankThroughStmt1.setEnabled(false);
        }
    }//GEN-LAST:event_Opg28OnlyItemStateChanged

    private void Opg1OnlyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Opg1OnlyItemStateChanged
        // TODO add your handling code here:
        if (Opg1Only.isSelected()) {
            mnuPreview248OS1.setEnabled(false);
            mnuPreviewBankThroughStmt1.setEnabled(true);
        }
    }//GEN-LAST:event_Opg1OnlyItemStateChanged

    private void Opg248OnlyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Opg248OnlyItemStateChanged
        // TODO add your handling code here:
        if (Opg248Only.isSelected()) {
            mnuPreview248OS1.setEnabled(true);
            mnuPreview248OSText1.setEnabled(true);
            mnuPreviewBankThroughStmt1.setEnabled(false);
            //GenerateDebotOutStandingDetail();
        }
    }//GEN-LAST:event_Opg248OnlyItemStateChanged

    private void chkAgentwiseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkAgentwiseItemStateChanged
        // TODO add your handling code here:
        if (chkAgentwise.isSelected()) {
            txtSubCode.setText("");
            txtSubCode.setEnabled(false);
            txtAgentwise.setText("");
            txtAgentwise.setEnabled(true);
        } else {
            txtSubCode.setText("");
            txtSubCode.setEnabled(true);
            txtAgentwise.setText("");
            txtAgentwise.setEnabled(false);
        }
    }//GEN-LAST:event_chkAgentwiseItemStateChanged

    private void mnuTransferBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuTransferBalanceActionPerformed
        // TODO add your handling code here:
        int InvoiceType = EITLERPGLOBAL.getComboCode(cmbInvoiceType);
        if (InvoiceType == 1) {
            txtMainCode.setText("210027");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 2) {
            txtMainCode.setText("210010");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 3) {
            txtMainCode.setText("210072");
            txtMainCode.setEnabled(false);
        }
        try {
            int packetSize = 1024;
            int serverPort = 50000;
            DatagramSocket socket = null; //How we send packets
            DatagramPacket packet = null; //what we send it in
            InetAddress address = null; //Where to send
            String messageSend = null; //Message to be send
            String messageReturn = null; //What we get back  from the Server
            byte[] data;
            InvoiceType = 0;
            if (txtMainCode.getText().trim().equals("210010")) {
                InvoiceType = 2;
            } else if (txtMainCode.getText().trim().equals("210027")) {
                InvoiceType = 1;
            }
            // Gets the IP address of the Server
            //address = InetAddress.getByName(args[0]);

            address = InetAddress.getByName("200.0.0.227");//
            System.out.println(address);

            socket = new DatagramSocket();
            data = new byte[packetSize];
            messageSend = new String(Integer.toString(InvoiceType));
            messageSend.getBytes(0, messageSend.length(), data, 0);

            // remember datagrams hold bytes
            packet = new DatagramPacket(data, data.length, address, serverPort);
            System.out.println(" Trying to Send the packet ");

            // sends the packet
            socket.send(packet);

            //packet is reinitialized to use it for recieving
            packet = new DatagramPacket(data, data.length);

            // Receives the packet from the server
            socket.receive(packet);

            // display message received
            messageReturn = new String(packet.getData(), 0);
            System.out.println("Message Returned : "
                    + messageReturn.trim());
        } catch (Exception e) {
            e.printStackTrace();
        }
        /*new Thread() {
         public void run() {
         try {
         double MainBalance=0, SubBalance=0;
         String GroupMainParty="", GroupSubParty="",Record="";
         String InvoiceNo="",InvoiceDate="",strMainBalance="",strBalance="",strDecimal="";
         ResultSet rsMainParty = null,rsSubParty = null;
         HashMap List = new HashMap();
         int InvoiceType = 0;
         if(txtMainCode.getText().trim().equals("210010")) {
         InvoiceType = 2;
         } else if(txtMainCode.getText().trim().equals("210027")) {
         InvoiceType = 1;
         }
         rsMainParty = data.getResult("SELECT GROUP_MAIN_PARTY FROM D_FIN_PARTY_GROUPING_HEADER WHERE INVOICE_TYPE=" +InvoiceType+ " ORDER BY GROUP_MAIN_PARTY",FinanceGlobal.FinURL);
         rsMainParty.first();
         if(rsMainParty.getRow()>0) {
         while(!rsMainParty.isAfterLast()) {
         Record = "";
         MainBalance=0;
         GroupMainParty = rsMainParty.getString("GROUP_MAIN_PARTY");
         MainBalance=BalanceTransfer(txtMainCode.getText().trim(), GroupMainParty);
         
         rsSubParty = data.getResult("SELECT GROUP_SUB_PARTY FROM D_FIN_PARTY_GROUPING_DETAIL WHERE GROUP_MAIN_PARTY='"+GroupMainParty+"' AND INVOICE_TYPE=" +InvoiceType+ " ORDER BY GROUP_SUB_PARTY",FinanceGlobal.FinURL);
         rsSubParty.first();
         if(rsSubParty.getRow()>0) {
         while(!rsSubParty.isAfterLast()) {
         GroupSubParty = rsSubParty.getString("GROUP_SUB_PARTY");
         SubBalance = EITLERPGLOBAL.round(SubBalance+BalanceTransfer(txtMainCode.getText().trim(), GroupSubParty),2);
         rsSubParty.next();
         }
         }
         
         strMainBalance = new BigDecimal(MainBalance+SubBalance).setScale(2,BigDecimal.ROUND_HALF_UP).toString();;
         strBalance = strMainBalance.substring(0,strMainBalance.indexOf("."));
         strDecimal = strMainBalance.substring(strMainBalance.indexOf(".")+1);
         if(strBalance.length()<10) {
         strBalance = EITLERPGLOBAL.padLeftEx(strBalance, "0", 10);
         } else {
         JOptionPane.showMessageDialog(null,"Party Code : " + GroupMainParty + " " +
         "\nBalance more then 10+2 format. \n File can not generated." +
         "\nContact Administrator and EDP head.");
         return;
         }
         
         if(strDecimal.length()<2) {
         strDecimal = EITLERPGLOBAL.padRightEx(strDecimal, "0", 2);
         }
         
         Record = GroupMainParty+strBalance+strDecimal+"000000000000";
         System.out.println(Record);
         List.put(Integer.toString(List.size()+1), Record);
         rsMainParty.next();
         }
         }
         
         String PrintLine = "";
         // WRITE TO FILE
         boolean sucess = new File("/data/Balance_Transfer_Cobol/").mkdir();
         if(sucess) {
         JOptionPane.showMessageDialog(null,"Directory created...");
         }
         String FileName = "/data/Balance_Transfer_Cobol/"+EITLERPGLOBAL.getCurrentDateDB().substring(8,10)+EITLERPGLOBAL.getCurrentDateDB().substring(5,7)+EITLERPGLOBAL.getCurrentDateDB().substring(0,4)+".txt";
         File file = new File(FileName);
         
         boolean exists = file.createNewFile();
         if(!exists) {
         JOptionPane.showMessageDialog(null,"File Already exists...");
         }
         BufferedWriter aFile=new BufferedWriter(new FileWriter(file));
         
         for(int i=1;i<=List.size();i++) {
         PrintLine = List.get(Integer.toString(i)).toString();
         System.out.println(PrintLine);
         aFile.write(PrintLine);
         aFile.newLine();
         }
         aFile.close();
         JOptionPane.showMessageDialog(null,"File Created successfully.");
         
         } catch(Exception e) {
         e.printStackTrace();
         }
         
         Bar.setVisible(false);
         lblStatus.setVisible(false);
         };
         }.start();*/
    }//GEN-LAST:event_mnuTransferBalanceActionPerformed

    private void mnuPreviewBankReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPreviewBankReportActionPerformed
        // TODO add your handling code here:
        int InvoiceType = EITLERPGLOBAL.getComboCode(cmbInvoiceType);
        if (InvoiceType == 1) {
            txtMainCode.setText("210027");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 2) {
            txtMainCode.setText("210010");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 3) {
            txtMainCode.setText("210072");
            txtMainCode.setEnabled(false);
        }
        if (!Validate()) {
            return;
        }
        new Thread() {
            public void run() {

                double TBAmount = 0, Above90Days = 0, Below90Days = 0, CrAmount = 0, DrAmount = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", BookCode = "", ChargeCode = "";
                ResultSet rsParty = null, rsInvoice = null, rsOpening = null, rsVoucher = null, rsReport = null;
                int EntryNo = 0, Max = 0, Counter = 0, RecordCounter = 0;
                Connection conn = null;
                Statement stmt = null;
                boolean PartyChange = false;
                int InvoiceType = 0;
                try {
                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                    } else if (txtMainCode.getText().trim().equals("210072")) {
                        InvoiceType = 3;
                    }

                    TReportWriter.SimpleDataProvider.TTable objData = new TReportWriter.SimpleDataProvider.TTable();
                    objData.AddColumn("SR_NO");
                    objData.AddColumn("SUB_ACCOUNT_CODE");
                    objData.AddColumn("PARTY_NAME");
                    objData.AddColumn("BELOW_90_DAYS");
                    objData.AddColumn("ABOVE_90_DAYS");
                    objData.AddColumn("CLOSING_BALANCE");

                    TReportWriter.SimpleDataProvider.TRow objRow = objData.newRow();

                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = EITLERPGLOBAL.FinFromDateDB;
                    SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
                    FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
                    // ------------------------------

                    ResultSet rsAccount = data.getResult("SELECT MAIN_ACCOUNT_CODE,PARTY_CODE,PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = '" + txtMainCode.getText().trim() + "' AND PARTY_CODE<>0 AND PARTY_CODE<>'' ORDER BY MAIN_ACCOUNT_CODE, PARTY_CODE", FinanceGlobal.FinURL);
                    rsAccount.first();
                    rsAccount.last();
                    Counter = rsAccount.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Counter);
                    Bar.setMinimum(0);
                    Counter = 0;
                    Bar.setValue(Counter);
                    rsAccount.first();
                    int SrNo = 0;
                    Counter = 0;
                    while (!rsAccount.isAfterLast()) {
                        // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                        MainCode = txtMainCode.getText();
                        PartyCode = rsAccount.getString("PARTY_CODE");
                        // ------------------------------
                        TBAmount = (new clsAccount()).getClosingBalance(rsAccount.getString("MAIN_ACCOUNT_CODE"), rsAccount.getString("PARTY_CODE"), EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()), true);
                        Counter++;
                        lblStatus.setText(PartyCode);
                        Bar.setValue(Counter);
                        Bar.repaint();
                        if (TBAmount > 0) {
                            SrNo++;
                            objRow = objData.newRow();
                            objRow.setValue("SR_NO", Integer.toString(SrNo));
                            objRow.setValue("SUB_ACCOUNT_CODE", PartyCode);
                            objRow.setValue("PARTY_NAME", clsAccount.getAccountName(MainCode, PartyCode));

                            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
                            SQL = "(SELECT BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT "
                                    + "FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND ENTRY_NO=" + EntryNo + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                                    + "UNION ALL "
                                    + "(SELECT A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT "
                                    + "FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND A.APPROVED=1 AND A.CANCELLED=0 AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' "
                                    + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL )) "
                                    + "ORDER BY INVOICE_NO,YEAR(VOUCHER_DATE),MONTH(VOUCHER_DATE),DAY(VOUCHER_DATE),LINK_NO,EFFECT DESC ";

                            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
                            rsInvoice.first();
                            InvoiceNo = "";
                            InvoiceDate = "";
                            PartyChange = false;
                            // ---------------------------------------------------------------------
                            Above90Days = 0;
                            Below90Days = 0;
                            CrAmount = 0;
                            DrAmount = 0;
                            String VoucherNo = "";
                            String VoucherDate = "";
                            if (rsInvoice.getRow() > 0) {
                                while (!rsInvoice.isAfterLast()) {
                                    CrAmount = 0;
                                    DrAmount = 0;
                                    VoucherNo = UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "");
                                    VoucherDate = UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", "");
                                    InvoiceNo = UtilFunctions.getString(rsInvoice, "INVOICE_NO", "");
                                    InvoiceDate = UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "");
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                        CrAmount = CrAmount + UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                    }

                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                        DrAmount = DrAmount + UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                    }

                                    int DayDiff = EITLERPGLOBAL.getDayDifference(VoucherDate, EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()), "yyyy-MM-dd");
                                    if (DayDiff <= 90) {
                                        Below90Days = Below90Days + DrAmount - CrAmount;
                                    } else if (DayDiff > 90) {
                                        Above90Days = Above90Days + DrAmount - CrAmount;
                                    }
                                    rsInvoice.next();
                                }
                            }
                            if (Above90Days < 0) {
                                Below90Days = Below90Days + Above90Days;
                                Above90Days = 0;
                            }
                            if (Below90Days < 0) {
                                Above90Days = Above90Days + Below90Days;
                                Below90Days = 0;
                            }
                            objRow.setValue("BELOW_90_DAYS", Double.toString(Below90Days));
                            objRow.setValue("ABOVE_90_DAYS", Double.toString(Above90Days));
                            objRow.setValue("CLOSING_BALANCE", Double.toString(Below90Days + Above90Days));
                            objData.AddRow(objRow);
                            //System.out.println("Party Code : " + PartyCode + " Below 90 Days : " + EITLERPGLOBAL.padLeftEx(Double.toString(EITLERPGLOBAL.round(Below90Days,2)), " ", 10) + " Above 90 Days : " + EITLERPGLOBAL.padLeftEx(Double.toString(EITLERPGLOBAL.round(Above90Days,2)), " ", 10) + " Balance : " + EITLERPGLOBAL.padLeftEx(Double.toString(EITLERPGLOBAL.round((Below90Days+Above90Days),2)), " ", 10));
                        }
                        rsAccount.next();
                    }
                    HashMap Parameters = new HashMap();
                    Parameters.put("OUT_DATE", txtAsOnDate.getText().trim());
                    Parameters.put("RUN_DATE", EITLERPGLOBAL.getCurrentDate());
                    if (txtMainCode.getText().trim().equals("210010")) {
                        Parameters.put("SALES_TYPE", "FELT SALES - 210010");
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        Parameters.put("SALES_TYPE", "SUITING SALES - 210027");
                    }
                    objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptBankStatement.rpt", Parameters, objData);
                } catch (Exception e) {
                    e.printStackTrace();
                }

                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();
    }//GEN-LAST:event_mnuPreviewBankReportActionPerformed
    
    private void mnuPreviewMatchReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPreviewMatchReportActionPerformed
        // TODO add your handling code here:
        int InvoiceType = EITLERPGLOBAL.getComboCode(cmbInvoiceType);
        if (InvoiceType == 1) {
            txtMainCode.setText("210027");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 2) {
            txtMainCode.setText("210010");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 3) {
            txtMainCode.setText("210072");
            txtMainCode.setEnabled(false);
        }
        if (!Validate()) {
            return;
        }

        new Thread() {
            public void run() {

                double CrAmount = 0, DrAmount = 0, ClosingBalance = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", BookCode = "", ChargeCode = "";
                ResultSet rsParty = null, rsVoucher = null;
                int EntryNo = 0, Max = 0, Counter = 0, RecordCounter = 0;
                boolean PartyChange = false;
                int InvoiceType = 0;

                try {

                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                    } else if (txtMainCode.getText().trim().equals("210072")) {
                        InvoiceType = 3;
                    }
                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = ToDate.substring(0, 8) + "01";
                    // ------------------------------

                    // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                    MainCode = txtMainCode.getText();
                    PartyCode = txtSubCode.getText().trim();
                    // ------------------------------

                    // COUNT PARTIES FOR OUTSTANDING , SET MAIN_ACCOUNT_CODE AND PARTY_CODE (IF EXISTS IN txtPartyCode)
                    String Condition = "";
                    if (!txtSubCode.getText().equals("")) {
                        Condition = " AND SUB_ACCOUNT_CODE='" + txtSubCode.getText() + "' ";
                    }

                    SQL = "SELECT A.VOUCHER_NO,A.LEGACY_NO,A.VOUCHER_DATE,A.BOOK_CODE, B.MAIN_ACCOUNT_CODE,B.SUB_ACCOUNT_CODE, "
                            + "B.EFFECT,SUM(B.AMOUNT) AS AMOUNT,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.MATCHED_DATE "
                            + "FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MATCHED_DATE>='" + FromDate + "' AND B.MATCHED_DATE<='" + ToDate + "' AND B.EFFECT='D' "
                            + "AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " "
                            + "AND A.APPROVED=1 AND A.CANCELLED=0 "
                            + "GROUP BY A.VOUCHER_NO "
                            + "ORDER BY B.SUB_ACCOUNT_CODE, A.VOUCHER_DATE,A.VOUCHER_NO ";
                    //,B.GRN_NO,B.GRN_DATE

                    rsParty = data.getResult(SQL, FinanceGlobal.FinURL);
                    rsParty.last();
                    Max = rsParty.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter = 0;
                    rsParty.first();
                    // --------------------------------------------------------------------------------------------------

                    // Preparing Treport object
                    TReportWriter.SimpleDataProvider.TTable objData = new TReportWriter.SimpleDataProvider.TTable();
                    objData.AddColumn("MAIN_ACCOUNT_CODE");
                    objData.AddColumn("SUB_ACCOUNT_CODE");
                    objData.AddColumn("PARTY_NAME");
                    objData.AddColumn("BOOK_CODE");
                    objData.AddColumn("VOUCHER_NO");
                    objData.AddColumn("LEGACY_NO");
                    objData.AddColumn("VOUCHER_DATE");
                    objData.AddColumn("INVOICE_NO");
                    objData.AddColumn("LINK_NO");
                    objData.AddColumn("INVOICE_DATE");
                    objData.AddColumn("CHARGE_CODE");
                    objData.AddColumn("BANK_REF_NO");
                    objData.AddColumn("RTN_CD");
                    objData.AddColumn("EFFECT");
                    objData.AddColumn("DEBIT_AMOUNT");
                    objData.AddColumn("CREDIT_AMOUNT");
                    TReportWriter.SimpleDataProvider.TRow objRow = objData.newRow();
                    // --------------------------------------------------------------------------------------------------

                    if (rsParty.getRow() > 0) {
                        while (!rsParty.isAfterLast()) {
                            Counter++;
                            Bar.setValue(Counter);
                            Bar.repaint();

                            // GET PARTY NAME AND DISPLAY IT
                            String VoucherNo = UtilFunctions.getString(rsParty, "VOUCHER_NO", "");
                            String VoucherDate = UtilFunctions.getString(rsParty, "VOUCHER_DATE", "");
                            InvoiceNo = UtilFunctions.getString(rsParty, "INVOICE_NO", "");
                            InvoiceDate = UtilFunctions.getString(rsParty, "INVOICE_DATE", "");
                            String MatchedDate = UtilFunctions.getString(rsParty, "MATCHED_DATE", "");
                            //String GRNNo = UtilFunctions.getString(rsParty,"GRN_NO","");
                            //String GRNDate = UtilFunctions.getString(rsParty,"GRN_DATE","");
                            PartyCode = UtilFunctions.getString(rsParty, "SUB_ACCOUNT_CODE", "");
                            lblStatus.setText("Party : " + PartyCode);
                            PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                            // -----------------------------
                            double DebitAmount = 0;
                            double AdjustedAmount = 0;
                            objRow = objData.newRow();
                            objRow.setValue("MAIN_ACCOUNT_CODE", MainCode);
                            objRow.setValue("SUB_ACCOUNT_CODE", PartyCode);
                            objRow.setValue("PARTY_NAME", PartyName);
                            objRow.setValue("BOOK_CODE", UtilFunctions.getString(rsParty, "BOOK_CODE", ""));
                            objRow.setValue("VOUCHER_NO", VoucherNo);
                            objRow.setValue("LEGACY_NO", UtilFunctions.getString(rsParty, "LEGACY_NO", ""));
                            objRow.setValue("VOUCHER_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsParty, "VOUCHER_DATE", "")));
                            objRow.setValue("INVOICE_NO", InvoiceNo);
                            objRow.setValue("LINK_NO", UtilFunctions.getString(rsParty, "LINK_NO", ""));
                            objRow.setValue("INVOICE_DATE", EITLERPGLOBAL.formatDate(InvoiceDate));
                            objRow.setValue("EFFECT", "D");
                            objRow.setValue("DEBIT_AMOUNT", Double.toString(UtilFunctions.getDouble(rsParty, "AMOUNT", 0)));
                            objRow.setValue("RTN_CD", "");
                            objRow.setValue("CREDIT_AMOUNT", "0");
                            if (clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                ChargeCode = clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate);
                                objRow.setValue("CHARGE_CODE", ChargeCode);
                                String RefNo = "";
                                if ((ChargeCode.startsWith("1") || ChargeCode.startsWith("4")) && InvoiceType == 2) {
                                    SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                            + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                            + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                            + "AND B.INVOICE_NO='" + InvoiceNo + "' AND B.INVOICE_DATE='" + InvoiceDate + "' ";
                                    RefNo = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                    if (RefNo.equals("")) {
                                        RefNo = "F";
                                    }
                                } else if (ChargeCode.startsWith("1") && InvoiceType == 1) {
                                    SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                            + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                            + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                            + "AND B.INVOICE_NO='" + InvoiceNo + "' AND B.INVOICE_DATE='" + InvoiceDate + "' ";
                                    RefNo = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                } else {
                                    RefNo = "";
                                }
                                objRow.setValue("BANK_REF_NO", RefNo);
                                SQL = "SELECT VOUCHER_NO, MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,EFFECT,AMOUNT,INVOICE_NO,INVOICE_DATE, "
                                        + "LINK_NO,MATCHED_DATE FROM D_FIN_VOUCHER_DETAIL "
                                        + "WHERE MATCHED_DATE='" + MatchedDate + "' AND INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + InvoiceDate + "' "
                                        + "AND EFFECT='C' AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' ";
                                //GRN_NO,GRN_DATE,
                                rsVoucher = data.getResult(SQL, FinanceGlobal.FinURL);
                            } else {
                                objRow.setValue("CHARGE_CODE", "");
                                objRow.setValue("BANK_REF_NO", "");
                                SQL = "SELECT VOUCHER_NO, MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,EFFECT,AMOUNT,INVOICE_NO,INVOICE_DATE,"
                                        + "LINK_NO,MATCHED_DATE FROM D_FIN_VOUCHER_DETAIL "
                                        + "WHERE MATCHED_DATE='" + MatchedDate + "' AND GRN_NO='" + VoucherNo + "' AND GRN_DATE='" + VoucherDate + "' "
                                        + "AND EFFECT='C' AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' ";
                                //GRN_NO,GRN_DATE,
                                rsVoucher = data.getResult(SQL, FinanceGlobal.FinURL);
                            }
                            objData.AddRow(objRow);
                            if (rsVoucher.getRow() > 0) {
                                while (!rsVoucher.isAfterLast()) {
                                    VoucherNo = UtilFunctions.getString(rsVoucher, "VOUCHER_NO", "");
                                    objRow = objData.newRow();
                                    objRow.setValue("MAIN_ACCOUNT_CODE", MainCode);
                                    objRow.setValue("SUB_ACCOUNT_CODE", PartyCode);
                                    objRow.setValue("PARTY_NAME", PartyName);
                                    objRow.setValue("BOOK_CODE", data.getStringValueFromDB("SELECT BOOK_CODE FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='" + VoucherNo + "' ", FinanceGlobal.FinURL));
                                    objRow.setValue("VOUCHER_NO", VoucherNo);
                                    objRow.setValue("LEGACY_NO", data.getStringValueFromDB("SELECT LEGACY_NO FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='" + VoucherNo + "' ", FinanceGlobal.FinURL));
                                    objRow.setValue("VOUCHER_DATE", EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT VOUCHER_DATE FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='" + VoucherNo + "' ", FinanceGlobal.FinURL)));
                                    objRow.setValue("INVOICE_NO", UtilFunctions.getString(rsVoucher, "INVOICE_NO", ""));
                                    objRow.setValue("LINK_NO", data.getStringValueFromDB("SELECT LINK_NO FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='" + VoucherNo + "' ", FinanceGlobal.FinURL));
                                    objRow.setValue("INVOICE_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher, "INVOICE_DATE", "")));
                                    objRow.setValue("EFFECT", "C");
                                    objRow.setValue("DEBIT_AMOUNT", "0");
                                    objRow.setValue("RTN_CD", "");
                                    objRow.setValue("CREDIT_AMOUNT", Double.toString(UtilFunctions.getDouble(rsVoucher, "AMOUNT", 0)));
                                    objRow.setValue("CHARGE_CODE", "");
                                    objRow.setValue("BANK_REF_NO", "");
                                    objData.AddRow(objRow);
                                    rsVoucher.next();
                                }
                            }
                            rsParty.next();
                        }
                    }

                    HashMap Parameters = new HashMap();
                    Parameters.put("OUT_DATE", txtAsOnDate.getText().trim());
                    Parameters.put("RUN_DATE", EITLERPGLOBAL.getCurrentDate());
                    if (txtMainCode.getText().trim().equals("210010")) {
                        Parameters.put("SALES_TYPE", "FELT SALES - 210010");
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        Parameters.put("SALES_TYPE", "SUITING SALES - 210027");
                    } else if (txtMainCode.getText().trim().equals("210072")) {
                        Parameters.put("SALES_TYPE", "FILTER FABRICS - 210072");
                    } else if (txtMainCode.getText().trim().equals("132803")) {
                        Parameters.put("SALES_TYPE", "SD RECIEVABLE - 132803");
                    } else if (txtMainCode.getText().trim().equals("132802")) {
                        Parameters.put("SALES_TYPE", "SD PAYABLES - 132802");

                    }
                    objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptDebtorMatch.rpt", Parameters, objData);
                } catch (Exception e) {
                    e.printStackTrace();
                }

                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();
    }//GEN-LAST:event_mnuPreviewMatchReportActionPerformed
    
    private void mnuPreview248OSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPreview248OSActionPerformed
        // TODO add your handling code here:
        if (!Validate()) {
            return;
        }
        ReportID = 2;
        new Thread() {
            public void run() {

                double CrAmount = 0, DrAmount = 0, ClosingBalance = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", BookCode = "", ChargeCode = "";
                ResultSet rsParty = null, rsInvoice = null, rsOpening = null, rsVoucher = null, rsReport = null;
                int EntryNo = 0, Max = 0, Counter = 0, RecordCounter = 0;
                Connection conn = null;
                Statement stmt = null;
                boolean PartyChange = false;
                int InvoiceType = 0;

                try {
                    data.Execute("DELETE FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=2", FinanceGlobal.FinURL);
                    conn = data.getConn(FinanceGlobal.FinURL);
                    stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                        BookCode = " AND BOOK_CODE IN ('09','18') ";
                        ChargeCode = " AND CHARGE_CODE IN ('02','08') ";
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                        BookCode = " AND BOOK_CODE IN ('01','12','16') ";
                        ChargeCode = " AND CHARGE_CODE IN ('02','04','08','05') ";
                    }
                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = EITLERPGLOBAL.FinFromDateDB;
                    SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
                    FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
                    // ------------------------------

                    // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                    MainCode = txtMainCode.getText();
                    PartyCode = txtSubCode.getText().trim();
                    // ------------------------------

                    /*if(!chkWithoutProcess.isSelected()) {
                     // CALL MATCH AND UNMATCH ENTRIES BEFORE GENERATING REPORT
                     FindMatchInvoice(MainCode, PartyCode, FromDate, ToDate);
                     while(!ProcessDone) {
                     //Wait until process is completed ...
                     }
                     ProcessDone=false;
                     FindMatchDebits(MainCode, PartyCode, FromDate, ToDate);
                     while(!ProcessDone) {
                     //Wait until process is completed ...
                     }
                     ProcessDone=false;
                     FindMatchDebitsFromClosing(MainCode, PartyCode, FromDate, ToDate);
                     while(!ProcessDone) {
                     //Wait until process is completed ...
                     }
                     ProcessDone=false;
                     // ------------------------------
                     }*/
                    // COUNT PARTIES FOR OUTSTANDING , SET MAIN_ACCOUNT_CODE AND PARTY_CODE (IF EXISTS IN txtPartyCode)
                    String Condition = "";
                    if (chkAgentwise.isSelected()) {
                        Condition = " AND SUB_ACCOUNT_CODE LIKE '" + txtAgentwise.getText().trim() + "%' ";
                    } else {
                        if (!txtSubCode.getText().equals("")) {
                            Condition = " AND SUB_ACCOUNT_CODE='" + txtSubCode.getText().trim() + "' ";
                        }
                    }

                    SQL = "(SELECT DISTINCT SUB_ACCOUNT_CODE FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                            + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND ENTRY_NO=" + EntryNo + Condition + " "
                            + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00') " + BookCode + " ) "
                            + " UNION "
                            + "(SELECT DISTINCT B.SUB_ACCOUNT_CODE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " "
                            + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL) "
                            + "AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' AND A.APPROVED=1 AND A.CANCELLED=0 " + BookCode + " ) "
                            + "ORDER BY SUB_ACCOUNT_CODE ";

                    rsParty = data.getResult(SQL, FinanceGlobal.FinURL);
                    rsParty.last();
                    Max = rsParty.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter = 0;
                    rsParty.first();
                    // --------------------------------------------------------------------------------------------------

                    // Prepare resultset for entering o/s data into report transaction table
                    rsReport = stmt.executeQuery("SELECT * FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=1 LIMIT 1");
                    RecordCounter = 0;
                    // --------------------------------------------------------------------------------------------------

                    if (rsParty.getRow() > 0) {
                        while (!rsParty.isAfterLast()) {
                            Counter++;
                            Bar.setValue(Counter);
                            Bar.repaint();
                            // GET PARTY NAME AND DISPLAY IT
                            PartyCode = rsParty.getString("SUB_ACCOUNT_CODE");
                            lblStatus.setText("Party : " + PartyCode);
                            PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                            // -----------------------------
                            /*SQL = "SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='"+PartyCode+"' AND MAIN_ACCOUNT_CODE='"+txtMainCode.getText().trim()+"' " +ChargeCode;
                             if(!data.IsRecordExist(SQL)) {
                             rsParty.next();
                             continue;
                             }*/

                            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
                            SQL = "(SELECT BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND ENTRY_NO=" + EntryNo + " AND EFFECT='D' AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00') " + BookCode + " ) "
                                    + "UNION ALL "
                                    + "(SELECT A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='D' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) " + BookCode + " ) "
                                    + "ORDER BY VOUCHER_DATE ";

                            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
                            rsInvoice.first();
                            InvoiceNo = "";
                            InvoiceDate = "";
                            PartyChange = false;
                            // ---------------------------------------------------------------------
                            CrAmount = 0;
                            DrAmount = 0;
                            if (rsInvoice.getRow() > 0) {
                                while (!rsInvoice.isAfterLast()) {

                                    String VoucherNo = UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "");
                                    InvoiceNo = UtilFunctions.getString(rsInvoice, "INVOICE_NO", "");
                                    InvoiceDate = UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "");
                                    double DebitAmount = 0;
                                    double AdjustedAmount = 0;
                                    if (clsVoucher.getVoucherType(VoucherNo) != FinanceGlobal.TYPE_SALES_JOURNAL && clsVoucher.getVoucherType(VoucherNo) != FinanceGlobal.TYPE_DEBIT_NOTE) {
                                        rsInvoice.next();
                                        continue;
                                    }
                                    if (InvoiceType == 2 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        if (!clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8")) {
                                            rsInvoice.next();
                                            continue;
                                        }
                                    } else if (InvoiceType == 1 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        if (!clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("5") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("4")) {
                                            rsInvoice.next();
                                            continue;
                                        }
                                    }

                                    if (!data.IsRecordExist("SELECT * FROM D_FIN_DEBITNOTE_RECEIPT_MAPPING WHERE DEBITNOTE_VOUCHER_NO='" + VoucherNo + "'", FinanceGlobal.FinURL)
                                            && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_DEBIT_NOTE) {
                                        rsInvoice.next();
                                        continue;
                                    }

                                    if (clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                                + "AND MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                                + "AND INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + InvoiceDate + "' "
                                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                                + "AND B.MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                                + "AND B.INVOICE_DATE='" + InvoiceDate + "' AND B.INVOICE_NO='" + InvoiceNo + "' ";

                                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                                    } else {
                                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                                + "AND MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                                + "AND B.MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                                + "AND B.GRN_NO='" + VoucherNo + "' ";
                                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                                    }
                                    if (DebitAmount == AdjustedAmount) {
                                        rsInvoice.next();
                                        continue;
                                    }
                                    RecordCounter++;
                                    rsReport.moveToInsertRow();
                                    rsReport.updateLong("SR_NO", RecordCounter);
                                    rsReport.updateLong("REPORT_ID", ReportID);
                                    rsReport.updateLong("USER_ID", EITLERPGLOBAL.gUserID);
                                    rsReport.updateString("COLUMN_1", MainCode);
                                    rsReport.updateString("COLUMN_2", PartyCode);
                                    rsReport.updateString("COLUMN_3", PartyName);
                                    rsReport.updateString("COLUMN_4", UtilFunctions.getString(rsInvoice, "VOUCHER_NO", ""));
                                    rsReport.updateString("COLUMN_5", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", "")));
                                    String VoucherDate = UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", "");
                                    int VoucherType = clsVoucher.getVoucherType(VoucherNo);
                                    String LinkNo = "";
                                    String vType = "";
                                    String DueDate = "";
                                    if (VoucherType == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        LinkNo = clsSalesInvoice.getAgentAlphaSrNo(InvoiceNo, InvoiceDate);
                                        DueDate = data.getStringValueFromDB("SELECT DUE_DATE FROM DINESHMILLS.D_SAL_INVOICE_HEADER WHERE INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + InvoiceDate + "' AND APPROVED=1 AND CANCELLED=0 ");
                                        vType = "Inv";
                                    } else {
                                        LinkNo = EITLERPGLOBAL.padLeftEx(VoucherNo.substring(VoucherNo.length() - 5), "0", 6) + "/" + EITLERPGLOBAL.getFinYearStartDate(VoucherDate).substring(2, 4) + EITLERPGLOBAL.getFinYearEndDate(VoucherDate).substring(2, 4);
                                        DueDate = VoucherDate;
                                        vType = "Dbn";
                                    }
                                    rsReport.updateString("COLUMN_6", LinkNo);
                                    rsReport.updateString("COLUMN_7", UtilFunctions.getString(rsInvoice, "LEGACY_NO", ""));
                                    rsReport.updateString("COLUMN_8", InvoiceNo);
                                    rsReport.updateString("COLUMN_9", EITLERPGLOBAL.formatDate(InvoiceDate));
                                    rsReport.updateString("COLUMN_10", Double.toString(DebitAmount));
                                    rsReport.updateString("COLUMN_11", EITLERPGLOBAL.formatDate(DueDate));

                                    int DayDiff = EITLERPGLOBAL.getDayDifference(UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", ""), EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()), "yyyy-MM-dd");
                                    double Amount = 0;
                                    if (DayDiff <= 50) {
                                        rsReport.updateString("COLUMN_12", "50");
                                    } else if (DayDiff >= 51 && DayDiff <= 90) {
                                        rsReport.updateString("COLUMN_12", "51-90");
                                    } else {
                                        rsReport.updateString("COLUMN_12", "90");
                                    }
                                    rsReport.updateString("COLUMN_13", vType);
                                    rsReport.updateString("COLUMN_14", Integer.toString(DayDiff));
                                    rsReport.updateString("COLUMN_15", Double.toString(EITLERPGLOBAL.round(DebitAmount - AdjustedAmount, 2)));
                                    rsReport.insertRow();
                                    rsInvoice.next();
                                }
                            }
                            rsParty.next();
                        }
                    }
                    if (data.getIntValueFromDB("SELECT COUNT(*) FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=2", FinanceGlobal.FinURL) > 0) {
                        String SaleType = "";

                        if (txtMainCode.getText().trim().equals("210010")) {
                            SaleType = "FELT SALES - 210010";
                        } else if (txtMainCode.getText().trim().equals("210027")) {
                            SaleType = "SUITING SALES - 210027";
                        } else if (txtMainCode.getText().trim().equals("210072")) {
                            SaleType = "FILTER FABRICS - 210072";
                        }

                        URL ReportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptDebtorsOutstanding2.jsp?dbURL=" + FinanceGlobal.FinURL + "&AsOnDate=" + txtAsOnDate.getText().trim() + "&SaleType=" + SaleType + "&UserId=" + EITLERPGLOBAL.gUserID);
                        System.out.println(ReportFile);
                        EITLERPGLOBAL.loginContext.showDocument(ReportFile, "_blank");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();
    }//GEN-LAST:event_mnuPreview248OSActionPerformed
    
    private void mnuPreviewPDFReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPreviewPDFReportActionPerformed
        // TODO add your handling code here:
        int InvoiceType = EITLERPGLOBAL.getComboCode(cmbInvoiceType);
        if (InvoiceType == 1) {
            txtMainCode.setText("210027");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 2) {
            txtMainCode.setText("210010");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 3) {
            txtMainCode.setText("210072");
            txtMainCode.setEnabled(false);
        }
        if (!Validate()) {
            return;
        }
        ReportID = 1;
        new Thread() {
            public void run() {

                double CrAmount = 0, DrAmount = 0, ClosingBalance = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "";
                ResultSet rsParty = null, rsInvoice = null, rsOpening = null, rsVoucher = null, rsReport = null;
                int EntryNo = 0, Max = 0, Counter = 0, RecordCounter = 0;
                Connection conn = null;
                Statement stmt = null;
                boolean PartyChange = false;
                int InvoiceType = 0;
                try {
                    data.Execute("DELETE FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=1", FinanceGlobal.FinURL);
                    conn = data.getConn(FinanceGlobal.FinURL);
                    stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    //rsReport = stmt.executeQuery("SELECT * FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID="+EITLERPGLOBAL.gUserID+" AND REPORT_ID=1 LIMIT 1");
                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                    } else if (txtMainCode.getText().trim().equals("210072")) {
                        InvoiceType = 3;
                    }
                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = EITLERPGLOBAL.FinFromDateDB;
                    SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
                    FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
                    // ------------------------------

                    // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                    MainCode = txtMainCode.getText();
                    PartyCode = txtSubCode.getText().trim();
                    // ------------------------------

                    if (!chkWithoutProcess.isSelected()) {
                        // CALL MATCH AND UNMATCH ENTRIES BEFORE GENERATING REPORT
                        FindMatchInvoice(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebits(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebitsFromClosing(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        // ------------------------------
                    }

                    // COUNT PARTIES FOR OUTSTANDING , SET MAIN_ACCOUNT_CODE AND PARTY_CODE (IF EXISTS IN txtPartyCode)
                    String Condition = "";
                    if (!txtSubCode.getText().equals("")) {
                        Condition = " AND SUB_ACCOUNT_CODE='" + txtSubCode.getText() + "' ";
                    }

                    SQL = "(SELECT DISTINCT SUB_ACCOUNT_CODE FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                            + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND ENTRY_NO=" + EntryNo + Condition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                            + " UNION "
                            + "(SELECT DISTINCT B.SUB_ACCOUNT_CODE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL) "
                            + "AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' AND A.APPROVED=1 AND A.CANCELLED=0) "
                            + "ORDER BY SUB_ACCOUNT_CODE ";

                    rsParty = data.getResult(SQL, FinanceGlobal.FinURL);
                    rsParty.last();
                    Max = rsParty.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter = 0;
                    rsParty.first();
                    // --------------------------------------------------------------------------------------------------

                    // Prepare resultset for entering o/s data into report transaction table
                    rsReport = stmt.executeQuery("SELECT * FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=1 LIMIT 1");
                    RecordCounter = 0;
                    // --------------------------------------------------------------------------------------------------

                    if (rsParty.getRow() > 0) {
                        while (!rsParty.isAfterLast()) {

                            Counter++;

                            Bar.setValue(Counter);
                            Bar.repaint();
                            // GET PARTY NAME AND DISPLAY IT
                            PartyCode = rsParty.getString("SUB_ACCOUNT_CODE");
                            lblStatus.setText("Party : " + PartyCode);
                            PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                            // -----------------------------

                            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
                            SQL = "(SELECT BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND ENTRY_NO=" + EntryNo + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                                    + "UNION ALL "
                                    + "(SELECT A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL )) "
                                    + "ORDER BY VOUCHER_DATE ";

                            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
                            rsInvoice.first();
                            InvoiceNo = "";
                            InvoiceDate = "";
                            PartyChange = false;
                            // ---------------------------------------------------------------------
                            CrAmount = 0;
                            DrAmount = 0;
                            if (rsInvoice.getRow() > 0) {
                                while (!rsInvoice.isAfterLast()) {

                                    if (!PartyChange) {
                                        ClosingBalance = Math.abs(clsAccount.getClosingBalance(MainCode, PartyCode, ToDate, true));
                                        PartyChange = true;
                                    }

                                    RecordCounter++;
                                    rsReport.moveToInsertRow();
                                    rsReport.updateLong("SR_NO", RecordCounter);
                                    rsReport.updateLong("REPORT_ID", ReportID);
                                    rsReport.updateLong("USER_ID", EITLERPGLOBAL.gUserID);
                                    rsReport.updateString("COLUMN_1", MainCode);
                                    rsReport.updateString("COLUMN_2", PartyCode);
                                    rsReport.updateString("COLUMN_3", PartyName);
                                    rsReport.updateString("COLUMN_4", UtilFunctions.getString(rsInvoice, "BOOK_CODE", ""));
                                    rsReport.updateString("COLUMN_5", UtilFunctions.getString(rsInvoice, "VOUCHER_NO", ""));
                                    rsReport.updateString("COLUMN_6", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", "")));
                                    rsReport.updateString("COLUMN_7", UtilFunctions.getString(rsInvoice, "LEGACY_NO", ""));
                                    rsReport.updateString("COLUMN_8", UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""));
                                    rsReport.updateString("COLUMN_9", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "")));
                                    rsReport.updateString("COLUMN_10", UtilFunctions.getString(rsInvoice, "LINK_NO", ""));
                                    rsReport.updateString("COLUMN_11", UtilFunctions.getString(rsInvoice, "EFFECT", ""));
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                        CrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                    }
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                        DrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                    }
                                    rsReport.updateString("COLUMN_12", Double.toString(UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0)));
                                    rsReport.updateString("COLUMN_13", "0");
                                    rsReport.updateString("COLUMN_14", Double.toString(ClosingBalance));
                                    int DayDiff = EITLERPGLOBAL.getDayDifference(UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", ""), EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()), "yyyy-MM-dd");
                                    double Amount = 0;
                                    if (DayDiff <= 30) {
                                        rsReport.updateString("COLUMN_15", "30");
                                    } else if (DayDiff >= 31 && DayDiff <= 60) {
                                        rsReport.updateString("COLUMN_15", "31-60");
                                    } else if (DayDiff >= 61 && DayDiff <= 180) {
                                        rsReport.updateString("COLUMN_15", "61-180");
                                    } else {
                                        rsReport.updateString("COLUMN_15", "180");
                                    }

                                    if (clsVoucher.getVoucherType(UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "")) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        rsReport.updateString("COLUMN_16", clsSalesInvoice.getInvoiceChargeCode(UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""), UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "")));
                                    } else {
                                        rsReport.updateString("COLUMN_16", "");
                                    }

                                    rsReport.insertRow();
                                    rsInvoice.next();
                                }
                                if (EITLERPGLOBAL.round(ClosingBalance, 2) != EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2)) {
                                    String Msg = "Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2);
                                    JOptionPane.showMessageDialog(null, Msg);
                                    System.out.println("Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2));
                                }
                            }
                            rsParty.next();
                        }
                    }
                    if (data.getIntValueFromDB("SELECT COUNT(*) FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=1", FinanceGlobal.FinURL) > 0) {
                        String SaleType = "";

                        if (txtMainCode.getText().trim().equals("210010")) {
                            SaleType = "FELT SALES - 210010";
                        } else if (txtMainCode.getText().trim().equals("210027")) {
                            SaleType = "SUITING SALES - 210027";
                        } else if (txtMainCode.getText().trim().equals("210072")) {
                            SaleType = "FILTER FABRICS - 210072";
                        }

                        URL ReportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptDebtorsOutstanding.jsp?dbURL=" + FinanceGlobal.FinURL + "&AsOnDate=" + txtAsOnDate.getText().trim() + "&SaleType=" + SaleType + "&UserId=" + EITLERPGLOBAL.gUserID);
                        System.out.println(ReportFile);
                        EITLERPGLOBAL.loginContext.showDocument(ReportFile, "_blank");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();
    }//GEN-LAST:event_mnuPreviewPDFReportActionPerformed
    
                                       
    
    
    private void mnuPreviewTextReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPreviewTextReportActionPerformed
        // TODO add your handling code here:
        int InvoiceType = EITLERPGLOBAL.getComboCode(cmbInvoiceType);
        if (InvoiceType == 1) {
            txtMainCode.setText("210027");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 2) {
            txtMainCode.setText("210010");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 3) {
            txtMainCode.setText("210072");
            txtMainCode.setEnabled(false);
        }
        if (!Validate()) {
            return;
        }
        ReportID = 1;
        new Thread() {
            public void run() {

                double CrAmount = 0, DrAmount = 0, ClosingBalance = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", PartyType = "";
                ResultSet rsParty = null, rsInvoice = null, rsOpening = null, rsVoucher = null;
                int EntryNo = 0, Max = 0, Counter = 0;
                HashMap tempList = new HashMap();
                HashMap ReportList = new HashMap();
                clsDebtorsOutstandingItems ObjItem = new clsDebtorsOutstandingItems();
                boolean PartyChange = false;
                int InvoiceType = 0;
                try {
                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                    } else if (txtMainCode.getText().trim().equals("210072")) {
                        InvoiceType = 3;
                    }
                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = EITLERPGLOBAL.FinFromDateDB;
                    SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
                    FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
                    // ------------------------------

                    // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                    MainCode = txtMainCode.getText();
                    PartyCode = txtSubCode.getText().trim();
                    // ------------------------------

                    if (!chkWithoutProcess.isSelected()) {
                        // CALL MATCH AND UNMATCH ENTRIES BEFORE GENERATING REPORT
                        FindMatchInvoice(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebits(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebitsFromClosing(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        // ------------------------------
                    }

                    // COUNT PARTIES FOR OUTSTANDING , SET MAIN_ACCOUNT_CODE AND PARTY_CODE (IF EXISTS IN txtPartyCode)
                    String Condition = "";
                    if (chkAgentwise.isSelected()) {
                        Condition = " AND SUB_ACCOUNT_CODE LIKE '" + txtAgentwise.getText().trim() + "%' ";
                    } else {
                        if (!txtSubCode.getText().equals("")) {
                            Condition = " AND SUB_ACCOUNT_CODE='" + txtSubCode.getText().trim() + "' ";
                        }
                    }

                    /*Condition = " AND SUB_ACCOUNT_CODE IN ('239905','270000','559901','619913','670201','510501','510201','412607','319907','311912'," +
                     "'300170','300156','300153','179904','278801','278901','308801','470000','480000','510000','550000','570000','580000','600000'," +
                     "'158801','171165','170000','175790','176830','176084','218801','218844','230943','231705','231703','300157','301756','307757'," +
                     "'308843','308817') ";*/
                    String EffectCondition = "";
                    if (OpgOnlyCredit.isSelected()) {
                        EffectCondition = " AND EFFECT='C' ";
                    } else if (OpgOnlyDebit.isSelected()) {
                        EffectCondition = " AND EFFECT='D' ";
                    }

                    String BookCodeCondition = "";
                    if (!txtBookCode.getText().trim().equals("")) {
                        BookCodeCondition = " AND BOOK_CODE IN (" + txtBookCode.getText().trim() + ") ";
                    }
                    SQL = "(SELECT DISTINCT SUB_ACCOUNT_CODE FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                            + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND ENTRY_NO=" + EntryNo + Condition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                            + " UNION "
                            + "(SELECT DISTINCT B.SUB_ACCOUNT_CODE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL) "
                            + "AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' AND A.APPROVED=1 AND A.CANCELLED=0) "
                            + "ORDER BY SUB_ACCOUNT_CODE ";
                    System.out.println(SQL);
                    rsParty = data.getResult(SQL, FinanceGlobal.FinURL);
                    rsParty.last();
                    Max = rsParty.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter = 0;
                    rsParty.first();
                    // --------------------------------------------------------------------------------------------------

                    if (rsParty.getRow() > 0) {
                        while (!rsParty.isAfterLast()) {

                            Counter++;

                            Bar.setValue(Counter);
                            Bar.repaint();
                            // GET PARTY NAME AND DISPLAY IT
                            PartyCode = rsParty.getString("SUB_ACCOUNT_CODE");
                            lblStatus.setText("Party : " + PartyCode);
                            PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                            //data.getStringValueFromDB("SELECT PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='"+MainCode+"' AND PARTY_CODE='"+PartyCode+"' ",FinanceGlobal.FinURL);
                            // -----------------------------

                            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
                            SQL = "(SELECT BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT "
                                    + "FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND ENTRY_NO=" + EntryNo + EffectCondition + BookCodeCondition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                                    + "UNION ALL "
                                    + "(SELECT A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT "
                                    + "FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND A.APPROVED=1 AND A.CANCELLED=0 " + EffectCondition + BookCodeCondition
                                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' "
                                    + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL )) "
                                    + //"ORDER BY INVOICE_NO,VOUCHER_DATE,LINK_NO ";
                                    "ORDER BY INVOICE_NO,YEAR(VOUCHER_DATE),MONTH(VOUCHER_DATE),DAY(VOUCHER_DATE),LINK_NO,EFFECT DESC ";
                            System.out.println(SQL);
                            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
                            rsInvoice.first();
                            InvoiceNo = "";
                            InvoiceDate = "";
                            PartyType = "";
                            PartyChange = false;
                            // ---------------------------------------------------------------------
                            CrAmount = 0;
                            DrAmount = 0;
                            if (rsInvoice.getRow() > 0) {
                                while (!rsInvoice.isAfterLast()) {

                                    if (!PartyChange) {
                                        ClosingBalance = Math.abs(clsAccount.getClosingBalance(MainCode, PartyCode, ToDate, true));
                                        PartyType = data.getStringValueFromDB("SELECT DOCUMENT_THROUGH FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + PartyCode + "' AND MAIN_ACCOUNT_CODE='" + MainCode + "' ");
                                        PartyChange = true;
                                    }

                                    ObjItem = new clsDebtorsOutstandingItems();
                                    ObjItem.setAttribute("MAIN_ACCOUNT_CODE", MainCode);
                                    ObjItem.setAttribute("SUB_ACCOUNT_CODE", PartyCode);
                                    ObjItem.setAttribute("PARTY_NAME", PartyName);
                                    ObjItem.setAttribute("PARTY_TYPE", PartyType);
                                    ObjItem.setAttribute("BOOK_CODE", UtilFunctions.getString(rsInvoice, "BOOK_CODE", ""));
                                    ObjItem.setAttribute("VOUCHER_NO", UtilFunctions.getString(rsInvoice, "VOUCHER_NO", ""));
                                    ObjItem.setAttribute("VOUCHER_DATE", UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", ""));
                                    ObjItem.setAttribute("LEGACY_NO", UtilFunctions.getString(rsInvoice, "LEGACY_NO", ""));
                                    ObjItem.setAttribute("INVOICE_NO", UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""));
                                    ObjItem.setAttribute("INVOICE_DATE", UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                    String ChargeCode = "";
                                    String OBC_NO = "";
                                    String BaleNo = "";
                                    String LrNo = "";
                                    if (clsVoucher.getVoucherType(UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "")) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        ChargeCode = clsSalesInvoice.getInvoiceChargeCode(UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""), UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                        if (InvoiceType == 2 && (ChargeCode.startsWith("1") || ChargeCode.startsWith("4"))) {
                                            SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                                    + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                                    + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                    + "AND B.INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' "
                                                    + "AND B.INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ";
                                            OBC_NO = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                        } else if (ChargeCode.startsWith("1") && InvoiceType == 1) {
                                            SQL = "SELECT A.BANK_REFERENCE_NO FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B "
                                                    + "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.DOC_NO=B.DOC_NO AND A.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                                    + "AND A.PARTY_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                                    + "AND B.INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' "
                                                    + "AND B.INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ";
                                            OBC_NO = data.getStringValueFromDB(SQL, FinanceGlobal.FinURL);
                                        }

                                        BaleNo = data.getStringValueFromDB("SELECT BALE_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' AND INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ");
                                        // LrNo = data.getStringValueFromDB("SELECT LR_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='"+UtilFunctions.getString(rsInvoice,"INVOICE_NO","")+"' AND INVOICE_DATE='"+UtilFunctions.getString(rsInvoice,"INVOICE_DATE","")+"' ",FinanceGlobal.FinURL);
                                        LrNo = data.getStringValueFromDB("SELECT LR_NO FROM D_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND INVOICE_NO='" + UtilFunctions.getString(rsInvoice, "INVOICE_NO", "") + "' AND INVOICE_DATE='" + UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "") + "' ");
                                    } else {
                                        if (!UtilFunctions.getString(rsInvoice, "BOOK_CODE", "").equals("14")) {
                                            ChargeCode = data.getStringValueFromDB("SELECT REASON_CODE FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='" + UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "") + "' ", FinanceGlobal.FinURL);
                                        }
                                    }

                                    ObjItem.setAttribute("CHARGE_CODE", ChargeCode);
                                    String LinkNo = "";
                                    if (UtilFunctions.getString(rsInvoice, "LINK_NO", "").length() > 14) {
                                        LinkNo = UtilFunctions.getString(rsInvoice, "LINK_NO", "").substring(0, 14);
                                    } else {
                                        if (UtilFunctions.getString(rsInvoice, "LINK_NO", "").equals("") && clsVoucher.getVoucherType(UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "")) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                            LinkNo = clsSalesInvoice.getAgentAlphaSrNo(UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""), UtilFunctions.getString(rsInvoice, "INVOICE_DATE", ""));
                                        } else {
                                            LinkNo = UtilFunctions.getString(rsInvoice, "LINK_NO", "");
                                        }
                                    }
                                    ObjItem.setAttribute("LINK_NO", LinkNo);

                                    ObjItem.setAttribute("OBC_NO", OBC_NO);
                                    ObjItem.setAttribute("BALE_NO", BaleNo);
                                    ObjItem.setAttribute("LR_NO", LrNo);

                                    ObjItem.setAttribute("EFFECT", UtilFunctions.getString(rsInvoice, "EFFECT", ""));
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                        CrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                        ObjItem.setAttribute("CREDIT_AMOUNT", UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0));
                                        ObjItem.setAttribute("DEBIT_AMOUNT", 0);
                                    }
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                        DrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                        ObjItem.setAttribute("CREDIT_AMOUNT", 0);
                                        ObjItem.setAttribute("DEBIT_AMOUNT", UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0));
                                    }
                                    ObjItem.setAttribute("CLOSING_BALANCE", ClosingBalance);
                                    tempList.put(Integer.toString(tempList.size() + 1), ObjItem);
                                    rsInvoice.next();
                                }
                                if (EITLERPGLOBAL.round(ClosingBalance, 2) != EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2)) {
                                    if (OpgNone.isSelected() && txtBookCode.getText().trim().equals("")) {
                                        String Msg = "Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2);
                                        JOptionPane.showMessageDialog(null, Msg);
                                        System.out.println("Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2));
                                    }
                                }

                                ReportList = appendList(tempList, ReportList);
                                tempList.clear();
                            }
                            rsParty.next();
                            //EITLERPGLOBAL.PAGE_BREAK=true;
                        }
                    }
                    if (ReportList.size() > 0) {
                        if (txtSubCode.getText().trim().equals("") && (!chkAgentwise.isSelected()) && cmbInvoiceTypeModel.getCode(cmbInvoiceType.getSelectedIndex()) == 1) {
                            generateReportSuitting(ReportList, txtAsOnDate.getText().trim());
                        } else {
                            generateReport(ReportList, txtAsOnDate.getText().trim());
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();
    }//GEN-LAST:event_mnuPreviewTextReportActionPerformed
    
    private void OpgAllItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgAllItemStateChanged
        // TODO add your handling code here:
        if (OpgAll.isSelected()) {
            chkWithoutProcess.setEnabled(false);
            chkWithoutProcess.setSelected(true);
            mnuPreview248OS1.setEnabled(false);
            mnuPreview248OSText1.setEnabled(false);
            mnuPreviewPDFReport1.setEnabled(true);
            mnuPreviewTextReport1.setEnabled(true);
            mnuPreviewMatchReport1.setEnabled(true);
            mnuPreviewBankReport1.setEnabled(true);
            mnuTransferBalance1.setEnabled(true);
            mnuPreviewBankThroughStmt1.setEnabled(false);
            OpgOnlyCredit.setEnabled(true);
            OpgOnlyDebit.setEnabled(true);
            OpgNone.setEnabled(true);
            OpgNone.setSelected(true);
            txtBookCode.setText("");
            txtBookCode.setEnabled(true);
        } else {
            chkWithoutProcess.setEnabled(false);
            chkWithoutProcess.setSelected(true);
            mnuPreviewPDFReport1.setEnabled(false);
            mnuPreviewTextReport1.setEnabled(false);
            mnuPreviewMatchReport1.setEnabled(false);
            mnuPreviewBankReport1.setEnabled(false);
            mnuTransferBalance1.setEnabled(false);
            OpgOnlyCredit.setEnabled(false);
            OpgOnlyDebit.setEnabled(false);
            OpgNone.setEnabled(false);
            OpgNone.setSelected(true);
            txtBookCode.setText("");
            txtBookCode.setEnabled(false);
            mnuPreview248OS1.setEnabled(true);
            mnuPreviewBankThroughStmt1.setEnabled(true);
        }
    }//GEN-LAST:event_OpgAllItemStateChanged

    private void cmbInvoiceTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbInvoiceTypeItemStateChanged
        // TODO add your handling code here:
        int InvoiceType = EITLERPGLOBAL.getComboCode(cmbInvoiceType);
        if (InvoiceType == 0) {
            Opg248Only.setEnabled(false);
            Opg28Only.setEnabled(false);
            Opg4Only.setEnabled(false);
            Opg1Only.setEnabled(false);
            OpgAll.setEnabled(false);
            OpgAll.setSelected(true);
            txtMainCode.setText("");
            txtMainCode.setEnabled(false);
            txtSubCode.setText("");
            txtSubCode.setEnabled(false);
            cmdSelectReportType.setEnabled(false);
            chkWithoutProcess.setEnabled(false);
            chkWithoutProcess.setSelected(false);
            OpgOnlyCredit.setEnabled(false);
            OpgOnlyDebit.setEnabled(false);
            OpgNone.setEnabled(false);
            OpgNone.setSelected(true);
            chkAgentwise.setSelected(false);
            chkAgentwise.setEnabled(false);
            txtAgentwise.setText("");
            txtBookCode.setText("");
            txtBookCode.setEnabled(false);
        } else if (InvoiceType == 1) {
            Opg248Only.setEnabled(true);
            Opg28Only.setEnabled(false);
            Opg4Only.setEnabled(false);
            Opg1Only.setEnabled(true);
            OpgAll.setEnabled(true);
            OpgAll.setSelected(true);
            txtMainCode.setText("210027");
            txtMainCode.setEnabled(false);
            txtSubCode.setText("");
            txtSubCode.setEnabled(true);
            cmdSelectReportType.setEnabled(true);
            chkWithoutProcess.setEnabled(false);
            chkWithoutProcess.setSelected(true);
            OpgOnlyCredit.setEnabled(true);
            OpgOnlyDebit.setEnabled(true);
            OpgNone.setEnabled(true);
            OpgNone.setSelected(true);
            chkAgentwise.setSelected(false);
            chkAgentwise.setEnabled(true);
            txtAgentwise.setText("");
            txtBookCode.setText("");
            txtBookCode.setEnabled(true);
            mnuPreviewTextReportSTG1.setEnabled(true);
            mnuPreviewTextReport1.setEnabled(false);
            mnuSecurityDepositRecievable1.setEnabled(false);
            mnuSecurityDepositPayable1.setEnabled(false);
        } else if (InvoiceType == 2) {
            Opg248Only.setEnabled(false);
            Opg28Only.setEnabled(true);
            Opg4Only.setEnabled(true);
            Opg1Only.setEnabled(false);
            OpgAll.setEnabled(true);
            OpgAll.setSelected(true);
            txtMainCode.setText("210010");
            txtMainCode.setEnabled(false);
            txtSubCode.setText("");
            txtSubCode.setEnabled(true);
            cmdSelectReportType.setEnabled(true);
            chkWithoutProcess.setEnabled(false);
            chkWithoutProcess.setSelected(true);
            OpgOnlyCredit.setEnabled(true);
            OpgOnlyDebit.setEnabled(true);
            OpgNone.setEnabled(true);
            OpgNone.setSelected(true);
            chkAgentwise.setSelected(false);
            chkAgentwise.setEnabled(false);
            txtAgentwise.setText("");
            txtBookCode.setText("");
            txtBookCode.setEnabled(true);
            mnuPreviewTextReportSTG1.setEnabled(false);
            mnuPreviewTextReport1.setEnabled(true);
            mnuSecurityDepositPayable1.setEnabled(true);
            mnuSecurityDepositRecievable1.setEnabled(true);
        } else if (InvoiceType == 3) {
            Opg248Only.setEnabled(false);
            Opg28Only.setEnabled(false);
            Opg4Only.setEnabled(false);
            Opg1Only.setEnabled(false);
            OpgAll.setEnabled(true);
            OpgAll.setSelected(true);
            txtMainCode.setText("210072");
            txtMainCode.setEnabled(false);
            txtSubCode.setText("");
            txtSubCode.setEnabled(true);
            cmdSelectReportType.setEnabled(true);
            chkWithoutProcess.setEnabled(false);
            chkWithoutProcess.setSelected(true);
            OpgOnlyCredit.setEnabled(false);
            OpgOnlyDebit.setEnabled(false);
            OpgNone.setEnabled(false);
            OpgNone.setSelected(true);
            chkAgentwise.setSelected(false);
            chkAgentwise.setEnabled(false);
            txtAgentwise.setText("");
            txtBookCode.setText("");
            txtBookCode.setEnabled(true);
            mnuPreviewTextReportSTG1.setEnabled(false);
            mnuPreviewTextReport1.setEnabled(true);
            mnuSecurityDepositPayable1.setEnabled(false);
            mnuSecurityDepositRecievable1.setEnabled(false);

        }
    }//GEN-LAST:event_cmbInvoiceTypeItemStateChanged

    private void txtSubCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSubCodeKeyPressed
        // TODO add your handling code here:
        String MainCode = txtMainCode.getText().trim();
        try {
            if (evt.getKeyCode() == 112) {
                LOV aList = new LOV();

                aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND MAIN_ACCOUNT_CODE='" + MainCode + "' ORDER BY PARTY_NAME";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;
                aList.UseSpecifiedConn = true;
                aList.dbURL = FinanceGlobal.FinURL;

                if (aList.ShowLOV()) {
                    txtSubCode.setText(aList.ReturnVal);
                }
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtSubCodeKeyPressed

    private void txtSubCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSubCodeFocusLost
        // TODO add your handling code here:
        if (!txtMainCode.getText().trim().equals("")) {
            lblSubCodeName.setText(clsAccount.getAccountName(txtMainCode.getText().trim(), txtSubCode.getText().trim()));
        } else {
            lblSubCodeName.setText("...");
        }
    }//GEN-LAST:event_txtSubCodeFocusLost

    private void cmdSelectReportTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSelectReportTypeActionPerformed
        // TODO add your handling code here:
        mnuReportType.show(this, cmdSelectReportType.getX(), cmdSelectReportType.getY() + cmdSelectReportType.getHeight());
    }//GEN-LAST:event_cmdSelectReportTypeActionPerformed

    private void cmdShowAgeWiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowAgeWiseActionPerformed
      //  mnuReportType.show(this, cmdSelectReportType.getX(), cmdSelectReportType.getY() + cmdSelectReportType.getHeight());
        GenerateDebotOutStanding();
    }//GEN-LAST:event_cmdShowAgeWiseActionPerformed

    private void cmdAgeWiseExportToExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAgeWiseExportToExcelActionPerformed
        try {

            expSum.fillData(TableDebotOutStanding, new File("/root/Desktop/DebtorOutStandingSummary.xls"));
            expSum.fillData(TableDebotOutStanding, new File("D://DebtorOutStandingSummary.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'/root/Desktop/DebtorOutStandingSummary.xls' successfully in Linux PC or 'D://DebtorOutStandingSummary.xls' successfully in Windows PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdAgeWiseExportToExcelActionPerformed

    private void jTabbedPane1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseEntered

    }//GEN-LAST:event_jTabbedPane1MouseEntered

    private void cmdShowPartyWiseSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowPartyWiseSummaryActionPerformed
              // TODO add your handling code here:
    //   mnuPreviewPDFReport1ActionPerformed(evt);
     //   GenerateDetail();
        GenerateDebotOutStandingDetail();  
    }//GEN-LAST:event_cmdShowPartyWiseSummaryActionPerformed

    private void cmdPartyWiseSummaryExportToExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPartyWiseSummaryExportToExcelActionPerformed
        try {

            expDet.fillData(TableDebotOutStandingDetail, new File("/root/Desktop/DebotOutStandingDetail.xls"));
            expDet.fillData(TableDebotOutStandingDetail, new File("D://DebotOutStandingDetail.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'/root/Desktop/DebotOutStandingDetail.xls' successfully in Linux PC or 'D://DebotOutStandingDetail.xls' successfully in Windows PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPartyWiseSummaryExportToExcelActionPerformed

    private void mnuCAREActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCAREActionPerformed
int InvoiceType = EITLERPGLOBAL.getComboCode(cmbInvoiceType);
        if (InvoiceType == 1) {
            txtMainCode.setText("210027");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 2) {
            txtMainCode.setText("210010");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 3) {
            txtMainCode.setText("210072");
            txtMainCode.setEnabled(false);
        }
        if (!Validate()) {
            return;
        }
        ReportID = 1;
        new Thread() {
            public void run() {

                double Below30Day = 0, Above180Day = 0, TotalBalance = 0, ClosingBalance = 0;            
                double Above150Day = 0, Above120Day = 0, Above90Day = 0, Above60Day = 0, Above30Day = 0;
                //double Days60to90 = 0, Days90to120 = 0, Days120to150 = 0, Days150tp180 = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", PartyType = "";
                ResultSet rsParty = null, rsInvoice = null, rsOpening = null, rsVoucher = null;
                int EntryNo = 0, Max = 0, Counter = 0;
                HashMap tempList = new HashMap();
                HashMap ReportList = new HashMap();
                clsDebtorsOutstandingItems ObjItem = new clsDebtorsOutstandingItems();
                boolean PartyChange = false;
                int InvoiceType = 0;
                TReportWriter.SimpleDataProvider.TTable objData = new TReportWriter.SimpleDataProvider.TTable();
                try {
                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                    } else if (txtMainCode.getText().trim().equals("210072")) {
                        InvoiceType = 3;
                    } else if (txtMainCode.getText().trim().equals("132803")) {
                        InvoiceType = 4;
                    } else if (txtMainCode.getText().trim().equals("132802")) {
                        InvoiceType = 5;
                    }
                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = EITLERPGLOBAL.FinFromDateDB;
                    SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
                    FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
                    // ------------------------------

                    // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                    MainCode = txtMainCode.getText();
                    PartyCode = txtSubCode.getText().trim();
                    // ------------------------------

                    // COUNT PARTIES FOR OUTSTANDING , SET MAIN_ACCOUNT_CODE AND PARTY_CODE (IF EXISTS IN txtPartyCode)
                    String Condition = "";
                    if (chkAgentwise.isSelected()) {
                        Condition = " AND SUB_ACCOUNT_CODE LIKE '" + txtAgentwise.getText().trim() + "%' ";
                    } else {
                        if (!txtSubCode.getText().equals("")) {
                            Condition = " AND SUB_ACCOUNT_CODE='" + txtSubCode.getText().trim() + "' ";
                        }
                    }

                    SQL = "(SELECT DISTINCT SUB_ACCOUNT_CODE FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                            + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND ENTRY_NO=" + EntryNo + Condition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                            + " UNION "
                            + "(SELECT DISTINCT B.SUB_ACCOUNT_CODE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL) "
                            + "AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' AND A.APPROVED=1 AND A.CANCELLED=0) "
                            + "ORDER BY SUB_ACCOUNT_CODE ";
                    System.out.println(SQL);
                    rsParty = data.getResult(SQL, FinanceGlobal.FinURL);
                    rsParty.last();
                    Max = rsParty.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter = 0;
                    rsParty.first();
                    // --------------------------------------------------------------------------------------------------

                    objData.AddColumn("MAIN_ACCOUNT_CODE");
                    objData.AddColumn("SUB_ACCOUNT_CODE");
                    objData.AddColumn("PARTY_NAME");
                    objData.AddColumn("ABOVE_180_DAYS");
                    objData.AddColumn("ABOVE_150_DAYS");
                    objData.AddColumn("ABOVE_120_DAYS");
                    objData.AddColumn("ABOVE_90_DAYS");
                    objData.AddColumn("ABOVE_60_DAYS");
                    objData.AddColumn("ABOVE_30_DAYS");
                    objData.AddColumn("BELOW_30_DAYS");
                    objData.AddColumn("TOTAL_BALANCE");
                    TReportWriter.SimpleDataProvider.TRow objRow = objData.newRow();
                    if (rsParty.getRow() > 0) {
                        while (!rsParty.isAfterLast()) {

                            Counter++;

                            Bar.setValue(Counter);
                            Bar.repaint();
                            // GET PARTY NAME AND DISPLAY IT
                            PartyCode = rsParty.getString("SUB_ACCOUNT_CODE");
                            ClosingBalance = clsAccount.getClosingBalance(MainCode, PartyCode, ToDate, true);
                            if (ClosingBalance <= 0) {
                                rsParty.next();
                                continue;
                            }
                            ClosingBalance = 0;
                            lblStatus.setText("Party : " + PartyCode);
                            PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                            //data.getStringValueFromDB("SELECT PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='"+MainCode+"' AND PARTY_CODE='"+PartyCode+"' ",FinanceGlobal.FinURL);
                            // -----------------------------

                            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
                            SQL = "(SELECT VOUCHER_NO,VOUCHER_DATE,INVOICE_NO,INVOICE_DATE,AMOUNT,EFFECT "
                                    + "FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND ENTRY_NO=" + EntryNo + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                                    + "UNION ALL "
                                    + "(SELECT A.VOUCHER_NO,A.VOUCHER_DATE,B.INVOICE_NO,B.INVOICE_DATE,B.AMOUNT,B.EFFECT "
                                    + "FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                    + "AND A.APPROVED=1 AND A.CANCELLED=0 "
                                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' "
                                    + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL )) "
                                    + //"ORDER BY INVOICE_NO,VOUCHER_DATE,LINK_NO ";
                                    "ORDER BY INVOICE_NO,YEAR(VOUCHER_DATE),MONTH(VOUCHER_DATE),DAY(VOUCHER_DATE),EFFECT DESC ";
                            System.out.println(SQL);
                            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
                            rsInvoice.first();
                            InvoiceNo = "";
                            InvoiceDate = "";
                            PartyType = "";
                            PartyChange = false;
                            // ---------------------------------------------------------------------

                            Above180Day = 0;
                            Above150Day = 0;
                            Above120Day = 0;
                            Above90Day = 0;
                            Above60Day  = 0;
                            Above30Day = 0;
                            Below30Day = 0;
                            TotalBalance = 0;
                            if (rsInvoice.getRow() > 0) {
                                while (!rsInvoice.isAfterLast()) {
                                    String DueDate = "";
                                    InvoiceNo = UtilFunctions.getString(rsInvoice, "INVOICE_NO", "");
                                    InvoiceDate = UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "");
                                    if (clsVoucher.getVoucherType(UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", "")) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        DueDate = data.getStringValueFromDB("SELECT DUE_DATE FROM DINESHMILLS.D_SAL_INVOICE_HEADER WHERE INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + InvoiceDate + "' AND APPROVED=1 AND CANCELLED=0 ");
                                    } else {
                                        DueDate = UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", "");
                                    }
                                    if (DueDate.equals("") || DueDate == null) {
                                        JOptionPane.showMessageDialog(null, "Due date does not exists in Invoice No: " + InvoiceNo + " and Invoice Date: " + InvoiceDate);
                                        return;
                                    }

                                    String StartDate = clsDepositMaster.deductDays(ToDate, 180);
                                    if (java.sql.Date.valueOf(DueDate).after(java.sql.Date.valueOf(StartDate))) { //&& java.sql.Date.valueOf(DueDate).before(java.sql.Date.valueOf(ToDate))
                                        String StartDate1=clsDepositMaster.deductDays(ToDate, 150);
                                        if (java.sql.Date.valueOf(DueDate).after(java.sql.Date.valueOf(StartDate1))) {
                                         String StartDate2=clsDepositMaster.deductDays(ToDate, 120);   
                                        if (java.sql.Date.valueOf(DueDate).after(java.sql.Date.valueOf(StartDate2))) {
                                            String StartDate3=clsDepositMaster.deductDays(ToDate, 90);   
                                            if (java.sql.Date.valueOf(DueDate).after(java.sql.Date.valueOf(StartDate3))) {
                                            String StartDate4=clsDepositMaster.deductDays(ToDate, 60);   
                                            if (java.sql.Date.valueOf(DueDate).after(java.sql.Date.valueOf(StartDate4))) {
                                                String StartDate5=clsDepositMaster.deductDays(ToDate, 30);   
                                            if (java.sql.Date.valueOf(DueDate).after(java.sql.Date.valueOf(StartDate5))) {
                                                if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                            Below30Day -= UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);                                            
                                            TotalBalance -= UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            System.out.println("Below30Day Cr "+Below30Day);
                                        }
                                        if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                            Below30Day += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            TotalBalance += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            System.out.println("Below30Day Dr "+Below30Day);
                                        }
                                            }else{
                                         if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                            Above30Day -= UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);                                            
                                            TotalBalance -= UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            System.out.println("Above30Day Cr "+Above30Day);
                                        }
                                        if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                            Above30Day += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            TotalBalance += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            System.out.println("Above30Day Dr "+Above30Day);
                                        }       
                                            }
                                            } else{
                                         if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                            Above60Day -= UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);                                            
                                            TotalBalance -= UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            System.out.println("Above60Day Cr "+Above60Day);
                                        }
                                        if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                            Above60Day += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            TotalBalance += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            System.out.println("Above60Day Dr "+Above60Day);
                                        }       
                                            }   
                                            }else{
                                         if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                            Above90Day -= UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);                                            
                                            TotalBalance -= UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            System.out.println("Above90Day Cr "+Above90Day);
                                        }
                                        if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                            Above90Day += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            TotalBalance += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            System.out.println("Above90Day Dr "+Above90Day);
                                        }       
                                            }
                                        }else{
                                            if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                            Above120Day -= UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);                                            
                                            TotalBalance -= UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            System.out.println("Above120Day Cr "+Above120Day);
                                        }
                                        if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                            Above120Day += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            TotalBalance += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            System.out.println("Above120Day Dr "+Above120Day);
                                        }                                            
                                        }
                                        }else{
                                        if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                            Above150Day -= UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);                                            
                                            TotalBalance -= UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            System.out.println("Above150Day Cr "+Above150Day);
                                        }
                                        if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                            Above150Day += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            TotalBalance += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            System.out.println("Above150Day Dr "+Above150Day);
                                        }
                                        }
                                    } else {
                                        if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                            Above180Day -= UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            TotalBalance -= UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            System.out.println("Above180Day Cr "+Above180Day);
                                        }
                                        if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                            Above180Day += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            TotalBalance += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                            System.out.println("Above180Day Dr "+Above180Day);
                                        }
                                    }
                                    rsInvoice.next();
                                }
//                                if (Below180Day < 0) {
//                                    Above180Day = Above180Day - (Below180Day * -1);
//                                    Below180Day = 0;
//                                }
//                                if (Above180Day < 0) {
//                                    Below180Day = Below180Day - (Above180Day * -1);
//                                    Above180Day = 0;
//                                }
                                if (Below30Day < 0) {
                                    
                                    Above30Day = Above30Day - (Below30Day * -1);
                                    Below30Day = 0;
                                }
                                if(Above30Day < 0){
                                    Above60Day = Above60Day - (Above30Day * -1);
                                    Above30Day = 0;
                                }
                                if(Above60Day < 0){
                                    Above90Day = Above90Day - (Above60Day * -1);
                                    Above60Day = 0;
                                }
                                if(Above90Day < 0){
                                    Above120Day = Above120Day - (Above90Day * -1);
                                    Above90Day = 0;
                                }
                                if(Above120Day < 0){
                                    Above150Day = Above150Day - (Above120Day * -1);
                                    Above120Day = 0;
                                }
                                if(Above150Day < 0){
                                    Above180Day = Above180Day - (Above150Day * -1);
                                    Above150Day = 0;
                                }                                
                                if (Above180Day < 0) {
                                    Above150Day = Above150Day - (Above180Day* -1);                                    
                                    Above180Day = 0;
                                }
                                if(Above150Day <0){
                                    Above120Day = Above120Day - (Above150Day * -1);
                                    Above150Day = 0;
                                }
                                if(Above120Day <0){
                                    Above90Day = Above90Day - (Above120Day * -1);
                                    Above120Day = 0;
                                }
                                if(Above90Day < 0){
                                    Above60Day = Above60Day - (Above90Day * -1);
                                    Above90Day = 0;
                                }
                                if(Above60Day <0){
                                    Above30Day = Above30Day - (Above60Day * -1);
                                    Above60Day =0;
                                }
                                if(Above30Day < 0){
                                    Below30Day =Below30Day - (Above30Day * -1);
                                    Above30Day=0;
                                }
                                
                                //////////////////////////////////////
                                objRow = objData.newRow();
                                objRow.setValue("MAIN_ACCOUNT_CODE", MainCode);
                                objRow.setValue("SUB_ACCOUNT_CODE", PartyCode);
                                objRow.setValue("PARTY_NAME", PartyName);
                                objRow.setValue("ABOVE_180_DAYS", Double.toString(Above180Day));
                                objRow.setValue("ABOVE_150_DAYS", Double.toString(Above150Day));
                                objRow.setValue("ABOVE_120_DAYS", Double.toString(Above120Day));
                                objRow.setValue("ABOVE_90_DAYS", Double.toString(Above90Day));
                                objRow.setValue("ABOVE_60_DAYS", Double.toString(Above60Day));
                                objRow.setValue("ABOVE_30_DAYS", Double.toString(Above30Day));
                                objRow.setValue("BELOW_30_DAYS", Double.toString(Below30Day));
                                objRow.setValue("TOTAL_BALANCE", Double.toString(TotalBalance));
                                objData.AddRow(objRow);
                                //System.out.println("Main Code : " + MainCode + " Party Code : " + PartyCode + " PartyName : " + PartyName + " Above180Day : " + Above180Day + " Below180Day : " + Below180Day + " TotalBalance : " + TotalBalance);
                            }
                            rsParty.next();
                        }
                    }
                    // Generate report
                } catch (Exception e) {
                    e.printStackTrace();
                    Bar.setVisible(false);
                    lblStatus.setVisible(false);
                }
                HashMap Parameters = new HashMap();
                Parameters.put("OUT_DATE", txtAsOnDate.getText().trim());
                Parameters.put("RUN_DATE", EITLERPGLOBAL.getCurrentDate());
                if (txtMainCode.getText().trim().equals("210010")) {
                    Parameters.put("SALES_TYPE", "FELT SALES - 210010");
                } else if (txtMainCode.getText().trim().equals("210027")) {
                    Parameters.put("SALES_TYPE", "SUITING SALES - 210027");
                } else if (txtMainCode.getText().trim().equals("210072")) {
                    Parameters.put("SALES_TYPE", "FILTER FABRICS - 210072");
                } else if (txtMainCode.getText().trim().equals("132803")) {
                    Parameters.put("SALES_TYPE", "SD RECIEVABLE - 132803");
                } else if (txtMainCode.getText().trim().equals("132802")) {
                    Parameters.put("SALES_TYPE", "SD PAYABLES - 132802");
                }
                objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptCARE.rpt", Parameters, objData);
                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();
    }//GEN-LAST:event_mnuCAREActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar Bar;
    private javax.swing.JPanel NamePanel;
    private javax.swing.JRadioButton Opg1Only;
    private javax.swing.JRadioButton Opg248Only;
    private javax.swing.JRadioButton Opg28Only;
    private javax.swing.JRadioButton Opg4Only;
    private javax.swing.JRadioButton OpgAll;
    private javax.swing.JRadioButton OpgNone;
    private javax.swing.JRadioButton OpgOnlyCredit;
    private javax.swing.JRadioButton OpgOnlyDebit;
    private javax.swing.JPanel PanelChargeCode;
    private javax.swing.JPanel PanelEffect;
    private javax.swing.JMenuItem ScheduleVIDebtors1;
    private javax.swing.JTable TableDebotOutStanding;
    private javax.swing.JTable TableDebotOutStandingDetail;
    private javax.swing.JTable TableInvoiceWiseDebotOutStanding;
    private javax.swing.JScrollPane TablePartySummary;
    private javax.swing.JScrollPane TablePartySummary1;
    private javax.swing.ButtonGroup bgEffect;
    private javax.swing.ButtonGroup bgReportType;
    private javax.swing.JCheckBox chkAgentwise;
    private javax.swing.JCheckBox chkWithoutProcess;
    private javax.swing.JComboBox cmbInvoiceType;
    private javax.swing.JButton cmdAgeWiseExportToExcel;
    private javax.swing.JButton cmdInvoiceWise;
    private javax.swing.JButton cmdInvoiceWiseExportToExcel;
    private javax.swing.JButton cmdPartyWiseSummaryExportToExcel;
    private javax.swing.JButton cmdSelectReportType;
    private javax.swing.JButton cmdShowAgeWise;
    private javax.swing.JButton cmdShowPartyWiseSummary;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblAgentwise;
    private javax.swing.JLabel lblAsonDate;
    private javax.swing.JLabel lblBookCode;
    private javax.swing.JLabel lblBookCodeExample;
    private javax.swing.JLabel lblMainCode;
    private javax.swing.JLabel lblMainCode1;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblSubCode;
    private javax.swing.JLabel lblSubCodeName;
    private javax.swing.JMenuItem mnuCARE;
    private javax.swing.JMenuItem mnuPreview248OS1;
    private javax.swing.JMenuItem mnuPreview248OSText1;
    private javax.swing.JMenuItem mnuPreviewBankReport1;
    private javax.swing.JMenuItem mnuPreviewBankThroughStmt1;
    private javax.swing.JMenuItem mnuPreviewMatchReport1;
    private javax.swing.JMenuItem mnuPreviewPDFReport1;
    private javax.swing.JMenuItem mnuPreviewTextReport1;
    private javax.swing.JMenuItem mnuPreviewTextReportSTG1;
    private javax.swing.JPopupMenu mnuReportType;
    private javax.swing.JMenuItem mnuSecurityDepositPayable1;
    private javax.swing.JMenuItem mnuSecurityDepositRecievable1;
    private javax.swing.JMenuItem mnuTransferBalance1;
    private javax.swing.JTextField txtAgentwise;
    private javax.swing.JTextField txtAsOnDate;
    private javax.swing.JTextField txtBookCode;
    private javax.swing.JTextField txtMainCode;
    private javax.swing.JTextField txtSubCode;
    // End of variables declaration//GEN-END:variables

    private HashMap appendList(HashMap FromList, HashMap ToList) {
        clsDebtorsOutstandingItems ObjItem = null;
        try {
            if (FromList.size() > 0) {
                for (int i = 1; i <= FromList.size(); i++) {
                    ObjItem = (clsDebtorsOutstandingItems) FromList.get(Integer.toString(i));
                    ToList.put(Integer.toString(ToList.size() + 1), ObjItem);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return ToList;
        }
        return ToList;
    }

    private void generateReport(HashMap ReportList, String AsOnDate) {
        try {
            TReportWriter.SimpleDataProvider.TTable objData = new TReportWriter.SimpleDataProvider.TTable();
            objData.AddColumn("MAIN_ACCOUNT_CODE");
            objData.AddColumn("SUB_ACCOUNT_CODE");
            objData.AddColumn("DEPOSIT_BALANCE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("ADDRESS");
            objData.AddColumn("PARTY_TYPE");
            objData.AddColumn("BOOK_CODE");
            objData.AddColumn("VOUCHER_NO");
            objData.AddColumn("LEGACY_NO");
            objData.AddColumn("VOUCHER_DATE");
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("LINK_NO");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("CHARGE_CODE");
            objData.AddColumn("OBC_NO");
            objData.AddColumn("BALE_NO");
            objData.AddColumn("LR_NO");
            objData.AddColumn("UPTO_30_DAYS");
            objData.AddColumn("31_60_DAYS");
            objData.AddColumn("61_180_DAYS");
            objData.AddColumn("ABOVE_180_DAYS");
            objData.AddColumn("EFFECT_R");
            objData.AddColumn("DEBIT_AMOUNT");
            objData.AddColumn("CREDIT_AMOUNT");
            objData.AddColumn("TYPE");
            objData.AddColumn("CLOSING_BALANCE");

            TReportWriter.SimpleDataProvider.TRow objRow = objData.newRow();
            clsDebtorsOutstandingItems ObjItem = new clsDebtorsOutstandingItems();
            System.out.println("No of Record = " + ReportList.size());
            for (int i = 1; i <= ReportList.size(); i++) {
                ObjItem = (clsDebtorsOutstandingItems) ReportList.get(Integer.toString(i));
                objRow = objData.newRow();
                objRow.setValue("MAIN_ACCOUNT_CODE", ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString());
                objRow.setValue("SUB_ACCOUNT_CODE", ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString());
                objRow.setValue("DEPOSIT_BALANCE", String.valueOf(data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FD_SALES_DEPOSIT_MASTER "
                        + "WHERE MAIN_ACCOUNT_CODE IN ('132642','132666','132635','132714') "
                        + "AND PARTY_CODE='" + ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString() + "' AND  PARTY_MAIN_CODE = '" + ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString() + "'AND  (REFUND_DATE='0000-00-00' OR REFUND_DATE<='2013-08-12') AND DEPOSIT_STATUS=0", FinanceGlobal.FinURL)));
                objRow.setValue("PARTY_NAME", ObjItem.getAttribute("PARTY_NAME").getString());
                objRow.setValue("PARTY_TYPE", ObjItem.getAttribute("PARTY_TYPE").getString());
                objRow.setValue("ADDRESS", data.getStringValueFromDB("SELECT CITY_ID FROM D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='" + ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString() + "' AND PARTY_CODE='" + ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString() + "' ")); //APPROVED=1 AND CANCELLED=0 AND
                objRow.setValue("BOOK_CODE", ObjItem.getAttribute("BOOK_CODE").getString());
                objRow.setValue("VOUCHER_NO", ObjItem.getAttribute("VOUCHER_NO").getString());
                objRow.setValue("LEGACY_NO", ObjItem.getAttribute("LEGACY_NO").getString());
                objRow.setValue("VOUCHER_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("VOUCHER_DATE").getString()));
                objRow.setValue("INVOICE_NO", ObjItem.getAttribute("INVOICE_NO").getString());
                objRow.setValue("LINK_NO", ObjItem.getAttribute("LINK_NO").getString());
                objRow.setValue("INVOICE_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("INVOICE_DATE").getString()));
                objRow.setValue("CHARGE_CODE", ObjItem.getAttribute("CHARGE_CODE").getString());
                objRow.setValue("OBC_NO", ObjItem.getAttribute("OBC_NO").getString());
                objRow.setValue("BALE_NO", ObjItem.getAttribute("BALE_NO").getString());
                objRow.setValue("LR_NO", ObjItem.getAttribute("LR_NO").getString());
                int DayDiff = EITLERPGLOBAL.getDayDifference(ObjItem.getAttribute("VOUCHER_DATE").getString(), EITLERPGLOBAL.formatDateDB(AsOnDate), "yyyy-MM-dd");
                double Amount = 0;
                if (ObjItem.getAttribute("DEBIT_AMOUNT").getDouble() > 0) {
                    Amount = ObjItem.getAttribute("DEBIT_AMOUNT").getDouble();
                    objRow.setValue("EFFECT_R", " ");
                    objRow.setValue("TYPE", "0");
                } else {
                    Amount = ObjItem.getAttribute("CREDIT_AMOUNT").getDouble();
                    objRow.setValue("EFFECT_R", "Cr");
                    objRow.setValue("TYPE", "1");
                }
                if (DayDiff <= 30) {
                    objRow.setValue("UPTO_30_DAYS", Double.toString(Amount));
                    objRow.setValue("31_60_DAYS", "0");
                    objRow.setValue("61_180_DAYS", "0");
                    objRow.setValue("ABOVE_180_DAYS", "0");
                } else if (DayDiff >= 31 && DayDiff <= 60) {
                    objRow.setValue("UPTO_30_DAYS", "0");
                    objRow.setValue("31_60_DAYS", Double.toString(Amount));
                    objRow.setValue("61_180_DAYS", "0");
                    objRow.setValue("ABOVE_180_DAYS", "0");
                } else if (DayDiff >= 61 && DayDiff <= 180) {
                    objRow.setValue("UPTO_30_DAYS", "0");
                    objRow.setValue("31_60_DAYS", "0");
                    objRow.setValue("61_180_DAYS", Double.toString(Amount));
                    objRow.setValue("ABOVE_180_DAYS", "0");
                } else {
                    objRow.setValue("UPTO_30_DAYS", "0");
                    objRow.setValue("31_60_DAYS", "0");
                    objRow.setValue("61_180_DAYS", "0");
                    objRow.setValue("ABOVE_180_DAYS", Double.toString(Amount));
                }
                objRow.setValue("DEBIT_AMOUNT", Double.toString(ObjItem.getAttribute("DEBIT_AMOUNT").getDouble()));
                objRow.setValue("CREDIT_AMOUNT", Double.toString(ObjItem.getAttribute("CREDIT_AMOUNT").getDouble()));
                objRow.setValue("CLOSING_BALANCE", Double.toString(ObjItem.getAttribute("CLOSING_BALANCE").getDouble()));
                objData.AddRow(objRow);
            }
            ReportList = null;
            System.gc();
            HashMap Parameters = new HashMap();
            Parameters.put("OUT_DATE", AsOnDate);
            Parameters.put("RUN_DATE", EITLERPGLOBAL.getCurrentDate());
            if (txtMainCode.getText().trim().equals("210010")) {
                Parameters.put("SALES_TYPE", "FELT SALES - 210010");
            } else if (txtMainCode.getText().trim().equals("210027")) {
                Parameters.put("SALES_TYPE", "SUITING SALES - 210027");
            } else if (txtMainCode.getText().trim().equals("210072")) {
                Parameters.put("SALES_TYPE", "FILTER FABRICS - 210072");
            } else if (txtMainCode.getText().trim().equals("132802")) {
                Parameters.put("SALES_TYPE", "SECURITY DEPOSIT - 132802");
            } else if (txtMainCode.getText().trim().equals("132803")) {
                Parameters.put("SALES_TYPE", "SECURITY DEPOSIT - 132803");
            }
            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptDebtorOutStanding.rpt", Parameters, objData);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void generateReportSuitting(HashMap ReportList, String AsOnDate) {
        try {
            double CreditAmount0to29 = 0.0;
            double DebitAmount0to29 = 0.0;
            //******************************************* Part -1 Start *******************************************

            TReportWriter.SimpleDataProvider.TTable objData = new TReportWriter.SimpleDataProvider.TTable();
            objData.AddColumn("MAIN_ACCOUNT_CODE");
            objData.AddColumn("SUB_ACCOUNT_CODE");
            objData.AddColumn("DEPOSIT_BALANCE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("ADDRESS");
            objData.AddColumn("PARTY_TYPE");
            objData.AddColumn("BOOK_CODE");
            objData.AddColumn("VOUCHER_NO");
            objData.AddColumn("LEGACY_NO");
            objData.AddColumn("VOUCHER_DATE");
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("LINK_NO");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("CHARGE_CODE");
            objData.AddColumn("OBC_NO");
            objData.AddColumn("BALE_NO");
            objData.AddColumn("LR_NO");
            objData.AddColumn("UPTO_30_DAYS");
            objData.AddColumn("31_60_DAYS");
            objData.AddColumn("61_180_DAYS");
            objData.AddColumn("ABOVE_180_DAYS");
            objData.AddColumn("EFFECT_R");
            objData.AddColumn("DEBIT_AMOUNT");
            objData.AddColumn("CREDIT_AMOUNT");
            objData.AddColumn("TYPE");
            objData.AddColumn("CLOSING_BALANCE");

            TReportWriter.SimpleDataProvider.TRow objRow = objData.newRow();
            clsDebtorsOutstandingItems ObjItem = new clsDebtorsOutstandingItems();
            System.out.println("No of Record = " + ReportList.size());
            int DayDiff = 0;
            double Amount = 0;
            int ReportSize = ReportList.size();
            int i = 0;
            for (i = 1; i <= ReportSize; i++) {

                ObjItem = (clsDebtorsOutstandingItems) ReportList.get(Integer.toString(i));
                if (ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString().length() < 6) {
                    boolean halt = true;
                }
                if (Integer.parseInt(ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString().substring(0, 2)) > 29) {
                    break;
                }

                objRow = objData.newRow();
                objRow.setValue("MAIN_ACCOUNT_CODE", ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString());
                objRow.setValue("SUB_ACCOUNT_CODE", ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString());
                objRow.setValue("DEPOSIT_BALANCE", String.valueOf(data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FD_SALES_DEPOSIT_MASTER "
                        + "WHERE MAIN_ACCOUNT_CODE IN ('132642','132666','132635','132714') "
                        + "AND PARTY_CODE='" + ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString() + "'  AND PARTY_MAIN_CODE = '" + ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString() + "'  AND (REFUND_DATE='0000-00-00' OR REFUND_DATE<='" + EITLERPGLOBAL.formatDateDB(AsOnDate) + "') AND DEPOSIT_STATUS=0", FinanceGlobal.FinURL)));
                objRow.setValue("PARTY_NAME", ObjItem.getAttribute("PARTY_NAME").getString());
                objRow.setValue("PARTY_TYPE", ObjItem.getAttribute("PARTY_TYPE").getString());
                objRow.setValue("ADDRESS", data.getStringValueFromDB("SELECT CITY_ID FROM D_SAL_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND MAIN_ACCOUNT_CODE='" + ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString() + "' AND PARTY_CODE='" + ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString() + "' "));
                objRow.setValue("BOOK_CODE", ObjItem.getAttribute("BOOK_CODE").getString());
                objRow.setValue("VOUCHER_NO", ObjItem.getAttribute("VOUCHER_NO").getString());
                objRow.setValue("LEGACY_NO", ObjItem.getAttribute("LEGACY_NO").getString());
                objRow.setValue("VOUCHER_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("VOUCHER_DATE").getString()));
                objRow.setValue("INVOICE_NO", ObjItem.getAttribute("INVOICE_NO").getString());
                objRow.setValue("LINK_NO", ObjItem.getAttribute("LINK_NO").getString());
                objRow.setValue("INVOICE_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("INVOICE_DATE").getString()));
                objRow.setValue("CHARGE_CODE", ObjItem.getAttribute("CHARGE_CODE").getString());
                objRow.setValue("OBC_NO", ObjItem.getAttribute("OBC_NO").getString());
                objRow.setValue("BALE_NO", ObjItem.getAttribute("BALE_NO").getString());
                objRow.setValue("LR_NO", ObjItem.getAttribute("LR_NO").getString());
                DayDiff = EITLERPGLOBAL.getDayDifference(ObjItem.getAttribute("VOUCHER_DATE").getString(), EITLERPGLOBAL.formatDateDB(AsOnDate), "yyyy-MM-dd");
                Amount = 0;
                if (ObjItem.getAttribute("DEBIT_AMOUNT").getDouble() > 0) {
                    Amount = ObjItem.getAttribute("DEBIT_AMOUNT").getDouble();
                    objRow.setValue("EFFECT_R", " ");
                    objRow.setValue("TYPE", "0");
                } else {
                    Amount = ObjItem.getAttribute("CREDIT_AMOUNT").getDouble();
                    objRow.setValue("EFFECT_R", "Cr");
                    objRow.setValue("TYPE", "1");
                }
                if (DayDiff <= 30) {
                    objRow.setValue("UPTO_30_DAYS", Double.toString(Amount));
                    objRow.setValue("31_60_DAYS", "0");
                    objRow.setValue("61_180_DAYS", "0");
                    objRow.setValue("ABOVE_180_DAYS", "0");
                } else if (DayDiff >= 31 && DayDiff <= 60) {
                    objRow.setValue("UPTO_30_DAYS", "0");
                    objRow.setValue("31_60_DAYS", Double.toString(Amount));
                    objRow.setValue("61_180_DAYS", "0");
                    objRow.setValue("ABOVE_180_DAYS", "0");
                } else if (DayDiff >= 61 && DayDiff <= 180) {
                    objRow.setValue("UPTO_30_DAYS", "0");
                    objRow.setValue("31_60_DAYS", "0");
                    objRow.setValue("61_180_DAYS", Double.toString(Amount));
                    objRow.setValue("ABOVE_180_DAYS", "0");
                } else {
                    objRow.setValue("UPTO_30_DAYS", "0");
                    objRow.setValue("31_60_DAYS", "0");
                    objRow.setValue("61_180_DAYS", "0");
                    objRow.setValue("ABOVE_180_DAYS", Double.toString(Amount));
                }
                DebitAmount0to29 += ObjItem.getAttribute("DEBIT_AMOUNT").getDouble();
                CreditAmount0to29 += ObjItem.getAttribute("CREDIT_AMOUNT").getDouble();
                objRow.setValue("DEBIT_AMOUNT", Double.toString(ObjItem.getAttribute("DEBIT_AMOUNT").getDouble()));
                objRow.setValue("CREDIT_AMOUNT", Double.toString(ObjItem.getAttribute("CREDIT_AMOUNT").getDouble()));
                objRow.setValue("CLOSING_BALANCE", Double.toString(ObjItem.getAttribute("CLOSING_BALANCE").getDouble()));
                objData.AddRow(objRow);

                //System.out.println(objData.getRowCount());
                ReportList.remove(Integer.toString(i));
            }
            System.out.println("i = " + i);
            HashMap Parameters = new HashMap();
            Parameters.put("OUT_DATE", AsOnDate);
            Parameters.put("RUN_DATE", EITLERPGLOBAL.getCurrentDate());
            Parameters.put("SALES_TYPE", "SUITING SALES - 210027");
            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptDebtorOutStanding.rpt", Parameters, objData);
            objData = null;
            objRow = null;
            ObjItem = null;
            //******************************************* Part -1 End *******************************************

            //******************************************* Part -2 Start *******************************************
            double CreditAmount30to31 = 0.0;
            double DebitAmount30to31 = 0.0;
            System.gc();
            objData = new TReportWriter.SimpleDataProvider.TTable();
            objData.AddColumn("MAIN_ACCOUNT_CODE");
            objData.AddColumn("SUB_ACCOUNT_CODE");
            objData.AddColumn("DEPOSIT_BALANCE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("ADDRESS");
            objData.AddColumn("PARTY_TYPE");
            objData.AddColumn("BOOK_CODE");
            objData.AddColumn("VOUCHER_NO");
            objData.AddColumn("LEGACY_NO");
            objData.AddColumn("VOUCHER_DATE");
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("LINK_NO");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("CHARGE_CODE");
            objData.AddColumn("OBC_NO");
            objData.AddColumn("BALE_NO");
            objData.AddColumn("LR_NO");
            objData.AddColumn("UPTO_30_DAYS");
            objData.AddColumn("31_60_DAYS");
            objData.AddColumn("61_180_DAYS");
            objData.AddColumn("ABOVE_180_DAYS");
            objData.AddColumn("EFFECT_R");
            objData.AddColumn("DEBIT_AMOUNT");
            objData.AddColumn("CREDIT_AMOUNT");
            objData.AddColumn("TYPE");
            objData.AddColumn("CLOSING_BALANCE");

            objRow = objData.newRow();
            objRow.setValue("MAIN_ACCOUNT_CODE", "210027");
            objRow.setValue("SUB_ACCOUNT_CODE", "Last");
            objRow.setValue("DEPOSIT_BALANCE", "0");
            objRow.setValue("PARTY_NAME", "");
            objRow.setValue("PARTY_TYPE", "");
            objRow.setValue("ADDRESS", "");
            objRow.setValue("BOOK_CODE", "");
            objRow.setValue("VOUCHER_NO", "");
            objRow.setValue("LEGACY_NO", "");
            objRow.setValue("VOUCHER_DATE", "");
            objRow.setValue("INVOICE_NO", "");
            objRow.setValue("LINK_NO", "");
            objRow.setValue("INVOICE_DATE", "");
            objRow.setValue("CHARGE_CODE", "");
            objRow.setValue("OBC_NO", "");
            objRow.setValue("BALE_NO", "");
            objRow.setValue("LR_NO", "");
            objRow.setValue("EFFECT_R", " ");
            objRow.setValue("TYPE", "0");
            objRow.setValue("UPTO_30_DAYS", "0");
            objRow.setValue("31_60_DAYS", "0");
            objRow.setValue("61_180_DAYS", "0");
            objRow.setValue("ABOVE_180_DAYS", "0");
            objRow.setValue("DEBIT_AMOUNT", Double.toString(DebitAmount0to29));
            objRow.setValue("CREDIT_AMOUNT", Double.toString(CreditAmount0to29));
            objRow.setValue("CLOSING_BALANCE", Double.toString(Math.abs(DebitAmount0to29 - CreditAmount0to29)));
            objData.AddRow(objRow);
            CreditAmount30to31 += CreditAmount0to29;
            DebitAmount30to31 += DebitAmount0to29;
            CreditAmount0to29 = 0;
            DebitAmount0to29 = 0;
            ObjItem = new clsDebtorsOutstandingItems();
            DayDiff = 0;
            Amount = 0;
            int j = 0;
            ReportSize = ReportList.size();
            for (j = i; j <= ReportSize; j++) {
                ObjItem = (clsDebtorsOutstandingItems) ReportList.get(Integer.toString(j));
                if (Integer.parseInt(ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString().substring(0, 2)) < 30) {
                    continue;
                }
                if (Integer.parseInt(ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString().substring(0, 2)) > 31) {
                    break;
                }
                objRow = objData.newRow();
                objRow.setValue("MAIN_ACCOUNT_CODE", ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString());
                objRow.setValue("SUB_ACCOUNT_CODE", ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString());
                objRow.setValue("DEPOSIT_BALANCE", String.valueOf(data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FD_SALES_DEPOSIT_MASTER "
                        + "WHERE MAIN_ACCOUNT_CODE IN ('132642','132666','132635','132714') "
                        + "AND PARTY_CODE='" + ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString() + "' AND PARTY_MAIN_CODE = '" + ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString() + "'    AND (REFUND_DATE='0000-00-00' OR REFUND_DATE<='" + EITLERPGLOBAL.formatDateDB(AsOnDate) + "') AND DEPOSIT_STATUS=0", FinanceGlobal.FinURL)));
                objRow.setValue("PARTY_NAME", ObjItem.getAttribute("PARTY_NAME").getString());
                objRow.setValue("PARTY_TYPE", ObjItem.getAttribute("PARTY_TYPE").getString());
                objRow.setValue("ADDRESS", data.getStringValueFromDB("SELECT CITY_ID FROM D_SAL_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND MAIN_ACCOUNT_CODE='" + ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString() + "' AND PARTY_CODE='" + ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString() + "' "));
                objRow.setValue("BOOK_CODE", ObjItem.getAttribute("BOOK_CODE").getString());
                objRow.setValue("VOUCHER_NO", ObjItem.getAttribute("VOUCHER_NO").getString());
                objRow.setValue("LEGACY_NO", ObjItem.getAttribute("LEGACY_NO").getString());
                objRow.setValue("VOUCHER_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("VOUCHER_DATE").getString()));
                objRow.setValue("INVOICE_NO", ObjItem.getAttribute("INVOICE_NO").getString());
                objRow.setValue("LINK_NO", ObjItem.getAttribute("LINK_NO").getString());
                objRow.setValue("INVOICE_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("INVOICE_DATE").getString()));
                objRow.setValue("CHARGE_CODE", ObjItem.getAttribute("CHARGE_CODE").getString());
                objRow.setValue("OBC_NO", ObjItem.getAttribute("OBC_NO").getString());
                objRow.setValue("BALE_NO", ObjItem.getAttribute("BALE_NO").getString());
                objRow.setValue("LR_NO", ObjItem.getAttribute("LR_NO").getString());
                DayDiff = EITLERPGLOBAL.getDayDifference(ObjItem.getAttribute("VOUCHER_DATE").getString(), EITLERPGLOBAL.formatDateDB(AsOnDate), "yyyy-MM-dd");
                Amount = 0;
                if (ObjItem.getAttribute("DEBIT_AMOUNT").getDouble() > 0) {
                    Amount = ObjItem.getAttribute("DEBIT_AMOUNT").getDouble();
                    objRow.setValue("EFFECT_R", " ");
                    objRow.setValue("TYPE", "0");
                } else {
                    Amount = ObjItem.getAttribute("CREDIT_AMOUNT").getDouble();
                    objRow.setValue("EFFECT_R", "Cr");
                    objRow.setValue("TYPE", "1");
                }
                if (DayDiff <= 30) {
                    objRow.setValue("UPTO_30_DAYS", Double.toString(Amount));
                    objRow.setValue("31_60_DAYS", "0");
                    objRow.setValue("61_180_DAYS", "0");
                    objRow.setValue("ABOVE_180_DAYS", "0");
                } else if (DayDiff >= 31 && DayDiff <= 60) {
                    objRow.setValue("UPTO_30_DAYS", "0");
                    objRow.setValue("31_60_DAYS", Double.toString(Amount));
                    objRow.setValue("61_180_DAYS", "0");
                    objRow.setValue("ABOVE_180_DAYS", "0");
                } else if (DayDiff >= 61 && DayDiff <= 180) {
                    objRow.setValue("UPTO_30_DAYS", "0");
                    objRow.setValue("31_60_DAYS", "0");
                    objRow.setValue("61_180_DAYS", Double.toString(Amount));
                    objRow.setValue("ABOVE_180_DAYS", "0");
                } else {
                    objRow.setValue("UPTO_30_DAYS", "0");
                    objRow.setValue("31_60_DAYS", "0");
                    objRow.setValue("61_180_DAYS", "0");
                    objRow.setValue("ABOVE_180_DAYS", Double.toString(Amount));
                }
                DebitAmount30to31 += ObjItem.getAttribute("DEBIT_AMOUNT").getDouble();
                CreditAmount30to31 += ObjItem.getAttribute("CREDIT_AMOUNT").getDouble();
                objRow.setValue("DEBIT_AMOUNT", Double.toString(ObjItem.getAttribute("DEBIT_AMOUNT").getDouble()));
                objRow.setValue("CREDIT_AMOUNT", Double.toString(ObjItem.getAttribute("CREDIT_AMOUNT").getDouble()));
                objRow.setValue("CLOSING_BALANCE", Double.toString(ObjItem.getAttribute("CLOSING_BALANCE").getDouble()));
                objData.AddRow(objRow);
                //System.out.println(objData.getRowCount());
                ReportList.remove(Integer.toString(j));
            }
            System.out.println("j = " + (j - i));
            System.gc();
            Parameters = new HashMap();
            Parameters.put("OUT_DATE", AsOnDate);
            Parameters.put("RUN_DATE", EITLERPGLOBAL.getCurrentDate());
            Parameters.put("SALES_TYPE", "SUITING SALES - 210027");
            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptDebtorOutStanding.rpt", Parameters, objData);
            objData = null;
            objRow = null;
            ObjItem = null;
            //******************************************* Part -2 End *******************************************

            //******************************************* Part -3 Start *******************************************
            double DebitAmount32to39 = 0;
            double CreditAmount32to39 = 0;
            CreditAmount32to39 += CreditAmount30to31;
            DebitAmount32to39 += DebitAmount30to31;
            objData = new TReportWriter.SimpleDataProvider.TTable();
            System.gc();
            objData.AddColumn("MAIN_ACCOUNT_CODE");
            objData.AddColumn("SUB_ACCOUNT_CODE");
            objData.AddColumn("DEPOSIT_BALANCE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("ADDRESS");
            objData.AddColumn("PARTY_TYPE");
            objData.AddColumn("BOOK_CODE");
            objData.AddColumn("VOUCHER_NO");
            objData.AddColumn("LEGACY_NO");
            objData.AddColumn("VOUCHER_DATE");
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("LINK_NO");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("CHARGE_CODE");
            objData.AddColumn("OBC_NO");
            objData.AddColumn("BALE_NO");
            objData.AddColumn("LR_NO");
            objData.AddColumn("UPTO_30_DAYS");
            objData.AddColumn("31_60_DAYS");
            objData.AddColumn("61_180_DAYS");
            objData.AddColumn("ABOVE_180_DAYS");
            objData.AddColumn("EFFECT_R");
            objData.AddColumn("DEBIT_AMOUNT");
            objData.AddColumn("CREDIT_AMOUNT");
            objData.AddColumn("TYPE");
            objData.AddColumn("CLOSING_BALANCE");

            objRow = objData.newRow();
            objRow.setValue("MAIN_ACCOUNT_CODE", "210027");
            objRow.setValue("SUB_ACCOUNT_CODE", "Last");
            objRow.setValue("DEPOSIT_BALANCE", "0");
            objRow.setValue("PARTY_NAME", "");
            objRow.setValue("PARTY_TYPE", "");
            objRow.setValue("ADDRESS", "");
            objRow.setValue("BOOK_CODE", "");
            objRow.setValue("VOUCHER_NO", "");
            objRow.setValue("LEGACY_NO", "");
            objRow.setValue("VOUCHER_DATE", "");
            objRow.setValue("INVOICE_NO", "");
            objRow.setValue("LINK_NO", "");
            objRow.setValue("INVOICE_DATE", "");
            objRow.setValue("CHARGE_CODE", "");
            objRow.setValue("OBC_NO", "");
            objRow.setValue("BALE_NO", "");
            objRow.setValue("LR_NO", "");
            objRow.setValue("EFFECT_R", " ");
            objRow.setValue("TYPE", "0");
            objRow.setValue("UPTO_30_DAYS", "0");
            objRow.setValue("31_60_DAYS", "0");
            objRow.setValue("61_180_DAYS", "0");
            objRow.setValue("ABOVE_180_DAYS", "0");
            objRow.setValue("DEBIT_AMOUNT", Double.toString(DebitAmount30to31));
            objRow.setValue("CREDIT_AMOUNT", Double.toString(CreditAmount30to31));
            objRow.setValue("CLOSING_BALANCE", Double.toString(Math.abs(DebitAmount30to31 - CreditAmount30to31)));
            objData.AddRow(objRow);
            CreditAmount30to31 = 0;
            DebitAmount30to31 = 0;
            Amount = 0;
            DayDiff = 0;
            int k = 0;
            for (k = j; k <= ReportList.size() + j - 1; k++) {
                ObjItem = (clsDebtorsOutstandingItems) ReportList.get(Integer.toString(k));
                if (Integer.parseInt(ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString().substring(0, 2)) < 31) {
                    continue;
                }

                objRow = objData.newRow();
                objRow.setValue("MAIN_ACCOUNT_CODE", ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString());
                objRow.setValue("SUB_ACCOUNT_CODE", ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString());
                objRow.setValue("DEPOSIT_BALANCE", String.valueOf(data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FD_SALES_DEPOSIT_MASTER "
                        + "WHERE MAIN_ACCOUNT_CODE IN ('132642','132666','132635','132714') "
                        + "AND PARTY_CODE='" + ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString() + "' AND PARTY_MAIN_CODE = '" + ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString() + "' AND (REFUND_DATE='0000-00-00' OR REFUND_DATE<='" + EITLERPGLOBAL.formatDateDB(AsOnDate) + "') AND DEPOSIT_STATUS=0", FinanceGlobal.FinURL)));
                objRow.setValue("PARTY_NAME", ObjItem.getAttribute("PARTY_NAME").getString());
                objRow.setValue("PARTY_TYPE", ObjItem.getAttribute("PARTY_TYPE").getString());
                objRow.setValue("ADDRESS", data.getStringValueFromDB("SELECT CITY_ID FROM D_SAL_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND MAIN_ACCOUNT_CODE='" + ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString() + "' AND PARTY_CODE='" + ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString() + "' "));
                objRow.setValue("BOOK_CODE", ObjItem.getAttribute("BOOK_CODE").getString());
                objRow.setValue("VOUCHER_NO", ObjItem.getAttribute("VOUCHER_NO").getString());
                objRow.setValue("LEGACY_NO", ObjItem.getAttribute("LEGACY_NO").getString());
                objRow.setValue("VOUCHER_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("VOUCHER_DATE").getString()));
                objRow.setValue("INVOICE_NO", ObjItem.getAttribute("INVOICE_NO").getString());
                objRow.setValue("LINK_NO", ObjItem.getAttribute("LINK_NO").getString());
                objRow.setValue("INVOICE_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("INVOICE_DATE").getString()));
                objRow.setValue("CHARGE_CODE", ObjItem.getAttribute("CHARGE_CODE").getString());
                objRow.setValue("OBC_NO", ObjItem.getAttribute("OBC_NO").getString());
                objRow.setValue("BALE_NO", ObjItem.getAttribute("BALE_NO").getString());
                objRow.setValue("LR_NO", ObjItem.getAttribute("LR_NO").getString());
                DayDiff = EITLERPGLOBAL.getDayDifference(ObjItem.getAttribute("VOUCHER_DATE").getString(), EITLERPGLOBAL.formatDateDB(AsOnDate), "yyyy-MM-dd");
                Amount = 0;
                if (ObjItem.getAttribute("DEBIT_AMOUNT").getDouble() > 0) {
                    Amount = ObjItem.getAttribute("DEBIT_AMOUNT").getDouble();
                    objRow.setValue("EFFECT_R", " ");
                    objRow.setValue("TYPE", "0");
                } else {
                    Amount = ObjItem.getAttribute("CREDIT_AMOUNT").getDouble();
                    objRow.setValue("EFFECT_R", "Cr");
                    objRow.setValue("TYPE", "1");
                }
                if (DayDiff <= 30) {
                    objRow.setValue("UPTO_30_DAYS", Double.toString(Amount));
                    objRow.setValue("31_60_DAYS", "0");
                    objRow.setValue("61_180_DAYS", "0");
                    objRow.setValue("ABOVE_180_DAYS", "0");
                } else if (DayDiff >= 31 && DayDiff <= 60) {
                    objRow.setValue("UPTO_30_DAYS", "0");
                    objRow.setValue("31_60_DAYS", Double.toString(Amount));
                    objRow.setValue("61_180_DAYS", "0");
                    objRow.setValue("ABOVE_180_DAYS", "0");
                } else if (DayDiff >= 61 && DayDiff <= 180) {
                    objRow.setValue("UPTO_30_DAYS", "0");
                    objRow.setValue("31_60_DAYS", "0");
                    objRow.setValue("61_180_DAYS", Double.toString(Amount));
                    objRow.setValue("ABOVE_180_DAYS", "0");
                } else {
                    objRow.setValue("UPTO_30_DAYS", "0");
                    objRow.setValue("31_60_DAYS", "0");
                    objRow.setValue("61_180_DAYS", "0");
                    objRow.setValue("ABOVE_180_DAYS", Double.toString(Amount));
                }
                DebitAmount32to39 += ObjItem.getAttribute("DEBIT_AMOUNT").getDouble();
                CreditAmount32to39 += ObjItem.getAttribute("CREDIT_AMOUNT").getDouble();
                objRow.setValue("DEBIT_AMOUNT", Double.toString(ObjItem.getAttribute("DEBIT_AMOUNT").getDouble()));
                objRow.setValue("CREDIT_AMOUNT", Double.toString(ObjItem.getAttribute("CREDIT_AMOUNT").getDouble()));
                objRow.setValue("CLOSING_BALANCE", Double.toString(ObjItem.getAttribute("CLOSING_BALANCE").getDouble()));
                objData.AddRow(objRow);
                //System.out.println(objData.getRowCount());
            }
            System.out.println("k = " + (k - j));
            System.gc();
            Parameters = new HashMap();
            Parameters.put("OUT_DATE", AsOnDate);
            Parameters.put("RUN_DATE", EITLERPGLOBAL.getCurrentDate());
            Parameters.put("SALES_TYPE", "SUITING SALES - 210027");
            System.out.println("Last Report.....");
            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptDebtorOutStanding.rpt", Parameters, objData);
            objData = null;
            //******************************************* Part -3 End ********************************************/

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void generateReportSuittingUpdated(HashMap ReportList, String AsOnDate) {
        try {
            Connection connection = data.getConn();
            connection.setAutoCommit(false);
            Statement stmt = connection.createStatement();
//            stmt.execute("TRUNCATE TABLE TEMP_DATABASE.TMP_DEBTOUTSTANDING");
            stmt.execute("DELETE FROM TEMP_DATABASE.TMP_DEBTOUTSTANDING");
            String query = "INSERT INTO TEMP_DATABASE.TMP_DEBTOUTSTANDING(MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,DEPOSIT_BALANCE,PARTY_NAME,PARTY_TYPE,ADDRESS,BOOK_CODE,VOUCHER_NO,LEGACY_NO,VOUCHER_DATE,INVOICE_NO,LINK_NO,INVOICE_DATE,CHARGE_CODE,OBC_NO,BALE_NO,LR_NO,EFFECT_R,TYPE,UPTO_30_DAYS,31_60_DAYS,61_180_DAYS,ABOVE_180_DAYS,DEBIT_AMOUNT,CREDIT_AMOUNT,CLOSING_BALANCE) "
                    + " VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
            PreparedStatement p = connection.prepareStatement(query);
            clsDebtorsOutstandingItems ObjItem = new clsDebtorsOutstandingItems();
            System.out.println("No of Record = " + ReportList.size());
            int DayDiff = 0;
            double Amount = 0;
            int ReportSize = ReportList.size();
            int i = 0;
            String currsubacccode = "";
            for (i = 1; i <= ReportSize; i++) {

                ObjItem = (clsDebtorsOutstandingItems) ReportList.get(Integer.toString(i));
                if (ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString().length() < 6) {
                    boolean halt = true;
                }
                currsubacccode = ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString().substring(0, 2);
                System.out.println(currsubacccode);
                //if(Integer.parseInt(ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString().substring(0,2))>29) {                    
                //   break;                    
                //TReportWriter.TBand objband=new TBand();
                //objband.StartGroupOnNewPage=true;
                //EITLERPGLOBAL.PAGE_BREAK=true;
                //}                  

                p.setString(1, ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString());
                p.setString(2, ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString());
                p.setString(3, String.valueOf(data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FD_SALES_DEPOSIT_MASTER "
                        + "WHERE MAIN_ACCOUNT_CODE IN ('132642','132666','132635','132714') AND PARTY_MAIN_CODE  "
                        + "AND PARTY_CODE='" + ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString() + "' AND PARTY_MAIN_CODE = '" + ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString() + "' AND (REFUND_DATE='0000-00-00' OR REFUND_DATE<='" + EITLERPGLOBAL.formatDateDB(AsOnDate) + "') AND DEPOSIT_STATUS=0", FinanceGlobal.FinURL)));
                p.setString(4, ObjItem.getAttribute("PARTY_NAME").getString());
                p.setString(5, ObjItem.getAttribute("PARTY_TYPE").getString());
                //p.setString(6,data.getStringValueFromDB("SELECT CITY_ID FROM D_SAL_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND MAIN_ACCOUNT_CODE='"+ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString()+"' AND PARTY_CODE='"+ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString()+"' "));
                p.setString(6, data.getStringValueFromDB("SELECT CITY_ID FROM D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='" + ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString() + "' AND PARTY_CODE='" + ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString() + "' "));
                p.setString(7, ObjItem.getAttribute("BOOK_CODE").getString());
                p.setString(8, ObjItem.getAttribute("VOUCHER_NO").getString());
                p.setString(9, ObjItem.getAttribute("LEGACY_NO").getString());
                p.setString(10, EITLERPGLOBAL.formatDate(ObjItem.getAttribute("VOUCHER_DATE").getString()));
                p.setString(11, ObjItem.getAttribute("INVOICE_NO").getString());
                p.setString(12, ObjItem.getAttribute("LINK_NO").getString());
                p.setString(13, EITLERPGLOBAL.formatDate(ObjItem.getAttribute("INVOICE_DATE").getString()));
                p.setString(14, ObjItem.getAttribute("CHARGE_CODE").getString());
                p.setString(15, ObjItem.getAttribute("OBC_NO").getString());
                p.setString(16, ObjItem.getAttribute("BALE_NO").getString());
                p.setString(17, ObjItem.getAttribute("LR_NO").getString());
                DayDiff = EITLERPGLOBAL.getDayDifference(ObjItem.getAttribute("VOUCHER_DATE").getString(), EITLERPGLOBAL.formatDateDB(AsOnDate), "yyyy-MM-dd");
                Amount = 0;
                if (ObjItem.getAttribute("DEBIT_AMOUNT").getDouble() > 0) {
                    Amount = ObjItem.getAttribute("DEBIT_AMOUNT").getDouble();
                    p.setString(18, " ");
                    p.setString(19, "0");
                } else {
                    Amount = ObjItem.getAttribute("CREDIT_AMOUNT").getDouble();
                    p.setString(18, "Cr");
                    p.setString(19, "1");
                }
                if (DayDiff <= 30) {
                    p.setString(20, Double.toString(Amount));
                    p.setString(21, "");
                    p.setString(22, "");
                    p.setString(23, "");
                } else if (DayDiff >= 31 && DayDiff <= 60) {
                    p.setString(20, "");
                    p.setString(21, Double.toString(Amount));
                    p.setString(22, "");
                    p.setString(23, "");
                } else if (DayDiff >= 61 && DayDiff <= 180) {
                    p.setString(20, "");
                    p.setString(21, "");
                    p.setString(22, Double.toString(Amount));
                    p.setString(23, "");
                } else {
                    p.setString(20, "");
                    p.setString(21, "");
                    p.setString(22, "");
                    p.setString(23, Double.toString(Amount));
                }

                p.setString(24, Double.toString(ObjItem.getAttribute("DEBIT_AMOUNT").getDouble()));
                p.setString(25, Double.toString(ObjItem.getAttribute("CREDIT_AMOUNT").getDouble()));
                p.setString(26, Double.toString(ObjItem.getAttribute("CLOSING_BALANCE").getDouble()));
                p.addBatch();

                //System.out.println(objData.getRowCount());
                ReportList.remove(Integer.toString(i));
                if ((i + 1) % 1000 == 0) {
                    p.executeBatch();
                    connection.commit();
                }
            }
            p.executeBatch();
            connection.commit();

            //------Updation of Return type field
            stmt.execute("UPDATE TEMP_DATABASE.TMP_DEBTOUTSTANDING D SET RETURN_TYPE = (SELECT REASON_CODE FROM FINANCE.D_FIN_OBC_RETURN_HEADER AS B,FINANCE.D_FIN_OBC_INVOICE_DETAIL AS A WHERE A.DOC_NO=B.OBC_DOC_NO AND A.INVOICE_NO=D.INVOICE_NO AND SUBSTRING(A.INVOICE_DATE,9,2)=SUBSTRING(D.INVOICE_DATE,1,2) AND SUBSTRING(A.INVOICE_DATE,6,2)=SUBSTRING(D.INVOICE_DATE,4,2) AND SUBSTRING(A.INVOICE_DATE,1,4)=SUBSTRING(D.INVOICE_DATE,7,4))");
            stmt.execute("UPDATE TEMP_DATABASE.TMP_DEBTOUTSTANDING SET RETURN_TYPE='' WHERE RETURN_TYPE IS NULL");
            //------Insert into temp5 table
//            stmt.execute("TRUNCATE TABLE TEMP_DATABASE.TMP5");
            stmt.execute("DELETE FROM TEMP_DATABASE.TMP5");
            query = "INSERT INTO TEMP_DATABASE.TMP5 SELECT *,'','','','','','',0 FROM (SELECT  CONCAT(LPAD(BOOK_CODE,2,' '),' ',LPAD(CHARGE_CODE,2,' '),' ',LPAD(RETURN_TYPE,2,' '),' ',RPAD(VOUCHER_NO,20,' '),' ',LPAD(VOUCHER_DATE,10,' '),' ',LPAD(LEGACY_NO,6,' '),' ',LPAD(LINK_NO,14,' '),' ',LPAD(INVOICE_NO,10,' '),' ',LPAD(INVOICE_DATE,10,' '),' ',LPAD(BALE_NO,6,' '),LPAD(LR_NO,8,' '),LPAD(OBC_NO,10,' '),' ',' ',CONCAT(LPAD(UPTO_30_DAYS,11,' '),CASE WHEN UPTO_30_DAYS='' THEN ' ' ELSE 0 END),' ',' ',CONCAT(LPAD(31_60_DAYS,11,' '),CASE WHEN 31_60_DAYS='' THEN ' ' ELSE 0 END),' ',' ',CONCAT(LPAD(61_180_DAYS,11,' '),CASE WHEN 61_180_DAYS='' THEN ' ' ELSE 0 END) ,' ',' ',CONCAT(LPAD(ABOVE_180_DAYS,11,' '),CASE WHEN ABOVE_180_DAYS='' THEN ' ' ELSE 0 END) ,' ',LPAD(EFFECT_R,2,' ')) AS COL1,1 AS A ,1 AS B , 2 AS C ,SUB_ACCOUNT_CODE ,VOUCHER_DATE,SUBSTRING(SUB_ACCOUNT_CODE,1,2) AS AGENT FROM TEMP_DATABASE.TMP_DEBTOUTSTANDING UNION ALL SELECT  '-----------------------------------------------------------------------------------------------------------------------------------------------------------------------', 1 AS A ,1 AS B , 1 AS C ,SUB_ACCOUNT_CODE ,VOUCHER_DATE,SUBSTRING(SUB_ACCOUNT_CODE,1,2) AS AGENT FROM TEMP_DATABASE.TMP_DEBTOUTSTANDING GROUP BY SUB_ACCOUNT_CODE UNION ALL SELECT  CONCAT(LPAD(SUB_ACCOUNT_CODE,6,'0'),'  ',RPAD(PARTY_NAME,40,' '),' ', ' ',LPAD(ADDRESS,20,' '),' ',LPAD(PARTY_TYPE,15,' '),'  ','  ' ,'  ', '  ','DEPOSIT -',ROUND(DEPOSIT_BALANCE,2),'',''),   1 AS A ,1 AS B , 0 AS C ,SUB_ACCOUNT_CODE,'',SUBSTRING(SUB_ACCOUNT_CODE,1,2) AS AGENT FROM TEMP_DATABASE.TMP_DEBTOUTSTANDING ";
            query += "GROUP BY SUB_ACCOUNT_CODE UNION ALL SELECT  CONCAT(LPAD(' ',40,' '),RPAD('PARTY  DEBIT TOTAL :',20,' '),LPAD(SUM(COALESCE(CASE WHEN TYPE =0 THEN ROUND(DEBIT_AMOUNT,2) END,0)) ,13,' '),' ',' ',LPAD('NET AMOUNT:',11,' ') ,' ',LPAD(ROUND(CLOSING_BALANCE,2),13,' '),' ',CASE WHEN (SUM(COALESCE(CASE WHEN TYPE =0 THEN ROUND(DEBIT_AMOUNT,2) END,0))-SUM(COALESCE(CASE WHEN TYPE =1 THEN ROUND( CREDIT_AMOUNT,2) END,0))) < 0 THEN 'CR' ELSE '  ' END ,' ',LPAD('CR==>',5,' '),' ',LPAD(CASE WHEN ROUND(SUM(COALESCE(CASE WHEN TYPE =1 THEN UPTO_30_DAYS END,0)),2)=0  THEN ' ' ELSE ROUND(SUM(COALESCE(CASE WHEN TYPE =1 THEN UPTO_30_DAYS END,0)),2) END,13,' '),' ',LPAD(CASE WHEN ROUND(SUM(COALESCE(CASE WHEN TYPE =1 THEN 31_60_DAYS END,0)),2)=0 THEN ' ' ELSE ROUND(SUM(COALESCE(CASE WHEN TYPE =1 THEN 31_60_DAYS END,0)),2) END,13,' '),' ',LPAD(CASE WHEN ROUND(SUM(COALESCE(CASE WHEN TYPE =1 THEN 61_180_DAYS END,0)),2)=0 THEN ' ' ELSE ROUND(SUM(COALESCE(CASE WHEN TYPE =1 THEN 61_180_DAYS END,0)),2) END ,13,' '),' ',LPAD(CASE WHEN ROUND(SUM(COALESCE(CASE WHEN TYPE =1 THEN ABOVE_180_DAYS END,0)),2)=0 THEN ' ' ELSE ROUND(SUM(COALESCE(CASE WHEN TYPE =1 THEN ABOVE_180_DAYS END,0)),2)  END,13,' '),RPAD(' ',3,' ')),   1 AS A ,1 AS B , 4 AS C ,SUB_ACCOUNT_CODE ,'',SUBSTRING(SUB_ACCOUNT_CODE,1,2) AS AGENT FROM TEMP_DATABASE.TMP_DEBTOUTSTANDING ";
            query += "GROUP BY SUB_ACCOUNT_CODE,CLOSING_BALANCE UNION ALL SELECT  CONCAT(LPAD(' ',40,' '),RPAD('PARTY CREDIT TOTAL :',20,' '),LPAD(SUM(COALESCE(CASE WHEN TYPE =1 THEN ROUND( CREDIT_AMOUNT,2) END,0)) ,13,' '),LPAD(' ',31,' '), LPAD('DR==>',5,' '),' ',LPAD(CASE WHEN ROUND(SUM(COALESCE(CASE WHEN TYPE =0 THEN UPTO_30_DAYS END,0)),2)=0 THEN ' ' ELSE ROUND(SUM(COALESCE(CASE WHEN TYPE =0 THEN UPTO_30_DAYS END,0)),2) END ,13,' '),' ',LPAD(CASE WHEN ROUND(SUM(COALESCE(CASE WHEN TYPE =0 THEN 31_60_DAYS END,0)),2)=0 THEN ' ' ELSE ROUND(SUM(COALESCE(CASE WHEN TYPE =0 THEN 31_60_DAYS END,0)),2) END ,13,' '),' ',LPAD(CASE WHEN ROUND(SUM(COALESCE(CASE WHEN TYPE =0 THEN 61_180_DAYS END,0)),2)=0 THEN ' ' ELSE ROUND(SUM(COALESCE(CASE WHEN TYPE =0 THEN 61_180_DAYS END,0)),2) END ,13,' '),' ',LPAD(CASE WHEN ROUND(SUM(COALESCE(CASE WHEN TYPE =0 THEN ABOVE_180_DAYS END,0)),2)=0 THEN ' ' ELSE ROUND(SUM(COALESCE(CASE WHEN TYPE =0 THEN ABOVE_180_DAYS END,0)),2) END ,13,' '),RPAD(' ',3,' ')),   1 AS A ,1 AS B , 5 AS C ,SUB_ACCOUNT_CODE ,'',SUBSTRING(SUB_ACCOUNT_CODE,1,2) AS AGENT FROM TEMP_DATABASE.TMP_DEBTOUTSTANDING ";
            query += "GROUP BY SUB_ACCOUNT_CODE UNION ALL SELECT  CONCAT(LPAD('                                                          ',57,' '),'-------------------------------------------------------------------------------------------------------------'),   1 AS A ,1 AS B , 3 AS C ,SUB_ACCOUNT_CODE,'',SUBSTRING(SUB_ACCOUNT_CODE,1,2) AS AGENT FROM TEMP_DATABASE.TMP_DEBTOUTSTANDING GROUP BY SUB_ACCOUNT_CODE UNION ALL SELECT  CONCAT(LPAD('                                                          ',57,' '),'-------------------------------------------------------------------------------------------------------------'),   1 AS A ,1 AS B , 6 AS C ,SUB_ACCOUNT_CODE,'' ,SUBSTRING(SUB_ACCOUNT_CODE,1,2) AS AGENT FROM TEMP_DATABASE.TMP_DEBTOUTSTANDING GROUP BY SUB_ACCOUNT_CODE UNION ALL SELECT  CONCAT(LPAD('                                                          ',57,' '),'-------------------------------------------------------------------------------------------------------------'),   2 AS A ,2 AS B ,1 AS C ,MAX(SUB_ACCOUNT_CODE),'' ,SUBSTRING(SUB_ACCOUNT_CODE,1,2) AS AGENT FROM TEMP_DATABASE.TMP_DEBTOUTSTANDING GROUP BY SUBSTRING(SUB_ACCOUNT_CODE,1,2) UNION ALL SELECT CONCAT(LPAD(' ',40,' '),LPAD('AGENT TOTAL ',12,' ') , ' ( ', AGENT, ' ) ',  LPAD( 'TOTAL DEBIT AMOUNT : ',21,' ') , LPAD( ROUND(SUM(DR),2),13, ' '),' ',LPAD( 'TOTAL CREDIT AMOUNT : ',22,' ') , LPAD( ROUND(SUM(CR),2),13, ' '),' ',LPAD( 'TOTAL NET AMOUNT :',18,' ') , ' ',LPAD(ABS(ROUND(SUM(DR)-SUM(CR),2)),13,' '),' ',CASE WHEN (SUM(DR)-SUM(CR))  > 0 THEN 'DR' ELSE 'CR' END),2,1,1,0,' ',AGENT FROM (SELECT MAIN_ACCOUNT_CODE AS AGENT,SUB_ACCOUNT_CODE,CLOSING_BALANCE,SUM(DEBIT_AMOUNT) AS DR, SUM(CREDIT_AMOUNT) AS CR ,CASE WHEN SUM(DEBIT_AMOUNT)-SUM(CREDIT_AMOUNT)  > 0 THEN 'CR' ELSE ' ' END AS EFF FROM TEMP_DATABASE.TMP_DEBTOUTSTANDING WHERE MAIN_ACCOUNT_CODE != 210027 GROUP BY MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,CLOSING_BALANCE) AS G GROUP BY AGENT UNION ALL SELECT CONCAT(LPAD(' ',40,' '),LPAD('AGENT TOTAL ',12,' ') , ' ( ', AGENT, ' ) ',LPAD( 'TOTAL DEBIT AMOUNT : ',21,' ') , LPAD( ROUND(SUM(DR),2),13, ' '),' ',LPAD( 'TOTAL CREDIT AMOUNT : ',22,' ') , LPAD( ROUND(SUM(CR),2),13, ' '),' ',LPAD( 'TOTAL NET AMOUNT :',18,' '),' ',LPAD(ABS(ROUND(SUM(DR)-SUM(CR),2)),13,' '),' ',CASE WHEN (SUM(DR)-SUM(CR))  > 0 THEN 'DR' ELSE 'CR' END),2,1,1,0,' ',AGENT FROM (SELECT SUBSTRING(SUB_ACCOUNT_CODE,1,2) AS AGENT,SUB_ACCOUNT_CODE,CLOSING_BALANCE,SUM(DEBIT_AMOUNT) AS DR, SUM(CREDIT_AMOUNT) AS CR ,CASE WHEN SUM(DEBIT_AMOUNT)-SUM(CREDIT_AMOUNT)  > 0 THEN 'CR' ELSE ' ' END AS EFF FROM TEMP_DATABASE.TMP_DEBTOUTSTANDING WHERE MAIN_ACCOUNT_CODE = 210027  GROUP BY SUBSTRING(SUB_ACCOUNT_CODE,1,2),SUB_ACCOUNT_CODE,CLOSING_BALANCE) AS G GROUP BY AGENT) AS M";
            stmt.execute(query);
            stmt.execute("UPDATE TEMP_DATABASE.TMP5,TEMP_DATABASE.TMP_DEBTOUTSTANDING SET COL08 = PARTY_NAME,COL09 = DEPOSIT_BALANCE,COL10= ADDRESS,COL12 =PARTY_TYPE WHERE COL05 =SUB_ACCOUNT_CODE");
            //stmt.execute("UPDATE TEMP_DATABASE.TMP5 SET COL11= CONCAT(LPAD(COL05,6,'0'),'  ',RPAD(COL08,45,' '),' ', ' ',LPAD(COL10,34,' '),' ',LPAD(COL12,38,' '),'  ','  ' ,'  ', '  ','DEPOSIT - ',ROUND(COL09,2),'','')");    
            stmt.execute("UPDATE TEMP_DATABASE.TMP5 SET COL11= CONCAT(LPAD(COL05,6,'0'),'  ',RPAD(COL08,40,' '),' ', ' ',LPAD(COL10,20,' '),' ',LPAD(COL12,15,' '),'  ' ,'  ', '  ','  ','DEPOSIT -',ROUND(COL09,2),'','')");
            stmt.execute("UPDATE TEMP_DATABASE.TMP5 SET COL11='' WHERE COL04 =1 AND COL02 =2 AND COL03 =2");
            stmt.execute("UPDATE TEMP_DATABASE.TMP5 SET COL11='' WHERE COL04 =0 AND COL03 =1 AND COL02 =1");
            //stmt.execute("UPDATE  TEMP_DATABASE.TMP5 SET COL11='' WHERE COL11 LIKE ('000000%')"); //MODIFICATION FOR FELT DO

            //if(!data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM TEMP_DATABASE.TMP_DEBTOUTSTANDING").equals("210027")){
            if (!txtMainCode.getText().equals("210027")) {
                stmt.execute("DELETE FROM TEMP_DATABASE.TMP5 WHERE COL07=210010 OR COL07=210072");
                stmt.execute("DELETE FROM TEMP_DATABASE.TMP5 WHERE COL02=2 AND COL03=2 AND COL04=1");
            }

            //----Generate Report
            TReportWriter.SimpleDataProvider.TTable objData = new TReportWriter.SimpleDataProvider.TTable();

            objData.AddColumn("COL01");
            objData.AddColumn("COL02");
            objData.AddColumn("COL03");
            objData.AddColumn("COL04");
            objData.AddColumn("COL05");
            objData.AddColumn("COL06");
            objData.AddColumn("COL07");
            objData.AddColumn("COL08");
            objData.AddColumn("COL09");
            objData.AddColumn("COL10");
            objData.AddColumn("COL11");
            objData.AddColumn("COL12");
            objData.AddColumn("COL99");
            //objData.AddColumn("srno");   

            //ResultSet rsTemp = data.getResult("SELECT * FROM TEMP_DATABASE.TMP5 ORDER BY COL07,COL02,COL05,COL02,COL03,COL04");
            ResultSet rsTemp = data.getResult("SELECT COL01,COL02,COL03,COL04,COL05,COL06,COL07,COL08,COL09,COL10,COL11,COL12,COL99 FROM TEMP_DATABASE.TMP5 ORDER BY COL07,COL02,COL05,COL02,COL03,COL04");

            while (!rsTemp.isAfterLast()) {
                TReportWriter.SimpleDataProvider.TRow objRow = objData.newRow();

                objRow.setValue("COL01", rsTemp.getString("COL01"));
                objRow.setValue("COL02", rsTemp.getString("COL02"));
                objRow.setValue("COL03", rsTemp.getString("COL03"));
                objRow.setValue("COL04", rsTemp.getString("COL04"));
                objRow.setValue("COL05", rsTemp.getString("COL05"));
                objRow.setValue("COL06", rsTemp.getString("COL06"));
                objRow.setValue("COL07", rsTemp.getString("COL07"));
                objRow.setValue("COL08", rsTemp.getString("COL08"));
                objRow.setValue("COL09", rsTemp.getString("COL09"));
                objRow.setValue("COL10", rsTemp.getString("COL10"));
                objRow.setValue("COL11", rsTemp.getString("COL11"));
                objRow.setValue("COL12", rsTemp.getString("COL12"));
                objRow.setValue("COL99", rsTemp.getString("COL99"));
                //objRow.setValue("srno",rsTemp.getString("srno"));                
                objData.AddRow(objRow);
                rsTemp.next();
            }
            String status = "";
            double totalDrAmount = Double.parseDouble(data.getStringValueFromDB("SELECT ROUND(SUM(DEBIT_AMOUNT),2) FROM TEMP_DATABASE.TMP_DEBTOUTSTANDING"));
            double totalCrAmount = Double.parseDouble(data.getStringValueFromDB("SELECT ROUND(SUM(CREDIT_AMOUNT),2) FROM TEMP_DATABASE.TMP_DEBTOUTSTANDING"));
            double netBalance = totalDrAmount - totalCrAmount;
            System.out.println(netBalance);
            if (netBalance < 0) {
                status = "CR";
            } else if (netBalance > 0) {
                status = "DR";
            } else {
                status = "";
            }

            //System.gc();
            HashMap parameter = new HashMap();
            parameter.put("OUT_DATE", AsOnDate);
            parameter.put("RUN_DATE", EITLERPGLOBAL.getCurrentDate());
            parameter.put("DEBIT_TOTAL", Double.toString(totalDrAmount));
            parameter.put("CREDIT_TOTAL", Double.toString(totalCrAmount));
            parameter.put("NET_BALANCE", Double.toString(Math.abs(netBalance)));
            parameter.put("STATUS", status);
            //EITLERPGLOBAL.PAGE_BREAK=true;
            if (txtMainCode.getText().equals("210027")) {
                new TReportWriter.TReportEngine().PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/DO2.rpt", parameter, objData);
            } else {
                new TReportWriter.TReportEngine().PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/DO2FELT.rpt", parameter, objData);
            }
            //objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptDebtorOutStanding.rpt",Parameters,objData);
            //new TReportWriter.TReportEngine().PreviewReport("http://200.0.0.105/EITLERP/Reports/sales/rptABDwithBreakPieceupdate1.rpt",new HashMap(),objData);            
            rsTemp.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private boolean Validate() {

        String AsOnDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
        if (!EITLERPGLOBAL.isDate(txtAsOnDate.getText().trim())) {
            JOptionPane.showMessageDialog(this, "Wrong Date...");
            return false;
        }

        if (java.sql.Date.valueOf(AsOnDate).before(java.sql.Date.valueOf("2010-03-31"))) {
            JOptionPane.showMessageDialog(this, "Outstanding can not be genarated before 31/03/2010...");
            return false;
        }

        if (txtMainCode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Input Main Code...");
            return false;
        }

        if (!txtSubCode.getText().trim().equals("")) {
            if (!data.IsRecordExist("SELECT * FROM D_FIN_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND PARTY_CODE='" + txtSubCode.getText().trim() + "'", FinanceGlobal.FinURL)) {
                JOptionPane.showMessageDialog(this, "Wrong Party Code...");
                return false;
            }
        }

        if (chkAgentwise.isSelected()) {
            if (txtAgentwise.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(this, "Enter Agent Code...");
                txtAgentwise.requestFocus();
                return false;
            }

            if (txtAgentwise.getText().trim().length() != 2) {
                JOptionPane.showMessageDialog(this, "Wrong Agent Code...");
                txtAgentwise.requestFocus();
                return false;
            }
        }

        return true;
    }

    private void GenerateCombo() {
        //--- Generate Type Combo ------//
        cmbInvoiceTypeModel = new EITLComboModel();

        cmbInvoiceType.removeAllItems();
        cmbInvoiceType.setModel(cmbInvoiceTypeModel);

        ComboData aData = new ComboData();
        aData.Code = 0;
        aData.Text = "Select Invoice Type";
        cmbInvoiceTypeModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 1;
        aData.Text = "Suiting Sales";
        cmbInvoiceTypeModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 2;
        aData.Text = "Felt Sales";
        cmbInvoiceTypeModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 3;
        aData.Text = "Filter Sales";
        cmbInvoiceTypeModel.addElement(aData);

        /*    
         aData=new ComboData();
         aData.Code=4;
         aData.Text="Security Deposit Recievable";
         cmbInvoiceTypeModel.addElement(aData);          
        
         aData=new ComboData();
         aData.Code=5;
         aData.Text="Security Deposit Payable";
         cmbInvoiceTypeModel.addElement(aData);
         */
        //===============================//
    }

    private void FindMatchInvoice(final String MainAccountCode, final String PartyCode, final String FromDate, final String ToDate) {
        ProcessDone = false;
        new Thread() {
            public void run() {
                try {
                    int InvoiceType = 0;
                    String SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    int EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);

                    frmProgress objProgress = new frmProgress();
                    objProgress.Initialize();
                    objProgress.ShowDialog();

                    String Condition = "", SubAccountCode = "";
                    if (!PartyCode.equals("")) {
                        Condition = " AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' ";
                        SubAccountCode = PartyCode;
                    }

                    if (MainAccountCode.equals("210010")) {
                        InvoiceType = 2;
                    } else if (MainAccountCode.equals("210027")) {
                        InvoiceType = 1;
                    } else if (MainAccountCode.equals("210072")) {
                        InvoiceType = 3;
                    }

                    String strSQL = "SELECT COUNT(DISTINCT A.VOUCHER_NO) FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND B.CANCELLED=0 AND B.MAIN_ACCOUNT_CODE='" + MainAccountCode + "' " + Condition + " "
                            + "AND A.VOUCHER_DATE>='" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' AND (B.MATCHED=0 OR B.MATCHED IS NULL) "
                            + "AND B.EFFECT='D' AND A.BOOK_CODE<>10 AND A.VOUCHER_TYPE=" + FinanceGlobal.TYPE_SALES_JOURNAL + " "
                            + "ORDER BY A.VOUCHER_NO,B.INVOICE_NO,B.INVOICE_DATE";
                    int MaxCount = data.getIntValueFromDB(strSQL, FinanceGlobal.FinURL);

                    strSQL = "SELECT DISTINCT A.VOUCHER_NO,A.VOUCHER_DATE,B.INVOICE_NO, B.INVOICE_DATE,B.SUB_ACCOUNT_CODE,SUM(B.AMOUNT) AS AMOUNT "
                            + "FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 AND B.MAIN_ACCOUNT_CODE='" + MainAccountCode + "' " + Condition + " "
                            + "AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' "
                            + "AND (B.MATCHED=0 OR B.MATCHED IS NULL) AND B.EFFECT='D' " + //AND A.BOOK_CODE<>10
                            "AND A.VOUCHER_TYPE=" + FinanceGlobal.TYPE_SALES_JOURNAL + " "
                            + "GROUP BY A.VOUCHER_NO,B.INVOICE_NO,B.INVOICE_DATE "
                            + "ORDER BY A.VOUCHER_NO,B.INVOICE_NO,B.INVOICE_DATE ";

                    ResultSet rsSJ = data.getResult(strSQL, FinanceGlobal.FinURL);
                    rsSJ.first();
                    objProgress.SetMax(MaxCount);
                    objProgress.SetMin(0);
                    objProgress.SetValue(0);
                    objProgress.SetText("Starting Process...");
                    objProgress.repaint();
                    MaxCount = 0;
                    if (rsSJ.getRow() > 0) {
                        while (!rsSJ.isAfterLast()) {
                            MaxCount++;
                            String VoucherNo = UtilFunctions.getString(rsSJ, "VOUCHER_NO", "");

                            objProgress.SetValue(MaxCount);
                            objProgress.SetText("Processing Voucher : " + VoucherNo);
                            objProgress.repaint();

                            String PartyCode = UtilFunctions.getString(rsSJ, "SUB_ACCOUNT_CODE", "");
                            String InvoiceNo = UtilFunctions.getString(rsSJ, "INVOICE_NO", "");
                            String InvoiceDate = UtilFunctions.getString(rsSJ, "INVOICE_DATE", "");
                            double SJAmount = UtilFunctions.getDouble(rsSJ, "AMOUNT", 0);

                            strSQL = "SELECT SUM(B.AMOUNT) AS AMOUNT FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO=B.VOUCHER_NO "
                                    + "AND B.MAIN_ACCOUNT_CODE='" + MainAccountCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                    + "AND B.INVOICE_DATE = '" + InvoiceDate + "' AND B.INVOICE_NO ='" + InvoiceNo + "' "
                                    + "AND A.APPROVED=1 AND A.CANCELLED=0 "
                                    + "ORDER BY A.VOUCHER_DATE ";
                            double PaidAmount = data.getDoubleValueFromDB(strSQL, FinanceGlobal.FinURL);

                            if (SJAmount == PaidAmount) {
                                strSQL = "UPDATE D_FIN_VOUCHER_DETAIL SET MATCHED=1,MATCHED_DATE=CURDATE() "
                                        + "WHERE VOUCHER_NO='" + VoucherNo + "' AND MAIN_ACCOUNT_CODE='" + MainAccountCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                        + "AND INVOICE_DATE='" + InvoiceDate + "' AND INVOICE_NO ='" + InvoiceNo + "' ";
                                data.Execute(strSQL, FinanceGlobal.FinURL);

                                strSQL = "UPDATE D_FIN_VOUCHER_DETAIL_EX SET MATCHED=1,MATCHED_DATE=CURDATE() "
                                        + "WHERE VOUCHER_NO='" + VoucherNo + "' AND MAIN_ACCOUNT_CODE='" + MainAccountCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                        + "AND INVOICE_DATE ='" + InvoiceDate + "' AND INVOICE_NO ='" + InvoiceNo + "' ";
                                data.Execute(strSQL, FinanceGlobal.FinURL);

                                strSQL = "UPDATE D_FIN_VOUCHER_HEADER SET CHANGED=1 WHERE VOUCHER_NO='" + VoucherNo + "' ";
                                data.Execute(strSQL, FinanceGlobal.FinURL);

                                if (data.IsRecordExist("SELECT * FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE ENTRY_NO=" + EntryNo + " AND VOUCHER_NO='" + VoucherNo + "' AND MATCHED=0 AND EFFECT='D' AND AMOUNT=" + SJAmount, FinanceGlobal.FinURL)) {
                                    data.Execute("UPDATE D_FIN_DR_OPENING_OUTSTANDING_DETAIL SET MATCHED=1, MATCHED_DATE=CURDATE() WHERE ENTRY_NO=" + EntryNo + " AND VOUCHER_NO='" + VoucherNo + "' AND MATCHED=0 AND EFFECT='D' AND AMOUNT=" + SJAmount, FinanceGlobal.FinURL);
                                }

                                strSQL = "SELECT A.VOUCHER_NO,B.SR_NO,B.AMOUNT FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO=B.VOUCHER_NO "
                                        + "AND B.MAIN_ACCOUNT_CODE='" + MainAccountCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                        + "AND B.INVOICE_DATE = '" + InvoiceDate + "' AND B.INVOICE_NO ='" + InvoiceNo + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                        + "ORDER BY A.VOUCHER_DATE ";
                                ResultSet rsReceipt = data.getResult(strSQL, FinanceGlobal.FinURL);

                                while (!rsReceipt.isAfterLast()) {
                                    String ReceiptNo = rsReceipt.getString("VOUCHER_NO");
                                    int vSrNo = rsReceipt.getInt("SR_NO");
                                    double vAmount = rsReceipt.getDouble("AMOUNT");

                                    strSQL = "UPDATE D_FIN_VOUCHER_DETAIL SET MATCHED=1, MATCHED_DATE=CURDATE() WHERE VOUCHER_NO='" + ReceiptNo + "' "
                                            + "AND EFFECT='C' AND MAIN_ACCOUNT_CODE='" + MainAccountCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                            + "AND INVOICE_DATE='" + InvoiceDate + "' AND INVOICE_NO ='" + InvoiceNo + "' AND AMOUNT=" + vAmount; //AND SR_NO="+vSrNo+"
                                    data.Execute(strSQL, FinanceGlobal.FinURL);

                                    strSQL = "UPDATE D_FIN_VOUCHER_DETAIL_EX SET MATCHED=1, MATCHED_DATE=CURDATE() WHERE VOUCHER_NO='" + ReceiptNo + "' "
                                            + "AND EFFECT='C' AND MAIN_ACCOUNT_CODE='" + MainAccountCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                            + "AND INVOICE_DATE='" + InvoiceDate + "' AND INVOICE_NO ='" + InvoiceNo + "' AND AMOUNT=" + vAmount; //AND SR_NO="+vSrNo+"
                                    data.Execute(strSQL, FinanceGlobal.FinURL);

                                    strSQL = "UPDATE D_FIN_VOUCHER_HEADER SET CHANGED=1 WHERE VOUCHER_NO='" + ReceiptNo + "' ";
                                    data.Execute(strSQL, FinanceGlobal.FinURL);

                                    if (data.IsRecordExist("SELECT VOUCHER_NO FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND AMOUNT>=" + vAmount + " AND INVOICE_TYPE=" + InvoiceType, FinanceGlobal.FinURL)) {
                                        int CountRecord = data.getIntValueFromDB("SELECT COUNT(*) FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND AMOUNT>=" + vAmount + " AND INVOICE_TYPE=" + InvoiceType + " ORDER BY AMOUNT", FinanceGlobal.FinURL);
                                        int SrNo = data.getIntValueFromDB("SELECT SR_NO FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND AMOUNT>=" + vAmount + " AND INVOICE_TYPE=" + InvoiceType + " ORDER BY AMOUNT", FinanceGlobal.FinURL);
                                        double OSAmount = data.getDoubleValueFromDB("SELECT AMOUNT FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND SR_NO=" + SrNo, FinanceGlobal.FinURL);
                                        if (OSAmount > vAmount) {
                                            ResultSet rsOSData = data.getResult("SELECT * FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND SR_NO=" + SrNo, FinanceGlobal.FinURL);
                                            Connection OSConn = data.getConn(FinanceGlobal.FinURL);
                                            Statement OSStmt = OSConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                                            ResultSet rsOPOSData = OSStmt.executeQuery("SELECT * FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE INVOICE_TYPE=" + InvoiceType + " AND ENTRY_NO=" + EntryNo + " LIMIT 1");

                                            int MaxSrNo = data.getIntValueFromDB("SELECT MAX(SR_NO) FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE INVOICE_TYPE=" + InvoiceType + " AND ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL) + 1;

                                            rsOPOSData.moveToInsertRow();
                                            rsOPOSData.updateInt("COMPANY_ID", UtilFunctions.getInt(rsOSData, "COMPANY_ID", 0));
                                            rsOPOSData.updateInt("ENTRY_NO", UtilFunctions.getInt(rsOSData, "ENTRY_NO", 0));
                                            rsOPOSData.updateInt("SR_NO", MaxSrNo);
                                            rsOPOSData.updateInt("INVOICE_TYPE", UtilFunctions.getInt(rsOSData, "INVOICE_TYPE", 0));
                                            rsOPOSData.updateString("MAIN_ACCOUNT_CODE", UtilFunctions.getString(rsOSData, "MAIN_ACCOUNT_CODE", ""));
                                            rsOPOSData.updateString("SUB_ACCOUNT_CODE", UtilFunctions.getString(rsOSData, "SUB_ACCOUNT_CODE", ""));
                                            rsOPOSData.updateString("BOOK_CODE", UtilFunctions.getString(rsOSData, "BOOK_CODE", ""));
                                            rsOPOSData.updateString("CHARGE_CODE", UtilFunctions.getString(rsOSData, "CHARGE_CODE", ""));
                                            rsOPOSData.updateString("INVOICE_NO", UtilFunctions.getString(rsOSData, "INVOICE_NO", ""));
                                            rsOPOSData.updateString("INVOICE_DATE", UtilFunctions.getString(rsOSData, "INVOICE_DATE", ""));
                                            rsOPOSData.updateString("LINK_NO", UtilFunctions.getString(rsOSData, "LINK_NO", ""));
                                            rsOPOSData.updateString("VOUCHER_NO", UtilFunctions.getString(rsOSData, "VOUCHER_NO", ""));
                                            rsOPOSData.updateString("VOUCHER_DATE", UtilFunctions.getString(rsOSData, "VOUCHER_DATE", ""));
                                            rsOPOSData.updateString("LEGACY_NO", UtilFunctions.getString(rsOSData, "LEGACY_NO", ""));
                                            rsOPOSData.updateDouble("AMOUNT", EITLERPGLOBAL.round(OSAmount - vAmount, 2));
                                            rsOPOSData.updateString("EFFECT", UtilFunctions.getString(rsOSData, "EFFECT", ""));
                                            rsOPOSData.updateString("C_BOOK_CODE", UtilFunctions.getString(rsOSData, "C_BOOK_CODE", ""));
                                            rsOPOSData.updateString("BALE_NO", UtilFunctions.getString(rsOSData, "BALE_NO", ""));
                                            rsOPOSData.updateString("LR_NO", UtilFunctions.getString(rsOSData, "LR_NO", ""));
                                            rsOPOSData.updateString("OBC_NO", UtilFunctions.getString(rsOSData, "OBC_NO", ""));
                                            rsOPOSData.updateBoolean("MATCHED", false);
                                            rsOPOSData.updateString("MATCHED_DATE", "0000-00-00");
                                            rsOPOSData.updateString("CREATED_BY", UtilFunctions.getString(rsOSData, "CREATED_BY", ""));
                                            rsOPOSData.updateString("CREATED_DATE", UtilFunctions.getString(rsOSData, "CREATED_DATE", ""));
                                            rsOPOSData.updateBoolean("CHANGED", true);
                                            rsOPOSData.updateString("CHANGED_DATE", EITLERPGLOBAL.getCurrentDateDB());
                                            rsOPOSData.insertRow();

                                            data.Execute("UPDATE D_FIN_DR_OPENING_OUTSTANDING_DETAIL SET AMOUNT=" + vAmount + ",MATCHED=1,MATCHED_DATE=CURDATE() WHERE INVOICE_TYPE=" + InvoiceType + " AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND SR_NO=" + SrNo, FinanceGlobal.FinURL);
                                        } else {
                                            data.Execute("UPDATE D_FIN_DR_OPENING_OUTSTANDING_DETAIL SET AMOUNT=" + vAmount + ",MATCHED=1,MATCHED_DATE=CURDATE() WHERE INVOICE_TYPE=" + InvoiceType + " AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND SR_NO=" + SrNo, FinanceGlobal.FinURL);
                                        }
                                    } else if (data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND AMOUNT<=" + vAmount + " AND INVOICE_TYPE=" + InvoiceType, FinanceGlobal.FinURL) >= vAmount) {
                                        while (vAmount != 0) {
                                            int SrNo = data.getIntValueFromDB("SELECT SR_NO FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND AMOUNT<=" + vAmount + " AND INVOICE_TYPE=" + InvoiceType + " ORDER BY AMOUNT ", FinanceGlobal.FinURL);
                                            double OSAmount = data.getDoubleValueFromDB("SELECT AMOUNT FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND SR_NO=" + SrNo, FinanceGlobal.FinURL);
                                            data.Execute("UPDATE D_FIN_DR_OPENING_OUTSTANDING_DETAIL SET AMOUNT=" + OSAmount + ",MATCHED=1,MATCHED_DATE=CURDATE() WHERE INVOICE_TYPE=" + InvoiceType + " AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND SR_NO=" + SrNo, FinanceGlobal.FinURL);
                                            vAmount = EITLERPGLOBAL.round(EITLERPGLOBAL.round(vAmount, 2) - EITLERPGLOBAL.round(OSAmount, 2), 2);
                                        }
                                    }
                                    rsReceipt.next();
                                }
                            }
                            rsSJ.next();
                        }
                    }
                    ProcessDone = true;
                    objProgress.Hide();
                } catch (Exception e) {
                    ProcessDone = true;
                    e.printStackTrace();
                }
            }
        ;
    }

    .start();
    }
    
    private void FindMatchDebits(final String MainAccountCode, final String PartyCode, final String FromDate, final String ToDate) {
        ProcessDone = false;
        new Thread() {
            public void run() {
                try {
                    int InvoiceType = 0;
                    String SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    int EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);

                    frmProgress objProgress = new frmProgress();
                    objProgress.Initialize();
                    objProgress.ShowDialog();

                    String Condition = "";
                    String SubAccountCode = "";
                    if (!PartyCode.equals("")) {
                        Condition = " AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' ";
                        SubAccountCode = PartyCode;
                    }

                    if (MainAccountCode.equals("210010")) {
                        InvoiceType = 2;
                    } else if (MainAccountCode.equals("210027")) {
                        InvoiceType = 1;
                    } else if (MainAccountCode.equals("210072")) {
                        InvoiceType = 3;
                    }

                    String strSQL = "SELECT COUNT(DISTINCT A.VOUCHER_NO) "
                            + "FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' "
                            + "AND B.EFFECT='D' AND B.MAIN_ACCOUNT_CODE='" + MainAccountCode + "' " + Condition + " "
                            + "AND A.APPROVED=1 AND A.CANCELLED=0 "
                            + "AND A.VOUCHER_TYPE<>" + FinanceGlobal.TYPE_SALES_JOURNAL + " "
                            + "AND (B.MATCHED=0 OR B.MATCHED IS NULL) "
                            + "ORDER BY A.VOUCHER_DATE ";
                    int MaxCount = data.getIntValueFromDB(strSQL, FinanceGlobal.FinURL);

                    strSQL = "SELECT A.VOUCHER_NO,A.VOUCHER_DATE,B.SUB_ACCOUNT_CODE "
                            + "FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' "
                            + "AND B.EFFECT='D' AND B.MAIN_ACCOUNT_CODE='" + MainAccountCode + "' " + Condition + " "
                            + "AND A.APPROVED=1 AND A.CANCELLED=0 "
                            + "AND A.VOUCHER_TYPE<>" + FinanceGlobal.TYPE_SALES_JOURNAL + " "
                            + "AND (B.MATCHED=0 OR B.MATCHED IS NULL) "
                            + "GROUP BY B.VOUCHER_NO,B.SUB_ACCOUNT_CODE "
                            + "ORDER BY A.VOUCHER_DATE ";

                    ResultSet rsTmp = data.getResult(strSQL, FinanceGlobal.FinURL);
                    rsTmp.first();
                    objProgress.SetMax(MaxCount);
                    objProgress.SetMin(0);
                    objProgress.SetValue(0);
                    objProgress.repaint();
                    objProgress.SetText("Starting Process...");
                    MaxCount = 0;
                    if (rsTmp.getRow() > 0) {
                        while (!rsTmp.isAfterLast()) {
                            String DebitNo = UtilFunctions.getString(rsTmp, "VOUCHER_NO", "");
                            MaxCount++;
                            objProgress.SetValue(MaxCount);
                            objProgress.SetText("Processing Voucher : " + DebitNo);
                            objProgress.repaint();
                            String PartyCode = UtilFunctions.getString(rsTmp, "SUB_ACCOUNT_CODE", "");

                            strSQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + DebitNo + "' AND EFFECT='D' "
                                    + "AND MAIN_ACCOUNT_CODE='" + MainAccountCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' ";
                            double DebitAmount = data.getDoubleValueFromDB(strSQL, FinanceGlobal.FinURL);

                            strSQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.GRN_NO='" + DebitNo + "' AND B.MAIN_ACCOUNT_CODE='" + MainAccountCode + "' "
                                    + "AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' AND A.APPROVED=1 AND A.CANCELLED=0 ";
                            double AdjustedAmount = data.getDoubleValueFromDB(strSQL, FinanceGlobal.FinURL);

                            if (AdjustedAmount == DebitAmount) {
                                // UPDATE MATCH RECORD
                                data.Execute("UPDATE D_FIN_VOUCHER_DETAIL SET MATCHED=1, MATCHED_DATE=CURDATE() WHERE VOUCHER_NO='" + DebitNo + "' AND EFFECT='D' AND MAIN_ACCOUNT_CODE='" + MainAccountCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' ", FinanceGlobal.FinURL);
                                data.Execute("UPDATE D_FIN_VOUCHER_DETAIL_EX SET MATCHED=1, MATCHED_DATE=CURDATE() WHERE VOUCHER_NO='" + DebitNo + "' AND EFFECT='D' AND MAIN_ACCOUNT_CODE='" + MainAccountCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' ", FinanceGlobal.FinURL);
                                data.Execute("UPDATE D_FIN_VOUCHER_HEADER SET CHANGED=1 WHERE VOUCHER_NO='" + DebitNo + "' ", FinanceGlobal.FinURL);

                                if (data.IsRecordExist("SELECT * FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE ENTRY_NO=" + EntryNo + " AND VOUCHER_NO='" + DebitNo + "' AND MATCHED=0 AND EFFECT='D' ", FinanceGlobal.FinURL)) {
                                    data.Execute("UPDATE D_FIN_DR_OPENING_OUTSTANDING_DETAIL SET MATCHED=1, MATCHED_DATE=CURDATE() WHERE ENTRY_NO=" + EntryNo + " AND VOUCHER_NO='" + DebitNo + "' AND MATCHED=0 AND EFFECT='D' ", FinanceGlobal.FinURL);
                                }

                                strSQL = "SELECT A.VOUCHER_NO,B.SR_NO,B.AMOUNT FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                                        + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.GRN_NO='" + DebitNo + "' AND B.MAIN_ACCOUNT_CODE='" + MainAccountCode + "' "
                                        + "AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' AND A.APPROVED=1 AND A.CANCELLED=0 ";
                                ResultSet rsCredit = data.getResult(strSQL, FinanceGlobal.FinURL);

                                while (!rsCredit.isAfterLast()) {
                                    String ReceiptNo = rsCredit.getString("VOUCHER_NO");
                                    int vSrNo = rsCredit.getInt("SR_NO");
                                    double vAmount = rsCredit.getInt("AMOUNT");

                                    data.Execute("UPDATE D_FIN_VOUCHER_DETAIL SET MATCHED=1, MATCHED_DATE=CURDATE() WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND MAIN_ACCOUNT_CODE='" + MainAccountCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND GRN_NO='" + DebitNo + "' ", FinanceGlobal.FinURL); //AND AMOUNT="+vAmount
                                    data.Execute("UPDATE D_FIN_VOUCHER_DETAIL_EX SET MATCHED=1, MATCHED_DATE=CURDATE() WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND MAIN_ACCOUNT_CODE='" + MainAccountCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND GRN_NO='" + DebitNo + "' ", FinanceGlobal.FinURL); //AND AMOUNT="+vAmount
                                    data.Execute("UPDATE D_FIN_VOUCHER_HEADER SET CHANGED=1 WHERE VOUCHER_NO='" + ReceiptNo + "' ", FinanceGlobal.FinURL);

                                    if (data.IsRecordExist("SELECT VOUCHER_NO FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND AMOUNT>=" + vAmount + " AND INVOICE_TYPE=" + InvoiceType, FinanceGlobal.FinURL)) {
                                        int CountRecord = data.getIntValueFromDB("SELECT COUNT(*) FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND AMOUNT>=" + vAmount + " AND INVOICE_TYPE=" + InvoiceType + " ORDER BY AMOUNT ", FinanceGlobal.FinURL);
                                        int SrNo = data.getIntValueFromDB("SELECT SR_NO FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND AMOUNT>=" + vAmount + " AND INVOICE_TYPE=" + InvoiceType + " ORDER BY AMOUNT ", FinanceGlobal.FinURL);
                                        double OSAmount = data.getDoubleValueFromDB("SELECT AMOUNT FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND SR_NO=" + SrNo, FinanceGlobal.FinURL);
                                        if (OSAmount > vAmount) {
                                            ResultSet rsOSData = data.getResult("SELECT * FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND SR_NO=" + SrNo, FinanceGlobal.FinURL);
                                            Connection OSConn = data.getConn(FinanceGlobal.FinURL);
                                            Statement OSStmt = OSConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                                            ResultSet rsOPOSData = OSStmt.executeQuery("SELECT * FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE INVOICE_TYPE=" + InvoiceType + " AND ENTRY_NO=" + EntryNo + " LIMIT 1");

                                            int MaxSrNo = data.getIntValueFromDB("SELECT MAX(SR_NO) FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE INVOICE_TYPE=" + InvoiceType + " AND ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL) + 1;

                                            rsOPOSData.moveToInsertRow();
                                            rsOPOSData.updateInt("COMPANY_ID", UtilFunctions.getInt(rsOSData, "COMPANY_ID", 0));
                                            rsOPOSData.updateInt("ENTRY_NO", UtilFunctions.getInt(rsOSData, "ENTRY_NO", 0));
                                            rsOPOSData.updateInt("SR_NO", MaxSrNo);
                                            rsOPOSData.updateInt("INVOICE_TYPE", UtilFunctions.getInt(rsOSData, "INVOICE_TYPE", 0));
                                            rsOPOSData.updateString("MAIN_ACCOUNT_CODE", UtilFunctions.getString(rsOSData, "MAIN_ACCOUNT_CODE", ""));
                                            rsOPOSData.updateString("SUB_ACCOUNT_CODE", UtilFunctions.getString(rsOSData, "SUB_ACCOUNT_CODE", ""));
                                            rsOPOSData.updateString("BOOK_CODE", UtilFunctions.getString(rsOSData, "BOOK_CODE", ""));
                                            rsOPOSData.updateString("CHARGE_CODE", UtilFunctions.getString(rsOSData, "CHARGE_CODE", ""));
                                            rsOPOSData.updateString("INVOICE_NO", UtilFunctions.getString(rsOSData, "INVOICE_NO", ""));
                                            rsOPOSData.updateString("INVOICE_DATE", UtilFunctions.getString(rsOSData, "INVOICE_DATE", ""));
                                            rsOPOSData.updateString("LINK_NO", UtilFunctions.getString(rsOSData, "LINK_NO", ""));
                                            rsOPOSData.updateString("VOUCHER_NO", UtilFunctions.getString(rsOSData, "VOUCHER_NO", ""));
                                            rsOPOSData.updateString("VOUCHER_DATE", UtilFunctions.getString(rsOSData, "VOUCHER_DATE", ""));
                                            rsOPOSData.updateString("LEGACY_NO", UtilFunctions.getString(rsOSData, "LEGACY_NO", ""));
                                            rsOPOSData.updateDouble("AMOUNT", EITLERPGLOBAL.round(OSAmount - vAmount, 2));
                                            rsOPOSData.updateString("EFFECT", UtilFunctions.getString(rsOSData, "EFFECT", ""));
                                            rsOPOSData.updateString("C_BOOK_CODE", UtilFunctions.getString(rsOSData, "C_BOOK_CODE", ""));
                                            rsOPOSData.updateString("BALE_NO", UtilFunctions.getString(rsOSData, "BALE_NO", ""));
                                            rsOPOSData.updateString("LR_NO", UtilFunctions.getString(rsOSData, "LR_NO", ""));
                                            rsOPOSData.updateString("OBC_NO", UtilFunctions.getString(rsOSData, "OBC_NO", ""));
                                            rsOPOSData.updateBoolean("MATCHED", false);
                                            rsOPOSData.updateString("MATCHED_DATE", "0000-00-00");
                                            rsOPOSData.updateString("CREATED_BY", UtilFunctions.getString(rsOSData, "CREATED_BY", ""));
                                            rsOPOSData.updateString("CREATED_DATE", UtilFunctions.getString(rsOSData, "CREATED_DATE", ""));
                                            rsOPOSData.updateBoolean("CHANGED", true);
                                            rsOPOSData.updateString("CHANGED_DATE", EITLERPGLOBAL.getCurrentDateDB());
                                            rsOPOSData.insertRow();
                                            data.Execute("UPDATE D_FIN_DR_OPENING_OUTSTANDING_DETAIL SET AMOUNT=" + vAmount + ",MATCHED=1,MATCHED_DATE=CURDATE() WHERE INVOICE_TYPE=" + InvoiceType + " AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND SR_NO=" + SrNo, FinanceGlobal.FinURL);
                                        } else {
                                            data.Execute("UPDATE D_FIN_DR_OPENING_OUTSTANDING_DETAIL SET AMOUNT=" + vAmount + ",MATCHED=1,MATCHED_DATE=CURDATE() WHERE INVOICE_TYPE=" + InvoiceType + " AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND SR_NO=" + SrNo, FinanceGlobal.FinURL);
                                        }
                                    } else if (data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND AMOUNT<=" + vAmount + " AND INVOICE_TYPE=" + InvoiceType, FinanceGlobal.FinURL) >= vAmount) {
                                        while (vAmount != 0) {
                                            int SrNo = data.getIntValueFromDB("SELECT SR_NO FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND AMOUNT<=" + vAmount + " AND INVOICE_TYPE=" + InvoiceType + " ORDER BY AMOUNT ", FinanceGlobal.FinURL);
                                            double OSAmount = data.getDoubleValueFromDB("SELECT AMOUNT FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND SR_NO=" + SrNo, FinanceGlobal.FinURL);
                                            data.Execute("UPDATE D_FIN_DR_OPENING_OUTSTANDING_DETAIL SET AMOUNT=" + OSAmount + ",MATCHED=1,MATCHED_DATE=CURDATE() WHERE INVOICE_TYPE=" + InvoiceType + " AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND SR_NO=" + SrNo, FinanceGlobal.FinURL);
                                            vAmount = EITLERPGLOBAL.round(EITLERPGLOBAL.round(vAmount, 2) - EITLERPGLOBAL.round(OSAmount, 2), 2);
                                        }
                                    }
                                    rsCredit.next();
                                }
                            }
                            rsTmp.next();
                        }
                    }
                    ProcessDone = true;
                    objProgress.Hide();
                } catch (Exception e) {
                    ProcessDone = true;
                    e.printStackTrace();
                }
            }
        ;
    }

    .start();
    }
    
    private void FindMatchDebitsFromClosing(final String MainAccountCode, final String PartyCode, final String FromDate, final String ToDate) {
        ProcessDone = false;
        new Thread() {
            public void run() {
                try {
                    int InvoiceType = 0;
                    String SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    int EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);

                    frmProgress objProgress = new frmProgress();
                    objProgress.Initialize();
                    objProgress.ShowDialog();

                    String Condition = "";
                    String SubAccountCode = "";
                    if (!PartyCode.equals("")) {
                        Condition = " AND SUB_ACCOUNT_CODE='" + PartyCode + "' ";
                        SubAccountCode = PartyCode;
                    }

                    if (MainAccountCode.equals("210010")) {
                        InvoiceType = 2;
                    } else if (MainAccountCode.equals("210027")) {
                        InvoiceType = 1;
                    } else if (MainAccountCode.equals("210072")) {
                        InvoiceType = 3;
                    }

                    String strSQL = "SELECT COUNT(DISTINCT VOUCHER_NO) FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                            + "WHERE ENTRY_NO=" + EntryNo + " AND INVOICE_TYPE=" + InvoiceType + " AND EFFECT='D' AND MAIN_ACCOUNT_CODE='" + MainAccountCode + "' " + Condition + " "
                            + "AND (MATCHED=0 OR MATCHED IS NULL) "
                            + "ORDER BY VOUCHER_DATE ";
                    int MaxCount = data.getIntValueFromDB(strSQL, FinanceGlobal.FinURL);

                    strSQL = "SELECT VOUCHER_NO,VOUCHER_DATE,SUB_ACCOUNT_CODE "
                            + "FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE ENTRY_NO=" + EntryNo + " AND INVOICE_TYPE=" + InvoiceType + " "
                            + "AND EFFECT='D' AND MAIN_ACCOUNT_CODE='" + MainAccountCode + "' " + Condition + " "
                            + "AND (MATCHED=0 OR MATCHED IS NULL) "
                            + "GROUP BY VOUCHER_NO,SUB_ACCOUNT_CODE "
                            + "ORDER BY VOUCHER_DATE ";

                    ResultSet rsTmp = data.getResult(strSQL, FinanceGlobal.FinURL);
                    rsTmp.first();
                    objProgress.SetMax(MaxCount);
                    objProgress.SetMin(0);
                    objProgress.SetValue(0);
                    objProgress.repaint();
                    objProgress.SetText("Starting Process...");
                    MaxCount = 0;
                    if (rsTmp.getRow() > 0) {
                        while (!rsTmp.isAfterLast()) {
                            String DebitNo = UtilFunctions.getString(rsTmp, "VOUCHER_NO", "");
                            String PartyCode = UtilFunctions.getString(rsTmp, "SUB_ACCOUNT_CODE", "");
                            MaxCount++;
                            objProgress.SetValue(MaxCount);
                            objProgress.SetText("Processing Voucher : " + DebitNo);
                            objProgress.repaint();
                            double DebitAmount = 0;
                            double AdjustedAmount = 0;
                            String InvoiceNo = data.getStringValueFromDB("SELECT INVOICE_NO FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + DebitNo + "' AND MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND EFFECT='D' ", FinanceGlobal.FinURL);
                            String InvoiceDate = data.getStringValueFromDB("SELECT INVOICE_DATE FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + DebitNo + "' AND MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND EFFECT='D' ", FinanceGlobal.FinURL);
                            if (clsVoucher.getVoucherType(DebitNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                strSQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + DebitNo + "' AND EFFECT='D' "
                                        + "AND MAIN_ACCOUNT_CODE='" + MainAccountCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND INVOICE_NO='" + InvoiceNo + "' "
                                        + "AND INVOICE_DATE='" + InvoiceDate + "'";
                                DebitAmount = data.getDoubleValueFromDB(strSQL, FinanceGlobal.FinURL);

                                strSQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                                        + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainAccountCode + "' "
                                        + "AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                        + "AND B.INVOICE_NO='" + InvoiceNo + "' AND B.INVOICE_DATE='" + InvoiceDate + "' "
                                        + "AND A.APPROVED=1 AND A.CANCELLED=0 ";
                                AdjustedAmount = data.getDoubleValueFromDB(strSQL, FinanceGlobal.FinURL);
                            } else {
                                strSQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + DebitNo + "' AND EFFECT='D' "
                                        + "AND MAIN_ACCOUNT_CODE='" + MainAccountCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' ";
                                DebitAmount = data.getDoubleValueFromDB(strSQL, FinanceGlobal.FinURL);

                                strSQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                                        + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.GRN_NO='" + DebitNo + "' AND B.MAIN_ACCOUNT_CODE='" + MainAccountCode + "' "
                                        + "AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' AND A.APPROVED=1 AND A.CANCELLED=0 ";
                                AdjustedAmount = data.getDoubleValueFromDB(strSQL, FinanceGlobal.FinURL);
                            }

                            if (AdjustedAmount == DebitAmount) {
                                // UPDATE MATCH RECORD
                                data.Execute("UPDATE D_FIN_VOUCHER_DETAIL SET MATCHED=1, MATCHED_DATE=CURDATE() WHERE VOUCHER_NO='" + DebitNo + "' AND EFFECT='D' AND MAIN_ACCOUNT_CODE='" + MainAccountCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' ", FinanceGlobal.FinURL);
                                data.Execute("UPDATE D_FIN_VOUCHER_DETAIL_EX SET MATCHED=1, MATCHED_DATE=CURDATE() WHERE VOUCHER_NO='" + DebitNo + "' AND EFFECT='D' AND MAIN_ACCOUNT_CODE='" + MainAccountCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' ", FinanceGlobal.FinURL);
                                data.Execute("UPDATE D_FIN_VOUCHER_HEADER SET CHANGED=1 WHERE VOUCHER_NO='" + DebitNo + "' ", FinanceGlobal.FinURL);

                                if (data.IsRecordExist("SELECT * FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE ENTRY_NO=" + EntryNo + " AND VOUCHER_NO='" + DebitNo + "' AND MATCHED=0 AND EFFECT='D' ", FinanceGlobal.FinURL)) {
                                    data.Execute("UPDATE D_FIN_DR_OPENING_OUTSTANDING_DETAIL SET MATCHED=1, MATCHED_DATE=CURDATE() WHERE ENTRY_NO=" + EntryNo + " AND VOUCHER_NO='" + DebitNo + "' AND MATCHED=0 AND EFFECT='D' ", FinanceGlobal.FinURL);
                                }

                                ResultSet rsCredit = null;
                                if (clsVoucher.getVoucherType(DebitNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                    strSQL = "SELECT A.VOUCHER_NO,B.SR_NO,B.AMOUNT FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO=B.VOUCHER_NO "
                                            + "AND B.MAIN_ACCOUNT_CODE='" + MainAccountCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                            + "AND B.INVOICE_DATE = '" + InvoiceDate + "' AND B.INVOICE_NO ='" + InvoiceNo + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                            + "ORDER BY A.VOUCHER_DATE ";
                                    rsCredit = data.getResult(strSQL, FinanceGlobal.FinURL);
                                } else {
                                    strSQL = "SELECT A.VOUCHER_NO,B.SR_NO,B.AMOUNT FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.GRN_NO='" + DebitNo + "' AND B.MAIN_ACCOUNT_CODE='" + MainAccountCode + "' "
                                            + "AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' AND A.APPROVED=1 AND A.CANCELLED=0 ";
                                    rsCredit = data.getResult(strSQL, FinanceGlobal.FinURL);
                                }

                                while (!rsCredit.isAfterLast()) {
                                    String ReceiptNo = rsCredit.getString("VOUCHER_NO");
                                    int vSrNo = rsCredit.getInt("SR_NO");
                                    double vAmount = rsCredit.getInt("AMOUNT");

                                    if (clsVoucher.getVoucherType(DebitNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        strSQL = "UPDATE D_FIN_VOUCHER_DETAIL SET MATCHED=1, MATCHED_DATE=CURDATE() WHERE VOUCHER_NO='" + ReceiptNo + "' "
                                                + "AND EFFECT='C' AND MAIN_ACCOUNT_CODE='" + MainAccountCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                                + "AND INVOICE_DATE='" + InvoiceDate + "' AND INVOICE_NO ='" + InvoiceNo + "' AND AMOUNT=" + vAmount; //AND SR_NO="+vSrNo+"
                                        data.Execute(strSQL, FinanceGlobal.FinURL);

                                        strSQL = "UPDATE D_FIN_VOUCHER_DETAIL_EX SET MATCHED=1, MATCHED_DATE=CURDATE() WHERE VOUCHER_NO='" + ReceiptNo + "' "
                                                + "AND EFFECT='C' AND MAIN_ACCOUNT_CODE='" + MainAccountCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                                + "AND INVOICE_DATE='" + InvoiceDate + "' AND INVOICE_NO ='" + InvoiceNo + "' AND AMOUNT=" + vAmount; //AND SR_NO="+vSrNo+"
                                        data.Execute(strSQL, FinanceGlobal.FinURL);
                                    } else {
                                        data.Execute("UPDATE D_FIN_VOUCHER_DETAIL SET MATCHED=1, MATCHED_DATE=CURDATE() WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND MAIN_ACCOUNT_CODE='" + MainAccountCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND GRN_NO='" + DebitNo + "' ", FinanceGlobal.FinURL); //AND AMOUNT="+vAmount
                                        data.Execute("UPDATE D_FIN_VOUCHER_DETAIL_EX SET MATCHED=1, MATCHED_DATE=CURDATE() WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND MAIN_ACCOUNT_CODE='" + MainAccountCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND GRN_NO='" + DebitNo + "' ", FinanceGlobal.FinURL); //AND AMOUNT="+vAmount
                                    }

                                    data.Execute("UPDATE D_FIN_VOUCHER_HEADER SET CHANGED=1 WHERE VOUCHER_NO='" + ReceiptNo + "' ", FinanceGlobal.FinURL);

                                    if (data.IsRecordExist("SELECT VOUCHER_NO FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND AMOUNT>=" + vAmount + " AND INVOICE_TYPE=" + InvoiceType, FinanceGlobal.FinURL)) {
                                        int CountRecord = data.getIntValueFromDB("SELECT COUNT(*) FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND AMOUNT>=" + vAmount + " AND INVOICE_TYPE=" + InvoiceType + " ORDER BY AMOUNT ", FinanceGlobal.FinURL);
                                        int SrNo = data.getIntValueFromDB("SELECT SR_NO FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND AMOUNT>=" + vAmount + " AND INVOICE_TYPE=" + InvoiceType + " ORDER BY AMOUNT ", FinanceGlobal.FinURL);
                                        double OSAmount = data.getDoubleValueFromDB("SELECT AMOUNT FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND SR_NO=" + SrNo, FinanceGlobal.FinURL);
                                        if (OSAmount > vAmount) {
                                            ResultSet rsOSData = data.getResult("SELECT * FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND SR_NO=" + SrNo, FinanceGlobal.FinURL);
                                            Connection OSConn = data.getConn(FinanceGlobal.FinURL);
                                            Statement OSStmt = OSConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                                            ResultSet rsOPOSData = OSStmt.executeQuery("SELECT * FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE INVOICE_TYPE=" + InvoiceType + " AND ENTRY_NO=" + EntryNo + " LIMIT 1");

                                            int MaxSrNo = data.getIntValueFromDB("SELECT MAX(SR_NO) FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE INVOICE_TYPE=" + InvoiceType + " AND ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL) + 1;

                                            rsOPOSData.moveToInsertRow();
                                            rsOPOSData.updateInt("COMPANY_ID", UtilFunctions.getInt(rsOSData, "COMPANY_ID", 0));
                                            rsOPOSData.updateInt("ENTRY_NO", UtilFunctions.getInt(rsOSData, "ENTRY_NO", 0));
                                            rsOPOSData.updateInt("SR_NO", MaxSrNo);
                                            rsOPOSData.updateInt("INVOICE_TYPE", UtilFunctions.getInt(rsOSData, "INVOICE_TYPE", 0));
                                            rsOPOSData.updateString("MAIN_ACCOUNT_CODE", UtilFunctions.getString(rsOSData, "MAIN_ACCOUNT_CODE", ""));
                                            rsOPOSData.updateString("SUB_ACCOUNT_CODE", UtilFunctions.getString(rsOSData, "SUB_ACCOUNT_CODE", ""));
                                            rsOPOSData.updateString("BOOK_CODE", UtilFunctions.getString(rsOSData, "BOOK_CODE", ""));
                                            rsOPOSData.updateString("CHARGE_CODE", UtilFunctions.getString(rsOSData, "CHARGE_CODE", ""));
                                            rsOPOSData.updateString("INVOICE_NO", UtilFunctions.getString(rsOSData, "INVOICE_NO", ""));
                                            rsOPOSData.updateString("INVOICE_DATE", UtilFunctions.getString(rsOSData, "INVOICE_DATE", ""));
                                            rsOPOSData.updateString("LINK_NO", UtilFunctions.getString(rsOSData, "LINK_NO", ""));
                                            rsOPOSData.updateString("VOUCHER_NO", UtilFunctions.getString(rsOSData, "VOUCHER_NO", ""));
                                            rsOPOSData.updateString("VOUCHER_DATE", UtilFunctions.getString(rsOSData, "VOUCHER_DATE", ""));
                                            rsOPOSData.updateString("LEGACY_NO", UtilFunctions.getString(rsOSData, "LEGACY_NO", ""));
                                            rsOPOSData.updateDouble("AMOUNT", EITLERPGLOBAL.round(OSAmount - vAmount, 2));
                                            rsOPOSData.updateString("EFFECT", UtilFunctions.getString(rsOSData, "EFFECT", ""));
                                            rsOPOSData.updateString("C_BOOK_CODE", UtilFunctions.getString(rsOSData, "C_BOOK_CODE", ""));
                                            rsOPOSData.updateString("BALE_NO", UtilFunctions.getString(rsOSData, "BALE_NO", ""));
                                            rsOPOSData.updateString("LR_NO", UtilFunctions.getString(rsOSData, "LR_NO", ""));
                                            rsOPOSData.updateString("OBC_NO", UtilFunctions.getString(rsOSData, "OBC_NO", ""));
                                            rsOPOSData.updateBoolean("MATCHED", false);
                                            rsOPOSData.updateString("MATCHED_DATE", "0000-00-00");
                                            rsOPOSData.updateString("CREATED_BY", UtilFunctions.getString(rsOSData, "CREATED_BY", ""));
                                            rsOPOSData.updateString("CREATED_DATE", UtilFunctions.getString(rsOSData, "CREATED_DATE", ""));
                                            rsOPOSData.updateBoolean("CHANGED", true);
                                            rsOPOSData.updateString("CHANGED_DATE", EITLERPGLOBAL.getCurrentDateDB());
                                            rsOPOSData.insertRow();
                                            data.Execute("UPDATE D_FIN_DR_OPENING_OUTSTANDING_DETAIL SET AMOUNT=" + vAmount + ",MATCHED=1,MATCHED_DATE=CURDATE() WHERE INVOICE_TYPE=" + InvoiceType + " AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND SR_NO=" + SrNo, FinanceGlobal.FinURL);
                                        } else {
                                            data.Execute("UPDATE D_FIN_DR_OPENING_OUTSTANDING_DETAIL SET AMOUNT=" + vAmount + ",MATCHED=1,MATCHED_DATE=CURDATE() WHERE INVOICE_TYPE=" + InvoiceType + " AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND SR_NO=" + SrNo, FinanceGlobal.FinURL);
                                        }
                                    } else if (data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND AMOUNT<=" + vAmount + " AND INVOICE_TYPE=" + InvoiceType, FinanceGlobal.FinURL) >= vAmount) {
                                        while (vAmount != 0) {
                                            int SrNo = data.getIntValueFromDB("SELECT SR_NO FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND AMOUNT<=" + vAmount + " AND INVOICE_TYPE=" + InvoiceType + " ORDER BY AMOUNT ", FinanceGlobal.FinURL);
                                            double OSAmount = data.getDoubleValueFromDB("SELECT AMOUNT FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL WHERE VOUCHER_NO='" + ReceiptNo + "' AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND MATCHED=0 AND SR_NO=" + SrNo, FinanceGlobal.FinURL);
                                            data.Execute("UPDATE D_FIN_DR_OPENING_OUTSTANDING_DETAIL SET AMOUNT=" + OSAmount + ",MATCHED=1,MATCHED_DATE=CURDATE() WHERE INVOICE_TYPE=" + InvoiceType + " AND EFFECT='C' AND ENTRY_NO=" + EntryNo + " AND SR_NO=" + SrNo, FinanceGlobal.FinURL);
                                            vAmount = EITLERPGLOBAL.round(EITLERPGLOBAL.round(vAmount, 2) - EITLERPGLOBAL.round(OSAmount, 2), 2);
                                        }
                                    }
                                    rsCredit.next();
                                }
                            }
                            rsTmp.next();
                        }
                    }
                    ProcessDone = true;
                    objProgress.Hide();
                } catch (Exception e) {
                    ProcessDone = true;
                    e.printStackTrace();
                }
            }
        ;
    }

    .start();
    }
    
    private double BalanceTransfer(String MainCode, String PartyCode) {
        String SQL = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", BookCode = "", ChargeCode = "";
        ResultSet rsInvoice = null;
        int InvoiceType = 0, EntryNo = 0;
        double TotalBalance = 0;
        try {
            if (txtMainCode.getText().trim().equals("210010")) {
                InvoiceType = 2;
                BookCode = " AND BOOK_CODE IN ('09','18') ";
                ChargeCode = " AND CHARGE_CODE IN ('02','08') ";
            } else if (txtMainCode.getText().trim().equals("210027")) {
                InvoiceType = 1;
                BookCode = " AND BOOK_CODE IN ('01','12','16') ";
                ChargeCode = " AND CHARGE_CODE IN ('02','04','08') ";
            }
            // SET LAST CLOSING DATE & TO DATE
            ToDate = EITLERPGLOBAL.getCurrentDateDB();
            FromDate = EITLERPGLOBAL.FinFromDateDB;
            SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
            EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
            FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
            // ------------------------------

            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
            SQL = "(SELECT BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND ENTRY_NO=" + EntryNo + " AND EFFECT='D' AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00') " + BookCode + " ) "
                    + "UNION ALL "
                    + "(SELECT A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='D' AND A.APPROVED=1 AND A.CANCELLED=0 "
                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) " + BookCode + " ) "
                    + "ORDER BY VOUCHER_DATE ";

            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
            rsInvoice.first();
            InvoiceNo = "";
            InvoiceDate = "";
            // ---------------------------------------------------------------------

            if (rsInvoice.getRow() > 0) {
                while (!rsInvoice.isAfterLast()) {

                    String VoucherNo = UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "");
                    InvoiceNo = UtilFunctions.getString(rsInvoice, "INVOICE_NO", "");
                    InvoiceDate = UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "");
                    double DebitAmount = 0;
                    double AdjustedAmount = 0;
                    if (clsVoucher.getVoucherType(VoucherNo) != FinanceGlobal.TYPE_SALES_JOURNAL && clsVoucher.getVoucherType(VoucherNo) != FinanceGlobal.TYPE_DEBIT_NOTE) {
                        rsInvoice.next();
                        continue;
                    }
                    if (InvoiceType == 2 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        if (!clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8")) {
                            rsInvoice.next();
                            continue;
                        }
                    } else if (InvoiceType == 1 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        if (!clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("4")) {
                            rsInvoice.next();
                            continue;
                        }
                    }

                    if (!data.IsRecordExist("SELECT * FROM D_FIN_DEBITNOTE_RECEIPT_MAPPING WHERE DEBITNOTE_VOUCHER_NO='" + VoucherNo + "'", FinanceGlobal.FinURL)
                            && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_DEBIT_NOTE) {
                        rsInvoice.next();
                        continue;
                    }

                    if (clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                + "AND MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                + "AND INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + InvoiceDate + "' "
                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                + "AND B.MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                + "AND B.INVOICE_DATE='" + InvoiceDate + "' AND B.INVOICE_NO='" + InvoiceNo + "' ";

                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                    } else {
                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                + "AND MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                + "AND B.MAIN_ACCOUNT_CODE='" + txtMainCode.getText().trim() + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                + "AND B.GRN_NO='" + VoucherNo + "' ";
                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                    }
                    if (DebitAmount == AdjustedAmount) {
                        rsInvoice.next();
                        continue;
                    }

                    TotalBalance = EITLERPGLOBAL.round(TotalBalance + EITLERPGLOBAL.round(DebitAmount - AdjustedAmount, 2), 2);
                    rsInvoice.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return TotalBalance;
        }
        return TotalBalance;
    }

    private void FormatGridDebotOutStanding() {
        DataModelDebotOutStanding = new EITLTableModel();
        TableDebotOutStanding.removeAll();
        TableDebotOutStanding.setModel(DataModelDebotOutStanding);

        TableDebotOutStanding.setAutoResizeMode(TableDebotOutStanding.AUTO_RESIZE_OFF);
        DataModelDebotOutStanding.addColumn("Sr.");
        DataModelDebotOutStanding.addColumn("Main Code");
        DataModelDebotOutStanding.addColumn("Party Type");
        DataModelDebotOutStanding.addColumn("Party Code");
        DataModelDebotOutStanding.addColumn("Party Name");
        DataModelDebotOutStanding.addColumn("Charge Code");
        DataModelDebotOutStanding.addColumn("Dispatch Station");
        DataModelDebotOutStanding.addColumn("Credit Amount");
        DataModelDebotOutStanding.addColumn("Dedit Amount");
        DataModelDebotOutStanding.addColumn("Credit Amount 30");
        DataModelDebotOutStanding.addColumn("Dedit Amount 30");
        DataModelDebotOutStanding.addColumn("Total Amount 30");
        DataModelDebotOutStanding.addColumn("Credit Amount 60");
        DataModelDebotOutStanding.addColumn("Dedit Amount 60");
        DataModelDebotOutStanding.addColumn("Total Amount 60");
        DataModelDebotOutStanding.addColumn("Credit Amount 90");
        DataModelDebotOutStanding.addColumn("Dedit Amount 90");
        DataModelDebotOutStanding.addColumn("Total Amount 90");
        DataModelDebotOutStanding.addColumn("Credit Amount 120");
        DataModelDebotOutStanding.addColumn("Dedit Amount 120");
        DataModelDebotOutStanding.addColumn("Total Amount 120");
        DataModelDebotOutStanding.addColumn("Credit Amount 180");
        DataModelDebotOutStanding.addColumn("Dedit Amount 180");
        DataModelDebotOutStanding.addColumn("Total Amount 180");
        
        for (int k=7;k<=23 ;k++) {
            DataModelDebotOutStanding.SetNumeric(k, true);
        }

        DataModelDebotOutStanding.TableReadOnly(true);
        TableDebotOutStanding.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateDebotOutStanding() {
        String strOrderDateFrom1 = "";
        String strOrderDateTo1 = "";
        String ToDate =" ";
        try {
            FormatGridDebotOutStanding();  //clear existing content of table
            ResultSet rsTmp, rsBuyer, rsIndent, rsRIA;
            strSQL = "";
            strSQL += "SELECT MAIN_CODE,PARTY_TYPE, PARTY_CD,A.PARTY_NAME,CHARGE_CODE,DISPATCH_STATION,C_AMT,D_AMT,DIFFAMT,C30,D30,A30,C60,D60,A60,C90,D90,A90,C120,D120,A120,C180,D180,A180 FROM(SELECT COLUMN_1 AS MAIN_CODE,COLUMN_2 AS PARTY_CD,COLUMN_3 AS PARTY_NAME,SUM(COALESCE(CASE WHEN COLUMN_11 ='C'  THEN COLUMN_12 END,0)) AS C_AMT,SUM(COALESCE(CASE WHEN COLUMN_11 ='D'  THEN COLUMN_12 END,0)) AS D_AMT,SUM(COALESCE(CASE WHEN COLUMN_11 ='C'  THEN COLUMN_12 END,0))-SUM(COALESCE(CASE WHEN COLUMN_11 ='D' THEN COLUMN_12 END,0)) AS DIFFAMT, SUM(COALESCE(CASE WHEN COLUMN_11 ='C' AND COLUMN_15 = '30' THEN COLUMN_12 END,0)) AS C30,SUM(COALESCE(CASE WHEN COLUMN_11 ='D' AND COLUMN_15 = '30' THEN COLUMN_12 END,0)) AS D30,SUM(COALESCE(CASE WHEN COLUMN_11 ='C' AND COLUMN_15 = '30' THEN COLUMN_12 END,0))-SUM(COALESCE(CASE WHEN COLUMN_11 ='D' AND COLUMN_15 = '30' THEN COLUMN_12 END,0)) AS A30,SUM(COALESCE(CASE WHEN COLUMN_11 ='C' AND COLUMN_15 = '31-60' THEN COLUMN_12 END,0)) AS C60,SUM(COALESCE(CASE WHEN COLUMN_11 ='D' AND COLUMN_15 = '31-60' THEN COLUMN_12 END,0)) AS D60,SUM(COALESCE(CASE WHEN COLUMN_11 ='C' AND COLUMN_15 = '31-60' THEN COLUMN_12 END,0))-SUM(COALESCE(CASE WHEN COLUMN_11 ='D' AND COLUMN_15 = '31-60' THEN COLUMN_12 END,0)) AS A60,SUM(COALESCE(CASE WHEN COLUMN_11 ='C' AND COLUMN_15 = '61-90' THEN COLUMN_12 END,0)) AS C90,SUM(COALESCE(CASE WHEN COLUMN_11 ='D' AND COLUMN_15 = '61-90' THEN COLUMN_12 END,0)) AS D90,SUM(COALESCE(CASE WHEN COLUMN_11 ='C' AND COLUMN_15 = '61-90' THEN COLUMN_12 END,0))-SUM(COALESCE(CASE WHEN COLUMN_11 ='D' AND COLUMN_15 = '61-90' THEN COLUMN_12 END,0)) AS A90,SUM(COALESCE(CASE WHEN COLUMN_11 ='C' AND COLUMN_15 = '91-180' THEN COLUMN_12 END,0)) AS C120,SUM(COALESCE(CASE WHEN COLUMN_11 ='D' AND COLUMN_15 = '91-180' THEN COLUMN_12 END,0)) AS D120,SUM(COALESCE(CASE WHEN COLUMN_11 ='C' AND COLUMN_15 = '91-180' THEN COLUMN_12 END,0))-SUM(COALESCE(CASE WHEN COLUMN_11 ='D' AND COLUMN_15 = '91-180' THEN COLUMN_12 END,0)) AS A120,SUM(COALESCE(CASE WHEN COLUMN_11 ='C' AND COLUMN_15 = '180' THEN COLUMN_12 END,0)) AS C180,SUM(COALESCE(CASE WHEN COLUMN_11 ='D' AND COLUMN_15 = '180' THEN COLUMN_12 END,0)) AS D180,SUM(COALESCE(CASE WHEN COLUMN_11 ='C' AND COLUMN_15 = '180' THEN COLUMN_12 END,0))-SUM(COALESCE(CASE WHEN COLUMN_11 ='D' AND COLUMN_15 = '180' THEN COLUMN_12 END,0)) AS A180,AVG(COLUMN_14),COLUMN_22 AS CHARGE_CODE,COLUMN_24 AS DISPATCH_STATION,COLUMN_20 AS PARTY_TYPE FROM FINANCE.D_FIN_REPORT_TRANSACTION ";
            strSQL += " WHERE  USER_ID = " + EITLERPGLOBAL.gUserID;

            if (!txtAgentwise.getText().equals("")) {
                strSQL += " AND SUBSTRING(COLUMN_2,1,2) IN (" + txtAgentwise.getText() + ") ";
            }
            if (!txtSubCode.getText().equals("")) {
                strSQL += " AND COLUMN_2 =" + txtSubCode.getText() + "";
            }
            strSQL += " AND REPORT_ID =1 GROUP BY COLUMN_1,COLUMN_2,COLUMN_3,COLUMN_22 ,COLUMN_24 ,COLUMN_20) AS A ";

            if (Opg1Only.isSelected()) {
                strSQL += " WHERE CHARGE_CODE IN (01) AND CHARGE_CODE!=''";
            } else if (Opg248Only.isSelected()) {
                strSQL += " WHERE CHARGE_CODE IN (02,04,05,08) AND CHARGE_CODE!=''";
            } else if (Opg28Only.isSelected()) {
                strSQL += " WHERE CHARGE_CODE IN (02,08) AND CHARGE_CODE!=''";
            } else if (Opg4Only.isSelected()) {
                strSQL += " WHERE CHARGE_CODE IN (04) AND CHARGE_CODE!=''";
            }
            strSQL += "  ORDER BY PARTY_CD ";

            System.out.println(strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[30];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("MAIN_CODE");
                    rowData[2] = rsTmp.getString("PARTY_TYPE");
                    rowData[3] = rsTmp.getString("PARTY_CD");
                    rowData[4] = rsTmp.getString("PARTY_NAME");
                    rowData[5] = rsTmp.getString("CHARGE_CODE");
                    rowData[6] = rsTmp.getString("DISPATCH_STATION");
                    rowData[7] = rsTmp.getString("C_AMT");
                    rowData[8] = rsTmp.getString("D_AMT");
                    rowData[9] = rsTmp.getString("DIFFAMT");
                    rowData[10] = rsTmp.getString("C30");
                    rowData[11] = rsTmp.getString("D30");
                    rowData[12] = rsTmp.getString("A30");
                    rowData[13] = rsTmp.getString("C60");
                    rowData[14] = rsTmp.getString("D60");
                    rowData[15] = rsTmp.getString("A60");
                    rowData[16] = rsTmp.getString("C90");
                    rowData[17] = rsTmp.getString("D90");
                    rowData[18] = rsTmp.getString("A90");
                    rowData[19] = rsTmp.getString("C120");
                    rowData[20] = rsTmp.getString("D120");
                    rowData[21] = rsTmp.getString("A120");
                    rowData[22] = rsTmp.getString("C180");
                    rowData[23] = rsTmp.getString("D180");
                    rowData[24] = rsTmp.getString("A180");

                    DataModelDebotOutStanding.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridDebotOutStandingDetail() {
        DataModelDebotOutStandingDetail = new EITLTableModel();
        TableDebotOutStandingDetail.removeAll();
        TableDebotOutStandingDetail.setModel(DataModelDebotOutStandingDetail);
        
        TableDebotOutStandingDetail.setAutoResizeMode(TableDebotOutStandingDetail.AUTO_RESIZE_OFF);

        DataModelDebotOutStandingDetail.addColumn("Sr.");
        DataModelDebotOutStandingDetail.addColumn("Main Code");
        DataModelDebotOutStandingDetail.addColumn("Party Type");
        DataModelDebotOutStandingDetail.addColumn("Party Code");
        DataModelDebotOutStandingDetail.addColumn("Party Name");
        DataModelDebotOutStandingDetail.addColumn("Dispatch Station");
        DataModelDebotOutStandingDetail.addColumn("Charge Code");
        DataModelDebotOutStandingDetail.addColumn("TR Code");
        DataModelDebotOutStandingDetail.addColumn("Voucher No");
        DataModelDebotOutStandingDetail.addColumn("Voucher Date");
        DataModelDebotOutStandingDetail.addColumn("Legacy No");
        DataModelDebotOutStandingDetail.addColumn("Invoice No");
        DataModelDebotOutStandingDetail.addColumn("Invoice Date");
        DataModelDebotOutStandingDetail.addColumn("Due Date");
        DataModelDebotOutStandingDetail.addColumn("Link No");
        DataModelDebotOutStandingDetail.addColumn("Amount");
        DataModelDebotOutStandingDetail.addColumn("Total Amount 30");
        DataModelDebotOutStandingDetail.addColumn("Total Amount 60");
        DataModelDebotOutStandingDetail.addColumn("Total Amount 90");
        DataModelDebotOutStandingDetail.addColumn("Total Amount 120");
        DataModelDebotOutStandingDetail.addColumn("Total Amount 180");
        DataModelDebotOutStandingDetail.addColumn("Total Amount Above 180");
        DataModelDebotOutStandingDetail.addColumn("Effect");
        //DataModelDebotOutStandingDetail.addColumn("Total Amount");
        
        DataModelDebotOutStandingDetail.SetNumeric(15, true);
        DataModelDebotOutStandingDetail.SetNumeric(16, true);
        DataModelDebotOutStandingDetail.SetNumeric(17, true);
        DataModelDebotOutStandingDetail.SetNumeric(18, true);
        DataModelDebotOutStandingDetail.SetNumeric(19, true);
        DataModelDebotOutStandingDetail.SetNumeric(20, true);

        DataModelDebotOutStandingDetail.TableReadOnly(true);
        TableDebotOutStandingDetail.getColumnModel().getColumn(0).setMaxWidth(50);
    }
    
    private void GenerateDebotOutStandingDetail() {
        String strOrderDateFrom1 = "";
        String strOrderDateTo1 = "";
        try {
            FormatGridDebotOutStandingDetail();  //clear existing content of table
            ResultSet rsTmp, rsBuyer, rsIndent, rsRIA;
            strSQL = "";
         //   strSQL += " SELECT MAIN_CODE,PARTY_TYPE, PARTY_CD,A.PARTY_NAME,DISPATCH_STATION,CHARGE_CODE,TR,VOU_NO,VOU_DATE,LEGACY_NO,INVNO,INVDATE,LINK_NO,AMT,A30,A60,A90,A120,A180, EFFECT, COLUMN_14 FROM (SELECT COLUMN_1 AS MAIN_CODE,COLUMN_2 AS PARTY_CD,COLUMN_3 AS PARTY_NAME,COLUMN_4 AS TR,COLUMN_5 AS VOU_NO,COLUMN_6 AS VOU_DATE,COLUMN_7 AS LEGACY_NO,COLUMN_17 AS CHCD,COLUMN_8 AS INVNO,COLUMN_9 AS INVDATE,COLUMN_10 AS LINK_NO,COLUMN_12 AS AMT,COALESCE(CASE WHEN COLUMN_15 = '30' THEN COLUMN_12 END,0) AS A30,COALESCE(CASE WHEN COLUMN_15 = '31-60' THEN COLUMN_12 END,0) AS A60,COALESCE(CASE WHEN COLUMN_15 = '61-90' THEN COLUMN_12 END,0) AS A90,COALESCE(CASE WHEN COLUMN_15 = '91-180' THEN COLUMN_12 END,0) AS A120,COALESCE(CASE WHEN COLUMN_15 = '180' THEN COLUMN_12 END,0) AS A180,COLUMN_11 AS EFFECT,COLUMN_14 FROM FINANCE.D_FIN_REPORT_TRANSACTION ";
         //    strSQL += " SELECT MAIN_CODE,PARTY_TYPE, PARTY_CD,A.PARTY_NAME,DISPATCH_STATION,CHARGE_CODE,TR,VOU_NO,VOU_DATE,LEGACY_NO,CHCD,INVNO,INVDATE,DUE_DATE,LINK_NO,AMT,A30,A60,A90,A120,A180, EFFECT, COLUMN_14 FROM (SELECT COLUMN_1 AS MAIN_CODE,COLUMN_2 AS PARTY_CD,COLUMN_3 AS PARTY_NAME,COLUMN_4 AS TR,COLUMN_5 AS VOU_NO,COLUMN_6 AS VOU_DATE,COLUMN_7 AS LEGACY_NO,COLUMN_17 AS CHCD,COLUMN_8 AS INVNO,COLUMN_9 AS INVDATE,COLUMN_10 AS LINK_NO,COLUMN_12 AS AMT,COALESCE(CASE WHEN COLUMN_15 = '30' THEN COLUMN_12 END,0) AS A30,COALESCE(CASE WHEN COLUMN_15 = '31-60' THEN COLUMN_12 END,0) AS A60,COALESCE(CASE WHEN COLUMN_15 = '61-90' THEN COLUMN_12 END,0) AS A90,COALESCE(CASE WHEN COLUMN_15 = '91-180' THEN COLUMN_12 END,0) AS A120,COALESCE(CASE WHEN COLUMN_15 = '180' THEN COLUMN_12 END,0) AS A180,COLUMN_11 AS EFFECT,COLUMN_14,COLUMN_22 AS CHARGE_CODE,COLUMN_24 AS DISPATCH_STATION,COLUMN_26 AS DUE_DATE,COLUMN_20 AS PARTY_TYPE FROM FINANCE.D_FIN_REPORT_TRANSACTION ";
             strSQL += " SELECT MAIN_CODE,PARTY_TYPE, PARTY_CD,A.PARTY_NAME,DISPATCH_STATION,CHARGE_CODE,TR,VOU_NO,VOU_DATE,LEGACY_NO,CHCD,INVNO,INVDATE,DUE_DATE,LINK_NO,AMT,A30,A60,A90,A120,A180,A180ABOVE, EFFECT, COLUMN_14 FROM (SELECT COLUMN_1 AS MAIN_CODE,COLUMN_2 AS PARTY_CD,COLUMN_3 AS PARTY_NAME,COLUMN_4 AS TR,COLUMN_5 AS VOU_NO,COLUMN_6 AS VOU_DATE,COLUMN_7 AS LEGACY_NO,COLUMN_17 AS CHCD,COLUMN_8 AS INVNO,COLUMN_9 AS INVDATE,COLUMN_10 AS LINK_NO,COLUMN_12 AS AMT,COALESCE(CASE WHEN COLUMN_15 = '30' THEN COLUMN_12 END,0) AS A30,COALESCE(CASE WHEN COLUMN_15 = '31-60' THEN COLUMN_12 END,0) AS A60,"
                     + "COALESCE(CASE WHEN COLUMN_15 = '61-180' AND DATEDIFF('"+EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim())+"',STR_TO_DATE(COLUMN_6,'%d/%m/%Y'))>=61 AND DATEDIFF('"+EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim())+"',STR_TO_DATE(COLUMN_6,'%d/%m/%Y'))<=90 THEN COLUMN_12 END,0) AS A90,"
                     + "COALESCE(CASE WHEN COLUMN_15 = '61-180' AND DATEDIFF('"+EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim())+"',STR_TO_DATE(COLUMN_6,'%d/%m/%Y'))>=91 AND DATEDIFF('"+EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim())+"',STR_TO_DATE(COLUMN_6,'%d/%m/%Y'))<=120 THEN COLUMN_12 END,0) AS A120,"
                     + "COALESCE(CASE WHEN COLUMN_15 = '61-180' AND DATEDIFF('"+EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim())+"',STR_TO_DATE(COLUMN_6,'%d/%m/%Y'))>=121 AND DATEDIFF('"+EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim())+"',STR_TO_DATE(COLUMN_6,'%d/%m/%Y'))<=180 THEN COLUMN_12 END,0) AS A180,"
                     + "COALESCE(CASE WHEN COLUMN_15 = '180' THEN COLUMN_12 END,0) AS A180ABOVE,"
                     + "COLUMN_11 AS EFFECT,COLUMN_14,COLUMN_22 AS CHARGE_CODE,COLUMN_24 AS DISPATCH_STATION,COLUMN_26 AS DUE_DATE,COLUMN_20 AS PARTY_TYPE FROM FINANCE.D_FIN_REPORT_TRANSACTION ";
            
            strSQL += " WHERE  USER_ID = "+ EITLERPGLOBAL.gUserID; 
            
            if (!txtAgentwise.getText().equals("")) {
                strSQL += " AND SUBSTRING(COLUMN_2,1,2) IN (" + txtAgentwise.getText() + ") ";
            }
            if (!txtSubCode.getText().equals("")) {
                strSQL += " AND COLUMN_2 = '"+ txtSubCode.getText() + "'";
            }

            
            
            strSQL += " AND REPORT_ID=1) AS A  ";
           
            if(Opg1Only.isSelected())
            {
                strSQL += " WHERE CHARGE_CODE IN (01) AND CHARGE_CODE!=''";
            }
            else if(Opg248Only.isSelected())
            {
                strSQL += " WHERE CHARGE_CODE IN (02,04,05,08) AND CHARGE_CODE!=''";
            }
            else if(Opg28Only.isSelected())
            {
                strSQL += " WHERE CHARGE_CODE IN (02,08) AND CHARGE_CODE!=''";
            }   
            else if (Opg4Only.isSelected()) {
                strSQL += " WHERE CHARGE_CODE IN (04) AND CHARGE_CODE!=''";
            }
            
            strSQL += " ORDER BY PARTY_CD,VOU_DATE ";
             
            
            System.out.println(strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[30];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("MAIN_CODE");
                    rowData[2] = rsTmp.getString("PARTY_TYPE");
                    rowData[3] = rsTmp.getString("PARTY_CD");
                    rowData[4] = rsTmp.getString("PARTY_NAME");
                    rowData[5] = rsTmp.getString("DISPATCH_STATION");
                    rowData[6] = rsTmp.getString("CHARGE_CODE");
                    rowData[7] = rsTmp.getString("TR");
                    rowData[8] = rsTmp.getString("VOU_NO");
                    rowData[9] = rsTmp.getString("VOU_DATE");
                    rowData[10] = rsTmp.getString("LEGACY_NO");
                    rowData[11] = rsTmp.getString("INVNO");
                    rowData[12] = rsTmp.getString("INVDATE");
                    rowData[13] = rsTmp.getString("DUE_DATE");
                    rowData[14] = rsTmp.getString("LINK_NO");
                    rowData[15] = rsTmp.getString("AMT");
                    rowData[16] = rsTmp.getString("A30");
                    rowData[17] = rsTmp.getString("A60");
                    rowData[18] = rsTmp.getString("A90");
                    rowData[19] = rsTmp.getString("A120");
                    rowData[20] = rsTmp.getString("A180");
                    rowData[21] = rsTmp.getString("A180ABOVE");
                    rowData[22] = rsTmp.getString("EFFECT");

                    DataModelDebotOutStandingDetail.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private void FormatGridInvoiceWiseDebotOutStanding() {
        DataModelInvoiceWiseDebotOutStanding = new EITLTableModel();
        TableInvoiceWiseDebotOutStanding.removeAll();
        TableInvoiceWiseDebotOutStanding.setModel(DataModelInvoiceWiseDebotOutStanding);
        
        TableInvoiceWiseDebotOutStanding.setAutoResizeMode(TableInvoiceWiseDebotOutStanding.AUTO_RESIZE_OFF);

        DataModelInvoiceWiseDebotOutStanding.addColumn("Sr.");
        DataModelInvoiceWiseDebotOutStanding.addColumn("Main Code");
        DataModelInvoiceWiseDebotOutStanding.addColumn("Party Code");
        DataModelInvoiceWiseDebotOutStanding.addColumn("Party Name");
        DataModelInvoiceWiseDebotOutStanding.addColumn("Doc Date");
        DataModelInvoiceWiseDebotOutStanding.addColumn("Link No");
        DataModelInvoiceWiseDebotOutStanding.addColumn("Invoice No");
        DataModelInvoiceWiseDebotOutStanding.addColumn("Ref. No");
        DataModelInvoiceWiseDebotOutStanding.addColumn("Due Date");
        DataModelInvoiceWiseDebotOutStanding.addColumn("Ageing Days");
        DataModelInvoiceWiseDebotOutStanding.addColumn("Invoice Amt");
        DataModelInvoiceWiseDebotOutStanding.addColumn("RC Amt");
        DataModelInvoiceWiseDebotOutStanding.addColumn("Balance Amt");
        DataModelInvoiceWiseDebotOutStanding.addColumn("Description");
        DataModelInvoiceWiseDebotOutStanding.addColumn("Days");
        DataModelInvoiceWiseDebotOutStanding.addColumn("Charge Code");
        DataModelInvoiceWiseDebotOutStanding.addColumn("Party Type");
        //DataModelDebotOutStandingDetail.addColumn("Total Amount");
        
        DataModelInvoiceWiseDebotOutStanding.SetNumeric(10, true);
        DataModelInvoiceWiseDebotOutStanding.SetNumeric(11, true);
        DataModelInvoiceWiseDebotOutStanding.SetNumeric(12, true);

        DataModelInvoiceWiseDebotOutStanding.TableReadOnly(true);
        TableInvoiceWiseDebotOutStanding.getColumnModel().getColumn(0).setMaxWidth(50);
    }
    
    private void GenerateInvoiceWiseDebotOutStanding() {
        String strOrderDateFrom1 = "";
        String strOrderDateTo1 = "";
        try {
            //FormatGridInvoiceWiseDebotOutStanding();  //clear existing content of table
            ResultSet rsTmp, rsBuyer, rsIndent, rsRIA;
            strSQL = "";
         //   strSQL += " SELECT MAIN_CODE,PARTY_TYPE, PARTY_CD,A.PARTY_NAME,DISPATCH_STATION,CHARGE_CODE,TR,VOU_NO,VOU_DATE,LEGACY_NO,INVNO,INVDATE,LINK_NO,AMT,A30,A60,A90,A120,A180, EFFECT, COLUMN_14 FROM (SELECT COLUMN_1 AS MAIN_CODE,COLUMN_2 AS PARTY_CD,COLUMN_3 AS PARTY_NAME,COLUMN_4 AS TR,COLUMN_5 AS VOU_NO,COLUMN_6 AS VOU_DATE,COLUMN_7 AS LEGACY_NO,COLUMN_17 AS CHCD,COLUMN_8 AS INVNO,COLUMN_9 AS INVDATE,COLUMN_10 AS LINK_NO,COLUMN_12 AS AMT,COALESCE(CASE WHEN COLUMN_15 = '30' THEN COLUMN_12 END,0) AS A30,COALESCE(CASE WHEN COLUMN_15 = '31-60' THEN COLUMN_12 END,0) AS A60,COALESCE(CASE WHEN COLUMN_15 = '61-90' THEN COLUMN_12 END,0) AS A90,COALESCE(CASE WHEN COLUMN_15 = '91-180' THEN COLUMN_12 END,0) AS A120,COALESCE(CASE WHEN COLUMN_15 = '180' THEN COLUMN_12 END,0) AS A180,COLUMN_11 AS EFFECT,COLUMN_14 FROM FINANCE.D_FIN_REPORT_TRANSACTION ";
             //strSQL += " SELECT MAIN_CODE,PARTY_TYPE, PARTY_CD,A.PARTY_NAME,DISPATCH_STATION,CHARGE_CODE,TR,VOU_NO,VOU_DATE,LEGACY_NO,CHCD,INVNO,INVDATE,DUE_DATE,LINK_NO,AMT,A30,A60,A90,A120,A180, EFFECT, COLUMN_14 FROM (SELECT COLUMN_1 AS MAIN_CODE,COLUMN_2 AS PARTY_CD,COLUMN_3 AS PARTY_NAME,COLUMN_4 AS TR,COLUMN_5 AS VOU_NO,COLUMN_6 AS VOU_DATE,COLUMN_7 AS LEGACY_NO,COLUMN_17 AS CHCD,COLUMN_8 AS INVNO,COLUMN_9 AS INVDATE,COLUMN_10 AS LINK_NO,COLUMN_12 AS AMT,COALESCE(CASE WHEN COLUMN_15 = '30' THEN COLUMN_12 END,0) AS A30,COALESCE(CASE WHEN COLUMN_15 = '31-60' THEN COLUMN_12 END,0) AS A60,COALESCE(CASE WHEN COLUMN_15 = '61-90' THEN COLUMN_12 END,0) AS A90,COALESCE(CASE WHEN COLUMN_15 = '91-180' THEN COLUMN_12 END,0) AS A120,COALESCE(CASE WHEN COLUMN_15 = '180' THEN COLUMN_12 END,0) AS A180,COLUMN_11 AS EFFECT,COLUMN_14,COLUMN_22 AS CHARGE_CODE,COLUMN_24 AS DISPATCH_STATION,COLUMN_26 AS DUE_DATE,COLUMN_20 AS PARTY_TYPE FROM FINANCE.D_FIN_REPORT_TRANSACTION ";

            strSQL += " SELECT * FROM (SELECT MAIN_CODE,PARTY_CODE,PARTY_NAME,DOC_DATE,LINK_NO, INVNO , REF_NO,DUE_DATE,DAYS AS AGEING_DAYS,INVAMOUNT,COALESCE(RCAMOUNT,0) AS RC_AMOUNT, INVAMOUNT- COALESCE(RCAMOUNT,0) AS BAL_AMOUNT,DESCRIPTION,DAYS1 AS DAYS,CHARGE_CODE,PARTY_TYPE FROM (SELECT COLUMN_1 AS MAIN_CODE,COLUMN_2 AS PARTY_CODE,CONCAT_WS(', ',COLUMN_3,COLUMN_24) AS PARTY_NAME,COLUMN_6 AS DOC_DATE,COLUMN_10 AS LINK_NO,COLUMN_8 AS INVNO, COLUMN_5 AS REF_NO,COLUMN_26 AS DUE_DATE ,COLUMN_15 AS DAYS,COLUMN_12 AS INVAMOUNT,COLUMN_21 AS DESCRIPTION, COLUMN_30 AS DAYS1,COLUMN_22 AS CHARGE_CODE,COLUMN_20 AS PARTY_TYPE FROM FINANCE.D_FIN_REPORT_TRANSACTION ";

            //strSQL += " WHERE USER_ID ='"+EITLERPGLOBAL.gUserID+"' AND COLUMN_21='INV'  AND REPORT_ID =1  ) AS INV LEFT JOIN  (SELECT COLUMN_1 AS RCMAIN_CODE,COLUMN_2 AS RCPARTY_CODE,COLUMN_10 AS RCLINK_NO,COLUMN_8 AS RCINVNO,COLUMN_6 AS RCDOC_DATE, SUM(COLUMN_12) AS RCAMOUNT FROM FINANCE.D_FIN_REPORT_TRANSACTION ";
            strSQL += " WHERE USER_ID ='"+EITLERPGLOBAL.gUserID+"' AND COLUMN_21='INV'  AND REPORT_ID =1  ) AS INV LEFT JOIN  (SELECT COLUMN_1 AS RCMAIN_CODE,COLUMN_2 AS RCPARTY_CODE,COLUMN_10 AS RCLINK_NO,COLUMN_8 AS RCINVNO,COLUMN_9 AS RCDOC_DATE, SUM(COLUMN_12) AS RCAMOUNT FROM FINANCE.D_FIN_REPORT_TRANSACTION ";
            
            
            //strSQL += " WHERE USER_ID ='"+EITLERPGLOBAL.gUserID+"' AND REPORT_ID =1 AND SUBSTRING(COLUMN_5,1,2)  NOT IN  ('DN','SJ')  GROUP BY COLUMN_1 ,COLUMN_2 ,COLUMN_10 ,COLUMN_8 ,COLUMN_6) AS RC ON MAIN_CODE =RCMAIN_CODE  AND RCPARTY_CODE = PARTY_CODE AND RCINVNO = INVNO " ;
            strSQL += " WHERE USER_ID ='"+EITLERPGLOBAL.gUserID+"' AND REPORT_ID =1 AND SUBSTRING(COLUMN_5,1,2)  NOT IN  ('DN','SJ')  GROUP BY COLUMN_1 ,COLUMN_2 ,COLUMN_10 ,COLUMN_8 ,COLUMN_9) AS RC ON MAIN_CODE =RCMAIN_CODE  AND RCPARTY_CODE = PARTY_CODE AND RCINVNO = INVNO AND RCDOC_DATE=DOC_DATE" ;
            
             if (txtMainCode.getText().equals("210027"))
             {
                
            
             strSQL +=" AND RCLINK_NO = LINK_NO";
              }
            strSQL += " UNION ALL ";
            
            strSQL += " SELECT MAIN_CODE,PARTY_CODE,CONCAT(PARTY_NAME,'- TOTAL -'),'--TOTAL--','--','--','--','--','--',SUM(INVAMOUNT),SUM(RC_AMOUNT),SUM(BAL_AMOUNT),   'TOT_INV--','--', CHARGE_CODE,PARTY_TYPE FROM  (SELECT MAIN_CODE,PARTY_CODE,PARTY_NAME,DOC_DATE,LINK_NO, INVNO , REF_NO,DUE_DATE,DAYS,INVAMOUNT,COALESCE(RCAMOUNT,0) AS RC_AMOUNT, INVAMOUNT- COALESCE(RCAMOUNT,0) AS BAL_AMOUNT,DESCRIPTION,DAYS1,CHARGE_CODE,PARTY_TYPE FROM (SELECT COLUMN_1 AS MAIN_CODE,COLUMN_2 AS PARTY_CODE,CONCAT_WS(', ',COLUMN_3,COLUMN_24) AS PARTY_NAME,COLUMN_6 AS DOC_DATE,COLUMN_10 AS LINK_NO,COLUMN_8 AS INVNO, COLUMN_5 AS REF_NO,COLUMN_26 AS DUE_DATE ,COLUMN_15 AS DAYS,COLUMN_12 AS INVAMOUNT,COLUMN_21 AS DESCRIPTION, COLUMN_30 AS DAYS1,COLUMN_22 AS CHARGE_CODE,COLUMN_20 AS PARTY_TYPE FROM FINANCE.D_FIN_REPORT_TRANSACTION ";
            
            //strSQL += " WHERE USER_ID ='"+EITLERPGLOBAL.gUserID+"' AND COLUMN_21='INV'  AND REPORT_ID =1  ) AS INV LEFT JOIN  (SELECT COLUMN_1 AS RCMAIN_CODE,COLUMN_2 AS RCPARTY_CODE,COLUMN_10 AS RCLINK_NO,COLUMN_8 AS RCINVNO,COLUMN_6 AS RCDOC_DATE, SUM(COLUMN_12) AS RCAMOUNT FROM FINANCE.D_FIN_REPORT_TRANSACTION ";
            strSQL += " WHERE USER_ID ='"+EITLERPGLOBAL.gUserID+"' AND COLUMN_21='INV'  AND REPORT_ID =1  ) AS INV LEFT JOIN  (SELECT COLUMN_1 AS RCMAIN_CODE,COLUMN_2 AS RCPARTY_CODE,COLUMN_10 AS RCLINK_NO,COLUMN_8 AS RCINVNO,COLUMN_9 AS RCDOC_DATE, SUM(COLUMN_12) AS RCAMOUNT FROM FINANCE.D_FIN_REPORT_TRANSACTION ";
            
            //strSQL += " WHERE USER_ID ='"+EITLERPGLOBAL.gUserID+"' AND REPORT_ID =1 AND SUBSTRING(COLUMN_5,1,2)  NOT IN  ('DN','SJ')  GROUP BY COLUMN_1 ,COLUMN_2 ,COLUMN_10 ,COLUMN_8 ,COLUMN_6) AS RC ON MAIN_CODE =RCMAIN_CODE AND RCPARTY_CODE = PARTY_CODE AND RCINVNO = INVNO";
            strSQL += " WHERE USER_ID ='"+EITLERPGLOBAL.gUserID+"' AND REPORT_ID =1 AND SUBSTRING(COLUMN_5,1,2)  NOT IN  ('DN','SJ')  GROUP BY COLUMN_1 ,COLUMN_2 ,COLUMN_10 ,COLUMN_8 ,COLUMN_9) AS RC ON MAIN_CODE =RCMAIN_CODE AND RCPARTY_CODE = PARTY_CODE AND RCINVNO = INVNO AND RCDOC_DATE=DOC_DATE";
            
            
            
            if (txtMainCode.getText().equals("210027"))
             {
                
                        strSQL +=" AND RCLINK_NO = LINK_NO ";
              } 
            
            
            
            strSQL +=" ) AS GRP GROUP BY  MAIN_CODE,PARTY_CODE,PARTY_NAME,CHARGE_CODE,PARTY_TYPE) AS GRP1 ";
            
//            //------------------------------------------------
//            strSQL += " SELECT * FROM (SELECT * FROM (SELECT COLUMN_1 AS MAIN_CODE,COLUMN_2 AS PARTY_CODE,CONCAT_WS(', ',COLUMN_3,COLUMN_24) AS PARTY_NAME,COLUMN_6 AS DOC_DATE,COLUMN_10 AS LINK_NO,COLUMN_8 AS INVNO,COLUMN_5 AS REF_NO,COLUMN_26 AS DUE_DATE ,COLUMN_15 AS AGEING_DAYS,COLUMN_12 AS AMOUNT,COLUMN_21 AS DESCRIPTION,COLUMN_30 AS DAYS,COLUMN_22 AS CHARGE_CODE,COLUMN_20 AS PARTY_TYPE FROM FINANCE.D_FIN_REPORT_TRANSACTION ";
//
//            strSQL += " WHERE USER_ID ='"+EITLERPGLOBAL.gUserID+"' AND COLUMN_21='INV'  AND REPORT_ID =1) AS B UNION ALL ";
//            
//            strSQL += " SELECT MAIN_CODE,PARTY_CODE,CONCAT(PARTY_NAME,'- TOTAL -'),'--TOTAL--','--','--','--','--','--',SUM(AMOUNT),'TOT_INV--','--', CHARGE_CODE,PARTY_TYPE FROM (SELECT COLUMN_1 AS MAIN_CODE,COLUMN_2 AS PARTY_CODE,CONCAT_WS(', ',COLUMN_3,COLUMN_24) AS PARTY_NAME,COLUMN_6 AS DOC_DATE,COLUMN_10,COLUMN_8,COLUMN_5 AS REF_NO,COLUMN_26 AS DUE_DATE ,COLUMN_15 AS AGEING_DAYS,COLUMN_12 AS AMOUNT,COLUMN_21 AS DESCRIPTION,COLUMN_30 AS DAYS,COLUMN_22 AS CHARGE_CODE,COLUMN_20 AS PARTY_TYPE FROM FINANCE.D_FIN_REPORT_TRANSACTION WHERE USER_ID ='"+EITLERPGLOBAL.gUserID+"' AND COLUMN_21='INV'  AND REPORT_ID =1) AS A ";
//            
//            strSQL += " GROUP BY MAIN_CODE,PARTY_CODE,PARTY_NAME,CHARGE_CODE,PARTY_TYPE) AS M ";
            //--------------------------------------------------
            
            if(Opg1Only.isSelected())
            {
                strSQL += " WHERE CHARGE_CODE IN (01) AND CHARGE_CODE!=''";
            }
            else if(Opg248Only.isSelected())
            {
                strSQL += " WHERE CHARGE_CODE IN (02,04,05,08) AND CHARGE_CODE!=''";
            }
            else if(Opg28Only.isSelected())
            {
                strSQL += " WHERE CHARGE_CODE IN (02,08) AND CHARGE_CODE!=''";
            }   
            else if (Opg4Only.isSelected()) {
                strSQL += " WHERE CHARGE_CODE IN (04) AND CHARGE_CODE!='' ";
            }
            else if (OpgAll.isSelected()) {
                strSQL += " WHERE (CHARGE_CODE IN (01,02,03,04,05,06,07,08,09) OR CHARGE_CODE='') ";
            }
            
            if (!txtAgentwise.getText().equals("")) {
                strSQL += " AND SUBSTRING(PARTY_CODE,1,2) IN (" + txtAgentwise.getText() + ") ";
            }
            if (!txtSubCode.getText().equals("")) {
                strSQL += " AND PARTY_CODE = '"+ txtSubCode.getText() + "'";
            }
            
            strSQL += " ORDER BY MAIN_CODE,PARTY_CODE,PARTY_NAME,DESCRIPTION,REF_NO,DUE_DATE ";
             
            
            System.out.println(strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[30];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("MAIN_CODE");
                    rowData[2] = rsTmp.getString("PARTY_CODE");
                    rowData[3] = rsTmp.getString("PARTY_NAME");
                    rowData[4] = rsTmp.getString("DOC_DATE");
                    rowData[5] = rsTmp.getString("LINK_NO");
                    rowData[6] = rsTmp.getString("INVNO");
                    rowData[7] = rsTmp.getString("REF_NO");
                    rowData[8] = rsTmp.getString("DUE_DATE");
                    rowData[9] = rsTmp.getString("AGEING_DAYS");
                    rowData[10] = rsTmp.getString("INVAMOUNT");
                    rowData[11] = rsTmp.getString("RC_AMOUNT");
                    rowData[12] = rsTmp.getString("BAL_AMOUNT");
                    rowData[13] = rsTmp.getString("DESCRIPTION");
                    rowData[14] = rsTmp.getString("DAYS");
                    rowData[15] = rsTmp.getString("CHARGE_CODE");
                    rowData[16] = rsTmp.getString("PARTY_TYPE");

                    DataModelInvoiceWiseDebotOutStanding.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    /*
    private void GenerateDetail(){
    
        int InvoiceType = EITLERPGLOBAL.getComboCode(cmbInvoiceType);
        if (InvoiceType == 1) {
            txtMainCode.setText("210027");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 2) {
            txtMainCode.setText("210010");
            txtMainCode.setEnabled(false);
        } else if (InvoiceType == 3) {
            txtMainCode.setText("210072");
            txtMainCode.setEnabled(false);
        }
        if (!Validate()) {
            return;
        }
        ReportID = 1;
        new Thread() {
            public void run() {

                double CrAmount = 0, DrAmount = 0, ClosingBalance = 0;
                String SQL = "", MainCode = "", PartyCode = "", PartyName = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "";
                ResultSet rsParty = null, rsInvoice = null, rsOpening = null, rsVoucher = null, rsReport = null;
                int EntryNo = 0, Max = 0, Counter = 0, RecordCounter = 0;
                Connection conn = null;
                Statement stmt = null;
                boolean PartyChange = false;
                int InvoiceType = 0;
                try {
                    data.Execute("DELETE FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=1", FinanceGlobal.FinURL);
                    conn = data.getConn(FinanceGlobal.FinURL);
                    stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    //rsReport = stmt.executeQuery("SELECT * FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID="+EITLERPGLOBAL.gUserID+" AND REPORT_ID=1 LIMIT 1");
                    if (txtMainCode.getText().trim().equals("210010")) {
                        InvoiceType = 2;
                    } else if (txtMainCode.getText().trim().equals("210027")) {
                        InvoiceType = 1;
                    } else if (txtMainCode.getText().trim().equals("210072")) {
                        InvoiceType = 3;
                    }
                    // SET LAST CLOSING DATE & TO DATE
                    ToDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    FromDate = EITLERPGLOBAL.FinFromDateDB;
                    SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
                    EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
                    FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
                    // ------------------------------

                    // GET MAIN CODE AND PARTY CODE (IF EXISTS)
                    MainCode = txtMainCode.getText();
                    PartyCode = txtSubCode.getText().trim();
                    // ------------------------------

                    if (!chkWithoutProcess.isSelected()) {
                        // CALL MATCH AND UNMATCH ENTRIES BEFORE GENERATING REPORT
                        FindMatchInvoice(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebits(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        FindMatchDebitsFromClosing(MainCode, PartyCode, FromDate, ToDate);
                        while (!ProcessDone) {
                            //Wait until process is completed ...
                        }
                        ProcessDone = false;
                        // ------------------------------
                    }

                    // COUNT PARTIES FOR OUTSTANDING , SET MAIN_ACCOUNT_CODE AND PARTY_CODE (IF EXISTS IN txtPartyCode)
                    String Condition = "";
                    if (!txtSubCode.getText().equals("")) {
                        Condition = " AND SUB_ACCOUNT_CODE='" + txtSubCode.getText() + "' ";
                    }

                    SQL = "(SELECT DISTINCT SUB_ACCOUNT_CODE FROM D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                            + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND ENTRY_NO=" + EntryNo + Condition + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                            + " UNION "
                            + "(SELECT DISTINCT B.SUB_ACCOUNT_CODE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL) "
                            + "AND A.VOUCHER_DATE>'" + FromDate + "' AND A.VOUCHER_DATE<='" + ToDate + "' AND A.APPROVED=1 AND A.CANCELLED=0) "
                            + "ORDER BY SUB_ACCOUNT_CODE ";

                    rsParty = data.getResult(SQL, FinanceGlobal.FinURL);
                    rsParty.last();
                    Max = rsParty.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter = 0;
                    rsParty.first();
                    // --------------------------------------------------------------------------------------------------

                    // Prepare resultset for entering o/s data into report transaction table
                    rsReport = stmt.executeQuery("SELECT * FROM D_FIN_REPORT_TRANSACTION WHERE USER_ID=" + EITLERPGLOBAL.gUserID + " AND REPORT_ID=1 LIMIT 1");
                    RecordCounter = 0;
                    // --------------------------------------------------------------------------------------------------

                    if (rsParty.getRow() > 0) {
                        while (!rsParty.isAfterLast()) {

                            Counter++;

                            Bar.setValue(Counter);
                            Bar.repaint();
                            // GET PARTY NAME AND DISPLAY IT
                            PartyCode = rsParty.getString("SUB_ACCOUNT_CODE");
                            lblStatus.setText("Party : " + PartyCode);
                            PartyName = clsAccount.getAccountName(MainCode, PartyCode);
                            // -----------------------------

                            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
                            SQL = "(SELECT BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND ENTRY_NO=" + EntryNo + " AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00')) "
                                    + "UNION ALL "
                                    + "(SELECT A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND A.APPROVED=1 AND A.CANCELLED=0 "
                                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL )) "
                                    + "ORDER BY VOUCHER_DATE ";

                            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
                            rsInvoice.first();
                            InvoiceNo = "";
                            InvoiceDate = "";
                            PartyChange = false;
                            // ---------------------------------------------------------------------
                            CrAmount = 0;
                            DrAmount = 0;
                            if (rsInvoice.getRow() > 0) {
                                while (!rsInvoice.isAfterLast()) {

                                    if (!PartyChange) {
                                        ClosingBalance = Math.abs(clsAccount.getClosingBalance(MainCode, PartyCode, ToDate, true));
                                        PartyChange = true;
                                    }

                                    RecordCounter++;
                                    rsReport.moveToInsertRow();
                                    rsReport.updateLong("SR_NO", RecordCounter);
                                    rsReport.updateLong("REPORT_ID", ReportID);
                                    rsReport.updateLong("USER_ID", EITLERPGLOBAL.gUserID);
                                    rsReport.updateString("COLUMN_1", MainCode);
                                    rsReport.updateString("COLUMN_2", PartyCode);
                                    rsReport.updateString("COLUMN_3", PartyName);
                                    rsReport.updateString("COLUMN_4", UtilFunctions.getString(rsInvoice, "BOOK_CODE", ""));
                                    rsReport.updateString("COLUMN_5", UtilFunctions.getString(rsInvoice, "VOUCHER_NO", ""));
                                    rsReport.updateString("COLUMN_6", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", "")));
                                    rsReport.updateString("COLUMN_7", UtilFunctions.getString(rsInvoice, "LEGACY_NO", ""));
                                    rsReport.updateString("COLUMN_8", UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""));
                                    rsReport.updateString("COLUMN_9", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "")));
                                    rsReport.updateString("COLUMN_10", UtilFunctions.getString(rsInvoice, "LINK_NO", ""));
                                    rsReport.updateString("COLUMN_11", UtilFunctions.getString(rsInvoice, "EFFECT", ""));
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("C")) {
                                        CrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                    }
                                    if (UtilFunctions.getString(rsInvoice, "EFFECT", "").equals("D")) {
                                        DrAmount += UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0);
                                    }
                                    rsReport.updateString("COLUMN_12", Double.toString(UtilFunctions.getDouble(rsInvoice, "AMOUNT", 0)));
                                    rsReport.updateString("COLUMN_13", "0");
                                    rsReport.updateString("COLUMN_14", Double.toString(ClosingBalance));
                                    int DayDiff = EITLERPGLOBAL.getDayDifference(UtilFunctions.getString(rsInvoice, "VOUCHER_DATE", ""), EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()), "yyyy-MM-dd");
                                    double Amount = 0;
                                    if (DayDiff <= 30) {
                                        rsReport.updateString("COLUMN_15", "30");
                                    } else if (DayDiff >= 31 && DayDiff <= 60) {
                                        rsReport.updateString("COLUMN_15", "31-60");
                                    } else if (DayDiff >= 61 && DayDiff <= 180) {
                                        rsReport.updateString("COLUMN_15", "61-180");
                                    } else {
                                        rsReport.updateString("COLUMN_15", "180");
                                    }

                                    if (clsVoucher.getVoucherType(UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "")) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                                        rsReport.updateString("COLUMN_16", clsSalesInvoice.getInvoiceChargeCode(UtilFunctions.getString(rsInvoice, "INVOICE_NO", ""), UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "")));
                                    } else {
                                        rsReport.updateString("COLUMN_16", "");
                                    }

                                    rsReport.insertRow();
                                    rsInvoice.next();
                                }
                                if (EITLERPGLOBAL.round(ClosingBalance, 2) != EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2)) {
                                    String Msg = "Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2);
                                    JOptionPane.showMessageDialog(null, Msg);
                                    System.out.println("Party Code : " + PartyCode + " Ledger Balance : " + EITLERPGLOBAL.round(ClosingBalance, 2) + " O/S Balance : " + EITLERPGLOBAL.round(Math.abs(CrAmount - DrAmount), 2));
                                }
                            }
                            rsParty.next();
                        }
                    }
                    
                } catch (Exception e) {
                    e.printStackTrace();
                }

                Bar.setVisible(false);
                lblStatus.setVisible(false);
            }
        ;
    }.start();
    }*/

}
