package EITLERP.Finance.ReportsUI;

import EITLERP.*;
import EITLERP.Finance.*;
import EITLERP.Utils.*;
import EITLERP.Utils.SimpleDataProvider.*;
import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.net.*;
import java.util.*;
import java.text.*;
import TReportWriter.*;

public class frmRptInterest extends javax.swing.JApplet {
    
    private EITLComboModel cmbReceiptTypeModel;
    private EITLComboModel cmbReportTypeModel;
    private EITLComboModel cmbMonthModel;
    private EITLComboModel cmbConditionModel;
    private TReportEngine objEngine=new TReportEngine();
    private TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
    private Character mychar = new Character('0');
    
    /** Initializes the applet frmRptGRNInfo */
    public void init() {
        setSize(425,325);
        initComponents();
        GenerateCombo();
        lblFromDate.setVisible(false);
        txtFromDate.setVisible(false);
        lblToDate.setVisible(false);
        txtToDate.setVisible(false);
        lblEffectivelessfrom.setVisible(false);
        txtLessDate.setVisible(false);
        txtFromDate.setText("");
        txtToDate.setText("");
        txtLessDate.setText("");
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        cmdPreview = new javax.swing.JButton();
        lblReceiptType = new javax.swing.JLabel();
        cmbCondition = new javax.swing.JComboBox();
        cmbReceiptType = new javax.swing.JComboBox();
        lblCondition = new javax.swing.JLabel();
        lblFromDate = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        lblEffectivelessfrom = new javax.swing.JLabel();
        lblToDate = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        txtLessDate = new javax.swing.JTextField();

        getContentPane().setLayout(null);

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jPanel3.setLayout(null);

        jPanel3.setBackground(new java.awt.Color(0, 153, 204));
        jPanel3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel6.setText("INTEREST STATEMENT WITH WARRANT NO REPORT");
        jPanel3.add(jLabel6);
        jLabel6.setBounds(9, 8, 350, 15);

        getContentPane().add(jPanel3);
        jPanel3.setBounds(0, 2, 800, 30);

        cmdPreview.setText("Preview Report");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        getContentPane().add(cmdPreview);
        cmdPreview.setBounds(120, 170, 130, 25);

        lblReceiptType.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblReceiptType.setText("Receipt Type :");
        getContentPane().add(lblReceiptType);
        lblReceiptType.setBounds(20, 70, 90, 15);

        cmbCondition.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbConditionItemStateChanged(evt);
            }
        });

        getContentPane().add(cmbCondition);
        cmbCondition.setBounds(120, 40, 181, 22);

        getContentPane().add(cmbReceiptType);
        cmbReceiptType.setBounds(120, 70, 180, 24);

        lblCondition.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCondition.setText("Condition :");
        getContentPane().add(lblCondition);
        lblCondition.setBounds(20, 40, 90, 18);

        lblFromDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFromDate.setText("From Date :");
        getContentPane().add(lblFromDate);
        lblFromDate.setBounds(10, 100, 80, 16);

        txtFromDate.setColumns(10);
        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(100, 100, 90, 20);

        lblEffectivelessfrom.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEffectivelessfrom.setText("Effective date less then :");
        getContentPane().add(lblEffectivelessfrom);
        lblEffectivelessfrom.setBounds(10, 130, 160, 14);

        lblToDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblToDate.setText("To Date :");
        getContentPane().add(lblToDate);
        lblToDate.setBounds(200, 100, 70, 17);

        txtToDate.setColumns(10);
        getContentPane().add(txtToDate);
        txtToDate.setBounds(280, 100, 90, 20);

        txtLessDate.setColumns(10);
        getContentPane().add(txtLessDate);
        txtLessDate.setBounds(180, 130, 90, 20);

    }//GEN-END:initComponents
    
    private void cmbConditionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbConditionItemStateChanged
        // TODO add your handling code here:
        if(cmbCondition.getSelectedIndex()==0) {
            lblFromDate.setVisible(false);
            txtFromDate.setVisible(false);
            lblToDate.setVisible(false);
            txtToDate.setVisible(false);
            lblEffectivelessfrom.setVisible(false);
            txtLessDate.setVisible(false);
            txtFromDate.setText("");
            txtToDate.setText("");
            txtLessDate.setText("");
        } else if(cmbCondition.getSelectedIndex()==1 || cmbCondition.getSelectedIndex()==2) {
            lblFromDate.setVisible(true);
            txtFromDate.setVisible(true);
            lblToDate.setVisible(true);
            txtToDate.setVisible(true);
            //lblEffectivelessfrom.setVisible(false);
            //txtLessDate.setVisible(false);
            txtFromDate.setText("");
            txtToDate.setText("");
            //txtLessDate.setText("");
        }
        /*else if(cmbCondition.getSelectedIndex()==3) {
            lblFromDate.setVisible(false);
            txtFromDate.setVisible(false);
            lblToDate.setVisible(false);
            txtToDate.setVisible(false);
            //lblEffectivelessfrom.setVisible(true);
            //txtLessDate.setVisible(true);
            txtFromDate.setText("");
            txtToDate.setText("");
            //txtLessDate.setText("");
        }*/
    }//GEN-LAST:event_cmbConditionItemStateChanged
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        if ( ! Validate()) {
            return;
        }
        GenerateReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbCondition;
    private javax.swing.JComboBox cmbReceiptType;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblCondition;
    private javax.swing.JLabel lblEffectivelessfrom;
    private javax.swing.JLabel lblFromDate;
    private javax.swing.JLabel lblReceiptType;
    private javax.swing.JLabel lblToDate;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtLessDate;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables
    
    private void GenerateReport() {
        try {
            int ReceiptType = cmbReceiptType.getSelectedIndex();
            String Type = "";
            String strSQL = "";
            String Condition = "";
            if(ReceiptType==1) {
                Type="FD";
            } else if(ReceiptType==2) {
                Type="LD";
            } if(ReceiptType==3) {
                Type="CD";
            }
            
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("SR_NO");
            objReportData.AddColumn("TYPE");
            objReportData.AddColumn("RECEIPT_NO");
            objReportData.AddColumn("LEGACY_NO");
            objReportData.AddColumn("PARTY_CODE");
            objReportData.AddColumn("APPLICANT_NAME");
            objReportData.AddColumn("AMOUNT");
            objReportData.AddColumn("INTEREST_DATE");
            objReportData.AddColumn("DAYS");
            objReportData.AddColumn("RATE");
            objReportData.AddColumn("INTEREST");
            
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            objOpeningRow.setValue("SR_NO","");
            objOpeningRow.setValue("TYPE","");
            objOpeningRow.setValue("RECEIPT_NO","");
            objOpeningRow.setValue("LEGACY_NO","");
            objOpeningRow.setValue("PARTY_CODE","");
            objOpeningRow.setValue("APPLICANT_NAME","");
            objOpeningRow.setValue("AMOUNT","");
            objOpeningRow.setValue("INTEREST_DATE","0000-00-00");
            objOpeningRow.setValue("DAYS","");
            objOpeningRow.setValue("RATE","");
            objOpeningRow.setValue("DUE_DATE","0000-00-00");
            objOpeningRow.setValue("INTEREST","");
            
            
            String StartDate = EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
            String EndDate = EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());
            
            strSQL = "SELECT SMST.SCHEME_TYPE,DMST.RECEIPT_NO,DMST.LEGACY_NO,DMST.PARTY_CODE,DMST.APPLICANT_NAME,DMST.AMOUNT, " +
            "DMST.DEPOSIT_PERIOD,DMST.MATURITY_DATE,DMST.INTEREST_RATE,SMST.SCHEME_TYPE,DMST.MAIN_ACCOUNT_CODE,DMST.INT_CALC_DATE, " +
            "DMST.EFFECTIVE_DATE " +
            "FROM D_FD_DEPOSIT_MASTER DMST,D_FD_SCHEME_MASTER SMST " +
            "WHERE DMST.SCHEME_ID = SMST.SCHEME_ID AND DMST.CANCELLED=0 AND DMST.APPROVED=1 " +
            "AND SMST.SCHEME_TYPE="+ReceiptType+" AND DMST.COMPANY_ID =2 AND DMST.DEPOSIT_STATUS=0 "; //AND RECEIPT_NO IN ('M025053','M025061') 
            
            if(cmbCondition.getSelectedIndex()==1) {
                strSQL += "AND DMST.MATURITY_DATE>='"+StartDate+"' AND DMST.MATURITY_DATE<='"+EndDate+"' ";
            } else if(cmbCondition.getSelectedIndex()==2) {
                strSQL += "AND DMST.INT_CALC_DATE>='"+StartDate+"' AND DMST.INT_CALC_DATE<='"+EndDate+"' " +
                "AND DMST.MATURITY_DATE>='"+EITLERPGLOBAL.addDaysToDate(EndDate,1,"yyyy-MM-dd")+"' ";
            }
            strSQL += "ORDER BY DAY(DMST.MATURITY_DATE),MONTH(DMST.MATURITY_DATE) ";
            
            ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsTmp.first();
            
            int Counter = 0;
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Counter ++;
                    objRow=objReportData.newRow();
                    //System.out.println(Counter);
                    objRow.setValue("SR_NO",Integer.toString(Counter));
                    objRow.setValue("TYPE",Type);
                    objRow.setValue("RECEIPT_NO",UtilFunctions.getString(rsTmp,"RECEIPT_NO",""));
                    objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsTmp,"LEGACY_NO",""));
                    objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsTmp,"PARTY_CODE",""));
                    objRow.setValue("APPLICANT_NAME",UtilFunctions.getString(rsTmp,"APPLICANT_NAME",""));
                    
                    String ReceiptNo = UtilFunctions.getString(rsTmp,"RECEIPT_NO","");
                    String PartyCode = UtilFunctions.getString(rsTmp,"PARTY_CODE","");
                    if(PartyCode.equals("131806")) {
                        System.out.print("");
                    }
                    String MainAccountCode = UtilFunctions.getString(rsTmp,"MAIN_ACCOUNT_CODE","");
                    double Amount = UtilFunctions.getDouble(rsTmp,"AMOUNT",0);
                    double interestRate = UtilFunctions.getDouble(rsTmp,"INTEREST_RATE",0);
                    objRow.setValue("AMOUNT",Double.toString(Amount));
                    
                    String SQLQuery = "SELECT B.WARRANT_DATE FROM D_FD_INT_CALC_HEADER A, D_FD_INT_CALC_DETAIL B " +
                    "WHERE A.DOC_NO=B.DOC_NO AND B.RECEIPT_NO='"+ReceiptNo+"' AND B.PARTY_CODE='"+PartyCode+"' " +
                    "AND MAIN_ACCOUNT_CODE='"+MainAccountCode+"' AND A.TDS_ONLY=0 ORDER BY WARRANT_DATE DESC ";
                    String LastDate = data.getStringValueFromDB(SQLQuery,FinanceGlobal.FinURL);
                    if(LastDate.equals("")) {
                        LastDate=UtilFunctions.getString(rsTmp,"EFFECTIVE_DATE","0000-00-00");
                    }
                    double CDInterestAmount = 0;
                    
                    if(ReceiptType==3) {
                        SQLQuery = "SELECT SUM(B.INTEREST_AMOUNT) FROM D_FD_INT_CALC_HEADER A, D_FD_INT_CALC_DETAIL B " +
                        "WHERE A.DOC_NO=B.DOC_NO AND B.RECEIPT_NO='"+ReceiptNo+"' AND B.PARTY_CODE='"+PartyCode+"' " +
                        "AND MAIN_ACCOUNT_CODE='"+MainAccountCode+"' AND A.TDS_ONLY=0 ORDER BY WARRANT_DATE";
                        CDInterestAmount = EITLERPGLOBAL.round(data.getDoubleValueFromDB(SQLQuery,FinanceGlobal.FinURL),0);
                        Amount = EITLERPGLOBAL.round(Amount+CDInterestAmount,0);
                    }
                    
                    String UpToDate = "";
                    if(cmbCondition.getSelectedIndex()==1) {
                        UpToDate = UtilFunctions.getString(rsTmp,"MATURITY_DATE","0000-00-00");
                    } else if(cmbCondition.getSelectedIndex()==2) {
                        UpToDate = UtilFunctions.getString(rsTmp,"INT_CALC_DATE","0000-00-00");
                    }
                    if(java.sql.Date.valueOf(LastDate).compareTo(java.sql.Date.valueOf(UpToDate))==0 ||
                    java.sql.Date.valueOf(EITLERPGLOBAL.addDaysToDate(LastDate,1,"yyyy-MM-dd")).compareTo(java.sql.Date.valueOf(UpToDate))==0) {
                        Counter--;
                        rsTmp.next();
                        continue;
                    }
                    int interestDays = EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(EITLERPGLOBAL.addDaysToDate(LastDate,1,"yyyy-MM-dd")), java.sql.Date.valueOf(UpToDate));
                    int RoundDigit = 0;
                    if(ReceiptType==1 || ReceiptType==2) {
                        RoundDigit = 2;
                    }
                    double interestAmount = 0;
                    GregorianCalendar cal = new GregorianCalendar();
                    if(cal.isLeapYear(EITLERPGLOBAL.getCurrentFinYear()+1)) {
                        if(ReceiptType==3) {
                            interestAmount = EITLERPGLOBAL.round((Amount * Math.pow((1 + ((interestRate/100)/2)),2*0.5)) - Amount,0);
                        } else {
                            interestAmount = EITLERPGLOBAL.round(((Amount * interestRate * interestDays)/(366* 100)),RoundDigit); //INTEREST AMOUNT = (AMOUNT * RATE)/100
                        }
                    } else {
                        if(ReceiptType==3) {
                            interestAmount = EITLERPGLOBAL.round((Amount * Math.pow((1 + ((interestRate/100)/2)),2*0.5)) - Amount,0);
                        } else {
                            interestAmount = EITLERPGLOBAL.round(((Amount * interestRate * interestDays)/(365* 100)),RoundDigit); //INTEREST AMOUNT = (AMOUNT * RATE)/100
                        }
                        
                    }
                    objRow.setValue("FROM_DATE",EITLERPGLOBAL.formatDate(EITLERPGLOBAL.addDaysToDate(LastDate,1,"yyyy-MM-dd")));
                    objRow.setValue("INTEREST_DATE",EITLERPGLOBAL.formatDate(UpToDate));
                    objRow.setValue("RATE",UtilFunctions.getString(rsTmp,"INTEREST_RATE",""));
                    
                    if(ReceiptType==3) {
                        objRow.setValue("INTEREST",Double.toString(EITLERPGLOBAL.round(CDInterestAmount + interestAmount,0)));
                        objRow.setValue("DAYS","");
                    } else {
                        objRow.setValue("INTEREST",Double.toString(interestAmount));
                        objRow.setValue("DAYS",Integer.toString(interestDays));
                    }
                    
                    objReportData.AddRow(objRow);
                    rsTmp.next();
                }
            }
            HashMap Parameters=new HashMap();
            if(cmbCondition.getSelectedIndex()==1) {
                Parameters.put("FOR_TYPE","MATURITY");
            } else if(cmbCondition.getSelectedIndex()==2) {
                Parameters.put("FOR_TYPE","HALF YEARLY");
            }
            Parameters.put("TYPE",Type);
            Parameters.put("TYPE",Type);
            Parameters.put("FROM_DATE",EITLERPGLOBAL.formatDate(StartDate));
            Parameters.put("TO_DATE",EITLERPGLOBAL.formatDate(EndDate));
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            if(objReportData.getRowCount()>0) {
                objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptInterest.rpt",Parameters,objReportData);
            } else {
                JOptionPane.showMessageDialog(this,"No Data Found...");
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    private void GenerateCombo() {
        
        cmbConditionModel=new EITLComboModel();
        cmbCondition.removeAllItems();
        cmbCondition.setModel(cmbConditionModel);
        
        ComboData aData=new ComboData();
        aData.Code=0;
        aData.Text="Select Condition";
        cmbConditionModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=1;
        aData.Text="Only Maturity";
        cmbConditionModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=2;
        aData.Text="Half Yearly";
        cmbConditionModel.addElement(aData);
        
        cmbReceiptTypeModel=new EITLComboModel();
        cmbReceiptType.removeAllItems();
        cmbReceiptType.setModel(cmbReceiptTypeModel);
        
        aData=new ComboData();
        aData.Code=0;
        aData.Text="Select Type";
        cmbReceiptTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=1;
        aData.Text="FD";
        cmbReceiptTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=2;
        aData.Text="LD";
        cmbReceiptTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=3;
        aData.Text="CD";
        cmbReceiptTypeModel.addElement(aData);
        
        
        
    }
    
    
    private boolean Validate() {
        //Form level validations
        
        if(cmbCondition.isEnabled()) {
            if(cmbCondition.getSelectedIndex()==0) {
                JOptionPane.showMessageDialog(this,"Please select Month & Condition...");
                return false;
            }
            
            if(cmbCondition.getSelectedIndex()==1) {
                if(txtFromDate.getText().trim().equals("")) {
                    JOptionPane.showMessageDialog(this,"Please insert effective date less then...");
                    return false;
                } else if(!EITLERPGLOBAL.isDate(txtFromDate.getText().trim())) {
                    JOptionPane.showMessageDialog(this,"Please insert proper effective date less then...");
                    return false;
                }
            }
            
            if(cmbCondition.getSelectedIndex()==2) {
                if(txtFromDate.getText().trim().equals("")) {
                    JOptionPane.showMessageDialog(this,"Please insert effective date from...");
                    return false;
                } else if(!EITLERPGLOBAL.isDate(txtFromDate.getText().trim())) {
                    JOptionPane.showMessageDialog(this,"Please insert proper effective date from...");
                    return false;
                }
                
                if(txtToDate.getText().trim().equals("")) {
                    JOptionPane.showMessageDialog(this,"Please insert effective date to...");
                    return false;
                } else if(!EITLERPGLOBAL.isDate(txtToDate.getText().trim())) {
                    JOptionPane.showMessageDialog(this,"Please insert proper effective date to...");
                    return false;
                }
            }
        }
        return true;
    }
    
    
}
