

package EITLERP.Finance.ReportsUI;


import EITLERP.*;
import EITLERP.Finance.*;
import EITLERP.Utils.*;
import EITLERP.Utils.SimpleDataProvider.*;
import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.net.*;
import java.util.*;
import TReportWriter.*;
import EITLERP.Sales.clsSalesParty;

public class frmRptOBCCollection extends javax.swing.JApplet {
    
    private EITLComboModel cmbInvoiceTypeModel;
    private EITLComboModel cmbBankTypeModel;
    private EITLComboModel cmbMonthModel;
    private TReportEngine objEngine=new TReportEngine();
    private TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
    
    
    /** Initializes the applet frmRptGRNInfo */
    public void init() {
        setSize(520,310);
        initComponents();
        GenerateCombo();
        txtFromDate.setText("");
        txtFromDate.setEnabled(false);
        txtToDate.setText("");
        txtToDate.setEnabled(false);
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        lblMonth = new javax.swing.JLabel();
        lblYear = new javax.swing.JLabel();
        txtYear = new javax.swing.JTextField();
        cmdPreview = new javax.swing.JButton();
        lblInvoiceType = new javax.swing.JLabel();
        cmbMonth = new javax.swing.JComboBox();
        cmbBankType = new javax.swing.JComboBox();
        lblBankType = new javax.swing.JLabel();
        cmbInvoiceType = new javax.swing.JComboBox();
        chkBulk = new javax.swing.JCheckBox();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        lblFromDate = new javax.swing.JLabel();
        lblToDate = new javax.swing.JLabel();
        chkOnlyPendingInvoice = new javax.swing.JCheckBox();

        getContentPane().setLayout(null);

        jPanel3.setLayout(null);

        jPanel3.setBackground(new java.awt.Color(0, 153, 204));
        jPanel3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel6.setText("OBC STATEMENT");
        jPanel3.add(jLabel6);
        jLabel6.setBounds(9, 8, 430, 15);

        getContentPane().add(jPanel3);
        jPanel3.setBounds(0, 2, 800, 30);

        lblMonth.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMonth.setText("Month :");
        getContentPane().add(lblMonth);
        lblMonth.setBounds(5, 73, 90, 15);

        lblYear.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYear.setText("Year :");
        getContentPane().add(lblYear);
        lblYear.setBounds(305, 73, 50, 15);

        txtYear.setColumns(10);
        getContentPane().add(txtYear);
        txtYear.setBounds(360, 70, 90, 20);

        cmdPreview.setText("Preview Report");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        getContentPane().add(cmdPreview);
        cmdPreview.setBounds(160, 210, 130, 25);

        lblInvoiceType.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblInvoiceType.setText("Invoice Type :");
        getContentPane().add(lblInvoiceType);
        lblInvoiceType.setBounds(5, 105, 90, 15);

        getContentPane().add(cmbMonth);
        cmbMonth.setBounds(100, 70, 140, 24);

        getContentPane().add(cmbBankType);
        cmbBankType.setBounds(330, 100, 125, 24);

        lblBankType.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBankType.setText("Bank Type :");
        getContentPane().add(lblBankType);
        lblBankType.setBounds(245, 105, 80, 15);

        getContentPane().add(cmbInvoiceType);
        cmbInvoiceType.setBounds(100, 100, 140, 24);

        chkBulk.setText("Bulk");
        chkBulk.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkBulkItemStateChanged(evt);
            }
        });

        getContentPane().add(chkBulk);
        chkBulk.setBounds(20, 160, 60, 15);

        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(170, 160, 90, 19);

        getContentPane().add(txtToDate);
        txtToDate.setBounds(335, 160, 90, 19);

        lblFromDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFromDate.setText("From Date :");
        getContentPane().add(lblFromDate);
        lblFromDate.setBounds(85, 160, 80, 15);

        lblToDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblToDate.setText("To Date :");
        getContentPane().add(lblToDate);
        lblToDate.setBounds(270, 160, 60, 15);

        chkOnlyPendingInvoice.setText(" Only Pending Invoices");
        getContentPane().add(chkOnlyPendingInvoice);
        chkOnlyPendingInvoice.setBounds(100, 135, 170, 15);

    }//GEN-END:initComponents
    
    private void chkBulkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkBulkItemStateChanged
        // TODO add your handling code here:
        if(chkBulk.isSelected()) {
            cmbMonth.setSelectedIndex(0);
            cmbMonth.setEnabled(false);
            cmbInvoiceType.setSelectedIndex(0);
            cmbInvoiceType.setEnabled(false);
            txtYear.setText("");
            txtYear.setEnabled(false);
            txtFromDate.setText("");
            txtFromDate.setEnabled(true);
            txtToDate.setText("");
            txtToDate.setEnabled(true);
        } else {
            cmbMonth.setSelectedIndex(0);
            cmbMonth.setEnabled(true);
            cmbInvoiceType.setSelectedIndex(0);
            cmbInvoiceType.setEnabled(true);
            txtYear.setText("");
            txtYear.setEnabled(true);
            txtFromDate.setText("");
            txtFromDate.setEnabled(false);
            txtToDate.setText("");
            txtToDate.setEnabled(false);
        }
    }//GEN-LAST:event_chkBulkItemStateChanged
            
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        if (!Validate()) {
            return;
        }
        GenerateReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkBulk;
    private javax.swing.JCheckBox chkOnlyPendingInvoice;
    private javax.swing.JComboBox cmbBankType;
    private javax.swing.JComboBox cmbInvoiceType;
    private javax.swing.JComboBox cmbMonth;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblBankType;
    private javax.swing.JLabel lblFromDate;
    private javax.swing.JLabel lblInvoiceType;
    private javax.swing.JLabel lblMonth;
    private javax.swing.JLabel lblToDate;
    private javax.swing.JLabel lblYear;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
    
    private void GenerateReport() {
        try {
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            
            objReportData.AddColumn("BANK_REFERENCE_NO");
            objReportData.AddColumn("BANK_REFERENCE_DATE");
            objReportData.AddColumn("DUE_DATE");
            objReportData.AddColumn("DUE_DAYS");
            objReportData.AddColumn("INV_CREATE_DATE");
            objReportData.AddColumn("AGENT_ALPHA");
            objReportData.AddColumn("INVOICE_SR_NO");
            objReportData.AddColumn("MAIN_ACCOUNT_CODE");
            objReportData.AddColumn("PARTY_CODE");
            objReportData.AddColumn("PARTY_NAME");
            objReportData.AddColumn("STATION");
            objReportData.AddColumn("REASON_CODE");
            objReportData.AddColumn("INVOICE_AMOUNT");
            objReportData.AddColumn("INTEREST_AMOUNT");
            objReportData.AddColumn("OBC_DOC_NO");
            objReportData.AddColumn("OBC_DOC_DATE");
            objReportData.AddColumn("OBC_CREATE_DATE");
            objReportData.AddColumn("APPROVED");
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            
            objOpeningRow.setValue("BANK_REFERENCE_NO","");
            objOpeningRow.setValue("BANK_REFERENCE_DATE","0000-00-00");
            objOpeningRow.setValue("DUE_DATE","0000-00-00");
            objOpeningRow.setValue("DUE_DAYS","");
            objOpeningRow.setValue("INV_CREATE_DATE","0000-00-00");
            objOpeningRow.setValue("AGENT_ALPHA","");
            objOpeningRow.setValue("INVOICE_SR_NO","");
            objOpeningRow.setValue("MAIN_ACCOUNT_CODE","");
            objOpeningRow.setValue("PARTY_CODE","");
            objOpeningRow.setValue("PARTY_NAME","");
            objOpeningRow.setValue("STATION","");
            objOpeningRow.setValue("REASON_CODE","");
            objOpeningRow.setValue("INVOICE_AMOUNT","");
            objOpeningRow.setValue("INTEREST_AMOUNT","");
            objOpeningRow.setValue("OBC_DOC_NO","");
            objOpeningRow.setValue("OBC_DOC_DATE","0000-00-00");
            objOpeningRow.setValue("OBC_CREATE_DATE","0000-00-00");
            objOpeningRow.setValue("APPROVED","");
            
            
            
            int nMonth = cmbMonth.getSelectedIndex() ;
            String doc_no="",obc_create_date = "",doc_date="",approve="",approved="",bank_ref ="",bank_date ="",Condition="";
            String strSQL = "";
            String Date = "",LastDate="",cInvoiceType="";
            double int_amt = 0;
            if(!chkBulk.isSelected()) {
                Date = txtYear.getText().trim()+"-"+EITLERPGLOBAL.padLeftEx(Integer.toString(nMonth),"0",2)+"-01";
                LastDate = data.getStringValueFromDB("SELECT LAST_DAY('"+Date+"') FROM DUAL");
                cInvoiceType  = EITLERPGLOBAL.getCombostrCode(cmbInvoiceType);
            } else {
                Date = EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
                LastDate = EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());
                cInvoiceType  = "210027,210010";
            }
            
            String cBankType  = EITLERPGLOBAL.getCombostrCode(cmbBankType);
            strSQL = "SELECT  A.DOC_NO,A.DOC_DATE,A.BANK_REFERENCE_NO, " +
            "A.BANK_REFERENCE_DATE,A.MAIN_ACCOUNT_CODE, " +
            "A.PARTY_CODE,B.INVOICE_NO,B.INVOICE_DATE,B.INVOICE_AMOUNT " +
            "FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B " +
            "WHERE  A.DOC_NO = B.DOC_NO AND A.APPROVED = 1 AND A.CANCELLED = 0 " +
            "AND A.BANK_REFERENCE_DATE >= '"+ Date + "' AND A.BANK_REFERENCE_DATE <= '"+ LastDate + "' " +
            "AND A.MAIN_ACCOUNT_CODE IN ("+ cInvoiceType +") AND A.BANK_REFERENCE_NO LIKE '"+cBankType+"%' ORDER BY A.PARTY_CODE,A.BANK_REFERENCE_NO";//BANK REFERCENCE NO
            
            
            // System.out.println("sql="+strSQL);
            
            ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsTmp.first();
            // System.out.println("count : " +rsTmp.getRow());
            
            
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    
                    String DocNo = rsTmp.getString("DOC_NO");
                    String InvoiceNo = rsTmp.getString("INVOICE_NO");
                    String InvoiceDate = rsTmp.getString("INVOICE_DATE");
                    
                    String strBankRef ="SELECT A.DOC_NO,A.BANK_REFERENCE_NO,A.BANK_REFERENCE_DATE,A.MAIN_ACCOUNT_CODE, " +
                    "A.PARTY_CODE,B.INVOICE_NO,B.INVOICE_DATE,B.INVOICE_AMOUNT " +
                    "FROM D_FIN_OBC_INVOICE_HEADER A,D_FIN_OBC_INVOICE_DETAIL B " +
                    "WHERE  A.DOC_NO = B.DOC_NO AND A.APPROVED = 1 AND A.CANCELLED = 0 " +
                    "AND A.BANK_REFERENCE_DATE >= '"+ Date + "' AND A.BANK_REFERENCE_DATE <= '"+ LastDate + "' " +
                    "AND A.MAIN_ACCOUNT_CODE IN ("+ cInvoiceType +") AND A.DOC_NO = '" + DocNo + "' AND B.INVOICE_NO='"+InvoiceNo+"' " +
                    "AND B.INVOICE_DATE='"+InvoiceDate+"' "  +
                    "ORDER BY A.PARTY_CODE,A.BANK_REFERENCE_NO";
                    //DOC_NO
                    ResultSet rsBankRef = data.getResult(strBankRef,FinanceGlobal.FinURL);
                    rsBankRef.first();
                    
                    //System.out.println("BANK REF : "+ strBankRef);
                    
                    while(!rsBankRef.isAfterLast()) {
                        bank_ref = rsBankRef.getString("BANK_REFERENCE_NO");
                        bank_date = rsBankRef.getString("BANK_REFERENCE_DATE");
                        if(bank_ref.equals("BC0004411")) {
                            boolean halt=true;
                        }
                        
                        String SQLQuery = "SELECT * FROM D_FIN_OBC WHERE BANK_REFERENCE_NO = '"+bank_ref+"' AND BANK_REFERENCE_DATE = '"+bank_date+"' AND CANCELLED = 0";
                        if(data.IsRecordExist(SQLQuery,FinanceGlobal.FinURL)){
                            //change Receipt Date for Date Difference if record already exits
                            SQLQuery = "SELECT * FROM D_FIN_OBC WHERE BANK_REFERENCE_NO='"+bank_ref+"' AND BANK_REFERENCE_DATE = '"+bank_date+"' AND CANCELLED = 0 ";
                            ResultSet rsResult = data.getResult(SQLQuery,FinanceGlobal.FinURL);
                            rsResult.first();
                            
                            if(chkOnlyPendingInvoice.isSelected()) {
                                rsBankRef.next();
                                continue;
                            }
                            
                            while(!rsResult.isAfterLast()) {
                                doc_no = rsResult.getString("DOC_NO");
                                doc_date = rsResult.getString("DOC_DATE");
                                approve = rsResult.getString("APPROVED");
                                int_amt = rsResult.getDouble("INTEREST_AMOUNT");
                                obc_create_date = data.getStringValueFromDB("SELECT CREATED_DATE FROM D_FIN_OBC_H " +
                                "WHERE REVISION_NO = 1 AND DOC_NO = '"+ doc_no +"' ",FinanceGlobal.FinURL);
                                if(approve.equals("1")) {
                                    approved ="YES";
                                } else {
                                    approved = "NO";
                                }
                                rsResult.next();
                            }
                            rsResult.close();
                        } else {
                            if(data.IsRecordExist("SELECT * FROM D_FIN_OBC_INVOICE_HEADER WHERE BANK_REFERENCE_NO='"+bank_ref+"' AND BANK_REFERENCE_DATE='"+bank_date+"' AND REASON_CODE<>'' AND CANCELLED=0 ",FinanceGlobal.FinURL) && chkOnlyPendingInvoice.isSelected()) {
                                rsBankRef.next();
                                continue;
                            } else if(data.IsRecordExist("SELECT * FROM D_FIN_OBC_INVOICE_HEADER WHERE BANK_REFERENCE_NO='"+bank_ref+"' AND BANK_REFERENCE_DATE='"+bank_date+"' AND REASON_CODE<>'' AND CANCELLED=0 ",FinanceGlobal.FinURL)) {
                                doc_no = "Return";
                                doc_date = "";
                                approved = "";
                                obc_create_date="";
                            } else {
                                doc_no = "Pending";
                                doc_date = "";
                                approved = "NO";
                                obc_create_date="";
                            }
                        }
                        
                        
                        objRow=objReportData.newRow();
                        
                        
                        String Party_Code = UtilFunctions.getString(rsTmp,"PARTY_CODE","");
                        String Main_code = UtilFunctions.getString(rsTmp,"MAIN_ACCOUNT_CODE","");
                        
                        String PartyName = data.getStringValueFromDB("SELECT PARTY_NAME FROM D_FIN_PARTY_MASTER " +
                        "WHERE PARTY_CODE = '" + Party_Code + "' AND MAIN_ACCOUNT_CODE = '" + Main_code + "' ",FinanceGlobal.FinURL);
                        
                        String City = data.getStringValueFromDB("SELECT CITY FROM D_FIN_PARTY_MASTER " +
                        "WHERE PARTY_CODE = '" + Party_Code + "' AND MAIN_ACCOUNT_CODE = '" + Main_code + "' ",FinanceGlobal.FinURL);
                        
                        
                        String Invoice_No = rsTmp.getString("INVOICE_NO");
                        String Invoice_Date = rsTmp.getString("INVOICE_DATE");
                        
                        String Credit_Days = data.getStringValueFromDB("SELECT CREDIT_DAYS FROM D_SAL_PARTY_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND PARTY_CODE = '" + Party_Code + "' AND MAIN_ACCOUNT_CODE = '" + Main_code + "' AND APPROVED=1  ",EITLERPGLOBAL.DatabaseURL);
                        
                        int C_Days = Integer.parseInt(Credit_Days);
                        
                        String Due_Date = EITLERPGLOBAL.addDaysToDate(bank_date, C_Days,"yyyy-MM-dd");
                        int DueDays = EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(Invoice_Date),java.sql.Date.valueOf(EITLERPGLOBAL.getCurrentDateDB()));
                        
                        
                        
                        if(Invoice_No.equals("F000714") && Party_Code.equals("812606") && Invoice_Date.equals("2012-06-30")) {
                            Due_Date = EITLERPGLOBAL.addDaysToDate(Due_Date, 8,"yyyy-MM-dd");
                        }
                        
                        String Agent_Sr_No = data.getStringValueFromDB("SELECT AGENT_SR_NO FROM D_SAL_INVOICE_HEADER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND INVOICE_NO ='"+Invoice_No+"' AND INVOICE_DATE='"+Invoice_Date+"' ",EITLERPGLOBAL.DatabaseURL);
                        
                        String Agent_Apha = GenerateAgentAlpha(Invoice_No,Invoice_Date);
                        
                        String Inv_Create_Date = data.getStringValueFromDB("SELECT CREATED_DATE FROM D_FIN_OBC_INVOICE_HEADER_H " +
                        "WHERE REVISION_NO = 1 AND DOC_NO = '"+ DocNo +"' ",FinanceGlobal.FinURL);
                        
                        objRow.setValue("BANK_REFERENCE_NO",UtilFunctions.getString(rsTmp,"BANK_REFERENCE_NO",""));
                        objRow.setValue("BANK_REFERENCE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"BANK_REFERENCE_DATE","0000-00-00")));
                        objRow.setValue("DUE_DATE",EITLERPGLOBAL.formatDate(Due_Date));
                        objRow.setValue("DUE_DAYS",Integer.toString(DueDays));
                        
                        objRow.setValue("INV_CREATE_DATE", EITLERPGLOBAL.formatDate(Inv_Create_Date));
                        objRow.setValue("MAIN_ACCOUNT_CODE",UtilFunctions.getString(rsTmp,"MAIN_ACCOUNT_CODE",""));
                        objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsTmp,"PARTY_CODE",""));
                        objRow.setValue("INVOICE_AMOUNT",UtilFunctions.getString(rsTmp,"INVOICE_AMOUNT",""));
                        objRow.setValue("OBC_DOC_NO",doc_no);
                        objRow.setValue("OBC_DOC_DATE",EITLERPGLOBAL.formatDate(doc_date));
                        objRow.setValue("OBC_CREATE_DATE",EITLERPGLOBAL.formatDate(obc_create_date));
                        objRow.setValue("APPROVED",approved);
                        objRow.setValue("PARTY_NAME",PartyName );
                        objRow.setValue("STATION", City);
                        objRow.setValue("REASON_CODE", data.getStringValueFromDB("SELECT REASON_CODE FROM D_FIN_OBC_INVOICE_HEADER WHERE BANK_REFERENCE_NO='"+bank_ref+"' AND BANK_REFERENCE_DATE='"+bank_date+"' AND CANCELLED=0 ",FinanceGlobal.FinURL));
                        objRow.setValue("AGENT_ALPHA", Agent_Apha);
                        objRow.setValue("INVOICE_SR_NO", Agent_Sr_No);
                        objRow.setValue("INTEREST_AMOUNT", Double.toString(int_amt));
                        
                        int_amt = 0;
                        objReportData.AddRow(objRow);
                        
                        rsBankRef.next();
                        
                    }
                    rsTmp.next();
                }
            }
            
            int Comp_ID = EITLERPGLOBAL.gCompanyID;
            String type="";
            HashMap Parameters=new HashMap();
            Parameters.put("COMPANY_ID",Integer.toString(Comp_ID));
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            if(!chkBulk.isSelected()) {
                String month = "OBC COLLECTION REGISTER FOR THE MONTH  " + cmbMonth.getSelectedItem() + " - " + txtYear.getText().trim();
                Parameters.put("MONTH",month.trim());
                
                //String year = " - " + txtYear.getText().trim();
                //Parameters.put("YEAR",year);
            }else {
                String fdate = "OBC COLLECTION REGISTER FROM " + txtFromDate.getText() + " TO " + txtToDate.getText().trim();
                Parameters.put("MONTH",fdate.trim());
                // String tdate = "TO " + txtToDate.getText();
                // Parameters.put("YEAR",tdate);
                
            }
            
            /* commented by vivek on 12-01-2014 for adding four other bank type
             *
             *if(cBankType.equals("BC")) {
             *   type = "31";
             *}else if(cBankType.equals("CC")) {
             *    type = "36";
             *}
             *
             */
            
            // new code by vivek start. on date 12-01-2014
            
            type=Integer.toString(EITLERPGLOBAL.getComboCode(cmbBankType));
            
            // new code by vivek end. on date 12-01-2014
            
            String Book_Name = data.getStringValueFromDB("SELECT BOOK_NAME FROM D_FIN_BOOK_MASTER WHERE BOOK_CODE = '"+type+"' ",FinanceGlobal.FinURL);
            Parameters.put("TYPE",type);
            Parameters.put("BOOK_NAME",Book_Name);
                        
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptOBCCollection.rpt",Parameters,objReportData);
            //}
            
            //CD - CD Receipt
            /*if (ReceiptType == 2) {
                objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptCDTOCDReceipt.rpt",Parameters,objReportData);
            }
             
            //LD - LD Receipt
            if (ReceiptType == 3) {
                objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptLDTOLDReceipt.rpt",Parameters,objReportData);
            }*/
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
    }
    
    private void GenerateCombo() {
        
        //--- Generate Type Combo ------//
        ComboData aData=new ComboData();
        
        cmbMonthModel=new EITLComboModel();
        cmbMonth.removeAllItems();
        cmbMonth.setModel(cmbMonthModel);
        
        aData=new ComboData();
        aData.Code=0;
        aData.Text="- Select Month -";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=1;
        aData.Text="January";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=2;
        aData.Text="February";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=3;
        aData.Text="March";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=4;
        aData.Text="April";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=5;
        aData.Text="May";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=6;
        aData.Text="June";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=7;
        aData.Text="July";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=8;
        aData.Text="August";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=9;
        aData.Text="September";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=10;
        aData.Text="October";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=11;
        aData.Text="November";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=12;
        aData.Text="December";
        cmbMonthModel.addElement(aData);
        
        
        
        cmbInvoiceTypeModel=new EITLComboModel();
        cmbInvoiceType.removeAllItems();
        cmbInvoiceType.setModel(cmbInvoiceTypeModel);
        
        aData=new ComboData();
        aData.strCode="0";
        aData.Text="- Select Type -";
        cmbInvoiceTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="210010";
        aData.Text="Felt";
        cmbInvoiceTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="210027";
        aData.Text="Suiting";
        cmbInvoiceTypeModel.addElement(aData);
        
        cmbBankTypeModel=new EITLComboModel();
        cmbBankType.removeAllItems();
        cmbBankType.setModel(cmbBankTypeModel);
        
        aData=new ComboData();
        aData.strCode="0";
        aData.Text="- Select Bank -";
        cmbBankTypeModel.addElement(aData);
        
        /* commented by vivek on 12-01-2014 for adding four other bank type
        aData.strCode="BC";
        aData.Text="31";
        cmbBankTypeModel.addElement(aData);
         
        aData=new ComboData();
        aData.strCode="CC";
        aData.Text="36";
        cmbBankTypeModel.addElement(aData);
         */
        
        // new code by vivek on 12-01-2014 for adding four other bank type. start
        aData=new ComboData();
        aData.strCode="BC";
        aData.Text="31";
        aData.Code=31;
        cmbBankTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="CC";
        aData.Text="36";
        aData.Code=36;
        cmbBankTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="IC";
        aData.Text="33";
        aData.Code=33;
        cmbBankTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="SB";
        aData.Text="37";
        aData.Code=37;
        cmbBankTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="ID";
        aData.Text="54";
        aData.Code=54;
        cmbBankTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="HD";
        aData.Text="58";
        aData.Code=58;
        cmbBankTypeModel.addElement(aData);
        // new code by vivek on 12-01-2014 for adding four other bank type. end
    }
    
    
    
    private boolean Validate() {
        //Form level validations
        if(!chkBulk.isSelected()) {
            if(txtYear.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Please enter Year");
                return false;
            } else if(!EITLERPGLOBAL.IsNumber(txtYear.getText().trim())) {
                JOptionPane.showMessageDialog(null,"Invalid Year in YYYY format.");
                return false;
            } else if (txtYear.getText().trim().length() != 4) {
                JOptionPane.showMessageDialog(null,"Invalid Year in YYYY format.");
                return false;
            }
        } else {
            if(txtFromDate.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Insert From Date.");
                return false;
            } else {
                if(!EITLERPGLOBAL.isDate(txtFromDate.getText().trim())) {
                    JOptionPane.showMessageDialog(null,"Invalid From Date.");
                    return false;
                }
            }
            
            if(txtToDate.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Insert To Date.");
                return false;
            } else {
                if(!EITLERPGLOBAL.isDate(txtToDate.getText().trim())) {
                    JOptionPane.showMessageDialog(null,"Invalid To Date.");
                    return false;
                }
            }
        }
        return true;
    }
    
    public String GenerateAgentAlpha(String InvoiceNo,String InvoiceDate) {
        String AgentAlpha = "";
        try {
            String Partycode = data.getStringValueFromDB("SELECT PARTY_CODE FROM D_SAL_INVOICE_HEADER WHERE INVOICE_NO = '"+InvoiceNo+"' AND INVOICE_DATE = '"+InvoiceDate+"' AND COMPANY_ID= "+EITLERPGLOBAL.gCompanyID+" ");
            AgentAlpha=clsSalesParty.getAgentAlpha(Partycode);
            
            if(InvoiceNo.trim().startsWith("F")) {
                AgentAlpha=InvoiceNo.substring(0,1)+"/"+Integer.parseInt(InvoiceNo.substring(1));
            } else {
                AgentAlpha=AgentAlpha+"/";
                AgentAlpha = AgentAlpha+data.getStringValueFromDB("SELECT AGENT_SR_NO FROM D_SAL_INVOICE_HEADER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND INVOICE_NO ='"+InvoiceNo+"' AND INVOICE_DATE='"+InvoiceDate+"' ", EITLERPGLOBAL.DatabaseURL);
            }
            
            String FinYear = EITLERPGLOBAL.FinancialYear(InvoiceDate);
            AgentAlpha=AgentAlpha+"/"+FinYear;
        } catch(Exception e) {
            return "";
        }
        return AgentAlpha;
    }
    
}
