/*
 * frmBookCode.java
 *
 * Created on February 14, 2008, 12:14 PM
 */

package EITLERP.Finance.ReportsUI;

/**
 *
 * @author  nisarg
 */

import EITLERP.*;
import EITLERP.Finance.*;
import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.io.*;
import java.sql.*;
import TReportWriter.*;
import EITLERP.Utils.SimpleDataProvider.*;
import EITLERP.Finance.Config.*;
import EITLERP.Finance.ReportsUI.*;
import java.text.*;
import java.lang.String;


public class frmRptBook extends javax.swing.JApplet {
    
    /** Initializes the applet frmBookCode */
    private EITLTableModel DataModel=new EITLTableModel();
    private EITLComboModel cmbSortModel=new EITLComboModel();
    private EITLTableCellRenderer RowFormat=new EITLTableCellRenderer();
    private TReportEngine objEngine=new TReportEngine();
    private TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
    DecimalFormat dFormat=new DecimalFormat("###0.00");
    private EITLTableModel DataModelExcel=new EITLTableModel();
    private EITLERP.Production.FeltCreditNote.clsExcelExporter exp = new EITLERP.Production.FeltCreditNote.clsExcelExporter();
    private clsExcel_Exporter exp1 = new clsExcel_Exporter();
    
    
    public void init() {
        initComponents();
        setSize(910,555);
        GenerateCombo();
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        file1 = new javax.swing.JFileChooser();
        cmdPreview = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        txtBookCode = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        lblBookName = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtFromAmount = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtToAmount = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtMainCode = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtSubCode = new javax.swing.JTextField();
        lblAccountName = new javax.swing.JLabel();
        lblSortOn = new javax.swing.JLabel();
        cmbSort = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        txtFromVoucher = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtToVoucher = new javax.swing.JTextField();
        cmdGenerate = new javax.swing.JButton();
        chkApproved = new javax.swing.JCheckBox();
        chkIncludeMemorandum = new javax.swing.JCheckBox();
        chkOnlyMemorandum = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableData = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        cmdSearch = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableBook = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        cmdPreview1 = new javax.swing.JButton();
        cmdRecieptRegister = new javax.swing.JButton();
        cmdExportExcel = new javax.swing.JButton();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(null);

        cmdPreview.setText("Preview Report");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        getContentPane().add(cmdPreview);
        cmdPreview.setBounds(770, 480, 130, 25);

        jPanel1.setBackground(new java.awt.Color(0, 153, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(null);

        jLabel4.setText("BOOK PRINTING");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(9, 9, 100, 15);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(-1, -1, 910, 30);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(null);

        txtBookCode.setColumns(10);
        txtBookCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBookCodeFocusLost(evt);
            }
        });
        txtBookCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBookCodeKeyPressed(evt);
            }
        });
        jPanel2.add(txtBookCode);
        txtBookCode.setBounds(133, 74, 90, 19);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel1.setText("Book Code:");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(58, 73, 60, 20);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel2.setText("From Date:");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(60, 46, 60, 20);

        txtFromDate.setColumns(10);
        jPanel2.add(txtFromDate);
        txtFromDate.setBounds(133, 46, 90, 19);

        txtToDate.setColumns(10);
        jPanel2.add(txtToDate);
        txtToDate.setBounds(295, 44, 90, 20);

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel3.setText("To");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(243, 44, 50, 20);

        lblBookName.setText("-");
        jPanel2.add(lblBookName);
        lblBookName.setBounds(230, 76, 350, 15);

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel5.setText("Amount From :");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(43, 102, 80, 20);

        txtFromAmount.setColumns(10);
        jPanel2.add(txtFromAmount);
        txtFromAmount.setBounds(133, 102, 90, 19);

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel6.setText("To");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(245, 100, 20, 20);

        txtToAmount.setColumns(10);
        jPanel2.add(txtToAmount);
        txtToAmount.setBounds(298, 100, 90, 20);

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel7.setText("Main Code:");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(61, 131, 60, 20);

        txtMainCode.setColumns(10);
        txtMainCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMainCodeFocusLost(evt);
            }
        });
        txtMainCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMainCodeKeyPressed(evt);
            }
        });
        jPanel2.add(txtMainCode);
        txtMainCode.setBounds(133, 132, 90, 19);

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel8.setText("Sub Code:");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(68, 160, 60, 20);

        txtSubCode.setColumns(10);
        txtSubCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSubCodeFocusLost(evt);
            }
        });
        txtSubCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSubCodeKeyPressed(evt);
            }
        });
        jPanel2.add(txtSubCode);
        txtSubCode.setBounds(133, 161, 90, 19);

        lblAccountName.setText("-");
        jPanel2.add(lblAccountName);
        lblAccountName.setBounds(130, 200, 350, 15);

        lblSortOn.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        lblSortOn.setText("Sorting On");
        jPanel2.add(lblSortOn);
        lblSortOn.setBounds(63, 227, 60, 13);

        cmbSort.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jPanel2.add(cmbSort);
        cmbSort.setBounds(135, 223, 210, 20);

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel9.setText("Voucher No. From :");
        jPanel2.add(jLabel9);
        jLabel9.setBounds(24, 18, 100, 20);

        txtFromVoucher.setColumns(10);
        jPanel2.add(txtFromVoucher);
        txtFromVoucher.setBounds(133, 18, 90, 19);

        jLabel10.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel10.setText("To ");
        jPanel2.add(jLabel10);
        jLabel10.setBounds(243, 16, 50, 20);

        txtToVoucher.setColumns(10);
        jPanel2.add(txtToVoucher);
        txtToVoucher.setBounds(295, 16, 90, 20);

        cmdGenerate.setText("Show");
        cmdGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGenerateActionPerformed(evt);
            }
        });
        jPanel2.add(cmdGenerate);
        cmdGenerate.setBounds(381, 221, 80, 25);

        chkApproved.setSelected(true);
        chkApproved.setText("Only Approved");
        jPanel2.add(chkApproved);
        chkApproved.setBounds(300, 130, 124, 19);

        chkIncludeMemorandum.setText(" Include Memorandum");
        chkIncludeMemorandum.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkIncludeMemorandumItemStateChanged(evt);
            }
        });
        jPanel2.add(chkIncludeMemorandum);
        chkIncludeMemorandum.setBounds(300, 160, 170, 20);

        chkOnlyMemorandum.setText(" Only Memorandum");
        chkOnlyMemorandum.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkOnlyMemorandumItemStateChanged(evt);
            }
        });
        jPanel2.add(chkOnlyMemorandum);
        chkOnlyMemorandum.setBounds(480, 160, 170, 20);

        Tab.addTab("Filter Criteria", jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(null);

        TableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableData);

        jPanel3.add(jScrollPane1);
        jScrollPane1.setBounds(5, 35, 660, 370);

        jLabel11.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        jLabel11.setText("Click on the column,  type keywords in search textbox and click on Go button to search.");
        jPanel3.add(jLabel11);
        jLabel11.setBounds(12, 14, 410, 12);

        jLabel12.setText("Search");
        jPanel3.add(jLabel12);
        jLabel12.setBounds(445, 13, 50, 15);
        jPanel3.add(txtSearch);
        txtSearch.setBounds(500, 10, 120, 19);

        cmdSearch.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        cmdSearch.setText("Go");
        cmdSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSearchActionPerformed(evt);
            }
        });
        jPanel3.add(cmdSearch);
        cmdSearch.setBounds(624, 10, 48, 20);

        Tab.addTab("Book", jPanel3);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setLayout(null);

        TableBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableBook);

        jPanel4.add(jScrollPane2);
        jScrollPane2.setBounds(5, 5, 870, 350);

        jButton1.setText("Export to Excell");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton1);
        jButton1.setBounds(726, 360, 150, 25);

        Tab.addTab("Book Code 45", jPanel4);

        getContentPane().add(Tab);
        Tab.setBounds(0, 30, 900, 440);

        cmdPreview1.setText("Preview Summary");
        cmdPreview1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreview1ActionPerformed(evt);
            }
        });
        getContentPane().add(cmdPreview1);
        cmdPreview1.setBounds(620, 480, 148, 25);

        cmdRecieptRegister.setText("Reciept Register");
        cmdRecieptRegister.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdRecieptRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRecieptRegisterActionPerformed(evt);
            }
        });
        getContentPane().add(cmdRecieptRegister);
        cmdRecieptRegister.setBounds(280, 480, 148, 25);

        cmdExportExcel.setText("Excel Export");
        cmdExportExcel.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdExportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExportExcelActionPerformed(evt);
            }
        });
        getContentPane().add(cmdExportExcel);
        cmdExportExcel.setBounds(450, 480, 148, 25);
    }// </editor-fold>//GEN-END:initComponents
    
    private void chkOnlyMemorandumItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkOnlyMemorandumItemStateChanged
        // TODO add your handling code here:
        if(chkOnlyMemorandum.isSelected()) {
            if(chkIncludeMemorandum.isSelected()) {
                chkIncludeMemorandum.setSelected(false);
            }
        }
    }//GEN-LAST:event_chkOnlyMemorandumItemStateChanged
    
    private void chkIncludeMemorandumItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkIncludeMemorandumItemStateChanged
        // TODO add your handling code here:
        if(chkIncludeMemorandum.isSelected()) {
            if(chkOnlyMemorandum.isSelected()) {
                chkOnlyMemorandum.setSelected(false);
            }
        }
    }//GEN-LAST:event_chkIncludeMemorandumItemStateChanged
    
    private void cmdRecieptRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRecieptRegisterActionPerformed
        // TODO add your handling code here:
        GenerateRecieptRegister();
        return;
        
    }//GEN-LAST:event_cmdRecieptRegisterActionPerformed
    
    private void cmdPreview1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreview1ActionPerformed
        // TODO add your handling code here:
        // Common format for All Book
        GenerateBookSummary();
        return;
        //}
    }//GEN-LAST:event_cmdPreview1ActionPerformed
    
    private void cmdSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSearchActionPerformed
        // TODO add your handling code here:
        searchWithin(' ');
    }//GEN-LAST:event_cmdSearchActionPerformed
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formMouseClicked
    
    private void cmdGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGenerateActionPerformed
        // TODO add your handling code here:
        GenerateGrid();
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdGenerateActionPerformed
    
    private void txtBookCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBookCodeFocusLost
        // TODO add your handling code here:
        lblBookName.setText(clsBook.getBookName(EITLERPGLOBAL.gCompanyID, txtBookCode.getText()));
    }//GEN-LAST:event_txtBookCodeFocusLost
    
    private void txtBookCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBookCodeKeyPressed
        // TODO add your handling code here:
        try {
            
            if(evt.getKeyCode()==112) {
                LOV aList=new LOV();
                
                aList.SQL="SELECT BOOK_CODE,BOOK_NAME FROM D_FIN_BOOK_MASTER ORDER BY BOOK_NAME";
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=FinanceGlobal.FinURL;
                
                if(aList.ShowLOV()) {
                    txtBookCode.setText(aList.ReturnVal);
                    lblBookName.setText(clsBook.getBookName(EITLERPGLOBAL.gCompanyID, txtBookCode.getText()));
                }
                
            }
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_txtBookCodeKeyPressed
    
    private void txtSubCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSubCodeFocusLost
        // TODO add your handling code here:
        lblAccountName.setText(clsPartyMaster.getAccountName(txtMainCode.getText(),txtSubCode.getText()));
    }//GEN-LAST:event_txtSubCodeFocusLost
    
    private void txtSubCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSubCodeKeyPressed
        // TODO add your handling code here:
        try {
            
            if(evt.getKeyCode()==112) {
                
                LOV aList=new LOV();
                
                aList.SQL="SELECT PARTY_CODE,PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE APPROVED=1 ORDER BY PARTY_NAME";
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=FinanceGlobal.FinURL;
                
                if(aList.ShowLOV()) {
                    txtSubCode.setText(aList.ReturnVal);
                    lblAccountName.setText(clsPartyMaster.getAccountName(txtMainCode.getText(),txtSubCode.getText()));
                }
                
            }
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_txtSubCodeKeyPressed
    
    private void txtMainCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMainCodeFocusLost
        // TODO add your handling code here:
        lblAccountName.setText(clsPartyMaster.getAccountName(txtMainCode.getText(),txtSubCode.getText()));
    }//GEN-LAST:event_txtMainCodeFocusLost
    
    private void txtMainCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMainCodeKeyPressed
        // TODO add your handling code here:
        try {
            if(evt.getKeyCode()==112) {
                LOV aList=new LOV();
                
                aList.SQL="SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL WHERE  APPROVED=1 ORDER BY ACCOUNT_NAME";
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=FinanceGlobal.FinURL;
                
                if(aList.ShowLOV()) {
                    
                    txtMainCode.setText(aList.ReturnVal);
                    lblAccountName.setText(clsPartyMaster.getAccountName(txtMainCode.getText(),txtSubCode.getText()));
                }
                
            }
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_txtMainCodeKeyPressed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        
        //Decide the format based on book code
        String BookCode=txtBookCode.getText();
        int BookType=clsBook.getBookType(EITLERPGLOBAL.gCompanyID, BookCode);
        String FromDate=EITLERPGLOBAL.formatDateDB(txtFromDate.getText());
        System.out.println(FromDate);
        String ToDate=EITLERPGLOBAL.formatDateDB(txtToDate.getText());
        System.out.println(ToDate);
        //Bank Book Printing
        //if(clsBook.IsBankTR(BookCode)) {
        if(BookType==1) {
            GenerateBankBook();
            return;
        }
        
        if(BookType==2) {
            if(txtBookCode.getText().trim().equals("02")||txtBookCode.getText().trim().equals("21")){
               GenerateSJV021421();
               return; 
            }
            else if(txtBookCode.getText().trim().equals("01"))
            {
             //GenerateSJV01(FromDate,ToDate,BookCode);
             //System.out.println("1");
             GenerateSJV01GST(FromDate,ToDate,BookCode);
             System.out.println("1");
             //GenerateSJV011(FromDate,ToDate,BookCode);
             //System.out.println("2");
             GenerateSJV011GST(FromDate,ToDate,BookCode);
             System.out.println("2");
             //GenerateSJV012(FromDate,ToDate,BookCode);
             //System.out.println("3");
             GenerateSJV012GST(FromDate,ToDate,BookCode);
             System.out.println("3");
             //GenerateSJV01Summary(FromDate,ToDate,BookCode);
             GenerateSJV01SummaryGST(FromDate,ToDate,BookCode);
             return;
            }
            else if(txtBookCode.getText().trim().equals("09"))
            {
             //GenerateSJV09(FromDate,ToDate,BookCode);
             GenerateSJV09GST(FromDate,ToDate,BookCode);
             return;
            }
            else if(txtBookCode.getText().trim().equals("10"))
            {
            //GenerateSJVBook();
            GenerateSJV021421();
            return;
            }
            else if(txtBookCode.getText().trim().equals("11"))
            {
             //GenerateSJV11(FromDate,ToDate,BookCode);
             GenerateSJV11GST(FromDate,ToDate,BookCode);
             return;  
            }           
            else if(txtBookCode.getText().trim().equals("14")){
                //GenerateSJVBook1314151719();
                //GenerateSJV021421();
                //GenerateSJVBook14();
                GenerateSJV021421();
                return;
            }
            else{
            GenerateJournalBook();
            return;
            }
        }
        
        
        if(BookType==3) {
            if(txtBookCode.getText().trim().equals("40")||txtBookCode.getText().trim().equals("42")||txtBookCode.getText().trim().equals("43")||txtBookCode.getText().trim().equals("44")||txtBookCode.getText().trim().equals("61")||txtBookCode.getText().trim().equals("63")||txtBookCode.getText().trim().equals("64")||txtBookCode.getText().trim().equals("65")){
             //GeneratePurchaseJournalBookPJVOnlyOld();
             GeneratePurchaseJournalBookPJVOnly();
             return;
            }else if(txtBookCode.getText().trim().equals("41"))
            {
            GeneratePurchaseJournalBookPJV41Only();
            //GenerateSJV021421();
             return;
            }
            else{
            if(txtBookCode.getText().trim().equals("12")||txtBookCode.getText().trim().equals("16")||txtBookCode.getText().trim().equals("18")||txtBookCode.getText().trim().equals("20")){
            GenerateSJVBook();    
            //GenerateSJV021421();
            return;
                }
            else if(txtBookCode.getText().trim().equals("04")){
              GenerateSJV021421();
              return;
            }
            else if(txtBookCode.getText().trim().equals("15")){
              GenerateSJVBook13151719();
              return;
            }
            else if(txtBookCode.getText().trim().equals("17")){
              GenerateSJVBook13151719();
              return;
            }
            else if(txtBookCode.getText().trim().equals("19")){
              GenerateSJVBook13151719();
              return;
            }
            else{
            GeneratePurchaseJournalBook();
            return;
                }
            }
        }
        if(BookType==4) {            
            //GenerateSJVBook();    
            //GenerateSJVBook13151719();
            GenerateSJV021421();
            return;            
        }
        
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(TableBook, new File("/root/Desktop/BOOK_PRINTING.xls"));

            exp.fillData(TableBook, new File("D://BOOK_PRINTING.xls"));

            File file = new File("/root/Desktop/BOOK_PRINTING.xls");
            File file1 = new File("D://BOOK_PRINTING.xls");
            if (!Desktop.isDesktopSupported()) {
                JOptionPane.showMessageDialog(null, "Desktop Not Supported");
                return;
            } else {
                Desktop desk = Desktop.getDesktop();
                if (file.exists()) {
                    desk.open(file);
                } else if (file1.exists()) {
                    desk.open(file1);
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmdExportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExportExcelActionPerformed
        File file = null;
        file1.setVisible(true);
        try {
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);
            
            exp1.fillData(TableData, new File(file1.getSelectedFile().toString() + ".xls"), "BOOK");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file1.getSelectedFile().toString() + " successfully... ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdExportExcelActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JTable TableBook;
    private javax.swing.JTable TableData;
    private javax.swing.JCheckBox chkApproved;
    private javax.swing.JCheckBox chkIncludeMemorandum;
    private javax.swing.JCheckBox chkOnlyMemorandum;
    private javax.swing.JComboBox cmbSort;
    private javax.swing.JButton cmdExportExcel;
    private javax.swing.JButton cmdGenerate;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreview1;
    private javax.swing.JButton cmdRecieptRegister;
    private javax.swing.JButton cmdSearch;
    private javax.swing.JFileChooser file1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAccountName;
    private javax.swing.JLabel lblBookName;
    private javax.swing.JLabel lblSortOn;
    private javax.swing.JTextField txtBookCode;
    private javax.swing.JTextField txtFromAmount;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtFromVoucher;
    private javax.swing.JTextField txtMainCode;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSubCode;
    private javax.swing.JTextField txtToAmount;
    private javax.swing.JTextField txtToDate;
    private javax.swing.JTextField txtToVoucher;
    // End of variables declaration//GEN-END:variables
    
    private void PreviewReport() {
        try {
            
            
            HashMap Parameters=new HashMap();
            Parameters.put("FROM_DATE",txtFromDate.getText());
            Parameters.put("TO_DATE",txtToDate.getText());
            Parameters.put("BOOK_CODE",txtBookCode.getText());
            
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptBookCode.rpt",Parameters,objData);
            
        }
        catch(Exception e) {
            
        }
        
    }
    
    
    private void GenerateGrid() {
        FormatGrid();
        String strCondition = "";
        try {
            
            objData=new TReportWriter.SimpleDataProvider.TTable();
            
            String strSQL="SELECT DISTINCT(A.VOUCHER_NO) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.COMPANY_ID=B.COMPANY_ID "+buildCriteria();
            if(chkApproved.isSelected()) {
                strCondition = " AND A.APPROVED=1 AND A.CANCELLED=0 ";
            } else {
                strCondition = " AND A.CANCELLED=0 ";
            }
            strSQL += strCondition;
            int SortOrder=EITLERPGLOBAL.getComboCode(cmbSort);
            
            switch(SortOrder) {
                case 1: strSQL+=" ORDER BY A.VOUCHER_NO ";break;
                case 2: strSQL+=" ORDER BY A.VOUCHER_DATE ";break;
                case 3: strSQL+=" ORDER BY A.BOOK_CODE ";break;
                case 4: strSQL+=" ORDER BY CONVERT(A.LEGACY_NO,SIGNED) ";break;
                case 5: strSQL+=" ORDER BY B.INVOICE_DATE,B.INVOICE_NO ";break;
            }
            //System.out.println("detail :-"+strSQL);
            ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    
                    String VoucherNo=UtilFunctions.getString(rsTmp,"VOUCHER_NO"," ");
                    
                    //Add Blank Row
                    Object[] rowData=new Object[1];
                    DataModel.addRow(rowData);
                    
                    ResultSet rsVoucher=data.getResult("SELECT * FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO='"+VoucherNo+"'",FinanceGlobal.FinURL);
                    rsVoucher.first();
                    
                    int Counter=0;
                    
                    if(rsVoucher.getRow()>0) {
                        while(!rsVoucher.isAfterLast()) {
                            
                            Counter++;
                            
                            rowData=new Object[1];
                            DataModel.addRow(rowData);
                            int NewRow=TableData.getRowCount()-1;
                            
                            if(Counter==1) {
                                DataModel.setValueByVariable("VOUCHER_NO",UtilFunctions.getString(rsVoucher,"VOUCHER_NO",""),NewRow);
                                DataModel.setValueByVariable("VOUCHER_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"VOUCHER_DATE","")),NewRow);
                                DataModel.setValueByVariable("BOOK_CODE",UtilFunctions.getString(rsVoucher,"BOOK_CODE",""),NewRow);
                                DataModel.setValueByVariable("LEGACY_NO",UtilFunctions.getString(rsVoucher,"LEGACY_NO",""),NewRow);
                            }
                            
                            String MainCode=UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE","");
                            String SubCode=UtilFunctions.getString(rsVoucher,"SUB_ACCOUNT_CODE","");
                            
                            DataModel.setValueByVariable("MAIN_ACCOUNT_CODE",MainCode,NewRow);
                            DataModel.setValueByVariable("SUB_ACCOUNT_CODE",SubCode,NewRow);
                            DataModel.setValueByVariable("ACCOUNT_NAME",clsPartyMaster.getAccountName(MainCode,SubCode),NewRow);
                            
                            if(UtilFunctions.getString(rsVoucher,"EFFECT","").trim().equals("D")) {
                                DataModel.setValueByVariable("DR_AMOUNT",dFormat.format(EITLERPGLOBAL.round(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0),2)) ,NewRow);
                            }
                            else {
                                DataModel.setValueByVariable("CR_AMOUNT",dFormat.format(EITLERPGLOBAL.round(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0),2)) ,NewRow);
                            }
                            
                            
                            DataModel.setValueByVariable("PO_NO",UtilFunctions.getString(rsVoucher,"PO_NO","") ,NewRow);
                            DataModel.setValueByVariable("PO_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"PO_DATE","")),NewRow);
                            DataModel.setValueByVariable("INVOICE_NO",UtilFunctions.getString(rsVoucher,"INVOICE_NO","") ,NewRow);
                            DataModel.setValueByVariable("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"INVOICE_DATE","")),NewRow);
                            DataModel.setValueByVariable("CHEQUE_NO",UtilFunctions.getString(rsVoucher,"CHEQUE_NO","") ,NewRow);
                            DataModel.setValueByVariable("CHEQUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"CHEQUE_DATE","")),NewRow);
                            
                            
                            
                            //Add Row to the Temp Table //
                            TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                            
                            
                            
                            
                            objRow.setValue("VOUCHER_NO", UtilFunctions.getString(rsVoucher,"VOUCHER_NO",""));
                            objRow.setValue("VOUCHER_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"VOUCHER_DATE","")));
                            
                            String mcode = "";
                            mcode = UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE","");
                            mcode+=" ";
                            mcode+=clsPartyMaster.getAccountName(MainCode,SubCode);
                            
                            if(mcode.length()>19){
                                mcode=mcode.substring(0,19);
                            }
                            objRow.setValue("MAIN_CODE", mcode);
                            objRow.setValue("SUB_CODE", UtilFunctions.getString(rsVoucher,"SUB_ACCOUNT_CODE",""));
                            objRow.setValue("CHEQUE_NO", UtilFunctions.getString(rsVoucher,"CHEQUE_NO",""));
                            objRow.setValue("CHEQUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"CHEQUE_DATE","")));
                            objRow.setValue("PO_NO", UtilFunctions.getString(rsVoucher,"PO_NO",""));
                            objRow.setValue("INVOICE_NO", UtilFunctions.getString(rsVoucher,"INVOICE_NO",""));
                            objRow.setValue("REMARKS", UtilFunctions.getString(rsVoucher,"REMARKS",""));
                            objRow.setValue("COUNT_VAL", "0");
                            //objRow.setValue("AC_NAME", clsPartyMaster.getAccountName(MainCode,SubCode));
                            
                            
                            if(UtilFunctions.getString(rsVoucher,"EFFECT","").trim().equals("D")) {
                                objRow.setValue("DEBIT_AMOUNT",dFormat.format( EITLERPGLOBAL.round(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0),2)));
                            }else{
                                objRow.setValue("CREDIT_AMOUNT",dFormat.format( EITLERPGLOBAL.round(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0),2)));
                            }
                            
                            
                            objData.AddRow(objRow);
                            
                            //==========================//
                            rsVoucher.next();
                        }
                    }
                    rsTmp.next();
                }
            }
            
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    
    private String buildCriteria() {
        String Condition="";
        
        try {
            if(!txtFromVoucher.getText().trim().equals("")) {
                Condition+=" AND A.VOUCHER_NO>='"+txtFromVoucher.getText()+"' ";
            }
            
            if(!txtToVoucher.getText().trim().equals("")) {
                Condition+=" AND A.VOUCHER_NO<='"+txtToVoucher.getText()+"' ";
            }
            
            if(!txtFromDate.getText().trim().equals("")) {
                Condition+=" AND A.VOUCHER_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
            }
            
            if(!txtToDate.getText().trim().equals("")) {
                Condition+=" AND A.VOUCHER_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
            }
            
            if(!txtBookCode.getText().trim().equals("")) {
                Condition+=" AND A.BOOK_CODE='"+txtBookCode.getText()+"' ";
            }
            
            if(!txtFromAmount.getText().trim().equals("")) {
                Condition+=" AND B.AMOUNT>="+txtFromAmount.getText()+" ";
            }
            
            if(!txtToAmount.getText().trim().equals("")) {
                Condition+=" AND B.AMOUNT<="+txtToAmount.getText()+" ";
            }
            
            if(!txtMainCode.getText().trim().equals("")) {
                Condition+=" AND B.MAIN_ACCOUNT_CODE='"+txtMainCode.getText()+"' ";
            }
            
            if(!txtSubCode.getText().trim().equals("")) {
                Condition+=" AND B.SUB_ACCOUNT_CODE='"+txtSubCode.getText()+"' ";
            }
            
            if(chkApproved.isSelected()) {
                Condition += " AND A.APPROVED=1 AND A.CANCELLED=0 ";
            } else {
                Condition += " AND A.CANCELLED=0 ";
            }
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
        return Condition;
    }
    
    
    
    
    private void FormatGrid() {
        try {
            DataModel=new EITLTableModel();
            TableData.removeAll();
            TableData.setModel(DataModel);
            TableData.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            DataModel.addColumn("Legacy No.");//8
            DataModel.addColumn("Voucher No."); //0
            DataModel.addColumn("Date");//1
            DataModel.addColumn("Main Code");//2
            DataModel.addColumn("Sub Code");//3
            DataModel.addColumn("A/c Name");//5
            DataModel.addColumn("Debit Amount");//6
            DataModel.addColumn("Credit Amount");//7
            DataModel.addColumn("PO No.");//9
            DataModel.addColumn("PO Date");//10
            DataModel.addColumn("Invoice No.");//11
            DataModel.addColumn("Invoice Date");//12
            DataModel.addColumn("Cheque No.");//13
            DataModel.addColumn("Date");//14
            DataModel.addColumn("Book Code");//4
            
            
            
            
            DataModel.SetVariable(0,"LEGACY_NO");
            DataModel.SetVariable(1,"VOUCHER_NO");
            DataModel.SetVariable(2,"VOUCHER_DATE");
            DataModel.SetVariable(3,"MAIN_ACCOUNT_CODE");
            DataModel.SetVariable(4,"SUB_ACCOUNT_CODE");
            DataModel.SetVariable(5,"ACCOUNT_NAME");
            DataModel.SetVariable(6,"DR_AMOUNT");
            DataModel.SetVariable(7,"CR_AMOUNT");
            DataModel.SetVariable(8,"PO_NO");
            DataModel.SetVariable(9,"PO_DATE");
            DataModel.SetVariable(10,"INVOICE_NO");
            DataModel.SetVariable(11,"INVOICE_DATE");
            DataModel.SetVariable(12,"CHEQUE_NO");
            DataModel.SetVariable(13,"CHEQUE_DATE");
            DataModel.SetVariable(14,"BOOK_CODE");
            
            RowFormat =new EITLTableCellRenderer();
            
            for(int j=0;j<TableData.getColumnCount();j++) {
                TableData.getColumnModel().getColumn(j).setCellRenderer(RowFormat);
            }
            
        }
        catch(Exception e) {
            
        }
    }
    
    
    private void GenerateCombo() {
        try {
            
            cmbSortModel=new EITLComboModel();
            cmbSort.removeAllItems();
            cmbSort.setModel(cmbSortModel);
            
            ComboData objData=new ComboData();
            objData.Text="Voucher No.";
            objData.Code=1;
            cmbSortModel.addElement(objData);
            
            objData=new ComboData();
            objData.Text="Voucher Date";
            objData.Code=2;
            cmbSortModel.addElement(objData);
            
            objData=new ComboData();
            objData.Text="Book Code";
            objData.Code=3;
            cmbSortModel.addElement(objData);
            
            objData=new ComboData();
            objData.Text="Legacy No.";
            objData.Code=4;
            cmbSortModel.addElement(objData);
            
            objData=new ComboData();
            objData.Text="Invoice Date & Invoice No.";
            objData.Code=5;
            cmbSortModel.addElement(objData);
            
        }
        catch(Exception e) {
            
        }
    }
    
    
    private void searchWithin(char recentKey) {
        
        try {
            
            RowFormat.removeBackColors();
            
            TableData.repaint();
            
            String searchString=txtSearch.getText();
            
            if(!searchString.trim().equals("")) {
                
                
                if(recentKey!=' ') {
                    searchString=searchString+recentKey;
                }
                
                searchString=searchString.toLowerCase();
                
                int currentCol=TableData.getSelectedColumn();
                
                for(int i=0;i<=TableData.getRowCount()-1;i++) {
                    
                    if(TableData.getValueAt(i,currentCol).toString().toLowerCase().indexOf(searchString)!=-1) {
                        
                        TableData.changeSelection(i, currentCol, false,false);
                        
                        for(int j=0;j<TableData.getColumnCount();j++) {
                            RowFormat.setBackColor(i, j, Color.YELLOW);
                        }
                        
                    }
                }
                
            }
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    
    // Purchase Journal
    private void GeneratePurchaseJournalBook() {
        try {
            String Condition="";
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("VOUCHER_NO");
            objReportData.AddColumn("LEGACY_NO");
            objReportData.AddColumn("VOUCHER_DATE");
            objReportData.AddColumn("MAIN_CODE");
            objReportData.AddColumn("SUB_CODE");
            objReportData.AddColumn("PARTY_NAME");
            objReportData.AddColumn("REMARKS");
            objReportData.AddColumn("ST");
            objReportData.AddColumn("CHEQUE_NO");
            objReportData.AddColumn("CHEQUE_DATE");
            objReportData.AddColumn("PO_NO");
            objReportData.AddColumn("PO_DATE");
            objReportData.AddColumn("INVOICE_NO");
            objReportData.AddColumn("INVOICE_DATE");
            objReportData.AddColumn("ALLOCATION_CODE");
            objReportData.AddColumn("ALLOCATION_AC_NAME");
            objReportData.AddColumn("ALLOCATION_AMOUNT_C");
            objReportData.AddColumn("ALLOCATION_AMOUNT_D");
            
            String strSQL="SELECT DISTINCT(A.VOUCHER_NO) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL B WHERE " +
            "A.VOUCHER_NO=B.VOUCHER_NO AND A.COMPANY_ID=B.COMPANY_ID AND A.APPROVED=1 AND A.CANCELLED=0 ";
            try {
                if(!txtFromVoucher.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_NO>='"+txtFromVoucher.getText()+"' ";
                }
                
                if(!txtToVoucher.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_NO<='"+txtToVoucher.getText()+"' ";
                }
                
                if(!txtFromDate.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                }
                
                if(!txtToDate.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                }
                
                if(!txtBookCode.getText().trim().equals("")) {
                    Condition+=" AND A.BOOK_CODE='"+txtBookCode.getText()+"' ";
                }
                
                if(!txtFromAmount.getText().trim().equals("")) {
                    Condition+=" AND B.AMOUNT>="+txtFromAmount.getText()+" ";
                }
                
                if(!txtToAmount.getText().trim().equals("")) {
                    Condition+=" AND B.AMOUNT<="+txtToAmount.getText()+" ";
                }
                
                if(!txtMainCode.getText().trim().equals("")) {
                    Condition+=" AND SUBSTRING(B.MAIN_ACCOUNT_CODE,1,6)='"+txtMainCode.getText()+"' ";
                }
                
                if(!txtSubCode.getText().trim().equals("")) {
                    Condition+=" AND B.SUB_ACCOUNT_CODE='"+txtSubCode.getText()+"' ";
                }
                
                
            }
            catch(Exception e) {
                e.printStackTrace();
            }
            strSQL = strSQL + Condition;
            int SortOrder=EITLERPGLOBAL.getComboCode(cmbSort);
            double cBookTotal = 0;
            double dBookTotal = 0;
            switch(SortOrder) {
                case 1: strSQL+=" ORDER BY A.VOUCHER_NO ";break;
                case 2: strSQL+=" ORDER BY A.VOUCHER_DATE ";break;
                case 3: strSQL+=" ORDER BY A.BOOK_CODE ";break;
                case 4: strSQL+=" ORDER BY CONVERT(A.LEGACY_NO,SIGNED) ";break;
            }
            
            
            
            ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    
                    String VoucherNo=UtilFunctions.getString(rsTmp,"VOUCHER_NO"," ");
                    
                    //Find unique Blocks within voucher entry
                    ResultSet rsBlock=data.getResult("SELECT DISTINCT(BLOCK_NO) FROM D_FIN_VOUCHER_DETAIL_EX WHERE VOUCHER_NO='"+VoucherNo+"' ",FinanceGlobal.FinURL);
                    
                    boolean noSubCode = false;
                    if(rsBlock.getRow()>0) {
                        while(!rsBlock.isAfterLast()) {
                            int BlockNo=UtilFunctions.getInt(rsBlock,"BLOCK_NO",0);
                            
                            ResultSet rsVoucher;
                            
                            //Check if there is a record with sub code
                            if(data.IsRecordExist("SELECT VOUCHER_NO FROM D_FIN_VOUCHER_DETAIL_EX WHERE VOUCHER_NO='"+VoucherNo+"' AND BLOCK_NO="+BlockNo+" AND TRIM(SUB_ACCOUNT_CODE)<>''",FinanceGlobal.FinURL)) {
                                rsVoucher=data.getResult("SELECT *,A.REMARKS AS HEADER_REMARKS FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.VOUCHER_NO='"+VoucherNo+"' AND B.BLOCK_NO="+BlockNo+" ORDER BY SUB_ACCOUNT_CODE DESC",FinanceGlobal.FinURL);                                
                                noSubCode = false;
                            }
                            else {
                                //Give priority to credit entry first and move other record to allocation side
                                rsVoucher=data.getResult("SELECT *,A.REMARKS AS HEADER_REMARKS FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.VOUCHER_NO='"+VoucherNo+"' AND B.BLOCK_NO="+BlockNo+" ORDER BY EFFECT",FinanceGlobal.FinURL);                                
                                noSubCode = true;
                            }
                            
                            
                            //(1) First Record
                            rsVoucher.first();
                            
                            TReportWriter.SimpleDataProvider.TRow objRow=objReportData.newRow();
                            
                            objRow.setValue("VOUCHER_NO",UtilFunctions.getString(rsVoucher,"VOUCHER_NO",""));
                            objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsVoucher,"LEGACY_NO",""));
                            objRow.setValue("VOUCHER_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"VOUCHER_DATE","")));
                            objRow.setValue("MAIN_CODE",UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE",""));
                            objRow.setValue("SUB_CODE",UtilFunctions.getString(rsVoucher,"SUB_ACCOUNT_CODE",""));
                            
                            String MainCode=UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE","");
                            String SubCode=UtilFunctions.getString(rsVoucher,"SUB_ACCOUNT_CODE","");
                            if(SubCode.equals("619662")) {
                                boolean halt=true;
                            }
                            String PartyName="";
                            
                            if(!SubCode.trim().equals("")) {
                                PartyName=clsPartyMaster.getAccountName(MainCode, SubCode).replace('\\',' ').replace('/',' ');
                                /*if(PartyName.length()>=30) {
                                    PartyName=PartyName.substring(0,30);
                                }*/
                            }
                            
                            objRow.setValue("PARTY_NAME",PartyName);
                            String HeaderRemarks = UtilFunctions.getString(rsVoucher,"HEADER_REMARKS","").replace('\n',' ').trim().replace('\\',' ').replace('/',' ');
                            if(HeaderRemarks.length()>=106) {   //Previous value was 57 updated as per requirement
                                HeaderRemarks=HeaderRemarks.substring(0,106);  //Previous value was 57 updated as per requirement
                            }
                            //objRow.setValue("REMARKS",UtilFunctions.getString(rsVoucher,"HEADER_REMARKS","").replace('\n',' ').trim().replace('\t',' ').replace('\\',' ').trim());
                            objRow.setValue("REMARKS",HeaderRemarks.replace('\n',' ').trim().replace('\t',' ').replace('\\',' ').trim());
                            objRow.setValue("CHEQUE_NO",UtilFunctions.getString(rsVoucher,"CHEQUE_NO",""));
                            objRow.setValue("CHEQUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"CHEQUE_DATE","")));
                            objRow.setValue("PO_NO",UtilFunctions.getString(rsVoucher,"PO_NO",""));
                            objRow.setValue("PO_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"PO_DATE","")));
                            objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsVoucher,"INVOICE_NO",""));
                            objRow.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"INVOICE_DATE","")));
                            
                            //Move to next record
                            rsVoucher.next();
                            
                            String AllocationCode=UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE","");
                            String AllocationAcName=clsPartyMaster.getAccountName(AllocationCode, "");
                            
                            objRow.setValue("ALLOCATION_CODE",AllocationCode);
                            objRow.setValue("ALLOCATION_AC_NAME",AllocationAcName);
                            
                            if(UtilFunctions.getString(rsVoucher,"EFFECT","").trim().equals("C") || noSubCode) {
                                objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0))));
                                //objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND EFFECT='C'",FinanceGlobal.FinURL)));
                                cBookTotal += Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0)); 
                            } else {
                                objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0))));
                                //objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND EFFECT='D'",FinanceGlobal.FinURL)));
                                dBookTotal += Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));
                            }
                            
                            String STMainCode = data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND LENGTH(MAIN_ACCOUNT_CODE)=9 AND EFFECT='D'",FinanceGlobal.FinURL);
                            String STCode = STMainCode.substring(STMainCode.indexOf(".")+1);
                            objRow.setValue("ST",STCode);
                            
                            objReportData.AddRow(objRow);
                            
                            rsBlock.next();
                        }
                    }
                    
                    rsTmp.next();
                }
                TReportWriter.SimpleDataProvider.TRow objRow=objReportData.newRow();
                
                objRow.setValue("VOUCHER_NO","");
                objRow.setValue("LEGACY_NO","");
                objRow.setValue("VOUCHER_DATE","");
                objRow.setValue("MAIN_CODE","");
                objRow.setValue("SUB_CODE","");
                objRow.setValue("PARTY_NAME","*** BOOK TOTAL ***");
                objRow.setValue("REMARKS","");
                objRow.setValue("CHEQUE_NO","");
                objRow.setValue("CHEQUE_DATE","");
                objRow.setValue("PO_NO","");
                objRow.setValue("PO_DATE","");
                objRow.setValue("INVOICE_NO","");
                objRow.setValue("INVOICE_DATE","");
                objRow.setValue("ALLOCATION_CODE","");
                objRow.setValue("ALLOCATION_AC_NAME","");
                objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(dBookTotal));
                objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(cBookTotal));
                objRow.setValue("ST","");
                objReportData.AddRow(objRow);
            }
            
            HashMap Parameters=new HashMap();
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE",txtFromDate.getText());
            Parameters.put("TO_DATE",txtToDate.getText());
            Parameters.put("BOOK_CODE",txtBookCode.getText());
            Parameters.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,txtBookCode.getText()));
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptPurchaseJournalBook.rpt",Parameters,objReportData);
            //objEngine.PreviewReport("D:\\Soft\\untitled folder\\dinesh\\EITLERP\\Reports\\finance\\rptPurchaseJournalBook.rpt",Parameters,objReportData);
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
    }
    
    // Purchase Journal PJV only
    private void GeneratePurchaseJournalBookPJVOnlyOld() {
        try {
            String Condition="";
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("VOUCHER_NO");
            objReportData.AddColumn("LEGACY_NO");
            objReportData.AddColumn("VOUCHER_DATE");
            objReportData.AddColumn("MAIN_CODE");
            objReportData.AddColumn("SUB_CODE");
            objReportData.AddColumn("PARTY_NAME");
            objReportData.AddColumn("REMARKS");
            objReportData.AddColumn("ST");
            objReportData.AddColumn("CHEQUE_NO");
            objReportData.AddColumn("CHEQUE_DATE");
            objReportData.AddColumn("PO_NO");
            objReportData.AddColumn("PO_DATE");
            objReportData.AddColumn("INVOICE_NO");
            objReportData.AddColumn("INVOICE_DATE");
            objReportData.AddColumn("ALLOCATION_CODE");
            objReportData.AddColumn("ALLOCATION_AC_NAME");
            objReportData.AddColumn("ALLOCATION_AMOUNT_C");
            objReportData.AddColumn("ALLOCATION_AMOUNT_D");
            
            String strSQL="SELECT DISTINCT(A.VOUCHER_NO) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL B WHERE " +
            "A.VOUCHER_NO=B.VOUCHER_NO AND A.COMPANY_ID=B.COMPANY_ID AND A.APPROVED=1 AND A.CANCELLED=0 ";
            try {
                if(!txtFromVoucher.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_NO>='"+txtFromVoucher.getText()+"' ";
                }
                
                if(!txtToVoucher.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_NO<='"+txtToVoucher.getText()+"' ";
                }
                
                if(!txtFromDate.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                }
                
                if(!txtToDate.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                }
                
                if(!txtBookCode.getText().trim().equals("")) {
                    Condition+=" AND A.BOOK_CODE='"+txtBookCode.getText()+"' ";
                }
                
                if(!txtFromAmount.getText().trim().equals("")) {
                    Condition+=" AND B.AMOUNT>="+txtFromAmount.getText()+" ";
                }
                
                if(!txtToAmount.getText().trim().equals("")) {
                    Condition+=" AND B.AMOUNT<="+txtToAmount.getText()+" ";
                }
                
                if(!txtMainCode.getText().trim().equals("")) {
                    Condition+=" AND SUBSTRING(B.MAIN_ACCOUNT_CODE,1,6)='"+txtMainCode.getText()+"' ";
                }
                
                if(!txtSubCode.getText().trim().equals("")) {
                    Condition+=" AND B.SUB_ACCOUNT_CODE='"+txtSubCode.getText()+"' ";
                }
                
                
            }
            catch(Exception e) {
                e.printStackTrace();
            }
            strSQL = strSQL + Condition;
            int SortOrder=EITLERPGLOBAL.getComboCode(cmbSort);
            double cBookTotal = 0;
            double dBookTotal = 0;
            switch(SortOrder) {
                case 1: strSQL+=" ORDER BY A.VOUCHER_NO ";break;
                case 2: strSQL+=" ORDER BY A.VOUCHER_DATE ";break;
                case 3: strSQL+=" ORDER BY A.BOOK_CODE ";break;
                case 4: strSQL+=" ORDER BY CONVERT(A.LEGACY_NO,SIGNED) ";break;
            }
            
            
            
            ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    
                    String VoucherNo=UtilFunctions.getString(rsTmp,"VOUCHER_NO"," ");
                    
                    //Find unique Blocks within voucher entry
                    ResultSet rsBlock=data.getResult("SELECT DISTINCT(BLOCK_NO) FROM D_FIN_VOUCHER_DETAIL_EX WHERE VOUCHER_NO='"+VoucherNo+"' ",FinanceGlobal.FinURL);
                    
                    boolean noSubCode = false;
                   
                    if(rsBlock.getRow()>0) {
                        double da=0;
                        double ca=0;
                        int k=0;
                        
                        while(!rsBlock.isAfterLast()) {
                            k++;
                            int BlockNo=UtilFunctions.getInt(rsBlock,"BLOCK_NO",0);
                            
                            ResultSet rsVoucher;
                            
                            //Check if there is a record with sub code
                            if(data.IsRecordExist("SELECT VOUCHER_NO FROM D_FIN_VOUCHER_DETAIL_EX WHERE VOUCHER_NO='"+VoucherNo+"' AND BLOCK_NO="+BlockNo+" AND TRIM(SUB_ACCOUNT_CODE)<>''",FinanceGlobal.FinURL)) {
                                rsVoucher=data.getResult("SELECT *,A.REMARKS AS HEADER_REMARKS FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.VOUCHER_NO='"+VoucherNo+"' AND B.BLOCK_NO="+BlockNo+" ORDER BY SUB_ACCOUNT_CODE DESC",FinanceGlobal.FinURL);                                
                                noSubCode = false;
                            }
                            else {
                                //Give priority to credit entry first and move other record to allocation side
                                rsVoucher=data.getResult("SELECT *,A.REMARKS AS HEADER_REMARKS FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.VOUCHER_NO='"+VoucherNo+"' AND B.BLOCK_NO="+BlockNo+" ORDER BY EFFECT",FinanceGlobal.FinURL);                                
                                noSubCode = true;
                            }
                            
                            
                            //(1) First Record
                            rsVoucher.first();
                            
                            TReportWriter.SimpleDataProvider.TRow objRow=objReportData.newRow();
                            
                            objRow.setValue("VOUCHER_NO",UtilFunctions.getString(rsVoucher,"VOUCHER_NO",""));
                            objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsVoucher,"LEGACY_NO",""));
                            objRow.setValue("VOUCHER_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"VOUCHER_DATE","")));
                            objRow.setValue("MAIN_CODE",UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE",""));
                            objRow.setValue("SUB_CODE",UtilFunctions.getString(rsVoucher,"SUB_ACCOUNT_CODE",""));
                            
                            String MainCode=UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE","");
                            String SubCode=UtilFunctions.getString(rsVoucher,"SUB_ACCOUNT_CODE","");
                            if(SubCode.equals("619662")) {
                                boolean halt=true;
                            }
                            String PartyName="";                            
                            if(!SubCode.trim().equals("")) {
                                PartyName=clsPartyMaster.getAccountName(MainCode, SubCode).replace('\\',' ').replace('/',' ');
                                /*if(PartyName.length()>=30) {
                                    PartyName=PartyName.substring(0,30);
                                }*/
                            }                            
                            objRow.setValue("PARTY_NAME",PartyName);
                            String HeaderRemarks = UtilFunctions.getString(rsVoucher,"HEADER_REMARKS","").replace('\n',' ').trim().replace('\\',' ').replace('/',' ');
                            if(HeaderRemarks.length()>=106) {   //Previous value was 57 updated as per requirement
                                HeaderRemarks=HeaderRemarks.substring(0,106);  //Previous value was 57 updated as per requirement
                            }
                            //objRow.setValue("REMARKS",UtilFunctions.getString(rsVoucher,"HEADER_REMARKS","").replace('\n',' ').trim().replace('\t',' ').replace('\\',' ').trim());
                            objRow.setValue("REMARKS",HeaderRemarks.replace('\n',' ').trim().replace('\t',' ').replace('\\',' ').trim());
                            objRow.setValue("CHEQUE_NO",UtilFunctions.getString(rsVoucher,"CHEQUE_NO",""));
                            objRow.setValue("CHEQUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"CHEQUE_DATE","")));
                            objRow.setValue("PO_NO",UtilFunctions.getString(rsVoucher,"PO_NO",""));
                            objRow.setValue("PO_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"PO_DATE","")));
                            objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsVoucher,"INVOICE_NO",""));
                            objRow.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"INVOICE_DATE","")));
                            
                            //Move to next record
                            rsVoucher.next();
                            
                            String AllocationCode=UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE","");
                            String AllocationAcName=clsPartyMaster.getAccountName(AllocationCode, "");
                            
                            objRow.setValue("ALLOCATION_CODE",AllocationCode);
                            objRow.setValue("ALLOCATION_AC_NAME",AllocationAcName);
                            
                            if(UtilFunctions.getString(rsVoucher,"EFFECT","").trim().equals("C") || noSubCode) {
                                objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0))));
                                //objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND EFFECT='C'",FinanceGlobal.FinURL)));
                                cBookTotal += Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0)); 
                                ca+=Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0)); 
                            } else {
                                objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0))));
                                //objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND EFFECT='D'",FinanceGlobal.FinURL)));
                                dBookTotal += Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));
                                da+=Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));
                            }
                            
                            String STMainCode = data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND LENGTH(MAIN_ACCOUNT_CODE)=9 AND EFFECT='D'",FinanceGlobal.FinURL);
                            String STCode = STMainCode.substring(STMainCode.indexOf(".")+1);
                            objRow.setValue("ST",STCode);
                            
                            objReportData.AddRow(objRow);
                            
                            rsBlock.next();
                        }
                         //int k=data.getIntValueFromDB("SELECT COUNT(DISTINCT BLOCK_NO) FROM D_FIN_VOUCHER_DETAIL_EX WHERE VOUCHER_NO='"+VoucherNo+"'");
                    if(k>1)                        {
                         TReportWriter.SimpleDataProvider.TRow objRow=objReportData.newRow();
                
                objRow.setValue("VOUCHER_NO","");
                objRow.setValue("LEGACY_NO","");
                objRow.setValue("VOUCHER_DATE","");
                objRow.setValue("MAIN_CODE","");
                objRow.setValue("SUB_CODE","");
                objRow.setValue("PARTY_NAME","V O U C H E R  T O T A L ***");
                objRow.setValue("REMARKS","");
                objRow.setValue("CHEQUE_NO","");
                objRow.setValue("CHEQUE_DATE","");
                objRow.setValue("PO_NO","");
                objRow.setValue("PO_DATE","");
                objRow.setValue("INVOICE_NO","");
                objRow.setValue("INVOICE_DATE","");
                objRow.setValue("ALLOCATION_CODE","");
                objRow.setValue("ALLOCATION_AC_NAME","");
                objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(da));
                objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(ca));
                objRow.setValue("ST","");
                objReportData.AddRow(objRow);
                       }
                        
                    }
                   
                    rsTmp.next();
                }
                TReportWriter.SimpleDataProvider.TRow objRow=objReportData.newRow();
                
                objRow.setValue("VOUCHER_NO","");
                objRow.setValue("LEGACY_NO","");
                objRow.setValue("VOUCHER_DATE","");
                objRow.setValue("MAIN_CODE","");
                objRow.setValue("SUB_CODE","");
                objRow.setValue("PARTY_NAME","*** BOOK TOTAL ***");
                objRow.setValue("REMARKS","");
                objRow.setValue("CHEQUE_NO","");
                objRow.setValue("CHEQUE_DATE","");
                objRow.setValue("PO_NO","");
                objRow.setValue("PO_DATE","");
                objRow.setValue("INVOICE_NO","");
                objRow.setValue("INVOICE_DATE","");
                objRow.setValue("ALLOCATION_CODE","");
                objRow.setValue("ALLOCATION_AC_NAME","");
                objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(dBookTotal));
                objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(cBookTotal));
                objRow.setValue("ST","");
                objReportData.AddRow(objRow);
            }
            
            HashMap Parameters=new HashMap();
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE",txtFromDate.getText());
            Parameters.put("TO_DATE",txtToDate.getText());
            Parameters.put("BOOK_CODE",txtBookCode.getText());
            Parameters.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,txtBookCode.getText()));
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptPurchaseJournalBookPJVOnly.rpt",Parameters,objReportData);
            //objEngine.PreviewReport("D:\\Soft\\untitled folder\\dinesh\\EITLERP\\Reports\\finance\\rptPurchaseJournalBook.rpt",Parameters,objReportData);
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }

    }
    
    private void GeneratePurchaseJournalBookPJVOnly() {
        try {
            String Condition="";
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("VOUCHER_NO");
            objReportData.AddColumn("LEGACY_NO");
            objReportData.AddColumn("VOUCHER_DATE");
            objReportData.AddColumn("MAIN_CODE");
            objReportData.AddColumn("SUB_CODE");
            objReportData.AddColumn("PARTY_NAME");
            objReportData.AddColumn("REMARKS");
            objReportData.AddColumn("ST");
            objReportData.AddColumn("CHEQUE_NO");
            objReportData.AddColumn("CHEQUE_DATE");
            objReportData.AddColumn("PO_NO");
            objReportData.AddColumn("PO_DATE");
            objReportData.AddColumn("INVOICE_NO");
            objReportData.AddColumn("INVOICE_DATE");
            objReportData.AddColumn("ALLOCATION_CODE");
            //objReportData.AddColumn("ALLOCATION_AC_NAME");
            objReportData.AddColumn("ALLOCATION_AMOUNT_C");
            objReportData.AddColumn("ALLOCATION_AMOUNT_D");
            objReportData.AddColumn("PARTY_AMOUNT_C");
            objReportData.AddColumn("PARTY_AMOUNT_D");
            
            String strSQL="SELECT DISTINCT(A.VOUCHER_NO) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL B WHERE " +
            "A.VOUCHER_NO=B.VOUCHER_NO AND A.COMPANY_ID=B.COMPANY_ID AND A.APPROVED=1 AND A.CANCELLED=0 ";
            try {
                if(!txtFromVoucher.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_NO>='"+txtFromVoucher.getText()+"' ";
                }
                
                if(!txtToVoucher.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_NO<='"+txtToVoucher.getText()+"' ";
                }
                
                if(!txtFromDate.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                }
                
                if(!txtToDate.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                }
                
                if(!txtBookCode.getText().trim().equals("")) {
                    Condition+=" AND A.BOOK_CODE='"+txtBookCode.getText()+"' ";
                }
                
                if(!txtFromAmount.getText().trim().equals("")) {
                    Condition+=" AND B.AMOUNT>="+txtFromAmount.getText()+" ";
                }
                
                if(!txtToAmount.getText().trim().equals("")) {
                    Condition+=" AND B.AMOUNT<="+txtToAmount.getText()+" ";
                }
                
                if(!txtMainCode.getText().trim().equals("")) {
                    Condition+=" AND SUBSTRING(B.MAIN_ACCOUNT_CODE,1,6)='"+txtMainCode.getText()+"' ";
                }
                
                if(!txtSubCode.getText().trim().equals("")) {
                    Condition+=" AND B.SUB_ACCOUNT_CODE='"+txtSubCode.getText()+"' ";
                }
                
                
            }
            catch(Exception e) {
                e.printStackTrace();
            }
            strSQL = strSQL + Condition;
            int SortOrder=EITLERPGLOBAL.getComboCode(cmbSort);
            double cBookTotal = 0;
            double dBookTotal = 0;            
            switch(SortOrder) {
                case 1: strSQL+=" ORDER BY A.VOUCHER_NO ";break;
                case 2: strSQL+=" ORDER BY A.VOUCHER_DATE ";break;
                case 3: strSQL+=" ORDER BY A.BOOK_CODE ";break;
                case 4: strSQL+=" ORDER BY CONVERT(A.LEGACY_NO,SIGNED) ";break;
            }
            
            
            
            ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                double da1=0;
                        double ca1=0;
                        double mod=0;
                        double partyTotal2 = 0;
            double partyTotal3 = 0;
            String partyadd="";
            String maincode="";
            String subcode="";
                while(!rsTmp.isAfterLast()) {
                    
                    String VoucherNo=UtilFunctions.getString(rsTmp,"VOUCHER_NO"," ");                    
                    //Find unique Blocks within voucher entry
                    ResultSet rsBlock=data.getResult("SELECT DISTINCT(BLOCK_NO) FROM D_FIN_VOUCHER_DETAIL_EX WHERE VOUCHER_NO='"+VoucherNo+"' ORDER BY BLOCK_NO",FinanceGlobal.FinURL);
                    
                    boolean noSubCode = false;
                   
                    if(rsBlock.getRow()>0) {
                        double da=0;
                        double ca=0;
                        double partyTotal = 0;
            double partyTotal1 = 0;
            String party="";
                        int k=0;
                        ca1=0;
                            da1=0;
                            mod=0;
                        
                        while(!rsBlock.isAfterLast()) {
                            
                            k++;
                            int BlockNo=UtilFunctions.getInt(rsBlock,"BLOCK_NO",0);
                            
                            ResultSet rsVoucher;
                            
                            //Check if there is a record with sub code
                            if(data.IsRecordExist("SELECT VOUCHER_NO FROM D_FIN_VOUCHER_DETAIL_EX WHERE VOUCHER_NO='"+VoucherNo+"' AND BLOCK_NO="+BlockNo+" AND TRIM(SUB_ACCOUNT_CODE)<>''",FinanceGlobal.FinURL)) {
                                rsVoucher=data.getResult("SELECT *,A.REMARKS AS HEADER_REMARKS FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.VOUCHER_NO='"+VoucherNo+"' AND B.BLOCK_NO="+BlockNo+" ORDER BY SUB_ACCOUNT_CODE DESC",FinanceGlobal.FinURL);                                
                                noSubCode = false;
                            }
                            else {
                                //Give priority to credit entry first and move other record to allocation side
                                rsVoucher=data.getResult("SELECT *,A.REMARKS AS HEADER_REMARKS FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.VOUCHER_NO='"+VoucherNo+"' AND B.BLOCK_NO="+BlockNo+" ORDER BY EFFECT",FinanceGlobal.FinURL);                                
                                noSubCode = true;
                            }
                                                        
                            //(1) First Record
                            rsVoucher.first();                            
                            TReportWriter.SimpleDataProvider.TRow objRow=objReportData.newRow();
                            if(k==1){
                            objRow.setValue("VOUCHER_NO",UtilFunctions.getString(rsVoucher,"VOUCHER_NO",""));
                            objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsVoucher,"LEGACY_NO",""));
                            objRow.setValue("VOUCHER_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"VOUCHER_DATE","")));
                            objRow.setValue("PO_NO",UtilFunctions.getString(rsVoucher,"PO_NO",""));
                            objRow.setValue("PO_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"PO_DATE","")));
                            String HeaderRemarks = UtilFunctions.getString(rsVoucher,"HEADER_REMARKS","").replace('\n',' ').trim().replace('\\',' ').replace('/',' ');
                            if(HeaderRemarks.length()>=135) {   //Previous value was 57 updated as per requirement //Previous value was 106 updated as per requirement
                                HeaderRemarks=HeaderRemarks.substring(0,135);  //Previous value was 57 updated as per requirement //Previous value was 106 updated as per requirement
                            }
                            objRow.setValue("REMARKS",HeaderRemarks);                            
                            objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsVoucher,"INVOICE_NO",""));
                            objRow.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"INVOICE_DATE","")));
                            }                            
                            objRow.setValue("MAIN_CODE",UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE",""));
                            //objRow.setValue("SUB_CODE",UtilFunctions.getString(rsVoucher,"SUB_ACCOUNT_CODE",""));
                            
                            String MainCode=UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE","");
                            
                            String SubCode=UtilFunctions.getString(rsVoucher,"SUB_ACCOUNT_CODE","");
                            
                            if(SubCode.equals("619662")) {
                                boolean halt=true;
                            }
                            String PartyName="";                            
                            if(!SubCode.trim().equals("")) {
                                PartyName=clsPartyMaster.getAccountName(MainCode, SubCode).replace('\\',' ').replace('/',' ');
                                /*if(PartyName.length()>=30) {
                                    PartyName=PartyName.substring(0,30);
                                }*/
                            }
                            if(k==1){
                                if(!noSubCode){
                            partyadd=PartyName;
                            maincode=MainCode;
                            subcode=SubCode;}
                                else{
                                    partyadd=PartyName;
                            maincode="";
                            subcode=SubCode;
                            partyTotal2=0;
                                }
                            }
                            objRow.setValue("PARTY_NAME",PartyName);
                            /*String HeaderRemarks = UtilFunctions.getString(rsVoucher,"HEADER_REMARKS","").replace('\n',' ').trim().replace('\\',' ').replace('/',' ');
                            if(HeaderRemarks.length()>=135) {   //Previous value was 57 updated as per requirement //Previous value was 106 updated as per requirement
                                HeaderRemarks=HeaderRemarks.substring(0,135);  //Previous value was 57 updated as per requirement //Previous value was 106 updated as per requirement
                            }
                            objRow.setValue("REMARKS",UtilFunctions.getString(rsVoucher,"HEADER_REMARKS","").replace('\n',' ').trim().replace('\t',' ').replace('\\',' ').trim());                            objRow.setValue("REMARKS",HeaderRemarks.replace('\n',' ').trim().replace('\t',' ').replace('\\',' ').trim());                                                        
                            objRow.setValue("REMARKS",HeaderRemarks);                            
                            */
                            objRow.setValue("CHEQUE_NO",UtilFunctions.getString(rsVoucher,"CHEQUE_NO",""));
                            objRow.setValue("CHEQUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"CHEQUE_DATE","")));
                            if(!SubCode.trim().equals("")){
                                if(UtilFunctions.getString(rsVoucher,"EFFECT","").trim().equals("C")){
                                partyTotal1 += Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));
                                partyTotal2 = partyTotal1;
                                }else{
                                partyTotal1 -= Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));    
                                partyTotal2 = partyTotal1;
                                }
                            }
                            else{
                                if(UtilFunctions.getString(rsVoucher,"EFFECT","").trim().equals("C")){
                                    objRow.setValue("ALLOCATION_CODE",UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE",""));                               
                                    objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0))));
                                    mod+=Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));
                                    objRow.setValue("REMARKS",clsPartyMaster.getAccountName(UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE",""), ""));
                                }
                            }
                            
                            //Move to next record
                            rsVoucher.next();
                            if(!UtilFunctions.getString(rsVoucher,"SUB_ACCOUNT_CODE","").trim().equals("")){
                               if(UtilFunctions.getString(rsVoucher,"EFFECT","").trim().equals("C")){
                                partyTotal += Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));
                                partyTotal3 = partyTotal;
                                }else{
                                partyTotal -= Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));    
                                partyTotal3 = partyTotal; 
                                }
                            }                            
                            String AllocationCode=UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE","");
                            String AllocationAcName=clsPartyMaster.getAccountName(AllocationCode, "");
                            //PartyName=clsPartyMaster.getAccountName(AllocationCode,"").replace('\\',' ').replace('/',' ');
                            //objRow.setValue("ALLOCATION_CODE",AllocationCode);
                            objRow.setValue("MAIN_CODE",AllocationCode);
                            //objRow.setValue("ALLOCATION_AC_NAME",AllocationAcName);
                            //objRow.setValue("ALLOCATION_AC_NAME",PartyName);
                            objRow.setValue("PARTY_NAME",AllocationAcName);                            
                            /*
                            if(UtilFunctions.getString(rsVoucher,"EFFECT","").trim().equals("C") || noSubCode) {                                
                                objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0))));
                                //objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND EFFECT='C'",FinanceGlobal.FinURL)));
                                cBookTotal += Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0)); 
                                ca+=Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0)); 
                            } else {
                                objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0))));
                                //objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND EFFECT='D'",FinanceGlobal.FinURL)));
                                dBookTotal += Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));
                                da+=Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));
                            }
                             */
                            if(UtilFunctions.getString(rsVoucher,"EFFECT","").trim().equals("C")) {                                
                                //objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0))));
                                objRow.setValue("PARTY_AMOUNT_C",dFormat.format(Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0))));
                                //objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND EFFECT='C'",FinanceGlobal.FinURL)));
                                //cBookTotal += Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0)); 
                                ca+=Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0)); 
                                ca1=ca;
                                
                            } 
                            if(UtilFunctions.getString(rsVoucher,"EFFECT","").trim().equals("D")){
                                objRow.setValue("PARTY_AMOUNT_D",dFormat.format(Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0))));
                                //objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND EFFECT='D'",FinanceGlobal.FinURL)));
                                //dBookTotal += Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));
                                da+=Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));
                                da1=da;                                
                            }
                            
                            String STMainCode = data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND LENGTH(MAIN_ACCOUNT_CODE)=9 AND EFFECT='D'",FinanceGlobal.FinURL);
                            String STCode = STMainCode.substring(STMainCode.indexOf(".")+1);
                            objRow.setValue("ST",STCode);
                            
                            objReportData.AddRow(objRow);
                            
                            rsBlock.next();
                        }
                         //int k=data.getIntValueFromDB("SELECT COUNT(DISTINCT BLOCK_NO) FROM D_FIN_VOUCHER_DETAIL_EX WHERE VOUCHER_NO='"+VoucherNo+"'");                    
                                            }
                    
                TReportWriter.SimpleDataProvider.TRow objRow=objReportData.newRow();                
                objRow.setValue("VOUCHER_NO","");
                objRow.setValue("LEGACY_NO","");
                objRow.setValue("VOUCHER_DATE","");
                objRow.setValue("MAIN_CODE",maincode);
                objRow.setValue("SUB_CODE",subcode);
                objRow.setValue("PARTY_NAME",partyadd);
                objRow.setValue("REMARKS","V O U C H E R  T O T A L * * * ");                                                
                objRow.setValue("CHEQUE_NO","");
                objRow.setValue("CHEQUE_DATE","");
                objRow.setValue("PO_NO","");
                objRow.setValue("PO_DATE","");
                objRow.setValue("INVOICE_NO","");
                objRow.setValue("INVOICE_DATE","");
                objRow.setValue("ALLOCATION_CODE","");
                objRow.setValue("ALLOCATION_AC_NAME","");
                objRow.setValue("PARTY_AMOUNT_D","");                
                objRow.setValue("PARTY_AMOUNT_C", dFormat.format(partyTotal2+partyTotal3));
                objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(da1));
                objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(mod+ca1+partyTotal2+partyTotal3));                
                objRow.setValue("ST","");
                objReportData.AddRow(objRow);
                
                
                
                cBookTotal+=mod+ca1+partyTotal2+partyTotal3;
                dBookTotal+=da1;
                    rsTmp.next();
                }
            
                TReportWriter.SimpleDataProvider.TRow objRow=objReportData.newRow();
                
                objRow.setValue("VOUCHER_NO","");
                objRow.setValue("LEGACY_NO","");
                objRow.setValue("VOUCHER_DATE","");
                objRow.setValue("MAIN_CODE","");
                objRow.setValue("SUB_CODE","");
                objRow.setValue("PARTY_NAME","* * * B O O K T O T A L  * * *");
                objRow.setValue("REMARKS","");
                objRow.setValue("CHEQUE_NO","");
                objRow.setValue("CHEQUE_DATE","");
                objRow.setValue("PO_NO","");
                objRow.setValue("PO_DATE","");
                objRow.setValue("INVOICE_NO","");
                objRow.setValue("INVOICE_DATE","");
                objRow.setValue("ALLOCATION_CODE","");
                objRow.setValue("ALLOCATION_AC_NAME","");
                objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(dBookTotal));
                objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(cBookTotal));
                objRow.setValue("ST","");
                objReportData.AddRow(objRow);
            }
            
            HashMap Parameters=new HashMap();
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE",txtFromDate.getText());
            Parameters.put("TO_DATE",txtToDate.getText());
            Parameters.put("BOOK_CODE",txtBookCode.getText());
            Parameters.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,txtBookCode.getText()));
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptPurchaseJournalBookPJVOnly.rpt",Parameters,objReportData);
            //objEngine.PreviewReport("D:\\Soft\\untitled folder\\dinesh\\EITLERP\\Reports\\finance\\rptPurchaseJournalBook.rpt",Parameters,objReportData);            
        }
        catch(Exception e) {
            e.printStackTrace();
        }

    }
    
        private void GeneratePurchaseJournalBookPJV41Only() {
        try {
            String Condition="";
            double cBookTotal = 0;
            double dBookTotal = 0;
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("VOUCHER_NO");
            objReportData.AddColumn("LEGACY_NO");
            objReportData.AddColumn("VOUCHER_DATE");
            objReportData.AddColumn("MAIN_CODE");
            objReportData.AddColumn("SUB_CODE");
            objReportData.AddColumn("PARTY_NAME");
            objReportData.AddColumn("REMARKS");
            objReportData.AddColumn("ST");
            objReportData.AddColumn("CHEQUE_NO");
            objReportData.AddColumn("CHEQUE_DATE");
            objReportData.AddColumn("PO_NO");
            objReportData.AddColumn("PO_DATE");
            objReportData.AddColumn("INVOICE_NO");
            objReportData.AddColumn("INVOICE_DATE");
            objReportData.AddColumn("ALLOCATION_CODE");
            //objReportData.AddColumn("ALLOCATION_AC_NAME");
            objReportData.AddColumn("ALLOCATION_AMOUNT_C");
            objReportData.AddColumn("ALLOCATION_AMOUNT_D");
            objReportData.AddColumn("PARTY_AMOUNT_C");
            objReportData.AddColumn("PARTY_AMOUNT_D");
            
            String strSQL="SELECT B.*,A.*,A.REMARKS AS HEADER_REMARKS FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL B " +
            "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.COMPANY_ID=B.COMPANY_ID AND A.APPROVED=1 AND A.CANCELLED=0 ";
            try {
                if(!txtFromVoucher.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_NO>='"+txtFromVoucher.getText()+"' ";
                }
                
                if(!txtToVoucher.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_NO<='"+txtToVoucher.getText()+"' ";
                }
                
                if(!txtFromDate.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                }
                
                if(!txtToDate.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                }
                
                if(!txtBookCode.getText().trim().equals("")) {
                    Condition+=" AND A.BOOK_CODE='"+txtBookCode.getText()+"' ";
                }
                
                if(!txtFromAmount.getText().trim().equals("")) {
                    Condition+=" AND B.AMOUNT>="+txtFromAmount.getText()+" ";
                }
                
                if(!txtToAmount.getText().trim().equals("")) {
                    Condition+=" AND B.AMOUNT<="+txtToAmount.getText()+" ";
                }
                
                if(!txtMainCode.getText().trim().equals("")) {
                    Condition+=" AND SUBSTRING(B.MAIN_ACCOUNT_CODE,1,6)='"+txtMainCode.getText()+"' ";
                }
                
                if(!txtSubCode.getText().trim().equals("")) {
                    Condition+=" AND B.SUB_ACCOUNT_CODE='"+txtSubCode.getText()+"' ";
                }
            }
            catch(Exception e) {
                e.printStackTrace();
            }
            strSQL = strSQL + Condition;
            int SortOrder=EITLERPGLOBAL.getComboCode(cmbSort);            
            switch(SortOrder) {
                case 1: strSQL+=" ORDER BY A.VOUCHER_NO ";break;
                case 2: strSQL+=" ORDER BY A.VOUCHER_DATE ";break;
                case 3: strSQL+=" ORDER BY A.BOOK_CODE ";break;
                case 4: strSQL+=" ORDER BY CONVERT(A.LEGACY_NO,SIGNED) ";break;
            }
            ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsTmp.first();
            String PreviousVoucherNo="";
            String VoucherNo="";
            int km=0,rm=0;
            int cnt=0;
            double cVoucherTotal = 0;
            double dVoucherTotal = 0;
            if(rsTmp.getRow()>0) {
                String vchNo="0";
                while(!rsTmp.isAfterLast()) {                                        
                    VoucherNo = UtilFunctions.getString(rsTmp,"VOUCHER_NO","").trim();                                                                                
                     if(!PreviousVoucherNo.equals(VoucherNo)) {
                        String test = "SELECT COUNT(*) as cnt FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND MAIN_ACCOUNT_CODE<>'"+clsTRMapping.getMainCode(EITLERPGLOBAL.gCompanyID,txtBookCode.getText().trim())+"' ";
                        ResultSet rsone = null;
                        rsone = data.getResult(test,FinanceGlobal.FinURL);
                        if(rsone.getRow()>0) {
                            cnt=Integer.parseInt(rsone.getString("cnt"));
                            //System.out.println("cnt :-"+cnt);
                        }
                    }
                    if(!PreviousVoucherNo.equals(VoucherNo)) {
                        PreviousVoucherNo = VoucherNo;
                        km=1;
                        rm=1;
                        //System.out.println("if PreviousVoucherNo :-"+PreviousVoucherNo +" no :-"+rm);
                    }else{
                        rm++;
                        // System.out.println("else PreviousVoucherNo :-"+PreviousVoucherNo +" no :-"+rm);
                    }
                    objRow=objReportData.newRow();
                    if(rm==1){
                    objRow.setValue("VOUCHER_NO",UtilFunctions.getString(rsTmp,"VOUCHER_NO","").trim());
                    objRow.setValue("VOUCHER_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"VOUCHER_DATE","")));
                    objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsTmp,"LEGACY_NO","").trim());
                    objRow.setValue("PO_NO",UtilFunctions.getString(rsTmp,"PO_NO",""));
                    objRow.setValue("PO_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"PO_DATE","")));
                    objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsTmp,"INVOICE_NO",""));
                    objRow.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"INVOICE_DATE","")));
                    }
                    objRow.setValue("GROUP_VOUCHER_DATE",UtilFunctions.getString(rsTmp,"VOUCHER_DATE",""));                    
                    String MainCode=UtilFunctions.getString(rsTmp,"MAIN_ACCOUNT_CODE","");
                    String SubCode=UtilFunctions.getString(rsTmp,"SUB_ACCOUNT_CODE","");               
                    String AcName=clsPartyMaster.getAccountName(MainCode,"");
                    String PartyName="";
                    
                    if(!SubCode.trim().equals("")) {
                        PartyName=clsPartyMaster.getAccountName(MainCode,SubCode);
                    }
                    
                    String mcode = "";
                    mcode=MainCode;
                    //mcode+=" ";
                    //mcode+=AcName;
                    /*if((mcode.length())>19){
                         mcode=mcode.substring(0,18);
                    }
                     */
                    //updated on 04/05/2014 start by ashutosh for modification in bank report
                    if((mcode.length())>6){
                        mcode=mcode.substring(0,6);
                    }
                    //updated on 04/05/2014 end
                    //   if(!vchNo.equalsIgnoreCase(UtilFunctions.getString(rsTmp,"VOUCHER_NO","").trim()))
                    //   {
                    vchNo =  UtilFunctions.getString(rsTmp,"VOUCHER_NO","").trim();                        
                    //updated on 09/05/2014 start by ashutosh for modification in bank report
                    
                    objRow.setValue("PARTY_NAME",PartyName);
                    String desc = UtilFunctions.getString(rsTmp,"HEADER_REMARKS","").trim().replace('\n',' ').replace('\t',' ');
                    if(desc.length()>50) {
                        desc=desc.substring(0, 49);
                    }
                    objRow.setValue("REMARKS",desc);
                    objRow.setValue("MAIN_CODE",mcode);
                    objRow.setValue("SUB_CODE",SubCode); 
                     if(!SubCode.trim().equals("")) {
                        objRow.setValue("PARTY_NAME",PartyName.trim());                        
                    }else{
                        objRow.setValue("PARTY_NAME",AcName);
                        String STMainCode = data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND LENGTH(MAIN_ACCOUNT_CODE)=9 AND EFFECT='D'",FinanceGlobal.FinURL);
                    String STCode = STMainCode.substring(STMainCode.indexOf(".")+1);
                    objRow.setValue("ST",STCode);
                    }
                    
                    objRow.setValue("LINK_NO",UtilFunctions.getString(rsTmp,"LINK_NO",""));
                    objRow.setValue("CHEQUE_NO",UtilFunctions.getString(rsTmp,"CHEQUE_NO",""));
                    objRow.setValue("CHEQUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"CHEQUE_DATE","")));
                    
                    //objRow.setValue("AC_NAME",AcName);
                    
                    //   objRow.setValue("REMARKS",UtilFunctions.getString(rsTmp,"HEADER_REMARKS","").trim().replace('\n',' ').replace('\t',' '));
                    
                    if(UtilFunctions.getString(rsTmp,"EFFECT","").equals("C")) {                        
                        objRow.setValue("PARTY_AMOUNT_C",dFormat.format(UtilFunctions.getDouble(rsTmp,"AMOUNT",0)));
                        objRow.setValue("PARTY_AMOUNT_D","0");
                        cBookTotal +=UtilFunctions.getDouble(rsTmp,"AMOUNT",0);
                        cVoucherTotal +=UtilFunctions.getDouble(rsTmp,"AMOUNT",0);
                    }
                    else {
                        
                        objRow.setValue("PARTY_AMOUNT_D",dFormat.format(UtilFunctions.getDouble(rsTmp,"AMOUNT",0)));
                        objRow.setValue("PARTY_AMOUNT_C","0");
                        dBookTotal +=UtilFunctions.getDouble(rsTmp,"AMOUNT",0);                        
                        dVoucherTotal +=UtilFunctions.getDouble(rsTmp,"AMOUNT",0);                        
                    }                    
                    objRow.setValue("VOUCHER_DEBIT_AMOUNT","");
                    objRow.setValue("VOUCHER_CREDIT_AMOUNT","");
                    
                    objReportData.AddRow(objRow);                    
                    
                    /*if(rm==cnt && rm>1){
                        objReportData.AddRow(getVoucherTotal(PreviousVoucherNo));
                        objReportData.AddRow(getBlankRow(PreviousVoucherNo));
                        rm=0;
                    }
                    */
                    if(rm==cnt && rm>1){
                objRow=objReportData.newRow();                
                objRow.setValue("VOUCHER_NO","");
                objRow.setValue("LEGACY_NO","");
                objRow.setValue("VOUCHER_DATE","");
                objRow.setValue("MAIN_CODE","");
                objRow.setValue("SUB_CODE","");
                objRow.setValue("PARTY_NAME","");
                objRow.setValue("REMARKS","V O U C H E R  T O T A L * * *");                                
                objRow.setValue("CHEQUE_NO","");
                objRow.setValue("CHEQUE_DATE","");
                objRow.setValue("PO_NO","");
                objRow.setValue("PO_DATE","");
                objRow.setValue("INVOICE_NO","");
                objRow.setValue("INVOICE_DATE","");
                objRow.setValue("ALLOCATION_CODE","");
                objRow.setValue("ALLOCATION_AC_NAME","");
                objRow.setValue("PARTY_AMOUNT_D","");
                objRow.setValue("PARTY_AMOUNT_C","");
                objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(dVoucherTotal));
                objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(cVoucherTotal));
                objRow.setValue("ST","");
                objReportData.AddRow(objRow);                                                       
                rm=0;
                cVoucherTotal=0;
                dVoucherTotal=0;
                    }                   
                    
                    rsTmp.next();
                }
            }
                objRow=objReportData.newRow();                
                objRow.setValue("VOUCHER_NO","");
                objRow.setValue("LEGACY_NO","");
                objRow.setValue("VOUCHER_DATE","");
                objRow.setValue("MAIN_CODE","");
                objRow.setValue("SUB_CODE","");
                objRow.setValue("PARTY_NAME","* * * B O O K T O T A L * * *");
                objRow.setValue("REMARKS","");
                objRow.setValue("CHEQUE_NO","");
                objRow.setValue("CHEQUE_DATE","");
                objRow.setValue("PO_NO","");
                objRow.setValue("PO_DATE","");
                objRow.setValue("INVOICE_NO","");
                objRow.setValue("INVOICE_DATE","");
                objRow.setValue("ALLOCATION_CODE","");
                objRow.setValue("ALLOCATION_AC_NAME","");
                objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(dBookTotal));
                objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(cBookTotal));
                objRow.setValue("ST","");
                objReportData.AddRow(objRow);
            
            
            HashMap Parameters=new HashMap();
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE",txtFromDate.getText());
            Parameters.put("TO_DATE",txtToDate.getText());
            Parameters.put("BOOK_CODE",txtBookCode.getText());
            Parameters.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,txtBookCode.getText()));
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptPurchaseJournalBookPJVOnly.rpt",Parameters,objReportData);
            //objEngine.PreviewReport("D:\\Soft\\untitled folder\\dinesh\\EITLERP\\Reports\\finance\\rptPurchaseJournalBook.rpt",Parameters,objReportData);            
        
        }
        catch(Exception e) {
            e.printStackTrace();
        }

    }
    
    //Bank Book and Journal Printing
    private void GenerateBankBook() {
        try {
            
            boolean OpeningRowAdded=false;
            
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("VOUCHER_NO");
            objReportData.AddColumn("LEGACY_NO");
            objReportData.AddColumn("GROUP_VOUCHER_DATE");
            objReportData.AddColumn("VOUCHER_DATE");
            objReportData.AddColumn("MAIN_CODE");
            objReportData.AddColumn("SUB_CODE");
            objReportData.AddColumn("PARTY_NAME");
            objReportData.AddColumn("REMARKS");
            objReportData.AddColumn("CHEQUE_NO");
            objReportData.AddColumn("CHEQUE_DATE");
            objReportData.AddColumn("PO_NO");
            objReportData.AddColumn("PO_DATE");
            objReportData.AddColumn("INVOICE_NO");
            objReportData.AddColumn("INVOICE_DATE");
            objReportData.AddColumn("AC_NAME");
            objReportData.AddColumn("DEBIT_AMOUNT");
            objReportData.AddColumn("CREDIT_AMOUNT");
            objReportData.AddColumn("VOUCHER_DEBIT_AMOUNT");
            objReportData.AddColumn("VOUCHER_CREDIT_AMOUNT");
            objReportData.AddColumn("CLOSING_BALANCE");
            objReportData.AddColumn("VSIGN"); //added by ashutosh on 02/06/2014 as per new requirement
            
            //objReportData.AddColumn("COUNT_VAL");
            
            
            //=============== Add Opening Balance ===================//
            String BookMainCode=clsBook.getBookMainCode(EITLERPGLOBAL.gCompanyID, txtBookCode.getText());
            double OpeningBalance=clsAccount.getOpeningBalance(BookMainCode,"", EITLERPGLOBAL.formatDateDB(txtFromDate.getText()));
            
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            //System.out.println("Date = " + txtFromDate.getText().trim());
            objOpeningRow.setValue("VOUCHER_NO","");
            objOpeningRow.setValue("LEGACY_NO","");
            objOpeningRow.setValue("GROUP_VOUCHER_DATE","");
            objOpeningRow.setValue("VOUCHER_DATE",""); //txtFromDate.getText().trim()
            objOpeningRow.setValue("MAIN_CODE","");
            objOpeningRow.setValue("SUB_CODE","");
            objOpeningRow.setValue("PARTY_NAME","OPENING BALANCE");
            //objOpeningRow.setValue("REMARKS","OPENING BALANCE");
            objOpeningRow.setValue("CHEQUE_NO","");
            objOpeningRow.setValue("CHEQUE_DATE","");
            objOpeningRow.setValue("PO_NO","");
            objOpeningRow.setValue("PO_DATE","");
            objOpeningRow.setValue("INVOICE_NO","");
            objOpeningRow.setValue("INVOICE_DATE","");
            objOpeningRow.setValue("AC_NAME","");
            //objOpeningRow.setValue("COUNT_VAL","");
            
            if(OpeningBalance<0) {
                objOpeningRow.setValue("CREDIT_AMOUNT",dFormat.format(Math.abs(OpeningBalance)));
                objOpeningRow.setValue("DEBIT_AMOUNT","0");
                objOpeningRow.setValue("VOUCHER_DEBIT_AMOUNT","0");
                objOpeningRow.setValue("VOUCHER_CREDIT_AMOUNT","0");
            } else {
                objOpeningRow.setValue("DEBIT_AMOUNT",dFormat.format(Math.abs(OpeningBalance)));
                objOpeningRow.setValue("CREDIT_AMOUNT","0");
                objOpeningRow.setValue("VOUCHER_DEBIT_AMOUNT","0");
                objOpeningRow.setValue("VOUCHER_CREDIT_AMOUNT","0");
            }
            
            objOpeningRow.setValue("CLOSING_BALANCE","");
            //=================================================================================//
            
            
            String strSQL="SELECT *,A.REMARKS AS HEADER_REMARKS FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B " +
            "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.COMPANY_ID=B.COMPANY_ID AND A.APPROVED=1 AND A.CANCELLED=0 "+buildCriteria();
            //strSQL+=" ORDER BY A.VOUCHER_DATE,A.VOUCHER_NO"; //AND B.IS_DEDUCTION<>1
            
            int SortOrder=EITLERPGLOBAL.getComboCode(cmbSort);
            double cBookTotal = 0;
            double dBookTotal = 0;
            // switch(SortOrder) {
            //     case 1: strSQL+=" ORDER BY A.VOUCHER_NO ";break;
            //     case 2: strSQL+=" ORDER BY A.VOUCHER_DATE ";break;
            //     case 3: strSQL+=" ORDER BY A.BOOK_CODE ";break;
            //     case 4: strSQL+=" ORDER BY CONVERT(A.LEGACY_NO,SIGNED) ";break;
            //}
            
            
            strSQL+=" ORDER BY A.VOUCHER_DATE,CONVERT(A.LEGACY_NO,SIGNED) ";
            //System.out.println("all :-"+strSQL);
            //added as on 20/07/2009 -start
            String BankCode = "";
            if(!txtBookCode.getText().trim().equals("")) {
                BankCode = clsTRMapping.getMainCode(EITLERPGLOBAL.gCompanyID,txtBookCode.getText().trim());
            }
            //added as on 20/07/2009 -end
            
            String PreviousVoucherNo="";
            String VoucherNo="";
            boolean FirstVoucher=true;
            ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsTmp.first();
            int km=0,rm=0;
            int cnt=0;
            if(rsTmp.getRow()>0) {
                String vchNo="0";
                //   double cr_amount=0,dr_amount=0;
                //int i=0;
                while(!rsTmp.isAfterLast()) {
                    //added as on 20/07/2009 -start
                    //System.out.println("BankCode :-"+BankCode);
                    if(!BankCode.equals("")) {
                        if(UtilFunctions.getString(rsTmp,"MAIN_ACCOUNT_CODE","").equals(BankCode)) {
                            rsTmp.next();
                            continue;
                        }
                    }
                    VoucherNo = UtilFunctions.getString(rsTmp,"VOUCHER_NO","").trim();
                    
                    if(!PreviousVoucherNo.equals(VoucherNo)) {
                        String test = "SELECT COUNT(*) as cnt FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND MAIN_ACCOUNT_CODE<>'"+clsTRMapping.getMainCode(EITLERPGLOBAL.gCompanyID,txtBookCode.getText().trim())+"' ";
                        ResultSet rsone = null;
                        rsone = data.getResult(test,FinanceGlobal.FinURL);
                        if(rsone.getRow()>0) {
                            cnt=Integer.parseInt(rsone.getString("cnt"));
                            //System.out.println("cnt :-"+cnt);
                        }
                    }
                    
                    /*if(FirstVoucher) {
                        PreviousVoucherNo = VoucherNo;
                        FirstVoucher=false;
                    } else {
                        System.out.println("PreviousVoucherNo :-"+PreviousVoucherNo +" no :-"+km);
                        if(!PreviousVoucherNo.equals(VoucherNo)) {
                            PreviousVoucherNo = VoucherNo;
                            km++;
                        }
                    }*/
                    if(!PreviousVoucherNo.equals(VoucherNo)) {
                        PreviousVoucherNo = VoucherNo;
                        km=1;
                        rm=1;
                        //System.out.println("if PreviousVoucherNo :-"+PreviousVoucherNo +" no :-"+rm);
                    }else{
                        rm++;
                        // System.out.println("else PreviousVoucherNo :-"+PreviousVoucherNo +" no :-"+rm);
                    }
                    
                    
                    //added as on 20/07/2009 -end
                    
                    objRow=objReportData.newRow();
                    
                    objRow.setValue("VOUCHER_NO",UtilFunctions.getString(rsTmp,"VOUCHER_NO","").trim());
                    objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsTmp,"LEGACY_NO","").trim());
                    objRow.setValue("GROUP_VOUCHER_DATE",UtilFunctions.getString(rsTmp,"VOUCHER_DATE",""));
                    objRow.setValue("VOUCHER_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"VOUCHER_DATE","")).trim());
                    if(!OpeningRowAdded) {
                        OpeningRowAdded=true;
                        objOpeningRow.setValue("GROUP_VOUCHER_DATE",UtilFunctions.getString(rsTmp,"VOUCHER_DATE",""));
                        objReportData.AddRow(objOpeningRow);
                    }
                    
                    String MainCode=UtilFunctions.getString(rsTmp,"MAIN_ACCOUNT_CODE","");
                    String SubCode=UtilFunctions.getString(rsTmp,"SUB_ACCOUNT_CODE","");
                    
                    String AcName=clsPartyMaster.getAccountName(MainCode,"");
                    String PartyName="";
                    
                    if(!SubCode.trim().equals("")) {
                        PartyName=clsPartyMaster.getAccountName(MainCode,SubCode);
                    }
                    
                    String mcode = "";
                    mcode=MainCode;
                    mcode+=" ";
                    mcode+=AcName;
                    /*if((mcode.length())>19){
                         mcode=mcode.substring(0,18);
                    }
                     */
                    //updated on 04/05/2014 start by ashutosh for modification in bank report
                    if((mcode.length())>21){
                        mcode=mcode.substring(0,20);
                    }
                    //updated on 04/05/2014 end
                    //   if(!vchNo.equalsIgnoreCase(UtilFunctions.getString(rsTmp,"VOUCHER_NO","").trim()))
                    //   {
                    vchNo =  UtilFunctions.getString(rsTmp,"VOUCHER_NO","").trim();
                        /*
                        if(UtilFunctions.getString(rsTmp,"HEADER_REMARKS","").trim().replace('\n',' ').replace('\t',' ').length()>43){
                            objRow.setValue("PARTY_NAME",(UtilFunctions.getString(rsTmp,"HEADER_REMARKS","").trim().replace('\n',' ').replace('\t',' ')).substring(0,42));
                        }else{
                            if(UtilFunctions.getString(rsTmp,"HEADER_REMARKS","").trim().equalsIgnoreCase("")){
                                objRow.setValue("PARTY_NAME",PartyName);
                            }
                            else{
                                objRow.setValue("PARTY_NAME",(UtilFunctions.getString(rsTmp,"HEADER_REMARKS","").trim().replace('\n',' ').replace('\t',' ')));
                            }
                        }
                         */
                    //updated on 09/05/2014 start by ashutosh for modification in bank report
                    
                    objRow.setValue("PARTY_NAME",PartyName);
                    String desc = UtilFunctions.getString(rsTmp,"HEADER_REMARKS","").trim().replace('\n',' ').replace('\t',' ');
                    if(desc.length()>50) {
                        desc=desc.substring(0, 49);
                    }
                    objRow.setValue("REMARKS",desc);
                    
                    //updated on 09/05/2014 end
                    //objRow.setValue("PARTY_NAME",PartyName.trim());
                    //        cr_amount=0;dr_amount=0;
                    //i=0;
               /*     }
                    else
                    {
                        //i++;
                        //objRow.setValue("REMARKS","");
                        objRow.setValue("PARTY_NAME","");
                    }    */
                    //  System.out.println("mcode :-"+mcode);
                    objRow.setValue("MAIN_CODE",mcode);
                    objRow.setValue("SUB_CODE",SubCode);
                    //objRow.setValue("PARTY_NAME",PartyName.trim());
                    objRow.setValue("CHEQUE_NO",UtilFunctions.getString(rsTmp,"CHEQUE_NO",""));
                    objRow.setValue("CHEQUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"CHEQUE_DATE","")));
                    objRow.setValue("PO_NO",UtilFunctions.getString(rsTmp,"PO_NO",""));
                    objRow.setValue("PO_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"PO_DATE","")));
                    objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsTmp,"INVOICE_NO",""));
                    objRow.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"INVOICE_DATE","")));
                    //objRow.setValue("AC_NAME",AcName);
                    
                    //   objRow.setValue("REMARKS",UtilFunctions.getString(rsTmp,"HEADER_REMARKS","").trim().replace('\n',' ').replace('\t',' '));
                    
                    if(!UtilFunctions.getString(rsTmp,"EFFECT","").equals("C")) {
                        OpeningBalance-=UtilFunctions.getDouble(rsTmp,"AMOUNT",0);
                        objRow.setValue("CREDIT_AMOUNT",dFormat.format(UtilFunctions.getDouble(rsTmp,"AMOUNT",0)));
                        objRow.setValue("DEBIT_AMOUNT","0");
                        //         cr_amount +=UtilFunctions.getDouble(rsTmp,"AMOUNT",0);
                        if(OpeningBalance<0) {
                            objRow.setValue("CLOSING_BALANCE",dFormat.format(-1*OpeningBalance)+" Cr");
                        }else {
                            objRow.setValue("CLOSING_BALANCE",dFormat.format(OpeningBalance)+" Dr");
                        }
                    }
                    else {
                        OpeningBalance+=UtilFunctions.getDouble(rsTmp,"AMOUNT",0);
                        objRow.setValue("DEBIT_AMOUNT",dFormat.format(UtilFunctions.getDouble(rsTmp,"AMOUNT",0)));
                        objRow.setValue("CREDIT_AMOUNT","0");
                        //   dr_amount +=UtilFunctions.getDouble(rsTmp,"AMOUNT",0);
                        if(OpeningBalance<0) {
                            objRow.setValue("CLOSING_BALANCE",dFormat.format(-1*OpeningBalance)+" Cr");
                        }
                        else{
                            objRow.setValue("CLOSING_BALANCE",dFormat.format(OpeningBalance)+" Dr");
                        }
                    }
                    //objRow.setValue("VOUCHER_DEBIT_AMOUNT","0");
                    //objRow.setValue("VOUCHER_CREDIT_AMOUNT","0");
                    objRow.setValue("VOUCHER_DEBIT_AMOUNT","");
                    objRow.setValue("VOUCHER_CREDIT_AMOUNT","");
                    objRow.setValue("VSIGN","");//added by ashutosh on 02/06/2014 as per new requirement
                    objReportData.AddRow(objRow);
                    
                    if(rm==cnt && rm>1){
                        objReportData.AddRow(getVoucherTotal(PreviousVoucherNo));
                        objReportData.AddRow(getBlankRow(PreviousVoucherNo));
                        rm=0;
                    }
                    
                    rsTmp.next();
                }
            }
            
            HashMap Parameters=new HashMap();
            
            
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE",txtFromDate.getText());
            Parameters.put("TO_DATE",txtToDate.getText());            
            Parameters.put("BOOK_NAME",txtBookCode.getText()+" - "+clsBook.getBookName(EITLERPGLOBAL.gCompanyID,txtBookCode.getText()));
            //EITLERPGLOBAL.PAGE_BREAK=true;
            //objEngine.PreviewReport("http://200.0.0.227:8080/jmx-console/dinesh/EITLERP/Reports/finance/rptBankBook1.rpt",Parameters,objReportData);
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptBankBook1.rpt",Parameters,objReportData);
            //objEngine.PreviewReport("D:\\Soft\\untitled folder\\dinesh\\EITLERP\\Reports\\finance\\rptBankBook.rpt",Parameters,objReportData);
            
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    private void GenerateJournalBook() {
        try {
            boolean OpeningRowAdded=false;
            
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("VOUCHER_NO");
            objReportData.AddColumn("LEGACY_NO");
            objReportData.AddColumn("GROUP_VOUCHER_NO");
            objReportData.AddColumn("VOUCHER_DATE");
            objReportData.AddColumn("MAIN_CODE");
            objReportData.AddColumn("SUB_CODE");
            objReportData.AddColumn("PARTY_NAME");
            objReportData.AddColumn("REMARKS");
            objReportData.AddColumn("CHEQUE_NO");
            objReportData.AddColumn("CHEQUE_DATE");
            objReportData.AddColumn("PO_NO");
            objReportData.AddColumn("PO_DATE");
            objReportData.AddColumn("INVOICE_NO");
            objReportData.AddColumn("INVOICE_DATE");
            objReportData.AddColumn("AC_NAME");
            objReportData.AddColumn("DEBIT_AMOUNT");
            objReportData.AddColumn("CREDIT_AMOUNT");
            objReportData.AddColumn("CLOSING_BALANCE");
            
            String strSQL="SELECT A.*,B.*,A.REMARKS AS HEADER_REMARKS FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL B " +
            "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.COMPANY_ID=B.COMPANY_ID "+buildCriteria();
            int SortOrder=EITLERPGLOBAL.getComboCode(cmbSort);
            double cBookTotal = 0;
            double dBookTotal = 0;
            switch(SortOrder) {
                case 1: strSQL+=" ORDER BY A.VOUCHER_NO ";break;
                case 2: strSQL+=" ORDER BY A.VOUCHER_DATE ";break;
                case 3: strSQL+=" ORDER BY A.BOOK_CODE ";break;
                case 4: strSQL+=" ORDER BY CONVERT(A.LEGACY_NO,SIGNED) ";break;
            }
            
            //EXPORT TO EXCELL CODE
            FormatGrid45();  
            GenerateGrid45();
            
            if(!chkOnlyMemorandum.isSelected()) {
                ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
                rsTmp.first();
                
                if(rsTmp.getRow()>0) {
                    while(!rsTmp.isAfterLast()) {
                        
                        objRow=objReportData.newRow();
                        objRow.setValue("VOUCHER_NO",UtilFunctions.getString(rsTmp,"VOUCHER_NO",""));
                        objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsTmp,"LEGACY_NO",""));
                        objRow.setValue("GROUP_VOUCHER_NO",UtilFunctions.getString(rsTmp,"VOUCHER_NO",""));
                        objRow.setValue("VOUCHER_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"VOUCHER_DATE","")));
                        String MainCode=UtilFunctions.getString(rsTmp,"MAIN_ACCOUNT_CODE","");
                        String SubCode=UtilFunctions.getString(rsTmp,"SUB_ACCOUNT_CODE","");
                        String AcName=clsPartyMaster.getAccountName(MainCode,"");
                        String PartyName="";
                        String GSTIN = "";
                        if(!SubCode.trim().equals("")) {
                            PartyName=clsPartyMaster.getAccountName(MainCode,SubCode);
                            try{
                                    //System.out.println("GSTIN QRY : "+"SELECT A.GSTIN_NO FROM FINANCE.D_FIN_PARTY_MASTER A WHERE PARTY_CODE='"+SubCode+"' ");
                                    GSTIN = data.getStringValueFromDB("SELECT A.GSTIN_NO FROM FINANCE.D_FIN_PARTY_MASTER A WHERE PARTY_CODE='"+SubCode+"' ");
                            }catch(Exception e)
                            {
                                e.printStackTrace();
                            }
                        }
                        
                        if(UtilFunctions.getString(rsTmp,"EFFECT","").equals("C")) {
                            objRow.setValue("CREDIT_AMOUNT",dFormat.format(UtilFunctions.getDouble(rsTmp,"AMOUNT",0)));
                            objRow.setValue("DEBIT_AMOUNT","");
                        } else {
                            objRow.setValue("DEBIT_AMOUNT",dFormat.format(UtilFunctions.getDouble(rsTmp,"AMOUNT",0)));
                            objRow.setValue("CREDIT_AMOUNT","");
                        }
                        
                        objRow.setValue("GSTIN",GSTIN);
                        objRow.setValue("MAIN_CODE",MainCode);
                        objRow.setValue("SUB_CODE",SubCode);
                        objRow.setValue("PARTY_NAME",PartyName);
                        
                        String HeaderRemarks = UtilFunctions.getString(rsTmp,"HEADER_REMARKS","").replace('\n',' ').trim().replace('\\',' ').replace('/',' ');
                        if(HeaderRemarks.length()>=122) {  //Previous value 100
                            HeaderRemarks=HeaderRemarks.substring(0,122);  //Previous value 100
                        }
                        //objRow.setValue("REMARKS",UtilFunctions.getString(rsVoucher,"HEADER_REMARKS","").replace('\n',' ').trim().replace('\t',' ').replace('\\',' ').trim());
                        objRow.setValue("REMARKS",HeaderRemarks.replace('\n',' ').trim().replace('\t',' ').replace('\\',' ').trim());
                        
                        //objRow.setValue("REMARKS",UtilFunctions.getString(rsTmp,"HEADER_REMARKS","").replace('\n',' '));
                        objRow.setValue("CHEQUE_NO",UtilFunctions.getString(rsTmp,"CHEQUE_NO",""));
                        objRow.setValue("CHEQUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"CHEQUE_DATE","")));
                        objRow.setValue("PO_NO",UtilFunctions.getString(rsTmp,"PO_NO",""));
                        objRow.setValue("PO_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"PO_DATE","")));
                        objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsTmp,"INVOICE_NO",""));
                        objRow.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"INVOICE_DATE","")));
                        objRow.setValue("AC_NAME",AcName);
                        objRow.setValue("CLOSING_BALANCE","0");
                        objReportData.AddRow(objRow);
                        
                        rsTmp.next();
                    }
                }
            }
            
            if(chkIncludeMemorandum.isSelected() || chkOnlyMemorandum.isSelected()) {
                objReportData.AppendTable(getMemorandumJV());
            }
            
            HashMap Parameters=new HashMap();
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE",txtFromDate.getText());
            Parameters.put("TO_DATE",txtToDate.getText());
            Parameters.put("BOOK_CODE",txtBookCode.getText());
            Parameters.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,txtBookCode.getText()));
            
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptJournalBook.rpt",Parameters,objReportData);
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
    }
    
    private void FormatGrid45() {
        try {
            DataModelExcel=new EITLTableModel();
            TableBook.removeAll();
            TableBook.setModel(DataModelExcel);
            TableBook.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            DataModelExcel.addColumn("Voucher No."); //0
            DataModelExcel.addColumn("Voucher Date");//1
            DataModelExcel.addColumn("Ref No");//1
            DataModelExcel.addColumn("Main Code");//2
            DataModelExcel.addColumn("Sub Code");//3
            DataModelExcel.addColumn("GSTIN No");//3
            DataModelExcel.addColumn("A/C Name");//3
            DataModelExcel.addColumn("Party Name");//3
            DataModelExcel.addColumn("PO Date");//3
            DataModelExcel.addColumn("PO No.");//3
            DataModelExcel.addColumn("INV No.");//3
            DataModelExcel.addColumn("INV Date");//3
            DataModelExcel.addColumn("Description");//3
            DataModelExcel.addColumn("Debit (Rs)");//3
            DataModelExcel.addColumn("Credit (Rs)");//3
            
            
            DataModelExcel.SetVariable(0,"VOUCHER_NO");
            DataModelExcel.SetVariable(1,"VOUCHER_DATE");
            DataModelExcel.SetVariable(2,"REF_NO");
            DataModelExcel.SetVariable(3,"MAIN_CODE");
            DataModelExcel.SetVariable(4,"SUB_CODE");
            DataModelExcel.SetVariable(5,"GSTIN_NO");
            DataModelExcel.SetVariable(6,"AC_NAME");
            DataModelExcel.SetVariable(7,"PARTY_NAME");
            DataModelExcel.SetVariable(8,"PO_DATE");
            DataModelExcel.SetVariable(9,"PO_NO");
            DataModelExcel.SetVariable(10,"INV_NO");
            DataModelExcel.SetVariable(11,"INV_DATE");
            DataModelExcel.SetVariable(12,"DESCRIPTION");
            DataModelExcel.SetVariable(13,"DEBIT");
            DataModelExcel.SetVariable(14,"CREDIT");
            
            RowFormat =new EITLTableCellRenderer();
            
            for(int j=0;j<TableBook.getColumnCount();j++) {
                TableBook.getColumnModel().getColumn(j).setCellRenderer(RowFormat);
            }
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
     private void GenerateGrid45() {
        
        String strCondition = "";
        try {
            
            objData=new TReportWriter.SimpleDataProvider.TTable();
            
             String strSQL="SELECT A.*,B.*,A.REMARKS AS HEADER_REMARKS FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL B " +
            "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.COMPANY_ID=B.COMPANY_ID "+buildCriteria();
            int SortOrder=EITLERPGLOBAL.getComboCode(cmbSort);
            double cBookTotal = 0;
            double dBookTotal = 0;
            switch(SortOrder) {
                case 1: strSQL+=" ORDER BY A.VOUCHER_NO ";break;
                case 2: strSQL+=" ORDER BY A.VOUCHER_DATE ";break;
                case 3: strSQL+=" ORDER BY A.BOOK_CODE ";break;
                case 4: strSQL+=" ORDER BY CONVERT(A.LEGACY_NO,SIGNED) ";break;
            }
            System.out.println("STRSQL : "+strSQL);
            
            ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                int cnt=0;
                while(!rsTmp.isAfterLast()) {
                    cnt++;
                    Object[] rowData=new Object[1];
                    DataModelExcel.addRow(rowData);
                    int NewRow=TableBook.getRowCount()-1;

                    DataModelExcel.setValueByVariable("VOUCHER_NO", UtilFunctions.getString(rsTmp,"VOUCHER_NO",""), NewRow);
                    DataModelExcel.setValueByVariable("VOUCHER_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"VOUCHER_DATE","0000-00-00")), NewRow);
                    DataModelExcel.setValueByVariable("REF_NO", UtilFunctions.getString(rsTmp,"LEGACY_NO",""), NewRow);
                    DataModelExcel.setValueByVariable("MAIN_CODE", UtilFunctions.getString(rsTmp,"MAIN_ACCOUNT_CODE",""), NewRow);
                    DataModelExcel.setValueByVariable("SUB_CODE", UtilFunctions.getString(rsTmp,"SUB_ACCOUNT_CODE",""), NewRow);
                    
                    
                    String AcName=clsPartyMaster.getAccountName(UtilFunctions.getString(rsTmp,"MAIN_ACCOUNT_CODE",""),"");
                    DataModelExcel.setValueByVariable("AC_NAME", AcName, NewRow);
                    
                    String PartyName="";
                        String GSTIN = "";
                        if(!UtilFunctions.getString(rsTmp,"SUB_ACCOUNT_CODE","").trim().equals("")) {
                            PartyName=clsPartyMaster.getAccountName(UtilFunctions.getString(rsTmp,"MAIN_ACCOUNT_CODE",""),UtilFunctions.getString(rsTmp,"SUB_ACCOUNT_CODE",""));
                            try{
                                    System.out.println("GSTIN QRY : "+"SELECT A.GSTIN_NO FROM FINANCE.D_FIN_PARTY_MASTER A WHERE PARTY_CODE='"+UtilFunctions.getString(rsTmp,"SUB_ACCOUNT_CODE","").trim()+"' ");
                                    GSTIN = data.getStringValueFromDB("SELECT A.GSTIN_NO FROM FINANCE.D_FIN_PARTY_MASTER A WHERE PARTY_CODE='"+UtilFunctions.getString(rsTmp,"SUB_ACCOUNT_CODE","").trim()+"' ");
                            }catch(Exception e)
                            {
                                e.printStackTrace();
                            }
                        }
                    DataModelExcel.setValueByVariable("GSTIN_NO", GSTIN, NewRow);
                    DataModelExcel.setValueByVariable("PARTY_NAME", PartyName, NewRow);
                    DataModelExcel.setValueByVariable("PO_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"PO_DATE","0000-00-00")), NewRow);
                    DataModelExcel.setValueByVariable("PO_NO", UtilFunctions.getString(rsTmp,"PO_NO",""), NewRow);
                    DataModelExcel.setValueByVariable("INV_NO", UtilFunctions.getString(rsTmp,"INVOICE_NO",""), NewRow);
                    DataModelExcel.setValueByVariable("INV_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"INVOICE_DATE","0000-00-00")), NewRow);
                    
                    String HeaderRemarks = UtilFunctions.getString(rsTmp,"HEADER_REMARKS","").replace('\n',' ').trim().replace('\\',' ').replace('/',' ');
                        if(HeaderRemarks.length()>=122) {  //Previous value 100
                            HeaderRemarks=HeaderRemarks.substring(0,122);  //Previous value 100
                        }
                    
                    DataModelExcel.setValueByVariable("DESCRIPTION", HeaderRemarks.replace('\n',' ').trim().replace('\t',' ').replace('\\',' ').trim(), NewRow);
                    
                    if(UtilFunctions.getString(rsTmp,"EFFECT","").equals("C")) {
                        DataModelExcel.setValueByVariable("DEBIT", "", NewRow);
                        DataModelExcel.setValueByVariable("CREDIT", dFormat.format(UtilFunctions.getDouble(rsTmp,"AMOUNT",0)), NewRow);
                        
                    } else {
                        DataModelExcel.setValueByVariable("DEBIT", dFormat.format(UtilFunctions.getDouble(rsTmp,"AMOUNT",0)), NewRow);
                        DataModelExcel.setValueByVariable("CREDIT", "", NewRow);
                    }
                    
                    rsTmp.next();
                }
            }
            
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    private void GenerateBookSummary() {
        try {
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("MAIN_CODE");
            objReportData.AddColumn("AC_NAME");
            objReportData.AddColumn("NO_OF_ENTRY");
            objReportData.AddColumn("DEBIT_AMOUNT");
            objReportData.AddColumn("CREDIT_AMOUNT");
            
            String Condition="";
            String BookCode="";
            int BookType=0;
            
            if(!txtFromVoucher.getText().trim().equals("")) {
                Condition+=" AND A.VOUCHER_NO>='"+txtFromVoucher.getText()+"' ";
            }
            
            if(!txtToVoucher.getText().trim().equals("")) {
                Condition+=" AND A.VOUCHER_NO<='"+txtToVoucher.getText()+"' ";
            }
            
            if(!txtFromDate.getText().trim().equals("")) {
                Condition+=" AND A.VOUCHER_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
            }
            
            if(!txtToDate.getText().trim().equals("")) {
                Condition+=" AND A.VOUCHER_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
            }
            
            if(!txtBookCode.getText().trim().equals("")) {
                Condition+=" AND A.BOOK_CODE='"+txtBookCode.getText()+"' ";
            }
            
            if(!txtFromAmount.getText().trim().equals("")) {
                Condition+=" AND B.AMOUNT>="+txtFromAmount.getText()+" ";
            }
            
            if(!txtToAmount.getText().trim().equals("")) {
                Condition+=" AND B.AMOUNT<="+txtToAmount.getText()+" ";
            }
            
            if(!txtMainCode.getText().trim().equals("")) {
                Condition+=" AND SUBSTRING(B.MAIN_ACCOUNT_CODE,1,6)='"+txtMainCode.getText()+"' ";
            }
            
            if(!txtSubCode.getText().trim().equals("")) {
                Condition+=" AND B.SUB_ACCOUNT_CODE='"+txtSubCode.getText()+"' ";
            }
            
            if(!txtBookCode.getText().trim().equals("")) {
                BookCode=txtBookCode.getText();
                BookType=clsBook.getBookType(EITLERPGLOBAL.gCompanyID, BookCode);
                if(BookType==1) {
                    Condition+=" AND SUBSTRING(B.MAIN_ACCOUNT_CODE,1,6)<>'"+data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM D_FIN_BOOK_MASTER WHERE BOOK_CODE='"+BookCode+"' ", FinanceGlobal.FinURL)+"' ";
                }
            }
            
            
            String strSQL="SELECT SUBSTRING(B.MAIN_ACCOUNT_CODE,1,6) AS MAIN_CODE, " +
            "COUNT(SUBSTRING(B.MAIN_ACCOUNT_CODE,1,6)) AS NO_OF_ENTRY, " +
            "CASE WHEN B.EFFECT = 'C' THEN 'C' ELSE '' END AS CREDIT_AMOUNT, " +
            "CASE WHEN B.EFFECT = 'D' THEN 'D' ELSE '' END AS DEBIT_AMOUNT, " +
            "SUM(B.AMOUNT) AS AMOUNT FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B " +
            "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 AND A.COMPANY_ID=B.COMPANY_ID " +
            " "+ Condition + " " +
            "GROUP BY A.COMPANY_ID,B.EFFECT,(SUBSTRING(B.MAIN_ACCOUNT_CODE,1,6)) " +
            "ORDER BY B.EFFECT,B.MAIN_ACCOUNT_CODE";
            
            ResultSet rsSummary=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsSummary.first();
            
            if(rsSummary.getRow()>0) {
                while(!rsSummary.isAfterLast()) {
                    TReportWriter.SimpleDataProvider.TRow objRow=objReportData.newRow();
                    
                    objRow.setValue("MAIN_CODE",UtilFunctions.getString(rsSummary,"MAIN_CODE",""));
                    objRow.setValue("AC_NAME", clsAccount.getAccountName(UtilFunctions.getString(rsSummary,"MAIN_CODE",""), ""));
                    objRow.setValue("NO_OF_ENTRY",UtilFunctions.getString(rsSummary,"NO_OF_ENTRY",""));
                    if(!UtilFunctions.getString(rsSummary,"CREDIT_AMOUNT","").equals("")) {
                        objRow.setValue("CREDIT_AMOUNT",Double.toString(UtilFunctions.getDouble(rsSummary,"AMOUNT",0)));
                        objRow.setValue("DEBIT_AMOUNT","");
                    }
                    if(!UtilFunctions.getString(rsSummary,"DEBIT_AMOUNT","").equals("")) {
                        objRow.setValue("CREDIT_AMOUNT","");
                        objRow.setValue("DEBIT_AMOUNT",Double.toString(UtilFunctions.getDouble(rsSummary,"AMOUNT",0)));
                    }
                    objReportData.AddRow(objRow);
                    rsSummary.next();
                }
            }
            
            if(BookType==1) {
                TReportWriter.SimpleDataProvider.TRow objRow=objReportData.newRow();
                String MainAccountCode = data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM D_FIN_BOOK_MASTER WHERE BOOK_CODE='"+BookCode+"' ",FinanceGlobal.FinURL);
                objRow.setValue("MAIN_CODE",MainAccountCode);
                objRow.setValue("AC_NAME", clsAccount.getAccountName(MainAccountCode,""));
                objRow.setValue("NO_OF_ENTRY","1");
                double OpeningBalance = clsAccount.getClosingBalance(MainAccountCode, "", clsDepositMaster.deductDays(EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()),1),true);
                double ClosingBalance = clsAccount.getClosingBalance(MainAccountCode, "", EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()),true);
                ClosingBalance = ClosingBalance - OpeningBalance;
                if(ClosingBalance < 0) {
                    objRow.setValue("CREDIT_AMOUNT",Double.toString(Math.abs(ClosingBalance)));
                    objRow.setValue("DEBIT_AMOUNT","");
                } else {
                    objRow.setValue("CREDIT_AMOUNT","");
                    objRow.setValue("DEBIT_AMOUNT",Double.toString(Math.abs(ClosingBalance)));
                }
                objReportData.AddRow(objRow);
            }
            
            HashMap Parameters=new HashMap();
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE",txtFromDate.getText());
            Parameters.put("TO_DATE",txtToDate.getText());
            Parameters.put("BOOK_NAME",txtBookCode.getText().trim() + " - " +clsBook.getBookName(EITLERPGLOBAL.gCompanyID,txtBookCode.getText().trim()));
            //Parameters.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,txtBookCode.getText()));
            EITLERPGLOBAL.PAGE_BREAK=true; 
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptBookSummary.rpt",Parameters,objReportData);
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        return;
    }
    
    private TReportWriter.SimpleDataProvider.TRow getBlankRow(String voucherNo) {
        TReportWriter.SimpleDataProvider.TTable objReportBlankData=new TReportWriter.SimpleDataProvider.TTable();
        TReportWriter.SimpleDataProvider.TRow BlankRow = objReportBlankData.newRow();
        try {
            //BlankRow.setValue("VOUCHER_NO","");
            BlankRow.setValue("GROUP_VOUCHER_DATE",data.getStringValueFromDB("SELECT VOUCHER_DATE FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='"+voucherNo+"'",FinanceGlobal.FinURL));
            BlankRow.setValue("VOUCHER_DATE","");
            BlankRow.setValue("MAIN_CODE","");
            BlankRow.setValue("SUB_CODE","");
            BlankRow.setValue("PARTY_NAME","");
            BlankRow.setValue("CHEQUE_NO","");
            BlankRow.setValue("CHEQUE_DATE","");
            //BlankRow.setValue("PO_NO","");
            BlankRow.setValue("PO_DATE","");
            BlankRow.setValue("INVOICE_NO","");
            //BlankRow.setValue("INVOICE_DATE","");
            BlankRow.setValue("AC_NAME","");
            BlankRow.setValue("DEBIT_AMOUNT","0");
            BlankRow.setValue("CREDIT_AMOUNT","0");
            //BlankRow.setValue("REMARKS","");
            //BlankRow.setValue("VOUCHER_DEBIT_AMOUNT","");
            //BlankRow.setValue("VOUCHER_CREDIT_AMOUNT","");
            
            
        }catch(Exception e) {
            e.printStackTrace();
        }
        return BlankRow;
    }
    
    private TReportWriter.SimpleDataProvider.TRow getVoucherTotal(String VoucherNo) {
        TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
        TReportWriter.SimpleDataProvider.TRow VoucherTotalRow = objReportData.newRow();
        try {
            VoucherTotalRow=objReportData.newRow();
            VoucherTotalRow.setValue("VOUCHER_NO","");
            String VoucherDate = data.getStringValueFromDB("SELECT VOUCHER_DATE FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='"+VoucherNo+"'",FinanceGlobal.FinURL);
            VoucherTotalRow.setValue("GROUP_VOUCHER_DATE",VoucherDate);
            
            VoucherTotalRow.setValue("VOUCHER_DATE","");
            VoucherTotalRow.setValue("MAIN_CODE","");
            VoucherTotalRow.setValue("SUB_CODE","");
            VoucherTotalRow.setValue("PARTY_NAME","");
            //VoucherTotalRow.setValue("REMARKS","VOUCHER TOTAL***");
            //VoucherTotalRow.setValue("REMARKS","");
            VoucherTotalRow.setValue("CHEQUE_NO","");
            VoucherTotalRow.setValue("CHEQUE_DATE","");
            VoucherTotalRow.setValue("PO_NO","");
            VoucherTotalRow.setValue("PO_DATE","");
            VoucherTotalRow.setValue("INVOICE_NO","");
            VoucherTotalRow.setValue("INVOICE_DATE","");
            VoucherTotalRow.setValue("AC_NAME","");
            VoucherTotalRow.setValue("DEBIT_AMOUNT","0");
            VoucherTotalRow.setValue("CREDIT_AMOUNT","0");
            
            String strSQL = "SELECT * FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND MAIN_ACCOUNT_CODE<>'"+clsTRMapping.getMainCode(EITLERPGLOBAL.gCompanyID,txtBookCode.getText().trim())+"' ";
            //System.out.println("v total :-"+strSQL);
            ResultSet rsTmp = data.getResult(strSQL,FinanceGlobal.FinURL);
            rsTmp.first();
            double creditAmount=0;
            double debitAmount=0;
            double ca=0,da=0;
            int k=0,m=0;
            
            while(!rsTmp.isAfterLast()) {
                k++;
                if(!UtilFunctions.getString(rsTmp,"EFFECT","").equals("C")) {
                    creditAmount+=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsTmp,"AMOUNT",0),2);
                    ca=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsTmp,"AMOUNT",0),2);
                } else {
                    debitAmount+=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsTmp,"AMOUNT",0),2);
                    da=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsTmp,"AMOUNT",0),2);
                }
                rsTmp.next();
            }
            if(k>1){
                VoucherTotalRow.setValue("REMARKS","V O U C H E R  T O T A L * * *");
                VoucherTotalRow.setValue("VOUCHER_DEBIT_AMOUNT",dFormat.format(debitAmount));
                VoucherTotalRow.setValue("VOUCHER_CREDIT_AMOUNT",dFormat.format(creditAmount));
                VoucherTotalRow.setValue("VSIGN","*");//added by ashutosh on 02/06/2014 as per new requirement
            }
            else {
                VoucherTotalRow.setValue("REMARKS","");
                VoucherTotalRow.setValue("VOUCHER_DEBIT_AMOUNT","");
                VoucherTotalRow.setValue("VOUCHER_CREDIT_AMOUNT","");
                VoucherTotalRow.setValue("VSIGN",""); //added by ashutosh on 02/06/2014 as per new requirement
            }
            
        }catch(Exception e) {
            e.printStackTrace();
        }
        return VoucherTotalRow;
    }
    
    private void GenerateRecieptRegister() {
        try {
            boolean OpeningRowAdded=false;
            
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("VOUCHER_NO");
            objReportData.AddColumn("LEGACY_NO");
            //objReportData.AddColumn("GROUP_VOUCHER_NO");
            objReportData.AddColumn("VOUCHER_DATE");
            objReportData.AddColumn("MAIN_CODE");
            objReportData.AddColumn("SUB_CODE");
            objReportData.AddColumn("REALIZATION_DATE");
            objReportData.AddColumn("PARTY_NAME");
            objReportData.AddColumn("REMARKS");
            objReportData.AddColumn("CHEQUE_NO");
            objReportData.AddColumn("CHEQUE_DATE");
            objReportData.AddColumn("PO_NO");
            objReportData.AddColumn("PO_DATE");
            objReportData.AddColumn("LINK_NO");
            objReportData.AddColumn("INVOICE_NO");
            objReportData.AddColumn("INVOICE_DATE");
            objReportData.AddColumn("INVOICE_AMOUNT");
            objReportData.AddColumn("CHEQUE_AMOUNT");
            objReportData.AddColumn("AC_NAME");
            objReportData.AddColumn("DEBIT_AMOUNT");
            objReportData.AddColumn("CREDIT_AMOUNT");
            
            
            
            String strSQL="SELECT A.*,B.*,A.REMARKS AS HEADER_REMARKS FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL B " +
            "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.COMPANY_ID=B.COMPANY_ID AND B.EFFECT='C' " +
            "AND A.VOUCHER_TYPE = 6"+buildCriteria();
            //strSQL+=" ORDER BY A.VOUCHER_DATE,A.VOUCHER_NO";
            int SortOrder=EITLERPGLOBAL.getComboCode(cmbSort);
            double cBookTotal = 0;
            double dBookTotal = 0;
            switch(SortOrder) {
                case 1: strSQL+=" ORDER BY A.VOUCHER_NO ";break;
                case 2: strSQL+=" ORDER BY A.VOUCHER_DATE ";break;
                case 3: strSQL+=" ORDER BY A.BOOK_CODE ";break;
                case 4: strSQL+=" ORDER BY CONVERT(A.LEGACY_NO,SIGNED) ";break;
            }
            ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    
                    objRow=objReportData.newRow();
                    
                    objRow.setValue("VOUCHER_NO",UtilFunctions.getString(rsTmp,"VOUCHER_NO",""));
                    objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsTmp,"LEGACY_NO",""));
                    //objRow.setValue("GROUP_VOUCHER_NO",UtilFunctions.getString(rsTmp,"VOUCHER_NO",""));
                    objRow.setValue("VOUCHER_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"VOUCHER_DATE","")));
                    
                    String MainCode=UtilFunctions.getString(rsTmp,"MAIN_ACCOUNT_CODE","");
                    String SubCode=UtilFunctions.getString(rsTmp,"SUB_ACCOUNT_CODE","");
                    
                    String AcName=clsPartyMaster.getAccountName(MainCode,"");
                    String PartyName="";
                    
                    if(!SubCode.trim().equals("")) {
                        PartyName=clsPartyMaster.getAccountName(MainCode,SubCode);
                    }
                    
                    
                    if(UtilFunctions.getString(rsTmp,"EFFECT","").equals("C")) {
                        objRow.setValue("CREDIT_AMOUNT",dFormat.format(UtilFunctions.getDouble(rsTmp,"AMOUNT",0)));
                        objRow.setValue("DEBIT_AMOUNT","");
                    }
                    else {
                        objRow.setValue("DEBIT_AMOUNT",dFormat.format(UtilFunctions.getDouble(rsTmp,"AMOUNT",0)));
                        objRow.setValue("CREDIT_AMOUNT","");
                    }
                    
                    objRow.setValue("MAIN_CODE",MainCode);
                    objRow.setValue("SUB_CODE",SubCode);
                    objRow.setValue("PARTY_NAME",PartyName);
                    objRow.setValue("REMARKS",UtilFunctions.getString(rsTmp,"HEADER_REMARKS",""));
                    objRow.setValue("CHEQUE_NO",UtilFunctions.getString(rsTmp,"CHEQUE_NO",""));
                    objRow.setValue("CHEQUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"CHEQUE_DATE","")));
                    objRow.setValue("PO_NO",UtilFunctions.getString(rsTmp,"PO_NO",""));
                    objRow.setValue("PO_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"PO_DATE","")));
                    objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsTmp,"INVOICE_NO",""));
                    objRow.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"INVOICE_DATE","")));
                    objRow.setValue("AC_NAME",AcName);
                    
                    
                    objReportData.AddRow(objRow);
                    
                    rsTmp.next();
                }
            }
            
            
            HashMap Parameters=new HashMap();
            Parameters.put("FROM_DATE",txtFromDate.getText());
            Parameters.put("TO_DATE",txtToDate.getText());
            Parameters.put("BOOK_CODE",txtBookCode.getText());
            Parameters.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,txtBookCode.getText()));
            
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptReceiptRegister.rpt",Parameters,objReportData);
            
        }catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    private TReportWriter.SimpleDataProvider.TTable getMemorandumJV() {
        TReportWriter.SimpleDataProvider.TRow objRow;
        TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
        try {
            objReportData.AddColumn("VOUCHER_NO");
            objReportData.AddColumn("LEGACY_NO");
            objReportData.AddColumn("GROUP_VOUCHER_NO");
            objReportData.AddColumn("VOUCHER_DATE");
            objReportData.AddColumn("MAIN_CODE");
            objReportData.AddColumn("SUB_CODE");
            objReportData.AddColumn("PARTY_NAME");
            objReportData.AddColumn("REMARKS");
            objReportData.AddColumn("CHEQUE_NO");
            objReportData.AddColumn("CHEQUE_DATE");
            objReportData.AddColumn("PO_NO");
            objReportData.AddColumn("PO_DATE");
            objReportData.AddColumn("INVOICE_NO");
            objReportData.AddColumn("INVOICE_DATE");
            objReportData.AddColumn("AC_NAME");
            objReportData.AddColumn("DEBIT_AMOUNT");
            objReportData.AddColumn("CREDIT_AMOUNT");
            objReportData.AddColumn("CLOSING_BALANCE");
            
            String strSQL="SELECT A.*,B.*,A.REMARKS AS HEADER_REMARKS FROM D_FIN_MEM_HEADER A,D_FIN_MEM_DETAIL B " +
            "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.COMPANY_ID=B.COMPANY_ID "+buildCriteria();
            ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsTmp.first();
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    
                    objRow=objReportData.newRow();
                    objRow.setValue("VOUCHER_NO",UtilFunctions.getString(rsTmp,"VOUCHER_NO",""));
                    objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsTmp,"LEGACY_NO",""));
                    objRow.setValue("GROUP_VOUCHER_NO",UtilFunctions.getString(rsTmp,"VOUCHER_NO",""));
                    objRow.setValue("VOUCHER_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"VOUCHER_DATE","")));
                    String MainCode=UtilFunctions.getString(rsTmp,"MAIN_ACCOUNT_CODE","");
                    String AcName=clsPartyMaster.getAccountName(MainCode,"");
                    if(UtilFunctions.getString(rsTmp,"EFFECT","").equals("C")) {
                        objRow.setValue("CREDIT_AMOUNT",dFormat.format(UtilFunctions.getDouble(rsTmp,"AMOUNT",0)));
                        objRow.setValue("DEBIT_AMOUNT","");
                    } else {
                        objRow.setValue("DEBIT_AMOUNT",dFormat.format(UtilFunctions.getDouble(rsTmp,"AMOUNT",0)));
                        objRow.setValue("CREDIT_AMOUNT","");
                    }
                    objRow.setValue("MAIN_CODE",MainCode);
                    objRow.setValue("SUB_CODE","");
                    objRow.setValue("PARTY_NAME","");
                    
                    String HeaderRemarks = UtilFunctions.getString(rsTmp,"HEADER_REMARKS","").replace('\n',' ').trim().replace('\\',' ').replace('/',' ');
                    if(HeaderRemarks.length()>=100) {
                        HeaderRemarks=HeaderRemarks.substring(0,100);
                    }
                    objRow.setValue("REMARKS",HeaderRemarks.replace('\n',' ').trim().replace('\t',' ').replace('\\',' ').trim());
                    objRow.setValue("CHEQUE_NO","");
                    objRow.setValue("CHEQUE_DATE","");
                    objRow.setValue("PO_NO","");
                    objRow.setValue("PO_DATE","");
                    objRow.setValue("INVOICE_NO","");
                    objRow.setValue("INVOICE_DATE","");
                    objRow.setValue("AC_NAME",AcName);
                    objRow.setValue("CLOSING_BALANCE","0");
                    objReportData.AddRow(objRow);
                    
                    rsTmp.next();
                }
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
        return objReportData;
    }
    
     private void GenerateSJV021421() {
        try {
            
            boolean OpeningRowAdded=false;
            
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("VOUCHER_NO");
            objReportData.AddColumn("LEGACY_NO");
            objReportData.AddColumn("GROUP_VOUCHER_DATE");
            objReportData.AddColumn("VOUCHER_DATE");
            objReportData.AddColumn("MAIN_CODE");
            objReportData.AddColumn("SUB_CODE");
            objReportData.AddColumn("PARTY_NAME");
            objReportData.AddColumn("REMARKS");
            objReportData.AddColumn("CHEQUE_NO");
            objReportData.AddColumn("CHEQUE_DATE");
            objReportData.AddColumn("PO_NO");
            objReportData.AddColumn("PO_DATE");
            objReportData.AddColumn("INVOICE_NO");
            objReportData.AddColumn("INVOICE_DATE");
            objReportData.AddColumn("AC_NAME");
            objReportData.AddColumn("DEBIT_AMOUNT");
            objReportData.AddColumn("CREDIT_AMOUNT");
            objReportData.AddColumn("VOUCHER_DEBIT_AMOUNT");
            objReportData.AddColumn("VOUCHER_CREDIT_AMOUNT");
            objReportData.AddColumn("CLOSING_BALANCE");
            objReportData.AddColumn("VSIGN"); //added by ashutosh on 02/06/2014 as per new requirement
            objReportData.AddColumn("LINK_NO");
            //objReportData.AddColumn("COUNT_VAL");
            
            double OpeningBalance=0;
            //=============== Add Opening Balance ===================//
            /*
            String BookMainCode=clsBook.getBookMainCode(EITLERPGLOBAL.gCompanyID, txtBookCode.getText());
            double OpeningBalance=clsAccount.getOpeningBalance(BookMainCode,"", EITLERPGLOBAL.formatDateDB(txtFromDate.getText()));            
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            //System.out.println("Date = " + txtFromDate.getText().trim());
            objOpeningRow.setValue("VOUCHER_NO","");
            objOpeningRow.setValue("LEGACY_NO","");
            objOpeningRow.setValue("GROUP_VOUCHER_DATE","");
            objOpeningRow.setValue("VOUCHER_DATE",""); //txtFromDate.getText().trim()
            objOpeningRow.setValue("MAIN_CODE","");
            objOpeningRow.setValue("SUB_CODE","");
            objOpeningRow.setValue("PARTY_NAME","OPENING BALANCE");
            //objOpeningRow.setValue("REMARKS","OPENING BALANCE");
            objOpeningRow.setValue("CHEQUE_NO","");
            objOpeningRow.setValue("CHEQUE_DATE","");
            objOpeningRow.setValue("PO_NO","");
            objOpeningRow.setValue("PO_DATE","");
            objOpeningRow.setValue("INVOICE_NO","");
            objOpeningRow.setValue("INVOICE_DATE","");
            objOpeningRow.setValue("AC_NAME","");                       
            //objOpeningRow.setValue("COUNT_VAL","");
            
            if(OpeningBalance<0) {
                objOpeningRow.setValue("CREDIT_AMOUNT",dFormat.format(Math.abs(OpeningBalance)));
                objOpeningRow.setValue("DEBIT_AMOUNT","0");
                objOpeningRow.setValue("VOUCHER_DEBIT_AMOUNT","0");
                objOpeningRow.setValue("VOUCHER_CREDIT_AMOUNT","0");
            } else {
                objOpeningRow.setValue("DEBIT_AMOUNT",dFormat.format(Math.abs(OpeningBalance)));
                objOpeningRow.setValue("CREDIT_AMOUNT","0");
                objOpeningRow.setValue("VOUCHER_DEBIT_AMOUNT","0");
                objOpeningRow.setValue("VOUCHER_CREDIT_AMOUNT","0");
            }
            
            objOpeningRow.setValue("CLOSING_BALANCE","");
             */
            //=================================================================================//
            
            
            String strSQL="SELECT B.*,A.*,A.REMARKS AS HEADER_REMARKS FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL B " +
            "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.COMPANY_ID=B.COMPANY_ID AND A.APPROVED=1 AND A.CANCELLED=0 "+buildCriteria();
            //strSQL+=" ORDER BY A.VOUCHER_DATE,A.VOUCHER_NO"; //AND B.IS_DEDUCTION<>1
            
            int SortOrder=EITLERPGLOBAL.getComboCode(cmbSort);
            double cBookTotal = 0;
            double dBookTotal = 0;
            // switch(SortOrder) {
            //     case 1: strSQL+=" ORDER BY A.VOUCHER_NO ";break;
            //     case 2: strSQL+=" ORDER BY A.VOUCHER_DATE ";break;
            //     case 3: strSQL+=" ORDER BY A.BOOK_CODE ";break;
            //     case 4: strSQL+=" ORDER BY CONVERT(A.LEGACY_NO,SIGNED) ";break;
            //}
            
            
            strSQL+=" ORDER BY A.VOUCHER_DATE,CONVERT(A.LEGACY_NO,SIGNED),A.VOUCHER_NO ";
            //System.out.println("all :-"+strSQL);
            //added as on 20/07/2009 -start
            String BankCode = "";
            if(!txtBookCode.getText().trim().equals("")) {
                BankCode = clsTRMapping.getMainCode(EITLERPGLOBAL.gCompanyID,txtBookCode.getText().trim());
            }
            //added as on 20/07/2009 -end
            
            String PreviousVoucherNo="";
            String VoucherNo="";
            boolean FirstVoucher=true;
            ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsTmp.first();
            int km=0,rm=0;
            int cnt=0;
            if(rsTmp.getRow()>0) {
                String vchNo="0";
                //double cr_amount=0,dr_amount=0;
                //int i=0;
                while(!rsTmp.isAfterLast()) {
                    //added as on 20/07/2009 -start
                    //System.out.println("BankCode :-"+BankCode);
                    if(!BankCode.equals("")) {
                        if(UtilFunctions.getString(rsTmp,"MAIN_ACCOUNT_CODE","").equals(BankCode)) {
                            rsTmp.next();
                            continue;
                        }
                    }
                    VoucherNo = UtilFunctions.getString(rsTmp,"VOUCHER_NO","").trim();
                    
                    if(!PreviousVoucherNo.equals(VoucherNo)) {
                        String test = "SELECT COUNT(*) as cnt FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND MAIN_ACCOUNT_CODE<>'"+clsTRMapping.getMainCode(EITLERPGLOBAL.gCompanyID,txtBookCode.getText().trim())+"' ";
                        ResultSet rsone = null;
                        rsone = data.getResult(test,FinanceGlobal.FinURL);
                        if(rsone.getRow()>0) {
                            cnt=Integer.parseInt(rsone.getString("cnt"));
                            //System.out.println("cnt :-"+cnt);
                        }
                    }
                    
                    /*if(FirstVoucher) {
                        PreviousVoucherNo = VoucherNo;
                        FirstVoucher=false;
                    } else {
                        System.out.println("PreviousVoucherNo :-"+PreviousVoucherNo +" no :-"+km);
                        if(!PreviousVoucherNo.equals(VoucherNo)) {
                            PreviousVoucherNo = VoucherNo;
                            km++;
                        }
                    }*/
                    if(!PreviousVoucherNo.equals(VoucherNo)) {
                        PreviousVoucherNo = VoucherNo;
                        km=1;
                        rm=1;
                        //System.out.println("if PreviousVoucherNo :-"+PreviousVoucherNo +" no :-"+rm);
                    }else{
                        rm++;
                        // System.out.println("else PreviousVoucherNo :-"+PreviousVoucherNo +" no :-"+rm);
                    }
                    
                    
                    //added as on 20/07/2009 -end
                    
                    objRow=objReportData.newRow();
                    
                    objRow.setValue("VOUCHER_NO",UtilFunctions.getString(rsTmp,"VOUCHER_NO","").trim());
                    objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsTmp,"LEGACY_NO","").trim());
                    objRow.setValue("GROUP_VOUCHER_DATE",UtilFunctions.getString(rsTmp,"VOUCHER_DATE",""));
                    objRow.setValue("VOUCHER_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"VOUCHER_DATE","")).trim());
                    if(!OpeningRowAdded) {
                        OpeningRowAdded=true;
                        //objOpeningRow.setValue("GROUP_VOUCHER_DATE",UtilFunctions.getString(rsTmp,"VOUCHER_DATE",""));
                        //objReportData.AddRow(objOpeningRow);
                    }
                    
                    String MainCode=UtilFunctions.getString(rsTmp,"MAIN_ACCOUNT_CODE","");
                    String SubCode=UtilFunctions.getString(rsTmp,"SUB_ACCOUNT_CODE","");               
                    String AcName=clsPartyMaster.getAccountName(MainCode,"");
                    String PartyName="";
                    
                    if(!SubCode.trim().equals("")) {
                        PartyName=clsPartyMaster.getAccountName(MainCode,SubCode);
                    }
                    
                    String mcode = "";
                    mcode=MainCode;
                    mcode+=" ";
                    mcode+=AcName;
                    /*if((mcode.length())>19){
                         mcode=mcode.substring(0,18);
                    }
                     */
                    //updated on 04/05/2014 start by ashutosh for modification in bank report
                    if((mcode.length())>21){
                        mcode=mcode.substring(0,20);
                    }
                    //updated on 04/05/2014 end
                    //   if(!vchNo.equalsIgnoreCase(UtilFunctions.getString(rsTmp,"VOUCHER_NO","").trim()))
                    //   {
                    vchNo =  UtilFunctions.getString(rsTmp,"VOUCHER_NO","").trim();
                        /*
                        if(UtilFunctions.getString(rsTmp,"HEADER_REMARKS","").trim().replace('\n',' ').replace('\t',' ').length()>43){
                            objRow.setValue("PARTY_NAME",(UtilFunctions.getString(rsTmp,"HEADER_REMARKS","").trim().replace('\n',' ').replace('\t',' ')).substring(0,42));
                        }else{
                            if(UtilFunctions.getString(rsTmp,"HEADER_REMARKS","").trim().equalsIgnoreCase("")){
                                objRow.setValue("PARTY_NAME",PartyName);
                            }
                            else{
                                objRow.setValue("PARTY_NAME",(UtilFunctions.getString(rsTmp,"HEADER_REMARKS","").trim().replace('\n',' ').replace('\t',' ')));
                            }
                        }
                         */
                    //updated on 09/05/2014 start by ashutosh for modification in bank report
                    
                    objRow.setValue("PARTY_NAME",PartyName);
                    String desc = UtilFunctions.getString(rsTmp,"HEADER_REMARKS","").trim().replace('\n',' ').replace('\t',' ');
                    if(desc.length()>50) {
                        desc=desc.substring(0, 49);
                    }
                    objRow.setValue("REMARKS",desc);
                    
                    //updated on 09/05/2014 end
                    //objRow.setValue("PARTY_NAME",PartyName.trim());
                    //        cr_amount=0;dr_amount=0;
                    //i=0;
               /*     }
                    else
                    {
                        //i++;
                        //objRow.setValue("REMARKS","");
                        objRow.setValue("PARTY_NAME","");
                    }    */
                    //  System.out.println("mcode :-"+mcode);
                    objRow.setValue("MAIN_CODE",mcode);
                    objRow.setValue("SUB_CODE",SubCode);                    
                    //objRow.setValue("PARTY_NAME",PartyName.trim());
                    objRow.setValue("LINK_NO",UtilFunctions.getString(rsTmp,"LINK_NO",""));
                    objRow.setValue("CHEQUE_NO",UtilFunctions.getString(rsTmp,"CHEQUE_NO",""));
                    objRow.setValue("CHEQUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"CHEQUE_DATE","")));
                    objRow.setValue("PO_NO",UtilFunctions.getString(rsTmp,"PO_NO",""));
                    objRow.setValue("PO_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"PO_DATE","")));
                    objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsTmp,"INVOICE_NO",""));
                    objRow.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"INVOICE_DATE","")));
                    //objRow.setValue("AC_NAME",AcName);
                    
                    //   objRow.setValue("REMARKS",UtilFunctions.getString(rsTmp,"HEADER_REMARKS","").trim().replace('\n',' ').replace('\t',' '));
                    
                    if(UtilFunctions.getString(rsTmp,"EFFECT","").equals("C")) {
                        OpeningBalance-=UtilFunctions.getDouble(rsTmp,"AMOUNT",0);
                        objRow.setValue("CREDIT_AMOUNT",dFormat.format(UtilFunctions.getDouble(rsTmp,"AMOUNT",0)));
                        objRow.setValue("DEBIT_AMOUNT","0");
                        //         cr_amount +=UtilFunctions.getDouble(rsTmp,"AMOUNT",0);
                        if(OpeningBalance<0) {
                            objRow.setValue("CLOSING_BALANCE",dFormat.format(-1*OpeningBalance)+" Cr");
                        }else {
                            objRow.setValue("CLOSING_BALANCE",dFormat.format(OpeningBalance)+" Dr");
                        }
                    }
                    else {
                        OpeningBalance+=UtilFunctions.getDouble(rsTmp,"AMOUNT",0);
                        objRow.setValue("DEBIT_AMOUNT",dFormat.format(UtilFunctions.getDouble(rsTmp,"AMOUNT",0)));
                        objRow.setValue("CREDIT_AMOUNT","0");
                        //   dr_amount +=UtilFunctions.getDouble(rsTmp,"AMOUNT",0);
                        if(OpeningBalance<0) {
                            objRow.setValue("CLOSING_BALANCE",dFormat.format(-1*OpeningBalance)+" Cr");
                        }
                        else{
                            objRow.setValue("CLOSING_BALANCE",dFormat.format(OpeningBalance)+" Dr");
                        }
                    }
                    //objRow.setValue("VOUCHER_DEBIT_AMOUNT","0");
                    //objRow.setValue("VOUCHER_CREDIT_AMOUNT","0");
                    objRow.setValue("VOUCHER_DEBIT_AMOUNT","");
                    objRow.setValue("VOUCHER_CREDIT_AMOUNT","");
                    objRow.setValue("VSIGN","");//added by ashutosh on 02/06/2014 as per new requirement
                    objReportData.AddRow(objRow);
                    
                    if(rm==cnt && rm>1){
                        objReportData.AddRow(getVoucherTotal(PreviousVoucherNo));
                        objReportData.AddRow(getBlankRow(PreviousVoucherNo));
                        rm=0;
                    }
                     
                    
                    rsTmp.next();
                }
            }
            
            HashMap Parameters=new HashMap();
            
            
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE",txtFromDate.getText());
            Parameters.put("TO_DATE",txtToDate.getText());
            
            Parameters.put("BOOK_NAME",txtBookCode.getText()+" - "+clsBook.getBookName(EITLERPGLOBAL.gCompanyID,txtBookCode.getText()));
            //objEngine.PreviewReport("http://200.0.0.227:8080/jmx-console/dinesh/EITLERP/Reports/finance/rptsjv021421.rpt",Parameters,objReportData);
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptBankBook1.rpt", Parameters, objReportData);
            
            //objEngine.PreviewReport("D:\\Soft\\untitled folder\\dinesh\\EITLERP\\Reports\\finance\\rptBankBook.rpt",Parameters,objReportData);
            
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    public void GenerateSJV01(String FromDate,String ToDate,String BookCode) {
         ////////////////
         try{
             System.gc();
            String Condition="";
            int i=0;
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("AGENT_SR_NO");
            objData.AddColumn("PARTYNAME");            
            objData.AddColumn("PIECE_NO");
            objData.AddColumn("BALE_NO");      
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("GATEPASS_NO");
            objData.AddColumn("PAYMENT_TERM_CODE");
            objData.AddColumn("STATION_CODE");
            objData.AddColumn("TOTAL_GROSS_AMOUNT");
            objData.AddColumn("GROSS_WEIGHT");
            objData.AddColumn("COLUMN_6_AMT");
            objData.AddColumn("COLUMN_25_AMT");
            objData.AddColumn("COLUMN_24_AMT");
            objData.AddColumn("COLUMN_8_AMT");      
            objData.AddColumn("COLUMN_9_AMT");
            objData.AddColumn("COLUMN_16_AMT");
            objData.AddColumn("TRD_DISCOUNT");
            objData.AddColumn("TOTAL_SQ_MTR");
            objData.AddColumn("COLUMN_12_AMT");
            objData.AddColumn("COLUMN_1_AMT");            
            objData.AddColumn("TOTAL_NET_AMOUNT");
            objData.AddColumn("TOTAL_GROSS_QTY");
            objData.AddColumn("TOTAL_NET_QTY");
            objData.AddColumn("TOTAL_GROSS_AMOUNT");
            objData.AddColumn("TOTAL_VALUE");
            objData.AddColumn("NET_AMOUNT");
            objData.AddColumn("VAT4");
            objData.AddColumn("VAT1");
            objData.AddColumn("CST2");
            objData.AddColumn("CST5");
            objData.AddColumn("COLUMN_13_AMT");            
             
            String str="SELECT A.*,SUBSTRING(B.PARTY_NAME,1,18) AS PARTYNAME FROM D_SAL_INVOICE_HEADER A,D_SAL_PARTY_MASTER B WHERE A.COMPANY_ID=2 AND A.INVOICE_TYPE=1 AND A.WAREHOUSE_CODE IN (1,4,9)  AND A.QUALITY_INDICATOR IN (0,2,3,4) AND A.CANCELLED=0 AND A.APPROVED=1 AND (TOTAL_NET_AMOUNT/TOTAL_GROSS_QTY)>80 AND A.PARTY_CODE=B.PARTY_CODE";
            
            try {
                if(!FromDate.equals("")) {
                    //Condition+=" AND A.INVOICE_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                    Condition+=" AND A.INVOICE_DATE>='"+FromDate+"' ";
                }
                
                if(!ToDate.equals("")) {
                    //Condition+=" AND A.INVOICE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                    Condition+=" AND A.INVOICE_DATE<='"+ToDate+"' ";
                }                
            }
            catch(Exception e) {
                e.printStackTrace();
            }
            
             ResultSet  rsTemp =data.getResult(str+Condition);
              if(rsTemp.getRow()>0) {  
                while(!rsTemp.isAfterLast()){
                i++;
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();                 
                
                objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsTemp,"PARTY_CODE",""));
                objRow.setValue("PARTYNAME",UtilFunctions.getString(rsTemp,"PARTYNAME",""));
                objRow.setValue("STATION_CODE",UtilFunctions.getString(rsTemp,"STATION_CODE",""));
                objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsTemp,"INVOICE_NO",""));
                objRow.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTemp,"INVOICE_DATE","")));
                objRow.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
                //objRow.setValue("PIECE_NO",UtilFunctions.getString(rsTemp,"PIECE_NO",""));
                objRow.setValue("PIECE_NO","");
                objRow.setValue("BALE_NO",UtilFunctions.getString(rsTemp,"BALE_NO",""));
                objRow.setValue("GATEPASS_NO",UtilFunctions.getString(rsTemp,"GATEPASS_NO",""));
                objRow.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
                objRow.setValue("PAYMENT_TERM_CODE",UtilFunctions.getString(rsTemp,"PAYMENT_TERM_CODE",""));
                objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                objRow.setValue("COLUMN_6_AMT",UtilFunctions.getString(rsTemp,"COLUMN_6_AMT",""));
                objRow.setValue("COLUMN_25_AMT",UtilFunctions.getString(rsTemp,"COLUMN_25_AMT",""));
                objRow.setValue("COLUMN_24_AMT",UtilFunctions.getString(rsTemp,"COLUMN_24_AMT",""));
                objRow.setValue("COLUMN_8_AMT",UtilFunctions.getString(rsTemp,"COLUMN_8_AMT",""));
                objRow.setValue("COLUMN_9_AMT",UtilFunctions.getString(rsTemp,"COLUMN_9_AMT",""));
                objRow.setValue("COLUMN_16_AMT",UtilFunctions.getString(rsTemp,"COLUMN_16_AMT",""));
                objRow.setValue("TRD_DISCOUNT",UtilFunctions.getString(rsTemp,"TRD_DISCOUNT",""));
                objRow.setValue("TOTAL_SQ_MTR",UtilFunctions.getString(rsTemp,"TOTAL_SQ_MTR",""));
                objRow.setValue("COLUMN_12_AMT",UtilFunctions.getString(rsTemp,"COLUMN_12_AMT",""));
                objRow.setValue("COLUMN_1_AMT",UtilFunctions.getString(rsTemp,"COLUMN_1_AMT",""));
                objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                objRow.setValue("TOTAL_GROSS_QTY",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_QTY",""));
                objRow.setValue("TOTAL_NET_QTY",UtilFunctions.getString(rsTemp,"TOTAL_NET_QTY",""));
                objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                objRow.setValue("TOTAL_VALUE",UtilFunctions.getString(rsTemp,"TOTAL_VALUE",""));
                objRow.setValue("NET_AMOUNT",UtilFunctions.getString(rsTemp,"NET_AMOUNT",""));
                objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                objRow.setValue("VAT4",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT4",0)));
                objRow.setValue("VAT1",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT1",0)));
                objRow.setValue("CST2",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST2",0)));
                objRow.setValue("CST5",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST5",0)));
                objRow.setValue("COLUMN_13_AMT",UtilFunctions.getString(rsTemp,"COLUMN_13_AMT",""));
                
                objData.AddRow(objRow);
                
                rsTemp.next();
            }
              }
            HashMap parameter=new HashMap();
            parameter.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            parameter.put("FROM_DATE",EITLERPGLOBAL.formatDate(FromDate));
            parameter.put("TO_DATE",EITLERPGLOBAL.formatDate(ToDate));
            parameter.put("BOOK_CODE",BookCode);
            parameter.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode)); 
            parameter.put("TOTAL_INVOICE_NO",Integer.toString(i));
            
           // EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptsjv010.rpt",parameter,objData);
            rsTemp.close();                        
            
           
        }catch(SQLException e) {
            e.printStackTrace();
            
        }
        //////////////////////////         
    } 
    
    public void GenerateSJV01GST(String FromDate,String ToDate,String BookCode) {
         ////////////////
         try{
             System.gc();
            String Condition="";
            int i=0;
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("AGENT_SR_NO");
            objData.AddColumn("PARTYNAME");            
            objData.AddColumn("PIECE_NO");
            objData.AddColumn("BALE_NO");      
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("GATEPASS_NO");
            objData.AddColumn("PAYMENT_TERM_CODE");
            objData.AddColumn("STATION_CODE");
            objData.AddColumn("TOTAL_GROSS_AMOUNT");
            objData.AddColumn("GROSS_WEIGHT");
            objData.AddColumn("COLUMN_6_AMT");
            objData.AddColumn("COLUMN_25_AMT");
            objData.AddColumn("COLUMN_24_AMT");
            objData.AddColumn("COLUMN_8_AMT");      
            objData.AddColumn("COLUMN_9_AMT");
            objData.AddColumn("COLUMN_16_AMT");
            objData.AddColumn("TRD_DISCOUNT");
            objData.AddColumn("TOTAL_SQ_MTR");
            objData.AddColumn("COLUMN_12_AMT");
            objData.AddColumn("COLUMN_1_AMT");            
            objData.AddColumn("TOTAL_NET_AMOUNT");
            objData.AddColumn("TOTAL_GROSS_QTY");
            objData.AddColumn("TOTAL_NET_QTY");
            objData.AddColumn("TOTAL_GROSS_AMOUNT");
            objData.AddColumn("TOTAL_VALUE");
            objData.AddColumn("NET_AMOUNT");
            objData.AddColumn("CGST_AMT");
            objData.AddColumn("SGST_AMT");
            objData.AddColumn("IGST_AMT");
            objData.AddColumn("COLUMN_13_AMT");            
            objData.AddColumn("CASH_DISC_AMT");            
             
            //String str="SELECT A.*,SUBSTRING(B.PARTY_NAME,1,18) AS PARTYNAME FROM D_SAL_INVOICE_HEADER A,D_SAL_PARTY_MASTER B WHERE A.COMPANY_ID=2 AND A.INVOICE_TYPE=1 AND A.WAREHOUSE_CODE IN (1,4,9)  AND A.QUALITY_INDICATOR IN (0,2,3,4) AND A.CANCELLED=0 AND A.APPROVED=1 AND (TOTAL_NET_AMOUNT/TOTAL_GROSS_QTY)>80 AND A.PARTY_CODE=B.PARTY_CODE";
            String str="SELECT A.*,SUBSTRING(B.PARTY_NAME,1,18) AS PARTYNAME FROM D_SAL_INVOICE_HEADER A,D_SAL_PARTY_MASTER B WHERE A.COMPANY_ID=2 AND A.INVOICE_TYPE=1 AND A.WAREHOUSE_CODE IN (1,4,9)  AND A.QUALITY_INDICATOR IN (0,2,3,4) AND A.CANCELLED=0 AND A.APPROVED=1 AND (TOTAL_NET_AMOUNT/TOTAL_GROSS_QTY)>40 AND A.PARTY_CODE=B.PARTY_CODE";
            
            try {
                if(!FromDate.equals("")) {
                    //Condition+=" AND A.INVOICE_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                    Condition+=" AND A.INVOICE_DATE>='"+FromDate+"' ";
                }
                
                if(!ToDate.equals("")) {
                    //Condition+=" AND A.INVOICE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                    Condition+=" AND A.INVOICE_DATE<='"+ToDate+"' ";
                }                
            }
            catch(Exception e) {
                e.printStackTrace();
            }
            
             ResultSet  rsTemp =data.getResult(str+Condition);
              if(rsTemp.getRow()>0) {  
                while(!rsTemp.isAfterLast()){
                i++;
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();                 
                
                objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsTemp,"PARTY_CODE",""));
                objRow.setValue("PARTYNAME",UtilFunctions.getString(rsTemp,"PARTYNAME",""));
                objRow.setValue("STATION_CODE",UtilFunctions.getString(rsTemp,"STATION_CODE",""));
                objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsTemp,"INVOICE_NO",""));
                objRow.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTemp,"INVOICE_DATE","")));
                objRow.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
                //objRow.setValue("PIECE_NO",UtilFunctions.getString(rsTemp,"PIECE_NO",""));
                objRow.setValue("PIECE_NO","");
                objRow.setValue("BALE_NO",UtilFunctions.getString(rsTemp,"BALE_NO",""));
                objRow.setValue("GATEPASS_NO",UtilFunctions.getString(rsTemp,"GATEPASS_NO",""));
                objRow.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
                objRow.setValue("PAYMENT_TERM_CODE",UtilFunctions.getString(rsTemp,"PAYMENT_TERM_CODE",""));
                objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                objRow.setValue("COLUMN_6_AMT",UtilFunctions.getString(rsTemp,"COLUMN_6_AMT",""));
                objRow.setValue("COLUMN_25_AMT",UtilFunctions.getString(rsTemp,"COLUMN_25_AMT",""));
                objRow.setValue("COLUMN_24_AMT",UtilFunctions.getString(rsTemp,"COLUMN_24_AMT",""));
                objRow.setValue("COLUMN_8_AMT",UtilFunctions.getString(rsTemp,"COLUMN_8_AMT",""));
                objRow.setValue("COLUMN_9_AMT",UtilFunctions.getString(rsTemp,"COLUMN_9_AMT",""));
                objRow.setValue("COLUMN_16_AMT",UtilFunctions.getString(rsTemp,"COLUMN_16_AMT",""));
                objRow.setValue("TRD_DISCOUNT",UtilFunctions.getString(rsTemp,"TRD_DISCOUNT",""));
                objRow.setValue("TOTAL_SQ_MTR",UtilFunctions.getString(rsTemp,"TOTAL_SQ_MTR",""));
                objRow.setValue("COLUMN_12_AMT",UtilFunctions.getString(rsTemp,"COLUMN_12_AMT",""));
                objRow.setValue("COLUMN_1_AMT",UtilFunctions.getString(rsTemp,"COLUMN_1_AMT",""));
                objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                objRow.setValue("TOTAL_GROSS_QTY",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_QTY",""));
                objRow.setValue("TOTAL_NET_QTY",UtilFunctions.getString(rsTemp,"TOTAL_NET_QTY",""));
                objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                objRow.setValue("TOTAL_VALUE",UtilFunctions.getString(rsTemp,"TOTAL_VALUE",""));
                objRow.setValue("NET_AMOUNT",UtilFunctions.getString(rsTemp,"NET_AMOUNT",""));
                objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
               // objRow.setValue("VAT4",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT4",0)));
               // objRow.setValue("VAT1",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT1",0)));
               // objRow.setValue("CST2",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST2",0)));
               // objRow.setValue("CST5",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST5",0)));
                objRow.setValue("COLUMN_13_AMT",UtilFunctions.getString(rsTemp,"COLUMN_13_AMT",""));
                objRow.setValue("CGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"CGST_AMT",0)));
                objRow.setValue("SGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"SGST_AMT",0)));
                objRow.setValue("IGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"IGST_AMT",0)));
                objRow.setValue("CASH_DISC_AMT", dFormat.format(UtilFunctions.getDouble(rsTemp, "CASH_DISC_AMT", 0)));
                    
                
                objData.AddRow(objRow);
                
                rsTemp.next();
            }
              }
            HashMap parameter=new HashMap();
            parameter.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            parameter.put("FROM_DATE",EITLERPGLOBAL.formatDate(FromDate));
            parameter.put("TO_DATE",EITLERPGLOBAL.formatDate(ToDate));
            parameter.put("BOOK_CODE",BookCode);
            parameter.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode)); 
            parameter.put("TOTAL_INVOICE_NO",Integer.toString(i));
            
           // EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptsjv010GST.rpt",parameter,objData);
            rsTemp.close();                        
            
           
        }catch(SQLException e) {
            e.printStackTrace();
            
        }
        //////////////////////////         
    }

    
    public void GenerateSJV011(String FromDate,String ToDate,String BookCode) {
      try{
            System.gc();
            java.lang.Runtime.getRuntime().gc();
            int k=0;
            String Condition="";
            TReportWriter.SimpleDataProvider.TTable objData1=new TReportWriter.SimpleDataProvider.TTable();
            objData1.AddColumn("PARTY_CODE");
            objData1.AddColumn("INVOICE_DATE");
            objData1.AddColumn("AGENT_SR_NO");
            objData1.AddColumn("PARTYNAME");            
            objData1.AddColumn("PIECE_NO");
            objData1.AddColumn("BALE_NO");      
            objData1.AddColumn("INVOICE_NO");
            objData1.AddColumn("GATEPASS_NO");
            objData1.AddColumn("PAYMENT_TERM_CODE");
            objData1.AddColumn("STATION_CODE");
            objData1.AddColumn("TOTAL_GROSS_AMOUNT");
            objData1.AddColumn("GROSS_WEIGHT");
            objData1.AddColumn("COLUMN_6_AMT");
            objData1.AddColumn("COLUMN_25_AMT");
            objData1.AddColumn("COLUMN_24_AMT");
            objData1.AddColumn("COLUMN_8_AMT");      
            objData1.AddColumn("COLUMN_9_AMT");
            objData1.AddColumn("COLUMN_16_AMT");
            objData1.AddColumn("TRD_DISCOUNT");
            objData1.AddColumn("TOTAL_SQ_MTR");
            objData1.AddColumn("COLUMN_12_AMT");
            objData1.AddColumn("COLUMN_1_AMT");            
            objData1.AddColumn("TOTAL_NET_AMOUNT");
            objData1.AddColumn("TOTAL_GROSS_QTY");
            objData1.AddColumn("TOTAL_NET_QTY");
            objData1.AddColumn("TOTAL_GROSS_AMOUNT");
            objData1.AddColumn("TOTAL_VALUE");
            objData1.AddColumn("NET_AMOUNT");
            objData1.AddColumn("VAT4");
            objData1.AddColumn("VAT1");
            objData1.AddColumn("CST2");
            objData1.AddColumn("CST5");
            objData1.AddColumn("COLUMN_13_AMT");
             
            String str="SELECT A.*,SUBSTRING(B.PARTY_NAME,1,18) AS PARTYNAME FROM D_SAL_INVOICE_HEADER A,D_SAL_PARTY_MASTER B WHERE A.COMPANY_ID=2 AND A.INVOICE_TYPE=1 AND A.WAREHOUSE_CODE=0 AND A.QUALITY_INDICATOR=0 AND A.CANCELLED=0 AND A.PARTY_CODE=B.PARTY_CODE AND A.APPROVED=1";
            
            try {
                if(!FromDate.equals("")) {
                    //Condition+=" AND A.INVOICE_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                    Condition+=" AND A.INVOICE_DATE>='"+FromDate+"' ";
                }
                
                if(!ToDate.equals("")) {
                    //Condition+=" AND A.INVOICE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                    Condition+=" AND A.INVOICE_DATE<='"+ToDate+"' ";
                }                
            }
            catch(Exception e) {
                e.printStackTrace();
            }
            
             ResultSet  rsTemp =data.getResult(str+Condition);
             if(rsTemp.getRow()>0) {
                while(!rsTemp.isAfterLast()){
                k++;
                TReportWriter.SimpleDataProvider.TRow objRow1=objData1.newRow();                 
                
                objRow1.setValue("PARTY_CODE",UtilFunctions.getString(rsTemp,"PARTY_CODE",""));
                objRow1.setValue("PARTYNAME",UtilFunctions.getString(rsTemp,"PARTYNAME",""));
                objRow1.setValue("STATION_CODE",UtilFunctions.getString(rsTemp,"STATION_CODE",""));
                objRow1.setValue("INVOICE_NO",UtilFunctions.getString(rsTemp,"INVOICE_NO",""));
                objRow1.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTemp,"INVOICE_DATE","")));
                objRow1.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
                //objRow.setValue("PIECE_NO",UtilFunctions.getString(rsTemp,"PIECE_NO",""));
                objRow1.setValue("PIECE_NO","");
                objRow1.setValue("BALE_NO",UtilFunctions.getString(rsTemp,"BALE_NO",""));
                objRow1.setValue("GATEPASS_NO",UtilFunctions.getString(rsTemp,"GATEPASS_NO",""));
                objRow1.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
                objRow1.setValue("PAYMENT_TERM_CODE",UtilFunctions.getString(rsTemp,"PAYMENT_TERM_CODE",""));
                objRow1.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                objRow1.setValue("COLUMN_6_AMT",UtilFunctions.getString(rsTemp,"COLUMN_6_AMT",""));
                objRow1.setValue("COLUMN_25_AMT",UtilFunctions.getString(rsTemp,"COLUMN_25_AMT",""));
                objRow1.setValue("COLUMN_24_AMT",UtilFunctions.getString(rsTemp,"COLUMN_24_AMT",""));
                objRow1.setValue("COLUMN_8_AMT",UtilFunctions.getString(rsTemp,"COLUMN_8_AMT",""));
                objRow1.setValue("COLUMN_9_AMT",UtilFunctions.getString(rsTemp,"COLUMN_9_AMT",""));
                objRow1.setValue("COLUMN_16_AMT",UtilFunctions.getString(rsTemp,"COLUMN_16_AMT",""));
                objRow1.setValue("TRD_DISCOUNT",UtilFunctions.getString(rsTemp,"TRD_DISCOUNT",""));
                objRow1.setValue("TOTAL_SQ_MTR",UtilFunctions.getString(rsTemp,"TOTAL_SQ_MTR",""));
                objRow1.setValue("COLUMN_12_AMT",UtilFunctions.getString(rsTemp,"COLUMN_12_AMT",""));
                objRow1.setValue("COLUMN_1_AMT",UtilFunctions.getString(rsTemp,"COLUMN_1_AMT",""));
                objRow1.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                objRow1.setValue("TOTAL_GROSS_QTY",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_QTY",""));
                objRow1.setValue("TOTAL_NET_QTY",UtilFunctions.getString(rsTemp,"TOTAL_NET_QTY",""));
                objRow1.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                objRow1.setValue("TOTAL_VALUE",UtilFunctions.getString(rsTemp,"TOTAL_VALUE",""));
                objRow1.setValue("NET_AMOUNT",UtilFunctions.getString(rsTemp,"NET_AMOUNT",""));
                objRow1.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                objRow1.setValue("VAT4",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT4",0)));
                objRow1.setValue("VAT1",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT1",0)));
                objRow1.setValue("CST2",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST2",0)));
                objRow1.setValue("CST5",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST5",0)));
                objRow1.setValue("COLUMN_13_AMT",UtilFunctions.getString(rsTemp,"COLUMN_13_AMT",""));
                
                objData1.AddRow(objRow1);
                
                rsTemp.next();
            }
             }
           HashMap parameter=new HashMap();
            parameter.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            parameter.put("FROM_DATE",EITLERPGLOBAL.formatDate(FromDate));
            parameter.put("TO_DATE",EITLERPGLOBAL.formatDate(ToDate));
            parameter.put("BOOK_CODE",BookCode);
            parameter.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode));
            parameter.put("TOTAL_INVOICE_NO",Integer.toString(k));
           // EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptsjv010.rpt",parameter,objData1);
            rsTemp.close();            
           
        }catch(SQLException e) {
            e.printStackTrace();
            
        }  
    }
    
    public void GenerateSJV011GST(String FromDate,String ToDate,String BookCode) {
      try{
            System.gc();
            java.lang.Runtime.getRuntime().gc();
            int k=0;
            String Condition="";
            TReportWriter.SimpleDataProvider.TTable objData1=new TReportWriter.SimpleDataProvider.TTable();
            objData1.AddColumn("PARTY_CODE");
            objData1.AddColumn("INVOICE_DATE");
            objData1.AddColumn("AGENT_SR_NO");
            objData1.AddColumn("PARTYNAME");            
            objData1.AddColumn("PIECE_NO");
            objData1.AddColumn("BALE_NO");      
            objData1.AddColumn("INVOICE_NO");
            objData1.AddColumn("GATEPASS_NO");
            objData1.AddColumn("PAYMENT_TERM_CODE");
            objData1.AddColumn("STATION_CODE");
            objData1.AddColumn("TOTAL_GROSS_AMOUNT");
            objData1.AddColumn("GROSS_WEIGHT");
            objData1.AddColumn("COLUMN_6_AMT");
            objData1.AddColumn("COLUMN_25_AMT");
            objData1.AddColumn("COLUMN_24_AMT");
            objData1.AddColumn("COLUMN_8_AMT");      
            objData1.AddColumn("COLUMN_9_AMT");
            objData1.AddColumn("COLUMN_16_AMT");
            objData1.AddColumn("TRD_DISCOUNT");
            objData1.AddColumn("TOTAL_SQ_MTR");
            objData1.AddColumn("COLUMN_12_AMT");
            objData1.AddColumn("COLUMN_1_AMT");            
            objData1.AddColumn("TOTAL_NET_AMOUNT");
            objData1.AddColumn("TOTAL_GROSS_QTY");
            objData1.AddColumn("TOTAL_NET_QTY");
            objData1.AddColumn("TOTAL_GROSS_AMOUNT");
            objData1.AddColumn("TOTAL_VALUE");
            objData1.AddColumn("NET_AMOUNT");
//            objData1.AddColumn("VAT4");
//            objData1.AddColumn("VAT1");
//            objData1.AddColumn("CST2");
//            objData1.AddColumn("CST5");
            objData1.AddColumn("COLUMN_13_AMT");
            objData.AddColumn("CGST_AMT");
            objData.AddColumn("SGST_AMT");
            objData.AddColumn("IGST_AMT");
            objData.AddColumn("CASH_DISC_AMT");
             
            String str="SELECT A.*,SUBSTRING(B.PARTY_NAME,1,18) AS PARTYNAME FROM D_SAL_INVOICE_HEADER A,D_SAL_PARTY_MASTER B WHERE A.COMPANY_ID=2 AND A.INVOICE_TYPE=1 AND A.WAREHOUSE_CODE=0 AND A.QUALITY_INDICATOR=0 AND A.CANCELLED=0 AND A.PARTY_CODE=B.PARTY_CODE AND A.APPROVED=1";
            
            
            try {
                if(!FromDate.equals("")) {
                    //Condition+=" AND A.INVOICE_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                    Condition+=" AND A.INVOICE_DATE>='"+FromDate+"' ";
                }
                
                if(!ToDate.equals("")) {
                    //Condition+=" AND A.INVOICE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                    Condition+=" AND A.INVOICE_DATE<='"+ToDate+"' ";
                }                
            }
            catch(Exception e) {
                e.printStackTrace();
            }
            
             ResultSet  rsTemp =data.getResult(str+Condition);
             if(rsTemp.getRow()>0) {
                while(!rsTemp.isAfterLast()){
                k++;
                TReportWriter.SimpleDataProvider.TRow objRow1=objData1.newRow();                 
                
                objRow1.setValue("PARTY_CODE",UtilFunctions.getString(rsTemp,"PARTY_CODE",""));
                objRow1.setValue("PARTYNAME",UtilFunctions.getString(rsTemp,"PARTYNAME",""));
                objRow1.setValue("STATION_CODE",UtilFunctions.getString(rsTemp,"STATION_CODE",""));
                objRow1.setValue("INVOICE_NO",UtilFunctions.getString(rsTemp,"INVOICE_NO",""));
                objRow1.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTemp,"INVOICE_DATE","")));
                objRow1.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
                //objRow.setValue("PIECE_NO",UtilFunctions.getString(rsTemp,"PIECE_NO",""));
                objRow1.setValue("PIECE_NO","");
                objRow1.setValue("BALE_NO",UtilFunctions.getString(rsTemp,"BALE_NO",""));
                objRow1.setValue("GATEPASS_NO",UtilFunctions.getString(rsTemp,"GATEPASS_NO",""));
                objRow1.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
                objRow1.setValue("PAYMENT_TERM_CODE",UtilFunctions.getString(rsTemp,"PAYMENT_TERM_CODE",""));
                objRow1.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                objRow1.setValue("COLUMN_6_AMT",UtilFunctions.getString(rsTemp,"COLUMN_6_AMT",""));
                objRow1.setValue("COLUMN_25_AMT",UtilFunctions.getString(rsTemp,"COLUMN_25_AMT",""));
                objRow1.setValue("COLUMN_24_AMT",UtilFunctions.getString(rsTemp,"COLUMN_24_AMT",""));
                objRow1.setValue("COLUMN_8_AMT",UtilFunctions.getString(rsTemp,"COLUMN_8_AMT",""));
                objRow1.setValue("COLUMN_9_AMT",UtilFunctions.getString(rsTemp,"COLUMN_9_AMT",""));
                objRow1.setValue("COLUMN_16_AMT",UtilFunctions.getString(rsTemp,"COLUMN_16_AMT",""));
                objRow1.setValue("TRD_DISCOUNT",UtilFunctions.getString(rsTemp,"TRD_DISCOUNT",""));
                objRow1.setValue("TOTAL_SQ_MTR",UtilFunctions.getString(rsTemp,"TOTAL_SQ_MTR",""));
                objRow1.setValue("COLUMN_12_AMT",UtilFunctions.getString(rsTemp,"COLUMN_12_AMT",""));
                objRow1.setValue("COLUMN_1_AMT",UtilFunctions.getString(rsTemp,"COLUMN_1_AMT",""));
                objRow1.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                objRow1.setValue("TOTAL_GROSS_QTY",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_QTY",""));
                objRow1.setValue("TOTAL_NET_QTY",UtilFunctions.getString(rsTemp,"TOTAL_NET_QTY",""));
                objRow1.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                objRow1.setValue("TOTAL_VALUE",UtilFunctions.getString(rsTemp,"TOTAL_VALUE",""));
                objRow1.setValue("NET_AMOUNT",UtilFunctions.getString(rsTemp,"NET_AMOUNT",""));
                objRow1.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
//                objRow1.setValue("VAT4",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT4",0)));
//                objRow1.setValue("VAT1",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT1",0)));
//                objRow1.setValue("CST2",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST2",0)));
//                objRow1.setValue("CST5",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST5",0)));
                objRow1.setValue("COLUMN_13_AMT",UtilFunctions.getString(rsTemp,"COLUMN_13_AMT",""));
                objRow1.setValue("CGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"CGST_AMT",0)));
                objRow1.setValue("SGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"SGST_AMT",0)));
                objRow1.setValue("IGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"IGST_AMT",0)));
                objRow1.setValue("CASH_DISC_AMT", dFormat.format(UtilFunctions.getDouble(rsTemp, "CASH_DISC_AMT", 0)));
                
                objData1.AddRow(objRow1);
                
                rsTemp.next();
            }
             }
           HashMap parameter=new HashMap();
            parameter.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            parameter.put("FROM_DATE",EITLERPGLOBAL.formatDate(FromDate));
            parameter.put("TO_DATE",EITLERPGLOBAL.formatDate(ToDate));
            parameter.put("BOOK_CODE",BookCode);
            parameter.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode));
            parameter.put("TOTAL_INVOICE_NO",Integer.toString(k));
           // EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptsjv010GST.rpt",parameter,objData1);
            rsTemp.close();            
           
        }catch(SQLException e) {
            e.printStackTrace();
            
        }  
    }
    
    public void GenerateSJV012(String FromDate,String ToDate,String BookCode) {
      try{
              System.gc();
              java.lang.Runtime.getRuntime().gc();
              int j=0;
            String Condition="";
            TReportWriter.SimpleDataProvider.TTable objData2=new TReportWriter.SimpleDataProvider.TTable();
            objData2.AddColumn("PARTY_CODE");
            objData2.AddColumn("INVOICE_DATE");
            objData2.AddColumn("AGENT_SR_NO");
            objData2.AddColumn("PARTYNAME");            
            objData2.AddColumn("PIECE_NO");
            objData2.AddColumn("BALE_NO");      
            objData2.AddColumn("INVOICE_NO");
            objData2.AddColumn("GATEPASS_NO");
            objData2.AddColumn("PAYMENT_TERM_CODE");
            objData2.AddColumn("STATION_CODE");
            objData2.AddColumn("TOTAL_GROSS_AMOUNT");
            objData2.AddColumn("GROSS_WEIGHT");
            objData2.AddColumn("COLUMN_6_AMT");
            objData2.AddColumn("COLUMN_25_AMT");
            objData2.AddColumn("COLUMN_24_AMT");
            objData2.AddColumn("COLUMN_8_AMT");      
            objData2.AddColumn("COLUMN_9_AMT");
            objData2.AddColumn("COLUMN_16_AMT");
            objData2.AddColumn("TRD_DISCOUNT");
            objData2.AddColumn("TOTAL_SQ_MTR");
            objData2.AddColumn("COLUMN_12_AMT");
            objData2.AddColumn("COLUMN_1_AMT");            
            objData2.AddColumn("TOTAL_NET_AMOUNT");
            objData2.AddColumn("TOTAL_GROSS_QTY");
            objData2.AddColumn("TOTAL_NET_QTY");
            objData2.AddColumn("TOTAL_GROSS_AMOUNT");
            objData2.AddColumn("TOTAL_VALUE");
            objData2.AddColumn("NET_AMOUNT");
            objData2.AddColumn("VAT4");
            objData2.AddColumn("VAT1");
            objData2.AddColumn("CST2");
            objData2.AddColumn("CST5");
            objData2.AddColumn("COLUMN_13_AMT");
             
            String str="SELECT A.*,SUBSTRING(B.PARTY_NAME,1,18) AS PARTYNAME FROM D_SAL_INVOICE_HEADER A,D_SAL_PARTY_MASTER B WHERE A.COMPANY_ID=2 AND A.INVOICE_TYPE=1 AND (TOTAL_NET_AMOUNT/TOTAL_GROSS_QTY)<80 AND A.CANCELLED=0 AND A.PARTY_CODE=B.PARTY_CODE";
            
            try {
                if(!FromDate.equals("")) {
                    //Condition+=" AND A.INVOICE_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                    Condition+=" AND A.INVOICE_DATE>='"+FromDate+"' ";
                }
                
                if(!ToDate.equals("")) {
                    //Condition+=" AND A.INVOICE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                    Condition+=" AND A.INVOICE_DATE<='"+ToDate+"' ";
                }                
            }
            catch(Exception e) {
                e.printStackTrace();
            }
            
             ResultSet  rsTemp =data.getResult(str+Condition);
             if(rsTemp.getRow()>0) {
             while(!rsTemp.isAfterLast()){
                j++;
                TReportWriter.SimpleDataProvider.TRow objRow2=objData2.newRow();                 
                
                objRow2.setValue("PARTY_CODE",UtilFunctions.getString(rsTemp,"PARTY_CODE",""));
                objRow2.setValue("PARTYNAME",UtilFunctions.getString(rsTemp,"PARTYNAME",""));
                objRow2.setValue("STATION_CODE",UtilFunctions.getString(rsTemp,"STATION_CODE",""));
                objRow2.setValue("INVOICE_NO",UtilFunctions.getString(rsTemp,"INVOICE_NO",""));
                objRow2.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTemp,"INVOICE_DATE","")));
                objRow2.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
                //objRow.setValue("PIECE_NO",UtilFunctions.getString(rsTemp,"PIECE_NO",""));
                objRow2.setValue("PIECE_NO","");
                objRow2.setValue("BALE_NO",UtilFunctions.getString(rsTemp,"BALE_NO",""));
                objRow2.setValue("GATEPASS_NO",UtilFunctions.getString(rsTemp,"GATEPASS_NO",""));
                objRow2.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
                objRow2.setValue("PAYMENT_TERM_CODE",UtilFunctions.getString(rsTemp,"PAYMENT_TERM_CODE",""));
                objRow2.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                objRow2.setValue("COLUMN_6_AMT",UtilFunctions.getString(rsTemp,"COLUMN_6_AMT",""));
                objRow2.setValue("COLUMN_25_AMT",UtilFunctions.getString(rsTemp,"COLUMN_25_AMT",""));
                objRow2.setValue("COLUMN_24_AMT",UtilFunctions.getString(rsTemp,"COLUMN_24_AMT",""));
                objRow2.setValue("COLUMN_8_AMT",UtilFunctions.getString(rsTemp,"COLUMN_8_AMT",""));
                objRow2.setValue("COLUMN_9_AMT",UtilFunctions.getString(rsTemp,"COLUMN_9_AMT",""));
                objRow2.setValue("COLUMN_16_AMT",UtilFunctions.getString(rsTemp,"COLUMN_16_AMT",""));
                objRow2.setValue("TRD_DISCOUNT",UtilFunctions.getString(rsTemp,"TRD_DISCOUNT",""));
                objRow2.setValue("TOTAL_SQ_MTR",UtilFunctions.getString(rsTemp,"TOTAL_SQ_MTR",""));
                objRow2.setValue("COLUMN_12_AMT",UtilFunctions.getString(rsTemp,"COLUMN_12_AMT",""));
                objRow2.setValue("COLUMN_1_AMT",UtilFunctions.getString(rsTemp,"COLUMN_1_AMT",""));
                objRow2.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                objRow2.setValue("TOTAL_GROSS_QTY",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_QTY",""));
                objRow2.setValue("TOTAL_NET_QTY",UtilFunctions.getString(rsTemp,"TOTAL_NET_QTY",""));
                objRow2.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                objRow2.setValue("TOTAL_VALUE",UtilFunctions.getString(rsTemp,"TOTAL_VALUE",""));
                objRow2.setValue("NET_AMOUNT",UtilFunctions.getString(rsTemp,"NET_AMOUNT",""));
                objRow2.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                objRow2.setValue("VAT4",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT4",0)));
                objRow2.setValue("VAT1",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT1",0)));
                objRow2.setValue("CST2",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST2",0)));
                objRow2.setValue("CST5",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST5",0)));
                objRow2.setValue("COLUMN_13_AMT",UtilFunctions.getString(rsTemp,"COLUMN_13_AMT",""));
                
                objData2.AddRow(objRow2);                
                rsTemp.next();
            }
             } 
           HashMap parameter=new HashMap();
            parameter.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            parameter.put("FROM_DATE",EITLERPGLOBAL.formatDate(FromDate));
            parameter.put("TO_DATE",EITLERPGLOBAL.formatDate(ToDate));
            parameter.put("BOOK_CODE",BookCode);
            parameter.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode));
            parameter.put("TOTAL_INVOICE_NO",Integer.toString(j));
           // EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptsjv010.rpt",parameter,objData2);
            rsTemp.close();            
           
        }catch(SQLException e) {
            e.printStackTrace();
            
        }   
    }
    
    public void GenerateSJV012GST(String FromDate,String ToDate,String BookCode) {
      try{
              System.gc();
              java.lang.Runtime.getRuntime().gc();
              int j=0;
            String Condition="";
            TReportWriter.SimpleDataProvider.TTable objData2=new TReportWriter.SimpleDataProvider.TTable();
            objData2.AddColumn("PARTY_CODE");
            objData2.AddColumn("INVOICE_DATE");
            objData2.AddColumn("AGENT_SR_NO");
            objData2.AddColumn("PARTYNAME");            
            objData2.AddColumn("PIECE_NO");
            objData2.AddColumn("BALE_NO");      
            objData2.AddColumn("INVOICE_NO");
            objData2.AddColumn("GATEPASS_NO");
            objData2.AddColumn("PAYMENT_TERM_CODE");
            objData2.AddColumn("STATION_CODE");
            objData2.AddColumn("TOTAL_GROSS_AMOUNT");
            objData2.AddColumn("GROSS_WEIGHT");
            objData2.AddColumn("COLUMN_6_AMT");
            objData2.AddColumn("COLUMN_25_AMT");
            objData2.AddColumn("COLUMN_24_AMT");
            objData2.AddColumn("COLUMN_8_AMT");      
            objData2.AddColumn("COLUMN_9_AMT");
            objData2.AddColumn("COLUMN_16_AMT");
            objData2.AddColumn("TRD_DISCOUNT");
            objData2.AddColumn("TOTAL_SQ_MTR");
            objData2.AddColumn("COLUMN_12_AMT");
            objData2.AddColumn("COLUMN_1_AMT");            
            objData2.AddColumn("TOTAL_NET_AMOUNT");
            objData2.AddColumn("TOTAL_GROSS_QTY");
            objData2.AddColumn("TOTAL_NET_QTY");
            objData2.AddColumn("TOTAL_GROSS_AMOUNT");
            objData2.AddColumn("TOTAL_VALUE");
            objData2.AddColumn("NET_AMOUNT");
//            objData2.AddColumn("VAT4");
//            objData2.AddColumn("VAT1");
//            objData2.AddColumn("CST2");
//            objData2.AddColumn("CST5");
            objData2.AddColumn("COLUMN_13_AMT");
            objData.AddColumn("CGST_AMT");
            objData.AddColumn("SGST_AMT");
            objData.AddColumn("IGST_AMT");
            objData.AddColumn("CASH_DISC_AMT");
             
            //String str="SELECT A.*,SUBSTRING(B.PARTY_NAME,1,18) AS PARTYNAME FROM D_SAL_INVOICE_HEADER A,D_SAL_PARTY_MASTER B WHERE A.COMPANY_ID=2 AND A.INVOICE_TYPE=1 AND (TOTAL_NET_AMOUNT/TOTAL_GROSS_QTY)<80 AND A.CANCELLED=0 AND A.PARTY_CODE=B.PARTY_CODE";
            String str="SELECT A.*,SUBSTRING(B.PARTY_NAME,1,18) AS PARTYNAME FROM D_SAL_INVOICE_HEADER A,D_SAL_PARTY_MASTER B WHERE A.COMPANY_ID=2 AND A.INVOICE_TYPE=1 AND (TOTAL_NET_AMOUNT/TOTAL_GROSS_QTY)<40 AND A.CANCELLED=0 AND A.PARTY_CODE=B.PARTY_CODE";
            
            try {
                if(!FromDate.equals("")) {
                    //Condition+=" AND A.INVOICE_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                    Condition+=" AND A.INVOICE_DATE>='"+FromDate+"' ";
                }
                
                if(!ToDate.equals("")) {
                    //Condition+=" AND A.INVOICE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                    Condition+=" AND A.INVOICE_DATE<='"+ToDate+"' ";
                }                
            }
            catch(Exception e) {
                e.printStackTrace();
            }
            
             ResultSet  rsTemp =data.getResult(str+Condition);
             if(rsTemp.getRow()>0) {
             while(!rsTemp.isAfterLast()){
                j++;
                TReportWriter.SimpleDataProvider.TRow objRow2=objData2.newRow();                 
                
                objRow2.setValue("PARTY_CODE",UtilFunctions.getString(rsTemp,"PARTY_CODE",""));
                objRow2.setValue("PARTYNAME",UtilFunctions.getString(rsTemp,"PARTYNAME",""));
                objRow2.setValue("STATION_CODE",UtilFunctions.getString(rsTemp,"STATION_CODE",""));
                objRow2.setValue("INVOICE_NO",UtilFunctions.getString(rsTemp,"INVOICE_NO",""));
                objRow2.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTemp,"INVOICE_DATE","")));
                objRow2.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
                //objRow.setValue("PIECE_NO",UtilFunctions.getString(rsTemp,"PIECE_NO",""));
                objRow2.setValue("PIECE_NO","");
                objRow2.setValue("BALE_NO",UtilFunctions.getString(rsTemp,"BALE_NO",""));
                objRow2.setValue("GATEPASS_NO",UtilFunctions.getString(rsTemp,"GATEPASS_NO",""));
                objRow2.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
                objRow2.setValue("PAYMENT_TERM_CODE",UtilFunctions.getString(rsTemp,"PAYMENT_TERM_CODE",""));
                objRow2.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                objRow2.setValue("COLUMN_6_AMT",UtilFunctions.getString(rsTemp,"COLUMN_6_AMT",""));
                objRow2.setValue("COLUMN_25_AMT",UtilFunctions.getString(rsTemp,"COLUMN_25_AMT",""));
                objRow2.setValue("COLUMN_24_AMT",UtilFunctions.getString(rsTemp,"COLUMN_24_AMT",""));
                objRow2.setValue("COLUMN_8_AMT",UtilFunctions.getString(rsTemp,"COLUMN_8_AMT",""));
                objRow2.setValue("COLUMN_9_AMT",UtilFunctions.getString(rsTemp,"COLUMN_9_AMT",""));
                objRow2.setValue("COLUMN_16_AMT",UtilFunctions.getString(rsTemp,"COLUMN_16_AMT",""));
                objRow2.setValue("TRD_DISCOUNT",UtilFunctions.getString(rsTemp,"TRD_DISCOUNT",""));
                objRow2.setValue("TOTAL_SQ_MTR",UtilFunctions.getString(rsTemp,"TOTAL_SQ_MTR",""));
                objRow2.setValue("COLUMN_12_AMT",UtilFunctions.getString(rsTemp,"COLUMN_12_AMT",""));
                objRow2.setValue("COLUMN_1_AMT",UtilFunctions.getString(rsTemp,"COLUMN_1_AMT",""));
                objRow2.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                objRow2.setValue("TOTAL_GROSS_QTY",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_QTY",""));
                objRow2.setValue("TOTAL_NET_QTY",UtilFunctions.getString(rsTemp,"TOTAL_NET_QTY",""));
                objRow2.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                objRow2.setValue("TOTAL_VALUE",UtilFunctions.getString(rsTemp,"TOTAL_VALUE",""));
                objRow2.setValue("NET_AMOUNT",UtilFunctions.getString(rsTemp,"NET_AMOUNT",""));
                objRow2.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
//                objRow2.setValue("VAT4",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT4",0)));
//                objRow2.setValue("VAT1",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT1",0)));
//                objRow2.setValue("CST2",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST2",0)));
//                objRow2.setValue("CST5",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST5",0)));
                objRow2.setValue("COLUMN_13_AMT",UtilFunctions.getString(rsTemp,"COLUMN_13_AMT",""));
                objRow2.setValue("CGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"CGST_AMT",0)));
                objRow2.setValue("SGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"SGST_AMT",0)));
                objRow2.setValue("IGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"IGST_AMT",0)));
                 objRow2.setValue("CASH_DISC_AMT", dFormat.format(UtilFunctions.getDouble(rsTemp, "CASH_DISC_AMT", 0)));
                 
                objData2.AddRow(objRow2);                
                rsTemp.next();
            }
             } 
           HashMap parameter=new HashMap();
            parameter.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            parameter.put("FROM_DATE",EITLERPGLOBAL.formatDate(FromDate));
            parameter.put("TO_DATE",EITLERPGLOBAL.formatDate(ToDate));
            parameter.put("BOOK_CODE",BookCode);
            parameter.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode));
            parameter.put("TOTAL_INVOICE_NO",Integer.toString(j));
           // EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptsjv010GST.rpt",parameter,objData2);
            rsTemp.close();            
           
        }catch(SQLException e) {
            e.printStackTrace();
            
        }   
    }
    
    public void GenerateSJV01Summary(String FromDate,String ToDate,String BookCode) {
        ////SUMMARY
         try{
             System.gc();
             java.lang.Runtime.getRuntime().gc();
             int j=0;
             String Condition="";
             TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
             
             objData.AddColumn("INVOICE_TYPE");
             objData.AddColumn("INVOICE_NO");
             objData.AddColumn("TOTAL_GROSS_QTY");
             objData.AddColumn("TOTAL_NET_QTY");
             objData.AddColumn("TOTAL_GROSS_AMOUNT");
             objData.AddColumn("COLUMN_9_AMT");
             objData.AddColumn("COLUMN_16_AMT");
             objData.AddColumn("TOTAL_NET_AMOUNT");
             objData.AddColumn("COLUMN_1_AMT");
             objData.AddColumn("TOTAL_VALUE");
             objData.AddColumn("NET_AMOUNT");             
             objData.AddColumn("COLUMN_25_AMT");
             objData.AddColumn("COLUMN_24_AMT");             
             objData.AddColumn("COLUMN_8_AMT");
             objData.AddColumn("VAT4");
             objData.AddColumn("VAT1");
             objData.AddColumn("CST2");
             objData.AddColumn("CST5");
             objData.AddColumn("COLUMN_12_AMT");
             objData.AddColumn("TOTAL_SQ_MTR");
             objData.AddColumn("TRD_DISCOUNT");
             objData.AddColumn("COLUMN_13_AMT");
             
             
             String str="SELECT X.INVOICE_TYPE, INVOICE_NO ,TOTAL_GROSS_QTY,TOTAL_NET_QTY,TOTAL_GROSS_AMOUNT,COLUMN_9_AMT,COLUMN_16_AMT,TOTAL_NET_AMOUNT,COLUMN_1_AMT,TOTAL_VALUE, NET_AMOUNT,COLUMN_25_AMT,COLUMN_24_AMT,COLUMN_8_AMT,VAT4,VAT1,CST5,CST2,COLUMN_12_AMT,TOTAL_SQ_MTR,TRD_DISCOUNT,COLUMN_13_AMT FROM ";
                str+="(SELECT INVOICE_TYPE,'COMBO' AS INVOICE_NO ,SUM(A.TOTAL_GROSS_QTY) AS TOTAL_GROSS_QTY,SUM(A.TOTAL_NET_QTY) AS TOTAL_NET_QTY,SUM(A.TOTAL_GROSS_AMOUNT) AS TOTAL_GROSS_AMOUNT,SUM(A.COLUMN_9_AMT) AS COLUMN_9_AMT,SUM(A.COLUMN_16_AMT) AS COLUMN_16_AMT,SUM(A.TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,SUM(A.COLUMN_1_AMT) AS COLUMN_1_AMT,SUM(A.TOTAL_VALUE) AS TOTAL_VALUE,SUM(A.NET_AMOUNT) AS NET_AMOUNT,SUM(A.COLUMN_25_AMT) AS COLUMN_25_AMT,SUM(A.COLUMN_24_AMT) AS COLUMN_24_AMT,SUM(A.COLUMN_8_AMT) AS COLUMN_8_AMT,SUM(A.VAT4) AS VAT4,SUM(A.VAT1) AS VAT1,SUM(A.CST5) AS CST5,SUM(A.CST2) AS CST2,SUM(A.COLUMN_12_AMT) AS COLUMN_12_AMT,SUM(A.TOTAL_SQ_MTR) AS TOTAL_SQ_MTR,SUM(A.COLUMN_13_AMT) AS COLUMN_13_AMT  FROM D_SAL_INVOICE_HEADER A  WHERE A.COMPANY_ID=2 AND A.INVOICE_TYPE=1 AND A.INVOICE_DATE>='"+FromDate+"' AND A.INVOICE_DATE<='"+ToDate+"' AND A.WAREHOUSE_CODE=0 AND A.QUALITY_INDICATOR=0 AND A.CANCELLED=0 AND A.APPROVED=1 GROUP BY INVOICE_TYPE) AS X ";
                str+="LEFT JOIN (SELECT INVOICE_TYPE,SUM(TRD_DISCOUNT) AS TRD_DISCOUNT FROM D_SAL_INVOICE_DETAIL WHERE COMPANY_ID=2 AND INVOICE_TYPE=1 AND INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND WAREHOUSE_CODE=0 AND CANCELLED=0 GROUP BY INVOICE_TYPE) AS Y ON X.INVOICE_TYPE=Y.INVOICE_TYPE ";
                str+="UNION ALL ";
                str+="SELECT X.INVOICE_TYPE, INVOICE_NO ,TOTAL_GROSS_QTY,TOTAL_NET_QTY,TOTAL_GROSS_AMOUNT,COLUMN_9_AMT,COLUMN_16_AMT,TOTAL_NET_AMOUNT,COLUMN_1_AMT,TOTAL_VALUE, NET_AMOUNT,COLUMN_25_AMT,COLUMN_24_AMT,COLUMN_8_AMT,VAT4,VAT1,CST5,CST2,COLUMN_12_AMT,TOTAL_SQ_MTR,TRD_DISCOUNT,COLUMN_13_AMT FROM ";
                str+="(SELECT INVOICE_TYPE,'REGULAR' AS INVOICE_NO ,SUM(TOTAL_GROSS_QTY) AS TOTAL_GROSS_QTY,SUM(TOTAL_NET_QTY) AS TOTAL_NET_QTY,SUM(TOTAL_GROSS_AMOUNT) AS TOTAL_GROSS_AMOUNT,SUM(COLUMN_9_AMT) AS COLUMN_9_AMT,SUM(COLUMN_16_AMT) AS COLUMN_16_AMT,SUM(TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,SUM(COLUMN_1_AMT) AS COLUMN_1_AMT,SUM(TOTAL_VALUE) AS TOTAL_VALUE,SUM(NET_AMOUNT) AS NET_AMOUNT,SUM(COLUMN_25_AMT) AS COLUMN_25_AMT,SUM(COLUMN_24_AMT) AS COLUMN_24_AMT,SUM(COLUMN_8_AMT) AS COLUMN_8_AMT,SUM(VAT4) AS VAT4,SUM(VAT1) AS VAT1,SUM(CST5) AS CST5,SUM(CST2) AS CST2,SUM(COLUMN_12_AMT) AS COLUMN_12_AMT,SUM(TOTAL_SQ_MTR) AS TOTAL_SQ_MTR,SUM(A.COLUMN_13_AMT) AS COLUMN_13_AMT FROM D_SAL_INVOICE_HEADER A WHERE COMPANY_ID=2 AND INVOICE_TYPE=1 AND INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND WAREHOUSE_CODE IN (1,9)  AND QUALITY_INDICATOR IN (0,2,3,4) AND CANCELLED=0 AND APPROVED=1 AND (TOTAL_NET_AMOUNT/TOTAL_GROSS_QTY)>80 GROUP BY INVOICE_TYPE) AS X ";
                str+="LEFT JOIN (SELECT INVOICE_TYPE,SUM(TRD_DISCOUNT) AS TRD_DISCOUNT FROM D_SAL_INVOICE_DETAIL WHERE COMPANY_ID=2 AND INVOICE_TYPE=1 AND INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND WAREHOUSE_CODE IN (1,9) AND CANCELLED=0 GROUP BY INVOICE_TYPE) AS Y ON X.INVOICE_TYPE=Y.INVOICE_TYPE ";
                str+="UNION ALL ";
                str+="SELECT X.INVOICE_TYPE, INVOICE_NO ,TOTAL_GROSS_QTY,TOTAL_NET_QTY,TOTAL_GROSS_AMOUNT,COLUMN_9_AMT,COLUMN_16_AMT,TOTAL_NET_AMOUNT,COLUMN_1_AMT,TOTAL_VALUE, NET_AMOUNT,COLUMN_25_AMT,COLUMN_24_AMT,COLUMN_8_AMT,VAT4,VAT1,CST5,CST2,COLUMN_12_AMT,TOTAL_SQ_MTR,TRD_DISCOUNT,COLUMN_13_AMT FROM ";
                str+="(SELECT INVOICE_TYPE,'BLANKET' AS INVOICE_NO ,SUM(TOTAL_GROSS_QTY) AS TOTAL_GROSS_QTY,SUM(TOTAL_NET_QTY) AS TOTAL_NET_QTY,SUM(TOTAL_GROSS_AMOUNT) AS TOTAL_GROSS_AMOUNT,SUM(COLUMN_9_AMT) AS COLUMN_9_AMT,SUM(COLUMN_16_AMT) AS COLUMN_16_AMT,SUM(TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,SUM(COLUMN_1_AMT) AS COLUMN_1_AMT,SUM(TOTAL_VALUE) AS TOTAL_VALUE,SUM(NET_AMOUNT) AS NET_AMOUNT,SUM(COLUMN_25_AMT) AS COLUMN_25_AMT,SUM(COLUMN_24_AMT) AS COLUMN_24_AMT,SUM(COLUMN_8_AMT) AS COLUMN_8_AMT,SUM(VAT4) AS VAT4,SUM(VAT1) AS VAT1,SUM(CST5) AS CST5,SUM(CST2) AS CST2,SUM(COLUMN_12_AMT) AS COLUMN_12_AMT,SUM(TOTAL_SQ_MTR) AS TOTAL_SQ_MTR,SUM(A.COLUMN_13_AMT) AS COLUMN_13_AMT FROM D_SAL_INVOICE_HEADER A WHERE COMPANY_ID=2 AND INVOICE_TYPE=1 AND INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND WAREHOUSE_CODE IN (4)  AND CANCELLED=0 AND APPROVED=1 AND (TOTAL_NET_AMOUNT/TOTAL_GROSS_QTY)>80 GROUP BY INVOICE_TYPE) AS X ";
                str+="LEFT JOIN (SELECT INVOICE_TYPE,SUM(TRD_DISCOUNT) AS TRD_DISCOUNT FROM D_SAL_INVOICE_DETAIL WHERE COMPANY_ID=2 AND INVOICE_TYPE=1 AND INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND WAREHOUSE_CODE IN (4) AND CANCELLED=0 GROUP BY INVOICE_TYPE) AS Y ON X.INVOICE_TYPE=Y.INVOICE_TYPE ";
                str+="UNION ALL ";
                str+="SELECT X.INVOICE_TYPE, INVOICE_NO ,TOTAL_GROSS_QTY,TOTAL_NET_QTY,TOTAL_GROSS_AMOUNT,COLUMN_9_AMT,COLUMN_16_AMT,TOTAL_NET_AMOUNT,COLUMN_1_AMT,TOTAL_VALUE, NET_AMOUNT,COLUMN_25_AMT,COLUMN_24_AMT,COLUMN_8_AMT,VAT4,VAT1,CST5,CST2,COLUMN_12_AMT,TOTAL_SQ_MTR, COALESCE(TRD_DISCOUNT,0),COLUMN_13_AMT FROM ";
                str+="(SELECT INVOICE_TYPE,'FRC' AS INVOICE_NO ,SUM(TOTAL_GROSS_QTY) AS TOTAL_GROSS_QTY,SUM(TOTAL_NET_QTY) AS TOTAL_NET_QTY,SUM(TOTAL_GROSS_AMOUNT) AS TOTAL_GROSS_AMOUNT,SUM(COLUMN_9_AMT) AS COLUMN_9_AMT,SUM(COLUMN_16_AMT) AS COLUMN_16_AMT,SUM(TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,SUM(COLUMN_1_AMT) AS COLUMN_1_AMT,SUM(TOTAL_VALUE) AS TOTAL_VALUE,SUM(NET_AMOUNT) AS NET_AMOUNT,SUM(COLUMN_25_AMT) AS COLUMN_25_AMT,SUM(COLUMN_24_AMT) AS COLUMN_24_AMT,SUM(COLUMN_8_AMT) AS COLUMN_8_AMT,SUM(VAT4) AS VAT4,SUM(VAT1) AS VAT1,SUM(CST5) AS CST5,SUM(CST2) AS CST2,SUM(COLUMN_12_AMT) AS COLUMN_12_AMT,SUM(TOTAL_SQ_MTR) AS TOTAL_SQ_MTR,SUM(A.COLUMN_13_AMT) AS COLUMN_13_AMT FROM D_SAL_INVOICE_HEADER A WHERE COMPANY_ID=2 AND INVOICE_TYPE=1 AND INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND (TOTAL_NET_AMOUNT/TOTAL_GROSS_QTY)<80 AND CANCELLED=0 AND APPROVED=1 GROUP BY INVOICE_TYPE) AS X ";
                str+="LEFT JOIN (SELECT INVOICE_TYPE,SUM(TRD_DISCOUNT) AS TRD_DISCOUNT FROM D_SAL_INVOICE_DETAIL WHERE COMPANY_ID=2 AND INVOICE_TYPE=1 AND INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND CANCELLED=0 AND (NET_AMOUNT/GROSS_QTY)< 80 GROUP BY INVOICE_TYPE) AS Y ON X.INVOICE_TYPE=Y.INVOICE_TYPE ";
             
             ResultSet  rsTemp =data.getResult(str);
             if(rsTemp.getRow()>0) {
             while(!rsTemp.isAfterLast()){
                 j++;
                 TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                 
                 objRow.setValue("INVOICE_TYPE",UtilFunctions.getString(rsTemp,"INVOICE_TYPE",""));                                  
                 objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsTemp,"INVOICE_NO",""));                 
                 //objRow.setValue("TOTAL_GROSS_QTY",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_QTY",""));                 
                 objRow.setValue("COLUMN_25_AMT",UtilFunctions.getString(rsTemp,"COLUMN_25_AMT",""));
                 objRow.setValue("COLUMN_24_AMT",UtilFunctions.getString(rsTemp,"COLUMN_24_AMT",""));
                 objRow.setValue("COLUMN_8_AMT",UtilFunctions.getString(rsTemp,"COLUMN_8_AMT",""));
                 objRow.setValue("COLUMN_9_AMT",UtilFunctions.getString(rsTemp,"COLUMN_9_AMT",""));
                 objRow.setValue("COLUMN_16_AMT",UtilFunctions.getString(rsTemp,"COLUMN_16_AMT",""));
                 objRow.setValue("TRD_DISCOUNT",UtilFunctions.getString(rsTemp,"TRD_DISCOUNT",""));
                 objRow.setValue("TOTAL_SQ_MTR",UtilFunctions.getString(rsTemp,"TOTAL_SQ_MTR",""));
                 objRow.setValue("COLUMN_12_AMT",UtilFunctions.getString(rsTemp,"COLUMN_12_AMT",""));
                 objRow.setValue("COLUMN_1_AMT",UtilFunctions.getString(rsTemp,"COLUMN_1_AMT",""));
                 objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                 objRow.setValue("TOTAL_GROSS_QTY",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_QTY",""));
                 objRow.setValue("TOTAL_NET_QTY",UtilFunctions.getString(rsTemp,"TOTAL_NET_QTY",""));
                 objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                 objRow.setValue("TOTAL_VALUE",UtilFunctions.getString(rsTemp,"TOTAL_VALUE",""));
                 objRow.setValue("NET_AMOUNT",UtilFunctions.getString(rsTemp,"NET_AMOUNT",""));
                 objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                 objRow.setValue("VAT4",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT4",0)));
                 objRow.setValue("VAT1",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT1",0)));
                 objRow.setValue("CST2",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST2",0)));
                 objRow.setValue("CST5",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST5",0)));                 
                 objRow.setValue("COLUMN_13_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"COLUMN_13_AMT",0)));                 
                 //objRow.setValue("COLUMN_13_AMT",UtilFunctions.getString(rsTemp,"COLUMN_13_AMT",""));
                 objData.AddRow(objRow);                 
                 rsTemp.next();
             }
             }
             HashMap parameter=new HashMap();
             parameter.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
             parameter.put("FROM_DATE",EITLERPGLOBAL.formatDate(FromDate));
             parameter.put("TO_DATE",EITLERPGLOBAL.formatDate(ToDate));
             parameter.put("BOOK_CODE",BookCode);
             parameter.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode)+" SUMMARY");             
             // EITLERPGLOBAL.PAGE_BREAK=true;
             new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptsjv010Summary.rpt",parameter,objData);
             rsTemp.close();
             
         }catch(SQLException e) {
             e.printStackTrace();             
          } 
    }
    
    public void GenerateSJV01SummaryGST(String FromDate,String ToDate,String BookCode) {
        ////SUMMARY
         try{
             System.gc();
             java.lang.Runtime.getRuntime().gc();
             int j=0;
             String Condition="";
             TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
             
             objData.AddColumn("INVOICE_TYPE");
             objData.AddColumn("INVOICE_NO");
             objData.AddColumn("TOTAL_GROSS_QTY");
             objData.AddColumn("TOTAL_NET_QTY");
             objData.AddColumn("TOTAL_GROSS_AMOUNT");
             objData.AddColumn("COLUMN_9_AMT");
             objData.AddColumn("COLUMN_16_AMT");
             objData.AddColumn("TOTAL_NET_AMOUNT");
             objData.AddColumn("COLUMN_1_AMT");
             objData.AddColumn("TOTAL_VALUE");
             objData.AddColumn("NET_AMOUNT");             
             objData.AddColumn("COLUMN_25_AMT");
             objData.AddColumn("COLUMN_24_AMT");             
             objData.AddColumn("COLUMN_8_AMT");
//             objData.AddColumn("VAT4");
//             objData.AddColumn("VAT1");
//             objData.AddColumn("CST2");
//             objData.AddColumn("CST5");
             objData.AddColumn("COLUMN_12_AMT");
             objData.AddColumn("TOTAL_SQ_MTR");
             objData.AddColumn("TRD_DISCOUNT");
             objData.AddColumn("COLUMN_13_AMT");
             objData.AddColumn("CGST_AMT");
             objData.AddColumn("SGST_AMT");
             objData.AddColumn("IGST_AMT");
             objData.AddColumn("CASH_DISC_AMT");
             
             /*
             String str="SELECT X.INVOICE_TYPE, INVOICE_NO ,TOTAL_GROSS_QTY,TOTAL_NET_QTY,TOTAL_GROSS_AMOUNT,COLUMN_9_AMT,COLUMN_16_AMT,TOTAL_NET_AMOUNT,COLUMN_1_AMT,TOTAL_VALUE, NET_AMOUNT,COLUMN_25_AMT,COLUMN_24_AMT,COLUMN_8_AMT,CGST_AMT,SGST_AMT,IGST_AMT,COLUMN_12_AMT,TOTAL_SQ_MTR,TRD_DISCOUNT,COLUMN_13_AMT,CASH_DISC_AMT FROM ";
                str+="(SELECT INVOICE_TYPE,'COMBO' AS INVOICE_NO ,SUM(A.TOTAL_GROSS_QTY) AS TOTAL_GROSS_QTY,SUM(A.TOTAL_NET_QTY) AS TOTAL_NET_QTY,SUM(A.TOTAL_GROSS_AMOUNT) AS TOTAL_GROSS_AMOUNT,SUM(A.COLUMN_9_AMT) AS COLUMN_9_AMT,SUM(A.COLUMN_16_AMT) AS COLUMN_16_AMT,SUM(A.TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,SUM(A.COLUMN_1_AMT) AS COLUMN_1_AMT,SUM(A.TOTAL_VALUE) AS TOTAL_VALUE,SUM(A.NET_AMOUNT) AS NET_AMOUNT,SUM(A.COLUMN_25_AMT) AS COLUMN_25_AMT,SUM(A.COLUMN_24_AMT) AS COLUMN_24_AMT,SUM(A.COLUMN_8_AMT) AS COLUMN_8_AMT,SUM(A.CGST_AMT) AS CGST_AMT,SUM(A.SGST_AMT) AS SGST_AMT,SUM(A.IGST_AMT) AS IGST_AMT,SUM(A.COLUMN_12_AMT) AS COLUMN_12_AMT,SUM(A.TOTAL_SQ_MTR) AS TOTAL_SQ_MTR,SUM(A.COLUMN_13_AMT) AS COLUMN_13_AMT,SUM(A.CASH_DISC_AMT) AS CASH_DISC_AMT  FROM D_SAL_INVOICE_HEADER A  WHERE A.COMPANY_ID=2 AND A.INVOICE_TYPE=1 AND A.INVOICE_DATE>='"+FromDate+"' AND A.INVOICE_DATE<='"+ToDate+"' AND A.WAREHOUSE_CODE=0 AND A.QUALITY_INDICATOR=0 AND A.CANCELLED=0 AND A.APPROVED=1 GROUP BY INVOICE_TYPE) AS X ";
                str+="LEFT JOIN (SELECT INVOICE_TYPE,SUM(TRD_DISCOUNT) AS TRD_DISCOUNT FROM D_SAL_INVOICE_DETAIL WHERE COMPANY_ID=2 AND INVOICE_TYPE=1 AND INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND WAREHOUSE_CODE=0 AND CANCELLED=0 GROUP BY INVOICE_TYPE) AS Y ON X.INVOICE_TYPE=Y.INVOICE_TYPE ";
                str+="UNION ALL ";
                str+="SELECT X.INVOICE_TYPE, INVOICE_NO ,TOTAL_GROSS_QTY,TOTAL_NET_QTY,TOTAL_GROSS_AMOUNT,COLUMN_9_AMT,COLUMN_16_AMT,TOTAL_NET_AMOUNT,COLUMN_1_AMT,TOTAL_VALUE, NET_AMOUNT,COLUMN_25_AMT,COLUMN_24_AMT,COLUMN_8_AMT,CGST_AMT,SGST_AMT,IGST_AMT,COLUMN_12_AMT,TOTAL_SQ_MTR,TRD_DISCOUNT,COLUMN_13_AMT,CASH_DISC_AMT FROM ";
                str+="(SELECT INVOICE_TYPE,'REGULAR' AS INVOICE_NO ,SUM(TOTAL_GROSS_QTY) AS TOTAL_GROSS_QTY,SUM(TOTAL_NET_QTY) AS TOTAL_NET_QTY,SUM(TOTAL_GROSS_AMOUNT) AS TOTAL_GROSS_AMOUNT,SUM(COLUMN_9_AMT) AS COLUMN_9_AMT,SUM(COLUMN_16_AMT) AS COLUMN_16_AMT,SUM(TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,SUM(COLUMN_1_AMT) AS COLUMN_1_AMT,SUM(TOTAL_VALUE) AS TOTAL_VALUE,SUM(NET_AMOUNT) AS NET_AMOUNT,SUM(COLUMN_25_AMT) AS COLUMN_25_AMT,SUM(COLUMN_24_AMT) AS COLUMN_24_AMT,SUM(COLUMN_8_AMT) AS COLUMN_8_AMT,SUM(A.CGST_AMT) AS CGST_AMT,SUM(A.SGST_AMT) AS SGST_AMT,SUM(A.IGST_AMT) AS IGST_AMT,SUM(COLUMN_12_AMT) AS COLUMN_12_AMT,SUM(TOTAL_SQ_MTR) AS TOTAL_SQ_MTR,SUM(A.COLUMN_13_AMT) AS COLUMN_13_AMT,SUM(A.CASH_DISC_AMT) AS CASH_DISC_AMT FROM D_SAL_INVOICE_HEADER A WHERE COMPANY_ID=2 AND INVOICE_TYPE=1 AND INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND WAREHOUSE_CODE IN (1,9)  AND QUALITY_INDICATOR IN (0,2,3,4) AND CANCELLED=0 AND APPROVED=1 AND (TOTAL_NET_AMOUNT/TOTAL_GROSS_QTY)>80 GROUP BY INVOICE_TYPE) AS X ";
                str+="LEFT JOIN (SELECT INVOICE_TYPE,SUM(TRD_DISCOUNT) AS TRD_DISCOUNT FROM D_SAL_INVOICE_DETAIL WHERE COMPANY_ID=2 AND INVOICE_TYPE=1 AND INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND WAREHOUSE_CODE IN (1,9) AND CANCELLED=0 GROUP BY INVOICE_TYPE) AS Y ON X.INVOICE_TYPE=Y.INVOICE_TYPE ";
                str+="UNION ALL ";
                str+="SELECT X.INVOICE_TYPE, INVOICE_NO ,TOTAL_GROSS_QTY,TOTAL_NET_QTY,TOTAL_GROSS_AMOUNT,COLUMN_9_AMT,COLUMN_16_AMT,TOTAL_NET_AMOUNT,COLUMN_1_AMT,TOTAL_VALUE, NET_AMOUNT,COLUMN_25_AMT,COLUMN_24_AMT,COLUMN_8_AMT,CGST_AMT,SGST_AMT,IGST_AMT,COLUMN_12_AMT,TOTAL_SQ_MTR,TRD_DISCOUNT,COLUMN_13_AMT,CASH_DISC_AMT FROM ";
                str+="(SELECT INVOICE_TYPE,'BLANKET' AS INVOICE_NO ,SUM(TOTAL_GROSS_QTY) AS TOTAL_GROSS_QTY,SUM(TOTAL_NET_QTY) AS TOTAL_NET_QTY,SUM(TOTAL_GROSS_AMOUNT) AS TOTAL_GROSS_AMOUNT,SUM(COLUMN_9_AMT) AS COLUMN_9_AMT,SUM(COLUMN_16_AMT) AS COLUMN_16_AMT,SUM(TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,SUM(COLUMN_1_AMT) AS COLUMN_1_AMT,SUM(TOTAL_VALUE) AS TOTAL_VALUE,SUM(NET_AMOUNT) AS NET_AMOUNT,SUM(COLUMN_25_AMT) AS COLUMN_25_AMT,SUM(COLUMN_24_AMT) AS COLUMN_24_AMT,SUM(COLUMN_8_AMT) AS COLUMN_8_AMT,SUM(A.CGST_AMT) AS CGST_AMT,SUM(A.SGST_AMT) AS SGST_AMT,SUM(A.IGST_AMT) AS IGST_AMT,SUM(COLUMN_12_AMT) AS COLUMN_12_AMT,SUM(TOTAL_SQ_MTR) AS TOTAL_SQ_MTR,SUM(A.COLUMN_13_AMT) AS COLUMN_13_AMT,SUM(A.CASH_DISC_AMT) AS CASH_DISC_AMT FROM D_SAL_INVOICE_HEADER A WHERE COMPANY_ID=2 AND INVOICE_TYPE=1 AND INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND WAREHOUSE_CODE IN (4)  AND CANCELLED=0 AND APPROVED=1 AND (TOTAL_NET_AMOUNT/TOTAL_GROSS_QTY)>80 GROUP BY INVOICE_TYPE) AS X ";
                str+="LEFT JOIN (SELECT INVOICE_TYPE,SUM(TRD_DISCOUNT) AS TRD_DISCOUNT FROM D_SAL_INVOICE_DETAIL WHERE COMPANY_ID=2 AND INVOICE_TYPE=1 AND INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND WAREHOUSE_CODE IN (4) AND CANCELLED=0 GROUP BY INVOICE_TYPE) AS Y ON X.INVOICE_TYPE=Y.INVOICE_TYPE ";
                str+="UNION ALL ";
                str+="SELECT X.INVOICE_TYPE, INVOICE_NO ,TOTAL_GROSS_QTY,TOTAL_NET_QTY,TOTAL_GROSS_AMOUNT,COLUMN_9_AMT,COLUMN_16_AMT,TOTAL_NET_AMOUNT,COLUMN_1_AMT,TOTAL_VALUE, NET_AMOUNT,COLUMN_25_AMT,COLUMN_24_AMT,COLUMN_8_AMT,CGST_AMT,SGST_AMT,IGST_AMT,COLUMN_12_AMT,TOTAL_SQ_MTR, COALESCE(TRD_DISCOUNT,0),COLUMN_13_AMT,CASH_DISC_AMT FROM ";
                str+="(SELECT INVOICE_TYPE,'FRC' AS INVOICE_NO ,SUM(TOTAL_GROSS_QTY) AS TOTAL_GROSS_QTY,SUM(TOTAL_NET_QTY) AS TOTAL_NET_QTY,SUM(TOTAL_GROSS_AMOUNT) AS TOTAL_GROSS_AMOUNT,SUM(COLUMN_9_AMT) AS COLUMN_9_AMT,SUM(COLUMN_16_AMT) AS COLUMN_16_AMT,SUM(TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,SUM(COLUMN_1_AMT) AS COLUMN_1_AMT,SUM(TOTAL_VALUE) AS TOTAL_VALUE,SUM(NET_AMOUNT) AS NET_AMOUNT,SUM(COLUMN_25_AMT) AS COLUMN_25_AMT,SUM(COLUMN_24_AMT) AS COLUMN_24_AMT,SUM(COLUMN_8_AMT) AS COLUMN_8_AMT,SUM(A.CGST_AMT) AS CGST_AMT,SUM(A.SGST_AMT) AS SGST_AMT,SUM(A.IGST_AMT) AS IGST_AMT,SUM(COLUMN_12_AMT) AS COLUMN_12_AMT,SUM(TOTAL_SQ_MTR) AS TOTAL_SQ_MTR,SUM(A.COLUMN_13_AMT) AS COLUMN_13_AMT,SUM(A.CASH_DISC_AMT) AS CASH_DISC_AMT FROM D_SAL_INVOICE_HEADER A WHERE COMPANY_ID=2 AND INVOICE_TYPE=1 AND INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND (TOTAL_NET_AMOUNT/TOTAL_GROSS_QTY)<80 AND CANCELLED=0 AND APPROVED=1 GROUP BY INVOICE_TYPE) AS X ";
                str+="LEFT JOIN (SELECT INVOICE_TYPE,SUM(TRD_DISCOUNT) AS TRD_DISCOUNT FROM D_SAL_INVOICE_DETAIL WHERE COMPANY_ID=2 AND INVOICE_TYPE=1 AND INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND CANCELLED=0 AND (NET_AMOUNT/GROSS_QTY)< 80 GROUP BY INVOICE_TYPE) AS Y ON X.INVOICE_TYPE=Y.INVOICE_TYPE ";
             */
                
                String str="SELECT X.INVOICE_TYPE, INVOICE_NO ,TOTAL_GROSS_QTY,TOTAL_NET_QTY,TOTAL_GROSS_AMOUNT,COLUMN_9_AMT,COLUMN_16_AMT,TOTAL_NET_AMOUNT,COLUMN_1_AMT,TOTAL_VALUE, NET_AMOUNT,COLUMN_25_AMT,COLUMN_24_AMT,COLUMN_8_AMT,CGST_AMT,SGST_AMT,IGST_AMT,COLUMN_12_AMT,TOTAL_SQ_MTR,TRD_DISCOUNT,COLUMN_13_AMT,CASH_DISC_AMT FROM ";
                str+="(SELECT INVOICE_TYPE,'COMBO' AS INVOICE_NO ,SUM(A.TOTAL_GROSS_QTY) AS TOTAL_GROSS_QTY,SUM(A.TOTAL_NET_QTY) AS TOTAL_NET_QTY,SUM(A.TOTAL_GROSS_AMOUNT) AS TOTAL_GROSS_AMOUNT,SUM(A.COLUMN_9_AMT) AS COLUMN_9_AMT,SUM(A.COLUMN_16_AMT) AS COLUMN_16_AMT,SUM(A.TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,SUM(A.COLUMN_1_AMT) AS COLUMN_1_AMT,SUM(A.TOTAL_VALUE) AS TOTAL_VALUE,SUM(A.NET_AMOUNT) AS NET_AMOUNT,SUM(A.COLUMN_25_AMT) AS COLUMN_25_AMT,SUM(A.COLUMN_24_AMT) AS COLUMN_24_AMT,SUM(A.COLUMN_8_AMT) AS COLUMN_8_AMT,SUM(A.CGST_AMT) AS CGST_AMT,SUM(A.SGST_AMT) AS SGST_AMT,SUM(A.IGST_AMT) AS IGST_AMT,SUM(A.COLUMN_12_AMT) AS COLUMN_12_AMT,SUM(A.TOTAL_SQ_MTR) AS TOTAL_SQ_MTR,SUM(A.COLUMN_13_AMT) AS COLUMN_13_AMT,SUM(A.CASH_DISC_AMT) AS CASH_DISC_AMT  FROM D_SAL_INVOICE_HEADER A  WHERE A.COMPANY_ID=2 AND A.INVOICE_TYPE=1 AND A.INVOICE_DATE>='"+FromDate+"' AND A.INVOICE_DATE<='"+ToDate+"' AND A.WAREHOUSE_CODE=0 AND A.QUALITY_INDICATOR=0 AND A.CANCELLED=0 AND A.APPROVED=1 GROUP BY INVOICE_TYPE) AS X ";
                str+="LEFT JOIN (SELECT INVOICE_TYPE,SUM(TRD_DISCOUNT) AS TRD_DISCOUNT FROM D_SAL_INVOICE_DETAIL WHERE COMPANY_ID=2 AND INVOICE_TYPE=1 AND INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND WAREHOUSE_CODE=0 AND CANCELLED=0 GROUP BY INVOICE_TYPE) AS Y ON X.INVOICE_TYPE=Y.INVOICE_TYPE ";
                str+="UNION ALL ";
                str+="SELECT X.INVOICE_TYPE, INVOICE_NO ,TOTAL_GROSS_QTY,TOTAL_NET_QTY,TOTAL_GROSS_AMOUNT,COLUMN_9_AMT,COLUMN_16_AMT,TOTAL_NET_AMOUNT,COLUMN_1_AMT,TOTAL_VALUE, NET_AMOUNT,COLUMN_25_AMT,COLUMN_24_AMT,COLUMN_8_AMT,CGST_AMT,SGST_AMT,IGST_AMT,COLUMN_12_AMT,TOTAL_SQ_MTR,TRD_DISCOUNT,COLUMN_13_AMT,CASH_DISC_AMT FROM ";
                str+="(SELECT INVOICE_TYPE,'REGULAR' AS INVOICE_NO ,SUM(TOTAL_GROSS_QTY) AS TOTAL_GROSS_QTY,SUM(TOTAL_NET_QTY) AS TOTAL_NET_QTY,SUM(TOTAL_GROSS_AMOUNT) AS TOTAL_GROSS_AMOUNT,SUM(COLUMN_9_AMT) AS COLUMN_9_AMT,SUM(COLUMN_16_AMT) AS COLUMN_16_AMT,SUM(TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,SUM(COLUMN_1_AMT) AS COLUMN_1_AMT,SUM(TOTAL_VALUE) AS TOTAL_VALUE,SUM(NET_AMOUNT) AS NET_AMOUNT,SUM(COLUMN_25_AMT) AS COLUMN_25_AMT,SUM(COLUMN_24_AMT) AS COLUMN_24_AMT,SUM(COLUMN_8_AMT) AS COLUMN_8_AMT,SUM(A.CGST_AMT) AS CGST_AMT,SUM(A.SGST_AMT) AS SGST_AMT,SUM(A.IGST_AMT) AS IGST_AMT,SUM(COLUMN_12_AMT) AS COLUMN_12_AMT,SUM(TOTAL_SQ_MTR) AS TOTAL_SQ_MTR,SUM(A.COLUMN_13_AMT) AS COLUMN_13_AMT,SUM(A.CASH_DISC_AMT) AS CASH_DISC_AMT FROM D_SAL_INVOICE_HEADER A WHERE COMPANY_ID=2 AND INVOICE_TYPE=1 AND INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND WAREHOUSE_CODE IN (1,9)  AND QUALITY_INDICATOR IN (0,2,3,4) AND CANCELLED=0 AND APPROVED=1 AND (TOTAL_NET_AMOUNT/TOTAL_GROSS_QTY)>40 GROUP BY INVOICE_TYPE) AS X ";
                str+="LEFT JOIN (SELECT INVOICE_TYPE,SUM(TRD_DISCOUNT) AS TRD_DISCOUNT FROM D_SAL_INVOICE_DETAIL WHERE COMPANY_ID=2 AND INVOICE_TYPE=1 AND INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND WAREHOUSE_CODE IN (1,9) AND CANCELLED=0 GROUP BY INVOICE_TYPE) AS Y ON X.INVOICE_TYPE=Y.INVOICE_TYPE ";
                str+="UNION ALL ";
                str+="SELECT X.INVOICE_TYPE, INVOICE_NO ,TOTAL_GROSS_QTY,TOTAL_NET_QTY,TOTAL_GROSS_AMOUNT,COLUMN_9_AMT,COLUMN_16_AMT,TOTAL_NET_AMOUNT,COLUMN_1_AMT,TOTAL_VALUE, NET_AMOUNT,COLUMN_25_AMT,COLUMN_24_AMT,COLUMN_8_AMT,CGST_AMT,SGST_AMT,IGST_AMT,COLUMN_12_AMT,TOTAL_SQ_MTR,TRD_DISCOUNT,COLUMN_13_AMT,CASH_DISC_AMT FROM ";
                str+="(SELECT INVOICE_TYPE,'BLANKET' AS INVOICE_NO ,SUM(TOTAL_GROSS_QTY) AS TOTAL_GROSS_QTY,SUM(TOTAL_NET_QTY) AS TOTAL_NET_QTY,SUM(TOTAL_GROSS_AMOUNT) AS TOTAL_GROSS_AMOUNT,SUM(COLUMN_9_AMT) AS COLUMN_9_AMT,SUM(COLUMN_16_AMT) AS COLUMN_16_AMT,SUM(TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,SUM(COLUMN_1_AMT) AS COLUMN_1_AMT,SUM(TOTAL_VALUE) AS TOTAL_VALUE,SUM(NET_AMOUNT) AS NET_AMOUNT,SUM(COLUMN_25_AMT) AS COLUMN_25_AMT,SUM(COLUMN_24_AMT) AS COLUMN_24_AMT,SUM(COLUMN_8_AMT) AS COLUMN_8_AMT,SUM(A.CGST_AMT) AS CGST_AMT,SUM(A.SGST_AMT) AS SGST_AMT,SUM(A.IGST_AMT) AS IGST_AMT,SUM(COLUMN_12_AMT) AS COLUMN_12_AMT,SUM(TOTAL_SQ_MTR) AS TOTAL_SQ_MTR,SUM(A.COLUMN_13_AMT) AS COLUMN_13_AMT,SUM(A.CASH_DISC_AMT) AS CASH_DISC_AMT FROM D_SAL_INVOICE_HEADER A WHERE COMPANY_ID=2 AND INVOICE_TYPE=1 AND INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND WAREHOUSE_CODE IN (4)  AND CANCELLED=0 AND APPROVED=1 AND (TOTAL_NET_AMOUNT/TOTAL_GROSS_QTY)>40 GROUP BY INVOICE_TYPE) AS X ";
                str+="LEFT JOIN (SELECT INVOICE_TYPE,SUM(TRD_DISCOUNT) AS TRD_DISCOUNT FROM D_SAL_INVOICE_DETAIL WHERE COMPANY_ID=2 AND INVOICE_TYPE=1 AND INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND WAREHOUSE_CODE IN (4) AND CANCELLED=0 GROUP BY INVOICE_TYPE) AS Y ON X.INVOICE_TYPE=Y.INVOICE_TYPE ";
                str+="UNION ALL ";
                str+="SELECT X.INVOICE_TYPE, INVOICE_NO ,TOTAL_GROSS_QTY,TOTAL_NET_QTY,TOTAL_GROSS_AMOUNT,COLUMN_9_AMT,COLUMN_16_AMT,TOTAL_NET_AMOUNT,COLUMN_1_AMT,TOTAL_VALUE, NET_AMOUNT,COLUMN_25_AMT,COLUMN_24_AMT,COLUMN_8_AMT,CGST_AMT,SGST_AMT,IGST_AMT,COLUMN_12_AMT,TOTAL_SQ_MTR, COALESCE(TRD_DISCOUNT,0),COLUMN_13_AMT,CASH_DISC_AMT FROM ";
                str+="(SELECT INVOICE_TYPE,'FRC' AS INVOICE_NO ,SUM(TOTAL_GROSS_QTY) AS TOTAL_GROSS_QTY,SUM(TOTAL_NET_QTY) AS TOTAL_NET_QTY,SUM(TOTAL_GROSS_AMOUNT) AS TOTAL_GROSS_AMOUNT,SUM(COLUMN_9_AMT) AS COLUMN_9_AMT,SUM(COLUMN_16_AMT) AS COLUMN_16_AMT,SUM(TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,SUM(COLUMN_1_AMT) AS COLUMN_1_AMT,SUM(TOTAL_VALUE) AS TOTAL_VALUE,SUM(NET_AMOUNT) AS NET_AMOUNT,SUM(COLUMN_25_AMT) AS COLUMN_25_AMT,SUM(COLUMN_24_AMT) AS COLUMN_24_AMT,SUM(COLUMN_8_AMT) AS COLUMN_8_AMT,SUM(A.CGST_AMT) AS CGST_AMT,SUM(A.SGST_AMT) AS SGST_AMT,SUM(A.IGST_AMT) AS IGST_AMT,SUM(COLUMN_12_AMT) AS COLUMN_12_AMT,SUM(TOTAL_SQ_MTR) AS TOTAL_SQ_MTR,SUM(A.COLUMN_13_AMT) AS COLUMN_13_AMT,SUM(A.CASH_DISC_AMT) AS CASH_DISC_AMT FROM D_SAL_INVOICE_HEADER A WHERE COMPANY_ID=2 AND INVOICE_TYPE=1 AND INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND (TOTAL_NET_AMOUNT/TOTAL_GROSS_QTY)<40 AND CANCELLED=0 AND APPROVED=1 GROUP BY INVOICE_TYPE) AS X ";
                str+="LEFT JOIN (SELECT INVOICE_TYPE,SUM(TRD_DISCOUNT) AS TRD_DISCOUNT FROM D_SAL_INVOICE_DETAIL WHERE COMPANY_ID=2 AND INVOICE_TYPE=1 AND INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND CANCELLED=0 AND (NET_AMOUNT/GROSS_QTY)< 60 GROUP BY INVOICE_TYPE) AS Y ON X.INVOICE_TYPE=Y.INVOICE_TYPE ";
             
             ResultSet  rsTemp =data.getResult(str);
             if(rsTemp.getRow()>0) {
             while(!rsTemp.isAfterLast()){
                 j++;
                 TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                 
                 objRow.setValue("INVOICE_TYPE",UtilFunctions.getString(rsTemp,"INVOICE_TYPE",""));                                  
                 objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsTemp,"INVOICE_NO",""));                 
                 //objRow.setValue("TOTAL_GROSS_QTY",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_QTY",""));                 
                 objRow.setValue("COLUMN_25_AMT",UtilFunctions.getString(rsTemp,"COLUMN_25_AMT",""));
                 objRow.setValue("COLUMN_24_AMT",UtilFunctions.getString(rsTemp,"COLUMN_24_AMT",""));
                 objRow.setValue("COLUMN_8_AMT",UtilFunctions.getString(rsTemp,"COLUMN_8_AMT",""));
                 objRow.setValue("COLUMN_9_AMT",UtilFunctions.getString(rsTemp,"COLUMN_9_AMT",""));
                 objRow.setValue("COLUMN_16_AMT",UtilFunctions.getString(rsTemp,"COLUMN_16_AMT",""));
                 objRow.setValue("TRD_DISCOUNT",UtilFunctions.getString(rsTemp,"TRD_DISCOUNT",""));
                 objRow.setValue("TOTAL_SQ_MTR",UtilFunctions.getString(rsTemp,"TOTAL_SQ_MTR",""));
                 objRow.setValue("COLUMN_12_AMT",UtilFunctions.getString(rsTemp,"COLUMN_12_AMT",""));
                 objRow.setValue("COLUMN_1_AMT",UtilFunctions.getString(rsTemp,"COLUMN_1_AMT",""));
                 objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                 objRow.setValue("TOTAL_GROSS_QTY",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_QTY",""));
                 objRow.setValue("TOTAL_NET_QTY",UtilFunctions.getString(rsTemp,"TOTAL_NET_QTY",""));
                 objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                 objRow.setValue("TOTAL_VALUE",UtilFunctions.getString(rsTemp,"TOTAL_VALUE",""));
                 objRow.setValue("NET_AMOUNT",UtilFunctions.getString(rsTemp,"NET_AMOUNT",""));
                 objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
//                 objRow.setValue("VAT4",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT4",0)));
//                 objRow.setValue("VAT1",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT1",0)));
//                 objRow.setValue("CST2",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST2",0)));
//                 objRow.setValue("CST5",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST5",0)));                 
                 objRow.setValue("COLUMN_13_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"COLUMN_13_AMT",0)));                 
                 objRow.setValue("CGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"CGST_AMT",0)));
                 objRow.setValue("SGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"SGST_AMT",0)));
                 objRow.setValue("IGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"IGST_AMT",0)));
                 objRow.setValue("CASH_DISC_AMT", dFormat.format(UtilFunctions.getDouble(rsTemp, "CASH_DISC_AMT", 0)));
                 //objRow.setValue("COLUMN_13_AMT",UtilFunctions.getString(rsTemp,"COLUMN_13_AMT",""));
                 objData.AddRow(objRow);                 
                 rsTemp.next();
             }
             }
             HashMap parameter=new HashMap();
             parameter.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
             parameter.put("FROM_DATE",EITLERPGLOBAL.formatDate(FromDate));
             parameter.put("TO_DATE",EITLERPGLOBAL.formatDate(ToDate));
             parameter.put("BOOK_CODE",BookCode);
             parameter.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode)+" SUMMARY");             
             // EITLERPGLOBAL.PAGE_BREAK=true;
             new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptsjv010SummaryGST.rpt",parameter,objData);
             rsTemp.close();
             
         }catch(SQLException e) {
             e.printStackTrace();             
          } 
    }
    
    public void GenerateSJV09(String FromDate,String ToDate,String BookCode) {
        try{
            String Condition="";
            int l=0;
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("AGENT_SR_NO");
            objData.AddColumn("PARTYNAME");            
            objData.AddColumn("PIECE_NO");
            objData.AddColumn("BALE_NO");      
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("GATEPASS_NO");
            objData.AddColumn("PAYMENT_TERM_CODE");
            objData.AddColumn("STATION_CODE");
            objData.AddColumn("TOTAL_GROSS_AMOUNT");
            objData.AddColumn("GROSS_WEIGHT");
            objData.AddColumn("COLUMN_6_AMT");
            objData.AddColumn("COLUMN_25_AMT");
            objData.AddColumn("COLUMN_24_AMT");
           // objData.AddColumn("COLUMN_8_AMT");      
            objData.AddColumn("COLUMN_9_AMT");
            objData.AddColumn("COLUMN_16_AMT");
            objData.AddColumn("TRD_DISCOUNT");
            objData.AddColumn("TOTAL_SQ_MTR");
            objData.AddColumn("COLUMN_12_AMT");
            objData.AddColumn("COLUMN_1_AMT");            
          //  objData.AddColumn("TOTAL_NET_AMOUNT");
            objData.AddColumn("TOTAL_GROSS_QTY");
            objData.AddColumn("TOTAL_NET_QTY");
            objData.AddColumn("TOTAL_GROSS_AMOUNT");
            objData.AddColumn("TOTAL_VALUE");
            objData.AddColumn("NET_AMOUNT");
            objData.AddColumn("VAT4");
            objData.AddColumn("VAT1");
            objData.AddColumn("CST2");
            objData.AddColumn("CST5");
            objData.AddColumn("SD_AMT");
            
            
           // String str="SELECT SN_SEASON_ID,SN_PARTY_CODE,PARTY_NAME,CITY_ID,SN_ORDER_NO, SN_ORDER_DATE,SN_QUALITY_ID,SN_SHADE,SN_UNIT_ID,SN_UNITS,SN_ABD_TOTAL_MTR,CATEGORY_LIST,QLT_NEW_OLD FROM SALES.D_SAL_SALENOTE_DATA A,DINESHMILLS.D_SAL_QUALITY_MASTER Q, DINESHMILLS.D_SAL_PARTY_MASTER P WHERE QUALITY_ID = SN_QUALITY_ID AND SEASON_ID = SN_SEASON_ID AND SN_PARTY_CODE IN('279965','300153','300156','300170','319907','412607','509912','510201','510501','559901','619915','670201','739901','739905') AND SN_SEASON_ID ='S14' AND SN_CANCELLED =0  AND CATEGORY_LIST IN ('REGULAR','S-QL') AND PARTY_CODE=SN_PARTY_CODE AND SN_ORDER_DATE>='2013-12-16' AND SN_ORDER_DATE<='2014-02-15' "+
           // "UNION ALL "+            
           // "SELECT SN_SEASON_ID,SN_PARTY_CODE,PARTY_NAME,CITY_ID,CONCAT(SN_ORDER_NO,' TOTAL'),'','','','',SUM(SN_UNITS),SUM(SN_ABD_TOTAL_MTR),'','' FROM SALES.D_SAL_SALENOTE_DATA A,DINESHMILLS.D_SAL_QUALITY_MASTER Q, DINESHMILLS.D_SAL_PARTY_MASTER P WHERE QUALITY_ID = SN_QUALITY_ID AND SEASON_ID = SN_SEASON_ID AND SN_PARTY_CODE IN('279965','300153','300156','300170','319907','412607','509912','510201','510501','559901','619915','670201','739901','739905') AND SN_SEASON_ID ='S14' AND SN_CANCELLED =0 AND CATEGORY_LIST IN ('REGULAR','S-QL') AND PARTY_CODE=SN_PARTY_CODE AND SN_ORDER_DATE>='2013-12-16' AND SN_ORDER_DATE<='2014-02-15' "+
           // "GROUP BY SN_PARTY_CODE,SN_ORDER_NO "+
           // "UNION ALL "+
           // "SELECT SN_SEASON_ID,SN_PARTY_CODE,PARTY_NAME,CITY_ID,'total','','','','',SUM(SN_UNITS),SUM(SN_ABD_TOTAL_MTR),'','' FROM SALES.D_SAL_SALENOTE_DATA A,DINESHMILLS.D_SAL_QUALITY_MASTER Q, DINESHMILLS.D_SAL_PARTY_MASTER P WHERE QUALITY_ID = SN_QUALITY_ID AND SEASON_ID = SN_SEASON_ID AND SN_PARTY_CODE IN('279965','300153','300156','300170','319907','412607','509912','510201','510501','559901','619915','670201','739901','739905') AND SN_SEASON_ID ='S14' AND SN_CANCELLED =0 AND CATEGORY_LIST IN ('REGULAR','S-QL') AND PARTY_CODE=SN_PARTY_CODE AND SN_ORDER_DATE>='2013-12-16' AND SN_ORDER_DATE<='2014-02-15' "+
           // "GROUP BY SN_PARTY_CODE "+
           // "ORDER BY SN_PARTY_CODE,SN_ORDER_NO,SN_QUALITY_ID+0,SN_SHADE+0,SN_UNIT_ID+0";
           
            String str="SELECT A.*,SUBSTRING(B.PARTY_NAME,1,18) AS PARTYNAME,TRD_DISCOUNT FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_PARTY_MASTER B,DINESHMILLS.D_SAL_INVOICE_DETAIL C WHERE A.INVOICE_TYPE=2 AND A.PARTY_CODE=B.PARTY_CODE AND A.PARTY_CODE=C.PARTY_CODE AND A.PIECE_NO=C.PIECE_NO AND A.CANCELLED=0 AND A.INVOICE_NO=C.INVOICE_NO ";
            
            try {
                /*if(!txtFromVoucher.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_NO>='"+txtFromVoucher.getText()+"' ";
                }
                
                if(!txtToVoucher.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_NO<='"+txtToVoucher.getText()+"' ";
                }
                */
                if(!FromDate.equals("")) {
                    //Condition+=" AND A.INVOICE_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                    Condition+=" AND A.INVOICE_DATE>='"+FromDate+"' ";
                }
                
                if(!ToDate.equals("")) {
                    //Condition+=" AND A.INVOICE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                    Condition+=" AND A.INVOICE_DATE<='"+ToDate+"' ";
                }                
                
                /*
                if(!txtBookCode.getText().trim().equals("")) {
                    Condition+=" AND A.BOOK_CODE='"+txtBookCode.getText()+"' ";
                }
                
                if(!txtFromAmount.getText().trim().equals("")) {
                    Condition+=" AND B.AMOUNT>="+txtFromAmount.getText()+" ";
                }
                
                if(!txtToAmount.getText().trim().equals("")) {
                    Condition+=" AND B.AMOUNT<="+txtToAmount.getText()+" ";
                }
                
                if(!txtMainCode.getText().trim().equals("")) {
                    Condition+=" AND SUBSTRING(B.MAIN_ACCOUNT_CODE,1,6)='"+txtMainCode.getText()+"' ";
                }
                
                if(!txtSubCode.getText().trim().equals("")) {
                    Condition+=" AND B.SUB_ACCOUNT_CODE='"+txtSubCode.getText()+"' ";
                }                
                */
            }
            catch(Exception e) {
                e.printStackTrace();
            }
            
            int SortOrder=EITLERPGLOBAL.getComboCode(cmbSort);
            String order_by = "";
            switch(SortOrder) {
                case 1: order_by+="  ";break;
                case 2: order_by+=" ORDER BY A.VOUCHER_DATE ";break;
                case 3: order_by+=" ORDER BY A.BOOK_CODE ";break;
                case 4: order_by+=" ORDER BY CONVERT(A.LEGACY_NO,SIGNED) ";break;
                case 5: order_by+=" ORDER BY INVOICE_DATE,INVOICE_NO ";break;
            }
            
            System.out.print("SJV 09 : "+str+Condition+order_by);
            
            ResultSet  rsTemp =data.getResult(str+Condition+order_by);
            while(!rsTemp.isAfterLast()){
                l++;
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();                
                
                objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsTemp,"PARTY_CODE",""));
                objRow.setValue("PARTYNAME",UtilFunctions.getString(rsTemp,"PARTYNAME",""));
                objRow.setValue("STATION_CODE",UtilFunctions.getString(rsTemp,"STATION_CODE",""));
                objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsTemp,"INVOICE_NO",""));
                objRow.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTemp,"INVOICE_DATE","")));
                objRow.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
                objRow.setValue("PIECE_NO",UtilFunctions.getString(rsTemp,"PIECE_NO",""));
                objRow.setValue("BALE_NO",UtilFunctions.getString(rsTemp,"BALE_NO",""));
                objRow.setValue("GATEPASS_NO",UtilFunctions.getString(rsTemp,"GATEPASS_NO",""));
                objRow.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
                objRow.setValue("PAYMENT_TERM_CODE",UtilFunctions.getString(rsTemp,"PAYMENT_TERM_CODE",""));
                objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                objRow.setValue("COLUMN_6_AMT",UtilFunctions.getString(rsTemp,"COLUMN_6_AMT",""));
                objRow.setValue("COLUMN_25_AMT",UtilFunctions.getString(rsTemp,"COLUMN_25_AMT",""));
                objRow.setValue("COLUMN_24_AMT",UtilFunctions.getString(rsTemp,"COLUMN_24_AMT",""));
               // objRow.setValue("COLUMN_8_AMT",UtilFunctions.getString(rsTemp,"COLUMN_8_AMT",""));
                objRow.setValue("COLUMN_9_AMT",UtilFunctions.getString(rsTemp,"COLUMN_9_AMT",""));
                objRow.setValue("COLUMN_16_AMT",UtilFunctions.getString(rsTemp,"COLUMN_16_AMT",""));
                objRow.setValue("TRD_DISCOUNT",UtilFunctions.getString(rsTemp,"TRD_DISCOUNT",""));
                objRow.setValue("TOTAL_SQ_MTR",UtilFunctions.getString(rsTemp,"TOTAL_SQ_MTR",""));
                objRow.setValue("COLUMN_12_AMT",UtilFunctions.getString(rsTemp,"COLUMN_12_AMT",""));
                objRow.setValue("COLUMN_1_AMT",UtilFunctions.getString(rsTemp,"COLUMN_1_AMT",""));
                //objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                //objRow.setValue("TOTAL_NET_AMOUNT","");
                objRow.setValue("TOTAL_GROSS_QTY",UtilFunctions.getString(rsTemp,"GROSS_WEIGHT",""));
                objRow.setValue("TOTAL_NET_QTY",UtilFunctions.getString(rsTemp,"TOTAL_NET_QTY",""));
                objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                objRow.setValue("TOTAL_VALUE",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                objRow.setValue("NET_AMOUNT",UtilFunctions.getString(rsTemp,"NET_AMOUNT",""));
             //   objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                objRow.setValue("VAT4",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT4",0)));
                objRow.setValue("VAT1",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT1",0)));
                objRow.setValue("CST2",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST2",0)));
                objRow.setValue("CST5",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST5",0)));
                objRow.setValue("SD_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"SD_AMT",0)));
                
                objData.AddRow(objRow);
                
                rsTemp.next();
            }
            
            HashMap parameter=new HashMap();
            parameter.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            parameter.put("FROM_DATE",EITLERPGLOBAL.formatDate(FromDate));
            parameter.put("TO_DATE",EITLERPGLOBAL.formatDate(ToDate));
            parameter.put("BOOK_CODE",BookCode);
            parameter.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode));
            parameter.put("TOTAL_INVOICE_NO",Integer.toString(l));
            
            //parameter.put("NAME","ORDER");
            //parameter.put("LAST_DATE","15/02/2014"
            
           // EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptsjv010.rpt",parameter,objData);
            rsTemp.close();            
           
        }catch(SQLException e) {
            e.printStackTrace();
            
        }
        
        
    }
      
    public void GenerateSJV09GST(String FromDate,String ToDate,String BookCode) {
        try{
            String Condition="";
            int l=0;
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("AGENT_SR_NO");
            objData.AddColumn("PARTYNAME");            
            objData.AddColumn("PIECE_NO");
            objData.AddColumn("BALE_NO");      
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("GATEPASS_NO");
            objData.AddColumn("PAYMENT_TERM_CODE");
            objData.AddColumn("STATION_CODE");
            objData.AddColumn("TOTAL_GROSS_AMOUNT");
            objData.AddColumn("GROSS_WEIGHT");
            objData.AddColumn("COLUMN_6_AMT");
            objData.AddColumn("COLUMN_25_AMT");
            objData.AddColumn("COLUMN_24_AMT");
           // objData.AddColumn("COLUMN_8_AMT");      
            objData.AddColumn("COLUMN_9_AMT");
            objData.AddColumn("COLUMN_16_AMT");
            objData.AddColumn("TRD_DISCOUNT");
            objData.AddColumn("TOTAL_SQ_MTR");
            objData.AddColumn("COLUMN_12_AMT");
            objData.AddColumn("COLUMN_1_AMT");            
          //  objData.AddColumn("TOTAL_NET_AMOUNT");
            objData.AddColumn("TOTAL_GROSS_QTY");
            objData.AddColumn("TOTAL_NET_QTY");
            objData.AddColumn("TOTAL_GROSS_AMOUNT");
            objData.AddColumn("TOTAL_VALUE");
            objData.AddColumn("NET_AMOUNT");
            objData.AddColumn("CGST_AMT");
            objData.AddColumn("SGST_AMT");
            objData.AddColumn("IGST_AMT");
            objData.AddColumn("SD_AMT");
            objData.AddColumn("ADDITIONAL_DUTY");
            objData.AddColumn("COLUMN_17_AMT");
            
            
            
           // String str="SELECT SN_SEASON_ID,SN_PARTY_CODE,PARTY_NAME,CITY_ID,SN_ORDER_NO, SN_ORDER_DATE,SN_QUALITY_ID,SN_SHADE,SN_UNIT_ID,SN_UNITS,SN_ABD_TOTAL_MTR,CATEGORY_LIST,QLT_NEW_OLD FROM SALES.D_SAL_SALENOTE_DATA A,DINESHMILLS.D_SAL_QUALITY_MASTER Q, DINESHMILLS.D_SAL_PARTY_MASTER P WHERE QUALITY_ID = SN_QUALITY_ID AND SEASON_ID = SN_SEASON_ID AND SN_PARTY_CODE IN('279965','300153','300156','300170','319907','412607','509912','510201','510501','559901','619915','670201','739901','739905') AND SN_SEASON_ID ='S14' AND SN_CANCELLED =0  AND CATEGORY_LIST IN ('REGULAR','S-QL') AND PARTY_CODE=SN_PARTY_CODE AND SN_ORDER_DATE>='2013-12-16' AND SN_ORDER_DATE<='2014-02-15' "+
           // "UNION ALL "+            
           // "SELECT SN_SEASON_ID,SN_PARTY_CODE,PARTY_NAME,CITY_ID,CONCAT(SN_ORDER_NO,' TOTAL'),'','','','',SUM(SN_UNITS),SUM(SN_ABD_TOTAL_MTR),'','' FROM SALES.D_SAL_SALENOTE_DATA A,DINESHMILLS.D_SAL_QUALITY_MASTER Q, DINESHMILLS.D_SAL_PARTY_MASTER P WHERE QUALITY_ID = SN_QUALITY_ID AND SEASON_ID = SN_SEASON_ID AND SN_PARTY_CODE IN('279965','300153','300156','300170','319907','412607','509912','510201','510501','559901','619915','670201','739901','739905') AND SN_SEASON_ID ='S14' AND SN_CANCELLED =0 AND CATEGORY_LIST IN ('REGULAR','S-QL') AND PARTY_CODE=SN_PARTY_CODE AND SN_ORDER_DATE>='2013-12-16' AND SN_ORDER_DATE<='2014-02-15' "+
           // "GROUP BY SN_PARTY_CODE,SN_ORDER_NO "+
           // "UNION ALL "+
           // "SELECT SN_SEASON_ID,SN_PARTY_CODE,PARTY_NAME,CITY_ID,'total','','','','',SUM(SN_UNITS),SUM(SN_ABD_TOTAL_MTR),'','' FROM SALES.D_SAL_SALENOTE_DATA A,DINESHMILLS.D_SAL_QUALITY_MASTER Q, DINESHMILLS.D_SAL_PARTY_MASTER P WHERE QUALITY_ID = SN_QUALITY_ID AND SEASON_ID = SN_SEASON_ID AND SN_PARTY_CODE IN('279965','300153','300156','300170','319907','412607','509912','510201','510501','559901','619915','670201','739901','739905') AND SN_SEASON_ID ='S14' AND SN_CANCELLED =0 AND CATEGORY_LIST IN ('REGULAR','S-QL') AND PARTY_CODE=SN_PARTY_CODE AND SN_ORDER_DATE>='2013-12-16' AND SN_ORDER_DATE<='2014-02-15' "+
           // "GROUP BY SN_PARTY_CODE "+
           // "ORDER BY SN_PARTY_CODE,SN_ORDER_NO,SN_QUALITY_ID+0,SN_SHADE+0,SN_UNIT_ID+0";
           
            String str="SELECT A.*,SUBSTRING(B.PARTY_NAME,1,18) AS PARTYNAME,TRD_DISCOUNT,ADDITIONAL_DUTY FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_PARTY_MASTER B,DINESHMILLS.D_SAL_INVOICE_DETAIL C WHERE A.INVOICE_TYPE=2 AND A.PARTY_CODE=B.PARTY_CODE AND A.PARTY_CODE=C.PARTY_CODE AND A.CANCELLED=0 AND A.INVOICE_NO=C.INVOICE_NO AND A.INVOICE_DATE=C.INVOICE_DATE ";//AND A.PIECE_NO=C.PIECE_NO 
            
            try {
                /*if(!txtFromVoucher.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_NO>='"+txtFromVoucher.getText()+"' ";
                }
                
                if(!txtToVoucher.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_NO<='"+txtToVoucher.getText()+"' ";
                }
                */
                if(!FromDate.equals("")) {
                    //Condition+=" AND A.INVOICE_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                    Condition+=" AND A.INVOICE_DATE>='"+FromDate+"' ";
                }
                
                if(!ToDate.equals("")) {
                    //Condition+=" AND A.INVOICE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                    Condition+=" AND A.INVOICE_DATE<='"+ToDate+"' ";
                }                
                
                /*
                if(!txtBookCode.getText().trim().equals("")) {
                    Condition+=" AND A.BOOK_CODE='"+txtBookCode.getText()+"' ";
                }
                
                if(!txtFromAmount.getText().trim().equals("")) {
                    Condition+=" AND B.AMOUNT>="+txtFromAmount.getText()+" ";
                }
                
                if(!txtToAmount.getText().trim().equals("")) {
                    Condition+=" AND B.AMOUNT<="+txtToAmount.getText()+" ";
                }
                
                if(!txtMainCode.getText().trim().equals("")) {
                    Condition+=" AND SUBSTRING(B.MAIN_ACCOUNT_CODE,1,6)='"+txtMainCode.getText()+"' ";
                }
                
                if(!txtSubCode.getText().trim().equals("")) {
                    Condition+=" AND B.SUB_ACCOUNT_CODE='"+txtSubCode.getText()+"' ";
                }                
                */
            }
            catch(Exception e) {
                e.printStackTrace();
            }
            
            int SortOrder=EITLERPGLOBAL.getComboCode(cmbSort);
            String order_by = "";
            switch(SortOrder) {
                case 1: order_by+="  ";break;
                case 2: order_by+=" ORDER BY A.VOUCHER_DATE ";break;
                case 3: order_by+=" ORDER BY A.BOOK_CODE ";break;
                case 4: order_by+=" ORDER BY CONVERT(A.LEGACY_NO,SIGNED) ";break;
                case 5: order_by+=" ORDER BY INVOICE_DATE,INVOICE_NO ";break;
            }
            
            System.out.print("SJV 09 GST : "+str+Condition+order_by);
            
            ResultSet  rsTemp =data.getResult(str+Condition+order_by);
            while(!rsTemp.isAfterLast()){
                l++;
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();                
                
                objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsTemp,"PARTY_CODE",""));
                objRow.setValue("PARTYNAME",UtilFunctions.getString(rsTemp,"PARTYNAME",""));
                objRow.setValue("STATION_CODE",UtilFunctions.getString(rsTemp,"STATION_CODE",""));
                objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsTemp,"INVOICE_NO",""));
                objRow.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTemp,"INVOICE_DATE","")));
                objRow.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
                objRow.setValue("PIECE_NO",UtilFunctions.getString(rsTemp,"PIECE_NO",""));
                objRow.setValue("BALE_NO",UtilFunctions.getString(rsTemp,"BALE_NO",""));
                objRow.setValue("GATEPASS_NO",UtilFunctions.getString(rsTemp,"GATEPASS_NO",""));
                objRow.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
                objRow.setValue("PAYMENT_TERM_CODE",UtilFunctions.getString(rsTemp,"PAYMENT_TERM_CODE",""));
                objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                objRow.setValue("COLUMN_6_AMT",UtilFunctions.getString(rsTemp,"COLUMN_6_AMT",""));
                objRow.setValue("COLUMN_25_AMT",UtilFunctions.getString(rsTemp,"COLUMN_25_AMT",""));
                objRow.setValue("COLUMN_24_AMT",UtilFunctions.getString(rsTemp,"COLUMN_24_AMT",""));
               // objRow.setValue("COLUMN_8_AMT",UtilFunctions.getString(rsTemp,"COLUMN_8_AMT",""));
                objRow.setValue("COLUMN_9_AMT",UtilFunctions.getString(rsTemp,"COLUMN_9_AMT",""));
                objRow.setValue("COLUMN_16_AMT",UtilFunctions.getString(rsTemp,"COLUMN_16_AMT",""));
                objRow.setValue("TRD_DISCOUNT",UtilFunctions.getString(rsTemp,"TRD_DISCOUNT",""));
                objRow.setValue("TOTAL_SQ_MTR",UtilFunctions.getString(rsTemp,"TOTAL_SQ_MTR",""));
                objRow.setValue("COLUMN_12_AMT",UtilFunctions.getString(rsTemp,"COLUMN_12_AMT",""));
                objRow.setValue("COLUMN_1_AMT",UtilFunctions.getString(rsTemp,"COLUMN_1_AMT",""));
                //objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                //objRow.setValue("TOTAL_NET_AMOUNT","");
                objRow.setValue("TOTAL_GROSS_QTY",UtilFunctions.getString(rsTemp,"GROSS_WEIGHT",""));
                objRow.setValue("TOTAL_NET_QTY",UtilFunctions.getString(rsTemp,"TOTAL_NET_QTY",""));
                objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                objRow.setValue("TOTAL_VALUE",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                objRow.setValue("NET_AMOUNT",UtilFunctions.getString(rsTemp,"NET_AMOUNT",""));
             //   objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
              //  objRow.setValue("VAT4",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT4",0)));
//                objRow.setValue("VAT1",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT1",0)));
//                objRow.setValue("CST2",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST2",0)));
//                objRow.setValue("CST5",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST5",0)));
                objRow.setValue("CGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"CGST_AMT",0)));
                objRow.setValue("SGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"SGST_AMT",0)));
                objRow.setValue("IGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"IGST_AMT",0)));
                objRow.setValue("SD_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"SD_AMT",0)));
                objRow.setValue("ADDITIONAL_DUTY",dFormat.format(UtilFunctions.getDouble(rsTemp,"ADDITIONAL_DUTY",0)));
                objRow.setValue("COLUMN_17_AMT",UtilFunctions.getString(rsTemp,"COLUMN_17_AMT",""));
                
                objData.AddRow(objRow);
                
                rsTemp.next();
            }
            
            HashMap parameter=new HashMap();
            parameter.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            parameter.put("FROM_DATE",EITLERPGLOBAL.formatDate(FromDate));
            parameter.put("TO_DATE",EITLERPGLOBAL.formatDate(ToDate));
            parameter.put("BOOK_CODE",BookCode);
            parameter.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode));
            parameter.put("TOTAL_INVOICE_NO",Integer.toString(l));
            
            //parameter.put("NAME","ORDER");
            //parameter.put("LAST_DATE","15/02/2014"
            
           // EITLERPGLOBAL.PAGE_BREAK=true;
            //new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptsjv010GST.rpt",parameter,objData);
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptsjv010GST_Felt.rpt",parameter,objData);
            rsTemp.close();            
           
        }catch(SQLException e) {
            e.printStackTrace();
            
        }
        
        
    }
    
      public void GenerateSJV11GST(String FromDate,String ToDate,String BookCode) {
        try{
            String Condition="";
            int m=0;
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("AGENT_SR_NO");
            objData.AddColumn("PARTYNAME");            
            objData.AddColumn("PIECE_NO");
            objData.AddColumn("BALE_NO");      
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("GATEPASS_NO");
            objData.AddColumn("PAYMENT_TERM_CODE");
            objData.AddColumn("STATION_CODE");
            objData.AddColumn("TOTAL_GROSS_AMOUNT");
            objData.AddColumn("GROSS_WEIGHT");
            objData.AddColumn("COLUMN_6_AMT");
            objData.AddColumn("COLUMN_25_AMT");
            objData.AddColumn("COLUMN_24_AMT");
            //objData.AddColumn("COLUMN_8_AMT");      
            objData.AddColumn("COLUMN_9_AMT");
            objData.AddColumn("COLUMN_16_AMT");
            objData.AddColumn("TRD_DISCOUNT");
            objData.AddColumn("TOTAL_SQ_MTR");
            objData.AddColumn("COLUMN_12_AMT");
            objData.AddColumn("COLUMN_1_AMT");            
            objData.AddColumn("TOTAL_NET_AMOUNT");
            objData.AddColumn("TOTAL_GROSS_QTY");
            objData.AddColumn("TOTAL_NET_QTY");
            objData.AddColumn("TOTAL_GROSS_AMOUNT");
            objData.AddColumn("TOTAL_VALUE");
            objData.AddColumn("NET_AMOUNT");
//            objData.AddColumn("VAT4");
//            objData.AddColumn("VAT1");
//            objData.AddColumn("CST2");
//            objData.AddColumn("CST5");
            objData.AddColumn("CGST_AMT");
            objData.AddColumn("SGST_AMT");
            objData.AddColumn("IGST_AMT");
           // String str="SELECT SN_SEASON_ID,SN_PARTY_CODE,PARTY_NAME,CITY_ID,SN_ORDER_NO, SN_ORDER_DATE,SN_QUALITY_ID,SN_SHADE,SN_UNIT_ID,SN_UNITS,SN_ABD_TOTAL_MTR,CATEGORY_LIST,QLT_NEW_OLD FROM SALES.D_SAL_SALENOTE_DATA A,DINESHMILLS.D_SAL_QUALITY_MASTER Q, DINESHMILLS.D_SAL_PARTY_MASTER P WHERE QUALITY_ID = SN_QUALITY_ID AND SEASON_ID = SN_SEASON_ID AND SN_PARTY_CODE IN('279965','300153','300156','300170','319907','412607','509912','510201','510501','559901','619915','670201','739901','739905') AND SN_SEASON_ID ='S14' AND SN_CANCELLED =0  AND CATEGORY_LIST IN ('REGULAR','S-QL') AND PARTY_CODE=SN_PARTY_CODE AND SN_ORDER_DATE>='2013-12-16' AND SN_ORDER_DATE<='2014-02-15' "+
           // "UNION ALL "+            
           // "SELECT SN_SEASON_ID,SN_PARTY_CODE,PARTY_NAME,CITY_ID,CONCAT(SN_ORDER_NO,' TOTAL'),'','','','',SUM(SN_UNITS),SUM(SN_ABD_TOTAL_MTR),'','' FROM SALES.D_SAL_SALENOTE_DATA A,DINESHMILLS.D_SAL_QUALITY_MASTER Q, DINESHMILLS.D_SAL_PARTY_MASTER P WHERE QUALITY_ID = SN_QUALITY_ID AND SEASON_ID = SN_SEASON_ID AND SN_PARTY_CODE IN('279965','300153','300156','300170','319907','412607','509912','510201','510501','559901','619915','670201','739901','739905') AND SN_SEASON_ID ='S14' AND SN_CANCELLED =0 AND CATEGORY_LIST IN ('REGULAR','S-QL') AND PARTY_CODE=SN_PARTY_CODE AND SN_ORDER_DATE>='2013-12-16' AND SN_ORDER_DATE<='2014-02-15' "+
           // "GROUP BY SN_PARTY_CODE,SN_ORDER_NO "+
           // "UNION ALL "+
           // "SELECT SN_SEASON_ID,SN_PARTY_CODE,PARTY_NAME,CITY_ID,'total','','','','',SUM(SN_UNITS),SUM(SN_ABD_TOTAL_MTR),'','' FROM SALES.D_SAL_SALENOTE_DATA A,DINESHMILLS.D_SAL_QUALITY_MASTER Q, DINESHMILLS.D_SAL_PARTY_MASTER P WHERE QUALITY_ID = SN_QUALITY_ID AND SEASON_ID = SN_SEASON_ID AND SN_PARTY_CODE IN('279965','300153','300156','300170','319907','412607','509912','510201','510501','559901','619915','670201','739901','739905') AND SN_SEASON_ID ='S14' AND SN_CANCELLED =0 AND CATEGORY_LIST IN ('REGULAR','S-QL') AND PARTY_CODE=SN_PARTY_CODE AND SN_ORDER_DATE>='2013-12-16' AND SN_ORDER_DATE<='2014-02-15' "+
           // "GROUP BY SN_PARTY_CODE "+
           // "ORDER BY SN_PARTY_CODE,SN_ORDER_NO,SN_QUALITY_ID+0,SN_SHADE+0,SN_UNIT_ID+0";
           
            String str="SELECT A.*,SUBSTRING(B.PARTY_NAME,1,18) AS PARTYNAME FROM D_SAL_INVOICE_HEADER A,D_SAL_PARTY_MASTER B WHERE INVOICE_TYPE=3 AND A.PARTY_CODE=B.PARTY_CODE AND A.CANCELLED=0";
            
            try {
                /*if(!txtFromVoucher.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_NO>='"+txtFromVoucher.getText()+"' ";
                }
                
                if(!txtToVoucher.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_NO<='"+txtToVoucher.getText()+"' ";
                }
                */
                if(!FromDate.equals("")) {
                    //Condition+=" AND A.INVOICE_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                    Condition+=" AND A.INVOICE_DATE>='"+FromDate+"' ";
                }
                
                if(!ToDate.equals("")) {
                    //Condition+=" AND A.INVOICE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                    Condition+=" AND A.INVOICE_DATE<='"+ToDate+"' ";
                }
                
                Condition+=" ORDER BY A.INVOICE_NO " ;
                /*
                if(!txtBookCode.getText().trim().equals("")) {
                    Condition+=" AND A.BOOK_CODE='"+txtBookCode.getText()+"' ";
                }
                
                if(!txtFromAmount.getText().trim().equals("")) {
                    Condition+=" AND B.AMOUNT>="+txtFromAmount.getText()+" ";
                }
                
                if(!txtToAmount.getText().trim().equals("")) {
                    Condition+=" AND B.AMOUNT<="+txtToAmount.getText()+" ";
                }
                
                if(!txtMainCode.getText().trim().equals("")) {
                    Condition+=" AND SUBSTRING(B.MAIN_ACCOUNT_CODE,1,6)='"+txtMainCode.getText()+"' ";
                }
                
                if(!txtSubCode.getText().trim().equals("")) {
                    Condition+=" AND B.SUB_ACCOUNT_CODE='"+txtSubCode.getText()+"' ";
                }                
                */
            }
            catch(Exception e) {
                e.printStackTrace();
            }
            
            ResultSet  rsTemp =data.getResult(str+Condition);
            while(!rsTemp.isAfterLast()){
                m++;
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();                
                
                objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsTemp,"PARTY_CODE",""));
                objRow.setValue("PARTYNAME",UtilFunctions.getString(rsTemp,"PARTYNAME",""));
                objRow.setValue("STATION_CODE",UtilFunctions.getString(rsTemp,"STATION_CODE",""));
                objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsTemp,"INVOICE_NO",""));
                objRow.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTemp,"INVOICE_DATE","")));
                objRow.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
                objRow.setValue("PIECE_NO",UtilFunctions.getString(rsTemp,"PIECE_NO",""));
                objRow.setValue("BALE_NO",UtilFunctions.getString(rsTemp,"BALE_NO",""));
                objRow.setValue("GATEPASS_NO",UtilFunctions.getString(rsTemp,"GATEPASS_NO",""));
                objRow.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
                objRow.setValue("PAYMENT_TERM_CODE",UtilFunctions.getString(rsTemp,"PAYMENT_TERM_CODE",""));
                objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                objRow.setValue("COLUMN_6_AMT",UtilFunctions.getString(rsTemp,"COLUMN_6_AMT",""));
                objRow.setValue("COLUMN_25_AMT",UtilFunctions.getString(rsTemp,"COLUMN_25_AMT",""));
                objRow.setValue("COLUMN_24_AMT",UtilFunctions.getString(rsTemp,"COLUMN_24_AMT",""));
                //objRow.setValue("COLUMN_8_AMT",UtilFunctions.getString(rsTemp,"COLUMN_8_AMT",""));
                objRow.setValue("COLUMN_9_AMT",UtilFunctions.getString(rsTemp,"COLUMN_9_AMT",""));
                objRow.setValue("COLUMN_16_AMT",UtilFunctions.getString(rsTemp,"COLUMN_16_AMT",""));
                objRow.setValue("TRD_DISCOUNT",UtilFunctions.getString(rsTemp,"TRD_DISCOUNT",""));
                objRow.setValue("TOTAL_SQ_MTR",UtilFunctions.getString(rsTemp,"TOTAL_SQ_MTR",""));
                objRow.setValue("COLUMN_12_AMT",UtilFunctions.getString(rsTemp,"COLUMN_12_AMT",""));
                objRow.setValue("COLUMN_1_AMT",UtilFunctions.getString(rsTemp,"COLUMN_1_AMT",""));
                objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                objRow.setValue("TOTAL_GROSS_QTY",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_QTY",""));
                objRow.setValue("TOTAL_NET_QTY",UtilFunctions.getString(rsTemp,"TOTAL_NET_QTY",""));
                objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                objRow.setValue("TOTAL_VALUE",UtilFunctions.getString(rsTemp,"TOTAL_VALUE",""));
                objRow.setValue("NET_AMOUNT",UtilFunctions.getString(rsTemp,"NET_AMOUNT",""));
                objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
//                objRow.setValue("VAT4",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT4",0)));
//                objRow.setValue("VAT1",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT1",0)));
//                objRow.setValue("CST2",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST2",0)));
//                objRow.setValue("CST5",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST5",0)));
                objRow.setValue("CGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"CGST_AMT",0)));
                objRow.setValue("SGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"SGST_AMT",0)));
                objRow.setValue("IGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"IGST_AMT",0)));
                
                objData.AddRow(objRow);
                
                rsTemp.next();
            }
            
           HashMap parameter=new HashMap();
            parameter.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            parameter.put("FROM_DATE",EITLERPGLOBAL.formatDate(FromDate));
            parameter.put("TO_DATE",EITLERPGLOBAL.formatDate(ToDate));
            parameter.put("BOOK_CODE",BookCode);
            parameter.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode));
            parameter.put("TOTAL_INVOICE_NO",Integer.toString(m));
            
           // EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptsjv010GST.rpt",parameter,objData);
            rsTemp.close();
        }catch(SQLException e) {
            e.printStackTrace();
        }
        
        ////SUMMARY
        try{
             System.gc();
             int j=0;
             String Condition="";
             TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
             
             objData.AddColumn("INVOICE_TYPE");
             objData.AddColumn("INVOICE_NO");
             objData.AddColumn("TOTAL_GROSS_QTY");
             objData.AddColumn("TOTAL_NET_QTY");
             objData.AddColumn("TOTAL_GROSS_AMOUNT");
             objData.AddColumn("COLUMN_9_AMT");
             objData.AddColumn("COLUMN_16_AMT");
             objData.AddColumn("TOTAL_NET_AMOUNT");
             objData.AddColumn("COLUMN_1_AMT");
             objData.AddColumn("TOTAL_VALUE");
             objData.AddColumn("NET_AMOUNT");             
             objData.AddColumn("COLUMN_25_AMT");
             objData.AddColumn("COLUMN_24_AMT");             
             objData.AddColumn("COLUMN_8_AMT");
//             objData.AddColumn("VAT4");
//             objData.AddColumn("VAT1");
//             objData.AddColumn("CST2");
//             objData.AddColumn("CST5");
             objData.AddColumn("COLUMN_12_AMT");
             objData.AddColumn("TOTAL_SQ_MTR");
             objData.AddColumn("TRD_DISCOUNT");  
             objData.AddColumn("CGST_AMT");
             objData.AddColumn("SGST_AMT");
             objData.AddColumn("IGST_AMT");
             
             
             String str="SELECT 'WH + OSG' AS INVOICE_NO,SUM(TOTAL_GROSS_QTY) AS TOTAL_GROSS_QTY, SUM(TOTAL_GROSS_AMOUNT) AS TOTAL_GROSS_AMOUNT, SUM(COLUMN_9_AMT) AS COLUMN_9_AMT, SUM(COLUMN_16_AMT) AS COLUMN_16_AMT, SUM(TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT, SUM(COLUMN_1_AMT) AS COLUMN_1_AMT, SUM(TOTAL_VALUE) AS TOTAL_VALUE,SUM(A.NET_AMOUNT) AS NET_AMOUNT, SUM(COLUMN_25_AMT) AS COLUMN_25_AMT, SUM(COLUMN_24_AMT) AS COLUMN_24_AMT,SUM(CGST_AMT) AS CGST_AMT,SUM(A.SGST_AMT) AS SGST_AMT,SUM(A.IGST_AMT) AS IGST_AMT, SUM(COLUMN_12_AMT) AS COLUMN_12_AMT, SUM(TOTAL_SQ_MTR) AS TOTAL_SQ_MTR,SUM(TOTAL_NET_QTY) AS TOTAL_NET_QTY  FROM D_SAL_INVOICE_HEADER A WHERE INVOICE_TYPE='3' AND   INVOICE_DATE>='"+FromDate+"' AND  INVOICE_DATE<='"+ToDate+"' AND CANCELLED='0' ";                
                
             ResultSet  rsTemp =data.getResult(str);
             while(!rsTemp.isAfterLast()){
                 j++;
                 TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                 
                 objRow.setValue("INVOICE_TYPE",UtilFunctions.getString(rsTemp,"INVOICE_TYPE",""));                                  
                 objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsTemp,"INVOICE_NO",""));                 
                 objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));                 
                 objRow.setValue("COLUMN_25_AMT",UtilFunctions.getString(rsTemp,"COLUMN_25_AMT",""));
                 objRow.setValue("COLUMN_24_AMT",UtilFunctions.getString(rsTemp,"COLUMN_24_AMT",""));
                 objRow.setValue("COLUMN_8_AMT",UtilFunctions.getString(rsTemp,"COLUMN_8_AMT",""));
                 objRow.setValue("COLUMN_9_AMT",UtilFunctions.getString(rsTemp,"COLUMN_9_AMT",""));
                 objRow.setValue("COLUMN_16_AMT",UtilFunctions.getString(rsTemp,"COLUMN_16_AMT",""));
                 objRow.setValue("TRD_DISCOUNT",UtilFunctions.getString(rsTemp,"TRD_DISCOUNT",""));
                 objRow.setValue("TOTAL_SQ_MTR",UtilFunctions.getString(rsTemp,"TOTAL_SQ_MTR",""));
                 objRow.setValue("COLUMN_12_AMT",UtilFunctions.getString(rsTemp,"COLUMN_12_AMT",""));
                 objRow.setValue("COLUMN_1_AMT",UtilFunctions.getString(rsTemp,"COLUMN_1_AMT",""));
                 objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                 objRow.setValue("TOTAL_GROSS_QTY",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_QTY",""));
                 objRow.setValue("TOTAL_NET_QTY",UtilFunctions.getString(rsTemp,"TOTAL_NET_QTY",""));
                 objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                 objRow.setValue("TOTAL_VALUE",UtilFunctions.getString(rsTemp,"TOTAL_VALUE",""));
                 objRow.setValue("NET_AMOUNT",UtilFunctions.getString(rsTemp,"NET_AMOUNT",""));
                 objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
//                 objRow.setValue("VAT4",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT4",0)));
//                 objRow.setValue("VAT1",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT1",0)));
//                 objRow.setValue("CST2",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST2",0)));
//                 objRow.setValue("CST5",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST5",0)));
                 objRow.setValue("CGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"CGST_AMT",0)));
                 objRow.setValue("SGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"SGST_AMT",0)));
                 objRow.setValue("IGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"IGST_AMT",0)));
                 objData.AddRow(objRow);
                 
                 rsTemp.next();
             }
             
             HashMap parameter=new HashMap();
             parameter.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
             parameter.put("FROM_DATE",EITLERPGLOBAL.formatDate(FromDate));
             parameter.put("TO_DATE",EITLERPGLOBAL.formatDate(ToDate));
             parameter.put("BOOK_CODE",BookCode);
             parameter.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode)+" SUMMARY");             
             // EITLERPGLOBAL.PAGE_BREAK=true;
             new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptsjv011SummaryGST.rpt",parameter,objData);
             rsTemp.close();
             
         }catch(SQLException e) {
             e.printStackTrace();
             
          }
    }
    
//      public void GenerateSJV11GST(String FromDate,String ToDate,String BookCode) {
//        try{
//            String Condition="";
//            int m=0;
//            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
//            objData.AddColumn("PARTY_CODE");
//            objData.AddColumn("INVOICE_DATE");
//            objData.AddColumn("AGENT_SR_NO");
//            objData.AddColumn("PARTYNAME");            
//            objData.AddColumn("PIECE_NO");
//            objData.AddColumn("BALE_NO");      
//            objData.AddColumn("INVOICE_NO");
//            objData.AddColumn("GATEPASS_NO");
//            objData.AddColumn("PAYMENT_TERM_CODE");
//            objData.AddColumn("STATION_CODE");
//            objData.AddColumn("TOTAL_GROSS_AMOUNT");
//            objData.AddColumn("GROSS_WEIGHT");
//            objData.AddColumn("COLUMN_6_AMT");
//            objData.AddColumn("COLUMN_25_AMT");
//            objData.AddColumn("COLUMN_24_AMT");
//            //objData.AddColumn("COLUMN_8_AMT");      
//            objData.AddColumn("COLUMN_9_AMT");
//            objData.AddColumn("COLUMN_16_AMT");
//            objData.AddColumn("TRD_DISCOUNT");
//            objData.AddColumn("TOTAL_SQ_MTR");
//            objData.AddColumn("COLUMN_12_AMT");
//            objData.AddColumn("COLUMN_1_AMT");            
//            objData.AddColumn("TOTAL_NET_AMOUNT");
//            objData.AddColumn("TOTAL_GROSS_QTY");
//            objData.AddColumn("TOTAL_NET_QTY");
//            objData.AddColumn("TOTAL_GROSS_AMOUNT");
//            objData.AddColumn("TOTAL_VALUE");
//            objData.AddColumn("NET_AMOUNT");
////            objData.AddColumn("VAT4");
////            objData.AddColumn("VAT1");
////            objData.AddColumn("CST2");
////            objData.AddColumn("CST5");
//            objData.AddColumn("CGST_AMT");
//            objData.AddColumn("SGST_AMT");
//            objData.AddColumn("IGST_AMT");
//            
//           // String str="SELECT SN_SEASON_ID,SN_PARTY_CODE,PARTY_NAME,CITY_ID,SN_ORDER_NO, SN_ORDER_DATE,SN_QUALITY_ID,SN_SHADE,SN_UNIT_ID,SN_UNITS,SN_ABD_TOTAL_MTR,CATEGORY_LIST,QLT_NEW_OLD FROM SALES.D_SAL_SALENOTE_DATA A,DINESHMILLS.D_SAL_QUALITY_MASTER Q, DINESHMILLS.D_SAL_PARTY_MASTER P WHERE QUALITY_ID = SN_QUALITY_ID AND SEASON_ID = SN_SEASON_ID AND SN_PARTY_CODE IN('279965','300153','300156','300170','319907','412607','509912','510201','510501','559901','619915','670201','739901','739905') AND SN_SEASON_ID ='S14' AND SN_CANCELLED =0  AND CATEGORY_LIST IN ('REGULAR','S-QL') AND PARTY_CODE=SN_PARTY_CODE AND SN_ORDER_DATE>='2013-12-16' AND SN_ORDER_DATE<='2014-02-15' "+
//           // "UNION ALL "+            
//           // "SELECT SN_SEASON_ID,SN_PARTY_CODE,PARTY_NAME,CITY_ID,CONCAT(SN_ORDER_NO,' TOTAL'),'','','','',SUM(SN_UNITS),SUM(SN_ABD_TOTAL_MTR),'','' FROM SALES.D_SAL_SALENOTE_DATA A,DINESHMILLS.D_SAL_QUALITY_MASTER Q, DINESHMILLS.D_SAL_PARTY_MASTER P WHERE QUALITY_ID = SN_QUALITY_ID AND SEASON_ID = SN_SEASON_ID AND SN_PARTY_CODE IN('279965','300153','300156','300170','319907','412607','509912','510201','510501','559901','619915','670201','739901','739905') AND SN_SEASON_ID ='S14' AND SN_CANCELLED =0 AND CATEGORY_LIST IN ('REGULAR','S-QL') AND PARTY_CODE=SN_PARTY_CODE AND SN_ORDER_DATE>='2013-12-16' AND SN_ORDER_DATE<='2014-02-15' "+
//           // "GROUP BY SN_PARTY_CODE,SN_ORDER_NO "+
//           // "UNION ALL "+
//           // "SELECT SN_SEASON_ID,SN_PARTY_CODE,PARTY_NAME,CITY_ID,'total','','','','',SUM(SN_UNITS),SUM(SN_ABD_TOTAL_MTR),'','' FROM SALES.D_SAL_SALENOTE_DATA A,DINESHMILLS.D_SAL_QUALITY_MASTER Q, DINESHMILLS.D_SAL_PARTY_MASTER P WHERE QUALITY_ID = SN_QUALITY_ID AND SEASON_ID = SN_SEASON_ID AND SN_PARTY_CODE IN('279965','300153','300156','300170','319907','412607','509912','510201','510501','559901','619915','670201','739901','739905') AND SN_SEASON_ID ='S14' AND SN_CANCELLED =0 AND CATEGORY_LIST IN ('REGULAR','S-QL') AND PARTY_CODE=SN_PARTY_CODE AND SN_ORDER_DATE>='2013-12-16' AND SN_ORDER_DATE<='2014-02-15' "+
//           // "GROUP BY SN_PARTY_CODE "+
//           // "ORDER BY SN_PARTY_CODE,SN_ORDER_NO,SN_QUALITY_ID+0,SN_SHADE+0,SN_UNIT_ID+0";
//           
//            String str="SELECT A.*,SUBSTRING(B.PARTY_NAME,1,18) AS PARTYNAME FROM D_SAL_INVOICE_HEADER A,D_SAL_PARTY_MASTER B WHERE INVOICE_TYPE=3 AND A.PARTY_CODE=B.PARTY_CODE AND A.CANCELLED=0";
//            
//            try {
//                /*if(!txtFromVoucher.getText().trim().equals("")) {
//                    Condition+=" AND A.VOUCHER_NO>='"+txtFromVoucher.getText()+"' ";
//                }
//                
//                if(!txtToVoucher.getText().trim().equals("")) {
//                    Condition+=" AND A.VOUCHER_NO<='"+txtToVoucher.getText()+"' ";
//                }
//                */
//                if(!FromDate.equals("")) {
//                    //Condition+=" AND A.INVOICE_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
//                    Condition+=" AND A.INVOICE_DATE>='"+FromDate+"' ";
//                }
//                
//                if(!ToDate.equals("")) {
//                    //Condition+=" AND A.INVOICE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
//                    Condition+=" AND A.INVOICE_DATE<='"+ToDate+"' ";
//                }
//                
//                Condition+=" ORDER BY A.INVOICE_NO " ;
//                /*
//                if(!txtBookCode.getText().trim().equals("")) {
//                    Condition+=" AND A.BOOK_CODE='"+txtBookCode.getText()+"' ";
//                }
//                
//                if(!txtFromAmount.getText().trim().equals("")) {
//                    Condition+=" AND B.AMOUNT>="+txtFromAmount.getText()+" ";
//                }
//                
//                if(!txtToAmount.getText().trim().equals("")) {
//                    Condition+=" AND B.AMOUNT<="+txtToAmount.getText()+" ";
//                }
//                
//                if(!txtMainCode.getText().trim().equals("")) {
//                    Condition+=" AND SUBSTRING(B.MAIN_ACCOUNT_CODE,1,6)='"+txtMainCode.getText()+"' ";
//                }
//                
//                if(!txtSubCode.getText().trim().equals("")) {
//                    Condition+=" AND B.SUB_ACCOUNT_CODE='"+txtSubCode.getText()+"' ";
//                }                
//                */
//            }
//            catch(Exception e) {
//                e.printStackTrace();
//            }
//            
//            ResultSet  rsTemp =data.getResult(str+Condition);
//            while(!rsTemp.isAfterLast()){
//                m++;
//                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();                
//                
//                objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsTemp,"PARTY_CODE",""));
//                objRow.setValue("PARTYNAME",UtilFunctions.getString(rsTemp,"PARTYNAME",""));
//                objRow.setValue("STATION_CODE",UtilFunctions.getString(rsTemp,"STATION_CODE",""));
//                objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsTemp,"INVOICE_NO",""));
//                objRow.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTemp,"INVOICE_DATE","")));
//                objRow.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
//                objRow.setValue("PIECE_NO",UtilFunctions.getString(rsTemp,"PIECE_NO",""));
//                objRow.setValue("BALE_NO",UtilFunctions.getString(rsTemp,"BALE_NO",""));
//                objRow.setValue("GATEPASS_NO",UtilFunctions.getString(rsTemp,"GATEPASS_NO",""));
//                objRow.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
//                objRow.setValue("PAYMENT_TERM_CODE",UtilFunctions.getString(rsTemp,"PAYMENT_TERM_CODE",""));
//                objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
//                objRow.setValue("COLUMN_6_AMT",UtilFunctions.getString(rsTemp,"COLUMN_6_AMT",""));
//                objRow.setValue("COLUMN_25_AMT",UtilFunctions.getString(rsTemp,"COLUMN_25_AMT",""));
//                objRow.setValue("COLUMN_24_AMT",UtilFunctions.getString(rsTemp,"COLUMN_24_AMT",""));
//                //objRow.setValue("COLUMN_8_AMT",UtilFunctions.getString(rsTemp,"COLUMN_8_AMT",""));
//                objRow.setValue("COLUMN_9_AMT",UtilFunctions.getString(rsTemp,"COLUMN_9_AMT",""));
//                objRow.setValue("COLUMN_16_AMT",UtilFunctions.getString(rsTemp,"COLUMN_16_AMT",""));
//                objRow.setValue("TRD_DISCOUNT",UtilFunctions.getString(rsTemp,"TRD_DISCOUNT",""));
//                objRow.setValue("TOTAL_SQ_MTR",UtilFunctions.getString(rsTemp,"TOTAL_SQ_MTR",""));
//                objRow.setValue("COLUMN_12_AMT",UtilFunctions.getString(rsTemp,"COLUMN_12_AMT",""));
//                objRow.setValue("COLUMN_1_AMT",UtilFunctions.getString(rsTemp,"COLUMN_1_AMT",""));
//                objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
//                objRow.setValue("TOTAL_GROSS_QTY",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_QTY",""));
//                objRow.setValue("TOTAL_NET_QTY",UtilFunctions.getString(rsTemp,"TOTAL_NET_QTY",""));
//                objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
//                objRow.setValue("TOTAL_VALUE",UtilFunctions.getString(rsTemp,"TOTAL_VALUE",""));
//                objRow.setValue("NET_AMOUNT",UtilFunctions.getString(rsTemp,"NET_AMOUNT",""));
//                objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
////                objRow.setValue("VAT4",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT4",0)));
////                objRow.setValue("VAT1",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT1",0)));
////                objRow.setValue("CST2",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST2",0)));
////                objRow.setValue("CST5",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST5",0)));
//                objRow.setValue("CGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"CGST_AMT",0)));
//                objRow.setValue("SGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"SGST_AMT",0)));
//                objRow.setValue("IGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"IGST_AMT",0)));
//                
//                objData.AddRow(objRow);
//                
//                rsTemp.next();
//            }
//            
//           HashMap parameter=new HashMap();
//            parameter.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
//            parameter.put("FROM_DATE",EITLERPGLOBAL.formatDate(FromDate));
//            parameter.put("TO_DATE",EITLERPGLOBAL.formatDate(ToDate));
//            parameter.put("BOOK_CODE",BookCode);
//            parameter.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode));
//            parameter.put("TOTAL_INVOICE_NO",Integer.toString(m));
//            
//           // EITLERPGLOBAL.PAGE_BREAK=true;
//            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptsjv010.rpt",parameter,objData);
//            rsTemp.close();
//        }catch(SQLException e) {
//            e.printStackTrace();
//        }
//        
//        ////SUMMARY
//        try{
//             System.gc();
//             int j=0;
//             String Condition="";
//             TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
//             
//             objData.AddColumn("INVOICE_TYPE");
//             objData.AddColumn("INVOICE_NO");
//             objData.AddColumn("TOTAL_GROSS_QTY");
//             objData.AddColumn("TOTAL_NET_QTY");
//             objData.AddColumn("TOTAL_GROSS_AMOUNT");
//             objData.AddColumn("COLUMN_9_AMT");
//             objData.AddColumn("COLUMN_16_AMT");
//             objData.AddColumn("TOTAL_NET_AMOUNT");
//             objData.AddColumn("COLUMN_1_AMT");
//             objData.AddColumn("TOTAL_VALUE");
//             objData.AddColumn("NET_AMOUNT");             
//             objData.AddColumn("COLUMN_25_AMT");
//             objData.AddColumn("COLUMN_24_AMT");             
//             objData.AddColumn("COLUMN_8_AMT");
//             objData.AddColumn("VAT4");
//             objData.AddColumn("VAT1");
//             objData.AddColumn("CST2");
//             objData.AddColumn("CST5");
//             objData.AddColumn("COLUMN_12_AMT");
//             objData.AddColumn("TOTAL_SQ_MTR");
//             objData.AddColumn("TRD_DISCOUNT");             
//             objData.AddColumn("CGST_AMT");
//             objData.AddColumn("SGST_AMT");
//             objData.AddColumn("IGST_AMT");
//             
//             
//             String str="SELECT 'WH + OSG' AS INVOICE_NO,SUM(TOTAL_GROSS_QTY) AS TOTAL_GROSS_QTY, SUM(TOTAL_GROSS_AMOUNT) AS TOTAL_GROSS_AMOUNT, SUM(COLUMN_9_AMT) AS COLUMN_9_AMT, SUM(COLUMN_16_AMT) AS COLUMN_16_AMT, SUM(TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT, SUM(COLUMN_1_AMT) AS COLUMN_1_AMT, SUM(TOTAL_VALUE) AS TOTAL_VALUE,SUM(A.NET_AMOUNT) AS NET_AMOUNT, SUM(COLUMN_25_AMT) AS COLUMN_25_AMT, SUM(COLUMN_24_AMT) AS COLUMN_24_AMT,SUM(VAT4) AS VAT4,SUM(A.VAT1) AS VAT1,SUM(CST5) AS CST5,SUM(A.CST2) AS CST2, SUM(COLUMN_12_AMT) AS COLUMN_12_AMT, SUM(TOTAL_SQ_MTR) AS TOTAL_SQ_MTR,SUM(TOTAL_NET_QTY) AS TOTAL_NET_QTY  FROM D_SAL_INVOICE_HEADER A WHERE INVOICE_TYPE='3' AND   INVOICE_DATE>='"+FromDate+"' AND  INVOICE_DATE<='"+ToDate+"' AND CANCELLED='0' ";                
//                
//             ResultSet  rsTemp =data.getResult(str);
//             while(!rsTemp.isAfterLast()){
//                 j++;
//                 TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
//                 
//                 objRow.setValue("INVOICE_TYPE",UtilFunctions.getString(rsTemp,"INVOICE_TYPE",""));                                  
//                 objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsTemp,"INVOICE_NO",""));                 
//                 objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));                 
//                 objRow.setValue("COLUMN_25_AMT",UtilFunctions.getString(rsTemp,"COLUMN_25_AMT",""));
//                 objRow.setValue("COLUMN_24_AMT",UtilFunctions.getString(rsTemp,"COLUMN_24_AMT",""));
//                 objRow.setValue("COLUMN_8_AMT",UtilFunctions.getString(rsTemp,"COLUMN_8_AMT",""));
//                 objRow.setValue("COLUMN_9_AMT",UtilFunctions.getString(rsTemp,"COLUMN_9_AMT",""));
//                 objRow.setValue("COLUMN_16_AMT",UtilFunctions.getString(rsTemp,"COLUMN_16_AMT",""));
//                 objRow.setValue("TRD_DISCOUNT",UtilFunctions.getString(rsTemp,"TRD_DISCOUNT",""));
//                 objRow.setValue("TOTAL_SQ_MTR",UtilFunctions.getString(rsTemp,"TOTAL_SQ_MTR",""));
//                 objRow.setValue("COLUMN_12_AMT",UtilFunctions.getString(rsTemp,"COLUMN_12_AMT",""));
//                 objRow.setValue("COLUMN_1_AMT",UtilFunctions.getString(rsTemp,"COLUMN_1_AMT",""));
//                 objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
//                 objRow.setValue("TOTAL_GROSS_QTY",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_QTY",""));
//                 objRow.setValue("TOTAL_NET_QTY",UtilFunctions.getString(rsTemp,"TOTAL_NET_QTY",""));
//                 objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
//                 objRow.setValue("TOTAL_VALUE",UtilFunctions.getString(rsTemp,"TOTAL_VALUE",""));
//                 objRow.setValue("NET_AMOUNT",UtilFunctions.getString(rsTemp,"NET_AMOUNT",""));
//                 objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
//                 objRow.setValue("VAT4",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT4",0)));
//                 objRow.setValue("VAT1",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT1",0)));
//                 objRow.setValue("CST2",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST2",0)));
//                 objRow.setValue("CST5",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST5",0)));                 
//                 objRow.setValue("CGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"CGST_AMT",0)));
//                 objRow.setValue("SGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"SGST_AMT",0)));                 
//                 objRow.setValue("IGST_AMT",dFormat.format(UtilFunctions.getDouble(rsTemp,"IGST_AMT",0))); 
//                 objData.AddRow(objRow);
//                 
//                 rsTemp.next();
//             }
//             
//             HashMap parameter=new HashMap();
//             parameter.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
//             parameter.put("FROM_DATE",EITLERPGLOBAL.formatDate(FromDate));
//             parameter.put("TO_DATE",EITLERPGLOBAL.formatDate(ToDate));
//             parameter.put("BOOK_CODE",BookCode);
//             parameter.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode)+" SUMMARY");             
//             // EITLERPGLOBAL.PAGE_BREAK=true;
//             new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptsjv011Summary.rpt",parameter,objData);
//             rsTemp.close();
//             
//         }catch(SQLException e) {
//             e.printStackTrace();
//             
//          }
//    }
      
      public void GenerateSJV11(String FromDate,String ToDate,String BookCode) {
        try{
            String Condition="";
            int m=0;
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("AGENT_SR_NO");
            objData.AddColumn("PARTYNAME");            
            objData.AddColumn("PIECE_NO");
            objData.AddColumn("BALE_NO");      
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("GATEPASS_NO");
            objData.AddColumn("PAYMENT_TERM_CODE");
            objData.AddColumn("STATION_CODE");
            objData.AddColumn("TOTAL_GROSS_AMOUNT");
            objData.AddColumn("GROSS_WEIGHT");
            objData.AddColumn("COLUMN_6_AMT");
            objData.AddColumn("COLUMN_25_AMT");
            objData.AddColumn("COLUMN_24_AMT");
            //objData.AddColumn("COLUMN_8_AMT");      
            objData.AddColumn("COLUMN_9_AMT");
            objData.AddColumn("COLUMN_16_AMT");
            objData.AddColumn("TRD_DISCOUNT");
            objData.AddColumn("TOTAL_SQ_MTR");
            objData.AddColumn("COLUMN_12_AMT");
            objData.AddColumn("COLUMN_1_AMT");            
            objData.AddColumn("TOTAL_NET_AMOUNT");
            objData.AddColumn("TOTAL_GROSS_QTY");
            objData.AddColumn("TOTAL_NET_QTY");
            objData.AddColumn("TOTAL_GROSS_AMOUNT");
            objData.AddColumn("TOTAL_VALUE");
            objData.AddColumn("NET_AMOUNT");
            objData.AddColumn("VAT4");
            objData.AddColumn("VAT1");
            objData.AddColumn("CST2");
            objData.AddColumn("CST5");
            
           // String str="SELECT SN_SEASON_ID,SN_PARTY_CODE,PARTY_NAME,CITY_ID,SN_ORDER_NO, SN_ORDER_DATE,SN_QUALITY_ID,SN_SHADE,SN_UNIT_ID,SN_UNITS,SN_ABD_TOTAL_MTR,CATEGORY_LIST,QLT_NEW_OLD FROM SALES.D_SAL_SALENOTE_DATA A,DINESHMILLS.D_SAL_QUALITY_MASTER Q, DINESHMILLS.D_SAL_PARTY_MASTER P WHERE QUALITY_ID = SN_QUALITY_ID AND SEASON_ID = SN_SEASON_ID AND SN_PARTY_CODE IN('279965','300153','300156','300170','319907','412607','509912','510201','510501','559901','619915','670201','739901','739905') AND SN_SEASON_ID ='S14' AND SN_CANCELLED =0  AND CATEGORY_LIST IN ('REGULAR','S-QL') AND PARTY_CODE=SN_PARTY_CODE AND SN_ORDER_DATE>='2013-12-16' AND SN_ORDER_DATE<='2014-02-15' "+
           // "UNION ALL "+            
           // "SELECT SN_SEASON_ID,SN_PARTY_CODE,PARTY_NAME,CITY_ID,CONCAT(SN_ORDER_NO,' TOTAL'),'','','','',SUM(SN_UNITS),SUM(SN_ABD_TOTAL_MTR),'','' FROM SALES.D_SAL_SALENOTE_DATA A,DINESHMILLS.D_SAL_QUALITY_MASTER Q, DINESHMILLS.D_SAL_PARTY_MASTER P WHERE QUALITY_ID = SN_QUALITY_ID AND SEASON_ID = SN_SEASON_ID AND SN_PARTY_CODE IN('279965','300153','300156','300170','319907','412607','509912','510201','510501','559901','619915','670201','739901','739905') AND SN_SEASON_ID ='S14' AND SN_CANCELLED =0 AND CATEGORY_LIST IN ('REGULAR','S-QL') AND PARTY_CODE=SN_PARTY_CODE AND SN_ORDER_DATE>='2013-12-16' AND SN_ORDER_DATE<='2014-02-15' "+
           // "GROUP BY SN_PARTY_CODE,SN_ORDER_NO "+
           // "UNION ALL "+
           // "SELECT SN_SEASON_ID,SN_PARTY_CODE,PARTY_NAME,CITY_ID,'total','','','','',SUM(SN_UNITS),SUM(SN_ABD_TOTAL_MTR),'','' FROM SALES.D_SAL_SALENOTE_DATA A,DINESHMILLS.D_SAL_QUALITY_MASTER Q, DINESHMILLS.D_SAL_PARTY_MASTER P WHERE QUALITY_ID = SN_QUALITY_ID AND SEASON_ID = SN_SEASON_ID AND SN_PARTY_CODE IN('279965','300153','300156','300170','319907','412607','509912','510201','510501','559901','619915','670201','739901','739905') AND SN_SEASON_ID ='S14' AND SN_CANCELLED =0 AND CATEGORY_LIST IN ('REGULAR','S-QL') AND PARTY_CODE=SN_PARTY_CODE AND SN_ORDER_DATE>='2013-12-16' AND SN_ORDER_DATE<='2014-02-15' "+
           // "GROUP BY SN_PARTY_CODE "+
           // "ORDER BY SN_PARTY_CODE,SN_ORDER_NO,SN_QUALITY_ID+0,SN_SHADE+0,SN_UNIT_ID+0";
           
            String str="SELECT A.*,SUBSTRING(B.PARTY_NAME,1,18) AS PARTYNAME FROM D_SAL_INVOICE_HEADER A,D_SAL_PARTY_MASTER B WHERE INVOICE_TYPE=3 AND A.PARTY_CODE=B.PARTY_CODE AND A.CANCELLED=0";
            
            try {
                /*if(!txtFromVoucher.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_NO>='"+txtFromVoucher.getText()+"' ";
                }
                
                if(!txtToVoucher.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_NO<='"+txtToVoucher.getText()+"' ";
                }
                */
                if(!FromDate.equals("")) {
                    //Condition+=" AND A.INVOICE_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                    Condition+=" AND A.INVOICE_DATE>='"+FromDate+"' ";
                }
                
                if(!ToDate.equals("")) {
                    //Condition+=" AND A.INVOICE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                    Condition+=" AND A.INVOICE_DATE<='"+ToDate+"' ";
                }
                
                Condition+=" ORDER BY A.INVOICE_NO " ;
                /*
                if(!txtBookCode.getText().trim().equals("")) {
                    Condition+=" AND A.BOOK_CODE='"+txtBookCode.getText()+"' ";
                }
                
                if(!txtFromAmount.getText().trim().equals("")) {
                    Condition+=" AND B.AMOUNT>="+txtFromAmount.getText()+" ";
                }
                
                if(!txtToAmount.getText().trim().equals("")) {
                    Condition+=" AND B.AMOUNT<="+txtToAmount.getText()+" ";
                }
                
                if(!txtMainCode.getText().trim().equals("")) {
                    Condition+=" AND SUBSTRING(B.MAIN_ACCOUNT_CODE,1,6)='"+txtMainCode.getText()+"' ";
                }
                
                if(!txtSubCode.getText().trim().equals("")) {
                    Condition+=" AND B.SUB_ACCOUNT_CODE='"+txtSubCode.getText()+"' ";
                }                
                */
            }
            catch(Exception e) {
                e.printStackTrace();
            }
            
            ResultSet  rsTemp =data.getResult(str+Condition);
            while(!rsTemp.isAfterLast()){
                m++;
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();                
                
                objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsTemp,"PARTY_CODE",""));
                objRow.setValue("PARTYNAME",UtilFunctions.getString(rsTemp,"PARTYNAME",""));
                objRow.setValue("STATION_CODE",UtilFunctions.getString(rsTemp,"STATION_CODE",""));
                objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsTemp,"INVOICE_NO",""));
                objRow.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTemp,"INVOICE_DATE","")));
                objRow.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
                objRow.setValue("PIECE_NO",UtilFunctions.getString(rsTemp,"PIECE_NO",""));
                objRow.setValue("BALE_NO",UtilFunctions.getString(rsTemp,"BALE_NO",""));
                objRow.setValue("GATEPASS_NO",UtilFunctions.getString(rsTemp,"GATEPASS_NO",""));
                objRow.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
                objRow.setValue("PAYMENT_TERM_CODE",UtilFunctions.getString(rsTemp,"PAYMENT_TERM_CODE",""));
                objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                objRow.setValue("COLUMN_6_AMT",UtilFunctions.getString(rsTemp,"COLUMN_6_AMT",""));
                objRow.setValue("COLUMN_25_AMT",UtilFunctions.getString(rsTemp,"COLUMN_25_AMT",""));
                objRow.setValue("COLUMN_24_AMT",UtilFunctions.getString(rsTemp,"COLUMN_24_AMT",""));
                //objRow.setValue("COLUMN_8_AMT",UtilFunctions.getString(rsTemp,"COLUMN_8_AMT",""));
                objRow.setValue("COLUMN_9_AMT",UtilFunctions.getString(rsTemp,"COLUMN_9_AMT",""));
                objRow.setValue("COLUMN_16_AMT",UtilFunctions.getString(rsTemp,"COLUMN_16_AMT",""));
                objRow.setValue("TRD_DISCOUNT",UtilFunctions.getString(rsTemp,"TRD_DISCOUNT",""));
                objRow.setValue("TOTAL_SQ_MTR",UtilFunctions.getString(rsTemp,"TOTAL_SQ_MTR",""));
                objRow.setValue("COLUMN_12_AMT",UtilFunctions.getString(rsTemp,"COLUMN_12_AMT",""));
                objRow.setValue("COLUMN_1_AMT",UtilFunctions.getString(rsTemp,"COLUMN_1_AMT",""));
                objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                objRow.setValue("TOTAL_GROSS_QTY",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_QTY",""));
                objRow.setValue("TOTAL_NET_QTY",UtilFunctions.getString(rsTemp,"TOTAL_NET_QTY",""));
                objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                objRow.setValue("TOTAL_VALUE",UtilFunctions.getString(rsTemp,"TOTAL_VALUE",""));
                objRow.setValue("NET_AMOUNT",UtilFunctions.getString(rsTemp,"NET_AMOUNT",""));
                objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                objRow.setValue("VAT4",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT4",0)));
                objRow.setValue("VAT1",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT1",0)));
                objRow.setValue("CST2",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST2",0)));
                objRow.setValue("CST5",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST5",0)));
                
                objData.AddRow(objRow);
                
                rsTemp.next();
            }
            
           HashMap parameter=new HashMap();
            parameter.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            parameter.put("FROM_DATE",EITLERPGLOBAL.formatDate(FromDate));
            parameter.put("TO_DATE",EITLERPGLOBAL.formatDate(ToDate));
            parameter.put("BOOK_CODE",BookCode);
            parameter.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode));
            parameter.put("TOTAL_INVOICE_NO",Integer.toString(m));
            
           // EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptsjv010.rpt",parameter,objData);
            rsTemp.close();
        }catch(SQLException e) {
            e.printStackTrace();
        }
        
        ////SUMMARY
        try{
             System.gc();
             int j=0;
             String Condition="";
             TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
             
             objData.AddColumn("INVOICE_TYPE");
             objData.AddColumn("INVOICE_NO");
             objData.AddColumn("TOTAL_GROSS_QTY");
             objData.AddColumn("TOTAL_NET_QTY");
             objData.AddColumn("TOTAL_GROSS_AMOUNT");
             objData.AddColumn("COLUMN_9_AMT");
             objData.AddColumn("COLUMN_16_AMT");
             objData.AddColumn("TOTAL_NET_AMOUNT");
             objData.AddColumn("COLUMN_1_AMT");
             objData.AddColumn("TOTAL_VALUE");
             objData.AddColumn("NET_AMOUNT");             
             objData.AddColumn("COLUMN_25_AMT");
             objData.AddColumn("COLUMN_24_AMT");             
             objData.AddColumn("COLUMN_8_AMT");
             objData.AddColumn("VAT4");
             objData.AddColumn("VAT1");
             objData.AddColumn("CST2");
             objData.AddColumn("CST5");
             objData.AddColumn("COLUMN_12_AMT");
             objData.AddColumn("TOTAL_SQ_MTR");
             objData.AddColumn("TRD_DISCOUNT");             
             
             
             String str="SELECT 'WH + OSG' AS INVOICE_NO,SUM(TOTAL_GROSS_QTY) AS TOTAL_GROSS_QTY, SUM(TOTAL_GROSS_AMOUNT) AS TOTAL_GROSS_AMOUNT, SUM(COLUMN_9_AMT) AS COLUMN_9_AMT, SUM(COLUMN_16_AMT) AS COLUMN_16_AMT, SUM(TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT, SUM(COLUMN_1_AMT) AS COLUMN_1_AMT, SUM(TOTAL_VALUE) AS TOTAL_VALUE,SUM(A.NET_AMOUNT) AS NET_AMOUNT, SUM(COLUMN_25_AMT) AS COLUMN_25_AMT, SUM(COLUMN_24_AMT) AS COLUMN_24_AMT,SUM(VAT4) AS VAT4,SUM(A.VAT1) AS VAT1,SUM(CST5) AS CST5,SUM(A.CST2) AS CST2, SUM(COLUMN_12_AMT) AS COLUMN_12_AMT, SUM(TOTAL_SQ_MTR) AS TOTAL_SQ_MTR,SUM(TOTAL_NET_QTY) AS TOTAL_NET_QTY  FROM D_SAL_INVOICE_HEADER A WHERE INVOICE_TYPE='3' AND   INVOICE_DATE>='"+FromDate+"' AND  INVOICE_DATE<='"+ToDate+"' AND CANCELLED='0' ";                
                
             ResultSet  rsTemp =data.getResult(str);
             while(!rsTemp.isAfterLast()){
                 j++;
                 TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                 
                 objRow.setValue("INVOICE_TYPE",UtilFunctions.getString(rsTemp,"INVOICE_TYPE",""));                                  
                 objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsTemp,"INVOICE_NO",""));                 
                 objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));                 
                 objRow.setValue("COLUMN_25_AMT",UtilFunctions.getString(rsTemp,"COLUMN_25_AMT",""));
                 objRow.setValue("COLUMN_24_AMT",UtilFunctions.getString(rsTemp,"COLUMN_24_AMT",""));
                 objRow.setValue("COLUMN_8_AMT",UtilFunctions.getString(rsTemp,"COLUMN_8_AMT",""));
                 objRow.setValue("COLUMN_9_AMT",UtilFunctions.getString(rsTemp,"COLUMN_9_AMT",""));
                 objRow.setValue("COLUMN_16_AMT",UtilFunctions.getString(rsTemp,"COLUMN_16_AMT",""));
                 objRow.setValue("TRD_DISCOUNT",UtilFunctions.getString(rsTemp,"TRD_DISCOUNT",""));
                 objRow.setValue("TOTAL_SQ_MTR",UtilFunctions.getString(rsTemp,"TOTAL_SQ_MTR",""));
                 objRow.setValue("COLUMN_12_AMT",UtilFunctions.getString(rsTemp,"COLUMN_12_AMT",""));
                 objRow.setValue("COLUMN_1_AMT",UtilFunctions.getString(rsTemp,"COLUMN_1_AMT",""));
                 objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                 objRow.setValue("TOTAL_GROSS_QTY",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_QTY",""));
                 objRow.setValue("TOTAL_NET_QTY",UtilFunctions.getString(rsTemp,"TOTAL_NET_QTY",""));
                 objRow.setValue("TOTAL_GROSS_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_AMOUNT",""));
                 objRow.setValue("TOTAL_VALUE",UtilFunctions.getString(rsTemp,"TOTAL_VALUE",""));
                 objRow.setValue("NET_AMOUNT",UtilFunctions.getString(rsTemp,"NET_AMOUNT",""));
                 objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                 objRow.setValue("VAT4",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT4",0)));
                 objRow.setValue("VAT1",dFormat.format(UtilFunctions.getDouble(rsTemp,"VAT1",0)));
                 objRow.setValue("CST2",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST2",0)));
                 objRow.setValue("CST5",dFormat.format(UtilFunctions.getDouble(rsTemp,"CST5",0)));                 
                 objData.AddRow(objRow);
                 
                 rsTemp.next();
             }
             
             HashMap parameter=new HashMap();
             parameter.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
             parameter.put("FROM_DATE",EITLERPGLOBAL.formatDate(FromDate));
             parameter.put("TO_DATE",EITLERPGLOBAL.formatDate(ToDate));
             parameter.put("BOOK_CODE",BookCode);
             parameter.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode)+" SUMMARY");             
             // EITLERPGLOBAL.PAGE_BREAK=true;
             new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptsjv011Summary.rpt",parameter,objData);
             rsTemp.close();
             
         }catch(SQLException e) {
             e.printStackTrace();
             
          }
    }
      
      
      private void GenerateSJVBook() {
        try {
            String Condition="";
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("VOUCHER_NO");
            objReportData.AddColumn("LEGACY_NO");
            objReportData.AddColumn("VOUCHER_DATE");
            objReportData.AddColumn("MAIN_CODE");
            objReportData.AddColumn("SUB_CODE");
            objReportData.AddColumn("PARTY_NAME");
            objReportData.AddColumn("REMARKS");
            objReportData.AddColumn("ST");
            objReportData.AddColumn("CHEQUE_NO");
            objReportData.AddColumn("CHEQUE_DATE");
            objReportData.AddColumn("PO_NO");
            objReportData.AddColumn("PO_DATE");
            objReportData.AddColumn("INVOICE_NO");
            objReportData.AddColumn("INVOICE_DATE");
            objReportData.AddColumn("ALLOCATION_CODE");
            objReportData.AddColumn("ALLOCATION_AC_NAME");
            //objReportData.AddColumn("ALLOCATION_AMOUNT_C");
            //objReportData.AddColumn("ALLOCATION_AMOUNT_D");
            objReportData.AddColumn("ALLOCATION_AMOUNT");
            objReportData.AddColumn("LINK_NO");
            objReportData.AddColumn("SIGN");
            objReportData.AddColumn("REASON_CODE");
            
            String strSQL="SELECT DISTINCT(A.VOUCHER_NO) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL B WHERE " +
            "A.VOUCHER_NO=B.VOUCHER_NO AND A.COMPANY_ID=B.COMPANY_ID AND A.APPROVED=1 AND A.CANCELLED=0 ";
            try {
                if(!txtFromVoucher.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_NO>='"+txtFromVoucher.getText()+"' ";
                }
                
                if(!txtToVoucher.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_NO<='"+txtToVoucher.getText()+"' ";
                }
                
                if(!txtFromDate.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                }
                
                if(!txtToDate.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                }
                
                if(!txtBookCode.getText().trim().equals("")) {
                    Condition+=" AND A.BOOK_CODE='"+txtBookCode.getText()+"' ";
                }
                
                if(!txtFromAmount.getText().trim().equals("")) {
                    Condition+=" AND B.AMOUNT>="+txtFromAmount.getText()+" ";
                }
                
                if(!txtToAmount.getText().trim().equals("")) {
                    Condition+=" AND B.AMOUNT<="+txtToAmount.getText()+" ";
                }
                
                if(!txtMainCode.getText().trim().equals("")) {
                    Condition+=" AND SUBSTRING(B.MAIN_ACCOUNT_CODE,1,6)='"+txtMainCode.getText()+"' ";
                }
                
                if(!txtSubCode.getText().trim().equals("")) {
                    Condition+=" AND B.SUB_ACCOUNT_CODE='"+txtSubCode.getText()+"' ";
                }
                
                
            }
            catch(Exception e) {
                e.printStackTrace();
            }
            strSQL = strSQL + Condition;
            int SortOrder=EITLERPGLOBAL.getComboCode(cmbSort);
            double cBookTotal = 0;
            double dBookTotal = 0;
            switch(SortOrder) {
                case 1: strSQL+=" ORDER BY A.VOUCHER_NO ";break;
                case 2: strSQL+=" ORDER BY A.VOUCHER_DATE ";break;
                case 3: strSQL+=" ORDER BY A.BOOK_CODE ";break;
                case 4: strSQL+=" ORDER BY CONVERT(A.LEGACY_NO,SIGNED) ";break;
            }
            
            
            
            ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    
                    String VoucherNo=UtilFunctions.getString(rsTmp,"VOUCHER_NO"," ");
                     double cVoucherTotal = 0;
                     double dVoucherTotal = 0;
                    //Find unique Blocks within voucher entry
                    ResultSet rsBlock=data.getResult("SELECT DISTINCT(BLOCK_NO) FROM D_FIN_VOUCHER_DETAIL_EX WHERE VOUCHER_NO='"+VoucherNo+"' ",FinanceGlobal.FinURL);
                    int cnt=data.getIntValueFromDB("SELECT COUNT(DISTINCT(BLOCK_NO)) FROM D_FIN_VOUCHER_DETAIL_EX WHERE VOUCHER_NO='"+VoucherNo+"' ",FinanceGlobal.FinURL);
                    boolean noSubCode = false;
                    if(rsBlock.getRow()>0) {
                        while(!rsBlock.isAfterLast()) {
                            int BlockNo=UtilFunctions.getInt(rsBlock,"BLOCK_NO",0);
                            int creditcount=0;
                            ResultSet rsVoucher;
                            
                            //Check if there is a record with sub code
                            if(data.IsRecordExist("SELECT VOUCHER_NO FROM D_FIN_VOUCHER_DETAIL_EX WHERE VOUCHER_NO='"+VoucherNo+"' AND BLOCK_NO="+BlockNo+" AND TRIM(SUB_ACCOUNT_CODE)<>''",FinanceGlobal.FinURL)) {
                                rsVoucher=data.getResult("SELECT *,B.LINK_NO,A.REMARKS AS HEADER_REMARKS FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.VOUCHER_NO='"+VoucherNo+"' AND B.BLOCK_NO="+BlockNo+" ORDER BY SUB_ACCOUNT_CODE DESC",FinanceGlobal.FinURL);                                
                                creditcount=data.getIntValueFromDB("SELECT COUNT(EFFECT) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.VOUCHER_NO='"+VoucherNo+"' AND B.BLOCK_NO="+BlockNo+" AND EFFECT='C' ORDER BY EFFECT",FinanceGlobal.FinURL);
                                noSubCode = false;
                            }
                            else {
                                //Give priority to credit entry first and move other record to allocation side
                                rsVoucher=data.getResult("SELECT *,B.LINK_NO,A.REMARKS AS HEADER_REMARKS FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.VOUCHER_NO='"+VoucherNo+"' AND B.BLOCK_NO="+BlockNo+" ORDER BY EFFECT",FinanceGlobal.FinURL);                                
                                creditcount=data.getIntValueFromDB("SELECT COUNT(EFFECT) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.VOUCHER_NO='"+VoucherNo+"' AND B.BLOCK_NO="+BlockNo+" AND EFFECT='C' ORDER BY EFFECT",FinanceGlobal.FinURL);
                                noSubCode = true;
                            }
                            
                            //(1) First Record
                            rsVoucher.first();
                            
                            TReportWriter.SimpleDataProvider.TRow objRow=objReportData.newRow();
                            
                            objRow.setValue("VOUCHER_NO",UtilFunctions.getString(rsVoucher,"VOUCHER_NO",""));
                            objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsVoucher,"LEGACY_NO",""));
                            objRow.setValue("VOUCHER_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"VOUCHER_DATE","")));
                            objRow.setValue("MAIN_CODE",UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE",""));
                            objRow.setValue("SUB_CODE",UtilFunctions.getString(rsVoucher,"SUB_ACCOUNT_CODE",""));
                            objRow.setValue("LINK_NO",UtilFunctions.getString(rsVoucher,"B.LINK_NO",""));                            
                            objRow.setValue("REASON_CODE",UtilFunctions.getString(rsVoucher,"REASON_CODE",""));                            
                            
                            String MainCode=UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE","");
                            String SubCode=UtilFunctions.getString(rsVoucher,"SUB_ACCOUNT_CODE","");
                            if(SubCode.equals("619662")) {
                                boolean halt=true;
                            }
                            String PartyName="";
                            
                            if(!SubCode.trim().equals("")) {
                                PartyName=clsPartyMaster.getAccountName(MainCode, SubCode).replace('\\',' ').replace('/',' ');
                                /*if(PartyName.length()>=30) {
                                    PartyName=PartyName.substring(0,30);
                                }*/
                            }
                            
                            objRow.setValue("PARTY_NAME",PartyName);
                            String HeaderRemarks = UtilFunctions.getString(rsVoucher,"HEADER_REMARKS","").replace('\n',' ').trim().replace('\\',' ').replace('/',' ');
                            if(HeaderRemarks.length()>=49) {   //Previous value was 57 updated as per requirement
                                HeaderRemarks=HeaderRemarks.substring(0,49);  //Previous value was 57 updated as per requirement
                            }
                            //objRow.setValue("REMARKS",UtilFunctions.getString(rsVoucher,"HEADER_REMARKS","").replace('\n',' ').trim().replace('\t',' ').replace('\\',' ').trim());
                            objRow.setValue("REMARKS",HeaderRemarks.replace('\n',' ').trim().replace('\t',' ').replace('\\',' ').trim());
                            objRow.setValue("CHEQUE_NO",UtilFunctions.getString(rsVoucher,"CHEQUE_NO",""));
                            objRow.setValue("CHEQUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"CHEQUE_DATE","")));
                            objRow.setValue("PO_NO",UtilFunctions.getString(rsVoucher,"PO_NO",""));
                            objRow.setValue("PO_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"PO_DATE","")));
                            objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsVoucher,"INVOICE_NO",""));
                            objRow.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"INVOICE_DATE","")));
                            
                            //Move to next record
                            rsVoucher.next();
                            if(creditcount>1){
                                for(int i=2;i<=creditcount;i++){
                                rsVoucher.next();
                                }
                            }
                            
                            String AllocationCode=UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE","");
                            String AllocationAcName=clsPartyMaster.getAccountName(AllocationCode, "");
                            if(AllocationAcName.length()>=28) {   //Previous value was 57 updated as per requirement
                                AllocationAcName=AllocationAcName.substring(0,28);  //Previous value was 57 updated as per requirement
                            }
                            objRow.setValue("ALLOCATION_CODE",AllocationCode);
                            objRow.setValue("ALLOCATION_AC_NAME",AllocationAcName.replace('\n',' ').trim().replace('\t',' ').replace('\\',' ').trim());
                            
                            if(UtilFunctions.getString(rsVoucher,"EFFECT","").trim().equals("C") || noSubCode) {                                
                                //objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0))));
                                objRow.setValue("ALLOCATION_AMOUNT",dFormat.format(Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0))));
                                //objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND EFFECT='C'",FinanceGlobal.FinURL)));
                                cBookTotal += Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0)); 
                                if(cnt>1){
                                 cVoucherTotal += Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));    
                                }
                            } else {
                                int debitcount=data.getIntValueFromDB("SELECT COUNT(EFFECT) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.VOUCHER_NO='"+VoucherNo+"' AND B.BLOCK_NO="+BlockNo+" AND EFFECT='D' ORDER BY EFFECT",FinanceGlobal.FinURL);
                                if(debitcount>1){
                                    double debittotal=0;
                                    for(int j=1;j<=debitcount;j++){
                                        debittotal+=Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));
                                        dBookTotal+= Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));
                                        rsVoucher.next();
                                    }
                                    //objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(debittotal));
                                    objRow.setValue("ALLOCATION_AMOUNT",dFormat.format(debittotal));
                                }else{
                                //objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0))));
                                  objRow.setValue("ALLOCATION_AMOUNT",dFormat.format(Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0))));
                                //objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND EFFECT='D'",FinanceGlobal.FinURL)));
                                dBookTotal += Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));
                                }
                                if(cnt>1){
                                 dVoucherTotal += Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));
                                }
                            }
                            
                            String STMainCode = data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND LENGTH(MAIN_ACCOUNT_CODE)=9 AND EFFECT='D'",FinanceGlobal.FinURL);
                            String STCode = STMainCode.substring(STMainCode.indexOf(".")+1);
                            objRow.setValue("ST",STCode);
                            
                            objReportData.AddRow(objRow);
                            
                            rsBlock.next();
                        }
                        if(cnt>1){
                           TReportWriter.SimpleDataProvider.TRow objRow=objReportData.newRow();
                
                             objRow.setValue("VOUCHER_NO","");
                             objRow.setValue("LEGACY_NO","");
                             objRow.setValue("VOUCHER_DATE","");
                             objRow.setValue("MAIN_CODE","");
                             objRow.setValue("SUB_CODE","");
                             objRow.setValue("PARTY_NAME","* * * V O U C H E R  T O T A L * * *");
                             objRow.setValue("REMARKS","");
                             objRow.setValue("CHEQUE_NO","");
                             objRow.setValue("CHEQUE_DATE","");
                             objRow.setValue("PO_NO","");
                             objRow.setValue("PO_DATE","");
                             objRow.setValue("INVOICE_NO","");
                             objRow.setValue("INVOICE_DATE","");
                             objRow.setValue("ALLOCATION_CODE","");
                             objRow.setValue("ALLOCATION_AC_NAME","");
                             //objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(dVoucherTotal));
                             //objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(cVoucherTotal));
                             objRow.setValue("ALLOCATION_AMOUNT",dFormat.format(cVoucherTotal));
                             objRow.setValue("ST","");
                             objRow.setValue("LINK_NO","");
                             objRow.setValue("SIGN"," *");
                             objReportData.AddRow(objRow); 
                        }
                    }
                    
                    rsTmp.next();
                }
                TReportWriter.SimpleDataProvider.TRow objRow=objReportData.newRow();
                
                objRow.setValue("VOUCHER_NO","");
                objRow.setValue("LEGACY_NO","");
                objRow.setValue("VOUCHER_DATE","");
                objRow.setValue("MAIN_CODE","");
                objRow.setValue("SUB_CODE","");
                objRow.setValue("PARTY_NAME","* * * B O O K T O T A L * * *");
                objRow.setValue("REMARKS","");
                objRow.setValue("CHEQUE_NO","");
                objRow.setValue("CHEQUE_DATE","");
                objRow.setValue("PO_NO","");
                objRow.setValue("PO_DATE","");
                objRow.setValue("INVOICE_NO","");
                objRow.setValue("INVOICE_DATE","");
                objRow.setValue("ALLOCATION_CODE","");
                objRow.setValue("ALLOCATION_AC_NAME","");
                //objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(dBookTotal));
                //objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(cBookTotal));
                objRow.setValue("ALLOCATION_AMOUNT",dFormat.format(cBookTotal));
                objRow.setValue("ST","");
                objRow.setValue("LINK_NO","");
                objRow.setValue("SIGN","**");
                objReportData.AddRow(objRow);
            }
            
            HashMap Parameters=new HashMap();
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE",txtFromDate.getText());
            Parameters.put("TO_DATE",txtToDate.getText());
            Parameters.put("BOOK_CODE",txtBookCode.getText());
            Parameters.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,txtBookCode.getText()));
            //objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptSJV041012.rpt",Parameters,objReportData);
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptSJV12161820.rpt",Parameters,objReportData);
            //objEngine.PreviewReport("D:\\Soft\\untitled folder\\dinesh\\EITLERP\\Reports\\finance\\rptPurchaseJournalBook.rpt",Parameters,objReportData);
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
    }
      
      private void GenerateSJVBook13151719() {
        try {
            String Condition="";
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("VOUCHER_NO");
            objReportData.AddColumn("LEGACY_NO");
            objReportData.AddColumn("VOUCHER_DATE");
            objReportData.AddColumn("MAIN_CODE");
            objReportData.AddColumn("SUB_CODE");
            objReportData.AddColumn("PARTY_NAME");
            objReportData.AddColumn("REMARKS");
            objReportData.AddColumn("ST");
            objReportData.AddColumn("CHEQUE_NO");
            objReportData.AddColumn("CHEQUE_DATE");
            objReportData.AddColumn("PO_NO");
            objReportData.AddColumn("PO_DATE");
            objReportData.AddColumn("INVOICE_NO");
            objReportData.AddColumn("INVOICE_DATE");
            objReportData.AddColumn("ALLOCATION_CODE");
            objReportData.AddColumn("ALLOCATION_AC_NAME");
            //objReportData.AddColumn("ALLOCATION_AMOUNT_C");
            //objReportData.AddColumn("ALLOCATION_AMOUNT_D");
            objReportData.AddColumn("ALLOCATION_AMOUNT");
            objReportData.AddColumn("LINK_NO");
            objReportData.AddColumn("SIGN");
            objReportData.AddColumn("REASON_CODE");
            
            String strSQL="SELECT DISTINCT(A.VOUCHER_NO) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL B WHERE " +
            "A.VOUCHER_NO=B.VOUCHER_NO AND A.COMPANY_ID=B.COMPANY_ID AND A.APPROVED=1 AND A.CANCELLED=0 ";
            try {
                if(!txtFromVoucher.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_NO>='"+txtFromVoucher.getText()+"' ";
                }
                
                if(!txtToVoucher.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_NO<='"+txtToVoucher.getText()+"' ";
                }
                
                if(!txtFromDate.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                }
                
                if(!txtToDate.getText().trim().equals("")) {
                    Condition+=" AND A.VOUCHER_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                }
                
                if(!txtBookCode.getText().trim().equals("")) {
                    Condition+=" AND A.BOOK_CODE='"+txtBookCode.getText()+"' ";
                }
                
                if(!txtFromAmount.getText().trim().equals("")) {
                    Condition+=" AND B.AMOUNT>="+txtFromAmount.getText()+" ";
                }
                
                if(!txtToAmount.getText().trim().equals("")) {
                    Condition+=" AND B.AMOUNT<="+txtToAmount.getText()+" ";
                }
                
                if(!txtMainCode.getText().trim().equals("")) {
                    Condition+=" AND SUBSTRING(B.MAIN_ACCOUNT_CODE,1,6)='"+txtMainCode.getText()+"' ";
                }
                
                if(!txtSubCode.getText().trim().equals("")) {
                    Condition+=" AND B.SUB_ACCOUNT_CODE='"+txtSubCode.getText()+"' ";
                }
                
                
            }
            catch(Exception e) {
                e.printStackTrace();
            }
            strSQL = strSQL + Condition;
            int SortOrder=EITLERPGLOBAL.getComboCode(cmbSort);
            double cBookTotal = 0;
            double dBookTotal = 0;
            switch(SortOrder) {
                case 1: strSQL+=" ORDER BY A.VOUCHER_NO ";break;
                case 2: strSQL+=" ORDER BY A.VOUCHER_DATE ";break;
                case 3: strSQL+=" ORDER BY A.BOOK_CODE ";break;
                case 4: strSQL+=" ORDER BY CONVERT(A.LEGACY_NO,SIGNED) ";break;
            }
            
            
            
            ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    
                    String VoucherNo=UtilFunctions.getString(rsTmp,"VOUCHER_NO"," ");
                     double cVoucherTotal = 0;
                     double dVoucherTotal = 0;
                    //Find unique Blocks within voucher entry
                    ResultSet rsBlock=data.getResult("SELECT DISTINCT(BLOCK_NO) FROM D_FIN_VOUCHER_DETAIL_EX WHERE VOUCHER_NO='"+VoucherNo+"' ",FinanceGlobal.FinURL);
                    int cnt=data.getIntValueFromDB("SELECT COUNT(DISTINCT(BLOCK_NO)) FROM D_FIN_VOUCHER_DETAIL_EX WHERE VOUCHER_NO='"+VoucherNo+"' ",FinanceGlobal.FinURL);
                    boolean noSubCode = false;
                    if(rsBlock.getRow()>0) {
                        while(!rsBlock.isAfterLast()) {
                            int BlockNo=UtilFunctions.getInt(rsBlock,"BLOCK_NO",0);
                            int creditcount=0;
                            ResultSet rsVoucher;
                            
                            //Check if there is a record with sub code
                            if(data.IsRecordExist("SELECT VOUCHER_NO FROM D_FIN_VOUCHER_DETAIL_EX WHERE VOUCHER_NO='"+VoucherNo+"' AND BLOCK_NO="+BlockNo+" AND TRIM(SUB_ACCOUNT_CODE)<>''",FinanceGlobal.FinURL)) {
                                rsVoucher=data.getResult("SELECT *,B.LINK_NO,A.REMARKS AS HEADER_REMARKS FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.VOUCHER_NO='"+VoucherNo+"' AND B.BLOCK_NO="+BlockNo+" ORDER BY SUB_ACCOUNT_CODE DESC",FinanceGlobal.FinURL);                                
                                creditcount=data.getIntValueFromDB("SELECT COUNT(EFFECT) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.VOUCHER_NO='"+VoucherNo+"' AND B.BLOCK_NO="+BlockNo+" AND EFFECT='C' ORDER BY EFFECT",FinanceGlobal.FinURL);
                                noSubCode = false;
                            }
                            else {
                                //Give priority to credit entry first and move other record to allocation side
                                rsVoucher=data.getResult("SELECT *,B.LINK_NO,A.REMARKS AS HEADER_REMARKS FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.VOUCHER_NO='"+VoucherNo+"' AND B.BLOCK_NO="+BlockNo+" ORDER BY EFFECT",FinanceGlobal.FinURL);                                
                                creditcount=data.getIntValueFromDB("SELECT COUNT(EFFECT) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.VOUCHER_NO='"+VoucherNo+"' AND B.BLOCK_NO="+BlockNo+" AND EFFECT='D' ORDER BY EFFECT",FinanceGlobal.FinURL);
                                noSubCode = true;
                            }
                            
                            //(1) First Record
                            rsVoucher.first();
                            
                            TReportWriter.SimpleDataProvider.TRow objRow=objReportData.newRow();
                            
                            objRow.setValue("VOUCHER_NO",UtilFunctions.getString(rsVoucher,"VOUCHER_NO",""));
                            objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsVoucher,"LEGACY_NO",""));
                            objRow.setValue("VOUCHER_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"VOUCHER_DATE","")));
                            objRow.setValue("MAIN_CODE",UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE",""));
                            objRow.setValue("SUB_CODE",UtilFunctions.getString(rsVoucher,"SUB_ACCOUNT_CODE",""));
                            objRow.setValue("LINK_NO",UtilFunctions.getString(rsVoucher,"B.LINK_NO",""));                            
                            objRow.setValue("REASON_CODE",UtilFunctions.getString(rsVoucher,"REASON_CODE",""));                            
                            
                            String MainCode=UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE","");
                            String SubCode=UtilFunctions.getString(rsVoucher,"SUB_ACCOUNT_CODE","");
                            if(SubCode.equals("619662")) {
                                boolean halt=true;
                            }
                            String PartyName="";
                            
                            if(!SubCode.trim().equals("")) {
                                PartyName=clsPartyMaster.getAccountName(MainCode, SubCode).replace('\\',' ').replace('/',' ');
                                /*if(PartyName.length()>=30) {
                                    PartyName=PartyName.substring(0,30);
                                }*/
                            }
                            
                            objRow.setValue("PARTY_NAME",PartyName);
                            String HeaderRemarks = UtilFunctions.getString(rsVoucher,"HEADER_REMARKS","").replace('\n',' ').trim().replace('\\',' ').replace('/',' ');
                            if(HeaderRemarks.length()>=49) {   //Previous value was 57 updated as per requirement
                                HeaderRemarks=HeaderRemarks.substring(0,49);  //Previous value was 57 updated as per requirement
                            }
                            //objRow.setValue("REMARKS",UtilFunctions.getString(rsVoucher,"HEADER_REMARKS","").replace('\n',' ').trim().replace('\t',' ').replace('\\',' ').trim());
                            objRow.setValue("REMARKS",HeaderRemarks.replace('\n',' ').trim().replace('\t',' ').replace('\\',' ').trim());
                            objRow.setValue("CHEQUE_NO",UtilFunctions.getString(rsVoucher,"CHEQUE_NO",""));
                            objRow.setValue("CHEQUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"CHEQUE_DATE","")));
                            objRow.setValue("PO_NO",UtilFunctions.getString(rsVoucher,"PO_NO",""));
                            objRow.setValue("PO_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"PO_DATE","")));
                            objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsVoucher,"INVOICE_NO",""));
                            objRow.setValue("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsVoucher,"INVOICE_DATE","")));
                            
                            //Move to next record
                            rsVoucher.next();
                            if(creditcount>1){
                                for(int i=2;i<=creditcount;i++){
                                rsVoucher.next();
                                }
                            }
                            
                            String AllocationCode=UtilFunctions.getString(rsVoucher,"MAIN_ACCOUNT_CODE","");
                            String AllocationAcName=clsPartyMaster.getAccountName(AllocationCode, "");
                            if(AllocationAcName.length()>=28) {   //Previous value was 57 updated as per requirement
                                AllocationAcName=AllocationAcName.substring(0,28);  //Previous value was 57 updated as per requirement
                            }
                            objRow.setValue("ALLOCATION_CODE",AllocationCode);
                            objRow.setValue("ALLOCATION_AC_NAME",AllocationAcName.replace('\n',' ').trim().replace('\t',' ').replace('\\',' ').trim());
                            
                            if(UtilFunctions.getString(rsVoucher,"EFFECT","").trim().equals("C") || noSubCode) {                                
                                //objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0))));
                                objRow.setValue("ALLOCATION_AMOUNT",dFormat.format(Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0))));
                                //objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND EFFECT='C'",FinanceGlobal.FinURL)));
                                cBookTotal += Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0)); 
                                if(cnt>1){
                                 cVoucherTotal += Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));    
                                }
                            } else {
                                int debitcount=data.getIntValueFromDB("SELECT COUNT(EFFECT) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.VOUCHER_NO='"+VoucherNo+"' AND B.BLOCK_NO="+BlockNo+" AND EFFECT='D' ORDER BY EFFECT",FinanceGlobal.FinURL);
                                if(debitcount>1){
                                    double debittotal=0;
                                    for(int j=1;j<=debitcount;j++){
                                        debittotal+=Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));
                                        dBookTotal+= Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));
                                        rsVoucher.next();
                                    }
                                    objRow.setValue("ALLOCATION_AMOUNT",dFormat.format(debittotal));
                                    //objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(debittotal));
                                }else{
                                //objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0))));
                                  objRow.setValue("ALLOCATION_AMOUNT",dFormat.format(Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0))));
                                //objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND EFFECT='D'",FinanceGlobal.FinURL)));
                                dBookTotal += Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));
                                }
                                if(cnt>1){
                                 dVoucherTotal += Math.abs(UtilFunctions.getDouble(rsVoucher,"AMOUNT",0));
                                }
                            }
                            
                            String STMainCode = data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND LENGTH(MAIN_ACCOUNT_CODE)=9 AND EFFECT='D'",FinanceGlobal.FinURL);
                            String STCode = STMainCode.substring(STMainCode.indexOf(".")+1);
                            objRow.setValue("ST",STCode);                            
                            objReportData.AddRow(objRow);                            
                            rsBlock.next();
                        }
                        if(cnt>1){
                           TReportWriter.SimpleDataProvider.TRow objRow=objReportData.newRow();
                
                             objRow.setValue("VOUCHER_NO","");
                             objRow.setValue("LEGACY_NO","");
                             objRow.setValue("VOUCHER_DATE","");
                             objRow.setValue("MAIN_CODE","");
                             objRow.setValue("SUB_CODE","");
                             objRow.setValue("PARTY_NAME","* * * V O U C H E R  T O T A L * * *");
                             objRow.setValue("REMARKS","");
                             objRow.setValue("CHEQUE_NO","");
                             objRow.setValue("CHEQUE_DATE","");
                             objRow.setValue("PO_NO","");
                             objRow.setValue("PO_DATE","");
                             objRow.setValue("INVOICE_NO","");
                             objRow.setValue("INVOICE_DATE","");
                             objRow.setValue("ALLOCATION_CODE","");
                             objRow.setValue("ALLOCATION_AC_NAME","");
                             //objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(dVoucherTotal));
                             //objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(cVoucherTotal));
                             objRow.setValue("ALLOCATION_AMOUNT",dFormat.format(dVoucherTotal));
                             objRow.setValue("ST","");
                             objRow.setValue("LINK_NO","");
                             objRow.setValue("SIGN"," *");
                             objReportData.AddRow(objRow); 
                        }
                    }
                    
                    rsTmp.next();
                }
                TReportWriter.SimpleDataProvider.TRow objRow=objReportData.newRow();
                
                objRow.setValue("VOUCHER_NO","");
                objRow.setValue("LEGACY_NO","");
                objRow.setValue("VOUCHER_DATE","");
                objRow.setValue("MAIN_CODE","");
                objRow.setValue("SUB_CODE","");
                objRow.setValue("PARTY_NAME","* * * B O O K T O T A L * * *");
                objRow.setValue("REMARKS","");
                objRow.setValue("CHEQUE_NO","");
                objRow.setValue("CHEQUE_DATE","");
                objRow.setValue("PO_NO","");
                objRow.setValue("PO_DATE","");
                objRow.setValue("INVOICE_NO","");
                objRow.setValue("INVOICE_DATE","");
                objRow.setValue("ALLOCATION_CODE","");
                objRow.setValue("ALLOCATION_AC_NAME","");
                //objRow.setValue("ALLOCATION_AMOUNT_D",dFormat.format(dBookTotal));
                //objRow.setValue("ALLOCATION_AMOUNT_C",dFormat.format(cBookTotal));
                objRow.setValue("ALLOCATION_AMOUNT",dFormat.format(dBookTotal));
                objRow.setValue("ST","");
                objRow.setValue("LINK_NO","");
                objRow.setValue("SIGN","**");
                objReportData.AddRow(objRow);
            }
            
            HashMap Parameters=new HashMap();
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE",txtFromDate.getText());
            Parameters.put("TO_DATE",txtToDate.getText());
            Parameters.put("BOOK_CODE",txtBookCode.getText());
            Parameters.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,txtBookCode.getText()));
            //objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptSJV041012.rpt",Parameters,objReportData);
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptSJV12161820.rpt",Parameters,objReportData);
            //objEngine.PreviewReport("D:\\Soft\\untitled folder\\dinesh\\EITLERP\\Reports\\finance\\rptPurchaseJournalBook.rpt",Parameters,objReportData);
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
    }
      
}
