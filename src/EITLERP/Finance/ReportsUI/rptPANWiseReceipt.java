/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.Finance.ReportsUI;

import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.Finance.FinanceGlobal;
import EITLERP.Finance.UtilFunctions;
import EITLERP.Finance.clsVoucher;
import EITLERP.ReportRegister;
import EITLERP.data;
import java.awt.Component;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.event.KeyEvent;
import java.io.File;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Dharmendra
 */
public class rptPANWiseReceipt extends javax.swing.JApplet {

    /**
     * Initializes the frmF6InvAnalysis
     */
    private int EditMode = 0;
    private boolean DoNotEvaluate = false;
    private EITLTableModel DataModel = new EITLTableModel();
    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();

    @Override
    public void init() {
        /* Create and display the applet */
        initComponents();
        file1.show(false);
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        GenerateReport();
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdWhStkExporttoExcel = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        file1 = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        cmbOrderBy = new javax.swing.JComboBox();

        getContentPane().setLayout(null);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 80, 970, 410);

        cmdWhStkExporttoExcel.setText("Export to Excel");
        cmdWhStkExporttoExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdWhStkExporttoExcelActionPerformed(evt);
            }
        });
        getContentPane().add(cmdWhStkExporttoExcel);
        cmdWhStkExporttoExcel.setBounds(810, 40, 150, 30);

        jPanel1.setBackground(new java.awt.Color(0, 102, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setMinimumSize(new java.awt.Dimension(1000, 29));
        jPanel1.setLayout(null);

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("PAN Wise Receipt Amount Report ( As on Date )");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(2, 4, 460, 20);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(2, 1, 980, 30);
        getContentPane().add(file1);
        file1.setBounds(760, 50, 220, 420);

        jLabel1.setText("Order By : ");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(40, 45, 80, 20);

        cmbOrderBy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PAN No", "Party Code" }));
        cmbOrderBy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbOrderByItemStateChanged(evt);
            }
        });
        getContentPane().add(cmbOrderBy);
        cmbOrderBy.setBounds(120, 44, 140, 20);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdWhStkExporttoExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdWhStkExporttoExcelActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "PAN Wise Received Report");

            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdWhStkExporttoExcelActionPerformed

    private void cmbOrderByItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbOrderByItemStateChanged
        // TODO add your handling code here:
        GenerateReport();
    }//GEN-LAST:event_cmbOrderByItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbOrderBy;
    private javax.swing.JButton cmdWhStkExporttoExcel;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void GenerateReport() {
        String sql = "";
        ResultSet rs;
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);
        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);
        try {
            sql = "SELECT @a:=@a+1 AS 'Sr No', GSTIN_PAN AS 'PAN No',PARTY_CODE AS 'Party Code',PARTY_NAME AS 'Name',COALESCE(RC_AMT,0) AS 'Receipt Amount',DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS 'Run DateTime' FROM  (SELECT @a:= 0) AS a, "
                    + "(SELECT PM.PARTY_CODE,PM.PARTY_NAME,CITY_ID,PAN_NO,GSTIN_PAN,V_PAN,RC_AMT FROM  "
                    + "(SELECT PARTY_CODE,PARTY_NAME,PAN_NO,SUBSTRING(GSTIN_NO,3,10) AS GSTIN_PAN,CITY_ID FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 ) AS PM  LEFT JOIN   "
                    + "(SELECT GSTIN_PAN AS V_PAN,SUM(AMOUNT) AS RC_AMT FROM  "
                    + "(SELECT B.SUB_ACCOUNT_CODE, P.PARTY_NAME, SUBSTRING(TRIM(P.GSTIN_NO),3,10) AS GSTIN_PAN, SUM(B.AMOUNT) AS AMOUNT, GROUP_CONCAT(A.VOUCHER_NO) FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B, DINESHMILLS.D_SAL_PARTY_MASTER P   "
                    + "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND P.PARTY_CODE = B.SUB_ACCOUNT_CODE  "
                    + "AND A.VOUCHER_DATE>='" + EITLERPGLOBAL.FinFromDateDB + "' AND A.VOUCHER_DATE<=CURDATE()  "
                    + "AND (A.VOUCHER_TYPE IN (6,8,9,12) OR (A.VOUCHER_TYPE IN (7) AND A.EXCLUDE_IN_ADJ =0) ) "
                    + "AND B.MAIN_ACCOUNT_CODE='210010' AND A.APPROVED=1 AND A.CANCELLED=0 AND B.EFFECT='C' AND B.MODULE_ID <>65 "
                    + "GROUP BY B.SUB_ACCOUNT_CODE  "
                    + ") AS AMT "
                    + "GROUP BY GSTIN_PAN ) AS VPAN   "
                    + "ON VPAN.V_PAN = PM.GSTIN_PAN   "
                    + ") AS VRC "
                    + "WHERE COALESCE(GSTIN_PAN,'')!='' AND COALESCE(GSTIN_PAN,'') NOT LIKE ('0%') AND COALESCE(GSTIN_PAN,'') NOT LIKE ('9%')  ";
            if (cmbOrderBy.getSelectedItem().equals("PAN No"))
                sql = sql + "ORDER BY GSTIN_PAN,PARTY_CODE ";
            if (cmbOrderBy.getSelectedItem().equals("Party Code"))
                sql = sql + "ORDER BY PARTY_CODE ";
            
            System.out.println(sql);
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
            }
            rs.first();
            System.out.println("Row no." + rs.getRow());
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }
                    DataModel.addRow(rowData);
                    rs.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }
            DataModel.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
