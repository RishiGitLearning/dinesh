

package EITLERP.Finance.ReportsUI;


import EITLERP.*;
import EITLERP.Finance.*;
import EITLERP.Utils.*;
import EITLERP.Utils.SimpleDataProvider.*;
import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.net.*;
import java.util.*;
import TReportWriter.*;

public class frmRptFDLDCDReceipts extends javax.swing.JApplet {
    
    private EITLComboModel cmbReceiptTypeModel;
    private EITLComboModel cmbMonthModel;
    private TReportEngine objEngine=new TReportEngine();
    private TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
    
    
    /** Initializes the applet frmRptGRNInfo */
    public void init() {
        setSize(464,274);
        initComponents();
        
        GenerateCombo();
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtYear = new javax.swing.JTextField();
        cmdPreview = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        cmbMonth = new javax.swing.JComboBox();
        cmdPreviewSummary = new javax.swing.JButton();
        cmbReceiptType = new javax.swing.JComboBox();

        getContentPane().setLayout(null);

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jPanel3.setLayout(null);

        jPanel3.setBackground(new java.awt.Color(0, 153, 204));
        jPanel3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel6.setText("STATEMENT OF RECEIPTS FROM FD to FD, CD to CD AND LD to LD");
        jPanel3.add(jLabel6);
        jLabel6.setBounds(9, 8, 430, 14);

        getContentPane().add(jPanel3);
        jPanel3.setBounds(0, 2, 800, 30);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Month :");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(20, 70, 90, 20);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Year :");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(220, 70, 60, 20);

        txtYear.setColumns(10);
        getContentPane().add(txtYear);
        txtYear.setBounds(285, 70, 90, 20);

        cmdPreview.setText("Preview Report");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        getContentPane().add(cmdPreview);
        cmdPreview.setBounds(70, 180, 130, 23);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Receipt Type :");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(20, 100, 90, 14);

        getContentPane().add(cmbMonth);
        cmbMonth.setBounds(120, 70, 90, 22);

        cmdPreviewSummary.setText("Preview Summary");
        cmdPreviewSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewSummaryActionPerformed(evt);
            }
        });

        getContentPane().add(cmdPreviewSummary);
        cmdPreviewSummary.setBounds(230, 180, 160, 23);

        getContentPane().add(cmbReceiptType);
        cmbReceiptType.setBounds(120, 100, 90, 22);

    }//GEN-END:initComponents
    
    private void cmdPreviewSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewSummaryActionPerformed
        // TODO add your handling code here:
        if ( ! Validate()) {
            return;
        }
        GenerateSummary();
    }//GEN-LAST:event_cmdPreviewSummaryActionPerformed
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        if ( ! Validate()) {
            return;
        }
        GenerateReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbMonth;
    private javax.swing.JComboBox cmbReceiptType;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewSummary;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
    
    private void GenerateReport() {
        try {
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("SR_NO");
            objReportData.AddColumn("RECEIPT_NO");
            objReportData.AddColumn("LEGACY_NO");
            objReportData.AddColumn("RECEIPT_DATE");
            objReportData.AddColumn("APPLICANT_NAME");
            objReportData.AddColumn("EFFECTIVE_DATE");
            objReportData.AddColumn("MATURITY_DATE");
            objReportData.AddColumn("AMOUNT");
            objReportData.AddColumn("DEPOSIT_PERIOD");
            objReportData.AddColumn("INTEREST_RATE");
            objReportData.AddColumn("DEPOSITER_STATUS");
            objReportData.AddColumn("O_RECEIPT_NO");
            objReportData.AddColumn("BROKER_CODE");
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            objOpeningRow.setValue("SR_NO","");
            objOpeningRow.setValue("RECEIPT_NO","");
            objOpeningRow.setValue("LEGACY_NO","");
            objOpeningRow.setValue("RECEIPT_DATE","0000-00-00");
            objOpeningRow.setValue("APPLICANT_NAME","");
            objOpeningRow.setValue("EFFECTIVE_DATE","0000-00-00");
            objOpeningRow.setValue("MATURITY_DATE","0000-00-00");
            objOpeningRow.setValue("AMOUNT","");
            objOpeningRow.setValue("DEPOSIT_PERIOD","");
            objOpeningRow.setValue("INTEREST_RATE","");
            objOpeningRow.setValue("DEPOSITER_STATUS","");
            objOpeningRow.setValue("O_RECEIPT_NO","");
            objOpeningRow.setValue("BROKER_CODE","");
            
            int ReceiptType = cmbReceiptType.getSelectedIndex() + 1;
            int nMonth = cmbMonth.getSelectedIndex() + 1;
            
            String cReceiptType  = EITLERPGLOBAL.getCombostrCode(cmbReceiptType);
            
            int oReceiptType = Integer.parseInt(cReceiptType.substring(0,1));
            int nReceiptType = Integer.parseInt(cReceiptType.substring(1,2));
            
            String strSQL = "SELECT DMST.COMPANY_ID, DMST.RECEIPT_NO,DMST.LEGACY_NO, DMST.RECEIPT_DATE, DMST.APPLICANT_NAME,  DMST.EFFECTIVE_DATE, " +
            "DMST.MATURITY_DATE, DMST.PARTY_CODE, DMST.AMOUNT,  DMST.DEPOSIT_PERIOD, DMST.INTEREST_RATE, ODMST.RECEIPT_NO AS O_RECEIPT_NO, " +
            "CASE WHEN DMST.DEPOSITER_CATEGORY = 1 THEN 'E' WHEN DMST.DEPOSITER_CATEGORY = 2 THEN 'S' WHEN DMST.DEPOSITER_CATEGORY = 3 THEN 'C'  " +
            "WHEN DMST.DEPOSITER_CATEGORY = 4 THEN 'D' WHEN DMST.DEPOSITER_CATEGORY = 5 THEN 'I' ELSE '' END DEPOSITER_CATEGORY, " +
            "DMST.BROKER_CODE , CASE WHEN OSMST.SCHEME_TYPE = 1 THEN 'FD' WHEN OSMST.SCHEME_TYPE = 2 THEN 'LD' WHEN OSMST.SCHEME_TYPE = 3 THEN 'CD' " +
            "ELSE '' END O_SCHEME_TYPE, CASE WHEN SMST.SCHEME_TYPE = 1 THEN 'FD' WHEN SMST.SCHEME_TYPE = 2 THEN 'LD' WHEN SMST.SCHEME_TYPE = 3 THEN 'CD' " +
            "ELSE '' END N_SCHEME_TYPE FROM D_FD_DEPOSIT_MASTER DMST, D_FD_SCHEME_MASTER SMST, D_FD_DEPOSIT_MASTER ODMST, " +
            "D_FD_SCHEME_MASTER OSMST WHERE DMST.COMPANY_ID =2 AND DMST.DEPOSIT_STATUS=0 AND DMST.APPROVED=1 AND DMST.CANCELLED=0  " +
            "AND DMST.COMPANY_ID = SMST.COMPANY_ID AND DMST.SCHEME_ID = SMST.SCHEME_ID AND DMST.COMPANY_ID = ODMST.COMPANY_ID " +
            "AND DMST.OLD_RECEIPT_NO=ODMST.RECEIPT_NO AND ODMST.DEPOSIT_STATUS=1 AND ODMST.APPROVED=1 AND ODMST.CANCELLED=0  " +
            "AND DMST.DEPOSIT_ENTRY_TYPE = 2 AND DMST.OLD_RECEIPT_NO <> '' AND ODMST.COMPANY_ID = OSMST.COMPANY_ID " +
            "AND ODMST.SCHEME_ID = OSMST.SCHEME_ID AND OSMST.SCHEME_TYPE = "+oReceiptType+" AND  SMST.SCHEME_TYPE = "+nReceiptType +
            " AND MONTH(DMST.RECEIPT_DATE) = "+nMonth+" AND YEAR(DMST.RECEIPT_DATE) = "+txtYear.getText().trim()+" ORDER BY DMST.RECEIPT_DATE ";
            //" AND MONTH(DMST.EFFECTIVE_DATE) = 12 AND YEAR(DMST.EFFECTIVE_DATE) = 2008 ORDER BY DMST.EFFECTIVE_DATE ";
            //FD - FD Receipt
            /*if (ReceiptType == 1) {
                
                //
                //
                //
                strSQL = "SELECT DMST.COMPANY_ID, DMST.RECEIPT_NO, DMST.RECEIPT_DATE, DMST.APPLICANT_NAME,  " +
                "DMST.EFFECTIVE_DATE, DMST.MATURITY_DATE, DMST.PARTY_CODE, DMST.AMOUNT,  "+
                "DMST.DEPOSIT_PERIOD, DMST.INTEREST_RATE, "+
                "CASE WHEN DMST.DEPOSITER_CATEGORY = 1 THEN 'E' WHEN DMST.DEPOSITER_CATEGORY = 2 THEN 'S' "+
                "WHEN DMST.DEPOSITER_CATEGORY = 3 THEN 'C'  WHEN DMST.DEPOSITER_CATEGORY = 4 THEN 'D' "+
                "WHEN DMST.DEPOSITER_CATEGORY = 5 THEN 'I' ELSE '' END DEPOSITER_CATEGORY, "+
                "DMST.BROKER_CODE , CONCAT(CASE WHEN OSMST.SCHEME_TYPE = 1 THEN 'FD' WHEN OSMST.SCHEME_TYPE = 2 THEN 'LD' "+
                "WHEN OSMST.SCHEME_TYPE = 3 THEN 'CD' ELSE '' END  , DMST.OLD_RECEIPT_NO ) O_RECEIPT_NO "+
                "FROM D_FD_DEPOSIT_MASTER DMST, D_FD_SCHEME_MASTER SMST, D_FD_DEPOSIT_MASTER ODMST, "+
                "D_FD_SCHEME_MASTER OSMST "+
                "WHERE DMST.COMPANY_ID ="+EITLERPGLOBAL.gCompanyID+" AND DMST.DEPOSIT_STATUS=0 AND DMST.APPROVED=1 AND DMST.CANCELLED=0  "+
                "AND DMST.COMPANY_ID = SMST.COMPANY_ID AND DMST.SCHEME_ID = SMST.SCHEME_ID AND SMST.SCHEME_TYPE=1 "+
                "AND DMST.COMPANY_ID = ODMST.COMPANY_ID AND DMST.OLD_RECEIPT_NO=ODMST.RECEIPT_NO "+
                "AND ODMST.DEPOSIT_STATUS=1 AND ODMST.APPROVED=1 AND ODMST.CANCELLED=0  "+
                "AND DMST.DEPOSIT_ENTRY_TYPE = 2 AND DMST.OLD_RECEIPT_NO <> ''  "+
                "AND ODMST.COMPANY_ID = OSMST.COMPANY_ID AND ODMST.SCHEME_ID = OSMST.SCHEME_ID AND OSMST.SCHEME_TYPE = 1 "+
                "AND MONTH(DMST.EFFECTIVE_DATE) = "+ nMonth +" AND YEAR(DMST.EFFECTIVE_DATE) = "+ txtYear.getText().trim() + " ORDER BY DMST.EFFECTIVE_DATE";
            }
            //CD - CD Receipt
            if (ReceiptType == 2) {
                strSQL = "SELECT DMST.COMPANY_ID, DMST.RECEIPT_NO, DMST.RECEIPT_DATE, DMST.APPLICANT_NAME,  " +
                "DMST.EFFECTIVE_DATE, DMST.MATURITY_DATE, DMST.PARTY_CODE, DMST.AMOUNT,  "+
                "DMST.DEPOSIT_PERIOD, DMST.INTEREST_RATE, "+
                "CASE WHEN DMST.DEPOSITER_CATEGORY = 1 THEN 'E' WHEN DMST.DEPOSITER_CATEGORY = 2 THEN 'S' "+
                "WHEN DMST.DEPOSITER_CATEGORY = 3 THEN 'C'  WHEN DMST.DEPOSITER_CATEGORY = 4 THEN 'D' "+
                "WHEN DMST.DEPOSITER_CATEGORY = 5 THEN 'I' ELSE '' END DEPOSITER_CATEGORY, "+
                "DMST.BROKER_CODE , CONCAT(CASE WHEN OSMST.SCHEME_TYPE = 1 THEN 'FD' WHEN OSMST.SCHEME_TYPE = 2 THEN 'LD' "+
                "WHEN OSMST.SCHEME_TYPE = 3 THEN 'CD' ELSE '' END  , DMST.OLD_RECEIPT_NO ) O_RECEIPT_NO "+
                "FROM D_FD_DEPOSIT_MASTER DMST, D_FD_SCHEME_MASTER SMST, D_FD_DEPOSIT_MASTER ODMST, "+
                "D_FD_SCHEME_MASTER OSMST "+
                "WHERE DMST.COMPANY_ID ="+EITLERPGLOBAL.gCompanyID+" AND DMST.DEPOSIT_STATUS=0 AND DMST.APPROVED=1 AND DMST.CANCELLED=0  "+
                "AND DMST.COMPANY_ID = SMST.COMPANY_ID AND DMST.SCHEME_ID = SMST.SCHEME_ID AND SMST.SCHEME_TYPE=3 "+
                "AND DMST.COMPANY_ID = ODMST.COMPANY_ID AND DMST.OLD_RECEIPT_NO=ODMST.RECEIPT_NO "+
                "AND ODMST.DEPOSIT_STATUS=1 AND ODMST.APPROVED=1 AND ODMST.CANCELLED=0  "+
                "AND DMST.DEPOSIT_ENTRY_TYPE = 2 AND DMST.OLD_RECEIPT_NO <> ''  "+
                "AND ODMST.COMPANY_ID = OSMST.COMPANY_ID AND ODMST.SCHEME_ID = OSMST.SCHEME_ID AND OSMST.SCHEME_TYPE = 3 "+
                "AND MONTH(DMST.EFFECTIVE_DATE) = "+ nMonth +" AND YEAR(DMST.EFFECTIVE_DATE) = "+ txtYear.getText().trim() + " ORDER BY DMST.EFFECTIVE_DATE";
            }
            //LD - LD Receipt
            if (ReceiptType == 3) {
                strSQL = "SELECT DMST.COMPANY_ID, DMST.RECEIPT_NO, DMST.RECEIPT_DATE, DMST.APPLICANT_NAME,  " +
                "DMST.EFFECTIVE_DATE, DMST.MATURITY_DATE, DMST.PARTY_CODE, DMST.AMOUNT,  "+
                "DMST.DEPOSIT_PERIOD, DMST.INTEREST_RATE, "+
                "CASE WHEN DMST.DEPOSITER_CATEGORY = 1 THEN 'E' WHEN DMST.DEPOSITER_CATEGORY = 2 THEN 'S' "+
                "WHEN DMST.DEPOSITER_CATEGORY = 3 THEN 'C'  WHEN DMST.DEPOSITER_CATEGORY = 4 THEN 'D' "+
                "WHEN DMST.DEPOSITER_CATEGORY = 5 THEN 'I' ELSE '' END DEPOSITER_CATEGORY, "+
                "DMST.BROKER_CODE , CONCAT(CASE WHEN OSMST.SCHEME_TYPE = 1 THEN 'FD' WHEN OSMST.SCHEME_TYPE = 2 THEN 'LD' "+
                "WHEN OSMST.SCHEME_TYPE = 3 THEN 'CD' ELSE '' END  , DMST.OLD_RECEIPT_NO ) O_RECEIPT_NO "+
                "FROM D_FD_DEPOSIT_MASTER DMST, D_FD_SCHEME_MASTER SMST, D_FD_DEPOSIT_MASTER ODMST, "+
                "D_FD_SCHEME_MASTER OSMST "+
                "WHERE DMST.COMPANY_ID ="+EITLERPGLOBAL.gCompanyID+" AND DMST.DEPOSIT_STATUS=0 AND DMST.APPROVED=1 AND DMST.CANCELLED=0  "+
                "AND DMST.COMPANY_ID = SMST.COMPANY_ID AND DMST.SCHEME_ID = SMST.SCHEME_ID AND SMST.SCHEME_TYPE=2 "+
                "AND DMST.COMPANY_ID = ODMST.COMPANY_ID AND DMST.OLD_RECEIPT_NO=ODMST.RECEIPT_NO "+
                "AND ODMST.DEPOSIT_STATUS=1 AND ODMST.APPROVED=1 AND ODMST.CANCELLED=0  "+
                "AND DMST.DEPOSIT_ENTRY_TYPE = 2 AND DMST.OLD_RECEIPT_NO <> ''  "+
                "AND ODMST.COMPANY_ID = OSMST.COMPANY_ID AND ODMST.SCHEME_ID = OSMST.SCHEME_ID AND OSMST.SCHEME_TYPE = 2 "+
                "AND MONTH(DMST.EFFECTIVE_DATE) = "+ nMonth +" AND YEAR(DMST.EFFECTIVE_DATE) = "+ txtYear.getText().trim() + " ORDER BY DMST.EFFECTIVE_DATE";
            }*/
            
            System.out.println("sql="+strSQL);
            
            ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsTmp.first();
            
            int Counter = 0;
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Counter ++;
                    objRow=objReportData.newRow();
                    
                    objRow.setValue("SR_NO",Integer.toString(Counter));
                    objRow.setValue("RECEIPT_NO",UtilFunctions.getString(rsTmp,"RECEIPT_NO",""));
                    objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsTmp,"LEGACY_NO",""));
                    objRow.setValue("RECEIPT_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"RECEIPT_DATE","0000-00-00")));
                    objRow.setValue("APPLICANT_NAME",UtilFunctions.getString(rsTmp,"APPLICANT_NAME",""));
                    objRow.setValue("EFFECTIVE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"EFFECTIVE_DATE","0000-00-00")));
                    objRow.setValue("MATURITY_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"MATURITY_DATE","0000-00-00")));
                    objRow.setValue("AMOUNT",UtilFunctions.getString(rsTmp,"AMOUNT",""));
                    objRow.setValue("DEPOSIT_PERIOD",UtilFunctions.getString(rsTmp,"DEPOSIT_PERIOD",""));
                    objRow.setValue("INTEREST_RATE",UtilFunctions.getString(rsTmp,"INTEREST_RATE",""));
                    objRow.setValue("DEPOSITER_STATUS",UtilFunctions.getString(rsTmp,"DEPOSITER_CATEGORY",""));
                    objRow.setValue("O_RECEIPT_NO",UtilFunctions.getString(rsTmp,"O_RECEIPT_NO",""));
                    objRow.setValue("BROKER_CODE",UtilFunctions.getString(rsTmp,"BROKER_CODE",""));
                    
                    objReportData.AddRow(objRow);
                    
                    rsTmp.next();
                }
            }
            
            int Comp_ID = EITLERPGLOBAL.gCompanyID;
            
            HashMap Parameters=new HashMap();
            Parameters.put("COMPANY_ID",Integer.toString(Comp_ID));
            Parameters.put("MONTH",cmbMonth.getSelectedItem());
            Parameters.put("YEAR",txtYear.getText().trim());
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            
            if(ReceiptType==1) {
                Parameters.put("TYPE","FD TO FD");
            } else if(ReceiptType==2) {
                Parameters.put("TYPE","FD TO LD");
            } else if(ReceiptType==3) {
                Parameters.put("TYPE","FD TO CD");
            } else if(ReceiptType==4) {
                Parameters.put("TYPE","LD TO LD");
            } else if(ReceiptType==5) {
                Parameters.put("TYPE","LD TO FD");
            } else if(ReceiptType==6) {
                Parameters.put("TYPE","LD TO CD");
            } else if(ReceiptType==7) {
                Parameters.put("TYPE","CD TO CD");
            } else if(ReceiptType==8) {
                Parameters.put("TYPE","CD TO FD");
            } else if(ReceiptType==9) {
                Parameters.put("TYPE","CD TO LD");
            }
            
            
            //FD - FD Receipt
            //if (ReceiptType == 1) {
                objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptFDTOFDReceipt.rpt",Parameters,objReportData);
            //}
            
            //CD - CD Receipt
            /*if (ReceiptType == 2) {
                objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptCDTOCDReceipt.rpt",Parameters,objReportData);
            }
            
            //LD - LD Receipt
            if (ReceiptType == 3) {
                objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptLDTOLDReceipt.rpt",Parameters,objReportData);
            }*/
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
    }
    
    private void GenerateCombo() {
        
        //--- Generate Type Combo ------//
        ComboData aData=new ComboData();
        
        cmbMonthModel=new EITLComboModel();
        cmbMonth.removeAllItems();
        cmbMonth.setModel(cmbMonthModel);
        
        aData=new ComboData();
        aData.Code=1;
        aData.Text="January";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=2;
        aData.Text="February";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=3;
        aData.Text="March";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=4;
        aData.Text="April";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=5;
        aData.Text="May";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=6;
        aData.Text="June";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=7;
        aData.Text="July";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=8;
        aData.Text="August";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=9;
        aData.Text="September";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=10;
        aData.Text="October";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=11;
        aData.Text="November";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=12;
        aData.Text="December";
        cmbMonthModel.addElement(aData);
        
        
        
        cmbReceiptTypeModel=new EITLComboModel();
        cmbReceiptType.removeAllItems();
        cmbReceiptType.setModel(cmbReceiptTypeModel);
        
        aData=new ComboData();
        aData.strCode="11";
        aData.Text="FD TO FD";
        cmbReceiptTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="12";
        aData.Text="FD TO LD";
        cmbReceiptTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="13";
        aData.Text="FD TO CD";
        cmbReceiptTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="22";
        aData.Text="LD TO LD";
        cmbReceiptTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="21";
        aData.Text="LD TO FD";
        cmbReceiptTypeModel.addElement(aData);
        
        
        aData=new ComboData();
        aData.strCode="23";
        aData.Text="LD TO CD";
        cmbReceiptTypeModel.addElement(aData);
        
        
        aData=new ComboData();
        aData.strCode="33";
        aData.Text="CD TO CD";
        cmbReceiptTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="31";
        aData.Text="CD TO FD";
        cmbReceiptTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="32";
        aData.Text="CD TO LD";
        cmbReceiptTypeModel.addElement(aData);
    }
    
    private void GenerateSummary() {
        try {
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("NUM_EMPLOYEE");
            objReportData.AddColumn("NUM_SHARE_HOLDERS");
            objReportData.AddColumn("NUM_COMPANY");
            objReportData.AddColumn("NUM_INDIVIDUAL");
            objReportData.AddColumn("NUM_DIRECTOR");
            objReportData.AddColumn("SUM_EMPLOYEE");
            objReportData.AddColumn("SUM_SHARE_HOLDERS");
            objReportData.AddColumn("SUM_COMPANY");
            objReportData.AddColumn("SUM_INDIVIDUAL");
            objReportData.AddColumn("SUM_DIRECTOR");
            objReportData.AddColumn("CNT_DEPOSITER_STATUS");
            objReportData.AddColumn("SUM_AMOUNT");
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            objOpeningRow.setValue("NUM_EMPLOYEE","");
            objOpeningRow.setValue("NUM_SHARE_HOLDERS","");
            objOpeningRow.setValue("NUM_COMPANY","");
            objOpeningRow.setValue("NUM_INDIVIDUAL","");
            objOpeningRow.setValue("NUM_DIRECTOR","");
            objOpeningRow.setValue("SUM_EMPLOYEE","");
            objOpeningRow.setValue("SUM_SHARE_HOLDERS","");
            objOpeningRow.setValue("SUM_COMPANY","");
            objOpeningRow.setValue("SUM_INDIVIDUAL","");
            objOpeningRow.setValue("SUM_DIRECTOR","");
            objOpeningRow.setValue("CNT_DEPOSITER_STATUS","");
            objOpeningRow.setValue("SUM_AMOUNT","");
            
            int ReceiptType = cmbReceiptType.getSelectedIndex() + 1;
            int nMonth = cmbMonth.getSelectedIndex() + 1;
            String cReceiptType  = EITLERPGLOBAL.getCombostrCode(cmbReceiptType);
            
            int oReceiptType = Integer.parseInt(cReceiptType.substring(0,1));
            int nReceiptType = Integer.parseInt(cReceiptType.substring(1,2));
            
            String strSQL = "SELECT " +
            "IF (DEPOSITMST.DEPOSITER_CATEGORY = 1,COUNT(DEPOSITMST.DEPOSITER_CATEGORY),0) AS NUM_EMPLOYEE, " +
            "IF (DEPOSITMST.DEPOSITER_CATEGORY = 2,COUNT(DEPOSITMST.DEPOSITER_CATEGORY),0) AS NUM_SHARE_HOLDERS, " +
            "IF (DEPOSITMST.DEPOSITER_CATEGORY = 3,COUNT(DEPOSITMST.DEPOSITER_CATEGORY),0) AS NUM_COMPANY, " +
            "IF (DEPOSITMST.DEPOSITER_CATEGORY = 4,COUNT(DEPOSITMST.DEPOSITER_CATEGORY),0) AS NUM_DIRECTOR, " +
            "IF (DEPOSITMST.DEPOSITER_CATEGORY = 5,COUNT(DEPOSITMST.DEPOSITER_CATEGORY),0) AS NUM_INDIVIDUAL, " +
            "IF (DEPOSITMST.DEPOSITER_CATEGORY = 1,SUM(DEPOSITMST.AMOUNT),0) AS SUM_EMPLOYEE, " +
            "IF (DEPOSITMST.DEPOSITER_CATEGORY = 2,SUM(DEPOSITMST.AMOUNT),0) AS SUM_SHARE_HOLDERS, " +
            "IF (DEPOSITMST.DEPOSITER_CATEGORY = 3,SUM(DEPOSITMST.AMOUNT),0) AS SUM_COMPANY, " +
            "IF (DEPOSITMST.DEPOSITER_CATEGORY = 4,SUM(DEPOSITMST.AMOUNT),0) AS SUM_DIRECTOR, " +
            "IF (DEPOSITMST.DEPOSITER_CATEGORY = 5,SUM(DEPOSITMST.AMOUNT),0) AS SUM_INDIVIDUAL, " +
            "COUNT(DEPOSITMST.DEPOSITER_CATEGORY) AS CNT_DEPOSITER_STATUS, " +
            "IF (SUM(DEPOSITMST.AMOUNT) > 0,SUM(DEPOSITMST.AMOUNT),0) AS SUM_AMOUNT " +
            "FROM D_FD_DEPOSIT_MASTER DEPOSITMST, D_FD_SCHEME_MASTER SCHEMEMST , D_FD_DEPOSIT_MASTER NDMST , " +
            "D_FD_SCHEME_MASTER NSMST " +
            "WHERE DEPOSITMST.COMPANY_ID ="+EITLERPGLOBAL.gCompanyID+" AND DEPOSITMST.DEPOSIT_STATUS=1  AND DEPOSITMST.APPROVED=1  " +
            "AND DEPOSITMST.CANCELLED=0 AND DEPOSITMST.COMPANY_ID = SCHEMEMST.COMPANY_ID AND DEPOSITMST.SCHEME_ID = SCHEMEMST.SCHEME_ID  " +
            "AND SCHEMEMST.SCHEME_TYPE = " + oReceiptType + " " +
            "AND DEPOSITMST.COMPANY_ID = NDMST.COMPANY_ID AND DEPOSITMST.RECEIPT_NO=NDMST.OLD_RECEIPT_NO " +
            "AND NDMST.DEPOSIT_STATUS=0 AND NDMST.APPROVED=1 AND NDMST.CANCELLED=0 AND NDMST.DEPOSIT_ENTRY_TYPE = 2 " +
            "AND NDMST.OLD_RECEIPT_NO <> '' AND NDMST.COMPANY_ID = NSMST.COMPANY_ID AND NDMST.SCHEME_ID = NSMST.SCHEME_ID " +
            "AND NSMST.SCHEME_TYPE = "+nReceiptType+" AND MONTH(NDMST.EFFECTIVE_DATE) = 12 AND YEAR(NDMST.EFFECTIVE_DATE) = 2008 " +
            "GROUP BY DEPOSITMST.DEPOSITER_STATUS ";
            
            
            /*//FD - FD Receipt
            if (ReceiptType == 1) {
                strSQL= "SELECT IF (DEPOSITMST.DEPOSITER_STATUS = 1,COUNT(DEPOSITMST.DEPOSITER_STATUS),0) AS NUM_EMPLOYEE, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 2,COUNT(DEPOSITMST.DEPOSITER_STATUS),0) AS NUM_SHARE_HOLDERS, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 3,COUNT(DEPOSITMST.DEPOSITER_STATUS),0) AS NUM_COMPANY, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 4,COUNT(DEPOSITMST.DEPOSITER_STATUS),0) AS NUM_INDIVIDUAL, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 5,COUNT(DEPOSITMST.DEPOSITER_STATUS),0) AS NUM_DIRECTOR, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 1,SUM(DEPOSITMST.AMOUNT),0) AS SUM_EMPLOYEE, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 2,SUM(DEPOSITMST.AMOUNT),0) AS SUM_SHARE_HOLDERS, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 3,SUM(DEPOSITMST.AMOUNT),0) AS SUM_COMPANY, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 4,SUM(DEPOSITMST.AMOUNT),0) AS SUM_INDIVIDUAL, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 5,SUM(DEPOSITMST.AMOUNT),0) AS SUM_DIRECTOR, "+
                "COUNT(DEPOSITMST.DEPOSITER_STATUS) AS CNT_DEPOSITER_STATUS, "+
                "IF (SUM(DEPOSITMST.AMOUNT) > 0,SUM(DEPOSITMST.AMOUNT),0) AS SUM_AMOUNT "+
                "FROM D_FD_DEPOSIT_MASTER DEPOSITMST, D_FD_SCHEME_MASTER SCHEMEMST , D_FD_DEPOSIT_MASTER NDMST , D_FD_SCHEME_MASTER NSMST "+
                "WHERE DEPOSITMST.COMPANY_ID =" + EITLERPGLOBAL.gCompanyID + " AND DEPOSITMST.DEPOSIT_STATUS=1  AND DEPOSITMST.APPROVED=1  AND DEPOSITMST.CANCELLED=0 "+
                "AND DEPOSITMST.COMPANY_ID = SCHEMEMST.COMPANY_ID AND DEPOSITMST.SCHEME_ID = SCHEMEMST.SCHEME_ID  AND SCHEMEMST.SCHEME_TYPE = 1 "+
                "AND DEPOSITMST.COMPANY_ID = NDMST.COMPANY_ID AND DEPOSITMST.RECEIPT_NO=NDMST.OLD_RECEIPT_NO "+
                "AND NDMST.DEPOSIT_STATUS=0 AND NDMST.APPROVED=1 AND NDMST.CANCELLED=0 "+
                "AND NDMST.DEPOSIT_ENTRY_TYPE = 2 AND NDMST.OLD_RECEIPT_NO <> '' "+
                "AND NDMST.COMPANY_ID = NSMST.COMPANY_ID AND NDMST.SCHEME_ID = NSMST.SCHEME_ID AND NSMST.SCHEME_TYPE = 1 "+
                "AND MONTH(NDMST.EFFECTIVE_DATE) = "+ nMonth +" AND YEAR(NDMST.EFFECTIVE_DATE) = " + txtYear.getText().trim() +
                " GROUP BY DEPOSITMST.DEPOSITER_STATUS " ;
            }
            
            //CD - CD Receipt
            if (ReceiptType == 2) {
                strSQL= "SELECT IF (DEPOSITMST.DEPOSITER_STATUS = 1,COUNT(DEPOSITMST.DEPOSITER_STATUS),0) AS NUM_EMPLOYEE, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 2,COUNT(DEPOSITMST.DEPOSITER_STATUS),0) AS NUM_SHARE_HOLDERS, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 3,COUNT(DEPOSITMST.DEPOSITER_STATUS),0) AS NUM_COMPANY, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 4,COUNT(DEPOSITMST.DEPOSITER_STATUS),0) AS NUM_INDIVIDUAL, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 5,COUNT(DEPOSITMST.DEPOSITER_STATUS),0) AS NUM_DIRECTOR, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 1,SUM(DEPOSITMST.AMOUNT),0) AS SUM_EMPLOYEE, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 2,SUM(DEPOSITMST.AMOUNT),0) AS SUM_SHARE_HOLDERS, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 3,SUM(DEPOSITMST.AMOUNT),0) AS SUM_COMPANY, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 4,SUM(DEPOSITMST.AMOUNT),0) AS SUM_INDIVIDUAL, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 5,SUM(DEPOSITMST.AMOUNT),0) AS SUM_DIRECTOR, "+
                "COUNT(DEPOSITMST.DEPOSITER_STATUS) AS CNT_DEPOSITER_STATUS, "+
                "IF (SUM(DEPOSITMST.AMOUNT) > 0,SUM(DEPOSITMST.AMOUNT),0) AS SUM_AMOUNT "+
                "FROM D_FD_DEPOSIT_MASTER DEPOSITMST, D_FD_SCHEME_MASTER SCHEMEMST , D_FD_DEPOSIT_MASTER NDMST , D_FD_SCHEME_MASTER NSMST "+
                "WHERE DEPOSITMST.COMPANY_ID =" + EITLERPGLOBAL.gCompanyID + " AND DEPOSITMST.DEPOSIT_STATUS=1  AND DEPOSITMST.APPROVED=1  AND DEPOSITMST.CANCELLED=0 "+
                "AND DEPOSITMST.COMPANY_ID = SCHEMEMST.COMPANY_ID AND DEPOSITMST.SCHEME_ID = SCHEMEMST.SCHEME_ID  AND SCHEMEMST.SCHEME_TYPE = 3 "+
                "AND DEPOSITMST.COMPANY_ID = NDMST.COMPANY_ID AND DEPOSITMST.RECEIPT_NO=NDMST.OLD_RECEIPT_NO "+
                "AND NDMST.DEPOSIT_STATUS=0 AND NDMST.APPROVED=1 AND NDMST.CANCELLED=0 "+
                "AND NDMST.DEPOSIT_ENTRY_TYPE = 2 AND NDMST.OLD_RECEIPT_NO <> '' "+
                "AND NDMST.COMPANY_ID = NSMST.COMPANY_ID AND NDMST.SCHEME_ID = NSMST.SCHEME_ID AND NSMST.SCHEME_TYPE = 3 "+
                "AND MONTH(NDMST.EFFECTIVE_DATE) = "+ nMonth +" AND YEAR(NDMST.EFFECTIVE_DATE) = " + txtYear.getText().trim() +
                " GROUP BY DEPOSITMST.DEPOSITER_STATUS " ;
            }
            
            //LD - LD Receipt
            if (ReceiptType == 3) {
                strSQL= "SELECT IF (DEPOSITMST.DEPOSITER_STATUS = 1,COUNT(DEPOSITMST.DEPOSITER_STATUS),0) AS NUM_EMPLOYEE, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 2,COUNT(DEPOSITMST.DEPOSITER_STATUS),0) AS NUM_SHARE_HOLDERS, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 3,COUNT(DEPOSITMST.DEPOSITER_STATUS),0) AS NUM_COMPANY, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 4,COUNT(DEPOSITMST.DEPOSITER_STATUS),0) AS NUM_INDIVIDUAL, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 5,COUNT(DEPOSITMST.DEPOSITER_STATUS),0) AS NUM_DIRECTOR, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 1,SUM(DEPOSITMST.AMOUNT),0) AS SUM_EMPLOYEE, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 2,SUM(DEPOSITMST.AMOUNT),0) AS SUM_SHARE_HOLDERS, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 3,SUM(DEPOSITMST.AMOUNT),0) AS SUM_COMPANY, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 4,SUM(DEPOSITMST.AMOUNT),0) AS SUM_INDIVIDUAL, "+
                "IF (DEPOSITMST.DEPOSITER_STATUS = 5,SUM(DEPOSITMST.AMOUNT),0) AS SUM_DIRECTOR, "+
                "COUNT(DEPOSITMST.DEPOSITER_STATUS) AS CNT_DEPOSITER_STATUS, "+
                "IF (SUM(DEPOSITMST.AMOUNT) > 0,SUM(DEPOSITMST.AMOUNT),0) AS SUM_AMOUNT "+
                "FROM D_FD_DEPOSIT_MASTER DEPOSITMST, D_FD_SCHEME_MASTER SCHEMEMST , D_FD_DEPOSIT_MASTER NDMST , D_FD_SCHEME_MASTER NSMST "+
                "WHERE DEPOSITMST.COMPANY_ID =" + EITLERPGLOBAL.gCompanyID + " AND DEPOSITMST.DEPOSIT_STATUS=1  AND DEPOSITMST.APPROVED=1  AND DEPOSITMST.CANCELLED=0 "+
                "AND DEPOSITMST.COMPANY_ID = SCHEMEMST.COMPANY_ID AND DEPOSITMST.SCHEME_ID = SCHEMEMST.SCHEME_ID  AND SCHEMEMST.SCHEME_TYPE = 2 "+
                "AND DEPOSITMST.COMPANY_ID = NDMST.COMPANY_ID AND DEPOSITMST.RECEIPT_NO=NDMST.OLD_RECEIPT_NO "+
                "AND NDMST.DEPOSIT_STATUS=0 AND NDMST.APPROVED=1 AND NDMST.CANCELLED=0 "+
                "AND NDMST.DEPOSIT_ENTRY_TYPE = 2 AND NDMST.OLD_RECEIPT_NO <> '' "+
                "AND NDMST.COMPANY_ID = NSMST.COMPANY_ID AND NDMST.SCHEME_ID = NSMST.SCHEME_ID AND NSMST.SCHEME_TYPE = 2 "+
                "AND MONTH(NDMST.EFFECTIVE_DATE) = "+ nMonth +" AND YEAR(NDMST.EFFECTIVE_DATE) = " + txtYear.getText().trim() +
                " GROUP BY DEPOSITMST.DEPOSITER_STATUS " ;
            }*/
            
            System.out.println("sql="+strSQL);
            
            ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsTmp.first();
            
            int Counter = 0;
            double NUM_EMPLOYEE=0.0,NUM_SHARE_HOLDERS=0.0,NUM_COMPANY=0.0,NUM_INDIVIDUAL=0.0,NUM_DIRECTOR=0.0;
            double SUM_EMPLOYEE=0.0,SUM_SHARE_HOLDERS=0.0,SUM_COMPANY=0.0,SUM_INDIVIDUAL=0.0,SUM_DIRECTOR=0.0;
            double CNT_DEPOSITER_STATUS=0.0,SUM_AMOUNT=0.0;
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Counter ++;
                    
                    NUM_EMPLOYEE += UtilFunctions.getLong(rsTmp,"NUM_EMPLOYEE",0);
                    NUM_SHARE_HOLDERS += UtilFunctions.getLong(rsTmp,"NUM_SHARE_HOLDERS",0);
                    NUM_COMPANY += UtilFunctions.getLong(rsTmp,"NUM_COMPANY",0);
                    NUM_INDIVIDUAL += UtilFunctions.getLong(rsTmp,"NUM_INDIVIDUAL",0);
                    NUM_DIRECTOR += UtilFunctions.getLong(rsTmp,"NUM_DIRECTOR",0);
                    SUM_EMPLOYEE += UtilFunctions.getLong(rsTmp,"SUM_EMPLOYEE",0);
                    SUM_SHARE_HOLDERS += UtilFunctions.getLong(rsTmp,"SUM_SHARE_HOLDERS",0);
                    SUM_COMPANY += UtilFunctions.getLong(rsTmp,"SUM_COMPANY",0);
                    SUM_INDIVIDUAL += UtilFunctions.getLong(rsTmp,"SUM_INDIVIDUAL",0);
                    SUM_DIRECTOR += UtilFunctions.getLong(rsTmp,"SUM_DIRECTOR",0);
                    CNT_DEPOSITER_STATUS += UtilFunctions.getLong(rsTmp,"CNT_DEPOSITER_STATUS",0);
                    SUM_AMOUNT += UtilFunctions.getLong(rsTmp,"SUM_AMOUNT",0);
                    
                    rsTmp.next();
                }
            }
            
            objRow=objReportData.newRow();
            
            objRow.setValue("NUM_EMPLOYEE",Double.toString(NUM_EMPLOYEE));
            objRow.setValue("NUM_SHARE_HOLDERS",Double.toString(NUM_SHARE_HOLDERS));
            objRow.setValue("NUM_COMPANY",Double.toString(NUM_COMPANY));
            objRow.setValue("NUM_INDIVIDUAL",Double.toString(NUM_INDIVIDUAL));
            objRow.setValue("NUM_DIRECTOR",Double.toString(NUM_DIRECTOR));
            objRow.setValue("SUM_EMPLOYEE",Double.toString(SUM_EMPLOYEE));
            objRow.setValue("SUM_SHARE_HOLDERS",Double.toString(SUM_SHARE_HOLDERS));
            objRow.setValue("SUM_COMPANY",Double.toString(SUM_COMPANY));
            objRow.setValue("SUM_INDIVIDUAL",Double.toString(SUM_INDIVIDUAL));
            objRow.setValue("SUM_DIRECTOR",Double.toString(SUM_DIRECTOR));
            objRow.setValue("CNT_DEPOSITER_STATUS",Double.toString(CNT_DEPOSITER_STATUS));
            objRow.setValue("SUM_AMOUNT",Double.toString(SUM_AMOUNT));
            
            objReportData.AddRow(objRow);
            
            int Comp_ID = EITLERPGLOBAL.gCompanyID;
            
            String sDate = txtYear.getText().trim() + "-" + Integer.toString(cmbMonth.getSelectedIndex()+1) + "-01";
            
            String LastDate = data.getStringValueFromDB("select last_day('"+ sDate +"') from dual");
            
            HashMap Parameters=new HashMap();
            Parameters.put("COMPANY_ID",Integer.toString(Comp_ID));
            Parameters.put("LAST_DATE",LastDate);
            if(ReceiptType==1) {
                Parameters.put("TYPE","FD TO FD");
            } else if(ReceiptType==2) {
                Parameters.put("TYPE","FD TO LD");
            } else if(ReceiptType==3) {
                Parameters.put("TYPE","FD TO CD");
            } else if(ReceiptType==4) {
                Parameters.put("TYPE","LD TO LD");
            } else if(ReceiptType==5) {
                Parameters.put("TYPE","LD TO FD");
            } else if(ReceiptType==6) {
                Parameters.put("TYPE","LD TO CD");
            } else if(ReceiptType==7) {
                Parameters.put("TYPE","CD TO CD");
            } else if(ReceiptType==8) {
                Parameters.put("TYPE","CD TO FD");
            } else if(ReceiptType==9) {
                Parameters.put("TYPE","CD TO LD");
            }
            //FD - FD Receipt
            //if (ReceiptType == 1) {
                objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptFDTOFDReceiptSummary.rpt",Parameters,objReportData);
            //}
            
            //CD - CD Receipt
            /*if (ReceiptType == 2) {
                objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptCDTOCDReceiptSummary.rpt",Parameters,objReportData);
            }
            
            //LD - LD Receipt
            if (ReceiptType == 3) {
                objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptLDTOLDReceiptSummary.rpt",Parameters,objReportData);
            }*/
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    private boolean Validate() {
        //Form level validations
        if(txtYear.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter Year");
            return false;
        } else if(!EITLERPGLOBAL.IsNumber(txtYear.getText().trim())) {
            JOptionPane.showMessageDialog(null,"Invalid Year in YYYY format.");
            return false;
        } else if (txtYear.getText().trim().length() != 4) {
            JOptionPane.showMessageDialog(null,"Invalid Year in YYYY format.");
            return false;
        }
        
        return true;
    }
}
