/*
 * frmBookCode.java
 *
 * Created on February 14, 2008, 12:14 PM
 */

package EITLERP.Finance.ReportsUI;

/**
 *
 * @author  nisarg
 */

import EITLERP.*;
import EITLERP.Finance.*;
import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.io.*;
import java.sql.*;
import TReportWriter.*;
import EITLERP.Utils.SimpleDataProvider.*;
import EITLERP.Finance.Config.*;
import EITLERP.Finance.ReportsUI.*;
import java.text.*;


public class frmRptDepositAnnualReport extends javax.swing.JApplet {
    
    /** Initializes the applet frmBookCode */
    private EITLComboModel cmbDepositTypeModel;
    private EITLComboModel cmbDepositTypeModel1;
    private TReportEngine objEngine=new TReportEngine();
    
    public void init() {
        initComponents();
        setSize(500,340);
        GenerateCombo();
        lblEnterMainCode.setVisible(false);
        txtEnterMainCode.setVisible(false);
        txtEnterMainCode.setText("");
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        bgRatePeriod = new javax.swing.ButtonGroup();
        panelLabel = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        MainPanel = new javax.swing.JTabbedPane();
        panelAnnualSummary = new javax.swing.JPanel();
        lblMainCode = new javax.swing.JLabel();
        txtMainCode = new javax.swing.JTextField();
        cmdMonthlySummary = new javax.swing.JButton();
        lblMainCodeName = new javax.swing.JLabel();
        cmdAnnualSummary = new javax.swing.JButton();
        panelRatePeriod = new javax.swing.JPanel();
        opgPeriod = new javax.swing.JRadioButton();
        opgRate = new javax.swing.JRadioButton();
        lblSelect = new javax.swing.JLabel();
        cmdRatePeriodSummary = new javax.swing.JButton();
        lblDepositType = new javax.swing.JLabel();
        cmbDepositType = new javax.swing.JComboBox();
        txtEnterMainCode = new javax.swing.JTextField();
        lblEnterMainCode = new javax.swing.JLabel();
        panelMaturitySummary = new javax.swing.JPanel();
        lblDepositType1 = new javax.swing.JLabel();
        cmbDepositType1 = new javax.swing.JComboBox();
        cmdMaturitySummary = new javax.swing.JButton();
        lblFromDate = new javax.swing.JLabel();
        lblToDate = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        panelYear = new javax.swing.JPanel();
        lblFromYear = new javax.swing.JLabel();
        txtFromYear = new javax.swing.JTextField();
        lblToYear = new javax.swing.JLabel();
        txtToYear = new javax.swing.JTextField();

        getContentPane().setLayout(null);

        panelLabel.setLayout(null);

        panelLabel.setBackground(new java.awt.Color(0, 153, 204));
        panelLabel.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setText(" Deposit Annual Return Reports");
        panelLabel.add(lblTitle);
        lblTitle.setBounds(10, 10, 220, 15);

        getContentPane().add(panelLabel);
        panelLabel.setBounds(-1, -1, 810, 30);

        MainPanel.setBackground(new java.awt.Color(204, 204, 204));
        MainPanel.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)), " Annual Reports ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        MainPanel.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        MainPanel.setName("");
        MainPanel.setNextFocusableComponent(cmbDepositType);
        panelAnnualSummary.setLayout(null);

        panelAnnualSummary.setBorder(new javax.swing.border.EtchedBorder());
        panelAnnualSummary.setToolTipText("Annual Summary");
        panelAnnualSummary.setFont(new java.awt.Font("Dialog", 1, 12));
        panelAnnualSummary.setNextFocusableComponent(txtMainCode);
        lblMainCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMainCode.setText("Main Code :");
        panelAnnualSummary.add(lblMainCode);
        lblMainCode.setBounds(10, 20, 80, 15);

        txtMainCode.setNextFocusableComponent(cmdMonthlySummary);
        txtMainCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMainCodeFocusLost(evt);
            }
        });
        txtMainCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMainCodeKeyPressed(evt);
            }
        });

        panelAnnualSummary.add(txtMainCode);
        txtMainCode.setBounds(95, 17, 80, 20);

        cmdMonthlySummary.setText("Monthly Summary");
        cmdMonthlySummary.setNextFocusableComponent(cmdAnnualSummary);
        cmdMonthlySummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdMonthlySummaryActionPerformed(evt);
            }
        });

        panelAnnualSummary.add(cmdMonthlySummary);
        cmdMonthlySummary.setBounds(30, 90, 150, 25);

        lblMainCodeName.setText("...");
        panelAnnualSummary.add(lblMainCodeName);
        lblMainCodeName.setBounds(180, 20, 270, 15);

        cmdAnnualSummary.setText("Annual Summary");
        cmdAnnualSummary.setNextFocusableComponent(panelRatePeriod);
        panelAnnualSummary.add(cmdAnnualSummary);
        cmdAnnualSummary.setBounds(210, 90, 150, 25);

        MainPanel.addTab("Annual Summary", panelAnnualSummary);

        panelRatePeriod.setLayout(null);

        panelRatePeriod.setBorder(new javax.swing.border.EtchedBorder());
        panelRatePeriod.setNextFocusableComponent(opgPeriod);
        opgPeriod.setText("Period");
        bgRatePeriod.add(opgPeriod);
        opgPeriod.setNextFocusableComponent(opgRate);
        panelRatePeriod.add(opgPeriod);
        opgPeriod.setBounds(170, 90, 70, 15);

        opgRate.setText("Rate");
        bgRatePeriod.add(opgRate);
        opgRate.setNextFocusableComponent(cmdRatePeriodSummary);
        panelRatePeriod.add(opgRate);
        opgRate.setBounds(250, 90, 60, 15);

        lblSelect.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSelect.setText("Select :");
        panelRatePeriod.add(lblSelect);
        lblSelect.setBounds(83, 90, 70, 15);

        cmdRatePeriodSummary.setText("Rate / Preiod Summary");
        cmdRatePeriodSummary.setNextFocusableComponent(panelMaturitySummary);
        cmdRatePeriodSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRatePeriodSummaryActionPerformed(evt);
            }
        });

        panelRatePeriod.add(cmdRatePeriodSummary);
        cmdRatePeriodSummary.setBounds(130, 120, 180, 25);

        lblDepositType.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDepositType.setText("Deposit Type :");
        panelRatePeriod.add(lblDepositType);
        lblDepositType.setBounds(80, 13, 95, 15);

        cmbDepositType.setNextFocusableComponent(opgPeriod);
        cmbDepositType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDepositTypeItemStateChanged(evt);
            }
        });

        panelRatePeriod.add(cmbDepositType);
        cmbDepositType.setBounds(180, 10, 160, 25);

        panelRatePeriod.add(txtEnterMainCode);
        txtEnterMainCode.setBounds(180, 50, 100, 19);

        lblEnterMainCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEnterMainCode.setText("Main Code :");
        panelRatePeriod.add(lblEnterMainCode);
        lblEnterMainCode.setBounds(40, 50, 120, 15);

        MainPanel.addTab("Rate / Period Summary", panelRatePeriod);

        panelMaturitySummary.setLayout(null);

        panelMaturitySummary.setBorder(new javax.swing.border.EtchedBorder());
        panelMaturitySummary.setNextFocusableComponent(cmbDepositType1);
        panelMaturitySummary.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                panelMaturitySummaryFocusGained(evt);
            }
        });

        lblDepositType1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDepositType1.setText("Deposit Type :");
        panelMaturitySummary.add(lblDepositType1);
        lblDepositType1.setBounds(90, 13, 95, 15);

        cmbDepositType1.setNextFocusableComponent(cmdMaturitySummary);
        panelMaturitySummary.add(cmbDepositType1);
        cmbDepositType1.setBounds(190, 10, 160, 25);

        cmdMaturitySummary.setText("Maturity Summary");
        cmdMaturitySummary.setNextFocusableComponent(txtFromYear);
        cmdMaturitySummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdMaturitySummaryActionPerformed(evt);
            }
        });

        panelMaturitySummary.add(cmdMaturitySummary);
        cmdMaturitySummary.setBounds(140, 90, 180, 25);

        lblFromDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFromDate.setText("From Date :");
        panelMaturitySummary.add(lblFromDate);
        lblFromDate.setBounds(40, 50, 80, 15);

        lblToDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblToDate.setText("To Date :");
        panelMaturitySummary.add(lblToDate);
        lblToDate.setBounds(240, 50, 60, 15);

        panelMaturitySummary.add(txtFromDate);
        txtFromDate.setBounds(130, 50, 90, 19);

        panelMaturitySummary.add(txtToDate);
        txtToDate.setBounds(310, 50, 90, 19);

        MainPanel.addTab("Maturity Summary", panelMaturitySummary);

        getContentPane().add(MainPanel);
        MainPanel.setBounds(10, 100, 470, 210);
        MainPanel.getAccessibleContext().setAccessibleName("No Name");

        panelYear.setLayout(null);

        panelYear.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)), " Insert Year ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        lblFromYear.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFromYear.setText("From Year :");
        panelYear.add(lblFromYear);
        lblFromYear.setBounds(30, 22, 95, 15);

        txtFromYear.setNextFocusableComponent(panelAnnualSummary);
        txtFromYear.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFromYearFocusLost(evt);
            }
        });

        panelYear.add(txtFromYear);
        txtFromYear.setBounds(130, 20, 70, 20);

        lblToYear.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblToYear.setText("To Year :");
        panelYear.add(lblToYear);
        lblToYear.setBounds(250, 22, 60, 15);

        txtToYear.setEditable(false);
        txtToYear.setEnabled(false);
        panelYear.add(txtToYear);
        txtToYear.setBounds(320, 20, 80, 20);

        getContentPane().add(panelYear);
        panelYear.setBounds(10, 40, 470, 50);

    }//GEN-END:initComponents

    private void panelMaturitySummaryFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_panelMaturitySummaryFocusGained
        // TODO add your handling code here:
        
    }//GEN-LAST:event_panelMaturitySummaryFocusGained
    
    private void cmbDepositTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDepositTypeItemStateChanged
        // TODO add your handling code here:
        if(cmbDepositType.getSelectedIndex()==2) {
            lblEnterMainCode.setVisible(true);
            txtEnterMainCode.setVisible(true);
            txtEnterMainCode.setText("");
        } else {
            lblEnterMainCode.setVisible(false);
            txtEnterMainCode.setVisible(false);
            txtEnterMainCode.setText("");
        }
    }//GEN-LAST:event_cmbDepositTypeItemStateChanged
    
    private void txtMainCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMainCodeKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==112) {
            LOV aList=new LOV();
            
            aList.SQL="SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL WHERE APPROVED=1 AND CANCELLED=0 ORDER BY ACCOUNT_NAME";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            aList.UseSpecifiedConn=true;
            aList.dbURL=FinanceGlobal.FinURL;
            
            if(aList.ShowLOV()) {
                txtMainCode.setText(aList.ReturnVal);
                lblMainCodeName.setText(clsAccount.getAccountName(aList.ReturnVal,""));
            }
        }
    }//GEN-LAST:event_txtMainCodeKeyPressed
    
    private void txtMainCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMainCodeFocusLost
        // TODO add your handling code here:
        String MainCodeName = clsAccount.getAccountName(txtMainCode.getText().trim(), "");
        if(!MainCodeName.equals("")) {
            lblMainCodeName.setText(MainCodeName);
        } else {
            lblMainCodeName.setText("...");
        }
    }//GEN-LAST:event_txtMainCodeFocusLost
    
    private void txtFromYearFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFromYearFocusLost
        // TODO add your handling code here:
        try {
            txtToYear.setText(Integer.toString(Integer.parseInt(txtFromYear.getText().trim()) + 1));
        }catch(Exception e) {
        }
    }//GEN-LAST:event_txtFromYearFocusLost
    
    private void cmdMonthlySummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdMonthlySummaryActionPerformed
        // TODO add your handling code here:
        if(!Validate()) {
            return;
        }
        GenerateAnnualReport();
    }//GEN-LAST:event_cmdMonthlySummaryActionPerformed
    
    private void cmdMaturitySummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdMaturitySummaryActionPerformed
        // TODO add your handling code here:
        if(!Validate1()) {
            return;
        }
        GenerateReportMaturity();
    }//GEN-LAST:event_cmdMaturitySummaryActionPerformed
    
    private void cmdRatePeriodSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRatePeriodSummaryActionPerformed
        // TODO add your handling code here:
        if(!Validate()) {
            return;
        }
        GenerateReportRatePeriodSummary();
    }//GEN-LAST:event_cmdRatePeriodSummaryActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane MainPanel;
    private javax.swing.ButtonGroup bgRatePeriod;
    private javax.swing.JComboBox cmbDepositType;
    private javax.swing.JComboBox cmbDepositType1;
    private javax.swing.JButton cmdAnnualSummary;
    private javax.swing.JButton cmdMaturitySummary;
    private javax.swing.JButton cmdMonthlySummary;
    private javax.swing.JButton cmdRatePeriodSummary;
    private javax.swing.JLabel lblDepositType;
    private javax.swing.JLabel lblDepositType1;
    private javax.swing.JLabel lblEnterMainCode;
    private javax.swing.JLabel lblFromDate;
    private javax.swing.JLabel lblFromYear;
    private javax.swing.JLabel lblMainCode;
    private javax.swing.JLabel lblMainCodeName;
    private javax.swing.JLabel lblSelect;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblToDate;
    private javax.swing.JLabel lblToYear;
    private javax.swing.JRadioButton opgPeriod;
    private javax.swing.JRadioButton opgRate;
    private javax.swing.JPanel panelAnnualSummary;
    private javax.swing.JPanel panelLabel;
    private javax.swing.JPanel panelMaturitySummary;
    private javax.swing.JPanel panelRatePeriod;
    private javax.swing.JPanel panelYear;
    private javax.swing.JTextField txtEnterMainCode;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtFromYear;
    private javax.swing.JTextField txtMainCode;
    private javax.swing.JTextField txtToDate;
    private javax.swing.JTextField txtToYear;
    // End of variables declaration//GEN-END:variables
    
    private boolean Validate1() {
        
        if(txtFromDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter From Date");
            return false;
        }else if(!EITLERPGLOBAL.isDate(txtFromDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid From Date in DD/MM/YYYY format.");
            return false;
        }
        
        if(txtToDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter To Date");
            return false;
        }else if(!EITLERPGLOBAL.isDate(txtToDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid From Date in DD/MM/YYYY format.");
            return false;
        }
             
        if(MainPanel.getSelectedIndex()==0) {
            if(txtMainCode.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Insert Main Code.");
                return false;
            }
            if(lblMainCodeName.getText().trim().equals("...")) {
                JOptionPane.showMessageDialog(null,"Insert valid Main Code.");
                return false;
            }
        } else if(MainPanel.getSelectedIndex()==1) {
            if(cmbDepositType.getSelectedIndex()==0) {
                JOptionPane.showMessageDialog(null,"Please Select Deposit Type");
                return false;
            }
            
            if(cmbDepositType.getSelectedIndex()==2) {
                if(txtEnterMainCode.getText().trim().equals("")) {
                    JOptionPane.showMessageDialog(this,"Please Enter Main Code for type LD.");
                    return false;
                }
            }
            
            if(!opgPeriod.isSelected() && !opgRate.isSelected()) {
                JOptionPane.showMessageDialog(null,"Please Select Ratewise or Periodwise summary option.");
                return false;
            }
        } else if(MainPanel.getSelectedIndex()==2) {
            if(cmbDepositType1.getSelectedIndex()==0) {
                JOptionPane.showMessageDialog(null,"Please Select Deposit Type");
                return false;
            }
        }
        return true;
    }
    
    private boolean Validate() {
        if(txtFromYear.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter From Year");
            return false;
        }
        
        if(txtFromYear.getText().trim().length()!= 4) {
            JOptionPane.showMessageDialog(null,"Invalid Year in YYYY format.");
            return false;
        }
        
        try {
            int i = Integer.parseInt(txtFromYear.getText().trim());
        } catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(null,"Year must be Numeric.");
            return false;
        }
        
        if(MainPanel.getSelectedIndex()==0) {
            if(txtMainCode.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Insert Main Code.");
                return false;
            }
            if(lblMainCodeName.getText().trim().equals("...")) {
                JOptionPane.showMessageDialog(null,"Insert valid Main Code.");
                return false;
            }
        } else if(MainPanel.getSelectedIndex()==1) {
            if(cmbDepositType.getSelectedIndex()==0) {
                JOptionPane.showMessageDialog(null,"Please Select Deposit Type");
                return false;
            }
            
            if(cmbDepositType.getSelectedIndex()==2) {
                if(txtEnterMainCode.getText().trim().equals("")) {
                    JOptionPane.showMessageDialog(this,"Please Enter Main Code for type LD.");
                    return false;
                }
            }
            
            if(!opgPeriod.isSelected() && !opgRate.isSelected()) {
                JOptionPane.showMessageDialog(null,"Please Select Ratewise or Periodwise summary option.");
                return false;
            }
        } else if(MainPanel.getSelectedIndex()==2) {
            if(cmbDepositType1.getSelectedIndex()==0) {
                JOptionPane.showMessageDialog(null,"Please Select Deposit Type");
                return false;
            }
        }
        return true;
    }
    private void GenerateCombo() {
        cmbDepositTypeModel=new EITLComboModel();
        cmbDepositType.removeAllItems();
        cmbDepositType.setModel(cmbDepositTypeModel);
        
        cmbDepositTypeModel1=new EITLComboModel();
        cmbDepositType1.removeAllItems();
        cmbDepositType1.setModel(cmbDepositTypeModel1);
        
        ComboData aData=new ComboData();
        aData.Code=0;
        aData.Text="Select Deposti Type";
        cmbDepositTypeModel.addElement(aData);
        cmbDepositTypeModel1.addElement(aData);
        
        aData=new ComboData();
        aData.Code=1;
        aData.Text="FD";
        cmbDepositTypeModel.addElement(aData);
        cmbDepositTypeModel1.addElement(aData);
        
        aData=new ComboData();
        aData.Code=2;
        aData.Text="LD";
        cmbDepositTypeModel.addElement(aData);
        cmbDepositTypeModel1.addElement(aData);
        
        aData=new ComboData();
        aData.Code=3;
        aData.Text="CD";
        cmbDepositTypeModel.addElement(aData);
        cmbDepositTypeModel1.addElement(aData);
    }
    
    private void GenerateReportRatePeriodSummary() {
        String FromDate = "";
        String ToDate = "";
        int SchemeType = 0, Counter=0;
        String strSQL = "",Option="",Optionwise="",Condition="";
        ResultSet rsOptionwise = null;
        TReportWriter.SimpleDataProvider.TRow objRow;
        TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
        try {
            if(opgRate.isSelected()) {
                Option = "INTEREST_RATE";
                Optionwise = "RATE";
            } else if(opgPeriod.isSelected()) {
                Option = "DEPOSIT_PERIOD";
                Optionwise = "PERIOD";
            }
            FromDate = txtFromYear.getText().trim()+"-04-01";
            ToDate = txtToYear.getText().trim()+"-03-31";
            SchemeType = cmbDepositType.getSelectedIndex();
            
            if(SchemeType==2) {
                Condition = " AND A.MAIN_ACCOUNT_CODE='"+txtEnterMainCode.getText().trim()+"' ";
            }
            
            objReportData.AddColumn("SR_NO");
            objReportData.AddColumn("TYPEWISE");
            objReportData.AddColumn("NO_OF_RECEIPT");
            objReportData.AddColumn("AMOUNT");
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            objOpeningRow.setValue("SR_NO","");
            objOpeningRow.setValue("TYPEWISE","");
            objOpeningRow.setValue("NO_OF_RECEIPT","");
            objOpeningRow.setValue("AMOUNT","");
            
            strSQL = "SELECT A."+Option+",COUNT(A.RECEIPT_NO) AS TOTAL_RECEIPT," +
            "ROUND(SUM(A.AMOUNT),2) AS TOTAL_AMOUNT FROM D_FD_DEPOSIT_MASTER A,D_FD_SCHEME_MASTER B " +
            "WHERE A.SCHEME_ID = B.SCHEME_ID AND B.SCHEME_TYPE="+SchemeType+" AND A.CANCELLED=0 AND A.APPROVED=1 AND A.RECEIPT_DATE<= '"+ToDate+"' " +
            "AND A.MATURITY_DATE>'"+ToDate+"' AND (A.PM_DATE>'"+ToDate+"' OR A.PM_DATE='' OR A.PM_DATE='0000-00-00') " + Condition + " " +
            "GROUP BY A."+Option+" " +
            "ORDER BY A."+Option+" ";
            
            rsOptionwise = data.getResult(strSQL,FinanceGlobal.FinURL);
            rsOptionwise.first();
            Counter=0;
            while(!rsOptionwise.isAfterLast()) {
                Counter ++;
                objRow=objReportData.newRow();
                objRow.setValue("SR_NO",Integer.toString(Counter));
                if(opgRate.isSelected()) {
                    objRow.setValue("TYPEWISE",Double.toString(UtilFunctions.getDouble(rsOptionwise,Option,0)));
                } else if(opgPeriod.isSelected()) {
                    objRow.setValue("TYPEWISE",Integer.toString(UtilFunctions.getInt(rsOptionwise,Option,0)));
                }
                objRow.setValue("NO_OF_RECEIPT",Integer.toString(UtilFunctions.getInt(rsOptionwise,"TOTAL_RECEIPT",0)));
                objRow.setValue("AMOUNT",Double.toString(UtilFunctions.getDouble(rsOptionwise,"TOTAL_AMOUNT",0)));
                objReportData.AddRow(objRow);
                rsOptionwise.next();
            }
            
            HashMap Parameters=new HashMap();
            Parameters.put("FROM_DATE",EITLERPGLOBAL.formatDate(FromDate));
            Parameters.put("TO_DATE",EITLERPGLOBAL.formatDate(ToDate));
            if(SchemeType==1) {
                Parameters.put("TYPE","FD");
            } else if(SchemeType==2) {
                Parameters.put("TYPE","LD");
            } else if(SchemeType==3) {
                Parameters.put("TYPE","CD");
            }
            Parameters.put("OPTIONWISE",Optionwise);
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptFDAnnualOptionwiseSummary.rpt",Parameters,objReportData);
            
        } catch(Exception e) {
        }
    }
    
    private void GenerateReportMaturity() {
        String FromDate = "";
        String ToDate = "";
        int SchemeType = 0, Counter=0;
        String strSQL = "";
        ResultSet rsMaturity = null;
        TReportWriter.SimpleDataProvider.TRow objRow;
        TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
        try {
            
            //FromDate = txtFromYear.getText().trim()+"-04-01";
            //ToDate = txtToYear.getText().trim()+"-03-31";
            //Chirag
            FromDate = EITLERPGLOBAL.formatDateDB(txtFromDate.getText());
            ToDate = EITLERPGLOBAL.formatDateDB(txtToDate.getText());
            SchemeType = cmbDepositType1.getSelectedIndex();
            
            objReportData.AddColumn("SR_NO");
            objReportData.AddColumn("MONTH");
            objReportData.AddColumn("YEAR");
            objReportData.AddColumn("NO_OF_RECEIPT");
            objReportData.AddColumn("AMOUNT");
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            objOpeningRow.setValue("SR_NO","");
            objOpeningRow.setValue("MONTH","");
            objOpeningRow.setValue("YEAR","");
            objOpeningRow.setValue("NO_OF_RECEIPT","");
            objOpeningRow.setValue("AMOUNT","");
            
            strSQL = "SELECT COUNT(DMST.RECEIPT_NO) AS NO_OF_RECEIPT, DMST.MATURITY_DATE AS MONTH, " +
            "YEAR(DMST.MATURITY_DATE) AS YEAR,ROUND(SUM(DMST.AMOUNT),2) AS AMOUNT FROM D_FD_DEPOSIT_MASTER DMST, " +
            "D_FD_SCHEME_MASTER SMST WHERE DMST.COMPANY_ID ="+EITLERPGLOBAL.gCompanyID+" AND DMST.APPROVED=1 " +
            "AND DMST.CANCELLED=0 AND DMST.COMPANY_ID=SMST.COMPANY_ID AND DMST.SCHEME_ID=SMST.SCHEME_ID " +
            "AND SMST.SCHEME_TYPE="+SchemeType+" AND DMST.MATURITY_DATE>='"+FromDate+"' AND DMST.MATURITY_DATE<='"+ToDate+"' " +
            "AND (DMST.PM_DATE>'"+ToDate+"' OR DMST.PM_DATE='' OR DMST.PM_DATE='0000-00-00') "+
            "GROUP BY MONTH(DMST.MATURITY_DATE),YEAR(DMST.MATURITY_DATE) " +
            "ORDER BY YEAR(DMST.MATURITY_DATE),MONTH(DMST.MATURITY_DATE)";
            
            rsMaturity = data.getResult(strSQL,FinanceGlobal.FinURL);
            rsMaturity.first();
            Counter=0;
            if(rsMaturity.getRow()>0) {
                while(!rsMaturity.isAfterLast()) {
                    Counter ++;
                    objRow=objReportData.newRow();
                    objRow.setValue("SR_NO",Integer.toString(Counter));
                    objRow.setValue("MONTH",EITLERPGLOBAL.getMonthName(UtilFunctions.getString(rsMaturity,"MONTH","")));
                    objRow.setValue("YEAR",UtilFunctions.getString(rsMaturity,"YEAR",""));
                    objRow.setValue("NO_OF_RECEIPT",Integer.toString(UtilFunctions.getInt(rsMaturity,"NO_OF_RECEIPT",0)));
                    objRow.setValue("AMOUNT",Double.toString(UtilFunctions.getDouble(rsMaturity,"AMOUNT",0)));
                    objReportData.AddRow(objRow);
                    rsMaturity.next();
                }
            }
            
            HashMap Parameters=new HashMap();
            Parameters.put("FROM_DATE",EITLERPGLOBAL.formatDate(FromDate));
            Parameters.put("TO_DATE",EITLERPGLOBAL.formatDate(ToDate));
            if(SchemeType==1) {
                Parameters.put("TYPE","FD");
            } else if(SchemeType==2) {
                Parameters.put("TYPE","LD");
            } else if(SchemeType==3) {
                Parameters.put("TYPE","CD");
            }
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptFDAnnualMaturitySummary.rpt",Parameters,objReportData);
        } catch(Exception e) {
        }
    }
    
    private void GenerateAnnualReport() {
        String strSQL="";
        String MainAccountCode="0.0";
        ResultSet rsDepositFresh,rsDepositRenewal,rsDepositRefund,rsDepositRenewed,rsTmp;
        int FreshReceipt=0,RenewalReceipt=0;
        double FreshAmount=0.0,RenewalAmount=0.0;
        int TotalFreshRenewalReceipt=0;
        double TotalFreshRenewalAmount=0.0;
        int RefundReceipt=0,RenewedReceipt=0;
        double RefundAmount=0.0,RenewedAmount=0.0;
        int TotalRefundRenewedReceipt=0;
        double TotalRefundRenewedAmount=0.0;
        int OpeningReceipt=0;
        double OpeningAmount=0.0;
        int BalanceReceipt=0;
        double BalanceAmount=0.0;
        String OpeningDate="";
        String Month="";
        String NewAccountCode="";
        
        
        if(txtMainCode.getText().trim().equals("115012")) {
            NewAccountCode = "('115012','115218')";
        }
        else if(txtMainCode.getText().trim().equals("115153")) {
            NewAccountCode = "('115153','115225')";
        }
        else {
            NewAccountCode = "('"+ txtMainCode.getText().trim() +"')";
        }
        
        try {
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            objReportData.AddColumn("MONTH");
            objReportData.AddColumn("FRESH_RECEIPT");
            objReportData.AddColumn("FRESH_DEPOSIT_AMOUNT");
            objReportData.AddColumn("RENEWAL_RECEIPT");
            objReportData.AddColumn("RENEWAL_DEPOSIT_AMOUNT");
            objReportData.AddColumn("TOTAL_FRESH_RENEWAL_RECEIPT");
            objReportData.AddColumn("TOTAL_FRESH_RENEWAL_DEPOSIT_AMOUNT");
            objReportData.AddColumn("REFUND_RECEIPT");
            objReportData.AddColumn("REFUND_DEPOSIT_AMOUNT");
            objReportData.AddColumn("RENEWED_RECEIPT");
            objReportData.AddColumn("RENEWED_DEPOSIT_AMOUNT");
            objReportData.AddColumn("TOTAL_REFUND_RENEWED_RECEIPT");
            objReportData.AddColumn("TOTAL_REFUND_RENEWED_DEPOSIT_AMOUNT");
            objReportData.AddColumn("BALANCE_RECEIPT");
            objReportData.AddColumn("BALANCE_AMOUNT");
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            objOpeningRow.setValue("MONTH","");
            objOpeningRow.setValue("FRESH_RECEIPT","");
            objOpeningRow.setValue("FRESH_DEPOSIT_AMOUNT","");
            objOpeningRow.setValue("RENEWAL_RECEIPT","");
            objOpeningRow.setValue("RENEWAL_DEPOSIT_AMOUNT","");
            objOpeningRow.setValue("TOTAL_FRESH_RENEWAL_RECEIPT","");
            objOpeningRow.setValue("TOTAL_FRESH_RENEWAL_DEPOSIT_AMOUNT","");
            objOpeningRow.setValue("REFUND_RECEIPT","");
            objOpeningRow.setValue("REFUND_DEPOSIT_AMOUNT","");
            objOpeningRow.setValue("RENEWED_RECEIPT","");
            objOpeningRow.setValue("RENEWED_DEPOSIT_AMOUNT","");
            objOpeningRow.setValue("TOTAL_REFUND_RENEWED_RECEIPT","");
            objOpeningRow.setValue("TOTAL_REFUND_RENEWED_DEPOSIT_AMOUNT","");
            objOpeningRow.setValue("BALANCE_RECEIPT","");
            objOpeningRow.setValue("BALANCE_AMOUNT","");
            //find the opening
            String Qry = "SELECT * FROM D_FD_DEPOSIT_OPENING WHERE MAIN_ACCOUNT_CODE = '" + txtMainCode.getText().trim() + "' AND YEAR(ENTRY_DATE) <='" + txtFromYear.getText().trim() + "' ORDER BY ENTRY_DATE DESC";
            rsTmp = data.getResult(Qry,EITLERP.Finance.FinanceGlobal.FinURL);
            if(rsTmp.getRow()>0) {
                OpeningReceipt=  rsTmp.getInt("TOTAL_RECEIPT");
                OpeningAmount=  rsTmp.getDouble("AMOUNT");
                OpeningDate=  rsTmp.getString("ENTRY_DATE");
            }
            else {
                OpeningReceipt=  0;
                OpeningAmount=  0.0;
            }
            // end find opening
            BalanceReceipt = OpeningReceipt;
            BalanceAmount = OpeningAmount;
            for(int i=4;i<=12;i++) {
                // FRESH RECEIPT
                strSQL="SELECT COUNT(*) AS RECEIPT,IF(SUM(AMOUNT) IS NULL,0,SUM(AMOUNT)) AS AMOUNT "+
                "FROM D_FD_DEPOSIT_MASTER "+
                "WHERE APPROVED=1 AND CANCELLED=0 AND DEPOSIT_ENTRY_TYPE =1 "+
                "AND MONTH(RECEIPT_DATE) = '"+i+"' AND YEAR(RECEIPT_DATE) = '" + txtFromYear.getText().trim() + "' "+
                "AND MAIN_ACCOUNT_CODE ='" + txtMainCode.getText().trim() + "' " +
                "GROUP BY MONTHNAME(RECEIPT_DATE)";
                rsDepositFresh= data.getResult(strSQL,EITLERP.Finance.FinanceGlobal.FinURL);
                if(rsDepositFresh.getRow()>0) {
                    FreshReceipt=rsDepositFresh.getInt("RECEIPT");
                    FreshAmount=EITLERPGLOBAL.round(rsDepositFresh.getDouble("AMOUNT"),2);
                }
                else {
                    FreshReceipt=0;
                    FreshAmount=0.0;
                }
                // RENEWAL RECEIPT
                strSQL="SELECT COUNT(*) AS RECEIPT,IF(SUM(AMOUNT) IS NULL,0,SUM(AMOUNT)) AS AMOUNT "+
                "FROM D_FD_DEPOSIT_MASTER "+
                "WHERE APPROVED=1 AND CANCELLED=0 AND DEPOSIT_ENTRY_TYPE =2 "+
                "AND MONTH(RECEIPT_DATE) = '"+i+"' AND YEAR(RECEIPT_DATE) = '" + txtFromYear.getText().trim() + "' "+
                "AND MAIN_ACCOUNT_CODE IN " + NewAccountCode + " " +
                "GROUP BY MONTHNAME(RECEIPT_DATE)";
                rsDepositRenewal= data.getResult(strSQL,EITLERP.Finance.FinanceGlobal.FinURL);
                if(rsDepositRenewal.getRow()>0) {
                    RenewalReceipt=rsDepositRenewal.getInt("RECEIPT");
                    RenewalAmount=EITLERPGLOBAL.round(rsDepositRenewal.getDouble("AMOUNT"),2);
                }
                else {
                    RenewalReceipt=0;
                    RenewalAmount=0.0;
                }
                TotalFreshRenewalReceipt = FreshReceipt + RenewalReceipt;
                TotalFreshRenewalAmount = FreshAmount + RenewalAmount;
                //REFUND RECEIPT
                strSQL="SELECT COUNT(*) AS RECEIPT,IF(SUM(AMOUNT) IS NULL,0,SUM(AMOUNT)) AS AMOUNT "+
                "FROM "+
                "(SELECT MONTH(REFUND_DATE) AS M,YEAR(REFUND_DATE) AS Y ,AMOUNT "+
                "FROM D_FD_DEPOSIT_REFUND "+
                "WHERE MAIN_ACCOUNT_CODE IN " + NewAccountCode + " "+
                "AND MONTH(REFUND_DATE)  = '"+i+"' AND YEAR(REFUND_DATE) = '" + txtFromYear.getText().trim() + "' AND APPROVED=1 AND CANCELLED=0 "+
                "UNION ALL "+
                "SELECT MONTH(PM_DATE) AS M,YEAR(PM_DATE) AS Y,AMOUNT "+
                "FROM D_FD_DEPOSIT_MASTER "+
                "WHERE MAIN_ACCOUNT_CODE IN " + NewAccountCode + " AND PM_DATE<>'0000-00-00' "+
                "AND MONTH(PM_DATE) ='"+i+"' AND YEAR(PM_DATE) ='" + txtFromYear.getText().trim() + "' AND APPROVED=1 AND CANCELLED=0 "+
                ") A "+
                "GROUP BY A.M "+
                "ORDER BY A.Y,A.M ";
                rsDepositRefund = data.getResult(strSQL,EITLERP.Finance.FinanceGlobal.FinURL);
                if(rsDepositRefund.getRow()>0) {
                    RefundReceipt=rsDepositRefund.getInt("RECEIPT");
                    RefundAmount=EITLERPGLOBAL.round(rsDepositRefund.getDouble("AMOUNT"),2);
                }
                else {
                    RefundReceipt=0;
                    RefundAmount=0.0;
                }
                //RENEWED RECEIPT
                strSQL="SELECT COUNT(*) AS RECEIPT, IF(SUM(DMST.AMOUNT) IS NULL,0,SUM(DMST.AMOUNT)) AS AMOUNT "+
                "FROM D_FD_DEPOSIT_MASTER DMST, D_FD_SCHEME_MASTER OSMST,  "+
                "D_FD_SCHEME_MASTER NSMST, D_FD_DEPOSIT_MASTER NDMST  "+
                "WHERE DMST.COMPANY_ID = "+EITLERPGLOBAL.gCompanyID+" AND DMST.DEPOSIT_STATUS=1 AND DMST.APPROVED=1  "+
                "AND DMST.CANCELLED=0 AND DMST.COMPANY_ID = OSMST.COMPANY_ID  "+
                "AND DMST.SCHEME_ID = OSMST.SCHEME_ID  "+
                "AND DMST.MAIN_ACCOUNT_CODE IN " + NewAccountCode + " "+
                "AND NDMST.COMPANY_ID = NSMST.COMPANY_ID AND NDMST.SCHEME_ID = NSMST.SCHEME_ID  "+
                "AND DMST.COMPANY_ID = NDMST.COMPANY_ID AND DMST.RECEIPT_NO=NDMST.OLD_RECEIPT_NO  "+
                "AND NDMST.APPROVED=1 AND NDMST.CANCELLED=0  "+
                "AND NDMST.DEPOSIT_ENTRY_TYPE = 2 AND NDMST.OLD_RECEIPT_NO <> ''  "+
                "AND MONTH(NDMST.RECEIPT_DATE) = '"+i+"' AND YEAR(NDMST.RECEIPT_DATE) = '" + txtFromYear.getText().trim() + "' ";
                rsDepositRenewed = data.getResult(strSQL,EITLERP.Finance.FinanceGlobal.FinURL);
                if(rsDepositRenewed.getRow()>0) {
                    RenewedReceipt=rsDepositRenewed.getInt("RECEIPT") ;
                    RenewedAmount=EITLERPGLOBAL.round(rsDepositRenewed.getDouble("AMOUNT"),2);
                } else {
                    RenewedReceipt=0;
                    RenewedAmount=0.0;
                }
                TotalRefundRenewedReceipt=RefundReceipt + RenewedReceipt;
                TotalRefundRenewedAmount=RefundAmount + RenewedAmount;
                
                //CALCULATE BALANCE RECEIPT AND AMOUNT
                BalanceReceipt = BalanceReceipt + TotalFreshRenewalReceipt - TotalRefundRenewedReceipt;
                BalanceAmount = BalanceAmount + TotalFreshRenewalAmount - TotalRefundRenewedAmount;
                if(i==4) {
                    Month="APR"+"-"+txtFromYear.getText().substring(2);
                }
                else if(i==5){
                    Month="MAY"+"-"+txtFromYear.getText().substring(2);
                }
                else if(i==6){
                    Month="JUN"+"-"+txtFromYear.getText().substring(2);
                }
                else if(i==7){
                    Month="JUL"+"-"+txtFromYear.getText().substring(2);
                }
                else if(i==8){
                    Month="AUG"+"-"+txtFromYear.getText().substring(2);
                }
                else if(i==9){
                    Month="SEP"+"-"+txtFromYear.getText().substring(2);
                }
                else if(i==10){
                    Month="OCT"+"-"+txtFromYear.getText().substring(2);
                }
                else if(i==11){
                    Month="NOV"+"-"+txtFromYear.getText().substring(2);
                }
                else if(i==12){
                    Month="DEC"+"-"+txtFromYear.getText().substring(2);
                }
                objRow=objReportData.newRow();
                objRow.setValue("MONTH",Month);
                objRow.setValue("FRESH_RECEIPT",String.valueOf(FreshReceipt));
                objRow.setValue("FRESH_DEPOSIT_AMOUNT",String.valueOf(FreshAmount));
                objRow.setValue("RENEWAL_RECEIPT",String.valueOf(RenewalReceipt));
                objRow.setValue("RENEWAL_DEPOSIT_AMOUNT",String.valueOf(RenewalAmount));
                objRow.setValue("TOTAL_FRESH_RENEWAL_RECEIPT",String.valueOf(TotalFreshRenewalReceipt));
                objRow.setValue("TOTAL_FRESH_RENEWAL_DEPOSIT_AMOUNT",String.valueOf(TotalFreshRenewalAmount));
                objRow.setValue("REFUND_RECEIPT",String.valueOf(RefundReceipt));
                objRow.setValue("REFUND_DEPOSIT_AMOUNT",String.valueOf(RefundAmount));
                objRow.setValue("RENEWED_RECEIPT",String.valueOf(RenewedReceipt));
                objRow.setValue("RENEWED_DEPOSIT_AMOUNT",String.valueOf(RenewedAmount));
                objRow.setValue("TOTAL_REFUND_RENEWED_RECEIPT",String.valueOf(TotalRefundRenewedReceipt));
                objRow.setValue("TOTAL_REFUND_RENEWED_DEPOSIT_AMOUNT",String.valueOf(TotalRefundRenewedAmount));
                objRow.setValue("BALANCE_RECEIPT",String.valueOf(BalanceReceipt));
                objRow.setValue("BALANCE_AMOUNT",String.valueOf(BalanceAmount));
                objReportData.AddRow(objRow);
            }
            for(int i=1;i<=3;i++) {
                strSQL="SELECT COUNT(*) AS RECEIPT,IF(SUM(AMOUNT) IS NULL,0,SUM(AMOUNT)) AS AMOUNT "+
                "FROM D_FD_DEPOSIT_MASTER "+
                "WHERE APPROVED=1 AND CANCELLED=0 AND DEPOSIT_ENTRY_TYPE =1 "+
                "AND MONTH(RECEIPT_DATE) = '"+i+"' AND YEAR(RECEIPT_DATE) = '" + txtToYear.getText().trim() + "' "+
                "AND MAIN_ACCOUNT_CODE ='" + txtMainCode.getText().trim() + "' " +
                "GROUP BY MONTHNAME(RECEIPT_DATE)";
                rsDepositFresh= data.getResult(strSQL,EITLERP.Finance.FinanceGlobal.FinURL);
                if(rsDepositFresh.getRow()>0) {
                    FreshReceipt=rsDepositFresh.getInt("RECEIPT");
                    FreshAmount=EITLERPGLOBAL.round(rsDepositFresh.getDouble("AMOUNT"),3);
                }
                else {
                    FreshReceipt=0;
                    FreshAmount=0.0;
                }
                strSQL="SELECT COUNT(*) AS RECEIPT,IF(SUM(AMOUNT) IS NULL,0,SUM(AMOUNT)) AS AMOUNT "+
                "FROM D_FD_DEPOSIT_MASTER "+
                "WHERE APPROVED=1 AND CANCELLED=0 AND DEPOSIT_ENTRY_TYPE =2 "+
                "AND MONTH(RECEIPT_DATE) = '"+i+"' AND YEAR(RECEIPT_DATE) = '" + txtToYear.getText().trim() + "' "+
                "AND MAIN_ACCOUNT_CODE IN " + NewAccountCode + " " +
                "GROUP BY MONTHNAME(RECEIPT_DATE)";
                rsDepositRenewal= data.getResult(strSQL,EITLERP.Finance.FinanceGlobal.FinURL);
                if(rsDepositRenewal.getRow()>0) {
                    RenewalReceipt=rsDepositRenewal.getInt("RECEIPT");
                    RenewalAmount=EITLERPGLOBAL.round(rsDepositRenewal.getDouble("AMOUNT"),3);
                }
                else {
                    RenewalReceipt=0;
                    RenewalAmount=0.0;
                }
                TotalFreshRenewalReceipt = FreshReceipt + RenewalReceipt;
                TotalFreshRenewalAmount = FreshAmount + RenewalAmount;
                strSQL="SELECT COUNT(*) AS RECEIPT,IF(SUM(AMOUNT) IS NULL,0,SUM(AMOUNT)) AS AMOUNT "+
                "FROM "+
                "(SELECT MONTH(REFUND_DATE) AS M,YEAR(REFUND_DATE) AS Y ,AMOUNT "+
                "FROM D_FD_DEPOSIT_REFUND "+
                "WHERE MAIN_ACCOUNT_CODE IN " + NewAccountCode + " "+
                "AND MONTH(REFUND_DATE)  = '"+i+"' AND YEAR(REFUND_DATE) = '" + txtToYear.getText().trim() + "' AND APPROVED=1 AND CANCELLED=0 "+
                "UNION ALL "+
                "SELECT MONTH(PM_DATE) AS M,YEAR(PM_DATE) AS Y,AMOUNT "+
                "FROM D_FD_DEPOSIT_MASTER "+
                "WHERE MAIN_ACCOUNT_CODE IN " + NewAccountCode + " AND PM_DATE<>'0000-00-00' "+
                "AND MONTH(PM_DATE) ='"+i+"' AND YEAR(PM_DATE) ='" + txtToYear.getText().trim() + "' AND APPROVED=1 AND CANCELLED=0"+
                ") A "+
                "GROUP BY A.M "+
                "ORDER BY A.Y,A.M ";
                rsDepositRefund = data.getResult(strSQL,EITLERP.Finance.FinanceGlobal.FinURL);
                if(rsDepositRefund.getRow()>0) {
                    RefundReceipt=rsDepositRefund.getInt("RECEIPT");
                    RefundAmount=EITLERPGLOBAL.round(rsDepositRefund.getDouble("AMOUNT"),3);
                }
                else {
                    RefundReceipt=0;
                    RefundAmount=0.0;
                }
                //RENEWED RECEIPT
                strSQL="SELECT COUNT(*) AS RECEIPT, IF(SUM(DMST.AMOUNT) IS NULL,0,SUM(DMST.AMOUNT)) AS AMOUNT "+
                "FROM D_FD_DEPOSIT_MASTER DMST, D_FD_SCHEME_MASTER OSMST,  "+
                "D_FD_SCHEME_MASTER NSMST, D_FD_DEPOSIT_MASTER NDMST  "+
                "WHERE DMST.COMPANY_ID ="+EITLERPGLOBAL.gCompanyID+" AND DMST.DEPOSIT_STATUS=1 AND DMST.APPROVED=1  "+
                "AND DMST.CANCELLED=0 AND DMST.COMPANY_ID = OSMST.COMPANY_ID  "+
                "AND DMST.SCHEME_ID = OSMST.SCHEME_ID  "+
                "AND DMST.MAIN_ACCOUNT_CODE IN " + NewAccountCode + " "+
                "AND NDMST.COMPANY_ID = NSMST.COMPANY_ID AND NDMST.SCHEME_ID = NSMST.SCHEME_ID  "+
                "AND DMST.COMPANY_ID = NDMST.COMPANY_ID AND DMST.RECEIPT_NO=NDMST.OLD_RECEIPT_NO  "+
                "AND NDMST.APPROVED=1 AND NDMST.CANCELLED=0  "+
                "AND NDMST.DEPOSIT_ENTRY_TYPE = 2 AND NDMST.OLD_RECEIPT_NO <> ''  "+
                "AND MONTH(NDMST.RECEIPT_DATE) = '"+i+"' AND YEAR(NDMST.RECEIPT_DATE) = '" + txtToYear.getText().trim() + "' ";
                rsDepositRenewed = data.getResult(strSQL,EITLERP.Finance.FinanceGlobal.FinURL);
                if(rsDepositRenewed.getRow()>0) {
                    RenewedReceipt=rsDepositRenewed.getInt("RECEIPT") ;
                    RenewedAmount=EITLERPGLOBAL.round(rsDepositRenewed.getDouble("AMOUNT"),2);
                }
                else {
                    RenewedReceipt=0;
                    RenewedAmount=0.0;
                }
                TotalRefundRenewedReceipt=RefundReceipt + RenewedReceipt;
                TotalRefundRenewedAmount=RefundAmount + RenewedAmount;
                //CALCULATE BALANCE RECEIPT AND AMOUNT
                BalanceReceipt = BalanceReceipt + TotalFreshRenewalReceipt - TotalRefundRenewedReceipt;
                BalanceAmount = BalanceAmount + TotalFreshRenewalAmount - TotalRefundRenewedAmount;
                if(i==1) {
                    Month="JAN"+"-"+txtToYear.getText().substring(2);
                }
                else if(i==2){
                    Month="FEB"+"-"+txtToYear.getText().substring(2);
                }
                else if(i==3){
                    Month="MAR"+"-"+txtToYear.getText().substring(2);
                }
                objRow=objReportData.newRow();
                objRow.setValue("MONTH",Month);
                objRow.setValue("FRESH_RECEIPT",String.valueOf(FreshReceipt));
                objRow.setValue("FRESH_DEPOSIT_AMOUNT",String.valueOf(FreshAmount));
                objRow.setValue("RENEWAL_RECEIPT",String.valueOf(RenewalReceipt));
                objRow.setValue("RENEWAL_DEPOSIT_AMOUNT",String.valueOf(RenewalAmount));
                objRow.setValue("TOTAL_FRESH_RENEWAL_RECEIPT",String.valueOf(TotalFreshRenewalReceipt));
                objRow.setValue("TOTAL_FRESH_RENEWAL_DEPOSIT_AMOUNT",String.valueOf(TotalFreshRenewalAmount));
                objRow.setValue("REFUND_RECEIPT",String.valueOf(RefundReceipt));
                objRow.setValue("REFUND_DEPOSIT_AMOUNT",String.valueOf(RefundAmount));
                objRow.setValue("RENEWED_RECEIPT",String.valueOf(RenewedReceipt));
                objRow.setValue("RENEWED_DEPOSIT_AMOUNT",String.valueOf(RenewedAmount));
                objRow.setValue("TOTAL_REFUND_RENEWED_RECEIPT",String.valueOf(TotalRefundRenewedReceipt));
                objRow.setValue("TOTAL_REFUND_RENEWED_DEPOSIT_AMOUNT",String.valueOf(TotalRefundRenewedAmount));
                objRow.setValue("BALANCE_RECEIPT",String.valueOf(BalanceReceipt));
                objRow.setValue("BALANCE_AMOUNT",String.valueOf(BalanceAmount));
                objReportData.AddRow(objRow);
            }
            HashMap Parameters=new HashMap();
            Parameters.put("COMPANY_ID",Integer.toString(EITLERPGLOBAL.gCompanyID));
            Parameters.put("RUN_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE","01/04/"+txtFromYear.getText().trim());
            Parameters.put("TO_DATE","31/03/"+txtToYear.getText().trim());
            Parameters.put("HEADING",lblMainCodeName.getText().trim());
            Parameters.put("MAIN_ACCOUNT_CODE",txtMainCode.getText().trim());
            Parameters.put("OPENING_DATE",OpeningDate);
            Parameters.put("OPENING_RECEIPT",String.valueOf(OpeningReceipt));
            Parameters.put("OPENING_AMOUNT",String.valueOf(OpeningAmount));
            Parameters.put("CLOSING_RECEIPT",String.valueOf(BalanceReceipt));
            Parameters.put("CLOSING_AMOUNT",String.valueOf(BalanceAmount));
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptDepositMonthlySummary.rpt",Parameters,objReportData);
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        //rptDepositAnnualSummary
    }
    
    
}
