/*
 *
 *
 *
 */
package EITLERP.Finance.ReportsUI;

import EITLERP.*;
import EITLERP.Sales.clsExcelExporter;
import javax.swing.*;
import java.io.File;
import java.sql.*;

/**
 *
 * @author root
 */
public class rptPaymentRCSummary extends javax.swing.JApplet {

    private EITLTableModel DataModelDetail = new EITLTableModel();
    private EITLTableModel DataModelSummary = new EITLTableModel();
    
    private EITLComboModel cmbChCdModel = new EITLComboModel();
    
    public clsExcelExporter export = new clsExcelExporter();

    /**
     * Initializes the applet frmIndentsInfo
     */
    public void init() {
        setSize(1000, 650);
        initComponents();
        cmbChCd.setVisible(false);
        FormatGridDetail();
        FormatGridSummary();
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ExporttoExcelFileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtpartycode = new javax.swing.JTextField();
        txtpartyname = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtMainAccountCode = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtAgentCode = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        cmdShow = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        cmbChCd = new javax.swing.JComboBox<String>();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableD = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableS = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        txtChargeCode = new javax.swing.JTextField();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(0, 102, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setMinimumSize(new java.awt.Dimension(1000, 29));
        jPanel1.setLayout(null);

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Periodwise Payment Receipt Summary");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(2, 4, 410, 20);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(2, 2, 990, 29);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Party Code");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(220, 80, 120, 30);

        txtpartycode = new JTextFieldHint(new JTextField(),"Search By F1");
        txtpartycode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtpartycodeFocusLost(evt);
            }
        });
        txtpartycode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtpartycodeKeyPressed(evt);
            }
        });
        getContentPane().add(txtpartycode);
        txtpartycode.setBounds(350, 80, 100, 30);

        txtpartyname.setBackground(new java.awt.Color(204, 204, 204));
        txtpartyname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpartynameActionPerformed(evt);
            }
        });
        getContentPane().add(txtpartyname);
        txtpartyname.setBounds(460, 80, 430, 30);

        jButton1.setText("Reset");
        jButton1.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(870, 40, 70, 30);

        txtFromDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(120, 40, 100, 30);

        txtToDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        getContentPane().add(txtToDate);
        txtToDate.setBounds(260, 40, 100, 30);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Date");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(30, 40, 80, 30);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("To");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(230, 40, 20, 30);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Agent Code");
        jLabel7.setToolTipText("");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(410, 130, 90, 30);
        getContentPane().add(txtMainAccountCode);
        txtMainAccountCode.setBounds(120, 80, 100, 30);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Main A/C Code");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(0, 80, 110, 30);
        getContentPane().add(txtAgentCode);
        txtAgentCode.setBounds(510, 130, 50, 30);

        jLabel10.setText("(Only for STG eg. 31,32,35...)");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(560, 130, 250, 30);

        jLabel13.setText("(i.e 210010,210027,210072)");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(20, 110, 230, 20);

        cmdShow.setText("Show List");
        cmdShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowActionPerformed(evt);
            }
        });
        getContentPane().add(cmdShow);
        cmdShow.setBounds(820, 130, 118, 29);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Charge Code");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(20, 130, 90, 30);

        cmbChCd.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ALL", "01", "02", "03", "04", "05", "06", "07", "08", "09" }));
        getContentPane().add(cmbChCd);
        cmbChCd.setBounds(550, 40, 110, 30);

        jTabbedPane1.setAutoscrolls(true);
        jTabbedPane1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(null);

        TableD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableD.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        TableD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableDMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(TableD);

        jPanel2.add(jScrollPane4);
        jScrollPane4.setBounds(10, 10, 920, 340);

        jButton5.setText("Export to Excel");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton5);
        jButton5.setBounds(740, 360, 170, 29);

        jTabbedPane1.addTab("Detail", jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(null);

        TableS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableS.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        TableS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableSMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(TableS);

        jPanel3.add(jScrollPane3);
        jScrollPane3.setBounds(10, 10, 920, 340);

        jButton3.setText("Export to Excel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton3);
        jButton3.setBounds(790, 620, 160, 29);

        jButton4.setText("Export to Excel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton4);
        jButton4.setBounds(740, 360, 170, 29);

        jTabbedPane1.addTab("Summary", jPanel3);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(10, 170, 950, 440);

        txtChargeCode = new JTextFieldHint(new JTextField(),"Multiple Selection Seprated by comma(,) ");
        txtChargeCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtChargeCodeFocusLost(evt);
            }
        });
        getContentPane().add(txtChargeCode);
        txtChargeCode.setBounds(120, 130, 300, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        txtpartyname.setText("");
        txtpartycode.setText("");
    }//GEN-LAST:event_jButton1MouseClicked

    private void txtpartycodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtpartycodeFocusLost
        // TODO add your handling code here:
        try {
            if (!txtpartycode.getText().equals("")) {
                String strSQL = "";
                ResultSet rsTmp;
                strSQL = "";
                strSQL += "SELECT NAME,AD1,AD2,STATION,CHG_IND_2,TRANS_CD,INS_IND FROM PRODUCTION.FELT_PARTY_MASTER WHERE PARTY_CODE = " + txtpartycode.getText().trim() + "";
                rsTmp = data.getResult(strSQL);
                rsTmp.first();
                txtpartyname.setText(rsTmp.getString("NAME"));

            }

        } catch (Exception e) {

        }
    }//GEN-LAST:event_txtpartycodeFocusLost

    private void txtpartynameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpartynameActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtpartynameActionPerformed

    private void txtpartycodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpartycodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;

            if (aList.ShowLOV()) {
                txtpartycode.setText(aList.ReturnVal);
                txtpartyname.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));

            }
        }
    }//GEN-LAST:event_txtpartycodeKeyPressed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_formMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        txtFromDate.setText("");
        txtToDate.setText("");
        txtpartycode.setText("");
        txtpartyname.setText("");
        txtMainAccountCode.setText("");
        txtAgentCode.setText("");
        cmbChCd.setSelectedIndex(0);
        txtChargeCode.setText("");
        FormatGridDetail();
        FormatGridSummary();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmdShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowActionPerformed
        if ( ! Validate()) {
            return;
        }
        GenerateListDetail();
        GenerateListSummary();
    }//GEN-LAST:event_cmdShowActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void TableDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableDMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TableDMouseClicked

    private void TableSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableSMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TableSMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        try {
            File file;
            ExporttoExcelFileChooser.setDialogTitle("Enter Excel File Name");
            ExporttoExcelFileChooser.setFileSelectionMode(JFileChooser.APPROVE_OPTION);
            int returnVal = ExporttoExcelFileChooser.showSaveDialog(rptPaymentRCSummary.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = ExporttoExcelFileChooser.getSelectedFile();
                export.fillData(TableS, new File(file + ".xls"));
                JOptionPane.showMessageDialog(null, " Excel File Saved at : " + file + ".xls", "Message", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        try {
            File file;
            ExporttoExcelFileChooser.setDialogTitle("Enter Excel File Name");
            ExporttoExcelFileChooser.setFileSelectionMode(JFileChooser.APPROVE_OPTION);
            int returnVal = ExporttoExcelFileChooser.showSaveDialog(rptPaymentRCSummary.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = ExporttoExcelFileChooser.getSelectedFile();
                export.fillData(TableD, new File(file + ".xls"));
                JOptionPane.showMessageDialog(null, " Excel File Saved at : " + file + ".xls", "Message", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void txtChargeCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtChargeCodeFocusLost

    }//GEN-LAST:event_txtChargeCodeFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser ExporttoExcelFileChooser;
    private javax.swing.JTable TableD;
    private javax.swing.JTable TableS;
    private javax.swing.JComboBox<String> cmbChCd;
    private javax.swing.JButton cmdShow;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField txtAgentCode;
    private javax.swing.JTextField txtChargeCode;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtMainAccountCode;
    private javax.swing.JTextField txtToDate;
    private javax.swing.JTextField txtpartycode;
    private javax.swing.JTextField txtpartyname;
    // End of variables declaration//GEN-END:variables

    
    private boolean Validate() {
        //Form level validations
        
        if(txtFromDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter From Date");
            return false;
        }
        if(txtToDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter To Date");
            return false;
        }
        return true;
    }
        
    private void FormatGridDetail() {
        DataModelDetail = new EITLTableModel();
        TableD.removeAll();
        TableD.setModel(DataModelDetail);
        TableD.setAutoResizeMode(TableD.AUTO_RESIZE_OFF);

        DataModelDetail.addColumn("Sr.");
        DataModelDetail.addColumn("Party Code");
        DataModelDetail.addColumn("Party Name");
        DataModelDetail.addColumn("Charge Code");
        DataModelDetail.addColumn("Main A/C Code");
        DataModelDetail.addColumn("Voucher No");
        DataModelDetail.addColumn("Voucher Date");
        DataModelDetail.addColumn("Amount");
        
        DataModelDetail.TableReadOnly(true);
        
        TableD.getColumnModel().getColumn(0).setMinWidth(30);
        TableD.getColumnModel().getColumn(1).setMinWidth(80);
        TableD.getColumnModel().getColumn(2).setMinWidth(150);
        TableD.getColumnModel().getColumn(3).setMinWidth(50);
        TableD.getColumnModel().getColumn(4).setMinWidth(100);
        TableD.getColumnModel().getColumn(5).setMinWidth(120);
        TableD.getColumnModel().getColumn(6).setMinWidth(100);
        TableD.getColumnModel().getColumn(7).setMinWidth(120);
    }

    private void GenerateListDetail() {
        String strSQL = "";
        String strFromDate = EITLERPGLOBAL.formatDateDB(txtFromDate.getText());
        String strToDate = EITLERPGLOBAL.formatDateDB(txtToDate.getText());
        String MainAcCode = txtMainAccountCode.getText();
        String PartyCode = txtpartycode.getText();
        String AgentCode = txtAgentCode.getText();
//        String ChCd = cmbChCd.getSelectedItem().toString();
        
        try {
            FormatGridDetail(); //clear existing content of table            
            ResultSet rsTmp;
        
            strSQL = "SELECT P.PARTY_CODE,P.PARTY_NAME,P.CHARGE_CODE,D.MAIN_ACCOUNT_CODE,D.SUB_ACCOUNT_CODE, ";
            strSQL += "H.VOUCHER_NO,H.VOUCHER_DATE,SUM(D.AMOUNT) AS AMOUNT  ";
            strSQL += "FROM FINANCE.D_FIN_VOUCHER_HEADER H, FINANCE.D_FIN_VOUCHER_DETAIL D,  ";
            strSQL += "DINESHMILLS.D_SAL_PARTY_MASTER P  ";
            strSQL += "WHERE H.VOUCHER_NO=D.VOUCHER_NO AND D.SUB_ACCOUNT_CODE=P.PARTY_CODE  ";
            strSQL += "AND D.MAIN_ACCOUNT_CODE=P.MAIN_ACCOUNT_CODE  ";
            strSQL += "AND SUBSTRING(H.VOUCHER_NO,1,2)='RC' AND H.APPROVED=1 AND H.CANCELLED=0 ";
            
            if (!txtFromDate.getText().equals("")) {
                strSQL += " AND H.VOUCHER_DATE>= '" + strFromDate + "' ";
            }
            if (!txtToDate.getText().equals("")) {
                strSQL += " AND H.VOUCHER_DATE<= '" + strToDate + "' ";
            }
            if (!txtMainAccountCode.getText().equals("")) {
                strSQL += " AND D.MAIN_ACCOUNT_CODE = '" + MainAcCode + "' ";
            }
            if (!txtpartycode.getText().equals("")) {
                strSQL += " AND P.PARTY_CODE = '" + PartyCode + "' ";
            }
            if (!txtAgentCode.getText().equals("")) {
                strSQL += " AND SUBSTRING(P.PARTY_CODE,1,2) IN (" + AgentCode + ") ";
            }
            
//            if (!cmbChCd.getSelectedItem().equals("ALL")) {
//                strSQL += " AND P.CHARGE_CODE IN ('"+ChCd+"') ";
//            }

            if (!txtChargeCode.getText().equals("")) {
                String[] ChargeCode = txtChargeCode.getText().split(",");
                for (int i = 0; i < ChargeCode.length; i++) {
                    if (i == 0) {
                        strSQL += " AND (P.CHARGE_CODE = '" + ChargeCode[i] + "' ";
                    } else {
                        strSQL += " OR P.CHARGE_CODE = '" + ChargeCode[i] + "' ";
                    }
                }
                strSQL += ") ";
            }           

            strSQL += "GROUP BY D.VOUCHER_NO ";

            System.out.println(strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[10];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PARTY_CODE");
                    rowData[2] = rsTmp.getString("PARTY_NAME");
                    rowData[3] = rsTmp.getString("CHARGE_CODE");
                    rowData[4] = rsTmp.getString("MAIN_ACCOUNT_CODE");
                    rowData[5] = rsTmp.getString("VOUCHER_NO");
                    rowData[6] = EITLERPGLOBAL.formatDate(rsTmp.getString("VOUCHER_DATE"));
                    rowData[7] = rsTmp.getString("AMOUNT");
                    DataModelDetail.addRow(rowData);

                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private void FormatGridSummary() {
        DataModelSummary = new EITLTableModel();
        TableS.removeAll();
        TableS.setModel(DataModelSummary);
        TableS.setAutoResizeMode(TableS.AUTO_RESIZE_OFF);

        DataModelSummary.addColumn("Sr.");
        DataModelSummary.addColumn("Party Code");
        DataModelSummary.addColumn("Party Name");
        DataModelSummary.addColumn("Charge Code");
        DataModelSummary.addColumn("Main A/C Code");
        DataModelSummary.addColumn("Amount");
        
        DataModelSummary.TableReadOnly(true);
        
        TableS.getColumnModel().getColumn(0).setMinWidth(30);
        TableS.getColumnModel().getColumn(1).setMinWidth(80);
        TableS.getColumnModel().getColumn(2).setMinWidth(150);
        TableS.getColumnModel().getColumn(3).setMinWidth(50);
        TableS.getColumnModel().getColumn(4).setMinWidth(100);
        TableS.getColumnModel().getColumn(5).setMinWidth(120);        
    }

    private void GenerateListSummary() {
        String strSQL = "";
        String strFromDate = EITLERPGLOBAL.formatDateDB(txtFromDate.getText());
        String strToDate = EITLERPGLOBAL.formatDateDB(txtToDate.getText());
        String MainAcCode = txtMainAccountCode.getText();
        String PartyCode = txtpartycode.getText();
        String AgentCode = txtAgentCode.getText();
//        String ChCd = cmbChCd.getSelectedItem().toString();
        
        try {
            FormatGridSummary(); //clear existing content of table            
            ResultSet rsTmp;
        
            strSQL = "SELECT P.PARTY_CODE,P.PARTY_NAME,P.CHARGE_CODE,D.MAIN_ACCOUNT_CODE,D.SUB_ACCOUNT_CODE,SUM(D.AMOUNT) AS AMOUNT  ";
            strSQL += "FROM FINANCE.D_FIN_VOUCHER_HEADER H, FINANCE.D_FIN_VOUCHER_DETAIL D,  ";
            strSQL += "DINESHMILLS.D_SAL_PARTY_MASTER P  ";
            strSQL += "WHERE H.VOUCHER_NO=D.VOUCHER_NO AND D.SUB_ACCOUNT_CODE=P.PARTY_CODE  ";
            strSQL += "AND D.MAIN_ACCOUNT_CODE=P.MAIN_ACCOUNT_CODE  ";
            strSQL += "AND SUBSTRING(H.VOUCHER_NO,1,2)='RC' AND H.APPROVED=1 AND H.CANCELLED=0 ";
            
            if (!txtFromDate.getText().equals("")) {
                strSQL += " AND H.VOUCHER_DATE>= '" + strFromDate + "' ";
            }
            if (!txtToDate.getText().equals("")) {
                strSQL += " AND H.VOUCHER_DATE<= '" + strToDate + "' ";
            }
            if (!txtMainAccountCode.getText().equals("")) {
                strSQL += " AND D.MAIN_ACCOUNT_CODE = '" + MainAcCode + "' ";
            }
            if (!txtpartycode.getText().equals("")) {
                strSQL += " AND P.PARTY_CODE = '" + PartyCode + "' ";
            }
            if (!txtAgentCode.getText().equals("")) {
                strSQL += " AND SUBSTRING(P.PARTY_CODE,1,2) IN (" + AgentCode + ") ";
            }
            
//            if (!cmbChCd.getSelectedItem().equals("ALL")) {
//                strSQL += " AND P.CHARGE_CODE IN ('"+ChCd+"') ";
//            }
            
            if (!txtChargeCode.getText().equals("")) {
                String[] ChargeCode = txtChargeCode.getText().split(",");
                for (int i = 0; i < ChargeCode.length; i++) {
                    if (i == 0) {
                        strSQL += " AND (P.CHARGE_CODE = " + ChargeCode[i] + " ";
                    } else {
                        strSQL += " OR P.CHARGE_CODE = " + ChargeCode[i] + " ";
                    }
                }
                strSQL += ") ";
            }

            strSQL += "GROUP BY D.SUB_ACCOUNT_CODE ";

            System.out.println(strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[10];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PARTY_CODE");
                    rowData[2] = rsTmp.getString("PARTY_NAME");
                    rowData[3] = rsTmp.getString("CHARGE_CODE");
                    rowData[4] = rsTmp.getString("MAIN_ACCOUNT_CODE");
                    rowData[5] = rsTmp.getString("AMOUNT");
                    DataModelSummary.addRow(rowData);

                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

}
