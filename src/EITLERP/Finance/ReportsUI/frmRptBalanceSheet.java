/*
 * frmrptOutStanding.java
 *
 * Created on February 17, 2008, 12:31 PM
 */
package EITLERP.Finance.ReportsUI;
/**
 *
 * @author  nisarg
 */
import EITLERP.data;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.LOV;
import EITLERP.ComboData;
import EITLERP.Finance.*;
import javax.swing.JOptionPane;
import java.util.HashMap;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import TReportWriter.TReportEngine;
import EITLERP.Utils.frmProgress;
import java.net.URL;
import EITLERP.Sales.clsSalesInvoice;
import java.math.BigDecimal;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.File;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.sql.Date;
import java.text.SimpleDateFormat;


public class frmRptBalanceSheet extends javax.swing.JApplet {
    
    
    private TReportEngine objEngine=new TReportEngine();
    private EITLComboModel cmbInvoiceTypeModel;
    private long ReportID = 1;
    private boolean ProcessDone = false;
    /** Initializes the applet frmrptOutStanding */
    public void init() {
        setSize(425,380);
        initComponents();
        Bar.setVisible(false);
        lblStatus.setVisible(false);
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        bgReportType = new javax.swing.ButtonGroup();
        bgEffect = new javax.swing.ButtonGroup();
        lblToDate = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        Bar = new javax.swing.JProgressBar();
        NamePanel = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        cmdGenerateReport = new javax.swing.JButton();

        getContentPane().setLayout(null);

        lblToDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblToDate.setText("As on Date :");
        getContentPane().add(lblToDate);
        lblToDate.setBounds(10, 40, 100, 15);

        getContentPane().add(txtToDate);
        txtToDate.setBounds(120, 40, 100, 19);

        Bar.setStringPainted(true);
        getContentPane().add(Bar);
        Bar.setBounds(20, 120, 210, 20);

        NamePanel.setLayout(null);

        NamePanel.setBackground(new java.awt.Color(0, 153, 204));
        NamePanel.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblName.setText("BALANCE SHEET");
        NamePanel.add(lblName);
        lblName.setBounds(9, 8, 230, 15);

        getContentPane().add(NamePanel);
        NamePanel.setBounds(1, 2, 800, 30);

        lblStatus.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblStatus.setText("-");
        getContentPane().add(lblStatus);
        lblStatus.setBounds(20, 100, 210, 15);

        cmdGenerateReport.setText("Report");
        cmdGenerateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGenerateReportActionPerformed(evt);
            }
        });

        getContentPane().add(cmdGenerateReport);
        cmdGenerateReport.setBounds(260, 120, 75, 25);

    }//GEN-END:initComponents
    
    private void cmdGenerateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGenerateReportActionPerformed
        // TODO add your handling code here:
        generateReport();
    }//GEN-LAST:event_cmdGenerateReportActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar Bar;
    private javax.swing.JPanel NamePanel;
    private javax.swing.ButtonGroup bgEffect;
    private javax.swing.ButtonGroup bgReportType;
    private javax.swing.JButton cmdGenerateReport;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblToDate;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables
    
    
    
    private void generateReport() {
        
        if(!Validate()) {
            return;
        }
        
        new Thread() {
            public void run() {
                
                try {
                    String ToDate = EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());
                    String PreviousDate = (Integer.parseInt(ToDate.substring(0,4))-1)+ "-" + ToDate.substring(5,7)+ "-" + ToDate.substring(8,10);
                    int YearFrom = Integer.parseInt(EITLERPGLOBAL.getFinYearStartDate(ToDate).substring(0,4));
                    int YearTo = Integer.parseInt(EITLERPGLOBAL.getFinYearEndDate(ToDate).substring(0,4)),Max=0,Counter=0;
                    
                    TReportWriter.SimpleDataProvider.TTable objData = new TReportWriter.SimpleDataProvider.TTable();
                    objData.AddColumn("NOTE");
                    objData.AddColumn("NOTE_NAME");
                    objData.AddColumn("SUB_NOTE");
                    objData.AddColumn("SUB_NOTE_NAME");
                    objData.AddColumn("CURRENT_BALANCE");
                    objData.AddColumn("PREVIOUS_BALANCE");
                    objData.AddColumn("CUR_BAL");
                    objData.AddColumn("PRE_BAL");
                    
                    TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                    clsDebtorsOutstandingItems ObjItem = new clsDebtorsOutstandingItems();
                    
                    String SQL = "SELECT DISTINCT NOTE FROM D_FIN_NOTE_GL_MAPPING WHERE NOTE NOT IN (0,11) AND YEAR_FROM="+YearFrom+" ORDER BY NOTE"; //NOTE IN (1,2,3) AND 
                    ResultSet rsNote = data.getResult(SQL,FinanceGlobal.FinURL);
                    
                    rsNote.last();
                    Max= rsNote.getRow();
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Max);
                    Bar.setMinimum(0);
                    Counter=0;
                    
                    rsNote.first();
                    ResultSet rsSubNote = null;
                    ResultSet rsMainCode = null;
                    int Note = 0;
                    String NoteName = "";
                    int SubNote = 0;
                    String SubNoteName = "";
                    String MainCode = "";
                    double currentBalance = 0;
                    double previousBalance = 0;
                    double curBal = 0;
                    double preBal = 0;
                    String Indicator = "";
                    if(rsNote.getRow()>0) {
                        while(!rsNote.isAfterLast()) {
                            Note = rsNote.getInt("NOTE");
                            NoteName = clsNote.getNoteName(Note, YearFrom);
                            
                            Counter++;
                            Bar.setValue(Counter);
                            Bar.repaint();
                            lblStatus.setText("Note : " + Note + " " + NoteName);
                            
                            SQL = "SELECT DISTINCT SUB_NOTE FROM D_FIN_NOTE_GL_MAPPING WHERE NOTE="+Note+" AND YEAR_FROM="+YearFrom+" ORDER BY SUB_NOTE";
                            rsSubNote = data.getResult(SQL,FinanceGlobal.FinURL);
                            rsSubNote.first();
                            SubNote = 0;
                            SubNoteName = "";
                            if(rsSubNote.getRow()>0) {
                                while(!rsSubNote.isAfterLast()) {
                                    SubNote = rsSubNote.getInt("SUB_NOTE");
                                    SubNoteName = clsNote.getSubNoteName(SubNote, Note, YearFrom);
                                    
                                    SQL = "SELECT MAIN_ACCOUNT_CODE,INDICATOR FROM D_FIN_NOTE_GL_MAPPING WHERE SUB_NOTE="+SubNote+" AND NOTE="+Note+" AND YEAR_FROM="+YearFrom;
                                    rsMainCode = data.getResult(SQL,FinanceGlobal.FinURL);
                                    rsMainCode.first();
                                    
                                    MainCode = "";
                                    currentBalance = 0;
                                    previousBalance = 0;
                                    curBal = 0;
                                    preBal = 0;
                                    Indicator = "";
                                    while(!rsMainCode.isAfterLast()) {
                                        MainCode = rsMainCode.getString("MAIN_ACCOUNT_CODE");
                                        Indicator = rsMainCode.getString("INDICATOR");
                                        double CBalance = 0;
                                        double PBalance = 0;
                                        if(Indicator.equals("N")) {
                                            CBalance = clsAccount.getClosingBalance(MainCode,"",ToDate,true);
                                            PBalance = clsAccount.getClosingBalance(MainCode,"",PreviousDate,true);
                                        } else {
                                            SQL = "SELECT IF(B.EFFECT='Cr',(B.AMOUNT*-1), B.AMOUNT) AS AMOUNT FROM D_FIN_SCH_JV_HEADER A, D_FIN_SCH_JV_DETAIL B " +
                                            "WHERE A.APPROVED=1 AND A.CANCELLED=0 AND A.DOC_NO=B.DOC_NO AND A.AS_ON_DATE='"+ToDate+"' AND B.INDICATOR='"+Indicator+"' " +
                                            "AND B.BASE_MAIN_ACCOUNT_CODE='"+MainCode+"' ";
                                            CBalance = data.getDoubleValueFromDB(SQL,FinanceGlobal.FinURL);
                                            SQL = "SELECT IF(B.EFFECT='Cr',(B.AMOUNT*-1), B.AMOUNT) AS AMOUNT FROM D_FIN_SCH_JV_HEADER A, D_FIN_SCH_JV_DETAIL B " +
                                            "WHERE A.APPROVED=1 AND A.CANCELLED=0 AND A.DOC_NO=B.DOC_NO AND A.AS_ON_DATE='"+PreviousDate+"' AND B.INDICATOR='"+Indicator+"' " +
                                            "AND B.BASE_MAIN_ACCOUNT_CODE='"+MainCode+"' ";
                                            PBalance = data.getDoubleValueFromDB(SQL,FinanceGlobal.FinURL);
                                        }
                                        
                                        
                                        curBal = curBal + Math.abs(CBalance);
                                        preBal = preBal + Math.abs(PBalance);
                                        currentBalance = currentBalance + CBalance;
                                        previousBalance = previousBalance + PBalance;
                                        rsMainCode.next();
                                    }
                                    objRow=objData.newRow();
                                    objRow.setValue("NOTE",Integer.toString(Note));
                                    objRow.setValue("NOTE_NAME",NoteName);
                                    objRow.setValue("SUB_NOTE",Integer.toString(SubNote));
                                    objRow.setValue("SUB_NOTE_NAME",SubNoteName);
                                    objRow.setValue("CURRENT_BALANCE",Double.toString(currentBalance));
                                    objRow.setValue("PREVIOUS_BALANCE",Double.toString(previousBalance));
                                    objRow.setValue("CUR_BAL",Double.toString(curBal));
                                    objRow.setValue("PRE_BAL",Double.toString(preBal));
                                    objData.AddRow(objRow);
                                    rsSubNote.next();
                                }
                            }
                            rsNote.next();
                        }
                        HashMap Parameters=new HashMap();
                        Parameters.put("CURRENT", ToDate.substring(8,10)+getOrdinal(ToDate) + " " + EITLERPGLOBAL.getMonthName(ToDate) + " " + ToDate.substring(0,4));
                        Parameters.put("PREVIOUS", PreviousDate.substring(8,10)+getOrdinal(PreviousDate) + " " + EITLERPGLOBAL.getMonthName(PreviousDate) + " " + PreviousDate.substring(0,4));
                        Parameters.put("RUN_DATE",EITLERPGLOBAL.getCurrentDate());
                        
                        objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptBalanceSheet.rpt",Parameters,objData);
                    }
                } catch(Exception e) {
                    Bar.setVisible(false);
                    lblStatus.setVisible(false);
                    e.printStackTrace();
                }
                Bar.setVisible(false);
                lblStatus.setVisible(false);
            };
        }.start();
    }
    
    private boolean Validate() {
        try {
            
            
            if(txtToDate.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(this, "Enter From date and To date","Date Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            
            
            if(!EITLERPGLOBAL.isDate(txtToDate.getText().trim())) {
                JOptionPane.showMessageDialog(this, "Enter valid To date","Date Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            
            /*java.sql.Date FromDate = new Date(new SimpleDateFormat("yyyy-MM-dd").parse(txtFromDate.getText().trim()).getTime());
            java.sql.Date ToDate = new Date(new SimpleDateFormat("yyyy-MM-dd").parse(txtToDate.getText().trim()).getTime());
             
            if(FromDate.after(ToDate) || FromDate.compareTo(ToDate)==0) {
                JOptionPane.showMessageDialog(this, "From Date must be grater than To Date.","Date Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }*/
        } catch(Exception e) {
            e.printStackTrace();
        }
        return true;
    }
    
    private String getOrdinal(String Date) {
        
        int no = Integer.parseInt(Date.substring(8,10));
        switch(no) {
            case 1 : case 21 : case 31 :
                return "st";
            case 2 : case 22 :
                return "nd";
            case 3 : case 23 :
                return "rd";
            default:
                return "th";
        }
    }
    
    
}
