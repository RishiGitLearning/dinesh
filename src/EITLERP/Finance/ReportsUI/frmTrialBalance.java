/*
 * frmTrialBalance.java
 *
 * Created on December 20, 2007, 6:27 AM
 */

package EITLERP.Finance.ReportsUI;

/**
 *
 * @author  lenovo
 */

import EITLERP.*;
import javax.swing.*;
import java.awt.*;
import javax.sql.*;
import java.util.*;
import java.sql.* ;
import EITLERP.Finance.*;
import javax.swing.table.*;
import javax.swing.text.*;
import TReportWriter.*;
import java.text.*;
import EITLERP.Finance.ReportsUI.*;
import java.math.BigDecimal;
import EITLERP.Utils.frmProgress;
import java.net.URL;
import EITLERP.Production.ReportUI.*;
import java.io.File;


public class frmTrialBalance extends javax.swing.JApplet {
    
    clsAccount objAccount;
    EITLTableModel TableModelT;
    EITLTableModel TableModelDescT;
    EITLTableModel TableModelSalesT;
    EITLTableModel TableModelCrOsT;
    EITLTableModel TableModelPurchase;
    EITLTableModel TableModelSchedulewise;
    
    HashMap props;
    EITLComboModel cmbModel;
    //HashMap Credit= new HashMap();
    //HashMap Debit = new HashMap();
    private EITLTableCellRenderer RowFormat=new EITLTableCellRenderer();
    private boolean ProcessCompleted=false;
    private TReportEngine objEngine=new TReportEngine();
    private TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
    private TReportWriter.SimpleDataProvider.TTable objSHData=new TReportWriter.SimpleDataProvider.TTable();
    private EITLTableCellRenderer CellAlign=new EITLTableCellRenderer();
    DecimalFormat dFormat=new DecimalFormat("###0.00");
    private static double CrTotal = 0;
    private static double DrTotal = 0;
    private boolean ProcessDone = false;
    public clsExcelExporter export = new clsExcelExporter();
    
    public Variant getAttribute(String PropName) {
        return (Variant) props.get(PropName);
    }
    
    public void setAttribute(String PropName,Object Value) {
        props.put(PropName,new Variant(Value));
    }
    
    public void setAttribute(String PropName,int Value) {
        props.put(PropName,new Variant(Value));
    }
    
    public void setAttribute(String PropName,long Value) {
        props.put(PropName,new Variant(Value));
    }
    
    public void setAttribute(String PropName,double Value) {
        props.put(PropName,new Variant(Value));
    }
    
    public void setAttribute(String PropName,float Value) {
        props.put(PropName,new Variant(Value));
    }
    
    public void setAttribute(String PropName,boolean Value) {
        props.put(PropName,new Variant(Value));
    }
    
    public frmTrialBalance() {
        props = new HashMap();
        props.put("MAIN_ACCOUNT_CODE", new Variant(""));
        props.put("SUB_ACCOUNT_CODE", new Variant(""));
        props.put("ACCOUNT_NAME",new Variant(""));
        props.put("DEBIT",new Variant(0.0));
        props.put("CREDIT",new Variant(0.0));
    }
    
    /** Initializes the applet frmTrialBalance */
    public void init() {
        initComponents();
        setSize(770,600);
        txtAsOnDate.requestFocus();
        cmbModel = new EITLComboModel();
        GenerateCombo();
        txtFromAmt.setEnabled(false);
        txtToAmt.setEnabled(false);
        txtFromAmt.setText("");
        txtToAmt.setText("");
        txtAsOnDate.setText(EITLERPGLOBAL.getCurrentDate());
         
        FormatGridN();
        FormatGridDescN();
        FormatGridCrOs();
        FormatGridPurchase();
        Bar.setVisible(false);
        ProgressBar.setVisible(false);
        lblStatus.setVisible(false);
        lblProgressbarStatus.setVisible(false);
        chkInclude.setEnabled(false);
        if(EITLERPGLOBAL.gUserID!=1 && EITLERPGLOBAL.gUserID!=16 && EITLERPGLOBAL.gUserID!=299)
        {
            chkInclude.setEnabled(false);
            chkInclude.setSelected(false);
            chkInclude.setVisible(false);
        }
        if(EITLERPGLOBAL.gUserID==98){
            btnMisreport.setVisible(true);
            //btnMisreport.setEnabled(false);
        }else{
            btnMisreport.setVisible(false);
        }
        
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        mnuSelectReport = new javax.swing.JPopupMenu();
        mnuTrialBalance = new javax.swing.JMenuItem();
        mnuScheduleTrialBalance = new javax.swing.JMenuItem();
        ExporttoExcelFileChooser = new javax.swing.JFileChooser();
        MainPanel = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtAsOnDate = new javax.swing.JTextField();
        btnEnter = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cmbType = new javax.swing.JComboBox();
        Bar = new javax.swing.JProgressBar();
        lblStatus = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtMainCode = new javax.swing.JTextField();
        chkApproved = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtFromAmt = new javax.swing.JTextField();
        txtToAmt = new javax.swing.JTextField();
        chkAmount = new javax.swing.JCheckBox();
        chkPartyAdd = new javax.swing.JCheckBox();
        chkInclude = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TResult = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        cmdSearch = new javax.swing.JButton();
        lblDebitTotal = new javax.swing.JLabel();
        lblCreditTotal = new javax.swing.JLabel();
        cmdGenerateReport = new javax.swing.JButton();
        lblNetBalance = new javax.swing.JLabel();
        lblNetBal = new javax.swing.JLabel();
        cmdExporttoExcel = new javax.swing.JButton();
        btnMisreport = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        ProgressBar = new javax.swing.JProgressBar();
        lblProgressbarStatus = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TDescResult = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        lblDescDebitTotal = new javax.swing.JLabel();
        lblDescCreditTotal = new javax.swing.JLabel();
        lblDescNetBal = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        SalesTable = new javax.swing.JTable();
        lblmaincodestatus = new javax.swing.JLabel();
        MaincodeProgressBar = new javax.swing.JProgressBar();
        jButton5 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        CrOsTable = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        MainCodeLabel = new javax.swing.JLabel();
        MainCodeProgressBar = new javax.swing.JProgressBar();
        jButton7 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        ToDateText = new javax.swing.JTextField();
        FromDateText = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        PurchaseTable = new javax.swing.JTable();
        jButton11 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TScheduleWise = new javax.swing.JTable();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();

        mnuTrialBalance.setText("Trial Balance");
        mnuTrialBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuTrialBalanceActionPerformed(evt);
            }
        });

        mnuSelectReport.add(mnuTrialBalance);

        mnuScheduleTrialBalance.setText("Schedule Trail Balance");
        mnuScheduleTrialBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuScheduleTrialBalanceActionPerformed(evt);
            }
        });

        mnuSelectReport.add(mnuScheduleTrialBalance);

        getContentPane().setLayout(null);

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        MainPanel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                MainPanelFocusGained(evt);
            }
        });

        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.EtchedBorder());
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        jLabel1.setText("As On Date :");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(26, 32, 100, 20);

        txtAsOnDate.setNextFocusableComponent(btnEnter);
        txtAsOnDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAsOnDateActionPerformed(evt);
            }
        });

        jPanel1.add(txtAsOnDate);
        txtAsOnDate.setBounds(130, 30, 120, 20);

        btnEnter.setText("Generate");
        btnEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnterActionPerformed(evt);
            }
        });

        jPanel1.add(btnEnter);
        btnEnter.setBounds(210, 270, 100, 25);

        jLabel2.setText("Report for");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(26, 72, 80, 20);

        cmbType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbTypeItemStateChanged(evt);
            }
        });

        jPanel1.add(cmbType);
        cmbType.setBounds(130, 70, 180, 20);

        jPanel1.add(Bar);
        Bar.setBounds(30, 230, 180, 20);

        lblStatus.setText(".");
        jPanel1.add(lblStatus);
        lblStatus.setBounds(30, 200, 180, 15);

        jLabel3.setText("Main Code :");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(25, 109, 100, 20);

        txtMainCode.setNextFocusableComponent(btnEnter);
        txtMainCode.setEnabled(false);
        txtMainCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMainCodeKeyPressed(evt);
            }
        });

        jPanel1.add(txtMainCode);
        txtMainCode.setBounds(130, 110, 120, 20);

        chkApproved.setSelected(true);
        chkApproved.setText("Only Approved Vouchers");
        jPanel1.add(chkApproved);
        chkApproved.setBounds(360, 20, 180, 23);

        jLabel4.setText("Amount From :");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(30, 170, 100, 20);

        jLabel5.setText("TO :");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(260, 170, 30, 20);

        txtFromAmt.setNextFocusableComponent(btnEnter);
        jPanel1.add(txtFromAmt);
        txtFromAmt.setBounds(130, 170, 120, 20);

        txtToAmt.setNextFocusableComponent(btnEnter);
        jPanel1.add(txtToAmt);
        txtToAmt.setBounds(290, 170, 120, 20);

        chkAmount.setText("Insert Amount Range");
        chkAmount.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkAmountItemStateChanged(evt);
            }
        });

        jPanel1.add(chkAmount);
        chkAmount.setBounds(30, 140, 180, 23);

        chkPartyAdd.setText("Include Party Address");
        jPanel1.add(chkPartyAdd);
        chkPartyAdd.setBounds(210, 140, 180, 23);

        chkInclude.setText("Memorandom is Include");
        chkInclude.setEnabled(false);
        jPanel1.add(chkInclude);
        chkInclude.setBounds(360, 40, 209, 23);

        MainPanel.addTab("As On Date", jPanel1);

        jPanel2.setLayout(null);

        jScrollPane1.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        TResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TResult.getTableHeader().setFont(new Font("Plain", Font.BOLD, 12));
        jScrollPane1.setViewportView(TResult);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(2, 36, 750, 380);

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel2.add(jButton1);
        jButton1.setBounds(653, 422, 100, 25);

        jLabel11.setFont(new java.awt.Font("Dialog", 0, 9));
        jLabel11.setText("Click on the column,  type keywords in search textbox and click on Go button to search.");
        jPanel2.add(jLabel11);
        jLabel11.setBounds(12, 14, 410, 11);

        jLabel12.setText("Search");
        jPanel2.add(jLabel12);
        jLabel12.setBounds(445, 13, 50, 15);

        jPanel2.add(txtSearch);
        txtSearch.setBounds(500, 10, 130, 19);

        cmdSearch.setFont(new java.awt.Font("Dialog", 0, 10));
        cmdSearch.setText("Go");
        cmdSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSearchActionPerformed(evt);
            }
        });

        jPanel2.add(cmdSearch);
        cmdSearch.setBounds(640, 11, 100, 20);

        lblDebitTotal.setFont(new java.awt.Font("Dialog", 1, 14));
        lblDebitTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDebitTotal.setText("...");
        jPanel2.add(lblDebitTotal);
        lblDebitTotal.setBounds(261, 428, 160, 17);

        lblCreditTotal.setFont(new java.awt.Font("Dialog", 1, 14));
        lblCreditTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCreditTotal.setText("...");
        jPanel2.add(lblCreditTotal);
        lblCreditTotal.setBounds(430, 428, 160, 17);

        cmdGenerateReport.setText("Generate Report");
        cmdGenerateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGenerateReportActionPerformed(evt);
            }
        });

        jPanel2.add(cmdGenerateReport);
        cmdGenerateReport.setBounds(100, 460, 150, 22);

        lblNetBalance.setFont(new java.awt.Font("Dialog", 1, 14));
        lblNetBalance.setForeground(new java.awt.Color(51, 51, 255));
        lblNetBalance.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblNetBalance.setText("Net Balance");
        jPanel2.add(lblNetBalance);
        lblNetBalance.setBounds(260, 460, 160, 20);

        lblNetBal.setFont(new java.awt.Font("Dialog", 1, 14));
        lblNetBal.setForeground(new java.awt.Color(51, 51, 255));
        lblNetBal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jPanel2.add(lblNetBal);
        lblNetBal.setBounds(430, 460, 160, 20);

        cmdExporttoExcel.setText("Export to Excel");
        cmdExporttoExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExporttoExcelActionPerformed(evt);
            }
        });

        jPanel2.add(cmdExporttoExcel);
        cmdExporttoExcel.setBounds(100, 430, 150, 25);

        btnMisreport.setText("MIS Report");
        btnMisreport.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnMisreport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMisreportActionPerformed(evt);
            }
        });

        jPanel2.add(btnMisreport);
        btnMisreport.setBounds(10, 460, 80, 25);

        MainPanel.addTab("View Result", jPanel2);

        jPanel4.setLayout(null);

        jButton2.setText("Generate");
        jButton2.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel4.add(jButton2);
        jButton2.setBounds(30, 20, 80, 25);

        jPanel4.add(ProgressBar);
        ProgressBar.setBounds(190, 30, 170, 14);

        lblProgressbarStatus.setText(".");
        jPanel4.add(lblProgressbarStatus);
        lblProgressbarStatus.setBounds(190, 10, 190, 15);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(100, 100));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(100, 100));
        TDescResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TDescResult.getTableHeader().setFont(new Font("Plain", Font.BOLD, 12));
        jScrollPane2.setViewportView(TDescResult);

        jPanel4.add(jScrollPane2);
        jScrollPane2.setBounds(30, 80, 730, 350);

        jButton3.setText("Report Generate");
        jButton3.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel4.add(jButton3);
        jButton3.setBounds(30, 440, 110, 25);

        lblDescDebitTotal.setText("...");
        jPanel4.add(lblDescDebitTotal);
        lblDescDebitTotal.setBounds(370, 450, 150, 15);

        lblDescCreditTotal.setText("...");
        jPanel4.add(lblDescCreditTotal);
        lblDescCreditTotal.setBounds(540, 450, 180, 15);

        lblDescNetBal.setLabelFor(jLabel11);
        lblDescNetBal.setText("...");
        jPanel4.add(lblDescNetBal);
        lblDescNetBal.setBounds(540, 480, 180, 15);

        MainPanel.addTab("Detail Result", jPanel4);

        jPanel5.setLayout(null);

        jButton4.setText("Generate");
        jButton4.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jPanel5.add(jButton4);
        jButton4.setBounds(90, 80, 65, 25);

        jScrollPane3.setMinimumSize(new java.awt.Dimension(100, 100));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(100, 100));
        SalesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(SalesTable);

        jPanel5.add(jScrollPane3);
        jScrollPane3.setBounds(30, 120, 750, 350);

        lblmaincodestatus.setText("...");
        jPanel5.add(lblmaincodestatus);
        lblmaincodestatus.setBounds(180, 70, 190, 15);

        jPanel5.add(MaincodeProgressBar);
        MaincodeProgressBar.setBounds(180, 90, 190, 14);

        jButton5.setLabel("Export to Excel");
        jButton5.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jPanel5.add(jButton5);
        jButton5.setBounds(470, 80, 110, 25);

        jLabel9.setText("Party wise Sales Turnover >10L Report");
        jPanel5.add(jLabel9);
        jLabel9.setBounds(30, 10, 260, 15);

        jPanel5.add(txtFromDate);
        txtFromDate.setBounds(80, 30, 100, 19);

        jPanel5.add(txtToDate);
        txtToDate.setBounds(220, 30, 100, 19);

        jLabel10.setText("To");
        jPanel5.add(jLabel10);
        jLabel10.setBounds(190, 30, 20, 15);

        MainPanel.addTab("Sales >10L", jPanel5);

        jPanel6.setLayout(null);

        CrOsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(CrOsTable);

        jPanel6.add(jScrollPane4);
        jScrollPane4.setBounds(20, 100, 740, 120);

        jButton6.setText("Generate");
        jButton6.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jPanel6.add(jButton6);
        jButton6.setBounds(20, 70, 70, 25);

        MainCodeLabel.setText("....");
        jPanel6.add(MainCodeLabel);
        MainCodeLabel.setBounds(120, 60, 190, 15);

        jPanel6.add(MainCodeProgressBar);
        MainCodeProgressBar.setBounds(120, 80, 148, 14);

        jButton7.setText("Export to Excel");
        jButton7.setMargin(new java.awt.Insets(1, 1, 1, 1));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jPanel6.add(jButton7);
        jButton7.setBounds(390, 240, 100, 23);

        jLabel7.setText("To");
        jPanel6.add(jLabel7);
        jLabel7.setBounds(200, 40, 20, 15);

        jPanel6.add(ToDateText);
        ToDateText.setBounds(230, 40, 90, 19);

        jPanel6.add(FromDateText);
        FromDateText.setBounds(100, 40, 90, 19);

        jLabel8.setText("Party wise purchase >10L Report");
        jPanel6.add(jLabel8);
        jLabel8.setBounds(20, 10, 220, 15);

        jButton10.setText("Generate");
        jButton10.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jPanel6.add(jButton10);
        jButton10.setBounds(20, 240, 70, 25);

        PurchaseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(PurchaseTable);

        jPanel6.add(jScrollPane6);
        jScrollPane6.setBounds(20, 270, 640, 200);

        jButton11.setText("Export to Excel");
        jButton11.setMargin(new java.awt.Insets(1, 1, 1, 1));
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jPanel6.add(jButton11);
        jButton11.setBounds(390, 60, 100, 23);

        MainPanel.addTab("Purchase Report", jPanel6);

        jPanel7.setLayout(null);

        jScrollPane5.setPreferredSize(new java.awt.Dimension(100, 100));
        TScheduleWise.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(TScheduleWise);

        jPanel7.add(jScrollPane5);
        jScrollPane5.setBounds(30, 70, 740, 390);

        jButton8.setText("Generate");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jPanel7.add(jButton8);
        jButton8.setBounds(30, 20, 89, 25);

        jButton9.setText("Export to Excel");
        jButton9.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jPanel7.add(jButton9);
        jButton9.setBounds(396, 20, 102, 25);

        MainPanel.addTab("Schedule wise\n", jPanel7);

        getContentPane().add(MainPanel);
        MainPanel.setBounds(1, 35, 800, 530);

        jPanel3.setLayout(null);

        jPanel3.setBackground(new java.awt.Color(0, 153, 204));
        jPanel3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel6.setText("TRIAL BALANCE");
        jPanel3.add(jLabel6);
        jLabel6.setBounds(9, 8, 230, 15);

        getContentPane().add(jPanel3);
        jPanel3.setBounds(1, 2, 800, 30);

    }//GEN-END:initComponents

    private void btnMisreportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMisreportActionPerformed
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            System.out.println(1);
            stmt.execute("TRUNCATE TABLE  TEMP_DATABASE.TM80");
            System.out.println(2);
            stmt.execute("INSERT INTO TEMP_DATABASE.TM80 SELECT DISTINCT A.VOUCHER_NO,EFFECT,BOOK_CODE,'' FROM FINANCE.D_FIN_VOUCHER_HEADER AS A, FINANCE.D_FIN_VOUCHER_DETAIL_EX  AS B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.CANCELLED=0 AND VOUCHER_DATE>='2016-03-31' AND VOUCHER_DATE<='2016-03-31' AND MAIN_ACCOUNT_CODE ='104069'");
            System.out.println(3);
            stmt.execute("UPDATE FINANCE.D_FIN_REPORT_TRANSACTION,(SELECT MAIN_ACCOUNT_CODE,EFFECT,SUM(AMOUNT) AS AMT FROM FINANCE.D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO IN (SELECT COL01 FROM TEMP_DATABASE.TM80 WHERE COL02 ='D') AND EFFECT ='C' GROUP BY MAIN_ACCOUNT_CODE,EFFECT) AS D SET COLUMN_11 =AMT WHERE USER_ID = 98 AND COLUMN_4 = MAIN_ACCOUNT_CODE"); //USER_ID = 47
            System.out.println(4);
            stmt.execute("UPDATE FINANCE.D_FIN_REPORT_TRANSACTION,(SELECT MAIN_ACCOUNT_CODE,EFFECT,-SUM(AMOUNT) AS AMT FROM FINANCE.D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO IN (SELECT COL01 FROM TEMP_DATABASE.TM80 WHERE COL02 ='D') AND EFFECT ='D' GROUP BY MAIN_ACCOUNT_CODE,EFFECT) AS D SET COLUMN_11 =AMT WHERE USER_ID = 98 AND COLUMN_4 = MAIN_ACCOUNT_CODE"); //USER_ID = 47
            System.out.println(5);
            
            stmt.execute("TRUNCATE TABLE  TEMP_DATABASE.TM80");
            System.out.println(6);
            stmt.execute("INSERT INTO TEMP_DATABASE.TM80 SELECT DISTINCT A.VOUCHER_NO,EFFECT ,BOOK_CODE,'' FROM FINANCE.D_FIN_VOUCHER_HEADER AS A, FINANCE.D_FIN_VOUCHER_DETAIL_EX  AS B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.CANCELLED=0 AND VOUCHER_DATE>='2015-03-31' AND VOUCHER_DATE<='2015-03-31' AND MAIN_ACCOUNT_CODE ='104069'");
            System.out.println(7);
            stmt.execute("UPDATE FINANCE.D_FIN_REPORT_TRANSACTION,(SELECT MAIN_ACCOUNT_CODE,EFFECT,SUM(AMOUNT) AS AMT FROM FINANCE.D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO IN (SELECT COL01 FROM TEMP_DATABASE.TM80 WHERE COL02 ='D') AND EFFECT ='C' GROUP BY MAIN_ACCOUNT_CODE,EFFECT) AS D SET COLUMN_10 =AMT WHERE USER_ID = 98 AND COLUMN_4 = MAIN_ACCOUNT_CODE");  //47
            System.out.println(8);
            stmt.execute("UPDATE FINANCE.D_FIN_REPORT_TRANSACTION,(SELECT MAIN_ACCOUNT_CODE,EFFECT,-SUM(AMOUNT) AS AMT FROM FINANCE.D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO IN (SELECT COL01 FROM TEMP_DATABASE.TM80 WHERE COL02 ='D') AND EFFECT ='D' GROUP BY MAIN_ACCOUNT_CODE,EFFECT) AS D SET COLUMN_10 =AMT WHERE USER_ID = 98 AND COLUMN_4 = MAIN_ACCOUNT_CODE"); 
            System.out.println(9);
            
            stmt.execute("UPDATE FINANCE.D_FIN_REPORT_TRANSACTION SET COLUMN_10 =COALESCE(COLUMN_10,0),COLUMN_11 =COALESCE(COLUMN_11,0),COLUMN_12 =COALESCE(COLUMN_12,0),COLUMN_13 =COALESCE(COLUMN_13,0) WHERE USER_ID = 98");
            System.out.println(10);
            stmt.execute("UPDATE FINANCE.D_FIN_REPORT_TRANSACTION SET COLUMN_12 =COLUMN_7+COLUMN_10,COLUMN_13 = COLUMN_8 +COLUMN_11  WHERE USER_ID = 98");                        
            System.out.println(11);
            
            try {
               URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptSchedulewiseTBMIS.jsp?dbURL="+FinanceGlobal.FinURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&AsOnDate="+txtAsOnDate.getText()+"&UserId="+EITLERPGLOBAL.gUserID);
               System.out.println(ReportFile);
               EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
           } catch(Exception e) {
               JOptionPane.showMessageDialog(null,"File error "+e.getMessage());
           }
            
        }catch(Exception e){
            e.printStackTrace();
        }
        
        
                    
    }//GEN-LAST:event_btnMisreportActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
    try{
        File file;        
        ExporttoExcelFileChooser.setDialogTitle("Enter Excel File Name");
        ExporttoExcelFileChooser.setFileSelectionMode(JFileChooser.APPROVE_OPTION);
        int returnVal = ExporttoExcelFileChooser.showSaveDialog(frmTrialBalance.this);
        if ( returnVal == JFileChooser.APPROVE_OPTION) {
            file = ExporttoExcelFileChooser.getSelectedFile();
            export.fillData(CrOsTable,new File(file+".xls"));
            JOptionPane.showMessageDialog(null," Excel File Saved at : "+ file+".xls","Message",JOptionPane.INFORMATION_MESSAGE);
        }   
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        } 
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
     FormatGridPurchase();
        new Thread(){            
            public void run(){
                try {
                    double Amount =0.0;
                    int DrCount = 0;
                    int CrCount = 0;
                    int Counter=0;
                    int count=1;
                    double DrTotal=0;
                    double CrTotal=0;
                    double NetBal=0;
                    double FromAmt=0;
                    double ToAmt = 0;
                    
                    
                    HashMap Credit= new HashMap();
                    HashMap Debit = new HashMap(); 
                    clsPartyInfo objPartyInfo = new clsPartyInfo();
                    int Count=data.getIntValueFromDB("SELECT COUNT(*) AS ACCOUNT_COUNT  FROM D_FIN_GL ORDER BY MAIN_ACCOUNT_CODE",FinanceGlobal.FinURL);
                    MainCodeProgressBar.setVisible(true);
                    MainCodeLabel.setVisible(true);
                    MainCodeProgressBar.setMaximum(Count);
                    MainCodeProgressBar.setMinimum(0);
                    MainCodeProgressBar.setValue(0);
                    
                    //ResultSet rsMaincode =data.getResult("SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL ORDER BY MAIN_ACCOUNT_CODE",FinanceGlobal.FinURL); //WHERE APPROVED=1
                    ResultSet rsMaincode =data.getResult("SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE IN ('125019','125033') ORDER BY MAIN_ACCOUNT_CODE",FinanceGlobal.FinURL); //WHERE APPROVED=1
                    rsMaincode.first();
                    while(!rsMaincode.isAfterLast()) {
                        Counter++;
                        MainCodeProgressBar.setValue(Counter);
                        MainCodeLabel.setText("Processing Record "+Counter+" "+rsMaincode.getString("MAIN_ACCOUNT_CODE"));
                        if(rsMaincode.getString("MAIN_ACCOUNT_CODE").equals("445050")) {
                            boolean halt=true;
                        }                      
                        System.out.println("Main Code : "+rsMaincode.getString("MAIN_ACCOUNT_CODE"));
                        String strSQL="SELECT PARTY_CODE,PARTY_NAME,ADDRESS,CITY FROM FINANCE.D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='"+rsMaincode.getString("MAIN_ACCOUNT_CODE")+"' ORDER BY PARTY_CODE";
                        ResultSet rsPartycode=data.getResult(strSQL);
                        //System.out.println(strSQL);
                        rsPartycode.first();
                        if(rsPartycode.getRow()>0) {
                        //double NetTotal1=0;    
                        while(!rsPartycode.isAfterLast()){                           
                           System.out.println("Main Code : "+rsMaincode.getString("MAIN_ACCOUNT_CODE")+"  Party Code : "+rsPartycode.getString("PARTY_CODE"));                       
                           //String strSQL1="SELECT IF(SUM(AMOUNT) IS NULL,0,SUM(AMOUNT)) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE VOUCHER_DATE >= '"+EITLERPGLOBAL.formatDateDB(FromDateText.getText())+"' AND VOUCHER_DATE <='"+EITLERPGLOBAL.formatDateDB(ToDateText.getText())+"' AND MAIN_ACCOUNT_CODE='"+rsMaincode.getString("MAIN_ACCOUNT_CODE")+"' AND SUB_ACCOUNT_CODE='"+rsPartycode.getString("PARTY_CODE")+"' AND EFFECT='D' AND A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.CANCELLED=0 AND A.APPROVED=1";
                           String strSQL13="SELECT IF(SUM(AMOUNT) IS NULL,0,SUM(AMOUNT)) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE VOUCHER_DATE >= '"+EITLERPGLOBAL.formatDateDB(FromDateText.getText())+"' AND VOUCHER_DATE <='"+EITLERPGLOBAL.formatDateDB(ToDateText.getText())+"' AND MAIN_ACCOUNT_CODE='"+rsMaincode.getString("MAIN_ACCOUNT_CODE")+"' AND SUB_ACCOUNT_CODE='"+rsPartycode.getString("PARTY_CODE")+"' AND EFFECT='C' AND A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.CANCELLED=0 AND A.APPROVED=1";
                           //double openingbalance = clsAccount.getOpeningBalance(rsMaincode.getString("MAIN_ACCOUNT_CODE"), rsPartycode.getString("PARTY_CODE"), "EITLERPGLOBAL.formatDateDB(FromDateText.getText())");
                           double NetCrTotal=0;
                           NetCrTotal=data.getDoubleValueFromDB(strSQL13,FinanceGlobal.FinURL); 
                           //if(openingbalance<0){
                           //    NetTotal= Math.abs(openingbalance)+data.getDoubleValueFromDB(strSQL13,FinanceGlobal.FinURL)-data.getDoubleValueFromDB(strSQL1,FinanceGlobal.FinURL);
                           //}
                           //else{    
                           //    NetTotal=data.getDoubleValueFromDB(strSQL13,FinanceGlobal.FinURL)-data.getDoubleValueFromDB(strSQL1,FinanceGlobal.FinURL)-openingbalance;                                                                                
                           //}
                           if(Math.abs(NetCrTotal)>=1000000){
                              Object[] rowData=new Object[12];
                    rowData[0]=Integer.toString(count++);                    
                    rowData[1]=rsMaincode.getString("MAIN_ACCOUNT_CODE");     
                    rowData[2]=rsPartycode.getString("PARTY_CODE");                    
                    rowData[3]=rsPartycode.getString("PARTY_NAME");                         
                    rowData[4]=rsPartycode.getString("ADDRESS")+","+rsPartycode.getString("CITY");                                             
                    //clsAccount.getClosingBalance(rsAccount.getString("MAIN_ACCOUNT_CODE"),"",EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()),true);
                    //rowData[5]=dFormat.format(clsAccount.getOpeningBalance(rsMaincode.getString("MAIN_ACCOUNT_CODE"), rsPartycode.getString("PARTY_CODE"), "2012-04-01"));
                    //rowData[5]=dFormat.format(clsAccount.getOpeningBalance(rsMaincode.getString("MAIN_ACCOUNT_CODE"), rsPartycode.getString("PARTY_CODE"), "EITLERPGLOBAL.formatDateDB(FromDateText.getText())"));
                    //rowData[6]=dFormat.format(data.getDoubleValueFromDB(strSQL1,FinanceGlobal.FinURL));
                    rowData[5]=dFormat.format(NetCrTotal);
                    //rowData[8]=dFormat.format(NetTotal);
                    //rowData[8]=dFormat.format(data.getDoubleValueFromDB(strSQL17,FinanceGlobal.FinURL));
                    //rowData[9]=dFormat.format(data.getDoubleValueFromDB(strSQL19,FinanceGlobal.FinURL));
                    //rowData[10]=dFormat.format(NetTotal);
                           //System.out.println(NetTotal1);  
                           TableModelPurchase.addRow(rowData);
                           }                           
                           rsPartycode.next();
                           
                        }
                        
                        }
                        rsMaincode.next();
                    }
                   MainCodeLabel.setText("Processing Record Done");
                }
                catch(Exception e) {
                    ProcessCompleted=true;
                    e.printStackTrace();
                }   
                //MaincodeProgressBar.setVisible(false);
                //lblmaincodestatus.setVisible(false);
            };
        }.start();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
    try{                   
        File file;        
        ExporttoExcelFileChooser.setDialogTitle("Enter Excel File Name");
        ExporttoExcelFileChooser.setFileSelectionMode(JFileChooser.APPROVE_OPTION);
        int returnVal = ExporttoExcelFileChooser.showSaveDialog(frmTrialBalance.this);
        if ( returnVal == JFileChooser.APPROVE_OPTION) {
            file = ExporttoExcelFileChooser.getSelectedFile();
            export.fillData(TScheduleWise,new File(file+".xls"));
            JOptionPane.showMessageDialog(null," Excel File Saved at : "+ file+".xls","Message",JOptionPane.INFORMATION_MESSAGE);
        }   
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }     

    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        try{
        FormatGridSchedule();
        ResultSet rsSchedule=data.getResult("SELECT * FROM D_FIN_REPORT_TRANSACTION WHERE REPORT_ID = 3 AND (COLUMN_7<>0 OR COLUMN_8<>0)  AND USER_ID='"+EITLERPGLOBAL.gUserID+"'ORDER BY COLUMN_5,COLUMN_4 ASC",FinanceGlobal.FinURL); 
        rsSchedule.first();
         if(rsSchedule.getRow()>0) {    
                while(!rsSchedule.isAfterLast()) {
                   Object[] rowData=new Object[10]; 
                   double lastyear=Double.parseDouble(rsSchedule.getString("COLUMN_7"));                
                   if(lastyear<0){
                       lastyear=Math.abs(lastyear);                       
                       //rowData[0]=Double.toString(lastyear)+"Cr";
                       rowData[0]=dFormat.format(lastyear)+"Cr";
                   }else{
                       //rowData[0]=Double.toString(lastyear);
                       rowData[0]=dFormat.format(lastyear);
                   }                   
                   rowData[1]=rsSchedule.getString("COLUMN_5");
                   rowData[2]=rsSchedule.getString("COLUMN_4");
                   rowData[3]=rsSchedule.getString("COLUMN_6");
                   double currentyear=Double.parseDouble(rsSchedule.getString("COLUMN_8"));                   
                   if(currentyear<0){
                       currentyear=Math.abs(currentyear);
                       rowData[4]=dFormat.format(currentyear)+"Cr";
                   }else{
                       //rowData[4]=Double.toString(currentyear);
                       rowData[4]=dFormat.format(currentyear);
                       
                   }
                   TableModelSchedulewise.addRow(rowData);                   
                   rsSchedule.next();
                }
         }
        }
        catch(Exception e){
            
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try{
                   /*File file = new File(ExporttoExcelFileChooser.APPROVE_OPTION);
                    export.fillData(TResult,file);
                    //export.fillData(TResult,new File("/root/Desktop/TrialBalanceResult.xls"));
                    //exp.fillData(TableI,new File("C://ProductionProcess.xls"));
                    export.fillData(TResult,new File("D://TrialBalanceResult.xls"));
                    JOptionPane.showMessageDialog(null, "Data saved at " +
                            //"'C: \\ result.xls' successfully", "Message",
                            "'/root/Desktop/TrialBalanceResult.xls' successfully in Linux PC or 'D://TrialBalanceResult.xls' successfully in Windows PC    ", "Message",
                            JOptionPane.INFORMATION_MESSAGE);
                 
                     */
                   File file;        
        ExporttoExcelFileChooser.setDialogTitle("Enter Excel File Name");
        ExporttoExcelFileChooser.setFileSelectionMode(JFileChooser.APPROVE_OPTION);
        int returnVal = ExporttoExcelFileChooser.showSaveDialog(frmTrialBalance.this);
        if ( returnVal == JFileChooser.APPROVE_OPTION) {
            file = ExporttoExcelFileChooser.getSelectedFile();
            export.fillData(PurchaseTable,new File(file+".xls"));
            JOptionPane.showMessageDialog(null," Excel File Saved at : "+ file+".xls","Message",JOptionPane.INFORMATION_MESSAGE);
        }           
            
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }     
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        FormatGridCrOs();
        new Thread(){            
            public void run(){
                try {
                    double Amount =0.0;
                    int DrCount = 0;
                    int CrCount = 0;
                    int Counter=0;
                    int count=1;
                    double DrTotal=0;
                    double CrTotal=0;
                    double NetBal=0;
                    double FromAmt=0;
                    double ToAmt = 0;
                    
                    
                    HashMap Credit= new HashMap();
                    HashMap Debit = new HashMap(); 
                    clsPartyInfo objPartyInfo = new clsPartyInfo();
                    int Count=data.getIntValueFromDB("SELECT COUNT(*) AS ACCOUNT_COUNT  FROM D_FIN_GL ORDER BY MAIN_ACCOUNT_CODE",FinanceGlobal.FinURL);
                    MainCodeProgressBar.setVisible(true);
                    MainCodeLabel.setVisible(true);
                    MainCodeProgressBar.setMaximum(Count);
                    MainCodeProgressBar.setMinimum(0);
                    MainCodeProgressBar.setValue(0);
                    
                    //ResultSet rsMaincode =data.getResult("SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL ORDER BY MAIN_ACCOUNT_CODE",FinanceGlobal.FinURL); //WHERE APPROVED=1
                    //ResultSet rsMaincode =data.getResult("SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE IN ('125019','125033') ORDER BY MAIN_ACCOUNT_CODE",FinanceGlobal.FinURL); //WHERE APPROVED=1
                    ResultSet rsMaincode =data.getResult("SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE IN ('125033') ORDER BY MAIN_ACCOUNT_CODE",FinanceGlobal.FinURL); //WHERE APPROVED=1
                    rsMaincode.first();
                    while(!rsMaincode.isAfterLast()) {
                        Counter++;
                        MainCodeProgressBar.setValue(Counter);
                        MainCodeLabel.setText("Processing Record "+Counter+" "+rsMaincode.getString("MAIN_ACCOUNT_CODE"));
                        if(rsMaincode.getString("MAIN_ACCOUNT_CODE").equals("445050")) {
                            boolean halt=true;
                        }                      
                        System.out.println("Main Code : "+rsMaincode.getString("MAIN_ACCOUNT_CODE"));
                        String strSQL="SELECT PARTY_CODE,PARTY_NAME,ADDRESS,CITY,PAN_NO FROM FINANCE.D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='"+rsMaincode.getString("MAIN_ACCOUNT_CODE")+"' ORDER BY PARTY_CODE";
                        ResultSet rsPartycode=data.getResult(strSQL);
                        //System.out.println(strSQL);
                        rsPartycode.first();
                        if(rsPartycode.getRow()>0) {
                        //double NetTotal1=0;    
                        while(!rsPartycode.isAfterLast()){                           
                           System.out.println("Main Code : "+rsMaincode.getString("MAIN_ACCOUNT_CODE")+"  Party Code : "+rsPartycode.getString("PARTY_CODE"));                       
                           String strSQL1="SELECT IF(SUM(AMOUNT) IS NULL,0,SUM(AMOUNT)) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE VOUCHER_DATE >= '"+EITLERPGLOBAL.formatDateDB(FromDateText.getText())+"' AND VOUCHER_DATE <='"+EITLERPGLOBAL.formatDateDB(ToDateText.getText())+"' AND MAIN_ACCOUNT_CODE='"+rsMaincode.getString("MAIN_ACCOUNT_CODE")+"' AND SUB_ACCOUNT_CODE='"+rsPartycode.getString("PARTY_CODE")+"' AND EFFECT='D' AND A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.CANCELLED=0 AND A.APPROVED=1";
                           String strSQL13="SELECT IF(SUM(AMOUNT) IS NULL,0,SUM(AMOUNT)) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE VOUCHER_DATE >= '"+EITLERPGLOBAL.formatDateDB(FromDateText.getText())+"' AND VOUCHER_DATE <='"+EITLERPGLOBAL.formatDateDB(ToDateText.getText())+"' AND MAIN_ACCOUNT_CODE='"+rsMaincode.getString("MAIN_ACCOUNT_CODE")+"' AND SUB_ACCOUNT_CODE='"+rsPartycode.getString("PARTY_CODE")+"' AND EFFECT='C' AND A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.CANCELLED=0 AND A.APPROVED=1";
                           double openingbalance = clsAccount.getOpeningBalance(rsMaincode.getString("MAIN_ACCOUNT_CODE"), rsPartycode.getString("PARTY_CODE"), EITLERPGLOBAL.formatDateDB(FromDateText.getText()));
                           double NetTotal=0;
                           
                           //if(openingbalance<0){
                               NetTotal= Math.abs(openingbalance)+data.getDoubleValueFromDB(strSQL13,FinanceGlobal.FinURL)-data.getDoubleValueFromDB(strSQL1,FinanceGlobal.FinURL);
                           //}
                           //else{    
                           //    NetTotal=data.getDoubleValueFromDB(strSQL13,FinanceGlobal.FinURL)-data.getDoubleValueFromDB(strSQL1,FinanceGlobal.FinURL)-openingbalance;                                                                                
                           //}
                           //if(Math.abs(NetTotal)>=1000000){
                              Object[] rowData=new Object[12];
                    rowData[0]=Integer.toString(count++);                    
                    rowData[1]=rsMaincode.getString("MAIN_ACCOUNT_CODE");     
                    rowData[2]=rsPartycode.getString("PARTY_CODE");                    
                    rowData[3]=rsPartycode.getString("PARTY_NAME");                         
                    rowData[4]=rsPartycode.getString("ADDRESS")+","+rsPartycode.getString("CITY");                                             
                    //clsAccount.getClosingBalance(rsAccount.getString("MAIN_ACCOUNT_CODE"),"",EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()),true);
                    //rowData[5]=dFormat.format(clsAccount.getOpeningBalance(rsMaincode.getString("MAIN_ACCOUNT_CODE"), rsPartycode.getString("PARTY_CODE"), "2012-04-01"));
                    rowData[5]=rsPartycode.getString("PAN_NO");                         
                    rowData[6]=dFormat.format(clsAccount.getOpeningBalance(rsMaincode.getString("MAIN_ACCOUNT_CODE"), rsPartycode.getString("PARTY_CODE"), EITLERPGLOBAL.formatDateDB(FromDateText.getText())));
                    rowData[7]=dFormat.format(data.getDoubleValueFromDB(strSQL1,FinanceGlobal.FinURL));
                    rowData[8]=dFormat.format(data.getDoubleValueFromDB(strSQL13,FinanceGlobal.FinURL));
                    rowData[9]=dFormat.format(NetTotal);
                    //rowData[8]=dFormat.format(data.getDoubleValueFromDB(strSQL17,FinanceGlobal.FinURL));
                    //rowData[9]=dFormat.format(data.getDoubleValueFromDB(strSQL19,FinanceGlobal.FinURL));
                    //rowData[10]=dFormat.format(NetTotal);
                           //System.out.println(NetTotal1);  
                           TableModelCrOsT.addRow(rowData);
                           //}                           
                           rsPartycode.next();
                           
                        }
                        
                        }
                        rsMaincode.next();
                    }
                   MainCodeLabel.setText("Processing Record Done");
                }
                catch(Exception e) {
                    ProcessCompleted=true;
                    e.printStackTrace();
                }   
                //MaincodeProgressBar.setVisible(false);
                //lblmaincodestatus.setVisible(false);
            };
        }.start();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
              try{
                   
                   File file;        
        ExporttoExcelFileChooser.setDialogTitle("Enter Excel File Name");
        ExporttoExcelFileChooser.setFileSelectionMode(JFileChooser.APPROVE_OPTION);
        int returnVal = ExporttoExcelFileChooser.showSaveDialog(frmTrialBalance.this);
        if ( returnVal == JFileChooser.APPROVE_OPTION) {
            file = ExporttoExcelFileChooser.getSelectedFile();
            export.fillData(SalesTable,new File(file+".xls"));
            JOptionPane.showMessageDialog(null," Excel File Saved at : "+ file+".xls","Message",JOptionPane.INFORMATION_MESSAGE);
        }           
            
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }     

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        FormatGridSales();
        new Thread(){            
            public void run(){
                try {
                    double Amount =0.0;
                    int DrCount = 0;
                    int CrCount = 0;
                    int Counter=0;
                    int count=1;
                    double DrTotal=0;
                    double CrTotal=0;
                    double NetBal=0;
                    double FromAmt=0;
                    double ToAmt = 0;
                    
                    HashMap Credit= new HashMap();
                    HashMap Debit = new HashMap(); 
                    clsPartyInfo objPartyInfo = new clsPartyInfo();
                    int Count=data.getIntValueFromDB("SELECT COUNT(*) AS ACCOUNT_COUNT  FROM D_FIN_GL ORDER BY MAIN_ACCOUNT_CODE",FinanceGlobal.FinURL);
                    MaincodeProgressBar.setVisible(true);
                    lblmaincodestatus.setVisible(true);
                    MaincodeProgressBar.setMaximum(Count);
                    MaincodeProgressBar.setMinimum(0);
                    MaincodeProgressBar.setValue(0);
                    
                    //ResultSet rsMaincode =data.getResult("SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL ORDER BY MAIN_ACCOUNT_CODE",FinanceGlobal.FinURL); //WHERE APPROVED=1
                    ResultSet rsMaincode =data.getResult("SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE IN ('210010','210027','210072') ORDER BY MAIN_ACCOUNT_CODE",FinanceGlobal.FinURL); //WHERE APPROVED=1
                    rsMaincode.first();
                    while(!rsMaincode.isAfterLast()) {
                        Counter++;
                        MaincodeProgressBar.setValue(Counter);
                        lblmaincodestatus.setText("Processing Record "+Counter);
                        if(rsMaincode.getString("MAIN_ACCOUNT_CODE").equals("445050")) {
                            boolean halt=true;
                        }                      
                        System.out.println("Main Code : "+rsMaincode.getString("MAIN_ACCOUNT_CODE"));
                        String strSQL="SELECT PARTY_CODE,PARTY_NAME,ADDRESS1,ADDRESS2 FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='"+rsMaincode.getString("MAIN_ACCOUNT_CODE")+"' ORDER BY PARTY_CODE";
                        ResultSet rsPartycode=data.getResult(strSQL);
                        //System.out.println(strSQL);
                        rsPartycode.first();
                        if(rsPartycode.getRow()>0) {
                            
                        while(!rsPartycode.isAfterLast()){                           
                           System.out.println("Main Code : "+rsMaincode.getString("MAIN_ACCOUNT_CODE")+"  Party Code : "+rsPartycode.getString("PARTY_CODE"));                       
                           //String TotalDebit= objPartyInfo.getDebitInfo(rsMaincode.getString("MAIN_ACCOUNT_CODE"),rsPartycode.getString("PARTY_CODE"),"2011-04-01","2012-03-31",true); 
                           //System.out.println(TotalDebit);
                           //String DrTotal;
        //strSQL="SELECT IF(SUM(AMOUNT) IS NULL,0,SUM(AMOUNT)) FROM D_FIN_VOUCHER_HEADER AS A, D_FIN_VOUCHER_DETAIL_EX  AS B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.CANCELLED=0 AND A.APPROVED="+bApproved+" "+getStrQuery(MainAccountCode,SubAccountCode)+" AND EFFECT='D' AND VOUCHER_DATE >= '"+OpeningDate+"' AND VOUCHER_DATE <='"+OnDate+"'";
        //DrTotal=Double.toString(data.getDoubleValueFromDB(strSQL,FinanceGlobal.FinURL));
        //DrTotal=dFormat.format(data.getDoubleValueFromDB(strSQL,FinanceGlobal.FinURL));
                           //SELECT *,A.REMARKS AS HEADER_REMARKS FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND BOOK_CODE IN('1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21') AND MAIN_ACCOUNT_CODE ='210010' AND SUB_ACCOUNT_CODE='812129' AND EFFECT='D' AND VOUCHER_DATE >= '2011-04-01' AND VOUCHER_DATE <='2012-03-31' ORDER BY SUB_ACCOUNT_CODE DESCSELECT *,A.REMARKS AS HEADER_REMARKS FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND BOOK_CODE IN('1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21') AND MAIN_ACCOUNT_CODE ='210010' AND SUB_ACCOUNT_CODE='812129' AND EFFECT='D' AND VOUCHER_DATE >= '2011-04-01' AND VOUCHER_DATE <='2012-03-31' ORDER BY SUB_ACCOUNT_CODE DESC
                           //String strSQL1="SELECT IF(SUM(AMOUNT) IS NULL,0,SUM(AMOUNT)) FROM D_FIN_VOUCHER_HEADER AS A, D_FIN_VOUCHER_DETAIL_EX  AS B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.CANCELLED=0 AND A.APPROVED=1 AND MAIN_ACCOUNT_CODE='"+rsMaincode.getString("MAIN_ACCOUNT_CODE")+"' AND SUB_ACCOUNT_CODE='"+rsPartycode.getString("PARTY_CODE")+"' AND EFFECT='D' AND VOUCHER_DATE >= '2011-04-01' AND VOUCHER_DATE <='2012-03-31' AND BOOK_CODE IN('1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21')";
                           //String strSQL1="SELECT IF(SUM(AMOUNT) IS NULL,0,SUM(AMOUNT)) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE BOOK_CODE IN('01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21') AND VOUCHER_DATE >= '2011-04-01' AND VOUCHER_DATE <='2012-03-31' AND MAIN_ACCOUNT_CODE='"+rsMaincode.getString("MAIN_ACCOUNT_CODE")+"' AND SUB_ACCOUNT_CODE='"+rsPartycode.getString("PARTY_CODE")+"' AND EFFECT='D' AND A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.CANCELLED=0 AND A.APPROVED=1";
                           //String strSQL2="SELECT IF(SUM(AMOUNT) IS NULL,0,SUM(AMOUNT)) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE BOOK_CODE IN('13','15','17','19') AND VOUCHER_DATE >= '2011-04-01' AND VOUCHER_DATE <='2012-03-31' AND MAIN_ACCOUNT_CODE='"+rsMaincode.getString("MAIN_ACCOUNT_CODE")+"' AND SUB_ACCOUNT_CODE='"+rsPartycode.getString("PARTY_CODE")+"' AND EFFECT='C' AND A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.CANCELLED=0 AND A.APPROVED=1";
                           String strSQL1="SELECT IF(SUM(AMOUNT) IS NULL,0,SUM(AMOUNT)) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE BOOK_CODE IN('01','09','11') AND VOUCHER_DATE >= '"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND VOUCHER_DATE <='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND MAIN_ACCOUNT_CODE='"+rsMaincode.getString("MAIN_ACCOUNT_CODE")+"' AND SUB_ACCOUNT_CODE='"+rsPartycode.getString("PARTY_CODE")+"' AND EFFECT='D' AND A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.CANCELLED=0 AND A.APPROVED=1";
                           String strSQL13="SELECT IF(SUM(AMOUNT) IS NULL,0,SUM(AMOUNT)) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE BOOK_CODE IN('13') AND VOUCHER_DATE >= '"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND VOUCHER_DATE <='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND MAIN_ACCOUNT_CODE='"+rsMaincode.getString("MAIN_ACCOUNT_CODE")+"' AND SUB_ACCOUNT_CODE='"+rsPartycode.getString("PARTY_CODE")+"' AND EFFECT='C' AND A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.CANCELLED=0 AND A.APPROVED=1";
                           String strSQL15="SELECT IF(SUM(AMOUNT) IS NULL,0,SUM(AMOUNT)) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE BOOK_CODE IN('15') AND VOUCHER_DATE >= '"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND VOUCHER_DATE <='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND MAIN_ACCOUNT_CODE='"+rsMaincode.getString("MAIN_ACCOUNT_CODE")+"' AND SUB_ACCOUNT_CODE='"+rsPartycode.getString("PARTY_CODE")+"' AND EFFECT='C' AND A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.CANCELLED=0 AND A.APPROVED=1";
                           String strSQL17="SELECT IF(SUM(AMOUNT) IS NULL,0,SUM(AMOUNT)) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE BOOK_CODE IN('17') AND VOUCHER_DATE >= '"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND VOUCHER_DATE <='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND MAIN_ACCOUNT_CODE='"+rsMaincode.getString("MAIN_ACCOUNT_CODE")+"' AND SUB_ACCOUNT_CODE='"+rsPartycode.getString("PARTY_CODE")+"' AND EFFECT='C' AND A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.CANCELLED=0 AND A.APPROVED=1";
                           String strSQL19="SELECT IF(SUM(AMOUNT) IS NULL,0,SUM(AMOUNT)) FROM D_FIN_VOUCHER_HEADER A,D_FIN_VOUCHER_DETAIL_EX B WHERE BOOK_CODE IN('19') AND VOUCHER_DATE >= '"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND VOUCHER_DATE <='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND MAIN_ACCOUNT_CODE='"+rsMaincode.getString("MAIN_ACCOUNT_CODE")+"' AND SUB_ACCOUNT_CODE='"+rsPartycode.getString("PARTY_CODE")+"' AND EFFECT='C' AND A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.CANCELLED=0 AND A.APPROVED=1";
                           double NetTotal=data.getDoubleValueFromDB(strSQL1,FinanceGlobal.FinURL)-data.getDoubleValueFromDB(strSQL13,FinanceGlobal.FinURL)-data.getDoubleValueFromDB(strSQL15,FinanceGlobal.FinURL)-data.getDoubleValueFromDB(strSQL17,FinanceGlobal.FinURL)-data.getDoubleValueFromDB(strSQL19,FinanceGlobal.FinURL);                                                                                
                           if(NetTotal>=1000000){
                              Object[] rowData=new Object[12];
                    rowData[0]=Integer.toString(count++);                    
                    rowData[1]=rsMaincode.getString("MAIN_ACCOUNT_CODE");     
                    rowData[2]=rsPartycode.getString("PARTY_CODE");                    
                    rowData[3]=rsPartycode.getString("PARTY_NAME");                         
                    rowData[4]=rsPartycode.getString("ADDRESS1")+","+rsPartycode.getString("ADDRESS2");                                             
                    rowData[5]=dFormat.format(data.getDoubleValueFromDB(strSQL1,FinanceGlobal.FinURL));
                    rowData[6]=dFormat.format(data.getDoubleValueFromDB(strSQL13,FinanceGlobal.FinURL));
                    rowData[7]=dFormat.format(data.getDoubleValueFromDB(strSQL15,FinanceGlobal.FinURL));
                    rowData[8]=dFormat.format(data.getDoubleValueFromDB(strSQL17,FinanceGlobal.FinURL));
                    rowData[9]=dFormat.format(data.getDoubleValueFromDB(strSQL19,FinanceGlobal.FinURL));
                    rowData[10]=dFormat.format(NetTotal);
                           //System.out.println(NetTotal1);  
                           TableModelSalesT.addRow(rowData);
                           }                           
                           rsPartycode.next();
                        }
                        }
                        rsMaincode.next();
                    }
                   lblmaincodestatus.setText("Processing Record Done");
                }
                catch(Exception e) {
                    ProcessCompleted=true;
                    e.printStackTrace();
                }                
                
                //MaincodeProgressBar.setVisible(false);
                //lblmaincodestatus.setVisible(false);
            };
        }.start();
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
         if(!txtAsOnDate.getText().trim().equals("")) {
            if(EITLERPGLOBAL.isDate(txtAsOnDate.getText().trim())) {
                if(cmbType.getSelectedIndex()==1) {
                    GenerateNominalDetail();
                } else  if(cmbType.getSelectedIndex()==2) {
                    JOptionPane.showMessageDialog(null,"This Process is only for nominal Trial Balance so select the Nominal only");
                    cmbType.requestFocus(); 
                }
            } else {
                JOptionPane.showMessageDialog(null,"Please Enter the Date in dd/mm/yyyy format");
                txtAsOnDate.requestFocus();
            }
        } else {
            JOptionPane.showMessageDialog(null,"Please Enter the Date");
            txtAsOnDate.requestFocus();
        }        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         if(!txtAsOnDate.getText().trim().equals("")) {
            if(EITLERPGLOBAL.isDate(txtAsOnDate.getText().trim())) {
                if(cmbType.getSelectedIndex()==1) {
                    getAccountBalanceNExtra();
                } else  if(cmbType.getSelectedIndex()==2) {
                    JOptionPane.showMessageDialog(null,"This Process is only for nominal Trial Balance so select the Nominal only");
                    cmbType.requestFocus();                   
                }
            } else {
                JOptionPane.showMessageDialog(null,"Please Enter the Date in dd/mm/yyyy format");
                txtAsOnDate.requestFocus();
            }
        } else {
            JOptionPane.showMessageDialog(null,"Please Enter the Date");
            txtAsOnDate.requestFocus();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cmdExporttoExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExporttoExcelActionPerformed
        try{
                   /*File file = new File(ExporttoExcelFileChooser.APPROVE_OPTION);
                    export.fillData(TResult,file);
                    //export.fillData(TResult,new File("/root/Desktop/TrialBalanceResult.xls"));
                    //exp.fillData(TableI,new File("C://ProductionProcess.xls"));
                    export.fillData(TResult,new File("D://TrialBalanceResult.xls"));
                    JOptionPane.showMessageDialog(null, "Data saved at " +
                            //"'C: \\ result.xls' successfully", "Message",
                            "'/root/Desktop/TrialBalanceResult.xls' successfully in Linux PC or 'D://TrialBalanceResult.xls' successfully in Windows PC    ", "Message",
                            JOptionPane.INFORMATION_MESSAGE);
                 
                     */
                   File file;        
        ExporttoExcelFileChooser.setDialogTitle("Enter Excel File Name");
        ExporttoExcelFileChooser.setFileSelectionMode(JFileChooser.APPROVE_OPTION);
        int returnVal = ExporttoExcelFileChooser.showSaveDialog(frmTrialBalance.this);
        if ( returnVal == JFileChooser.APPROVE_OPTION) {
            file = ExporttoExcelFileChooser.getSelectedFile();
            export.fillData(TResult,new File(file+".xls"));
            JOptionPane.showMessageDialog(null," Excel File Saved at : "+ file+".xls","Message",JOptionPane.INFORMATION_MESSAGE);
        }           
            
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }     
    }//GEN-LAST:event_cmdExporttoExcelActionPerformed
    
    private void mnuScheduleTrialBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuScheduleTrialBalanceActionPerformed
        // TODO add your handling code here:
        if(txtAsOnDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter the Date");
            txtAsOnDate.requestFocus();
            return;
        }
        
        if(!txtAsOnDate.getText().trim().equals("")) {
            if(!EITLERPGLOBAL.isDate(txtAsOnDate.getText().trim())) {
                JOptionPane.showMessageDialog(null,"Please Enter the Date in dd/mm/yyyy format");
                txtAsOnDate.requestFocus();
                return;
            }
        }
        System.gc();
        objSHData=new TReportWriter.SimpleDataProvider.TTable();
        ProcessDone = false;
        data.Execute("DELETE FROM D_FIN_REPORT_TRANSACTION WHERE REPORT_ID=3 AND USER_ID="+EITLERPGLOBAL.gUserID,FinanceGlobal.FinURL);
        new Thread() {
            public void run() {
                try {
                    String CurrentYearDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim());
                    String PreviousYearDate = EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim().substring(0,6)+Integer.toString(Integer.parseInt(txtAsOnDate.getText().trim().substring(6,10))-1));
                    //String strSQL = "SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME,SH_CODE,GROUP_CODE FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE LIKE '%000' AND APPROVED=1 AND CANCELLED=0 AND SH_CODE NOT LIKE '00%' ORDER BY SH_CODE,MAIN_ACCOUNT_CODE "; //AND MAIN_ACCOUNT_CODE='101000'  104000
                    //String strSQL = "SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME,SH_CODE,GROUP_CODE FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE LIKE '%000' AND APPROVED=1 AND CANCELLED=0 ORDER BY MAIN_ACCOUNT_CODE"; //AND MAIN_ACCOUNT_CODE='101000'  104000
                    String strSQL = "SELECT * FROM D_FIN_GROUP_CODE_MASTER ORDER BY MAIN_ACCOUNT_CODE";
                    ResultSet rsMainCodeHeader = data.getResult(strSQL,FinanceGlobal.FinURL);
                    rsMainCodeHeader.first();
                    frmProgress objProgress = new frmProgress();
                    objProgress.Initialize();
                    objProgress.ShowDialog();
                    int MaxCount = data.getIntValueFromDB("SELECT COUNT(MAIN_ACCOUNT_CODE) FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE LIKE '%000' AND APPROVED=1 AND CANCELLED=0 AND SH_CODE NOT LIKE '00%' ORDER BY SH_CODE,MAIN_ACCOUNT_CODE ",FinanceGlobal.FinURL);//SH_CODE,
                    objProgress.SetMax(MaxCount);
                    objProgress.SetMin(0);
                    objProgress.SetValue(0);
                    objProgress.repaint();
                    objProgress.SetText("Starting Process...");
                    MaxCount = 0;
                    Connection Conn=data.getConn(FinanceGlobal.FinURL);
                    Statement Stmt=Conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
                    ResultSet rsReportData = Stmt.executeQuery("SELECT * FROM D_FIN_REPORT_TRANSACTION LIMIT 1");
                    int Counter=0;
                    if(rsMainCodeHeader.getRow()>0) {
                        while(!rsMainCodeHeader.isAfterLast()) {
                            
                            
                            
                            
                            String MainCodeHeader = UtilFunctions.getString(rsMainCodeHeader, "MAIN_ACCOUNT_CODE", "");
                            String AccountNameHeader = UtilFunctions.getString(rsMainCodeHeader, "ACCOUNT_NAME", "");
                            String ShCodeHeader = UtilFunctions.getString(rsMainCodeHeader, "SH_CODE", "").trim();
                            String GroupCodeHeader = UtilFunctions.getString(rsMainCodeHeader, "GROUP_CODE", "").trim();
                            
                            
                            
                            MaxCount++;
                            objProgress.SetValue(MaxCount);
                            objProgress.SetText("Processing : "+ AccountNameHeader + "  " + MainCodeHeader );
                            objProgress.repaint();
                            
                            //strSQL = "SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME,SH_CODE FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE NOT LIKE '%000' AND SH_CODE LIKE '"+ShCodeHeader.substring(0,2)+"%' AND APPROVED=1 AND CANCELLED=0 AND SH_CODE NOT LIKE '00%' ORDER BY MAIN_ACCOUNT_CODE";//SH_CODE,MAIN_ACCOUNT_CODE ";
                            strSQL = "SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME,SH_CODE FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE NOT LIKE '%000' " +
                            "AND GROUP_CODE = '"+GroupCodeHeader+"' AND APPROVED=1 AND CANCELLED=0 ORDER BY MAIN_ACCOUNT_CODE";//SH_CODE,MAIN_ACCOUNT_CODE ";
                            
                            ResultSet rsMainCodeDetail = data.getResult(strSQL,FinanceGlobal.FinURL);
                            rsMainCodeDetail.first();
                            if(rsMainCodeDetail.getRow()>0) {
                                while(!rsMainCodeDetail.isAfterLast()) {
                                    String MainCodeDetail = UtilFunctions.getString(rsMainCodeDetail, "MAIN_ACCOUNT_CODE", "");
                                    String AccountNameDetail = UtilFunctions.getString(rsMainCodeDetail, "ACCOUNT_NAME", "");
                                    String ShCodeDetail = UtilFunctions.getString(rsMainCodeDetail, "SH_CODE", "").trim();
                                    //                                    if(MainCodeDetail.equals("125019") || MainCodeDetail.equals("106016")) {
                                    //                                        boolean halt=true;
                                    //                                    }
                                    
                                    
//                                    if(MainCodeDetail.trim().equals("201045")) {
//                                        boolean t = true;
//                                    }
                                    
                                    Counter++;
                                    rsReportData.moveToInsertRow();
                                    rsReportData.updateInt("SR_NO", Counter);
                                    rsReportData.updateInt("REPORT_ID", 3);
                                    rsReportData.updateInt("USER_ID", EITLERPGLOBAL.gUserID);
                                    rsReportData.updateString("COLUMN_1", MainCodeHeader);
                                    rsReportData.updateString("COLUMN_2", ShCodeHeader.substring(0,2));
                                    rsReportData.updateString("COLUMN_3", AccountNameHeader);
                                    rsReportData.updateString("COLUMN_4", MainCodeDetail);
                                    rsReportData.updateString("COLUMN_5", ShCodeDetail);
                                    rsReportData.updateString("COLUMN_6", AccountNameDetail);
                                    BigDecimal PreviousBalance = new BigDecimal(clsAccount.getClosingBalance(MainCodeDetail,"", PreviousYearDate,true)).setScale(2,BigDecimal.ROUND_HALF_UP);
                                    BigDecimal CurrentBalance = new BigDecimal(clsAccount.getClosingBalance(MainCodeDetail,"", CurrentYearDate,true)).setScale(2,BigDecimal.ROUND_HALF_UP);
                                //   BigDecimal PreviousBalance = new BigDecimal(clsAccount.getClosingBalanceOld(MainCodeDetail,"", PreviousYearDate,true)).setScale(2,BigDecimal.ROUND_HALF_UP);
                                //   BigDecimal CurrentBalance = new BigDecimal(clsAccount.getClosingBalanceOld(MainCodeDetail,"", CurrentYearDate,true)).setScale(2,BigDecimal.ROUND_HALF_UP);
                               
                                    //rsReportData.updateString("COLUMN_7", new BigDecimal(Math.abs(clsAccount.getClosingBalance(MainCodeDetail,"", PreviousYearDate,true))).setScale(2,BigDecimal.ROUND_HALF_UP).toString());
                                    //rsReportData.updateString("COLUMN_8", new BigDecimal(Math.abs(clsAccount.getClosingBalance(MainCodeDetail,"", CurrentYearDate,true))).setScale(2,BigDecimal.ROUND_HALF_UP).toString());
                                    
                                    
                                    
                                    if(chkInclude.isSelected()) {
                                        String SQL = "SELECT * FROM D_FIN_MEM_HEADER A,D_FIN_MEM_DETAIL B "+
                                        "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND A.VOUCHER_DATE = '" + EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()) + "' "+
                                        "AND A.APPROVED =1 AND A.CANCELLED =0 "+
                                        "AND B.MAIN_ACCOUNT_CODE = '"+MainCodeDetail+"' ";
                                        
                                        if(data.IsRecordExist(SQL,FinanceGlobal.FinURL)) {
                                            ResultSet rsMemo = data.getResult(SQL,FinanceGlobal.FinURL);
                                            
                                            while(!rsMemo.isAfterLast()) {
                                                if(rsMemo.getString("EFFECT").trim().equals("C")) {
                                                    //System.out.println(" " + CurrentBalance);
                                                    //System.out.println(" " + rsMemo.getDouble("AMOUNT") + " " + new BigDecimal(rsMemo.getDouble("AMOUNT")));
                                                    
                                                    CurrentBalance = CurrentBalance.subtract(new BigDecimal(rsMemo.getDouble("AMOUNT")));
                                                    //System.out.println(" " + CurrentBalance);
                                                    //-=rsMemo.getDouble("AMOUNT");
                                                }
                                                else if(rsMemo.getString("EFFECT").trim().equals("D")) {
                                                    CurrentBalance = CurrentBalance.add(new BigDecimal(rsMemo.getDouble("AMOUNT")));
                                                    //CurrentBalance+=rsMemo.getDouble("AMOUNT");
                                                }
                                                rsMemo.next();
                                            }
                                        }
                                        
                                    }
                                    
                                    rsReportData.updateString("COLUMN_7", PreviousBalance.toString());
                                    rsReportData.updateString("COLUMN_8", CurrentBalance.toString());
                                    rsReportData.updateString("COLUMN_9", GroupCodeHeader);
                                    rsReportData.insertRow();
                                    
                                    
                                    
                                    
                                    strSQL = "SELECT * FROM D_FIN_SCH_JV_HEADER A,D_FIN_SCH_JV_DETAIL B "+
                                    "WHERE A.DOC_NO = B.DOC_NO AND A.APPROVED =1 AND A.CANCELLED= 0 "+
                                    "AND A.AS_ON_DATE ='" + EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()) + "' AND BASE_MAIN_ACCOUNT_CODE = '" + MainCodeDetail + "' ";
                                    //if(GroupCodeHeader.equals("0")) {
                                    if(data.IsRecordExist(strSQL,FinanceGlobal.FinURL)) {
                                        Counter++;
                                        rsReportData.moveToInsertRow();
                                        rsReportData.updateInt("SR_NO", Counter);
                                        rsReportData.updateInt("REPORT_ID", 3);
                                        rsReportData.updateInt("USER_ID", EITLERPGLOBAL.gUserID);
                                        rsReportData.updateString("COLUMN_1", MainCodeHeader);
                                        rsReportData.updateString("COLUMN_2", ShCodeHeader.substring(0,2));
                                        rsReportData.updateString("COLUMN_3", AccountNameHeader);
                                        rsReportData.updateString("COLUMN_4", MainCodeDetail);
                                        rsReportData.updateString("COLUMN_5", ShCodeDetail);
                                        rsReportData.updateString("COLUMN_6", AccountNameDetail);
                                        
                                        CurrentBalance = CurrentBalance.multiply(new BigDecimal(-1));
                                        
                                        //double temp = Double.parseDouble(CurrentBalance.toString()) *-1;
                                        //CurrentBalance = new BigDecimal(temp);
                                        rsReportData.updateString("COLUMN_7", "0.00");
                                        rsReportData.updateString("COLUMN_8", CurrentBalance.toString());
                                        rsReportData.updateString("COLUMN_9", GroupCodeHeader);
                                        rsReportData.insertRow();
                                    }
                                    //}
                                    
                                    if(data.IsRecordExist(strSQL,FinanceGlobal.FinURL)) {
                                        ResultSet rsDummy = data.getResult(strSQL,FinanceGlobal.FinURL);
                                        while(!rsDummy.isAfterLast()) {
                                            Counter++;
                                            rsReportData.moveToInsertRow();
                                            rsReportData.updateInt("SR_NO", Counter);
                                            rsReportData.updateInt("REPORT_ID", 3);
                                            rsReportData.updateInt("USER_ID", EITLERPGLOBAL.gUserID);
                                            rsReportData.updateString("COLUMN_1", rsDummy.getString("LINK_CODE"));
                                            rsReportData.updateString("COLUMN_2", "00");
                                            rsReportData.updateString("COLUMN_3", data.getStringValueFromDB("SELECT ACCOUNT_NAME FROM D_FIN_GROUP_CODE_MASTER WHERE GROUP_CODE = '" + rsDummy.getString("GROUP_CODE") + "' ",FinanceGlobal.FinURL));
                                            rsReportData.updateString("COLUMN_4", rsDummy.getString("MAIN_ACCOUNT_CODE"));
                                            rsReportData.updateString("COLUMN_5", rsDummy.getString("LINK_CODE"));
                                            rsReportData.updateString("COLUMN_6", rsDummy.getString("LINK_NAME"));
                                            //CurrentBalance = new BigDecimal(temp);
                                            rsReportData.updateString("COLUMN_7", "0.00");
                                            
                                            if(rsDummy.getString("EFFECT").equals("Dr")) {
                                                rsReportData.updateString("COLUMN_8", rsDummy.getString("AMOUNT"));
                                            } else {
                                                rsReportData.updateString("COLUMN_8", "-"+rsDummy.getString("AMOUNT"));
                                            }
                                            rsReportData.updateString("COLUMN_9", rsDummy.getString("GROUP_CODE"));
                                            rsReportData.insertRow();
                                            
                                            rsDummy.next();
                                        }
                                    }
                                    rsMainCodeDetail.next();
                                }
                            }
                            rsMainCodeHeader.next();
                        }
                    }
                    ProcessDone = true;
                    objProgress.Hide();
                    
                    try {
                        URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptSchedulewiseTB.jsp?dbURL="+FinanceGlobal.FinURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&AsOnDate="+txtAsOnDate.getText()+"&UserId="+EITLERPGLOBAL.gUserID);
                        System.out.println(ReportFile);
                        EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
                    } catch(Exception e) {
                        JOptionPane.showMessageDialog(null,"File error "+e.getMessage());
                    }
                } catch (Exception e) {
                    ProcessDone = true;
                    e.printStackTrace();
                }
            };
        }.start();
    }//GEN-LAST:event_mnuScheduleTrialBalanceActionPerformed
    
    private void mnuTrialBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuTrialBalanceActionPerformed
        // TODO add your handling code here:
        if(!txtAsOnDate.getText().trim().equals("")) {
            if(EITLERPGLOBAL.isDate(txtAsOnDate.getText().trim())) {
                if(cmbType.getSelectedIndex()==1) {
                    GenerateNominal();
                } else  if(cmbType.getSelectedIndex()==2) {
                    GenerateSubsidary();
                }
            } else {
                JOptionPane.showMessageDialog(null,"Please Enter the Date in dd/mm/yyyy format");
                txtAsOnDate.requestFocus();
            }
        } else {
            JOptionPane.showMessageDialog(null,"Please Enter the Date");
            txtAsOnDate.requestFocus();
        }
    }//GEN-LAST:event_mnuTrialBalanceActionPerformed
    
    private void txtMainCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMainCodeKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMainCodeKeyPressed
    
    private void MainPanelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_MainPanelFocusGained
        // TODO add your handling code here:
        
    }//GEN-LAST:event_MainPanelFocusGained
    
    private void chkAmountItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkAmountItemStateChanged
        // TODO add your handling code here:
        if(chkAmount.isSelected()) {
            txtFromAmt.setEnabled(true);
            txtToAmt.setEnabled(true);
            txtFromAmt.setText("");
            txtToAmt.setText("");
        }
        else {
            txtFromAmt.setEnabled(false);
            txtToAmt.setEnabled(false);
            txtFromAmt.setText("");
            txtToAmt.setText("");
        }
        
    }//GEN-LAST:event_chkAmountItemStateChanged
    
    private void cmdGenerateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGenerateReportActionPerformed
        // TODO add your handling code here:
        mnuSelectReport.show(jPanel2, cmdGenerateReport.getX(), cmdGenerateReport.getY()+cmdGenerateReport.getHeight());
    }//GEN-LAST:event_cmdGenerateReportActionPerformed
    
    private void cmbTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTypeItemStateChanged
        // TODO add your handling code here:
       if(cmbType.getSelectedIndex()==0) {
            txtMainCode.setEnabled(false);
            txtMainCode.setText("");
            chkInclude.setEnabled(false);
            chkInclude.setSelected(false);
        }
        
       else if(cmbType.getSelectedIndex()==1) {
            txtMainCode.setEnabled(false);
            txtMainCode.setText("");
            chkInclude.setEnabled(true);
            chkInclude.setSelected(false);
        }
        else if(cmbType.getSelectedIndex()==2){
            txtMainCode.setText("");
            txtMainCode.setEnabled(true);
            chkInclude.setEnabled(false);
            chkInclude.setSelected(false);
            
        }
    }//GEN-LAST:event_cmbTypeItemStateChanged
    
    private void cmdSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSearchActionPerformed
        // TODO add your handling code here:
        searchWithin(' ');
    }//GEN-LAST:event_cmdSearchActionPerformed
    
    private void btnEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnterActionPerformed
        // TODO add your handling code here:
        //Credit.clear();
        //Debit.clear();
        if(!txtAsOnDate.getText().trim().equals("")) {
            if(EITLERPGLOBAL.isDate(txtAsOnDate.getText().trim())) {
                if(cmbType.getSelectedIndex()==1) {
                    getAccountBalanceN();
                } else  if(cmbType.getSelectedIndex()==2) {
                    
                    getAccountBalanceS();
                }
            } else {
                JOptionPane.showMessageDialog(null,"Please Enter the Date in dd/mm/yyyy format");
                txtAsOnDate.requestFocus();
            }
        } else {
            JOptionPane.showMessageDialog(null,"Please Enter the Date");
            txtAsOnDate.requestFocus();
        }
    }//GEN-LAST:event_btnEnterActionPerformed
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formMouseClicked
    
    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jPanel1MouseClicked
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        MainPanel.setSelectedIndex(0);
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void txtAsOnDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAsOnDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAsOnDateActionPerformed
    
    private void FormatGridN() {
        TResult.removeAll();
        TableModelT = new EITLTableModel();
        TResult.setModel(TableModelT);
        TableModelT.addColumn("Main Code");
        TableModelT.addColumn("Account Name");
        TableModelT.addColumn("Debit");
        TableModelT.addColumn("Credit");
        TableModelT.addColumn("SH. Code");
        
        TableModelT.SetVariable(0,"MAIN_CODE");
        TableModelT.SetVariable(1,"ACCOUNT_NAME");
        TableModelT.SetVariable(2,"DEBIT_AMOUNT");
        TableModelT.SetVariable(3,"CREDIT_AMOUNT");
        TableModelT.SetVariable(4,"SH_CODE");
        
        RowFormat =new EITLTableCellRenderer();
        
        for(int j=0;j<TResult.getColumnCount();j++) {
            TResult.getColumnModel().getColumn(j).setCellRenderer(RowFormat);
        }
        
        CellAlign=new EITLTableCellRenderer();
        
        CellAlign.setHorizontalAlignment(JLabel.RIGHT);
        TResult.getColumnModel().getColumn(2).setCellRenderer(CellAlign);
        TResult.getColumnModel().getColumn(3).setCellRenderer(CellAlign);
        
    }
    
    private void FormatGridSales() {
        SalesTable.removeAll();
        TableModelSalesT = new EITLTableModel();
        SalesTable.setModel(TableModelSalesT);
        SalesTable.setAutoResizeMode(SalesTable.AUTO_RESIZE_OFF);
        TableModelSalesT.addColumn("Sr No");
        TableModelSalesT.addColumn("Main Code");
        TableModelSalesT.addColumn("Party Code");
        TableModelSalesT.addColumn("Party Name");
        TableModelSalesT.addColumn("Party Address");
        TableModelSalesT.addColumn("TR(01/09/11)");
        TableModelSalesT.addColumn("TR 13");
        TableModelSalesT.addColumn("TR 15");
        TableModelSalesT.addColumn("TR 17");
        TableModelSalesT.addColumn("TR 19");
        TableModelSalesT.addColumn("Net Amount");                
        CellAlign=new EITLTableCellRenderer();
        
        CellAlign.setHorizontalAlignment(JLabel.RIGHT);
        SalesTable.getColumnModel().getColumn(4).setCellRenderer(CellAlign);
        SalesTable.getColumnModel().getColumn(5).setCellRenderer(CellAlign);
        SalesTable.getColumnModel().getColumn(6).setCellRenderer(CellAlign);
        SalesTable.getColumnModel().getColumn(7).setCellRenderer(CellAlign);
        SalesTable.getColumnModel().getColumn(8).setCellRenderer(CellAlign);
        SalesTable.getColumnModel().getColumn(9).setCellRenderer(CellAlign);
        SalesTable.getColumnModel().getColumn(10).setCellRenderer(CellAlign);
        
    }
    
    private void FormatGridCrOs() {
        CrOsTable.removeAll();
        TableModelCrOsT = new EITLTableModel();
        CrOsTable.setModel(TableModelCrOsT);
        CrOsTable.setAutoResizeMode(CrOsTable.AUTO_RESIZE_OFF);
        TableModelCrOsT.addColumn("Sr No");
        TableModelCrOsT.addColumn("Main Code");
        TableModelCrOsT.addColumn("Party Code");
        TableModelCrOsT.addColumn("Party Name");
        TableModelCrOsT.addColumn("Party Address");
        TableModelCrOsT.addColumn("PAN");
        TableModelCrOsT.addColumn("Opening Balance");
        TableModelCrOsT.addColumn("DR");
        TableModelCrOsT.addColumn("CR");        
        TableModelCrOsT.addColumn("Net Amount");                
        CellAlign=new EITLTableCellRenderer();
        
        CellAlign.setHorizontalAlignment(JLabel.RIGHT);
        CrOsTable.getColumnModel().getColumn(4).setCellRenderer(CellAlign);
        CrOsTable.getColumnModel().getColumn(5).setCellRenderer(CellAlign);
        CrOsTable.getColumnModel().getColumn(6).setCellRenderer(CellAlign);
        CrOsTable.getColumnModel().getColumn(7).setCellRenderer(CellAlign);        
        
    }
    
    private void FormatGridPurchase() {
        PurchaseTable.removeAll();
        TableModelPurchase = new EITLTableModel();
        PurchaseTable.setModel(TableModelPurchase);
        PurchaseTable.setAutoResizeMode(PurchaseTable.AUTO_RESIZE_OFF);
        TableModelPurchase.addColumn("Sr No");
        TableModelPurchase.addColumn("Main Code");
        TableModelPurchase.addColumn("Party Code");
        TableModelPurchase.addColumn("Party Name");
        TableModelPurchase.addColumn("Party Address");                
        TableModelPurchase.addColumn("CR Total");
        
        CellAlign=new EITLTableCellRenderer();        
        CellAlign.setHorizontalAlignment(JLabel.RIGHT);        
        PurchaseTable.getColumnModel().getColumn(5).setCellRenderer(CellAlign);
        
        
    }
    
    private void FormatGridDescN() {
       TDescResult.removeAll();
        TableModelDescT = new EITLTableModel();
        TDescResult.setModel(TableModelDescT);
        TableModelDescT.addColumn("Main Code");
        TableModelDescT.addColumn("Account Name");
        TableModelDescT.addColumn("Opening Balance");
        TableModelDescT.addColumn("Total Debit");
        TableModelDescT.addColumn("Total Credit");
        TableModelDescT.addColumn("Debit");
        TableModelDescT.addColumn("Credit");
        
        
        TableModelDescT.SetVariable(0,"MAIN_CODE");
        TableModelDescT.SetVariable(1,"ACCOUNT_NAME");
        TableModelDescT.SetVariable(2,"OPENING_BAL");
        TableModelDescT.SetVariable(3,"TOTAL_DEBIT");
        TableModelDescT.SetVariable(4,"TOTAL_CREDIT");
        TableModelDescT.SetVariable(5,"DEBIT_AMOUNT");        
        TableModelDescT.SetVariable(6,"CREDIT_AMOUNT");
        
        
        RowFormat =new EITLTableCellRenderer();
        
        for(int j=0;j<TDescResult.getColumnCount();j++) {
            TDescResult.getColumnModel().getColumn(j).setCellRenderer(RowFormat);
        }
        
        CellAlign=new EITLTableCellRenderer();        
        CellAlign.setHorizontalAlignment(JLabel.RIGHT);
        TDescResult.getColumnModel().getColumn(2).setCellRenderer(CellAlign);
        TDescResult.getColumnModel().getColumn(3).setCellRenderer(CellAlign);
        TDescResult.getColumnModel().getColumn(4).setCellRenderer(CellAlign);
        TDescResult.getColumnModel().getColumn(5).setCellRenderer(CellAlign);
        TDescResult.getColumnModel().getColumn(6).setCellRenderer(CellAlign); 
    }
    
    private void FormatGridSchedule() {
        TScheduleWise.removeAll();
        TableModelSchedulewise = new EITLTableModel();
        TScheduleWise.setModel(TableModelSchedulewise);
        TScheduleWise.setAutoResizeMode(TScheduleWise.AUTO_RESIZE_OFF);
        TableModelSchedulewise.addColumn("LAST YEAR");
        TableModelSchedulewise.addColumn("SH-CODE");
        TableModelSchedulewise.addColumn("ACCOUNT CODE");
        TableModelSchedulewise.addColumn("ACCOUNT HEAD");
        TableModelSchedulewise.addColumn("CURRENT YEAR");
        
        /*
        CellAlign=new EITLTableCellRenderer();        
        CellAlign.setHorizontalAlignment(JLabel.RIGHT);
        SalesTable.getColumnModel().getColumn(4).setCellRenderer(CellAlign);
        SalesTable.getColumnModel().getColumn(5).setCellRenderer(CellAlign);
        SalesTable.getColumnModel().getColumn(6).setCellRenderer(CellAlign);
        SalesTable.getColumnModel().getColumn(7).setCellRenderer(CellAlign);
        SalesTable.getColumnModel().getColumn(8).setCellRenderer(CellAlign);
        SalesTable.getColumnModel().getColumn(9).setCellRenderer(CellAlign);
        SalesTable.getColumnModel().getColumn(10).setCellRenderer(CellAlign);
         */        
    }
    
    private void GenerateCombo() {
        cmbType.setModel(cmbModel);
        ComboData aData = new ComboData();
        aData.Text="-Select-";
        aData.Code=0;
        cmbModel.addElement(aData);
        aData.Text="Nominal Ledger";
        aData.Code=1;
        cmbModel.addElement(aData);
        aData.Text="Subsidary Ledger";
        aData.Code=2;
        cmbModel.addElement(aData);
        
    }
    
    private void getAccountBalanceN() {
        
        new Thread(){
            
            public void run(){
                
                
                try {
                    
                    double Amount =0.0;
                    int DrCount = 0;
                    int CrCount = 0;
                    int Counter=0;
                    double DrTotal=0;
                    double CrTotal=0;
                    double NetBal=0;
                    double FromAmt=0;
                    double ToAmt = 0;
                    
                    HashMap Credit= new HashMap();
                    HashMap Debit = new HashMap();
                    if(chkAmount.isSelected()) {
                        if(txtFromAmt.getText().trim().equals("") || txtToAmt.getText().trim().equals("")) {
                            JOptionPane.showMessageDialog(null,"Please enter From and To amount.");
                            
                            return;
                        }
                        FromAmt = Double.parseDouble(txtFromAmt.getText().trim());
                        ToAmt = Double.parseDouble(txtToAmt.getText().trim());
                        if(FromAmt>ToAmt)  {
                            JOptionPane.showMessageDialog(null,"From Amount must be less then to amount");
                            return;
                        }
                        
                        if(ToAmt<FromAmt)  {
                            JOptionPane.showMessageDialog(null,"To Amount must be grater then From amount");
                            return;
                        }
                    }
                    int Count=data.getIntValueFromDB("SELECT COUNT(*) AS ACCOUNT_COUNT  FROM D_FIN_GL ORDER BY MAIN_ACCOUNT_CODE",FinanceGlobal.FinURL);
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Count);
                    Bar.setMinimum(0);
                    Bar.setValue(0);
                    
                    ResultSet rsAccount =data.getResult("SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL ORDER BY MAIN_ACCOUNT_CODE",FinanceGlobal.FinURL); //WHERE APPROVED=1
                    rsAccount.first();
                    while(!rsAccount.isAfterLast()) {
                        Counter++;
                        Bar.setValue(Counter);
                        lblStatus.setText("Processing Record "+Counter);
                        
                        
                        if(rsAccount.getString("MAIN_ACCOUNT_CODE").equals("445050")) {
                            boolean halt=true;
                        }
                        
                        if(chkApproved.isSelected()) {
                            Amount = clsAccount.getClosingBalance(rsAccount.getString("MAIN_ACCOUNT_CODE"),"",EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()),true);
                        }
                        else {
                            Amount =  clsAccount.getAvailableClosingBalance(rsAccount.getString("MAIN_ACCOUNT_CODE"),"",EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()));
                        }
                        
                        if(chkInclude.isSelected()) {
                            String SQL = "SELECT * FROM D_FIN_MEM_HEADER A,D_FIN_MEM_DETAIL B "+
                            "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND A.VOUCHER_DATE = '" + EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()) + "' "+
                            "AND A.APPROVED =1 AND A.CANCELLED =0 "+
                            "AND B.MAIN_ACCOUNT_CODE = '"+rsAccount.getString("MAIN_ACCOUNT_CODE")+"' ";
                            
                            if(data.IsRecordExist(SQL,FinanceGlobal.FinURL)) {
                                ResultSet rsMemo = data.getResult(SQL,FinanceGlobal.FinURL);
                                
                                while(!rsMemo.isAfterLast()) {
                                    if(rsMemo.getString("EFFECT").trim().equals("C")) {
                                        Amount-=rsMemo.getDouble("AMOUNT");
                                    }
                                    else if(rsMemo.getString("EFFECT").trim().equals("D")) {
                                        Amount+=rsMemo.getDouble("AMOUNT");
                                    }
                                    rsMemo.next();
                                }
                            }
                            
                        }
                        
                        // System.out.println("Main Code : "+rsAccount.getString("MAIN_ACCOUNT_CODE")+ " : " + "Amount is : ===>> "+Amount);
                        
                        clsTrialBalance ObjTrial = new clsTrialBalance();
                        ObjTrial.setAttribute("MAIN_ACCOUNT_CODE",rsAccount.getString("MAIN_ACCOUNT_CODE")) ;
                        ObjTrial.setAttribute("ACCOUNT_NAME",rsAccount.getString("ACCOUNT_NAME")) ;
                        
                        if(chkAmount.isSelected()) {
                            FromAmt = Double.parseDouble(txtFromAmt.getText().trim());
                            ToAmt = Double.parseDouble(txtToAmt.getText().trim());
                            if(Math.abs(Amount) >= FromAmt && Math.abs(Amount) <= ToAmt) {
                                // do nothing
                            } else {
                                rsAccount.next();
                                continue;
                            }
                        }
                        
                        
                        if(Amount > 0) {
                            DrTotal+=Amount;
                            ObjTrial.setAttribute("DEBIT", dFormat.format(Amount)) ;
                            Debit.put(Integer.toString(DrCount), ObjTrial);
                            DrCount++;
                            rsAccount.next();
                        } else if(Amount < 0){
                            CrTotal+=Math.abs(Amount);
                            ObjTrial.setAttribute("CREDIT",dFormat.format(Math.abs(Amount))) ;
                            Debit.put(Integer.toString(DrCount), ObjTrial);
                            DrCount++;
                            rsAccount.next();
                        } else {
                            rsAccount.next();
                        }
                    }
                    
                    lblDebitTotal.setText(dFormat.format(DrTotal));
                    lblCreditTotal.setText(dFormat.format(CrTotal));
                    
                    NetBal=DrTotal-CrTotal;
                    if(NetBal < 0){
                        lblNetBal.setText(dFormat.format(Math.abs(NetBal)) + " Cr");
                    }else if(NetBal == 0) {
                        lblNetBal.setText(dFormat.format(Math.abs(NetBal)) + " Dr");
                    }else if(NetBal > 0){
                        lblNetBal.setText(dFormat.format(NetBal)+ " Dr");
                    } 
                    
                    FormatGridN();
                    GenerateGridN(Debit);
                    ProcessCompleted=true;
                    lblStatus.setText("Completed...");
                    //DrTotal=0.0;
                    // CrTotal=0.0;
                    // Debit.clear();
                    // Credit.clear();
                    
                }
                catch(Exception e) {
                    ProcessCompleted=true;
                    e.printStackTrace();
                }
                
                MainPanel.setSelectedIndex(1);
                Bar.setVisible(false);
                lblStatus.setVisible(false);
            };
        }.start();
        
    }
    
    
    private void getAccountBalanceNExtra() {
      new Thread(){            
            public void run(){               
                
                try {                    
                    double Amount =0.0;
                    //String OpeningAmount="";
                    double OpeningAmount=0.0;
                    String OpeningTotalCredit="";
                    double OpeningTotalCr =0.0;
                    String OpeningTotalDebit="";
                    int DrCount = 0;
                    int CrCount = 0;
                    int Counter1=0;
                    double DrTotal=0;
                    double CrTotal=0;
                    double NetBal=0;
                    double DescNetBal=0;
                    double FromAmt=0;
                    double ToAmt = 0;
                    
                    
                    HashMap Credit= new HashMap();
                    HashMap Debit = new HashMap();
                    clsPartyInfo objPartyInfo = new clsPartyInfo();
                    if(chkAmount.isSelected()) {
                        if(txtFromAmt.getText().trim().equals("") || txtToAmt.getText().trim().equals("")) {
                            JOptionPane.showMessageDialog(null,"Please enter From and To amount.");
                            
                            return;
                        }
                        FromAmt = Double.parseDouble(txtFromAmt.getText().trim());
                        ToAmt = Double.parseDouble(txtToAmt.getText().trim());
                        if(FromAmt>ToAmt)  {
                            JOptionPane.showMessageDialog(null,"From Amount must be less then to amount");
                            return;
                        }
                        
                        if(ToAmt<FromAmt)  {
                            JOptionPane.showMessageDialog(null,"To Amount must be grater then From amount");
                            return;
                        }
                    }
                    int Count=data.getIntValueFromDB("SELECT COUNT(*) AS ACCOUNT_COUNT  FROM D_FIN_GL ORDER BY MAIN_ACCOUNT_CODE",FinanceGlobal.FinURL);
                    ProgressBar.setVisible(true);
                    lblProgressbarStatus.setVisible(true);
                    ProgressBar.setMaximum(Count);
                    ProgressBar.setMinimum(0);
                    ProgressBar.setValue(0);
                    
                    ResultSet rsAccount =data.getResult("SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL ORDER BY MAIN_ACCOUNT_CODE",FinanceGlobal.FinURL); //WHERE APPROVED=1
                    rsAccount.first();
                    while(!rsAccount.isAfterLast()) {
                        Counter1++;
                        ProgressBar.setValue(Counter1);
                        lblProgressbarStatus.setText("Processing Record "+Counter1);
                                                
                        if(rsAccount.getString("MAIN_ACCOUNT_CODE").equals("445050")) {
                            boolean halt=true;
                        }
                        
                        if(chkApproved.isSelected()) {
                            //OpeningAmount=clsAccount.getClosingBalance(rsAccount.getString("MAIN_ACCOUNT_CODE"),"",EITLERPGLOBAL.FinFromDateDB,true);
                            //OpeningAmount=objPartyInfo.getSuffix((Double.toString(clsAccount.getOpeningBalance(rsAccount.getString("MAIN_ACCOUNT_CODE"),"",EITLERPGLOBAL.FinFromDateDB))));
                            OpeningAmount=clsAccount.getOpeningBalance(rsAccount.getString("MAIN_ACCOUNT_CODE"),"",EITLERPGLOBAL.FinFromDateDB);
                            Amount = clsAccount.getClosingBalance(rsAccount.getString("MAIN_ACCOUNT_CODE"),"",EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()),true);                            
                            OpeningTotalCredit=objPartyInfo.getCreditInfo(rsAccount.getString("MAIN_ACCOUNT_CODE"),"",EITLERPGLOBAL.FinFromDateDB,EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()),true);                        
                            OpeningTotalCr = Double.parseDouble(OpeningTotalCredit);
                            OpeningTotalDebit= objPartyInfo.getDebitInfo(rsAccount.getString("MAIN_ACCOUNT_CODE"),"",EITLERPGLOBAL.FinFromDateDB,EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()),true); 
                        }
                        else {
                            Amount =  clsAccount.getAvailableClosingBalance(rsAccount.getString("MAIN_ACCOUNT_CODE"),"",EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()));
                        }
                        
                        if(chkInclude.isSelected()) {
                            String SQL = "SELECT * FROM D_FIN_MEM_HEADER A,D_FIN_MEM_DETAIL B "+
                            "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND A.VOUCHER_DATE = '" + EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()) + "' "+
                            "AND A.APPROVED =1 AND A.CANCELLED =0 "+
                            "AND B.MAIN_ACCOUNT_CODE = '"+rsAccount.getString("MAIN_ACCOUNT_CODE")+"' ";
                            
                            if(data.IsRecordExist(SQL,FinanceGlobal.FinURL)) {
                                ResultSet rsMemo = data.getResult(SQL,FinanceGlobal.FinURL);
                                
                                while(!rsMemo.isAfterLast()) {
                                    if(rsMemo.getString("EFFECT").trim().equals("C")) {
                                        Amount-=rsMemo.getDouble("AMOUNT");
                                    }
                                    else if(rsMemo.getString("EFFECT").trim().equals("D")) {
                                        Amount+=rsMemo.getDouble("AMOUNT");
                                    }
                                    rsMemo.next();
                                }
                            }
                            
                        }
                        
                        // System.out.println("Main Code : "+rsAccount.getString("MAIN_ACCOUNT_CODE")+ " : " + "Amount is : ===>> "+Amount);
                        
                        clsTrialBalance ObjTrial = new clsTrialBalance();
                        ObjTrial.setAttribute("MAIN_ACCOUNT_CODE",rsAccount.getString("MAIN_ACCOUNT_CODE")) ;
                        ObjTrial.setAttribute("ACCOUNT_NAME",rsAccount.getString("ACCOUNT_NAME")) ;
                        if(OpeningAmount < 0.00){
                            ObjTrial.setAttribute("OPENING_BAL", dFormat.format(Math.abs(OpeningAmount))+" Cr");
                            System.out.println("Cr");
                        } else {
                            ObjTrial.setAttribute("OPENING_BAL", dFormat.format(OpeningAmount));
                        }
                                                  
                        //ObjTrial.setAttribute("OPENING_BAL", OpeningAmount);
                        ObjTrial.setAttribute("TOTAL_CREDIT", dFormat.format(Math.abs(OpeningTotalCr)));
                        ObjTrial.setAttribute("TOTAL_DEBIT", OpeningTotalDebit) ;
                        
                        if(chkAmount.isSelected()) {
                            FromAmt = Double.parseDouble(txtFromAmt.getText().trim());
                            ToAmt = Double.parseDouble(txtToAmt.getText().trim());
                            if(Math.abs(Amount) >= FromAmt && Math.abs(Amount) <= ToAmt) {
                                // do nothing
                            } else {
                                rsAccount.next();
                                continue;
                            }
                        }
                        
                        
                        if(Amount > 0) {
                            DrTotal+=Amount;
                            ObjTrial.setAttribute("DEBIT", dFormat.format(Amount)) ;
                            Debit.put(Integer.toString(DrCount), ObjTrial);
                            DrCount++;
                            rsAccount.next();
                        } else if(Amount < 0){
                            CrTotal+=Math.abs(Amount);
                            ObjTrial.setAttribute("CREDIT",dFormat.format(Math.abs(Amount))) ;
                            Debit.put(Integer.toString(DrCount), ObjTrial);
                            DrCount++;
                            rsAccount.next();
                        } else {
                            rsAccount.next();
                        }
                        
                    }
                    
                    
                    lblDescDebitTotal.setText(dFormat.format(DrTotal));                    
                    lblDescCreditTotal.setText(dFormat.format(CrTotal));
                                        
                    DescNetBal=DrTotal-CrTotal;
                    if(DescNetBal < 0){
                        lblDescNetBal.setText(dFormat.format(Math.abs(DescNetBal)) + " Cr");
                    }else if(DescNetBal == 0) {
                        lblDescNetBal.setText(dFormat.format(Math.abs(DescNetBal)) + " Dr");
                    }else if(DescNetBal > 0){
                        lblDescNetBal.setText(dFormat.format(DescNetBal)+ " Dr");
                    } 
                    
                    
                    
                    FormatGridDescN();                    
                    GenerateGridDescN(Debit);
                    ProcessCompleted=true;
                    lblProgressbarStatus.setText("Completed...");
                    //DrTotal=0.0;
                    // CrTotal=0.0;
                    // Debit.clear();
                    // Credit.clear();
                    
                }
                catch(Exception e) {
                    ProcessCompleted=true;
                    e.printStackTrace();
                }             
               
                ProgressBar.setVisible(false);
                lblProgressbarStatus.setVisible(false);
            };
        }.start();   
    }
    
    
    
    
    private void GenerateGridN(HashMap List) {
        
        DrTotal=0.0;
        CrTotal=0.0;
        objData = new TReportWriter.SimpleDataProvider.TTable();
        
        for(int i=0;i<=List.size()-1;i++) {
            clsTrialBalance ObjBalance =(clsTrialBalance)List.get(Integer.toString(i));
            Object[] rowData = new Object[List.size()];
            
            String SHCode=data.getStringValueFromDB("SELECT SH_CODE FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE='"+ObjBalance.getAttribute("MAIN_ACCOUNT_CODE").getString()+"'",FinanceGlobal.FinURL);
            
            TableModelT.addRow(rowData);
            TResult.setValueAt(ObjBalance.getAttribute("MAIN_ACCOUNT_CODE").getString(),i,0);
            TResult.setValueAt(ObjBalance.getAttribute("ACCOUNT_NAME").getString(),i,1);
            TResult.setValueAt(ObjBalance.getAttribute("DEBIT").getString(), i, 2);
            TResult.setValueAt(ObjBalance.getAttribute("CREDIT").getString(), i,3);
            TResult.setValueAt(SHCode, i,4);
            
            TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
            objRow.setValue("COMPANY_ID",(String)ObjBalance.getAttribute("COMPANY_ID").getObj());
            objRow.setValue("MAIN_CODE",(String)ObjBalance.getAttribute("MAIN_ACCOUNT_CODE").getObj());
            objRow.setValue("AC_NAME",(String)ObjBalance.getAttribute("ACCOUNT_NAME").getObj());
            objRow.setValue("DEBIT",ObjBalance.getAttribute("DEBIT").getString());
            objRow.setValue("CREDIT",ObjBalance.getAttribute("CREDIT").getString());
            if (SHCode.trim().equals("000000")) {
                SHCode="";
            }
            objRow.setValue("SH_CODE",SHCode);
            objData.AddRow(objRow);
        }
    }
    
    private void GenerateGridDescN(HashMap List) {
        DrTotal=0.0;
        CrTotal=0.0;
        objData = new TReportWriter.SimpleDataProvider.TTable();
        
        for(int i=0;i<=List.size()-1;i++) {
            clsTrialBalance ObjBalance =(clsTrialBalance)List.get(Integer.toString(i));
            Object[] rowData = new Object[List.size()];            
            
            
            TableModelDescT.addRow(rowData);
            TDescResult.setValueAt(ObjBalance.getAttribute("MAIN_ACCOUNT_CODE").getString(),i,0);
            TDescResult.setValueAt(ObjBalance.getAttribute("ACCOUNT_NAME").getString(),i,1);
            TDescResult.setValueAt(ObjBalance.getAttribute("OPENING_BAL").getString(),i,2);
            TDescResult.setValueAt(ObjBalance.getAttribute("TOTAL_DEBIT").getString(),i,3);
            TDescResult.setValueAt(ObjBalance.getAttribute("TOTAL_CREDIT").getString(),i,4);
            TDescResult.setValueAt(ObjBalance.getAttribute("DEBIT").getString(), i, 5);
            TDescResult.setValueAt(ObjBalance.getAttribute("CREDIT").getString(), i,6);
            
            
            TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
            objRow.setValue("COMPANY_ID",(String)ObjBalance.getAttribute("COMPANY_ID").getObj());
            objRow.setValue("MAIN_CODE",(String)ObjBalance.getAttribute("MAIN_ACCOUNT_CODE").getObj());
            objRow.setValue("AC_NAME",(String)ObjBalance.getAttribute("ACCOUNT_NAME").getObj());
            objRow.setValue("OPENING_BAL",(String)ObjBalance.getAttribute("OPENING_BAL").getObj());
            objRow.setValue("TOTAL_DEBIT",(String)ObjBalance.getAttribute("TOTAL_DEBIT").getObj());
            objRow.setValue("TOTAL_CREDIT",(String)ObjBalance.getAttribute("TOTAL_CREDIT").getObj());
            objRow.setValue("DEBIT",ObjBalance.getAttribute("DEBIT").getString());
            objRow.setValue("CREDIT",ObjBalance.getAttribute("CREDIT").getString());
           
            objData.AddRow(objRow);
        } 
        
    }
    
    
    private void FormatGridS() {
        TResult.removeAll();
        TableModelT = new EITLTableModel();
        TResult.setModel(TableModelT);
        TableModelT.addColumn("Main Code");
        TableModelT.addColumn("Sub Code");
        TableModelT.addColumn("Account Name");
        //TableModelT.addColumn("Address");
        TableModelT.addColumn("Debit");
        TableModelT.addColumn("Credit");
        TableModelT.addColumn("SH. Code");
        if(chkPartyAdd.isSelected()) {
         TableModelT.addColumn("Address");
        }
        
        TableModelT.SetVariable(0,"MAIN_CODE");
        TableModelT.SetVariable(1,"ACCOUNT_NAME");
        //  TableModelT.SetVariable(2,"ADDRESS");
        TableModelT.SetVariable(2,"DEBIT_AMOUNT");
        TableModelT.SetVariable(3,"CREDIT_AMOUNT");
        TableModelT.SetVariable(4,"SH_CODE");
        if(chkPartyAdd.isSelected()) {
         TableModelT.SetVariable(5,"ADDRESS");
        }
        
        RowFormat =new EITLTableCellRenderer();
        
        for(int j=0;j<TResult.getColumnCount();j++) {
            TResult.getColumnModel().getColumn(j).setCellRenderer(RowFormat);
        }
        
        CellAlign=new EITLTableCellRenderer();
        CellAlign.setHorizontalAlignment(JLabel.RIGHT);
        
        TResult.getColumnModel().getColumn(3).setCellRenderer(CellAlign);
        TResult.getColumnModel().getColumn(4).setCellRenderer(CellAlign);
        
        
    }
    
    private void getAccountBalanceS() {
        new Thread() {
            public void run() {
                try {
                    double Amount=0.0 ;
                    int DrCount = 0;
                    int CrCount = 0;
                    int Counter=0;
                    double DrTotal=0;
                    double CrTotal=0;
                    double NetBal=0;
                    double FromAmt = 0;
                    double ToAmt = 0;
                    
                    
                    if(chkAmount.isSelected()) {
                        if(txtFromAmt.getText().trim().equals("") || txtToAmt.getText().trim().equals("")) {
                            JOptionPane.showMessageDialog(null,"Please enter From and To amount.");
                            
                            return;
                        }
                        FromAmt = Double.parseDouble(txtFromAmt.getText().trim());
                        ToAmt = Double.parseDouble(txtToAmt.getText().trim());
                        if(FromAmt>ToAmt)  {
                            JOptionPane.showMessageDialog(null,"From Amount must be less then to amount");
                            return;
                        }
                        
                        if(ToAmt<FromAmt)  {
                            JOptionPane.showMessageDialog(null,"To Amount must be grater then From amount");
                            return;
                        }
                    }
                    
                    HashMap Credit= new HashMap();
                    HashMap Debit = new HashMap();
                    
                    //System.out.println("Start");
                    int Count=data.getIntValueFromDB("SELECT COUNT(*) AS ACCOUNT_COUNT  FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = '"+txtMainCode.getText().trim()+"' ORDER BY MAIN_ACCOUNT_CODE, PARTY_CODE",FinanceGlobal.FinURL);
                    Bar.setVisible(true);
                    lblStatus.setVisible(true);
                    Bar.setMaximum(Count);
                    Bar.setMinimum(0);
                    Bar.setValue(0);
                    ResultSet rsAccount =data.getResult("SELECT COMPANY_ID,MAIN_ACCOUNT_CODE,PARTY_CODE AS SUB_ACCOUNT_CODE,CONCAT_WS(', ',PARTY_NAME,CITY) AS ACCOUNT_NAME,ADDRESS FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = '"+txtMainCode.getText().trim()+"' AND PARTY_CODE<>0 ORDER BY MAIN_ACCOUNT_CODE, PARTY_CODE",FinanceGlobal.FinURL);
                    rsAccount.first();
                    while(!rsAccount.isAfterLast()) {
                        Counter++;
                        Bar.setValue(Counter);
                        lblStatus.setText("Processing Record "+Counter);
                        
                        //Amount = (new clsAccount()).getAvailableOpeningBalance(rsAccount.getString("MAIN_ACCOUNT_CODE"),rsAccount.getString("SUB_ACCOUNT_CODE"),EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()));
                        
                        if(chkApproved.isSelected()) {
                            Amount = (new clsAccount()).getClosingBalance(rsAccount.getString("MAIN_ACCOUNT_CODE"),rsAccount.getString("SUB_ACCOUNT_CODE"),EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()),true);
                        } else {
                            Amount = (new clsAccount()).getAvailableClosingBalance(rsAccount.getString("MAIN_ACCOUNT_CODE"),rsAccount.getString("SUB_ACCOUNT_CODE"),EITLERPGLOBAL.formatDateDB(txtAsOnDate.getText().trim()));
                        }
                        // System.out.println("Main Code : "+rsAccount.getString("MAIN_ACCOUNT_CODE")+ " : " + "Amount is : ===>> "+Amount);
                        clsTrialBalance ObjTrial = new clsTrialBalance();
                        ObjTrial.setAttribute("COMPANY_ID",rsAccount.getString("COMPANY_ID")) ;
                        ObjTrial.setAttribute("MAIN_ACCOUNT_CODE",rsAccount.getString("MAIN_ACCOUNT_CODE")) ;
                        ObjTrial.setAttribute("SUB_ACCOUNT_CODE",rsAccount.getString("SUB_ACCOUNT_CODE")) ;
                        ObjTrial.setAttribute("ACCOUNT_NAME",rsAccount.getString("ACCOUNT_NAME")) ;
                        if(chkPartyAdd.isSelected()) {
                            ObjTrial.setAttribute("ADDRESS",rsAccount.getString("ADDRESS")) ;
                        } else {
                            ObjTrial.setAttribute("ADDRESS","") ;
                        }
                        
                        if(chkAmount.isSelected()) {
                            FromAmt = Double.parseDouble(txtFromAmt.getText().trim());
                            ToAmt = Double.parseDouble(txtToAmt.getText().trim());
                            if(Math.abs(Amount) >= FromAmt && Math.abs(Amount) <= ToAmt) {
                                // do nothing
                            } else {
                                rsAccount.next();
                                continue;
                            }
                        }
                        
                        if(Amount > 0) {
                            DrTotal+=Amount;
                            ObjTrial.setAttribute("DEBIT",dFormat.format(Amount)) ;
                            rsAccount.next();
                            Debit.put(Integer.toString(DrCount), ObjTrial);
                            DrCount++;
                        }
                        else if(Amount < 0){
                            //System.out.println(" "+Amount);
                            CrTotal+=Math.abs(Amount);
                            ObjTrial.setAttribute("CREDIT",dFormat.format(Math.abs(Amount))) ;
                            rsAccount.next();
                            Debit.put(Integer.toString(DrCount), ObjTrial);
                            DrCount++;
                        }
                        else {
                            //                            ObjTrial.setAttribute("CREDIT","");
                            //                            ObjTrial.setAttribute("DEBIT","");
                            //                            Deer.toString(DrCount), ObjTrial);
                            //                            DrCount++;
                            rsAccount.next();
                        }
                        
                        
                    }
                    
                    lblDebitTotal.setText(dFormat.format(DrTotal));
                    lblCreditTotal.setText(dFormat.format(CrTotal));
                    
                    NetBal=DrTotal-CrTotal;
                    if(NetBal < 0){
                        lblNetBal.setText(dFormat.format(Math.abs(NetBal)) + " Cr");
                    }else if(NetBal == 0) {
                        lblNetBal.setText(dFormat.format(Math.abs(NetBal)) + " Dr");
                    }else if(NetBal > 0){
                        lblNetBal.setText(dFormat.format(NetBal)+ " Dr");
                    } 
                    
                    //System.out.println("Credit is : " + CrTotal);
                    // System.out.println("Dedit is : " + DrTotal);
                    
                    FormatGridS();
                    GenerateGridS(Debit);
                    ProcessCompleted=true;
                    lblStatus.setText("Completed...");
                    //DrTotal=0.0;
                    // CrTotal=0.0;
                    //Debit.clear();
                    //Credit.clear();
                }
                catch(Exception e) {
                    ProcessCompleted=true;
                    e.printStackTrace();
                }
                
                MainPanel.setSelectedIndex(1);
                Bar.setVisible(false);
                lblStatus.setVisible(false);
                
            };
        }.start();
    }
    
    private void GenerateGridS(HashMap List) {
        
        DrTotal=0.0;
        CrTotal=0.0;
        
        objData = new TReportWriter.SimpleDataProvider.TTable();
        for(int i=0;i<=List.size()-1;i++) {
            clsTrialBalance ObjBalance =(clsTrialBalance)List.get(Integer.toString(i));
            Object[] rowData = new Object[List.size()];
            
            String SHCode=data.getStringValueFromDB("SELECT SH_CODE FROM D_FIN_PARTY_MASTER WHERE PARTY_CODE='"+ObjBalance.getAttribute("SUB_ACCOUNT_CODE").getString()+"'",FinanceGlobal.FinURL);
            
            TableModelT.addRow(rowData);
            TResult.setValueAt(ObjBalance.getAttribute("MAIN_ACCOUNT_CODE").getString(),i,0);
            TResult.setValueAt(ObjBalance.getAttribute("SUB_ACCOUNT_CODE").getString(),i,1);
            TResult.setValueAt(ObjBalance.getAttribute("ACCOUNT_NAME").getString().trim(),i,2);
            //TResult.setValueAt(ObjBalance.getAttribute("ADDRESS").getString(), i,3);
            TResult.setValueAt(ObjBalance.getAttribute("DEBIT").getString(), i,3);
            TResult.setValueAt(ObjBalance.getAttribute("CREDIT").getString(), i,4);
            TResult.setValueAt(SHCode, i,5);
            if(chkPartyAdd.isSelected()) {
                TResult.setValueAt(ObjBalance.getAttribute("ADDRESS").getString(), i,6);
            }
            
            
            TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
            objRow.setValue("COMPANY_ID",(String)ObjBalance.getAttribute("COMPANY_ID").getObj());
            objRow.setValue("MAIN_CODE",(String)ObjBalance.getAttribute("MAIN_ACCOUNT_CODE").getObj());
            objRow.setValue("SUB_CODE",(String)ObjBalance.getAttribute("SUB_ACCOUNT_CODE").getObj());
            objRow.setValue("AC_NAME",((String)ObjBalance.getAttribute("ACCOUNT_NAME").getObj()).trim());
            /*if(chkPartyAdd.isSelected()) {
                objRow.setValue("ADDRESS",((String)ObjBalance.getAttribute("ADDRESS").getObj()).trim());
            } else {
                objRow.setValue("ADDRESS","");
            }*/
            objRow.setValue("DEBIT",ObjBalance.getAttribute("DEBIT").getString());
            objRow.setValue("CREDIT",ObjBalance.getAttribute("CREDIT").getString());
            String dr="",cr="";
            dr = ObjBalance.getAttribute("DEBIT").getString();
            cr = ObjBalance.getAttribute("CREDIT").getString();
            
            if (dr.trim().equals("")) {
                DrTotal = DrTotal;
            }
            else {
                
                DrTotal = DrTotal + EITLERPGLOBAL.round(Double.parseDouble(ObjBalance.getAttribute("DEBIT").getString()), 2) ;
            }
            if (cr.trim().equals("")) {
                CrTotal = CrTotal;
            }
            else {
                
                CrTotal = CrTotal +  EITLERPGLOBAL.round(Double.parseDouble(ObjBalance.getAttribute("CREDIT").getString()),2);
            }
            if (SHCode.trim().equals("000000")) {
                SHCode="";
            }
            objRow.setValue("SH_CODE",SHCode);
            //System.out.println("Credit is in Grid : " + CrTotal);
            //System.out.println("Dedit is in Grid  : " + DrTotal);
            objData.AddRow(objRow);
            
            
        }
        //List.clear();
        
    }
    
    
    
    private void searchWithin(char recentKey) {
        
        try {
            
            RowFormat.removeBackColors();
            CellAlign.removeBackColors();
            
            TResult.repaint();
            
            String searchString=txtSearch.getText();
            
            if(!searchString.trim().equals("")) {
                
                
                if(recentKey!=' ') {
                    searchString=searchString+recentKey;
                }
                
                searchString=searchString.toLowerCase();
                
                int currentCol=TResult.getSelectedColumn();
                
                for(int i=0;i<=TResult.getRowCount()-1;i++) {
                    
                    if(TResult.getValueAt(i,currentCol).toString().toLowerCase().indexOf(searchString)!=-1) {
                        
                        TResult.changeSelection(i, currentCol, false,false);
                        RowFormat.setBackColor(i, currentCol, Color.YELLOW);
                       /* for(int j=0;j<TableModelT.getColumnCount();j++) {
                            RowFormat.setBackColor(i, j, Color.YELLOW);
                        }*/
                        
                    }
                }
                TResult.repaint();
            }
        }
        catch(Exception e) {
            
        }
        
    }
    
    private void GenerateNominal() {
        try {
            
            HashMap Parameters=new HashMap();
            Parameters.put("ON_DATE",txtAsOnDate.getText());
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptNominalLedger.rpt",Parameters,objData);           
            //objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptNominalLedger.rpt",Parameters,objData);
            //objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptSchedNominalLedger.rpt",Parameters,objData);
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    private void GenerateNominalDetail() {
        try {
            
            HashMap Parameters=new HashMap();
            Parameters.put("ON_DATE",txtAsOnDate.getText());
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptNominalLedgerDetailed.rpt",Parameters,objData);           
            //objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptNominalLedger.rpt",Parameters,objData);
            //objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptSchedNominalLedger.rpt",Parameters,objData);
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    private void GenerateSubsidary() {
        try {
            
            HashMap Parameters=new HashMap();
            Parameters.put("ON_DATE",txtAsOnDate.getText());
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            String AccName = data.getStringValueFromDB("SELECT ACCOUNT_NAME FROM D_FIN_GL WHERE MAIN_ACCOUNT_CODE='"+txtMainCode.getText().trim()+"' ",FinanceGlobal.FinURL);
            Parameters.put("MAIN_CODE",txtMainCode.getText().trim() + " - " + AccName);
            
            
            // System.out.println("Credit is in : " + CrTotal);
            // System.out.println("Dedit is in  : " + DrTotal);
            
            double Diff_cr = CrTotal - DrTotal;
            double Diff_dr = DrTotal - CrTotal;
            if (Diff_cr < 0) {
                Diff_cr = 0;
            }
            if (Diff_dr < 0) {
                Diff_dr = 0;
            }
            
            // System.out.println("Credit Diff issssss : " + Diff_cr);
            // System.out.println("Dedit Diff  isssssss : " + Diff_dr);
            
            // System.out.println("===================================================");
            Parameters.put("DIFF_CR",Double.toString(Diff_cr));
            Parameters.put("DIFF_DR",Double.toString(Diff_dr));
            
            double CrTotal = 0;
            double DrTotal = 0;
            if(chkPartyAdd.isSelected()) {
                objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptSubsidaryLedgerWithAdd.rpt",Parameters,objData);
            }
            else {
                objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptSubsidaryLedger.rpt",Parameters,objData);
            }
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar Bar;
    private javax.swing.JTable CrOsTable;
    private javax.swing.JFileChooser ExporttoExcelFileChooser;
    private javax.swing.JTextField FromDateText;
    private javax.swing.JLabel MainCodeLabel;
    private javax.swing.JProgressBar MainCodeProgressBar;
    private javax.swing.JTabbedPane MainPanel;
    private javax.swing.JProgressBar MaincodeProgressBar;
    private javax.swing.JProgressBar ProgressBar;
    private javax.swing.JTable PurchaseTable;
    private javax.swing.JTable SalesTable;
    private javax.swing.JTable TDescResult;
    private javax.swing.JTable TResult;
    private javax.swing.JTable TScheduleWise;
    private javax.swing.JTextField ToDateText;
    private javax.swing.JButton btnEnter;
    private javax.swing.JButton btnMisreport;
    private javax.swing.JCheckBox chkAmount;
    private javax.swing.JCheckBox chkApproved;
    private javax.swing.JCheckBox chkInclude;
    private javax.swing.JCheckBox chkPartyAdd;
    private javax.swing.JComboBox cmbType;
    private javax.swing.JButton cmdExporttoExcel;
    private javax.swing.JButton cmdGenerateReport;
    private javax.swing.JButton cmdSearch;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblCreditTotal;
    private javax.swing.JLabel lblDebitTotal;
    private javax.swing.JLabel lblDescCreditTotal;
    private javax.swing.JLabel lblDescDebitTotal;
    private javax.swing.JLabel lblDescNetBal;
    private javax.swing.JLabel lblNetBal;
    private javax.swing.JLabel lblNetBalance;
    private javax.swing.JLabel lblProgressbarStatus;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblmaincodestatus;
    private javax.swing.JMenuItem mnuScheduleTrialBalance;
    private javax.swing.JPopupMenu mnuSelectReport;
    private javax.swing.JMenuItem mnuTrialBalance;
    private javax.swing.JTextField txtAsOnDate;
    private javax.swing.JTextField txtFromAmt;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtMainCode;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtToAmt;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables
    
}

