/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */
package EITLERP.Finance;

/**
 *
 * @author nitin
 */
/*<APPLET CODE=frmInward.class HEIGHT=500 WIDTH=665></APPLET>*/
import javax.swing.*;
import java.awt.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import javax.swing.text.*;
import EITLERP.Utils.*;
import java.sql.*;
import java.net.*;
import EITLERP.*;
import EITLERP.Purchase.*;
import EITLERP.Stores.*;
import EITLERP.Finance.*;
import EITLERP.Finance.ReportsUI.*;
import TReportWriter.*;

public class frmDrAdjustment extends javax.swing.JApplet {

    private int EditMode = 0;
    private clsDrAdjustment objDrAdjustment;
    private TReportEngine objEngine = new TReportEngine();
    private TReportWriter.SimpleDataProvider.TTable objData = new TReportWriter.SimpleDataProvider.TTable();

    private boolean Updating = false;

    private String theDocNo = "";

    private EITLTableModel DataModel;
    private EITLTableModel DataModelA;
    private EITLTableModel DataModelHS;

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;

    private int SelHierarchyID = 0;
    private int lnFromID = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;
    private String originalInvoiceNo = "";
    private String originalInvoiceDate = "";

    private boolean IsGenerating = false;

    public frmPendingApprovals frmPA;
    public int SelectionType = 0;

    /**
     * Creates new form frmTemplate
     */
    public frmDrAdjustment() {

        setSize(670, 550);
        initComponents();

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        GenerateCombos();
        FormatGrid();
        FormatGridA();
        FormatGridHS();
        objDrAdjustment = new clsDrAdjustment();

        SetMenuForRights();

        if (getName().equals("Link")) {

        } else {
            if (objDrAdjustment.LoadData(EITLERPGLOBAL.gCompanyID)) {
                objDrAdjustment.MoveLast();
                DisplayData();
                SetMenuForRights();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while loading data. Error is " + objDrAdjustment.LastError);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        mnuInfo = new javax.swing.JPopupMenu();
        mnuShowSJVoucher = new javax.swing.JMenuItem();
        mnuShowReceiptVoucher = new javax.swing.JMenuItem();
        mnuSelectType = new javax.swing.JPopupMenu();
        mnuDebitToCredit = new javax.swing.JMenuItem();
        mnuCreditToDebit = new javax.swing.JMenuItem();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Header = new javax.swing.JTabbedPane();
        Panel1 = new javax.swing.JPanel();
        txtDocDate = new javax.swing.JTextField();
        lblSubCode = new javax.swing.JLabel();
        lblAccountID = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        lblAccountName1 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdRemove = new javax.swing.JButton();
        cmdInfo = new javax.swing.JButton();
        cmdAdd = new javax.swing.JButton();
        cmdRemarksBig = new javax.swing.JButton();
        cmdReserveAmount = new javax.swing.JButton();
        lblPAN = new javax.swing.JLabel();
        txtPAN = new javax.swing.JTextField();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack2 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        mnuShowSJVoucher.setActionCommand("Show SJ Voucher");
        mnuShowSJVoucher.setLabel("Show SJ Voucher");
        mnuShowSJVoucher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShowSJVoucherActionPerformed(evt);
            }
        });
        mnuInfo.add(mnuShowSJVoucher);

        mnuShowReceiptVoucher.setLabel("Show Receipt Voucher");
        mnuShowReceiptVoucher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShowReceiptVoucherActionPerformed(evt);
            }
        });
        mnuInfo.add(mnuShowReceiptVoucher);

        mnuDebitToCredit.setText("Select Debit to Credit");
        mnuDebitToCredit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuDebitToCreditActionPerformed(evt);
            }
        });
        mnuSelectType.add(mnuDebitToCredit);

        mnuCreditToDebit.setText("Select Credit To Debit");
        mnuCreditToDebit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCreditToDebitActionPerformed(evt);
            }
        });
        mnuSelectType.add(mnuCreditToDebit);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText(" ADVANCE RECEIPT ADJUSTMENT (DEBTORS)");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 666, 25);

        Panel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Panel1MouseClicked(evt);
            }
        });
        Panel1.setLayout(null);

        txtDocDate.setName("PARTY_CODE"); // NOI18N
        txtDocDate.setNextFocusableComponent(txtRemarks);
        txtDocDate.setEnabled(false);
        Panel1.add(txtDocDate);
        txtDocDate.setBounds(350, 15, 120, 19);

        lblSubCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode.setText("Doc Date :");
        Panel1.add(lblSubCode);
        lblSubCode.setBounds(260, 18, 80, 15);

        lblAccountID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountID.setText("Doc No. :");
        Panel1.add(lblAccountID);
        lblAccountID.setBounds(10, 18, 60, 15);

        txtDocNo.setName("PARTY_ID"); // NOI18N
        txtDocNo.setEnabled(false);
        Panel1.add(txtDocNo);
        txtDocNo.setBounds(75, 15, 120, 19);

        lblAccountName1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountName1.setText("Remarks :");
        Panel1.add(lblAccountName1);
        lblAccountName1.setBounds(10, 267, 65, 15);

        txtRemarks.setName("DESCRIPTION"); // NOI18N
        txtRemarks.setEnabled(false);
        Panel1.add(txtRemarks);
        txtRemarks.setBounds(80, 266, 520, 19);

        jLabel1.setText("Adjustment Information :");
        Panel1.add(jLabel1);
        jLabel1.setBounds(14, 64, 160, 15);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        Panel1.add(jScrollPane1);
        jScrollPane1.setBounds(12, 83, 620, 140);

        cmdRemove.setMnemonic('A');
        cmdRemove.setText("Remove");
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        Panel1.add(cmdRemove);
        cmdRemove.setBounds(531, 229, 100, 25);

        cmdInfo.setMnemonic('A');
        cmdInfo.setText("Info.");
        cmdInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdInfoActionPerformed(evt);
            }
        });
        Panel1.add(cmdInfo);
        cmdInfo.setBounds(339, 229, 90, 25);

        cmdAdd.setText("Add");
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        Panel1.add(cmdAdd);
        cmdAdd.setBounds(436, 229, 88, 25);

        cmdRemarksBig.setText("...");
        Panel1.add(cmdRemarksBig);
        cmdRemarksBig.setBounds(605, 265, 33, 21);

        cmdReserveAmount.setText("Reserve Amount");
        cmdReserveAmount.setEnabled(false);
        cmdReserveAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdReserveAmountActionPerformed(evt);
            }
        });
        Panel1.add(cmdReserveAmount);
        cmdReserveAmount.setBounds(10, 230, 180, 25);

        lblPAN.setText("Threshold Receipt (As on Date PAN Base) : ");
        Panel1.add(lblPAN);
        lblPAN.setBounds(20, 310, 320, 15);

        txtPAN.setEditable(false);
        txtPAN.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        Panel1.add(txtPAN);
        txtPAN.setBounds(330, 309, 160, 20);

        Header.addTab("Header Information", Panel1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.setLayout(null);

        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Hierarchy :");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 18, 90, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(105, 14, 184, 24);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("From :");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 52, 90, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(105, 50, 182, 19);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel35.setText("Remarks :");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 80, 90, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(105, 78, 468, 19);

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Your Action :");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 120, 90, 15);

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel7.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel7.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel7.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel7.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        jPanel7.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel7);
        jPanel7.setBounds(105, 120, 182, 100);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Send To :");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 232, 90, 15);

        cmbSendTo.setEnabled(false);
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(105, 228, 184, 24);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Remarks :");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 262, 90, 15);

        txtToRemarks.setEnabled(false);
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(105, 260, 516, 19);

        cmdBack2.setText("<< Back");
        Tab2.add(cmdBack2);
        cmdBack2.setBounds(533, 326, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(580, 77, 33, 21);

        Header.addTab("Approval", Tab2);

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel6.setLayout(null);

        jLabel26.setText("Document Approval Status :");
        jPanel6.add(jLabel26);
        jLabel26.setBounds(12, 10, 180, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel6.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 614, 144);

        lblDocumentHistory.setText("Document Update History :");
        jPanel6.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 191, 180, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel6.add(jScrollPane3);
        jScrollPane3.setBounds(13, 207, 473, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        jPanel6.add(cmdViewHistory);
        cmdViewHistory.setBounds(498, 242, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        jPanel6.add(cmdNormalView);
        cmdNormalView.setBounds(498, 273, 132, 24);

        cmdPreviewA.setText("Preview Report");
        jPanel6.add(cmdPreviewA);
        cmdPreviewA.setBounds(498, 209, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel6.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(498, 305, 132, 24);

        txtAuditRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtAuditRemarks.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txtAuditRemarks.setEnabled(false);
        jPanel6.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(499, 333, 129, 17);

        Header.addTab("Status", jPanel6);

        getContentPane().add(Header);
        Header.setBounds(2, 66, 654, 390);
        Header.getAccessibleContext().setAccessibleName("Account Details");
        Header.getAccessibleContext().setAccessibleDescription("Account Details");

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(1, 271, 650, 22);
    }// </editor-fold>//GEN-END:initComponents

    private void mnuCreditToDebitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCreditToDebitActionPerformed
        // TODO add your handling code here:
        try {
            frmSelectionCrToDrAdj objSelect = new frmSelectionCrToDrAdj();
            objSelect.DocDate = EITLERPGLOBAL.formatDateDB(txtDocDate.getText().trim());
            objSelect.DocNo = txtDocNo.getText().trim();
            objSelect.ShowDialog();
            if (!objSelect.Cancelled) {
                FormatGrid();
                SelectionType = 2;
                for (int i = 0; i < objSelect.objSelectedVoucher.size(); i++) {
                    clsDrAdjustmentItem ObjItem = (clsDrAdjustmentItem) objSelect.objSelectedVoucher.get(Integer.toString(i + 1));

                    Object[] rowData = new Object[1];
                    DataModel.addRow(rowData);
                    int NewIndex = Table.getRowCount() - 1;
                    DataModel.setValueByVariable("SR_NO", Integer.toString(NewIndex + 1), NewIndex);
                    DataModel.setValueByVariable("VOUCHER_NO", ObjItem.getAttribute("VOUCHER_NO").getString(), NewIndex);
                    DataModel.setValueByVariable("VOUCHER_SR_NO", Integer.toString(ObjItem.getAttribute("VOUCHER_SR_NO").getInt()), NewIndex);
                    DataModel.setValueByVariable("VOUCHER_DATE", ObjItem.getAttribute("VOUCHER_DATE").getString(), NewIndex);
                    DataModel.setValueByVariable("MAIN_ACCOUNT_CODE", ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString(), NewIndex);
                    DataModel.setValueByVariable("SUB_ACCOUNT_CODE", ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString(), NewIndex);
                    DataModel.setValueByVariable("ACCOUNT_NAME", clsAccount.getAccountName(ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString(), ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString()), NewIndex);
                    DataModel.setValueByVariable("RECEIPT_AMOUNT", Double.toString(ObjItem.getAttribute("RECEIPT_AMOUNT").getDouble()), NewIndex);
                    DataModel.setValueByVariable("SJ_NO", ObjItem.getAttribute("SJ_NO").getString(), NewIndex);
                    DataModel.setValueByVariable("SJ_DATE", ObjItem.getAttribute("SJ_DATE").getString(), NewIndex);
                    DataModel.setValueByVariable("AGENT_SR", ObjItem.getAttribute("AGENT_SR").getString(), NewIndex);
                    DataModel.setValueByVariable("ADJ_AMOUNT", Double.toString(ObjItem.getAttribute("ADJ_AMOUNT").getDouble()), NewIndex);
                    DataModel.setValueByVariable("REF_DOC_NO", ObjItem.getAttribute("REF_DOC_NO").getString(), NewIndex);
                    DataModel.setValueByVariable("REF_DOC_DATE", ObjItem.getAttribute("REF_DOC_NO").getString(), NewIndex);
                    DataModel.setValueByVariable("INVOICE_NO", ObjItem.getAttribute("INVOICE_NO").getString(), NewIndex);
                    DataModel.setValueByVariable("INVOICE_DATE", ObjItem.getAttribute("INVOICE_DATE").getString(), NewIndex);
                    DataModel.setValueByVariable("MODULE_ID", Integer.toString(ObjItem.getAttribute("MODULE_ID").getInt()), NewIndex);
                    DataModel.setValueByVariable("VOUCHER_COMPANY_ID", Integer.toString(ObjItem.getAttribute("VOUCHER_COMPANY_ID").getInt()), NewIndex);
                    DataModel.setValueByVariable("SJ_COMPANY_ID", Integer.toString(ObjItem.getAttribute("SJ_COMPANY_ID").getInt()), NewIndex);
                    DataModel.setValueByVariable("SELECTION_TYPE", Integer.toString(SelectionType), NewIndex);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_mnuCreditToDebitActionPerformed

    private void mnuDebitToCreditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuDebitToCreditActionPerformed
        // TODO add your handling code here:
        try {
            frmSelectionDrToCrAdj objSelect = new frmSelectionDrToCrAdj();
            objSelect.DocDate = EITLERPGLOBAL.formatDateDB(txtDocDate.getText().trim());
            objSelect.DocNo = txtDocNo.getText().trim();
            objSelect.ShowDialog();

            if (!objSelect.Cancelled) {
                FormatGrid();
                SelectionType = 1;
                for (int i = 0; i < objSelect.objSelectedVoucher.size(); i++) {

                    clsDrAdjustmentItem ObjItem = (clsDrAdjustmentItem) objSelect.objSelectedVoucher.get(Integer.toString(i + 1));

                    Object[] rowData = new Object[1];
                    DataModel.addRow(rowData);
                    int NewIndex = Table.getRowCount() - 1;
                    DataModel.setValueByVariable("SR_NO", Integer.toString(NewIndex + 1), NewIndex);
                    DataModel.setValueByVariable("VOUCHER_NO", ObjItem.getAttribute("VOUCHER_NO").getString(), NewIndex);
                    DataModel.setValueByVariable("VOUCHER_SR_NO", Integer.toString(ObjItem.getAttribute("VOUCHER_SR_NO").getInt()), NewIndex);
                    DataModel.setValueByVariable("VOUCHER_DATE", ObjItem.getAttribute("VOUCHER_DATE").getString(), NewIndex);
                    DataModel.setValueByVariable("MAIN_ACCOUNT_CODE", ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString(), NewIndex);
                    DataModel.setValueByVariable("SUB_ACCOUNT_CODE", ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString(), NewIndex);
                    DataModel.setValueByVariable("ACCOUNT_NAME", clsAccount.getAccountName(ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString(), ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString()), NewIndex);
                    DataModel.setValueByVariable("RECEIPT_AMOUNT", Double.toString(ObjItem.getAttribute("RECEIPT_AMOUNT").getDouble()), NewIndex);
                    DataModel.setValueByVariable("SJ_NO", ObjItem.getAttribute("SJ_NO").getString(), NewIndex);
                    DataModel.setValueByVariable("SJ_DATE", ObjItem.getAttribute("SJ_DATE").getString(), NewIndex);
                    DataModel.setValueByVariable("AGENT_SR", ObjItem.getAttribute("AGENT_SR").getString(), NewIndex);
                    DataModel.setValueByVariable("ADJ_AMOUNT", Double.toString(ObjItem.getAttribute("ADJ_AMOUNT").getDouble()), NewIndex);
                    DataModel.setValueByVariable("REF_DOC_NO", ObjItem.getAttribute("REF_DOC_NO").getString(), NewIndex);
                    DataModel.setValueByVariable("REF_DOC_DATE", ObjItem.getAttribute("REF_DOC_NO").getString(), NewIndex);
                    DataModel.setValueByVariable("INVOICE_NO", ObjItem.getAttribute("INVOICE_NO").getString(), NewIndex);
                    DataModel.setValueByVariable("INVOICE_DATE", ObjItem.getAttribute("INVOICE_DATE").getString(), NewIndex);
                    DataModel.setValueByVariable("MODULE_ID", Integer.toString(ObjItem.getAttribute("MODULE_ID").getInt()), NewIndex);
                    DataModel.setValueByVariable("VOUCHER_COMPANY_ID", Integer.toString(ObjItem.getAttribute("VOUCHER_COMPANY_ID").getInt()), NewIndex);
                    DataModel.setValueByVariable("SJ_COMPANY_ID", Integer.toString(ObjItem.getAttribute("SJ_COMPANY_ID").getInt()), NewIndex);
                    DataModel.setValueByVariable("SELECTION_TYPE", Integer.toString(SelectionType), NewIndex);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_mnuDebitToCreditActionPerformed

    private void cmdReserveAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdReserveAmountActionPerformed
        // TODO add your handling code here:
        try {
            frmSelectionAdvReceipt objSelect = new frmSelectionAdvReceipt();
            objSelect.DummyAdjustment = true;
            objSelect.ShowDialog();
            FormatGrid();
            if (!objSelect.Cancelled) {
                for (int r = 1; r <= objSelect.SelectedItems.size(); r++) {
                    DataModel.ResetReadOnly(4);
                    SelectionType = 3;
                    clsVoucher ObjItem = (clsVoucher) objSelect.SelectedItems.get(Integer.toString(r));
                    Object[] rowData = new Object[1];
                    DataModel.addRow(rowData);
                    int NewIndex = Table.getRowCount() - 1;

                    DataModel.setValueByVariable("SR_NO", Integer.toString(NewIndex + 1), NewIndex);
                    DataModel.setValueByVariable("VOUCHER_NO", ObjItem.getAttribute("VOUCHER_NO").getString(), NewIndex);
                    DataModel.setValueByVariable("VOUCHER_SR_NO", Integer.toString(ObjItem.getAttribute("VOUCHER_SR_NO").getInt()), NewIndex);
                    DataModel.setValueByVariable("VOUCHER_DATE", ObjItem.getAttribute("VOUCHER_DATE").getString(), NewIndex);
                    DataModel.setValueByVariable("MAIN_ACCOUNT_CODE", ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString(), NewIndex);
                    DataModel.setValueByVariable("SUB_ACCOUNT_CODE", ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString(), NewIndex);
                    DataModel.setValueByVariable("ACCOUNT_NAME", clsAccount.getAccountName(ObjItem.getAttribute("MAIN_ACCOUNT_CODE").getString(), ObjItem.getAttribute("SUB_ACCOUNT_CODE").getString()), NewIndex);
                    DataModel.setValueByVariable("RECEIPT_AMOUNT", Double.toString(ObjItem.getAttribute("AMOUNT").getDouble()), NewIndex);
                    DataModel.setValueByVariable("AGENT_SR", "", NewIndex);
                    DataModel.setValueByVariable("SJ_NO", "", NewIndex);
                    DataModel.setValueByVariable("SJ_DATE", "0000-00-00", NewIndex);
                    DataModel.setValueByVariable("ADJ_AMOUNT", Double.toString(ObjItem.getAttribute("AMOUNT").getDouble()), NewIndex);
                    DataModel.setValueByVariable("REF_DOC_NO", "", NewIndex);
                    DataModel.setValueByVariable("REF_DOC_DATE", "0000-00-00", NewIndex);
                    DataModel.setValueByVariable("INVOICE_NO", "", NewIndex);
                    DataModel.setValueByVariable("INVOICE_DATE", EITLERPGLOBAL.getCurrentDate(), NewIndex);
                    DataModel.setValueByVariable("MODULE_ID", "0", NewIndex);
                    DataModel.setValueByVariable("VOUCHER_COMPANY_ID", Integer.toString(ObjItem.getAttribute("COMPANY_ID").getInt()), NewIndex);
                    DataModel.setValueByVariable("SJ_COMPANY_ID", "0", NewIndex);
                    DataModel.setValueByVariable("SELECTION_TYPE", Integer.toString(SelectionType), NewIndex);
                }
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_cmdReserveAmountActionPerformed

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            if (Table.getSelectedColumn() == DataModel.getColFromVariable("INVOICE_NO")) {
                String strSQL = "SELECT PARA_CODE AS P_CODE,D_COM_PARAMETER_MAST.DESC AS P_DESC FROM D_COM_PARAMETER_MAST WHERE PARA_ID='SALES' AND COMPANY_ID=" + EITLERPGLOBAL.gCompanyID;
                LOV aList = new LOV();

                String InvoiceNo = "";
                String InvoiceDate = "";
                int MaxNo = 0;

                aList.SQL = strSQL;
                aList.ReturnCol = 2;
                aList.SecondCol = 1;
                aList.ShowReturnCol = false;
                aList.DefaultSearchOn = 2;

                if (aList.ShowLOV()) {
                    if (Integer.parseInt(aList.SecondVal) == 1) {
                        InvoiceNo = "DUMS";
                    } else if (Integer.parseInt(aList.SecondVal) == 2) {
                        InvoiceNo = "DUMF";
                    } else if (Integer.parseInt(aList.SecondVal) == 3) {
                        InvoiceNo = "DUMB";
                    }
                    strSQL = "SELECT MAX(SUBSTRING(INVOICE_NO,LENGTH('" + InvoiceNo + "')+1)) AS MAX_NO FROM D_FIN_VOUCHER_DETAIL "
                            + "WHERE INVOICE_NO LIKE '" + InvoiceNo + "%'";
                    MaxNo = UtilFunctions.CInt(data.getStringValueFromDB(strSQL, FinanceGlobal.FinURL)) + 1;
                    String strMaxNo = Integer.toString(MaxNo);
                    strMaxNo = EITLERPGLOBAL.padLeftEx(strMaxNo, "0", 4);
                    InvoiceNo = InvoiceNo + strMaxNo;
                }
                DataModel.setValueByVariable("INVOICE_NO", InvoiceNo, Table.getSelectedRow());
                DataModel.setValueByVariable("INVOICE_DATE", EITLERPGLOBAL.getCurrentDate(), Table.getSelectedRow());
            }
        }
    }//GEN-LAST:event_TableKeyPressed

    private void mnuShowReceiptVoucherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShowReceiptVoucherActionPerformed
        // TODO add your handling code here:
        try {
            if (Table.getSelectedRow() >= 0) {
                String DocNo = DataModel.getValueByVariable("VOUCHER_NO", Table.getSelectedRow());
                clsVoucher.OpenVoucher(DocNo, null);
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_mnuShowReceiptVoucherActionPerformed

    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        mnuSelectType.show(Panel1, cmdAdd.getX(), cmdAdd.getY() + cmdAdd.getHeight());
    }//GEN-LAST:event_cmdAddActionPerformed

    private void mnuShowSJVoucherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShowSJVoucherActionPerformed
        // TODO add your handling code here:
        try {
            if (Table.getSelectedRow() >= 0) {
                String DocNo = DataModel.getValueByVariable("SJ_NO", Table.getSelectedRow());
                clsVoucher.OpenVoucher(DocNo, null);
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_mnuShowSJVoucherActionPerformed

    private void cmdInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInfoActionPerformed
        // TODO add your handling code here:
        mnuInfo.show(Panel1, cmdInfo.getX(), cmdInfo.getY() + cmdInfo.getHeight());
    }//GEN-LAST:event_cmdInfoActionPerformed

    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if (Table.getRowCount() > 0) {
            DataModel.removeRow(Table.getSelectedRow());
        }

    }//GEN-LAST:event_cmdRemoveActionPerformed

    private void Panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Panel1MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_Panel1MouseClicked

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        //objDrAdjustment.AdjustAllReceiptAmounts();
        if (TableHS.getRowCount() > 0 && TableHS.getSelectedRow() >= 0) {
            txtAuditRemarks.setText((String) TableHS.getValueAt(TableHS.getSelectedRow(), 4));
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText = txtAuditRemarks;
            bigEdit.ShowEdit();
        }

    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        objDrAdjustment.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        objDrAdjustment.ShowHistory(EITLERPGLOBAL.gCompanyID, objDrAdjustment.getAttribute("DOC_NO").getString());
        MoveFirst();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);

    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }

    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();

        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if (ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID, clsDrAdjustment.ModuleID, objDrAdjustment.getAttribute("DOC_NO").getString(), FinanceGlobal.FinURL)) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateFromCombo();
        }

    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();

    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {

            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        objDrAdjustment.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        GenerateReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this record ?", "SDML ERP", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Header;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel Panel1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdInfo;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemarksBig;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdReserveAmount;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAccountID;
    private javax.swing.JLabel lblAccountName1;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblPAN;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblSubCode;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JMenuItem mnuCreditToDebit;
    private javax.swing.JMenuItem mnuDebitToCredit;
    private javax.swing.JPopupMenu mnuInfo;
    private javax.swing.JPopupMenu mnuSelectType;
    private javax.swing.JMenuItem mnuShowReceiptVoucher;
    private javax.swing.JMenuItem mnuShowSJVoucher;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtPAN;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables

    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }

    private void SetFields(boolean pStat) {

        txtDocDate.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);

        cmdRemove.setEnabled(pStat);
        cmdAdd.setEnabled(pStat);

        cmdReserveAmount.setEnabled(pStat);

        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        DataModel.TableReadOnly(!pStat);

        SetupApproval();
    }

    private void ClearFields() {

        txtDocNo.setText("");
        txtDocDate.setText("");
        txtRemarks.setText("");

        FormatGrid();
        FormatGridA();
        FormatGridHS();
    }

    //Didplay data on the Screen
    private void DisplayData() {
        lblPAN.setVisible(false);
        txtPAN.setVisible(false);
        //=========== Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (objDrAdjustment.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                }

                if (objDrAdjustment.getAttribute("APPROVED").getInt() != 1) {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (objDrAdjustment.getAttribute("CANCELLED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }
            }

            //============================================//
            //========= Authority Delegation Check =====================//
            if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
                int ModuleID = clsDrAdjustment.ModuleID;

                if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleID)) {
                    EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
                } else {
                    EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
                }
            }
            //==========================================================//

            ClearFields();

            txtDocNo.setText(objDrAdjustment.getAttribute("DOC_NO").getString());
            txtDocDate.setText(EITLERPGLOBAL.formatDate(objDrAdjustment.getAttribute("DOC_DATE").getString()));
            txtRemarks.setText(objDrAdjustment.getAttribute("REMARKS").getString());

            lblTitle.setText("ADVANCE RECEIPT ADJUSTMENT (DEBTORS) - " + txtDocNo.getText());

            //************ Misc. Display *****************//
            txtToRemarks.setText("");
            SetupApproval();

            EITLERPGLOBAL.setComboIndex(cmbHierarchy, objDrAdjustment.getAttribute("HIERARCHY_ID").getInt());

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();
            String DocNo = objDrAdjustment.getAttribute("DOC_NO").getString();
            List = ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, clsDrAdjustment.ModuleID, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelA.addRow(rowData);
            }
            //============================================================//

            //=========================== Audit Trail ===========================//
            FormatGridHS();

            HashMap History = clsDrAdjustment.getHistoryList(EITLERPGLOBAL.gCompanyID, objDrAdjustment.getAttribute("DOC_NO").getString());
            for (int i = 1; i <= History.size(); i++) {
                clsDrAdjustment ObjHistory = (clsDrAdjustment) History.get(Integer.toString(i));
                Object[] rowData = new Object[5];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = ObjHistory.getAttribute("UPDATED_BY").getString();
                rowData[2] = ObjHistory.getAttribute("ENTRY_DATE").getString();

                String ApprovalStatus = "";

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = (String) ObjHistory.getAttribute("APPROVER_REMARKS").getObj();

                DataModelHS.addRow(rowData);
            }
            //=========================== Audit Trail Over ===========================//

            FormatGrid();
            String tMainCode = "";
            String tSubCode = "";

            for (int i = 1; i <= objDrAdjustment.colItems.size(); i++) {
                clsDrAdjustmentItem objItem = (clsDrAdjustmentItem) objDrAdjustment.colItems.get(Integer.toString(i));

                Object[] rowData = new Object[1];
                DataModel.addRow(rowData);

                int NewRow = Table.getRowCount() - 1;

                DataModel.setValueByVariable("SR_NO", Integer.toString(i), NewRow);
                DataModel.setValueByVariable("VOUCHER_NO", objItem.getAttribute("VOUCHER_NO").getString(), NewRow);
                DataModel.setValueByVariable("VOUCHER_SR_NO", Integer.toString(objItem.getAttribute("VOUCHER_SR_NO").getInt()), NewRow);
                DataModel.setValueByVariable("VOUCHER_DATE", EITLERPGLOBAL.formatDate(objItem.getAttribute("VOUCHER_DATE").getString()), NewRow);
                DataModel.setValueByVariable("MAIN_ACCOUNT_CODE", objItem.getAttribute("MAIN_ACCOUNT_CODE").getString(), NewRow);
                DataModel.setValueByVariable("SUB_ACCOUNT_CODE", objItem.getAttribute("SUB_ACCOUNT_CODE").getString(), NewRow);
                DataModel.setValueByVariable("ACCOUNT_NAME", clsAccount.getAccountName(objItem.getAttribute("MAIN_ACCOUNT_CODE").getString(), objItem.getAttribute("SUB_ACCOUNT_CODE").getString()), NewRow);
                DataModel.setValueByVariable("RECEIPT_AMOUNT", Double.toString(objItem.getAttribute("RECEIPT_AMOUNT").getDouble()), NewRow);
                DataModel.setValueByVariable("SJ_NO", objItem.getAttribute("SJ_NO").getString(), NewRow);
                DataModel.setValueByVariable("SJ_DATE", EITLERPGLOBAL.formatDate(objItem.getAttribute("SJ_DATE").getString()), NewRow);
                DataModel.setValueByVariable("AGENT_SR", objItem.getAttribute("AGENT_SR").getString(), NewRow);
                DataModel.setValueByVariable("ADJ_AMOUNT", Double.toString(objItem.getAttribute("ADJUST_AMOUNT").getDouble()), NewRow);
                DataModel.setValueByVariable("REF_DOC_NO", objItem.getAttribute("REF_DOC_NO").getString(), NewRow);
                DataModel.setValueByVariable("REF_DOC_DATE", EITLERPGLOBAL.formatDate(objItem.getAttribute("REF_DOC_DATE").getString()), NewRow);
                DataModel.setValueByVariable("INVOICE_NO", objItem.getAttribute("INVOICE_NO").getString(), NewRow);
                DataModel.setValueByVariable("INVOICE_DATE", EITLERPGLOBAL.formatDate(objItem.getAttribute("INVOICE_DATE").getString()), NewRow);
                DataModel.setValueByVariable("REMARKS", objItem.getAttribute("REMARKS").getString(), NewRow);
                DataModel.setValueByVariable("MODULE_ID", Integer.toString(objItem.getAttribute("MODULE_ID").getInt()), NewRow);
                DataModel.setValueByVariable("VOUCHER_COMPANY_ID", Integer.toString(objItem.getAttribute("VOUCHER_COMPANY_ID").getInt()), NewRow);
                DataModel.setValueByVariable("SJ_COMPANY_ID", Integer.toString(objItem.getAttribute("SJ_COMPANY_ID").getInt()), NewRow);
                DataModel.setValueByVariable("SELECTION_TYPE", Integer.toString(objItem.getAttribute("SELECTION_TYPE").getInt()), NewRow);

                tMainCode = objItem.getAttribute("MAIN_ACCOUNT_CODE").getString();
                tSubCode = objItem.getAttribute("SUB_ACCOUNT_CODE").getString();
            }
            //********************************************//

            if (tMainCode.equals("210010") && !tSubCode.equals("")) {
                lblPAN.setVisible(true);
                txtPAN.setVisible(true);
                String receiptAmt = data.getStringValueFromDB("SELECT RC_AMT FROM  (SELECT PARTY_CODE,PARTY_NAME,PAN_NO,SUBSTRING(GSTIN_NO,3,10) AS GSTIN_PAN,CITY_ID FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 ) AS PM  LEFT JOIN  "
                        + " (SELECT GSTIN_PAN AS V_PAN,SUM(AMOUNT) AS RC_AMT FROM  (SELECT B.SUB_ACCOUNT_CODE, P.PARTY_NAME, SUBSTRING(TRIM(P.GSTIN_NO),3,10) AS GSTIN_PAN, SUM(B.AMOUNT) AS AMOUNT, GROUP_CONCAT(A.VOUCHER_NO) "
                        + " FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B, DINESHMILLS.D_SAL_PARTY_MASTER P "
                        + "  WHERE A.VOUCHER_NO = B.VOUCHER_NO AND P.PARTY_CODE = B.SUB_ACCOUNT_CODE  AND A.VOUCHER_DATE>='" + EITLERPGLOBAL.FinFromDateDB + "' AND A.VOUCHER_DATE<=CURDATE() "
                        //                            + " AND A.VOUCHER_TYPE IN (6,7,8,9) AND B.MAIN_ACCOUNT_CODE='210010' AND A.APPROVED=1 AND A.CANCELLED=0 AND A.EXCLUDE_IN_ADJ =0 "
                        + " AND (A.VOUCHER_TYPE IN (6,8,9,12) OR (A.VOUCHER_TYPE IN (7) AND A.EXCLUDE_IN_ADJ =0) ) AND B.MAIN_ACCOUNT_CODE='210010' AND A.APPROVED=1 AND A.CANCELLED=0 "
                        + " AND B.EFFECT='C' AND B.MODULE_ID <>65 GROUP BY B.SUB_ACCOUNT_CODE  ) AS AMT GROUP BY GSTIN_PAN ) AS VPAN  "
                        + " ON VPAN.V_PAN = PM.GSTIN_PAN WHERE PM.PARTY_CODE ='" + tSubCode + "'");
                txtPAN.setText(receiptAmt + "");
            }

        } catch (Exception c) {

        }
    }

    //Sets data to the Class Object
    private void SetData() {
        objDrAdjustment.setAttribute("PREFIX", SelPrefix);
        objDrAdjustment.setAttribute("SUFFIX", SelSuffix);
        objDrAdjustment.setAttribute("FFNO", FFNo);

        objDrAdjustment.setAttribute("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
        objDrAdjustment.setAttribute("DOC_DATE", txtDocDate.getText());
        objDrAdjustment.setAttribute("REMARKS", txtRemarks.getText());

        //----- Update Approval Specific Fields -----------//
        objDrAdjustment.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        objDrAdjustment.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        objDrAdjustment.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        objDrAdjustment.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            objDrAdjustment.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            objDrAdjustment.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            objDrAdjustment.setAttribute("APPROVAL_STATUS", "R");
            objDrAdjustment.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            objDrAdjustment.setAttribute("APPROVAL_STATUS", "H");
        }

        if (EditMode == EITLERPGLOBAL.ADD) {
            objDrAdjustment.setAttribute("CREATED_BY", EITLERPGLOBAL.gLoginID);
            objDrAdjustment.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDate());
            objDrAdjustment.setAttribute("MODIFIED_BY", "");
            objDrAdjustment.setAttribute("MODIFIED_DATE", "0000-00-00");
        } else {
            objDrAdjustment.setAttribute("CREATED_BY", "");
            objDrAdjustment.setAttribute("CREATED_DATE", "0000-00-00");
            objDrAdjustment.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gLoginID);
            objDrAdjustment.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDate());
        }

        objDrAdjustment.colItems.clear();

        for (int i = 0; i < Table.getRowCount(); i++) {
            clsDrAdjustmentItem objItem = new clsDrAdjustmentItem();

            objItem.setAttribute("SR_NO", i + 1);
            objItem.setAttribute("VOUCHER_NO", DataModel.getValueByVariable("VOUCHER_NO", i));
            objItem.setAttribute("VOUCHER_SR_NO", UtilFunctions.CInt(DataModel.getValueByVariable("VOUCHER_SR_NO", i)));
            objItem.setAttribute("VOUCHER_DATE", DataModel.getValueByVariable("VOUCHER_DATE", i));
            objItem.setAttribute("MAIN_ACCOUNT_CODE", DataModel.getValueByVariable("MAIN_ACCOUNT_CODE", i));
            objItem.setAttribute("SUB_ACCOUNT_CODE", DataModel.getValueByVariable("SUB_ACCOUNT_CODE", i));
            objItem.setAttribute("RECEIPT_AMOUNT", UtilFunctions.CDbl(DataModel.getValueByVariable("RECEIPT_AMOUNT", i)));
            objItem.setAttribute("SJ_NO", DataModel.getValueByVariable("SJ_NO", i));
            objItem.setAttribute("SJ_DATE", DataModel.getValueByVariable("SJ_DATE", i));
            objItem.setAttribute("AGENT_SR", DataModel.getValueByVariable("AGENT_SR", i));
            objItem.setAttribute("ADJUST_AMOUNT", UtilFunctions.CDbl(DataModel.getValueByVariable("ADJ_AMOUNT", i)));
            objItem.setAttribute("REF_DOC_NO", DataModel.getValueByVariable("REF_DOC_NO", i));
            objItem.setAttribute("REF_DOC_DATE", DataModel.getValueByVariable("REF_DOC_DATE", i));
            objItem.setAttribute("INVOICE_NO", DataModel.getValueByVariable("INVOICE_NO", i));
            objItem.setAttribute("INVOICE_DATE", DataModel.getValueByVariable("INVOICE_DATE", i));
            objItem.setAttribute("REMARKS", DataModel.getValueByVariable("REMARKS", i));
            objItem.setAttribute("MODULE_ID", UtilFunctions.CInt(DataModel.getValueByVariable("MODULE_ID", i)));
            objItem.setAttribute("VOUCHER_COMPANY_ID", UtilFunctions.CInt(DataModel.getValueByVariable("VOUCHER_COMPANY_ID", i)));
            objItem.setAttribute("SJ_COMPANY_ID", UtilFunctions.CInt(DataModel.getValueByVariable("SJ_COMPANY_ID", i)));
            objItem.setAttribute("SELECTION_TYPE", UtilFunctions.CInt(DataModel.getValueByVariable("SELECTION_TYPE", i)));

            objDrAdjustment.colItems.put(Integer.toString(objDrAdjustment.colItems.size() + 1), objItem);
        }
        //--------------------------------------------------------------------------------------------------//

    }

    private void SetMenuForRights() {

        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 10941)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        //if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10532)) {
        cmdEdit.setEnabled(true);
        //}
        //else {
        //cmdEdit.setEnabled(false);
        //}

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 10943)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 10944)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }

    }

    private void Add() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        //Now Generate new document no.
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = clsDrAdjustment.ModuleID;

        if (aList.ShowList()) {
            EditMode = EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix = aList.Prefix; //Selected Prefix;
            SelSuffix = aList.Suffix;
            FFNo = aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsDrAdjustment.ModuleID, FFNo, false));
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
            txtDocDate.requestFocus();

            lblTitle.setText("ADVANCE RECEIPT ADJUSTMENT (DEBTORS) - " + txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);
        } else {
            JOptionPane.showMessageDialog(null, "You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }

    }

    private void Edit() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        String lDocNo = objDrAdjustment.getAttribute("DOC_NO").getString();

        if (objDrAdjustment.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {

            EITLERPGLOBAL.ChangeCursorToWait(this);

            EditMode = EITLERPGLOBAL.EDIT;
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            SetupApproval();
            //----------------//

            if (ApprovalFlow.IsCreator(clsDrAdjustment.ModuleID, lDocNo) || clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 10942)) {
                SetFields(true);
            } else {
                EnableApproval();
            }

            SetupApproval();
            DisableToolbar();
            txtDocDate.requestFocus();

            EITLERPGLOBAL.ChangeCursorToDefault(this);
        } else {
            JOptionPane.showMessageDialog(null, "You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }

    }

    private void Delete() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        if (objDrAdjustment.Delete(EITLERPGLOBAL.gNewUserID)) {
            MoveLast();
        }
    }

    private void Save() {

        if (!Validate()) {
            return;
        }

        EITLERPGLOBAL.ChangeCursorToWait(this);

        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (objDrAdjustment.Insert()) {
                MoveLast();
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, " " + objDrAdjustment.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (objDrAdjustment.Update()) {
                MoveLast();
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, " " + objDrAdjustment.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);

        try {
            frmPA.RefreshView();
        } catch (Exception e) {
        }

    }

    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private boolean Validate() {
        String Msg = "";
        String strSQL = "";
        boolean Reserve = false;
        if (OpgReject.isSelected()) {
            if (txtToRemarks.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(this, Msg, "Please enter remarks", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            return true;
        }

        /*if(!OpgReject.isSelected()) {
         //if(!txtDocDate.getText().trim().substring(3,5).equals("03")) {
         int Result = clsVoucher.ValidateVoucherEntry(EditMode,EITLERPGLOBAL.formatDateDB(txtDocDate.getText().trim()));
         if(Result==EITLERPGLOBAL.ADD) {
         JOptionPane.showMessageDialog(this,"Month is Closed. \nYou can not create Document(s).");
         return false;
         } else if(Result==EITLERPGLOBAL.EDIT) {
         JOptionPane.showMessageDialog(this,"Month is Closed. \nYou can not Approve / Final Approve Document(s).\n Either you have to cancel Document or change Document date.");
         return false;
         }
         //}
         }*/
        int SelectedType = Integer.parseInt(DataModel.getValueByVariable("SELECTION_TYPE", 0));
        for (int i = 0; i < Table.getRowCount(); i++) {
            String MainCode = DataModel.getValueByVariable("MAIN_ACCOUNT_CODE", i);
            String SubCode = DataModel.getValueByVariable("SUB_ACCOUNT_CODE", i);
            String ReceiptVoucher = DataModel.getValueByVariable("VOUCHER_NO", i);
            double ReceiptAmount = UtilFunctions.CDbl(DataModel.getValueByVariable("RECEIPT_AMOUNT", i));
            double AdjustAmount = UtilFunctions.CDbl(DataModel.getValueByVariable("ADJ_AMOUNT", i));
            if (AdjustAmount <= 0) {
                JOptionPane.showMessageDialog(this, "Adjustment amount should not zero or negative.");
                return false;
            }
            int VoucherSrNo = Integer.parseInt(DataModel.getValueByVariable("VOUCHER_SR_NO", i));
            String SJNo = DataModel.getValueByVariable("SJ_NO", i);
            if (SelectedType != Integer.parseInt(DataModel.getValueByVariable("SELECTION_TYPE", i))) {
                Msg = "Only one kind of transaction can be done in below mentioned type."
                        + "\n1. Debit to Credit\n2.Credit to Debit\n3.Reserve amount\nPlease look at sr no " + (i + 1);
                JOptionPane.showMessageDialog(this, Msg, "Wrong Adjustment", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if (!DataModel.getValueByVariable("SJ_NO", i).trim().equals("") && DataModel.getValueByVariable("SELECTION_TYPE", i).trim().equals("1")) {
                if (i == 0) {
                    String SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + SJNo + "' AND EFFECT='D' "
                            + "AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + SubCode + "' ";
                    double DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                    String InvoiceNo = "";
                    String InvoiceDate = "";
                    double CreditedAmount = 0;
                    double TableAmount = 0;
                    if (clsVoucher.getVoucherType(SJNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        InvoiceNo = DataModel.getValueByVariable("INVOICE_NO", i);
                        InvoiceDate = DataModel.getValueByVariable("INVOICE_DATE", i);
                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO=B.VOUCHER_NO "
                                + "AND B.INVOICE_NO='" + InvoiceNo + "' AND B.EFFECT='C' AND B.INVOICE_DATE='" + EITLERPGLOBAL.formatDateDB(InvoiceDate) + "' "
                                + //"AND A.CANCELLED=0 AND A.VOUCHER_TYPE<>"+FinanceGlobal.TYPE_SALES_JOURNAL;
                                "AND A.CANCELLED=0 AND A.VOUCHER_TYPE<>'" + FinanceGlobal.TYPE_SALES_JOURNAL + "' AND A.BOOK_CODE <> 93";
                        CreditedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                    } else {
                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO=B.VOUCHER_NO "
                                + "AND B.GRN_NO='" + SJNo + "' AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + SubCode + "' "
                                + "AND B.EFFECT='C' AND A.CANCELLED=0 ";
                        CreditedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                    }
                    TableAmount = 0;
                    for (int j = 0; j < Table.getRowCount(); j++) {
                        double LineAmount = UtilFunctions.CDbl(DataModel.getValueByVariable("ADJ_AMOUNT", j));
                        String CreditVoucher = DataModel.getValueByVariable("VOUCHER_NO", j);
                        /*double CreditAmount = data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL " +
                         "WHERE VOUCHER_NO='"+CreditVoucher+"' AND EFFECT='C' AND MAIN_ACCOUNT_CODE='"+MainCode+"' " +
                         "AND SUB_ACCOUNT_CODE='"+SubCode+"' AND (INVOICE_NO='' OR INVOICE_NO LIKE 'DUM%') " +
                         "AND GRN_NO='' AND MODULE_ID<>"+clsVoucher.DebitNoteModuleID,FinanceGlobal.FinURL);
                         */ //Changed by following query because of invoice no posting in CN Vouchers
                        double CreditAmount = data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL A,D_FIN_VOUCHER_HEADER B "
                                + "WHERE A.VOUCHER_NO='" + CreditVoucher + "' AND EFFECT='C' AND MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                + "AND SUB_ACCOUNT_CODE='" + SubCode + "' AND (INVOICE_NO='' OR INVOICE_NO LIKE 'DUM%' OR BOOK_CODE IN ('14','93')) "
                                + "AND A.VOUCHER_NO=B.VOUCHER_NO "
                                + "AND GRN_NO='' AND MODULE_ID<>" + clsVoucher.DebitNoteModuleID, FinanceGlobal.FinURL);

                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO=B.VOUCHER_NO "
                                + "AND B.GRN_NO='" + CreditVoucher + "' AND B.EFFECT='D' AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                                + "AND B.SUB_ACCOUNT_CODE='" + SubCode + "' AND A.APPROVED=0 AND A.CANCELLED=0 AND A.BOOK_CODE<>99 AND (B.MATCHED=0 AND B.MATCHED_DATE IS NULL)  "; //
                        double AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                        if ((AdjustedAmount + LineAmount) > CreditAmount) {
                            Msg = "Already Adjusted Amount is " + AdjustedAmount + ". \n"
                                    + "Receipt amount is " + CreditAmount + ". \n"
                                    + "You are trying to adjust Rs. " + (Math.abs(CreditAmount - AdjustedAmount - LineAmount)) + " more.";
                            JOptionPane.showMessageDialog(this, Msg, "Wrong Adjustment", JOptionPane.ERROR_MESSAGE);
                            return false;
                        }
                        TableAmount = TableAmount + LineAmount;
                    }
                    if ((CreditedAmount + TableAmount) > DebitAmount) {
                        Msg = "Already Adjusted Amount is " + CreditedAmount + ". \n"
                                + "Debit amount is " + DebitAmount + ". \n"
                                + "You are trying to adjust Rs. " + (Math.abs(DebitAmount - CreditedAmount - TableAmount)) + " more.";
                        JOptionPane.showMessageDialog(this, Msg, "Wrong Adjustment", JOptionPane.ERROR_MESSAGE);
                        return false;
                    }
                }
            } else if (!DataModel.getValueByVariable("SJ_NO", i).trim().equals("") && DataModel.getValueByVariable("SELECTION_TYPE", i).trim().equals("2")) {
                if (i == 0) {
                    String InvoiceNo = "";
                    String InvoiceDate = "";
                    double DebitedAmount = 0;
                    double TableAmount = 0;
                    String CreditVoucher = DataModel.getValueByVariable("VOUCHER_NO", i);
                    double CreditAmount = data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL "
                            + "WHERE VOUCHER_NO='" + CreditVoucher + "' AND EFFECT='C' AND MAIN_ACCOUNT_CODE='" + MainCode + "' "
                            + "AND SUB_ACCOUNT_CODE='" + SubCode + "' AND (INVOICE_NO='' OR INVOICE_NO LIKE 'DUM%') "
                            + "AND GRN_NO='' AND MODULE_ID<>" + clsVoucher.DebitNoteModuleID, FinanceGlobal.FinURL);

                    String SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO=B.VOUCHER_NO "
                            + "AND B.GRN_NO='" + CreditVoucher + "' AND B.EFFECT='D' AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                            + "AND B.SUB_ACCOUNT_CODE='" + SubCode + "' AND A.APPROVED=0 AND A.CANCELLED=0 AND A.BOOK_CODE<>99 AND (B.MATCHED=0 OR B.MATCHED_DATE IS NULL) "; //AND A.VOUCHER_TYPE<>"+FinanceGlobal.TYPE_SALES_JOURNAL
                    double AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                    TableAmount = 0;
                    for (int j = 0; j < Table.getRowCount(); j++) {
                        String DebitVoucher = DataModel.getValueByVariable("SJ_NO", j);
                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + DebitVoucher + "' AND EFFECT='D' "
                                + "AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + SubCode + "' AND CANCELLED=0 ";
                        double DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                        double LineAmount = UtilFunctions.CDbl(DataModel.getValueByVariable("ADJ_AMOUNT", j));

                        if (clsVoucher.getVoucherType(DebitVoucher) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                            InvoiceNo = DataModel.getValueByVariable("INVOICE_NO", j);
                            InvoiceDate = DataModel.getValueByVariable("INVOICE_DATE", j);
                            SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO=B.VOUCHER_NO "
                                    + "AND B.INVOICE_NO='" + InvoiceNo + "' AND B.EFFECT='C' AND B.INVOICE_DATE='" + EITLERPGLOBAL.formatDateDB(InvoiceDate) + "' "
                                    + "AND A.CANCELLED=0 AND A.VOUCHER_TYPE<>" + FinanceGlobal.TYPE_SALES_JOURNAL;
                            DebitedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                        } else {
                            SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO=B.VOUCHER_NO "
                                    + "AND B.GRN_NO='" + DebitVoucher + "' AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + SubCode + "' "
                                    + "AND B.EFFECT='C' AND A.CANCELLED=0 ";
                            DebitedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                        }

                        if ((DebitedAmount + LineAmount) > DebitAmount) {
                            Msg = "Already Adjusted Amount is " + AdjustedAmount + ". \n"
                                    + "Receipt amount is " + CreditAmount + ". \n"
                                    + "You are trying to adjust Rs. " + (Math.abs(DebitedAmount - LineAmount)) + " more. \n At line no :" + (j + 1);
                            JOptionPane.showMessageDialog(this, Msg, "Wrong Adjustment", JOptionPane.ERROR_MESSAGE);
                            return false;
                        }
                        TableAmount = TableAmount + LineAmount;
                    }

                    if ((AdjustedAmount + TableAmount) > CreditAmount) {
                        Msg = "Already Adjusted Amount is " + AdjustedAmount + ". \n"
                                + "Receipt amount is " + CreditAmount + ". \n"
                                + "You are trying to adjust Rs. " + (Math.abs(CreditAmount - AdjustedAmount - TableAmount)) + " more.";
                        JOptionPane.showMessageDialog(this, Msg, "Wrong Adjustment", JOptionPane.ERROR_MESSAGE);
                        return false;
                    }
                }
            } else {
                if (DataModel.getValueByVariable("INVOICE_NO", i).equals("")) {
                    Msg = "Please insert Invoice No. at Sr. No. : " + (i + 1);
                    JOptionPane.showMessageDialog(this, Msg, "Wrong Adjustment", JOptionPane.ERROR_MESSAGE);
                    return false;
                }

                if (data.IsRecordExist("SELECT B.* FROM D_FIN_DR_ADJ_HEADER A,  D_FIN_DR_ADJ_DETAIL B WHERE A.DOC_NO=B.DOC_NO AND B.VOUCHER_NO='" + ReceiptVoucher + "' AND A.DOC_NO<>'" + txtDocNo.getText().trim() + "' AND A.APPROVED=0 AND A.CANCELLED=0 ", FinanceGlobal.FinURL)) { //
                    Msg = "Receipt Voucher already in use in other adjustment document. ";
                    JOptionPane.showMessageDialog(this, Msg, "Wrong Adjustment", JOptionPane.ERROR_MESSAGE);
                    return false;
                }

                double CreditAmount = data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL "
                        + "WHERE VOUCHER_NO='" + ReceiptVoucher + "' AND EFFECT='C' AND MAIN_ACCOUNT_CODE='" + MainCode + "' "
                        + "AND SUB_ACCOUNT_CODE='" + SubCode + "' AND (INVOICE_NO='' OR INVOICE_NO LIKE 'DUM%') "
                        + "AND GRN_NO='' AND MODULE_ID<>" + clsVoucher.DebitNoteModuleID, FinanceGlobal.FinURL);

                String SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO=B.VOUCHER_NO "
                        + "AND B.GRN_NO='" + ReceiptVoucher + "' AND B.EFFECT='D' AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' "
                        + "AND B.SUB_ACCOUNT_CODE='" + SubCode + "' AND A.CANCELLED=0 AND A.BOOK_CODE<>99 AND B.MATCHED=0 "; //AND A.APPROVED=0
                double AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                if ((AdjustedAmount + AdjustAmount) > CreditAmount) {
                    Msg = "Balance Receipt Amount is " + CreditAmount + ". \n"
                            + "You are trying to adjust Rs. " + AdjustAmount + ".\n "
                            + "You are trying to adjust Rs. " + (Math.abs(CreditAmount - AdjustedAmount - AdjustAmount)) + " more.\n At line no :" + (i + 1) + "\n "
                            + "Not Possible...!";
                    JOptionPane.showMessageDialog(this, Msg, "Wrong Adjustment", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
            }
        }
        return true;
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.Finance.frmDrAdjFind", true);
        frmDrAdjFind ObjReturn = (frmDrAdjFind) ObjLoader.getObj();

        if (ObjReturn.Cancelled == false) {
            if (!objDrAdjustment.Filter(ObjReturn.strQuery, EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null, "No records found.");
            }
            MoveFirst();
        }
    }

    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objDrAdjustment.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objDrAdjustment.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objDrAdjustment.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objDrAdjustment.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    public void FindEx(int pCompanyID, String pDocNo) {
        //objDrAdjustment.Filter(" WHERE A.COMPANY_ID="+Integer.toString(pCompanyID)+" AND A.DOC_NO='"+pDocNo+"' ",pCompanyID);
        objDrAdjustment.FilterEx(" WHERE COMPANY_ID=" + Integer.toString(pCompanyID) + " AND DOC_NO='" + pDocNo + "' ", pCompanyID);
        objDrAdjustment.MoveFirst();
        DisplayData();
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }

    private void FormatGridA() {
        DataModelA = new EITLTableModel();

        TableA.removeAll();
        TableA.setModel(DataModelA);

        //Set the table Readonly
        DataModelA.TableReadOnly(true);

        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");

        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);

    }

    private void FormatGridHS() {
        DataModelHS = new EITLTableModel();

        TableHS.removeAll();
        TableHS.setModel(DataModelHS);

        //Set the table Readonly
        DataModelHS.TableReadOnly(true);

        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");

        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }

    private void SetupApproval() {

        /*if(cmbHierarchy.getItemCount()>1) {
         cmbHierarchy.setEnabled(true);
         }*/
        //In Edit Mode Hierarchy Should be disabled
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {

            int FromUserID = ApprovalFlow.getFromID((int) EITLERPGLOBAL.gCompanyID, clsDrAdjustment.ModuleID, objDrAdjustment.getAttribute("DOC_NO").getString());
            lnFromID = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = ApprovalFlow.getFromRemarks((int) EITLERPGLOBAL.gCompanyID, clsDrAdjustment.ModuleID, FromUserID, objDrAdjustment.getAttribute("DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }

        if (EditMode == 0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }

    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = ApprovalFlow.getRemainingUsers((int) EITLERPGLOBAL.gCompanyID, clsDrAdjustment.ModuleID, objDrAdjustment.getAttribute("DOC_NO").getString());
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
        }

    }

    private void GenerateRejectedUserCombo() {
        HashMap List = new HashMap();
        HashMap DeptList = new HashMap();
        HashMap DeptUsers = new HashMap();

        //----- Generate cmbType ------- //
        cmbToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= List.size(); i++) {
            clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

            /// NEW CODE ///
            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, clsDrAdjustment.ModuleID, objDrAdjustment.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID, FinanceGlobal.FinURL);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, clsDrAdjustment.ModuleID, objDrAdjustment.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///
        }
        //------------------------------ //
        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, clsDrAdjustment.ModuleID, objDrAdjustment.getAttribute("DOC_NO").getString());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }

    private void GenerateCombos() {
        try {
            //Generates Combo Boxes
            HashMap List = new HashMap();
            String strCondition = "";
            ResultSet rsTmp;

            cmbHierarchyModel = new EITLComboModel();
            cmbHierarchy.removeAllItems();
            cmbHierarchy.setModel(cmbHierarchyModel);

            List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + clsDrAdjustment.ModuleID);

            if (EditMode == EITLERPGLOBAL.EDIT) {
                List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + clsDrAdjustment.ModuleID);
            }
            for (int i = 1; i <= List.size(); i++) {
                clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
                ComboData aData = new ComboData();
                aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
                aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
                cmbHierarchyModel.addElement(aData);
            }
        } catch (Exception e) {

        }
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Panel1.getComponentCount() - 1; i++) {
            if (Panel1.getComponent(i).getName() != null) {

                FieldName = Panel1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {

                    Panel1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//
    }

    private void FormatGrid() {

        Updating = true; //Stops recursion

        try {

            cmdRemove.requestFocus();

            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            TableColumnModel ColModel = Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            DataModel.addColumn("Sr."); //0
            DataModel.addColumn("SJ No."); //1
            DataModel.addColumn("SJ Date."); //2
            DataModel.addColumn("Agent Sr."); //3
            DataModel.addColumn("SJ Amount"); //4
            DataModel.addColumn("Main Account Code"); //5
            DataModel.addColumn("Sub Account Code"); //6
            DataModel.addColumn("Account Name"); //7
            DataModel.addColumn("Invoice No."); //8
            DataModel.addColumn("Invoice Date"); //9
            DataModel.addColumn("Ref. Doc No."); //10
            DataModel.addColumn("Ref. Doc Date"); //11
            DataModel.addColumn("Ref. Module ID"); //12
            DataModel.addColumn("SJ Company ID"); //13
            DataModel.addColumn("Receipt Voucher No."); //14
            DataModel.addColumn("Voucher Sr. No."); //15
            DataModel.addColumn("Voucher Date"); //16
            DataModel.addColumn("Receipt Amount"); //17
            DataModel.addColumn("Receipt Voucher Company ID"); //18
            DataModel.addColumn("Remarks"); //19
            DataModel.addColumn("Selection"); //20

            DataModel.SetVariable(0, "SR_NO"); //0 - Read Only
            DataModel.SetVariable(1, "SJ_NO"); //1 - Read Only
            DataModel.SetVariable(2, "SJ_DATE"); //2 - Read Only
            DataModel.SetVariable(3, "AGENT_SR");//3 - Read Only
            DataModel.SetVariable(4, "ADJ_AMOUNT"); //4 - Read Only
            DataModel.SetVariable(5, "MAIN_ACCOUNT_CODE"); //5 - Read Only
            DataModel.SetVariable(6, "SUB_ACCOUNT_CODE"); //6 - Read Only
            DataModel.SetVariable(7, "ACCOUNT_NAME"); //7 - Read Only
            DataModel.SetVariable(8, "INVOICE_NO"); //8 - Read Only
            DataModel.SetVariable(9, "INVOICE_DATE"); //9 - Read Only
            DataModel.SetVariable(10, "REF_DOC_NO"); //10 - Read Only
            DataModel.SetVariable(11, "REF_DOC_DATE"); //11 - Read Only
            DataModel.SetVariable(12, "MODULE_ID"); //12 - Read Only
            DataModel.SetVariable(13, "SJ_COMPANY_ID"); //13 - Read Only
            DataModel.SetVariable(14, "VOUCHER_NO"); //14 - Read Only
            DataModel.SetVariable(15, "VOUCHER_SR_NO"); //15- Read Only
            DataModel.SetVariable(16, "VOUCHER_DATE"); //16 - Read Only
            DataModel.SetVariable(17, "RECEIPT_AMOUNT"); //17 - Read Only
            DataModel.SetVariable(18, "VOUCHER_COMPANY_ID"); //18 - Read Only
            DataModel.SetVariable(19, "REMARKS"); //19 - Read Only
            DataModel.SetVariable(20, "SELECTION_TYPE"); //20 - Read Only

            DataModel.TableReadOnly(false);

            for (int i = 0; i < DataModel.getColumnCount(); i++) {
                DataModel.SetReadOnly(i);
            }
            DataModel.ResetReadOnly(19);
        } catch (Exception e) {
        }
        Updating = false;
        //Table formatting completed
    }

    private void GenerateReport() {
        try {
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData = new TReportWriter.SimpleDataProvider.TTable();

            objReportData.AddColumn("D_DATE");
            objReportData.AddColumn("D_LINK_NO");
            objReportData.AddColumn("D_YR1_YR2");
            objReportData.AddColumn("D_AMOUNT");
            objReportData.AddColumn("C_DATE");
            objReportData.AddColumn("C_INVOICE_NO");
            objReportData.AddColumn("C_YR1_YR2");
            objReportData.AddColumn("C_AMOUNT");

            TReportWriter.SimpleDataProvider.TRow objOpeningRow = objReportData.newRow();

            objOpeningRow.setValue("D_DATE", "");
            objOpeningRow.setValue("D_LINK_NO", "");
            objOpeningRow.setValue("D_YR1_YR2", "");
            objOpeningRow.setValue("D_AMOUNT", "");
            objOpeningRow.setValue("C_DATE", "");
            objOpeningRow.setValue("C_INVOICE_NO", "");
            objOpeningRow.setValue("C_YR1_YR2", "");
            objOpeningRow.setValue("C_AMOUNT", "");

            int SelectionType = data.getIntValueFromDB("SELECT DISTINCT SELECTION_TYPE FROM D_FIN_DR_ADJ_DETAIL WHERE DOC_NO = '" + txtDocNo.getText().trim() + "' ", FinanceGlobal.FinURL);

            String strSQL = "SELECT * FROM D_FIN_DR_ADJ_DETAIL WHERE DOC_NO = '" + txtDocNo.getText().trim() + "' ";
            ResultSet rsTmp = data.getResult(strSQL, FinanceGlobal.FinURL);
            rsTmp.first();
            String PartyCode = UtilFunctions.getString(rsTmp, "SUB_ACCOUNT_CODE", "");
            String MainAccountCode = UtilFunctions.getString(rsTmp, "MAIN_ACCOUNT_CODE", "");
            String PartyName = data.getStringValueFromDB("SELECT PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE PARTY_CODE = '" + PartyCode + "' AND MAIN_ACCOUNT_CODE='" + MainAccountCode + "' ", FinanceGlobal.FinURL);
            String Remarks = data.getStringValueFromDB("SELECT REMARKS FROM D_FIN_DR_ADJ_HEADER WHERE DOC_NO = '" + txtDocNo.getText().trim() + "' ", FinanceGlobal.FinURL);
            String DocNo = UtilFunctions.getString(rsTmp, "DOC_NO", "");
            //String DocNo = data.getStringValueFromDB("SELECT DOC_NO FROM D_FIN_DR_ADJ_HEADER WHERE DOC_NO = '" + txtDocNo.getText().trim() + "' ",FinanceGlobal.FinURL);
            String DocDate = EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT DOC_DATE FROM D_FIN_DR_ADJ_HEADER WHERE DOC_NO = '" + txtDocNo.getText().trim() + "' ", FinanceGlobal.FinURL));
            //String BookCode = data.getStringValueFromDB("SELECT BOOK_CODE FROM D_FIN_BOOK_MASTER WHERE MAIN_ACCOUNT_CODE='" + MainAccountCode + "' ",FinanceGlobal.FinURL);

            String BookCode = "";
            if (MainAccountCode.equals("210010")) {
                BookCode = "89";
            } else if (MainAccountCode.equals("210027")) {
                BookCode = "88";
            } else if (MainAccountCode.equals("210072")) {
                BookCode = "90";
            } else {
                BookCode = "91";
            }

            ResultSet rsDr = null, rsCr = null;
            int stop = 0;
            if (SelectionType == 1) {

                if (rsTmp.getRow() > 0) {
                    while (!rsTmp.isAfterLast()) {

                        objRow = objReportData.newRow();

                        objRow.setValue("D_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp, "VOUCHER_DATE", "0000-00-00")));
                        objRow.setValue("D_LINK_NO", UtilFunctions.getString(rsTmp, "VOUCHER_NO", ""));
                        objRow.setValue("D_YR1_YR2", "");
                        objRow.setValue("D_AMOUNT", UtilFunctions.getString(rsTmp, "ADJUST_AMOUNT", ""));

                        if (stop == 0) {
                            String str = "SELECT SUM(ADJUST_AMOUNT) FROM D_FIN_DR_ADJ_DETAIL WHERE DOC_NO = '" + txtDocNo.getText().trim() + "' ";
                            double amount = data.getDoubleValueFromDB(str, FinanceGlobal.FinURL);

                            objRow.setValue("C_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp, "SJ_DATE", "0000-00-00")));
                            objRow.setValue("C_INVOICE_NO", UtilFunctions.getString(rsTmp, "SJ_NO", ""));
                            objRow.setValue("C_YR1_YR2", "");
                            objRow.setValue("C_AMOUNT", String.valueOf(amount));

                        } else {
                            objRow.setValue("C_DATE", "");
                            objRow.setValue("C_INVOICE_NO", "");
                            objRow.setValue("C_YR1_YR2", "");
                            objRow.setValue("C_AMOUNT", "");
                        }
                        objReportData.AddRow(objRow);
                        stop = 1;
                        rsTmp.next();

                    }
                }

            }

            if (SelectionType == 2) {

                if (rsTmp.getRow() > 0) {
                    while (!rsTmp.isAfterLast()) {

                        objRow = objReportData.newRow();

                        objRow.setValue("C_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp, "SJ_DATE", "0000-00-00")));
                        objRow.setValue("C_INVOICE_NO", UtilFunctions.getString(rsTmp, "SJ_NO", ""));
                        objRow.setValue("C_YR1_YR2", "");
                        objRow.setValue("C_AMOUNT", UtilFunctions.getString(rsTmp, "ADJUST_AMOUNT", ""));

                        if (stop == 0) {
                            String str = "SELECT SUM(ADJUST_AMOUNT) FROM D_FIN_DR_ADJ_DETAIL WHERE DOC_NO = '" + txtDocNo.getText().trim() + "' ";
                            double amount = data.getDoubleValueFromDB(str, FinanceGlobal.FinURL);

                            objRow.setValue("D_DATE", EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp, "VOUCHER_DATE", "0000-00-00")));
                            objRow.setValue("D_LINK_NO", UtilFunctions.getString(rsTmp, "VOUCHER_NO", ""));
                            objRow.setValue("D_YR1_YR2", "");
                            objRow.setValue("D_AMOUNT", String.valueOf(amount));

                        } else {
                            objRow.setValue("D_DATE", "");
                            objRow.setValue("D_LINK_NO", "");
                            objRow.setValue("D_YR1_YR2", "");
                            objRow.setValue("D_AMOUNT", "");
                        }
                        objReportData.AddRow(objRow);
                        stop = 1;
                        rsTmp.next();

                    }
                }

            }

            HashMap Parameters = new HashMap();
            Parameters.put("PARTY_CODE", PartyCode);
            Parameters.put("PARTY_NAME", PartyName);
            Parameters.put("MAIN_ACCOUNT_CODE", MainAccountCode);
            Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());
            Parameters.put("BOOK_CODE", BookCode);
            Parameters.put("REMARKS", Remarks);
            Parameters.put("DOC_NO", DocNo);
            Parameters.put("DOC_DATE", DocDate);
            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptAdvanceReceiptAdjustment.rpt", Parameters, objReportData);

            /*objRow=objReportData.newRow();
             objRow.setValue("SR_NO",Integer.toString(Counter));
             objReportData.AddRow(objRow);
             Comp_ID = EITLERPGLOBAL.gCompanyID;
             HashMap Parameters=new HashMap();
             Parameters.put("FROM_DATE",txtFromDate.getText().trim());
             Parameters.put("TO_DATE",txtToDate.getText().trim());
             Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
         
         
             objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptBrokerCommission.rpt",Parameters,objReportData);
         
             */
        } catch (Exception e) {

        }
    }

}
