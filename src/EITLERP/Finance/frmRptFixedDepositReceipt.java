/*
 * frmRptGRNInfo.java
 *
 * Created on April 16, 2008, 12:01 PM
 */

package EITLERP.Finance;
/**
 *
 * @author  root
 */
import EITLERP.*;
import EITLERP.Finance.*;
import EITLERP.Utils.*;
import EITLERP.Utils.SimpleDataProvider.*;
import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.net.*;
import java.util.*;
import TReportWriter.*;

public class frmRptFixedDepositReceipt extends javax.swing.JApplet {
    
    private EITLComboModel cmbReceiptTypeModel;
    private EITLComboModel cmbReportTypeModel;
    private TReportEngine objEngine=new TReportEngine();
    private TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
    
    
    /** Initializes the applet frmRptGRNInfo */
    public void init() {
        setSize(450,264);
        initComponents();
        
        
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFromReceiptNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtToReceiptNo = new javax.swing.JTextField();
        cmdPreview = new javax.swing.JButton();

        getContentPane().setLayout(null);

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jPanel3.setLayout(null);

        jPanel3.setBackground(new java.awt.Color(0, 153, 204));
        jPanel3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel6.setText("FIXED DEPOSIT RECEIPT RECEIPT ");
        jPanel3.add(jLabel6);
        jLabel6.setBounds(9, 8, 230, 15);

        getContentPane().add(jPanel3);
        jPanel3.setBounds(0, 2, 800, 30);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("From Receipot No:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(4, 55, 120, 15);

        txtFromReceiptNo.setColumns(10);
        getContentPane().add(txtFromReceiptNo);
        txtFromReceiptNo.setBounds(127, 54, 90, 19);

        jLabel3.setText("To Receipt No:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(223, 55, 90, 15);

        txtToReceiptNo.setColumns(10);
        getContentPane().add(txtToReceiptNo);
        txtToReceiptNo.setBounds(320, 54, 90, 20);

        cmdPreview.setText("Print Receipt");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        getContentPane().add(cmdPreview);
        cmdPreview.setBounds(156, 101, 130, 25);

    }//GEN-END:initComponents
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        if ( ! Validate()) {
            return;
        }
        
        GenerateReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdPreview;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField txtFromReceiptNo;
    private javax.swing.JTextField txtToReceiptNo;
    // End of variables declaration//GEN-END:variables
    
    private void GenerateReport() {
        
        try{
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("RECEIPT_DATE");
            objReportData.AddColumn("TITLE");
            objReportData.AddColumn("APPLICANT_NAME");
            objReportData.AddColumn("ADDRESS1");
            objReportData.AddColumn("ADDRESS2");
            objReportData.AddColumn("ADDRESS3");
            objReportData.AddColumn("CITY");
            objReportData.AddColumn("PINCODE");
            objReportData.AddColumn("RECEIPT_NO");
            objReportData.AddColumn("SCHEME_TYPE");
            objReportData.AddColumn("PARTY_CODE");
            objReportData.AddColumn("APPLICANT2");
            objReportData.AddColumn("APPLICANT3");
            objReportData.AddColumn("APPLICANT4");
            objReportData.AddColumn("BROKER_NAME");
            objReportData.AddColumn("AMOUNT");
            objReportData.AddColumn("DEPOSIT_DATE");
            objReportData.AddColumn("DEPOSIT_PERIOD");
            objReportData.AddColumn("INTEREST_RATE");
            objReportData.AddColumn("MATURITY_DATE");
            objReportData.AddColumn("OLD_RECEIPT_NO");
            objReportData.AddColumn("BROKER_CODE");
            objReportData.AddColumn("STATUS");
            objReportData.AddColumn("MATURITY_AMOUNT");
            objReportData.AddColumn("AMOUNT_WORD");
            objReportData.AddColumn("SIGNATURE");
            objReportData.AddColumn("FOLIO_NO");
            
            
            objReportData.AddColumn("RECEIPT_DATE_R");
            objReportData.AddColumn("TITLE_R");
            objReportData.AddColumn("APPLICANT_NAME_R");
            objReportData.AddColumn("ADDRESS1_R");
            objReportData.AddColumn("ADDRESS2_R");
            objReportData.AddColumn("ADDRESS3_R");
            objReportData.AddColumn("CITY_R");
            objReportData.AddColumn("PINCODE_R");
            objReportData.AddColumn("RECEIPT_NO_R");
            objReportData.AddColumn("SCHEME_TYPE_R");
            objReportData.AddColumn("PARTY_CODE_R");
            objReportData.AddColumn("APPLICANT2_R");
            objReportData.AddColumn("APPLICANT3_R");
            objReportData.AddColumn("APPLICANT4_R");
            objReportData.AddColumn("BROKER_NAME_R");
            objReportData.AddColumn("AMOUNT_R");
            objReportData.AddColumn("DEPOSIT_DATE_R");
            objReportData.AddColumn("DEPOSIT_PERIOD_R");
            objReportData.AddColumn("INTEREST_RATE_R");
            objReportData.AddColumn("MATURITY_DATE_R");
            objReportData.AddColumn("OLD_RECEIPT_NO_R");
            objReportData.AddColumn("BROKER_CODE_R");
            objReportData.AddColumn("STATUS_R");
            objReportData.AddColumn("MATURITY_AMOUNT_R");
            objReportData.AddColumn("AMOUNT_WORD_R");
            objReportData.AddColumn("SIGNATURE_R");
            objReportData.AddColumn("FOLIO_NO_R");
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            
            objOpeningRow.setValue("RECEIPT_DATE","0000-00-00");
            objOpeningRow.setValue("TITLE","");
            objOpeningRow.setValue("APPLICANT_NAME","");
            objOpeningRow.setValue("ADDRESS1","");
            objOpeningRow.setValue("ADDRESS2","");
            objOpeningRow.setValue("ADDRESS3","");
            objOpeningRow.setValue("CITY","");
            objOpeningRow.setValue("PINCODE","");
            objOpeningRow.setValue("RECEIPT_NO","");
            objOpeningRow.setValue("SCHEME_TYPE","");
            objOpeningRow.setValue("PARTY_CODE","");
            objOpeningRow.setValue("APPLICANT2","");
            objOpeningRow.setValue("APPLICANT3","");
            objOpeningRow.setValue("APPLICANT4","");
            objOpeningRow.setValue("BROKER_NAME","");
            objOpeningRow.setValue("AMOUNT","");
            objOpeningRow.setValue("DEPOSIT_DATE","0000-00-00");
            objOpeningRow.setValue("DEPOSIT_PERIOD","");
            objOpeningRow.setValue("INTEREST_RATE","");
            objOpeningRow.setValue("MATURITY_DATE","0000-00-00");
            objOpeningRow.setValue("OLD_RECEIPT_NO","");
            objOpeningRow.setValue("BROKER_CODE","");
            objOpeningRow.setValue("STATUS","");
            objOpeningRow.setValue("MATURITY_AMOUNT","");
            objOpeningRow.setValue("AMOUNT_WORD","");
            objOpeningRow.setValue("FOLIO_NO","");
            
            
            String ToReceiptNo ="";
            String FromReceiptNo ="";
            int Tmp = Integer.parseInt(txtFromReceiptNo.getText().substring(1,2));
            if(Tmp >=0 && Tmp<=9) {
                FromReceiptNo = txtFromReceiptNo.getText().trim();
            }
            else {
                FromReceiptNo = "0"  + txtFromReceiptNo.getText().trim().substring(2);
            }
            
            Tmp = Integer.parseInt(txtToReceiptNo.getText().substring(1,2));
            if(Tmp >=0 && Tmp<=9) {
                ToReceiptNo = txtToReceiptNo.getText().trim();
            }
            else {
                ToReceiptNo = "0"  + txtToReceiptNo.getText().trim().substring(2);
            }
            
            
            String strSQL="SELECT DMST.LEGACY_NO, DMST.RECEIPT_DATE,DMST.EFFECTIVE_DATE, DMST.TITLE,DMST.APPLICANT_NAME,DMST.ADDRESS1,DMST.ADDRESS2,DMST.ADDRESS3,DMST.CITY,DMST.PINCODE, "+
            "CASE WHEN SMST.SCHEME_TYPE=1 THEN 'FD'  WHEN SMST.SCHEME_TYPE=2 THEN 'LD'  "+
            "WHEN SMST.SCHEME_TYPE=3 THEN 'CD' ELSE '' END SCHEME_TYPE, "+
            "DMST.RECEIPT_NO,DMST.PARTY_CODE,DMST.BROKER_NAME,DMST.AMOUNT,DMST.DEPOSIT_DATE,DMST.DEPOSIT_PERIOD, "+
            "DMST.NOMINEE_1_NAME,DMST.NOMINEE_2_NAME, "+
            "DMST.INTEREST_RATE,DMST.MATURITY_DATE,DMST.OLD_RECEIPT_NO,DMST.BROKER_CODE, "+
            "CASE WHEN DMST.DEPOSITER_CATEGORY = 1 THEN 'E' WHEN DMST.DEPOSITER_CATEGORY = 2 THEN 'S' " +
            "WHEN DMST.DEPOSITER_CATEGORY = 3 THEN 'C'  WHEN DMST.DEPOSITER_CATEGORY = 4 THEN 'D' " +
            "WHEN DMST.DEPOSITER_CATEGORY = 5 THEN 'I' ELSE '' END DEPOSITER_CATEGORY, " +
            "DMST.APPLICANT2,DMST.APPLICANT3,DMST.APPLICANT4, "+
            "DMST.SCHEME_ID,DMST.EFFECTIVE_DATE,DMST.MATURITY_DATE,DMST.DEPOSIT_TYPE_ID,DMST.FOLIO_NO "+
            "FROM D_FD_DEPOSIT_MASTER DMST,D_FD_SCHEME_MASTER SMST "+
            "WHERE DMST.SCHEME_ID=SMST.SCHEME_ID "+
            "AND DMST.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " "+
            "AND DMST.RECEIPT_NO >= '" + FromReceiptNo + "' "+
            "AND DMST.RECEIPT_NO <= '" + ToReceiptNo + "' AND DMST.APPROVED=1 AND DMST.CANCELLED=0"; //" +
            //"ORDER BY DMST.RECEIPT_NO ";
            
            //            "CASE WHEN DMST.DEPOSITER_STATUS = 1 THEN 'E' WHEN DMST.DEPOSITER_STATUS = 2 THEN 'S' "+
            //            "WHEN DMST.DEPOSITER_STATUS = 3 THEN 'C'  WHEN DMST.DEPOSITER_STATUS = 4 THEN 'I' "+
            //            "WHEN DMST.DEPOSITER_STATUS = 5 THEN 'D' ELSE '' END STATUS, "+
            
            ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsTmp.first();
            
            int Counter = 0;
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    
                    //FOR LEFT HAND SIDE PRINT RECEIPT
                    objRow=objReportData.newRow();
                    objRow.setValue("RECEIPT_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"RECEIPT_DATE","0000-00-00")));
                    objRow.setValue("EFFECTIVE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"EFFECTIVE_DATE","0000-00-00")));
                    objRow.setValue("TITLE",UtilFunctions.getString(rsTmp,"TITLE","").trim());
                    objRow.setValue("APPLICANT_NAME",UtilFunctions.getString(rsTmp,"APPLICANT_NAME","").trim());
                    objRow.setValue("ADDRESS1",UtilFunctions.getString(rsTmp,"ADDRESS1","").trim());
                    objRow.setValue("ADDRESS2",UtilFunctions.getString(rsTmp,"ADDRESS2","").trim());
                    objRow.setValue("ADDRESS3",UtilFunctions.getString(rsTmp,"ADDRESS3","").trim());
                    objRow.setValue("CITY",UtilFunctions.getString(rsTmp,"CITY","").trim());
                    objRow.setValue("PINCODE",UtilFunctions.getString(rsTmp,"PINCODE",""));
                    objRow.setValue("LEGACY_NO",UtilFunctions.getString(rsTmp,"LEGACY_NO",""));
                    objRow.setValue("RECEIPT_NO",UtilFunctions.getString(rsTmp,"RECEIPT_NO",""));
                    objRow.setValue("SCHEME_TYPE",UtilFunctions.getString(rsTmp,"SCHEME_TYPE",""));
                    objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsTmp,"PARTY_CODE",""));
                    
                    // MATURITY AMOUNT CALCULATION
                    
                    
                    if( UtilFunctions.getString(rsTmp,"DEPOSIT_TYPE_ID","").equals("2")) {
                        String EffectiveDate = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"EFFECTIVE_DATE","0000-00-00"));
                        String MaturityDate = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"MATURITY_DATE","0000-00-00"));
                        String SchemeID = UtilFunctions.getString(rsTmp,"SCHEME_ID","");
                        int Months = data.getIntValueFromDB("SELECT INTEREST_CALCULATION_PERIOD FROM D_FD_SCHEME_MASTER WHERE SCHEME_ID='"+SchemeID+"' ",FinanceGlobal.FinURL);
                        double Rate = Double.parseDouble(UtilFunctions.getString(rsTmp,"INTEREST_RATE",""));
                        double nyear = Months/12.0;
                        double nTimes = 12.0/Months;
                        double Amount = Double.parseDouble(UtilFunctions.getString(rsTmp,"AMOUNT",""));
                        double MaturityAmount=0.0;
                        boolean calculated = true;
                        int depositPeriod = Integer.parseInt(UtilFunctions.getString(rsTmp,"DEPOSIT_PERIOD",""));
                        int calculatedPeriod = 0;
                        calculatedPeriod += Months;
                        while(calculated) {
                            MaturityAmount = EITLERPGLOBAL.round((Amount * Math.pow((1 + ((Rate/100)/nTimes)),nTimes*nyear)) - Amount,0);
                            Amount += MaturityAmount;
                            if(calculatedPeriod==depositPeriod) {
                                calculated = false;
                                continue;
                            } else {
                                calculatedPeriod += Months;
                            }
                        }
                        objRow.setValue("MATURITY_AMOUNT", String.valueOf(Amount));
                    } else {
                        objRow.setValue("MATURITY_AMOUNT","0");
                    }
                    // END MATURITY AMOUNT CALCULATION
                    
                    if(UtilFunctions.getString(rsTmp,"APPLICANT2","").trim().equals("")) {
                        objRow.setValue("APPLICANT2", UtilFunctions.getString(rsTmp,"APPLICANT2","").trim());
                    }
                    else {
                        objRow.setValue("APPLICANT2","JT. "  + UtilFunctions.getString(rsTmp,"APPLICANT2","").trim());
                    }
                    if(UtilFunctions.getString(rsTmp,"APPLICANT3","").trim().equals("")) {
                        objRow.setValue("APPLICANT3",UtilFunctions.getString(rsTmp,"APPLICANT3","").trim());
                    }
                    else {
                        objRow.setValue("APPLICANT3","JT. "  + UtilFunctions.getString(rsTmp,"APPLICANT3","").trim());
                    }
                    if(UtilFunctions.getString(rsTmp,"APPLICANT4","").trim().equals("")) {
                        objRow.setValue("APPLICANT4",UtilFunctions.getString(rsTmp,"APPLICANT4","").trim());
                    }
                    else {
                        objRow.setValue("APPLICANT4","JT. "  + UtilFunctions.getString(rsTmp,"APPLICANT4","").trim());
                    }
                    
                    
                    if(UtilFunctions.getString(rsTmp,"BROKER_NAME","").trim().equals("")){
                        objRow.setValue("BROKER_NAME",UtilFunctions.getString(rsTmp,"BROKER_NAME","").trim());
                    }
                    else{
                        objRow.setValue("BROKER_NAME", "THRU: " + UtilFunctions.getString(rsTmp,"BROKER_NAME","").trim());
                    }
                    
                    objRow.setValue("AMOUNT",UtilFunctions.getString(rsTmp,"AMOUNT",""));
                    objRow.setValue("DEPOSIT_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"DEPOSIT_DATE","0000-00-00")));
                    objRow.setValue("DEPOSIT_PERIOD",UtilFunctions.getString(rsTmp,"DEPOSIT_PERIOD",""));
                    objRow.setValue("INTEREST_RATE",UtilFunctions.getString(rsTmp,"INTEREST_RATE",""));
                    objRow.setValue("MATURITY_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"MATURITY_DATE","0000-00-00")));
                    objRow.setValue("OLD_RECEIPT_NO",UtilFunctions.getString(rsTmp,"OLD_RECEIPT_NO",""));
                    objRow.setValue("BROKER_CODE",UtilFunctions.getString(rsTmp,"BROKER_CODE",""));
                    objRow.setValue("DEPOSITER_CATEGORY",UtilFunctions.getString(rsTmp,"DEPOSITER_CATEGORY",""));
                    
                    NumWord num=new NumWord();
                    String number = data.getStringValueFromDB("SELECT ROUND( '" + UtilFunctions.getString(rsTmp,"AMOUNT","").trim() + "' ) FROM DUAL ",FinanceGlobal.FinURL);
                    String word = num.convertNumToWord(Integer.parseInt(number));
                    objRow.setValue("AMOUNT_WORD", word.toUpperCase() + " ONLY");
                    objRow.setValue("SIGNATURE","(Sr. MANAGER FINANCE AND ACCOUNTS)");
                    //MUFFY
                    objRow.setValue("FOLIO_NO",UtilFunctions.getString(rsTmp,"FOLIO_NO",""));
                    
                    //END LEFT HAND SIDE RECEIPT PRINT
                    if(rsTmp.next()) {
                        //FOR RIGHT HAND SIDE PRINT RECEIPT
                        //objRow=objReportData.newRow();
                        objRow.setValue("RECEIPT_DATE_R",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"RECEIPT_DATE","0000-00-00")));
                        objRow.setValue("EFFECTIVE_DATE_R",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"EFFECTIVE_DATE","0000-00-00")));
                        objRow.setValue("TITLE_R",UtilFunctions.getString(rsTmp,"TITLE","").trim());
                        objRow.setValue("APPLICANT_NAME_R",UtilFunctions.getString(rsTmp,"APPLICANT_NAME","").trim());
                        objRow.setValue("ADDRESS1_R",UtilFunctions.getString(rsTmp,"ADDRESS1","").trim());
                        objRow.setValue("ADDRESS2_R",UtilFunctions.getString(rsTmp,"ADDRESS2","").trim());
                        objRow.setValue("ADDRESS3_R",UtilFunctions.getString(rsTmp,"ADDRESS3","").trim());
                        objRow.setValue("CITY_R",UtilFunctions.getString(rsTmp,"CITY","").trim());
                        objRow.setValue("PINCODE_R",UtilFunctions.getString(rsTmp,"PINCODE",""));
                        objRow.setValue("LEGACY_NO_R",UtilFunctions.getString(rsTmp,"LEGACY_NO",""));
                        objRow.setValue("RECEIPT_NO_R",UtilFunctions.getString(rsTmp,"RECEIPT_NO",""));
                        objRow.setValue("SCHEME_TYPE_R",UtilFunctions.getString(rsTmp,"SCHEME_TYPE",""));
                        objRow.setValue("PARTY_CODE_R",UtilFunctions.getString(rsTmp,"PARTY_CODE",""));
                        
                        // MATURITY AMOUNT CALCULATION
                        
                        
                        if( UtilFunctions.getString(rsTmp,"DEPOSIT_TYPE_ID","").equals("2")) {
                            String EffectiveDate = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"EFFECTIVE_DATE","0000-00-00"));
                            String MaturityDate = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"MATURITY_DATE","0000-00-00"));
                            String SchemeID = UtilFunctions.getString(rsTmp,"SCHEME_ID","");
                            int Months = data.getIntValueFromDB("SELECT INTEREST_CALCULATION_PERIOD FROM D_FD_SCHEME_MASTER WHERE SCHEME_ID='"+SchemeID+"' ",FinanceGlobal.FinURL);
                            double Rate = Double.parseDouble(UtilFunctions.getString(rsTmp,"INTEREST_RATE",""));
                            double nyear = Months/12.0;
                            double nTimes = 12.0/Months;
                            double Amount = Double.parseDouble(UtilFunctions.getString(rsTmp,"AMOUNT",""));
                            double MaturityAmount=0.0;
                            boolean calculated = true;
                            int depositPeriod = Integer.parseInt(UtilFunctions.getString(rsTmp,"DEPOSIT_PERIOD",""));
                            int calculatedPeriod = 0;
                            calculatedPeriod += Months;
                            while(calculated) {
                                MaturityAmount = EITLERPGLOBAL.round((Amount * Math.pow((1 + ((Rate/100)/nTimes)),nTimes*nyear)) - Amount,0);
                                Amount += MaturityAmount;
                                if(calculatedPeriod==depositPeriod) {
                                    calculated = false;
                                    continue;
                                } else {
                                    calculatedPeriod += Months;
                                }
                                
                            }
                            
                            objRow.setValue("MATURITY_AMOUNT_R", String.valueOf(Amount));
                        } else {
                            objRow.setValue("MATURITY_AMOUNT_R","0");
                        }
                        // END MATURITY AMOUNT CALCULATION
                        
                        if(UtilFunctions.getString(rsTmp,"APPLICANT2","").trim().equals("")) {
                            objRow.setValue("APPLICANT2_R", UtilFunctions.getString(rsTmp,"APPLICANT2","").trim());
                        }
                        else {
                            objRow.setValue("APPLICANT2_R","JT. "  + UtilFunctions.getString(rsTmp,"APPLICANT2","").trim());
                        }
                        if(UtilFunctions.getString(rsTmp,"APPLICANT3","").trim().equals("")) {
                            objRow.setValue("APPLICANT3_R",UtilFunctions.getString(rsTmp,"APPLICANT3","").trim());
                        }
                        else {
                            objRow.setValue("APPLICANT3_R","JT. "  + UtilFunctions.getString(rsTmp,"APPLICANT3","").trim());
                        }
                        if(UtilFunctions.getString(rsTmp,"APPLICANT4","").trim().equals("")) {
                            objRow.setValue("APPLICANT4_R",UtilFunctions.getString(rsTmp,"APPLICANT4","").trim());
                        }
                        else {
                            objRow.setValue("APPLICANT4_R","JT. "  + UtilFunctions.getString(rsTmp,"APPLICANT4","").trim());
                        }
                        
                        
                        if(UtilFunctions.getString(rsTmp,"BROKER_NAME","").trim().equals("")){
                            objRow.setValue("BROKER_NAME_R",UtilFunctions.getString(rsTmp,"BROKER_NAME","").trim());
                        }
                        else{
                            objRow.setValue("BROKER_NAME_R", "THRU: " + UtilFunctions.getString(rsTmp,"BROKER_NAME","").trim());
                        }
                        
                        objRow.setValue("AMOUNT_R",UtilFunctions.getString(rsTmp,"AMOUNT",""));
                        objRow.setValue("DEPOSIT_DATE_R",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"DEPOSIT_DATE","0000-00-00")));
                        objRow.setValue("DEPOSIT_PERIOD_R",UtilFunctions.getString(rsTmp,"DEPOSIT_PERIOD",""));
                        objRow.setValue("INTEREST_RATE_R",UtilFunctions.getString(rsTmp,"INTEREST_RATE",""));
                        objRow.setValue("MATURITY_DATE_R",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"MATURITY_DATE","0000-00-00")));
                        objRow.setValue("OLD_RECEIPT_NO_R",UtilFunctions.getString(rsTmp,"OLD_RECEIPT_NO",""));
                        objRow.setValue("BROKER_CODE_R",UtilFunctions.getString(rsTmp,"BROKER_CODE",""));
                        objRow.setValue("DEPOSITER_CATEGORY_R",UtilFunctions.getString(rsTmp,"DEPOSITER_CATEGORY",""));
                        
                        num=new NumWord();
                        number = data.getStringValueFromDB("SELECT ROUND( '" + UtilFunctions.getString(rsTmp,"AMOUNT","").trim() + "' ) FROM DUAL ",FinanceGlobal.FinURL);
                        word = num.convertNumToWord(Integer.parseInt(number));
                        objRow.setValue("AMOUNT_WORD_R", word.toUpperCase() + " ONLY");
                        objRow.setValue("SIGNATURE_R","(Sr. MANAGER FINANCE AND ACCOUNTS)");
                        objRow.setValue("FOLIO_NO_R",UtilFunctions.getString(rsTmp,"FOLIO_NO",""));
                        //MUFFY
                        //objRow.setValue("FOLIO_NO_R","");
                        //END RIGHT HAND SIDE RECEIPT
                    }
                    
                    
                    objReportData.AddRow(objRow);
                    rsTmp.next();
                    
                }
                
            }
            HashMap Parameters=new HashMap();
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/finance/rptFixedDepositReceiptBOTH.rpt",Parameters,objReportData);
            
        }
        catch(Exception e){
            
        }
    }
    
    private boolean Validate() {
        //Form level validations
        
        if(txtFromReceiptNo.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter Receipt No.");
            return false;
        }
        if(txtToReceiptNo.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter Receipt No.");
            return false;
        }
        
        
        return true;
    }
    
    
}
