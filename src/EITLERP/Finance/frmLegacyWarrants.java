/*
 * frmLegacyVouchers.java
 *
 * Created on August 23, 2008, 11:18 AM
 */

package EITLERP.Finance;

/**
 *
 * @author  root
 */

import EITLERP.*;
import java.sql.*;
import javax.swing.*;
import java.net.*;
import java.awt.*;

public class frmLegacyWarrants extends javax.swing.JApplet {
    
    private EITLTableModel DataModel=new EITLTableModel();
    private EITLComboModel cmbMonthModel;
    private EITLComboModel cmbConditionModel;
    private EITLComboModel cmbSchemeModel;
    private EITLTableCellRenderer Renderer=new EITLTableCellRenderer();
    /** Initializes the applet frmLegacyVouchers */
    public void init() {
        setSize(575,510);
        initComponents();
        GenerateCombo();
        FormatGrid();
        cmbCondition.setEnabled(false);
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        lblTitle = new javax.swing.JLabel();
        lblEffectivefrom = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        lblEffectiveto = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        lblYear = new javax.swing.JLabel();
        txtYear = new javax.swing.JTextField();
        cmdShowList = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        lblWarrantMonth = new javax.swing.JLabel();
        cmbCondition = new javax.swing.JComboBox();
        chkMaturityWarrant = new javax.swing.JCheckBox();
        lblCondition = new javax.swing.JLabel();
        cmbScheme = new javax.swing.JComboBox();
        lblEffectiveless = new javax.swing.JLabel();
        cmbMonth = new javax.swing.JComboBox();
        lblScheme = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        cmdSearch = new javax.swing.JButton();
        lblWarrantMonth1 = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" ASSIGN LEGACY WARRANT NO.");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 2, 577, 25);

        lblEffectivefrom.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEffectivefrom.setText("Effective date from:");
        getContentPane().add(lblEffectivefrom);
        lblEffectivefrom.setBounds(47, 131, 128, 15);

        jLabel2.setText("Display Warrant of period");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(7, 32, 180, 15);

        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(196, 129, 100, 19);

        getContentPane().add(txtToDate);
        txtToDate.setBounds(416, 130, 100, 19);

        lblEffectiveto.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEffectiveto.setText("Effective date to:");
        getContentPane().add(lblEffectiveto);
        lblEffectiveto.setBounds(300, 131, 111, 15);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });

        jScrollPane1.setViewportView(Table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(5, 182, 554, 265);

        lblYear.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYear.setText("Year :");
        getContentPane().add(lblYear);
        lblYear.setBounds(30, 82, 85, 15);

        getContentPane().add(txtYear);
        txtYear.setBounds(120, 81, 76, 19);

        cmdShowList.setText("Show List");
        cmdShowList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowListActionPerformed(evt);
            }
        });

        getContentPane().add(cmdShowList);
        cmdShowList.setBounds(423, 152, 110, 25);

        cmdSave.setText("Save");
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        getContentPane().add(cmdSave);
        cmdSave.setBounds(442, 450, 90, 25);

        lblStatus.setForeground(new java.awt.Color(51, 153, 255));
        lblStatus.setText("Status");
        getContentPane().add(lblStatus);
        lblStatus.setBounds(11, 460, 415, 15);

        lblWarrantMonth.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblWarrantMonth.setText("Warrant Month :");
        getContentPane().add(lblWarrantMonth);
        lblWarrantMonth.setBounds(15, 59, 99, 15);

        cmbCondition.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbConditionItemStateChanged(evt);
            }
        });

        getContentPane().add(cmbCondition);
        cmbCondition.setBounds(120, 103, 275, 22);

        chkMaturityWarrant.setSelected(true);
        chkMaturityWarrant.setText("Only Maturity Warrant");
        chkMaturityWarrant.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkMaturityWarrantItemStateChanged(evt);
            }
        });

        getContentPane().add(chkMaturityWarrant);
        chkMaturityWarrant.setBounds(282, 56, 165, 18);

        lblCondition.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCondition.setText("Condition :");
        getContentPane().add(lblCondition);
        lblCondition.setBounds(30, 105, 85, 15);

        getContentPane().add(cmbScheme);
        cmbScheme.setBounds(288, 79, 106, 22);

        lblEffectiveless.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEffectiveless.setText("Effective date less then:");
        getContentPane().add(lblEffectiveless);
        lblEffectiveless.setBounds(29, 130, 159, 16);

        getContentPane().add(cmbMonth);
        cmbMonth.setBounds(120, 55, 157, 22);

        lblScheme.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblScheme.setText("Scheme :");
        getContentPane().add(lblScheme);
        lblScheme.setBounds(197, 83, 85, 15);

        getContentPane().add(txtSearch);
        txtSearch.setBounds(164, 159, 100, 19);

        cmdSearch.setText("Search");
        cmdSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSearchActionPerformed(evt);
            }
        });

        getContentPane().add(cmdSearch);
        cmdSearch.setBounds(272, 155, 89, 22);

        lblWarrantMonth1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblWarrantMonth1.setText("Search :");
        getContentPane().add(lblWarrantMonth1);
        lblWarrantMonth1.setBounds(101, 161, 58, 15);

    }//GEN-END:initComponents
    
    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
        if( Integer.parseInt(Table.getValueAt(Table.getSelectedRow(), 9).toString()) > 0 ) {
            if(evt.getKeyCode()==116)//F5 Key Pressed
            {
                try {
                    if(Table.getRowCount()>0) {
                        Table.setValueAt("I", Table.getSelectedRow(), 10);
                    }
                }
                catch(Exception e) {
                }
            }
            
            if(evt.getKeyCode()==117)//F6 Key Pressed
            {
                try {
                    if(Table.getRowCount()>0) {
                        Table.setValueAt("I & P", Table.getSelectedRow(), 10);
                    }
                }
                catch(Exception e) {
                }
            }
        }
    }//GEN-LAST:event_TableKeyPressed
    
    private void cmdSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSearchActionPerformed
        // TODO add your handling code here:
        searchWithin(' ');
    }//GEN-LAST:event_cmdSearchActionPerformed
    
    private void chkMaturityWarrantItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkMaturityWarrantItemStateChanged
        // TODO add your handling code here:
        if(chkMaturityWarrant.isSelected()) {
            lblEffectivefrom.setVisible(false);
            lblEffectiveless.setVisible(false);
            lblEffectiveto.setVisible(false);
            txtFromDate.setVisible(false);
            txtFromDate.setText("");
            txtToDate.setText("");
            txtToDate.setVisible(false);
            cmbCondition.setEnabled(false);
            cmbCondition.setSelectedIndex(0);
        } else {
            cmbCondition.setEnabled(true);
            txtFromDate.setText("");
            txtToDate.setText("");
            cmbCondition.setSelectedIndex(0);
        }
    }//GEN-LAST:event_chkMaturityWarrantItemStateChanged
    
    private void cmbConditionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbConditionItemStateChanged
        // TODO add your handling code here:
        if(cmbCondition.getSelectedIndex()==0) {
            lblEffectivefrom.setVisible(false);
            lblEffectiveto.setVisible(false);
            lblEffectiveless.setVisible(false);
            txtFromDate.setVisible(false);
            txtToDate.setVisible(false);
            txtFromDate.setText("");
            txtToDate.setText("");
        } else if(cmbCondition.getSelectedIndex()==1) {
            lblEffectivefrom.setVisible(false);
            lblEffectiveto.setVisible(false);
            lblEffectiveless.setVisible(true);
            txtFromDate.setVisible(true);
            txtToDate.setVisible(false);
            txtFromDate.setText("");
            txtToDate.setText("");
        } else if(cmbCondition.getSelectedIndex()==2) {
            lblEffectivefrom.setVisible(true);
            lblEffectiveto.setVisible(true);
            lblEffectiveless.setVisible(false);
            txtFromDate.setVisible(true);
            txtToDate.setVisible(true);
            txtFromDate.setText("");
            txtToDate.setText("");
        }
    }//GEN-LAST:event_cmbConditionItemStateChanged
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        if(Table.getRowCount() <0 ) {
            JOptionPane.showMessageDialog(this,"No data...");
            return;
        }
        new Thread() {
            public void run() {
                try {
                    for(int i=0;i<Table.getRowCount();i++) {
                        String ReceiptNo=DataModel.getValueByVariable("RECEIPT_NO", i);
                        
                        lblStatus.setText("Updating Receipt No. "+ReceiptNo);
                        String DocNo = DataModel.getValueByVariable("DOC_NO", i);
                        String LegacyNo=DataModel.getValueByVariable("LEGACY_NO", i);
                        String PartyCode=DataModel.getValueByVariable("PARTY_CODE", i);
                        String LegacyWarrantNo=DataModel.getValueByVariable("LEGACY_WARRANT_NO", i);
                        String WarrantClear = DataModel.getValueByVariable("WARRANT_CLEAR", i);
                        //String ReceiptDate=EITLERPGLOBAL.formatDateDB(DataModel.getValueByVariable("LEGACY_DATE", i));
                        if(LegacyWarrantNo.trim().equals("")) {
                            JOptionPane.showMessageDialog(null,"Please enter valid warrant legacy no against legacy no("+LegacyNo+")");
                            lblStatus.setText("Ready");
                            return;
                        }
                        
                        String SQL = "UPDATE D_FD_INT_CALC_DETAIL SET LEGACY_WARRANT_NO='"+LegacyWarrantNo+"', WARRANT_CLEAR='"+WarrantClear+"', CHANGED=1, CHANGED_DATE=CURDATE() " +
                        "WHERE DOC_NO='"+DocNo+"' AND RECEIPT_NO='"+ReceiptNo+"' AND PARTY_CODE='"+PartyCode+"' ";
                        data.Execute(SQL,FinanceGlobal.FinURL);
                        //if() {
                        //    JOptionPane.showMessageDialog(null,"legacy no. "+LegacyNo+" not posted properly.");
                        //}
                    }
                    lblStatus.setText("Ready");
                }
                catch(Exception e) {
                }
            };
        }.start();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdShowListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowListActionPerformed
        // TODO add your handling code here:
        if(cmbMonth.getSelectedIndex()==0 ||  cmbScheme.getSelectedIndex()==0) {
            JOptionPane.showMessageDialog(this,"Please select Month or Type");
            return;
        }
        
        
        if(txtYear.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Please insert year...");
            return;
        }
        
        if(!chkMaturityWarrant.isSelected()) {
            if(cmbCondition.getSelectedIndex()==0) {
                JOptionPane.showMessageDialog(this,"Please select Condition ");
                return;
            }
        }
        
        
        if(cmbCondition.getSelectedIndex()==1) {
            if(txtFromDate.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(this,"Please insert effective date less then...");
                return;
            } else if(!EITLERPGLOBAL.isDate(txtFromDate.getText().trim())) {
                JOptionPane.showMessageDialog(this,"Please insert proper effective date less then...");
                return;
            }
        }
        
        if(cmbCondition.getSelectedIndex()==2) {
            if(txtFromDate.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(this,"Please insert effective date from...");
                return;
            } else if(!EITLERPGLOBAL.isDate(txtFromDate.getText().trim())) {
                JOptionPane.showMessageDialog(this,"Please insert proper effective date from...");
                return;
            }
            
            if(txtToDate.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(this,"Please insert effective date to...");
                return;
            } else if(!EITLERPGLOBAL.isDate(txtToDate.getText().trim())) {
                JOptionPane.showMessageDialog(this,"Please insert proper effective date to...");
                return;
            }
        }
        
        new Thread() {
            public void run() {
                try {
                    String strSQL="SELECT A.DOC_NO,A.RECEIPT_NO, B.LEGACY_NO, B.RECEIPT_DATE, B.PARTY_CODE, A.WARRANT_NO, A.WARRANT_DATE, A.LEGACY_WARRANT_NO, A.MICR_NO, A.WARRANT_CLEAR, " +
                    "CASE WHEN C.SCHEME_TYPE=1 THEN C.SCHEME_TYPE+5 WHEN C.SCHEME_TYPE=2 THEN C.SCHEME_TYPE " +
                    "WHEN C.SCHEME_TYPE=3 THEN C.SCHEME_TYPE+10 ELSE 0 END AS SCHEME_ORDER " +
                    "FROM D_FD_INT_CALC_DETAIL A, D_FD_DEPOSIT_MASTER B, D_FD_SCHEME_MASTER C " +
                    "WHERE MONTH(A.WARRANT_DATE)="+cmbMonth.getSelectedIndex()+" AND YEAR(A.WARRANT_DATE)="+Integer.parseInt(txtYear.getText().trim())+" " +
                    "AND A.RECEIPT_NO=B.RECEIPT_NO AND B.SCHEME_ID=C.SCHEME_ID AND C.SCHEME_TYPE="+cmbScheme.getSelectedIndex()+" AND A.WARRANT_NO<>'0000000' " ;
                    
                    String strCondition="";
                    String StartDate = txtYear.getText().trim()+"-"+EITLERPGLOBAL.padLeft(2, Integer.toString(cmbMonth.getSelectedIndex()),"0")+"-01";
                    String EndDate = data.getStringValueFromDB("SELECT LAST_DAY('"+StartDate+"') FROM DUAL");
                    
                    if(!txtFromDate.getText().trim().equals("")) {
                        if(lblEffectiveless.isVisible()) {
                            strCondition+="AND B.EFFECTIVE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                        } else {
                            strCondition+="AND B.EFFECTIVE_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                        }
                    }
                    if(!txtToDate.getText().trim().equals("")) {
                        strCondition+="AND B.EFFECTIVE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                    }
                    
                    if(chkMaturityWarrant.isSelected()) {
                        strCondition+="AND B.MATURITY_DATE>='"+StartDate+"' AND B.MATURITY_DATE<='"+EndDate+"' ";
                    } else {
                        strCondition+="AND B.MATURITY_DATE>='"+EITLERPGLOBAL.addDaysToDate(EndDate,1,"yyyy-MM-dd")+"' ";
                    }
                    
                    strSQL+=strCondition;
                    strSQL+="ORDER BY SCHEME_ORDER,B.MATURITY_DATE,B.RECEIPT_NO ";
                    
                    lblStatus.setText("Fetching Records...");
                    
                    ResultSet rsParty;
                    
                    ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
                    rsTmp.first();
                    
                    FormatGrid();
                    
                    if(rsTmp.getRow()>0) {
                        while(!rsTmp.isAfterLast()) {
                            Object[] rowData=new Object[1];
                            DataModel.addRow(rowData);
                            
                            int NewRow=Table.getRowCount()-1;
                            lblStatus.setText("Generating Table "+NewRow);
                            
                            DataModel.setValueByVariable("SR_NO",Integer.toString(NewRow+1), NewRow);
                            DataModel.setValueByVariable("DOC_NO",UtilFunctions.getString(rsTmp,"DOC_NO",""),NewRow);
                            DataModel.setValueByVariable("RECEIPT_NO",UtilFunctions.getString(rsTmp,"RECEIPT_NO",""),NewRow);
                            DataModel.setValueByVariable("PARTY_CODE",UtilFunctions.getString(rsTmp,"PARTY_CODE",""),NewRow);
                            DataModel.setValueByVariable("LEGACY_NO",UtilFunctions.getString(rsTmp,"LEGACY_NO",""),NewRow);
                            DataModel.setValueByVariable("RECEIPT_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"RECEIPT_DATE","0000-00-00")),NewRow);
                            DataModel.setValueByVariable("WARRANT_NO",UtilFunctions.getString(rsTmp,"WARRANT_NO",""),NewRow);
                            DataModel.setValueByVariable("WARRANT_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"WARRANT_DATE","0000-00-00")),NewRow);
                            DataModel.setValueByVariable("LEGACY_WARRANT_NO",UtilFunctions.getString(rsTmp,"LEGACY_WARRANT_NO",""),NewRow);
                            DataModel.setValueByVariable("MICR_NO",UtilFunctions.getString(rsTmp,"MICR_NO",""),NewRow);
                            DataModel.setValueByVariable("WARRANT_CLEAR",UtilFunctions.getString(rsTmp,"WARRANT_CLEAR",""),NewRow);
                            rsTmp.next();
                        }
                    }
                    lblStatus.setText("Ready ");
                }
                catch(Exception e) {
                    lblStatus.setText("Ready ");
                }
            };
        }.start();
    }//GEN-LAST:event_cmdShowListActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JCheckBox chkMaturityWarrant;
    private javax.swing.JComboBox cmbCondition;
    private javax.swing.JComboBox cmbMonth;
    private javax.swing.JComboBox cmbScheme;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdSearch;
    private javax.swing.JButton cmdShowList;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCondition;
    private javax.swing.JLabel lblEffectivefrom;
    private javax.swing.JLabel lblEffectiveless;
    private javax.swing.JLabel lblEffectiveto;
    private javax.swing.JLabel lblScheme;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblWarrantMonth;
    private javax.swing.JLabel lblWarrantMonth1;
    private javax.swing.JLabel lblYear;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtToDate;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
    
    
    private void FormatGrid() {
        try {
            DataModel=new EITLTableModel();
            Table.removeAll();
            
            Table.setModel(DataModel);
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            DataModel.addColumn("Sr."); //0 - Read Only
            DataModel.addColumn("Doc No."); //1
            DataModel.addColumn("Receipt No."); //2
            DataModel.addColumn("Party Code"); //3
            DataModel.addColumn("Legacy No."); //4
            DataModel.addColumn("Receipt Date"); //5
            DataModel.addColumn("Warrant No."); //6
            DataModel.addColumn("Warrant Date"); //7
            DataModel.addColumn("Legacy Warrant No."); //8
            DataModel.addColumn("MICR No."); //9
            DataModel.addColumn("Warrant Clear"); //10
            
            DataModel.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModel.SetVariable(1,"DOC_NO"); //1 - Read Only
            DataModel.SetVariable(2,"RECEIPT_NO"); //2 - Read Only
            DataModel.SetVariable(3,"PARTY_CODE"); //3 - Read Only
            DataModel.SetVariable(4,"LEGACY_NO"); //4 - Read Only
            DataModel.SetVariable(5,"RECEIPT_DATE"); //5 - Read Only
            DataModel.SetVariable(6,"WARRANT_NO"); //6 - Read Only
            DataModel.SetVariable(7,"WARRANT_DATE"); //7 - Read Only
            DataModel.SetVariable(8,"LEGACY_WARRANT_NO"); //8 - Numeric
            DataModel.SetVariable(9,"MICR_NO"); //9 - Read Only
            DataModel.SetVariable(10,"WARRANT_CLEAR"); //10 - Read Only
            
            DataModel.TableReadOnly(false);
            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(1);
            DataModel.SetReadOnly(2);
            DataModel.SetReadOnly(3);
            DataModel.SetReadOnly(4);
            DataModel.SetReadOnly(5);
            DataModel.SetReadOnly(6);
            DataModel.SetReadOnly(7);
            DataModel.SetReadOnly(9);
            DataModel.SetReadOnly(10);
            
            DataModel.SetNumeric(0,true);
            DataModel.SetNumeric(8,true);
            
            Table.getColumnModel().getColumn(0).setPreferredWidth(40);
            Table.getColumnModel().getColumn(1).setPreferredWidth(90);
            Table.getColumnModel().getColumn(2).setPreferredWidth(90);
            Table.getColumnModel().getColumn(3).setPreferredWidth(90);
            Table.getColumnModel().getColumn(4).setPreferredWidth(90);
            Table.getColumnModel().getColumn(5).setPreferredWidth(90);
            Table.getColumnModel().getColumn(6).setPreferredWidth(90);
            Table.getColumnModel().getColumn(7).setPreferredWidth(90);
            Table.getColumnModel().getColumn(8).setPreferredWidth(125);
            Table.getColumnModel().getColumn(9).setPreferredWidth(100);
            Table.getColumnModel().getColumn(10).setPreferredWidth(100);
            
            Renderer = new EITLTableCellRenderer();
            for(int j=0;j<Table.getColumnCount();j++) {
                Table.getColumnModel().getColumn(j).setCellRenderer(Renderer);
            }
        }
        catch(Exception e) {
        }
        //Table formatting completed
    }
    
    
    private void GenerateCombo() {
        
        //--- Generate Type Combo ------//
        ComboData aData=new ComboData();
        
        cmbMonthModel=new EITLComboModel();
        cmbMonth.removeAllItems();
        cmbMonth.setModel(cmbMonthModel);
        
        aData=new ComboData();
        aData.Code=0;
        aData.Text="Select Month";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=1;
        aData.Text="January";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=2;
        aData.Text="February";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=3;
        aData.Text="March";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=4;
        aData.Text="April";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=5;
        aData.Text="May";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=6;
        aData.Text="June";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=7;
        aData.Text="July";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=8;
        aData.Text="August";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=9;
        aData.Text="September";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=10;
        aData.Text="October";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=11;
        aData.Text="November";
        cmbMonthModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=12;
        aData.Text="December";
        cmbMonthModel.addElement(aData);
        
        
        cmbConditionModel=new EITLComboModel();
        cmbCondition.removeAllItems();
        cmbCondition.setModel(cmbConditionModel);
        
        aData=new ComboData();
        aData.Code=0;
        aData.Text="Select Condition";
        cmbConditionModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=1;
        aData.Text="Effective Date less then";
        cmbConditionModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=2;
        aData.Text="Effective Date between";
        cmbConditionModel.addElement(aData);
        
        cmbSchemeModel=new EITLComboModel();
        cmbScheme.removeAllItems();
        cmbScheme.setModel(cmbSchemeModel);
        
        aData=new ComboData();
        aData.Code=0;
        aData.Text="Select Type";
        cmbSchemeModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=1;
        aData.Text="FD";
        cmbSchemeModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=2;
        aData.Text="LD";
        cmbSchemeModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=3;
        aData.Text="CD";
        cmbSchemeModel.addElement(aData);
    }
    
    private void searchWithin(char recentKey) {
        
        try {
            
            Renderer.removeBackColors();
            
            Table.repaint();
            
            String searchString=txtSearch.getText().trim();
            
            if(!searchString.trim().equals("")) {
                
                if(recentKey!=' ') {
                    searchString=searchString+recentKey;
                }
                
                searchString=searchString.toLowerCase();
                
                int currentCol=Table.getSelectedColumn();
                
                for(int i=0;i<=DataModel.getRowCount()-1;i++) {
                    
                    if(DataModel.getValueAt(i,currentCol).toString().toLowerCase().trim().indexOf(searchString)!=-1) {
                        
                        DataModel.changeSelection(i, currentCol, false,false);
                        
                        for(int j=0;j<DataModel.getColumnCount();j++) {
                            Renderer.setBackColor(i, j, Color.YELLOW);
                        }
                        
                    }
                }
            }
        } catch(Exception e) {
        }
    }
}

