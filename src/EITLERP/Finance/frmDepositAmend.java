/*
 * frmDepositRefund.java
 *
 * Created on November 15, 2008, 1:04 PM
 */

package EITLERP.Finance;

/**
 *
 * @author  Mrugesh Thaker
 */
/*<APPLET CODE=frmInward.class HEIGHT=500 WIDTH=665></APPLET>*/

import javax.swing.*;
import java.awt.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import javax.swing.text.*;
import EITLERP.Utils.*;
import java.sql.*;
import java.net.*;
import EITLERP.*;

public class frmDepositAmend extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsDepositAmend objDepositAmend;
    
    private boolean Updating=false;
    
    private String theDocNo="";
    
    private EITLTableModel DataModelA;
    private EITLTableModel DataModelHS;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    private int SelHierarchyID=0;
    private int lnFromID=0;
    
    private boolean IsGenerating=false;
    
    public frmPendingApprovals frmPA;
    
    /** Creates new form frmTemplate */
    public frmDepositAmend() {
        
        setSize(668,535);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        
        GenerateCombos();
        
        objDepositAmend = new clsDepositAmend(); 
        
        SetMenuForRights();
        
        if(getName().equals("Link")) {
            
        }
        else {
            if(objDepositAmend.LoadData(EITLERPGLOBAL.gCompanyID)) {
                objDepositAmend.MoveLast();
                DisplayData();
                SetMenuForRights();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+objDepositAmend.LastError);
            }
        }
        ShowMessage("Ready...");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Header = new javax.swing.JTabbedPane();
        Panel1 = new javax.swing.JPanel();
        txtAmendDate = new javax.swing.JTextField();
        lblAmendDate = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTextArea3 = new javax.swing.JTextArea();
        lblAccountCode2 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        lblAccountCode3 = new javax.swing.JLabel();
        txtAmendID = new javax.swing.JTextField();
        lblPartyCode = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        txtPincode = new javax.swing.JTextField();
        cmdNext1 = new javax.swing.JButton();
        lblPincode = new javax.swing.JLabel();
        txtPanNo = new javax.swing.JTextField();
        lblAddress1 = new javax.swing.JLabel();
        txtAddress1 = new javax.swing.JTextField();
        lblAddress3 = new javax.swing.JLabel();
        txtAddress3 = new javax.swing.JTextField();
        txtPartyName = new javax.swing.JTextField();
        lblAddress2 = new javax.swing.JLabel();
        txtAddress2 = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        lblPanNo = new javax.swing.JLabel();
        lblAddress4 = new javax.swing.JLabel();
        txtAmendReason = new javax.swing.JTextField();
        lblAddressOld = new javax.swing.JLabel();
        txtAddressOld = new javax.swing.JTextPane();
        lblAmendID = new javax.swing.JLabel();
        lblPanDate = new javax.swing.JLabel();
        txtPanDate = new javax.swing.JTextField();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack1 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        jTextArea1 = new javax.swing.JTextArea();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" Deposit Master Updation");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 666, 25);

        Panel1.setLayout(null);

        Panel1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        txtAmendDate.setEditable(false);
        txtAmendDate.setName("AMEND_DATE");
        txtAmendDate.setNextFocusableComponent(txtPartyCode);
        txtAmendDate.setEnabled(false);
        Panel1.add(txtAmendDate);
        txtAmendDate.setBounds(460, 20, 120, 19);

        lblAmendDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAmendDate.setText("Amend Date :");
        Panel1.add(lblAmendDate);
        lblAmendDate.setBounds(330, 20, 120, 15);

        jPanel2.setLayout(null);

        jPanel2.add(jTextArea3);
        jTextArea3.setBounds(177, 29, 0, 15);

        lblAccountCode2.setText("Account Code");
        jPanel2.add(lblAccountCode2);
        lblAccountCode2.setBounds(15, 20, 90, 15);

        jPanel2.add(jTextField3);
        jTextField3.setBounds(119, 18, 80, 19);

        jPanel2.add(jTextField4);
        jTextField4.setBounds(119, 49, 80, 19);

        lblAccountCode3.setText("Account Code");
        jPanel2.add(lblAccountCode3);
        lblAccountCode3.setBounds(15, 51, 90, 15);

        Panel1.add(jPanel2);
        jPanel2.setBounds(0, 0, 0, 0);

        txtAmendID.setEditable(false);
        txtAmendID.setName("AMEND_ID");
        txtAmendID.setNextFocusableComponent(txtAmendDate);
        txtAmendID.setEnabled(false);
        Panel1.add(txtAmendID);
        txtAmendID.setBounds(170, 20, 120, 19);

        lblPartyCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPartyCode.setText("Party Code :");
        Panel1.add(lblPartyCode);
        lblPartyCode.setBounds(30, 80, 135, 15);

        txtPartyCode.setName("PARTY_CODE");
        txtPartyCode.setNextFocusableComponent(txtAddress1);
        txtPartyCode.setEnabled(false);
        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });

        Panel1.add(txtPartyCode);
        txtPartyCode.setBounds(170, 80, 120, 19);

        txtPincode.setName("PARTY_CODE");
        txtPincode.setNextFocusableComponent(txtPanNo);
        txtPincode.setEnabled(false);
        txtPincode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPincodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPincodeFocusLost(evt);
            }
        });

        Panel1.add(txtPincode);
        txtPincode.setBounds(170, 310, 200, 19);

        cmdNext1.setText("Next>>");
        cmdNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext1ActionPerformed(evt);
            }
        });

        Panel1.add(cmdNext1);
        cmdNext1.setBounds(540, 340, 102, 25);

        lblPincode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPincode.setText("Pincode :");
        Panel1.add(lblPincode);
        lblPincode.setBounds(30, 310, 135, 15);

        txtPanNo.setName("PARTY_CODE");
        txtPanNo.setNextFocusableComponent(txtPanDate);
        txtPanNo.setEnabled(false);
        txtPanNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPanNoFocusGained(evt);
            }
        });

        Panel1.add(txtPanNo);
        txtPanNo.setBounds(460, 190, 140, 20);

        lblAddress1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAddress1.setText("Address1 :");
        Panel1.add(lblAddress1);
        lblAddress1.setBounds(30, 190, 135, 15);

        txtAddress1.setName("PARTY_CODE");
        txtAddress1.setNextFocusableComponent(txtAddress2);
        txtAddress1.setEnabled(false);
        txtAddress1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtAddress1FocusGained(evt);
            }
        });

        Panel1.add(txtAddress1);
        txtAddress1.setBounds(170, 190, 200, 19);

        lblAddress3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAddress3.setText("Address3 :");
        Panel1.add(lblAddress3);
        lblAddress3.setBounds(30, 250, 135, 15);

        txtAddress3.setName("PARTY_CODE");
        txtAddress3.setNextFocusableComponent(txtCity);
        txtAddress3.setEnabled(false);
        txtAddress3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtAddress3FocusGained(evt);
            }
        });

        Panel1.add(txtAddress3);
        txtAddress3.setBounds(170, 250, 200, 19);

        txtPartyName.setEditable(false);
        txtPartyName.setName("PARTY_CODE");
        txtPartyName.setEnabled(false);
        Panel1.add(txtPartyName);
        txtPartyName.setBounds(300, 80, 280, 19);

        lblAddress2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAddress2.setText("Address2 :");
        Panel1.add(lblAddress2);
        lblAddress2.setBounds(30, 220, 135, 15);

        txtAddress2.setName("PARTY_CODE");
        txtAddress2.setNextFocusableComponent(txtAddress3);
        txtAddress2.setEnabled(false);
        txtAddress2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtAddress2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAddress2FocusLost(evt);
            }
        });
        txtAddress2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAddress2KeyPressed(evt);
            }
        });

        Panel1.add(txtAddress2);
        txtAddress2.setBounds(170, 220, 200, 19);

        lblCity.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCity.setText("City :");
        Panel1.add(lblCity);
        lblCity.setBounds(30, 280, 135, 15);

        txtCity.setName("PARTY_CODE");
        txtCity.setNextFocusableComponent(txtPincode);
        txtCity.setEnabled(false);
        txtCity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCityFocusGained(evt);
            }
        });

        Panel1.add(txtCity);
        txtCity.setBounds(170, 280, 200, 19);

        lblPanNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPanNo.setText("PAN No. :");
        Panel1.add(lblPanNo);
        lblPanNo.setBounds(320, 190, 135, 15);

        lblAddress4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAddress4.setText("Amend Reason :");
        Panel1.add(lblAddress4);
        lblAddress4.setBounds(30, 50, 135, 15);

        txtAmendReason.setName("AMEND_REASON");
        txtAmendReason.setNextFocusableComponent(txtPartyCode);
        txtAmendReason.setVerifyInputWhenFocusTarget(false);
        txtAmendReason.setEnabled(false);
        txtAmendReason.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAmendReasonActionPerformed(evt);
            }
        });
        txtAmendReason.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtAmendReasonFocusGained(evt);
            }
        });

        Panel1.add(txtAmendReason);
        txtAmendReason.setBounds(170, 50, 410, 19);

        lblAddressOld.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAddressOld.setText("Address Old :");
        Panel1.add(lblAddressOld);
        lblAddressOld.setBounds(30, 110, 135, 15);

        txtAddressOld.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        txtAddressOld.setEditable(false);
        txtAddressOld.setEnabled(false);
        txtAddressOld.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtAddressOldFocusGained(evt);
            }
        });

        Panel1.add(txtAddressOld);
        txtAddressOld.setBounds(170, 110, 220, 70);

        lblAmendID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAmendID.setText("Amend ID :");
        Panel1.add(lblAmendID);
        lblAmendID.setBounds(30, 20, 135, 15);

        lblPanDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPanDate.setText("PAN Date :");
        Panel1.add(lblPanDate);
        lblPanDate.setBounds(320, 220, 135, 15);

        txtPanDate.setName("PARTY_CODE");
        txtPanDate.setNextFocusableComponent(cmdNext1);
        txtPanDate.setEnabled(false);
        txtPanDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPanDateFocusGained(evt);
            }
        });

        Panel1.add(txtPanDate);
        txtPanDate.setBounds(460, 220, 140, 19);

        Header.addTab("Header", Panel1);

        Tab2.setLayout(null);

        Tab2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Hierarchy :");
        Tab2.add(jLabel31);
        jLabel31.setBounds(30, 18, 65, 15);

        cmbHierarchy.setNextFocusableComponent(txtFrom);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });

        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 14, 184, 24);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("From :");
        Tab2.add(jLabel32);
        jLabel32.setBounds(43, 52, 40, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setNextFocusableComponent(txtFromRemarks);
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 50, 182, 19);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel35.setText("Remarks :");
        Tab2.add(jLabel35);
        jLabel35.setBounds(19, 80, 65, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setNextFocusableComponent(cmdFromRemarksBig);
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 78, 468, 19);

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Your Action :");
        Tab2.add(jLabel36);
        jLabel36.setBounds(5, 120, 80, 15);

        jPanel7.setLayout(null);

        jPanel7.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel7.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel7.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel7.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.setEnabled(false);
        jPanel7.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel7);
        jPanel7.setBounds(88, 120, 182, 100);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Send To :");
        Tab2.add(jLabel33);
        jLabel33.setBounds(25, 232, 60, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });

        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(88, 228, 184, 24);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Remarks :");
        Tab2.add(jLabel34);
        jLabel34.setBounds(20, 264, 65, 15);

        txtToRemarks.setNextFocusableComponent(cmdBack1);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });

        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(88, 260, 516, 19);

        cmdBack1.setText("<< Back");
        cmdBack1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack1ActionPerformed(evt);
            }
        });

        Tab2.add(cmdBack1);
        cmdBack1.setBounds(520, 320, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.setNextFocusableComponent(OpgApprove);
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(559, 77, 33, 21);

        Header.addTab("Approval", Tab2);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel26.setText("Document Approval Status");
        jPanel6.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 14);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel6.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 614, 144);

        lblDocumentHistory.setFont(new java.awt.Font("Tahoma", 1, 11));
        lblDocumentHistory.setText("Document Update History");
        jPanel6.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 191, 182, 14);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel6.add(jScrollPane3);
        jScrollPane3.setBounds(13, 207, 473, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        jPanel6.add(cmdViewHistory);
        cmdViewHistory.setBounds(498, 242, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        jPanel6.add(cmdNormalView);
        cmdNormalView.setBounds(498, 273, 132, 24);

        cmdPreviewA.setText("Preview Report");
        jPanel6.add(cmdPreviewA);
        cmdPreviewA.setBounds(498, 209, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        jPanel6.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(498, 305, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel6.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(500, 340, 129, 19);

        jPanel6.add(jTextArea1);
        jTextArea1.setBounds(10, 10, 611, 141);

        Header.addTab("Status", jPanel6);

        getContentPane().add(Header);
        Header.setBounds(0, 70, 654, 400);
        Header.getAccessibleContext().setAccessibleName("Header");
        Header.getAccessibleContext().setAccessibleDescription("Header");

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(4, 470, 650, 23);

    }//GEN-END:initComponents

    private void txtAddressOldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAddressOldFocusGained
        // TODO add your handling code here:
        ShowMessage("Copy Address with Ctrl + C...");
    }//GEN-LAST:event_txtAddressOldFocusGained

    private void txtPanDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPanDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Pan Date...");
    }//GEN-LAST:event_txtPanDateFocusGained

    private void txtPincodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPincodeFocusLost
        // TODO add your handling code here:
        String AddDisplay=null;
        AddDisplay=txtAddress1.getText() + txtAddress2.getText() + txtAddress3.getText() ;
        System.out.println("Entered:" + AddDisplay);
        //txtMerge.setText(AddDisplay);
        //String disp=txtMerge.getText();
        //System.out.println("Merged :" + disp);
    }//GEN-LAST:event_txtPincodeFocusLost

    private void txtPanNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPanNoFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Pan No...");
    }//GEN-LAST:event_txtPanNoFocusGained

    private void txtPincodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPincodeFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Pincode...");
    }//GEN-LAST:event_txtPincodeFocusGained

    private void txtCityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCityFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter City...");
    }//GEN-LAST:event_txtCityFocusGained

    private void txtAddress3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAddress3FocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Address 3...");
    }//GEN-LAST:event_txtAddress3FocusGained

    private void txtAddress1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAddress1FocusGained
        // TODO add your handling code here:
       ShowMessage("Enter Address 1...");
    }//GEN-LAST:event_txtAddress1FocusGained

    private void txtAmendReasonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAmendReasonActionPerformed
        // TODO add your handling code here:
        txtAmendReason.requestFocus();
    }//GEN-LAST:event_txtAmendReasonActionPerformed

    private void txtAmendReasonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAmendReasonFocusGained
        // TODO add your handling code here:
      ShowMessage("Ready...");  
    }//GEN-LAST:event_txtAmendReasonFocusGained
    
    private void txtAddress2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAddress2FocusLost
        
    }//GEN-LAST:event_txtAddress2FocusLost
    
    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
        // TODO add your handling code here:
        try{
            if(!txtPartyCode.getText().equals("")){
                    ResultSet rsData = data.getResult("SELECT PARTY_CODE,PARTY_NAME,ADDRESS,PAN_NO,PAN_DATE,CITY,PINCODE FROM D_FIN_PARTY_MASTER WHERE PARTY_CODE='"+txtPartyCode.getText().trim()+"' ",FinanceGlobal.FinURL);
                    rsData.first();
                    txtPartyName.setText(rsData.getString("PARTY_NAME"));
                    String add1= rsData.getString("ADDRESS") + " " + rsData.getString("CITY") + "-" +rsData.getString("PINCODE");
                    txtAddressOld.setText(add1);
                    txtPanNo.setText(rsData.getString("PAN_NO"));
                    txtPanDate.setText(rsData.getString("PAN_DATE"));
                    txtPartyCode.setEnabled(false);
                    txtAddress1.requestFocus();
            }
        }catch(Exception e){
            
        }
       
    }//GEN-LAST:event_txtPartyCodeFocusLost
    
    private void txtAddress2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAddress2KeyPressed
        
    }//GEN-LAST:event_txtAddress2KeyPressed
    
    private void txtAddress2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAddress2FocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Address 2...");
    }//GEN-LAST:event_txtAddress2FocusGained
    
    private void txtPartyCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusGained
        // TODO add your handling code here:
        ShowMessage("Press F1...");
    }//GEN-LAST:event_txtPartyCodeFocusGained
    
    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        // TODO add your handling code here:
       try {
            if(EditMode==EITLERPGLOBAL.ADD || EditMode==EITLERPGLOBAL.EDIT) {
                if(evt.getKeyCode()==112) //F1 Key pressed
                {
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT DISTINCT(PARTY_CODE),PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND " +
                              "MAIN_ACCOUNT_CODE IN('115012','115029','115036','115153','115160','115177','115218','115232') " +
                              "ORDER BY PARTY_CODE,MAIN_ACCOUNT_CODE";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=2;
                    aList.UseSpecifiedConn=true;
                    aList.dbURL=FinanceGlobal.FinURL;
                    
                    if(aList.ShowLOV()) {
                        txtPartyCode.setText(aList.ReturnVal);
                        ResultSet rsData = data.getResult("SELECT PARTY_CODE,PARTY_NAME,ADDRESS,CITY,PINCODE,PAN_NO,PAN_DATE FROM D_FIN_PARTY_MASTER WHERE PARTY_CODE='"+aList.ReturnVal+"' ",FinanceGlobal.FinURL);
                        rsData.first();
                        txtPartyCode.setText(rsData.getString("PARTY_CODE"));
                        txtPartyName.setText(rsData.getString("PARTY_NAME"));
                        //String merge =rsData.getString("ADDRESS"); // + rsData.getString("CITY") + rsData.getString("PINCODE"));
                        String add= rsData.getString("ADDRESS") + " " + rsData.getString("CITY") + "-" +rsData.getString("PINCODE");
                        txtAddressOld.setText(add);
                        //System.out.println(add);
                        txtPanNo.setText(rsData.getString("PAN_NO"));
                        String Pan = rsData.getString("PAN_NO");
                        //System.out.println(Pan);
                        txtPanDate.setText(rsData.getString("PAN_DATE"));
                        txtPartyCode.setEnabled(false);
                    }  
                }
            }
        } catch (Exception e) {
            
        }
    }//GEN-LAST:event_txtPartyCodeKeyPressed
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter extra Remarks for further Approval person hints ............");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Users list from selection for further approval hierarchy ............");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Hierarchy from given list for Approval ............");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void cmdBack1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack1ActionPerformed
        // TODO add your handling code here:
        Header.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack1ActionPerformed
    
    private void cmdNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext1ActionPerformed
        // TODO add your handling code here:
        Header.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext1ActionPerformed
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        objDepositAmend.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveFirst();
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        objDepositAmend.ShowHistory(EITLERPGLOBAL.gCompanyID, objDepositAmend.getAttribute("AMEND_ID").toString());
        MoveFirst();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if(ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID,clsDepositAmend.ModuleID , txtAmendID.getText())) {
                //objDepositAmend.getAttribute("AMEND_ID").toString();
                cmbSendTo.setEnabled(true);
            }
            else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateFromCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        objDepositAmend.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            //Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
        txtAmendReason.requestFocus();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Header;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel Panel1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JLabel lblAccountCode2;
    private javax.swing.JLabel lblAccountCode3;
    private javax.swing.JLabel lblAddress1;
    private javax.swing.JLabel lblAddress2;
    private javax.swing.JLabel lblAddress3;
    private javax.swing.JLabel lblAddress4;
    private javax.swing.JLabel lblAddressOld;
    private javax.swing.JLabel lblAmendDate;
    private javax.swing.JLabel lblAmendID;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblPanDate;
    private javax.swing.JLabel lblPanNo;
    private javax.swing.JLabel lblPartyCode;
    private javax.swing.JLabel lblPincode;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAddress1;
    private javax.swing.JTextField txtAddress2;
    private javax.swing.JTextField txtAddress3;
    private javax.swing.JTextPane txtAddressOld;
    private javax.swing.JTextField txtAmendDate;
    private javax.swing.JTextField txtAmendID;
    private javax.swing.JTextField txtAmendReason;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtPanDate;
    private javax.swing.JTextField txtPanNo;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtPartyName;
    private javax.swing.JTextField txtPincode;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    private void SetFields(boolean pStat) {
        
        txtAmendID.setEnabled(pStat);
        txtAmendDate.setEnabled(pStat);
        txtAmendReason.setEnabled(pStat);
        txtPartyCode.setEnabled(pStat);
        txtPartyName.setEnabled(pStat);
        txtAddressOld.setEnabled(pStat);
        txtAddress1.setEnabled(pStat);
        txtAddress2.setEnabled(pStat);
        txtAddress3.setEnabled(pStat);
        txtCity.setEnabled(pStat);
        txtPincode.setEnabled(pStat);
        txtPanNo.setEnabled(pStat);
        txtPanDate.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
    }
    
    private void ClearFields() {
        
        txtAmendID.setText("");
        txtAmendDate.setText("");
        txtAmendReason.setText("");
        txtPartyCode.setText("");
        txtPartyName.setText("");
        txtAddressOld.setText("");
        txtAddress1.setText("");
        txtAddress2.setText("");
        txtAddress3.setText("");
        txtCity.setText("");
        txtPincode.setText("");
        txtPanNo.setText("");
        txtPanDate.setText("");
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                if(objDepositAmend.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(objDepositAmend.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(objDepositAmend.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
        }
        catch(Exception e) {
        }
        //============================================//
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=clsDepositAmend.ModuleID;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        ClearFields();
        
        txtAmendID.setText(objDepositAmend.getAttribute("AMEND_ID").getString());
        txtAmendDate.setText(EITLERPGLOBAL.formatDate((String)objDepositAmend.getAttribute("AMEND_DATE").getObj()));
        txtAmendReason.setText((String)objDepositAmend.getAttribute("AMEND_REASON").getObj());
        txtPartyCode.setText((String)objDepositAmend.getAttribute("PARTY_CODE").getObj());
        txtPartyName.setText(objDepositAmend.getAttribute("PARTY_NAME").getString());
        txtAddress1.setText(objDepositAmend.getAttribute("ADDRESS1").getString());
        txtAddress2.setText(objDepositAmend.getAttribute("ADDRESS2").getString());
        txtAddress3.setText(objDepositAmend.getAttribute("ADDRESS3").getString());
        txtCity.setText(objDepositAmend.getAttribute("CITY").getString());
        txtPincode.setText(objDepositAmend.getAttribute("PINCODE").getString());
        txtPanNo.setText(objDepositAmend.getAttribute("PAN_NO").getString());
        txtPanDate.setText(EITLERPGLOBAL.formatDate(objDepositAmend.getAttribute("PAN_DATE").getString()));
        
        
        
        //SetupApproval();
       
       EITLERPGLOBAL.setComboIndex(cmbHierarchy,objDepositAmend.getAttribute("HIERARCHY_ID").getString());
        
        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List=new HashMap();
        String DocNo=objDepositAmend.getAttribute("AMEND_ID").getString();
        List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, clsDepositAmend.ModuleID , DocNo);
        for(int i=1;i<=List.size();i++) {
            clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
            Object[] rowData=new Object[7];
            
            rowData[0]=Integer.toString(i);
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
            rowData[2]=ObjFlow.getAttribute("STATUS").getString();
            rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
            rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
            rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
            rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
            
            DataModelA.addRow(rowData);
        }
        //============================================================//
        
        //=========================== Audit Trail ===========================//
        FormatGridHS();
        
        HashMap History=clsDepositAmend.getHistoryList(EITLERPGLOBAL.gCompanyID, objDepositAmend.getAttribute("AMEND_ID").getString());
        for(int i=1;i<=History.size();i++) {
            
            clsDepositAmend ObjHistory=(clsDepositAmend)History.get(Integer.toString(i));
            Object[] rowData=new Object[5];
            
            rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
            rowData[1]=ObjHistory.getAttribute("UPDATED_BY").getString();
            rowData[2]=ObjHistory.getAttribute("ENTRY_DATE").getString();
            
            String ApprovalStatus="";
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus="Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus="Final Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus="Waiting";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus="Rejected";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus="Pending";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus="Skiped";
            }
            
            rowData[3]=ApprovalStatus;
            rowData[4]=ObjHistory.getAttribute("APPROVER_REMARKS").getString();
            
            DataModelHS.addRow(rowData);
        }
        //=========================== Audit Trail Over ===========================//*/
    }
    
    //Sets data to the Class Object
    private void SetData() {
        
        objDepositAmend.setAttribute("FFNO",FFNo);
        objDepositAmend.setAttribute("AMEND_ID",txtAmendID.getText());
        objDepositAmend.setAttribute("AMEND_DATE",txtAmendDate.getText());
        objDepositAmend.setAttribute("AMEND_REASON",txtAmendReason.getText());
        objDepositAmend.setAttribute("PARTY_CODE",txtPartyCode.getText());
        objDepositAmend.setAttribute("PARTY_NAME",txtPartyName.getText());
        objDepositAmend.setAttribute("ADDRESS1",txtAddress1.getText());
        objDepositAmend.setAttribute("ADDRESS2",txtAddress2.getText());
        objDepositAmend.setAttribute("ADDRESS3",txtAddress3.getText());
        objDepositAmend.setAttribute("CITY",txtCity.getText());
        objDepositAmend.setAttribute("PINCODE",txtPincode.getText().trim());
        objDepositAmend.setAttribute("PAN_NO",txtPanNo.getText());
        objDepositAmend.setAttribute("PAN_DATE",txtPanDate.getText());
        
        //----- Update Approval Specific Fields -----------//
        objDepositAmend.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        objDepositAmend.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        objDepositAmend.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        objDepositAmend.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            objDepositAmend.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            objDepositAmend.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            objDepositAmend.setAttribute("APPROVAL_STATUS","R");
            objDepositAmend.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            objDepositAmend.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
    }
    
    private void SetMenuForRights() {
        
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,21061)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,21062)) {
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,21063)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11044)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }*/
    }
    
    private void Add() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        //Now Generate new document no.
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=clsDepositAmend.ModuleID;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo = aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtAmendID.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsDepositAmend.ModuleID , FFNo,  false));
            txtAmendDate.setText(EITLERPGLOBAL.getCurrentDate());
                       
            lblTitle.setText("Desposit Master Updation - " + txtAmendID.getText());
            lblTitle.setBackground(Color.BLUE);
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        String AmendID=objDepositAmend.getAttribute("AMEND_ID").getString();
        
        if(objDepositAmend.IsEditable(EITLERPGLOBAL.gCompanyID, AmendID, EITLERPGLOBAL.gNewUserID)) {
            
            EITLERPGLOBAL.ChangeCursorToWait(this);
            
            EditMode=EITLERPGLOBAL.EDIT;
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            SetupApproval();
            //----------------//
            
            if(ApprovalFlow.IsCreator(clsDepositAmend.ModuleID ,AmendID)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 2106,21062)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            SetupApproval();
            DisableToolbar();
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
   /* private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        if(objDepositAmend.Delete(EITLERPGLOBAL.gNewUserID)) {
            MoveLast();
        }
    }*/
    
    private void Save() {
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        if(!Validate()) {
            EITLERPGLOBAL.ChangeCursorToDefault(this);
            return;
        }
        
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(objDepositAmend.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+objDepositAmend.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
                if(EditMode==EITLERPGLOBAL.EDIT) {
            if(objDepositAmend.Update()) {
                //Nothing to do
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+objDepositAmend.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
        
        ShowMessage("Ready...");
        lblTitle.setText("Deposit Master Updation");
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
        ShowMessage("Ready...");
    }
    
   private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Finance.frmDepositAmendFind",true);
        frmDepositAmendFind ObjReturn= (frmDepositAmendFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!objDepositAmend.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveFirst();
        }
    }
    
    public void FindEx(int pCompanyID, String pDocNo) {
        objDepositAmend.Filter(" WHERE COMPANY_ID="+pCompanyID+" AND AMEND_ID='"+pDocNo+"' ", pCompanyID);
        objDepositAmend.MoveFirst();
        DisplayData();
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objDepositAmend.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objDepositAmend.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objDepositAmend.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objDepositAmend.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
    }
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    private void SetupApproval() {
        
        if(cmbHierarchy.getItemCount()>1) {
            cmbHierarchy.setEnabled(true);
        }
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
           
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, clsDepositAmend.ModuleID , objDepositAmend.getAttribute("AMEND_ID").getString());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,clsDepositAmend.ModuleID ,FromUserID,objDepositAmend.getAttribute("AMEND_ID").getString());
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,objDepositAmend.getAttribute("HIERARCHY_ID").getInt());
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, clsDepositAmend.ModuleID ,objDepositAmend.getAttribute("AMEND_ID").toString());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e) {
        }
    }
    
    private void GenerateRejectedUserCombo() {
        HashMap List=new HashMap();
        HashMap DeptList=new HashMap();
        HashMap DeptUsers=new HashMap();
        
        //----- Generate cmbType ------- //
        cmbToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            
            /// NEW CODE ///
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, clsDepositAmend.ModuleID , objDepositAmend.getAttribute("AMEND_ID").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, clsDepositAmend.ModuleID, objDepositAmend.getAttribute("AMEND_ID").getString(), ObjUser.getAttribute("USER_ID").getInt() , EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(( ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            }
            else {
                if((ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///
        }
        //------------------------------ //
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, clsDepositAmend.ModuleID , objDepositAmend.getAttribute("AMEND_ID").getString());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
    }
    
    private void GenerateCombos() {
        try {
            //Generates Combo Boxes
            HashMap List=new HashMap();
            String strCondition="";
            
            cmbHierarchyModel=new EITLComboModel();
            cmbHierarchy.removeAllItems();
            cmbHierarchy.setModel(cmbHierarchyModel);
            

            List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsDepositAmend.ModuleID);
            
            if(EditMode==EITLERPGLOBAL.EDIT) {
                List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsDepositAmend.ModuleID );
            }
            for(int i=1;i<=List.size();i++) {
                clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
                ComboData aData=new ComboData();
                aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
                aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
                cmbHierarchyModel.addElement(aData);
            }
        }
        catch(Exception e) {
        }
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Panel1.getComponentCount()-1;i++) {
            if(Panel1.getComponent(i).getName()!=null) {
                
                FieldName=Panel1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Panel1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//
    }
    
    private boolean Validate() {
        if(txtAmendReason.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter the Amendment Reason");
            return false;
        }
       /* if (!txtReceiptNo.getText().trim().equals("")) {
            String OldReceiptNo = txtReceiptNo.getText().trim();
            String PartyCode = txtSubAccountCode.getText().trim();
            String OldMaturityDate = EITLERPGLOBAL.formatDateDB(txtMaturityDate.getText().trim());
            if(!EITLERPGLOBAL.isWithinDate(OldMaturityDate,EITLERPGLOBAL.FinYearFrom)) {
                String MainAccountCode = data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+OldReceiptNo+"' AND PARTY_CODE='"+PartyCode+"' ",FinanceGlobal.FinURL);
                if(MainAccountCode.equals("115012") || MainAccountCode.equals("115153") || MainAccountCode.equals("115029") || MainAccountCode.equals("115177")) {
                    JOptionPane.showMessageDialog(null,"This receipt was matured in previous year.\nPlease transfer this receipt to unclaimed account then refund this receipt.");
                    return false;
                }
            }
        }*/
        
        if(txtPartyCode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter The Party Code.");
            return false;
        }
        
        
        if(txtAddress1.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter The Address 1");
            return false;
        }
        
        
        if(txtAddress2.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter The Address 2");
            return false;
        }
        
        
        if(txtAddress3.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter The Address 3");
            return false;
        }
        
        if(txtCity.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter The City");
            return false;
        }
        
        if(txtPincode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter The Pincode");
            return false;
        }
        
        if(txtPanNo.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter The Pan No.");
            return false;
        }
        
        
         if(txtPanDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter The Pan Date in DD/MM/YYYY Format.");
            return false;
        } else if(!(EITLERPGLOBAL.isDate(txtPanDate.getText().trim()))) {
            JOptionPane.showMessageDialog(null,"Please Enter The Pan Date in DD/MM/YYYY Format.");
            return false;
        }
        
        if(OpgReject.isSelected()) {
            if(txtToRemarks.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Please Enter remarks for rejection.");
                return false;
            }
        }
        
        if(OpgReject.isSelected()) {
            if(txtToRemarks.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Please Enter remarks for rejection.");
                return false;
            }
        }
        
        /*if(txtRefundDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter The Refund Date in DD/MM/YYYY Format.");
            return false;
        } else if(!(EITLERPGLOBAL.isDate(txtRefundDate.getText().trim()))) {
            JOptionPane.showMessageDialog(null,"Please Enter The Refund Date in DD/MM/YYYY Format.");
            return false;
        }
        
        if(java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(txtRefundDate.getText().trim())).before(java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(txtMaturityDate.getText().trim())))) {
            JOptionPane.showMessageDialog(null,"Refund Date must not before Maturity Date.");
            return false;
        }
        
        if(txtChequeNo.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter The Cheque No.");
            return false;
        }
        
        if(txtChequeDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter The Refund Date in DD/MM/YYYY Format.");
            return false;
        } else if(!(EITLERPGLOBAL.isDate(txtChequeDate.getText().trim()))) {
            JOptionPane.showMessageDialog(null,"Please Enter The Cheque Date in DD/MM/YYYY Format.");
            return false;
        }
        
        if(java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(txtChequeDate.getText().trim())).before(java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(txtMaturityDate.getText().trim())))) {
            JOptionPane.showMessageDialog(null,"Cheque Date must not before Maturity Date.");
            return false;
        }
        
        
        
        if(!OpgReject.isSelected()) {
            int Result = clsVoucher.ValidateVoucherEntry(EditMode,EITLERPGLOBAL.formatDateDB(txtRefundDate.getText().trim()));
            if(Result==EITLERPGLOBAL.ADD) {
                JOptionPane.showMessageDialog(this,"Month is Closed. \nYou can not create voucher(s).");
                return false;
            } else if(Result==EITLERPGLOBAL.EDIT) {
                JOptionPane.showMessageDialog(this,"Month is Closed. \nYou can not Approve / Final Approve voucher(s).\n Either you have to cancel voucher or change voucher date.");
                return false;
            }
        }*/
        return true;
    }
}