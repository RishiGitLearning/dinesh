/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP.Finance;

/**
 *
 * @author  nitin
 */
/*<APPLET CODE=frmInward.class HEIGHT=500 WIDTH=665></APPLET>*/

import javax.swing.*;
import java.awt.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import javax.swing.text.*;
import EITLERP.Utils.*;
import java.sql.*;
import java.net.*;
import EITLERP.*;
import EITLERP.Finance.*;


public class frmPolicyMaster extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsPolicyMaster objPolicyMst;
    
    private boolean Updating=false;
    
    private String theDocNo="";
    public String InvoiceType = "";
    public String DeductionInfo = "";
    
    private EITLTableModel DataModelA;
    private EITLTableModel DataModelHS;
    private EITLTableModel DataModel;
    private EITLTableModel DataModelDtl;
    private EITLTableModel DataModelPartyList;
    private EITLTableModel DataModelTurnover;
    private EITLTableModel DataModelSeasonSlab;
    private EITLTableModel DataModelDeduInfo;
    
    private EITLTableCellRenderer Rend=new EITLTableCellRenderer();
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    
    private EITLComboModel cmbDiscountTypeModel;
    private EITLComboModel cmbDiscount_ApplicabilityModel;
    private EITLComboModel cmbDiscount_perModel;
    private EITLComboModel cmbPartyTypeModel;
    private EITLComboModel cmbPeriodBaseModel;
    private EITLComboModel cmbTurnover_CalcModel;
    private EITLComboModel cmbInvoiceMainTypeModel;
    private EITLComboModel cmbCreditNoteTypeModel;
    
    private int SelHierarchyID=0;
    private int lnFromID=0;
    
    private boolean IsGenerating=false;
    
    public frmPendingApprovals frmPA;
    
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    /** Creates new form frmTemplate */
    public frmPolicyMaster() {
        
        setSize(810,700);
        initComponents();
        
        GenerateCombos();
        FormatGrid();
        FormatGridDetail();
        FormatPartyListGrid();
        FormatTurnoverSlabsDetail();
        
        int type = EITLERPGLOBAL.getComboCode(cmbInvoiceMainType);
        
        if (type == 1) {
            GenerateGrid(" AND INVOICE_TYPE_ID NOT IN ('06') ");
        }
        else {
            GenerateGrid(" AND INVOICE_TYPE_ID NOT IN ('F04','06') ");
        }
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        cmbTurnover_Calc.enable(false);
        cmbDiscountType.enable(false);
        cmbDiscount_Applicability.enable(false);
        cmbDiscount_per.enable(false);
        cmbPartyType.enable(false);
        cmbPeriodBase.enable(false);
        cmbCreditNoteType.enable(false);
        
        
        objPolicyMst=new clsPolicyMaster();
        
        SetMenuForRights();
        
        if(getName().equals("Link")) {
            
        }
        else {
            
            if(objPolicyMst.LoadData(EITLERPGLOBAL.gCompanyID)) {
                objPolicyMst.MoveFirst();
                DisplayData();
                SetMenuForRights();
                SetFields(false);
                ShowMessage("Ready ........");
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+objPolicyMst.LastError);
            }
        }
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        txtAuditRemarks = new javax.swing.JTextField();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        cmdCopy = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Header = new javax.swing.JTabbedPane();
        Panel1 = new javax.swing.JPanel();
        jTextArea2 = new javax.swing.JTextArea();
        txtPolicyName = new javax.swing.JTextField();
        lblSubCode = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTextArea3 = new javax.swing.JTextArea();
        lblAccountCode2 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        lblAccountCode3 = new javax.swing.JLabel();
        lblAccountID = new javax.swing.JLabel();
        txtPolicyID = new javax.swing.JTextField();
        lblAccountName = new javax.swing.JLabel();
        lblAccountName1 = new javax.swing.JLabel();
        lblSubCode1 = new javax.swing.JLabel();
        lblSubCode4 = new javax.swing.JLabel();
        lblSubCode5 = new javax.swing.JLabel();
        lblSubCode6 = new javax.swing.JLabel();
        lblSubCode7 = new javax.swing.JLabel();
        txtEffectiveDate = new javax.swing.JTextField();
        txtExpiryDate = new javax.swing.JTextField();
        cmbPeriodBase = new javax.swing.JComboBox();
        cmbDiscountType = new javax.swing.JComboBox();
        cmbInvoiceMainType = new javax.swing.JComboBox();
        cmbDiscount_Applicability = new javax.swing.JComboBox();
        cmbTurnover_Calc = new javax.swing.JComboBox();
        lblAccountID1 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        cmdRemarksBig = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdSelectAll = new javax.swing.JButton();
        cmdClearAll = new javax.swing.JButton();
        lblSubCode9 = new javax.swing.JLabel();
        panelparty = new javax.swing.JPanel();
        lblSpecificParty = new javax.swing.JLabel();
        scrollpanelparty = new javax.swing.JScrollPane();
        TableDtl = new javax.swing.JTable();
        cmdAddDtl = new javax.swing.JButton();
        cmdRemoveDtl = new javax.swing.JButton();
        txtApp_AmountLimit = new javax.swing.JTextField();
        lblSubCode10 = new javax.swing.JLabel();
        txtPeriod = new javax.swing.JTextField();
        lblSubCode2 = new javax.swing.JLabel();
        cmbPartyType = new javax.swing.JComboBox();
        lblSubCode8 = new javax.swing.JLabel();
        lblSubCode13 = new javax.swing.JLabel();
        cmbCreditNoteType = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TablePartyList = new javax.swing.JTable();
        cmdPartySelectAll = new javax.swing.JButton();
        cmdPartyClearAll = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        scrollpanelTurnOver = new javax.swing.JScrollPane();
        TableTurnoverSlabs = new javax.swing.JTable();
        cmdTurnoverAddDtl = new javax.swing.JButton();
        cmdTurnoverRemoveDtl = new javax.swing.JButton();
        scrollpanelSeason = new javax.swing.JScrollPane();
        TableSeasonSlabs = new javax.swing.JTable();
        cmdSeasonAddDtl = new javax.swing.JButton();
        cmdSeasonRemoveDtl = new javax.swing.JButton();
        lblSpecificParty1 = new javax.swing.JLabel();
        panelparty1 = new javax.swing.JPanel();
        lblSpecificParty2 = new javax.swing.JLabel();
        panelparty2 = new javax.swing.JPanel();
        lblSubCode3 = new javax.swing.JLabel();
        cmbDiscount_per = new javax.swing.JComboBox();
        txtFlatPercent = new javax.swing.JTextField();
        lblSubCode11 = new javax.swing.JLabel();
        lblSubCode12 = new javax.swing.JLabel();
        panelparty3 = new javax.swing.JPanel();
        scrollpanelDeduInfo = new javax.swing.JScrollPane();
        TableDeduInfo = new javax.swing.JTable();
        cmdDeduInfoAddDtl = new javax.swing.JButton();
        cmdDeduInfoRemoveDtl = new javax.swing.JButton();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack2 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        txtAuditRemarks.setEnabled(false);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        cmdCopy.setFont(new java.awt.Font("Verdana", 0, 10));
        cmdCopy.setText("Copy Policy");
        cmdCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCopyActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCopy);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText("POLICY MASTER");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 800, 25);

        Panel1.setLayout(null);

        Panel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Panel1MouseClicked(evt);
            }
        });

        Panel1.add(jTextArea2);
        jTextArea2.setBounds(177, 29, 0, 15);

        txtPolicyName.setName("PARTY_CODE");
        txtPolicyName.setNextFocusableComponent(txtEffectiveDate);
        txtPolicyName.setEnabled(false);
        Panel1.add(txtPolicyName);
        txtPolicyName.setBounds(160, 34, 580, 19);

        lblSubCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode.setText("Policy Name");
        lblSubCode.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode);
        lblSubCode.setBounds(0, 34, 143, 15);

        jPanel2.setLayout(null);

        jPanel2.add(jTextArea3);
        jTextArea3.setBounds(177, 29, 0, 15);

        lblAccountCode2.setText("Account Code");
        jPanel2.add(lblAccountCode2);
        lblAccountCode2.setBounds(15, 20, 90, 15);

        jPanel2.add(jTextField3);
        jTextField3.setBounds(119, 18, 80, 19);

        jPanel2.add(jTextField4);
        jTextField4.setBounds(119, 49, 80, 19);

        lblAccountCode3.setText("Account Code");
        jPanel2.add(lblAccountCode3);
        lblAccountCode3.setBounds(15, 51, 90, 15);

        Panel1.add(jPanel2);
        jPanel2.setBounds(0, 0, 0, 0);

        lblAccountID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountID.setText("Policy ID");
        lblAccountID.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblAccountID);
        lblAccountID.setBounds(10, 10, 143, 15);

        txtPolicyID.setName("PARTY_ID");
        txtPolicyID.setNextFocusableComponent(txtPolicyName);
        txtPolicyID.setEnabled(false);
        Panel1.add(txtPolicyID);
        txtPolicyID.setBounds(160, 10, 120, 19);

        lblAccountName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountName.setText("Discount Type");
        lblAccountName.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblAccountName);
        lblAccountName.setBounds(10, 120, 143, 15);

        lblAccountName1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountName1.setText("Discount Applicability");
        lblAccountName1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblAccountName1);
        lblAccountName1.setBounds(10, 150, 143, 15);

        lblSubCode1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode1.setText("Party Type");
        lblSubCode1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode1);
        lblSubCode1.setBounds(330, 120, 100, 15);

        lblSubCode4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode4.setText("Period Base");
        lblSubCode4.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode4);
        lblSubCode4.setBounds(330, 180, 100, 15);

        lblSubCode5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode5.setText("Effective Date");
        lblSubCode5.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode5);
        lblSubCode5.setBounds(10, 60, 143, 15);

        lblSubCode6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode6.setText("Expiry Date");
        lblSubCode6.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode6);
        lblSubCode6.setBounds(330, 60, 100, 15);

        lblSubCode7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode7.setText("Turnover Calculation");
        lblSubCode7.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode7);
        lblSubCode7.setBounds(10, 180, 143, 15);

        txtEffectiveDate.setName("PARTY_ID");
        txtEffectiveDate.setEnabled(false);
        Panel1.add(txtEffectiveDate);
        txtEffectiveDate.setBounds(160, 60, 120, 19);

        txtExpiryDate.setName("PARTY_ID");
        txtExpiryDate.setNextFocusableComponent(txtPeriod);
        txtExpiryDate.setEnabled(false);
        Panel1.add(txtExpiryDate);
        txtExpiryDate.setBounds(440, 60, 120, 19);

        Panel1.add(cmbPeriodBase);
        cmbPeriodBase.setBounds(440, 180, 150, 24);

        Panel1.add(cmbDiscountType);
        cmbDiscountType.setBounds(160, 120, 150, 24);

        cmbInvoiceMainType.setNextFocusableComponent(cmbCreditNoteType);
        cmbInvoiceMainType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbInvoiceMainTypeItemStateChanged(evt);
            }
        });

        Panel1.add(cmbInvoiceMainType);
        cmbInvoiceMainType.setBounds(160, 90, 150, 24);

        cmbDiscount_Applicability.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDiscount_ApplicabilityItemStateChanged(evt);
            }
        });

        Panel1.add(cmbDiscount_Applicability);
        cmbDiscount_Applicability.setBounds(160, 150, 150, 24);

        Panel1.add(cmbTurnover_Calc);
        cmbTurnover_Calc.setBounds(160, 180, 150, 24);

        lblAccountID1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountID1.setText("Remarks");
        lblAccountID1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblAccountID1);
        lblAccountID1.setBounds(10, 210, 143, 15);

        txtRemarks.setName("REMARKS");
        txtRemarks.setNextFocusableComponent(Table);
        txtRemarks.setEnabled(false);
        Panel1.add(txtRemarks);
        txtRemarks.setBounds(160, 210, 580, 19);

        cmdRemarksBig.setText("...");
        cmdRemarksBig.setNextFocusableComponent(Table);
        cmdRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemarksBigActionPerformed(evt);
            }
        });

        Panel1.add(cmdRemarksBig);
        cmdRemarksBig.setBounds(750, 210, 33, 21);

        jPanel4.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        Panel1.add(jPanel4);
        jPanel4.setBounds(130, 245, 655, 6);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table);

        Panel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 260, 670, 110);

        cmdSelectAll.setMnemonic('A');
        cmdSelectAll.setText("Select All");
        cmdSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSelectAllActionPerformed(evt);
            }
        });

        Panel1.add(cmdSelectAll);
        cmdSelectAll.setBounds(690, 280, 100, 25);

        cmdClearAll.setMnemonic('L');
        cmdClearAll.setText("Clear All");
        cmdClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdClearAllActionPerformed(evt);
            }
        });

        Panel1.add(cmdClearAll);
        cmdClearAll.setBounds(690, 320, 100, 25);

        lblSubCode9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSubCode9.setText("Invoice Types");
        lblSubCode9.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode9);
        lblSubCode9.setBounds(20, 240, 100, 15);

        panelparty.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        Panel1.add(panelparty);
        panelparty.setBounds(120, 385, 655, 6);

        lblSpecificParty.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSpecificParty.setText("Specific Parties");
        lblSpecificParty.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSpecificParty);
        lblSpecificParty.setBounds(10, 380, 110, 15);

        TableDtl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Title 1"
            }
        ));
        TableDtl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableDtlKeyPressed(evt);
            }
        });

        scrollpanelparty.setViewportView(TableDtl);

        Panel1.add(scrollpanelparty);
        scrollpanelparty.setBounds(10, 400, 670, 140);

        cmdAddDtl.setFont(new java.awt.Font("Dialog", 0, 10));
        cmdAddDtl.setMnemonic('A');
        cmdAddDtl.setText("Add New");
        cmdAddDtl.setEnabled(false);
        cmdAddDtl.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmdAddDtlItemStateChanged(evt);
            }
        });
        cmdAddDtl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddDtlActionPerformed(evt);
            }
        });

        Panel1.add(cmdAddDtl);
        cmdAddDtl.setBounds(700, 450, 80, 20);

        cmdRemoveDtl.setFont(new java.awt.Font("Dialog", 0, 10));
        cmdRemoveDtl.setMnemonic('R');
        cmdRemoveDtl.setText("Remove");
        cmdRemoveDtl.setEnabled(false);
        cmdRemoveDtl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveDtlActionPerformed(evt);
            }
        });

        Panel1.add(cmdRemoveDtl);
        cmdRemoveDtl.setBounds(700, 480, 80, 20);

        txtApp_AmountLimit.setName("PARTY_ID");
        txtApp_AmountLimit.setEnabled(false);
        Panel1.add(txtApp_AmountLimit);
        txtApp_AmountLimit.setBounds(440, 150, 120, 19);

        lblSubCode10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode10.setText("Period");
        lblSubCode10.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode10);
        lblSubCode10.setBounds(590, 60, 60, 15);

        txtPeriod.setName("PARTY_ID");
        txtPeriod.setNextFocusableComponent(cmbInvoiceMainType);
        txtPeriod.setEnabled(false);
        Panel1.add(txtPeriod);
        txtPeriod.setBounds(660, 60, 80, 19);

        lblSubCode2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode2.setText("Invoice Main Type");
        lblSubCode2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode2);
        lblSubCode2.setBounds(10, 90, 143, 15);

        cmbPartyType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPartyTypeItemStateChanged(evt);
            }
        });

        Panel1.add(cmbPartyType);
        cmbPartyType.setBounds(440, 120, 150, 24);

        lblSubCode8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode8.setText("Amount Limit");
        lblSubCode8.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode8);
        lblSubCode8.setBounds(330, 150, 100, 15);

        lblSubCode13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode13.setText("Credit Note Type");
        lblSubCode13.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode13);
        lblSubCode13.setBounds(310, 90, 120, 15);

        cmbCreditNoteType.setNextFocusableComponent(cmbDiscountType);
        cmbCreditNoteType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCreditNoteTypeItemStateChanged(evt);
            }
        });

        Panel1.add(cmbCreditNoteType);
        cmbCreditNoteType.setBounds(440, 90, 320, 24);

        Header.addTab("Policy Details", Panel1);

        jPanel5.setLayout(null);

        TablePartyList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(TablePartyList);

        jPanel5.add(jScrollPane4);
        jScrollPane4.setBounds(10, 10, 670, 530);

        cmdPartySelectAll.setMnemonic('A');
        cmdPartySelectAll.setText("Select All");
        cmdPartySelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPartySelectAllActionPerformed(evt);
            }
        });

        jPanel5.add(cmdPartySelectAll);
        cmdPartySelectAll.setBounds(690, 30, 100, 25);

        cmdPartyClearAll.setMnemonic('L');
        cmdPartyClearAll.setText("Clear All");
        cmdPartyClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPartyClearAllActionPerformed(evt);
            }
        });

        jPanel5.add(cmdPartyClearAll);
        cmdPartyClearAll.setBounds(690, 70, 100, 25);

        Header.addTab("Party List", jPanel5);

        jPanel1.setLayout(null);

        TableTurnoverSlabs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Title 1"
            }
        ));
        scrollpanelTurnOver.setViewportView(TableTurnoverSlabs);

        jPanel1.add(scrollpanelTurnOver);
        scrollpanelTurnOver.setBounds(10, 100, 670, 130);

        cmdTurnoverAddDtl.setFont(new java.awt.Font("Dialog", 0, 10));
        cmdTurnoverAddDtl.setMnemonic('A');
        cmdTurnoverAddDtl.setText("Add New");
        cmdTurnoverAddDtl.setEnabled(false);
        cmdTurnoverAddDtl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTurnoverAddDtlActionPerformed(evt);
            }
        });

        jPanel1.add(cmdTurnoverAddDtl);
        cmdTurnoverAddDtl.setBounds(700, 140, 80, 20);

        cmdTurnoverRemoveDtl.setFont(new java.awt.Font("Dialog", 0, 10));
        cmdTurnoverRemoveDtl.setMnemonic('R');
        cmdTurnoverRemoveDtl.setText("Remove");
        cmdTurnoverRemoveDtl.setEnabled(false);
        cmdTurnoverRemoveDtl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTurnoverRemoveDtlActionPerformed(evt);
            }
        });

        jPanel1.add(cmdTurnoverRemoveDtl);
        cmdTurnoverRemoveDtl.setBounds(700, 170, 80, 20);

        TableSeasonSlabs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Title 1"
            }
        ));
        TableSeasonSlabs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableSeasonSlabsKeyPressed(evt);
            }
        });

        scrollpanelSeason.setViewportView(TableSeasonSlabs);

        jPanel1.add(scrollpanelSeason);
        scrollpanelSeason.setBounds(10, 260, 670, 130);

        cmdSeasonAddDtl.setFont(new java.awt.Font("Dialog", 0, 10));
        cmdSeasonAddDtl.setMnemonic('A');
        cmdSeasonAddDtl.setText("Add New");
        cmdSeasonAddDtl.setEnabled(false);
        cmdSeasonAddDtl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSeasonAddDtlActionPerformed(evt);
            }
        });

        jPanel1.add(cmdSeasonAddDtl);
        cmdSeasonAddDtl.setBounds(700, 300, 80, 20);

        cmdSeasonRemoveDtl.setFont(new java.awt.Font("Dialog", 0, 10));
        cmdSeasonRemoveDtl.setMnemonic('R');
        cmdSeasonRemoveDtl.setText("Remove");
        cmdSeasonRemoveDtl.setEnabled(false);
        cmdSeasonRemoveDtl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSeasonRemoveDtlActionPerformed(evt);
            }
        });

        jPanel1.add(cmdSeasonRemoveDtl);
        cmdSeasonRemoveDtl.setBounds(700, 330, 80, 20);

        lblSpecificParty1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSpecificParty1.setText("Season Slabs");
        lblSpecificParty1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jPanel1.add(lblSpecificParty1);
        lblSpecificParty1.setBounds(10, 240, 110, 15);

        panelparty1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(panelparty1);
        panelparty1.setBounds(120, 245, 655, 6);

        lblSpecificParty2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSpecificParty2.setText("Turnover Slabs");
        lblSpecificParty2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jPanel1.add(lblSpecificParty2);
        lblSpecificParty2.setBounds(10, 80, 110, 15);

        panelparty2.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(panelparty2);
        panelparty2.setBounds(120, 85, 655, 6);

        lblSubCode3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode3.setText("Discount Percentage");
        lblSubCode3.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jPanel1.add(lblSubCode3);
        lblSubCode3.setBounds(10, 20, 143, 15);

        cmbDiscount_per.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDiscount_perItemStateChanged(evt);
            }
        });

        jPanel1.add(cmbDiscount_per);
        cmbDiscount_per.setBounds(160, 20, 400, 24);

        txtFlatPercent.setName("PARTY_ID");
        txtFlatPercent.setEnabled(false);
        jPanel1.add(txtFlatPercent);
        txtFlatPercent.setBounds(160, 50, 120, 19);

        lblSubCode11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode11.setText("Flat Percentage");
        lblSubCode11.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jPanel1.add(lblSubCode11);
        lblSubCode11.setBounds(10, 50, 143, 15);

        lblSubCode12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode12.setText("Deduction Information");
        lblSubCode12.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jPanel1.add(lblSubCode12);
        lblSubCode12.setBounds(10, 400, 143, 15);

        panelparty3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(panelparty3);
        panelparty3.setBounds(160, 405, 655, 6);

        TableDeduInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Title 1"
            }
        ));
        TableDeduInfo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableDeduInfoKeyPressed(evt);
            }
        });

        scrollpanelDeduInfo.setViewportView(TableDeduInfo);

        jPanel1.add(scrollpanelDeduInfo);
        scrollpanelDeduInfo.setBounds(10, 420, 670, 130);

        cmdDeduInfoAddDtl.setFont(new java.awt.Font("Dialog", 0, 10));
        cmdDeduInfoAddDtl.setMnemonic('A');
        cmdDeduInfoAddDtl.setText("Add New");
        cmdDeduInfoAddDtl.setEnabled(false);
        cmdDeduInfoAddDtl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeduInfoAddDtlActionPerformed(evt);
            }
        });

        jPanel1.add(cmdDeduInfoAddDtl);
        cmdDeduInfoAddDtl.setBounds(700, 460, 80, 20);

        cmdDeduInfoRemoveDtl.setFont(new java.awt.Font("Dialog", 0, 10));
        cmdDeduInfoRemoveDtl.setMnemonic('R');
        cmdDeduInfoRemoveDtl.setText("Remove");
        cmdDeduInfoRemoveDtl.setEnabled(false);
        cmdDeduInfoRemoveDtl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeduInfoRemoveDtlActionPerformed(evt);
            }
        });

        jPanel1.add(cmdDeduInfoRemoveDtl);
        cmdDeduInfoRemoveDtl.setBounds(700, 490, 80, 20);

        Header.addTab("Range & Percentage", jPanel1);

        Tab2.setLayout(null);

        Tab2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(16, 18, 66, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });

        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 14, 184, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(20, 52, 56, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 50, 182, 19);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(20, 82, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 78, 468, 19);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 120, 86, 15);

        jPanel7.setLayout(null);

        jPanel7.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel7.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel7.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel7.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setEnabled(false);
        jPanel7.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel7);
        jPanel7.setBounds(88, 120, 182, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(18, 232, 60, 15);

        cmbSendTo.setEnabled(false);
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(88, 228, 184, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(16, 264, 60, 15);

        txtToRemarks.setEnabled(false);
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 260, 516, 19);

        cmdBack2.setText("<< Back");
        cmdBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack2ActionPerformed(evt);
            }
        });

        Tab2.add(cmdBack2);
        cmdBack2.setBounds(534, 350, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(559, 77, 33, 21);

        Header.addTab("Approval", Tab2);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status");
        jPanel6.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel6.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 614, 144);

        lblDocumentHistory.setText("Document Update History");
        jPanel6.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 191, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel6.add(jScrollPane3);
        jScrollPane3.setBounds(13, 207, 473, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        jPanel6.add(cmdViewHistory);
        cmdViewHistory.setBounds(498, 242, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        jPanel6.add(cmdNormalView);
        cmdNormalView.setBounds(498, 273, 132, 24);

        cmdPreviewA.setText("Preview Report");
        cmdPreviewA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewAActionPerformed(evt);
            }
        });

        jPanel6.add(cmdPreviewA);
        cmdPreviewA.setBounds(498, 209, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        jPanel6.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(498, 305, 132, 24);

        Header.addTab("Status", jPanel6);

        getContentPane().add(Header);
        Header.setBounds(0, 70, 800, 580);
        Header.getAccessibleContext().setAccessibleName("Scheme Details");
        Header.getAccessibleContext().setAccessibleDescription("Scheme Details");

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 650, 800, 22);

    }//GEN-END:initComponents

    private void cmdCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCopyActionPerformed
        // TODO add your handling code here:
        LOV aListLOV=new LOV();
        aListLOV.SQL="SELECT POLICY_ID,POLICY_NAME FROM D_SAL_POLICY_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1 ORDER BY POLICY_ID";
        aListLOV.ReturnCol=1;
        aListLOV.ShowReturnCol=true;
        aListLOV.DefaultSearchOn=2;
        String PolicyID="";
        
        if(aListLOV.ShowLOV()) {
            PolicyID=aListLOV.ReturnVal;
            
            EditMode=EITLERPGLOBAL.ADD;
            
            SetFields(true);
            
            DisableToolbar();
            
            ClearFields();
            
            SetupApproval();
            
            clsPolicyMaster ObjPolicy=(clsPolicyMaster)clsPolicyMaster.getObjectEx(EITLERPGLOBAL.gCompanyID, PolicyID);
            
            DisplayPolicyData(ObjPolicy);
            lblTitle.setBackground(Color.BLUE);
            
            //****************Now Generate new document no.****************//
            SelectFirstFree aList=new SelectFirstFree();
            aList.ModuleID=clsPolicyMaster.ModuleID;
            
            if(aList.ShowList()) {
                EditMode=EITLERPGLOBAL.ADD;
                
                SelPrefix=aList.Prefix; //Selected Prefix;
                SelSuffix=aList.Suffix;
                FFNo=aList.FirstFreeNo;
                               
                //Display newly generated document no.
                
                txtPolicyID.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID,clsPolicyMaster.ModuleID, FFNo,  false));
                txtPolicyName.requestFocus();
                
                lblTitle.setText("POLICY MASTER - " + txtPolicyID.getText());
                lblTitle.setBackground(Color.BLUE);
                
                int DiscPer = EITLERPGLOBAL.getComboCode(cmbDiscount_per);
                if ((EditMode==EITLERPGLOBAL.ADD) || (EditMode==EITLERPGLOBAL.EDIT)) {
                    if (DiscPer == 0) {
                        int crtype = EITLERPGLOBAL.getComboCode(cmbCreditNoteType);
                        if (crtype == 18) {
                            txtFlatPercent.setEnabled(false);
                        }
                        else {
                            txtFlatPercent.setEnabled(true);
                        }
                        
                        TableTurnoverSlabs.setEnabled(false);
                        cmdTurnoverAddDtl.setEnabled(false);
                        cmdTurnoverRemoveDtl.setEnabled(false);
                        TableSeasonSlabs.setEnabled(false);
                        cmdSeasonAddDtl.setEnabled(false);
                        cmdSeasonRemoveDtl.setEnabled(false);
                    }
                    else if (DiscPer == 1) {
                        txtFlatPercent.setEnabled(false);
                        TableTurnoverSlabs.setEnabled(true);
                        cmdTurnoverAddDtl.setEnabled(true);
                        cmdTurnoverRemoveDtl.setEnabled(true);
                        TableSeasonSlabs.setEnabled(false);
                        cmdSeasonAddDtl.setEnabled(false);
                        cmdSeasonRemoveDtl.setEnabled(false);
                    }
                    else if (DiscPer == 2) {
                        txtFlatPercent.setEnabled(false);
                        TableTurnoverSlabs.setEnabled(false);
                        cmdTurnoverAddDtl.setEnabled(false);
                        cmdTurnoverRemoveDtl.setEnabled(false);
                        TableSeasonSlabs.setEnabled(true);
                        cmdSeasonAddDtl.setEnabled(true);
                        cmdSeasonRemoveDtl.setEnabled(true);
                    }
                }
                
                int type = EITLERPGLOBAL.getComboCode(cmbDiscount_Applicability);
                if ((EditMode==EITLERPGLOBAL.ADD) || (EditMode==EITLERPGLOBAL.EDIT)) {
                    if (type == 0) {
                        txtApp_AmountLimit.setEnabled(true);
                        txtApp_AmountLimit.setText("");
                    }
                    else {
                        txtApp_AmountLimit.setEnabled(false);
                        txtApp_AmountLimit.setText("");
                    }
                }
                
                int Partytype = EITLERPGLOBAL.getComboCode(cmbPartyType);
                if (((EditMode==EITLERPGLOBAL.ADD) || (EditMode==EITLERPGLOBAL.EDIT)) ) {
                    if (Partytype == 0) {
                        lblSpecificParty.setEnabled(true);
                        panelparty.setEnabled(true);
                        scrollpanelparty.setEnabled(true);
                        cmdAddDtl.setEnabled(true);
                        cmdRemoveDtl.setEnabled(true);
                        TableDtl.setEnabled(true);
                        FormatPartyListGrid();
                    }
                    else {
                        lblSpecificParty.setEnabled(false);
                        panelparty.setEnabled(false);
                        scrollpanelparty.setEnabled(false);
                        cmdAddDtl.setEnabled(false);
                        cmdRemoveDtl.setEnabled(false);
                        TableDtl.setEnabled(false);
                        FormatGridDetail();
                        FormatPartyListGrid();
                        GeneratePartyListGrid(type);
                    }
                }
                
                int credittype = EITLERPGLOBAL.getComboCode(cmbCreditNoteType);
                if (credittype == 1) {
                    for(int j=0;j<Table.getRowCount();j++) {
                        if(Table.getValueAt(j, 2).toString().trim().equals("09")) {
                            Table.setValueAt(Boolean.valueOf(true), j, 0);
                        }
                        else {
                            Table.setValueAt(Boolean.valueOf(false), j, 0);
                        }
                    }
                }
            }
            else {
                JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
            }
            
        }
        else {
            
        }
    }//GEN-LAST:event_cmdCopyActionPerformed
    
    private void cmbCreditNoteTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCreditNoteTypeItemStateChanged
        // TODO add your handling code here:
        int type = EITLERPGLOBAL.getComboCode(cmbCreditNoteType);
        if (type == 18) {
            FormatGridFlatDetail();
            txtFlatPercent.setEnabled(false);
        }
        else {
            FormatGridDetail();
            txtFlatPercent.setEnabled(true);
        }
        if (type == 1) {
            for(int j=0;j<Table.getRowCount();j++) {
                if(Table.getValueAt(j, 2).toString().trim().equals("09")) {
                    Table.setValueAt(Boolean.valueOf(true), j, 0);
                }
                else {
                    Table.setValueAt(Boolean.valueOf(false), j, 0);
                }
            }
        }
        else if ((type == 2) || (type == 3)) {
            for(int j=0;j<Table.getRowCount();j++) {
                if(Table.getValueAt(j, 2).toString().trim().equals("07")) {
                    Table.setValueAt(Boolean.valueOf(true), j, 0);
                }
                else {
                    Table.setValueAt(Boolean.valueOf(false), j, 0);
                }
            }
        }
        else if ((type == 4) || (type == 16) || (type == 17)) {
            for(int j=0;j<Table.getRowCount();j++) {
                if ((Table.getValueAt(j, 2).toString().trim().equals("07")) || (Table.getValueAt(j, 2).toString().trim().equals("09"))) {
                    Table.setValueAt(Boolean.valueOf(true), j, 0);
                }
                else {
                    Table.setValueAt(Boolean.valueOf(false), j, 0);
                }
            }
        }
        else {
            for(int j=0;j<Table.getRowCount();j++) {
                Table.setValueAt(Boolean.valueOf(false), j, 0);
            }
        }
        
    }//GEN-LAST:event_cmbCreditNoteTypeItemStateChanged
    
    private void TableDeduInfoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableDeduInfoKeyPressed
        // TODO add your handling code here:
        try {
            
            if(evt.getKeyCode()==112) //F1 Key pressed
            {
                
                if(TableDeduInfo.getSelectedColumn()==DataModelDeduInfo.getColFromVariable("MAIN_ACCOUNT_CODE")) {
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL WHERE APPROVED = 1 AND CANCELLED=0 ORDER BY MAIN_ACCOUNT_CODE ";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=2;
                    aList.UseSpecifiedConn=true;
                    aList.dbURL=FinanceGlobal.FinURL;
                    
                    if(aList.ShowLOV()) {
                        if(TableDeduInfo.getCellEditor()!=null) {
                            TableDeduInfo.getCellEditor().stopCellEditing();
                        }
                        TableDeduInfo.setValueAt(aList.ReturnVal, TableDeduInfo.getSelectedRow(),DataModelDeduInfo.getColFromVariable("MAIN_ACCOUNT_CODE"));
                        String AccountName = clsPolicyMaster.getMainAccountName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal);
                        TableDeduInfo.setValueAt(AccountName, TableDeduInfo.getSelectedRow(),DataModelDeduInfo.getColFromVariable("ACCOUNT_NAME"));
                    }
                }
                
            }
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_TableDeduInfoKeyPressed
    
    private void cmdDeduInfoRemoveDtlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeduInfoRemoveDtlActionPerformed
        // TODO add your handling code here:
        try {
            if(TableDeduInfo.getRowCount()>0) {
                DataModelDeduInfo.removeRow(TableDeduInfo.getSelectedRow());
                UpdateDeduInfoSrNo();
            }
        }
        catch(Exception e) {
            
        }
    }
    
    private void UpdateDeduInfoSrNo() {
        int SrCol=DataModelDeduInfo.getColFromVariable("SR_NO");
        
        for(int i=0;i<TableDeduInfo.getRowCount();i++) {
            TableDeduInfo.setValueAt(Integer.toString(i+1), i, SrCol);
        }
    }//GEN-LAST:event_cmdDeduInfoRemoveDtlActionPerformed
    
    private void cmdDeduInfoAddDtlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeduInfoAddDtlActionPerformed
        // TODO add your handling code here:
        try {
            
            Updating=true;
            Object[] rowData=new Object[3];
            rowData[0]=Integer.toString(TableDeduInfo.getRowCount()+1);
            rowData[1]="";
            rowData[2]="";
            DataModelDeduInfo.addRow(rowData);
            
            if(TableDeduInfo.getRowCount()>1) {
                int NewRow=TableDeduInfo.getRowCount()-1;
            }
            Updating=false;
            
            
            TableDeduInfo.changeSelection(TableDeduInfo.getRowCount()-1, 1, false,false);
            TableDeduInfo.requestFocus();
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdDeduInfoAddDtlActionPerformed
    
    private void TableSeasonSlabsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableSeasonSlabsKeyPressed
        // TODO add your handling code here:
        try {
            
            if(evt.getKeyCode()==112) //F1 Key pressed
            {
                
                if(TableSeasonSlabs.getSelectedColumn()==DataModelSeasonSlab.getColFromVariable("SEASON_ID")) {
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT SEASON_ID,SEASON_NAME FROM D_SAL_SEASON_MASTER WHERE APPROVED = 1 AND CANCELLED=0 ORDER BY SEASON_ID ";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=2;
                    aList.UseSpecifiedConn=true;
                    aList.dbURL=EITLERPGLOBAL.DatabaseURL;
                    
                    if(aList.ShowLOV()) {
                        if(TableSeasonSlabs.getCellEditor()!=null) {
                            TableSeasonSlabs.getCellEditor().stopCellEditing();
                        }
                        TableSeasonSlabs.setValueAt(aList.ReturnVal, TableSeasonSlabs.getSelectedRow(),DataModelSeasonSlab.getColFromVariable("SEASON_ID"));
                        String SeasonName = clsPolicyMaster.getSeasonName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal);
                        TableSeasonSlabs.setValueAt(SeasonName, TableSeasonSlabs.getSelectedRow(),DataModelSeasonSlab.getColFromVariable("SEASON_NAME"));
                    }
                }
                
                if(TableSeasonSlabs.getSelectedColumn()==DataModelSeasonSlab.getColFromVariable("QUALITY_ID")) {
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT QUALITY_ID,QUALITY_NAME FROM D_SAL_QUALITY_MASTER WHERE APPROVED = 1 AND CANCELLED=0 AND SEASON_ID='"+ DataModelSeasonSlab.getValueByVariable("SEASON_ID",TableSeasonSlabs.getSelectedRow()) +"' ORDER BY QUALITY_ID ";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=2;
                    aList.UseSpecifiedConn=true;
                    aList.dbURL=EITLERPGLOBAL.DatabaseURL;
                    
                    if(aList.ShowLOV()) {
                        if(TableSeasonSlabs.getCellEditor()!=null) {
                            TableSeasonSlabs.getCellEditor().stopCellEditing();
                        }
                        TableSeasonSlabs.setValueAt(aList.ReturnVal, TableSeasonSlabs.getSelectedRow(),DataModelSeasonSlab.getColFromVariable("QUALITY_ID"));
                    }
                }
                
            }
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_TableSeasonSlabsKeyPressed
    
    private void cmdSeasonRemoveDtlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSeasonRemoveDtlActionPerformed
        // TODO add your handling code here:
        try {
            if(TableSeasonSlabs.getRowCount()>0) {
                DataModelSeasonSlab.removeRow(TableSeasonSlabs.getSelectedRow());
                UpdateSeasonSlabSrNo();
            }
        }
        catch(Exception e) {
            
        }
    }
    
    private void UpdateSeasonSlabSrNo() {
        int SrCol=DataModelSeasonSlab.getColFromVariable("SR_NO");
        
        for(int i=0;i<TableSeasonSlabs.getRowCount();i++) {
            TableSeasonSlabs.setValueAt(Integer.toString(i+1), i, SrCol);
        }
    }//GEN-LAST:event_cmdSeasonRemoveDtlActionPerformed
    
    private void cmdSeasonAddDtlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSeasonAddDtlActionPerformed
        // TODO add your handling code here:
        try {
            
            Updating=true;
            Object[] rowData=new Object[8];
            rowData[0]=Integer.toString(TableSeasonSlabs.getRowCount()+1);
            rowData[1]=txtPolicyID.getText().trim();
            rowData[2]="";
            rowData[3]="";
            rowData[4]="";
            rowData[5]="";
            rowData[6]="";
            rowData[7]="";
            DataModelSeasonSlab.addRow(rowData);
            
            if(TableSeasonSlabs.getRowCount()>1) {
                int NewRow=TableSeasonSlabs.getRowCount()-1;
            }
            Updating=false;
            
            
            TableSeasonSlabs.changeSelection(TableSeasonSlabs.getRowCount()-1, 1, false,false);
            TableSeasonSlabs.requestFocus();
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdSeasonAddDtlActionPerformed
    
    private void cmdTurnoverRemoveDtlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTurnoverRemoveDtlActionPerformed
        // TODO add your handling code here:
        try {
            if(TableTurnoverSlabs.getRowCount()>0) {
                DataModelTurnover.removeRow(TableTurnoverSlabs.getSelectedRow());
                UpdateTurnoverSrNo();
            }
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdTurnoverRemoveDtlActionPerformed
    
    private void UpdateTurnoverSrNo() {
        int SrCol=DataModelTurnover.getColFromVariable("SR_NO");
        
        for(int i=0;i<TableTurnoverSlabs.getRowCount();i++) {
            TableTurnoverSlabs.setValueAt(Integer.toString(i+1), i, SrCol);
        }
    }
    
    private void cmdTurnoverAddDtlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTurnoverAddDtlActionPerformed
        // TODO add your handling code here:
        try {
            
            Updating=true;
            Object[] rowData=new Object[5];
            rowData[0]=Integer.toString(TableTurnoverSlabs.getRowCount()+1);
            rowData[1]=txtPolicyID.getText().trim();
            rowData[2]="";
            rowData[3]="";
            rowData[4]="";
            DataModelTurnover.addRow(rowData);
            
            if(TableTurnoverSlabs.getRowCount()>1) {
                int NewRow=TableTurnoverSlabs.getRowCount()-1;
            }
            Updating=false;
            
            
            TableTurnoverSlabs.changeSelection(TableTurnoverSlabs.getRowCount()-1, 1, false,false);
            TableTurnoverSlabs.requestFocus();
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdTurnoverAddDtlActionPerformed
    
    private void cmdPartySelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPartySelectAllActionPerformed
        // TODO add your handling code here:
        for(int i=0;i<TablePartyList.getRowCount();i++) {
            DataModelPartyList.setValueAt(Boolean.valueOf(true), i, 0);
        }
    }//GEN-LAST:event_cmdPartySelectAllActionPerformed
    
    private void cmdPartyClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPartyClearAllActionPerformed
        // TODO add your handling code here:
        for(int i=0;i<TablePartyList.getRowCount();i++) {
            DataModelPartyList.setValueAt(Boolean.valueOf(false), i, 0);
        }
    }//GEN-LAST:event_cmdPartyClearAllActionPerformed
    
    private void cmbPartyTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPartyTypeItemStateChanged
        // TODO add your handling code here:
        int Credittype = EITLERPGLOBAL.getComboCode(cmbCreditNoteType);
        if (Credittype == 18) {
            FormatGridFlatDetail();
            FormatPartyListGrid();
        }
        else {
            FormatGridDetail();
            FormatPartyListGrid();
        }
        
        int type = EITLERPGLOBAL.getComboCode(cmbPartyType);
        if (((EditMode==EITLERPGLOBAL.ADD) || (EditMode==EITLERPGLOBAL.EDIT)) ) {
            if (type == 0) {
                lblSpecificParty.setEnabled(true);
                panelparty.setEnabled(true);
                scrollpanelparty.setEnabled(true);
                cmdAddDtl.setEnabled(true);
                cmdRemoveDtl.setEnabled(true);
                TableDtl.setEnabled(true);
                //FormatPartyListGrid();
            }
            else {
                lblSpecificParty.setEnabled(false);
                panelparty.setEnabled(false);
                scrollpanelparty.setEnabled(false);
                cmdAddDtl.setEnabled(false);
                cmdRemoveDtl.setEnabled(false);
                TableDtl.setEnabled(false);
                //FormatGridDetail();
                //FormatPartyListGrid();
                GeneratePartyListGrid(type);
            }
        }
        
        
    }//GEN-LAST:event_cmbPartyTypeItemStateChanged
    
    private void cmbDiscount_perItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDiscount_perItemStateChanged
        // TODO add your handling code here:
        int type = EITLERPGLOBAL.getComboCode(cmbDiscount_per);
        if ((EditMode==EITLERPGLOBAL.ADD) || (EditMode==EITLERPGLOBAL.EDIT)) {
            if (type == 0) {
                int crtype = EITLERPGLOBAL.getComboCode(cmbCreditNoteType);
                if (crtype == 18) {
                    txtFlatPercent.setEnabled(false);
                }
                else {
                    txtFlatPercent.setEnabled(true);
                }
                txtFlatPercent.setText("");
                FormatTurnoverSlabsDetail();
                FormatSeasonSlabsDetail();
                cmdTurnoverAddDtl.setEnabled(false);
                cmdTurnoverRemoveDtl.setEnabled(false);
                TableTurnoverSlabs.setEnabled(false);
                cmdSeasonAddDtl.setEnabled(false);
                cmdSeasonRemoveDtl.setEnabled(false);
                TableSeasonSlabs.setEnabled(false);
            }
            else if (type == 1) {
                txtFlatPercent.setEnabled(false);
                txtFlatPercent.setText("");
                FormatTurnoverSlabsDetail();
                FormatSeasonSlabsDetail();
                cmdTurnoverAddDtl.setEnabled(true);
                cmdTurnoverRemoveDtl.setEnabled(true);
                TableTurnoverSlabs.setEnabled(true);
                cmdSeasonAddDtl.setEnabled(false);
                cmdSeasonRemoveDtl.setEnabled(false);
                TableSeasonSlabs.setEnabled(false);
            }
            else if (type == 2) {
                txtFlatPercent.setEnabled(false);
                txtFlatPercent.setText("");
                FormatTurnoverSlabsDetail();
                FormatSeasonSlabsDetail();
                cmdTurnoverAddDtl.setEnabled(false);
                cmdTurnoverRemoveDtl.setEnabled(false);
                TableTurnoverSlabs.setEnabled(false);
                cmdSeasonAddDtl.setEnabled(true);
                cmdSeasonRemoveDtl.setEnabled(true);
                TableSeasonSlabs.setEnabled(true);
            }
        }
    }//GEN-LAST:event_cmbDiscount_perItemStateChanged
    
    private void cmbDiscount_ApplicabilityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDiscount_ApplicabilityItemStateChanged
        // TODO add your handling code here:
        int type = EITLERPGLOBAL.getComboCode(cmbDiscount_Applicability);
        if ((EditMode==EITLERPGLOBAL.ADD) || (EditMode==EITLERPGLOBAL.EDIT)) {
            if (type == 0) {
                txtApp_AmountLimit.setEnabled(true);
                txtApp_AmountLimit.setText("");
            }
            else {
                txtApp_AmountLimit.setEnabled(false);
                txtApp_AmountLimit.setText("");
            }
        }
    }//GEN-LAST:event_cmbDiscount_ApplicabilityItemStateChanged
    
    private void cmdAddDtlItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmdAddDtlItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdAddDtlItemStateChanged
    
    private void TableDtlKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableDtlKeyPressed
        // TODO add your handling code here:
        try {
            
            if(evt.getKeyCode()==112) //F1 Key pressed
            {
                
                if(TableDtl.getSelectedColumn()==DataModelDtl.getColFromVariable("PARTY_ID")) {
                    LOV aList=new LOV();
                    
                    int type = EITLERPGLOBAL.getComboCode(cmbInvoiceMainType);
                    String strcondition="";
                    String MainCode = "";
                    
                    if (type == 0) { //suiting
                        MainCode = "210027";
                        strcondition = " AND MAIN_ACCOUNT_CODE IN ('210027') ";
                    } else if (type == 1) { //felt
                        MainCode = "210010";
                        strcondition = " AND MAIN_ACCOUNT_CODE IN ('210010') ";
                    }
                    else if (type == 2) { //filter
                        MainCode = "210072";
                        strcondition = " AND MAIN_ACCOUNT_CODE IN ('210072') ";
                    }
                    
                    type = EITLERPGLOBAL.getComboCode(cmbCreditNoteType);
                    if (type == 1) {
                        strcondition = strcondition + " AND CHARGE_CODE='09' ";
                    } else if (type == 2) {
                        strcondition = strcondition + " AND CHARGE_CODE='07' ";
                    } else if (type == 3) {
                        strcondition = strcondition + " AND CHARGE_CODE='07' ";
                    }
                    else if (type == 4) {
                        strcondition = strcondition + " AND CHARGE_CODE IN ('07','09') ";
                    }
                    else if (type == 16) {
                        strcondition = strcondition + " AND CHARGE_CODE IN ('07','09') ";
                    }
                    else if (type == 17) {
                        strcondition = strcondition + " AND CHARGE_CODE IN ('07','09') ";
                    }
                    else {
                        strcondition = strcondition + " ";
                    }
                    
                    aList.SQL="SELECT PARTY_CODE,PARTY_NAME "+
                    " FROM D_FIN_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 "+ strcondition + " " +
                    " ORDER BY PARTY_CODE ";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=2;
                    aList.UseSpecifiedConn=true;
                    aList.dbURL=FinanceGlobal.FinURL;
                    
                    if(aList.ShowLOV()) {
                        if(TableDtl.getCellEditor()!=null) {
                            TableDtl.getCellEditor().stopCellEditing();
                        }
                        TableDtl.setValueAt(aList.ReturnVal, TableDtl.getSelectedRow(),DataModelDtl.getColFromVariable("PARTY_ID"));
                        String MainAccountCode = MainCode;
                        TableDtl.setValueAt(MainAccountCode, TableDtl.getSelectedRow(),DataModelDtl.getColFromVariable("PARTY_MAIN_CODE"));
                    }
                }
                
            }
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_TableDtlKeyPressed
    
    private void cmbInvoiceMainTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbInvoiceMainTypeItemStateChanged
        // TODO add your handling code here:
        int type = EITLERPGLOBAL.getComboCode(cmbInvoiceMainType);
        if ((EditMode==EITLERPGLOBAL.ADD) || (EditMode==EITLERPGLOBAL.EDIT)) {
            FormatGrid();
            if (type == 1) {
                GenerateGrid(" AND INVOICE_TYPE_ID NOT IN ('06') ");
            }
            else {
                GenerateGrid(" AND INVOICE_TYPE_ID NOT IN ('F04','06') ");
            }
            
            FormatPartyListGrid();
            
            type = EITLERPGLOBAL.getComboCode(cmbCreditNoteType);
            if (type == 18) {
                FormatGridFlatDetail();
            }
            else {
                FormatGridDetail();
            }
        }
    }//GEN-LAST:event_cmbInvoiceMainTypeItemStateChanged
    
    private void cmdRemoveDtlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveDtlActionPerformed
        // TODO add your handling code here:
        try {
            if(TableDtl.getRowCount()>0) {
                DataModelDtl.removeRow(TableDtl.getSelectedRow());
                UpdateSrNo();
            }
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdRemoveDtlActionPerformed
    
    private void UpdateSrNo() {
        int SrCol=DataModelDtl.getColFromVariable("SR_NO");
        
        for(int i=0;i<TableDtl.getRowCount();i++) {
            TableDtl.setValueAt(Integer.toString(i+1), i, SrCol);
        }
    }
    
    private void cmdAddDtlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddDtlActionPerformed
        // TODO add your handling code here:
        try {
            
            Updating=true;
            Object[] rowData=new Object[7];
            rowData[0]=Integer.toString(TableDtl.getRowCount()+1);
            rowData[1]="";
            DataModelDtl.addRow(rowData);
            
            if(TableDtl.getRowCount()>1) {
                int NewRow=TableDtl.getRowCount()-1;
            }
            Updating=false;
            
            
            TableDtl.changeSelection(TableDtl.getRowCount()-1, 1, false,false);
            TableDtl.requestFocus();
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdAddDtlActionPerformed
    
    private void cmdClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdClearAllActionPerformed
        // TODO add your handling code here:
        for(int i=0;i<Table.getRowCount();i++) {
            DataModel.setValueAt(Boolean.valueOf(false), i, 0);
        }
    }//GEN-LAST:event_cmdClearAllActionPerformed
    
    private void cmdSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSelectAllActionPerformed
        // TODO add your handling code here:
        for(int i=0;i<Table.getRowCount();i++) {
            DataModel.setValueAt(Boolean.valueOf(true), i, 0);
        }
    }//GEN-LAST:event_cmdSelectAllActionPerformed
    
    private void cmdRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdRemarksBigActionPerformed
    
    private void cmdPreviewAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewAActionPerformed
    
    private void cmdBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack2ActionPerformed
        // TODO add your handling code here:
        Header.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack2ActionPerformed
    
    private void Panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Panel1MouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_Panel1MouseClicked
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
        
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        objPolicyMst.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveFirst();
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        objPolicyMst.ShowHistory(EITLERPGLOBAL.gCompanyID, objPolicyMst.getAttribute("POLICY_ID").getString());
        MoveFirst();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
        
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
        
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if(ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID,clsPolicyMaster.ModuleID , objPolicyMst.getAttribute("POLICY_ID").getString())) {
                cmbSendTo.setEnabled(true);
            }
            else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateFromCombo();
        }
        
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
        
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        objPolicyMst.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Header;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel Panel1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableDeduInfo;
    private javax.swing.JTable TableDtl;
    private javax.swing.JTable TableHS;
    private javax.swing.JTable TablePartyList;
    private javax.swing.JTable TableSeasonSlabs;
    private javax.swing.JTable TableTurnoverSlabs;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cmbCreditNoteType;
    private javax.swing.JComboBox cmbDiscountType;
    private javax.swing.JComboBox cmbDiscount_Applicability;
    private javax.swing.JComboBox cmbDiscount_per;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbInvoiceMainType;
    private javax.swing.JComboBox cmbPartyType;
    private javax.swing.JComboBox cmbPeriodBase;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbTurnover_Calc;
    private javax.swing.JButton cmdAddDtl;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdClearAll;
    private javax.swing.JButton cmdCopy;
    private javax.swing.JButton cmdDeduInfoAddDtl;
    private javax.swing.JButton cmdDeduInfoRemoveDtl;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPartyClearAll;
    private javax.swing.JButton cmdPartySelectAll;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemarksBig;
    private javax.swing.JButton cmdRemoveDtl;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdSeasonAddDtl;
    private javax.swing.JButton cmdSeasonRemoveDtl;
    private javax.swing.JButton cmdSelectAll;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdTurnoverAddDtl;
    private javax.swing.JButton cmdTurnoverRemoveDtl;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JLabel lblAccountCode2;
    private javax.swing.JLabel lblAccountCode3;
    private javax.swing.JLabel lblAccountID;
    private javax.swing.JLabel lblAccountID1;
    private javax.swing.JLabel lblAccountName;
    private javax.swing.JLabel lblAccountName1;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblSpecificParty;
    private javax.swing.JLabel lblSpecificParty1;
    private javax.swing.JLabel lblSpecificParty2;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblSubCode;
    private javax.swing.JLabel lblSubCode1;
    private javax.swing.JLabel lblSubCode10;
    private javax.swing.JLabel lblSubCode11;
    private javax.swing.JLabel lblSubCode12;
    private javax.swing.JLabel lblSubCode13;
    private javax.swing.JLabel lblSubCode2;
    private javax.swing.JLabel lblSubCode3;
    private javax.swing.JLabel lblSubCode4;
    private javax.swing.JLabel lblSubCode5;
    private javax.swing.JLabel lblSubCode6;
    private javax.swing.JLabel lblSubCode7;
    private javax.swing.JLabel lblSubCode8;
    private javax.swing.JLabel lblSubCode9;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel panelparty;
    private javax.swing.JPanel panelparty1;
    private javax.swing.JPanel panelparty2;
    private javax.swing.JPanel panelparty3;
    private javax.swing.JScrollPane scrollpanelDeduInfo;
    private javax.swing.JScrollPane scrollpanelSeason;
    private javax.swing.JScrollPane scrollpanelTurnOver;
    private javax.swing.JScrollPane scrollpanelparty;
    private javax.swing.JTextField txtApp_AmountLimit;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtEffectiveDate;
    private javax.swing.JTextField txtExpiryDate;
    private javax.swing.JTextField txtFlatPercent;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtPeriod;
    private javax.swing.JTextField txtPolicyID;
    private javax.swing.JTextField txtPolicyName;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    
    private void SetFields(boolean pStat) {
        
        txtEffectiveDate.setEnabled(pStat);
        txtExpiryDate.setEnabled(pStat);
        txtPolicyName.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        
        cmdDeduInfoAddDtl.setEnabled(pStat);
        cmdDeduInfoRemoveDtl.setEnabled(pStat);
        TableDeduInfo.setEnabled(pStat);
        
        cmbTurnover_Calc.setEnabled(pStat);
        cmbDiscountType.setEnabled(pStat);
        cmbDiscount_Applicability.setEnabled(pStat);
        cmbDiscount_per.setEnabled(pStat);
        cmbPartyType.setEnabled(pStat);
        cmbPeriodBase.setEnabled(pStat);
        txtPeriod.setEnabled(pStat);
        cmbInvoiceMainType.setEnabled(pStat);
        cmbCreditNoteType.setEnabled(pStat);
        
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        cmdSelectAll.setEnabled(pStat);
        cmdClearAll.setEnabled(pStat);
        cmdPartyClearAll.setEnabled(pStat);
        cmdPartySelectAll.setEnabled(pStat);
        
        TableDeduInfo.setEnabled(pStat);
        Table.setEnabled(pStat);
        TableDtl.setEnabled(pStat);
        TablePartyList.setEnabled(pStat);
        TableSeasonSlabs.setEnabled(pStat);
        TableTurnoverSlabs.setEnabled(pStat);
    }
    
    private void ClearFields() {
        
        txtEffectiveDate.setText("");
        txtExpiryDate.setText("");
        txtPolicyID.setText("");
        txtPolicyName.setText("");
        txtRemarks.setText("");
        cmbDiscountType.setSelectedIndex(0);
        cmbDiscount_Applicability.setSelectedIndex(0);
        cmbDiscount_per.setSelectedIndex(0);
        cmbPartyType.setSelectedIndex(0);
        cmbPeriodBase.setSelectedIndex(0);
        cmbTurnover_Calc.setSelectedIndex(0);
        txtApp_AmountLimit.setText("");
        txtFlatPercent.setText("");
        txtPeriod.setText("");
        cmbInvoiceMainType.setSelectedIndex(0);
        cmbCreditNoteType.setSelectedIndex(0);
        
        for(int i=0;i<Table.getRowCount();i++) {
            DataModel.setValueAt(Boolean.valueOf(false), i, 0);
        }
        
        for(int i=0;i<TablePartyList.getRowCount();i++) {
            DataModelPartyList.setValueAt(Boolean.valueOf(false), i, 0);
        }
        
        FormatGridDetail();
        FormatTurnoverSlabsDetail();
        FormatSeasonSlabsDetail();
        FormatDeduInfo();
        
        int credittype = EITLERPGLOBAL.getComboCode(cmbCreditNoteType);
        if (credittype == 1) {
            for(int j=0;j<Table.getRowCount();j++) {
                if(Table.getValueAt(j, 2).toString().trim().equals("09")) {
                    Table.setValueAt(Boolean.valueOf(true), j, 0);
                }
                else {
                    Table.setValueAt(Boolean.valueOf(false), j, 0);
                }
            }
        }
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                if(objPolicyMst.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(objPolicyMst.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(objPolicyMst.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
                
                
            }
        }
        catch(Exception c) {
            
        }
        //============================================//
        
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=clsPolicyMaster.ModuleID;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        
        ClearFields();
        
        txtPolicyID.setText(objPolicyMst.getAttribute("POLICY_ID").getString());
        txtPolicyName.setText(objPolicyMst.getAttribute("POLICY_NAME").getString());
        txtEffectiveDate.setText(objPolicyMst.getAttribute("EFFECTIVE_DATE").getString());
        txtExpiryDate.setText(objPolicyMst.getAttribute("EXPIRY_DATE").getString());
        txtRemarks.setText(objPolicyMst.getAttribute("REMARKS").getString());
        
        //txtDeduction_Info.setText(objPolicyMst.getAttribute("DEDUCTION_CODES").getString());
        
        //===================Fill up Deduction Information Table===================//
        DeductionInfo = objPolicyMst.getAttribute("DEDUCTION_CODES").getString();
        if (! DeductionInfo.trim().equals("")) {
            String sDeductionInfo[] = DeductionInfo.trim().split(",");
            
            for(int n=0;n<sDeductionInfo.length;n++) {
                
                Object[] rowData=new Object[3];
                DataModelDeduInfo.addRow(rowData);
                int NewRow=TableDeduInfo.getRowCount()-1;
                
                DataModelDeduInfo.setValueByVariable("SR_NO",Integer.toString(n+1), NewRow);
                DataModelDeduInfo.setValueByVariable("MAIN_ACCOUNT_CODE",sDeductionInfo[n].trim(),NewRow);
                DataModelDeduInfo.setValueByVariable("ACCOUNT_NAME",clsPolicyMaster.getMainAccountName(EITLERPGLOBAL.gCompanyID,sDeductionInfo[n].trim()),NewRow);
                
            }
        }
        //==================================================//
        
        txtPeriod.setText(Integer.toString(objPolicyMst.getAttribute("PERIOD").getInt()));
        
        EITLERPGLOBAL.setComboIndex(cmbDiscountType,objPolicyMst.getAttribute("DISCOUNT_TYPE").getInt());
        EITLERPGLOBAL.setComboIndex(cmbDiscount_Applicability,objPolicyMst.getAttribute("APPLICABILITY").getInt());
        EITLERPGLOBAL.setComboIndex(cmbInvoiceMainType,objPolicyMst.getAttribute("INVOICE_MAIN_TYPE").getInt());
        txtApp_AmountLimit.setText(Double.toString(objPolicyMst.getAttribute("APP_AMOUNT_LIMIT").getDouble()));
        EITLERPGLOBAL.setComboIndex(cmbCreditNoteType,objPolicyMst.getAttribute("CREDIT_NOTE_TYPE").getInt());
        
        EITLERPGLOBAL.setComboIndex(cmbDiscount_per,objPolicyMst.getAttribute("DISCOUNT_PERCENTAGE").getInt());
        
        
        int DiscPer = EITLERPGLOBAL.getComboCode(cmbDiscount_per);
        if (DiscPer == 0) {
            txtFlatPercent.setText(Double.toString(objPolicyMst.getAttribute("FLAT_PERCENTAGE").getDouble()));
            FormatTurnoverSlabsDetail();
            FormatSeasonSlabsDetail();
        }
        else if (DiscPer == 1) {
            txtFlatPercent.setText("");
            FormatTurnoverSlabsDetail();
            FormatSeasonSlabsDetail();
            //=========Now Generate Table====================//
            for(int i=1;i<=objPolicyMst.colPolicyTurnOverSlab.size();i++) {
                clsPolicyTurnoverSlabs ObjSlabs=(clsPolicyTurnoverSlabs)objPolicyMst.colPolicyTurnOverSlab.get(Integer.toString(i));
                Object[] rowData=new Object[5];
                DataModelTurnover.addRow(rowData);
                
                int NewRow=TableTurnoverSlabs.getRowCount()-1;
                
                DataModelTurnover.setValueByVariable("SR_NO",Integer.toString(i), NewRow);
                DataModelTurnover.setValueByVariable("POLICY_ID",txtPolicyID.getText().trim(),NewRow);
                DataModelTurnover.setValueByVariable("FROM_VALUE",Double.toString(ObjSlabs.getAttribute("FROM_VALUE").getVal()),NewRow);
                DataModelTurnover.setValueByVariable("TO_VALUE",Double.toString(ObjSlabs.getAttribute("TO_VALUE").getVal()),NewRow);
                DataModelTurnover.setValueByVariable("PERCENTAGE",Double.toString(ObjSlabs.getAttribute("PERCENTAGE").getVal()),NewRow);
                
            }
        }
        else if (DiscPer == 2) {
            txtFlatPercent.setText("");
            FormatTurnoverSlabsDetail();
            FormatSeasonSlabsDetail();
            //=========Now Generate Table====================//
            for(int i=1;i<=objPolicyMst.colPolicySeasonSlab.size();i++) {
                clsPolicySeasonSlabs ObjSlabs=(clsPolicySeasonSlabs)objPolicyMst.colPolicySeasonSlab.get(Integer.toString(i));
                Object[] rowData=new Object[8];
                DataModelSeasonSlab.addRow(rowData);
                
                int NewRow=TableSeasonSlabs.getRowCount()-1;
                
                DataModelSeasonSlab.setValueByVariable("SR_NO",Integer.toString(i), NewRow);
                DataModelSeasonSlab.setValueByVariable("POLICY_ID",txtPolicyID.getText().trim(),NewRow);
                DataModelSeasonSlab.setValueByVariable("SEASON_ID",(String)ObjSlabs.getAttribute("SEASON_ID").getObj(),NewRow);
                DataModelSeasonSlab.setValueByVariable("SEASON_NAME",clsPolicyMaster.getSeasonName(EITLERPGLOBAL.gCompanyID, (String)ObjSlabs.getAttribute("SEASON_ID").getObj()),NewRow);
                DataModelSeasonSlab.setValueByVariable("QUALITY_ID",(String)ObjSlabs.getAttribute("QUALITY_ID").getObj(),NewRow);
                DataModelSeasonSlab.setValueByVariable("FROM_DATE",(String)ObjSlabs.getAttribute("FROM_DATE").getObj(),NewRow);
                DataModelSeasonSlab.setValueByVariable("TO_DATE",(String)ObjSlabs.getAttribute("TO_DATE").getObj(),NewRow);
                DataModelSeasonSlab.setValueByVariable("PERCENTAGE",Double.toString(ObjSlabs.getAttribute("PERCENTAGE").getVal()),NewRow);
                
            }
        }
        
        if ((EditMode==EITLERPGLOBAL.ADD) || (EditMode==EITLERPGLOBAL.EDIT)) {
            if (DiscPer == 0) {
                int crtype = EITLERPGLOBAL.getComboCode(cmbCreditNoteType);
                if (crtype == 18) {
                    txtFlatPercent.setEnabled(false);
                }
                else {
                    txtFlatPercent.setEnabled(true);
                }
                TableTurnoverSlabs.setEnabled(false);
                cmdTurnoverAddDtl.setEnabled(false);
                cmdTurnoverRemoveDtl.setEnabled(false);
                TableSeasonSlabs.setEnabled(false);
                cmdSeasonAddDtl.setEnabled(false);
                cmdSeasonRemoveDtl.setEnabled(false);
            }
            else if (DiscPer == 1) {
                txtFlatPercent.setEnabled(false);
                TableTurnoverSlabs.setEnabled(true);
                cmdTurnoverAddDtl.setEnabled(true);
                cmdTurnoverRemoveDtl.setEnabled(true);
                TableSeasonSlabs.setEnabled(false);
                cmdSeasonAddDtl.setEnabled(false);
                cmdSeasonRemoveDtl.setEnabled(false);
            }
            else if (DiscPer == 2) {
                txtFlatPercent.setEnabled(false);
                TableTurnoverSlabs.setEnabled(false);
                cmdTurnoverAddDtl.setEnabled(false);
                cmdTurnoverRemoveDtl.setEnabled(false);
                TableSeasonSlabs.setEnabled(true);
                cmdSeasonAddDtl.setEnabled(true);
                cmdSeasonRemoveDtl.setEnabled(true);
            }
        }
        
        //===================Fill up Table===================//
        int Inv_type = EITLERPGLOBAL.getComboCode(cmbInvoiceMainType);
        FormatGrid();
        if (Inv_type == 1) {
            GenerateGrid(" AND INVOICE_TYPE_ID NOT IN ('06') ");
        }
        else {
            GenerateGrid(" AND INVOICE_TYPE_ID NOT IN ('F04','06') ");
        }
        
        
        
        String InvType="";
        InvoiceType = objPolicyMst.getAttribute("INVOICE_TYPES").getString();
        String sInvType[] = InvoiceType.trim().split(",");
        
        for(int n=0;n<sInvType.length;n++) {
            for(int j=0;j<Table.getRowCount();j++) {
                if(Table.getValueAt(j, 2).toString().trim().equals(sInvType[n].trim())) {
                    Table.setValueAt(Boolean.valueOf(true), j, 0);
                }
            }
        }
        //==================================================//
        
        //EITLERPGLOBAL.setComboIndex(cmbInvoiceTypes,objPolicyMst.getAttribute("INVOICE_TYPES").getString());
        EITLERPGLOBAL.setComboIndex(cmbPartyType,objPolicyMst.getAttribute("PARTY_TYPE").getInt());
        EITLERPGLOBAL.setComboIndex(cmbPeriodBase,objPolicyMst.getAttribute("PERIOD_BASE").getInt());
        EITLERPGLOBAL.setComboIndex(cmbTurnover_Calc,objPolicyMst.getAttribute("TURNOVER_CALC_TYPE").getInt());
        
        //************ Misc. Display *****************//
        txtToRemarks.setText("");
        SetupApproval();
        
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,objPolicyMst.getAttribute("HIERARCHY_ID").getInt());
        int Partytype = EITLERPGLOBAL.getComboCode(cmbPartyType);
        int CreditNoteType = EITLERPGLOBAL.getComboCode(cmbCreditNoteType);
        
        FormatGridDetail();
        FormatPartyListGrid();
        if (CreditNoteType == 18) {
            FormatGridFlatDetail();
        }
        else {
            FormatGridDetail();
        }
        
        if (Partytype==0) {
            //=========Now Generate Table====================//
            
            if (CreditNoteType == 18) {
                for(int i=1;i<=objPolicyMst.colPolicyPartyPer.size();i++) {
                    clsPolicyPartyFlatPer ObjParty=(clsPolicyPartyFlatPer)objPolicyMst.colPolicyPartyPer.get(Integer.toString(i));
                    Object[] rowData=new Object[1];
                    DataModelDtl.addRow(rowData);
                    
                    int NewRow=TableDtl.getRowCount()-1;
                    
                    DataModelDtl.setValueByVariable("SR_NO",Integer.toString(i), NewRow);
                    DataModelDtl.setValueByVariable("PARTY_ID",(String)ObjParty.getAttribute("PARTY_ID").getObj(),NewRow);
                    String PartyCode = (String)ObjParty.getAttribute("PARTY_ID").getObj();
                    DataModelDtl.setValueByVariable("PARTY_MAIN_CODE",clsPolicyMaster.getMainAccountCode(EITLERPGLOBAL.gCompanyID,PartyCode),NewRow);
                    DataModelDtl.setValueByVariable("FROM_DATE",ObjParty.getAttribute("FROM_DATE").getString(),NewRow);
                    DataModelDtl.setValueByVariable("TO_DATE",ObjParty.getAttribute("TO_DATE").getString(),NewRow);
                    DataModelDtl.setValueByVariable("PRODUCT_CODE",ObjParty.getAttribute("PRODUCT_CODE").getString(),NewRow);
                    DataModelDtl.setValueByVariable("FLAT_PERCENTAGE",Double.toString(ObjParty.getAttribute("FLAT_PERCENTAGE").getDouble()),NewRow);
                }
            }
            else {
                for(int i=1;i<=objPolicyMst.colPolicyParties.size();i++) {
                    clsPolicyParties ObjParty=(clsPolicyParties)objPolicyMst.colPolicyParties.get(Integer.toString(i));
                    Object[] rowData=new Object[1];
                    DataModelDtl.addRow(rowData);
                    
                    int NewRow=TableDtl.getRowCount()-1;
                    
                    DataModelDtl.setValueByVariable("SR_NO",Integer.toString(i), NewRow);
                    DataModelDtl.setValueByVariable("PARTY_ID",(String)ObjParty.getAttribute("PARTY_ID").getObj(),NewRow);
                    DataModelDtl.setValueByVariable("PARTY_MAIN_CODE",(String)ObjParty.getAttribute("PARTY_MAIN_CODE").getObj(),NewRow);
                }
            }
            //===============================================//
        }
        else {
            GeneratePartyListGrid(Partytype);
            GeneratePartiesGrid(txtPolicyID.getText().trim());
        }
        
        
        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List=new HashMap();
        String DocNo=objPolicyMst.getAttribute("POLICY_ID").getString();
        List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, clsPolicyMaster.ModuleID , DocNo);
        for(int i=1;i<=List.size();i++) {
            clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
            Object[] rowData=new Object[7];
            
            rowData[0]=Integer.toString(i);
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
            rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
            rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
            rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
            rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
            rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
            
            DataModelA.addRow(rowData);
        }
        //============================================================//
        
        
        //=========================== Audit Trail ===========================//
        FormatGridHS();
        
        HashMap History=clsPolicyMaster.getHistoryList(EITLERPGLOBAL.gCompanyID, objPolicyMst.getAttribute("POLICY_ID").getString());
        for(int i=1;i<=History.size();i++) {
            clsPolicyMaster ObjHistory=(clsPolicyMaster)History.get(Integer.toString(i));
            Object[] rowData=new Object[5];
            
            rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
            rowData[1]=ObjHistory.getAttribute("UPDATED_BY").getString();
            rowData[2]=ObjHistory.getAttribute("ENTRY_DATE").getString();
            
            String ApprovalStatus="";
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus="Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus="Final Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus="Waiting";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus="Rejected";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus="Pending";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus="Skiped";
            }
            
            rowData[3]=ApprovalStatus;
            rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
            
            DataModelHS.addRow(rowData);
        }
        //=========================== Audit Trail Over ===========================//
        
        //********************************************//
        
        int type = EITLERPGLOBAL.getComboCode(cmbPartyType);
        if ((EditMode==EITLERPGLOBAL.ADD) || (EditMode==EITLERPGLOBAL.EDIT)) {
            if (type == 0) {
                lblSpecificParty.setEnabled(true);
                panelparty.setEnabled(true);
                scrollpanelparty.setEnabled(true);
                cmdAddDtl.setEnabled(true);
                cmdRemoveDtl.setEnabled(true);
                TableDtl.setEnabled(true);
                //FormatPartyListGrid();
            }
            else {
                lblSpecificParty.setEnabled(false);
                panelparty.setEnabled(false);
                scrollpanelparty.setEnabled(false);
                cmdAddDtl.setEnabled(false);
                cmdRemoveDtl.setEnabled(false);
                TableDtl.setEnabled(false);
                //FormatGridDetail();
                //GeneratePartyListGrid(type);
            }
        }
        
        lblTitle.setText("POLICY MASTER - " + txtPolicyID.getText());
    }
    
    //Sets data to the Class Object
    private void SetData() {
        objPolicyMst.setAttribute("PREFIX",SelPrefix);
        objPolicyMst.setAttribute("SUFFIX",SelSuffix);
        objPolicyMst.setAttribute("FFNO",FFNo);
        
        objPolicyMst.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        objPolicyMst.setAttribute("POLICY_ID",txtPolicyID.getText());
        objPolicyMst.setAttribute("POLICY_NAME",txtPolicyName.getText());
        objPolicyMst.setAttribute("DISCOUNT_TYPE",EITLERPGLOBAL.getComboCode(cmbDiscountType));
        objPolicyMst.setAttribute("PARTY_TYPE",EITLERPGLOBAL.getComboCode(cmbPartyType));
        //        objPolicyMst.setAttribute("INVOICE_TYPES",EITLERPGLOBAL.getCombostrCode(cmbInvoiceTypes));
        objPolicyMst.setAttribute("APPLICABILITY",EITLERPGLOBAL.getComboCode(cmbDiscount_Applicability));
        double AmountLimit = 0,FlatPercent = 0;
        if (! txtApp_AmountLimit.getText().trim().equals("")) {
            AmountLimit = Double.parseDouble(txtApp_AmountLimit.getText().trim());
        }
        if (! txtFlatPercent.getText().trim().equals("")) {
            FlatPercent = Double.parseDouble(txtFlatPercent.getText().trim());
        }
        objPolicyMst.setAttribute("APP_AMOUNT_LIMIT",AmountLimit);
        objPolicyMst.setAttribute("FLAT_PERCENTAGE",FlatPercent);
        objPolicyMst.setAttribute("DISCOUNT_PERCENTAGE",EITLERPGLOBAL.getComboCode(cmbDiscount_per));
        objPolicyMst.setAttribute("PERIOD_BASE",EITLERPGLOBAL.getComboCode(cmbPeriodBase));
        objPolicyMst.setAttribute("EFFECTIVE_DATE",txtEffectiveDate.getText());
        objPolicyMst.setAttribute("EXPIRY_DATE",txtExpiryDate.getText());
        objPolicyMst.setAttribute("REMARKS",txtRemarks.getText());
        
        objPolicyMst.setAttribute("MAIN_ACCOUNT_CODE","");
        
        objPolicyMst.setAttribute("TURNOVER_CALC_TYPE",EITLERPGLOBAL.getComboCode(cmbTurnover_Calc));
        
        DeductionInfo = "";
        //Search in the table for SrNo.
        for(int i=0;i<TableDeduInfo.getRowCount();i++) {
            DeductionInfo = DeductionInfo + DataModelDeduInfo.getValueByVariable("MAIN_ACCOUNT_CODE", i) + ",";
        }
        
        objPolicyMst.setAttribute("DEDUCTION_CODES",DeductionInfo.trim());
        objPolicyMst.setAttribute("PERIOD",Integer.parseInt(txtPeriod.getText().trim()));
        objPolicyMst.setAttribute("INVOICE_MAIN_TYPE",EITLERPGLOBAL.getComboCode(cmbInvoiceMainType));
        objPolicyMst.setAttribute("CREDIT_NOTE_TYPE",EITLERPGLOBAL.getComboCode(cmbCreditNoteType));
        
        //----- Update Approval Specific Fields -----------//
        objPolicyMst.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        objPolicyMst.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        objPolicyMst.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        objPolicyMst.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            objPolicyMst.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            objPolicyMst.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            objPolicyMst.setAttribute("APPROVAL_STATUS","R");
            objPolicyMst.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            objPolicyMst.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        
        objPolicyMst.setAttribute("INVOICE_TYPES",InvoiceType);
        
        //======= Set Line part ============
        objPolicyMst.colPolicyParties.clear();
        objPolicyMst.colPolicyPartyPer.clear();
        
        int type = EITLERPGLOBAL.getComboCode(cmbPartyType);
        int CreditNoteType = EITLERPGLOBAL.getComboCode(cmbCreditNoteType);
        
        if (type == 0) {
            for(int i=0;i<TableDtl.getRowCount();i++) {
                clsPolicyParties objParty=new clsPolicyParties();
                objParty.setAttribute("SR_NO",i+1);
                objParty.setAttribute("PARTY_ID",DataModelDtl.getValueByVariable("PARTY_ID",i));
                objParty.setAttribute("PARTY_MAIN_CODE",DataModelDtl.getValueByVariable("PARTY_MAIN_CODE",i));
                objPolicyMst.colPolicyParties.put(Integer.toString(objPolicyMst.colPolicyParties.size()+1), objParty);
                
                if (CreditNoteType == 18) {
                    if (EITLERPGLOBAL.getComboCode(cmbDiscount_per)==0) {
                        clsPolicyPartyFlatPer objPartyPer = new clsPolicyPartyFlatPer();
                        objPartyPer.setAttribute("SR_NO",i+1);
                        objPartyPer.setAttribute("PARTY_ID",DataModelDtl.getValueByVariable("PARTY_ID",i));
                        objPartyPer.setAttribute("FROM_DATE",DataModelDtl.getValueByVariable("FROM_DATE",i));
                        objPartyPer.setAttribute("TO_DATE",DataModelDtl.getValueByVariable("TO_DATE",i));
                        objPartyPer.setAttribute("PRODUCT_CODE",DataModelDtl.getValueByVariable("PRODUCT_CODE",i));
                        objPartyPer.setAttribute("FLAT_PERCENTAGE",Double.parseDouble(DataModelDtl.getValueByVariable("FLAT_PERCENTAGE",i)));
                        objPolicyMst.colPolicyPartyPer.put(Integer.toString(objPolicyMst.colPolicyPartyPer.size()+1), objPartyPer);
                    }
                }
            }
        }
        else {
            for(int i=0;i<TablePartyList.getRowCount();i++) {
                clsPolicyParties objParty=new clsPolicyParties();
                if(TablePartyList.getValueAt(i,0).toString().equals("true")) {
                    objParty.setAttribute("SR_NO",i+1);
                    objParty.setAttribute("PARTY_ID",TablePartyList.getValueAt(i,2).toString());
                    objParty.setAttribute("PARTY_MAIN_CODE",TablePartyList.getValueAt(i,4).toString());
                    
                    objPolicyMst.colPolicyParties.put(Integer.toString(objPolicyMst.colPolicyParties.size()+1), objParty);
                }
            }
        }
        
        //======= Set Line part ============
        objPolicyMst.colPolicyTurnOverSlab.clear();
        objPolicyMst.colPolicySeasonSlab.clear();
        
        int DiscPer = EITLERPGLOBAL.getComboCode(cmbDiscount_per);
        if (DiscPer == 1) {
            for(int i=0;i<TableTurnoverSlabs.getRowCount();i++) {
                clsPolicyTurnoverSlabs objSlabs=new clsPolicyTurnoverSlabs();
                
                objSlabs.setAttribute("SR_NO",i+1);
                objSlabs.setAttribute("POLICY_ID",txtPolicyID.getText().trim());
                objSlabs.setAttribute("FROM_VALUE",Double.parseDouble(DataModelTurnover.getValueByVariable("FROM_VALUE",i)));
                objSlabs.setAttribute("TO_VALUE",Double.parseDouble(DataModelTurnover.getValueByVariable("TO_VALUE",i)));
                objSlabs.setAttribute("PERCENTAGE",Double.parseDouble(DataModelTurnover.getValueByVariable("PERCENTAGE",i)));
                
                objPolicyMst.colPolicyTurnOverSlab.put(Integer.toString(objPolicyMst.colPolicyTurnOverSlab.size()+1), objSlabs);
            }
        }
        else if (DiscPer == 2) {
            for(int i=0;i<TableSeasonSlabs.getRowCount();i++) {
                clsPolicySeasonSlabs objSlabs=new clsPolicySeasonSlabs();
                objSlabs.setAttribute("SR_NO",i+1);
                objSlabs.setAttribute("POLICY_ID",txtPolicyID.getText().trim());
                objSlabs.setAttribute("SEASON_ID",DataModelSeasonSlab.getValueByVariable("SEASON_ID",i));
                objSlabs.setAttribute("QUALITY_ID",DataModelSeasonSlab.getValueByVariable("QUALITY_ID",i));
                objSlabs.setAttribute("FROM_DATE",DataModelSeasonSlab.getValueByVariable("FROM_DATE",i));
                objSlabs.setAttribute("TO_DATE",DataModelSeasonSlab.getValueByVariable("TO_DATE",i));
                objSlabs.setAttribute("PERCENTAGE",Double.parseDouble(DataModelSeasonSlab.getValueByVariable("PERCENTAGE",i)));
                
                objPolicyMst.colPolicySeasonSlab.put(Integer.toString(objPolicyMst.colPolicySeasonSlab.size()+1), objSlabs);
            }
        }
    }
    
    private void SetList() {
        int SrNo=0;
        InvoiceType = "";
        
        HashMap TypeList=new HashMap();
        String str_Condition = "";
        
        str_Condition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" ";
        TypeList=clsPolicyInvoiceType.getList(str_Condition);
        
        //Scan the Table to get selected items
        for(int i=1;i<=TypeList.size();i++) {
            clsPolicyInvoiceType ObjType=(clsPolicyInvoiceType) TypeList.get(Integer.toString(i));
            SrNo=i;
            
            //Search in the table for SrNo.
            for(int j=0;j<Table.getRowCount();j++) {
                if(Integer.parseInt(Table.getValueAt(j, 1).toString())==SrNo) {
                    if(Table.getValueAt(j,0).toString().equals("true")) {
                        //Selected Item
                        InvoiceType = InvoiceType + (String)ObjType.getAttribute("INVOICE_TYPE_ID").getObj() + ",";
                        //colSelItems.put(Integer.toString(colSelItems.size()+1),ObjItem);
                    }
                }
            }
        }
    }
    
    private void SetMenuForRights() {
        
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11391)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        //if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11392)) {
        cmdEdit.setEnabled(true);
        //}
        //else {
        //    cmdEdit.setEnabled(false);
        //}
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11393)) {
            
            cmdDelete.setEnabled(true);
        }
        else {
            
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11394)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
        
    }
    
    private void Add() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        EditMode=EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        SetupApproval();
        
        //****************Now Generate new document no.****************//
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=clsPolicyMaster.ModuleID;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            
            SetupApproval();
            //Display newly generated document no.
            
            txtPolicyID.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID,clsPolicyMaster.ModuleID, FFNo,  false));
            txtPolicyName.requestFocus();
            
            lblTitle.setText("POLICY MASTER - " + txtPolicyID.getText());
            lblTitle.setBackground(Color.BLUE);
            
            int DiscPer = EITLERPGLOBAL.getComboCode(cmbDiscount_per);
            if ((EditMode==EITLERPGLOBAL.ADD) || (EditMode==EITLERPGLOBAL.EDIT)) {
                if (DiscPer == 0) {
                    int crtype = EITLERPGLOBAL.getComboCode(cmbCreditNoteType);
                    if (crtype == 18) {
                        txtFlatPercent.setEnabled(false);
                    }
                    else {
                        txtFlatPercent.setEnabled(true);
                    }
                    
                    TableTurnoverSlabs.setEnabled(false);
                    cmdTurnoverAddDtl.setEnabled(false);
                    cmdTurnoverRemoveDtl.setEnabled(false);
                    TableSeasonSlabs.setEnabled(false);
                    cmdSeasonAddDtl.setEnabled(false);
                    cmdSeasonRemoveDtl.setEnabled(false);
                }
                else if (DiscPer == 1) {
                    txtFlatPercent.setEnabled(false);
                    TableTurnoverSlabs.setEnabled(true);
                    cmdTurnoverAddDtl.setEnabled(true);
                    cmdTurnoverRemoveDtl.setEnabled(true);
                    TableSeasonSlabs.setEnabled(false);
                    cmdSeasonAddDtl.setEnabled(false);
                    cmdSeasonRemoveDtl.setEnabled(false);
                }
                else if (DiscPer == 2) {
                    txtFlatPercent.setEnabled(false);
                    TableTurnoverSlabs.setEnabled(false);
                    cmdTurnoverAddDtl.setEnabled(false);
                    cmdTurnoverRemoveDtl.setEnabled(false);
                    TableSeasonSlabs.setEnabled(true);
                    cmdSeasonAddDtl.setEnabled(true);
                    cmdSeasonRemoveDtl.setEnabled(true);
                }
            }
            
            int type = EITLERPGLOBAL.getComboCode(cmbDiscount_Applicability);
            if ((EditMode==EITLERPGLOBAL.ADD) || (EditMode==EITLERPGLOBAL.EDIT)) {
                if (type == 0) {
                    txtApp_AmountLimit.setEnabled(true);
                    txtApp_AmountLimit.setText("");
                }
                else {
                    txtApp_AmountLimit.setEnabled(false);
                    txtApp_AmountLimit.setText("");
                }
            }
            
            int Partytype = EITLERPGLOBAL.getComboCode(cmbPartyType);
            if (((EditMode==EITLERPGLOBAL.ADD) || (EditMode==EITLERPGLOBAL.EDIT)) ) {
                if (Partytype == 0) {
                    lblSpecificParty.setEnabled(true);
                    panelparty.setEnabled(true);
                    scrollpanelparty.setEnabled(true);
                    cmdAddDtl.setEnabled(true);
                    cmdRemoveDtl.setEnabled(true);
                    TableDtl.setEnabled(true);
                    FormatPartyListGrid();
                }
                else {
                    lblSpecificParty.setEnabled(false);
                    panelparty.setEnabled(false);
                    scrollpanelparty.setEnabled(false);
                    cmdAddDtl.setEnabled(false);
                    cmdRemoveDtl.setEnabled(false);
                    TableDtl.setEnabled(false);
                    FormatGridDetail();
                    FormatPartyListGrid();
                    GeneratePartyListGrid(type);
                }
            }
            
            int credittype = EITLERPGLOBAL.getComboCode(cmbCreditNoteType);
            if (credittype == 1) {
                for(int j=0;j<Table.getRowCount();j++) {
                    if(Table.getValueAt(j, 2).toString().trim().equals("09")) {
                        Table.setValueAt(Boolean.valueOf(true), j, 0);
                    }
                    else {
                        Table.setValueAt(Boolean.valueOf(false), j, 0);
                    }
                }
            }
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        String PolicyID=objPolicyMst.getAttribute("POLICY_ID").getString();
        String lDocNo=PolicyID;
        
        
        if(objPolicyMst.IsEditable(EITLERPGLOBAL.gCompanyID, PolicyID, EITLERPGLOBAL.gNewUserID)) {
            
            EITLERPGLOBAL.ChangeCursorToWait(this);
            
            EditMode=EITLERPGLOBAL.EDIT;
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            SetupApproval();
            //----------------//
            
            if(ApprovalFlow.IsCreator(clsPolicyMaster.ModuleID ,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11392)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            
            SetupApproval();
            DisableToolbar();
            txtPolicyName.requestFocus();
            
            EITLERPGLOBAL.ChangeCursorToDefault(this);
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
        
        
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        if(objPolicyMst.Delete(EITLERPGLOBAL.gNewUserID)) {
            MoveLast();
        }
    }
    
    private boolean Validate() {
        //** Validations **//
        
        if(txtPolicyName.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null,"Please Specify Policy Name.");
            txtPolicyName.requestFocus();
            return false;
        }
        
        if(txtEffectiveDate.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null,"Please Specify Effective Date.");
            txtEffectiveDate.requestFocus();
            return false;
        }
        else if(!EITLERPGLOBAL.isDate(txtEffectiveDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid Effective Date in DD/MM/YYYY format.");
            txtEffectiveDate.requestFocus();
            return false;
        }
        
        if (! txtExpiryDate.getText().trim().equals("")) {
            if(!EITLERPGLOBAL.isDate(txtExpiryDate.getText())) {
                JOptionPane.showMessageDialog(null,"Invalid Expiry Date in DD/MM/YYYY format.");
                txtExpiryDate.requestFocus();
                return false;
            }
        }
        
        if (InvoiceType.trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Select Invoice Type.");
            return false;
        }
        
        if (txtPeriod.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Specify Particuler Period.");
            return false;
        }
        
        int type = EITLERPGLOBAL.getComboCode(cmbDiscount_Applicability);
        if (type == 0) {
            if (txtApp_AmountLimit.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Please Enter Amount Limit.");
                txtApp_AmountLimit.requestFocus();
                return false;
            }
            else if(!EITLERPGLOBAL.IsNumber(txtApp_AmountLimit.getText())) {
                JOptionPane.showMessageDialog(null,"Invalid Amount Limit format.");
                txtApp_AmountLimit.requestFocus();
                return false;
                
            }
        }
        
        type = EITLERPGLOBAL.getComboCode(cmbPartyType);
        if (type == 0) {
            if (TableDtl.getRowCount()==0) {
                JOptionPane.showMessageDialog(null,"Please Specify Specific Party.");
                cmbPartyType.requestFocus();
                return false;
            }
        }
        else {
            boolean chk=false;
            for (int i=0;i<TablePartyList.getRowCount();i++) {
                if (TablePartyList.getValueAt(i,0).toString().trim().equals("true")) {
                    chk=true;
                }
            }
            if (chk==false) {
                JOptionPane.showMessageDialog(null,"Please Specify Specific Party.");
                cmbPartyType.requestFocus();
                return false;
            }
            
        }
        
        type = EITLERPGLOBAL.getComboCode(cmbDiscount_per);
        if (type == 0) {
            int CreditType = EITLERPGLOBAL.getComboCode(cmbCreditNoteType);
            if (CreditType != 18) {
                if (txtFlatPercent.getText().trim().equals("")) {
                    JOptionPane.showMessageDialog(null,"Please Enter Flat Percentage.");
                    txtFlatPercent.requestFocus();
                    return false;
                }
                else if(!EITLERPGLOBAL.IsNumber(txtFlatPercent.getText())) {
                    JOptionPane.showMessageDialog(null,"Invalid Flat Percentage format.");
                    txtFlatPercent.requestFocus();
                    return false;
                    
                }
            }
        }
        else if (type==1) {
            if (TableTurnoverSlabs.getRowCount()==0) {
                JOptionPane.showMessageDialog(null,"Please Specify Turnover Slabs.");
                cmbDiscount_per.requestFocus();
                return false;
            }
        }
        else if (type==2) {
            if (TableSeasonSlabs.getRowCount()==0) {
                JOptionPane.showMessageDialog(null,"Please Specify Season Slabs.");
                cmbDiscount_per.requestFocus();
                return false;
            }
        }
        
        if (OpgReject.isSelected()) {
            if (txtToRemarks.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Please Specify Rejected Remarks.");
                txtToRemarks.requestFocus();
                return false;
            }
        }
        
        //*****************//
        
        return true;
    }
    
    private void Save() {
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        
        SetList();
        
        //** Validations **//
        if(!Validate()){
            return;
        }
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(objPolicyMst.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+objPolicyMst.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(objPolicyMst.Update()) {
                //Nothing to do
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+objPolicyMst.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
        
        txtFlatPercent.setEnabled(false);
        txtApp_AmountLimit.setEnabled(false);
        
        cmdTurnoverAddDtl.setEnabled(false);
        cmdTurnoverRemoveDtl.setEnabled(false);
        cmdSeasonAddDtl.setEnabled(false);
        cmdSeasonRemoveDtl.setEnabled(false);
        cmdAddDtl.setEnabled(false);
        cmdRemoveDtl.setEnabled(false);
        cmbSendTo.setEnabled(false);
        
        try {
            frmPA.RefreshView();
        }catch(Exception e){}
        
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Find() {
        
        Loader ObjLoader=new Loader(this,"EITLERP.Sales.frmPolicyMasterFind",true);
        frmPolicyMasterFind ObjReturn= (frmPolicyMasterFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!objPolicyMst.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveFirst();
        }
        
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objPolicyMst.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objPolicyMst.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objPolicyMst.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objPolicyMst.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    public void FindEx(int pCompanyID,String pDocNo) {
        objPolicyMst.Filter(" WHERE POLICY_ID='"+pDocNo+"' AND COMPANY_ID=" + pCompanyID+ " ",pCompanyID);
        objPolicyMst.MoveFirst();
        DisplayData();
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        
    }
    
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    
    private void SetupApproval() {
        
        if(cmbHierarchy.getItemCount()>1) {
            cmbHierarchy.setEnabled(true);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, clsPolicyMaster.ModuleID , objPolicyMst.getAttribute("POLICY_ID").getString());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,clsPolicyMaster.ModuleID ,FromUserID,objPolicyMst.getAttribute("POLICY_ID").getString());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
        
    }
    
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, clsPolicyMaster.ModuleID ,objPolicyMst.getAttribute("POLICY_ID").getString());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e) {
        }
    }
    
    private void GenerateRejectedUserCombo() {
        HashMap List=new HashMap();
        HashMap DeptList=new HashMap();
        HashMap DeptUsers=new HashMap();
        
        //----- Generate cmbType ------- //
        cmbToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            
            /// NEW CODE ///
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID,clsPolicyMaster.ModuleID , objPolicyMst.getAttribute("POLICY_ID").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, clsPolicyMaster.ModuleID, objPolicyMst.getAttribute("POLICY_ID").getString(), ObjUser.getAttribute("USER_ID").getInt() , EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(( ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            }
            else {
                if((ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///
            
            
            
        }
        //------------------------------ //
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, clsPolicyMaster.ModuleID , objPolicyMst.getAttribute("POLICY_ID").getString());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
        
    }
    
    
    private void GenerateCombos() {
        try {
            ComboData objData=new ComboData();
            //Generates Combo Boxes
            
            //---- Generate Discount Type ----
            cmbDiscountTypeModel=new EITLComboModel();
            cmbDiscountType.removeAllItems();
            cmbDiscountType.setModel(cmbDiscountTypeModel);
            
            objData=new ComboData();
            objData.Code=0;
            objData.Text="Normal Discount";
            cmbDiscountTypeModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=1;
            objData.Text="Incentives";
            cmbDiscountTypeModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=2;
            objData.Text="Scheme Discount";
            cmbDiscountTypeModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=3;
            objData.Text="Commission";
            cmbDiscountTypeModel.addElement(objData);
            // ----  ----
            
            //---- Generate Party Type ----
            cmbPartyTypeModel=new EITLComboModel();
            cmbPartyType.removeAllItems();
            cmbPartyType.setModel(cmbPartyTypeModel);
            
            objData=new ComboData();
            objData.Code=0;
            objData.Text="Specific Parties";
            cmbPartyTypeModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=1;
            objData.Text="Wholesalers";
            cmbPartyTypeModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=2;
            objData.Text="Retailers";
            cmbPartyTypeModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=3;
            objData.Text="Agents";
            cmbPartyTypeModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=4;
            objData.Text="LC Opener";
            cmbPartyTypeModel.addElement(objData); 
            
            objData=new ComboData();
            objData.Code=5;
            objData.Text="Incentives Parties";
            cmbPartyTypeModel.addElement(objData);
            // ----  ----
            
            //---- Generate Discount Applicability ----
            cmbDiscount_ApplicabilityModel=new EITLComboModel();
            cmbDiscount_Applicability.removeAllItems();
            cmbDiscount_Applicability.setModel(cmbDiscount_ApplicabilityModel);
            
            objData=new ComboData();
            objData.Code=0;
            objData.Text="L.C. Opener";
            cmbDiscount_ApplicabilityModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=1;
            objData.Text="Parent Party";
            cmbDiscount_ApplicabilityModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=2;
            objData.Text="To the Party";
            cmbDiscount_ApplicabilityModel.addElement(objData);
            // ----  ----
            
            //---- Generate Discount Percentage ----
            cmbDiscount_perModel=new EITLComboModel();
            cmbDiscount_per.removeAllItems();
            cmbDiscount_per.setModel(cmbDiscount_perModel);
            
            objData=new ComboData();
            objData.Code=0;
            objData.Text="Flat Percentage";
            cmbDiscount_perModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=1;
            objData.Text="Percentage based on Turnover";
            cmbDiscount_perModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=2;
            objData.Text="Percentage based on season and quality";
            cmbDiscount_perModel.addElement(objData);
            // ----  ----
            
            //---- Generate Period Base ----
            cmbPeriodBaseModel=new EITLComboModel();
            cmbPeriodBase.removeAllItems();
            cmbPeriodBase.setModel(cmbPeriodBaseModel);
            
            objData=new ComboData();
            objData.Code=0;
            objData.Text="Financial Year";
            cmbPeriodBaseModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=1;
            objData.Text="Calender Year";
            cmbPeriodBaseModel.addElement(objData);
            // ----  ----
            
            //---- Generate Turnover Calculation ----
            cmbTurnover_CalcModel=new EITLComboModel();
            cmbTurnover_Calc.removeAllItems();
            cmbTurnover_Calc.setModel(cmbTurnover_CalcModel);
            
            objData=new ComboData();
            objData.Code=0;
            objData.Text="Group Turnover";
            cmbTurnover_CalcModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=1;
            objData.Text="Individual Turnover";
            cmbTurnover_CalcModel.addElement(objData);
            // ----  ----
            
            //---- Generate Invoice Main Type ----
            cmbInvoiceMainTypeModel=new EITLComboModel();
            cmbInvoiceMainType.removeAllItems();
            cmbInvoiceMainType.setModel(cmbInvoiceMainTypeModel);
            
            objData=new ComboData();
            objData.Code=0;
            objData.Text="Suiting";
            cmbInvoiceMainTypeModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=1;
            objData.Text="Felt";
            cmbInvoiceMainTypeModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=2;
            objData.Text="Filter";
            cmbInvoiceMainTypeModel.addElement(objData);
            // ----  ----
            
            //---- Generate Credit Note Type ----
            HashMap TypeList=new HashMap();
            String str_Condition="";
            ResultSet rsCreditNoteType;
            
            cmbCreditNoteTypeModel=new EITLComboModel();
            cmbCreditNoteType.removeAllItems();
            cmbCreditNoteType.setModel(cmbCreditNoteTypeModel);
            
            str_Condition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" ";
            
            
            TypeList=clsPolicyCreditNoteType.getList(str_Condition);
            
            for(int i=1;i<=TypeList.size();i++) {
                clsPolicyCreditNoteType ObjType=(clsPolicyCreditNoteType) TypeList.get(Integer.toString(i));
                ComboData aData=new ComboData();
                aData.Code=0;
                aData.Text=(String)ObjType.getAttribute("TYPE_DESC").getObj();
                aData.Code=(int) ObjType.getAttribute("TYPE_ID").getVal();
                cmbCreditNoteTypeModel.addElement(aData);
            }
            // ---- ----
            
            HashMap List=new HashMap();
            String strCondition="";
            ResultSet rsTmp;
            
            cmbHierarchyModel=new EITLComboModel();
            cmbHierarchy.removeAllItems();
            cmbHierarchy.setModel(cmbHierarchyModel);
            
            List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsPolicyMaster.ModuleID);
            
            if(EditMode==EITLERPGLOBAL.EDIT) {
                List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsPolicyMaster.ModuleID );
            }
            for(int i=1;i<=List.size();i++) {
                clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
                ComboData aData=new ComboData();
                aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
                aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
                cmbHierarchyModel.addElement(aData);
            }
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Panel1.getComponentCount()-1;i++) {
            if(Panel1.getComponent(i).getName()!=null) {
                
                FieldName=Panel1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Panel1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//
    }
    
    private void FormatGrid() {
        DataModel=new EITLTableModel();
        
        Table.removeAll();
        
        Table.setModel(DataModel);
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        for(int i=1;i<=4;i++) {
            DataModel.SetReadOnly(i);
        }
        
        //Add Columns to it
        DataModel.addColumn(""); //0 Selection
        DataModel.addColumn("Sr.");//1
        DataModel.addColumn("Invoice Type ID");//2
        DataModel.addColumn("Invoice Type Desc");//3
        
        Rend.setCustomComponent(0,"CheckBox");
        Table.getColumnModel().getColumn(0).setCellRenderer(Rend);
        Table.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));
    }
    
    private void GenerateGrid(String sCondition) {
        HashMap TypeList=new HashMap();
        String str_Condition = "";
        
        str_Condition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" " + sCondition;
        TypeList=clsPolicyInvoiceType.getList(str_Condition);
        
        for(int i=1;i<=TypeList.size();i++) {
            clsPolicyInvoiceType ObjType=(clsPolicyInvoiceType) TypeList.get(Integer.toString(i));
            HashMap colLot=ObjType.colTypeLot;
            
            Object[] rowData=new Object[4];
            
            rowData[0]=Boolean.valueOf(false); //By default not selected
            rowData[1]=Integer.toString(i);
            rowData[2]=(String)ObjType.getAttribute("INVOICE_TYPE_ID").getObj();
            rowData[3]=(String)ObjType.getAttribute("INVOICE_TYPE_DESC").getObj();
            
            DataModel.addRow(rowData);
            
            //Set the Collection
            DataModel.SetUserObject(Table.getRowCount()-1, colLot);
        }
    }
    
    private void FormatGridDetail() {
        try {
            
            DataModelDtl=new EITLTableModel();
            
            EITLTableCellRenderer cellRender=new EITLTableCellRenderer();
            cellRender.setHorizontalAlignment(JLabel.RIGHT);
            
            //cmdAddDtl.requestFocus();
            
            TableDtl.removeAll();
            TableDtl.setModel(DataModelDtl);
            
            TableColumnModel ColModel=TableDtl.getColumnModel();
            TableDtl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //Add the columns
            DataModelDtl.addColumn("Sr. No."); //0 Read Only
            DataModelDtl.addColumn("Party Code"); //1
            DataModelDtl.addColumn("Main Account Code"); //2
            
            DataModelDtl.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModelDtl.SetVariable(1,"PARTY_ID"); //1
            DataModelDtl.SetVariable(2,"PARTY_MAIN_CODE"); //2
            
            DataModelDtl.TableReadOnly(false);
            DataModelDtl.SetReadOnly(0);
            DataModelDtl.SetReadOnly(1);
            DataModelDtl.SetReadOnly(2);
            
            DataModelDtl.SetNumeric(0,true);
            
            TableDtl.getColumnModel().getColumn(1).setCellRenderer(cellRender);
            
            Updating=false;
            //Table formatting completed
            
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void FormatGridFlatDetail() {
        try {
            
            DataModelDtl=new EITLTableModel();
            
            EITLTableCellRenderer cellRender=new EITLTableCellRenderer();
            cellRender.setHorizontalAlignment(JLabel.RIGHT);
            
            //cmdAddDtl.requestFocus();
            
            TableDtl.removeAll();
            TableDtl.setModel(DataModelDtl);
            
            TableColumnModel ColModel=TableDtl.getColumnModel();
            TableDtl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //Add the columns
            DataModelDtl.addColumn("Sr. No."); //0 Read Only
            DataModelDtl.addColumn("Party Code"); //1
            DataModelDtl.addColumn("Main Account Code"); //2
            DataModelDtl.addColumn("From Date");//3
            DataModelDtl.addColumn("To Date");//4
            DataModelDtl.addColumn("Product Code");//5
            DataModelDtl.addColumn("Flat Percentage"); //6
            
            DataModelDtl.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModelDtl.SetVariable(1,"PARTY_ID"); //1
            DataModelDtl.SetVariable(2,"PARTY_MAIN_CODE"); //2
            DataModelDtl.SetVariable(3,"FROM_DATE"); //3
            DataModelDtl.SetVariable(4,"TO_DATE"); //4
            DataModelDtl.SetVariable(5,"PRODUCT_CODE"); //5
            DataModelDtl.SetVariable(6,"FLAT_PERCENTAGE"); //6
            
            DataModelDtl.TableReadOnly(false);
            DataModelDtl.SetReadOnly(0);
            DataModelDtl.SetReadOnly(1);
            DataModelDtl.SetReadOnly(2);
            
            DataModelDtl.SetNumeric(0,true);
            
            TableDtl.getColumnModel().getColumn(1).setCellRenderer(cellRender);
            
            Updating=false;
            //Table formatting completed
            
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void FormatPartyListGrid() {
        DataModelPartyList=new EITLTableModel();
        
        TablePartyList.removeAll();
        
        TablePartyList.setModel(DataModelPartyList);
        TablePartyList.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        for(int i=1;i<=4;i++) {
            DataModelPartyList.SetReadOnly(i);
        }
        
        //Add Columns to it
        DataModelPartyList.addColumn(""); //0 Selection
        DataModelPartyList.addColumn("Sr.");//1
        DataModelPartyList.addColumn("Party Code");//2
        DataModelPartyList.addColumn("Party Name");//3
        DataModelPartyList.addColumn("Main Account Code");//4
        
        Rend.setCustomComponent(0,"CheckBox");
        TablePartyList.getColumnModel().getColumn(0).setCellRenderer(Rend);
        TablePartyList.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));
    }
    
    private void GeneratePartiesGrid(String PolicyID) {
        
        for (int j=0;j<TablePartyList.getRowCount();j++) {
            Object Obj = "false";
            TablePartyList.setValueAt(Obj, j, 0);
        }
        
        HashMap TypeList=new HashMap();
        String str_Condition = "";
        
        str_Condition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND POLICY_ID='"+ PolicyID +"' ";
        TypeList=clsPolicyParties.getList(str_Condition);
        
        for(int i=1;i<=TypeList.size();i++) {
            clsPolicyParties ObjParty=(clsPolicyParties) TypeList.get(Integer.toString(i));
            
            String PartyID = (String)ObjParty.getAttribute("PARTY_ID").getObj();
            for (int j=0;j<TablePartyList.getRowCount();j++) {
                
                if (TablePartyList.getValueAt(j,0).toString().trim().equals("false")) {
                    if (TablePartyList.getValueAt(j,2).toString().trim().equals(PartyID)) {
                        Object Obj = "true";
                        TablePartyList.setValueAt(Obj, j, 0);
                    }
                }
            }
        }
    }
    
//    
    
    private void GeneratePartyListGrid(int PartyType) {
        if (TablePartyList.getRowCount()==0) {
            HashMap TypeList=new HashMap();
            String str_Condition = "",str="";
            if (PartyType == 1) {//WHOLESALER
                str = " AND PARTY_TYPE = 3 ";
            }
            else if (PartyType == 2) {//RETAILER
                str = " AND PARTY_TYPE = 2 ";
            }
            else if (PartyType == 3) {//AGENT
                str = " AND PARTY_TYPE = 1 ";
            }
            else if (PartyType == 5) {//INVCENTIVE PARTIES
                str = " AND PARTY_TYPE IN (2,3) ";
            }
            
            int type = EITLERPGLOBAL.getComboCode(cmbInvoiceMainType);
            String MainAccountCode = "";
            if (type==0) {
                str = str + " AND MAIN_ACCOUNT_CODE IN ('210027') ";
                MainAccountCode = "210027";
            }
            else  if (type==1) {
                str = str + " AND MAIN_ACCOUNT_CODE IN ('210010') ";
                MainAccountCode = "210010";
            }
            else if (type==2) {
                str = str + " AND MAIN_ACCOUNT_CODE IN ('210072') ";
                MainAccountCode = "210072";
            }
            
            if (PartyType == 5) {//Incentives Parties
                //*************lc opener party*****************//
                str_Condition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" " + str + " ";
                TypeList=clsPolicyParties.getListFromPartyMst(str_Condition);
                int cnt = 0;
                for(int i=1;i<=TypeList.size();i++) {
                    clsPolicyParties ObjParty=(clsPolicyParties) TypeList.get(Integer.toString(i));
                    HashMap colLot=ObjParty.colPolicyParties;
                    cnt++;
                    Object[] rowData=new Object[5];
                    
                    rowData[0]=Boolean.valueOf(true); //By default selected
                    rowData[1]=Integer.toString(cnt);
                    rowData[2]=(String)ObjParty.getAttribute("PARTY_ID").getObj();
                    String PartyCode = (String)ObjParty.getAttribute("PARTY_ID").getObj();
                    rowData[3]=clsPolicyMaster.getPartyName(EITLERPGLOBAL.gCompanyID, PartyCode,MainAccountCode);
                    rowData[4]=(String)ObjParty.getAttribute("PARTY_MAIN_CODE").getObj();
                    
                    DataModelPartyList.addRow(rowData);
                    
                    //Set the Collection
                    DataModelPartyList.SetUserObject(TablePartyList.getRowCount()-1, colLot);
                }
                //*********************************************//
                //*************Wholesaler & Retailer party*****************//
                str_Condition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" ";
                TypeList=clsPolicyParties.getListFromLCMst(str_Condition);
                
                for(int i=1;i<=TypeList.size();i++) {
                    clsPolicyParties ObjParty=(clsPolicyParties) TypeList.get(Integer.toString(i));
                    HashMap colLot=ObjParty.colPolicyParties;
                    cnt++;
                    Object[] rowData=new Object[5];
                    
                    rowData[0]=Boolean.valueOf(true); //By default selected
                    rowData[1]=Integer.toString(cnt);
                    rowData[2]=(String)ObjParty.getAttribute("PARTY_ID").getObj();
                    String PartyCode = (String)ObjParty.getAttribute("PARTY_ID").getObj();
                    rowData[3]=clsPolicyMaster.getPartyName(EITLERPGLOBAL.gCompanyID, PartyCode,MainAccountCode);
                    rowData[4]=(String)ObjParty.getAttribute("PARTY_MAIN_CODE").getObj();
                    
                    DataModelPartyList.addRow(rowData);
                    
                    //Set the Collection
                    DataModelPartyList.SetUserObject(TablePartyList.getRowCount()-1, colLot);
                }
                //*********************************************************//
            }
            else if (PartyType == 4) {//LC Opener
                
                str_Condition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" ";
                TypeList=clsPolicyParties.getListFromLCMst(str_Condition);
                
                for(int i=1;i<=TypeList.size();i++) {
                    clsPolicyParties ObjParty=(clsPolicyParties) TypeList.get(Integer.toString(i));
                    HashMap colLot=ObjParty.colPolicyParties;
                    
                    Object[] rowData=new Object[5];
                    
                    rowData[0]=Boolean.valueOf(true); //By default selected
                    rowData[1]=Integer.toString(i);
                    rowData[2]=(String)ObjParty.getAttribute("PARTY_ID").getObj();
                    String PartyCode = (String)ObjParty.getAttribute("PARTY_ID").getObj();
                    rowData[3]=clsPolicyMaster.getPartyName(EITLERPGLOBAL.gCompanyID, PartyCode,MainAccountCode);
                    rowData[4]=(String)ObjParty.getAttribute("PARTY_MAIN_CODE").getObj();
                    
                    DataModelPartyList.addRow(rowData);
                    
                    //Set the Collection
                    DataModelPartyList.SetUserObject(TablePartyList.getRowCount()-1, colLot);
                }
                
            }
            else {
                
                
                str_Condition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" " + str + " ";
                TypeList=clsPolicyParties.getListFromPartyMst(str_Condition);
                
                for(int i=1;i<=TypeList.size();i++) {
                    clsPolicyParties ObjParty=(clsPolicyParties) TypeList.get(Integer.toString(i));
                    HashMap colLot=ObjParty.colPolicyParties;
                    
                    Object[] rowData=new Object[5];
                    
                    rowData[0]=Boolean.valueOf(true); //By default selected
                    rowData[1]=Integer.toString(i);
                    rowData[2]=(String)ObjParty.getAttribute("PARTY_ID").getObj();
                    String PartyCode = (String)ObjParty.getAttribute("PARTY_ID").getObj();
                    rowData[3]=clsPolicyMaster.getPartyName(EITLERPGLOBAL.gCompanyID, PartyCode,MainAccountCode);
                    rowData[4]=(String)ObjParty.getAttribute("PARTY_MAIN_CODE").getObj();
                    
                    DataModelPartyList.addRow(rowData);
                    
                    //Set the Collection
                    DataModelPartyList.SetUserObject(TablePartyList.getRowCount()-1, colLot);
                }
                
            }
        }
    }

    private void FormatTurnoverSlabsDetail() {
        try {
            
            DataModelTurnover=new EITLTableModel();
            
            EITLTableCellRenderer cellRender=new EITLTableCellRenderer();
            cellRender.setHorizontalAlignment(JLabel.RIGHT);
            
            //cmdAddDtl.requestFocus();
            
            TableTurnoverSlabs.removeAll();
            TableTurnoverSlabs.setModel(DataModelTurnover);
            
            TableColumnModel ColModel=TableTurnoverSlabs.getColumnModel();
            TableTurnoverSlabs.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //Add the columns
            DataModelTurnover.addColumn("Sr. No."); //0 Read Only
            DataModelTurnover.addColumn("Policy ID"); //1
            DataModelTurnover.addColumn("From Value"); //2
            DataModelTurnover.addColumn("To Value"); //3
            DataModelTurnover.addColumn("Percentage"); //4
            
            DataModelTurnover.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModelTurnover.SetVariable(1,"POLICY_ID"); //1
            DataModelTurnover.SetVariable(2,"FROM_VALUE"); //2
            DataModelTurnover.SetVariable(3,"TO_VALUE"); //3
            DataModelTurnover.SetVariable(4,"PERCENTAGE"); //4
            
            DataModelTurnover.TableReadOnly(false);
            DataModelTurnover.SetReadOnly(0);
            DataModelTurnover.SetReadOnly(1);
            
            DataModelTurnover.SetNumeric(0,true);
            
            TableTurnoverSlabs.getColumnModel().getColumn(1).setCellRenderer(cellRender);
            
            Updating=false;
            //Table formatting completed
            
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void FormatSeasonSlabsDetail() {
        try {
            
            DataModelSeasonSlab=new EITLTableModel();
            
            EITLTableCellRenderer cellRender=new EITLTableCellRenderer();
            cellRender.setHorizontalAlignment(JLabel.RIGHT);
            
            //cmdAddDtl.requestFocus();
            
            TableSeasonSlabs.removeAll();
            TableSeasonSlabs.setModel(DataModelSeasonSlab);
            
            TableColumnModel ColModel=TableSeasonSlabs.getColumnModel();
            TableSeasonSlabs.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //Add the columns
            DataModelSeasonSlab.addColumn("Sr. No."); //0 Read Only
            DataModelSeasonSlab.addColumn("Policy ID"); //1
            DataModelSeasonSlab.addColumn("Season ID"); //2
            DataModelSeasonSlab.addColumn("Season Name"); //3
            DataModelSeasonSlab.addColumn("Quality ID"); //4
            DataModelSeasonSlab.addColumn("From Date"); //5
            DataModelSeasonSlab.addColumn("To Date"); //6
            DataModelSeasonSlab.addColumn("Percentage"); //7
            
            DataModelSeasonSlab.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModelSeasonSlab.SetVariable(1,"POLICY_ID"); //1
            DataModelSeasonSlab.SetVariable(2,"SEASON_ID"); //2
            DataModelSeasonSlab.SetVariable(3,"SEASON_NAME"); //3
            DataModelSeasonSlab.SetVariable(4,"QUALITY_ID"); //4
            DataModelSeasonSlab.SetVariable(5,"FROM_DATE"); //5
            DataModelSeasonSlab.SetVariable(6,"TO_DATE"); //6
            DataModelSeasonSlab.SetVariable(7,"PERCENTAGE"); //7
            
            DataModelSeasonSlab.TableReadOnly(false);
            DataModelSeasonSlab.SetReadOnly(0);
            DataModelSeasonSlab.SetReadOnly(1);
            DataModelSeasonSlab.SetReadOnly(2);
            DataModelSeasonSlab.SetReadOnly(3);
            DataModelSeasonSlab.SetReadOnly(4);
            
            DataModelSeasonSlab.SetNumeric(0,true);
            
            TableSeasonSlabs.getColumnModel().getColumn(1).setCellRenderer(cellRender);
            
            Updating=false;
            //Table formatting completed
            
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void FormatDeduInfo() {
        try {
            
            DataModelDeduInfo=new EITLTableModel();
            
            EITLTableCellRenderer cellRender=new EITLTableCellRenderer();
            cellRender.setHorizontalAlignment(JLabel.RIGHT);
            
            TableDeduInfo.removeAll();
            TableDeduInfo.setModel(DataModelDeduInfo);
            
            TableColumnModel ColModel=TableDtl.getColumnModel();
            TableDeduInfo.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //Add the columns
            DataModelDeduInfo.addColumn("Sr. No."); //0 Read Only
            DataModelDeduInfo.addColumn("Main Account Code"); //1
            DataModelDeduInfo.addColumn("Account Name"); //2
            
            DataModelDeduInfo.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModelDeduInfo.SetVariable(1,"MAIN_ACCOUNT_CODE"); //1
            DataModelDeduInfo.SetVariable(2,"ACCOUNT_NAME"); //2
            
            DataModelDeduInfo.TableReadOnly(false);
            DataModelDeduInfo.SetReadOnly(0);
            DataModelDeduInfo.SetReadOnly(1);
            DataModelDeduInfo.SetReadOnly(2);
            
            DataModelDeduInfo.SetNumeric(0,true);
            
            TableDeduInfo.getColumnModel().getColumn(1).setCellRenderer(cellRender);
            
            Updating=false;
            //Table formatting completed
            
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void FindWaiting() {
       objPolicyMst.Filter(" WHERE POLICY_ID IN (SELECT D_SAL_POLICY_MASTER.POLICY_ID FROM D_SAL_POLICY_MASTER,D_COM_DOC_DATA WHERE D_SAL_POLICY_MASTER.POLICY_ID=D_COM_DOC_DATA.DOC_NO AND D_SAL_POLICY_MASTER.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_SAL_POLICY_MASTER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND MODULE_ID="+clsPolicyMaster.ModuleID+" ) ",EITLERPGLOBAL.gCompanyID);
       objPolicyMst.MoveLast();
       DisplayData();
   } 

    private void DisplayPolicyData(clsPolicyMaster ObjPolicy) {
        
        try {
            ClearFields();
            
            txtPolicyID.setText(ObjPolicy.getAttribute("POLICY_ID").getString());
            txtPolicyName.setText(ObjPolicy.getAttribute("POLICY_NAME").getString());
            txtEffectiveDate.setText(ObjPolicy.getAttribute("EFFECTIVE_DATE").getString());
            txtExpiryDate.setText(ObjPolicy.getAttribute("EXPIRY_DATE").getString());
            txtRemarks.setText(ObjPolicy.getAttribute("REMARKS").getString());
            
            //txtDeduction_Info.setText(ObjPolicy.getAttribute("DEDUCTION_CODES").getString());
            
            //===================Fill up Deduction Information Table===================//
            DeductionInfo = ObjPolicy.getAttribute("DEDUCTION_CODES").getString();
            if (! DeductionInfo.trim().equals("")) {
                String sDeductionInfo[] = DeductionInfo.trim().split(",");
                
                for(int n=0;n<sDeductionInfo.length;n++) {
                    
                    Object[] rowData=new Object[3];
                    DataModelDeduInfo.addRow(rowData);
                    int NewRow=TableDeduInfo.getRowCount()-1;
                    
                    DataModelDeduInfo.setValueByVariable("SR_NO",Integer.toString(n+1), NewRow);
                    DataModelDeduInfo.setValueByVariable("MAIN_ACCOUNT_CODE",sDeductionInfo[n].trim(),NewRow);
                    DataModelDeduInfo.setValueByVariable("ACCOUNT_NAME",clsPolicyMaster.getMainAccountName(EITLERPGLOBAL.gCompanyID,sDeductionInfo[n].trim()),NewRow);
                    
                }
            }
            //==================================================//
            
            txtPeriod.setText(Integer.toString(ObjPolicy.getAttribute("PERIOD").getInt()));
            
            EITLERPGLOBAL.setComboIndex(cmbDiscountType,ObjPolicy.getAttribute("DISCOUNT_TYPE").getInt());
            EITLERPGLOBAL.setComboIndex(cmbDiscount_Applicability,ObjPolicy.getAttribute("APPLICABILITY").getInt());
            EITLERPGLOBAL.setComboIndex(cmbInvoiceMainType,ObjPolicy.getAttribute("INVOICE_MAIN_TYPE").getInt());
            txtApp_AmountLimit.setText(Double.toString(ObjPolicy.getAttribute("APP_AMOUNT_LIMIT").getDouble()));
            EITLERPGLOBAL.setComboIndex(cmbCreditNoteType,ObjPolicy.getAttribute("CREDIT_NOTE_TYPE").getInt());
            
            EITLERPGLOBAL.setComboIndex(cmbDiscount_per,ObjPolicy.getAttribute("DISCOUNT_PERCENTAGE").getInt());
            
            
            int DiscPer = EITLERPGLOBAL.getComboCode(cmbDiscount_per);
            if (DiscPer == 0) {
                txtFlatPercent.setText(Double.toString(ObjPolicy.getAttribute("FLAT_PERCENTAGE").getDouble()));
                FormatTurnoverSlabsDetail();
                FormatSeasonSlabsDetail();
            }
            else if (DiscPer == 1) {
                txtFlatPercent.setText("");
                FormatTurnoverSlabsDetail();
                FormatSeasonSlabsDetail();
                //=========Now Generate Table====================//
                for(int i=1;i<=ObjPolicy.colPolicyTurnOverSlab.size();i++) {
                    clsPolicyTurnoverSlabs ObjSlabs=(clsPolicyTurnoverSlabs)ObjPolicy.colPolicyTurnOverSlab.get(Integer.toString(i));
                    Object[] rowData=new Object[5];
                    DataModelTurnover.addRow(rowData);
                    
                    int NewRow=TableTurnoverSlabs.getRowCount()-1;
                    
                    DataModelTurnover.setValueByVariable("SR_NO",Integer.toString(i), NewRow);
                    DataModelTurnover.setValueByVariable("POLICY_ID",txtPolicyID.getText().trim(),NewRow);
                    DataModelTurnover.setValueByVariable("FROM_VALUE",Double.toString(ObjSlabs.getAttribute("FROM_VALUE").getVal()),NewRow);
                    DataModelTurnover.setValueByVariable("TO_VALUE",Double.toString(ObjSlabs.getAttribute("TO_VALUE").getVal()),NewRow);
                    DataModelTurnover.setValueByVariable("PERCENTAGE",Double.toString(ObjSlabs.getAttribute("PERCENTAGE").getVal()),NewRow);
                    
                }
            }
            else if (DiscPer == 2) {
                txtFlatPercent.setText("");
                FormatTurnoverSlabsDetail();
                FormatSeasonSlabsDetail();
                //=========Now Generate Table====================//
                for(int i=1;i<=ObjPolicy.colPolicySeasonSlab.size();i++) {
                    clsPolicySeasonSlabs ObjSlabs=(clsPolicySeasonSlabs)ObjPolicy.colPolicySeasonSlab.get(Integer.toString(i));
                    Object[] rowData=new Object[8];
                    DataModelSeasonSlab.addRow(rowData);
                    
                    int NewRow=TableSeasonSlabs.getRowCount()-1;
                    
                    DataModelSeasonSlab.setValueByVariable("SR_NO",Integer.toString(i), NewRow);
                    DataModelSeasonSlab.setValueByVariable("POLICY_ID",txtPolicyID.getText().trim(),NewRow);
                    DataModelSeasonSlab.setValueByVariable("SEASON_ID",(String)ObjSlabs.getAttribute("SEASON_ID").getObj(),NewRow);
                    DataModelSeasonSlab.setValueByVariable("SEASON_NAME",clsPolicyMaster.getSeasonName(EITLERPGLOBAL.gCompanyID, (String)ObjSlabs.getAttribute("SEASON_ID").getObj()),NewRow);
                    DataModelSeasonSlab.setValueByVariable("QUALITY_ID",(String)ObjSlabs.getAttribute("QUALITY_ID").getObj(),NewRow);
                    DataModelSeasonSlab.setValueByVariable("FROM_DATE",(String)ObjSlabs.getAttribute("FROM_DATE").getObj(),NewRow);
                    DataModelSeasonSlab.setValueByVariable("TO_DATE",(String)ObjSlabs.getAttribute("TO_DATE").getObj(),NewRow);
                    DataModelSeasonSlab.setValueByVariable("PERCENTAGE",Double.toString(ObjSlabs.getAttribute("PERCENTAGE").getVal()),NewRow);
                    
                }
            }
            
            if ((EditMode==EITLERPGLOBAL.ADD) || (EditMode==EITLERPGLOBAL.EDIT)) {
                if (DiscPer == 0) {
                    int crtype = EITLERPGLOBAL.getComboCode(cmbCreditNoteType);
                    if (crtype == 18) {
                        txtFlatPercent.setEnabled(false);
                    }
                    else {
                        txtFlatPercent.setEnabled(true);
                    }
                    TableTurnoverSlabs.setEnabled(false);
                    cmdTurnoverAddDtl.setEnabled(false);
                    cmdTurnoverRemoveDtl.setEnabled(false);
                    TableSeasonSlabs.setEnabled(false);
                    cmdSeasonAddDtl.setEnabled(false);
                    cmdSeasonRemoveDtl.setEnabled(false);
                }
                else if (DiscPer == 1) {
                    txtFlatPercent.setEnabled(false);
                    TableTurnoverSlabs.setEnabled(true);
                    cmdTurnoverAddDtl.setEnabled(true);
                    cmdTurnoverRemoveDtl.setEnabled(true);
                    TableSeasonSlabs.setEnabled(false);
                    cmdSeasonAddDtl.setEnabled(false);
                    cmdSeasonRemoveDtl.setEnabled(false);
                }
                else if (DiscPer == 2) {
                    txtFlatPercent.setEnabled(false);
                    TableTurnoverSlabs.setEnabled(false);
                    cmdTurnoverAddDtl.setEnabled(false);
                    cmdTurnoverRemoveDtl.setEnabled(false);
                    TableSeasonSlabs.setEnabled(true);
                    cmdSeasonAddDtl.setEnabled(true);
                    cmdSeasonRemoveDtl.setEnabled(true);
                }
            }
            
            //===================Fill up Table===================//
            int Inv_type = EITLERPGLOBAL.getComboCode(cmbInvoiceMainType);
            FormatGrid();
            if (Inv_type == 1) {
                GenerateGrid(" AND INVOICE_TYPE_ID NOT IN ('06') ");
            }
            else {
                GenerateGrid(" AND INVOICE_TYPE_ID NOT IN ('F04','06') ");
            }
            
            
            
            String InvType="";
            InvoiceType = ObjPolicy.getAttribute("INVOICE_TYPES").getString();
            String sInvType[] = InvoiceType.trim().split(",");
            
            for(int n=0;n<sInvType.length;n++) {
                for(int j=0;j<Table.getRowCount();j++) {
                    if(Table.getValueAt(j, 2).toString().trim().equals(sInvType[n].trim())) {
                        Table.setValueAt(Boolean.valueOf(true), j, 0);
                    }
                }
            }
            //==================================================//
            
            //EITLERPGLOBAL.setComboIndex(cmbInvoiceTypes,ObjPolicy.getAttribute("INVOICE_TYPES").getString());
            EITLERPGLOBAL.setComboIndex(cmbPartyType,ObjPolicy.getAttribute("PARTY_TYPE").getInt());
            EITLERPGLOBAL.setComboIndex(cmbPeriodBase,ObjPolicy.getAttribute("PERIOD_BASE").getInt());
            EITLERPGLOBAL.setComboIndex(cmbTurnover_Calc,ObjPolicy.getAttribute("TURNOVER_CALC_TYPE").getInt());
            
            //************ Misc. Display *****************//
            txtToRemarks.setText("");
            SetupApproval();
            
            //EITLERPGLOBAL.setComboIndex(cmbHierarchy,ObjPolicy.getAttribute("HIERARCHY_ID").getInt());
            int Partytype = EITLERPGLOBAL.getComboCode(cmbPartyType);
            int CreditNoteType = EITLERPGLOBAL.getComboCode(cmbCreditNoteType);
            
            FormatGridDetail();
            FormatPartyListGrid();
            if (CreditNoteType == 18) {
                FormatGridFlatDetail();
            }
            else {
                FormatGridDetail();
            }
            
            if (Partytype==0) {
                //=========Now Generate Table====================//
                
                if (CreditNoteType == 18) {
                    for(int i=1;i<=ObjPolicy.colPolicyPartyPer.size();i++) {
                        clsPolicyPartyFlatPer ObjParty=(clsPolicyPartyFlatPer)ObjPolicy.colPolicyPartyPer.get(Integer.toString(i));
                        Object[] rowData=new Object[1];
                        DataModelDtl.addRow(rowData);
                        
                        int NewRow=TableDtl.getRowCount()-1;
                        
                        DataModelDtl.setValueByVariable("SR_NO",Integer.toString(i), NewRow);
                        DataModelDtl.setValueByVariable("PARTY_ID",(String)ObjParty.getAttribute("PARTY_ID").getObj(),NewRow);
                        String PartyCode = (String)ObjParty.getAttribute("PARTY_ID").getObj();
                        DataModelDtl.setValueByVariable("PARTY_MAIN_CODE",clsPolicyMaster.getMainAccountCode(EITLERPGLOBAL.gCompanyID,PartyCode),NewRow);
                        DataModelDtl.setValueByVariable("FROM_DATE",ObjParty.getAttribute("FROM_DATE").getString(),NewRow);
                        DataModelDtl.setValueByVariable("TO_DATE",ObjParty.getAttribute("TO_DATE").getString(),NewRow);
                        DataModelDtl.setValueByVariable("PRODUCT_CODE",ObjParty.getAttribute("PRODUCT_CODE").getString(),NewRow);
                        DataModelDtl.setValueByVariable("FLAT_PERCENTAGE",Double.toString(ObjParty.getAttribute("FLAT_PERCENTAGE").getDouble()),NewRow);
                    }
                }
                else {
                    for(int i=1;i<=ObjPolicy.colPolicyParties.size();i++) {
                        clsPolicyParties ObjParty=(clsPolicyParties)ObjPolicy.colPolicyParties.get(Integer.toString(i));
                        Object[] rowData=new Object[1];
                        DataModelDtl.addRow(rowData);
                        
                        int NewRow=TableDtl.getRowCount()-1;
                        
                        DataModelDtl.setValueByVariable("SR_NO",Integer.toString(i), NewRow);
                        DataModelDtl.setValueByVariable("PARTY_ID",(String)ObjParty.getAttribute("PARTY_ID").getObj(),NewRow);
                        DataModelDtl.setValueByVariable("PARTY_MAIN_CODE",(String)ObjParty.getAttribute("PARTY_MAIN_CODE").getObj(),NewRow);
                    }
                }
                //===============================================//
            }
            else {
                GeneratePartyListGrid(Partytype);
                GeneratePartiesGrid(txtPolicyID.getText().trim());
            }
            
            //********************************************//
            
            int type = EITLERPGLOBAL.getComboCode(cmbPartyType);
            if ((EditMode==EITLERPGLOBAL.ADD) || (EditMode==EITLERPGLOBAL.EDIT)) {
                if (type == 0) {
                    lblSpecificParty.setEnabled(true);
                    panelparty.setEnabled(true);
                    scrollpanelparty.setEnabled(true);
                    cmdAddDtl.setEnabled(true);
                    cmdRemoveDtl.setEnabled(true);
                    TableDtl.setEnabled(true);
                    //FormatPartyListGrid();
                }
                else {
                    lblSpecificParty.setEnabled(false);
                    panelparty.setEnabled(false);
                    scrollpanelparty.setEnabled(false);
                    cmdAddDtl.setEnabled(false);
                    cmdRemoveDtl.setEnabled(false);
                    TableDtl.setEnabled(false);
                    //FormatGridDetail();
                    //GeneratePartyListGrid(type);
                }
            }
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"Display Data Error: " + e.getMessage());
        }
    }
}
