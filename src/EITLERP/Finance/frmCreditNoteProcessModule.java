/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP.Finance;

/**
 *
 * @author  nitin
 */
/*<APPLET CODE=frmInward.class HEIGHT=500 WIDTH=665></APPLET>*/

import javax.swing.*;
import java.awt.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import javax.swing.text.*;
import EITLERP.Utils.*;
import java.sql.*;
import java.net.*;
import EITLERP.*;
import EITLERP.Finance.*;
import EITLERP.Sales.*;


public class frmCreditNoteProcessModule extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsCreditNoteProcessModule objProcessModule;
    
    private boolean Updating=false;
    
    private String theDocNo="";
    
    private EITLTableModel DataModelA;
    private EITLTableModel DataModelHS;
    
    private EITLTableCellRenderer Rend=new EITLTableCellRenderer();
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbAmountModel;
    private EITLComboModel cmbInvoiceTypeModel;
    private EITLComboModel cmbFinHierarchyModel;
    
    private EITLTableModel DataModelDtl;
    private EITLTableModel DataModelTurnoverDtl;
    private EITLTableModel DataModelInvoiceList;
    
    private int SelHierarchyID=0;
    private int lnFromID=0;
    
    private boolean IsGenerating=false;
    
    public frmPendingApprovals frmPA;
    
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    /** Creates new form frmTemplate */
    public frmCreditNoteProcessModule() {
        
        setSize(810,600);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        objProcessModule=new clsCreditNoteProcessModule();
        
        cmbAmount.enable(false);
        cmbInvoiceType.enable(false);
        
        GenerateCombos();
        FormatGrid();
        FormatInvoiceListGrid();
        FormatTurnOverGrid();
        SetMenuForRights();
        
        if(getName().equals("Link")) {
            
        }
        else {
            
            if(objProcessModule.LoadData(EITLERPGLOBAL.gCompanyID)) {
                objProcessModule.MoveFirst();
                DisplayData();
                SetMenuForRights();
                SetFields(false);
                ShowMessage("Ready ........");
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+objProcessModule.LastError);
            }
        }
        txtInvoiceType.setVisible(false);
        
        lblFinHierarchy.setVisible(false);
        cmbFinHierarchy.setVisible(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        txtAuditRemarks = new javax.swing.JTextField();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Header = new javax.swing.JTabbedPane();
        Panel1 = new javax.swing.JPanel();
        jTextArea2 = new javax.swing.JTextArea();
        txtPolicyName = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jTextArea3 = new javax.swing.JTextArea();
        lblAccountCode2 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        lblAccountCode3 = new javax.swing.JLabel();
        lblAccountID = new javax.swing.JLabel();
        txtPolicyID = new javax.swing.JTextField();
        lblSubCode5 = new javax.swing.JLabel();
        lblSubCode6 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        lblAccountID1 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        cmdRemarksBig = new javax.swing.JButton();
        lblAccountID2 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        lblAccountID3 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        lblSubCode7 = new javax.swing.JLabel();
        lblSubCode8 = new javax.swing.JLabel();
        cmbAmount = new javax.swing.JComboBox();
        cmbInvoiceType = new javax.swing.JComboBox();
        cmdInvoiceShow = new javax.swing.JButton();
        cmPolicyShow = new javax.swing.JButton();
        txtInvoiceType = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtCrBookCode = new javax.swing.JTextField();
        txtCrBookName = new javax.swing.JTextField();
        txtCrMainCode = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtCrMainCodeName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtDrBookCode = new javax.swing.JTextField();
        txtDrMainCode = new javax.swing.JTextField();
        txtDrBookName = new javax.swing.JTextField();
        txtDrMainCodeName = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableInvoiceList = new javax.swing.JTable();
        cmdInvoiceSelectAll = new javax.swing.JButton();
        cmdInvoiceClearAll = new javax.swing.JButton();
        cmdShowProcess = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel55 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableDtl = new javax.swing.JTable();
        cmVoucherShow = new javax.swing.JButton();
        cmdTurnOverShow = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TableTurnOverDtl = new javax.swing.JTable();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack2 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        lblFinHierarchy = new javax.swing.JLabel();
        cmbFinHierarchy = new javax.swing.JComboBox();
        jPanel6 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        txtAuditRemarks.setEnabled(false);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText("PROCESSING MODULE");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 800, 25);

        Panel1.setLayout(null);

        Panel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Panel1MouseClicked(evt);
            }
        });

        Panel1.add(jTextArea2);
        jTextArea2.setBounds(177, 29, 0, 15);

        txtPolicyName.setEditable(false);
        txtPolicyName.setName("PARTY_CODE");
        txtPolicyName.setEnabled(false);
        Panel1.add(txtPolicyName);
        txtPolicyName.setBounds(150, 80, 580, 19);

        jPanel2.setLayout(null);

        jPanel2.add(jTextArea3);
        jTextArea3.setBounds(177, 29, 0, 15);

        lblAccountCode2.setText("Account Code");
        jPanel2.add(lblAccountCode2);
        lblAccountCode2.setBounds(15, 20, 90, 15);

        jPanel2.add(jTextField3);
        jTextField3.setBounds(119, 18, 80, 19);

        jPanel2.add(jTextField4);
        jTextField4.setBounds(119, 49, 80, 19);

        lblAccountCode3.setText("Account Code");
        jPanel2.add(lblAccountCode3);
        lblAccountCode3.setBounds(15, 51, 90, 15);

        Panel1.add(jPanel2);
        jPanel2.setBounds(0, 0, 0, 0);

        lblAccountID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountID.setText("Policy ID");
        lblAccountID.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblAccountID);
        lblAccountID.setBounds(60, 50, 80, 15);

        txtPolicyID.setName("PARTY_ID");
        txtPolicyID.setNextFocusableComponent(txtPolicyName);
        txtPolicyID.setEnabled(false);
        txtPolicyID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPolicyIDFocusLost(evt);
            }
        });
        txtPolicyID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPolicyIDKeyPressed(evt);
            }
        });

        Panel1.add(txtPolicyID);
        txtPolicyID.setBounds(150, 50, 120, 19);

        lblSubCode5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode5.setText("From Date");
        lblSubCode5.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode5);
        lblSubCode5.setBounds(60, 150, 80, 15);

        lblSubCode6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode6.setText("To Date");
        lblSubCode6.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode6);
        lblSubCode6.setBounds(330, 150, 100, 15);

        txtFromDate.setName("PARTY_ID");
        txtFromDate.setEnabled(false);
        Panel1.add(txtFromDate);
        txtFromDate.setBounds(150, 150, 120, 19);

        txtToDate.setName("PARTY_ID");
        txtToDate.setEnabled(false);
        Panel1.add(txtToDate);
        txtToDate.setBounds(440, 150, 120, 19);

        lblAccountID1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountID1.setText("Remarks");
        lblAccountID1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblAccountID1);
        lblAccountID1.setBounds(60, 180, 80, 15);

        txtRemarks.setName("REMARKS");
        txtRemarks.setEnabled(false);
        Panel1.add(txtRemarks);
        txtRemarks.setBounds(150, 180, 580, 19);

        cmdRemarksBig.setText("...");
        cmdRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemarksBigActionPerformed(evt);
            }
        });

        Panel1.add(cmdRemarksBig);
        cmdRemarksBig.setBounds(740, 180, 33, 21);

        lblAccountID2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountID2.setText("Doc No");
        lblAccountID2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblAccountID2);
        lblAccountID2.setBounds(60, 20, 80, 15);

        txtDocNo.setEditable(false);
        txtDocNo.setName("PARTY_ID");
        txtDocNo.setNextFocusableComponent(txtPolicyName);
        txtDocNo.setEnabled(false);
        Panel1.add(txtDocNo);
        txtDocNo.setBounds(150, 20, 120, 19);

        lblAccountID3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountID3.setText("Doc Date");
        lblAccountID3.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblAccountID3);
        lblAccountID3.setBounds(350, 20, 80, 15);

        txtDocDate.setEditable(false);
        txtDocDate.setName("PARTY_ID");
        txtDocDate.setNextFocusableComponent(txtPolicyName);
        txtDocDate.setEnabled(false);
        Panel1.add(txtDocDate);
        txtDocDate.setBounds(440, 20, 120, 19);

        lblSubCode7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode7.setText("Invoice Type");
        lblSubCode7.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode7);
        lblSubCode7.setBounds(60, 110, 80, 15);

        lblSubCode8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode8.setText("Select Amount");
        lblSubCode8.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode8);
        lblSubCode8.setBounds(320, 110, 110, 15);

        Panel1.add(cmbAmount);
        cmbAmount.setBounds(440, 110, 150, 24);

        Panel1.add(cmbInvoiceType);
        cmbInvoiceType.setBounds(150, 110, 150, 24);

        cmdInvoiceShow.setText("Generate Invoice List");
        cmdInvoiceShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdInvoiceShowActionPerformed(evt);
            }
        });

        Panel1.add(cmdInvoiceShow);
        cmdInvoiceShow.setBounds(540, 340, 200, 25);

        cmPolicyShow.setText("SHOW");
        cmPolicyShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmPolicyShowActionPerformed(evt);
            }
        });

        Panel1.add(cmPolicyShow);
        cmPolicyShow.setBounds(280, 50, 90, 25);

        txtInvoiceType.setEditable(false);
        txtInvoiceType.setName("PARTY_ID");
        txtInvoiceType.setEnabled(false);
        Panel1.add(txtInvoiceType);
        txtInvoiceType.setBounds(630, 20, 120, 19);

        jLabel4.setText("Credit Book Code");
        Panel1.add(jLabel4);
        jLabel4.setBounds(30, 210, 110, 15);

        txtCrBookCode.setName("REQ_DATE");
        txtCrBookCode.setEnabled(false);
        txtCrBookCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCrBookCodeFocusLost(evt);
            }
        });
        txtCrBookCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCrBookCodeKeyPressed(evt);
            }
        });

        Panel1.add(txtCrBookCode);
        txtCrBookCode.setBounds(150, 210, 102, 19);

        txtCrBookName.setEditable(false);
        txtCrBookName.setName("REMARKS");
        txtCrBookName.setEnabled(false);
        Panel1.add(txtCrBookName);
        txtCrBookName.setBounds(260, 210, 366, 19);

        txtCrMainCode.setName("REQ_DATE");
        txtCrMainCode.setEnabled(false);
        txtCrMainCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCrMainCodeFocusLost(evt);
            }
        });
        txtCrMainCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCrMainCodeKeyPressed(evt);
            }
        });

        Panel1.add(txtCrMainCode);
        txtCrMainCode.setBounds(150, 240, 102, 19);

        jLabel10.setText("Credit Deduction Code");
        Panel1.add(jLabel10);
        jLabel10.setBounds(0, 240, 150, 15);

        txtCrMainCodeName.setEditable(false);
        txtCrMainCodeName.setName("REMARKS");
        txtCrMainCodeName.setEnabled(false);
        Panel1.add(txtCrMainCodeName);
        txtCrMainCodeName.setBounds(260, 240, 366, 19);

        jLabel5.setText("Debit Book Code");
        Panel1.add(jLabel5);
        jLabel5.setBounds(30, 270, 110, 15);

        jLabel11.setText("Debit Deduction Code");
        Panel1.add(jLabel11);
        jLabel11.setBounds(0, 300, 150, 15);

        txtDrBookCode.setName("REQ_DATE");
        txtDrBookCode.setEnabled(false);
        txtDrBookCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDrBookCodeFocusLost(evt);
            }
        });
        txtDrBookCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDrBookCodeKeyPressed(evt);
            }
        });

        Panel1.add(txtDrBookCode);
        txtDrBookCode.setBounds(150, 270, 102, 19);

        txtDrMainCode.setName("REQ_DATE");
        txtDrMainCode.setEnabled(false);
        txtDrMainCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDrMainCodeFocusLost(evt);
            }
        });
        txtDrMainCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDrMainCodeKeyPressed(evt);
            }
        });

        Panel1.add(txtDrMainCode);
        txtDrMainCode.setBounds(150, 300, 102, 19);

        txtDrBookName.setEditable(false);
        txtDrBookName.setName("REMARKS");
        txtDrBookName.setEnabled(false);
        Panel1.add(txtDrBookName);
        txtDrBookName.setBounds(260, 270, 366, 19);

        txtDrMainCodeName.setEditable(false);
        txtDrMainCodeName.setName("REMARKS");
        txtDrMainCodeName.setEnabled(false);
        Panel1.add(txtDrMainCodeName);
        txtDrMainCodeName.setBounds(260, 300, 366, 19);

        Header.addTab("Process Module", Panel1);

        jPanel3.setLayout(null);

        TableInvoiceList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(TableInvoiceList);

        jPanel3.add(jScrollPane4);
        jScrollPane4.setBounds(10, 10, 600, 365);

        cmdInvoiceSelectAll.setMnemonic('A');
        cmdInvoiceSelectAll.setText("Select All");
        cmdInvoiceSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdInvoiceSelectAllActionPerformed(evt);
            }
        });

        jPanel3.add(cmdInvoiceSelectAll);
        cmdInvoiceSelectAll.setBounds(630, 30, 100, 25);

        cmdInvoiceClearAll.setMnemonic('L');
        cmdInvoiceClearAll.setText("Clear All");
        cmdInvoiceClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdInvoiceClearAllActionPerformed(evt);
            }
        });

        jPanel3.add(cmdInvoiceClearAll);
        cmdInvoiceClearAll.setBounds(630, 70, 100, 25);

        cmdShowProcess.setText("Generate Process");
        cmdShowProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowProcessActionPerformed(evt);
            }
        });

        jPanel3.add(cmdShowProcess);
        cmdShowProcess.setBounds(630, 110, 160, 25);

        Header.addTab("Invoice List", jPanel3);

        jPanel1.setLayout(null);

        jLabel55.setFont(new java.awt.Font("Arial", 1, 12));
        jLabel55.setText("Process Detail");
        jPanel1.add(jLabel55);
        jLabel55.setBounds(7, 14, 108, 15);

        jPanel9.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(jPanel9);
        jPanel9.setBounds(100, 18, 680, 6);

        TableDtl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableDtl);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 40, 770, 300);

        cmVoucherShow.setText("SHOW CREDIT NOTE");
        cmVoucherShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmVoucherShowActionPerformed(evt);
            }
        });

        jPanel1.add(cmVoucherShow);
        cmVoucherShow.setBounds(610, 350, 160, 25);

        cmdTurnOverShow.setText("TURNOVER DISPLAY");
        cmdTurnOverShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTurnOverShowActionPerformed(evt);
            }
        });

        jPanel1.add(cmdTurnOverShow);
        cmdTurnOverShow.setBounds(440, 350, 160, 25);

        Header.addTab("Detail", jPanel1);
        jPanel1.getAccessibleContext().setAccessibleName("Detail");

        jPanel4.setLayout(null);

        TableTurnOverDtl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(TableTurnOverDtl);

        jPanel4.add(jScrollPane5);
        jScrollPane5.setBounds(10, 20, 770, 230);

        Header.addTab("Turnover Detail", jPanel4);

        Tab2.setLayout(null);

        Tab2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(16, 18, 66, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });

        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 14, 184, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(20, 52, 56, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setEditable(false);
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 50, 182, 19);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(20, 82, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 78, 468, 19);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 120, 86, 15);

        jPanel7.setLayout(null);

        jPanel7.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel7.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel7.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel7.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setEnabled(false);
        jPanel7.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel7);
        jPanel7.setBounds(88, 120, 182, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(18, 232, 60, 15);

        cmbSendTo.setEnabled(false);
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(88, 228, 184, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(16, 264, 60, 15);

        txtToRemarks.setEnabled(false);
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 260, 516, 19);

        cmdBack2.setText("<< Back");
        cmdBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack2ActionPerformed(evt);
            }
        });

        Tab2.add(cmdBack2);
        cmdBack2.setBounds(534, 350, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(559, 77, 33, 21);

        lblFinHierarchy.setText("Finance Hierarchy");
        Tab2.add(lblFinHierarchy);
        lblFinHierarchy.setBounds(18, 312, 120, 15);

        cmbFinHierarchy.setEditable(true);
        Tab2.add(cmbFinHierarchy);
        cmbFinHierarchy.setBounds(146, 308, 240, 24);

        Header.addTab("Approval", Tab2);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status");
        jPanel6.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel6.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 614, 144);

        lblDocumentHistory.setText("Document Update History");
        jPanel6.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 191, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel6.add(jScrollPane3);
        jScrollPane3.setBounds(13, 207, 473, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        jPanel6.add(cmdViewHistory);
        cmdViewHistory.setBounds(498, 242, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        jPanel6.add(cmdNormalView);
        cmdNormalView.setBounds(498, 273, 132, 24);

        cmdPreviewA.setText("Preview Report");
        cmdPreviewA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewAActionPerformed(evt);
            }
        });

        jPanel6.add(cmdPreviewA);
        cmdPreviewA.setBounds(498, 209, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        jPanel6.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(498, 305, 132, 24);

        Header.addTab("Status", jPanel6);

        getContentPane().add(Header);
        Header.setBounds(0, 90, 800, 410);
        Header.getAccessibleContext().setAccessibleName("Scheme Details");
        Header.getAccessibleContext().setAccessibleDescription("Scheme Details");

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 500, 800, 22);

    }//GEN-END:initComponents
    
    private void cmdTurnOverShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTurnOverShowActionPerformed
        // TODO add your handling code here:
        GenerateTurnOverGrid();
        Header.setSelectedIndex(3);
    }//GEN-LAST:event_cmdTurnOverShowActionPerformed
    
    private void txtDrMainCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDrMainCodeFocusLost
        // TODO add your handling code here:
        if (! txtDrMainCode.getText().trim().equals("")) {
            txtDrMainCodeName.setText(clsAccount.getAccountName(txtDrMainCode.getText(),""));
            FillUpCodes();
        }
        else {
            txtDrMainCodeName.setText("");
        }
    }//GEN-LAST:event_txtDrMainCodeFocusLost
    
    private void txtDrMainCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDrMainCodeKeyPressed
        // TODO add your handling code here:
        try {
            
            if(evt.getKeyCode()==112) {
                LOV aList=new LOV();
                
                aList.SQL="SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL WHERE  APPROVED=1 ORDER BY ACCOUNT_NAME";
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=FinanceGlobal.FinURL;
                
                if(aList.ShowLOV()) {
                    txtDrMainCode.setText(aList.ReturnVal);
                    txtDrMainCodeName.setText(clsAccount.getAccountName(aList.ReturnVal,""));
                }
                
            }
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_txtDrMainCodeKeyPressed
    
    private void txtDrBookCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDrBookCodeFocusLost
        // TODO add your handling code here:
        if (! txtDrBookCode.getText().trim().equals("")) {
            txtDrBookName.setText(clsBook.getBookName(EITLERPGLOBAL.gCompanyID, txtDrBookCode.getText()));
            FillUpCodes();
        }
        else {
            txtDrBookName.setText("");
        }
    }//GEN-LAST:event_txtDrBookCodeFocusLost
    
    private void txtDrBookCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDrBookCodeKeyPressed
        // TODO add your handling code here:
        try {
            
            if(evt.getKeyCode()==112) {
                LOV aList=new LOV();
                
                aList.SQL="SELECT BOOK_CODE,BOOK_NAME FROM D_FIN_BOOK_MASTER ORDER BY BOOK_NAME";
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=FinanceGlobal.FinURL;
                
                if(aList.ShowLOV()) {
                    txtDrBookCode.setText(aList.ReturnVal);
                    txtDrBookName.setText(clsBook.getBookName(EITLERPGLOBAL.gCompanyID, txtDrBookCode.getText()));
                }
                
            }
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_txtDrBookCodeKeyPressed
    
    private void txtCrMainCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCrMainCodeFocusLost
        // TODO add your handling code here:
        if (! txtCrMainCode.getText().trim().equals("")) {
            txtCrMainCodeName.setText(clsAccount.getAccountName(txtCrMainCode.getText(),""));
            FillUpCodes();
        }
        else {
            txtCrMainCodeName.setText("");
        }
    }//GEN-LAST:event_txtCrMainCodeFocusLost
    
    private void txtCrMainCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCrMainCodeKeyPressed
        // TODO add your handling code here:
        try {
            
            if(evt.getKeyCode()==112) {
                LOV aList=new LOV();
                
                aList.SQL="SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL WHERE  APPROVED=1 ORDER BY ACCOUNT_NAME";
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=FinanceGlobal.FinURL;
                
                if(aList.ShowLOV()) {
                    txtCrMainCode.setText(aList.ReturnVal);
                    txtCrMainCodeName.setText(clsAccount.getAccountName(aList.ReturnVal,""));
                }
                
            }
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_txtCrMainCodeKeyPressed
    
    private void txtCrBookCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCrBookCodeFocusLost
        // TODO add your handling code here:
        if (! txtCrBookCode.getText().trim().equals("")) {
            txtCrBookName.setText(clsBook.getBookName(EITLERPGLOBAL.gCompanyID, txtCrBookCode.getText()));
            FillUpCodes();
        }
        else {
            txtCrBookName.setText("");
        }
    }//GEN-LAST:event_txtCrBookCodeFocusLost
    
    private void txtCrBookCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCrBookCodeKeyPressed
        // TODO add your handling code here:
        try {
            
            if(evt.getKeyCode()==112) {
                LOV aList=new LOV();
                
                aList.SQL="SELECT BOOK_CODE,BOOK_NAME FROM D_FIN_BOOK_MASTER ORDER BY BOOK_NAME";
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=FinanceGlobal.FinURL;
                
                if(aList.ShowLOV()) {
                    txtCrBookCode.setText(aList.ReturnVal);
                    txtCrBookName.setText(clsBook.getBookName(EITLERPGLOBAL.gCompanyID, txtCrBookCode.getText()));
                }
                
            }
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_txtCrBookCodeKeyPressed
    
    private void cmVoucherShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmVoucherShowActionPerformed
        // TODO add your handling code here:
        int row = TableDtl.getSelectedRow();
        String VoucherNo = TableDtl.getValueAt(row, 6).toString();
        if (! VoucherNo.trim().equals("")) {
            clsModuleInterface.OpenDocument(EITLERPGLOBAL.gCompanyID, clsVoucher.CreditNoteVoucherModuleID, VoucherNo.trim(),0);
        }
    }//GEN-LAST:event_cmVoucherShowActionPerformed
    
    private void cmPolicyShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmPolicyShowActionPerformed
        // TODO add your handling code here:
        if (! txtPolicyID.getText().trim().equals("")) {
            clsModuleInterface.OpenDocument(EITLERPGLOBAL.gCompanyID, clsPolicyMaster.ModuleID, txtPolicyID.getText().trim(),0);
        }
    }//GEN-LAST:event_cmPolicyShowActionPerformed
    
    private void cmdShowProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowProcessActionPerformed
        // TODO add your handling code here:
        try {
            
            if(txtPolicyID.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Please specify Policy ID");
                return;
            }
            
            if(txtFromDate.getText().trim().equals("")){
                JOptionPane.showMessageDialog(null,"Please Specify From Date.");
                txtFromDate.requestFocus();
                return;
            }
            else if(!EITLERPGLOBAL.isDate(txtFromDate.getText())) {
                JOptionPane.showMessageDialog(null,"Invalid From Date in DD/MM/YYYY format.");
                return;
            }
            
            if(txtToDate.getText().trim().equals("")){
                JOptionPane.showMessageDialog(null,"Please Specify To Date.");
                txtToDate.requestFocus();
                return;
            }
            else if(!EITLERPGLOBAL.isDate(txtToDate.getText())) {
                JOptionPane.showMessageDialog(null,"Invalid To Date in DD/MM/YYYY format.");
                return;
            }
            
            
            
            GenerateGrid();
            Header.setSelectedIndex(2);
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdShowProcessActionPerformed
    
    private void cmdInvoiceShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInvoiceShowActionPerformed
        // TODO add your handling code here:
        if(txtPolicyID.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null,"Please Specify Policy ID.");
            txtPolicyID.requestFocus();
            return;
        }
        if(txtFromDate.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null,"Please Specify From Date.");
            txtFromDate.requestFocus();
            return;
        }
        else if(!EITLERPGLOBAL.isDate(txtFromDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid From Date in DD/MM/YYYY format.");
            return;
        }
        
        if(txtToDate.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null,"Please Specify To Date.");
            txtToDate.requestFocus();
            return;
        }
        else if(!EITLERPGLOBAL.isDate(txtToDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid To Date in DD/MM/YYYY format.");
            return;
        }
        
        FormatInvoiceListGrid();
        GenerateInvoiceGrid();
        Header.setSelectedIndex(1);
    }//GEN-LAST:event_cmdInvoiceShowActionPerformed
    
    private void cmdInvoiceClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInvoiceClearAllActionPerformed
        // TODO add your handling code here:
        for(int i=0;i<TableInvoiceList.getRowCount();i++) {
            DataModelInvoiceList.setValueAt(Boolean.valueOf(false), i, 0);
        }
    }//GEN-LAST:event_cmdInvoiceClearAllActionPerformed
    
    private void cmdInvoiceSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInvoiceSelectAllActionPerformed
        // TODO add your handling code here:
        for(int i=0;i<TableInvoiceList.getRowCount();i++) {
            DataModelInvoiceList.setValueAt(Boolean.valueOf(true), i, 0);
        }
    }//GEN-LAST:event_cmdInvoiceSelectAllActionPerformed
    
    private void txtPolicyIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPolicyIDFocusLost
        // TODO add your handling code here:
        if (! txtPolicyID.getText().trim().equals("")) {
            txtPolicyName.setText(clsPolicyMaster.getPolicyName(EITLERPGLOBAL.gCompanyID, txtPolicyID.getText().trim()));
            txtInvoiceType.setText(clsPolicyMaster.getPolicyInvoice(EITLERPGLOBAL.gCompanyID, txtPolicyID.getText().trim()));
            EITLERPGLOBAL.setComboIndex(cmbInvoiceType,data.getIntValueFromDB("SELECT INVOICE_MAIN_TYPE FROM D_SAL_POLICY_MASTER WHERE POLICY_ID='" + txtPolicyID.getText().trim() + "'"));
            
        }
    }//GEN-LAST:event_txtPolicyIDFocusLost
    
    private void txtPolicyIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPolicyIDKeyPressed
        // TODO add your handling code here:
        try {
            
            if(evt.getKeyCode()==112) {
                LOV aList=new LOV();
                
                aList.SQL="SELECT POLICY_ID,POLICY_NAME FROM D_SAL_POLICY_MASTER WHERE APPROVED = 1 AND CANCELLED=0 ORDER BY POLICY_ID";
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=EITLERPGLOBAL.DatabaseURL;
                
                if(aList.ShowLOV()) {
                    txtPolicyID.setText(aList.ReturnVal);
                    txtPolicyName.setText(clsPolicyMaster.getPolicyName(EITLERPGLOBAL.gCompanyID, txtPolicyID.getText()));
                    txtInvoiceType.setText(clsPolicyMaster.getPolicyInvoice(EITLERPGLOBAL.gCompanyID, txtPolicyID.getText().trim()));
                    EITLERPGLOBAL.setComboIndex(cmbInvoiceType,data.getIntValueFromDB("SELECT INVOICE_MAIN_TYPE FROM D_SAL_POLICY_MASTER WHERE POLICY_ID='" + txtPolicyID.getText().trim() + "'"));
                }
                
            }
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_txtPolicyIDKeyPressed
    
    
    private void cmdRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdRemarksBigActionPerformed
    
    private void cmdPreviewAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewAActionPerformed
    
    private void cmdBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack2ActionPerformed
        // TODO add your handling code here:
        Header.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack2ActionPerformed
    
    private void Panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Panel1MouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_Panel1MouseClicked
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
        
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        objProcessModule.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveFirst();
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        objProcessModule.ShowHistory(EITLERPGLOBAL.gCompanyID, objProcessModule.getAttribute("DOC_NO").getString());
        MoveFirst();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
        
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
        
        if(OpgFinal.isEnabled()) {
            lblFinHierarchy.setVisible(true);
            cmbFinHierarchy.setVisible(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if(ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID,clsCreditNoteProcessModule.ModuleID , objProcessModule.getAttribute("DOC_NO").getString())) {
                cmbSendTo.setEnabled(true);
            }
            else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateFromCombo();
        }
        
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
        
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        objProcessModule.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Header;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel Panel1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableDtl;
    private javax.swing.JTable TableHS;
    private javax.swing.JTable TableInvoiceList;
    private javax.swing.JTable TableTurnOverDtl;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton cmPolicyShow;
    private javax.swing.JButton cmVoucherShow;
    private javax.swing.JComboBox cmbAmount;
    private javax.swing.JComboBox cmbFinHierarchy;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbInvoiceType;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdInvoiceClearAll;
    private javax.swing.JButton cmdInvoiceSelectAll;
    private javax.swing.JButton cmdInvoiceShow;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemarksBig;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowProcess;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdTurnOverShow;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JLabel lblAccountCode2;
    private javax.swing.JLabel lblAccountCode3;
    private javax.swing.JLabel lblAccountID;
    private javax.swing.JLabel lblAccountID1;
    private javax.swing.JLabel lblAccountID2;
    private javax.swing.JLabel lblAccountID3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblFinHierarchy;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblSubCode5;
    private javax.swing.JLabel lblSubCode6;
    private javax.swing.JLabel lblSubCode7;
    private javax.swing.JLabel lblSubCode8;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtCrBookCode;
    private javax.swing.JTextField txtCrBookName;
    private javax.swing.JTextField txtCrMainCode;
    private javax.swing.JTextField txtCrMainCodeName;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtDrBookCode;
    private javax.swing.JTextField txtDrBookName;
    private javax.swing.JTextField txtDrMainCode;
    private javax.swing.JTextField txtDrMainCodeName;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtInvoiceType;
    private javax.swing.JTextField txtPolicyID;
    private javax.swing.JTextField txtPolicyName;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtToDate;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    
    private void SetFields(boolean pStat) {
        
        txtDocNo.setEnabled(pStat);
        txtDocDate.setEnabled(pStat);
        txtPolicyID.setEnabled(pStat);
        txtPolicyName.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        txtFromDate.setEnabled(pStat);
        txtToDate.setEnabled(pStat);
        cmbAmount.setEnabled(pStat);
        
        cmdInvoiceShow.setEnabled(pStat);
        cmdShowProcess.setEnabled(pStat);
        cmdInvoiceShow.setEnabled(pStat);
        cmdShowProcess.setEnabled(pStat);
        
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        txtCrBookCode.setEnabled(pStat);
        txtCrMainCode.setEnabled(pStat);
        txtDrBookCode.setEnabled(pStat);
        txtDrMainCode.setEnabled(pStat);
        
        if(!pStat) {
            lblFinHierarchy.setVisible(false);
            cmbFinHierarchy.setVisible(false);
        }
        cmdTurnOverShow.setEnabled(pStat);
    }
    
    private void ClearFields() {
        
        txtDocNo.setText("");
        txtDocDate.setText("");
        txtPolicyID.setText("");
        txtPolicyName.setText("");
        txtRemarks.setText("");
        txtFromDate.setText("");
        txtToDate.setText("");
        
        cmbAmount.setSelectedIndex(0);
        cmbInvoiceType.setSelectedIndex(0);
        
        txtCrBookCode.setText("");
        txtCrBookName.setText("");
        txtCrMainCode.setText("");
        txtCrMainCodeName.setText("");
        txtDrBookCode.setText("");
        txtDrBookName.setText("");
        txtDrMainCode.setText("");
        txtDrMainCodeName.setText("");
        
        for(int i=0;i<TableInvoiceList.getRowCount();i++) {
            DataModelInvoiceList.setValueAt(Boolean.valueOf(false), i, 0);
        }
        FormatGrid();
        FormatInvoiceListGrid();
        FormatTurnOverGrid();
        
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                if(objProcessModule.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(objProcessModule.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(objProcessModule.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
                
                
            }
        }
        catch(Exception c) {
            
        }
        //============================================//
        
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=clsCreditNoteProcessModule.ModuleID;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        
        ClearFields();
        
        txtDocNo.setText(objProcessModule.getAttribute("DOC_NO").getString());
        txtDocDate.setText(objProcessModule.getAttribute("DOC_DATE").getString());
        txtPolicyID.setText(objProcessModule.getAttribute("POLICY_ID").getString());
        txtPolicyName.setText(clsPolicyMaster.getPolicyName(EITLERPGLOBAL.gCompanyID,txtPolicyID.getText().trim()));
        txtFromDate.setText(objProcessModule.getAttribute("FROM_DATE").getString());
        txtToDate.setText(objProcessModule.getAttribute("TO_DATE").getString());
        txtRemarks.setText(objProcessModule.getAttribute("REMARKS").getString());
        EITLERPGLOBAL.setComboIndex(cmbAmount,objProcessModule.getAttribute("AMOUNT_SELECTION").getString());
        EITLERPGLOBAL.setComboIndex(cmbInvoiceType,data.getIntValueFromDB("SELECT INVOICE_MAIN_TYPE FROM D_SAL_POLICY_MASTER WHERE POLICY_ID='" + txtPolicyID.getText().trim() + "'"));
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,objProcessModule.getAttribute("HIERARCHY_ID").getInt());
        
        //==============invoice list=======//
        FormatInvoiceListGrid();
        //GenerateInvoiceGrid();
        //=================================//
        //=============detail process===============//
        FormatGrid();
        for(int i=1;i<=objProcessModule.colProcessDtl.size();i++) {
            clsCreditNoteProcessDetail ObjItem=(clsCreditNoteProcessDetail)objProcessModule.colProcessDtl.get(Integer.toString(i));
            Object[] rowData=new Object[1];
            DataModelDtl.addRow(rowData);
            
            int NewRow=TableDtl.getRowCount()-1;
            
            DataModelDtl.setValueByVariable("SR_NO",Integer.toString(i), NewRow);
            DataModelDtl.setValueByVariable("PARTY_ID",ObjItem.getAttribute("PARTY_ID").getString(), NewRow);
            DataModelDtl.setValueByVariable("PARTY_MAIN_CODE",ObjItem.getAttribute("PARTY_MAIN_CODE").getString(), NewRow);
            DataModelDtl.setValueByVariable("AMOUNT",Double.toString(ObjItem.getAttribute("AMOUNT").getDouble()),NewRow);
            DataModelDtl.setValueByVariable("QUALIFING_AMOUNT",Double.toString(ObjItem.getAttribute("QUALIFING_AMOUNT").getDouble()),NewRow);
            DataModelDtl.setValueByVariable("PERCENTAGE",Double.toString(ObjItem.getAttribute("PERCENTAGE").getDouble()),NewRow);
            DataModelDtl.setValueByVariable("CREDIT_NOTE_NO",ObjItem.getAttribute("CREDIT_NOTE_NO").getString(), NewRow);
            DataModelDtl.setValueByVariable("INVOICE_NO",ObjItem.getAttribute("INVOICE_NO").getString(), NewRow);
            DataModelDtl.setValueByVariable("INVOICE_DATE",ObjItem.getAttribute("INVOICE_DATE").getString(), NewRow);
            DataModelDtl.setValueByVariable("SEASON_ID",ObjItem.getAttribute("SEASON_ID").getString(), NewRow);
            DataModelDtl.setValueByVariable("QUALITY_ID",ObjItem.getAttribute("QUALITY_ID").getString(), NewRow);
            DataModelDtl.setValueByVariable("PIECE_NO",ObjItem.getAttribute("PIECE_NO").getString(), NewRow);
            DataModelDtl.setValueByVariable("DISCOUNT_AMOUNT",Double.toString(ObjItem.getAttribute("DISCOUNT_AMOUNT").getDouble()),NewRow);
            DataModelDtl.setValueByVariable("VOUCHER_TYPE",Integer.toString(ObjItem.getAttribute("VOUCHER_TYPE").getInt()),NewRow);
            DataModelDtl.setValueByVariable("BOOK_CODE",ObjItem.getAttribute("BOOK_CODE").getString(), NewRow);
            DataModelDtl.setValueByVariable("DEDUCTION_CODE",ObjItem.getAttribute("DEDUCTION_CODE").getString(), NewRow);
            int VouType = ObjItem.getAttribute("VOUCHER_TYPE").getInt();
            if (VouType==FinanceGlobal.TYPE_CREDIT_NOTE) {
                txtCrBookCode.setText(ObjItem.getAttribute("BOOK_CODE").getString());
                txtCrMainCode.setText(ObjItem.getAttribute("DEDUCTION_CODE").getString());
                txtCrBookName.setText(clsBook.getBookName(EITLERPGLOBAL.gCompanyID, txtCrBookCode.getText()));
                txtCrMainCodeName.setText(clsAccount.getAccountName(txtCrMainCode.getText(),""));
            }
            else if (VouType==FinanceGlobal.TYPE_DEBIT_NOTE) {
                txtDrBookCode.setText(ObjItem.getAttribute("BOOK_CODE").getString());
                txtDrMainCode.setText(ObjItem.getAttribute("DEDUCTION_CODE").getString());
                txtDrBookName.setText(clsBook.getBookName(EITLERPGLOBAL.gCompanyID, txtDrBookCode.getText()));
                txtDrMainCodeName.setText(clsAccount.getAccountName(txtDrMainCode.getText(),""));
            }
        }
        
        
        //=========================================//
        
        //=============invoice list===============//
        FormatInvoiceListGrid();
        for(int i=1;i<=objProcessModule.colProcessInvDtl.size();i++) {
            clsPolicyInvoiceList ObjItem=(clsPolicyInvoiceList)objProcessModule.colProcessInvDtl.get(Integer.toString(i));
            
            HashMap colLot=ObjItem.colTypeLot;
            
            Object[] rowData=new Object[9];
            
            rowData[0]=Boolean.toString(ObjItem.getAttribute("SELECTION").getBool());
            rowData[1]=Integer.toString(i);
            rowData[2]=(String)ObjItem.getAttribute("INVOICE_NO").getObj();
            rowData[3]=(String)ObjItem.getAttribute("INVOICE_DATE").getObj();
            rowData[4]=(String)ObjItem.getAttribute("PARTY_CODE").getObj();
            rowData[5]=(String)ObjItem.getAttribute("PARTY_NAME").getObj();
            rowData[6]=(String)ObjItem.getAttribute("CHARGE_CODE").getObj();
            rowData[7]=(String)ObjItem.getAttribute("QUALITY_NO").getObj();
            rowData[8]=(String)ObjItem.getAttribute("PIECE_NO").getObj();
            
            DataModelInvoiceList.addRow(rowData);
            
            //Set the Collection
            DataModelInvoiceList.SetUserObject(TableInvoiceList.getRowCount()-1, colLot);
            
        }
        //=========================================//
        
        
        
        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List=new HashMap();
        String DocNo=objProcessModule.getAttribute("DOC_NO").getString();
        List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, clsCreditNoteProcessModule.ModuleID , DocNo);
        for(int i=1;i<=List.size();i++) {
            clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
            Object[] rowData=new Object[7];
            
            rowData[0]=Integer.toString(i);
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
            rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
            rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
            rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
            rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
            rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
            
            DataModelA.addRow(rowData);
        }
        //============================================================//
        
        
        //=========================== Audit Trail ===========================//
        FormatGridHS();
        
        HashMap History=clsCreditNoteProcessModule.getHistoryList(EITLERPGLOBAL.gCompanyID, objProcessModule.getAttribute("DOC_NO").getString());
        for(int i=1;i<=History.size();i++) {
            clsCreditNoteProcessModule ObjHistory=(clsCreditNoteProcessModule)History.get(Integer.toString(i));
            Object[] rowData=new Object[5];
            
            rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
            rowData[1]=ObjHistory.getAttribute("UPDATED_BY").getString();
            rowData[2]=ObjHistory.getAttribute("ENTRY_DATE").getString();
            
            String ApprovalStatus="";
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus="Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus="Final Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus="Waiting";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus="Rejected";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus="Pending";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus="Skiped";
            }
            
            rowData[3]=ApprovalStatus;
            rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
            
            DataModelHS.addRow(rowData);
        }
        //=========================== Audit Trail Over ===========================//
        
        //=============Turn Over list===============//
        FormatTurnOverGrid();
        int Hierarchy_ID=0;
        DocNo=objProcessModule.getAttribute("DOC_NO").getString();
        Hierarchy_ID = data.getIntValueFromDB("SELECT HIERARCHY_ID FROM D_SAL_POLICY_PROCESS WHERE DOC_NO='"+DocNo+"'");
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, Hierarchy_ID, (int)EITLERPGLOBAL.gNewUserID)) {
            
            for(int i=1;i<=objProcessModule.colProcessTurnOverDtl.size();i++) {
                clsPolicyTurnOverList ObjItem=(clsPolicyTurnOverList)objProcessModule.colProcessTurnOverDtl.get(Integer.toString(i));
                HashMap colLot=ObjItem.colTypeLot;
                
                Object[] rowData=new Object[4];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=(String)ObjItem.getAttribute("PARTY_CODE").getObj();
                rowData[2]=Integer.toString((int)ObjItem.getAttribute("YEAR").getVal());
                rowData[3]=Double.toString((double)ObjItem.getAttribute("TURNOVER_AMOUNT").getVal());
                
                DataModelTurnoverDtl.addRow(rowData);
                
                //Set the Collection
                DataModelTurnoverDtl.SetUserObject(TableTurnOverDtl.getRowCount()-1, colLot);
                
            }
        }
        //=========================================//
        //********************************************//
        
        lblTitle.setText("PROCESS MODULE - " + txtDocNo.getText());
    }
    
    //Sets data to the Class Object
    private void SetData() {
        objProcessModule.setAttribute("PREFIX",SelPrefix);
        objProcessModule.setAttribute("SUFFIX",SelSuffix);
        objProcessModule.setAttribute("FFNO",FFNo);
        
        objProcessModule.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        objProcessModule.setAttribute("DOC_NO",txtDocNo.getText());
        objProcessModule.setAttribute("DOC_DATE",txtDocDate.getText());
        objProcessModule.setAttribute("POLICY_ID",txtPolicyID.getText());
        objProcessModule.setAttribute("FROM_DATE",txtFromDate.getText());
        objProcessModule.setAttribute("TO_DATE",txtToDate.getText());
        objProcessModule.setAttribute("REMARKS",txtRemarks.getText());
        objProcessModule.setAttribute("AMOUNT_SELECTION",EITLERPGLOBAL.getCombostrCode(cmbAmount));
        
        objProcessModule.setAttribute("FIN_HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbFinHierarchy));
        
        //----- Update Approval Specific Fields -----------//
        objProcessModule.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        objProcessModule.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        objProcessModule.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        objProcessModule.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            objProcessModule.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            objProcessModule.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            objProcessModule.setAttribute("APPROVAL_STATUS","R");
            objProcessModule.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            objProcessModule.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        objProcessModule.colProcessInvDtl.clear();
        
        for(int i=0;i<TableInvoiceList.getRowCount();i++) {
            clsPolicyInvoiceList objDtl=new clsPolicyInvoiceList();
            objDtl.setAttribute("SR_NO",i+1);
            objDtl.setAttribute("SELECTION",Boolean.parseBoolean(TableInvoiceList.getValueAt(i, 0).toString()));//boolean
            objDtl.setAttribute("INVOICE_NO",TableInvoiceList.getValueAt(i, 2).toString());//DataModelInvoiceList.getValueByVariable("INVOICE_NO",i));
            objDtl.setAttribute("INVOICE_DATE",TableInvoiceList.getValueAt(i, 3).toString());//EITLERPGLOBAL.formatDateDB(DataModelInvoiceList.getValueByVariable("INVOICE_DATE",i)));
            objDtl.setAttribute("PARTY_CODE",TableInvoiceList.getValueAt(i, 4).toString());//DataModelInvoiceList.getValueByVariable("PARTY_CODE",i));
            objDtl.setAttribute("PARTY_NAME",TableInvoiceList.getValueAt(i, 5).toString());//DataModelInvoiceList.getValueByVariable("PARTY_NAME",i));
            objDtl.setAttribute("CHARGE_CODE",TableInvoiceList.getValueAt(i, 6).toString());//DataModelInvoiceList.getValueByVariable("CHARGE_CODE",i));
            objDtl.setAttribute("QUALITY_NO",TableInvoiceList.getValueAt(i, 7).toString());//DataModelInvoiceList.getValueByVariable("CHARGE_CODE",i));
            objDtl.setAttribute("PIECE_NO",TableInvoiceList.getValueAt(i, 8).toString());//DataModelInvoiceList.getValueByVariable("CHARGE_CODE",i));
            
            objProcessModule.colProcessInvDtl.put(Integer.toString(objProcessModule.colProcessInvDtl.size()+1), objDtl);
        }
        
        objProcessModule.colProcessDtl.clear();
        
        for(int i=0;i<TableDtl.getRowCount();i++) {
            clsCreditNoteProcessDetail objDtl=new clsCreditNoteProcessDetail();
            objDtl.setAttribute("SR_NO",i+1);
            objDtl.setAttribute("PARTY_ID",TableDtl.getValueAt(i,1).toString());//DataModelDtl.getValueByVariable("PARTY_ID",i));
            objDtl.setAttribute("PARTY_MAIN_CODE",TableDtl.getValueAt(i,2).toString());//DataModelDtl.getValueByVariable("PARTY_MAIN_CODE",i));
            objDtl.setAttribute("AMOUNT",Double.parseDouble(TableDtl.getValueAt(i,3).toString()));//Double.parseDouble(DataModelDtl.getValueByVariable("AMOUNT",i)));
            objDtl.setAttribute("QUALIFING_AMOUNT",Double.parseDouble(TableDtl.getValueAt(i,4).toString()));//Double.parseDouble(DataModelDtl.getValueByVariable("QUALIFING_AMOUNT",i)));
            objDtl.setAttribute("PERCENTAGE",Double.parseDouble(TableDtl.getValueAt(i,5).toString()));//Double.parseDouble(DataModelDtl.getValueByVariable("PERCENTAGE",i)));
            objDtl.setAttribute("CREDIT_NOTE_NO",TableDtl.getValueAt(i,6).toString());//DataModelDtl.getValueByVariable("CREDIT_NOTE_NO",i));
            objDtl.setAttribute("INVOICE_NO",TableDtl.getValueAt(i,7).toString());//DataModelDtl.getValueByVariable("INVOICE_NO",i));
            objDtl.setAttribute("INVOICE_DATE",TableDtl.getValueAt(i,8).toString());//DataModelDtl.getValueByVariable("INVOICE_DATE",i)));
            objDtl.setAttribute("SEASON_ID",TableDtl.getValueAt(i,11).toString());//DataModelDtl.getValueByVariable("SEASON_ID",i));
            objDtl.setAttribute("QUALITY_ID",TableDtl.getValueAt(i,9).toString());//DataModelDtl.getValueByVariable("QUALITY_ID",i));
            objDtl.setAttribute("PIECE_NO",TableDtl.getValueAt(i,10).toString());//DataModelDtl.getValueByVariable("PIECE_NO",i));
            objDtl.setAttribute("DISCOUNT_AMOUNT",Double.parseDouble(TableDtl.getValueAt(i,12).toString()));//Double.parseDouble(DataModelDtl.getValueByVariable("DISCOUNT_AMOUNT",i)));
            objDtl.setAttribute("VOUCHER_TYPE",Integer.parseInt(TableDtl.getValueAt(i,13).toString()));//Double.parseDouble(DataModelDtl.getValueByVariable("VOUCHER_TYPE",i)));
            objDtl.setAttribute("BOOK_CODE",TableDtl.getValueAt(i,14).toString());
            objDtl.setAttribute("DEDUCTION_CODE",TableDtl.getValueAt(i,15).toString());
            
            objProcessModule.colProcessDtl.put(Integer.toString(objProcessModule.colProcessDtl.size()+1), objDtl);
        }
        
        objProcessModule.colProcessTurnOverDtl.clear();
        
        for(int i=0;i<TableTurnOverDtl.getRowCount();i++) {
            clsPolicyTurnOverList objDtl=new clsPolicyTurnOverList();
            objDtl.setAttribute("SR_NO",i+1);
            objDtl.setAttribute("PARTY_CODE",TableTurnOverDtl.getValueAt(i, 1).toString());
            objDtl.setAttribute("YEAR",Integer.parseInt(TableTurnOverDtl.getValueAt(i, 2).toString()));
            objDtl.setAttribute("TURNOVER_AMOUNT",Double.parseDouble(TableTurnOverDtl.getValueAt(i, 3).toString()));
            
            objProcessModule.colProcessTurnOverDtl.put(Integer.toString(objProcessModule.colProcessTurnOverDtl.size()+1), objDtl);
        }
    }
    
    
    
    private void SetMenuForRights() {
        
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11611)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        //if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11612)) {
        cmdEdit.setEnabled(true);
        //}
        //else {
        //    cmdEdit.setEnabled(false);
        //}
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11613)) {
            
            cmdDelete.setEnabled(true);
        }
        else {
            
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11614)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
        
    }
    
    private void Add() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        EditMode=EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        SetupApproval();
        
        //****************Now Generate new document no.****************//
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=clsCreditNoteProcessModule.ModuleID;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            
            SetupApproval();
            //Display newly generated document no.
            
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID,clsCreditNoteProcessModule.ModuleID, FFNo,  false));
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
            txtPolicyID.requestFocus();
            
            lblTitle.setText("PROCESS MODULE - " + txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);
            
            //            cmdTurnOverShow.setEnabled(false);
            //
            //            if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            //                cmdTurnOverShow.setEnabled(true);
            //            }
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        String DocNo=objProcessModule.getAttribute("DOC_NO").getString();
        String lDocNo=DocNo;
        
        
        if(objProcessModule.IsEditable(EITLERPGLOBAL.gCompanyID, DocNo, EITLERPGLOBAL.gNewUserID)) {
            
            EITLERPGLOBAL.ChangeCursorToWait(this);
            
            EditMode=EITLERPGLOBAL.EDIT;
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            SetupApproval();
            //----------------//
            
            if(ApprovalFlow.IsCreator(clsCreditNoteProcessModule.ModuleID ,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11612)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            
            SetupApproval();
            DisableToolbar();
            txtPolicyName.requestFocus();
            
            String str ="SELECT USER_ID FROM D_COM_HIERARCHY_RIGHTS WHERE HIERARCHY_ID="+EITLERPGLOBAL.getComboCode(cmbHierarchy) +" AND CREATOR=1 AND SR_NO=1";
            int CreatorID = data.getIntValueFromDB(str);
            if (EITLERPGLOBAL.gNewUserID == CreatorID) {
                cmdInvoiceShow.setEnabled(true);
                cmdShowProcess.setEnabled(true);
                cmdInvoiceSelectAll.setEnabled(true);
                cmdInvoiceClearAll.setEnabled(true);
                TableInvoiceList.setEnabled(true);
                cmbAmount.setEnabled(true);
                txtPolicyID.setEnabled(true);
                txtFromDate.setEnabled(true);
                txtToDate.setEnabled(true);
            }
            else {
                cmdInvoiceShow.setEnabled(false);
                cmdShowProcess.setEnabled(false);
                cmdInvoiceSelectAll.setEnabled(false);
                cmdInvoiceClearAll.setEnabled(false);
                TableInvoiceList.setEnabled(false);
                cmbAmount.setEnabled(false);
                txtPolicyID.setEnabled(false);
                txtFromDate.setEnabled(false);
                txtToDate.setEnabled(false);
            }
            //            cmdTurnOverShow.setEnabled(false);
            //
            //            if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            //                cmdTurnOverShow.setEnabled(true);
            //            }
            
            
            
            EITLERPGLOBAL.ChangeCursorToDefault(this);
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
        
        
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        if(objProcessModule.Delete(EITLERPGLOBAL.gNewUserID)) {
            MoveLast();
        }
    }
    
    private boolean Validate() {
        //** Validations **//
        
        if(txtDocNo.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null,"Please Specify Document No.");
            txtDocNo.requestFocus();
            return false;
        }
        
        if(txtDocDate.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null,"Please Specify Doc Date.");
            txtDocDate.requestFocus();
            return false;
        }
        else if(!EITLERPGLOBAL.isDate(txtDocDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid Doc Date in DD/MM/YYYY format.");
            return false;
        }
        
        if(txtFromDate.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null,"Please Specify From Date.");
            txtFromDate.requestFocus();
            return false;
        }
        else if(!EITLERPGLOBAL.isDate(txtFromDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid From Date in DD/MM/YYYY format.");
            return false;
        }
        
        if(txtToDate.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null,"Please Specify To Date.");
            txtToDate.requestFocus();
            return false;
        }
        else if(!EITLERPGLOBAL.isDate(txtToDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid To Date in DD/MM/YYYY format.");
            return false;
        }
        
        if (data.IsRecordExist("SELECT * FROM D_COM_USER_MASTER WHERE DEPT_ID=10 AND USER_ID="+EITLERPGLOBAL.gNewUserID+ " AND COMPANY_ID="+EITLERPGLOBAL.gCompanyID)) {
            for(int i=1;i<=objProcessModule.colProcessDtl.size();i++) {
                clsCreditNoteProcessDetail ObjItem=(clsCreditNoteProcessDetail)objProcessModule.colProcessDtl.get(Integer.toString(i));
                
                int VouType = ObjItem.getAttribute("VOUCHER_TYPE").getInt();
                if (VouType==FinanceGlobal.TYPE_CREDIT_NOTE) {
                    if (txtCrBookCode.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Credit Book Code.");
                        txtCrBookCode.requestFocus();
                        return false;
                    }
                    if (txtCrMainCode.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Credit Deduction Code.");
                        txtCrMainCode.requestFocus();
                        return false;
                    }
                    if (txtCrBookName.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Credit Book Code.");
                        txtCrBookName.requestFocus();
                        return false;
                    }
                    if (txtCrMainCodeName.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Credit Deduction Code.");
                        txtCrMainCodeName.requestFocus();
                        return false;
                    }
                }
                else if (VouType==FinanceGlobal.TYPE_DEBIT_NOTE) {
                    if (txtDrBookCode.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Debit Book Code.");
                        txtDrBookCode.requestFocus();
                        return false;
                    }
                    if (txtDrMainCode.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Debit Deduction Code.");
                        txtDrMainCode.requestFocus();
                        return false;
                    }
                    if (txtDrBookName.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Debit Book Code.");
                        txtDrBookName.requestFocus();
                        return false;
                    }
                    if (txtDrMainCodeName.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Debit Deduction Code.");
                        txtDrMainCodeName.requestFocus();
                        return false;
                    }
                }
            }
        }
        
        if (OpgReject.isSelected()) {
            if (txtToRemarks.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Please Specify Rejected Remarks.");
                txtToRemarks.requestFocus();
                return false;
            }
        }
        
        if (TableDtl.getRowCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please Generate Credit Note Process.");
            return false;
        }
        
        if (OpgFinal.isSelected()) {
            for(int i=1;i<=objProcessModule.colProcessDtl.size();i++) {
                clsCreditNoteProcessDetail ObjItem=(clsCreditNoteProcessDetail)objProcessModule.colProcessDtl.get(Integer.toString(i));
                
                int VouType = ObjItem.getAttribute("VOUCHER_TYPE").getInt();
                if (VouType==FinanceGlobal.TYPE_CREDIT_NOTE) {
                    if (txtCrBookCode.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Credit Book Code.");
                        txtCrBookCode.requestFocus();
                        return false;
                    }
                    if (txtCrMainCode.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Credit Deduction Code.");
                        txtCrMainCode.requestFocus();
                        return false;
                    }
                    if (txtCrBookName.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Credit Book Code.");
                        txtCrBookName.requestFocus();
                        return false;
                    }
                    if (txtCrMainCodeName.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Credit Deduction Code.");
                        txtCrMainCodeName.requestFocus();
                        return false;
                    }
                }
                else if (VouType==FinanceGlobal.TYPE_DEBIT_NOTE) {
                    if (txtDrBookCode.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Debit Book Code.");
                        txtDrBookCode.requestFocus();
                        return false;
                    }
                    if (txtDrMainCode.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Debit Deduction Code.");
                        txtDrMainCode.requestFocus();
                        return false;
                    }
                    if (txtDrBookName.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Debit Book Code.");
                        txtDrBookName.requestFocus();
                        return false;
                    }
                    if (txtDrMainCodeName.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Debit Deduction Code.");
                        txtDrMainCodeName.requestFocus();
                        return false;
                    }
                }
            }
        }
        
        if (data.IsRecordExist("SELECT * FROM D_COM_USER_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND DEPT_ID=10 AND USER_ID="+EITLERPGLOBAL.gNewUserID)) {
            for(int i=1;i<=objProcessModule.colProcessDtl.size();i++) {
                clsCreditNoteProcessDetail ObjItem=(clsCreditNoteProcessDetail)objProcessModule.colProcessDtl.get(Integer.toString(i));
                
                int VouType = ObjItem.getAttribute("VOUCHER_TYPE").getInt();
                if (VouType==FinanceGlobal.TYPE_CREDIT_NOTE) {
                    if (txtCrBookCode.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Credit Book Code.");
                        txtCrBookCode.requestFocus();
                        return false;
                    }
                    if (txtCrMainCode.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Credit Deduction Code.");
                        txtCrMainCode.requestFocus();
                        return false;
                    }
                    if (txtCrBookName.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Credit Book Code.");
                        txtCrBookName.requestFocus();
                        return false;
                    }
                    if (txtCrMainCodeName.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Credit Deduction Code.");
                        txtCrMainCodeName.requestFocus();
                        return false;
                    }
                }
                else if (VouType==FinanceGlobal.TYPE_DEBIT_NOTE) {
                    if (txtDrBookCode.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Debit Book Code.");
                        txtDrBookCode.requestFocus();
                        return false;
                    }
                    if (txtDrMainCode.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Debit Deduction Code.");
                        txtDrMainCode.requestFocus();
                        return false;
                    }
                    if (txtDrBookName.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Debit Book Code.");
                        txtDrBookName.requestFocus();
                        return false;
                    }
                    if (txtDrMainCodeName.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please Specify Debit Deduction Code.");
                        txtDrMainCodeName.requestFocus();
                        return false;
                    }
                }
            }
        }
        
        //*****************//
        
        return true;
    }
    
    private void Save() {
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        SetData();
        
        //** Validations **//
        if(!Validate()){
            return;
        }
        
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(objProcessModule.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+objProcessModule.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(objProcessModule.Update()) {
                //Nothing to do
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+objProcessModule.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        cmbSendTo.setEnabled(false);
        cmbFinHierarchy.setEnabled(false);
        
        EITLERPGLOBAL.ChangeCursorToDefault(this);
        
        try {
            frmPA.RefreshView();
        }catch(Exception e){}
        
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Find() {
        
        Loader ObjLoader=new Loader(this,"EITLERP.Sales.frmCreditNoteProcessModuleFind",true);
        frmCreditNoteProcessModuleFind ObjReturn= (frmCreditNoteProcessModuleFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!objProcessModule.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveFirst();
        }
        
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objProcessModule.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objProcessModule.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objProcessModule.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objProcessModule.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    public void FindEx(int pCompanyID,String pDocNo) {
        objProcessModule.Filter(" WHERE DOC_NO='"+pDocNo+"' AND COMPANY_ID=" + pCompanyID+ " ",pCompanyID);
        objProcessModule.MoveFirst();
        DisplayData();
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        
    }
    
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    
    private void SetupApproval() {
        
        /*if(cmbHierarchy.getItemCount()>1) {
            cmbHierarchy.setEnabled(true);
        }*/
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, clsCreditNoteProcessModule.ModuleID , objProcessModule.getAttribute("DOC_NO").getString());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,clsCreditNoteProcessModule.ModuleID ,FromUserID,objProcessModule.getAttribute("DOC_NO").getString());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
        
    }
    
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, clsCreditNoteProcessModule.ModuleID ,objProcessModule.getAttribute("POLICY_ID").getString());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
        
    }
    
    private void GenerateRejectedUserCombo() {
        HashMap List=new HashMap();
        HashMap DeptList=new HashMap();
        HashMap DeptUsers=new HashMap();
        
        //----- Generate cmbType ------- //
        cmbToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);
        
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            
            
            /// NEW CODE ///
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID,clsCreditNoteProcessModule.ModuleID , objProcessModule.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, clsCreditNoteProcessModule.ModuleID, objProcessModule.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt() , EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(( ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            }
            else {
                if((ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///
            
            
            
        }
        //------------------------------ //
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, clsCreditNoteProcessModule.ModuleID , objProcessModule.getAttribute("DOC_NO").getString());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
        
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Panel1.getComponentCount()-1;i++) {
            if(Panel1.getComponent(i).getName()!=null) {
                
                FieldName=Panel1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Panel1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//
    }
    
    private void FormatGrid() {
        try {
            //Table Formatting
            DataModelDtl=new EITLTableModel();
            
            EITLTableCellRenderer cellRender=new EITLTableCellRenderer();
            cellRender.setHorizontalAlignment(JLabel.RIGHT);
            
            TableDtl.removeAll();
            TableDtl.setModel(DataModelDtl);
            
            TableColumnModel ColModel=TableDtl.getColumnModel();
            TableDtl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //Add the columns
            DataModelDtl.addColumn("Sr. No."); //0 Read Only
            DataModelDtl.addColumn("Party ID"); //1
            DataModelDtl.addColumn("Party Main Code"); //2
            DataModelDtl.addColumn("Amount"); //3
            DataModelDtl.addColumn("Qualifing Amount"); //4
            DataModelDtl.addColumn("Percentage"); //5
            DataModelDtl.addColumn("Credit Note No"); //6
            DataModelDtl.addColumn("Invoice No"); //7
            DataModelDtl.addColumn("Invoice Date"); //8
            DataModelDtl.addColumn("Quality ID"); //9
            DataModelDtl.addColumn("Piece No"); //10
            DataModelDtl.addColumn("Season ID"); //11
            DataModelDtl.addColumn("Discount Amount"); //12
            DataModelDtl.addColumn("Voucher Type"); //13
            DataModelDtl.addColumn("Book Code"); //14
            DataModelDtl.addColumn("Deduction Code"); //15
            
            DataModelDtl.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModelDtl.SetVariable(1,"PARTY_ID"); //1
            DataModelDtl.SetVariable(2,"PARTY_MAIN_CODE"); //2
            DataModelDtl.SetVariable(3,"AMOUNT"); //3
            DataModelDtl.SetVariable(4,"QUALIFING_AMOUNT"); //4
            DataModelDtl.SetVariable(5,"PERCENTAGE"); //5
            DataModelDtl.SetVariable(6,"CREDIT_NOTE_NO"); //6
            DataModelDtl.SetVariable(7,"INVOICE_NO"); //7
            DataModelDtl.SetVariable(8,"INVOICE_DATE"); //8
            DataModelDtl.SetVariable(9,"QUALITY_ID"); //9
            DataModelDtl.SetVariable(10,"PIECE_NO"); //10
            DataModelDtl.SetVariable(11,"SEASON_ID"); //11
            DataModelDtl.SetVariable(12, "DISCOUNT_AMOUNT");//12
            DataModelDtl.SetVariable(13, "VOUCHER_TYPE");//13
            DataModelDtl.SetVariable(14, "BOOK_CODE");//14
            DataModelDtl.SetVariable(15, "DEDUCTION_CODE");//15
            
            DataModelDtl.TableReadOnly(false);
            DataModelDtl.SetReadOnly(0);
            DataModelDtl.SetReadOnly(1);
            DataModelDtl.SetReadOnly(2);
            DataModelDtl.SetReadOnly(3);
            DataModelDtl.SetReadOnly(4);
            DataModelDtl.SetReadOnly(5);
            DataModelDtl.SetReadOnly(6);
            DataModelDtl.SetReadOnly(7);
            DataModelDtl.SetReadOnly(8);
            DataModelDtl.SetReadOnly(9);
            DataModelDtl.SetReadOnly(10);
            DataModelDtl.SetReadOnly(11);
            DataModelDtl.SetReadOnly(12);
            DataModelDtl.SetReadOnly(13);
            DataModelDtl.SetReadOnly(14);
            DataModelDtl.SetReadOnly(15);
            
            DataModelDtl.SetNumeric(0,true); //sr no
            DataModelDtl.SetNumeric(3, true);//Amount
            DataModelDtl.SetNumeric(4, true);//Qualifing Amount
            DataModelDtl.SetNumeric(5, true);//Percentage
            
            //TableDtl.getColumnModel().getColumn(1).setCellRenderer(cellRender);
            
            //Table formatting completed
            
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        
    }
    
    private void GenerateCombos() {
        try {
            
            ComboData objData=new ComboData();
            //Generates Combo Boxes
            
            //---- Generate Discount Type ----
            cmbAmountModel=new EITLComboModel();
            cmbAmount.removeAllItems();
            cmbAmount.setModel(cmbAmountModel);
            
            objData=new ComboData();
            objData.strCode="NET_AMOUNT";
            objData.Text="NET_AMOUNT";
            cmbAmountModel.addElement(objData);
            
            objData=new ComboData();
            objData.strCode="GROSS_AMOUNT";
            objData.Text="GROSS_AMOUNT";
            cmbAmountModel.addElement(objData);
            
            //            objData=new ComboData();
            //            objData.strCode=2;
            //            objData.Text="Scheme Discount";
            //            cmbAmountModel.addElement(objData);
            //
            //            objData=new ComboData();
            //            objData.strCode=3;
            //            objData.Text="Commission";
            //            cmbAmountModel.addElement(objData);
            // ----  ----
            
            //---- Generate Invoice Main Type ----
            cmbInvoiceTypeModel=new EITLComboModel();
            cmbInvoiceType.removeAllItems();
            cmbInvoiceType.setModel(cmbInvoiceTypeModel);
            
            objData=new ComboData();
            objData.Code=0;
            objData.Text="Suiting";
            cmbInvoiceTypeModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=1;
            objData.Text="Felt";
            cmbInvoiceTypeModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=2;
            objData.Text="Filter";
            cmbInvoiceTypeModel.addElement(objData);
            // ----  ----
            
            HashMap List=new HashMap();
            String strCondition="";
            ResultSet rsTmp;
            
            cmbHierarchyModel=new EITLComboModel();
            cmbHierarchy.removeAllItems();
            cmbHierarchy.setModel(cmbHierarchyModel);
            
            List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsCreditNoteProcessModule.ModuleID);
            
            if(EditMode==EITLERPGLOBAL.EDIT) {
                List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsCreditNoteProcessModule.ModuleID );
            }
            for(int i=1;i<=List.size();i++) {
                clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
                ComboData aData=new ComboData();
                aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
                aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
                cmbHierarchyModel.addElement(aData);
            }
            
            
            //----- Generate cmbType ------- //
            cmbFinHierarchyModel=new EITLComboModel();
            cmbFinHierarchy.removeAllItems();
            cmbFinHierarchy.setModel(cmbFinHierarchyModel);
            
            List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsVoucher.ModuleID);
            
            for(int i=1;i<=List.size();i++) {
                clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
                ComboData aData=new ComboData();
                aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
                aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
                cmbFinHierarchyModel.addElement(aData);
            }
            //------------------------------ //
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    private void GenerateGrid() {
        try {
            
            FormatGrid();
            HashMap List;
            
            HashMap InvoiceList=new HashMap();
            
            for (int i=0;i<TableInvoiceList.getRowCount();i++) {
                clsPolicyInvoiceList ObjItem=new clsPolicyInvoiceList();
                if (TableInvoiceList.getValueAt(i,0).toString().trim().equals("true")) {
                    ObjItem.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
                    ObjItem.setAttribute("INVOICE_NO",TableInvoiceList.getValueAt(i,2));
                    ObjItem.setAttribute("INVOICE_DATE",TableInvoiceList.getValueAt(i,3));
                    ObjItem.setAttribute("PARTY_CODE",TableInvoiceList.getValueAt(i,4));
                    ObjItem.setAttribute("PARTY_NAME",TableInvoiceList.getValueAt(i,5));
                    ObjItem.setAttribute("CHARGE_CODE",TableInvoiceList.getValueAt(i,6));
                    ObjItem.setAttribute("QUALITY_NO",TableInvoiceList.getValueAt(i,7));
                    ObjItem.setAttribute("PIECE_NO",TableInvoiceList.getValueAt(i,8));
                    InvoiceList.put(Integer.toString(InvoiceList.size()+1),ObjItem);
                }
            }
            String Amount = EITLERPGLOBAL.getCombostrCode(cmbAmount);
            
            List=clsCreditNoteProcessModule.getPartyList(txtPolicyID.getText(),txtFromDate.getText(), txtToDate.getText(),InvoiceList,Amount);
            
            for(int i=1;i<=List.size();i++) {
                clsCreditNoteProcessDetail objProcessDtl=(clsCreditNoteProcessDetail)List.get(Integer.toString(i));
                
                Object[] rowData=new Object[16];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=objProcessDtl.getAttribute("PARTY_ID").getString();
                rowData[2]=objProcessDtl.getAttribute("PARTY_MAIN_CODE").getString();
                rowData[3]=Double.toString(objProcessDtl.getAttribute("AMOUNT").getDouble());
                rowData[4]=Double.toString(objProcessDtl.getAttribute("QUALIFING_AMOUNT").getDouble());
                rowData[5]=Double.toString(objProcessDtl.getAttribute("PERCENTAGE").getDouble());
                rowData[6]=objProcessDtl.getAttribute("CREDIT_NOTE_NO").getString();
                rowData[7]=objProcessDtl.getAttribute("INVOICE_NO").getString();
                rowData[8]=objProcessDtl.getAttribute("INVOICE_DATE").getString();
                rowData[9]=objProcessDtl.getAttribute("QUALITY_ID").getString();
                rowData[10]=objProcessDtl.getAttribute("PIECE_NO").getString();
                rowData[11]=objProcessDtl.getAttribute("SEASON_ID").getString();
                rowData[12]=Double.toString(objProcessDtl.getAttribute("DISCOUNT_AMOUNT").getDouble());
                rowData[13]=Integer.toString(objProcessDtl.getAttribute("VOUCHER_TYPE").getInt());
                rowData[14]=objProcessDtl.getAttribute("BOOK_CODE").getString();
                rowData[15]=objProcessDtl.getAttribute("DEDUCTION_CODE").getString();
                
                DataModelDtl.addRow(rowData);
                
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void FormatInvoiceListGrid() {
        DataModelInvoiceList=new EITLTableModel();
        
        TableInvoiceList.removeAll();
        
        TableInvoiceList.setModel(DataModelInvoiceList);
        TableInvoiceList.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        for(int i=1;i<=4;i++) {
            DataModelInvoiceList.SetReadOnly(i);
        }
        
        //Add Columns to it
        DataModelInvoiceList.addColumn(""); //0 Selection
        DataModelInvoiceList.addColumn("Sr.");//1
        DataModelInvoiceList.addColumn("Invoice No");//2
        DataModelInvoiceList.addColumn("Invoice Date");//3
        DataModelInvoiceList.addColumn("Party Code");//4
        DataModelInvoiceList.addColumn("Party Name");//5
        DataModelInvoiceList.addColumn("Charge Code");//6
        DataModelInvoiceList.addColumn("Quality ID");//7
        DataModelInvoiceList.addColumn("Piece No");//8
        
        Rend.setCustomComponent(0,"CheckBox");
        TableInvoiceList.getColumnModel().getColumn(0).setCellRenderer(Rend);
        TableInvoiceList.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));
    }
    
    public static HashMap Invoice_getList(String pCondition) {
        System.gc();
        ResultSet rsTmp;
        HashMap List=new HashMap();
        long Counter=0;
        
        try {
            
            //rsTmp=data.getResult("SELECT INVOICE_NO,INVOICE_DATE,PARTY_CODE,CONCAT('0',SUBSTR(PAYMENT_TERM_CODE,1,1)) AS CHARGE_CODE FROM D_SAL_INVOICE_HEADER "+pCondition+" ORDER BY INVOICE_NO");
            String str = "";
            str = "SELECT A.INVOICE_NO,A.INVOICE_DATE,A.PARTY_CODE, "+
            "CONCAT('0',SUBSTR(A.PAYMENT_TERM_CODE,1,1)) AS CHARGE_CODE,B.QUALITY_NO,B.PIECE_NO "+
            "FROM D_SAL_INVOICE_HEADER A, D_SAL_INVOICE_DETAIL B " +
            " "+pCondition+ " AND A.COMPANY_ID=B.COMPANY_ID AND A.INVOICE_NO=B.INVOICE_NO AND A.INVOICE_DATE=B.INVOICE_DATE " +
            " ORDER BY A.INVOICE_NO,B.QUALITY_NO,B.PIECE_NO";
            rsTmp=data.getResult(str);
            rsTmp.first();
            Counter=0;
            while(!rsTmp.isAfterLast()) {
                Counter=Counter+1;
                clsPolicyInvoiceList ObjTypeMaster=new clsPolicyInvoiceList();
                
                //Populate the user
                ObjTypeMaster.setAttribute("INVOICE_NO",rsTmp.getString("INVOICE_NO"));
                ObjTypeMaster.setAttribute("INVOICE_DATE",EITLERPGLOBAL.formatDate(rsTmp.getString("INVOICE_DATE")));
                ObjTypeMaster.setAttribute("PARTY_CODE",rsTmp.getString("PARTY_CODE"));
                ObjTypeMaster.setAttribute("PARTY_NAME",clsPolicyMaster.getPartyName(EITLERPGLOBAL.gCompanyID, rsTmp.getString("PARTY_CODE")));
                ObjTypeMaster.setAttribute("CHARGE_CODE",rsTmp.getString("CHARGE_CODE"));
                ObjTypeMaster.setAttribute("PIECE_NO",rsTmp.getString("PIECE_NO"));
                ObjTypeMaster.setAttribute("QUALITY_NO",rsTmp.getString("QUALITY_NO"));
                System.out.println("count="+Counter);
                //Put the prepared user object into list
                List.put(Long.toString(Counter),ObjTypeMaster);
                rsTmp.next();
            }//Out While
        }
        catch(Exception e) {
            //JOptionPane.showMessageDialog(null,"Error occured"+e.getMessage());
        }
        
        return List;
    }
    
    private void GenerateInvoiceGrid() {
        
        for (int j=0;j<TableInvoiceList.getRowCount();j++) {            
            TableInvoiceList.setValueAt(Boolean.valueOf(false), j, 0);
        }
        
        HashMap TypeList=new HashMap();
        String str_Condition = "";
        int type = EITLERPGLOBAL.getComboCode(cmbInvoiceType) + 1;
        
        str_Condition=" WHERE A.COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" "+
        " AND A.INVOICE_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) +"' " +
        " AND A.INVOICE_DATE<='"+ EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) +"' AND A.INVOICE_TYPE=" + type + " ";
        TypeList=Invoice_getList(str_Condition);
        
        String str="SELECT INVOICE_TYPES FROM D_SAL_POLICY_MASTER WHERE POLICY_ID='"+txtPolicyID.getText().trim()+"'";
        String ChargeCode = data.getStringValueFromDB(str);
        String sChargeCode[] = ChargeCode.trim().split(",");
        int cnt = 0;
        int Counter=0;
        objProcessModule.colProcessInvDtl.clear();
        
        for(int n=0;n<sChargeCode.length;n++) {
            for(int i=1;i<=TypeList.size();i++) {
                clsPolicyInvoiceList ObjType=(clsPolicyInvoiceList) TypeList.get(Integer.toString(i));
                HashMap colLot=ObjType.colTypeLot;
                
                String PartyCode = (String)ObjType.getAttribute("PARTY_CODE").getObj();
                str = "SELECT MAIN_ACCOUNT_CODE FROM D_FIN_PARTY_MASTER WHERE PARTY_CODE='"+PartyCode+"' AND MAIN_ACCOUNT_CODE IN ('210010','210027','210072') ";
                String code = data.getStringValueFromDB(str,FinanceGlobal.FinURL);
                String chg = (String)ObjType.getAttribute("CHARGE_CODE").getObj();
                String invtype = "";
                if (code.trim().equals("210010") && (sChargeCode[n].trim().substring(0,1).equals("F"))) {
                    invtype="04";
                }else if (! code.trim().equals("210010") && (sChargeCode[n].trim().substring(0,1).equals("S"))) {
                    invtype="04";
                }
                else {
                    invtype=sChargeCode[n];
                }
                
                if (chg.trim().equals(invtype.trim())) {
                    cnt ++;
                    Object[] rowData=new Object[9];
                    rowData[0]=Boolean.valueOf(true); //By default not selected
                    rowData[1]=Integer.toString(cnt);
                    rowData[2]=(String)ObjType.getAttribute("INVOICE_NO").getObj();
                    rowData[3]=(String)ObjType.getAttribute("INVOICE_DATE").getObj();
                    rowData[4]=(String)ObjType.getAttribute("PARTY_CODE").getObj();
                    rowData[5]=(String)ObjType.getAttribute("PARTY_NAME").getObj();
                    rowData[6]=(String)ObjType.getAttribute("CHARGE_CODE").getObj();
                    rowData[7]=(String)ObjType.getAttribute("QUALITY_NO").getObj();
                    rowData[8]=(String)ObjType.getAttribute("PIECE_NO").getObj();

                    DataModelInvoiceList.addRow(rowData);

                    //Set the Collection
                    DataModelInvoiceList.SetUserObject(TableInvoiceList.getRowCount()-1, colLot);

//                    Counter=Counter+1;
//                    clsPolicyInvoiceList objItem = new clsPolicyInvoiceList();
//                    
//                    objItem.setAttribute("SELECTION",Boolean.valueOf(true));
//                    objItem.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
//                    objItem.setAttribute("DOC_NO",txtPolicyID.getText().trim());
//                    objItem.setAttribute("SR_NO",cnt);
//                    objItem.setAttribute("INVOICE_NO",(String)ObjType.getAttribute("INVOICE_NO").getObj());
//                    objItem.setAttribute("INVOICE_DATE",(String)ObjType.getAttribute("INVOICE_DATE").getObj());
//                    objItem.setAttribute("PARTY_CODE",(String)ObjType.getAttribute("PARTY_CODE").getObj());
//                    objItem.setAttribute("PARTY_NAME",(String)ObjType.getAttribute("PARTY_NAME").getObj());
//                    objItem.setAttribute("CHARGE_CODE",(String)ObjType.getAttribute("CHARGE_CODE").getObj());
//                    objItem.setAttribute("QUALITY_NO",(String)ObjType.getAttribute("QUALITY_NO").getObj());
//                    objItem.setAttribute("PIECE_NO",(String)ObjType.getAttribute("PIECE_NO").getObj());
//                    
//                    objProcessModule.colProcessInvDtl.put(Long.toString(Counter),objItem);
                }
            }
        }
                
//        //=============invoice list===============//
//        for(int i=1;i<=objProcessModule.colProcessInvDtl.size();i++) {
//            clsPolicyInvoiceList ObjItem=(clsPolicyInvoiceList)objProcessModule.colProcessInvDtl.get(Integer.toString(i));
//            
//            HashMap colLot=ObjItem.colTypeLot;
//            
//            Object[] rowData=new Object[9];
//            
//            rowData[0]=Boolean.valueOf(true); //By default not selected  //Boolean.toString(ObjItem.getAttribute("SELECTION").getBool());
//            rowData[1]=Integer.toString(i);
//            rowData[2]=(String)ObjItem.getAttribute("INVOICE_NO").getObj();
//            rowData[3]=(String)ObjItem.getAttribute("INVOICE_DATE").getObj();
//            rowData[4]=(String)ObjItem.getAttribute("PARTY_CODE").getObj();
//            rowData[5]=(String)ObjItem.getAttribute("PARTY_NAME").getObj();
//            rowData[6]=(String)ObjItem.getAttribute("CHARGE_CODE").getObj();
//            rowData[7]=(String)ObjItem.getAttribute("QUALITY_NO").getObj();
//            rowData[8]=(String)ObjItem.getAttribute("PIECE_NO").getObj();
//            
//            DataModelInvoiceList.addRow(rowData);
//            
//            //Set the Collection
//            DataModelInvoiceList.SetUserObject(TableInvoiceList.getRowCount()-1, colLot);
//            
//        }
//        //=========================================//
    }
    
    private void FillUpCodes() {
        
        if (!txtCrBookCode.getText().trim().equals("")) {
            for (int i=0;i<=TableDtl.getRowCount();i++) {
                if (TableDtl.getValueAt(i,13).toString().trim().equals(Integer.toString(FinanceGlobal.TYPE_CREDIT_NOTE))) {
                    TableDtl.setValueAt(txtCrBookCode.getText().trim(), i, 14);
                }
            }
        }
        
        if (!txtCrMainCode.getText().trim().equals("")) {
            for (int i=0;i<=TableDtl.getRowCount();i++) {
                if (TableDtl.getValueAt(i,13).toString().trim().equals(Integer.toString(FinanceGlobal.TYPE_CREDIT_NOTE))) {
                    TableDtl.setValueAt(txtCrMainCode.getText().trim(), i, 15);
                }
            }
        }
        
        if (!txtDrBookCode.getText().trim().equals("")) {
            for (int i=0;i<=TableDtl.getRowCount();i++) {
                if (TableDtl.getValueAt(i,13).toString().trim().equals(Integer.toString(FinanceGlobal.TYPE_DEBIT_NOTE))) {
                    TableDtl.setValueAt(txtDrBookCode.getText().trim(), i, 14);
                }
            }
        }
        
        if (!txtDrMainCode.getText().trim().equals("")) {
            for (int i=0;i<=TableDtl.getRowCount();i++) {
                if (TableDtl.getValueAt(i,13).toString().trim().equals(Integer.toString(FinanceGlobal.TYPE_DEBIT_NOTE))) {
                    TableDtl.setValueAt(txtDrMainCode.getText().trim(), i, 15);
                }
            }
        }
        
    }
    
    public void FindWaiting() {
        objProcessModule.Filter(" WHERE DOC_NO IN (SELECT D_SAL_POLICY_PROCESS.DOC_NO FROM D_SAL_POLICY_PROCESS,D_COM_DOC_DATA WHERE D_SAL_POLICY_PROCESS.DOC_NO=D_COM_DOC_DATA.DOC_NO AND D_SAL_POLICY_PROCESS.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_SAL_POLICY_PROCESS.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND MODULE_ID="+clsCreditNoteProcessModule.ModuleID+" ) ",EITLERPGLOBAL.gCompanyID);
        objProcessModule.MoveLast();
        DisplayData();
    }
    
    private void FormatTurnOverGrid() {
        try {
            //Table Formatting
            DataModelTurnoverDtl=new EITLTableModel();
            
            EITLTableCellRenderer cellRender=new EITLTableCellRenderer();
            cellRender.setHorizontalAlignment(JLabel.RIGHT);
            
            TableTurnOverDtl.removeAll();
            TableTurnOverDtl.setModel(DataModelTurnoverDtl);
            
            TableColumnModel ColModel=TableTurnOverDtl.getColumnModel();
            TableTurnOverDtl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //Add the columns
            DataModelTurnoverDtl.addColumn("Sr. No."); //0 Read Only
            DataModelTurnoverDtl.addColumn("Party ID"); //1
            DataModelTurnoverDtl.addColumn("Year"); //2
            DataModelTurnoverDtl.addColumn("Turnover"); //3
            
            DataModelTurnoverDtl.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModelTurnoverDtl.SetVariable(1,"PARTY_ID"); //1
            DataModelTurnoverDtl.SetVariable(2,"YEAR"); //2
            DataModelTurnoverDtl.SetVariable(3,"TURNOVER"); //3
            
            DataModelTurnoverDtl.TableReadOnly(true);
            DataModelTurnoverDtl.SetReadOnly(0);
            DataModelTurnoverDtl.SetReadOnly(1);
            DataModelTurnoverDtl.SetReadOnly(2);
            DataModelTurnoverDtl.SetReadOnly(3);
            
            //Table formatting completed
            
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void GenerateTurnOverGrid() {
        try {
            
            FormatTurnOverGrid();
            
            HashMap List=new HashMap();
            String str_Condition = "",PartyCode="";
            
            PartyCode = TableDtl.getValueAt(0,1).toString();
            
            String str = "";
            double Amt = 0;
            Object[] rowData=new Object[4];
            String ChildParty="";
            
            String ParentParty = data.getStringValueFromDB("SELECT PARENT_PARTY_ID FROM D_SAL_POLICY_PARTY_GROUPING WHERE CHILD_PARTY_ID = '"+ PartyCode +"' AND COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
            if (! ParentParty.trim().equals("")) {
                str = "SELECT SUM(NET_AMOUNT) AS TURNOVER FROM D_SAL_INVOICE_DETAIL WHERE CANCELLED=0 AND PARTY_CODE='"+ ParentParty +"' "+
                " AND SUBSTR(INVOICE_DATE,1,4)=2009 GROUP BY PARTY_CODE,SUBSTR(INVOICE_DATE,1,4) AND COMPANY_ID="+EITLERPGLOBAL.gCompanyID;
                Amt = data.getDoubleValueFromDB(str);
                
                ResultSet rsParty = data.getResult("SELECT CHILD_PARTY_ID FROM D_SAL_POLICY_PARTY_GROUPING WHERE PARENT_PARTY_ID = '"+ParentParty+"' AND COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
                if (rsParty.getRow()>0) {
                    rsParty.first();
                    ChildParty = ParentParty;
                    while (! rsParty.isAfterLast()) {
                        ChildParty =  ChildParty + ","+ rsParty.getString("CHILD_PARTY_ID");
                        rsParty.next();
                    }
                    
                    str = "SELECT SUM(NET_AMOUNT) AS TURNOVER FROM D_SAL_INVOICE_DETAIL WHERE CANCELLED=0 AND PARTY_CODE IN ("+ ChildParty +") "+
                    " AND SUBSTR(INVOICE_DATE,1,4)=2009 GROUP BY PARTY_CODE,SUBSTR(INVOICE_DATE,1,4) AND COMPANY_ID="+EITLERPGLOBAL.gCompanyID;
                    Amt = data.getDoubleValueFromDB(str);
                }
                
                rowData=new Object[4];
                
                rowData[0]=Integer.toString(1);
                rowData[1]=ParentParty;
                rowData[2]="2009";
                rowData[3]=Double.toString(Amt);
                
                DataModelTurnoverDtl.addRow(rowData);
                
            }
            else {
                str = "SELECT SUM(NET_AMOUNT) AS TURNOVER FROM D_SAL_INVOICE_DETAIL WHERE CANCELLED=0 AND PARTY_CODE='"+ PartyCode +"' "+
                " AND SUBSTR(INVOICE_DATE,1,4)=2009 GROUP BY PARTY_CODE,SUBSTR(INVOICE_DATE,1,4) AND COMPANY_ID="+EITLERPGLOBAL.gCompanyID;
                Amt = data.getDoubleValueFromDB(str);
                
                rowData=new Object[4];
                
                rowData[0]=Integer.toString(1);
                rowData[1]=PartyCode;
                rowData[2]="2009";
                rowData[3]=Double.toString(Amt);
                
                DataModelTurnoverDtl.addRow(rowData);
            }
            
            List=clsPolicyTurnOverList.getList(EITLERPGLOBAL.gCompanyID,PartyCode);
            
            for(int i=1;i<=List.size();i++) {
                clsPolicyTurnOverList ObjList=(clsPolicyTurnOverList) List.get(Integer.toString(i));
                HashMap colLot=ObjList.colTypeLot;
                
                rowData=new Object[4];
                
                rowData[0]=Integer.toString(i+1);
                rowData[1]=(String)ObjList.getAttribute("PARTY_CODE").getObj();
                rowData[2]=Integer.toString((int)ObjList.getAttribute("YEAR").getVal());
                rowData[3]=Double.toString((double)ObjList.getAttribute("TURNOVER_AMOUNT").getVal());
                
                DataModelTurnoverDtl.addRow(rowData);
                
                //Set the Collection
                DataModelTurnoverDtl.SetUserObject(TableTurnOverDtl.getRowCount()-1, colLot);
                
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
}
