/*
 * frmLedger.java
 *
 * Created on August 24, 2007, 10:52 AM
 */

package EITLERP.Finance;

/**
 *
 * @author  root
 */
import EITLERP.*;
import EITLERP.Finance.*;
import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.io.*;
import EITLERP.Purchase.*;
import EITLERP.Stores.*;
import java.sql.*;
import EITLERP.Finance.Config.*;
import java.text.*;

public class frmUnclaimedDeposit extends javax.swing.JApplet {
    private HashMap props;
    private Connection Conn;
    private Statement Stmt;
    private ResultSet rsResult;
    public Variant getAttribute(String PropName) {
        return (Variant) props.get(PropName);
    }
    
    public void setAttribute(String PropName,Object Value) {
        props.put(PropName,new Variant(Value));
    }
    
    /** Initializes the applet frmLedger */
    public void init() {
        props = new HashMap();
        setSize(525, 330);
        initComponents();
        generateData();
        clearFields();
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        lblTitle = new javax.swing.JLabel();
        MainPanel = new javax.swing.JTabbedPane();
        UnclaimedDeposit = new javax.swing.JPanel();
        lblFromDate = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        cmdTransferDeposit = new javax.swing.JButton();
        lblToDate = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        lblMessage = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" TRANSFER UNCLAIMED DEPOSIT");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(1, 1, 520, 25);

        UnclaimedDeposit.setLayout(null);

        UnclaimedDeposit.setBorder(new javax.swing.border.EtchedBorder());
        lblFromDate.setText("From Date :");
        UnclaimedDeposit.add(lblFromDate);
        lblFromDate.setBounds(27, 42, 72, 15);

        txtFromDate.setNextFocusableComponent(txtToDate);
        txtFromDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFromDateFocusGained(evt);
            }
        });

        UnclaimedDeposit.add(txtFromDate);
        txtFromDate.setBounds(105, 40, 130, 19);

        cmdTransferDeposit.setText("Transfer Deposits");
        cmdTransferDeposit.setNextFocusableComponent(txtFromDate);
        cmdTransferDeposit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTransferDepositActionPerformed(evt);
            }
        });

        UnclaimedDeposit.add(cmdTransferDeposit);
        cmdTransferDeposit.setBounds(170, 110, 160, 25);

        lblToDate.setText("To Date :");
        UnclaimedDeposit.add(lblToDate);
        lblToDate.setBounds(296, 42, 57, 15);

        txtToDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToDateFocusGained(evt);
            }
        });

        UnclaimedDeposit.add(txtToDate);
        txtToDate.setBounds(358, 40, 130, 19);

        lblMessage.setFont(new java.awt.Font("Tahoma", 1, 11));
        lblMessage.setText(" Transfer Unclaimed Deposit of Previous Year.");
        lblMessage.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        UnclaimedDeposit.add(lblMessage);
        lblMessage.setBounds(5, 10, 490, 20);

        MainPanel.addTab("Unclaimed Deposit", UnclaimedDeposit);

        getContentPane().add(MainPanel);
        MainPanel.setBounds(2, 27, 510, 240);

        lblStatus.setText("...");
        lblStatus.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(5, 270, 505, 20);

    }//GEN-END:initComponents
    
    private void cmdTransferDepositActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTransferDepositActionPerformed
        // TODO add your handling code here:
        ShowMessage("Processing...");
        if(!Validate()) {
            ShowMessage("Not Processed Properly...");
            return;
        }
        //updateData();
        clearFields();
        ShowMessage("Done...");
    }//GEN-LAST:event_cmdTransferDepositActionPerformed
    
    private void txtToDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Insert To Date in DD/MM/YYYY format.");
    }//GEN-LAST:event_txtToDateFocusGained
    
    private void txtFromDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFromDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Insert From Date in DD/MM/YYYY format.");
    }//GEN-LAST:event_txtFromDateFocusGained
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane MainPanel;
    private javax.swing.JPanel UnclaimedDeposit;
    private javax.swing.JButton cmdTransferDeposit;
    private javax.swing.JLabel lblFromDate;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblToDate;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private boolean Validate() {
        if(txtFromDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Insert From Date in DD/MM/YYYY format.");
            return false;
        } else if(!EITLERPGLOBAL.isDate(txtFromDate.getText().trim())) {
            JOptionPane.showMessageDialog(null,"Insert From Date in DD/MM/YYYY format.");
            return false;
        }
        
        if(txtToDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Insert To Date in DD/MM/YYYY format.");
            return false;
        } else if(!EITLERPGLOBAL.isDate(txtToDate.getText().trim())) {
            JOptionPane.showMessageDialog(null,"Insert To Date in DD/MM/YYYY format.");
            return false;
        }
        return true;
    }
    
    private void generateData() {
        setAttribute("115012", "115218"); // FD PUBLIC
        
        setAttribute("115029", "115232"); // LD SHARE HOLDER
        
        //setAttribute("115036", "115036"); // LD DIRECTORS
        
        setAttribute("115153", "115225"); // CD PUBLIC
        setAttribute("115177", "115249"); // CD SHARE HOLDER
    }
    
    private void updateData() {
        String FromDate = EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
        String ToDate = EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());
        String strSql = "SELECT * FROM D_FD_DEPOSIT_MASTER WHERE MATURITY_DATE>='"+FromDate+"' AND " +
        "MATURITY_DATE<='"+ToDate+"' AND DEPOSIT_STATUS=0 AND MAIN_ACCOUNT_CODE NOT IN ('115218','115232','115225','115249','115036') ";
        try {
            Conn = data.getConn(FinanceGlobal.FinURL);
            Stmt = Conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
            ResultSet rsResult=Stmt.executeQuery(strSql);
            rsResult.first();
            if(rsResult.getRow() > 0) {
                while(!rsResult.isAfterLast()) {
                    String ReceiptNo = rsResult.getString("RECEIPT_NO");
                    String MainAccountCode = rsResult.getString("MAIN_ACCOUNT_CODE");
                    String PartyCode = rsResult.getString("PARTY_CODE");
                    int CompanyID = rsResult.getInt("COMPANY_ID");
                    if(!PostUnclaimedDeposit(ReceiptNo,MainAccountCode,PartyCode,CompanyID)) {
                        JOptionPane.showMessageDialog(null,"Deposit transfer document not posted for receipt no = "+ReceiptNo);
                    }
                    rsResult.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private boolean PostUnclaimedDeposit(String ReceiptNo,String MainAccountCode, String PartyCode, int CompanyID) {
        try {
            String SelPrefix="";
            String SelSuffix="";
            int FFNo=0;
            
            //****** Prepare Voucher Object ********//
            int HierarchyID = 0;
            
            
            String TransferCode = getAttribute(MainAccountCode).getString();
            String TransferDate = EITLERPGLOBAL.addDaysToDate(EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()),1,"yyyy-MM-dd");
            HashMap List=clsApprovalRules.getApprovalRules(EITLERPGLOBAL.gCompanyID, clsUnclaimedDepositTransfer.ModuleID , "CHOOSE_HIERARCHY", "DEFAULT", "");
            
            if(List.size()>0) {
                //Get the Result of the Rule which would be the hierarchy no.
                clsApprovalRules objRule=(clsApprovalRules)List.get(Integer.toString(1));
                HierarchyID=UtilFunctions.CInt(objRule.getAttribute("RULE_OUTCOME").getString());
            }
            
            ResultSet rsTmp=data.getResult("SELECT * FROM D_COM_FIRSTFREE WHERE MODULE_ID="+clsUnclaimedDepositTransfer.ModuleID);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                SelPrefix=rsTmp.getString("PREFIX_CHARS");
                SelSuffix=rsTmp.getString("SUFFIX_CHARS");
                FFNo=rsTmp.getInt("FIRSTFREE_NO");
            }
            
            String tmpsql = "SELECT * FROM FINANCE.D_FD_DEPOSIT_MASTER WHERE COMPANY_ID="+CompanyID+" AND RECEIPT_NO='"+ReceiptNo+"' AND MAIN_ACCOUNT_CODE='"+MainAccountCode+"' AND PARTY_CODE='"+PartyCode+"' AND DEPOSIT_STATUS=0";
            ResultSet rsReceipt = data.getResult(tmpsql,FinanceGlobal.FinURL);
            String newDocNo = clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID,clsUnclaimedDepositTransfer.ModuleID,FFNo, false);
            
            clsUnclaimedDepositTransfer objUnclaimedDepositTransfer = new clsUnclaimedDepositTransfer();
            objUnclaimedDepositTransfer.LoadData(CompanyID);
            objUnclaimedDepositTransfer.UnclaimedEntry=true;
            //Applicant Detail
            objUnclaimedDepositTransfer.setAttribute("FFNO",FFNo);
            objUnclaimedDepositTransfer.setAttribute("COMPANY_ID",UtilFunctions.getInt(rsReceipt, "COMPANY_ID",0));
            objUnclaimedDepositTransfer.setAttribute("DOC_NO",newDocNo);
            objUnclaimedDepositTransfer.setAttribute("DOC_DATE",EITLERPGLOBAL.getCurrentDate());
            objUnclaimedDepositTransfer.setAttribute("RECEIPT_NO",UtilFunctions.getString(rsReceipt,"RECEIPT_NO",""));
            objUnclaimedDepositTransfer.setAttribute("RECEIPT_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsReceipt,"RECEIPT_DATE","0000-00-00")));
            objUnclaimedDepositTransfer.setAttribute("APPLICANT_NAME",UtilFunctions.getString(rsReceipt,"APPLICANT_NAME",""));
            objUnclaimedDepositTransfer.setAttribute("MAIN_ACCOUNT_CODE",UtilFunctions.getString(rsReceipt,"MAIN_ACCOUNT_CODE",""));
            objUnclaimedDepositTransfer.setAttribute("SUB_ACCOUNT_CODE",UtilFunctions.getString( rsReceipt,"PARTY_CODE",""));
            objUnclaimedDepositTransfer.setAttribute("EFFECTIVE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsReceipt,"EFFECTIVE_DATE","0000-00-00")));
            objUnclaimedDepositTransfer.setAttribute("MATURITY_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsReceipt,"MATURITY_DATE","0000-00-00")));
            
            objUnclaimedDepositTransfer.setAttribute("AMOUNT",UtilFunctions.getDouble( rsReceipt,"AMOUNT",0));
            objUnclaimedDepositTransfer.setAttribute("TRANSFER_CODE",TransferCode);
            objUnclaimedDepositTransfer.setAttribute("TRANSFER_DATE",EITLERPGLOBAL.formatDate(TransferDate));
            objUnclaimedDepositTransfer.setAttribute("CREATED_BY",EITLERPGLOBAL.gLoginID);
            objUnclaimedDepositTransfer.setAttribute("CREATED_DATE",EITLERPGLOBAL.formatDate(EITLERPGLOBAL.getCurrentDateDB()));
            
            objUnclaimedDepositTransfer.setAttribute("HIERARCHY_ID",HierarchyID);
            int FirstUserID=data.getIntValueFromDB("SELECT USER_ID FROM D_COM_HIERARCHY_RIGHTS WHERE HIERARCHY_ID="+HierarchyID+" AND SR_NO=1");
            objUnclaimedDepositTransfer.setAttribute("FROM",FirstUserID);
            objUnclaimedDepositTransfer.setAttribute("TO",FirstUserID);
            objUnclaimedDepositTransfer.setAttribute("FROM_REMARKS","");
            objUnclaimedDepositTransfer.setAttribute("APPROVAL_STATUS","H"); //Hold Receipt
            
            if(objUnclaimedDepositTransfer.Insert()) {
                objUnclaimedDepositTransfer.UnclaimedEntry=false;
                return true;
            }
            else {
                objUnclaimedDepositTransfer.UnclaimedEntry=false;
                return false;
            }
        } catch(Exception e) {
            e.printStackTrace();
            return false;
        }
    }
    
    private void clearFields() {
        txtFromDate.setText("");
        txtToDate.setText("");
    }
}