/*
 * EnterLot_Issue.java
 *
 * Created on June 3, 2004, 1:31 PM
 */

package EITLERP.Finance;

/**
 *
 * @author  nhpatel
 */
import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.*;
import EITLERP.Utils.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;

public class frmPaymentDeductions extends javax.swing.JApplet {
    
    private EITLTableModel DataModel;
    private EITLTableModel DataModelDN;
    
    public boolean Cancelled=true;
    public HashMap colDeductions=new HashMap();
    private JDialog aDialog;
    public String MainCode="";
    public String PartyCode ="";
    //public String InvoiceNo="";
    //public String PONo="";
    public int vType=0;
    public frmPaymentDeductions() {
        initComponents();
        
        
    }
    
    /** Initializes the applet EnterLot_Issue */
    public void init() {
        initComponents();
        if (vType==FinanceGlobal.TYPE_PJV) {
            MainPanel.setSelectedIndex(0);
            MainPanel.setEnabledAt(1, false);            
        } else if (vType==FinanceGlobal.TYPE_PAYMENT || vType==FinanceGlobal.TYPE_PAYMENT_2) {
            cmdAddDN.setEnabled(false);
        }
        GenerateGrid();
        GenerateGridDN();
        
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel1 = new javax.swing.JLabel();
        cmdOK = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        MainPanel = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        cmdRemove = new javax.swing.JButton();
        cmdAdd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        cmdRemoveDN = new javax.swing.JButton();
        cmdAddDN = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableDN = new javax.swing.JTable();
        cmdSelectDebitNote = new javax.swing.JButton();

        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12));
        jLabel1.setText("Payment Deductions");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(4, 6, 212, 15);

        cmdOK.setText("OK");
        cmdOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOKActionPerformed(evt);
            }
        });

        getContentPane().add(cmdOK);
        cmdOK.setBounds(430, 33, 80, 25);

        cmdCancel.setText("Cancel");
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        getContentPane().add(cmdCancel);
        cmdCancel.setBounds(430, 65, 79, 25);

        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.EtchedBorder());
        jPanel1.setEnabled(false);
        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });

        jPanel1.add(cmdRemove);
        cmdRemove.setBounds(93, 245, 90, 25);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });

        jPanel1.add(cmdAdd);
        cmdAdd.setBounds(11, 245, 80, 25);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });

        jScrollPane1.setViewportView(Table);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(9, 13, 400, 226);

        MainPanel.addTab("Direct Deductions", jPanel1);

        jPanel2.setLayout(null);

        jPanel2.setBorder(new javax.swing.border.EtchedBorder());
        jPanel2.setEnabled(false);
        cmdRemoveDN.setMnemonic('R');
        cmdRemoveDN.setText("Remove");
        cmdRemoveDN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveDNActionPerformed(evt);
            }
        });

        jPanel2.add(cmdRemoveDN);
        cmdRemoveDN.setBounds(93, 242, 90, 25);

        cmdAddDN.setMnemonic('A');
        cmdAddDN.setText("Add");
        cmdAddDN.setEnabled(false);
        cmdAddDN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddDNActionPerformed(evt);
            }
        });

        jPanel2.add(cmdAddDN);
        cmdAddDN.setBounds(11, 242, 80, 25);

        TableDN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableDN);

        jPanel2.add(jScrollPane2);
        jScrollPane2.setBounds(9, 13, 400, 226);

        cmdSelectDebitNote.setText("Select Debit Note");
        cmdSelectDebitNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSelectDebitNoteActionPerformed(evt);
            }
        });

        jPanel2.add(cmdSelectDebitNote);
        cmdSelectDebitNote.setBounds(190, 242, 150, 25);

        MainPanel.addTab("Debit Notes", jPanel2);

        getContentPane().add(MainPanel);
        MainPanel.setBounds(3, 29, 420, 300);

    }//GEN-END:initComponents
    
    private void cmdSelectDebitNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSelectDebitNoteActionPerformed
        // TODO add your handling code here:
        try {
            
            frmSelectionDebitVoucher objSelect=new frmSelectionDebitVoucher();
            objSelect.MainCode=MainCode; 
            objSelect.PartyCode=PartyCode;
            objSelect.ShowDialog();
            
            if(!objSelect.Cancelled) {
                
                double AmountTotal=0;
                
                for(int r=1;r<=objSelect.SelectedItems.size();r++) {
                    clsVoucher objItem=(clsVoucher)objSelect.SelectedItems.get(Integer.toString(r));
                    
                    Object[] rowData=new Object[1];
                    rowData[0]="1";
                    DataModelDN.addRow(rowData);
                    
                    int NewRow=TableDN.getRowCount()-1;
                    
                    DataModelDN.setValueByVariable("SR_NO",Integer.toString(r),NewRow);
                    DataModelDN.setValueByVariable("AMOUNT",Double.toString(objItem.getAttribute("AMOUNT").getDouble()),NewRow);
                    DataModelDN.setValueByVariable("DOC_NO",objItem.getAttribute("VOUCHER_NO").getString(),NewRow);
                    DataModelDN.setValueByVariable("DOC_DATE",objItem.getAttribute("VOUCHER_DATE").getString(),NewRow);
                    DataModelDN.setValueByVariable("REMARKS",objItem.getAttribute("REMARKS").getString(),NewRow);
                }
            }
        } catch(Exception e) {
        }
    }//GEN-LAST:event_cmdSelectDebitNoteActionPerformed
    
    private void cmdRemoveDNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveDNActionPerformed
        // TODO add your handling code here:
        DataModelDN.removeRow(TableDN.getSelectedRow());
    }//GEN-LAST:event_cmdRemoveDNActionPerformed
    
    private void cmdAddDNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddDNActionPerformed
        // TODO add your handling code here:
        Object[] rowData=new Object[3];
        DataModelDN.addRow(rowData);
        TableDN.changeSelection(TableDN.getRowCount()-1, 1, false,false);
        TableDN.requestFocus();
        
    }//GEN-LAST:event_cmdAddDNActionPerformed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        Object[] rowData=new Object[3];
        DataModel.addRow(rowData);
        Table.changeSelection(Table.getRowCount()-1, 1, false,false);
        Table.requestFocus();
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        DataModel.removeRow(Table.getSelectedRow());
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void cmdOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOKActionPerformed
        // TODO add your handling code here:
        
        //Validate Debit Note Nos.
        for(int i=0;i<TableDN.getRowCount();i++) {
            String VoucherNo=DataModelDN.getValueByVariable("DOC_NO", i);
            
          /*if(!data.IsRecordExist("SELECT VOUCHER_NO FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='"+VoucherNo+"' AND VOUCHER_TYPE=3 AND CANCELLED=0 ",FinanceGlobal.FinURL))
          {
            JOptionPane.showMessageDialog(null,"Debit note no. "+VoucherNo+" is invalid. Please make sure you typed it correctly and its final approved");
            return;
          }*/
        }
        
        SetDeductions();
        Cancelled=false;
        aDialog.dispose();
    }//GEN-LAST:event_cmdOKActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancelled=true;
        aDialog.dispose();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
        
        
        try {
            if(evt.getKeyCode()==112) {
                if(Table.getSelectedColumn()==DataModel.getColFromVariable("MAIN_ACCOUNT_CODE")) {
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL WHERE APPROVED=1 ORDER BY ACCOUNT_NAME";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=2;
                    aList.UseSpecifiedConn=true;
                    aList.dbURL=FinanceGlobal.FinURL;
                    
                    if(aList.ShowLOV()) {
                        if(Table.getCellEditor()!=null) {
                            Table.getCellEditor().stopCellEditing();
                        }
                        Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(),DataModel.getColFromVariable("MAIN_ACCOUNT_CODE"));
                    }
                }
            }
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_TableKeyPressed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane MainPanel;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableDN;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdAddDN;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdOK;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdRemoveDN;
    private javax.swing.JButton cmdSelectDebitNote;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
    
    private void FormatGrid() {
        DataModel=new EITLTableModel();
        
        Table.removeAll();
        
        Table.setModel(DataModel);
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        DataModel.addColumn("Sr."); //0
        DataModel.addColumn("Main Code"); //1
        DataModel.addColumn("Account Name"); //2
        DataModel.addColumn("Applicable Amount"); //3
        DataModel.addColumn("Percentage"); //4
        DataModel.addColumn("Amount"); //5
        DataModel.addColumn("Remarks"); //6
        
        DataModel.SetNumeric(0,true);
        DataModel.SetNumeric(3,true);
        DataModel.SetNumeric(4,true);
        DataModel.SetNumeric(5,true);
        
        DataModel.SetReadOnly(0);
                
        DataModel.SetReadOnly(2);
        
        
        DataModel.SetVariable(0, "SR_NO");
        DataModel.SetVariable(1, "MAIN_ACCOUNT_CODE");
        DataModel.SetVariable(2, "ACCOUNT_NAME");
        DataModel.SetVariable(3, "APPLICABLE_AMOUNT");
        DataModel.SetVariable(4, "PERCENTAGE");
        DataModel.SetVariable(5, "AMOUNT");
        DataModel.SetVariable(6, "REMARKS");
        
        //----- Install Table Model Event Listener -------//
        Table.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    int col = e.getColumn();
                    
                    
                    if(col==DataModel.getColFromVariable("MAIN_ACCOUNT_CODE")){
                        try {
                            String MainCode=DataModel.getValueByVariable("MAIN_ACCOUNT_CODE", Table.getSelectedRow());
                            String AccountName=clsAccount.getAccountName(MainCode,"");
                            DataModel.setValueByVariable("ACCOUNT_NAME",AccountName, Table.getSelectedRow());
                            
                        }
                        catch(Exception ex){}
                    }
                    
                    if(col==DataModel.getColFromVariable("PERCENTAGE")) {
                        try {
                            String MainCode = DataModel.getValueByVariable("MAIN_ACCOUNT_CODE", Table.getSelectedRow());
                            double ApplicableAmount = EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("APPLICABLE_AMOUNT", Table.getSelectedRow())),2);
                            double Amount = 0;
                            double Percentage = EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("PERCENTAGE", Table.getSelectedRow())),3);
                            if(MainCode.equals("127035")) {
                                Amount=EITLERPGLOBAL.roundEx((ApplicableAmount*Percentage)/100);
                                DataModel.setValueByVariable("AMOUNT",Double.toString(Amount), Table.getSelectedRow());
                            } else {
                                //Amount=EITLERPGLOBAL.round((ApplicableAmount*Percentage)/100,0); 
                                Amount=EITLERPGLOBAL.roundEx((ApplicableAmount*Percentage)/100);    // W.E.F 19/07/2011 as per change request of 7/7/2011 requested by chokshi
                                DataModel.setValueByVariable("AMOUNT",Double.toString(Amount), Table.getSelectedRow());
                            }
                        } catch(Exception amt) {
                        }
                    }
                }
            }
        });
    }
    
    private void FormatGridDN() {
        DataModelDN=new EITLTableModel();
        
        TableDN.removeAll();
        
        TableDN.setModel(DataModelDN);
        TableDN.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        DataModelDN.addColumn("Sr.");
        DataModelDN.addColumn("Debit Note No.");
        DataModelDN.addColumn("Date");
        DataModelDN.addColumn("Amount");
        DataModelDN.addColumn("Remarks");
        
        DataModelDN.SetNumeric(0,true);
        DataModelDN.SetNumeric(3,true);
        
        DataModelDN.SetReadOnly(0);
        DataModelDN.SetReadOnly(1);
        DataModelDN.SetReadOnly(2);
        DataModelDN.SetReadOnly(3);
        
        DataModelDN.SetVariable(0, "SR_NO");
        DataModelDN.SetVariable(1, "DOC_NO");
        DataModelDN.SetVariable(2, "DOC_DATE");
        DataModelDN.SetVariable(3, "AMOUNT");
        DataModelDN.SetVariable(4, "REMARKS");
        
        //----- Install Table Model Event Listener -------//
        TableDN.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    int col = e.getColumn();
                    
                    
                    if(col==DataModelDN.getColFromVariable("DOC_NO")){
                        try {
                            String VoucherNo=DataModelDN.getValueByVariable("DOC_NO", TableDN.getSelectedRow());
                            String Date=EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT VOUCHER_DATE FROM D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='"+VoucherNo+"'",FinanceGlobal.FinURL));
                            double Amount=data.getDoubleValueFromDB("SELECT AMOUNT FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+VoucherNo+"' AND EFFECT='D' ",FinanceGlobal.FinURL);
                            
                            DataModelDN.setValueByVariable("DOC_DATE",Date, TableDN.getSelectedRow());
                            DataModelDN.setValueByVariable("AMOUNT",Double.toString(Amount), TableDN.getSelectedRow());
                        }
                        catch(Exception ex){}
                    }
                }
            }
        });
    }
    
    //Recurses through the hierarchy of classes
    //until it finds Frame
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
    
    private void GenerateGrid() {
        //Generates Grid from the
        FormatGrid();
        
        for(int i=1;i<=colDeductions.size();i++) {
            clsVoucherItem objDeduction=(clsVoucherItem)colDeductions.get(Integer.toString(i));
            
            if(objDeduction.getAttribute("DOC_TYPE").getInt()==1) //Deduction Type 1 => Direct Deduction
            {
                Object[] rowData=new Object[7];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=objDeduction.getAttribute("MAIN_ACCOUNT_CODE").getString();
                rowData[2]=clsAccount.getAccountName(objDeduction.getAttribute("MAIN_ACCOUNT_CODE").getString(),"");
                rowData[3]=Double.toString(objDeduction.getAttribute("APPLICABLE_AMOUNT").getDouble());
                rowData[4]=Double.toString(objDeduction.getAttribute("PERCENTAGE").getDouble());
                rowData[5]=Double.toString(objDeduction.getAttribute("AMOUNT").getDouble());
                rowData[6]=objDeduction.getAttribute("REMARKS").getString();
                
                DataModel.addRow(rowData);
            }
        }
        
    }
    
    
    private void GenerateGridDN() {
        //Generates Grid from the
        FormatGridDN();
        
        for(int i=1;i<=colDeductions.size();i++) {
            clsVoucherItem objDeduction=(clsVoucherItem)colDeductions.get(Integer.toString(i));
            
            if(objDeduction.getAttribute("DOC_TYPE").getInt()==4) //Deduction Type 4 => Debit Note Deduction
            {
                
                Object[] rowData=new Object[5];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=objDeduction.getAttribute("DOC_NO").getString();
                rowData[2]=objDeduction.getAttribute("DOC_DATE").getString();
                rowData[3]=Double.toString(objDeduction.getAttribute("AMOUNT").getDouble());
                rowData[4]=objDeduction.getAttribute("REMARKS").getString();
                
                DataModelDN.addRow(rowData);
            }
        }
        
    }
    
    private void SetDeductions() {
        
        colDeductions.clear();
        
        for(int i=0;i<Table.getRowCount();i++) {
            clsVoucherItem objDeduction=new clsVoucherItem();
            
            objDeduction.setAttribute("DOC_TYPE",1);
            objDeduction.setAttribute("MAIN_ACCOUNT_CODE",DataModel.getValueByVariable("MAIN_ACCOUNT_CODE", i));
            objDeduction.setAttribute("APPLICABLE_AMOUNT",UtilFunctions.CDbl(DataModel.getValueByVariable("APPLICABLE_AMOUNT", i)));
            objDeduction.setAttribute("PERCENTAGE",UtilFunctions.CDbl(DataModel.getValueByVariable("PERCENTAGE", i)));
            objDeduction.setAttribute("AMOUNT",UtilFunctions.CDbl(DataModel.getValueByVariable("AMOUNT", i)));
            objDeduction.setAttribute("REMARKS",DataModel.getValueByVariable("REMARKS", i));
            
            colDeductions.put(Integer.toString(colDeductions.size()+1),objDeduction);
        }
        
        for(int i=0;i<TableDN.getRowCount();i++) {
            clsVoucherItem objDeduction=new clsVoucherItem();
            
            objDeduction.setAttribute("DOC_TYPE",4);
            objDeduction.setAttribute("DOC_NO",DataModelDN.getValueByVariable("DOC_NO", i));
            objDeduction.setAttribute("DOC_DATE",DataModelDN.getValueByVariable("DOC_DATE", i));
            objDeduction.setAttribute("AMOUNT",UtilFunctions.CDbl(DataModelDN.getValueByVariable("AMOUNT", i)));
            objDeduction.setAttribute("REMARKS",DataModelDN.getValueByVariable("REMARKS", i));
            
            colDeductions.put(Integer.toString(colDeductions.size()+1),objDeduction);
        }
        
    }
    
    
    
    
    public boolean ShowList() {
        try {
            if (vType==FinanceGlobal.TYPE_PJV) {
                MainPanel.setSelectedIndex(0);
                MainPanel.setEnabledAt(1, false);
            } else if (vType==FinanceGlobal.TYPE_PAYMENT || vType==FinanceGlobal.TYPE_PAYMENT_2) {
                cmdAddDN.setEnabled(false);
               
            }
            GenerateGrid();
            GenerateGridDN();
            
            setSize(530 ,370);
            
            Frame f=findParentFrame(this);
            
            aDialog=new JDialog(f,"Specify Deduction Entries",true);
            
            aDialog.getContentPane().add("Center",this);
            Dimension appletSize = this.getSize();
            aDialog.setSize(appletSize);
            aDialog.setResizable(false);
            
            //Place it to center of the screen
            Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
            aDialog.setLocation((int)(screenSize.width-appletSize.getWidth())/2,(int)(screenSize.height-appletSize.getHeight())/2);
            
            aDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
            aDialog.show();
        }
        catch(Exception e) {
        }
        return !Cancelled;
    }
    
    
}
