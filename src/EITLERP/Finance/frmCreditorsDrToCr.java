/*
 * frmSelectionPaymentVoucher.java
 *
 * Created on September 28, 2007, 12:01 PM
 */

package EITLERP.Finance;

/**
 *
 * @author  root
 */
import EITLERP.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.event.*;
import javax.swing.text.*;
import java.util.*;
import java.awt.Frame;
import java.awt.*;
import java.sql.*;

public class frmCreditorsDrToCr extends javax.swing.JApplet {
    
    private EITLTableModel DataModelPY=new EITLTableModel();
    private EITLTableModel DataModelPJV=new EITLTableModel();
    private EITLTableModel DataModelAdj = new EITLTableModel();
    
    private EITLTableCellRenderer Render=new EITLTableCellRenderer();
    private JDialog aDialog;
    public boolean Cancelled=false;
    public HashMap objSelectedVoucher=new HashMap();
    public String PartyCode="";
    public HashMap colSelItems=new HashMap();
    public String DocDate = "";
    public String thisDocNo = "";
    //public String SelectedPJV="";
    public String SelectedPY="";
    //public String SelectedInvoiceNo="";
    //public String SelectedPONo="";
    private boolean DoNotEvaluate=false;
    String cellLastValue="";
    
    public frmCreditorsDrToCr() {
        setSize(682,600);
        initComponents();
        FormatGridPJV();
        FormatGridPayment();
        FormatGridAdj();
        Tab.setEnabledAt(0, true);
        Tab.setEnabledAt(1, false);
        Tab.setEnabledAt(2, false);
    }
    
    /** Initializes the applet frmSelectionPaymentVoucher */
    public void init() {
        setSize(682,600);
        initComponents();
        FormatGridPJV();
        FormatGridPayment();
        FormatGridAdj();
        Tab.setEnabledAt(0, true);
        Tab.setEnabledAt(1, false);
        Tab.setEnabledAt(2, false);
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    private void initComponents() {//GEN-BEGIN:initComponents
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        panelParty = new javax.swing.JPanel();
        lblPartyCode = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        txtPartyName = new javax.swing.JTextField();
        cmdNext = new javax.swing.JButton();
        lblMainCode = new javax.swing.JLabel();
        txtMainCode = new javax.swing.JTextField();
        panelPJV = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        cmdBack = new javax.swing.JButton();
        cmdNext2 = new javax.swing.JButton();
        cmdShowCreditVoucher = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablePY = new javax.swing.JTable();
        lblFromDate = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        txtPoNo = new javax.swing.JTextField();
        lblPoNo = new javax.swing.JLabel();
        lblToDate = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        panelPayment = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cmdOK = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        lblVoucherInfo = new javax.swing.JLabel();
        lblDebitAmountInfo = new javax.swing.JLabel();
        lblDebitVoucher = new javax.swing.JLabel();
        lblDebitAmount = new javax.swing.JLabel();
        lblAdjustedAmountInfo = new javax.swing.JLabel();
        lblRemeiningAmountInfo = new javax.swing.JLabel();
        lblAdjustedDebit = new javax.swing.JLabel();
        lblRemainingAmount = new javax.swing.JLabel();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableAdj = new javax.swing.JTable();
        cmdShowVoucher = new javax.swing.JButton();
        cmdBack1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablePJV = new javax.swing.JTable();

        getContentPane().setLayout(null);

        lblTitle.setBackground(new java.awt.Color(0, 153, 204));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" ADVANCE PAYMENT ADJUSTMENT");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 1, 666, 25);

        panelParty.setLayout(null);

        panelParty.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        lblPartyCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPartyCode.setText("Party Code :");
        panelParty.add(lblPartyCode);
        lblPartyCode.setBounds(10, 50, 80, 15);

        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });

        panelParty.add(txtPartyCode);
        txtPartyCode.setBounds(95, 48, 130, 19);

        txtPartyName.setEnabled(false);
        panelParty.add(txtPartyName);
        txtPartyName.setBounds(95, 70, 500, 19);

        cmdNext.setText("Next >>");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        panelParty.add(cmdNext);
        cmdNext.setBounds(546, 231, 88, 25);

        lblMainCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMainCode.setText("Main Code :");
        panelParty.add(lblMainCode);
        lblMainCode.setBounds(10, 22, 80, 15);

        txtMainCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMainCodeKeyPressed(evt);
            }
        });

        panelParty.add(txtMainCode);
        txtMainCode.setBounds(95, 20, 130, 19);

        Tab.addTab("Party Code", panelParty);

        panelPJV.setLayout(null);

        jLabel3.setText("Select PJV to adjust with payment voucher(s).");
        panelPJV.add(jLabel3);
        jLabel3.setBounds(11, 13, 400, 15);

        cmdBack.setText("<<Back");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        panelPJV.add(cmdBack);
        cmdBack.setBounds(450, 430, 88, 25);

        cmdNext2.setText("Next >>");
        cmdNext2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext2ActionPerformed(evt);
            }
        });

        panelPJV.add(cmdNext2);
        cmdNext2.setBounds(550, 430, 88, 25);

        cmdShowCreditVoucher.setText("Show Voucher");
        cmdShowCreditVoucher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowCreditVoucherActionPerformed(evt);
            }
        });

        panelPJV.add(cmdShowCreditVoucher);
        cmdShowCreditVoucher.setBounds(10, 430, 150, 25);

        TablePY.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TablePY);

        panelPJV.add(jScrollPane1);
        jScrollPane1.setBounds(10, 40, 630, 300);

        lblFromDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFromDate.setText("From Date :");
        panelPJV.add(lblFromDate);
        lblFromDate.setBounds(50, 350, 80, 15);

        panelPJV.add(txtFromDate);
        txtFromDate.setBounds(140, 350, 100, 19);

        panelPJV.add(txtPoNo);
        txtPoNo.setBounds(140, 380, 100, 19);

        lblPoNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPoNo.setText("PO No.:");
        panelPJV.add(lblPoNo);
        lblPoNo.setBounds(50, 380, 80, 15);

        lblToDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblToDate.setText("To Date :");
        panelPJV.add(lblToDate);
        lblToDate.setBounds(250, 350, 70, 15);

        panelPJV.add(txtToDate);
        txtToDate.setBounds(330, 350, 100, 19);

        Tab.addTab("Select Payment", panelPJV);

        panelPayment.setLayout(null);

        panelPayment.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel2.setText("Add PJV(s) to below adjustment table and press OK when finished :");
        panelPayment.add(jLabel2);
        jLabel2.setBounds(5, 12, 480, 15);

        cmdOK.setText("OK");
        cmdOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOKActionPerformed(evt);
            }
        });

        panelPayment.add(cmdOK);
        cmdOK.setBounds(440, 430, 90, 25);

        cmdCancel.setText("Cancel");
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        panelPayment.add(cmdCancel);
        cmdCancel.setBounds(540, 430, 88, 25);

        lblVoucherInfo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblVoucherInfo.setText("Voucher No. :");
        panelPayment.add(lblVoucherInfo);
        lblVoucherInfo.setBounds(10, 200, 100, 15);

        lblDebitAmountInfo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDebitAmountInfo.setText("Debit Amount :");
        panelPayment.add(lblDebitAmountInfo);
        lblDebitAmountInfo.setBounds(10, 225, 100, 15);

        lblDebitVoucher.setText("...");
        lblDebitVoucher.setBorder(new javax.swing.border.EtchedBorder());
        panelPayment.add(lblDebitVoucher);
        lblDebitVoucher.setBounds(120, 200, 150, 19);

        lblDebitAmount.setText("...");
        lblDebitAmount.setBorder(new javax.swing.border.EtchedBorder());
        panelPayment.add(lblDebitAmount);
        lblDebitAmount.setBounds(120, 225, 120, 19);

        lblAdjustedAmountInfo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAdjustedAmountInfo.setText("Adjusted Debit :");
        panelPayment.add(lblAdjustedAmountInfo);
        lblAdjustedAmountInfo.setBounds(280, 200, 130, 15);

        lblRemeiningAmountInfo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRemeiningAmountInfo.setText("Remaining Adj. Amount :");
        panelPayment.add(lblRemeiningAmountInfo);
        lblRemeiningAmountInfo.setBounds(250, 225, 160, 15);

        lblAdjustedDebit.setText("...");
        lblAdjustedDebit.setBorder(new javax.swing.border.EtchedBorder());
        panelPayment.add(lblAdjustedDebit);
        lblAdjustedDebit.setBounds(420, 200, 115, 19);

        lblRemainingAmount.setText("...");
        lblRemainingAmount.setBorder(new javax.swing.border.EtchedBorder());
        panelPayment.add(lblRemainingAmount);
        lblRemainingAmount.setBounds(420, 225, 115, 19);

        cmdAdd.setText("Add");
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });

        panelPayment.add(cmdAdd);
        cmdAdd.setBounds(545, 200, 85, 20);

        cmdRemove.setText("Remove");
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });

        panelPayment.add(cmdRemove);
        cmdRemove.setBounds(545, 225, 85, 20);

        TableAdj.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableAdj);

        panelPayment.add(jScrollPane3);
        jScrollPane3.setBounds(10, 250, 620, 170);

        cmdShowVoucher.setText("Show Voucher");
        panelPayment.add(cmdShowVoucher);
        cmdShowVoucher.setBounds(510, 10, 130, 20);

        cmdBack1.setText("<<Back");
        cmdBack1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack1ActionPerformed(evt);
            }
        });

        panelPayment.add(cmdBack1);
        cmdBack1.setBounds(10, 430, 88, 25);

        TablePJV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TablePJV);

        panelPayment.add(jScrollPane2);
        jScrollPane2.setBounds(10, 40, 620, 150);

        Tab.addTab("Select PJV", panelPayment);

        getContentPane().add(Tab);
        Tab.setBounds(3, 32, 650, 490);

    }//GEN-END:initComponents
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if(TableAdj.getRowCount()>0) {
            DataModelAdj.removeRow(TableAdj.getSelectedRow());
        }
        double POInvoiceAmount = 0;
        double DebitAmount = Double.parseDouble(lblDebitAmount.getText());
        double RemainingAmount = Double.parseDouble(DataModelPY.getValueByVariable("AMOUNT", TablePY.getSelectedRow()));
        double UtilizedAmount = Double.parseDouble(DataModelPY.getValueByVariable("UTILIZED_AMOUNT", TablePY.getSelectedRow()));
        RemainingAmount = RemainingAmount - UtilizedAmount;
        double AdjustedDebit = Math.abs(RemainingAmount - DebitAmount);
        double TableEnterAmount = 0;
        for(int i=0;i<TableAdj.getRowCount();i++) {
            TableEnterAmount += Double.parseDouble(DataModelAdj.getValueByVariable("ADJ_AMOUNT", i));
        }
        POInvoiceAmount = DebitAmount - AdjustedDebit - TableEnterAmount;
        lblRemainingAmount.setText(Double.toString(EITLERPGLOBAL.round(POInvoiceAmount,2)));
        UpdateSrNo();
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        if(TablePJV.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(this,"Please select PJV.");
            return;
        }
        String SelectedPJV = DataModelPJV.getValueByVariable("PJV_NO",TablePJV.getSelectedRow());
        for(int i=0;i<TableAdj.getRowCount();i++) {
            if(DataModelAdj.getValueByVariable("PJV_NO",i).equals(SelectedPJV)) {
                JOptionPane.showMessageDialog(this,SelectedPJV + " is already used at sr no. " + (i+1));
                return;
            }
        }
        
        try {
            if(Double.parseDouble(lblRemainingAmount.getText().trim()) > 0) {
                double AdjAmount = 0;
                double insertAmount = Double.parseDouble(DataModelPJV.getValueByVariable("REMAINING_AMOUNT",TablePJV.getSelectedRow())) - Double.parseDouble(DataModelPJV.getValueByVariable("UTILIZED_AMOUNT",TablePJV.getSelectedRow()));
                double RemainingAmount = Double.parseDouble(lblRemainingAmount.getText());
                if(RemainingAmount > insertAmount) {
                    AdjAmount = insertAmount;
                } else {
                    AdjAmount = RemainingAmount;
                }
                Object[] rowData=new Object[1];
                DataModelAdj.addRow(rowData);
                int NewIndex=TableAdj.getRowCount()-1;
                
                DataModelAdj.setValueByVariable("SR_NO",Integer.toString(NewIndex+1), NewIndex);
                DataModelAdj.setValueByVariable("PJV_NO",DataModelPJV.getValueByVariable("PJV_NO",TablePJV.getSelectedRow()),NewIndex);
                DataModelAdj.setValueByVariable("PJV_DATE",DataModelPJV.getValueByVariable("PJV_DATE",TablePJV.getSelectedRow()),NewIndex);
                DataModelAdj.setValueByVariable("ADJ_AMOUNT",Double.toString(AdjAmount), NewIndex);
                DataModelAdj.setValueByVariable("MAIN_ACCOUNT_CODE",txtMainCode.getText().trim(), NewIndex);
                DataModelAdj.setValueByVariable("SUB_ACCOUNT_CODE",txtPartyCode.getText().trim(), NewIndex);
                DataModelAdj.setValueByVariable("ACCOUNT_NAME",clsAccount.getAccountName(txtMainCode.getText().trim(),txtPartyCode.getText().trim()), NewIndex);
                DataModelAdj.setValueByVariable("PO_NO",DataModelPJV.getValueByVariable("PO_NO",TablePJV.getSelectedRow()), NewIndex);
                DataModelAdj.setValueByVariable("PO_DATE",DataModelPJV.getValueByVariable("PO_DATE",TablePJV.getSelectedRow()), NewIndex);
                DataModelAdj.setValueByVariable("GRN_NO",DataModelPJV.getValueByVariable("GRN_NO",TablePJV.getSelectedRow()), NewIndex);
                DataModelAdj.setValueByVariable("GRN_DATE",DataModelPJV.getValueByVariable("GRN_DATE",TablePJV.getSelectedRow()), NewIndex);
                DataModelAdj.setValueByVariable("INVOICE_NO",DataModelPJV.getValueByVariable("INVOICE_NO",TablePJV.getSelectedRow()), NewIndex);
                DataModelAdj.setValueByVariable("INVOICE_DATE",DataModelPJV.getValueByVariable("INVOICE_DATE",TablePJV.getSelectedRow()), NewIndex);
                DataModelAdj.setValueByVariable("PJV_COMPANY_ID",DataModelPJV.getValueByVariable("COMPANY_ID",TablePJV.getSelectedRow()),NewIndex);
                DataModelAdj.setValueByVariable("REF_MODULE_ID",DataModelPJV.getValueByVariable("MODULE_ID",TablePJV.getSelectedRow()),NewIndex);
                DataModelAdj.setValueByVariable("VOUCHER_NO",DataModelPY.getValueByVariable("VOUCHER_NO",TablePY.getSelectedRow()),NewIndex);
                DataModelAdj.setValueByVariable("VOUCHER_DATE",DataModelPY.getValueByVariable("VOUCHER_DATE",TablePY.getSelectedRow()),NewIndex);
                DataModelAdj.setValueByVariable("VOUCHER_SR_NO",DataModelPY.getValueByVariable("VOUCHER_SR_NO",TablePY.getSelectedRow()),NewIndex);
                DataModelAdj.setValueByVariable("PAYMENT_AMOUNT",DataModelPY.getValueByVariable("AMOUNT",TablePY.getSelectedRow()),NewIndex);
                DataModelAdj.setValueByVariable("VOUCHER_COMPANY_ID",DataModelPY.getValueByVariable("COMPANY_ID",TablePY.getSelectedRow()),NewIndex);
                DataModelAdj.setValueByVariable("REMARKS","",NewIndex);
                UpdateTotal();
            }
        }catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void cmdBack1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack1ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
        Tab.setEnabledAt(0, false);
        Tab.setEnabledAt(1, true);
        Tab.setEnabledAt(2, false);
        FormatGridPayment();
        FormatGridAdj();
    }//GEN-LAST:event_cmdBack1ActionPerformed
    
    private void cmdShowCreditVoucherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowCreditVoucherActionPerformed
        // TODO add your handling code here:
        if(TablePJV.getSelectedRow() >= 0) {
            String DocNo = DataModelPJV.getValueByVariable("PJV_NO", TablePJV.getSelectedRow());
            clsVoucher.OpenVoucher(DocNo, new frmPendingApprovals());
        } else {
            JOptionPane.showMessageDialog(this,"Select Voucher");
            return;
        }
    }//GEN-LAST:event_cmdShowCreditVoucherActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancelled=true;
        aDialog.dispose();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOKActionPerformed
        // TODO add your handling code here:
        try {
            
            if(!Validate()) {
                return;
            }
            objSelectedVoucher.clear();
            int Counter=0;
            for(int i=0;i<TableAdj.getRowCount();i++) {
                Counter++;
                clsCrAdjustmentItem objItem = new clsCrAdjustmentItem();
                objItem.setAttribute("SR_NO",Counter);
                objItem.setAttribute("PJV_NO",DataModelAdj.getValueByVariable("PJV_NO",i));
                objItem.setAttribute("PJV_DATE",DataModelAdj.getValueByVariable("PJV_DATE",i));
                objItem.setAttribute("ADJ_AMOUNT",Double.parseDouble(DataModelAdj.getValueByVariable("ADJ_AMOUNT",i)));
                objItem.setAttribute("MAIN_ACCOUNT_CODE",DataModelAdj.getValueByVariable("MAIN_ACCOUNT_CODE",i));
                objItem.setAttribute("SUB_ACCOUNT_CODE",DataModelAdj.getValueByVariable("SUB_ACCOUNT_CODE",i));
                objItem.setAttribute("ACCOUNT_NAME",DataModelAdj.getValueByVariable("ACCOUNT_NAME",i));
                objItem.setAttribute("PO_NO",DataModelAdj.getValueByVariable("PO_NO",i));
                objItem.setAttribute("PO_DATE",DataModelAdj.getValueByVariable("PO_DATE",i));
                objItem.setAttribute("GRN_NO",DataModelAdj.getValueByVariable("GRN_NO",i));
                objItem.setAttribute("GRN_DATE",DataModelAdj.getValueByVariable("GRN_DATE",i));
                objItem.setAttribute("INVOICE_NO",DataModelAdj.getValueByVariable("INVOICE_NO",i));
                objItem.setAttribute("INVOICE_DATE",DataModelAdj.getValueByVariable("INVOICE_DATE",i));
                objItem.setAttribute("REF_MODULE_ID",Integer.parseInt(DataModelAdj.getValueByVariable("REF_MODULE_ID",i)));
                objItem.setAttribute("PJV_COMPANY_ID",Integer.parseInt(DataModelAdj.getValueByVariable("PJV_COMPANY_ID",i)));
                objItem.setAttribute("VOUCHER_NO",DataModelAdj.getValueByVariable("VOUCHER_NO",i));
                objItem.setAttribute("VOUCHER_DATE",DataModelAdj.getValueByVariable("VOUCHER_DATE",i));
                objItem.setAttribute("VOUCHER_SR_NO",Integer.parseInt(DataModelAdj.getValueByVariable("VOUCHER_SR_NO",i)));
                objItem.setAttribute("PAYMENT_AMOUNT",Double.parseDouble(DataModelAdj.getValueByVariable("PAYMENT_AMOUNT",i)));
                objItem.setAttribute("VOUCHER_COMPANY_ID",Integer.parseInt(DataModelAdj.getValueByVariable("VOUCHER_COMPANY_ID",i)));
                objItem.setAttribute("REMARKS",DataModelAdj.getValueByVariable("REMARKS",i));
                objSelectedVoucher.put(Integer.toString(Counter), objItem);
            }
            System.out.println("Size = " + objSelectedVoucher.size());
            aDialog.dispose();
        } catch(Exception e) {
        }
    }//GEN-LAST:event_cmdOKActionPerformed
    
    private void cmdNext2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext2ActionPerformed
        // TODO add your handling code here:
        try {
            if(TablePY.getSelectedRow()<0) {
                JOptionPane.showMessageDialog(null,"Please select the PJV from the list");
                return;
            }
            FormatGridPJV();
            FormatGridAdj();
            SelectedPY = DataModelPY.getValueByVariable("VOUCHER_NO", TablePY.getSelectedRow());
            String Msg = "You have selected Payment No.(" + SelectedPY + ") \n Are you sure ?";
            if(JOptionPane.showConfirmDialog(this,Msg,"Conform Payment",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE)==0) {
                GenerateGridPJV();
                Tab.setSelectedIndex(2);
                Tab.setEnabledAt(0, false);
                Tab.setEnabledAt(1, false);
                Tab.setEnabledAt(2, true);
                lblDebitVoucher.setText(SelectedPY);
                
                lblDebitAmount.setText(DataModelPY.getValueByVariable("AMOUNT", TablePY.getSelectedRow()));
                double DebitAmount = Double.parseDouble(DataModelPY.getValueByVariable("AMOUNT", TablePY.getSelectedRow()));
                double RemainingAmount = Double.parseDouble(DataModelPY.getValueByVariable("AMOUNT", TablePY.getSelectedRow()));
                double UtilizedAmount = Double.parseDouble(DataModelPY.getValueByVariable("UTILIZED_AMOUNT", TablePY.getSelectedRow()));
                RemainingAmount = Math.abs(RemainingAmount - UtilizedAmount);
                double AdjustedDebit = Math.abs(DebitAmount - RemainingAmount);
                lblAdjustedDebit.setText(Double.toString(AdjustedDebit));
                lblRemainingAmount.setText(Double.toString(EITLERPGLOBAL.round(RemainingAmount,2)));
            } else {
                Tab.setSelectedIndex(1);
                Tab.setEnabledAt(0, false);
                Tab.setEnabledAt(1, true);
                Tab.setEnabledAt(2, false);
            }
        } catch(Exception e) {
        }
    }//GEN-LAST:event_cmdNext2ActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(0);
        Tab.setEnabledAt(0, true);
        Tab.setEnabledAt(1, false);
        Tab.setEnabledAt(2, false);
        FormatGridPJV();
        FormatGridPayment();
        FormatGridAdj();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void txtMainCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMainCodeKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==112) {
            LOV aList=new LOV();
            
            aList.SQL="SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL WHERE APPROVED=1 ORDER BY ACCOUNT_NAME";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            aList.UseSpecifiedConn=true;
            aList.dbURL=FinanceGlobal.FinURL;
            
            if(aList.ShowLOV()) {
                txtMainCode.setText(aList.ReturnVal);
            }
            
        }
        
    }//GEN-LAST:event_txtMainCodeKeyPressed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        if(txtMainCode.getText().trim().equals("") || txtPartyCode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Please Insert Main Code and sub code.");
            return;
        }
        FormatGridPayment();
        GenerateGridPayment();
        Tab.setSelectedIndex(1);
        Tab.setEnabledAt(0, false);
        Tab.setEnabledAt(1, true);
        Tab.setEnabledAt(2, false);
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
        // TODO add your handling code here:
        System.out.println(txtMainCode.getText() + "    "+ txtPartyCode.getText());
        txtPartyName.setText(clsPartyMaster.getAccountName(txtMainCode.getText(),txtPartyCode.getText()));
    }//GEN-LAST:event_txtPartyCodeFocusLost
    
    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==112) {
            if(!txtMainCode.getText().trim().equals("")) {
                LOV aList=new LOV();
                aList.SQL="SELECT PARTY_CODE,PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='"+txtMainCode.getText().trim()+"' AND APPROVED=1 ORDER BY PARTY_NAME";
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=FinanceGlobal.FinURL;
                if(aList.ShowLOV()) {
                    txtPartyCode.setText(aList.ReturnVal);
                    txtPartyName.setText(clsPartyMaster.getAccountName(txtMainCode.getText().trim(),aList.ReturnVal));
                }
            } else {
                JOptionPane.showMessageDialog(this,"Please Insert main code first.");
                return;
            }
        }
    }//GEN-LAST:event_txtPartyCodeKeyPressed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JTable TableAdj;
    private javax.swing.JTable TablePJV;
    private javax.swing.JTable TablePY;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext2;
    private javax.swing.JButton cmdOK;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdShowCreditVoucher;
    private javax.swing.JButton cmdShowVoucher;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAdjustedAmountInfo;
    private javax.swing.JLabel lblAdjustedDebit;
    private javax.swing.JLabel lblDebitAmount;
    private javax.swing.JLabel lblDebitAmountInfo;
    private javax.swing.JLabel lblDebitVoucher;
    private javax.swing.JLabel lblFromDate;
    private javax.swing.JLabel lblMainCode;
    private javax.swing.JLabel lblPartyCode;
    private javax.swing.JLabel lblPoNo;
    private javax.swing.JLabel lblRemainingAmount;
    private javax.swing.JLabel lblRemeiningAmountInfo;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblToDate;
    private javax.swing.JLabel lblVoucherInfo;
    private javax.swing.JPanel panelPJV;
    private javax.swing.JPanel panelParty;
    private javax.swing.JPanel panelPayment;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtMainCode;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtPartyName;
    private javax.swing.JTextField txtPoNo;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables
    
    private void FormatGridPayment() {
        try {
            
            DataModelPY=new EITLTableModel();
            TablePY.removeAll();
            
            TablePY.setModel(DataModelPY);
            TableColumnModel ColModel=TablePY.getColumnModel();
            TablePY.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            DataModelPY.addColumn("Sr."); //0 - Read Only
            DataModelPY.addColumn("Payment Voucher No.");
            DataModelPY.addColumn("Date");
            DataModelPY.addColumn("Voucher Sr. No.");
            DataModelPY.addColumn("Invoice No");
            DataModelPY.addColumn("Invoice Date");
            DataModelPY.addColumn("Amount");
            DataModelPY.addColumn("Utilized Amount");
            DataModelPY.addColumn("PO No.");
            DataModelPY.addColumn("PO Date");
            DataModelPY.addColumn("Company ID");
            
            DataModelPY.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModelPY.SetVariable(1,"VOUCHER_NO"); //1
            DataModelPY.SetVariable(2,"VOUCHER_DATE"); //2 //Read Only
            DataModelPY.SetVariable(3,"VOUCHER_SR_NO"); //2 //Read Only
            DataModelPY.SetVariable(4,"INVOICE_NO"); //2 //Read Only
            DataModelPY.SetVariable(5,"INVOICE_DATE"); //2 //Read Only
            DataModelPY.SetVariable(6,"AMOUNT"); //2 //Read Only
            DataModelPY.SetVariable(7,"UTILIZED_AMOUNT"); //2 //Read Only
            DataModelPY.SetVariable(8,"PO_NO"); //2 //Read Only
            DataModelPY.SetVariable(9,"PO_DATE"); //2 //Read Only
            DataModelPY.SetVariable(10,"COMPANY_ID"); //2 //Read Only
            DataModelPY.TableReadOnly(true);
        } catch(Exception e) {
        }
    }
    
    private void FormatGridPJV() {
        try {
            
            DataModelPJV=new EITLTableModel();
            TablePJV.removeAll();
            
            TablePJV.setModel(DataModelPJV);
            TableColumnModel ColModel=TablePJV.getColumnModel();
            TablePJV.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            DataModelPJV.addColumn("Sr."); //0 - Read Only
            DataModelPJV.addColumn("PJV No."); //1
            DataModelPJV.addColumn("Date"); //2
            DataModelPJV.addColumn("Amount"); //3
            DataModelPJV.addColumn("Remaining Amount"); //3
            DataModelPJV.addColumn("Utilized Amount"); //3
            DataModelPJV.addColumn("GRN No."); //4
            DataModelPJV.addColumn("GRN Date"); //5
            DataModelPJV.addColumn("Module Name"); //6
            DataModelPJV.addColumn("PO No."); //7
            DataModelPJV.addColumn("PO Date"); //8
            DataModelPJV.addColumn("Invoice No."); //9
            DataModelPJV.addColumn("Invoice Date"); //10
            DataModelPJV.addColumn("Module ID"); //11
            DataModelPJV.addColumn("Company ID"); //12
            
            DataModelPJV.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModelPJV.SetVariable(1,"PJV_NO"); //1
            DataModelPJV.SetVariable(2,"PJV_DATE"); //2 //Read Only
            DataModelPJV.SetVariable(3,"AMOUNT"); //2 //Read Only
            DataModelPJV.SetVariable(4,"REMAINING_AMOUNT"); //3
            DataModelPJV.SetVariable(5,"UTILIZED_AMOUNT"); //3
            DataModelPJV.SetVariable(6,"GRN_NO"); //2 //Read Only
            DataModelPJV.SetVariable(7,"GRN_DATE"); //2 //Read Only
            DataModelPJV.SetVariable(8,"MODULE_NAME"); //2 //Read Only
            DataModelPJV.SetVariable(9,"PO_NO"); //2 //Read Only
            DataModelPJV.SetVariable(10,"PO_DATE"); //2 //Read Only
            DataModelPJV.SetVariable(11,"INVOICE_NO"); //2 //Read Only
            DataModelPJV.SetVariable(12,"INVOICE_DATE"); //2 //Read Only
            DataModelPJV.SetVariable(13,"MODULE_ID"); //2 //Read Only
            DataModelPJV.SetVariable(14,"COMPANY_ID"); //2 //Read Only
            
            DataModelPJV.TableReadOnly(true);
        } catch(Exception e) {
        }
    }
    
    private void FormatGridAdj() {
        
        //Updating=true; //Stops recursion
        
        try {
            
            cmdRemove.requestFocus();
            
            DataModelAdj=new EITLTableModel();
            TableAdj.removeAll();
            
            TableAdj.setModel(DataModelAdj);
            TableColumnModel ColModel=TableAdj.getColumnModel();
            TableAdj.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            DataModelAdj.addColumn("Sr."); //0
            DataModelAdj.addColumn("PJV No."); //1
            DataModelAdj.addColumn("PJV Date."); //2
            DataModelAdj.addColumn("Adj Amount"); //3
            DataModelAdj.addColumn("Main Account Code"); //4
            DataModelAdj.addColumn("Sub Account Code"); //5
            DataModelAdj.addColumn("Account Name"); //6
            DataModelAdj.addColumn("PO No."); //7
            DataModelAdj.addColumn("PO Date"); //8
            DataModelAdj.addColumn("GRN No."); //9
            DataModelAdj.addColumn("GRN Date"); //10
            DataModelAdj.addColumn("Invoice No."); //11
            DataModelAdj.addColumn("Invoice Date"); //12
            DataModelAdj.addColumn("Ref. Module ID"); //13
            DataModelAdj.addColumn("PJV CompanyID"); //14
            DataModelAdj.addColumn("Payment Voucher No."); //15
            DataModelAdj.addColumn("Voucher Sr. No."); //16
            DataModelAdj.addColumn("Voucher Date"); //17
            DataModelAdj.addColumn("Payment Amount"); //18
            DataModelAdj.addColumn("Payment Voucher CompanyID"); //19
            DataModelAdj.addColumn("Remarks"); //20
            
            DataModelAdj.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModelAdj.SetVariable(1,"PJV_NO"); //0 - Read Only
            DataModelAdj.SetVariable(2,"PJV_DATE"); //0 - Read Only
            DataModelAdj.SetVariable(3,"ADJ_AMOUNT"); //
            DataModelAdj.SetVariable(4,"MAIN_ACCOUNT_CODE"); //
            DataModelAdj.SetVariable(5,"SUB_ACCOUNT_CODE"); //
            DataModelAdj.SetVariable(6,"ACCOUNT_NAME"); //
            DataModelAdj.SetVariable(7,"PO_NO"); //0 - Read Only
            DataModelAdj.SetVariable(8,"PO_DATE"); //0 - Read Only
            DataModelAdj.SetVariable(9,"GRN_NO"); //0 - Read Only
            DataModelAdj.SetVariable(10,"GRN_DATE"); //0 - Read Only
            DataModelAdj.SetVariable(11,"INVOICE_NO"); //0 - Read Only
            DataModelAdj.SetVariable(12,"INVOICE_DATE"); //0 - Read Only
            DataModelAdj.SetVariable(13,"REF_MODULE_ID"); //0 - Read Only
            DataModelAdj.SetVariable(14,"PJV_COMPANY_ID"); //0 - Read Only
            DataModelAdj.SetVariable(15,"VOUCHER_NO"); //0 - Read Only
            DataModelAdj.SetVariable(16,"VOUCHER_SR_NO"); //0 - Read Only
            DataModelAdj.SetVariable(17,"VOUCHER_DATE"); //0 - Read Only
            DataModelAdj.SetVariable(18,"PAYMENT_AMOUNT"); //0 - Read Only
            DataModelAdj.SetVariable(19,"VOUCHER_COMPANY_ID"); //0 - Read Only
            DataModelAdj.SetVariable(20,"REMARKS"); //0 - Read Only
            
            DataModelAdj.TableReadOnly(false);
            
            for(int i=0;i<DataModelAdj.getColumnCount();i++) {
                DataModelAdj.SetReadOnly(i);
            }
            
            DataModelAdj.ResetReadOnly(3);
            DataModelAdj.ResetReadOnly(20);
            
            TableAdj.getColumnModel().getSelectionModel().addListSelectionListener(
            new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent e) {
                    int last=TableAdj.getSelectedColumn();
                    String strVar=DataModelAdj.getVariable(last);
                    
                    
                    //=============== Cell Editing Routine =======================//
                    try {
                        cellLastValue = DataModelAdj.getValueByVariable(strVar, TableAdj.getSelectedRow());
                        //(String)TableAdj.getValueAt(TableAdj.getSelectedRow()+1,TableAdj.getSelectedColumn());
                        
                        TableAdj.editCellAt(TableAdj.getSelectedRow(),TableAdj.getSelectedColumn());
                        if(TableAdj.getEditorComponent() instanceof JTextComponent) {
                            ((JTextComponent)TableAdj.getEditorComponent()).selectAll();
                        }
                        DoNotEvaluate=false;
                    }
                    catch(Exception cell){}
                    //============= Cell Editing Routine Ended =================//
                }
            }
            );
            
            TableAdj.getModel().addTableModelListener(new TableModelListener() {
                public void tableChanged(TableModelEvent e) {
                    if (e.getType() == TableModelEvent.UPDATE) {
                        int col = e.getColumn();
                        
                        //=========== Cell Update Prevention Check ===========//
                        String curValue=(String)TableAdj.getValueAt(TableAdj.getSelectedRow(), e.getColumn());
                        if(curValue.equals(cellLastValue)) {
                            return;
                        }
                        //====================================================//
                        
                        if(DoNotEvaluate) {
                            return;
                        }
                        
                        if(col==DataModelAdj.getColFromVariable("ADJ_AMOUNT")) {
                            for(int i=0;i<TableAdj.getRowCount();i++) {
                                if(DataModelAdj.getValueByVariable("ADJ_AMOUNT", i).trim().equals("")) {
                                    DataModelAdj.setValueByVariable("ADJ_AMOUNT","0" ,i);
                                }
                                if(Double.parseDouble(DataModelAdj.getValueByVariable("ADJ_AMOUNT", i).trim())<0) {
                                    JOptionPane.showMessageDialog(null,"Adjustment amount can not be negative.","Wrong Input",JOptionPane.ERROR_MESSAGE);
                                    DataModelAdj.setValueByVariable("ADJ_AMOUNT","0" ,i);
                                    return;
                                }
                                DataModelAdj.setValueByVariable("ADJ_AMOUNT", Double.toString(EITLERPGLOBAL.round(Double.parseDouble(DataModelAdj.getValueByVariable("ADJ_AMOUNT", i).trim()),2)),i);
                            }
                            
                            double RemainingAmount =0;
                            for(int j=0;j<TablePJV.getRowCount();j++) {
                                if(DataModelAdj.getValueByVariable("PJV_NO", TableAdj.getSelectedRow()).trim().equals(DataModelPJV.getValueByVariable("PJV_NO", j))) {
                                    RemainingAmount = Double.parseDouble(DataModelPJV.getValueByVariable("AMOUNT", j));
                                    double UtilizedAmount = Double.parseDouble(DataModelPJV.getValueByVariable("UTILIZED_AMOUNT", j));
                                    RemainingAmount = RemainingAmount - UtilizedAmount;
                                }
                            }
                            if(Double.parseDouble(DataModelAdj.getValueByVariable("ADJ_AMOUNT", TableAdj.getSelectedRow()).trim()) > RemainingAmount) {
                                JOptionPane.showMessageDialog(null,"Adjustment amount can not be grater then (remaining amount - utilized amount).","Wrong Input",JOptionPane.ERROR_MESSAGE);
                                DataModelAdj.setValueByVariable("ADJ_AMOUNT","0", TableAdj.getSelectedRow());
                            }
                        }
                        
                        if(col==DataModelAdj.getColFromVariable("ADJ_AMOUNT")) {
                            DoNotEvaluate=true;
                            double EnterAmount  = Double.parseDouble(DataModelAdj.getValueByVariable("ADJ_AMOUNT",TableAdj.getSelectedRow()));
                            double POInvoiceAmount = 0;
                            double DebitAmount = Double.parseDouble(lblDebitAmount.getText());
                            double RemainingAmount = Double.parseDouble(DataModelPY.getValueByVariable("AMOUNT", TablePY.getSelectedRow()));
                            double UtilizedAmount = Double.parseDouble(DataModelPY.getValueByVariable("UTILIZED_AMOUNT", TablePY.getSelectedRow()));
                            RemainingAmount = RemainingAmount - UtilizedAmount;
                            double AdjustedDebit = Math.abs(DebitAmount - RemainingAmount);
                            double TableEnterAmount = 0;
                            for(int i=0;i<TableAdj.getRowCount();i++) {
                                if(i!=TableAdj.getSelectedRow()) {
                                    TableEnterAmount += Double.parseDouble(DataModelAdj.getValueByVariable("ADJ_AMOUNT", i));
                                }
                            }
                            POInvoiceAmount = DebitAmount - EnterAmount - TableEnterAmount;
                            if(POInvoiceAmount < 0) {
                                JOptionPane.showMessageDialog(null,"Adjustment amount exceeding remaining debit amount.","Wrong Input",JOptionPane.ERROR_MESSAGE);
                                DataModelAdj.setValueByVariable("ADJ_AMOUNT","0", TableAdj.getSelectedRow());
                            } else {
                                lblRemainingAmount.setText(Double.toString(EITLERPGLOBAL.round(POInvoiceAmount,2)));
                            }
                        }
                    }
                }
            });
            
        } catch(Exception e) {
        }
        //Updating=false;
        //Table formatting completed
    }
    
    private void GenerateGridPJV() {
        try {
            HashMap List=new HashMap();
            FormatGridPJV();
            
            String strSQL="";
            String Condition = "";
            if(!txtFromDate.getText().trim().equals("")) {
                Condition += " AND A.VOUCHER_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim())+"' ";
            }
            if(!txtToDate.getText().trim().equals("")) {
                Condition += " AND A.VOUCHER_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim())+"' ";
            }
            if(!txtPoNo.getText().trim().equals("")) {
                Condition += " AND B.PO_NO='"+txtPoNo.getText().trim()+"' ";
            }
            
            strSQL="SELECT DISTINCT A.VOUCHER_NO,B.PO_NO, B.INVOICE_NO " +//SUM(B.AMOUNT) AS AMOUNT
            "FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B " +
            "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND B.CANCELLED=0 " +
            "AND B.MAIN_ACCOUNT_CODE='"+txtMainCode.getText()+"' AND B.SUB_ACCOUNT_CODE='"+txtPartyCode.getText()+"' " +
            "AND (B.MATCHED=0 OR B.MATCHED IS NULL) AND B.EFFECT='C' " + Condition + " " +
            "GROUP BY A.VOUCHER_NO,B.PO_NO, B.INVOICE_NO " +
            "ORDER BY A.VOUCHER_NO,B.PO_NO, B.INVOICE_NO ";
            
            System.out.println(strSQL);
            
            ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsTmp.first();
            String MainCode = txtMainCode.getText().trim();
            String SubCode = txtPartyCode.getText().trim();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    
                    // Add by prath
                    String PJVNo = UtilFunctions.getString(rsTmp,"VOUCHER_NO","");
                    String PoNo = UtilFunctions.getString(rsTmp,"PO_NO","");
                    String InvoiceNo = UtilFunctions.getString(rsTmp,"INVOICE_NO","");
                    //double PJVAmount = UtilFunctions.getDouble(rsTmp, "AMOUNT", 0);
                    
                    String Qry ="SELECT A.COMPANY_ID,A.VOUCHER_NO,A.VOUCHER_DATE,B.AMOUNT AS AMOUNT, " +
                    "B.GRN_NO,B.GRN_DATE,B.INVOICE_NO,B.INVOICE_DATE,B.MODULE_ID,B.PO_NO,B.PO_DATE " +
                    "FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO=B.VOUCHER_NO " +
                    "AND A.VOUCHER_NO = '"+PJVNo+"' AND B.MAIN_ACCOUNT_CODE='"+txtMainCode.getText()+"' " +
                    "AND B.SUB_ACCOUNT_CODE='"+txtPartyCode.getText()+"' AND A.CANCELLED=0 AND " + //AND A.APPROVED=1
                    "B.EFFECT='C' ";
                    
                    ResultSet rsPJV = data.getResult(Qry, FinanceGlobal.FinURL);
                    rsPJV.first();
                    
                    double PJVAmount = UtilFunctions.getDouble(rsPJV, "AMOUNT", 0);
                    
                    Qry ="SELECT SUM(B.AMOUNT) AS AMOUNT FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B " +
                    "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='"+txtMainCode.getText()+"' " +
                    "AND B.SUB_ACCOUNT_CODE='"+txtPartyCode.getText()+"' AND B.EFFECT='D' AND B.PO_NO = '"+PoNo+"' " +
                    "AND B.INVOICE_NO ='"+InvoiceNo+"' AND A.APPROVED=1 AND A.CANCELLED=0 " +
                    "ORDER BY VOUCHER_DATE ";
                    
                    double PaidAmount = data.getDoubleValueFromDB(Qry, FinanceGlobal.FinURL);
                    
                    if(PJVAmount == PaidAmount) {
                        data.Execute("UPDATE D_FIN_VOUCHER_HEADER SET CHANGED=1 WHERE VOUCHER_NO='"+PJVNo+"' ", FinanceGlobal.FinURL);
                        data.Execute("UPDATE D_FIN_VOUCHER_DETAIL SET MATCHED=1,MATCHED_DATE=CURDATE() WHERE VOUCHER_NO='"+PJVNo+"' AND MAIN_ACCOUNT_CODE='"+MainCode+"' AND SUB_ACCOUNT_CODE='"+SubCode+"' ", FinanceGlobal.FinURL);
                        data.Execute("UPDATE D_FIN_VOUCHER_DETAIL_H SET MATCHED=1,MATCHED_DATE=CURDATE() WHERE VOUCHER_NO='"+PJVNo+"' AND MAIN_ACCOUNT_CODE='"+MainCode+"' AND SUB_ACCOUNT_CODE='"+SubCode+"' ", FinanceGlobal.FinURL);
                        data.Execute("UPDATE D_FIN_VOUCHER_DETAIL_EX SET MATCHED=1,MATCHED_DATE=CURDATE() WHERE VOUCHER_NO='"+PJVNo+"' AND MAIN_ACCOUNT_CODE='"+MainCode+"' AND SUB_ACCOUNT_CODE='"+SubCode+"' ", FinanceGlobal.FinURL);
                        rsTmp.next();
                        continue;
                    }
                    
                    //if (PJVAmount!=PaidAmount) { change by mrugesh 25-06-2010
                    if (PJVAmount>PaidAmount) {
                        // Stop add by prath
                        Object[] rowData=new Object[1];
                        DataModelPJV.addRow(rowData);
                        
                        int NewIndex=TablePJV.getRowCount()-1;
                        
                        DataModelPJV.setValueByVariable("SR_NO",Integer.toString(NewIndex+1), NewIndex);
                        DataModelPJV.setValueByVariable("PJV_NO",PJVNo, NewIndex);
                        DataModelPJV.setValueByVariable("PJV_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsPJV,"VOUCHER_DATE","0000-00-00")), NewIndex);
                        DataModelPJV.setValueByVariable("AMOUNT",Double.toString(PJVAmount), NewIndex);
                        DataModelPJV.setValueByVariable("REMAINING_AMOUNT",Double.toString(PJVAmount-PaidAmount), NewIndex);
                        double UtilizedAmount = data.getDoubleValueFromDB("SELECT SUM(B.ADJUST_AMOUNT) FROM D_FIN_CR_ADJ_HEADER A, D_FIN_CR_ADJ_DETAIL B " +
                        "WHERE A.DOC_NO=B.DOC_NO AND B.PJV_NO='"+PJVNo+"' AND A.APPROVED=0 AND A.CANCELLED=0 " +
                        "AND A.DOC_NO<>"+thisDocNo+"' ",FinanceGlobal.FinURL);
                        DataModelPJV.setValueByVariable("UTILIZED_AMOUNT",Double.toString(UtilizedAmount), NewIndex);
                        DataModelPJV.setValueByVariable("GRN_NO",UtilFunctions.getString(rsPJV,"GRN_NO",""), NewIndex);
                        DataModelPJV.setValueByVariable("GRN_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsPJV,"GRN_DATE","0000-00-00")), NewIndex);
                        DataModelPJV.setValueByVariable("MODULE_NAME",clsModules.getModuleName(EITLERPGLOBAL.gCompanyID,UtilFunctions.getInt(rsPJV,"MODULE_ID",0)), NewIndex);
                        DataModelPJV.setValueByVariable("PO_NO",UtilFunctions.getString(rsPJV,"PO_NO",""), NewIndex);
                        DataModelPJV.setValueByVariable("PO_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsPJV,"PO_DATE","0000-00-00")), NewIndex);
                        DataModelPJV.setValueByVariable("MODULE_ID",Integer.toString(UtilFunctions.getInt(rsPJV,"MODULE_ID",0)), NewIndex);
                        DataModelPJV.setValueByVariable("INVOICE_NO",UtilFunctions.getString(rsPJV,"INVOICE_NO",""), NewIndex);
                        DataModelPJV.setValueByVariable("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsPJV,"INVOICE_DATE","0000-00-00")), NewIndex);
                        DataModelPJV.setValueByVariable("COMPANY_ID",Integer.toString(UtilFunctions.getInt(rsPJV,"COMPANY_ID",0)), NewIndex);
                    }
                    rsTmp.next();
                }
            }
        } catch(Exception e) {
        }
    }
    
    private void GenerateGridPayment() {
        try {
            
            HashMap List=new HashMap();
            
            FormatGridPayment();
            
            String PartyCode=txtPartyCode.getText();
            String strSQL="";
            
            strSQL = "SELECT A.COMPANY_ID,A.VOUCHER_NO,A.VOUCHER_DATE,B.SR_NO,B.INVOICE_NO,B.INVOICE_DATE, " +
            "SUM(B.AMOUNT) AS AMOUNT,B.PO_NO,B.PO_DATE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B " +
            "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 " +
            "AND B.INVOICE_NO='' AND B.MAIN_ACCOUNT_CODE='"+txtMainCode.getText()+"' " +
            "AND B.SUB_ACCOUNT_CODE='"+txtPartyCode.getText()+"' AND B.EFFECT='D' " +
            "AND B.GRN_NO='' " +
            "GROUP BY A.VOUCHER_NO " +
            "ORDER BY A.VOUCHER_DATE ";
            
            //            strSQL="SELECT A.COMPANY_ID,A.VOUCHER_NO,A.VOUCHER_DATE,B.SR_NO,B.INVOICE_NO,B.INVOICE_DATE,B.AMOUNT,B.PO_NO,B.PO_DATE " +
            //            "FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND " +
            //            "A.APPROVED=1 AND A.CANCELLED=0 AND B.INVOICE_NO='' AND B.MAIN_ACCOUNT_CODE='"+txtMainCode.getText()+"' " +
            //            "AND B.SUB_ACCOUNT_CODE='"+txtPartyCode.getText()+"' AND B.EFFECT='D' AND B.GRN_NO='' ORDER BY A.VOUCHER_DATE";
            System.out.println(strSQL);
            ResultSet rsTmp=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    
                    Object[] rowData=new Object[1];
                    DataModelPY.addRow(rowData);
                    
                    int NewIndex=TablePY.getRowCount()-1;
                    DataModelPY.setValueByVariable("SR_NO",Integer.toString(NewIndex+1), NewIndex);
                    DataModelPY.setValueByVariable("VOUCHER_NO",UtilFunctions.getString(rsTmp,"VOUCHER_NO",""), NewIndex);
                    DataModelPY.setValueByVariable("VOUCHER_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"VOUCHER_DATE","0000-00-00")), NewIndex);
                    DataModelPY.setValueByVariable("VOUCHER_SR_NO",Integer.toString(UtilFunctions.getInt(rsTmp,"SR_NO",0)), NewIndex);
                    DataModelPY.setValueByVariable("INVOICE_NO",UtilFunctions.getString(rsTmp,"INVOICE_NO",""), NewIndex);
                    DataModelPY.setValueByVariable("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"INVOICE_DATE","0000-00-00")), NewIndex);
                    DataModelPY.setValueByVariable("AMOUNT",Double.toString(UtilFunctions.getDouble(rsTmp,"AMOUNT",0)), NewIndex);
                    double UtilizedAmount = data.getDoubleValueFromDB("SELECT SUM(B.ADJUST_AMOUNT) FROM D_FIN_CR_ADJ_HEADER A, " +
                    "D_FIN_CR_ADJ_DETAIL B WHERE A.DOC_NO=B.DOC_NO AND B.VOUCHER_NO='"+UtilFunctions.getString(rsTmp,"VOUCHER_NO","")+"' " +
                    "AND A.APPROVED=0 AND A.CANCELLED=0 AND A.DOC_NO<>"+thisDocNo+"' ",FinanceGlobal.FinURL);
                    DataModelPY.setValueByVariable("UTILIZED_AMOUNT",Double.toString(UtilizedAmount), NewIndex);
                    DataModelPY.setValueByVariable("PO_NO",UtilFunctions.getString(rsTmp,"PO_NO",""), NewIndex);
                    DataModelPY.setValueByVariable("PO_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"PO_DATE","0000-00-00")), NewIndex);
                    DataModelPY.setValueByVariable("COMPANY_ID",Integer.toString(UtilFunctions.getInt(rsTmp,"COMPANY_ID",0)), NewIndex);
                    rsTmp.next();
                }
            }
        } catch(Exception e) {
        }
    }
    
    public boolean ShowDialog() {
        try {
            setSize(682,600);
            FormatGridPJV();
            FormatGridPayment();
            FormatGridAdj();
            Tab.setEnabledAt(0, true);
            Tab.setEnabledAt(1, false);
            Tab.setEnabledAt(2, false);
            Frame f=findParentFrame(this);
            
            aDialog=new JDialog(f,"Select Advance Payment",true);
            
            aDialog.getContentPane().add("Center",this);
            Dimension appletSize = this.getSize();
            aDialog.setSize(appletSize);
            aDialog.setResizable(false);
            
            //Place it to center of the screen
            Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
            aDialog.setLocation((int)(screenSize.width-appletSize.getWidth())/2,(int)(screenSize.height-appletSize.getHeight())/2);
            
            aDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
            aDialog.show();
        }
        catch(Exception e) {
        }
        return !Cancelled;
    }
    
    
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
    
    private boolean Validate() {
        try {
            if(TableAdj.getRowCount()<=0) {
                JOptionPane.showMessageDialog(null,"Please insert atleast one revord at adjustment teable.");
                return false;
            }
            
            for(int i=0;i<TableAdj.getRowCount();i++) {
                if(DataModelAdj.getValueByVariable("ADJ_AMOUNT",i).trim().equals("0")) {
                    JOptionPane.showMessageDialog(null,"Please insert amount at serial no. " + (i+1));
                    return false;
                }
            }
            
            double POInvoiceAmount = 0;
            double DebitAmount = Double.parseDouble(lblDebitAmount.getText().trim());
            double RemainingAmount = Double.parseDouble(DataModelPY.getValueByVariable("AMOUNT", TablePY.getSelectedRow()));
            double UtilizedAmount = Double.parseDouble(DataModelPY.getValueByVariable("UTILIZED_AMOUNT", TablePY.getSelectedRow()));
            RemainingAmount = RemainingAmount - UtilizedAmount;
            double AdjustedDebit = Math.abs(DebitAmount - RemainingAmount);
            double TableEnterAmount = 0;
            for(int i=0;i<TableAdj.getRowCount();i++) {
                TableEnterAmount += Double.parseDouble(DataModelAdj.getValueByVariable("ADJ_AMOUNT", i));
            }
            POInvoiceAmount = DebitAmount - AdjustedDebit - TableEnterAmount;
            if(POInvoiceAmount < 0) {
                JOptionPane.showMessageDialog(null,"Adjustment amount exceeding remaining debit amount.","Wrong Input",JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }catch(Exception e) {
            return false;
        }
        return true;
    }
    
    private void UpdateTotal() {
        DoNotEvaluate=true;
        //double EnterAmount  = Double.parseDouble(DataModelAdj.getValueByVariable("ADJ_AMOUNT",TableAdj.getSelectedRow()));
        double POInvoiceAmount = 0;
        double DebitAmount = Double.parseDouble(lblDebitAmount.getText().trim());
        double RemainingAmount = Double.parseDouble(DataModelPY.getValueByVariable("AMOUNT", TablePY.getSelectedRow()));
        double UtilizedAmount = Double.parseDouble(DataModelPY.getValueByVariable("UTILIZED_AMOUNT", TablePY.getSelectedRow()));
        RemainingAmount = RemainingAmount - UtilizedAmount;
        double AdjustedDebit = Math.abs(DebitAmount - RemainingAmount);
        double TableEnterAmount = 0;
        for(int i=0;i<TableAdj.getRowCount();i++) {
            TableEnterAmount += Double.parseDouble(DataModelAdj.getValueByVariable("ADJ_AMOUNT", i));
        }
        POInvoiceAmount = DebitAmount - AdjustedDebit - TableEnterAmount;
        if(POInvoiceAmount < 0) {
            JOptionPane.showMessageDialog(null,"Adjustment amount exceeding remaining debit amount.","Wrong Input",JOptionPane.ERROR_MESSAGE);
            DataModelAdj.setValueByVariable("ADJ_AMOUNT","0", TableAdj.getRowCount());
        } else {
            lblRemainingAmount.setText(Double.toString(EITLERPGLOBAL.round(POInvoiceAmount,2)));
        }
    }
    
    private void UpdateSrNo() {
        for(int i=0;i<TableAdj.getRowCount();i++) {
            DataModelAdj.setValueByVariable("SR_NO",Integer.toString(i+1), i+1);
        }
    }
}
