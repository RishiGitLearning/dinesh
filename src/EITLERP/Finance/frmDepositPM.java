/*
 * frmDepositPM.java
 *
 * Created on October 25, 2008, 1:23 PM
 */

package EITLERP.Finance;

/**
 *
 * @author  nitin
 */
/*<APPLET CODE=frmDepositPM.class HEIGHT=500 WIDTH=665></APPLET>*/

import javax.swing.*;
import java.awt.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import javax.swing.text.*;
import EITLERP.Utils.*;
import java.sql.*;
import java.net.*;
import EITLERP.*;


public class frmDepositPM extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsDepositPM objDepositPM;
    
    private boolean Updating=false;
    
    private String theDocNo="";
    
    private EITLTableModel DataModelA;
    private EITLTableModel DataModelHS;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    
    private int SelHierarchyID=0;
    private int lnFromID=0;
    private boolean IsGenerating=false;
    
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    public frmPendingApprovals frmPA;
    
    /** Creates new form frmDepositPM */
    public frmDepositPM() {
        
        setSize(668,505);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        GenerateCombos();
        
        objDepositPM=new clsDepositPM();
        
        SetMenuForRights();
        
        if(getName().equals("Link")) {
        }
        else {
            if(objDepositPM.LoadData(EITLERPGLOBAL.gCompanyID)) {
                objDepositPM.MoveFirst();
                DisplayData();
                SetMenuForRights();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+objDepositPM.LastError);
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        Header = new javax.swing.JTabbedPane();
        Panel1 = new javax.swing.JPanel();
        txtDocDate = new javax.swing.JTextField();
        lblDocDate = new javax.swing.JLabel();
        lblDocNo = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        txtReceiptNo = new javax.swing.JTextField();
        lblReceiptNo = new javax.swing.JLabel();
        lblRemarks = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        txtReceiptDate = new javax.swing.JTextField();
        lblEffectDate = new javax.swing.JLabel();
        txtEffectiveDate = new javax.swing.JTextField();
        cmdRemarksBig = new javax.swing.JButton();
        lblReceiptDate = new javax.swing.JLabel();
        cmdNext1 = new javax.swing.JButton();
        lblChequeNo = new javax.swing.JLabel();
        txtChequeNo = new javax.swing.JTextField();
        lblChequeDate = new javax.swing.JLabel();
        txtChequeDate = new javax.swing.JTextField();
        lblBookCode = new javax.swing.JLabel();
        txtBookCode = new javax.swing.JTextField();
        lblPrincipleAmount = new javax.swing.JLabel();
        txtPrincipleAmount = new javax.swing.JTextField();
        lblInterestRate = new javax.swing.JLabel();
        txtInterestRate = new javax.swing.JTextField();
        lblPaidTDS = new javax.swing.JLabel();
        txtPaidTDS = new javax.swing.JTextField();
        lblCurrentTDS = new javax.swing.JLabel();
        txtCurrentTDS = new javax.swing.JTextField();
        cmdGenerate = new javax.swing.JButton();
        lblNetPayableAmount = new javax.swing.JLabel();
        txtNetPayableAmount = new javax.swing.JTextField();
        lblBrokerage = new javax.swing.JLabel();
        txtBrokerage = new javax.swing.JTextField();
        lblCurrentInterest = new javax.swing.JLabel();
        txtInterestAmount = new javax.swing.JTextField();
        lblPaidInterest = new javax.swing.JLabel();
        txtPaidInterest = new javax.swing.JTextField();
        lblPartyCode = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        lblPartyName = new javax.swing.JLabel();
        txtPartyName = new javax.swing.JTextField();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdPrevious1 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 660, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText("DEPOSIT PREMATURITY");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 660, 25);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(5, 445, 650, 22);

        Panel1.setLayout(null);

        Panel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        txtDocDate.setName("PARTY_CODE");
        txtDocDate.setNextFocusableComponent(txtReceiptNo);
        txtDocDate.setEnabled(false);
        Panel1.add(txtDocDate);
        txtDocDate.setBounds(405, 20, 120, 19);

        lblDocDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDocDate.setText("Doc Date :");
        Panel1.add(lblDocDate);
        lblDocDate.setBounds(260, 20, 140, 15);

        lblDocNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDocNo.setText("Doc No :");
        Panel1.add(lblDocNo);
        lblDocNo.setBounds(10, 20, 120, 15);

        txtDocNo.setName("PARTY_ID");
        txtDocNo.setNextFocusableComponent(txtDocDate);
        txtDocNo.setEnabled(false);
        Panel1.add(txtDocNo);
        txtDocNo.setBounds(135, 18, 120, 19);

        txtReceiptNo.setName("PARTY_NAME");
        txtReceiptNo.setNextFocusableComponent(txtChequeNo);
        txtReceiptNo.setEnabled(false);
        txtReceiptNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtReceiptNoFocusLost(evt);
            }
        });
        txtReceiptNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtReceiptNoKeyPressed(evt);
            }
        });

        Panel1.add(txtReceiptNo);
        txtReceiptNo.setBounds(135, 50, 120, 19);

        lblReceiptNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblReceiptNo.setText("Receipt No :");
        Panel1.add(lblReceiptNo);
        lblReceiptNo.setBounds(10, 50, 120, 15);

        lblRemarks.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRemarks.setText("Remarks :");
        Panel1.add(lblRemarks);
        lblRemarks.setBounds(10, 290, 120, 15);

        txtRemarks.setName("DESCRIPTION");
        txtRemarks.setNextFocusableComponent(cmdRemarksBig);
        txtRemarks.setEnabled(false);
        Panel1.add(txtRemarks);
        txtRemarks.setBounds(135, 290, 365, 19);

        txtReceiptDate.setEditable(false);
        txtReceiptDate.setName("PARTY_CODE");
        txtReceiptDate.setEnabled(false);
        Panel1.add(txtReceiptDate);
        txtReceiptDate.setBounds(405, 50, 120, 19);

        lblEffectDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEffectDate.setText("Effective Date :");
        Panel1.add(lblEffectDate);
        lblEffectDate.setBounds(10, 140, 120, 15);

        txtEffectiveDate.setName("PARTY_CODE");
        txtEffectiveDate.setNextFocusableComponent(txtBookCode);
        txtEffectiveDate.setEnabled(false);
        Panel1.add(txtEffectiveDate);
        txtEffectiveDate.setBounds(135, 140, 120, 19);

        cmdRemarksBig.setText("...");
        cmdRemarksBig.setNextFocusableComponent(cmdNext1);
        cmdRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemarksBigActionPerformed(evt);
            }
        });

        Panel1.add(cmdRemarksBig);
        cmdRemarksBig.setBounds(510, 290, 33, 21);

        lblReceiptDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblReceiptDate.setText("Receipt Date :");
        Panel1.add(lblReceiptDate);
        lblReceiptDate.setBounds(260, 50, 140, 15);

        cmdNext1.setFont(new java.awt.Font("Tahoma", 1, 11));
        cmdNext1.setText("Next >>");
        cmdNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext1ActionPerformed(evt);
            }
        });

        Panel1.add(cmdNext1);
        cmdNext1.setBounds(536, 317, 100, 24);

        lblChequeNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblChequeNo.setText("Cheque No. :");
        Panel1.add(lblChequeNo);
        lblChequeNo.setBounds(10, 110, 120, 15);

        txtChequeNo.setName("PARTY_NAME");
        txtChequeNo.setNextFocusableComponent(txtChequeDate);
        txtChequeNo.setEnabled(false);
        Panel1.add(txtChequeNo);
        txtChequeNo.setBounds(135, 110, 120, 19);

        lblChequeDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblChequeDate.setText("Cheque Date :");
        Panel1.add(lblChequeDate);
        lblChequeDate.setBounds(260, 110, 140, 15);

        txtChequeDate.setName("PARTY_CODE");
        txtChequeDate.setNextFocusableComponent(txtEffectiveDate);
        txtChequeDate.setEnabled(false);
        Panel1.add(txtChequeDate);
        txtChequeDate.setBounds(405, 110, 120, 19);

        lblBookCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBookCode.setText("Book Code :");
        Panel1.add(lblBookCode);
        lblBookCode.setBounds(260, 140, 140, 15);

        txtBookCode.setName("PARTY_CODE");
        txtBookCode.setNextFocusableComponent(txtRemarks);
        txtBookCode.setEnabled(false);
        txtBookCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBookCodeKeyPressed(evt);
            }
        });

        Panel1.add(txtBookCode);
        txtBookCode.setBounds(405, 140, 120, 19);

        lblPrincipleAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPrincipleAmount.setText("Principle Amount :");
        Panel1.add(lblPrincipleAmount);
        lblPrincipleAmount.setBounds(10, 172, 120, 15);

        txtPrincipleAmount.setName("PARTY_CODE");
        txtPrincipleAmount.setNextFocusableComponent(txtBookCode);
        txtPrincipleAmount.setEnabled(false);
        Panel1.add(txtPrincipleAmount);
        txtPrincipleAmount.setBounds(135, 170, 120, 19);

        lblInterestRate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblInterestRate.setText("Interest Rate :");
        Panel1.add(lblInterestRate);
        lblInterestRate.setBounds(260, 170, 140, 15);

        txtInterestRate.setName("PARTY_CODE");
        txtInterestRate.setNextFocusableComponent(txtRemarks);
        txtInterestRate.setEnabled(false);
        Panel1.add(txtInterestRate);
        txtInterestRate.setBounds(405, 170, 120, 19);

        lblPaidTDS.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPaidTDS.setText("Paid TDS :");
        Panel1.add(lblPaidTDS);
        lblPaidTDS.setBounds(10, 200, 120, 15);

        txtPaidTDS.setName("PARTY_CODE");
        txtPaidTDS.setNextFocusableComponent(txtBookCode);
        txtPaidTDS.setEnabled(false);
        Panel1.add(txtPaidTDS);
        txtPaidTDS.setBounds(135, 200, 120, 19);

        lblCurrentTDS.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCurrentTDS.setText("Current TDS :");
        Panel1.add(lblCurrentTDS);
        lblCurrentTDS.setBounds(260, 202, 140, 15);

        txtCurrentTDS.setName("PARTY_CODE");
        txtCurrentTDS.setNextFocusableComponent(txtRemarks);
        txtCurrentTDS.setEnabled(false);
        Panel1.add(txtCurrentTDS);
        txtCurrentTDS.setBounds(405, 200, 120, 19);

        cmdGenerate.setFont(new java.awt.Font("Tahoma", 1, 11));
        cmdGenerate.setText("Generate");
        cmdGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGenerateActionPerformed(evt);
            }
        });

        Panel1.add(cmdGenerate);
        cmdGenerate.setBounds(535, 256, 103, 24);

        lblNetPayableAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblNetPayableAmount.setText("Net Payable Amount :");
        Panel1.add(lblNetPayableAmount);
        lblNetPayableAmount.setBounds(260, 260, 140, 15);

        txtNetPayableAmount.setName("PARTY_CODE");
        txtNetPayableAmount.setNextFocusableComponent(txtBookCode);
        txtNetPayableAmount.setEnabled(false);
        Panel1.add(txtNetPayableAmount);
        txtNetPayableAmount.setBounds(405, 260, 120, 19);

        lblBrokerage.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBrokerage.setText("Brokerage :");
        Panel1.add(lblBrokerage);
        lblBrokerage.setBounds(10, 230, 120, 15);

        txtBrokerage.setName("PARTY_CODE");
        txtBrokerage.setNextFocusableComponent(txtBookCode);
        txtBrokerage.setEnabled(false);
        Panel1.add(txtBrokerage);
        txtBrokerage.setBounds(135, 230, 120, 19);

        lblCurrentInterest.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCurrentInterest.setText("Interest Amount :");
        Panel1.add(lblCurrentInterest);
        lblCurrentInterest.setBounds(260, 232, 140, 15);

        txtInterestAmount.setName("PARTY_CODE");
        txtInterestAmount.setNextFocusableComponent(txtRemarks);
        txtInterestAmount.setEnabled(false);
        Panel1.add(txtInterestAmount);
        txtInterestAmount.setBounds(405, 230, 120, 19);

        lblPaidInterest.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPaidInterest.setText("Gross Interest :");
        Panel1.add(lblPaidInterest);
        lblPaidInterest.setBounds(10, 262, 120, 15);

        txtPaidInterest.setName("PARTY_CODE");
        txtPaidInterest.setNextFocusableComponent(txtBookCode);
        txtPaidInterest.setEnabled(false);
        Panel1.add(txtPaidInterest);
        txtPaidInterest.setBounds(135, 260, 120, 19);

        lblPartyCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPartyCode.setText("Party Code :");
        Panel1.add(lblPartyCode);
        lblPartyCode.setBounds(9, 80, 120, 15);

        txtPartyCode.setName("PARTY_NAME");
        txtPartyCode.setNextFocusableComponent(txtChequeDate);
        txtPartyCode.setEnabled(false);
        Panel1.add(txtPartyCode);
        txtPartyCode.setBounds(136, 80, 120, 19);

        lblPartyName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPartyName.setText("Party Name :");
        Panel1.add(lblPartyName);
        lblPartyName.setBounds(260, 82, 140, 15);

        txtPartyName.setName("PARTY_CODE");
        txtPartyName.setNextFocusableComponent(txtEffectiveDate);
        txtPartyName.setEnabled(false);
        Panel1.add(txtPartyName);
        txtPartyName.setBounds(406, 80, 234, 19);

        Header.addTab("Prematurity Details", Panel1);

        Tab2.setLayout(null);

        Tab2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel31.setText("Hierarchy :");
        Tab2.add(jLabel31);
        jLabel31.setBounds(25, 18, 55, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });

        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 14, 184, 24);

        jLabel32.setText("From :");
        Tab2.add(jLabel32);
        jLabel32.setBounds(47, 52, 35, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 50, 182, 19);

        jLabel35.setText("Remarks :");
        Tab2.add(jLabel35);
        jLabel35.setBounds(30, 82, 50, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 78, 468, 19);

        jLabel36.setText("Your Action :");
        Tab2.add(jLabel36);
        jLabel36.setBounds(17, 120, 65, 15);

        jPanel7.setLayout(null);

        jPanel7.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel7.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel7.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel7.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setEnabled(false);
        jPanel7.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel7);
        jPanel7.setBounds(88, 120, 182, 100);

        jLabel33.setText("Send To :");
        Tab2.add(jLabel33);
        jLabel33.setBounds(35, 232, 50, 15);

        cmbSendTo.setEnabled(false);
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(88, 228, 184, 24);

        jLabel34.setText("Remarks :");
        Tab2.add(jLabel34);
        jLabel34.setBounds(33, 262, 50, 15);

        txtToRemarks.setEnabled(false);
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 260, 516, 19);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(559, 77, 33, 21);

        cmdPrevious1.setFont(new java.awt.Font("Tahoma", 1, 11));
        cmdPrevious1.setText("<< Previous");
        cmdPrevious1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrevious1ActionPerformed(evt);
            }
        });

        Tab2.add(cmdPrevious1);
        cmdPrevious1.setBounds(500, 310, 110, 24);

        Header.addTab("Approval", Tab2);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel26.setText("Document Approval Status");
        jPanel6.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 14);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel6.add(jScrollPane2);
        jScrollPane2.setBounds(12, 30, 614, 130);

        lblDocumentHistory.setFont(new java.awt.Font("Tahoma", 1, 11));
        lblDocumentHistory.setText("Document Update History");
        jPanel6.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 170, 182, 14);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel6.add(jScrollPane3);
        jScrollPane3.setBounds(13, 190, 473, 130);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        jPanel6.add(cmdViewHistory);
        cmdViewHistory.setBounds(500, 220, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        jPanel6.add(cmdNormalView);
        cmdNormalView.setBounds(500, 250, 132, 24);

        cmdPreviewA.setText("Preview Report");
        jPanel6.add(cmdPreviewA);
        cmdPreviewA.setBounds(500, 190, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        jPanel6.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(500, 280, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel6.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(500, 310, 129, 19);

        Header.addTab("Status", jPanel6);

        getContentPane().add(Header);
        Header.setBounds(2, 66, 654, 375);
        Header.getAccessibleContext().setAccessibleName("Prematurity Details");
        Header.getAccessibleContext().setAccessibleDescription("Prematurity Details");

    }//GEN-END:initComponents
    
    private void cmdGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGenerateActionPerformed
        // TODO add your handling code here:
        if(EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            if(txtEffectiveDate.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Please specify effective date in DD/MM/YYYY format.");
                return;
            } else if(!EITLERPGLOBAL.isDate(txtEffectiveDate.getText().trim())) {
                JOptionPane.showMessageDialog(null,"Please specify effective date in DD/MM/YYYY format.");
                return;
            }
            if(!txtReceiptNo.getText().trim().equals("")) {
                String ReceiptNo = txtReceiptNo.getText().trim();
                String PMDate = EITLERPGLOBAL.formatDateDB(txtEffectiveDate.getText().trim());
                double principleAmount = 0.0;
                double PaidTDS = 0.0;
                double currentTDS = 0.0;
                double brokerage = 0.0;
                double interestAmount = 0.0;
                double PaidInterest = 0.0;
                double netPayableAmount = 0.0;
                String StartFinYear = Integer.toString(EITLERPGLOBAL.getCurrentFinYear())+"-04-01";
                String EndFinYear = Integer.toString(EITLERPGLOBAL.getCurrentFinYear()+1)+"-03-31";
                if(data.IsRecordExist("SELECT * FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+ReceiptNo+"' AND DEPOSIT_STATUS=0",FinanceGlobal.FinURL)) {
                    //get PartyCode & Name
                    String PartyCode = data.getStringValueFromDB("SELECT PARTY_CODE FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+ReceiptNo+"' ",FinanceGlobal.FinURL);
                    txtPartyCode.setText(PartyCode);
                    txtPartyName.setText(data.getStringValueFromDB("SELECT APPLICANT_NAME FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+ReceiptNo+"' AND PARTY_CODE='"+PartyCode+"' ",FinanceGlobal.FinURL));
                    
                    // Principle Amount & Interest rate at prematurity
                    principleAmount = data.getDoubleValueFromDB("SELECT AMOUNT FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+ReceiptNo+"'",FinanceGlobal.FinURL);
                    txtPrincipleAmount.setText(Double.toString(principleAmount));
                    txtInterestRate.setText(Double.toString(data.getDoubleValueFromDB("SELECT INTEREST_RATE FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+ReceiptNo+"' ",FinanceGlobal.FinURL)));
                    //------------------------------------------------
                    
                    // TDS Paid before prematurity
                    String SchemeID = data.getStringValueFromDB("SELECT SCHEME_ID FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+ReceiptNo+"' ",FinanceGlobal.FinURL);
                    int SchemeType = data.getIntValueFromDB("SELECT SCHEME_TYPE FROM D_FD_SCHEME_MASTER WHERE SCHEME_ID='"+SchemeID+"' ",FinanceGlobal.FinURL);
                    if(SchemeType==3) {
                      try{
                          String strSQL="SELECT TDS_AMOUNT FROM FINANCE.D_FD_INT_CALC_DETAIL WHERE RECEIPT_NO='"+ReceiptNo+"' AND WARRANT_DATE<'"+StartFinYear+"'";                       
                          ResultSet rsTmp = data.getResult(strSQL);
                         //ResultSet rsTmp=data.getResult("SELECT TDS_AMOUNT FROM FINANCE.D_FD_INT_CALC_DETAIL WHERE RECEIPT_NO='"+ReceiptNo+"' AND WARRANT_DATE<"+StartFinYear+"'",FinanceGlobal.FinURL);
                         rsTmp.first();
                         if(rsTmp.getRow()>0){
                             while(!rsTmp.isAfterLast()){
                             PaidTDS+=rsTmp.getDouble("TDS_AMOUNT");
                             rsTmp.next();
                         }                             
                         }                                               
                        }
                        catch(Exception e){
                          e.printStackTrace();  
                        }
                    
                    //    PaidTDS = data.getDoubleValueFromDB("SELECT SUM(TDS_AMOUNT) AS TOTAL FROM D_FD_INT_CALC_DETAIL WHERE RECEIPT_NO='"+ReceiptNo+"' AND WARRANT_DATE<"+StartFinYear+"' ",FinanceGlobal.FinURL);
                    } else {
                        PaidTDS = data.getDoubleValueFromDB("SELECT SUM(TDS_AMOUNT) AS TOTAL FROM D_FD_INT_CALC_DETAIL WHERE RECEIPT_NO='"+ReceiptNo+"' ",FinanceGlobal.FinURL);
                    }
                    txtPaidTDS.setText(Double.toString(PaidTDS));
                    //---------------------------
                    
                    //current TDS at prematurity
                    if(!data.IsRecordExist("SELECT PARTY_CODE FROM D_FD_TAX_FORM_RECEIVED WHERE PARTY_CODE='"+PartyCode+"' AND RECEIVED_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND RECEIVED_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' ",FinanceGlobal.FinURL)) {
                    //if(data.getIntValueFromDB("SELECT TAX_EX_FORM_RECEIVED FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+ReceiptNo+"' ",FinanceGlobal.FinURL) == 0) {
                        double partyInterest = clsDepositPM.checkTDSAmount(PartyCode, ReceiptNo );
                        double currentInterest = clsDepositPM.getCurrentInterest(ReceiptNo, PMDate);
                        partyInterest += currentInterest;
                        if(partyInterest > 5000.0) {
                            currentTDS = clsDepositMaster.calculateTDSAmount(currentInterest);
                        }
                    }
                    txtCurrentTDS.setText(Double.toString(currentTDS));
                    //--------------------------
                    
                    // Brokerage is calculated for (1.)renewed FD & CD  (2.)LD Fresh & Renewed
                    int DepositEntryType = data.getIntValueFromDB("SELECT DEPOSIT_ENTRY_TYPE FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+ReceiptNo+"' ",FinanceGlobal.FinURL);
                    if(DepositEntryType ==2) { // CHECK WHETHER DEPOSIT IS RENEWED (FD OR LD) OR NOT 
                        String BrokerCode = data.getStringValueFromDB("SELECT BROKER_CODE FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+ReceiptNo+"' ",FinanceGlobal.FinURL);
                        if(!BrokerCode.equals("")) {
                            brokerage = clsDepositPM.calculateBrokerage(ReceiptNo, PMDate, principleAmount);
                        }
                    } else {
                        if(SchemeType == 2) {
                            String BrokerCode = data.getStringValueFromDB("SELECT BROKER_CODE FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+ReceiptNo+"' ",FinanceGlobal.FinURL);
                            if(!BrokerCode.equals("")) {
                                brokerage = clsDepositPM.calculateBrokerage(ReceiptNo, PMDate, principleAmount);
                            }
                        }
                    }
                    txtBrokerage.setText(Double.toString(brokerage));
                    //----------------------------------------------------------------
                    
                    // Interest Amount from Effective date of deposit to PM Date of deposit
                    interestAmount = clsDepositPM.calculateInterest(ReceiptNo,PMDate);
                    txtInterestAmount.setText(Double.toString(interestAmount));
                    //--------------------------------------------------------------------
                    
                    // Paid Gross Interest for FD / LD before prematurity
                    if(SchemeType != 3) {
                        //PaidInterest = data.getDoubleValueFromDB("SELECT SUM(INTEREST_AMOUNT) AS TOTAL FROM D_FD_INT_CALC_DETAIL WHERE RECEIPT_NO='"+ReceiptNo+"' ",FinanceGlobal.FinURL);
                        PaidInterest = data.getDoubleValueFromDB("SELECT IF(SUM(B.INTEREST_AMOUNT) IS NULL,0,SUM(B.INTEREST_AMOUNT)) AS TOTAL " +
                        "FROM D_FD_INT_CALC_HEADER A, D_FD_INT_CALC_DETAIL B WHERE A.DOC_NO=B.DOC_NO AND B.RECEIPT_NO='"+ReceiptNo+"' AND A.APPROVED=1 AND A.CANCELLED=0 ",FinanceGlobal.FinURL);
                    } else {
                        PaidInterest = data.getDoubleValueFromDB("SELECT SUM(A.INTEREST_AMOUNT) AS TOTAL FROM D_FD_INT_CALC_DETAIL A, D_FD_INT_CALC_HEADER B WHERE A.RECEIPT_NO='"+ReceiptNo+"' AND A.WARRANT_DATE<'"+StartFinYear+"' AND A.DOC_NO=B.DOC_NO AND B.TDS_ONLY=0",FinanceGlobal.FinURL);
                    }
                    txtPaidInterest.setText(Double.toString(PaidInterest));
                    //---------------------------------------------
                    
                    // Calculate Net Payable Amount at prematurity
                    int DepositTypeID = data.getIntValueFromDB("SELECT DEPOSIT_TYPE_ID FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+ReceiptNo+"' ",FinanceGlobal.FinURL);
                    netPayableAmount = principleAmount;
                    if(DepositTypeID==1) {
                        if(interestAmount > PaidInterest) {
                            interestAmount = interestAmount - PaidInterest;
                            netPayableAmount = netPayableAmount + interestAmount;
                            //netPayableAmount = netPayableAmount - PaidTDS;
                            netPayableAmount = netPayableAmount - currentTDS;
                            netPayableAmount = netPayableAmount - brokerage;
                        } else {
                            PaidInterest = PaidInterest - interestAmount;
                            netPayableAmount = netPayableAmount - PaidInterest;
                            //netPayableAmount = netPayableAmount - PaidTDS;
                            netPayableAmount = netPayableAmount - currentTDS;
                            netPayableAmount = netPayableAmount - brokerage;
                        }
                    } else if(DepositTypeID == 2) {
                        if(interestAmount > PaidInterest) {
                            interestAmount = interestAmount - PaidInterest;
                            netPayableAmount = netPayableAmount + interestAmount + PaidInterest;
                            netPayableAmount = netPayableAmount - PaidTDS;
                            netPayableAmount = netPayableAmount - currentTDS;
                            netPayableAmount = netPayableAmount - brokerage;
                        } else {
                            interestAmount = PaidInterest - interestAmount;                    
                            netPayableAmount = netPayableAmount + PaidInterest - interestAmount;
                            netPayableAmount = netPayableAmount - PaidTDS;
                            netPayableAmount = netPayableAmount - currentTDS;
                            netPayableAmount = netPayableAmount - brokerage;
                        }
                    }
                    txtNetPayableAmount.setText(Double.toString(EITLERPGLOBAL.round(netPayableAmount,2)));
                    //-------------------
                } else {
                    JOptionPane.showMessageDialog(null,"Please varify Receipt No.");
                    return;
                }
            } else {
                txtPrincipleAmount.setText("");
                txtInterestRate.setText("");
                txtPaidTDS.setText("");
                txtCurrentTDS.setText("");
                txtBrokerage.setText("");
                txtInterestAmount.setText("");
                txtPaidInterest.setText("");
                txtNetPayableAmount.setText("");
            }
        }
    }//GEN-LAST:event_cmdGenerateActionPerformed
    
    private void txtBookCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBookCodeKeyPressed
        // TODO add your handling code here:
        if(EditMode==EITLERPGLOBAL.ADD || EditMode==EITLERPGLOBAL.EDIT) {
            if(evt.getKeyCode() == 112) {
                LOV aList=new LOV();
                
                aList.SQL="SELECT BOOK_CODE, MAIN_ACCOUNT_CODE, BOOK_NAME AS BANK_NAME FROM D_FIN_BOOK_MASTER WHERE MAIN_ACCOUNT_CODE<>'' ORDER BY MAIN_ACCOUNT_CODE";
                aList.ReturnCol=1;
                aList.SecondCol=2;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=FinanceGlobal.FinURL;
                
                if(aList.ShowLOV()) {
                    txtBookCode.setText(aList.ReturnVal);
                }
            }
        }
    }//GEN-LAST:event_txtBookCodeKeyPressed
    
    private void cmdPrevious1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrevious1ActionPerformed
        // TODO add your handling code here:
        Header.setSelectedIndex(0);
    }//GEN-LAST:event_cmdPrevious1ActionPerformed
    
    private void cmdNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext1ActionPerformed
        // TODO add your handling code here:
        Header.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext1ActionPerformed
    
    private void txtReceiptNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtReceiptNoFocusLost
        // TODO add your handling code here:
        if(!txtReceiptNo.getText().trim().equals("")) {
            txtReceiptDate.setText(EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT RECEIPT_DATE FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+txtReceiptNo.getText()+"' ",FinanceGlobal.FinURL)));
        }
    }//GEN-LAST:event_txtReceiptNoFocusLost
    
    private void cmdRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdRemarksBigActionPerformed
    
    private void txtReceiptNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtReceiptNoKeyPressed
        // TODO add your handling code here:
        try {
            
            if(evt.getKeyCode()==112) {
                LOV aList=new LOV();
                
                aList.SQL="SELECT RECEIPT_NO,RECEIPT_DATE FROM D_FD_DEPOSIT_MASTER WHERE DEPOSIT_STATUS=0 AND MATURITY_DATE > "+ EITLERPGLOBAL.getCurrentDateDB() +" ORDER BY RECEIPT_NO";
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=FinanceGlobal.FinURL;
                
                if(aList.ShowLOV()) {
                    txtReceiptNo.setText(aList.ReturnVal);
                    txtReceiptDate.setText(EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT RECEIPT_DATE FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+aList.ReturnVal+"'",FinanceGlobal.FinURL)));
                }
            }
        }
        catch(Exception e) {
        }
    }//GEN-LAST:event_txtReceiptNoKeyPressed
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        objDepositPM.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveFirst();
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        objDepositPM.ShowHistory(EITLERPGLOBAL.gCompanyID, objDepositPM.getAttribute("DOC_NO").getString());
        MoveFirst();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
        
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if(ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID,clsDepositPM.ModuleID , objDepositPM.getAttribute("DOC_NO").getString())) {
                cmbSendTo.setEnabled(true);
            }
            else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateFromCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        objDepositPM.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            //Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Header;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel Panel1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdGenerate;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrevious1;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemarksBig;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblBookCode;
    private javax.swing.JLabel lblBrokerage;
    private javax.swing.JLabel lblChequeDate;
    private javax.swing.JLabel lblChequeNo;
    private javax.swing.JLabel lblCurrentInterest;
    private javax.swing.JLabel lblCurrentTDS;
    private javax.swing.JLabel lblDocDate;
    private javax.swing.JLabel lblDocNo;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblEffectDate;
    private javax.swing.JLabel lblInterestRate;
    private javax.swing.JLabel lblNetPayableAmount;
    private javax.swing.JLabel lblPaidInterest;
    private javax.swing.JLabel lblPaidTDS;
    private javax.swing.JLabel lblPartyCode;
    private javax.swing.JLabel lblPartyName;
    private javax.swing.JLabel lblPrincipleAmount;
    private javax.swing.JLabel lblReceiptDate;
    private javax.swing.JLabel lblReceiptNo;
    private javax.swing.JLabel lblRemarks;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtBookCode;
    private javax.swing.JTextField txtBrokerage;
    private javax.swing.JTextField txtChequeDate;
    private javax.swing.JTextField txtChequeNo;
    private javax.swing.JTextField txtCurrentTDS;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtEffectiveDate;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtInterestAmount;
    private javax.swing.JTextField txtInterestRate;
    private javax.swing.JTextField txtNetPayableAmount;
    private javax.swing.JTextField txtPaidInterest;
    private javax.swing.JTextField txtPaidTDS;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtPartyName;
    private javax.swing.JTextField txtPrincipleAmount;
    private javax.swing.JTextField txtReceiptDate;
    private javax.swing.JTextField txtReceiptNo;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    private void SetFields(boolean pStat) {
        
        //txtDocNo.setEnabled(pStat);
        //txtDocDate.setEnabled(pStat);
        cmdGenerate.setEnabled(pStat);
        txtEffectiveDate.setEnabled(pStat);
        txtReceiptNo.setEnabled(pStat);
        txtChequeNo.setEnabled(pStat);
        txtChequeDate.setEnabled(pStat);
        txtBookCode.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
    }
    
    private void ClearFields() {
        
        txtDocNo.setText("");
        txtDocDate.setText("");
        txtReceiptNo.setText("");
        txtReceiptDate.setText("");
        txtPartyCode.setText("");
        txtPartyName.setText("");
        txtChequeNo.setText("");
        txtChequeDate.setText("");
        txtBookCode.setText("");
        txtEffectiveDate.setText("");
        txtPrincipleAmount.setText("");
        txtInterestRate.setText("");
        txtPaidTDS.setText("");
        txtCurrentTDS.setText("");
        txtBrokerage.setText("");
        txtInterestAmount.setText("");
        txtPaidInterest.setText("");
        txtNetPayableAmount.setText("");
        txtRemarks.setText("");
        
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                if(objDepositPM.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(objDepositPM.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(objDepositPM.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
        }
        catch(Exception c) {
        }
        //============================================//
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=clsDepositPM.ModuleID;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        ClearFields();
        
        txtDocNo.setText(objDepositPM.getAttribute("DOC_NO").getString());
        txtDocDate.setText(EITLERPGLOBAL.formatDate(objDepositPM.getAttribute("DOC_DATE").getString()));
        txtReceiptNo.setText(objDepositPM.getAttribute("RECEIPT_NO").getString());
        txtReceiptDate.setText(EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT RECEIPT_DATE FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+txtReceiptNo.getText()+"'",FinanceGlobal.FinURL)));
        txtPartyCode.setText(objDepositPM.getAttribute("PARTY_CODE").getString());
        txtPartyName.setText(data.getStringValueFromDB("SELECT APPLICANT_NAME FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+txtReceiptNo.getText().trim()+"' AND PARTY_CODE='"+txtPartyCode.getText().trim()+"' ",FinanceGlobal.FinURL));
        txtChequeNo.setText(objDepositPM.getAttribute("CHEQUE_NO").getString());
        txtChequeDate.setText(EITLERPGLOBAL.formatDate(objDepositPM.getAttribute("CHEQUE_DATE").getString()));
        txtBookCode.setText(objDepositPM.getAttribute("BOOK_CODE").getString());
        txtEffectiveDate.setText(EITLERPGLOBAL.formatDate(objDepositPM.getAttribute("EFFECTIVE_DATE").getString()));
        txtPrincipleAmount.setText(Double.toString(objDepositPM.getAttribute("PRINCIPLE_AMOUNT").getDouble()));
        txtInterestRate.setText(Double.toString(objDepositPM.getAttribute("INTEREST_RATE").getDouble()));
        txtPaidTDS.setText(Double.toString(objDepositPM.getAttribute("PAID_TDS").getDouble()));
        txtCurrentTDS.setText(Double.toString(objDepositPM.getAttribute("CURRENT_TDS").getDouble()));
        txtBrokerage.setText(Double.toString(objDepositPM.getAttribute("BROKERAGE").getDouble()));
        txtInterestAmount.setText(Double.toString(objDepositPM.getAttribute("INTEREST_AMOUNT").getDouble()));
        txtPaidInterest.setText(Double.toString(objDepositPM.getAttribute("PAID_INTEREST").getDouble()));
        txtNetPayableAmount.setText(Double.toString(objDepositPM.getAttribute("NET_PAYABLE_AMOUNT").getDouble()));
        txtRemarks.setText(objDepositPM.getAttribute("REMARKS").getString());
        
        
        //************ Misc. Display *****************//
        txtToRemarks.setText("");
        
        SetupApproval();
        
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,objDepositPM.getAttribute("HIERARCHY_ID").getInt());
        
        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List=new HashMap();
        String DocNo=objDepositPM.getAttribute("DOC_NO").getString();
        List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, clsDepositPM.ModuleID , DocNo);
        for(int i=1;i<=List.size();i++) {
            clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
            Object[] rowData=new Object[7];
            
            rowData[0]=Integer.toString(i);
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
            rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
            rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
            rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
            rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
            rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
            
            DataModelA.addRow(rowData);
        }
        //============================================================//
        
        
        //=========================== Audit Trail ===========================//
        FormatGridHS();
        
        HashMap History=clsDepositPM.getHistoryList(EITLERPGLOBAL.gCompanyID, objDepositPM.getAttribute("DOC_NO").getString());
        for(int i=1;i<=History.size();i++) {
            clsDepositPM ObjHistory=(clsDepositPM)History.get(Integer.toString(i));
            Object[] rowData=new Object[5];
            
            rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
            rowData[1]=ObjHistory.getAttribute("UPDATED_BY").getString();
            rowData[2]=ObjHistory.getAttribute("ENTRY_DATE").getString();
            
            String ApprovalStatus="";
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus="Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus="Final Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus="Waiting";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus="Rejected";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus="Pending";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus="Skiped";
            }
            
            rowData[3]=ApprovalStatus;
            rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
            
            DataModelHS.addRow(rowData);
        }
        //=========================== Audit Trail Over ===========================//
    }
    
    //Sets data to the Class Object
    private void SetData() {
        objDepositPM.setAttribute("FFNO",FFNo);
        objDepositPM.setAttribute("DOC_NO",txtDocNo.getText());
        objDepositPM.setAttribute("DOC_DATE",txtDocDate.getText());
        
        objDepositPM.setAttribute("RECEIPT_NO",txtReceiptNo.getText().trim());
        objDepositPM.setAttribute("PARTY_CODE",txtPartyCode.getText().trim());
        objDepositPM.setAttribute("CHEQUE_NO",txtChequeNo.getText().trim());
        objDepositPM.setAttribute("CHEQUE_DATE",txtChequeDate.getText().trim());
        objDepositPM.setAttribute("BOOK_CODE",txtBookCode.getText().trim());
        objDepositPM.setAttribute("EFFECTIVE_DATE",txtEffectiveDate.getText().trim());
        objDepositPM.setAttribute("PRINCIPLE_AMOUNT",Double.parseDouble(txtPrincipleAmount.getText()));
        objDepositPM.setAttribute("INTEREST_RATE",Double.parseDouble(txtInterestRate.getText()));
        objDepositPM.setAttribute("PAID_TDS",Double.parseDouble(txtPaidTDS.getText()));
        objDepositPM.setAttribute("CURRENT_TDS",Double.parseDouble(txtCurrentTDS.getText()));
        objDepositPM.setAttribute("BROKERAGE",Double.parseDouble(txtBrokerage.getText()));
        objDepositPM.setAttribute("INTEREST_AMOUNT",Double.parseDouble(txtInterestAmount.getText()));
        objDepositPM.setAttribute("PAID_INTEREST", Double.parseDouble(txtPaidInterest.getText()));
        objDepositPM.setAttribute("NET_PAYABLE_AMOUNT",Double.parseDouble(txtNetPayableAmount.getText()));
        objDepositPM.setAttribute("REMARKS",txtRemarks.getText());
        
        //----- Update Approval Specific Fields -----------//
        objDepositPM.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        objDepositPM.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        objDepositPM.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        objDepositPM.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            objDepositPM.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            objDepositPM.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            objDepositPM.setAttribute("APPROVAL_STATUS","R");
            objDepositPM.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            objDepositPM.setAttribute("APPROVAL_STATUS","H");
        }
    }
    
    private void SetMenuForRights() {
        
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10881)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10882)) {
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10883)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10884)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    private void Add() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        //Now Generate new document no.
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=clsDepositPM.ModuleID;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsDepositPM.ModuleID , FFNo,  false));
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
            txtReceiptNo.requestFocus();
            
            lblTitle.setText("DEPOSIT PREMATURITY - "+txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        String DocNo=objDepositPM.getAttribute("DOC_NO").getString();
        String lDocNo=DocNo;
        
        if(objDepositPM.IsEditable(EITLERPGLOBAL.gCompanyID, DocNo, EITLERPGLOBAL.gNewUserID)) {
            
            EITLERPGLOBAL.ChangeCursorToWait(this);
            
            EditMode=EITLERPGLOBAL.EDIT;
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            SetupApproval();
            //----------------//
            
            if(ApprovalFlow.IsCreator(clsDepositPM.ModuleID ,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10882)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            SetupApproval();
            DisableToolbar();
            txtReceiptNo.requestFocus();
            
            EITLERPGLOBAL.ChangeCursorToDefault(this);
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        if(objDepositPM.Delete(EITLERPGLOBAL.gNewUserID)) {
            MoveLast();
        }
    }
    
    private void Save() {
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        
        if(!Validate()) {
            return;
        }
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(objDepositPM.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+objDepositPM.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(objDepositPM.Update()) {
                //Nothing to do
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+objDepositPM.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
        
        try {
            frmPA.RefreshView();
        }catch(Exception e){
        }
    }
    
    private void Cancel() {
        ClearFields();
        MoveFirst();
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Finance.frmDepositPMFind",true);
        frmDepositPMFind ObjReturn= (frmDepositPMFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!objDepositPM.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveFirst();
        }
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objDepositPM.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objDepositPM.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objDepositPM.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objDepositPM.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    public void FindEx(int pCompanyID,String pDocNo) {
        objDepositPM.Filter(" WHERE COMPANY_ID="+pCompanyID+" AND DOC_NO='"+pDocNo+"' ",pCompanyID);
        objDepositPM.MoveFirst();
        DisplayData();
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
    }
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    private void SetupApproval() {
        
        /*if(cmbHierarchy.getItemCount()>1) {
            cmbHierarchy.setEnabled(true);
        }*/
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, clsDepositPM.ModuleID , objDepositPM.getAttribute("DOC_NO").getString());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,clsDepositPM.ModuleID ,FromUserID,objDepositPM.getAttribute("DOC_NO").getString());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, clsDepositPM.ModuleID ,objDepositPM.getAttribute("DOC_NO").getString());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e) {
        }
    }
    
    private void GenerateRejectedUserCombo() {
        HashMap List=new HashMap();
        HashMap DeptList=new HashMap();
        HashMap DeptUsers=new HashMap();
        
        //----- Generate cmbType ------- //
        cmbToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);
        
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            
            
            /// NEW CODE ///
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID,clsDepositPM.ModuleID , objDepositPM.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, clsDepositPM.ModuleID, objDepositPM.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt() , EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(( ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            }
            else {
                if((ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///
        }
        //------------------------------ //
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, clsDepositPM.ModuleID , objDepositPM.getAttribute("DOC_NO").getString());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
    }
    
    private void GenerateCombos() {
        try {
            //Generates Combo Boxes
            HashMap List=new HashMap();
            String strCondition="";
            ResultSet rsTmp;
            
            cmbHierarchyModel=new EITLComboModel();
            cmbHierarchy.removeAllItems();
            cmbHierarchy.setModel(cmbHierarchyModel);
            
            List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsDepositPM.ModuleID);
            
            if(EditMode==EITLERPGLOBAL.EDIT) {
                List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsDepositPM.ModuleID );
            }
            for(int i=1;i<=List.size();i++) {
                clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
                ComboData aData=new ComboData();
                aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
                aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
                cmbHierarchyModel.addElement(aData);
            }
        }
        catch(Exception e) {
        }
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Panel1.getComponentCount()-1;i++) {
            if(Panel1.getComponent(i).getName()!=null) {
                
                FieldName=Panel1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Panel1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//
    }
    
    private boolean Validate() {
        if(!txtReceiptNo.getText().trim().equals("")) {
            if(!data.IsRecordExist("SELECT * FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+txtReceiptNo.getText().trim()+"' ",FinanceGlobal.FinURL)) {
                JOptionPane.showMessageDialog(null,"Please enter valid Receipt No.");
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(null,"Please enter Receipt No.");
            return false;
        }
        
        if(!OpgReject.isSelected()) {
            String checkDate = txtEffectiveDate.getText().trim();
            int Result = clsVoucher.ValidateVoucherEntry(EditMode,EITLERPGLOBAL.formatDateDB(checkDate));
            if(Result==EITLERPGLOBAL.ADD) {
                JOptionPane.showMessageDialog(this,"Month is Closed. \nYou can not create voucher(s).");
                return false;
            } else if(Result==EITLERPGLOBAL.EDIT) {
                JOptionPane.showMessageDialog(this,"Month is Closed. \nYou can not Approve / Final Approve voucher(s).\n Either you have to cancel voucher or change voucher date.");
                return false;
            }
        }
        
        if(txtChequeNo.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter Cheque No.");
            return false;
        }
        
        if(txtChequeDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter Cheque Date.");
            return false;
        } else if(!EITLERPGLOBAL.isDate(txtChequeDate.getText().trim())) {
            JOptionPane.showMessageDialog(null,"Please enter Cheque Date in DD/MM/YYYY format.");
            return false;
        }
        
        if(txtBookCode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter Book Code.");
            return false;
        } else if(!data.IsRecordExist("SELECT * FROM D_FIN_BOOK_MASTER WHERE BOOK_CODE='"+txtBookCode.getText().trim()+"' ",FinanceGlobal.FinURL)) {
            JOptionPane.showMessageDialog(null,"Please enter valid Book Code.");
            return false;
        }
        
        
        if(txtEffectiveDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter Book Code.");
            return false;
        } else if(!EITLERPGLOBAL.isDate(txtEffectiveDate.getText().trim())) {
            JOptionPane.showMessageDialog(null,"Please enter Effective Date in DD/MM/YYYY format.");
            return false;
        }
        
        String ChequeDate = EITLERPGLOBAL.formatDateDB(txtChequeDate.getText().trim());
        String EffectiveDate = EITLERPGLOBAL.formatDateDB(txtEffectiveDate.getText().trim());
        if(java.sql.Date.valueOf(ChequeDate).before(java.sql.Date.valueOf(EffectiveDate))) {
            JOptionPane.showMessageDialog(null,"Cheque date should not before Effective Date(Prematurity Date).");
            return false;
        }
        
        double principleAmount = Double.parseDouble(txtPrincipleAmount.getText().trim());
        if(principleAmount <= 0.0) {
            JOptionPane.showMessageDialog(null,"Please generate Principle Amount.");
            return false;
        }
        
        double InterestRate = Double.parseDouble(txtInterestRate.getText().trim());
        if(InterestRate <= 0.0) {
            JOptionPane.showMessageDialog(null,"Please generate Interest Rate.");
            return false;
        }
        
        double netPayableAmount = Double.parseDouble(txtNetPayableAmount.getText().trim());
        if(netPayableAmount <= 0.0) {
            JOptionPane.showMessageDialog(null,"Please generate Net Payable Amount.");
            return false;
        }
        
        return true;
    }
}