/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP.Finance;

/**
 *
 * @author  nitin
 */
/*<APPLET CODE=frmInward.class HEIGHT=500 WIDTH=665></APPLET>*/

import javax.swing.*;
import java.awt.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import javax.swing.text.*;
import EITLERP.Utils.*;
import java.sql.*;
import java.net.*;
import EITLERP.*;


public class frmPolicyTargetMaster extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsPolicyTargetMaster objTargetMaster;
    
    private EITLTableModel DataModelPeriod;
    private EITLTableModel DataModelRate;
    private EITLTableModel DataModelSelection;
    
    private EITLComboModel cmbSelectionModel;
    
    private boolean Updating=false;
    
    private String theDocNo="";
    
    private boolean IsGenerating=false;
    
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    /** Creates new form frmTemplate */
    public frmPolicyTargetMaster() {
        
        setSize(890,605);
        initComponents();
        
        FormatPeriodRange();
        FormatRateRange();
        GenerateCombos();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        objTargetMaster=new clsPolicyTargetMaster();
        
        SetMenuForRights();
        
        if(getName().equals("Link")) {
            
        }
        else {
            
            if(objTargetMaster.LoadData(EITLERPGLOBAL.gCompanyID)) {
                objTargetMaster.MoveFirst();
                DisplayData();
                SetMenuForRights();
                SetFields(false);
                ShowMessage("Ready ........");
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+objTargetMaster.LastError);
            }
        }
        
        //DataModelPeriod.TableReadOnly(true);
        
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        txtAuditRemarks = new javax.swing.JTextField();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Header = new javax.swing.JTabbedPane();
        Panel1 = new javax.swing.JPanel();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jTextArea3 = new javax.swing.JTextArea();
        lblAccountCode2 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        lblAccountCode3 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtSeasonID = new javax.swing.JTextField();
        txtSeasonName = new javax.swing.JTextField();
        lblSubCode11 = new javax.swing.JLabel();
        lblSubCode12 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableRate = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablePeriod = new javax.swing.JTable();
        cmdAddDtl = new javax.swing.JButton();
        cmdAddPeriod = new javax.swing.JButton();
        cmdRemovePeriod = new javax.swing.JButton();
        cmdAddRate = new javax.swing.JButton();
        cmdRemoveRate = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        cmbPartySelection = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtRateFromDate = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtRateToDate = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        txtAuditRemarks.setEnabled(false);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 910, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText("TARGET MASTER");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 910, 25);

        Panel1.setLayout(null);

        Panel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Panel1MouseClicked(evt);
            }
        });

        Panel1.add(jTextArea2);
        jTextArea2.setBounds(177, 29, 0, 15);

        jPanel2.setLayout(null);

        jPanel2.add(jTextArea3);
        jTextArea3.setBounds(177, 29, 0, 15);

        lblAccountCode2.setText("Account Code");
        jPanel2.add(lblAccountCode2);
        lblAccountCode2.setBounds(15, 20, 90, 15);

        jPanel2.add(jTextField3);
        jTextField3.setBounds(119, 18, 80, 19);

        jPanel2.add(jTextField4);
        jTextField4.setBounds(119, 49, 80, 19);

        lblAccountCode3.setText("Account Code");
        jPanel2.add(lblAccountCode3);
        lblAccountCode3.setBounds(15, 51, 90, 15);

        Panel1.add(jPanel2);
        jPanel2.setBounds(0, 0, 0, 0);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Season ID");
        Panel1.add(jLabel13);
        jLabel13.setBounds(10, 105, 100, 15);

        txtSeasonID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSeasonIDFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSeasonIDFocusLost(evt);
            }
        });
        txtSeasonID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSeasonIDKeyPressed(evt);
            }
        });

        Panel1.add(txtSeasonID);
        txtSeasonID.setBounds(120, 105, 120, 19);

        txtSeasonName.setEditable(false);
        Panel1.add(txtSeasonName);
        txtSeasonName.setBounds(250, 105, 390, 19);

        lblSubCode11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSubCode11.setText("Period Range ( For Wholesaler )");
        lblSubCode11.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode11);
        lblSubCode11.setBounds(10, 80, 240, 15);

        lblSubCode12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSubCode12.setText("Ex Mill Rate Range ( For Retailer ) ");
        lblSubCode12.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Panel1.add(lblSubCode12);
        lblSubCode12.setBounds(10, 270, 230, 15);

        TableRate.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableRate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableRateKeyPressed(evt);
            }
        });

        jScrollPane1.setViewportView(TableRate);

        Panel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 320, 740, 120);

        TablePeriod.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablePeriod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TablePeriodKeyPressed(evt);
            }
        });

        jScrollPane2.setViewportView(TablePeriod);

        Panel1.add(jScrollPane2);
        jScrollPane2.setBounds(10, 130, 740, 120);

        cmdAddDtl.setFont(new java.awt.Font("Dialog", 0, 10));
        cmdAddDtl.setMnemonic('A');
        cmdAddDtl.setText("Add New");
        cmdAddDtl.setEnabled(false);
        Panel1.add(cmdAddDtl);
        cmdAddDtl.setBounds(700, 460, 80, 20);

        cmdAddPeriod.setMnemonic('A');
        cmdAddPeriod.setText("Add New");
        cmdAddPeriod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddPeriodActionPerformed(evt);
            }
        });

        Panel1.add(cmdAddPeriod);
        cmdAddPeriod.setBounds(760, 160, 100, 25);

        cmdRemovePeriod.setMnemonic('L');
        cmdRemovePeriod.setText("Remove");
        cmdRemovePeriod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemovePeriodActionPerformed(evt);
            }
        });

        Panel1.add(cmdRemovePeriod);
        cmdRemovePeriod.setBounds(760, 200, 100, 25);

        cmdAddRate.setMnemonic('A');
        cmdAddRate.setText("Add New");
        cmdAddRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddRateActionPerformed(evt);
            }
        });

        Panel1.add(cmdAddRate);
        cmdAddRate.setBounds(760, 350, 100, 25);

        cmdRemoveRate.setMnemonic('L');
        cmdRemoveRate.setText("Remove");
        cmdRemoveRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveRateActionPerformed(evt);
            }
        });

        Panel1.add(cmdRemoveRate);
        cmdRemoveRate.setBounds(760, 390, 100, 25);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Party Selection");
        Panel1.add(jLabel15);
        jLabel15.setBounds(10, 40, 100, 15);

        cmbPartySelection.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbPartySelectionFocusGained(evt);
            }
        });

        Panel1.add(cmbPartySelection);
        cmbPartySelection.setBounds(120, 40, 230, 24);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("Doc No");
        Panel1.add(jLabel14);
        jLabel14.setBounds(10, 10, 100, 15);

        txtDocNo.setEditable(false);
        Panel1.add(txtDocNo);
        txtDocNo.setBounds(120, 10, 120, 19);

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("From Date");
        Panel1.add(jLabel16);
        jLabel16.setBounds(10, 295, 100, 15);

        txtRateFromDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRateFromDateFocusGained(evt);
            }
        });

        Panel1.add(txtRateFromDate);
        txtRateFromDate.setBounds(120, 295, 120, 19);

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("To Date");
        Panel1.add(jLabel17);
        jLabel17.setBounds(270, 295, 100, 15);

        txtRateToDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRateToDateFocusGained(evt);
            }
        });

        Panel1.add(txtRateToDate);
        txtRateToDate.setBounds(380, 295, 120, 19);

        Header.addTab("Target Master", Panel1);

        getContentPane().add(Header);
        Header.setBounds(0, 70, 880, 470);
        Header.getAccessibleContext().setAccessibleName("Scheme Details");
        Header.getAccessibleContext().setAccessibleDescription("Scheme Details");

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 540, 900, 22);

    }//GEN-END:initComponents

    private void txtRateToDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRateToDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter From Date.");
    }//GEN-LAST:event_txtRateToDateFocusGained

    private void txtRateFromDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRateFromDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter From Date.");
    }//GEN-LAST:event_txtRateFromDateFocusGained

    private void txtSeasonIDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSeasonIDFocusGained
        // TODO add your handling code here:
        ShowMessage("Press F1..");
    }//GEN-LAST:event_txtSeasonIDFocusGained

    private void cmbPartySelectionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbPartySelectionFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Party Selection.");
    }//GEN-LAST:event_cmbPartySelectionFocusGained
    
    private void TableRateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableRateKeyPressed
        // TODO add your handling code here:
        try {
            
            if(evt.getKeyCode()==112) //F1 Key pressed
            {
                
                if(TableRate.getSelectedColumn()==DataModelRate.getColFromVariable("PARTY_ID")) {
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT PARTY_CODE,PARTY_NAME "+
                    " FROM D_FIN_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND MAIN_ACCOUNT_CODE IN ('210010','210027','210034','210072') "+
                    " ORDER BY PARTY_CODE ";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=2;
                    aList.UseSpecifiedConn=true;
                    aList.dbURL=FinanceGlobal.FinURL;
                    
                    if(aList.ShowLOV()) {
                        if(TableRate.getCellEditor()!=null) {
                            TableRate.getCellEditor().stopCellEditing();
                        }
                        TableRate.setValueAt(aList.ReturnVal, TableRate.getSelectedRow(),DataModelRate.getColFromVariable("PARTY_ID"));
                        String PartyName = clsPolicyMaster.getPartyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal);
                        TableRate.setValueAt(PartyName, TableRate.getSelectedRow(),DataModelRate.getColFromVariable("PARTY_NAME"));
                    }
                }
                
            }
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_TableRateKeyPressed
    
    private void TablePeriodKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TablePeriodKeyPressed
        // TODO add your handling code here:
        try {
            
            if(evt.getKeyCode()==112) //F1 Key pressed
            {
                
                if(TablePeriod.getSelectedColumn()==DataModelPeriod.getColFromVariable("PARTY_ID")) {
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT PARTY_CODE,PARTY_NAME "+
                    " FROM D_FIN_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND MAIN_ACCOUNT_CODE IN ('210010','210027','210034','210072') "+
                    " ORDER BY PARTY_CODE ";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=2;
                    aList.UseSpecifiedConn=true;
                    aList.dbURL=FinanceGlobal.FinURL;
                    
                    if(aList.ShowLOV()) {
                        if(TablePeriod.getCellEditor()!=null) {
                            TablePeriod.getCellEditor().stopCellEditing();
                        }
                        TablePeriod.setValueAt(aList.ReturnVal, TablePeriod.getSelectedRow(),DataModelPeriod.getColFromVariable("PARTY_ID"));
                        String PartyName = clsPolicyMaster.getPartyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal);
                        TablePeriod.setValueAt(PartyName, TablePeriod.getSelectedRow(),DataModelPeriod.getColFromVariable("PARTY_NAME"));
                    }
                }
                
            }
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_TablePeriodKeyPressed
    
    private void cmdRemoveRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveRateActionPerformed
        // TODO add your handling code here:
        try {
            if(TableRate.getRowCount()>0) {
                DataModelRate.removeRow(TableRate.getSelectedRow());
                UpdateSrNoRate();
            }
        }
        catch(Exception e) {
            
        }
    }
    
    private void UpdateSrNoRate() {
        int SrCol=DataModelRate.getColFromVariable("SR_NO");
        
        for(int i=0;i<TableRate.getRowCount();i++) {
            TableRate.setValueAt(Integer.toString(i+1), i, SrCol);
        }
    }//GEN-LAST:event_cmdRemoveRateActionPerformed
    
    private void cmdAddRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddRateActionPerformed
        // TODO add your handling code here:
        try {
            
            Updating=true;
            Object[] rowData=new Object[6];
            rowData[0]=Integer.toString(TableRate.getRowCount()+1);
            rowData[1]="";
            rowData[2]="";
            rowData[3]="";
            rowData[4]="";
            rowData[5]="";
            DataModelRate.addRow(rowData);
            
            if(TableRate.getRowCount()>1) {
                int NewRow=TableRate.getRowCount()-1;
                
                //Add Last Row References
                DataModelRate.setValueByVariable("FROM_RANGE",DataModelRate.getValueByVariable("FROM_RANGE", NewRow-1) ,NewRow);
                DataModelRate.setValueByVariable("TO_RANGE",DataModelRate.getValueByVariable("TO_RANGE", NewRow-1) ,NewRow);
                DataModelRate.setValueByVariable("EXMILLRATE_PERCENTAGE",DataModelRate.getValueByVariable("EXMILLRATE_PERCENTAGE", NewRow-1) ,NewRow);
                
            }
            Updating=false;
            
            
            TableRate.changeSelection(TableRate.getRowCount()-1, 1, false,false);
            TableRate.requestFocus();
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdAddRateActionPerformed
    
    private void cmdRemovePeriodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemovePeriodActionPerformed
        // TODO add your handling code here:
        try {
            if(TablePeriod.getRowCount()>0) {
                DataModelPeriod.removeRow(TablePeriod.getSelectedRow());
                UpdateSrNoPeriod();
            }
        }
        catch(Exception e) {
            
        }
    }
    
    private void UpdateSrNoPeriod() {
        int SrCol=DataModelPeriod.getColFromVariable("SR_NO");
        
        for(int i=0;i<TablePeriod.getRowCount();i++) {
            TablePeriod.setValueAt(Integer.toString(i+1), i, SrCol);
        }
    }//GEN-LAST:event_cmdRemovePeriodActionPerformed
    
    private void cmdAddPeriodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddPeriodActionPerformed
        // TODO add your handling code here:
        try {
            
            Updating=true;
            Object[] rowData=new Object[9];
            rowData[0]=Integer.toString(TablePeriod.getRowCount()+1);
            rowData[1]="";
            rowData[2]="";
            rowData[3]="";
            rowData[4]="";
            rowData[5]="";
            rowData[6]="";
            rowData[7]="";
            rowData[8]="";
            DataModelPeriod.addRow(rowData);
            
            if(TablePeriod.getRowCount()>1) {
                int NewRow=TablePeriod.getRowCount()-1;
                
                
                //Add Last Row References
                DataModelPeriod.setValueByVariable("PERIOD_FROM_DATE",DataModelPeriod.getValueByVariable("PERIOD_FROM_DATE", NewRow-1) ,NewRow);
                DataModelPeriod.setValueByVariable("PERIOD_TO_DATE",DataModelPeriod.getValueByVariable("PERIOD_TO_DATE", NewRow-1) ,NewRow);
                DataModelPeriod.setValueByVariable("AMOUNT",DataModelPeriod.getValueByVariable("AMOUNT", NewRow-1) ,NewRow);
                DataModelPeriod.setValueByVariable("METERS_FROM_DATE",DataModelPeriod.getValueByVariable("METERS_FROM_DATE", NewRow-1) ,NewRow);
                DataModelPeriod.setValueByVariable("METERS_TO_DATE",DataModelPeriod.getValueByVariable("METERS_TO_DATE", NewRow-1) ,NewRow);
                DataModelPeriod.setValueByVariable("METERS",DataModelPeriod.getValueByVariable("METERS", NewRow-1) ,NewRow);
                
            }
            Updating=false;
            
            
            TablePeriod.changeSelection(TablePeriod.getRowCount()-1, 1, false,false);
            TablePeriod.requestFocus();
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdAddPeriodActionPerformed
    
    private void txtSeasonIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSeasonIDFocusLost
        // TODO add your handling code here:
        if (! txtSeasonID.getText().trim().equals("")) {
            txtSeasonName.setText(clsPolicyMaster.getSeasonName(EITLERPGLOBAL.gCompanyID, txtSeasonID.getText()));
        }
    }//GEN-LAST:event_txtSeasonIDFocusLost
    
    private void txtSeasonIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSeasonIDKeyPressed
        // TODO add your handling code here:
        try {
            
            if(evt.getKeyCode()==112) {
                LOV aList=new LOV();
                
                aList.SQL="SELECT SEASON_ID,SEASON_NAME FROM D_SAL_SEASON_MASTER WHERE APPROVED = 1 AND CANCELLED=0 ORDER BY SEASON_ID";
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=EITLERPGLOBAL.DatabaseURL;
                
                if(aList.ShowLOV()) {
                    txtSeasonID.setText(aList.ReturnVal);
                    txtSeasonName.setText(clsPolicyMaster.getSeasonName(EITLERPGLOBAL.gCompanyID, txtSeasonID.getText()));
                }
                
            }
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_txtSeasonIDKeyPressed
    
    private void Panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Panel1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Panel1MouseClicked
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        objTargetMaster.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Header;
    private javax.swing.JPanel Panel1;
    private javax.swing.JTable TablePeriod;
    private javax.swing.JTable TableRate;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cmbPartySelection;
    private javax.swing.JButton cmdAddDtl;
    private javax.swing.JButton cmdAddPeriod;
    private javax.swing.JButton cmdAddRate;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemovePeriod;
    private javax.swing.JButton cmdRemoveRate;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdTop;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JLabel lblAccountCode2;
    private javax.swing.JLabel lblAccountCode3;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblSubCode11;
    private javax.swing.JLabel lblSubCode12;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtRateFromDate;
    private javax.swing.JTextField txtRateToDate;
    private javax.swing.JTextField txtSeasonID;
    private javax.swing.JTextField txtSeasonName;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    
    private void SetFields(boolean pStat) {
        txtSeasonID.setEnabled(pStat);
        cmbPartySelection.setEnabled(pStat);
        cmdAddPeriod.setEnabled(pStat);
        cmdRemovePeriod.setEnabled(pStat);
        cmdAddRate.setEnabled(pStat);
        cmdRemoveRate.setEnabled(pStat);
        TablePeriod.setEnabled(pStat);
        TableRate.setEnabled(pStat);
        txtDocNo.setEnabled(pStat);
        txtRateFromDate.setEnabled(pStat);
        txtRateToDate.setEnabled(pStat);
    }
    
    private void ClearFields() {
        txtSeasonID.setText("");
        txtSeasonName.setText("");
        txtRateFromDate.setText("");
        txtRateToDate.setText("");
        
        for(int i=0;i<TablePeriod.getRowCount();i++) {
            DataModelPeriod.setValueAt(Boolean.valueOf(false), i, 0);
        }
        
        FormatPeriodRange();
        
        for(int i=0;i<TableRate.getRowCount();i++) {
            DataModelRate.setValueAt(Boolean.valueOf(false), i, 0);
        }
        
        FormatRateRange();
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        
        try {
            //=========== Color Indication ===============//
            if(EditMode==0) {
                
                if(objTargetMaster.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
            //============================================//
        }
        catch(Exception e) {
            //System.out.println(e.getMessage());
        }
        
        ClearFields();
        
        txtDocNo.setText(objTargetMaster.getAttribute("DOC_NO").getString());
        txtSeasonID.setText(objTargetMaster.getAttribute("SEASON_ID").getString());
        txtSeasonName.setText(clsPolicyMaster.getSeasonName(EITLERPGLOBAL.gCompanyID,txtSeasonID.getText().trim()));
        txtRateFromDate.setText(objTargetMaster.getAttribute("RATE_FROM_DATE").getString());
        txtRateToDate.setText(objTargetMaster.getAttribute("RATE_TO_DATE").getString());
        
        EITLERPGLOBAL.setComboIndex(cmbPartySelection,objTargetMaster.getAttribute("PARTY_SELECTION_TYPE").getInt());
        
        lblTitle.setText("TARGET MASTER - " + txtDocNo.getText());
        
        FormatPeriodRange();
        //=========Now Generate Period Range Table====================//
        for(int i=1;i<=objTargetMaster.colPeriodRange.size();i++) {
            clsTargetPeriodRange ObjPeriod=(clsTargetPeriodRange)objTargetMaster.colPeriodRange.get(Integer.toString(i));
            Object[] rowData=new Object[1];
            DataModelPeriod.addRow(rowData);
            
            int NewRow=TablePeriod.getRowCount()-1;
            
            DataModelPeriod.setValueByVariable("SR_NO",Integer.toString(i), NewRow);
            DataModelPeriod.setValueByVariable("PARTY_ID",(String)ObjPeriod.getAttribute("PARTY_ID").getObj(),NewRow);
            String PartyName = clsPolicyMaster.getPartyName(EITLERPGLOBAL.gCompanyID, (String)ObjPeriod.getAttribute("PARTY_ID").getObj());
            DataModelPeriod.setValueByVariable("PARTY_NAME",PartyName,NewRow);
            DataModelPeriod.setValueByVariable("PERIOD_FROM_DATE",(String)ObjPeriod.getAttribute("PERIOD_FROM_DATE").getObj(),NewRow);
            DataModelPeriod.setValueByVariable("PERIOD_TO_DATE",(String)ObjPeriod.getAttribute("PERIOD_TO_DATE").getObj(),NewRow);
            DataModelPeriod.setValueByVariable("AMOUNT",Double.toString(ObjPeriod.getAttribute("PERIOD_AMOUNT").getVal()),NewRow);
            DataModelPeriod.setValueByVariable("METERS_FROM_DATE",(String)ObjPeriod.getAttribute("METERS_FROM_DATE").getObj(),NewRow);
            DataModelPeriod.setValueByVariable("METERS_TO_DATE",(String)ObjPeriod.getAttribute("METERS_TO_DATE").getObj(),NewRow);
            DataModelPeriod.setValueByVariable("METERS",Double.toString(ObjPeriod.getAttribute("METERS").getVal()),NewRow);
        }
        //===============================================//
        
        FormatRateRange();
        //=========Now Generate Period Range Table====================//
        for(int i=1;i<=objTargetMaster.colRateRange.size();i++) {
            clsTargetRateRange ObjPeriod=(clsTargetRateRange)objTargetMaster.colRateRange.get(Integer.toString(i));
            Object[] rowData=new Object[1];
            DataModelRate.addRow(rowData);
            
            int NewRow=TableRate.getRowCount()-1;
            
            DataModelRate.setValueByVariable("SR_NO",Integer.toString(i), NewRow);
            DataModelRate.setValueByVariable("PARTY_ID",(String)ObjPeriod.getAttribute("PARTY_ID").getObj(),NewRow);
            String PartyName = clsPolicyMaster.getPartyName(EITLERPGLOBAL.gCompanyID, (String)ObjPeriod.getAttribute("PARTY_ID").getObj());
            DataModelRate.setValueByVariable("PARTY_NAME",PartyName,NewRow);
            DataModelRate.setValueByVariable("FROM_RANGE",Double.toString(ObjPeriod.getAttribute("EXMILLRATE_FROM_RANGE").getVal()),NewRow);
            DataModelRate.setValueByVariable("TO_RANGE",Double.toString(ObjPeriod.getAttribute("EXMILLRATE_TO_RANGE").getVal()),NewRow);
            DataModelRate.setValueByVariable("EXMILLRATE_PERCENTAGE",Double.toString(ObjPeriod.getAttribute("EXMILLRATE_PERCENTAGE").getVal()),NewRow);
        }
        //===============================================//
        
    }
    
    //Sets data to the Class Object
    private void SetData() {
        
        objTargetMaster.setAttribute("PREFIX",SelPrefix);
        objTargetMaster.setAttribute("SUFFIX",SelSuffix);
        objTargetMaster.setAttribute("FFNO",FFNo);
        
        objTargetMaster.setAttribute("DOC_NO",txtDocNo.getText());
        objTargetMaster.setAttribute("SEASON_ID",txtSeasonID.getText());
        
        objTargetMaster.setAttribute("RATE_FROM_DATE",txtRateFromDate.getText());
        objTargetMaster.setAttribute("RATE_TO_DATE",txtRateToDate.getText());
        
        objTargetMaster.setAttribute("PARTY_SELECTION_TYPE",EITLERPGLOBAL.getComboCode(cmbPartySelection));
        
        //======= Set Line part ============
        objTargetMaster.colPeriodRange.clear();
        
        for(int i=0;i<TablePeriod.getRowCount();i++) {
            clsTargetPeriodRange objPeriod=new clsTargetPeriodRange();
            objPeriod.setAttribute("SR_NO",i+1);
            objPeriod.setAttribute("PARTY_ID",DataModelPeriod.getValueByVariable("PARTY_ID",i));
            objPeriod.setAttribute("PERIOD_FROM_DATE",DataModelPeriod.getValueByVariable("PERIOD_FROM_DATE",i));
            objPeriod.setAttribute("PERIOD_TO_DATE",DataModelPeriod.getValueByVariable("PERIOD_TO_DATE",i));
            objPeriod.setAttribute("PERIOD_AMOUNT",Double.parseDouble(DataModelPeriod.getValueByVariable("AMOUNT",i)));
            objPeriod.setAttribute("METERS_FROM_DATE",DataModelPeriod.getValueByVariable("METERS_FROM_DATE",i));
            objPeriod.setAttribute("METERS_TO_DATE",DataModelPeriod.getValueByVariable("METERS_TO_DATE",i));
            if (DataModelPeriod.getValueByVariable("METERS",i).trim().equals("")) {
                objPeriod.setAttribute("METERS",0);
            }
            else {
                objPeriod.setAttribute("METERS",Double.parseDouble(DataModelPeriod.getValueByVariable("METERS",i)));
            }
            
            objTargetMaster.colPeriodRange.put(Integer.toString(objTargetMaster.colPeriodRange.size()+1), objPeriod);
        }
        
        
        objTargetMaster.colRateRange.clear();
        
        for(int i=0;i<TableRate.getRowCount();i++) {
            clsTargetRateRange objRate=new clsTargetRateRange();
            objRate.setAttribute("SR_NO",i+1);
            objRate.setAttribute("PARTY_ID",DataModelRate.getValueByVariable("PARTY_ID",i));
            objRate.setAttribute("EXMILLRATE_FROM_RANGE",Double.parseDouble(DataModelRate.getValueByVariable("FROM_RANGE",i)));
            objRate.setAttribute("EXMILLRATE_TO_RANGE",Double.parseDouble(DataModelRate.getValueByVariable("TO_RANGE",i)));
            objRate.setAttribute("EXMILLRATE_PERCENTAGE",Double.parseDouble(DataModelRate.getValueByVariable("EXMILLRATE_PERCENTAGE",i)));
            
            objTargetMaster.colRateRange.put(Integer.toString(objTargetMaster.colRateRange.size()+1), objRate);
        }
    }
    
    
    private void SetMenuForRights() {
        
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11381)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        //if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11382)) {
        cmdEdit.setEnabled(true);
        //}
        //else {
        //    cmdEdit.setEnabled(false);
        //}
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11383)) {
            
            cmdDelete.setEnabled(true);
        }
        else {
            
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11384)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
        
    }
    
    private void Add() {
        EditMode=EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        
        //****************Now Generate new document no.****************//
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=clsPolicyTargetMaster.ModuleID;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            
            //Display newly generated document no.
            
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID,clsPolicyTargetMaster.ModuleID, FFNo,  false));
            txtSeasonID.requestFocus();
            
            lblTitle.setText("TARGET MASTER - " + txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
    }
    
    private void Edit() {
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        EditMode=EITLERPGLOBAL.EDIT;
        
        //---New Change ---//
        DisplayData();
        //----------------//
        
        SetFields(true);
        DisableToolbar();
        txtSeasonID.setEnabled(false);
        txtDocNo.setEditable(false);
        cmbPartySelection.requestFocus();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
        
    }
    
    private void Delete() {
        if(objTargetMaster.Delete(EITLERPGLOBAL.gNewUserID)) {
            MoveLast();
        }
    }
    
    private boolean Validate() {
        //** Validations **//
        
        if ((DataModelPeriod.getRowCount() > 0) && (DataModelRate.getRowCount() > 0)) {
            JOptionPane.showMessageDialog(null,"Please Specify Period Range or Ex Mill Rate Range. ");
            return false;
        }
        
        if (DataModelPeriod.getRowCount() > 0) {
            if(txtSeasonID.getText().trim().equals("")){
                JOptionPane.showMessageDialog(null,"Please Specify Season ID.");
                txtSeasonID.requestFocus();
                return false;
            }
        }
        
        if (DataModelRate.getRowCount() > 0) {
            if(txtRateFromDate.getText().trim().equals("")){
                JOptionPane.showMessageDialog(null,"Please Enter From Date.");
                txtRateFromDate.requestFocus();
                return false;
            }
            else if(!EITLERPGLOBAL.isDate(txtRateFromDate.getText())) {
                JOptionPane.showMessageDialog(null,"Invalid From Date in DD/MM/YYYY format.");
                txtRateFromDate.requestFocus();
                return false;
            }
            
            if(txtRateToDate.getText().trim().equals("")){
                JOptionPane.showMessageDialog(null,"Please Enter To Date.");
                txtRateToDate.requestFocus();
                return false;
            }
            else if(!EITLERPGLOBAL.isDate(txtRateToDate.getText())) {
                JOptionPane.showMessageDialog(null,"Invalid To Date in DD/MM/YYYY format.");
                txtRateToDate.requestFocus();
                return false;
            }
        }
        
        //*****************//
        
        return true;
    }
    
    private void Save() {
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        
        //** Validations **//
        if(!Validate()){
            return;
        }
        
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(objTargetMaster.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+objTargetMaster.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(objTargetMaster.Update()) {
                //Nothing to do
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+objTargetMaster.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
        
        
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Find() {
        
        Loader ObjLoader=new Loader(this,"EITLERP.Finance.frmPolicyTargetMasterFind",true);
        frmPolicyTargetMasterFind ObjReturn= (frmPolicyTargetMasterFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!objTargetMaster.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveFirst();
        }
        
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objTargetMaster.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objTargetMaster.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objTargetMaster.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objTargetMaster.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    public void FindEx(int pCompanyID,int pDocNo) {
        objTargetMaster.Filter(" WHERE SEASON_ID="+pDocNo,pCompanyID);
        objTargetMaster.MoveFirst();
        DisplayData();
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatPeriodRange() {
        try {
            
            DataModelPeriod=new EITLTableModel();
            
            EITLTableCellRenderer cellRender=new EITLTableCellRenderer();
            cellRender.setHorizontalAlignment(JLabel.RIGHT);
            
            //cmdAddDtl.requestFocus();
            
            TablePeriod.removeAll();
            TablePeriod.setModel(DataModelPeriod);
            
            TableColumnModel ColModel=TablePeriod.getColumnModel();
            TablePeriod.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //Add the columns
            DataModelPeriod.addColumn("Sr. No."); //0 Read Only
            DataModelPeriod.addColumn("Party ID"); //1
            DataModelPeriod.addColumn("Party Name"); //2
            DataModelPeriod.addColumn("Period From Date"); //3
            DataModelPeriod.addColumn("Period To Date"); //4
            DataModelPeriod.addColumn("Amount"); //5
            DataModelPeriod.addColumn("Meters From Date"); //6
            DataModelPeriod.addColumn("Meters To Date"); //7
            DataModelPeriod.addColumn("Meters"); //8
            
            DataModelPeriod.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModelPeriod.SetVariable(1,"PARTY_ID"); //1
            DataModelPeriod.SetVariable(2,"PARTY_NAME"); //2
            DataModelPeriod.SetVariable(3,"PERIOD_FROM_DATE"); //3
            DataModelPeriod.SetVariable(4,"PERIOD_TO_DATE"); //4
            DataModelPeriod.SetVariable(5,"AMOUNT"); //5
            DataModelPeriod.SetVariable(6,"METERS_FROM_DATE"); //6
            DataModelPeriod.SetVariable(7,"METERS_TO_DATE"); //7
            DataModelPeriod.SetVariable(8,"METERS"); //8
            
            DataModelPeriod.TableReadOnly(false);
            DataModelPeriod.SetReadOnly(0);
            DataModelPeriod.SetReadOnly(1);
            
            DataModelPeriod.SetNumeric(0,true);
            DataModelPeriod.SetNumeric(5,true);
            DataModelPeriod.SetNumeric(8,true);
            
            TablePeriod.getColumnModel().getColumn(1).setCellRenderer(cellRender);
            
            Updating=false;
            //Table formatting completed
            
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void FormatRateRange() {
        try {
            
            DataModelRate=new EITLTableModel();
            
            EITLTableCellRenderer cellRender=new EITLTableCellRenderer();
            cellRender.setHorizontalAlignment(JLabel.RIGHT);
            
            //cmdAddDtl.requestFocus();
            
            TableRate.removeAll();
            TableRate.setModel(DataModelRate);
            
            TableColumnModel ColModel=TableRate.getColumnModel();
            TableRate.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //Add the columns
            DataModelRate.addColumn("Sr. No."); //0 Read Only
            DataModelRate.addColumn("Party ID"); //1
            DataModelRate.addColumn("Party Name"); //2
            DataModelRate.addColumn("From Range"); //3
            DataModelRate.addColumn("To Range"); //4
            DataModelRate.addColumn("Percentage"); //5
            
            DataModelRate.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModelRate.SetVariable(1,"PARTY_ID"); //1
            DataModelRate.SetVariable(2,"PARTY_NAME"); //2
            DataModelRate.SetVariable(3,"FROM_RANGE"); //3
            DataModelRate.SetVariable(4,"TO_RANGE"); //4
            DataModelRate.SetVariable(5,"EXMILLRATE_PERCENTAGE"); //5
            
            DataModelRate.TableReadOnly(false);
            DataModelRate.SetReadOnly(0);
            DataModelRate.SetReadOnly(1);
            DataModelRate.SetReadOnly(2);
            
            DataModelRate.SetNumeric(0,true);
            //DataModelRate.SetNumeric(5,true);
            
            TableRate.getColumnModel().getColumn(1).setCellRenderer(cellRender);
            
            Updating=false;
            //Table formatting completed
            
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void GenerateCombos() {
        try {
            ComboData objData=new ComboData();
            //Generates Combo Boxes
            
            //---- Generate Party Selection ----
            cmbSelectionModel=new EITLComboModel();
            cmbPartySelection.removeAllItems();
            cmbPartySelection.setModel(cmbSelectionModel);
            
            objData=new ComboData();
            objData.Code=0;
            objData.Text="Party Grouping";
            cmbSelectionModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=1;
            objData.Text="Individual Party";
            cmbSelectionModel.addElement(objData);
            
            // ----  ----
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
}
