/*
 * frmFAMovement.java
 *
 * Created on March 28, 2011, 10:30 AM
 */

package EITLERP.Finance;

import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import java.text.*;
import javax.swing.text.*;
import java.net.*;
import java.io.*;
import EITLERP.Utils.*;
import EITLERP.ReportUI.*;

import net.sf.jasperreports.engine.*;

/**
 *
 * @author  root
 */
public class frmFAMovement extends javax.swing.JApplet {
    
    private int EditMode=0;
    private EITLTableModel DataModelL;
    private EITLTableModel DataModelAM;
    private EITLTableCellRenderer Renderer=new EITLTableCellRenderer();
    private boolean Updating=false;
    
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromID=0;
    
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private String SelNo = ""; //Selected Prefix Number
    private int FFNo=0;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel cmbStatusModel;
    private EITLComboModel cmbToModel;
    private EITLTableModel DataModelA;
    private clsFASMovement ObjFASMovement;
    
    private boolean HistoryView=false;
    private String theDocNo="";
    private EITLTableModel DataModelHS;
    
    public frmPendingApprovals frmPA;
    
    String cellLastValue="";
    
    /** Initializes the applet frmFAMovement */
    public void init() {
        
        System.gc();
        setSize(775,535);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        GenerateCombos();
        FormatGridAM();
        SetMenuForRights();
        ObjFASMovement = new clsFASMovement();
        DataModelAM.TableReadOnly(true);
        
        
        if(getName().equals("Link")) {
            //Do not load the data.. as FindEx will follow
        }
        else {
            if(ObjFASMovement.LoadData(EITLERPGLOBAL.gCompanyID)) {
                ObjFASMovement.MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+ObjFASMovement.LastError);
            }
        }
        
        txtAuditRemarks.setVisible(false);
        
        
        
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        lblDocNo = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        lblDocDate = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        lblRemarks = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        cmdNext_Header = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableAM = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        lblRevNo = new javax.swing.JLabel();
        cmdRemarksBig = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdPrev = new javax.swing.JButton();
        cmdFromRemarksBi = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("Top");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("Add");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Filter");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText("FIXED ASSET MOVEMENT");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 804, 25);

        Tab1.setLayout(null);

        Tab1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });

        lblDocNo.setText("            Doc No :");
        lblDocNo.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(lblDocNo);
        lblDocNo.setBounds(5, 30, 100, 20);

        txtDocNo.setBackground(new java.awt.Color(204, 204, 255));
        txtDocNo.setEditable(false);
        txtDocNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDocNo.setEnabled(false);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(110, 30, 100, 20);

        lblDocDate.setDisplayedMnemonic('d');
        lblDocDate.setText("  Date : ");
        Tab1.add(lblDocDate);
        lblDocDate.setBounds(260, 30, 50, 20);

        txtDocDate.setName("INQUIRY_DATE");
        txtDocDate.setEnabled(false);
        Tab1.add(txtDocDate);
        txtDocDate.setBounds(320, 30, 80, 20);

        lblRemarks.setText("         Remarks :");
        lblRemarks.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(lblRemarks);
        lblRemarks.setBounds(5, 60, 100, 20);

        txtRemarks.setName("REMARKS");
        txtRemarks.setEnabled(false);
        txtRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRemarksFocusGained(evt);
            }
        });

        Tab1.add(txtRemarks);
        txtRemarks.setBounds(110, 60, 354, 20);

        cmdNext_Header.setFont(new java.awt.Font("Tahoma", 1, 12));
        cmdNext_Header.setMnemonic('n');
        cmdNext_Header.setText("Next >>");
        cmdNext_Header.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext_HeaderActionPerformed(evt);
            }
        });

        Tab1.add(cmdNext_Header);
        cmdNext_Header.setBounds(650, 350, 90, 25);

        jPanel8.setLayout(null);

        jPanel8.setBorder(new javax.swing.border.EtchedBorder());
        TableAM.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableAM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableAMKeyPressed(evt);
            }
        });

        jScrollPane3.setViewportView(TableAM);

        jPanel8.add(jScrollPane3);
        jScrollPane3.setBounds(8, 15, 710, 140);

        cmdAdd.setFont(new java.awt.Font("Dialog", 1, 10));
        cmdAdd.setText("Add");
        cmdAdd.setName("SUPPLIERS");
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        cmdAdd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdAddFocusGained(evt);
            }
        });

        jPanel8.add(cmdAdd);
        cmdAdd.setBounds(550, 170, 79, 23);

        cmdRemove.setFont(new java.awt.Font("Dialog", 1, 10));
        cmdRemove.setText("Remove");
        cmdRemove.setName("SUPPLIERS");
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        cmdRemove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdRemoveFocusGained(evt);
            }
        });

        jPanel8.add(cmdRemove);
        cmdRemove.setBounds(640, 170, 78, 23);

        Tab1.add(jPanel8);
        jPanel8.setBounds(10, 120, 730, 210);

        jLabel6.setText("Asset Movement Detail : ");
        Tab1.add(jLabel6);
        jLabel6.setBounds(10, 90, 160, 20);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(220, 30, 34, 20);

        cmdRemarksBig.setText("...");
        Tab1.add(cmdRemarksBig);
        cmdRemarksBig.setBounds(470, 60, 38, 19);

        Tab.addTab("Header", Tab1);

        jPanel3.setLayout(null);

        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPanel3FocusGained(evt);
            }
        });

        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Hierarchy ");
        jPanel3.add(jLabel31);
        jLabel31.setBounds(20, 16, 100, 20);

        cmbHierarchy.setEditable(true);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });

        jPanel3.add(cmbHierarchy);
        cmbHierarchy.setBounds(125, 16, 184, 24);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("From");
        jPanel3.add(jLabel32);
        jLabel32.setBounds(20, 46, 100, 20);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.add(txtFrom);
        txtFrom.setBounds(125, 46, 182, 19);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.add(txtFromRemarks);
        txtFromRemarks.setBounds(125, 76, 518, 19);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel35.setText("Remarks");
        jPanel3.add(jLabel35);
        jLabel35.setBounds(20, 76, 100, 20);

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Your Action");
        jPanel3.add(jLabel36);
        jLabel36.setBounds(20, 126, 100, 20);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });

        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        jPanel3.add(jPanel6);
        jPanel6.setBounds(125, 116, 182, 100);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Send To");
        jPanel3.add(jLabel33);
        jLabel33.setBounds(20, 226, 100, 20);

        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });

        jPanel3.add(cmbSendTo);
        cmbSendTo.setBounds(125, 226, 184, 24);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Remarks");
        jPanel3.add(jLabel34);
        jLabel34.setBounds(20, 256, 100, 20);

        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });

        jPanel3.add(txtToRemarks);
        txtToRemarks.setBounds(125, 256, 516, 19);

        cmdPrev.setFont(new java.awt.Font("Tahoma", 1, 12));
        cmdPrev.setMnemonic('p');
        cmdPrev.setText("<<Previous");
        cmdPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrevActionPerformed(evt);
            }
        });

        jPanel3.add(cmdPrev);
        cmdPrev.setBounds(610, 300, 110, 25);

        cmdFromRemarksBi.setText("...");
        jPanel3.add(cmdFromRemarksBi);
        cmdFromRemarksBi.setBounds(650, 76, 42, 19);

        Tab.addTab("Approval Hierarchy", jPanel3);

        jPanel5.setLayout(null);

        jPanel5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status");
        jPanel5.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel5.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 660, 144);

        lblDocumentHistory.setText("Document Update History");
        jPanel5.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 190, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(TableHS);

        jPanel5.add(jScrollPane4);
        jScrollPane4.setBounds(13, 206, 514, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        jPanel5.add(cmdViewHistory);
        cmdViewHistory.setBounds(534, 234, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        jPanel5.add(cmdNormalView);
        cmdNormalView.setBounds(534, 262, 132, 24);

        cmdPreviewA.setText("Preview Report");
        cmdPreviewA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewAActionPerformed(evt);
            }
        });

        jPanel5.add(cmdPreviewA);
        cmdPreviewA.setBounds(534, 207, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        jPanel5.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(534, 291, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel5.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(537, 327, 129, 19);

        Tab.addTab("Status", jPanel5);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 750, 410);

        lblStatus.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(5, 480, 750, 25);

    }//GEN-END:initComponents
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    private void cmdAddFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdAddFocusGained
        // TODO add your handling code here:
        ShowMessage("Click this button to add a new row to table");
    }//GEN-LAST:event_cmdAddFocusGained
    
    private void cmdRemoveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdRemoveFocusGained
        // TODO add your handling code here:
        ShowMessage("Click this button to remove selected row from the table");
    }//GEN-LAST:event_cmdRemoveFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        // TODO add your handling code here:
        ShowMessage("Select approval action");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        // TODO add your handling code here:
        ShowMessage("Select approval action");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        // TODO add your handling code here:
        ShowMessage("Select approval action");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        // TODO add your handling code here:
        ShowMessage("Select approval action");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if(ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID,clsFASMovement.ModuleID,txtDocNo.getText(),FinanceGlobal.FinURL)) {
                cmbSendTo.setEnabled(true);
            }
            else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateFromCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
        
        
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(true);
        OpgHold.setSelected(false);
        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
        
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void cmdNext_HeaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext_HeaderActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext_HeaderActionPerformed
    
    private void cmdPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrevActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdPrevActionPerformed
    
    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        // TODO add your handling code here:
        txtRemarks.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained
    
    private void jPanel3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel3FocusGained
        // TODO add your handling code here:
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_jPanel3FocusGained
    
    private void cmdPreviewAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewAActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo=txtDocNo.getText();
        ObjFASMovement.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjFASMovement.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void TableAMKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableAMKeyPressed
        // TODO add your handling code here:
        
        try {
            
            
            if(evt.getKeyCode()==112 && EditMode!=0) //F1 Key pressed
            {
                if(TableAM.getSelectedColumn()==DataModelAM.getColFromVariable("ASSET_NO")) {
                    LOV aList=new LOV();
                    
                    aList.SQL= "SELECT A.ASSET_NO,B.SR_NO,A.ITEM_ID,C.ITEM_DESCRIPTION "+
                    "FROM FINANCE.D_FAS_MASTER_HEADER A,FINANCE.D_FAS_MASTER_DETAIL B,D_INV_ITEM_MASTER C  "+
                    "WHERE A.COMPANY_ID= B.COMPANY_ID "+
                    "AND A.ASSET_NO = B.ASSET_NO  "+
                    "AND A.ITEM_ID = C.ITEM_ID "+
                    "AND A.COMPANY_ID = C.COMPANY_ID "+
                    "AND A.COMPANY_ID= '"+EITLERPGLOBAL.gCompanyID+"'  "+
                    "AND A.APPROVED  = 1  "+
                    "AND A.CANCELLED = 0 AND B.ASSET_STATUS = ''  "+
                    "ORDER BY A.ASSET_NO,B.SR_NO ";
                    
//                    
//                    aList.SQL = "SELECT DISTINCT(A.ASSET_NO) AS ASSET_NO,A.ASSET_DATE,B.SR_NO,B.ITEM_ID " +
//                    ",IFNULL(C.ITEM_DESCRIPTION,A.ITEM_DESC) AS ITEM_DESCRIPTION " +
//                    "FROM FINANCE.D_FAS_MASTER_HEADER A,FINANCE.D_FAS_MASTER_DETAIL B " +
//                    "LEFT JOIN DINESHMILLS.D_INV_ITEM_MASTER C ON (B.ITEM_ID = C.ITEM_ID) " +
//                    "WHERE A.COMPANY_ID= B.COMPANY_ID " +
//                    "AND A.ASSET_NO = B.ASSET_NO  " +
//                    "AND A.COMPANY_ID= '"  +EITLERPGLOBAL.gCompanyID +  "'  " +
//                    "AND A.APPROVED  = 1 AND A.CANCELLED = 0 AND ASSET_STATUS = ''  " +
//                    "ORDER BY A.ASSET_NO,B.SR_NO ";
                    
                    
                    
                    aList.ReturnCol=1;
                    aList.SecondCol=2;
                    //aList.ThirdCol=3;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=1;
                    // aList.dbURL = FinanceGlobal.FinURL;
                    //aList.UseSpecifiedConn = true;
                    if(aList.ShowLOV()) {
                        if(TableAM.getCellEditor()!=null) {
                            TableAM.getCellEditor().stopCellEditing();
                        }
                        TableAM.setValueAt(aList.ReturnVal, TableAM.getSelectedRow(),DataModelAM.getColFromVariable("ASSET_NO"));
                        TableAM.setValueAt(aList.SecondVal, TableAM.getSelectedRow(),DataModelAM.getColFromVariable("DETAIL_SR_NO"));
                        String item_id = data.getStringValueFromDB("SELECT ITEM_ID FROM D_FAS_MASTER_HEADER WHERE ASSET_NO='"+aList.ReturnVal+"' ",FinanceGlobal.FinURL);
                        TableAM.setValueAt(item_id, TableAM.getSelectedRow(),DataModelAM.getColFromVariable("ITEM_ID"));
                        TableAM.setValueAt(clsItem.getItemName(EITLERPGLOBAL.gCompanyID,item_id), TableAM.getSelectedRow(),DataModelAM.getColFromVariable("ITEM_DESCRIPTION"));
                        int dept_id  = data.getIntValueFromDB("SELECT DEPT_ID FROM D_FAS_MASTER_HEADER WHERE ASSET_NO='"+aList.ReturnVal+"' ",FinanceGlobal.FinURL);
                        TableAM.setValueAt(Integer.toString(dept_id), TableAM.getSelectedRow(),DataModelAM.getColFromVariable("BUYER_DEPT_ID"));
                        TableAM.setValueAt(clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,Integer.toString(dept_id)), TableAM.getSelectedRow(),DataModelAM.getColFromVariable("BUYER_DEPT_NAME"));
                        int dept_id1  = data.getIntValueFromDB("SELECT DEPT_ID FROM D_FAS_MASTER_DETAIL WHERE ASSET_NO='"+aList.ReturnVal+"' AND SR_NO = '"+aList.SecondVal+"'  ",FinanceGlobal.FinURL);
                        TableAM.setValueAt(Integer.toString(dept_id1), TableAM.getSelectedRow(),DataModelAM.getColFromVariable("CURRENT_DEPT_ID"));
                        TableAM.setValueAt(clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,Integer.toString(dept_id1)), TableAM.getSelectedRow(),DataModelAM.getColFromVariable("CURRENT_DEPT_NAME"));
                        
                    }
                    aList.UseSpecifiedConn = false;
                }
                
                
                if(TableAM.getSelectedColumn()==DataModelAM.getColFromVariable("MOVE_TO_DEPT_ID")) {
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT DEPT_ID,DEPT_DESC FROM D_COM_DEPT_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" ORDER BY DEPT_DESC";
                    aList.ReturnCol=1;
                    aList.SecondCol=2;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=1;
                    
                    if(aList.ShowLOV()) {
                        if(TableAM.getCellEditor()!=null) {
                            TableAM.getCellEditor().stopCellEditing();
                        }
                        
                        TableAM.setValueAt(aList.ReturnVal, TableAM.getSelectedRow(),DataModelAM.getColFromVariable("MOVE_TO_DEPT_ID"));
                        TableAM.setValueAt(aList.SecondVal, TableAM.getSelectedRow(),DataModelAM.getColFromVariable("MOVE_TO_DEPT_NAME"));
                    }
                }
            }
        } catch(Exception e)
        {}
    }//GEN-LAST:event_TableAMKeyPressed
    
    private void txtRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter remarks for this document");
    }//GEN-LAST:event_txtRemarksFocusGained
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjFASMovement.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        // Delete();
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if(TableAM.getRowCount()>0) {
            
            DataModelAM.removeRow(TableAM.getSelectedRow());
            UpdateSrNo();
        }
        
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        
        Updating=true;
        Object[] rowData=new Object[12];
        rowData[0]=Integer.toString(TableAM.getRowCount()+1);
        rowData[1]="";
        rowData[2]="";
        rowData[3]="";
        rowData[4]="";
        rowData[5]="";
        rowData[6]="";
        rowData[7]="";
        rowData[8]="";
        rowData[9]="";
        rowData[10]="";
        rowData[11]="";
        DataModelAM.addRow(rowData);
        Updating=false;
        TableAM.changeSelection(TableAM.getRowCount()-1, 1, false,false);
        TableAM.requestFocus();
    }//GEN-LAST:event_cmdAddActionPerformed
        
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableAM;
    private javax.swing.JTable TableHS;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBi;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext_Header;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPrev;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemarksBig;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblDocDate;
    private javax.swing.JLabel lblDocNo;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRemarks;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    private void FormatGridAM() {
        cmdAdd.requestFocus();
        DataModelAM=new EITLTableModel();
        
        TableAM.removeAll();
        TableAM.setModel(DataModelAM);
        
        
        //Add the columns
        DataModelAM.addColumn("Sr.No"); //0 READ ONLY
        DataModelAM.addColumn("Asset.No"); //1
        DataModelAM.addColumn("Asset Sr No."); //2 READ ONLY
        DataModelAM.addColumn("Item ID"); //2  READ ONLY
        DataModelAM.addColumn("Item Desc"); //3 READ ONLY
        DataModelAM.addColumn("Buyer Dept. ID"); //4 READ ONLY
        DataModelAM.addColumn("Buyer Dept. Name"); //5 READ ONLY
        DataModelAM.addColumn("Current Dept. ID"); //6 READ ONLY
        DataModelAM.addColumn("Current Dept. Name"); //7 READ ONLY
        DataModelAM.addColumn("Move to Dept. ID"); //8
        DataModelAM.addColumn("Move to Dept. Name"); //9
        DataModelAM.addColumn("Remarks"); //10
        
        DataModelAM.SetVariable(0, "SR_NO");
        DataModelAM.SetVariable(1, "ASSET_NO");
        DataModelAM.SetVariable(2, "DETAIL_SR_NO");
        DataModelAM.SetVariable(3, "ITEM_ID");
        DataModelAM.SetVariable(4, "ITEM_DESCRIPTION");
        DataModelAM.SetVariable(5, "BUYER_DEPT_ID");
        DataModelAM.SetVariable(6, "BUYER_DEPT_NAME");
        DataModelAM.SetVariable(7, "CURRENT_DEPT_ID");
        DataModelAM.SetVariable(8, "CURRENT_DEPT_NAME");
        DataModelAM.SetVariable(9, "MOVE_TO_DEPT_ID");
        DataModelAM.SetVariable(10, "MOVE_TO_DEPT_NAME");
        DataModelAM.SetVariable(11, "REMARKS");
        
        
        TableAM.setAutoResizeMode(TableAM.AUTO_RESIZE_OFF);
        
        DataModelAM.TableReadOnly(false);
        DataModelAM.SetReadOnly(0);
        DataModelAM.SetReadOnly(1);
        DataModelAM.SetReadOnly(2);
        DataModelAM.SetReadOnly(3);
        DataModelAM.SetReadOnly(4);
        DataModelAM.SetReadOnly(5);
        DataModelAM.SetReadOnly(6);
        DataModelAM.SetReadOnly(7);
        DataModelAM.SetReadOnly(8);
        DataModelAM.SetReadOnly(9);
        DataModelAM.SetReadOnly(10);
        
        
        
        //------- Install Table List Selection Listener ------//
        TableAM.getColumnModel().getSelectionModel().addListSelectionListener(
        new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                int last=TableAM.getSelectedColumn();
                String strVar=DataModelAM.getVariable(last);
                
                //=============== Cell Editing Routine =======================//
                try {
                    cellLastValue=(String)TableAM.getValueAt(TableAM.getSelectedRow(),TableAM.getSelectedColumn());
                    
                    TableAM.editCellAt(TableAM.getSelectedRow(),TableAM.getSelectedColumn());
                    if(TableAM.getEditorComponent() instanceof JTextComponent) {
                        ((JTextComponent)TableAM.getEditorComponent()).selectAll();
                    }
                }
                catch(Exception cell){}
                //============= Cell Editing Routine Ended =================//
                
                ShowMessage("Ready");
                
                //                    if(last==1) {
                //                        ShowMessage("Enter item id. Press F1 for the list of items");
                //                    }
            }
        }
        );
        
        
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        
    }
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    private void ClearFields() {
        
        
        txtDocNo.setText("");
        txtDocDate.setText("");
        txtRemarks.setText("");
        txtToRemarks.setText("");
        
        FormatGridA();
        FormatGridAM();
        FormatGridHS();
    }
    
    private void SetFields(boolean pStat) {
        
        txtRemarks.setEnabled(pStat);
        
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        
        cmbHierarchy.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        DataModelAM.TableReadOnly(!pStat);
        
        
        SetupApproval();
        
        
    }
    
    private void GenerateCombos() {
        //Generates Combo Boxes
        
        //Please Fill Up Module ID
        HashMap List=new HashMap();
        String strCondition="";
        
        //----- Generate cmbType ------- //
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID = '"+clsFASMovement.ModuleID+"' ");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID = '"+clsFASMovement.ModuleID+"' ");
        }
        for(int i=1;i<=List.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
        
        ComboData aData=new ComboData();
        
        clsUser ObjUser=new clsUser();
        ObjUser.LoadData(EITLERPGLOBAL.gCompanyID);
        List=ObjUser.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID));
        for(int i=1;i<=List.size();i++) {
            ObjUser=(clsUser) List.get(Integer.toString(i));
            
            aData=new ComboData();
            
            aData.Text=(String) ObjUser.getAttribute("USER_NAME").getObj();
            aData.Code=(long)ObjUser.getAttribute("USER_ID").getVal();
            
            
        }
        
    }
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbSendToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbSendToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbSendToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbSendToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbSendToModel);
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, clsFASMovement.ModuleID,(String)ObjFASMovement.getAttribute("DOC_NO").getObj());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjFASMovement.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjFASMovement.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjFASMovement.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjFASMovement.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    public void FindWaiting() {
        ObjFASMovement.Filter(" WHERE DOC_NO IN (SELECT D_FAS_MOVEMENT_HEADER.DOC_NO FROM FINANCE.D_FAS_MOVEMENT_HEADER,D_COM_DOC_DATA WHERE FINANCE.D_FAS_MOVEMENT_HEADER.DOC_NO=D_COM_DOC_DATA.DOC_NO AND FINANCE.D_FAS_MOVEMENT_HEADER.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND FINANCE.D_FAS_MOVEMENT_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND MODULE_ID="+clsFASMovement.ModuleID+")",EITLERPGLOBAL.gCompanyID);
        ObjFASMovement.MoveLast();
        DisplayData();
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        ShowMessage("Ready");
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,12261)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,12262)) {
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }
        
        // --- Delete Rights --
       /* if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,273)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }*/
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,12264)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
        
        
       
        
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Tab1.getComponent(i).setEnabled(true);
                }
                
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        
        
        //=============== Setting Table Fields ==================//
       /* DataModelL.ClearAllReadOnly();
        for(int i=0;i<TableL.getColumnCount();i++) {
            FieldName=DataModelL.getVariable(i);
        
            if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
                //Do Nothing
            }
            else {
                DataModelL.SetReadOnly(i);
            }
        }*/
        //=======================================================//
        
    }
    
    private void DisplayData() {
        
        try {
            if(EditMode==0) {
                if(ObjFASMovement.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(ObjFASMovement.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(ObjFASMovement.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
                
                
            }
        }
        catch(Exception c) {
            
        }
        //============================================//
        
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=clsFASMovement.ModuleID;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        
        try{
            ClearFields();
            
            txtDocNo.setText((String)ObjFASMovement.getAttribute("DOC_NO").getObj());
            lblTitle.setText("FIXED ASSET MOVEMENT - "+txtDocNo.getText());
            lblRevNo.setText(Integer.toString((int)ObjFASMovement.getAttribute("REVISION_NO").getVal()));
            txtDocDate.setText(EITLERPGLOBAL.formatDate((String)ObjFASMovement.getAttribute("DOC_DATE").getObj()));
            txtRemarks.setText((String)ObjFASMovement.getAttribute("REMARKS").getObj());
            
            
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,(int)ObjFASMovement.getAttribute("HIERARCHY_ID").getVal());
            //========= Display Line Items =============//
            FormatGridAM();
            
            for(int i=1;i<=ObjFASMovement.colLineItems.size();i++) {
                //Insert New Row
                Object[] rowData=new Object[1];
                DataModelAM.addRow(rowData);
                int NewRow=TableAM.getRowCount()-1;
                
                clsFASMovementDetail ObjItem=(clsFASMovementDetail) ObjFASMovement.colLineItems.get(Integer.toString(i));
                
                
                DataModelAM.setValueByVariable("SR_NO",Integer.toString(i),NewRow);
                DataModelAM.setValueByVariable("ASSET_NO",(String)ObjItem.getAttribute("ASSET_NO").getObj(),NewRow);
                DataModelAM.setValueByVariable("DETAIL_SR_NO",Integer.toString((int)ObjItem.getAttribute("DETAIL_SR_NO").getVal()),NewRow);
                DataModelAM.setValueByVariable("ITEM_ID",(String)ObjItem.getAttribute("ITEM_ID").getObj(),NewRow);
                DataModelAM.setValueByVariable("ITEM_DESCRIPTION",clsItem.getItemName(EITLERPGLOBAL.gCompanyID, (String)ObjItem.getAttribute("ITEM_ID").getObj()),NewRow);
                DataModelAM.setValueByVariable("BUYER_DEPT_ID",Integer.toString((int)ObjItem.getAttribute("BUYER_DEPT_ID").getVal()),NewRow);
                DataModelAM.setValueByVariable("BUYER_DEPT_NAME",clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,(int)ObjItem.getAttribute("BUYER_DEPT_ID").getVal()),NewRow);
                DataModelAM.setValueByVariable("CURRENT_DEPT_ID",Integer.toString((int)ObjItem.getAttribute("CURRENT_DEPT_ID").getVal()),NewRow);
                DataModelAM.setValueByVariable("CURRENT_DEPT_NAME",clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,(int)ObjItem.getAttribute("CURRENT_DEPT_ID").getVal()),NewRow);
                DataModelAM.setValueByVariable("MOVE_TO_DEPT_ID",Integer.toString((int)ObjItem.getAttribute("MOVE_TO_DEPT_ID").getVal()),NewRow);
                DataModelAM.setValueByVariable("MOVE_TO_DEPT_NAME",clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,(int)ObjItem.getAttribute("MOVE_TO_DEPT_ID").getVal()),NewRow);
                DataModelAM.setValueByVariable("REMARKS",(String)ObjItem.getAttribute("REMARKS").getObj(),NewRow);
                
            }
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List=new HashMap();
            String DocNo=(String)ObjFASMovement.getAttribute("DOC_NO").getObj();
            List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, clsFASMovement.ModuleID, DocNo);
            for(int i=1;i<=List.size();i++) {
                clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
                Object[] rowData=new Object[7];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
                rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
                
                DataModelA.addRow(rowData);
            }
            
            
            
            //Showing Audit Trial History
            FormatGridHS();
            HashMap History=clsFASMovement.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for(int i=1;i<=History.size();i++) {
                clsFASMovement ObjHistory=(clsFASMovement)History.get(Integer.toString(i));
                Object[] rowData=new Object[5];
                
                rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(long)ObjHistory.getAttribute("UPDATED_BY").getVal());
                rowData[2]=EITLERPGLOBAL.formatDate((String)ObjHistory.getAttribute("ENTRY_DATE").getObj());
                
                String ApprovalStatus="";
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                    ApprovalStatus="Approved";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                    ApprovalStatus="Final Approved";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                    ApprovalStatus="Waiting";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("H")) {
                    ApprovalStatus="Waiting";
                }
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                    ApprovalStatus="Rejected";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                    ApprovalStatus="Pending";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                    ApprovalStatus="Skiped";
                }
                
                
                rowData[3]=ApprovalStatus;
                rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
                
                DataModelHS.addRow(rowData);
            }
            //============================================================//
            
            
            //============================================================//
            
            
            
            
            
            if(EditMode==0) {
                DataModelAM.TableReadOnly(true);
            }
        }
        catch(Exception e){}
    }
    
    private void Add() {
        
        
        //----------------------------------//
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=clsFASMovement.ModuleID;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            FormatGridAM();
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            
            SelNo = aList.DocNo;
            SetupApproval();
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsFASMovement.ModuleID, FFNo,false));
            //txtInquiryNo.setText(SelPrefix + txtInquiryNo.getText());
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
            txtDocDate.requestFocus();
            
            lblTitle.setText("ASSET MOVEMENT - "+txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);
            
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
        
    }
    
    private void Edit(){
        
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=(String)ObjFASMovement.getAttribute("DOC_NO").getObj();
        if(ObjFASMovement.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID))  {
            EditMode=EITLERPGLOBAL.EDIT;
            
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//
            
            if(ApprovalFlow.IsCreator(clsFASMovement.ModuleID ,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,1097)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            DisableToolbar();
            txtDocDate.requestFocus();
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
        
    }
    
    private void Save(){
        
        if(Validate()==false) {
            return; //Validation failed
        }
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjFASMovement.Insert())   {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjFASMovement.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjFASMovement.Update()) {
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjFASMovement.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        
                
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        
        try {
            frmPA.RefreshView();
        }
        catch(Exception e){}
        ShowMessage("Ready ..........");
        EITLERPGLOBAL.ChangeCursorToDefault(this);
        
        
    }
    
    private void SetData() {
        ObjFASMovement.setAttribute("PREFIX",SelPrefix);
        ObjFASMovement.setAttribute("SUFFIX",SelSuffix);
        ObjFASMovement.setAttribute("FFNO",FFNo);
        ObjFASMovement.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        ObjFASMovement.setAttribute("DOC_NO",txtDocNo.getText());
        ObjFASMovement.setAttribute("DOC_DATE",EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
        ObjFASMovement.setAttribute("REMARKS",txtRemarks.getText());
        
        
        ObjFASMovement.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFASMovement.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjFASMovement.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFASMovement.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        
        if(OpgApprove.isSelected()) {
            ObjFASMovement.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjFASMovement.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjFASMovement.setAttribute("APPROVAL_STATUS","R");
        }
        
        if(OpgHold.isSelected()) {
            ObjFASMovement.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjFASMovement.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            ObjFASMovement.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        else {
            ObjFASMovement.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
            ObjFASMovement.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        
        ObjFASMovement.colLineItems.clear();
        //        ObjFASMovement.colSupp.clear();
        
        for(int i=0;i<TableAM.getRowCount();i++) {
            clsFASMovementDetail ObjFASMovementItem=new clsFASMovementDetail();
            
            ObjFASMovementItem.setAttribute("SR_NO",Integer.toString(i));
            ObjFASMovementItem.setAttribute("ASSET_NO",(String) DataModelAM.getValueByVariable("ASSET_NO",i));
            ObjFASMovementItem.setAttribute("DETAIL_SR_NO",Integer.parseInt(DataModelAM.getValueByVariable("DETAIL_SR_NO",i)));
            ObjFASMovementItem.setAttribute("ITEM_ID",(String) DataModelAM.getValueByVariable("ITEM_ID",i));
            ObjFASMovementItem.setAttribute("BUYER_DEPT_ID",Integer.parseInt(DataModelAM.getValueByVariable("BUYER_DEPT_ID",i)));
            ObjFASMovementItem.setAttribute("CURRENT_DEPT_ID",Integer.parseInt(DataModelAM.getValueByVariable("CURRENT_DEPT_ID",i)));
            ObjFASMovementItem.setAttribute("MOVE_TO_DEPT_ID",Integer.parseInt(DataModelAM.getValueByVariable("MOVE_TO_DEPT_ID",i)));
            ObjFASMovementItem.setAttribute("REMARKS",DataModelAM.getValueByVariable("REMARKS",i));
            
            if(EditMode==EITLERPGLOBAL.ADD) {
                ObjFASMovementItem.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
                ObjFASMovementItem.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            }
            else {
                ObjFASMovementItem.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
                ObjFASMovementItem.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            }
            ObjFASMovement.colLineItems.put(Integer.toString(ObjFASMovement.colLineItems.size()+1),ObjFASMovementItem);
        }
        
        
    }
    
    private boolean Validate() {
      
        
        int MDeptCol=DataModelAM.getColFromVariable("MOVE_TO_DEPT_ID");
        int CDeptCol=DataModelAM.getColFromVariable("CURRENT_DEPT_ID");
        for(int i=0;i<TableAM.getRowCount();i++) {
            //String Variable=DataModelAM.getVariable(i);
             String AssetNo=(String)TableAM.getValueAt(i,1);
            if(AssetNo.equals("")) {
                JOptionPane.showMessageDialog(null,"Please Enter Asset Number Using F1 Key.....");
                return false;
            }
            
            String SrNo = DataModelAM.getValueByVariable("SR_NO", i);
            if(DataModelAM.getValueAt(i,MDeptCol).toString().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Please enter move to dept id at Sr No  "+SrNo+"");
                return false;
            }
           
        }
        
        for(int i=0;i<TableAM.getRowCount();i++) {
                String MDeptID=(String)TableAM.getValueAt(i, MDeptCol);
                String CDeptID=(String)TableAM.getValueAt(i, CDeptCol);
                if(MDeptID.equals(CDeptID)) {
                    JOptionPane.showMessageDialog(null,"You cannot move same asset in same department");
                    return false;
                }
                
            }
     
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the hierarchy.");
            return false;
        }
        
        if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null,"Please select the Approval Action");
            return false;
        }
        
        if(OpgReject.isSelected()&&txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter the remarks for rejection");
            return false;
        }
        
        if( (OpgApprove.isSelected()||OpgReject.isSelected())&&cmbSendTo.getItemCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please select the user, to whom rejected document to be send");
            return false;
        }
        
        if(TableAM.getRowCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please enter which Asset you want to Move....");
            return false;
        }
       /* int MDeptCol=DataModelAM.getColFromVariable("MOVE_TO_DEPT_ID");
        for(int i=0;i<TableAM.getRowCount();i++) {
            //String Variable=DataModelAM.getVariable(i);
            String SrNo = DataModelAM.getValueByVariable("SR_NO", i);
        if(DataModelAM.getValueAt(i,MDeptCol).toString().trim().equals("")) {
             JOptionPane.showMessageDialog(null,"Please enter move to dept id at Sr No  "+SrNo+"");
             return false;
            }
        }*/
        
        return true;
    }
    
    private void Amend(){
        String lDocNo=(String)ObjFASMovement.getAttribute("DOC_NO").getObj();
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        EditMode=EITLERPGLOBAL.AMEND;
        GenerateCombos();
        
        //---New Change ---//
        GenerateCombos();
        DisplayData();
        //----------------//
        
        if(ApprovalFlow.IsCreator(clsFASMovement.ModuleID,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,12052)) {//PUT EDIT FUNCTION ID
            SetFields(true);
        }
        else {
            EnableApproval();
        }
        
        DisableToolbar();
        cmdAdd.setEnabled(false);
        cmbHierarchy.setEnabled(true);
        cmdAdd.setEnabled(true);
        OpgHold.setSelected(true);
        
        
        
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void SetupApproval() {
        // --- Hierarchy Change Rights Check --------
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, clsFASMovement.ModuleID ,(String)ObjFASMovement.getAttribute("DOC_NO").getObj());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,clsFASMovement.ModuleID ,FromUserID,(String)ObjFASMovement.getAttribute("DOC_NO").getObj());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void GenerateRejectedUserCombo() {
        HashMap List=new HashMap();
        HashMap DeptList=new HashMap();
        HashMap DeptUsers=new HashMap();
        
        //----- Generate cmbType ------- //
        cmbToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);
        
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            
            
            /// NEW CODE ///
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID,clsFASMovement.ModuleID, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID,clsFASMovement.ModuleID , txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            }
            else {
                if(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///
            
            
        }
        //------------------------------ //
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID,clsFASMovement.ModuleID,txtDocNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
    }
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Finance.frmFAMovementFind",true);
        frmFAMovementFind ObjReturn= (frmFAMovementFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!ObjFASMovement.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveLast();
        }
    }
    
    public void FindEx(int pCompanyID,String pDocNo) {
        ObjFASMovement.Filter(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND DOC_NO='"+pDocNo+"'",pCompanyID);
        ObjFASMovement.MoveLast();
        DisplayData();
    }
    private void UpdateSrNo() {
        int SrCol=DataModelAM.getColFromVariable("SR_NO");
        for(int i=0;i<TableAM.getRowCount();i++) {
            TableAM.setValueAt(Integer.toString(i+1), i, SrCol);
        }
    }
}
