/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP.Finance;

/**
 *
 * @author  nitin
 */
/*<APPLET CODE=frmInward.class HEIGHT=500 WIDTH=665></APPLET>*/

import javax.swing.*;
import java.awt.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import javax.swing.text.*;
import EITLERP.Utils.*;
import java.sql.*;
import java.net.*;
import EITLERP.*;
import EITLERP.Finance.*;
import EITLERP.Sales.clsSalesInvoice;


public class frmCancelDummyInvoice extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsCancelDummyInvoice objCancelDummyInvoice;
    
    private boolean Updating=false;
    
    private String theDocNo="";
    
    private EITLTableModel DataModel;
    private EITLTableModel DataModelA;
    private EITLTableModel DataModelHS;
    private EITLTableModel DataModelInvoices;
    
    private EITLTableCellRenderer Rend=new EITLTableCellRenderer();
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbMainCodeTypeModel;
    private int SelHierarchyID=0;
    private int lnFromID=0;
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    private boolean IsGenerating=false;
    
    public frmPendingApprovals frmPA;
    String cellLastValue="";
    private boolean DoNotEvaluate=false;
    /** Creates new form frmTemplate */
    public frmCancelDummyInvoice() {
        System.gc();
        setSize(670,535);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        GenerateCombos();
        
        objCancelDummyInvoice=new clsCancelDummyInvoice();
        
        SetMenuForRights();
        
        if(getName().equals("Link")) {
            
        } else {
            if(objCancelDummyInvoice.LoadData(EITLERPGLOBAL.gCompanyID)) {
                objCancelDummyInvoice.MoveLast();
                DisplayData();
                SetMenuForRights();
            } else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+objCancelDummyInvoice.LastError);
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        MainPanel = new javax.swing.JTabbedPane();
        Header = new javax.swing.JPanel();
        lblAccountID = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        lblSubCode = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        HeaderDetail = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableInvoices = new javax.swing.JTable();
        cmdGenerateInvoices = new javax.swing.JButton();
        cmdSelectAll = new javax.swing.JButton();
        cmdClearAll = new javax.swing.JButton();
        cmdNextPanel = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lblPartyName = new javax.swing.JLabel();
        cmbMainCodeType = new javax.swing.JComboBox();
        jLabel25 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        cmdRemarksBig = new javax.swing.JButton();
        Detail = new javax.swing.JPanel();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdRemove = new javax.swing.JButton();
        Approval = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack2 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        Status = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 650, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" SALES INVOICE DUE DATE");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 650, 25);

        MainPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MainPanelMouseClicked(evt);
            }
        });

        Header.setLayout(null);

        lblAccountID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountID.setText("Doc No. :");
        Header.add(lblAccountID);
        lblAccountID.setBounds(10, 18, 60, 15);

        txtDocNo.setName("PARTY_ID");
        txtDocNo.setEnabled(false);
        txtDocNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDocNoKeyPressed(evt);
            }
        });

        Header.add(txtDocNo);
        txtDocNo.setBounds(75, 16, 120, 19);

        lblSubCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode.setText("Date :");
        Header.add(lblSubCode);
        lblSubCode.setBounds(200, 19, 40, 15);

        txtDocDate.setName("PARTY_CODE");
        txtDocDate.setNextFocusableComponent(txtRemarks);
        txtDocDate.setEnabled(false);
        Header.add(txtDocDate);
        txtDocDate.setBounds(245, 16, 120, 19);

        HeaderDetail.setLayout(null);

        HeaderDetail.setBorder(new javax.swing.border.EtchedBorder());
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Party Code :");
        HeaderDetail.add(jLabel2);
        jLabel2.setBounds(10, 40, 80, 20);

        txtPartyCode.setEnabled(false);
        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });

        HeaderDetail.add(txtPartyCode);
        txtPartyCode.setBounds(100, 40, 90, 20);

        TableInvoices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(TableInvoices);

        HeaderDetail.add(jScrollPane4);
        jScrollPane4.setBounds(10, 100, 520, 210);

        cmdGenerateInvoices.setText("Generate");
        cmdGenerateInvoices.setEnabled(false);
        cmdGenerateInvoices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGenerateInvoicesActionPerformed(evt);
            }
        });

        HeaderDetail.add(cmdGenerateInvoices);
        cmdGenerateInvoices.setBounds(540, 100, 90, 20);

        cmdSelectAll.setText("Select All");
        cmdSelectAll.setEnabled(false);
        cmdSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSelectAllActionPerformed(evt);
            }
        });

        HeaderDetail.add(cmdSelectAll);
        cmdSelectAll.setBounds(540, 170, 91, 20);

        cmdClearAll.setText("Clear All");
        cmdClearAll.setEnabled(false);
        cmdClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdClearAllActionPerformed(evt);
            }
        });

        HeaderDetail.add(cmdClearAll);
        cmdClearAll.setBounds(540, 200, 90, 20);

        cmdNextPanel.setText("Next");
        cmdNextPanel.setEnabled(false);
        cmdNextPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextPanelActionPerformed(evt);
            }
        });

        HeaderDetail.add(cmdNextPanel);
        cmdNextPanel.setBounds(540, 290, 90, 25);

        HeaderDetail.add(jLabel5);
        jLabel5.setBounds(210, 20, 310, 0);

        lblPartyName.setText(".....");
        HeaderDetail.add(lblPartyName);
        lblPartyName.setBounds(200, 40, 400, 20);

        cmbMainCodeType.setEnabled(false);
        HeaderDetail.add(cmbMainCodeType);
        cmbMainCodeType.setBounds(100, 10, 170, 20);

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel25.setText("Main Code :");
        HeaderDetail.add(jLabel25);
        jLabel25.setBounds(10, 10, 80, 20);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Remarks :");
        HeaderDetail.add(jLabel6);
        jLabel6.setBounds(10, 70, 80, 20);

        txtRemarks.setEnabled(false);
        HeaderDetail.add(txtRemarks);
        txtRemarks.setBounds(100, 70, 430, 20);

        cmdRemarksBig.setText("...");
        cmdRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemarksBigActionPerformed(evt);
            }
        });

        HeaderDetail.add(cmdRemarksBig);
        cmdRemarksBig.setBounds(540, 70, 33, 21);

        Header.add(HeaderDetail);
        HeaderDetail.setBounds(10, 60, 635, 320);

        MainPanel.addTab("Header Information", Header);

        Detail.setLayout(null);

        Detail.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Detail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DetailMouseClicked(evt);
            }
        });

        Detail.add(jTextArea2);
        jTextArea2.setBounds(177, 29, 0, 15);

        jLabel1.setText("Invoice Information :");
        Detail.add(jLabel1);
        jLabel1.setBounds(10, 10, 180, 15);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table);

        Detail.add(jScrollPane1);
        jScrollPane1.setBounds(12, 33, 620, 280);

        cmdRemove.setMnemonic('A');
        cmdRemove.setText("Remove");
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });

        Detail.add(cmdRemove);
        cmdRemove.setBounds(530, 320, 100, 25);

        MainPanel.addTab("Invoice Info.", Detail);

        Approval.setLayout(null);

        Approval.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Hierarchy :");
        Approval.add(jLabel31);
        jLabel31.setBounds(10, 18, 85, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });

        Approval.add(cmbHierarchy);
        cmbHierarchy.setBounds(100, 14, 184, 24);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("From :");
        Approval.add(jLabel32);
        jLabel32.setBounds(10, 52, 85, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Approval.add(txtFrom);
        txtFrom.setBounds(100, 50, 182, 19);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel35.setText("Remarks :");
        Approval.add(jLabel35);
        jLabel35.setBounds(10, 82, 85, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Approval.add(txtFromRemarks);
        txtFromRemarks.setBounds(100, 80, 468, 19);

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Your Action :");
        Approval.add(jLabel36);
        jLabel36.setBounds(10, 120, 85, 15);

        jPanel7.setLayout(null);

        jPanel7.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel7.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel7.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel7.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setEnabled(false);
        jPanel7.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Approval.add(jPanel7);
        jPanel7.setBounds(100, 120, 182, 100);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Send To :");
        Approval.add(jLabel33);
        jLabel33.setBounds(10, 232, 85, 15);

        cmbSendTo.setEnabled(false);
        Approval.add(cmbSendTo);
        cmbSendTo.setBounds(100, 228, 184, 24);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Remarks :");
        Approval.add(jLabel34);
        jLabel34.setBounds(10, 264, 85, 15);

        txtToRemarks.setEnabled(false);
        Approval.add(txtToRemarks);
        txtToRemarks.setBounds(100, 260, 516, 19);

        cmdBack2.setText("<< Back");
        Approval.add(cmdBack2);
        cmdBack2.setBounds(533, 326, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        Approval.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(575, 80, 33, 21);

        MainPanel.addTab("Approval", Approval);

        Status.setLayout(null);

        Status.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status :");
        Status.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        Status.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 614, 144);

        lblDocumentHistory.setText("Document Update History :");
        Status.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 191, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        Status.add(jScrollPane3);
        jScrollPane3.setBounds(13, 207, 473, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        Status.add(cmdViewHistory);
        cmdViewHistory.setBounds(498, 242, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        Status.add(cmdNormalView);
        cmdNormalView.setBounds(498, 273, 132, 24);

        cmdPreviewA.setText("Preview Report");
        Status.add(cmdPreviewA);
        cmdPreviewA.setBounds(498, 209, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        Status.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(498, 305, 132, 24);

        txtAuditRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtAuditRemarks.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        txtAuditRemarks.setEnabled(false);
        Status.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(499, 333, 129, 17);

        MainPanel.addTab("Status", Status);

        getContentPane().add(MainPanel);
        MainPanel.setBounds(2, 66, 654, 410);
        MainPanel.getAccessibleContext().setAccessibleName("Account Details");
        MainPanel.getAccessibleContext().setAccessibleDescription("Account Details");

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(1, 480, 650, 22);

    }//GEN-END:initComponents
    
    private void cmdRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdRemarksBigActionPerformed
    
    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
        // TODO add your handling code here:
        if(!txtPartyCode.getText().trim().equals("") && !EITLERPGLOBAL.getCombostrCode(cmbMainCodeType).equals("")) {
            String PartyName=data.getStringValueFromDB("SELECT PARTY_NAME FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE = '" + txtPartyCode.getText().trim() + "' AND MAIN_ACCOUNT_CODE = '" + EITLERPGLOBAL.getCombostrCode(cmbMainCodeType) + "' AND APPROVED=1 AND CANCELLED=0 ");
            lblPartyName.setText(PartyName);
        }
    }//GEN-LAST:event_txtPartyCodeFocusLost
    
    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        // TODO add your handling code here:
        if(!EITLERPGLOBAL.getCombostrCode(cmbMainCodeType).equals("")) {
            if(evt.getKeyCode()==112) {
                LOV aList=new LOV();
                
                aList.SQL="SELECT PARTY_CODE,PARTY_NAME FROM D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = '" + EITLERPGLOBAL.getCombostrCode(cmbMainCodeType) + "' AND APPROVED = 1 AND CANCELLED=0";
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=EITLERPGLOBAL.DatabaseURL;
                
                if(aList.ShowLOV()) {
                    txtPartyCode.setText(aList.ReturnVal);
                    lblPartyName.setText(clsPartyMaster.getAccountName("",txtPartyCode.getText()));
                }
                
            }
        }
    }//GEN-LAST:event_txtPartyCodeKeyPressed
    
    private void txtDocNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDocNoKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDocNoKeyPressed
    
    private void cmdNextPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextPanelActionPerformed
        // TODO add your handling code here:
     
        boolean flag=false;
        for(int i=0;i<=TableInvoices.getRowCount();i++) {
            if(DataModelInvoices.getValueAt(i,0).toString().equals("true")) {
                flag=true;
                break;
            }
        }
        if(flag== false) {
            JOptionPane.showMessageDialog(null,"Please Select Invoice");
            return;
        }
        FormatGrid();
        int cnt=0;
        for(int i=0;i<=TableInvoices.getRowCount();i++) {
            Object[] rowData=new Object[6];
            
            if(DataModelInvoices.getValueAt(i,0).toString().equals("true")) {
                cnt++;
                rowData[0]=Integer.toString(cnt);
                rowData[1]=DataModelInvoices.getValueByVariable("VOUCHER_NO", i);
                rowData[2]=DataModelInvoices.getValueByVariable("VOUCHER_SR_NO", i);
                rowData[3]=DataModelInvoices.getValueByVariable("INVOICE_NO", i);
                rowData[4]=DataModelInvoices.getValueByVariable("INVOICE_DATE", i);
                DataModel.addRow(rowData);
            }
        }
        MainPanel.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextPanelActionPerformed
    
    private void cmdClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdClearAllActionPerformed
        // TODO add your handling code here:
        for(int i=0;i<=TableInvoices.getRowCount();i++) {
            DataModelInvoices.setValueAt(Boolean.valueOf(false), i, 0);
        }
    }//GEN-LAST:event_cmdClearAllActionPerformed
    
    private void cmdSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSelectAllActionPerformed
        // TODO add your handling code here:
        for(int i=0;i<=TableInvoices.getRowCount();i++) {
            DataModelInvoices.setValueAt(Boolean.valueOf(true), i, 0);
        }
    }//GEN-LAST:event_cmdSelectAllActionPerformed
    
    private void cmdGenerateInvoicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGenerateInvoicesActionPerformed
        // TODO add your handling code here:
        
        if(txtPartyCode.getText().trim().equals("") || EITLERPGLOBAL.getCombostrCode(cmbMainCodeType).equals("")) {
            JOptionPane.showMessageDialog(null,"Select main code and insert party code");
            return;
        }
        FormatGridInvoices();
        InvoiceList();
    }//GEN-LAST:event_cmdGenerateInvoicesActionPerformed
    
    private void MainPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MainPanelMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_MainPanelMouseClicked
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if(Table.getRowCount()>0) {
            DataModel.removeRow(Table.getSelectedRow());
            UpdateSrNo();
        }
        
        
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void DetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DetailMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_DetailMouseClicked
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
        
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        objCancelDummyInvoice.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveFirst();
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        objCancelDummyInvoice.ShowHistory(EITLERPGLOBAL.gCompanyID, objCancelDummyInvoice.getAttribute("DOC_NO").getString());
        MoveFirst();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
        
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
        
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if(ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID,clsCancelDummyInvoice.ModuleID , objCancelDummyInvoice.getAttribute("DOC_NO").getString())) {
                cmbSendTo.setEnabled(true);
            }
            else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateFromCombo();
        }
        
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
        
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        objCancelDummyInvoice.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Approval;
    private javax.swing.JPanel Detail;
    private javax.swing.JPanel Header;
    private javax.swing.JPanel HeaderDetail;
    private javax.swing.JTabbedPane MainPanel;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel Status;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JTable TableInvoices;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbMainCodeType;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdClearAll;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdGenerateInvoices;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextPanel;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemarksBig;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdSelectAll;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel lblAccountID;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblPartyName;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblSubCode;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    
    private void SetFields(boolean pStat) {

        cmbMainCodeType.setEnabled(pStat);
        txtPartyCode.setEnabled(pStat);
        cmdGenerateInvoices.setEnabled(pStat);
        cmdSelectAll.setEnabled(pStat);
        cmdClearAll.setEnabled(pStat);
        cmbMainCodeType.setEnabled(pStat);
        cmdNextPanel.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        DataModel.TableReadOnly(!pStat);
        
        SetupApproval();
    }
    
    private void ClearFields() {
        
        
        txtDocNo.setText("");
        txtDocDate.setText("");
        txtRemarks.setText("");
        txtPartyCode.setText("");
        lblPartyName.setText("");
        cmbMainCodeType.setSelectedIndex(0);
        
        FormatGrid();
        FormatGridInvoices();
        FormatGridA();
        FormatGridHS();
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                if(objCancelDummyInvoice.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(objCancelDummyInvoice.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(objCancelDummyInvoice.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
        }
        catch(Exception c) {
            
        }
        //============================================//
        
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=clsCancelDummyInvoice.ModuleID;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        
        ClearFields();
        
        txtDocNo.setText(objCancelDummyInvoice.getAttribute("DOC_NO").getString());
        txtDocDate.setText(EITLERPGLOBAL.formatDate(objCancelDummyInvoice.getAttribute("DOC_DATE").getString()));
        txtPartyCode.setText(objCancelDummyInvoice.getAttribute("SUB_ACCOUNT_CODE").getString());
        EITLERPGLOBAL.setComboIndex(cmbMainCodeType,objCancelDummyInvoice.getAttribute("MAIN_ACCOUNT_CODE").getString());
        txtRemarks.setText(objCancelDummyInvoice.getAttribute("REMARKS").getString());
        lblTitle.setText("CANCEL DUMMY INVOICE  - "+txtDocNo.getText());
        
        
        //************ Misc. Display *****************//
        txtToRemarks.setText("");
        SetupApproval();
        
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,objCancelDummyInvoice.getAttribute("HIERARCHY_ID").getInt());
        
        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List=new HashMap();
        String DocNo=objCancelDummyInvoice.getAttribute("DOC_NO").getString();
        List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, clsCancelDummyInvoice.ModuleID , DocNo);
        for(int i=1;i<=List.size();i++) {
            clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
            Object[] rowData=new Object[7];
            
            rowData[0]=Integer.toString(i);
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
            rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
            rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
            rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
            rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
            rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
            
            DataModelA.addRow(rowData);
        }
        //============================================================//
        
        
        //=========================== Audit Trail ===========================//
        FormatGridHS();
        
        HashMap History=clsCancelDummyInvoice.getHistoryList(EITLERPGLOBAL.gCompanyID, objCancelDummyInvoice.getAttribute("DOC_NO").getString());
        for(int i=1;i<=History.size();i++) {
            clsCancelDummyInvoice ObjHistory=(clsCancelDummyInvoice)History.get(Integer.toString(i));
            Object[] rowData=new Object[5];
            Object o= ObjHistory.getAttribute("UPDATED_BY").getObj();
            String test = ObjHistory.getAttribute("UPDATED_BY").getObj().toString();
            rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
            //rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(long)ObjHistory.getAttribute("UPDATED_BY").getVal());
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,Long.parseLong(ObjHistory.getAttribute("UPDATED_BY").getObj().toString()));
            rowData[2]=ObjHistory.getAttribute("ENTRY_DATE").getString();
            
            String ApprovalStatus="";
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus="Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus="Final Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus="Waiting";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus="Rejected";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus="Pending";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus="Skiped";
            }
            
            rowData[3]=ApprovalStatus;
            rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
            
            DataModelHS.addRow(rowData);
        }
        //=========================== Audit Trail Over ===========================//
        
        
        FormatGrid();
        FormatGridInvoices();
        for(int i=1;i<=objCancelDummyInvoice.colItems.size();i++) {
            clsCancelDummyInvoiceItem objItem=(clsCancelDummyInvoiceItem) objCancelDummyInvoice.colItems.get(Integer.toString(i));
            //-------------------------------------
            
            Object[] rowData=new Object[1];
            DataModel.addRow(rowData);
            int NewRow=Table.getRowCount()-1;
            
            //FOR THE DETAIL TABLE SECOND GRID
            DataModel.setValueByVariable("SR_NO",Integer.toString(i), NewRow);
            DataModel.setValueByVariable("VOUCHER_NO",objItem.getAttribute("VOUCHER_NO").getString(),NewRow);
            DataModel.setValueByVariable("VOUCHER_SR_NO",Integer.toString(objItem.getAttribute("VOUCHER_SR_NO").getInt()),NewRow);
            DataModel.setValueByVariable("INVOICE_NO",objItem.getAttribute("INVOICE_NO").getString(),NewRow);
            DataModel.setValueByVariable("INVOICE_DATE",EITLERPGLOBAL.formatDate(objItem.getAttribute("INVOICE_DATE").getString()),NewRow);
            
            //-------------------------------------
        }
        //********************************************//
    }
    
    //Sets data to the Class Object
    private void SetData() {
        objCancelDummyInvoice.setAttribute("PREFIX",SelPrefix);
        objCancelDummyInvoice.setAttribute("SUFFIX",SelSuffix);
        objCancelDummyInvoice.setAttribute("FFNO",FFNo);
        
        objCancelDummyInvoice.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        objCancelDummyInvoice.setAttribute("DOC_NO",txtDocNo.getText());
        objCancelDummyInvoice.setAttribute("DOC_DATE",txtDocDate.getText());
        objCancelDummyInvoice.setAttribute("REMARKS",txtRemarks.getText().trim());
        
        //----- Update Approval Specific Fields -----------//
        objCancelDummyInvoice.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        objCancelDummyInvoice.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        objCancelDummyInvoice.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        objCancelDummyInvoice.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        objCancelDummyInvoice.setAttribute("MAIN_ACCOUNT_CODE",EITLERPGLOBAL.getCombostrCode(cmbMainCodeType));
        objCancelDummyInvoice.setAttribute("SUB_ACCOUNT_CODE",txtPartyCode.getText().trim());
        objCancelDummyInvoice.setAttribute("REJECTED_REASON","");
        
        if(OpgApprove.isSelected()) {
            objCancelDummyInvoice.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            objCancelDummyInvoice.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            objCancelDummyInvoice.setAttribute("APPROVAL_STATUS","R");
            objCancelDummyInvoice.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
            objCancelDummyInvoice.setAttribute("REJECTED_REASON",txtToRemarks.getText().trim());
        }
        
        if(OpgHold.isSelected()) {
            objCancelDummyInvoice.setAttribute("APPROVAL_STATUS","H");
        }
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            objCancelDummyInvoice.setAttribute("CREATED_BY",EITLERPGLOBAL.gUserID);
            objCancelDummyInvoice.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDate());
            objCancelDummyInvoice.setAttribute("MODIFIED_BY","");
            objCancelDummyInvoice.setAttribute("MODIFIED_DATE","0000-00-00");
        } else {
            objCancelDummyInvoice.setAttribute("CREATED_BY","");
            objCancelDummyInvoice.setAttribute("CREATED_DATE","0000-00-00");
            objCancelDummyInvoice.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gUserID);
            objCancelDummyInvoice.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDate());
        }
        
        objCancelDummyInvoice.colItems.clear();
        
        for(int i=0;i<Table.getRowCount();i++) {
            clsCancelDummyInvoiceItem objItem = new clsCancelDummyInvoiceItem();
            
            objItem.setAttribute("SR_NO",i+1);
            objItem.setAttribute("VOUCHER_NO",DataModel.getValueByVariable("VOUCHER_NO", i));
            objItem.setAttribute("VOUCHER_SR_NO",Integer.parseInt(DataModel.getValueByVariable("VOUCHER_SR_NO", i)));
            objItem.setAttribute("INVOICE_NO",DataModel.getValueByVariable("INVOICE_NO", i));
            objItem.setAttribute("INVOICE_DATE",DataModel.getValueByVariable("INVOICE_DATE", i));
            objCancelDummyInvoice.colItems.put(Integer.toString(objCancelDummyInvoice.colItems.size()+1),objItem);
        }
        //--------------------------------------------------------------------------------------------------//
        
    }
    
    
    private void SetMenuForRights() {
        
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,12211)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,12212)) {
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }
    }
    
    private void Add() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        //Now Generate new document no.
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=clsCancelDummyInvoice.ModuleID;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsCancelDummyInvoice.ModuleID , FFNo,  false));
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
            txtDocDate.requestFocus();
            
            lblTitle.setText("SALES INVOICE DUE DATE - "+txtDocNo.getText());
            lblTitle.setBackground(Color.GRAY);
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
        
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=objCancelDummyInvoice.getAttribute("DOC_NO").getString();
        
        if(objCancelDummyInvoice.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            
            EITLERPGLOBAL.ChangeCursorToWait(this);
            
            EditMode=EITLERPGLOBAL.EDIT;
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            SetupApproval();
            //----------------//
            
            if(ApprovalFlow.IsCreator(clsCancelDummyInvoice.ModuleID ,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,12212)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            
            SetupApproval();
            DisableToolbar();
            txtDocDate.requestFocus();
            
            EITLERPGLOBAL.ChangeCursorToDefault(this);
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
        
        
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        if(objCancelDummyInvoice.Delete(EITLERPGLOBAL.gNewUserID)) {
            MoveLast();
        }
    }
    
    private void Save() {
        
        if(!Validate()) {
            return;
        }
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(objCancelDummyInvoice.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null," "+objCancelDummyInvoice.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(objCancelDummyInvoice.Update()) {
                //Nothing to do
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null," "+objCancelDummyInvoice.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
        
        try {
            frmPA.RefreshView();
        }catch(Exception e){}
        
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Find() {
        /*Loader ObjLoader=new Loader(this,"EITLERP.Sales.frmCancelDummyInvoiceFind",true);
        frmCancelDummyInvoiceFind ObjReturn= (frmCancelDummyInvoiceFind) ObjLoader.getObj();
         
        if(ObjReturn.Cancelled==false) {
            if(!objCancelDummyInvoice.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveFirst();
        }*/
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objCancelDummyInvoice.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objCancelDummyInvoice.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objCancelDummyInvoice.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objCancelDummyInvoice.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    public void FindEx(int pCompanyID,String pDocNo) {
        objCancelDummyInvoice.FilterEx(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND DOC_NO='"+pDocNo+"' ",pCompanyID);
        objCancelDummyInvoice.MoveFirst();
        DisplayData();
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        
    }
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    
    private void SetupApproval() {
        
        /*if(cmbHierarchy.getItemCount()>1) {
            cmbHierarchy.setEnabled(true);
        }*/
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, clsCancelDummyInvoice.ModuleID , objCancelDummyInvoice.getAttribute("DOC_NO").getString());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,clsCancelDummyInvoice.ModuleID ,FromUserID,objCancelDummyInvoice.getAttribute("DOC_NO").getString());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
        
    }
    
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, clsCancelDummyInvoice.ModuleID ,objCancelDummyInvoice.getAttribute("DOC_NO").getString());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
        
    }
    
    private void GenerateRejectedUserCombo() {
        HashMap List=new HashMap();
        HashMap DeptList=new HashMap();
        HashMap DeptUsers=new HashMap();
        
        //----- Generate cmbType ------- //
        cmbToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);
        
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            
            
            /// NEW CODE ///
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID,clsCancelDummyInvoice.ModuleID , objCancelDummyInvoice.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, clsCancelDummyInvoice.ModuleID, objCancelDummyInvoice.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt() , EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(( ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            }
            else {
                if((ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///
            
            
            
        }
        //------------------------------ //
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, clsCancelDummyInvoice.ModuleID , objCancelDummyInvoice.getAttribute("DOC_NO").getString());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
        
    }
    
    
    private void GenerateCombos() {
        
        ComboData aData=new ComboData();
        try {
            //Generates Hierarchy Combo Boxes
            HashMap List=new HashMap();
            String strCondition="";
            ResultSet rsTmp;
            
            
            
            cmbHierarchyModel=new EITLComboModel();
            cmbHierarchy.removeAllItems();
            cmbHierarchy.setModel(cmbHierarchyModel);
            
            List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsCancelDummyInvoice.ModuleID);
            
            if(EditMode==EITLERPGLOBAL.EDIT) {
                List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsCancelDummyInvoice.ModuleID );
            }
            for(int i=1;i<=List.size();i++) {
                clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
                aData=new ComboData();
                aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
                aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
                cmbHierarchyModel.addElement(aData);
            }
        }
        catch(Exception e) {
            
        }
        //------------------------------//
        
        
        //-------Main Code Type --------//
        cmbMainCodeTypeModel=new EITLComboModel();
        cmbMainCodeType.removeAllItems();
        cmbMainCodeType.setModel(cmbMainCodeTypeModel);
        
        aData=new ComboData();
        aData.strCode="";
        aData.Text="Select Main Code";
        cmbMainCodeTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="210027";
        aData.Text="Suiting";
        cmbMainCodeTypeModel.addElement(aData);
        
        
        aData=new ComboData();
        aData.strCode="210010";
        aData.Text="Felt";
        cmbMainCodeTypeModel.addElement(aData);
        
        //------------------------------//
    }
    
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Header.getComponentCount()-1;i++) {
            if(Header.getComponent(i).getName()!=null) {
                
                FieldName=Header.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Header.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//
    }
    
    
    private void FormatGrid() {
        
        Updating=true; //Stops recursion
        
        try {
            
            cmdRemove.requestFocus();
            
            DataModel=new EITLTableModel();
            Table.removeAll();
            
            Table.setModel(DataModel);
            TableColumnModel ColModel=Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            DataModel.addColumn("Sr."); //0
            DataModel.addColumn("Voucher No."); //0
            DataModel.addColumn("Voucher Sr. No."); //0
            DataModel.addColumn("Invoice No"); //1
            DataModel.addColumn("Invoice Date"); //2
            
            
            DataModel.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModel.SetVariable(1,"VOUCHER_NO"); //0 - Read Only
            DataModel.SetVariable(2,"VOUCHER_SR_NO"); //0 - Read Only
            DataModel.SetVariable(3,"INVOICE_NO"); //1 - Read Only
            DataModel.SetVariable(4,"INVOICE_DATE"); //2 - Read Only
            
            
            
            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(1);
            DataModel.SetReadOnly(2);
            DataModel.SetReadOnly(3);
            DataModel.SetReadOnly(4);
            
            //            //----- Install Table Model Event Listener -------//
            //            Table.getModel().addTableModelListener(new TableModelListener() {
            //                public void tableChanged(TableModelEvent e) {
            //                    if (e.getType() == TableModelEvent.UPDATE) {
            //                        int col = e.getColumn();
            //
            //                        //=========== Cell Update Prevention Check ===========//
            //                        String curValue=(String)Table.getValueAt(Table.getSelectedRow(), e.getColumn());
            //                        if(curValue.equals(cellLastValue)) {
            //                            return;
            //                        }
            //                        //====================================================//
            //
            //                        if(DoNotEvaluate) {
            //                            return;
            //                        }
            //
            //                        if(col==DataModel.getColFromVariable("DAYS")) {
            //                            String DueDate = DataModel.getValueByVariable("DUE_DATE", Table.getSelectedRow());
            //                            int Days = Integer.parseInt(DataModel.getValueByVariable("DAYS", Table.getSelectedRow()));
            //                            DataModel.setValueByVariable("NEW_DATE", EITLERPGLOBAL.formatDate(EITLERPGLOBAL.addDaysToDate(EITLERPGLOBAL.formatDateDB(DueDate), Days, "yyyy-MM-dd")), Table.getSelectedRow());
            //                        }
            //                    }
            //                }
            //            });
        }
        catch(Exception e) {
        }
        Updating=false;
        //Table formatting completed
    }
    
    
    private void FormatGridInvoices() {
        
        DataModelInvoices=new EITLTableModel();
        TableInvoices.removeAll();
        
        TableInvoices.setModel(DataModelInvoices);
        TableColumnModel ColModel=TableInvoices.getColumnModel();
        TableInvoices.setAutoResizeMode(TableInvoices.AUTO_RESIZE_OFF);
        
        DataModelInvoices.addColumn("Select");
        DataModelInvoices.addColumn("Sr."); //0
        DataModelInvoices.addColumn("Voucher No."); //0
        DataModelInvoices.addColumn("Voucher Sr. No."); //0
        DataModelInvoices.addColumn("Invoice No."); //1
        DataModelInvoices.addColumn("Invoice Date."); //2
        
        
        
        
        Rend.setCustomComponent(0,"CheckBox");
        TableInvoices.getColumnModel().getColumn(0).setCellRenderer(Rend);
        TableInvoices.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));
        
        
        DataModelInvoices.SetVariable(0," ");
        DataModelInvoices.SetVariable(1,"SR_NO"); //0 - Read Only
        DataModelInvoices.SetVariable(2,"VOUCHER_NO"); //0 - Read Only
        DataModelInvoices.SetVariable(3,"VOUCHER_SR_NO"); //0 - Read Only
        DataModelInvoices.SetVariable(4,"INVOICE_NO"); //1 - Read Only
        DataModelInvoices.SetVariable(5,"INVOICE_DATE"); //2 - Read Only
        DataModelInvoices.TableReadOnly(false);
        
        for(int i=1;i<=5;i++) {
            DataModelInvoices.SetReadOnly(i);
        }
        
    }
    
    
    private boolean Validate() {
        
        if(txtPartyCode.getText().trim().equals("") || EITLERPGLOBAL.getCombostrCode(cmbMainCodeType).equals("")) {
            JOptionPane.showMessageDialog(null,"Select main code and insert party code");
            return false;
        }
        
        if(Table.getRowCount()<=0) {
            JOptionPane.showMessageDialog(null,"Select atleast on row...");
            return false;
        }
        
        if(OpgReject.isSelected() && txtToRemarks.equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert rejection reason.");
            return false;
        }
        
        return true;
    }
    
    private void InvoiceList() {
        try {
            //suiting invoice_tyepe 1  payment code(2,4,8) felt 2 (2,8)
            
            String InvoiceType = "";
            String Condition = "";
            String MainCode= String.valueOf(EITLERPGLOBAL.getCombostrCode(cmbMainCodeType));
            if(String.valueOf(EITLERPGLOBAL.getCombostrCode(cmbMainCodeType)).equals("210027")) {
                InvoiceType = "DUMS";
            }
            else if(String.valueOf(EITLERPGLOBAL.getCombostrCode(cmbMainCodeType)).equals("210010")) {
                InvoiceType = "DUMF";
            }
            
            String Sql="SELECT B.VOUCHER_NO,B.SR_NO,B.INVOICE_NO,B.INVOICE_DATE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B " +
            "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 AND B.EFFECT='C' AND A.VOUCHER_TYPE IN (6,7,8,9,12) " +
            "AND (B.MATCHED=0 OR B.MATCHED IS NULL) AND B.MAIN_ACCOUNT_CODE='"+EITLERPGLOBAL.getCombostrCode(cmbMainCodeType)+"' " +
            "AND B.SUB_ACCOUNT_CODE='"+txtPartyCode.getText().trim()+"' AND B.INVOICE_NO LIKE '"+InvoiceType+"%' " +
            "ORDER BY A.VOUCHER_DATE,A.VOUCHER_NO,B.SR_NO";
            
            
            ResultSet rsInvoices = data.getResult(Sql,FinanceGlobal.FinURL);
            int SrNo=0;
            if(rsInvoices.getRow()>0) {
                while(!rsInvoices.isAfterLast()) {
                    Object[] rowData=new Object[6];
                    SrNo++;
                    rowData[0]=Boolean.valueOf(false);
                    rowData[1]=Integer.toString(SrNo);
                    rowData[2]=rsInvoices.getString("VOUCHER_NO");
                    rowData[3]=rsInvoices.getString("SR_NO");
                    rowData[4]=rsInvoices.getString("INVOICE_NO");
                    rowData[5]=EITLERPGLOBAL.formatDate(rsInvoices.getString("INVOICE_DATE"));
                    DataModelInvoices.addRow(rowData);
                    rsInvoices.next();
                }
            } else {
                JOptionPane.showMessageDialog(this,"No Record Found");
            }
        } catch(Exception e){
            e.printStackTrace();
        }
    }
    
    private void UpdateSrNo() {
        int SrCol=DataModel.getColFromVariable("SR_NO");
        
        for(int i=0;i<Table.getRowCount();i++) {
            Table.setValueAt(Integer.toString(i+1), i, SrCol);
        }
    }
}
