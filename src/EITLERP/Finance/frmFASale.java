/*
 * frmFASale.java
 * Created By Bhavesh Patel
 * Created on May 19, 2011, 2:35 PM
 */

package EITLERP.Finance;

/**
 *
 * @author  Bhavesh Patel
 */
/*<APPLET CODE=frmFASale.class HEIGHT=550 WIDTH=665></APPLET>*/

import javax.swing.*;
import java.awt.*;
import EITLERP.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import javax.swing.text.*;
import java.awt.event.*;
import java.net.*;
import EITLERP.Utils.*;
import java.sql.ResultSet;
import java.math.BigDecimal;

public class frmFASale extends javax.swing.JApplet {
    
    private int EditMode=0;
    
    public boolean CopyHeader=true;
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromID=0;
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbStatusModel;
    private EITLComboModel cmbForDeptModel;
    private EITLComboModel cmbBuyerModel;
    private EITLComboModel cmbTypeModel;
    private EITLTableModel DataModel;
    private EITLTableModel DataModelA;
    private EITLComboModel cmbSendToModel;
    // private EITLTableModel DataModel=new EITLTableModel();
    private boolean Updating=false;
    
    private boolean HistoryView=false;
    private String theDocNo="";
    private EITLTableModel DataModelHS;
    
    private boolean DoNotEvaluate=false;
    
    public frmPendingApprovals frmPA;
    
    private clsFASSale ObjFassale;
    
    private EITLTableCellRenderer CellPainter=new EITLTableCellRenderer();
    private EITLTableCellRenderer Renderer=new EITLTableCellRenderer();
    String cellLastValue="";
    
    /** Creates new form frmTemplate */
    public void init() {
        System.gc();
        setSize(675,530);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        FormatGrid();
        GenerateCombos();
        FormatGridA();
        SetMenuForRights();
        ObjFassale = new clsFASSale();
        DataModel.TableReadOnly(true);
        
        if(getName().equals("Link")) {
            
        }
        else {
            if(ObjFassale.LoadData(EITLERPGLOBAL.gCompanyID)) {
                ObjFassale.MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+ObjFassale.LastError);
            }
        }
        
        txtAuditRemarks.setVisible(false);
        DataModel.TableReadOnly(true);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdRemove = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cmdNext1 = new javax.swing.JButton();
        lblRevNo = new javax.swing.JLabel();
        cmdRemarksBig = new javax.swing.JButton();
        cmdSelectAsset = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        txtPartyName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtInvoiceNo = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtInvoiceDate = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtSaleDate = new javax.swing.JTextField();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack2 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText("FIXED ASSET SALE");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 666, 25);

        Tab1.setLayout(null);

        Tab1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tab1MouseClicked(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Sale No. : ");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel2);
        jLabel2.setBounds(5, 15, 100, 20);

        txtDocNo.setEditable(false);
        txtDocNo.setNextFocusableComponent(txtRemarks);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(110, 15, 104, 20);

        jLabel3.setText("Date : ");
        Tab1.add(jLabel3);
        jLabel3.setBounds(324, 15, 40, 20);

        txtDocDate.setEditable(false);
        txtDocDate.setName("REQ_DATE");
        txtDocDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDocDateFocusGained(evt);
            }
        });

        Tab1.add(txtDocDate);
        txtDocDate.setBounds(372, 15, 102, 20);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Remarks : ");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel8);
        jLabel8.setBounds(5, 115, 100, 20);

        txtRemarks.setName("REMARKS");
        txtRemarks.setNextFocusableComponent(cmdSelectAsset);
        txtRemarks.setEnabled(false);
        txtRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRemarksFocusGained(evt);
            }
        });

        Tab1.add(txtRemarks);
        txtRemarks.setBounds(110, 115, 366, 19);

        jScrollPane1.setEnabled(false);
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });

        jScrollPane1.setViewportView(Table);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 190, 628, 140);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setNextFocusableComponent(cmdNext1);
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        cmdRemove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdRemoveFocusGained(evt);
            }
        });

        Tab1.add(cmdRemove);
        cmdRemove.setBounds(444, 340, 86, 25);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel3);
        jPanel3.setBounds(10, 145, 632, 5);

        cmdNext1.setMnemonic('X');
        cmdNext1.setText("Next >>");
        cmdNext1.setNextFocusableComponent(cmdRemove);
        cmdNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext1ActionPerformed(evt);
            }
        });

        Tab1.add(cmdNext1);
        cmdNext1.setBounds(536, 340, 102, 25);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(220, 15, 44, 20);

        cmdRemarksBig.setText("...");
        cmdRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemarksBigActionPerformed(evt);
            }
        });

        Tab1.add(cmdRemarksBig);
        cmdRemarksBig.setBounds(480, 115, 33, 21);

        cmdSelectAsset.setText("Select Asset");
        cmdSelectAsset.setNextFocusableComponent(cmdNext1);
        cmdSelectAsset.setEnabled(false);
        cmdSelectAsset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSelectAssetActionPerformed(evt);
            }
        });
        cmdSelectAsset.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdSelectAssetFocusGained(evt);
            }
        });

        Tab1.add(cmdSelectAsset);
        cmdSelectAsset.setBounds(470, 160, 150, 21);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Party Code : ");
        jLabel9.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel9);
        jLabel9.setBounds(5, 40, 100, 20);

        txtPartyCode.setName("REQ_DATE");
        txtPartyCode.setNextFocusableComponent(txtSaleDate);
        txtPartyCode.setEnabled(false);
        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });

        Tab1.add(txtPartyCode);
        txtPartyCode.setBounds(110, 40, 102, 20);

        txtPartyName.setEditable(false);
        txtPartyName.setName("REMARKS");
        txtPartyName.setNextFocusableComponent(cmdSelectAsset);
        Tab1.add(txtPartyName);
        txtPartyName.setBounds(220, 40, 366, 19);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Invoice No. : ");
        jLabel10.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel10);
        jLabel10.setBounds(5, 90, 100, 20);

        txtInvoiceNo.setName("REQ_DATE");
        txtInvoiceNo.setNextFocusableComponent(txtInvoiceDate);
        txtInvoiceNo.setEnabled(false);
        txtInvoiceNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtInvoiceNoFocusGained(evt);
            }
        });

        Tab1.add(txtInvoiceNo);
        txtInvoiceNo.setBounds(110, 90, 102, 20);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Invoice Date : ");
        jLabel11.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel11);
        jLabel11.setBounds(220, 90, 100, 20);

        txtInvoiceDate.setName("REQ_DATE");
        txtInvoiceDate.setNextFocusableComponent(txtRemarks);
        txtInvoiceDate.setEnabled(false);
        txtInvoiceDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtInvoiceDateFocusGained(evt);
            }
        });

        Tab1.add(txtInvoiceDate);
        txtInvoiceDate.setBounds(330, 90, 102, 20);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Sale Date : ");
        jLabel12.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel12);
        jLabel12.setBounds(5, 65, 100, 20);

        txtSaleDate.setName("REQ_DATE");
        txtSaleDate.setNextFocusableComponent(txtInvoiceNo);
        txtSaleDate.setEnabled(false);
        txtSaleDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSaleDateFocusGained(evt);
            }
        });

        Tab1.add(txtSaleDate);
        txtSaleDate.setBounds(110, 65, 102, 20);

        Tab.addTab("Asset Sale Information", Tab1);

        Tab2.setLayout(null);

        Tab2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });

        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 15, 110, 20);

        cmbHierarchy.setEditable(true);
        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });

        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(125, 14, 184, 24);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 50, 110, 20);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(125, 50, 182, 19);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 80, 110, 20);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(125, 78, 468, 19);

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 116, 110, 20);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.setEnabled(false);
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.setEnabled(false);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.setEnabled(false);
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.setEnabled(false);
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });

        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(125, 120, 182, 100);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 232, 110, 20);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });

        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(125, 228, 184, 24);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 264, 110, 20);

        txtToRemarks.setNextFocusableComponent(cmdBack2);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });

        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(125, 260, 516, 19);

        cmdBack2.setText("<< Back");
        cmdBack2.setNextFocusableComponent(cmdRemove);
        cmdBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack2ActionPerformed(evt);
            }
        });

        Tab2.add(cmdBack2);
        cmdBack2.setBounds(534, 300, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(600, 77, 33, 21);

        Tab.addTab("Approval", Tab2);

        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 614, 144);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 191, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(13, 207, 473, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        jPanel1.add(cmdViewHistory);
        cmdViewHistory.setBounds(498, 242, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        jPanel1.add(cmdNormalView);
        cmdNormalView.setBounds(498, 273, 132, 24);

        cmdPreviewA.setText("Preview Report");
        cmdPreviewA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewAActionPerformed(evt);
            }
        });

        jPanel1.add(cmdPreviewA);
        cmdPreviewA.setBounds(498, 209, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(498, 305, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel1.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(506, 334, 129, 19);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 654, 400);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(10, 470, 650, 22);

    }//GEN-END:initComponents

    private void txtInvoiceDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInvoiceDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Invoice Date ....");
    }//GEN-LAST:event_txtInvoiceDateFocusGained

    private void txtInvoiceNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInvoiceNoFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Invoice Number ....");
    }//GEN-LAST:event_txtInvoiceNoFocusGained

    private void txtSaleDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSaleDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Sale Date ....");
    }//GEN-LAST:event_txtSaleDateFocusGained
    
    private void txtPartyCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter party code ....");
    }//GEN-LAST:event_txtPartyCodeFocusGained
    
    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
        // TODO add your handling code here:
        try {
            
            if(txtPartyCode.getText().equals("")) {
                txtPartyName.setText("");
            }
            else {
                String PartyName=clsPartyMaster.getAccountName("210034",txtPartyCode.getText());
                txtPartyName.setText(PartyName);
            }
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_txtPartyCodeFocusLost
    
    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        // TODO add your handling code here:
        
        try {
            
            if(evt.getKeyCode()==112) {
                LOV aList=new LOV();
                
                aList.SQL="SELECT PARTY_CODE,PARTY_NAME  "+
                "FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210034 " +
                "AND APPROVED = 1 AND CANCELLED = 0 AND COMPANY_ID = '" + EITLERPGLOBAL.gCompanyID + "' ORDER BY PARTY_NAME";
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                aList.UseSpecifiedConn=true;
                aList.dbURL=FinanceGlobal.FinURL;
                
                if(aList.ShowLOV()) {
                    txtPartyCode.setText(aList.ReturnVal);
                    txtPartyName.setText(clsPartyMaster.getAccountName("210034", txtPartyCode.getText()));
                }
                
            }
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_txtPartyCodeKeyPressed
    
    private void cmdSelectAssetFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdSelectAssetFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the asset list");
    }//GEN-LAST:event_cmdSelectAssetFocusGained
    
    private void cmdSelectAssetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSelectAssetActionPerformed
        // TODO add your handling code here:
        
        SelectAsset ObjAsset=new SelectAsset();
        // ObjAsset.AllItems=true;
        if(ObjAsset.ShowList()) {
            
            for(int i=1;i<=ObjAsset.colSelItems.size();i++) {
                clsFASMasterItem ObjItem=(clsFASMasterItem)ObjAsset.colSelItems.get(Integer.toString(i));
                
                for(int r=0;r<Table.getRowCount();r++) {
                    String AssetNo=(String)ObjItem.getAttribute("ASSET_NO").getObj();
                    int AssetSrNo=(int)ObjItem.getAttribute("SR_NO").getVal();
                    
                    String tAssetNo=(String)DataModel.getValueByVariable("ASSET_NO", r);
                    int tAssetSrNo=Integer.parseInt((String)DataModel.getValueByVariable("DETAIL_SR_NO",r));
                    
                    if(AssetNo.equals(tAssetNo)&&(AssetSrNo==tAssetSrNo)) {
                        JOptionPane.showMessageDialog(null,"Asset No. :  "+AssetNo+"  and Sr.No : "+AssetSrNo+" is already exist");
                        return;
                    }
                    
                    if(!AssetNo.equals(tAssetNo)) {
                        JOptionPane.showMessageDialog(null,"At this time you can enter only  Asset No. : "+tAssetNo+".");
                        return;
                    }
                    
                    
                }
                
                
            }
            
                             
            int test  = Table.getRowCount();
            for(int i=1;i<=ObjAsset.colSelItems.size();i++) {
                clsFASMasterItem ObjItem=(clsFASMasterItem) ObjAsset.colSelItems.get(Integer.toString(i));
                
                
                //String DetailSrNo = DataModel.getValueByVariable("SR_NO",i);
                
                String Sql = "SELECT B.* FROM D_FAS_SALE_HEADER A,D_FAS_SALE_DETAIL B  "+
                "WHERE A.COMPANY_ID = '" + EITLERPGLOBAL.gCompanyID + "' "+
                "AND A.SALE_NO = B.SALE_NO "+
                "AND B.DETAIL_SR_NO = '" + ObjItem.getAttribute("SR_NO").getInt() + "' "+
                //"AND B.SR_NO = '" + ObjItem.getAttribute("SR_NO").getInt() + "' "+
                "AND B.ASSET_NO = '" + ObjItem.getAttribute("ASSET_NO").getString() + "' AND A.CANCELLED = 0 AND A.APPROVED = 0 ORDER BY B.SALE_NO ";
                
                if(data.IsRecordExist(Sql,FinanceGlobal.FinURL)) {
                    JOptionPane.showMessageDialog(null,"Asset No. : "+ObjItem.getAttribute("ASSET_NO").getString()+" and Sr.No :  "+ObjItem.getAttribute("SR_NO").getInt()+"  is already used ");
                    return;
                }
                
                String SQL = "SELECT B.* FROM D_FAS_MASTER_HEADER A,D_FAS_MASTER_DETAIL B "+
                "WHERE A.COMPANY_ID ='" + EITLERPGLOBAL.gCompanyID + "' "+
                "AND A.ASSET_NO = B.ASSET_NO AND B.SR_NO = '" + ObjItem.getAttribute("SR_NO").getInt() + "' " +
                "AND A.ASSET_NO = '" + ObjItem.getAttribute("ASSET_NO").getString() + "' AND B.ASSET_STATUS>0 AND A.APPROVED = 0 ";
                
                
                if(data.IsRecordExist(SQL,FinanceGlobal.FinURL)) {
                    JOptionPane.showMessageDialog(null,"Asset No. : "+ObjItem.getAttribute("ASSET_NO").getString()+"  and Sr.No :  "+ObjItem.getAttribute("SR_NO").getInt()+" is under approval or already Sell");
                    return;
                }
               
                //Add Blank Row
                Object[] rowData=new Object[1];
                DataModel.addRow(rowData);
                String ItemName = "";
                int NewRow=Table.getRowCount()-1;
                
                DataModel.setValueByVariable("SR_NO",Integer.toString(i),NewRow);
                DataModel.setValueByVariable("ASSET_NO",(String)ObjItem.getAttribute("ASSET_NO").getObj(),NewRow);
                DataModel.setValueByVariable("ITEM_ID",(String)ObjItem.getAttribute("ITEM_ID").getObj(),NewRow);
                String lItemID = (String)ObjItem.getAttribute("ITEM_ID").getObj();
                
                DataModel.setValueByVariable("DETAIL_SR_NO", Integer.toString((int)ObjItem.getAttribute("SR_NO").getVal()),NewRow);
                if(lItemID.substring(0,2).equals("DI"))
                {
                  ItemName = data.getStringValueFromDB("SELECT ITEM_DESC FROM D_FAS_MASTER_HEADER WHERE ASSET_TYPE = '2'  AND ITEM_ID = '" + lItemID + "' ",FinanceGlobal.FinURL);
                  
                }
                else
                {    
                  ItemName=clsItem.getItemName(EITLERPGLOBAL.gCompanyID, (String)ObjItem.getAttribute("ITEM_ID").getObj());
                }
                DataModel.setValueByVariable("ITEM_DESCRIPTION",ItemName,NewRow);
                DataModel.setValueByVariable("YEAR",(String)ObjItem.getAttribute("YEAR").getObj(),NewRow);
                DataModel.setValueByVariable("DEPT_ID",Integer.toString((int)ObjItem.getAttribute("DEPT_ID").getVal()),NewRow);
                String DeptName=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,Integer.toString((int)ObjItem.getAttribute("DEPT_ID").getVal()));
                DataModel.setValueByVariable("DEPT_NAME",DeptName,NewRow);
                DataModel.setValueByVariable("AMOUNT",Double.toString((double)ObjItem.getAttribute("AMOUNT").getVal()),NewRow);
                
                
            }
            
            UpdateSrNo();
        }
        
    }//GEN-LAST:event_cmdSelectAssetActionPerformed
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
        
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void cmdRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtRemarks;
        bigEdit.ShowEdit();
        
    }//GEN-LAST:event_cmdRemarksBigActionPerformed
    
    private void cmdPreviewAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewAActionPerformed
        // TODO add your handling code here:
        PreviewAuditReport();
    }//GEN-LAST:event_cmdPreviewAActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjFassale.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo=txtDocNo.getText();
        ObjFassale.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        // TODO add your handling code here:
        if(EditMode!=0) {
            if(evt.getKeyCode()==67&&evt.getModifiersEx()==128) //Ctrl+C Key Combonation
            {
                //Check that any row exist
                if(Table.getRowCount()>0) {
                    //First Add new row
                    Object[] rowData=new Object[1];
                    DataModel.addRow(rowData);
                    int NewRow=Table.getRowCount()-1;
                    
                    //Copy New row with Previous one
                    for(int i=0;i<Table.getColumnCount();i++) {
                        Table.setValueAt(Table.getValueAt(Table.getSelectedRow(),i), NewRow, i);
                    }
                }
            }
        }
        
    }//GEN-LAST:event_TableKeyReleased
    
    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        // TODO add your handling code here:
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained
    
    private void cmdBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack2ActionPerformed
    
    private void cmdNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext1ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext1ActionPerformed
    
    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        // TODO add your handling code here:
        txtDocDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void cmdRemoveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdRemoveFocusGained
        // TODO add your handling code here:
        ShowMessage("Click on this button to remove selected row from the table");
    }//GEN-LAST:event_cmdRemoveFocusGained
    
    private void txtRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the remarks for this document");
    }//GEN-LAST:event_txtRemarksFocusGained
    
    private void txtDocDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocDateFocusGained
        // TODO add your handling code here:
        //ShowMessage("Enter MR Date");
    }//GEN-LAST:event_txtDocDateFocusGained
    
    private void Tab1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tab1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Tab1MouseClicked
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
        
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if(ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID,clsFASSale.ModuleID,txtDocNo.getText(),FinanceGlobal.FinURL)) {
                cmbSendTo.setEnabled(true);
            }
            else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateFromCombo();
        }
        
        
        
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgHoldItemStateChanged
    
    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_OpgRejectItemStateChanged
    
    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgFinalItemStateChanged
    
    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgApproveItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        //  ObjFassale.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if(Table.getRowCount()>0) {
            DataModel.removeRow(Table.getSelectedRow());
        }
        // UpdateSrNo();
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
        
        if(EditMode!=0) {
            //=========== Item List ===============
            
            if(Table.getSelectedColumn()==DataModel.getColFromVariable("SALE_STATUS_NAME")) {
                if(evt.getKeyCode()==112) //F1 Key pressed
                {
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT A.PARA_CODE,A.DESC FROM D_COM_PARAMETER_MAST A WHERE A.COMPANY_ID= "+EITLERPGLOBAL.gCompanyID+" AND A.PARA_ID='SALE_STATUS' ";
                    aList.ReturnCol=1;
                    aList.SecondCol=2;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=2;
                    
                    if(aList.ShowLOV()) {
                        if(Table.getCellEditor()!=null) {
                            Table.getCellEditor().stopCellEditing();
                        }
                        Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(),DataModel.getColFromVariable("SALE_STATUS"));
                        Table.setValueAt(aList.SecondVal, Table.getSelectedRow(),DataModel.getColFromVariable("SALE_STATUS_NAME"));
                        
                    }
                }
            }
        }
    }//GEN-LAST:event_TableKeyPressed
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        //Set Default Send to User
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemarksBig;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdSelectAsset;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtInvoiceDate;
    private javax.swing.JTextField txtInvoiceNo;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtPartyName;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtSaleDate;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    
    private void SetFields(boolean pStat) {
        txtDocNo.setEnabled(pStat);
        //txtDocDate.setEnabled(pStat);
        // chkCancelled.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        txtPartyCode.setEnabled(pStat);
        txtInvoiceNo.setEnabled(pStat);
        txtInvoiceDate.setEnabled(pStat);
        txtSaleDate.setEnabled(pStat);
        //cmdRemove.setEnabled(pStat);
        //cmbBuyer.setEnabled(pStat);
        
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        cmdSelectAsset.setEnabled(pStat);
        //cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        
        SetupApproval();
        
    }
    
    private void ClearFields() {
        txtDocNo.setText("");
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
        //chkCancelled.setSelected(false);
        
        txtPartyCode.setText("");
        txtInvoiceNo.setText("");
        txtInvoiceDate.setText("");
        txtPartyName.setText("");
        txtRemarks.setText("");
        txtSaleDate.setText("");
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        FormatGrid();
        FormatGridA();
        FormatGridHS();
        
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                
                if(ObjFassale.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(ObjFassale.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(ObjFassale.getAttribute("CANCELED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
                
                
            }
        }
        catch(Exception c) {
            
        }
        //============================================//
        
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=clsFASSale.ModuleID;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        
        ClearFields();
        txtDocNo.setText((String)ObjFassale.getAttribute("SALE_NO").getObj());
        lblTitle.setText("FIXED ASSET SALE - "+txtDocNo.getText());
        lblRevNo.setText(Integer.toString((int)ObjFassale.getAttribute("REVISION_NO").getVal()));
        txtDocDate.setText(EITLERPGLOBAL.formatDate((String)ObjFassale.getAttribute("DOC_DATE").getObj()));
        txtPartyCode.setText(ObjFassale.getAttribute("PARTY_CODE").getString());
        String PartyName=clsAccount.getAccountName("210034",txtPartyCode.getText());
        txtPartyName.setText(PartyName);
        txtInvoiceNo.setText(ObjFassale.getAttribute("INVOICE_NO").getString());
        txtInvoiceDate.setText(EITLERPGLOBAL.formatDate((String)ObjFassale.getAttribute("INVOICE_DATE").getObj()));
        txtSaleDate.setText(EITLERPGLOBAL.formatDate((String)ObjFassale.getAttribute("SALE_DATE").getObj()));
        txtRemarks.setText((String)ObjFassale.getAttribute("REMARKS").getObj());
        
        
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,(int)ObjFassale.getAttribute("HIERARCHY_ID").getVal());
        FormatGrid();
        //Now Generate Table
        for(int i=1;i<=ObjFassale.colLineItems.size();i++) {
            Object[] rowData=new Object[1];
            DataModel.addRow(rowData);
            int NewRow=Table.getRowCount()-1;
            
            clsFASSaleDetail ObjItem=(clsFASSaleDetail) ObjFassale.colLineItems.get(Integer.toString(i));
            int str = ObjItem.getAttribute("DETAIL_SR_NO").getInt();
            //Integer.toString((int)ObjItem.getAttribute("SR_NO").getVal())
            DataModel.setValueByVariable("SR_NO",Integer.toString(i),NewRow);
            DataModel.setValueByVariable("ASSET_NO",(String)ObjItem.getAttribute("ASSET_NO").getObj(),NewRow);
            DataModel.setValueByVariable("DETAIL_SR_NO",String.valueOf(ObjItem.getAttribute("DETAIL_SR_NO").getInt()),NewRow);
            DataModel.setValueByVariable("ITEM_ID",(String)ObjItem.getAttribute("ITEM_ID").getObj(),NewRow);
            DataModel.setValueByVariable("ITEM_DESCRIPTION",clsItem.getItemName(EITLERPGLOBAL.gCompanyID, (String)ObjItem.getAttribute("ITEM_ID").getObj()),NewRow);
            DataModel.setValueByVariable("DEPT_ID",Integer.toString((int)ObjItem.getAttribute("DEPT_ID").getVal()),NewRow);
            DataModel.setValueByVariable("DEPT_NAME",clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,(int)ObjItem.getAttribute("DEPT_ID").getVal()),NewRow);
            DataModel.setValueByVariable("YEAR",(String)ObjItem.getAttribute("YEAR").getObj(),NewRow);
           // DataModel.setValueByVariable("AMOUNT",Double.toString(ObjItem.getAttribute("AMOUNT").getVal()),NewRow);
            DataModel.setValueByVariable("AMOUNT",(new BigDecimal(ObjItem.getAttribute("AMOUNT").getDouble())).setScale(0,BigDecimal.ROUND_HALF_UP).toString(),NewRow);
            DataModel.setValueByVariable("SALE_STATUS",ObjItem.getAttribute("ASSET_STATUS").getString(),NewRow);
            String SaleStatus = data.getStringValueFromDB("SELECT A.DESC FROM D_COM_PARAMETER_MAST A WHERE A.PARA_CODE='"+ObjItem.getAttribute("ASSET_STATUS").getString()+"' AND A.PARA_ID = 'SALE_STATUS' ");
            DataModel.setValueByVariable("SALE_STATUS_NAME",SaleStatus,NewRow);
            //DataModel.setValueByVariable("SALE_VALUE",Double.toString(ObjItem.getAttribute("SALE_VALUE").getVal()),NewRow);
            DataModel.setValueByVariable("SALE_VALUE",(new BigDecimal(ObjItem.getAttribute("SALE_VALUE").getDouble())).setScale(0,BigDecimal.ROUND_HALF_UP).toString(),NewRow);
            //DataModel.setValueByVariable("SALE_DATE",EITLERPGLOBAL.formatDate((String)ObjItem.getAttribute("SALE_DATE").getObj()),NewRow);
            //DataModel.setValueByVariable("BOOK_OPENING_VALUE",Double.toString(ObjItem.getAttribute("BOOK_OPENING_VALUE").getVal()),NewRow);
            DataModel.setValueByVariable("BOOK_OPENING_VALUE",(new BigDecimal(ObjItem.getAttribute("BOOK_OPENING_VALUE").getDouble())).setScale(0,BigDecimal.ROUND_HALF_UP).toString(),NewRow);
            //DataModel.setValueByVariable("BOOK_CURRENT_YEAR_DEPRECIATION",Double.toString(ObjItem.getAttribute("BOOK_CURRENT_YEAR_DEPRECIATION").getVal()),NewRow);
            DataModel.setValueByVariable("BOOK_CURRENT_YEAR_DEPRECIATION",(new BigDecimal(ObjItem.getAttribute("BOOK_CURRENT_YEAR_DEPRECIATION").getDouble())).setScale(0,BigDecimal.ROUND_HALF_UP).toString(),NewRow);
            //DataModel.setValueByVariable("BOOK_CUMULATIVE_DEPRECIATION",Double.toString(ObjItem.getAttribute("BOOK_CUMULATIVE_DEPRECIATION").getVal()),NewRow);
            DataModel.setValueByVariable("BOOK_CUMULATIVE_DEPRECIATION",(new BigDecimal(ObjItem.getAttribute("BOOK_CUMULATIVE_DEPRECIATION").getDouble())).setScale(0,BigDecimal.ROUND_HALF_UP).toString(),NewRow);
            //DataModel.setValueByVariable("BOOK_CLOSING_VALUE",Double.toString(ObjItem.getAttribute("BOOK_CLOSING_VALUE").getVal()),NewRow);
            DataModel.setValueByVariable("BOOK_CLOSING_VALUE",(new BigDecimal(ObjItem.getAttribute("BOOK_CLOSING_VALUE").getDouble())).setScale(0,BigDecimal.ROUND_HALF_UP).toString(),NewRow);
            //DataModel.setValueByVariable("BOOK_PROFIT_LOSS",Double.toString(ObjItem.getAttribute("BOOK_PROFIT_LOSS").getVal()),NewRow);
            DataModel.setValueByVariable("BOOK_PROFIT_LOSS",(new BigDecimal(ObjItem.getAttribute("BOOK_PROFIT_LOSS").getDouble())).setScale(0,BigDecimal.ROUND_HALF_UP).toString(),NewRow);
            //DataModel.setValueByVariable("IT_OPENING_VALUE",Double.toString(ObjItem.getAttribute("IT_OPENING_VALUE").getVal()),NewRow);
            DataModel.setValueByVariable("IT_OPENING_VALUE",(new BigDecimal(ObjItem.getAttribute("IT_OPENING_VALUE").getDouble())).setScale(0,BigDecimal.ROUND_HALF_UP).toString(),NewRow);
            //DataModel.setValueByVariable("IT_CURRENT_YEAR_DEPRECIATION",Double.toString(ObjItem.getAttribute("IT_CURRENT_YEAR_DEPRECIATION").getVal()),NewRow);
            DataModel.setValueByVariable("IT_CURRENT_YEAR_DEPRECIATION",(new BigDecimal(ObjItem.getAttribute("IT_CURRENT_YEAR_DEPRECIATION").getDouble())).setScale(0,BigDecimal.ROUND_HALF_UP).toString(),NewRow);
            //DataModel.setValueByVariable("IT_CUMULATIVE_DEPRECIATION",Double.toString(ObjItem.getAttribute("IT_CUMULATIVE_DEPRECIATION").getVal()),NewRow);
            DataModel.setValueByVariable("IT_CUMULATIVE_DEPRECIATION",(new BigDecimal(ObjItem.getAttribute("IT_CUMULATIVE_DEPRECIATION").getDouble())).setScale(0,BigDecimal.ROUND_HALF_UP).toString(),NewRow);
            //DataModel.setValueByVariable("IT_CLOSING_VALUE",Double.toString(ObjItem.getAttribute("IT_CLOSING_VALUE").getVal()),NewRow);
            DataModel.setValueByVariable("IT_CLOSING_VALUE",(new BigDecimal(ObjItem.getAttribute("IT_CLOSING_VALUE").getDouble())).setScale(0,BigDecimal.ROUND_HALF_UP).toString(),NewRow);
            //DataModel.setValueByVariable("IT_PROFIT_LOSS",Double.toString(ObjItem.getAttribute("IT_PROFIT_LOSS").getVal()),NewRow);
            DataModel.setValueByVariable("IT_PROFIT_LOSS",(new BigDecimal(ObjItem.getAttribute("IT_PROFIT_LOSS").getDouble())).setScale(0,BigDecimal.ROUND_HALF_UP).toString(),NewRow);
            DataModel.setValueByVariable("REMARKS",(String)ObjItem.getAttribute("REMARKS").getObj(),NewRow);
            
        }
        
        DoNotEvaluate=false;
        
        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List=new HashMap();
        String DocNo=(String)ObjFassale.getAttribute("SALE_NO").getObj();
        List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, clsFASSale.ModuleID , DocNo);
        for(int i=1;i<=List.size();i++) {
            clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
            Object[] rowData=new Object[7];
            
            rowData[0]=Integer.toString(i);
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
            rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
            rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
            rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
            rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
            rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
            
            DataModelA.addRow(rowData);
        }
        
        //Showing Audit Trial History
        FormatGridHS();
        HashMap History=clsFASSale.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
        for(int i=1;i<=History.size();i++) {
            clsFASSale ObjHistory=(clsFASSale)History.get(Integer.toString(i));
            Object[] rowData=new Object[5];
            
            rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(long)ObjHistory.getAttribute("UPDATED_BY").getVal());
            rowData[2]=EITLERPGLOBAL.formatDate((String)ObjHistory.getAttribute("ENTRY_DATE").getObj());
            
            String ApprovalStatus="";
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus="Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus="Final Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus="Waiting";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus="Rejected";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus="Pending";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus="Skiped";
            }
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("H")) {
                ApprovalStatus="Waiting";
            }
            
            rowData[3]=ApprovalStatus;
            rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
            
            DataModelHS.addRow(rowData);
        }
        
        //============================================================//
    }
    
    //Sets data to the Class Object
    private void SetData() {
        
        ObjFassale.setAttribute("PREFIX",SelPrefix);
        ObjFassale.setAttribute("SUFFIX",SelSuffix);
        ObjFassale.setAttribute("FFNO",FFNo);
        ObjFassale.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        ObjFassale.setAttribute("SALE_NO",txtDocNo.getText());
        ObjFassale.setAttribute("DOC_DATE",EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
        ObjFassale.setAttribute("PARTY_CODE",txtPartyCode.getText());
        ObjFassale.setAttribute("INVOICE_NO",txtInvoiceNo.getText());
        ObjFassale.setAttribute("INVOICE_DATE",EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText()));
        ObjFassale.setAttribute("SALE_DATE",EITLERPGLOBAL.formatDateDB(txtSaleDate.getText()));
        ObjFassale.setAttribute("REMARKS",txtRemarks.getText());
        
        
        ObjFassale.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFassale.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjFassale.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFassale.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        
        if(OpgApprove.isSelected()) {
            ObjFassale.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjFassale.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjFassale.setAttribute("APPROVAL_STATUS","R");
            ObjFassale.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            ObjFassale.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjFassale.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            ObjFassale.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        else {
            
            ObjFassale.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
            ObjFassale.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        
        ObjFassale.colLineItems.clear();
        //        ObjFassale.colSupp.clear();
        
        for(int i=0;i<Table.getRowCount();i++) {
            clsFASSaleDetail ObjFassaleItem=new clsFASSaleDetail();
            
            ObjFassaleItem.setAttribute("SR_NO",Integer.toString(i));
            ObjFassaleItem.setAttribute("ASSET_NO",(String) DataModel.getValueByVariable("ASSET_NO",i));
            ObjFassaleItem.setAttribute("DETAIL_SR_NO",Integer.parseInt(DataModel.getValueByVariable("DETAIL_SR_NO",i)));
            ObjFassaleItem.setAttribute("ITEM_ID",(String) DataModel.getValueByVariable("ITEM_ID",i));
            ObjFassaleItem.setAttribute("DEPT_ID",Integer.parseInt(DataModel.getValueByVariable("DEPT_ID",i)));
            ObjFassaleItem.setAttribute("YEAR",(String)DataModel.getValueByVariable("YEAR",i));
            ObjFassaleItem.setAttribute("AMOUNT",EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("AMOUNT",i)),0));
            ObjFassaleItem.setAttribute("ASSET_STATUS",DataModel.getValueByVariable("SALE_STATUS",i));
            ObjFassaleItem.setAttribute("SALE_VALUE",EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("SALE_VALUE",i)),0));
            //ObjFassaleItem.setAttribute("SALE_DATE",EITLERPGLOBAL.formatDateDB((String) DataModel.getValueByVariable("SALE_DATE",i)));
            ObjFassaleItem.setAttribute("BOOK_OPENING_VALUE",EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("BOOK_OPENING_VALUE",i)),0));
            ObjFassaleItem.setAttribute("BOOK_CURRENT_YEAR_DEPRECIATION",EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("BOOK_CURRENT_YEAR_DEPRECIATION",i)),0));
            ObjFassaleItem.setAttribute("BOOK_CUMULATIVE_DEPRECIATION",EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("BOOK_CUMULATIVE_DEPRECIATION",i)),0));
            ObjFassaleItem.setAttribute("BOOK_CLOSING_VALUE",EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("BOOK_CLOSING_VALUE",i)),0));
            ObjFassaleItem.setAttribute("BOOK_PROFIT_LOSS",EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("BOOK_PROFIT_LOSS",i)),0));
            ObjFassaleItem.setAttribute("IT_OPENING_VALUE",EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("IT_OPENING_VALUE",i)),0));
            ObjFassaleItem.setAttribute("IT_CURRENT_YEAR_DEPRECIATION",EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("IT_CURRENT_YEAR_DEPRECIATION",i)),0));
            ObjFassaleItem.setAttribute("IT_CUMULATIVE_DEPRECIATION",EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("IT_CUMULATIVE_DEPRECIATION",i)),0));
            ObjFassaleItem.setAttribute("IT_CLOSING_VALUE",EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("IT_CLOSING_VALUE",i)),0));
            ObjFassaleItem.setAttribute("IT_PROFIT_LOSS",EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("IT_PROFIT_LOSS",i)),0));
            
            ObjFassaleItem.setAttribute("REMARKS",DataModel.getValueByVariable("REMARKS",i));
            
            
            if(EditMode==EITLERPGLOBAL.ADD) {
                ObjFassaleItem.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
                ObjFassaleItem.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            }
            else {
                ObjFassaleItem.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
                ObjFassaleItem.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            }
            ObjFassale.colLineItems.put(Integer.toString(ObjFassale.colLineItems.size()+1),ObjFassaleItem);
        }
        
    }
    
    
    private void FormatGrid() {
        
       /* HashMap ColList=new HashMap();
        
        
        try {
        
            //cmdShowIndent.requestFocus();
            DataModel=new EITLTableModel();
        
            Table.removeAll();
            Table.setModel(DataModel);
        
            //Set the table Readonly
            DataModel.TableReadOnly(false);
        
            ColList=clsSystemColumn.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=192 AND HIDDEN=0 ORDER BY D_COM_SYSTEM_COLUMNS.ORDER");
            for(int i=1;i<=ColList.size();i++) {
                clsSystemColumn ObjColumn=(clsSystemColumn)ColList.get(Integer.toString(i));
        
                //Add Column First
                DataModel.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj()); //0
        
        
                if(ObjColumn.getAttribute("NUMERIC").getBool()) {
                    DataModel.SetNumeric(Table.getColumnCount()-1, true);
                }
                else {
                    DataModel.SetNumeric(Table.getColumnCount()-1, false);
                }
        
        
                String Variable=(String)ObjColumn.getAttribute("VARIABLE").getObj();
        
        
        
        
        
        
                if(ObjColumn.getAttribute("READONLY").getBool()) {
                    DataModel.SetReadOnly(Table.getColumnCount()-1);
                }
            }
        
            //Now hide the column 1
            TableColumnModel ColModel=Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
            //------- Install Table List Selection Listener ------//
            Table.getColumnModel().getSelectionModel().addListSelectionListener(
            new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent e) {
                    int last=Table.getSelectedColumn();
                    String strVar=DataModel.getVariable(last);
        
        
                    //=============== Cell Editing Routine =======================//
                    try {
                        cellLastValue=(String)Table.getValueAt(Table.getSelectedRow(),Table.getSelectedColumn());
        
                        Table.editCellAt(Table.getSelectedRow(),Table.getSelectedColumn());
                        if(Table.getEditorComponent() instanceof JTextComponent) {
                            ((JTextComponent)Table.getEditorComponent()).selectAll();
                        }
                    }
                    catch(Exception cell){}
                    //============= Cell Editing Routine Ended =================//
        
        
                }
            }
            );
            //===================================================//
        
        
            //----- Install Table Model Event Listener -------//
            Table.getModel().addTableModelListener(new TableModelListener() {
                public void tableChanged(TableModelEvent e) {
                    if (e.getType() == TableModelEvent.UPDATE) {
                        //=========== Cell Update Prevention Check ===========//
                        String curValue=(String)Table.getValueAt(Table.getSelectedRow(), e.getColumn());
                        if(curValue.equals(cellLastValue)) {
                            return;
                        }
                        //====================================================//
        
                    }
                }
            });
        
            int ImportCol=DataModel.getColFromVariable("IMPORT_CONCESS");
            Renderer.setCustomComponent(ImportCol,"CheckBox");
            JCheckBox aCheckBox=new JCheckBox();
            aCheckBox.setBackground(Color.WHITE);
            Table.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox));
            Table.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);
        }
        catch(Exception e) {
        
        }
        */
        Updating=true; //Stops recursion
        
        try {
            // cmdAdd.requestFocus();
            
            DataModel=new EITLTableModel();
            Table.removeAll();
            
            Table.setModel(DataModel);
            TableColumnModel ColModel=Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //Add Columns to it
            DataModel.addColumn("Sr."); //0 READ ONLY
            DataModel.addColumn("Asset No."); //1 READ ONLY
            DataModel.addColumn("Asset Sr No."); //2 READ ONLY
            DataModel.addColumn("Item ID");//3 READ ONLY
            DataModel.addColumn("Item Description"); //4 READ ONLY
            DataModel.addColumn("Dept ID"); //5 HIDDEN -READ ONLY
            DataModel.addColumn("Dept Name"); //6 READ ONLY
            DataModel.addColumn("Depri Year"); //7 READ ONLY
            DataModel.addColumn("Amount"); //8 READ ONLY
            DataModel.addColumn("Status ID"); //9 HIDDEN READ ONLY
            DataModel.addColumn("Sale Status Name"); //10 ENTRY
            // DataModel.addColumn("Sale - Scrap Date"); //11 ENTRY
            DataModel.addColumn("Sale Value"); //11  ENTRY
            DataModel.addColumn("Book Opening Value"); //12 READ ONLY
            DataModel.addColumn("Book Current Year Deprn."); //13 READ ONLY
            DataModel.addColumn("Book Cumulative Deprn."); //14 READ ONLY
            DataModel.addColumn("Book Closing Value"); //15 READ ONLY
            DataModel.addColumn("Book Profit/Loss"); //16 READ ONLY
            DataModel.addColumn("IT Opening Value"); //17 READ ONLY
            DataModel.addColumn("IT Current Year Deprn."); //18 READ ONLY
            DataModel.addColumn("IT Cumulative Deprn."); //19 READ ONLY
            DataModel.addColumn("IT Closing Value"); //20 READ ONLY
            DataModel.addColumn("IT Profit/Loss"); //21 READ ONLY
            DataModel.addColumn("Remarks");//22 ENTRY
            
            DataModel.SetVariable(0,"SR_NO"); //0 READ ONLY
            DataModel.SetVariable(1,"ASSET_NO"); //1 READ ONLY
            DataModel.SetVariable(2,"DETAIL_SR_NO"); //2 READ ONLY
            DataModel.SetVariable(3,"ITEM_ID"); //3 READ ONLY
            DataModel.SetVariable(4,"ITEM_DESCRIPTION"); //4 READ ONLY
            DataModel.SetVariable(5,"DEPT_ID"); //5 READ ONLY  HIDDEN
            DataModel.SetVariable(6,"DEPT_NAME"); //6 READ ONLY
            DataModel.SetVariable(7,"YEAR"); //7 READ ONLY
            DataModel.SetVariable(8,"AMOUNT"); //8 READ ONLY
            DataModel.SetVariable(9,"SALE_STATUS"); // 9 READ ONLY  HIDDEN
            DataModel.SetVariable(10,"SALE_STATUS_NAME");//10 ENTRY
            //DataModel.SetVariable(11,"SALE_DATE"); //11  ENTRY
            DataModel.SetVariable(11,"SALE_VALUE"); //11 ENTRY
            DataModel.SetVariable(12,"BOOK_OPENING_VALUE"); //12  READ ONLY
            DataModel.SetVariable(13,"BOOK_CURRENT_YEAR_DEPRECIATION");//13 READ ONLY
            DataModel.SetVariable(14,"BOOK_CUMULATIVE_DEPRECIATION");//14 READ ONLY
            DataModel.SetVariable(15,"BOOK_CLOSING_VALUE");//15 READ ONLY
            DataModel.SetVariable(16,"BOOK_PROFIT_LOSS");//16 READ ONLY
            DataModel.SetVariable(17,"IT_OPENING_VALUE"); //17  READ ONLY
            DataModel.SetVariable(18,"IT_CURRENT_YEAR_DEPRECIATION");//18 READ ONLY
            DataModel.SetVariable(19,"IT_CUMULATIVE_DEPRECIATION");//19 READ ONLY
            DataModel.SetVariable(20,"IT_CLOSING_VALUE");//20 READ ONLY
            DataModel.SetVariable(21,"IT_PROFIT_LOSS");//21 READ ONLY
            DataModel.SetVariable(22,"REMARKS");//22 ENTRY
            
            DataModel.TableReadOnly(false);
            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(1);
            DataModel.SetReadOnly(2);
            DataModel.SetReadOnly(3);
            DataModel.SetReadOnly(4);
            DataModel.SetReadOnly(5);
            DataModel.SetReadOnly(6);
            DataModel.SetReadOnly(7);
            DataModel.SetReadOnly(8);
            DataModel.SetReadOnly(9);
            DataModel.SetReadOnly(10);
            DataModel.SetReadOnly(12);
            DataModel.SetReadOnly(13);
            DataModel.SetReadOnly(14);
            DataModel.SetReadOnly(15);
            DataModel.SetReadOnly(16);
            DataModel.SetReadOnly(17);
            DataModel.SetReadOnly(18);
            DataModel.SetReadOnly(19);
            DataModel.SetReadOnly(20);
            DataModel.SetReadOnly(21);
            
            //----- Install Table Model Event Listener -------//
            Table.getColumnModel().getSelectionModel().addListSelectionListener(
            new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent e) {
                    int last=Table.getSelectedColumn();
                    String strVar=DataModel.getVariable(last);
                    
                    
                    //=============== Cell Editing Routine =======================//
                    try {
                        cellLastValue = DataModel.getValueByVariable(strVar, Table.getSelectedRow());
                        //(String)TableAdj.getValueAt(TableAdj.getSelectedRow()+1,TableAdj.getSelectedColumn());
                        
                        Table.editCellAt(Table.getSelectedRow(),Table.getSelectedColumn());
                        if(Table.getEditorComponent() instanceof JTextComponent) {
                            ((JTextComponent)Table .getEditorComponent()).selectAll();
                        }
                        DoNotEvaluate=false;
                    }
                    catch(Exception cell){}
                    
                    //if(last==13) {
                    // GenerateGrid();
                    //}
                    //============= Cell Editing Routine Ended =================//
                }
            }
            );
            
            Table.getModel().addTableModelListener(new TableModelListener() {
                public void tableChanged(TableModelEvent e) {
                    if (e.getType() == TableModelEvent.UPDATE) {
                        int col = e.getColumn();
                        
                        
                        //=========== Cell Update Prevention Check ===========//
                        String curValue=(String)Table.getValueAt(Table.getSelectedRow(), e.getColumn());
                        if(curValue.equals(cellLastValue)) {
                            return;
                        }
                        //====================================================//
                        
                        if(DoNotEvaluate) {
                            return;
                        }
                        String SaleStatus=DataModel.getValueByVariable("SALE_STATUS", Table.getSelectedRow());
                        //for(int i = 0; i<Table.getRowCount();i++) {
//                        if(col==DataModel.getColFromVariable("SALE_STATUS")){
//                            try {
//                                
//                                
//                                if(SaleStatus.equals("1")) {
//                                    // DoNotEvaluate=true;
//                                    if(DataModel.isReadOnly(11)) {
//                                        DataModel.ResetReadOnly(11);
//                                    }
//                                    if(DataModel.isReadOnly(12)) {
//                                        DataModel.ResetReadOnly(12);
//                                    }
//                                }
//                                else
//                                    if(SaleStatus.equals("2")) {
//                                        //DataModel.TableReadOnly(false);
//                                        
//                                        if(!DataModel.isReadOnly(12)) {
//                                            DataModel.SetReadOnly(12);
//                                        }
//                                        DataModel.SetNumeric(12,true);
//                                        DataModel.SetNumeric(13,true);
//                                        DataModel.SetNumeric(14,true);
//                                        DataModel.SetNumeric(15,true);
//                                        DataModel.SetNumeric(16,true);
//                                        DataModel.SetNumeric(17,true);
//                                        DataModel.SetNumeric(18,true);
//                                        DataModel.SetNumeric(19,true);
//                                        DataModel.SetNumeric(20,true);
//                                        DataModel.setValueByVariable("SALE_VALUE","0",Table.getSelectedRow());
//                                        //DataModel.setValueByVariable("SALE_DATE",EITLERPGLOBAL.getCurrentDate(),Table.getSelectedRow());
//                                        //DoNotEvaluate=true;
//                                    }
                                // Table.setModel(DataModel);
//                            }catch (Exception ex) {
//                                ex.printStackTrace();
//                            }
//                        }
                        //}
                        if(SaleStatus.equals("1")) {
                            if(col==DataModel.getColFromVariable("SALE_VALUE") ){
                                GenerateGrid();
                            }
                        }
//                        else
//                            if(SaleStatus.equals("2")) {
//                                if(col==DataModel.getColFromVariable("SALE_DATE") ){
//                                    GenerateGrid();
//                                }
//                            }
                        
                    }
                }
            });
            
            
            
            
            //Hide Unit Code column
            //Table.getColumnModel().getColumn(5).setMinWidth(0);
            Table.getColumnModel().getColumn(5).setMaxWidth(0);
            //Table.getColumnModel().getColumn(5).setWidth(0);
            
            //Table.getColumnModel().getColumn(9).setMinWidth(0);
            Table.getColumnModel().getColumn(9).setMaxWidth(0);
            //Table.getColumnModel().getColumn(9).setWidth(0);
            
            /*Table.getColumnModel().getColumn(21).setMinWidth(0);
            Table.getColumnModel().getColumn(21).setMaxWidth(0);
            Table.getColumnModel().getColumn(21).setWidth(0);
             
            Table.getColumnModel().getColumn(19).setMinWidth(0);
            Table.getColumnModel().getColumn(19).setMaxWidth(0);
            Table.getColumnModel().getColumn(19).setWidth(0);*/
            
            Updating=false;
            //Table formatting completed
        }
        catch(Exception e) {
            
        }
    }
    
    
    
    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        String strCondition="";
        
        //----- Generate cmbType ------- //
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID='"+clsFASSale.ModuleID+"' ");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID='"+clsFASSale.ModuleID+"' ");
        }
        for(int i=1;i<=List.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
        
        ComboData aData=new ComboData();
        
        clsUser ObjUser=new clsUser();
        ObjUser.LoadData(EITLERPGLOBAL.gCompanyID);
        List=ObjUser.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID));
        for(int i=1;i<=List.size();i++) {
            ObjUser=(clsUser) List.get(Integer.toString(i));
            
            aData=new ComboData();
            
            aData.Text=(String) ObjUser.getAttribute("USER_NAME").getObj();
            aData.Code=(long)ObjUser.getAttribute("USER_ID").getVal();
            
            
        }
        
        
    }
    
    
    private void GenerateFromCombo() {
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbSendToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbSendToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbSendToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbSendToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbSendToModel);
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, clsFASSale.ModuleID,(String)ObjFassale.getAttribute("SALE_NO").getObj());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
    }
    
    private void SetupApproval() {
        // --- Hierarchy Change Rights Check --------
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, clsFASSale.ModuleID ,(String)ObjFassale.getAttribute("SALE_NO").getObj());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,clsFASSale.ModuleID ,FromUserID,(String)ObjFassale.getAttribute("SALE_NO").getObj());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,12251)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,12252)) {
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }
        
        // --- Delete Rights --
       /* if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,12063)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }*/
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,12254)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
        
    }
    
    private void Add() {
        
        
        
        
        //Now Generate new document no.
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=clsFASSale.ModuleID ;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            ObjFassale.colLineItems.clear();
            ObjFassale.colgFasItems.clear();
            FormatGrid();
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            //SetupApproval();
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsFASSale.ModuleID , FFNo,  false));
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
            txtDocDate.requestFocus();
            
            lblTitle.setText("ASSET SALE  - "+txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
        
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=(String)ObjFassale.getAttribute("SALE_NO").getObj();
        if(ObjFassale.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID))  {
            EditMode=EITLERPGLOBAL.EDIT;
            
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//
            
            if(ApprovalFlow.IsCreator(clsFASSale.ModuleID ,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,1206)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            DisableToolbar();
            txtDocDate.requestFocus();
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
        
        
    }
    
    
    private void Save() {
        //Form level validations
        if(Validate()==false) {
           return; //Validation failed
        }
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjFassale.Insert())   {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjFassale.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjFassale.Update()) {
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjFassale.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        
        try {
            frmPA.RefreshView();
        }
        catch(Exception e){}
        ShowMessage("Ready ..........");
        EITLERPGLOBAL.ChangeCursorToDefault(this);
        
    }
    
    private void Cancel() {
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }
    
    
    
    private void MoveFirst() {
        ObjFassale.MoveFirst();
        DisplayData();
    }
    
    private void MovePrevious() {
        ObjFassale.MovePrevious();
        DisplayData();
    }
    
    private void MoveNext() {
        ObjFassale.MoveNext();
        DisplayData();
    }
    
    private void MoveLast() {
        ObjFassale.MoveLast();
        DisplayData();
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Finance.frmFASaleFind",true);
        frmFASaleFind ObjReturn= (frmFASaleFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!ObjFassale.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveLast();
        }
    }
    
    public void FindEx(int pCompanyID,String pDocNo) {
        ObjFassale.Filter(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND SALE_NO='"+pDocNo+"'",pCompanyID);
        ObjFassale.MoveLast();
        DisplayData();
    }
    
    public void FindWaiting() {
        ObjFassale.Filter(" WHERE SALE_NO IN (SELECT D_FAS_SALE_HEADER.SALE_NO FROM FINANCE.D_FAS_SALE_HEADER,D_COM_DOC_DATA WHERE D_FAS_SALE_HEADER.SALE_NO=D_COM_DOC_DATA.DOC_NO AND D_FAS_SALE_HEADER.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_FAS_SALE_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND MODULE_ID="+clsFASSale.ModuleID+")",EITLERPGLOBAL.gCompanyID);
        ObjFassale.MoveLast();
        DisplayData();
    }
    
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA =new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        //SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Tab1.getComponent(i).setEnabled(true);
                }
                
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        
        
        //=============== Setting Table Fields ==================//
        DataModelA.ClearAllReadOnly();
        for(int i=0;i<Table.getColumnCount();i++) {
            FieldName=DataModelA.getVariable(i);
            
            if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
                //Do Nothing
            }
            else {
                DataModelA.SetReadOnly(i);
            }
        }
        //=======================================================//
        
    }
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    
    private void PreviewAuditReport() {
        try {
            //URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptMaterialREQA.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText());
            //EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"Error Previwing "+e.getMessage());
        }
    }
    
    private void GenerateRejectedUserCombo() {
        HashMap List=new HashMap();
        HashMap DeptList=new HashMap();
        HashMap DeptUsers=new HashMap();
        
        //----- Generate cmbType ------- //
        cmbToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);
        
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            
            
            /// NEW CODE ///
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID,clsFASSale.ModuleID, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID,clsFASSale.ModuleID , txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            }
            else {
                if(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///
            
            
        }
        //------------------------------ //
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID,clsFASSale.ModuleID,txtDocNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
    }
    private void UpdateSrNo() {
        int SrCol=0;
        int MaxSrNo=0;
        
        if(EditMode!=EITLERPGLOBAL.AMEND) {
            for(int i=0;i<Table.getRowCount();i++) {
                Table.setValueAt(Integer.toString(i+1), i, SrCol);
            }
        }
        else {
            
            for(int i=0;i<Table.getRowCount();i++) {
                String cellValue=DataModel.getValueByVariable("SR_NO", i);
                
                if(EITLERPGLOBAL.IsNumber(cellValue)) {
                    if(Integer.parseInt(cellValue)>MaxSrNo) {
                        MaxSrNo=Integer.parseInt(cellValue);
                    }
                }
                
            }
            
            for(int i=0;i<Table.getRowCount();i++) {
                String cellValue=DataModel.getValueByVariable("SR_NO", i);
                
                if(Integer.parseInt(cellValue)==0) {
                    MaxSrNo++;
                    DataModel.setValueByVariable("SR_NO",Integer.toString(MaxSrNo),i);
                }
                
            }
            
        }
        
    }
    private boolean Validate() {
        
        
        String Party_Code = data.getStringValueFromDB("SELECT PARTY_CODE FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210034 AND APPROVED = 1 AND CANCELLED = 0 AND COMPANY_ID = '"+EITLERPGLOBAL.gCompanyID+"' AND PARTY_CODE = '"+txtPartyCode.getText().trim()+"' ORDER BY PARTY_NAME",FinanceGlobal.FinURL);
        
        if(!Party_Code.equals(txtPartyCode.getText().toString().trim())) {
            JOptionPane.showMessageDialog(null,"Invalid Party Code.Please Enter Valid Party Code.");
            return false;
        }
        
        if (txtPartyCode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter Valid Party Code.");
            return false;
        }
        
        if (txtInvoiceNo.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter Invoice No.");
            return false;
        }
        
        if (txtInvoiceDate.getText().toString().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter Invoice Date");
            return false;
        }
        
        if(!EITLERPGLOBAL.isDate(txtInvoiceDate.getText().toString().trim())) {
            JOptionPane.showMessageDialog(null,"Invalid date format . Please enter DD/MM/YYYY format .....");
            return false;
        }
        
        if (txtSaleDate.getText().toString().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter Sale Date");
            return false;
        }
        
        if(!EITLERPGLOBAL.isDate(txtSaleDate.getText().toString().trim())) {
            JOptionPane.showMessageDialog(null,"Sale date format . Please enter DD/MM/YYYY format .....");
            return false;
        }
        
        if (data.IsRecordExist("SELECT * FROM D_FAS_SALE_HEADER WHERE  CANCELLED  = 0  AND INVOICE_NO='"+txtInvoiceNo.getText().toString().trim()+"' ",FinanceGlobal.FinURL)) {
            JOptionPane.showMessageDialog(null,"Invoice no is already Used.");
            return false;
        }
        
        
        if(Table.getRowCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please enter at least one asset item");
            return false;
        }
        
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return false;
        }
        
        for(int i=0;i<=Table.getRowCount()-1;i++) {
            String strDate=txtSaleDate.getText().toString().trim();
            String strSaleVal=(String)Table.getValueAt(i,12);
            String strSaleStatus=(String)Table.getValueAt(i,10);
            
            //if(strDate.equals("")) {
            //  JOptionPane.showMessageDialog(null,"Please enter valid sale date");
            // return false;
            
            // }
            
            if(strSaleVal.equals("")) {
                JOptionPane.showMessageDialog(null,"Please enter sale value");
                return false;
            }
            
            if(strSaleStatus.equals("")) {
                JOptionPane.showMessageDialog(null,"Please enter sale status using F1 key.");
                return false;
            }
            
            double SalValue = Double.parseDouble(DataModel.getValueByVariable("SALE_VALUE", i));
            double Amount = Double.parseDouble(DataModel.getValueByVariable("AMOUNT", i));
            
            String Status = DataModel.getValueByVariable("ASSET_STATUS", i);
            
            if((Status.equals("1")) &&  (SalValue <= 0)) {
                JOptionPane.showMessageDialog(null,"You can not enter a zero  sale value.");
                return false;
            }
            
            if(SalValue >= Amount) {
                JOptionPane.showMessageDialog(null,"You can not enter a sale value greater than purchase amount.");
                return false;
            }
            
            
            if(!strDate.equals("")) {
                
                
                java.sql.Date DocDate=java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
                // java.sql.Date FinStartDate=java.sql.Date.valueOf(EITLERPGLOBAL.getFinYearStartDate(EITLERPGLOBAL.formatDateDB(txtDocDate.getText())));
                
                java.sql.Date InvoiceDate=java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText()));
                java.sql.Date FinStartDate=java.sql.Date.valueOf(EITLERPGLOBAL.getFinYearStartDate(EITLERPGLOBAL.formatDateDB(txtDocDate.getText())));
                
                if(FinStartDate.after(InvoiceDate)) {
                    JOptionPane.showMessageDialog(null,"Invoice date must be within the financial start year date.");
                    return false;
                }
                
                String AssetNo = (String)Table.getValueAt(i,1);
                String a_date =data.getStringValueFromDB("SELECT ASSET_DATE FROM D_FAS_MASTER_HEADER  WHERE  ASSET_NO = '" + AssetNo + "' " ,FinanceGlobal.FinURL);
                java.sql.Date AssetDate=java.sql.Date.valueOf(a_date);
                java.sql.Date SaleDate=java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(strDate));
                if(AssetDate.after(SaleDate)) {
                    JOptionPane.showMessageDialog(null,"Sale date must be after the asset purchase date.");
                    return false;
                }
                
                if(SaleDate.after(DocDate)) {
                    JOptionPane.showMessageDialog(null,"Sale date must be before the document date.");
                    return false;
                }
                
                if(FinStartDate.after(SaleDate)) {
                    JOptionPane.showMessageDialog(null,"Sale date must be within the financial start year date.");
                    return false;
                }
                
                if(InvoiceDate.after(DocDate)) {
                    JOptionPane.showMessageDialog(null,"Invoice date must be before the document date.");
                    return false;
                }
                
            }
        }
        
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the hierarchy.");
            return false;
        }
        
        if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null,"Please select the Approval Action");
            return false;
        }
        
        if(OpgReject.isSelected()&&txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter the remarks for rejection");
            return false;
        }
        
        if( (OpgApprove.isSelected()||OpgReject.isSelected())&&cmbSendTo.getItemCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please select the user, to whom rejected document to be send");
            return false;
        }
        
        return true;
    }
    private void GenerateGrid() {
        
        ResultSet rsTmp,rsItem,rsIT;
        Object[] rowData=new Object[1];
        try{
            
            int i = Table.getSelectedRow();
            int AssetSrNo = Integer.parseInt(DataModel.getValueByVariable("DETAIL_SR_NO", i));
            String AssetNo = DataModel.getValueByVariable("ASSET_NO", i);
            String ItemID =  DataModel.getValueByVariable("ITEM_ID", i);
            //String SaleDate = DataModel.getValueByVariable("SALE_DATE", i);
            String SaleDate = txtSaleDate.getText().toString().trim();
            double SaleValue = Double.parseDouble(DataModel.getValueByVariable("SALE_VALUE", i));
            
            //////////////////////  BOOK Calculation For Sale Asset  ////////////////////
            
            double DeprAmount =0.0;
            double CumDepr = 0.0;
            double profit_loss  = 0.0;
            double openingbal = 0.0;
            double closingbal = 0.0;
            
            
            String SQL ="SELECT * FROM  D_FAS_MASTER_DETAIL_EX A,D_FAS_MASTER_DETAIL B " +
            "WHERE A.DEPRECIATION_FROM_DATE >= '" + EITLERPGLOBAL.getFinYearStartDate(EITLERPGLOBAL.formatDateDB(SaleDate)) + "'  " +
            "AND  A.DEPRECIATION_FROM_DATE <= '" + EITLERPGLOBAL.getFinYearEndDate(EITLERPGLOBAL.formatDateDB(SaleDate)) + "'  " +
            "AND A.ASSET_NO = '" + AssetNo + "' " +
            "AND A.ASSET_NO = B.ASSET_NO " +
            "AND A.DETAIL_SR_NO  = B.SR_NO " +
            "AND A.DETAIL_SR_NO = '" + AssetSrNo + "' AND TYPE = 1 " ;
            
            rsTmp = data.getResult(SQL,FinanceGlobal.FinURL);
            
            if(rsTmp.getRow()>0) {
                String dep_from_date = rsTmp.getString("DEPRECIATION_FROM_DATE");
                openingbal=rsTmp.getDouble("OPENING_BALANCE");
                CumDepr = rsTmp.getDouble("CUMULATIVE_DEPRECIATION");
                DataModel.setValueByVariable("BOOK_OPENING_VALUE",String.valueOf(openingbal),i);
                int  month = EITLERPGLOBAL.getMonthDifference(EITLERPGLOBAL.formatDateDB(SaleDate),dep_from_date)+1;
                double BookRate=rsTmp.getDouble("DEPRECIATION_PERCENTAGE");
                DataModel.setValueByVariable("BOOK_CURRENT_YEAR_DEPRECIATION",String.valueOf(clsFASGlobal.WrittenDownMethod(openingbal, BookRate,month)) ,i);
                CumDepr = CumDepr + clsFASGlobal.WrittenDownMethod(openingbal, BookRate,month);
                DataModel.setValueByVariable("BOOK_CUMULATIVE_DEPRECIATION",String.valueOf(CumDepr) ,i);
                double closing = openingbal - clsFASGlobal.WrittenDownMethod(openingbal, BookRate,month);
                DataModel.setValueByVariable("BOOK_CLOSING_VALUE",String.valueOf(closing) ,i);
                DataModel.setValueByVariable("BOOK_PROFIT_LOSS",String.valueOf(SaleValue - closing),i);
            }
            
            else {
                SQL ="SELECT * FROM  D_FAS_MASTER_DETAIL_EX A,D_FAS_MASTER_DETAIL B " +
                "WHERE A.ASSET_NO = '" + AssetNo + "' " +
                "AND A.ASSET_NO = B.ASSET_NO " +
                "AND A.DETAIL_SR_NO  = B.SR_NO " +
                "AND A.DETAIL_SR_NO = '" + AssetSrNo + "' AND TYPE = 1 ORDER BY A.SR_NO DESC";
                
                rsTmp = data.getResult(SQL,FinanceGlobal.FinURL);
                if(rsTmp.getRow()>0) {
                    String dep_from_date = rsTmp.getString("DEPRECIATION_TO_DATE");
                    openingbal=rsTmp.getDouble("CLOSING_BALANCE");
                    DataModel.setValueByVariable("BOOK_OPENING_VALUE",String.valueOf(openingbal) ,i);
                    CumDepr = rsTmp.getDouble("CUMULATIVE_DEPRECIATION");
                    int  month = EITLERPGLOBAL.getMonthDifference(EITLERPGLOBAL.formatDateDB(SaleDate),dep_from_date);
                    double BookRate=rsTmp.getDouble("DEPRECIATION_PERCENTAGE");
                    double closing = openingbal - clsFASGlobal.WrittenDownMethod(openingbal, BookRate,month);
                    CumDepr = CumDepr + clsFASGlobal.WrittenDownMethod(openingbal, BookRate,month);
                    DataModel.setValueByVariable("BOOK_CUMULATIVE_DEPRECIATION",String.valueOf(CumDepr) ,i);
                    DataModel.setValueByVariable("BOOK_CURRENT_YEAR_DEPRECIATION",String.valueOf(clsFASGlobal.WrittenDownMethod(openingbal, BookRate,month)) ,i);
                    DataModel.setValueByVariable("BOOK_CLOSING_VALUE",String.valueOf(openingbal - clsFASGlobal.WrittenDownMethod(openingbal, BookRate,month)) ,i);
                    DataModel.setValueByVariable("BOOK_PROFIT_LOSS",String.valueOf(SaleValue - closing),i);
                }
            }
            
            /////////////////////////  IT Calculation for Sale Asset //////////////////////////////
            
            double itDeprAmount =0.0;
            double itCumDepr = 0.0;
            double Net_Block  = 0.0;
            double itopeningbal = 0.0;
            double itclosingbal = 0.0;
            
            String ITSQL ="SELECT * FROM  D_FAS_MASTER_DETAIL_EX A,D_FAS_MASTER_DETAIL B " +
            "WHERE A.DEPRECIATION_FROM_DATE >= '" + EITLERPGLOBAL.getFinYearStartDate(EITLERPGLOBAL.formatDateDB(SaleDate)) + "'  " +
            "AND  A.DEPRECIATION_FROM_DATE <= '" + EITLERPGLOBAL.getFinYearEndDate(EITLERPGLOBAL.formatDateDB(SaleDate)) + "'  " +
            "AND A.ASSET_NO = '" + AssetNo + "' " +
            "AND A.ASSET_NO = B.ASSET_NO " +
            "AND A.DETAIL_SR_NO  = B.SR_NO " +
            "AND A.DETAIL_SR_NO = '" + AssetSrNo + "' AND TYPE = 2 " ;
            
            rsIT = data.getResult(ITSQL,FinanceGlobal.FinURL);
            
            
            //String AssetDate = data.getStringValueFromDB("SELECT ASSET_DATE FROM D_FAS_MASTER_HEADER WHERE ASSET_NO = '" + AssetNo + "'",FinanceGlobal.FinURL);
            if(rsIT.getRow()>0) {
                String it_dep_from_date = rsIT.getString("DEPRECIATION_FROM_DATE");
                itopeningbal=rsIT.getDouble("OPENING_BALANCE");
                itCumDepr = rsIT.getDouble("CUMULATIVE_DEPRECIATION");
                DataModel.setValueByVariable("IT_OPENING_VALUE",String.valueOf(itopeningbal),i);
                int  imonth = EITLERPGLOBAL.getMonthDifference(EITLERPGLOBAL.formatDateDB(SaleDate),it_dep_from_date)+1;
                double ITRate=rsIT.getDouble("DEPRECIATION_PERCENTAGE");
                double itclosing = itopeningbal - clsFASGlobal.WrittenDownMethod(itopeningbal, ITRate,imonth);
                itCumDepr = itCumDepr + clsFASGlobal.WrittenDownMethod(itopeningbal, ITRate,imonth);
                DataModel.setValueByVariable("IT_CURRENT_YEAR_DEPRECIATION",String.valueOf(clsFASGlobal.WrittenDownMethod(itopeningbal,ITRate,imonth)) ,i);
                DataModel.setValueByVariable("IT_CUMULATIVE_DEPRECIATION",String.valueOf(itCumDepr) ,i);
                DataModel.setValueByVariable("IT_CLOSING_VALUE",String.valueOf(itclosing) ,i);
                DataModel.setValueByVariable("IT_PROFIT_LOSS",String.valueOf(SaleValue - itclosing),i);
                
                //DataModel.setValueByVariable("IT_CLOSING_VALUE","0",i);//String.valueOf(clsFASGlobal.WrittenDownMethod(itopeningbal, ITRate) - SaleValue) ,i);
                //DataModel.setValueByVariable("NET_BLOCK",String.valueOf(clsFASGlobal.WrittenDownMethod(itopeningbal, ITRate) - SaleValue),i);
                
                //                Net_Block= SaleValue - itopeningbal;
                //                if(Net_Block <= 0) {
                //                    DataModel.setValueByVariable("NET_BLOCK","0",i);
                //                    DataModel.setValueByVariable("IT_CLOSING_VALUE","0",i);
                //                    DataModel.setValueByVariable("IT_CURRENT_YEAR_DEPRECIATION","0",i);
                //                    DataModel.setValueByVariable("IT_CUMULATIVE_DEPRECIATION","0",i);
                //                }
                //                else {
                //                    DataModel.setValueByVariable("IT_CURRENT_YEAR_DEPRECIATION",String.valueOf(clsFASGlobal.WrittenDownMethod(Net_Block, ITRate)),i);
                //                    itCumDepr = itCumDepr - clsFASGlobal.WrittenDownMethod(Net_Block, ITRate);
                //                    DataModel.setValueByVariable("IT_CUMULATIVE_DEPRECIATION",String.valueOf(itCumDepr) ,i);
                //                    Net_Block = Net_Block - clsFASGlobal.WrittenDownMethod(Net_Block, ITRate);
                //                    DataModel.setValueByVariable("NET_BLOCK",String.valueOf(Net_Block),i);
                //                    DataModel.setValueByVariable("IT_CLOSING_VALUE",String.valueOf(Net_Block),i);
                //                   // DataModel.setValueByVariable("IT_CLOSING_VALUE","0",i);
                //
                //                }
                //imonth = EITLERPGLOBAL.getMonthDifference(EITLERPGLOBAL.formatDateDB(SaleDate),EITLERPGLOBAL.getFinYearEndDate(it_dep_from_date));
                //Net_Block = clsFASGlobal.WrittenDownMethod(itopeningbal, ITRate,imonth);//((itclosing - SaleValue) * ITRate)/100;
                //                DataModel.setValueByVariable("NET_BLOCK",String.valueOf(itclosing-),i);
            }
            else {
                ITSQL ="SELECT * FROM  D_FAS_MASTER_DETAIL_EX A,D_FAS_MASTER_DETAIL B " +
                "WHERE A.ASSET_NO = '" + AssetNo + "' " +
                "AND A.ASSET_NO = B.ASSET_NO " +
                "AND A.DETAIL_SR_NO  = B.SR_NO " +
                "AND A.DETAIL_SR_NO = '" + AssetSrNo + "' AND TYPE = 2 ORDER BY A.SR_NO DESC";
                
                rsIT = data.getResult(ITSQL,FinanceGlobal.FinURL);
                if(rsIT.getRow()>0) {
                    String it_dep_from_date = rsIT.getString("DEPRECIATION_TO_DATE");
                    itopeningbal=rsIT.getDouble("CLOSING_BALANCE");
                    DataModel.setValueByVariable("IT_OPENING_VALUE",String.valueOf(itopeningbal) ,i);
                    itCumDepr = rsIT.getDouble("CUMULATIVE_DEPRECIATION");
                    int  imonth = EITLERPGLOBAL.getMonthDifference(EITLERPGLOBAL.formatDateDB(SaleDate),it_dep_from_date);
                    double ITRate=rsIT.getDouble("DEPRECIATION_PERCENTAGE");
                    double itclosing = itopeningbal - clsFASGlobal.WrittenDownMethod(itopeningbal, ITRate,imonth);
                    itCumDepr = CumDepr + clsFASGlobal.WrittenDownMethod(itopeningbal, ITRate,imonth);
                    DataModel.setValueByVariable("IT_CUMULATIVE_DEPRECIATION",String.valueOf(itCumDepr) ,i);
                    DataModel.setValueByVariable("IT_CURRENT_YEAR_DEPRECIATION",String.valueOf(clsFASGlobal.WrittenDownMethod(itopeningbal, ITRate,imonth)) ,i);
                    DataModel.setValueByVariable("IT_CLOSING_VALUE",String.valueOf(itopeningbal - clsFASGlobal.WrittenDownMethod(itopeningbal, ITRate,imonth)) ,i);
                    DataModel.setValueByVariable("IT_PROFIT_LOSS",String.valueOf(SaleValue - itclosing),i);
                    
                    
                    
                    
                    //                    //DataModel.setValueByVariable("IT_CLOSING_VALUE","0",i);
                    //                    Net_Block = SaleValue -  itopeningbal;
                    //                    if(Net_Block <=0) {
                    //                        DataModel.setValueByVariable("NET_BLOCK","0",i);
                    //                        DataModel.setValueByVariable("IT_CLOSING_VALUE","0",i);
                    //                        DataModel.setValueByVariable("IT_CURRENT_YEAR_DEPRECIATION","0",i);
                    //                         DataModel.setValueByVariable("IT_CUMULATIVE_DEPRECIATION","0",i);
                    //                    }
                    //                    else {
                    //
                    //                        itCumDepr = itCumDepr - clsFASGlobal.WrittenDownMethod(Net_Block, ITRate);
                    //                        DataModel.setValueByVariable("IT_CUMULATIVE_DEPRECIATION",String.valueOf(itCumDepr) ,i);
                    //                        Net_Block = Net_Block - clsFASGlobal.WrittenDownMethod(Net_Block, ITRate);
                    //                        DataModel.setValueByVariable("IT_CLOSING_VALUE",String.valueOf(Net_Block),i);
                    //                        //DataModel.setValueByVariable("IT_CLOSING_VALUE","0",i);
                    //                        DataModel.setValueByVariable("NET_BLOCK",String.valueOf(Net_Block),i);
                    //                        //DataModel.setValueByVariable("IT_CURRENT_YEAR_DEPRECIATION","0",i);
                    //                        DataModel.setValueByVariable("IT_CURRENT_YEAR_DEPRECIATION",String.valueOf(clsFASGlobal.WrittenDownMethod(Net_Block, ITRate)),i);
                    //                    }
                    //                    //String test = EITLERPGLOBAL.getFinYearEndDate(it_dep_from_date);
                    //                    //imonth = EITLERPGLOBAL.getMonthDifference(EITLERPGLOBAL.formatDateDB(SaleDate),it_dep_from_date);
                    //                    //Net_Block = clsFASGlobal.WrittenDownMethod(itopeningbal, ITRate,imonth);//((itclosing - SaleValue) * ITRate)/100;
                    //
                }
            }
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        // UpdateDetailBookSrNo();
    }
    private void PreviewReport() {
        /* HashMap Params=new HashMap();
         
         
        if(chkCancelled.isSelected()) {
            JOptionPane.showMessageDialog(null,"You cannot take printout of cancelled document");
            return;
        }
         
        try {
            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptIssueRequisition.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"File error "+e.getMessage());
        }*/
    }
    
}
