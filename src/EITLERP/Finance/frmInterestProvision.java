/*
 * frmLedger.java
 *
 * Created on August 24, 2007, 10:52 AM
 */

package EITLERP.Finance;

/**
 *
 * @author  root
 */
import EITLERP.*;
import EITLERP.Finance.*;
import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.io.*;
import EITLERP.Purchase.*;
import EITLERP.Stores.*;
import java.sql.*;
import EITLERP.Finance.Config.*;
import java.text.*;

public class frmInterestProvision extends javax.swing.JApplet {
    private HashMap props;
    private Connection Conn;
    private Statement Stmt;
    private ResultSet rsResult;
    private clsCalcInterest objCalcInterest;
    
    public Variant getAttribute(String PropName) {
        return (Variant) props.get(PropName);
    }
    
    public void setAttribute(String PropName,Object Value) {
        props.put(PropName,new Variant(Value));
    }
    
    /** Initializes the applet frmLedger */
    public void init() {
        props = new HashMap();
        objCalcInterest = new clsCalcInterest();
        setSize(435, 280);
        initComponents();
        clearFields();
        Bar.setVisible(false);
        lblBar.setVisible(false);
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        lblTitle = new javax.swing.JLabel();
        MainPanel = new javax.swing.JTabbedPane();
        TransferProvision = new javax.swing.JPanel();
        lblFromDate = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        cmdTransferProvision = new javax.swing.JButton();
        lblToDate = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        lblMessage = new javax.swing.JLabel();
        lblBookCode = new javax.swing.JLabel();
        txtBookCode = new javax.swing.JTextField();
        Bar = new javax.swing.JProgressBar();
        lblBar = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblMessage1 = new javax.swing.JLabel();
        lblDocNo = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        cmdTransferTDS1 = new javax.swing.JButton();
        lblReverseBar = new javax.swing.JLabel();
        ReverseBar = new javax.swing.JProgressBar();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" Interest Provision");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(1, 1, 440, 25);

        TransferProvision.setLayout(null);

        TransferProvision.setBorder(new javax.swing.border.EtchedBorder());
        lblFromDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFromDate.setText("From Date :");
        TransferProvision.add(lblFromDate);
        lblFromDate.setBounds(10, 42, 80, 15);

        txtFromDate.setNextFocusableComponent(txtToDate);
        txtFromDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFromDateFocusGained(evt);
            }
        });

        TransferProvision.add(txtFromDate);
        txtFromDate.setBounds(95, 40, 110, 19);

        cmdTransferProvision.setText("Transfer Provision");
        cmdTransferProvision.setNextFocusableComponent(txtFromDate);
        cmdTransferProvision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTransferProvisionActionPerformed(evt);
            }
        });

        TransferProvision.add(cmdTransferProvision);
        cmdTransferProvision.setBounds(50, 100, 220, 25);

        lblToDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblToDate.setText("To Date :");
        TransferProvision.add(lblToDate);
        lblToDate.setBounds(210, 42, 70, 15);

        txtToDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToDateFocusGained(evt);
            }
        });

        TransferProvision.add(txtToDate);
        txtToDate.setBounds(295, 40, 110, 19);

        lblMessage.setFont(new java.awt.Font("Tahoma", 1, 11));
        lblMessage.setText(" Provision entry for current year.");
        lblMessage.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        TransferProvision.add(lblMessage);
        lblMessage.setBounds(5, 10, 410, 20);

        lblBookCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBookCode.setText("Book Code :");
        TransferProvision.add(lblBookCode);
        lblBookCode.setBounds(10, 70, 80, 15);

        TransferProvision.add(txtBookCode);
        txtBookCode.setBounds(95, 70, 110, 19);

        TransferProvision.add(Bar);
        Bar.setBounds(10, 160, 405, 14);

        lblBar.setText("...");
        TransferProvision.add(lblBar);
        lblBar.setBounds(10, 135, 405, 15);

        MainPanel.addTab("Transfer Provision", TransferProvision);

        jPanel1.setLayout(null);

        lblMessage1.setFont(new java.awt.Font("Tahoma", 1, 11));
        lblMessage1.setText(" Reverse Provision by providing Interest Calculation Document No.");
        lblMessage1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(lblMessage1);
        lblMessage1.setBounds(5, 10, 410, 20);

        lblDocNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDocNo.setText("Interest Calculation Doc No. :");
        jPanel1.add(lblDocNo);
        lblDocNo.setBounds(5, 52, 190, 15);

        txtDocNo.setNextFocusableComponent(txtToDate);
        jPanel1.add(txtDocNo);
        txtDocNo.setBounds(210, 50, 110, 19);

        cmdTransferTDS1.setText("Reverse Provision");
        cmdTransferTDS1.setNextFocusableComponent(txtFromDate);
        cmdTransferTDS1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTransferTDS1ActionPerformed(evt);
            }
        });

        jPanel1.add(cmdTransferTDS1);
        cmdTransferTDS1.setBounds(140, 80, 160, 25);

        lblReverseBar.setText("...");
        jPanel1.add(lblReverseBar);
        lblReverseBar.setBounds(10, 135, 405, 15);

        jPanel1.add(ReverseBar);
        ReverseBar.setBounds(10, 160, 405, 14);

        MainPanel.addTab("Reverse Provision", jPanel1);

        getContentPane().add(MainPanel);
        MainPanel.setBounds(2, 27, 430, 210);

        lblStatus.setText("...");
        lblStatus.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(5, 240, 420, 20);

    }//GEN-END:initComponents
    
    private void cmdTransferTDS1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTransferTDS1ActionPerformed
        // TODO add your handling code here:
        String DocNo = txtDocNo.getText().trim();
        if(!data.IsRecordExist("SELECT * FROM D_FD_INT_CALC_HEADER WHERE DOC_NO='" + DocNo + "' AND TDS_ONLY=1 ",FinanceGlobal.FinURL)) {
            JOptionPane.showMessageDialog(this,"Doc No not does not exists.");
            return;
        }
        reverseVoucher22();
    }//GEN-LAST:event_cmdTransferTDS1ActionPerformed
    
    private void cmdTransferProvisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTransferProvisionActionPerformed
        // TODO add your handling code here:
        ShowMessage("Processing...");
        if(!Validate()) {
            ShowMessage("Not Processed Properly...");
            return;
        }
        updateData();
        //clearFields();
        ShowMessage("Done...");
    }//GEN-LAST:event_cmdTransferProvisionActionPerformed
    
    private void txtToDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Insert To Date in DD/MM/YYYY format.");
    }//GEN-LAST:event_txtToDateFocusGained
    
    private void txtFromDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFromDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Insert From Date in DD/MM/YYYY format.");
    }//GEN-LAST:event_txtFromDateFocusGained
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar Bar;
    private javax.swing.JTabbedPane MainPanel;
    private javax.swing.JProgressBar ReverseBar;
    private javax.swing.JPanel TransferProvision;
    private javax.swing.JButton cmdTransferProvision;
    private javax.swing.JButton cmdTransferTDS1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblBar;
    private javax.swing.JLabel lblBookCode;
    private javax.swing.JLabel lblDocNo;
    private javax.swing.JLabel lblFromDate;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblMessage1;
    private javax.swing.JLabel lblReverseBar;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblToDate;
    private javax.swing.JTextField txtBookCode;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private boolean Validate() {
        if(txtFromDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Insert From Date in DD/MM/YYYY format.");
            return false;
        } else if(!EITLERPGLOBAL.isDate(txtFromDate.getText().trim())) {
            JOptionPane.showMessageDialog(this,"Insert From Date in DD/MM/YYYY format.");
            return false;
        }
        
        if(txtToDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Insert To Date in DD/MM/YYYY format.");
            return false;
        } else if(!EITLERPGLOBAL.isDate(txtToDate.getText().trim())) {
            JOptionPane.showMessageDialog(this,"Insert To Date in DD/MM/YYYY format.");
            return false;
        }
        
        String FromDate = EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
        String ToDate = EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());
        
        if(java.sql.Date.valueOf(FromDate).compareTo(java.sql.Date.valueOf(EITLERPGLOBAL.FinFromDateDB))!=0) {
            JOptionPane.showMessageDialog(this,"From Date not within Financial year.");
            return false;
        }
        
        if(java.sql.Date.valueOf(ToDate).compareTo(java.sql.Date.valueOf(EITLERPGLOBAL.FinToDateDB))!=0) {
            JOptionPane.showMessageDialog(this,"To Date not within Financial year.");
            return false;
        }
        
        if(data.IsRecordExist("SELECT * FROM D_FD_INT_CALC_HEADER WHERE EFFECTIVE_DATE='"+ToDate+"' AND TDS_ONLY=1",FinanceGlobal.FinURL)) {
            JOptionPane.showMessageDialog(this,"Interest Provision for this financial year already has been done.");
            return false;
        }
        
        if(txtBookCode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"To Date not within Financial year.");
            return false;
        }
        
        if(!data.IsRecordExist("SELECT * FROM D_FIN_BOOK_MASTER WHERE BOOK_CODE='"+txtBookCode.getText().trim()+"'",FinanceGlobal.FinURL)) {
            JOptionPane.showMessageDialog(this,"Please enter book code.");
            return false;
        }
        return true;
    }
    
    private void updateData() {
        
        new Thread(){
            
            public void run(){
                String FromDate = EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
                String ToDate = EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());
                String MDate = EITLERPGLOBAL.addDaysToDate(ToDate, 1, "yyyy-MM-dd");
                int SRNo=0,HierarchyID=1057,CompanyID=0,Days=0;
                String DocNo = "", LastCalcDate = "", strSQL="";
                double PartyInterest = 0,InterestAmount =0,TDSAmount=0,netInterest=0;
                ResultSet rsReceipt = null;
                try {
                    strSQL = "SELECT COUNT(*) FROM D_FD_DEPOSIT_MASTER WHERE MATURITY_DATE>'"+MDate+"' AND EFFECTIVE_DATE<='"+ToDate+"' " +
                    "AND DEPOSIT_TYPE_ID=2 AND APPROVED=1 AND CANCELLED=0 AND (PM_DATE>'"+ToDate+"' OR PM_DATE='0000-00-00' OR PM_DATE='') " + //AND RECEIPT_NO='M003038'
                    "ORDER BY RECEIPT_DATE";
                    int BarCounter = data.getIntValueFromDB(strSQL,FinanceGlobal.FinURL);
                    
                    Bar.setVisible(true);
                    lblBar.setVisible(true);
                    Bar.setMaximum(BarCounter);
                    Bar.setMinimum(0);
                    Bar.setValue(0);
                    
                    objCalcInterest.LoadData(EITLERPGLOBAL.gCompanyID);
                    Conn = data.getConn(FinanceGlobal.FinURL);
                    Stmt = Conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
                    strSQL = "SELECT * FROM D_FD_DEPOSIT_MASTER WHERE MATURITY_DATE>'"+MDate+"' AND EFFECTIVE_DATE<='"+ToDate+"' " +
                    "AND DEPOSIT_TYPE_ID=2 AND APPROVED=1 AND CANCELLED=0 AND (PM_DATE>'"+ToDate+"' OR PM_DATE='0000-00-00' OR PM_DATE='') " + //AND RECEIPT_NO='M003038'
                    "ORDER BY RECEIPT_DATE";
                    rsReceipt = Stmt.executeQuery(strSQL);
                    
                    rsReceipt.first();
                    objCalcInterest.colLineItems.clear();
                    if(rsReceipt.getRow() > 0) {
                        DocNo = clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID,clsCalcInterest.ModuleID,115,false);
                        while(!rsReceipt.isAfterLast()) {
                            String ReceiptNo = rsReceipt.getString("RECEIPT_NO");
                            String MainAccountCode = rsReceipt.getString("MAIN_ACCOUNT_CODE");
                            String PartyCode = rsReceipt.getString("PARTY_CODE");
                            CompanyID = rsReceipt.getInt("COMPANY_ID");
                            PartyInterest = 0;
                            LastCalcDate = "";
                            Days=0;
                            InterestAmount = 0;
                            TDSAmount =0;
                            netInterest=0;
                            
                            SRNo++;
                            Bar.setValue(SRNo);
                            lblBar.setText("Processing Record : "+SRNo +" Rct. No : " + ReceiptNo + " PartyCode : " + PartyCode);
                            
                            clsCalcInterestItem ObjItem = new clsCalcInterestItem();
                            ObjItem.setAttribute("COMPANY_ID",rsReceipt.getLong("COMPANY_ID"));
                            ObjItem.setAttribute("DOC_NO",DocNo);
                            ObjItem.setAttribute("SR_NO",SRNo);
                            ObjItem.setAttribute("RECEIPT_NO",rsReceipt.getString("RECEIPT_NO"));
                            
                            //                            strSQL = "SELECT WARRANT_DATE FROM D_FD_INT_CALC_DETAIL WHERE RECEIPT_NO='"+ReceiptNo+"' AND PARTY_CODE='"+PartyCode+"' " +
                            //                            "AND WARRANT_DATE>='"+FromDate+"' AND WARRANT_DATE<='"+ToDate+"' ORDER BY WARRANT_DATE DESC";
                            strSQL = "SELECT B.WARRANT_DATE FROM D_FD_INT_CALC_HEADER A, D_FD_INT_CALC_DETAIL B " +
                            "WHERE A.DOC_NO=B.DOC_NO AND B.RECEIPT_NO='"+ReceiptNo+"' AND B.PARTY_CODE='"+PartyCode+"' AND B.WARRANT_DATE>='"+FromDate+"' " +
                            "AND B.WARRANT_DATE<='"+ToDate+"' AND A.TDS_ONLY=0 ORDER BY B.WARRANT_DATE DESC ";
                            if(data.IsRecordExist(strSQL,FinanceGlobal.FinURL)) {
                                LastCalcDate = data.getStringValueFromDB(strSQL,FinanceGlobal.FinURL);
                            } else {
                                strSQL = "SELECT EFFECTIVE_DATE FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+ReceiptNo+"' AND PARTY_CODE='"+PartyCode+"' ";
                                LastCalcDate = data.getStringValueFromDB(strSQL,FinanceGlobal.FinURL);
                            }
                            Days = EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(LastCalcDate), java.sql.Date.valueOf(ToDate))+1;
                            
                            ObjItem.setAttribute("INTEREST_DAYS",Days);
                            ObjItem.setAttribute("INTEREST_RATE",rsReceipt.getDouble("INTEREST_RATE"));
                            ObjItem.setAttribute("INT_MAIN_ACCOUNT_CODE",rsReceipt.getString("INTEREST_MAIN_CODE"));
                            ObjItem.setAttribute("PARTY_CODE",rsReceipt.getString("PARTY_CODE"));
                            ObjItem.setAttribute("MAIN_ACCOUNT_CODE",rsReceipt.getString("MAIN_ACCOUNT_CODE"));
                            
                            InterestAmount = getCurrentInterest(LastCalcDate, ReceiptNo, PartyCode);
                            
                            strSQL = "SELECT PARTY_CODE FROM D_FD_TAX_FORM_RECEIVED WHERE PARTY_CODE='"+PartyCode+"' " +
                            "AND RECEIVED_DATE>='"+FromDate+"' AND RECEIVED_DATE<='"+ToDate+"' ";
                            if(!data.IsRecordExist(strSQL,FinanceGlobal.FinURL)) {
                                PartyInterest = checkTDSAmount(PartyCode,ReceiptNo);
                                if(PartyInterest > 5000) {
                                    //TDSAmount = clsDepositMaster.calculateTDSAmount(InterestAmount);
                                    /*if(Integer.parseInt(txtToDate.getText().trim().substring(6,10))<=2009) {
                                        TDSAmount = EITLERPGLOBAL.round(((InterestAmount * 11.33)/100),0);
                                    }*/
                                    if(ReceiptNo.equals("M025090")||ReceiptNo.equals("M010043") || ReceiptNo.equals("000221")) {
                                        TDSAmount = EITLERPGLOBAL.round(((InterestAmount * 20)/100),0);
                                    } else {
                                        TDSAmount = EITLERPGLOBAL.round(clsDepositMaster.calculateTDSAmount(InterestAmount),0);
                                    }
                                }
                            }
                            
                            netInterest = EITLERPGLOBAL.round(InterestAmount - TDSAmount,0);
                            
                            ObjItem.setAttribute("INTEREST_AMOUNT",InterestAmount);
                            ObjItem.setAttribute("TDS_AMOUNT",TDSAmount);
                            ObjItem.setAttribute("NET_INTEREST",netInterest);
                            ObjItem.setAttribute("WARRANT_NO","0000000");
                            ObjItem.setAttribute("WARRANT_DATE",txtToDate.getText().trim());
                            ObjItem.setAttribute("MICR_NO",0);
                            ObjItem.setAttribute("WARRANT_CLEAR","N");
                            ObjItem.setAttribute("CREATED_BY",EITLERPGLOBAL.gLoginID);
                            ObjItem.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
                            ObjItem.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gLoginID);
                            ObjItem.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
                            ObjItem.setAttribute("CHANGED",true);
                            ObjItem.setAttribute("CHANGED_DATE",EITLERPGLOBAL.getCurrentDateDB());
                            ObjItem.setAttribute("CANCELLED",false);
                            objCalcInterest.colLineItems.put(Long.toString(SRNo),ObjItem);
                            if(TDSAmount > 0) {
                                System.out.println("Counter = "+SRNo+" ReceiptNo = " + ReceiptNo +" PartyCode = "+PartyCode+" Party Amount = "+PartyInterest+" Interest Amount = "+InterestAmount+" TDSAmount = "+TDSAmount+" netAmount = " + netInterest);
                            }
                            
                            rsReceipt.next();
                        }
                    }
                    System.out.println("Size = " + objCalcInterest.colLineItems.size());
                    Bar.setVisible(false);
                    lblBar.setText("Wait until processing...");
                    
                    if(objCalcInterest.colLineItems.size() > 0) {
                        objCalcInterest.setAttribute("FFNO",115);
                        objCalcInterest.setAttribute("COMPANY_ID",UtilFunctions.getInt(rsReceipt,"COMPANY_ID",0));
                        objCalcInterest.setAttribute("DOC_NO",DocNo);
                        objCalcInterest.setAttribute("DOC_DATE",txtToDate.getText().trim());
                        objCalcInterest.setAttribute("EFFECTIVE_DATE",txtToDate.getText().trim());
                        objCalcInterest.setAttribute("REMARKS","Interest Provision for the period "+txtFromDate.getText().trim()+"-"+txtToDate.getText().trim());
                        objCalcInterest.setAttribute("BOOK_CODE",txtBookCode.getText().trim());
                        objCalcInterest.setAttribute("TDS_ONLY",1);
                        objCalcInterest.setAttribute("APPROVED",false);
                        objCalcInterest.setAttribute("APPROVED_DATE","0000-00-00");
                        objCalcInterest.setAttribute("REJECTED",false);
                        objCalcInterest.setAttribute("REJECTED_DATE","0000-00-00");
                        objCalcInterest.setAttribute("REJECTED_REMARKS","");
                        objCalcInterest.setAttribute("CREATED_BY",EITLERPGLOBAL.gLoginID);
                        objCalcInterest.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
                        objCalcInterest.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gLoginID);
                        objCalcInterest.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
                        
                        int FirstUserID=data.getIntValueFromDB("SELECT USER_ID FROM D_COM_HIERARCHY_RIGHTS WHERE HIERARCHY_ID="+HierarchyID+" AND SR_NO=1");
                        objCalcInterest.setAttribute("FROM",FirstUserID);
                        objCalcInterest.setAttribute("TO",FirstUserID);
                        objCalcInterest.setAttribute("FROM_REMARKS","Auto generated for Interest Provision.");
                        objCalcInterest.setAttribute("APPROVAL_STATUS","H"); //Hold Receipt
                        
                        objCalcInterest.setAttribute("HIERARCHY_ID",HierarchyID);
                        objCalcInterest.setAttribute("CHANGED",true);
                        objCalcInterest.setAttribute("CHANGED_DATE",EITLERPGLOBAL.getCurrentDateDB());
                        objCalcInterest.setAttribute("CANCELLED",false);
                        
                        if(!objCalcInterest.Insert()) {
                            JOptionPane.showMessageDialog(null,"Interest Provision data not posted properly.");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null,"No record found for Interest Provision.");
                    }
                    lblBar.setText("Process Completed... Doc No : " + DocNo);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                
            };
        }.start();
    }
    
    public double getCurrentInterest(String EffectiveDate, String ReceiptNo, String PartyCode) {
        double currentInterest = 0.0;
        int Days = 0;
        String LastDate = "",strSQL="";
        double iPercentage = 0.0;
        double Amount = 0.0;
        try {
            LastDate = EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());
            
            strSQL = "SELECT INTEREST_RATE FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+ReceiptNo+"' AND PARTY_CODE='"+PartyCode+"' ";
            iPercentage = data.getDoubleValueFromDB(strSQL,FinanceGlobal.FinURL);
            
            strSQL = "SELECT AMOUNT FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+ReceiptNo+"' AND PARTY_CODE='"+PartyCode+"' ";
            Amount = EITLERPGLOBAL.round(data.getDoubleValueFromDB(strSQL,FinanceGlobal.FinURL),0);
            
            strSQL= "SELECT SUM(A.INTEREST_AMOUNT) AS TOTAL FROM D_FD_INT_CALC_DETAIL A, D_FD_INT_CALC_HEADER B " +
            "WHERE A.RECEIPT_NO='"+ReceiptNo+"' AND A.PARTY_CODE='"+PartyCode+"' AND A.DOC_NO=B.DOC_NO AND B.TDS_ONLY=0 " +
            "AND A.WARRANT_DATE<='"+LastDate+"' ";
            Amount = EITLERPGLOBAL.round(Amount + data.getDoubleValueFromDB(strSQL,FinanceGlobal.FinURL),0);
            
            Days = EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(EffectiveDate), java.sql.Date.valueOf(LastDate))+1;
            
            GregorianCalendar cal = new GregorianCalendar();
            //if(cal.isLeapYear(Integer.parseInt(LastDate.substring(0,4)))) {
            if(cal.isLeapYear(Integer.parseInt(LastDate.substring(0,4)))) {
                currentInterest = EITLERPGLOBAL.round(((Amount * iPercentage * Days)/(366* 100)),0); //INTEREST AMOUNT = (AMOUNT * RATE)/100
            } else {
                currentInterest = EITLERPGLOBAL.round(((Amount * iPercentage * Days)/(365* 100)),0); //INTEREST AMOUNT = (AMOUNT * RATE)/100
            }
        } catch (Exception e) {
            return currentInterest;
        }
        return currentInterest;
    }
    
    public double checkTDSAmount(String PartyCode, String ReceiptNo) {
        double interestAmount = 0.0;
        String StartFinYear = EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
        String EndFinYear = EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());
        String EffectiveDate = "";
        String MaturityDate = "";
        String PMDate = "";
        int DiffofDays = 1;
        double Rate = 0.0;
        double Amount = 0.0;
        int DepositType = 0;
        GregorianCalendar cal = new GregorianCalendar();
        String StartDate="";
        try {
            // Matured and Closed within financial year.
            ResultSet rsTDSClose = data.getResult("SELECT * FROM D_FD_DEPOSIT_MASTER WHERE DEPOSIT_STATUS=1 AND PARTY_CODE='"+PartyCode+"' AND MATURITY_DATE>='"+StartFinYear+"' AND MATURITY_DATE<='"+EndFinYear+"' ",FinanceGlobal.FinURL);
            rsTDSClose.first();
            if(rsTDSClose.getRow() > 0 ) {
                while(!rsTDSClose.isAfterLast()) {
                    DepositType = rsTDSClose.getInt("DEPOSIT_TYPE_ID");
                    Amount = rsTDSClose.getDouble("AMOUNT");
                    Rate = rsTDSClose.getDouble("INTEREST_RATE");
                    MaturityDate = rsTDSClose.getString("MATURITY_DATE");
                    if(DepositType==2)  {
                        ResultSet rsTmp = data.getResult("SELECT A.INTEREST_AMOUNT FROM D_FD_INT_CALC_DETAIL A, D_FD_INT_CALC_HEADER B WHERE A.RECEIPT_NO='"+rsTDSClose.getString("RECEIPT_NO")+"' AND A.DOC_NO=B.DOC_NO AND B.TDS_ONLY=0",FinanceGlobal.FinURL);
                        rsTmp.first();
                        if(rsTmp.getRow() > 0) {
                            while(!rsTmp.isAfterLast()) {
                                Amount += rsTmp.getDouble("INTEREST_AMOUNT");
                                rsTmp.next();
                            }
                        }
                        rsTmp.close();
                    }
                    DiffofDays = EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(StartFinYear), java.sql.Date.valueOf(MaturityDate))+1;
                    StartDate=StartFinYear;
                    if (cal.isLeapYear(Integer.parseInt(EITLERPGLOBAL.getFinYearEndDate(StartDate).substring(0,4)))) {
                        interestAmount += EITLERPGLOBAL.round((Amount *  Rate * DiffofDays)/36600,0);
                    } else {
                        interestAmount += EITLERPGLOBAL.round((Amount *  Rate * DiffofDays)/36500,0);
                    }
                    rsTDSClose.next();
                }
            }
            rsTDSClose.close();
            StartDate="";
            // Open within financial year.
            //ResultSet rsTDSOpen = data.getResult("SELECT * FROM D_FD_DEPOSIT_MASTER WHERE DEPOSIT_STATUS=0 AND PARTY_CODE='"+PartyCode+"' ",FinanceGlobal.FinURL); //AND RECEIPT_NO<>'"+ReceiptNo+"'
            ResultSet rsTDSOpen = data.getResult("SELECT * FROM D_FD_DEPOSIT_MASTER WHERE MATURITY_DATE>'"+EndFinYear+"' AND (PM_DATE>'"+EndFinYear+"' OR PM_DATE='0000-00-00' OR PM_DATE='') AND PARTY_CODE='"+PartyCode+"' ",FinanceGlobal.FinURL); //AND RECEIPT_NO<>'"+ReceiptNo+"'
            rsTDSOpen.first();
            if(rsTDSOpen.getRow() > 0 ) {
                while(!rsTDSOpen.isAfterLast()) {
                    DepositType = rsTDSOpen.getInt("DEPOSIT_TYPE_ID");
                    Amount = rsTDSOpen.getDouble("AMOUNT");
                    Rate = rsTDSOpen.getDouble("INTEREST_RATE");
                    EffectiveDate = rsTDSOpen.getString("EFFECTIVE_DATE");
                    MaturityDate = rsTDSOpen.getString("MATURITY_DATE");
                    if(java.sql.Date.valueOf(EffectiveDate).before(java.sql.Date.valueOf(StartFinYear))) {
                        if(java.sql.Date.valueOf(MaturityDate).before(java.sql.Date.valueOf(EndFinYear))){
                            DiffofDays = EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(StartFinYear), java.sql.Date.valueOf(MaturityDate))+1;
                            StartDate=StartFinYear;
                        } else {
                            DiffofDays = EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(StartFinYear), java.sql.Date.valueOf(EndFinYear))+1;
                            StartDate=StartFinYear;
                        }
                    } else {
                        DiffofDays = EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(EffectiveDate), java.sql.Date.valueOf(EndFinYear))+1;
                        StartDate=EffectiveDate;
                    }
                    
                    if(DepositType==2)  {
                        String SQL = "SELECT A.INTEREST_AMOUNT  FROM D_FD_INT_CALC_DETAIL A, D_FD_INT_CALC_HEADER B " +
                        "WHERE A.RECEIPT_NO='"+rsTDSOpen.getString("RECEIPT_NO")+"' AND A.DOC_NO=B.DOC_NO AND B.TDS_ONLY=0 " +
                        //"AND A.WARRANT_DATE<='"+EndFinYear+"' " +
                        "AND A.WARRANT_DATE<'"+StartFinYear+"' " +
                        "ORDER BY A.WARRANT_DATE ";
                        ResultSet rsTmp = data.getResult(SQL,FinanceGlobal.FinURL);
                        rsTmp.first();
                        if(rsTmp.getRow() > 0) {
                            while(!rsTmp.isAfterLast()) {
                                Amount += rsTmp.getDouble("INTEREST_AMOUNT");
                                rsTmp.next();
                            }
                        }
                        rsTmp.close();
                        //}
                    }
                    
                    if (cal.isLeapYear(Integer.parseInt(EITLERPGLOBAL.getFinYearEndDate(StartDate).substring(0,4)))) {
                        interestAmount += EITLERPGLOBAL.round((Amount *  Rate * DiffofDays)/36600,0);
                    } else {
                        interestAmount += EITLERPGLOBAL.round((Amount *  Rate * DiffofDays)/36500,0);
                    }
                    rsTDSOpen.next();
                }
            }
            rsTDSOpen.close();
            
            // Premature within financial year.
            ResultSet rsTDSPM = data.getResult("SELECT * FROM D_FD_DEPOSIT_MASTER WHERE DEPOSIT_STATUS=2 AND PARTY_CODE='"+PartyCode+"' AND PM_DATE>='"+StartFinYear+"' AND PM_DATE<='"+EndFinYear+"' ",FinanceGlobal.FinURL);
            rsTDSPM.first();
            double PMAmount = 0.0;
            String tmpDate1 = "";
            if(rsTDSPM.getRow() > 0) {
                while(!rsTDSPM.isAfterLast()) {
                    DepositType = rsTDSPM.getInt("DEPOSIT_TYPE_ID");
                    Amount = rsTDSPM.getDouble("AMOUNT");
                    Rate = rsTDSPM.getDouble("INTEREST_RATE")-1;
                    EffectiveDate = rsTDSPM.getString("EFFECTIVE_DATE");
                    PMDate = rsTDSPM.getString("PM_DATE");
                    int Months = data.getIntValueFromDB("SELECT INTEREST_CALCULATION_PERIOD FROM D_FD_SCHEME_MASTER WHERE SCHEME_ID='"+rsTDSPM.getString("SCHEME_ID")+"' ",FinanceGlobal.FinURL);
                    double nyear = Months/12.0;
                    double nTimes = 12.0/Months;
                    String tmpDate = clsCalcInterest.addMonthToDate(EffectiveDate, 6);
                    if(java.sql.Date.valueOf(tmpDate).before(java.sql.Date.valueOf(PMDate))) {
                        if(java.sql.Date.valueOf(EffectiveDate).after(java.sql.Date.valueOf(StartFinYear))) {
                            if(DepositType == 2 ) {
                                while(java.sql.Date.valueOf(tmpDate).before(java.sql.Date.valueOf(PMDate))) {
                                    PMAmount = EITLERPGLOBAL.round((Amount * Math.pow((1 + ((Rate/100)/nTimes)),nTimes*nyear)) - Amount,0);
                                    tmpDate1 = tmpDate;
                                    tmpDate = clsCalcInterest.addMonthToDate(tmpDate, Months);
                                    Amount += PMAmount;
                                }
                                DiffofDays = EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(tmpDate1), java.sql.Date.valueOf(PMDate))+1;
                                StartDate=tmpDate1;
                                if (cal.isLeapYear(Integer.parseInt(EITLERPGLOBAL.getFinYearEndDate(StartDate).substring(0,4)))) {
                                    interestAmount += EITLERPGLOBAL.round((Amount *  Rate * DiffofDays)/36600,0);
                                } else {
                                    interestAmount += EITLERPGLOBAL.round((Amount *  Rate * DiffofDays)/36500,0);
                                }
                            } else {
                                DiffofDays = EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(EffectiveDate), java.sql.Date.valueOf(PMDate))+1;
                                if (cal.isLeapYear(Integer.parseInt(EITLERPGLOBAL.getFinYearEndDate(StartDate).substring(0,4)))) {
                                    interestAmount += EITLERPGLOBAL.round((Amount *  Rate * DiffofDays)/36600,0);
                                } else {
                                    interestAmount += EITLERPGLOBAL.round((Amount *  Rate * DiffofDays)/36500,0);
                                }
                            }
                        } else {
                            if(DepositType == 2) {
                                while(java.sql.Date.valueOf(EffectiveDate).before(java.sql.Date.valueOf(PMDate)) && java.sql.Date.valueOf(EffectiveDate).before(java.sql.Date.valueOf(StartFinYear))) {
                                    PMAmount = EITLERPGLOBAL.round((Amount * Math.pow((1 + ((Rate/100)/nTimes)),nTimes*nyear)) - Amount,0);
                                    tmpDate1 = EffectiveDate;
                                    EffectiveDate = clsCalcInterest.addMonthToDate(EffectiveDate, Months);
                                    Amount += PMAmount;
                                }
                                DiffofDays = EITLERPGLOBAL.DateDiff(java.sql.Date.valueOf(StartFinYear), java.sql.Date.valueOf(PMDate))+1;
                                StartDate=StartFinYear;
                                if (cal.isLeapYear(Integer.parseInt(EITLERPGLOBAL.getFinYearEndDate(StartDate).substring(0,4)))) {
                                    interestAmount += EITLERPGLOBAL.round((Amount *  Rate * DiffofDays)/36600,0);
                                } else {
                                    interestAmount += EITLERPGLOBAL.round((Amount *  Rate * DiffofDays)/36500,0);
                                }
                            }
                        }
                    }
                    rsTDSPM.next();
                }
            }
            rsTDSPM.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return interestAmount;
    }
    
    private void clearFields() {
        txtFromDate.setText("");
        txtToDate.setText("");
        txtBookCode.setText("");
        txtDocNo.setText("");
    }
    
    private void reverseVoucher22() {
        new Thread() {
            public void run(){
                String DocNo="", strSQL = "";
                ResultSet rsInterest = null;
                
                try {
                    DocNo = txtDocNo.getText().trim();
                    //strSQL = "SELECT COUNT(*) FROM D_FD_INT_CALC_DETAIL WHERE DOC_NO='"+DocNo+"' AND WARRANT_NO='0000000' AND TDS_ONLY=1 AND APPROVED=1 AND CANCELLED=0 ORDER BY SR_NO";
                    strSQL = "SELECT COUNT(*) FROM D_FD_INT_CALC_DETAIL WHERE DOC_NO='"+DocNo+"' AND WARRANT_NO='0000000' " +
                    "AND DOC_NO IN (SELECT DOC_NO FROM D_FD_INT_CALC_HEADER WHERE TDS_ONLY=1 AND APPROVED=1 AND CANCELLED=0) " +
                    "ORDER BY SR_NO ";
                    int BarCounter = data.getIntValueFromDB(strSQL,FinanceGlobal.FinURL);
                    if(BarCounter==0) {
                        JOptionPane.showMessageDialog(null,"Reverse Interest Provision data not posted properly.\nEither interest calculation does not exists or not final approved.");
                    }
                    Bar.setVisible(true);
                    lblBar.setVisible(true);
                    Bar.setMaximum(BarCounter);
                    Bar.setMinimum(0);
                    Bar.setValue(0);
                    
                    strSQL = "SELECT * FROM D_FD_INT_CALC_DETAIL WHERE DOC_NO='"+DocNo+"' AND WARRANT_NO='0000000' ORDER BY SR_NO";
                    rsInterest = data.getResult(strSQL, FinanceGlobal.FinURL);
                    rsInterest.first();
                    
                    while(!rsInterest.isAfterLast()) {
                        int SrNo = UtilFunctions.getInt(rsInterest,"SR_NO", 0);
                        String ReceiptNo = UtilFunctions.getString(rsInterest,"RECEIPT_NO", "");
                        String SubAccountCode = UtilFunctions.getString(rsInterest,"PARTY_CODE", "");
                        
                        ReverseBar.setValue(SrNo);
                        lblReverseBar.setText("Processing Record : "+SrNo +" Rct. No : " + ReceiptNo + " PartyCode : " + SubAccountCode);
                        
                        clsVoucher objVoucher=new clsVoucher();
                        
                        String SelPrefix="";
                        String SelSuffix="";
                        int FFNo=0;
                        
                        /*========== Select the Hierarchy ======== */
                        int HierarchyID = 0;
                        HashMap List=clsApprovalRules.getApprovalRules(EITLERPGLOBAL.gCompanyID, clsCalcInterest.ModuleID, "CHOOSE_HIERARCHY", "DEFAULT", "2");
                        if(List.size()>0) {
                            //Get the Result of the Rule which would be the hierarchy no.
                            clsApprovalRules objRule=(clsApprovalRules)List.get(Integer.toString(1));
                            HierarchyID=UtilFunctions.CInt(objRule.getAttribute("RULE_OUTCOME").getString());
                        }
                        /*========== End of Hierarchy Selection ======== */
                        
                        /*========== Select Prifix, Suffix and Firstfree No. ======== */
                        ResultSet rsTmp=data.getResult("SELECT * FROM D_COM_FIRSTFREE WHERE MODULE_ID="+clsVoucher.JournalVoucherModuleID);
                        rsTmp.first();
                        if(rsTmp.getRow()>0) {
                            SelPrefix=rsTmp.getString("PREFIX_CHARS");
                            SelSuffix=rsTmp.getString("SUFFIX_CHARS");
                            FFNo=rsTmp.getInt("FIRSTFREE_NO");
                        }
                        /*========== End of Prifix, Suffix and Firstfree No. ======== */
                        
                        //============= Gethering Data =================//
                        int VoucherSrNo=0;
                        String IntMainAccountCode = UtilFunctions.getString(rsInterest,"INT_MAIN_ACCOUNT_CODE", "");
                        
                        String ReceiptDate = data.getStringValueFromDB("SELECT RECEIPT_DATE FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+ReceiptNo+"' AND PARTY_CODE='"+SubAccountCode+"' ",FinanceGlobal.FinURL);
                        String BookCode = data.getStringValueFromDB("SELECT BOOK_CODE FROM D_FD_INT_CALC_HEADER WHERE DOC_NO='"+DocNo+"' ",FinanceGlobal.FinURL);
                        double netInterest = UtilFunctions.getDouble(rsInterest,"INTEREST_AMOUNT", 0);
                        String VoucherDate = data.getStringValueFromDB("SELECT WARRANT_DATE FROM D_FD_INT_CALC_DETAIL WHERE DOC_NO='"+DocNo+"' AND RECEIPT_NO='"+ReceiptNo+"' ",FinanceGlobal.FinURL);
                        VoucherDate = EITLERPGLOBAL.addDaysToDate(VoucherDate, 1, "yyyy-MM-dd");
                        
                        strSQL = "SELECT * FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B " +
                        "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.BOOK_CODE='"+BookCode+"' AND B.GRN_NO='"+ReceiptNo+"' " +
                        "AND B.AMOUNT='"+netInterest+"' AND B.EFFECT='D' AND A.APPROVED=1 AND A.CANCELLED=0 " +
                        "AND B.MAIN_ACCOUNT_CODE='115160' AND SUB_ACCOUNT_CODE='"+SubAccountCode+"' ";
                        
                        if(data.IsRecordExist(strSQL,FinanceGlobal.FinURL)) {
                            rsInterest.next();
                            continue;
                        }
                        
                        String MainAccountCode = "";
                        List.clear();
                        int DepositerCategory = data.getIntValueFromDB("SELECT DEPOSITER_CATEGORY FROM D_FD_DEPOSIT_MASTER WHERE RECEIPT_NO='"+ReceiptNo+"' AND PARTY_CODE='"+SubAccountCode+"' ",FinanceGlobal.FinURL);
                        if(DepositerCategory == 2) {
                            List=clsApprovalRules.getApprovalRules(EITLERPGLOBAL.gCompanyID, clsCalcInterest.ModuleID , "GET_ACCOUNT_CODE", "SHAREHOLDER_ACCOUNT_CODE", "");
                        } else {
                            List=clsApprovalRules.getApprovalRules(EITLERPGLOBAL.gCompanyID, clsCalcInterest.ModuleID , "GET_ACCOUNT_CODE", "PUBLIC_ACCOUNT_CODE", "");
                        }
                        if(List.size()>0) {
                            //Get cumulative interest payable account.
                            clsApprovalRules objRule=(clsApprovalRules)List.get(Integer.toString(1));
                            MainAccountCode = objRule.getAttribute("RULE_OUTCOME").getString();
                        }
                        //============= Gethering Data =======================//
                        
                        
                        /*============== Preparing Voucher Header ================*/
                        objVoucher=new clsVoucher();
                        objVoucher.LoadData(EITLERPGLOBAL.gCompanyID);
                        objVoucher.IsInternalPosting=true;
                        objVoucher.setAttribute("PREFIX",SelPrefix);
                        objVoucher.setAttribute("SUFFIX",SelSuffix);
                        objVoucher.setAttribute("FFNO",FFNo);
                        objVoucher.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
                        objVoucher.setAttribute("VOUCHER_NO","");
                        objVoucher.setAttribute("BOOK_CODE",BookCode);
                        objVoucher.setAttribute("VOUCHER_TYPE",FinanceGlobal.TYPE_JOURNAL);
                        objVoucher.setAttribute("CHEQUE_NO","");
                        objVoucher.setAttribute("CHEQUE_DATE","0000-00-00");
                        objVoucher.setAttribute("BANK_NAME","");
                        objVoucher.setAttribute("VOUCHER_DATE",EITLERPGLOBAL.formatDate(VoucherDate));
                        objVoucher.setAttribute("ST_CATEGORY","");
                        objVoucher.setAttribute("MODULE_ID",0);
                        objVoucher.setAttribute("REMARKS","INTEREST PROVISION REVERSE ENTRY ON " + EITLERPGLOBAL.formatDate(VoucherDate));
                        objVoucher.setAttribute("HIERARCHY_ID",HierarchyID);
                        int FirstUserID=data.getIntValueFromDB("SELECT USER_ID FROM D_COM_HIERARCHY_RIGHTS WHERE HIERARCHY_ID="+HierarchyID+" AND SR_NO=1");
                        objVoucher.setAttribute("FROM",FirstUserID);
                        objVoucher.setAttribute("TO",FirstUserID);
                        objVoucher.setAttribute("FROM_REMARKS","");
                        objVoucher.setAttribute("APPROVAL_STATUS","F"); //Final Approved --> Voucher
                        /*============== End of Voucher Header ================*/
                        
                        /*============== Voucher Detail =================*/
                        objVoucher.colVoucherItems.clear();
                        
                        VoucherSrNo++;
                        clsVoucherItem objVoucherItem=new clsVoucherItem();
                        objVoucherItem.setAttribute("SR_NO",VoucherSrNo);
                        objVoucherItem.setAttribute("EFFECT","D");
                        objVoucherItem.setAttribute("ACCOUNT_ID",1);
                        objVoucherItem.setAttribute("MAIN_ACCOUNT_CODE",MainAccountCode); //Int Main Account Code
                        objVoucherItem.setAttribute("SUB_ACCOUNT_CODE",SubAccountCode);
                        objVoucherItem.setAttribute("AMOUNT",netInterest);
                        objVoucherItem.setAttribute("PO_NO","");
                        objVoucherItem.setAttribute("PO_DATE","0000-00-00");
                        objVoucherItem.setAttribute("REMARKS","INTEREST PROVISION ON " + EITLERPGLOBAL.FinToDate);
                        objVoucherItem.setAttribute("INVOICE_NO","");
                        objVoucherItem.setAttribute("INVOICE_DATE","0000-00-00");
                        objVoucherItem.setAttribute("INVOICE_AMOUNT",0);
                        objVoucherItem.setAttribute("GRN_NO",ReceiptNo);
                        objVoucherItem.setAttribute("GRN_DATE",EITLERPGLOBAL.formatDate(ReceiptDate));
                        objVoucherItem.setAttribute("MODULE_ID",clsDepositMaster.ModuleID);
                        objVoucherItem.setAttribute("REF_COMPANY_ID",EITLERPGLOBAL.gCompanyID);
                        objVoucher.colVoucherItems.put(Integer.toString(objVoucher.colVoucherItems.size()+1),objVoucherItem);
                        
                        VoucherSrNo++;
                        objVoucherItem=new clsVoucherItem();
                        objVoucherItem.setAttribute("SR_NO",VoucherSrNo);
                        objVoucherItem.setAttribute("EFFECT","C");
                        objVoucherItem.setAttribute("ACCOUNT_ID",1);
                        objVoucherItem.setAttribute("MAIN_ACCOUNT_CODE",IntMainAccountCode); // cd interest transfer - 115160
                        objVoucherItem.setAttribute("SUB_ACCOUNT_CODE","");
                        objVoucherItem.setAttribute("AMOUNT",netInterest);
                        objVoucherItem.setAttribute("REMARKS","");
                        objVoucherItem.setAttribute("PO_NO","");
                        objVoucherItem.setAttribute("PO_DATE","0000-00-00");
                        objVoucherItem.setAttribute("REMARKS","");
                        objVoucherItem.setAttribute("INVOICE_NO","");
                        objVoucherItem.setAttribute("INVOICE_DATE","0000-00-00");
                        objVoucherItem.setAttribute("INVOICE_AMOUNT",0);
                        objVoucherItem.setAttribute("GRN_NO",ReceiptNo);
                        objVoucherItem.setAttribute("GRN_DATE",EITLERPGLOBAL.formatDate(ReceiptDate));
                        objVoucherItem.setAttribute("MODULE_ID",clsDepositMaster.ModuleID);
                        objVoucherItem.setAttribute("REF_COMPANY_ID",EITLERPGLOBAL.gCompanyID);
                        objVoucher.colVoucherItems.put(Integer.toString(objVoucher.colVoucherItems.size()+1),objVoucherItem);
                        /*============== End of Voucher Detail =================*/
                        
                        if(objVoucher.Insert()) {
                            objVoucher.IsInternalPosting=false;
                        } else {
                            objVoucher.IsInternalPosting=false;
                        }
                        
                        rsInterest.next();
                    }
                    
                } catch (Exception e) {
                    e.printStackTrace();
                }
            };
        }.start();
        
    }
}
