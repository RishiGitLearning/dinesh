/*
 * frmSelectionPaymentVoucher.java
 *
 * Created on September 28, 2007, 12:01 PM
 */

package EITLERP.Finance;

/**
 *
 * @author  root
 */
import EITLERP.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.event.*;
import javax.swing.text.*;
import java.util.*;
import java.awt.Frame;
import java.awt.*;
import java.sql.*;
import java.awt.Dimension;
import EITLERP.Sales.clsSalesInvoice;
public class frmSelectionCrToDrAdj extends javax.swing.JApplet {
    
    private EITLTableModel DataModelRC = new EITLTableModel();
    private EITLTableModel DataModelSJ = new EITLTableModel();
    private EITLTableModel DataModelAdj = new EITLTableModel();
    
    private EITLTableCellRenderer Render=new EITLTableCellRenderer();
    private JDialog aDialog;
    public boolean Cancelled=false;
    //public clsVoucherItem objSelectedItem=new clsVoucherItem();
    public HashMap objSelectedVoucher = new HashMap();
    public HashMap SelectedItems=new HashMap();
    public String PartyCode="";
    public String DocDate = "";
    public String DocNo = "";
    public String SelectedCredit="";
    public String SelectedCreditDate="";
    String cellLastValue="";
    private boolean DoNotEvaluate=false;
    public frmSelectionCrToDrAdj() {
        initComponents();
    }
    
    /** Initializes the applet frmSelectionPaymentVoucher */
    public void init() {
        setSize(682,450);
        initComponents();
        FormatGridSJ();
        FormatGridRC();
        FormatGridAdj();
        Tab.setEnabledAt(0, true);
        Tab.setEnabledAt(1, false);
        Tab.setEnabledAt(2, false);
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    private void initComponents() {//GEN-BEGIN:initComponents
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        panelParty = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        txtPartyName = new javax.swing.JTextField();
        cmdNext = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtMainCode = new javax.swing.JTextField();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        lblFromDate = new javax.swing.JLabel();
        lblToDate = new javax.swing.JLabel();
        panelCredit = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableRC = new javax.swing.JTable();
        cmdShowDebitVoucher = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext2 = new javax.swing.JButton();
        txtInvoiceFromDate = new javax.swing.JTextField();
        txtInvoiceToDate = new javax.swing.JTextField();
        lblInvoiceFromDate = new javax.swing.JLabel();
        lblInvoiceToDate = new javax.swing.JLabel();
        panelDebit = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableSJ = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        lblCreditVoucher = new javax.swing.JLabel();
        lblCreditAmount = new javax.swing.JLabel();
        lblDebitAmount = new javax.swing.JLabel();
        lblRemainingAmount = new javax.swing.JLabel();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableAdj = new javax.swing.JTable();
        cmdBackAdj = new javax.swing.JButton();
        cmdOK = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        lblVoucherInfo = new javax.swing.JLabel();
        lblDebitAmountInfo = new javax.swing.JLabel();
        lblCreditAmountInfo = new javax.swing.JLabel();
        lblDebitAmountInfo1 = new javax.swing.JLabel();
        cmdShowVoucher = new javax.swing.JButton();

        getContentPane().setLayout(null);

        lblTitle.setBackground(new java.awt.Color(0, 153, 204));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" SELECT SINGLE CREDIT AGAINST MULTIPLE DEBIT");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 1, 666, 25);

        panelParty.setLayout(null);

        panelParty.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Party Code :");
        panelParty.add(jLabel1);
        jLabel1.setBounds(10, 49, 80, 15);

        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });

        panelParty.add(txtPartyCode);
        txtPartyCode.setBounds(95, 48, 130, 19);

        txtPartyName.setEnabled(false);
        panelParty.add(txtPartyName);
        txtPartyName.setBounds(95, 70, 500, 19);

        cmdNext.setText("Next >>");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        panelParty.add(cmdNext);
        cmdNext.setBounds(546, 231, 88, 25);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Main Code :");
        panelParty.add(jLabel4);
        jLabel4.setBounds(10, 21, 80, 15);

        txtMainCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMainCodeKeyPressed(evt);
            }
        });

        panelParty.add(txtMainCode);
        txtMainCode.setBounds(95, 20, 130, 19);

        panelParty.add(txtFromDate);
        txtFromDate.setBounds(95, 100, 90, 19);

        panelParty.add(txtToDate);
        txtToDate.setBounds(275, 100, 95, 19);

        lblFromDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFromDate.setText("From Date :");
        panelParty.add(lblFromDate);
        lblFromDate.setBounds(10, 103, 80, 15);

        lblToDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblToDate.setText("To Date :");
        panelParty.add(lblToDate);
        lblToDate.setBounds(190, 103, 80, 15);

        Tab.addTab("Party Code", panelParty);

        panelCredit.setLayout(null);

        panelCredit.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel2.setText("Select Receipt to adjust with SJ Voucher(s) and press Next>> :");
        panelCredit.add(jLabel2);
        jLabel2.setBounds(12, 12, 530, 15);
        jLabel2.getAccessibleContext().setAccessibleName("Advance Receipt Vouchers");

        TableRC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableRC.setToolTipText("");
        TableRC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                TableRCMouseEntered(evt);
            }
        });

        jScrollPane3.setViewportView(TableRC);

        panelCredit.add(jScrollPane3);
        jScrollPane3.setBounds(10, 40, 620, 210);

        cmdShowDebitVoucher.setText("Show Voucher");
        cmdShowDebitVoucher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowDebitVoucherActionPerformed(evt);
            }
        });

        panelCredit.add(cmdShowDebitVoucher);
        cmdShowDebitVoucher.setBounds(10, 300, 150, 25);

        cmdBack.setText("<<Back");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        panelCredit.add(cmdBack);
        cmdBack.setBounds(450, 300, 88, 25);

        cmdNext2.setText("Next >>");
        cmdNext2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext2ActionPerformed(evt);
            }
        });

        panelCredit.add(cmdNext2);
        cmdNext2.setBounds(540, 300, 88, 25);

        panelCredit.add(txtInvoiceFromDate);
        txtInvoiceFromDate.setBounds(210, 260, 100, 19);

        panelCredit.add(txtInvoiceToDate);
        txtInvoiceToDate.setBounds(480, 260, 100, 19);

        lblInvoiceFromDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblInvoiceFromDate.setText("Invoice From Date :");
        panelCredit.add(lblInvoiceFromDate);
        lblInvoiceFromDate.setBounds(70, 260, 130, 15);

        lblInvoiceToDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblInvoiceToDate.setText("Invoice To Date :");
        panelCredit.add(lblInvoiceToDate);
        lblInvoiceToDate.setBounds(340, 260, 130, 15);

        Tab.addTab("Select Credit Voucher", panelCredit);

        panelDebit.setLayout(null);

        TableSJ.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableSJ);

        panelDebit.add(jScrollPane2);
        jScrollPane2.setBounds(9, 37, 620, 160);

        jLabel3.setText("Add SJ Voucher(s) to below adjustment table and press OK when finished :");
        panelDebit.add(jLabel3);
        jLabel3.setBounds(11, 13, 470, 15);

        lblCreditVoucher.setText("...");
        lblCreditVoucher.setBorder(new javax.swing.border.EtchedBorder());
        panelDebit.add(lblCreditVoucher);
        lblCreditVoucher.setBounds(120, 200, 150, 19);

        lblCreditAmount.setText("...");
        lblCreditAmount.setBorder(new javax.swing.border.EtchedBorder());
        panelDebit.add(lblCreditAmount);
        lblCreditAmount.setBounds(120, 225, 120, 19);

        lblDebitAmount.setText("...");
        lblDebitAmount.setBorder(new javax.swing.border.EtchedBorder());
        panelDebit.add(lblDebitAmount);
        lblDebitAmount.setBounds(420, 200, 115, 19);

        lblRemainingAmount.setText("...");
        lblRemainingAmount.setBorder(new javax.swing.border.EtchedBorder());
        panelDebit.add(lblRemainingAmount);
        lblRemainingAmount.setBounds(420, 225, 115, 19);

        cmdAdd.setText("Add");
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });

        panelDebit.add(cmdAdd);
        cmdAdd.setBounds(545, 200, 85, 20);

        cmdRemove.setText("Remove");
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });

        panelDebit.add(cmdRemove);
        cmdRemove.setBounds(545, 225, 85, 20);

        TableAdj.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableAdj);

        panelDebit.add(jScrollPane1);
        jScrollPane1.setBounds(10, 250, 620, 170);

        cmdBackAdj.setText("<<Back");
        cmdBackAdj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackAdjActionPerformed(evt);
            }
        });

        panelDebit.add(cmdBackAdj);
        cmdBackAdj.setBounds(10, 430, 88, 25);

        cmdOK.setText("OK");
        cmdOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOKActionPerformed(evt);
            }
        });

        panelDebit.add(cmdOK);
        cmdOK.setBounds(450, 430, 88, 25);

        cmdCancel.setText("Cancel");
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        panelDebit.add(cmdCancel);
        cmdCancel.setBounds(550, 430, 88, 25);

        lblVoucherInfo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblVoucherInfo.setText("Voucher No. :");
        panelDebit.add(lblVoucherInfo);
        lblVoucherInfo.setBounds(10, 200, 100, 15);

        lblDebitAmountInfo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDebitAmountInfo.setText("Credit Amount :");
        panelDebit.add(lblDebitAmountInfo);
        lblDebitAmountInfo.setBounds(10, 225, 100, 15);

        lblCreditAmountInfo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCreditAmountInfo.setText("Adjusted Credit :");
        panelDebit.add(lblCreditAmountInfo);
        lblCreditAmountInfo.setBounds(250, 200, 160, 15);

        lblDebitAmountInfo1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDebitAmountInfo1.setText("Remaining Adj. Amount :");
        panelDebit.add(lblDebitAmountInfo1);
        lblDebitAmountInfo1.setBounds(250, 225, 160, 15);

        cmdShowVoucher.setText("Show Voucher");
        cmdShowVoucher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowVoucherActionPerformed(evt);
            }
        });

        panelDebit.add(cmdShowVoucher);
        cmdShowVoucher.setBounds(490, 10, 130, 20);

        Tab.addTab("Select Debit(s)", panelDebit);

        getContentPane().add(Tab);
        Tab.setBounds(3, 32, 650, 490);

    }//GEN-END:initComponents
    
    private void cmdShowVoucherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowVoucherActionPerformed
        // TODO add your handling code here:
        if(TableSJ.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(this,"Please select receipt voucher.");
            return;
        }
        String SelectedSJ = DataModelSJ.getValueByVariable("SJ_NO",TableSJ.getSelectedRow());
        clsVoucher.OpenVoucher(SelectedSJ, new frmPendingApprovals());
    }//GEN-LAST:event_cmdShowVoucherActionPerformed
    
    private void TableRCMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableRCMouseEntered
        // TODO add your handling code here:
        java.awt.Point p = evt.getPoint();
        int colIndex = TableRC.columnAtPoint(p);
        if(colIndex == 8) {
            String tip = "Utilized Amount means amount under approval in Adjustment";
            TableRC.setToolTipText(tip);
        } else {
            TableRC.setToolTipText("");
        }
    }//GEN-LAST:event_TableRCMouseEntered
    
    private void cmdBackAdjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackAdjActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
        FormatGridSJ();
        FormatGridAdj();
        Tab.setEnabledAt(0, false);
        Tab.setEnabledAt(1, true);
        Tab.setEnabledAt(2, false);
        lblCreditVoucher.setText("");
        lblCreditAmount.setText("0.0");
        lblDebitAmount.setText("0.0");
        lblRemainingAmount.setText("0.0");
    }//GEN-LAST:event_cmdBackAdjActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        DoNotEvaluate=true;
        if(TableAdj.getRowCount()>0) {
            DataModelAdj.removeRow(TableAdj.getSelectedRow());
        }
        DoNotEvaluate=false;
        double ReceiptRemainingAmount = 0;
        double CreditAmount = Double.parseDouble(lblCreditAmount.getText());
        double AvailableAmount = Double.parseDouble(DataModelRC.getValueByVariable("AVAILABLE_AMOUNT", TableRC.getSelectedRow()));
        double UtilizedAmount = Double.parseDouble(DataModelRC.getValueByVariable("UTILIZED_AMOUNT", TableRC.getSelectedRow()));
        AvailableAmount = Math.abs(AvailableAmount - UtilizedAmount);
        double DebitAmount = Math.abs(AvailableAmount - CreditAmount);
        double TableEnterAmount = 0;
        for(int i=0;i<TableAdj.getRowCount();i++) {
            TableEnterAmount += Double.parseDouble(DataModelAdj.getValueByVariable("ADJ_AMOUNT", i));
        }
        ReceiptRemainingAmount = CreditAmount - DebitAmount - TableEnterAmount;
        lblRemainingAmount.setText(Double.toString(ReceiptRemainingAmount));
        UpdateSrNo();
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        if(TableSJ.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(this,"Please select receipt voucher.");
            return;
        }
        String SelectedSJ = DataModelSJ.getValueByVariable("SJ_NO",TableSJ.getSelectedRow());
        if(Double.parseDouble(DataModelSJ.getValueByVariable("REMAINING_AMOUNT",TableSJ.getSelectedRow()))<=0) {
            JOptionPane.showMessageDialog(this,SelectedSJ + " has zero remaining amount.");
            return;
        }
        for(int i=0;i<TableAdj.getRowCount();i++) {
            if(DataModelAdj.getValueByVariable("SJ_NO",i).equals(SelectedSJ)) {
                JOptionPane.showMessageDialog(this,SelectedSJ + " is already used at sr no. " + (i+1));
                return;
            }
        }
        
        try {
            if(Double.parseDouble(lblRemainingAmount.getText().trim()) > 0) {
                double AdjAmount = 0;
                //double insertAmount = Double.parseDouble(DataModelSJ.getValueByVariable("REMAINING_AMOUNT",TableSJ.getSelectedRow())) - Double.parseDouble(DataModelSJ.getValueByVariable("UTILIZED_AMOUNT",TableSJ.getSelectedRow()));
                double insertAmount = Double.parseDouble(DataModelSJ.getValueByVariable("REMAINING_AMOUNT",TableSJ.getSelectedRow()));
                double RemainingAmount = Double.parseDouble(lblRemainingAmount.getText());
                if(RemainingAmount > insertAmount) {
                    AdjAmount = insertAmount;
                } else {
                    AdjAmount = RemainingAmount;
                }
                Object[] rowData=new Object[1];
                DataModelAdj.addRow(rowData);
                int NewIndex=TableAdj.getRowCount()-1;
                DataModelAdj.setValueByVariable("SR_NO",Integer.toString(NewIndex+1), NewIndex);
                DataModelAdj.setValueByVariable("SJ_NO",DataModelSJ.getValueByVariable("SJ_NO",TableSJ.getSelectedRow()),NewIndex);
                DataModelAdj.setValueByVariable("SJ_DATE",DataModelSJ.getValueByVariable("SJ_DATE",TableSJ.getSelectedRow()),NewIndex);
                DataModelAdj.setValueByVariable("AGENT_SR",DataModelSJ.getValueByVariable("AGENT_SR",TableSJ.getSelectedRow()),NewIndex);
                DataModelAdj.setValueByVariable("SJ_COMPANY_ID",DataModelSJ.getValueByVariable("COMPANY_ID",TableSJ.getSelectedRow()),NewIndex);
                DataModelAdj.setValueByVariable("ADJ_AMOUNT",Double.toString(AdjAmount), NewIndex);
                DataModelAdj.setValueByVariable("MAIN_ACCOUNT_CODE",txtMainCode.getText().trim(),NewIndex);
                DataModelAdj.setValueByVariable("SUB_ACCOUNT_CODE",txtPartyCode.getText().trim(),NewIndex);
                DataModelAdj.setValueByVariable("ACCOUNT_NAME",clsAccount.getAccountName(txtMainCode.getText().trim(),txtPartyCode.getText().trim()),NewIndex);
                DataModelAdj.setValueByVariable("INVOICE_NO",DataModelSJ.getValueByVariable("INVOICE_NO",TableSJ.getSelectedRow()),NewIndex);
                DataModelAdj.setValueByVariable("INVOICE_DATE",DataModelSJ.getValueByVariable("INVOICE_DATE",TableSJ.getSelectedRow()),NewIndex);
                DataModelAdj.setValueByVariable("REF_DOC_NO",DataModelSJ.getValueByVariable("REF_DOC_NO",TableSJ.getSelectedRow()),NewIndex);
                DataModelAdj.setValueByVariable("REF_DOC_DATE",DataModelSJ.getValueByVariable("REF_DOC_DATE",TableSJ.getSelectedRow()),NewIndex);
                DataModelAdj.setValueByVariable("MODULE_ID",DataModelSJ.getValueByVariable("MODULE_ID",TableSJ.getSelectedRow()),NewIndex);
                //DataModelAdj.setValueByVariable("SJ_COMPANY_ID",DataModelSJ.getValueByVariable("COMPANY_ID",TableSJ.getSelectedRow()),NewIndex);
                DataModelAdj.setValueByVariable("VOUCHER_NO",DataModelRC.getValueByVariable("VOUCHER_NO",TableRC.getSelectedRow()), NewIndex);
                DataModelAdj.setValueByVariable("VOUCHER_DATE",DataModelRC.getValueByVariable("VOUCHER_DATE",TableRC.getSelectedRow()), NewIndex);
                DataModelAdj.setValueByVariable("VOUCHER_SR_NO",DataModelRC.getValueByVariable("VOUCHER_SR_NO",TableRC.getSelectedRow()), NewIndex);
                DataModelAdj.setValueByVariable("VOUCHER_COMPANY_ID",DataModelRC.getValueByVariable("COMPANY_ID",TableRC.getSelectedRow()), NewIndex);
                DataModelAdj.setValueByVariable("RECEIPT_AMOUNT",DataModelRC.getValueByVariable("AMOUNT",TableRC.getSelectedRow()), NewIndex);
                DataModelAdj.setValueByVariable("REMARKS","", NewIndex);
                UpdateTotal();
            } else {
                JOptionPane.showMessageDialog(this,"Remaining credit amount is ZERO.");
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void cmdShowDebitVoucherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowDebitVoucherActionPerformed
        // TODO add your handling code here:
        if(TableSJ.getSelectedRow() >= 0) {
            String DocNo = DataModelSJ.getValueByVariable("SJ_NO", TableSJ.getSelectedRow());
            clsVoucher.OpenVoucher(DocNo, null);
        } else {
            JOptionPane.showMessageDialog(this,"Select Voucher");
            return;
        }
    }//GEN-LAST:event_cmdShowDebitVoucherActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancelled=true;
        aDialog.dispose();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOKActionPerformed
        // TODO add your handling code here:
        if(!Validate()) {
            return;
        }
        try {
            objSelectedVoucher.clear();
            int Counter = 0;
            for(int i=0;i<TableAdj.getRowCount();i++) {
                clsDrAdjustmentItem objItem= new clsDrAdjustmentItem();
                Counter++;
                objItem.setAttribute("SR_NO",Integer.parseInt(DataModelAdj.getValueByVariable("SR_NO",i)));
                objItem.setAttribute("SJ_NO",DataModelAdj.getValueByVariable("SJ_NO",i));
                objItem.setAttribute("SJ_DATE",DataModelAdj.getValueByVariable("SJ_DATE",i));
                objItem.setAttribute("AGENT_SR",DataModelAdj.getValueByVariable("AGENT_SR",i));
                objItem.setAttribute("ADJ_AMOUNT",Double.parseDouble(DataModelAdj.getValueByVariable("ADJ_AMOUNT",i)));
                objItem.setAttribute("MAIN_ACCOUNT_CODE",DataModelAdj.getValueByVariable("MAIN_ACCOUNT_CODE",i));
                objItem.setAttribute("SUB_ACCOUNT_CODE",DataModelAdj.getValueByVariable("SUB_ACCOUNT_CODE",i));
                objItem.setAttribute("ACCOUNT_NAME",DataModelAdj.getValueByVariable("ACCOUNT_NAME",i));
                objItem.setAttribute("INVOICE_NO",DataModelAdj.getValueByVariable("INVOICE_NO",i));
                objItem.setAttribute("INVOICE_DATE",DataModelAdj.getValueByVariable("INVOICE_DATE",i));
                objItem.setAttribute("REF_DOC_NO",DataModelAdj.getValueByVariable("REF_DOC_NO",i));
                objItem.setAttribute("REF_DOC_DATE",DataModelAdj.getValueByVariable("REF_DOC_DATE",i));
                objItem.setAttribute("VOUCHER_NO",DataModelAdj.getValueByVariable("VOUCHER_NO",i));
                objItem.setAttribute("VOUCHER_DATE",DataModelAdj.getValueByVariable("VOUCHER_DATE",i));
                objItem.setAttribute("VOUCHER_SR_NO",Integer.parseInt(DataModelAdj.getValueByVariable("VOUCHER_SR_NO",i)));
                objItem.setAttribute("RECEIPT_AMOUNT",Double.parseDouble(DataModelAdj.getValueByVariable("RECEIPT_AMOUNT",i)));
                objItem.setAttribute("MODULE_ID",Integer.parseInt(DataModelAdj.getValueByVariable("MODULE_ID",i)));
                objItem.setAttribute("SJ_COMPANY_ID",Integer.parseInt(DataModelAdj.getValueByVariable("SJ_COMPANY_ID",i)));
                objItem.setAttribute("VOUCHER_COMPANY_ID",Integer.parseInt(DataModelAdj.getValueByVariable("VOUCHER_COMPANY_ID",i)));
                objItem.setAttribute("REMARKS",DataModelAdj.getValueByVariable("REMARKS",i));
                objSelectedVoucher.put(Integer.toString(Counter), objItem);
            }
            aDialog.dispose();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmdOKActionPerformed
    
    private void cmdNext2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext2ActionPerformed
        // TODO add your handling code here:
        try {
            if(TableRC.getSelectedRow()<0) {
                JOptionPane.showMessageDialog(null,"Please select the Credit Voucher from credit list.");
                return;
            }
            SelectedCredit = DataModelRC.getValueByVariable("VOUCHER_NO", TableRC.getSelectedRow());
            if(JOptionPane.showConfirmDialog(this,"You have selected Voucher No.(" + SelectedCredit + ") \nAre you sure ?" ,"Conform Credit",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE)==0) {
                GenerateGridSJ();
                Tab.setSelectedIndex(2);
                Tab.setEnabledAt(0, false);
                Tab.setEnabledAt(1, false);
                Tab.setEnabledAt(2, true);
                lblCreditVoucher.setText(SelectedCredit);
                lblCreditAmount.setText(DataModelRC.getValueByVariable("AMOUNT", TableRC.getSelectedRow()));
                double CreditAmount = Double.parseDouble(DataModelRC.getValueByVariable("AMOUNT", TableRC.getSelectedRow()));
                double AvailableAmount = Double.parseDouble(DataModelRC.getValueByVariable("AVAILABLE_AMOUNT", TableRC.getSelectedRow()));
                double UtilizedAmount = Double.parseDouble(DataModelRC.getValueByVariable("UTILIZED_AMOUNT", TableRC.getSelectedRow()));
                AvailableAmount = Math.abs(AvailableAmount - UtilizedAmount);
                double DebitAmount = Math.abs(CreditAmount - AvailableAmount );
                lblDebitAmount.setText(Double.toString(DebitAmount));
                lblRemainingAmount.setText(Double.toString(AvailableAmount));
            } else {
                Tab.setEnabledAt(0, false);
                Tab.setEnabledAt(1, true);
                Tab.setEnabledAt(2, false);
                Tab.setSelectedIndex(1);
                lblCreditVoucher.setText("");
                lblCreditAmount.setText("0.0");
                lblDebitAmount.setText("0.0");
                lblRemainingAmount.setText("0.0");
            }
        } catch(Exception e) {
        }
    }//GEN-LAST:event_cmdNext2ActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(0);
        Tab.setEnabledAt(0, true);
        Tab.setEnabledAt(1, false);
        Tab.setEnabledAt(2, false);
        txtPartyCode.setText("");
        txtMainCode.setText("");
        txtFromDate.setText("");
        txtToDate.setText("");
        FormatGridSJ();
        FormatGridRC();
        FormatGridAdj();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void txtMainCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMainCodeKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==112) {
            LOV aList=new LOV();
            
            aList.SQL="SELECT MAIN_ACCOUNT_CODE,ACCOUNT_NAME FROM D_FIN_GL WHERE APPROVED=1 ORDER BY ACCOUNT_NAME";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            aList.UseSpecifiedConn=true;
            aList.dbURL=FinanceGlobal.FinURL;
            
            if(aList.ShowLOV()) {
                txtMainCode.setText(aList.ReturnVal);
            }
        }
    }//GEN-LAST:event_txtMainCodeKeyPressed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        if(txtMainCode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Insert Main Code");
            return;
        }
        
        if(txtPartyCode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Insert Party Code");
            return;
        }
        
        if(txtFromDate.getText().trim().equals("") || txtToDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Insert From Date and To Date");
            return;
        }
        
        if(!EITLERPGLOBAL.isDate(txtFromDate.getText().trim()) || !EITLERPGLOBAL.isDate(txtToDate.getText().trim())) {
            JOptionPane.showMessageDialog(this,"Insert Proper From Date and To Date");
            return;
        }
        GenerateGridReceipt();
        Tab.setEnabledAt(0, false);
        Tab.setEnabledAt(1, true);
        Tab.setEnabledAt(2, false);
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
        // TODO add your handling code here:
        txtPartyName.setText(clsPartyMaster.getAccountName(txtMainCode.getText(),txtPartyCode.getText()));
    }//GEN-LAST:event_txtPartyCodeFocusLost
    
    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==112) {
            
            LOV aList=new LOV();
            
            aList.SQL="SELECT PARTY_CODE,PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='"+txtMainCode.getText().trim()+"' AND APPROVED=1 ORDER BY PARTY_NAME";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            aList.UseSpecifiedConn=true;
            aList.dbURL=FinanceGlobal.FinURL;
            
            if(aList.ShowLOV()) {
                txtPartyCode.setText(aList.ReturnVal);
                txtPartyName.setText(clsPartyMaster.getAccountName(txtMainCode.getText(),aList.ReturnVal));
            }
            
        }
        
    }//GEN-LAST:event_txtPartyCodeKeyPressed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JTable TableAdj;
    private javax.swing.JTable TableRC;
    private javax.swing.JTable TableSJ;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackAdj;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext2;
    private javax.swing.JButton cmdOK;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdShowDebitVoucher;
    private javax.swing.JButton cmdShowVoucher;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblCreditAmount;
    private javax.swing.JLabel lblCreditAmountInfo;
    private javax.swing.JLabel lblCreditVoucher;
    private javax.swing.JLabel lblDebitAmount;
    private javax.swing.JLabel lblDebitAmountInfo;
    private javax.swing.JLabel lblDebitAmountInfo1;
    private javax.swing.JLabel lblFromDate;
    private javax.swing.JLabel lblInvoiceFromDate;
    private javax.swing.JLabel lblInvoiceToDate;
    private javax.swing.JLabel lblRemainingAmount;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblToDate;
    private javax.swing.JLabel lblVoucherInfo;
    private javax.swing.JPanel panelCredit;
    private javax.swing.JPanel panelDebit;
    private javax.swing.JPanel panelParty;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtInvoiceFromDate;
    private javax.swing.JTextField txtInvoiceToDate;
    private javax.swing.JTextField txtMainCode;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtPartyName;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables
    
    private void FormatGridRC() {
        try {
            
            DataModelRC=new EITLTableModel();
            TableRC.removeAll();
            
            TableRC.setModel(DataModelRC);
            TableColumnModel ColModel=TableRC.getColumnModel();
            TableRC.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //DataModelRC.addColumn("*");  //0
            DataModelRC.addColumn("Sr."); //1
            DataModelRC.addColumn("Receipt Voucher No."); //2
            DataModelRC.addColumn("Voucher Date"); //3
            DataModelRC.addColumn("Voucher Sr. No."); //4
            DataModelRC.addColumn("Invoice No"); //5
            DataModelRC.addColumn("Invoice Date"); //6
            DataModelRC.addColumn("Amount"); //7
            DataModelRC.addColumn("Available Amount"); //7
            DataModelRC.addColumn("Utilezed Amount"); //8
            DataModelRC.addColumn("Company ID"); //9
            
            //DataModelRC.SetVariable(0,"SELECT"); //0
            DataModelRC.SetVariable(0,"SR_NO"); //1 - Read Only
            DataModelRC.SetVariable(1,"VOUCHER_NO"); //2
            DataModelRC.SetVariable(2,"VOUCHER_DATE"); //3 //Read Only
            DataModelRC.SetVariable(3,"VOUCHER_SR_NO"); //4 //Read Only
            DataModelRC.SetVariable(4,"INVOICE_NO"); //5 //Read Only
            DataModelRC.SetVariable(5,"INVOICE_DATE"); //6 //Read Only
            DataModelRC.SetVariable(6,"AMOUNT"); //7 //Read Only
            DataModelRC.SetVariable(7,"AVAILABLE_AMOUNT");//Read Only
            DataModelRC.SetVariable(8,"UTILIZED_AMOUNT");//Read Only
            DataModelRC.SetVariable(9,"COMPANY_ID"); //8 //Read Only
            
            //            for(int i=1;i<DataModelRC.getColumnCount();i++) {
            //                DataModelRC.SetReadOnly(i);
            //            }
            
            DataModelRC.TableReadOnly(true);
            Render.setCustomToolTipText(8, "Utilized Amount means amount under approval in Adjustment");
            TableRC.getColumnModel().getColumn(8).setCellRenderer(Render);
            //TableRC.getColumnModel().getColumn(8).setCellEditor(new DefaultCellEditor(new JCheckBox()));
            //Render.setCustomComponent(0,"CheckBox");
            //TableRC.getColumnModel().getColumn(0).setCellRenderer(Render);
            //TableRC.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));
        } catch(Exception e) {
        }
    }
    
    private void FormatGridSJ() {
        try {
            DataModelSJ=new EITLTableModel();
            TableSJ.removeAll();
            
            TableSJ.setModel(DataModelSJ);
            TableColumnModel ColModel=TableSJ.getColumnModel();
            TableSJ.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            DataModelSJ.addColumn("Sr."); //0
            DataModelSJ.addColumn("SJ No."); //1
            DataModelSJ.addColumn("Date"); //2
            DataModelSJ.addColumn("Agent Sr."); //3
            DataModelSJ.addColumn("Amount"); //4
            DataModelSJ.addColumn("Remaining Amount"); //5
            DataModelSJ.addColumn("Utilized Amount"); //6
            DataModelSJ.addColumn("Ref. Doc. No."); //7
            DataModelSJ.addColumn("Ref. Doc. Date"); //8
            DataModelSJ.addColumn("Module Name"); //9
            DataModelSJ.addColumn("Invoice No."); //10
            DataModelSJ.addColumn("Invoice Date"); //11
            DataModelSJ.addColumn("Module ID"); //12
            DataModelSJ.addColumn("Company ID"); //13
            
            DataModelSJ.SetVariable(0,"SR_NO"); //0
            DataModelSJ.SetVariable(1,"SJ_NO"); //1
            DataModelSJ.SetVariable(2,"SJ_DATE"); //2
            DataModelSJ.SetVariable(3,"AGENT_SR"); //3
            DataModelSJ.SetVariable(4,"AMOUNT"); //4
            DataModelSJ.SetVariable(5,"REMAINING_AMOUNT"); //5
            DataModelSJ.SetVariable(6,"UTILIZED_AMOUNT"); //6
            DataModelSJ.SetVariable(7,"REF_DOC_NO"); //7
            DataModelSJ.SetVariable(8,"REF_DOC_DATE"); //8
            DataModelSJ.SetVariable(9,"MODULE_NAME"); //9
            DataModelSJ.SetVariable(10,"INVOICE_NO"); //10
            DataModelSJ.SetVariable(11,"INVOICE_DATE"); //11
            DataModelSJ.SetVariable(12,"MODULE_ID"); //12
            DataModelSJ.SetVariable(13,"COMPANY_ID"); //13
            
            DataModelSJ.TableReadOnly(true);
        } catch(Exception e) {
        }
    }
    
    private void FormatGridAdj() {
        try {
            DataModelAdj=new EITLTableModel();
            TableAdj.removeAll();
            
            TableAdj.setModel(DataModelAdj);
            TableColumnModel ColModel=TableAdj.getColumnModel();
            TableAdj.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            DataModelAdj.addColumn("Sr."); //0
            DataModelAdj.addColumn("SJ No."); //1
            DataModelAdj.addColumn("SJ Date."); //2
            DataModelAdj.addColumn("Agent Sr."); //3
            DataModelAdj.addColumn("SJ Amount"); //4
            DataModelAdj.addColumn("Main Account Code"); //5
            DataModelAdj.addColumn("Sub Account Code"); //6
            DataModelAdj.addColumn("Account Name"); //7
            DataModelAdj.addColumn("Invoice No."); //8
            DataModelAdj.addColumn("Invoice Date"); //9
            DataModelAdj.addColumn("Ref. Doc No."); //10
            DataModelAdj.addColumn("Ref. Doc Date"); //11
            DataModelAdj.addColumn("Ref. Module ID"); //12
            DataModelAdj.addColumn("SJ Company ID"); //13
            DataModelAdj.addColumn("Receipt Voucher No."); //14
            DataModelAdj.addColumn("Voucher Sr. No."); //15
            DataModelAdj.addColumn("Voucher Date"); //16
            DataModelAdj.addColumn("Receipt Amount"); //17
            DataModelAdj.addColumn("Receipt Voucher Company ID"); //18
            DataModelAdj.addColumn("Remarks"); //19
            
            DataModelAdj.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModelAdj.SetVariable(1,"SJ_NO"); //1 - Read Only
            DataModelAdj.SetVariable(2,"SJ_DATE"); //2 - Read Only
            DataModelAdj.SetVariable(3,"AGENT_SR"); //2 - Read Only
            DataModelAdj.SetVariable(4,"ADJ_AMOUNT"); // 3
            DataModelAdj.SetVariable(5,"MAIN_ACCOUNT_CODE"); // 4
            DataModelAdj.SetVariable(6,"SUB_ACCOUNT_CODE"); // 5
            DataModelAdj.SetVariable(7,"ACCOUNT_NAME"); // 6
            DataModelAdj.SetVariable(8,"INVOICE_NO"); //7 - Read Only
            DataModelAdj.SetVariable(9,"INVOICE_DATE"); //8 - Read Only
            DataModelAdj.SetVariable(10,"REF_DOC_NO"); //9 - Read Only
            DataModelAdj.SetVariable(11,"REF_DOC_DATE"); //10 - Read Only
            DataModelAdj.SetVariable(12,"MODULE_ID"); //11 - Read Only
            DataModelAdj.SetVariable(13,"SJ_COMPANY_ID"); //12 - Read Only
            DataModelAdj.SetVariable(14,"VOUCHER_NO"); //13 - Read Only
            DataModelAdj.SetVariable(15,"VOUCHER_SR_NO"); //14- Read Only
            DataModelAdj.SetVariable(16,"VOUCHER_DATE"); //15 - Read Only
            DataModelAdj.SetVariable(17,"RECEIPT_AMOUNT"); //16 - Read Only
            DataModelAdj.SetVariable(18,"VOUCHER_COMPANY_ID"); //17 - Read Only
            DataModelAdj.SetVariable(19,"REMARKS"); //18 - Read Only
            
            DataModelAdj.TableReadOnly(false);
            
            for(int i=0;i<DataModelAdj.getColumnCount();i++) {
                DataModelAdj.SetReadOnly(i);
            }
            
            DataModelAdj.ResetReadOnly(4);
            
            TableAdj.getColumnModel().getSelectionModel().addListSelectionListener(
            new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent e) {
                    int last=TableAdj.getSelectedColumn();
                    String strVar=DataModelAdj.getVariable(last);
                    
                    
                    //=============== Cell Editing Routine =======================//
                    try {
                        cellLastValue = DataModelAdj.getValueByVariable(strVar, TableAdj.getSelectedRow());
                        //(String)TableAdj.getValueAt(TableAdj.getSelectedRow()+1,TableAdj.getSelectedColumn());
                        
                        TableAdj.editCellAt(TableAdj.getSelectedRow(),TableAdj.getSelectedColumn());
                        if(TableAdj.getEditorComponent() instanceof JTextComponent) {
                            ((JTextComponent)TableAdj.getEditorComponent()).selectAll();
                        }
                        DoNotEvaluate=false;
                    }
                    catch(Exception cell){}
                    //============= Cell Editing Routine Ended =================//
                }
            }
            );
            
            
            TableAdj.getModel().addTableModelListener(new TableModelListener() {
                public void tableChanged(TableModelEvent e) {
                    if (e.getType() == TableModelEvent.UPDATE) {
                        int col = e.getColumn();
                        
                        //=========== Cell Update Prevention Check ===========//
                        String curValue=(String)TableAdj.getValueAt(TableAdj.getSelectedRow(), e.getColumn());
                        if(curValue.equals(cellLastValue)) {
                            return;
                        }
                        //====================================================//
                        
                        if(DoNotEvaluate) {
                            return;
                        }
                        
                        if(col==DataModelAdj.getColFromVariable("ADJ_AMOUNT")) {
                            for(int i=0;i<TableAdj.getRowCount();i++) {
                                if(DataModelAdj.getValueByVariable("ADJ_AMOUNT", i).trim().equals("")) {
                                    DataModelAdj.setValueByVariable("ADJ_AMOUNT","0" ,i);
                                }
                                if(Double.parseDouble(DataModelAdj.getValueByVariable("ADJ_AMOUNT", i).trim())<0) {
                                    JOptionPane.showMessageDialog(null,"Adjustment amount can not be negative.","Wrong Input",JOptionPane.ERROR_MESSAGE);
                                    DataModelAdj.setValueByVariable("ADJ_AMOUNT","0" ,i);
                                    return;
                                }
                            }
                            double RemainingAmount =0;
                            for(int j=0;j<TableSJ.getRowCount();j++) {
                                if(DataModelAdj.getValueByVariable("SJ_NO", TableAdj.getSelectedRow()).trim().equals(DataModelSJ.getValueByVariable("SJ_NO", j))) {
                                    RemainingAmount = Double.parseDouble(DataModelSJ.getValueByVariable("REMAINING_AMOUNT", j));
                                    double UtilizedAmount = Double.parseDouble(DataModelSJ.getValueByVariable("UTILIZED_AMOUNT", j));
                                    RemainingAmount = RemainingAmount - UtilizedAmount;
                                }
                            }
                            if(Double.parseDouble(DataModelAdj.getValueByVariable("ADJ_AMOUNT", TableAdj.getSelectedRow()).trim()) > RemainingAmount) {
                                JOptionPane.showMessageDialog(null,"Adjustment amount can not be grater then (remaining amount - utilized amount).","Wrong Input",JOptionPane.ERROR_MESSAGE);
                                DataModelAdj.setValueByVariable("ADJ_AMOUNT","0", TableAdj.getSelectedRow());
                            }
                        }
                        
                        if(col==DataModelAdj.getColFromVariable("ADJ_AMOUNT")) {
                            DoNotEvaluate=true;
                            double EnterAmount  = Double.parseDouble(DataModelAdj.getValueByVariable("ADJ_AMOUNT",TableAdj.getSelectedRow()));
                            double ReceiptRemainingAmount = 0;
                            double CreditAmount = Double.parseDouble(lblCreditAmount.getText());
                            double AvailableAmount = Double.parseDouble(DataModelRC.getValueByVariable("AVAILABLE_AMOUNT", TableRC.getSelectedRow()));
                            double UtilizedAmount = Double.parseDouble(DataModelRC.getValueByVariable("UTILIZED_AMOUNT", TableRC.getSelectedRow()));
                            AvailableAmount = AvailableAmount - UtilizedAmount;
                            double DebitAmount = Math.abs(AvailableAmount - CreditAmount);
                            double TableEnterAmount = 0;
                            for(int i=0;i<TableAdj.getRowCount();i++) {
                                if(i!=TableAdj.getSelectedRow()) {
                                    TableEnterAmount += Double.parseDouble(DataModelAdj.getValueByVariable("ADJ_AMOUNT", i));
                                }
                            }
                            ReceiptRemainingAmount = CreditAmount - DebitAmount - EnterAmount - TableEnterAmount;
                            if(ReceiptRemainingAmount < 0) {
                                JOptionPane.showMessageDialog(null,"Adjustment amount exceeding credit amount.","Wrong Input",JOptionPane.ERROR_MESSAGE);
                                DataModelAdj.setValueByVariable("ADJ_AMOUNT","0", TableAdj.getSelectedRow());
                            } else {
                                lblRemainingAmount.setText(Double.toString(ReceiptRemainingAmount));
                            }
                        }
                    }
                }
            });
            
        } catch(Exception e) {
        }
    }
    
    private void GenerateGridReceipt() {
        try {
            HashMap List = new HashMap();
            FormatGridRC();
            String FromDate = EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
            String ToDate = EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());
            String PartyCode=txtPartyCode.getText();
            String strSQL="";
            strSQL="SELECT A.COMPANY_ID,A.VOUCHER_NO,A.VOUCHER_DATE,B.INVOICE_NO,B.INVOICE_DATE,SUM(B.AMOUNT) AS AMOUNT, A.REMARKS " +
            "FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND " +
            "A.CANCELLED=0 AND B.MAIN_ACCOUNT_CODE='"+txtMainCode.getText().trim()+"' AND B.SUB_ACCOUNT_CODE='"+txtPartyCode.getText().trim()+"' " +
       //     "AND B.EFFECT='C' AND (B.INVOICE_NO='' OR B.INVOICE_NO LIKE 'DUM%') AND B.MODULE_ID<>"+clsVoucher.DebitNoteModuleID+" " +
            "AND B.EFFECT='C' AND ((B.INVOICE_NO='' OR B.INVOICE_NO LIKE 'DUM%') OR BOOK_CODE = 14) AND B.MODULE_ID<>"+clsVoucher.DebitNoteModuleID+" " +
            "AND A.APPROVED=1 AND A.CANCELLED=0 AND (B.MATCHED=0 OR B.MATCHED IS NULL)  " +
            "AND A.VOUCHER_DATE>='" + FromDate + "' AND A.VOUCHER_DATE<='"+ ToDate + "' " +
            "GROUP BY A.VOUCHER_NO " +
            "ORDER BY A.VOUCHER_DATE";
            ResultSet rsReceipt=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsReceipt.first();
            double UtilizedAmount = 0;
            if(rsReceipt.getRow()>0) {
                while(!rsReceipt.isAfterLast()) {
                    //DataModelRC.setValueByVariable("SELECT",Boolean.valueOf(false), NewIndex);
                    double AvailaleAmount = clsAccount.get09AmountByVoucher(UtilFunctions.getString(rsReceipt,"VOUCHER_NO",""), txtMainCode.getText().trim(), txtPartyCode.getText().trim(),UtilFunctions.getDouble(rsReceipt,"AMOUNT",0));
                    if(AvailaleAmount > 0) {
                        Object[] rowData=new Object[1];
                        DataModelRC.addRow(rowData);
                        int NewIndex=TableRC.getRowCount()-1;
                        
                        DataModelRC.setValueByVariable("SR_NO",Integer.toString(NewIndex+1), NewIndex);
                        DataModelRC.setValueByVariable("VOUCHER_NO",UtilFunctions.getString(rsReceipt,"VOUCHER_NO",""), NewIndex);
                        DataModelRC.setValueByVariable("VOUCHER_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsReceipt,"VOUCHER_DATE","0000-00-00")), NewIndex);
                        DataModelRC.setValueByVariable("VOUCHER_SR_NO","0", NewIndex);
                        DataModelRC.setValueByVariable("INVOICE_NO",UtilFunctions.getString(rsReceipt,"INVOICE_NO",""), NewIndex);
                        DataModelRC.setValueByVariable("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsReceipt,"INVOICE_DATE","0000-00-00")), NewIndex);
                        DataModelRC.setValueByVariable("AMOUNT",Double.toString(UtilFunctions.getDouble(rsReceipt,"AMOUNT",0)), NewIndex);
                        DataModelRC.setValueByVariable("AVAILABLE_AMOUNT",Double.toString(AvailaleAmount),NewIndex);
                        UtilizedAmount = data.getDoubleValueFromDB("SELECT SUM(B.ADJUST_AMOUNT) FROM D_FIN_DR_ADJ_HEADER A, D_FIN_DR_ADJ_DETAIL B " +
                        "WHERE A.DOC_NO=B.DOC_NO AND B.VOUCHER_NO='"+UtilFunctions.getString(rsReceipt,"VOUCHER_NO","")+"' AND A.APPROVED=0 AND A.CANCELLED=0 AND A.DOC_NO<>'"+DocNo+"' AND MAIN_ACCOUNT_CODE='"+txtMainCode.getText().trim()+"' AND SUB_ACCOUNT_CODE='"+PartyCode+"' ",FinanceGlobal.FinURL);
                        DataModelRC.setValueByVariable("UTILIZED_AMOUNT",Double.toString(UtilizedAmount),NewIndex);
                        DataModelRC.setValueByVariable("COMPANY_ID",Integer.toString(UtilFunctions.getInt(rsReceipt,"COMPANY_ID",0)), NewIndex);
                    }
                    rsReceipt.next();
                }
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    private void GenerateGridSJ() {
        try {
            HashMap List = new HashMap();
            
            FormatGridSJ();
            
            String strSQL="";
            String MainCode = txtMainCode.getText().trim();
            String SubCode = txtPartyCode.getText().trim();
            
//            strSQL="SELECT A.COMPANY_ID,A.VOUCHER_NO,A.VOUCHER_DATE,SUM(B.AMOUNT) AS AMOUNT,B.GRN_NO,B.GRN_DATE,B.INVOICE_NO," +
//            "B.INVOICE_DATE,B.MODULE_ID,A.VOUCHER_TYPE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B " +
//            "WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='"+txtMainCode.getText()+"' " +
//            "AND B.SUB_ACCOUNT_CODE='"+txtPartyCode.getText()+"' AND B.EFFECT='D' AND A.APPROVED=1 AND A.CANCELLED=0 " +
//            "AND A.VOUCHER_DATE>='" + EITLERPGLOBAL.formatDateDB(txtInvoiceFromDate.getText().trim()) + "' " +
//            "AND A.VOUCHER_DATE<='" + EITLERPGLOBAL.formatDateDB(txtInvoiceToDate.getText().trim()) + "' " +
//            "AND (B.MATCHED=0 OR B.MATCHED IS NULL) AND GRN_NO='' " +
//            "GROUP BY A.VOUCHER_NO,B.INVOICE_NO,B.INVOICE_DATE " +
//            "ORDER BY A.VOUCHER_DATE,B.INVOICE_NO ";
//            
            strSQL="SELECT A.COMPANY_ID,A.VOUCHER_NO,A.VOUCHER_DATE,SUM(B.AMOUNT) AS AMOUNT,B.GRN_NO,B.GRN_DATE,''AS INVOICE_NO,'0000-00-00' AS INVOICE_DATE,B.MODULE_ID,A.VOUCHER_TYPE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='"+txtMainCode.getText()+"' AND B.SUB_ACCOUNT_CODE='"+txtPartyCode.getText()+"' AND B.EFFECT='D' AND A.APPROVED=1 AND A.CANCELLED=0 AND A.VOUCHER_DATE>='" + EITLERPGLOBAL.formatDateDB(txtInvoiceFromDate.getText().trim()) + "' AND A.VOUCHER_DATE<='" + EITLERPGLOBAL.formatDateDB(txtInvoiceToDate.getText().trim()) + "' AND (B.MATCHED=0 OR B.MATCHED IS NULL) AND GRN_NO='' " +
                   "AND SUBSTRING(B.VOUCHER_NO,1,2)='DN' " +
                   "GROUP BY A.VOUCHER_NO " +
                   "UNION ALL " +
                   "SELECT A.COMPANY_ID,A.VOUCHER_NO,A.VOUCHER_DATE,SUM(B.AMOUNT) AS AMOUNT,B.GRN_NO,B.GRN_DATE,B.INVOICE_NO,B.INVOICE_DATE,B.MODULE_ID,A.VOUCHER_TYPE FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='"+txtMainCode.getText()+"' AND B.SUB_ACCOUNT_CODE='"+txtPartyCode.getText()+"' AND B.EFFECT='D' AND A.APPROVED=1 AND A.CANCELLED=0 AND A.VOUCHER_DATE>='" + EITLERPGLOBAL.formatDateDB(txtInvoiceFromDate.getText().trim()) + "' AND A.VOUCHER_DATE<='" + EITLERPGLOBAL.formatDateDB(txtInvoiceToDate.getText().trim()) + "' AND (B.MATCHED=0 OR B.MATCHED IS NULL) AND GRN_NO='' " +
                   "AND SUBSTRING(B.VOUCHER_NO,1,2)!='DN' GROUP BY A.VOUCHER_NO,B.INVOICE_NO,B.INVOICE_DATE ";            
            
            ResultSet rsSJ=data.getResult(strSQL,FinanceGlobal.FinURL);
            rsSJ.first();
            double UtilizedAmount = 0;
            if(rsSJ.getRow()>0) {
                while(!rsSJ.isAfterLast()) {
                    String VoucherNo = UtilFunctions.getString(rsSJ,"VOUCHER_NO","");
                    int VoucherType = UtilFunctions.getInt(rsSJ,"VOUCHER_TYPE",0);
                    String InvoiceNo = UtilFunctions.getString(rsSJ,"INVOICE_NO","");
                    String InvoiceDate = UtilFunctions.getString(rsSJ,"INVOICE_DATE","0000-00-00");
                    double SJAmount = UtilFunctions.getDouble(rsSJ,"AMOUNT",0);
                    double ReceiptAmount = 0;
                    
                    if(VoucherType == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        if(data.IsRecordExist("SELECT * FROM D_SAL_NVOICE_HEADER WHERE INVOCIE_NO='"+InvoiceNo+" AND INVOICE_DATE='"+InvoiceDate+"' AND APPROVED=1 AND CANCELLED=0 AND PAYMENT_TERM_CODE LIKE '9%' ")) {
                            rsSJ.next();
                            continue;
                        }
                    }
                    String AgentAlphaSrNo = "";
                    if(clsVoucher.getVoucherType(VoucherNo)==FinanceGlobal.TYPE_SALES_JOURNAL ) {
                        strSQL="SELECT SUM(B.AMOUNT) AS AMOUNT FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B " +
                        "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='"+txtMainCode.getText()+"' " +
                        "AND B.SUB_ACCOUNT_CODE='"+txtPartyCode.getText()+"' AND B.EFFECT='C' AND B.INVOICE_NO='"+InvoiceNo+"' " +
                        "AND B.INVOICE_DATE='"+InvoiceDate+"' AND A.APPROVED=1 AND A.CANCELLED=0 ";
                        ReceiptAmount = data.getDoubleValueFromDB(strSQL,FinanceGlobal.FinURL);
                        AgentAlphaSrNo = clsSalesInvoice.getAgentAlphaSrNo(InvoiceNo, InvoiceDate);
                    } else {
                        strSQL="SELECT SUM(B.AMOUNT) AS AMOUNT FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B " +
                        "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='"+txtMainCode.getText()+"' " +
                        "AND B.SUB_ACCOUNT_CODE='"+txtPartyCode.getText()+"' AND B.EFFECT='C' AND A.CANCELLED=0 " +
                        "AND B.GRN_NO='"+VoucherNo+"' ";
                        ReceiptAmount = data.getDoubleValueFromDB(strSQL,FinanceGlobal.FinURL);
                        AgentAlphaSrNo = "";
                    }
                    
                    if(SJAmount == ReceiptAmount) {
                        rsSJ.next();
                        continue;
                    }
                    
                    Object[] rowData=new Object[1];
                    DataModelSJ.addRow(rowData);
                    
                    int NewIndex=TableSJ.getRowCount()-1;
                    
                    DataModelSJ.setValueByVariable("SR_NO",Integer.toString(NewIndex+1), NewIndex);
                    DataModelSJ.setValueByVariable("SJ_NO",UtilFunctions.getString(rsSJ,"VOUCHER_NO",""), NewIndex);
                    DataModelSJ.setValueByVariable("SJ_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsSJ,"VOUCHER_DATE","0000-00-00")), NewIndex);
                    DataModelSJ.setValueByVariable("AGENT_SR",AgentAlphaSrNo, NewIndex);
                    DataModelSJ.setValueByVariable("AMOUNT",Double.toString(UtilFunctions.getDouble(rsSJ,"AMOUNT",0)), NewIndex);
                    UtilizedAmount = data.getDoubleValueFromDB("SELECT SUM(B.ADJUST_AMOUNT) FROM D_FIN_DR_ADJ_HEADER A, D_FIN_DR_ADJ_DETAIL B " +
                    "WHERE A.DOC_NO=B.DOC_NO AND B.SJ_NO='"+UtilFunctions.getString(rsSJ,"VOUCHER_NO","")+"' AND A.APPROVED=0 AND A.CANCELLED=0 AND A.DOC_NO<>'"+DocNo+"' AND MAIN_ACCOUNT_CODE='"+MainCode+"' AND SUB_ACCOUNT_CODE='"+SubCode+"' ",FinanceGlobal.FinURL);
                    DataModelSJ.setValueByVariable("REMAINING_AMOUNT",Double.toString(EITLERPGLOBAL.round(SJAmount-ReceiptAmount-UtilizedAmount,2)), NewIndex); //
                    DataModelSJ.setValueByVariable("UTILIZED_AMOUNT",Double.toString(UtilizedAmount), NewIndex);
                    DataModelSJ.setValueByVariable("REF_DOC_NO",UtilFunctions.getString(rsSJ,"GRN_NO",""), NewIndex);
                    DataModelSJ.setValueByVariable("REF_DOC_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsSJ,"GRN_DATE","0000-00-00")), NewIndex);
                    DataModelSJ.setValueByVariable("MODULE_NAME",clsModules.getModuleName(EITLERPGLOBAL.gCompanyID,UtilFunctions.getInt(rsSJ,"MODULE_ID",0)), NewIndex);
                    DataModelSJ.setValueByVariable("MODULE_ID",Integer.toString(UtilFunctions.getInt(rsSJ,"MODULE_ID",0)), NewIndex);
                    DataModelSJ.setValueByVariable("INVOICE_NO",UtilFunctions.getString(rsSJ,"INVOICE_NO",""), NewIndex);
                    DataModelSJ.setValueByVariable("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsSJ,"INVOICE_DATE","0000-00-00")), NewIndex);
                    DataModelSJ.setValueByVariable("COMPANY_ID",Integer.toString(UtilFunctions.getInt(rsSJ,"COMPANY_ID",0)), NewIndex);
                    
                    rsSJ.next();
                }
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    
    public boolean ShowDialog() {
        try {
            setSize(682,550);
            FormatGridSJ();
            FormatGridRC();
            FormatGridAdj();
            Tab.setEnabledAt(0, true);
            Tab.setEnabledAt(1, false);
            Tab.setEnabledAt(2, false);
            Frame f=findParentFrame(this);
            
            aDialog=new JDialog(f,"Select Advance Receipt",true);
            
            aDialog.getContentPane().add("Center",this);
            Dimension appletSize = this.getSize();
            aDialog.setSize(appletSize);
            aDialog.setResizable(false);
            
            //Place it to center of the screen
            Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
            aDialog.setLocation((int)(screenSize.width-appletSize.getWidth())/2,(int)(screenSize.height-appletSize.getHeight())/2);
            
            aDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
            aDialog.show();
        }
        catch(Exception e) {
        }
        return !Cancelled;
    }
    
    
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
    
    private boolean Validate() {
        try {
            if(TableAdj.getRowCount()<0) {
                JOptionPane.showMessageDialog(null,"Please insert atleast one SJ and one receipt.");
                return false;
            }
            double AdjustedAmount = 0;
            for(int i=0;i<TableAdj.getRowCount();i++) {
                if(DataModelAdj.getValueByVariable("ADJ_AMOUNT",i).trim().equals("0")) {
                    JOptionPane.showMessageDialog(null,"Please insert amount at serial no. " + (i+1));
                    return false;
                }
                AdjustedAmount = AdjustedAmount + Double.parseDouble(DataModelAdj.getValueByVariable("ADJ_AMOUNT",i));
            }
//            double ReceiptAmount = 0;
//            for(int i=0;i<TableAdj.getRowCount();i++) {
//                if(DataModelAdj.getValueByVariable("VOUCHER_NO",i).trim().equals(lblCreditVoucher.getText().trim())) {
//                    ReceiptAmount = Double.parseDouble(DataModelRC.getValueByVariable("AVAILABLE_AMOUNT",i));
//                    double UtilizedAmount = Double.parseDouble(DataModelRC.getValueByVariable("UTILIZED_AMOUNT",i));
//                    ReceiptAmount = ReceiptAmount - UtilizedAmount;
//                    break;
//                }
//            }
//            
//            if(ReceiptAmount < AdjustedAmount) {
//                JOptionPane.showMessageDialog(null,"Receipt amount is less then adjustment amount total.");
//                return false;
//            }
        }catch(Exception e) {
            return false;
        }
        return true;
    }
    
    private void UpdateSrNo() {
        for(int i=0;i<TableAdj.getRowCount();i++) {
            DataModelAdj.setValueByVariable("SR_NO",Integer.toString(i+1), i);
        }
    }
    
    private void UpdateTotal() {
        DoNotEvaluate=true;
        //double EnterAmount  = Double.parseDouble(DataModelAdj.getValueByVariable("ADJ_AMOUNT",TableAdj.getSelectedRow()));
        double ReceiptRemainingAmount = 0;
        double CreditAmount = Double.parseDouble(lblCreditAmount.getText());
        double AvailableAmount = Double.parseDouble(DataModelRC.getValueByVariable("AVAILABLE_AMOUNT", TableRC.getSelectedRow()));
        double UtilizedAmount = Double.parseDouble(DataModelRC.getValueByVariable("UTILIZED_AMOUNT", TableRC.getSelectedRow()));
        AvailableAmount = AvailableAmount - UtilizedAmount;
        double DebitAmount = Math.abs(AvailableAmount - CreditAmount);
        double TableEnterAmount = 0;
        for(int i=0;i<TableAdj.getRowCount();i++) {
            TableEnterAmount += Double.parseDouble(DataModelAdj.getValueByVariable("ADJ_AMOUNT", i));
        }
        ReceiptRemainingAmount = CreditAmount - DebitAmount - TableEnterAmount;
        if(ReceiptRemainingAmount < 0) {
            JOptionPane.showMessageDialog(null,"Adjustment amount exceeding credit amount.","Wrong Input",JOptionPane.ERROR_MESSAGE);
            DataModelAdj.setValueByVariable("ADJ_AMOUNT","0", TableAdj.getRowCount());
        } else {
            lblRemainingAmount.setText(Double.toString(ReceiptRemainingAmount));
        }
    }
}
