/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP;

//Toolkit,   frame.setExtendedState(Frame.MAXIMIZED_BOTH)

/*<APPLET CODE=frmUser.class HEIGHT=435 WIDTH=590></APPLET>
 */

/**
 * 
 * @author  nrpithva
 */
 
import javax.swing.*;
import java.awt.*;
import java.util.*;
import javax.swing.tree.*;
import java.sql.*;
import java.net.*;
import EITLERP.Finance.clsCalcInterest;
 
public class frmUser extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsUser ObjUser;
    private boolean Changing=false;
    private HashMap colTree=new HashMap();
    private HashMap colFunctionList=new HashMap();
    private HashMap colFunctions=new HashMap();
    private EITLComboModel cmbDeptModel;
    private EITLComboModel cmbUserModel;
    private String OldPassword = "";    
    /** Creates new form frmTemplate */
    public frmUser() {
        System.gc();
        setSize(590,435);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        GenerateCombo();
        
        //Create instance of user
        ObjUser=new clsUser();
        
        
        if(ObjUser.LoadData(EITLERPGLOBAL.gCompanyID)) {
            //First Generate the Tree
            GenerateTree();
            
            //By default the pointer will be at first record
            //So display it
            DisplayData();
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Failed to load data. Error is "+ObjUser.LastError);
            //Code to exit the form
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblUserName = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        lblLoginID = new javax.swing.JLabel();
        txtLoginID = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        lblDepartment = new javax.swing.JLabel();
        cmbUser = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        lblSuperior = new javax.swing.JLabel();
        cmbDept = new javax.swing.JComboBox();
        txtInternalMail = new javax.swing.JTextField();
        txtExternalMail = new javax.swing.JTextField();
        lblInternalMail = new javax.swing.JLabel();
        lblEcternalMail = new javax.swing.JLabel();
        chkLock = new javax.swing.JCheckBox();
        txtPassExpDate = new javax.swing.JTextField();
        lblPassExpDate = new javax.swing.JLabel();
        chkResetPassword = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tree = new javax.swing.JTree();
        cmdGrantAll = new javax.swing.JButton();
        cmdRevokeAll = new javax.swing.JButton();
        OpgGranted = new javax.swing.JRadioButton();
        OpgNotGranted = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLabel1.setBackground(new java.awt.Color(0, 102, 102));
        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setText(" User Information");
        jLabel1.setOpaque(true);
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 20, 160, 20);

        lblUserName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblUserName.setText("User Full Name :");
        jPanel1.add(lblUserName);
        lblUserName.setBounds(10, 50, 110, 15);

        txtUserName.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        txtUserName.setNextFocusableComponent(txtLoginID);
        txtUserName.setEnabled(false);
        jPanel1.add(txtUserName);
        txtUserName.setBounds(130, 50, 400, 19);

        lblLoginID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblLoginID.setText("Login ID :");
        jPanel1.add(lblLoginID);
        lblLoginID.setBounds(10, 83, 110, 15);

        txtLoginID.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        txtLoginID.setNextFocusableComponent(txtPassword);
        txtLoginID.setEnabled(false);
        jPanel1.add(txtLoginID);
        txtLoginID.setBounds(130, 80, 170, 19);

        lblPassword.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPassword.setText("Password :");
        jPanel1.add(lblPassword);
        lblPassword.setBounds(10, 113, 110, 15);

        txtPassword.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        txtPassword.setNextFocusableComponent(cmbUser);
        txtPassword.setEnabled(false);
        jPanel1.add(txtPassword);
        txtPassword.setBounds(130, 110, 170, 20);

        lblDepartment.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDepartment.setText("Department :");
        jPanel1.add(lblDepartment);
        lblDepartment.setBounds(10, 143, 110, 15);

        cmbUser.setNextFocusableComponent(txtUserName);
        cmbUser.setEnabled(false);
        jPanel1.add(cmbUser);
        cmbUser.setBounds(400, 140, 170, 24);

        jPanel1.add(jPanel5);
        jPanel5.setBounds(10, 240, 560, 3);

        lblSuperior.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSuperior.setText("Superior :");
        jPanel1.add(lblSuperior);
        lblSuperior.setBounds(310, 143, 80, 15);

        cmbDept.setNextFocusableComponent(cmbUser);
        cmbDept.setEnabled(false);
        jPanel1.add(cmbDept);
        cmbDept.setBounds(130, 140, 170, 24);

        txtInternalMail.setEnabled(false);
        jPanel1.add(txtInternalMail);
        txtInternalMail.setBounds(130, 180, 170, 19);

        txtExternalMail.setEnabled(false);
        jPanel1.add(txtExternalMail);
        txtExternalMail.setBounds(130, 210, 170, 19);

        lblInternalMail.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblInternalMail.setText("Internal Mail :");
        jPanel1.add(lblInternalMail);
        lblInternalMail.setBounds(10, 180, 110, 15);

        lblEcternalMail.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEcternalMail.setText("External Mail :");
        jPanel1.add(lblEcternalMail);
        lblEcternalMail.setBounds(10, 210, 110, 15);

        chkLock.setText(" Lock User");
        chkLock.setEnabled(false);
        jPanel1.add(chkLock);
        chkLock.setBounds(400, 180, 100, 20);

        txtPassExpDate.setEditable(false);
        txtPassExpDate.setFont(new java.awt.Font("Dialog", 1, 12));
        txtPassExpDate.setForeground(new java.awt.Color(255, 0, 102));
        txtPassExpDate.setEnabled(false);
        jPanel1.add(txtPassExpDate);
        txtPassExpDate.setBounds(430, 210, 130, 19);

        lblPassExpDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPassExpDate.setText("Pass. Exp. Date : ");
        jPanel1.add(lblPassExpDate);
        lblPassExpDate.setBounds(310, 210, 110, 15);

        chkResetPassword.setText(" Reset Password");
        chkResetPassword.setEnabled(false);
        chkResetPassword.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkResetPasswordItemStateChanged(evt);
            }
        });

        jPanel1.add(chkResetPassword);
        chkResetPassword.setBounds(310, 110, 140, 20);

        jTabbedPane1.addTab("User Information", null, jPanel1, "");

        jPanel2.setLayout(null);

        jPanel2.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLabel6.setBackground(new java.awt.Color(0, 102, 102));
        jLabel6.setForeground(java.awt.Color.white);
        jLabel6.setText(" User Access Permissions ");
        jLabel6.setOpaque(true);
        jPanel2.add(jLabel6);
        jLabel6.setBounds(10, 10, 170, 20);

        Tree.setNextFocusableComponent(OpgGranted);
        Tree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                TreeValueChanged(evt);
            }
        });
        Tree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TreeMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(Tree);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(10, 60, 430, 280);

        cmdGrantAll.setText("Grant All");
        cmdGrantAll.setNextFocusableComponent(cmdRevokeAll);
        cmdGrantAll.setEnabled(false);
        cmdGrantAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGrantAllActionPerformed(evt);
            }
        });

        jPanel2.add(cmdGrantAll);
        cmdGrantAll.setBounds(460, 130, 100, 25);

        cmdRevokeAll.setText("Revoke All");
        cmdRevokeAll.setNextFocusableComponent(Tree);
        cmdRevokeAll.setEnabled(false);
        cmdRevokeAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRevokeAllActionPerformed(evt);
            }
        });

        jPanel2.add(cmdRevokeAll);
        cmdRevokeAll.setBounds(460, 160, 100, 25);

        OpgGranted.setText("Granted");
        OpgGranted.setNextFocusableComponent(OpgNotGranted);
        OpgGranted.setEnabled(false);
        OpgGranted.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                OpgGrantedStateChanged(evt);
            }
        });

        jPanel2.add(OpgGranted);
        OpgGranted.setBounds(450, 40, 90, 23);

        OpgNotGranted.setText("Not Granted");
        OpgNotGranted.setNextFocusableComponent(cmdGrantAll);
        OpgNotGranted.setEnabled(false);
        OpgNotGranted.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                OpgNotGrantedStateChanged(evt);
            }
        });

        jPanel2.add(OpgNotGranted);
        OpgNotGranted.setBounds(450, 70, 108, 23);

        jLabel2.setText("Double click on Function node to Grant/Revoke access permission");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(10, 40, 402, 15);

        jTabbedPane1.addTab("Access Permissions", null, jPanel2, "");

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(0, 40, 580, 370);

    }//GEN-END:initComponents

    private void chkResetPasswordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkResetPasswordItemStateChanged
        // TODO add your handling code here:
//        if(EditMode==EITLERPGLOBAL.EDIT) {
//            if(chkResetPassword.isSelected()) {
//                txtPassword.setText("erp123");
//            } else {
//                txtPassword.setText(OldPassword);
//            }
//        }
    }//GEN-LAST:event_chkResetPasswordItemStateChanged

    private void TreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TreeMouseClicked
        // Add your handling code here:
        if(evt.getClickCount()==2 && (EditMode==EITLERPGLOBAL.EDIT || EditMode==EITLERPGLOBAL.ADD))
        {
            try
            {
              DefaultMutableTreeNode node = (DefaultMutableTreeNode) Tree.getLastSelectedPathComponent();

              if(node==null) return;

              EITLTreeModel aObject=(EITLTreeModel) node.getUserObject();
              String Key=aObject.Key;

              //Check for only "G" Nodes
              String Prefix=Key.substring(0,1);
              
              if(Prefix.equals("G"))
              {
                  aObject.Key="R"+Key.substring(1);
                  aObject.Caption="(_) "+aObject.Caption.substring(4);
              }

              
              if(Prefix.equals("R"))
              {
                  aObject.Key="G"+Key.substring(1);
                  aObject.Caption="(+) "+aObject.Caption.substring(4);
              }

              Changing=true;
              node.setUserObject(aObject);
              OpgGranted.setSelected(false);
              Changing=false;
            }
            catch(Exception e)
            {
            }
        }
    }//GEN-LAST:event_TreeMouseClicked

    private void cmdRevokeAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRevokeAllActionPerformed
        // Add your handling code here:
      //First revoke all rights from the childs
      for(int i=1;i<=colFunctionList.size();i++)
      {
            DefaultMutableTreeNode aNode=(DefaultMutableTreeNode) colFunctionList.get(Integer.toString(i));

            EITLTreeModel aObject=(EITLTreeModel) aNode.getUserObject();
            String Key=aObject.Key;
          
            aObject.Key="R"+Key.substring(1);
            aObject.Caption="(_) "+aObject.Caption.substring(4);          
            Changing=true;
            aNode.setUserObject(aObject);
            Changing=false;
            Tree.doLayout();
      }
        
    }//GEN-LAST:event_cmdRevokeAllActionPerformed

    private void cmdGrantAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGrantAllActionPerformed
        // Add your handling code here:
      //First revoke all rights from the childs
      for(int i=1;i<=colFunctionList.size();i++)
      {
            DefaultMutableTreeNode aNode=(DefaultMutableTreeNode) colFunctionList.get(Integer.toString(i));

            EITLTreeModel aObject=(EITLTreeModel) aNode.getUserObject();
            String Key=aObject.Key;
          
            aObject.Key="G"+Key.substring(1);
            aObject.Caption="(+) "+aObject.Caption.substring(4);
            
            Changing=true;
            aNode.setUserObject(aObject);
            Changing=false;
      }
        
    }//GEN-LAST:event_cmdGrantAllActionPerformed

    private void OpgNotGrantedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_OpgNotGrantedStateChanged
        // Add your handling code here:
        if(Changing)
        {
            //Get out of the procedure if it is called by checkbox
            //Otherwise it will go into infinite loop
            return; 
        }
        
        try
        {
          DefaultMutableTreeNode node = (DefaultMutableTreeNode) Tree.getLastSelectedPathComponent();
          
          if(node==null) return;
          
          EITLTreeModel aObject=(EITLTreeModel) node.getUserObject();
          String Key=aObject.Key;
          
          aObject.Key="R"+Key.substring(1);
          
          Changing=true;
          node.setUserObject(aObject);
          OpgGranted.setSelected(false);
          Changing=false;
        }
        catch(Exception e)
        {
        }
        
        
    }//GEN-LAST:event_OpgNotGrantedStateChanged

    private void OpgGrantedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_OpgGrantedStateChanged
        // Add your handling code here:
        if(Changing)
        {
            //Get out of the procedure if it is called by checkbox
            //Otherwise it will go into infinite loop
            return; 
        }
        
        try
        {
          DefaultMutableTreeNode node = (DefaultMutableTreeNode) Tree.getLastSelectedPathComponent();
          
          if(node==null) return;
          
          EITLTreeModel aObject=(EITLTreeModel) node.getUserObject();
          String Key=aObject.Key;
          
          aObject.Key="G"+Key.substring(1);
          
          Changing=true;
          node.setUserObject(aObject);
          OpgNotGranted.setSelected(false);
          Changing=false;
        }
        catch(Exception e)
        {
        }
    }//GEN-LAST:event_OpgGrantedStateChanged

    private void TreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_TreeValueChanged
        // Add your handling code here:
          //find the last selected node
        if(Changing)
        {
            //Get out of the procedure if it is called by checkbox
            //Otherwise it will go into infinite loop
            return; 
        }
        
        try
        {
          DefaultMutableTreeNode node = (DefaultMutableTreeNode) Tree.getLastSelectedPathComponent();
          
          if(node==null) return;
          
          EITLTreeModel aObject=(EITLTreeModel) node.getUserObject();
          String Key=aObject.Key;
          
          if(Key.substring(0,1).equals("G"))
          {
            Changing=true;
            OpgGranted.setSelected(true);
            OpgNotGranted.setSelected(false);
            Changing=false;
          }
          else
          {
            Changing=true;
            OpgGranted.setSelected(false);
            OpgNotGranted.setSelected(true);
            Changing=false;
          }
        }
        catch(Exception e) {
        }
    }//GEN-LAST:event_TreeValueChanged

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // Add your handling code here:
        ObjUser.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // Add your handling code here:
        PrintReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // Add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // Add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // Add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // Add your handling code here:
        Delete();
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // Add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // Add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // Add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // Add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // Add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // Add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgGranted;
    private javax.swing.JRadioButton OpgNotGranted;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JTree Tree;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkLock;
    private javax.swing.JCheckBox chkResetPassword;
    private javax.swing.JComboBox cmbDept;
    private javax.swing.JComboBox cmbUser;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdGrantAll;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRevokeAll;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdTop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblDepartment;
    private javax.swing.JLabel lblEcternalMail;
    private javax.swing.JLabel lblInternalMail;
    private javax.swing.JLabel lblLoginID;
    private javax.swing.JLabel lblPassExpDate;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblSuperior;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JTextField txtExternalMail;
    private javax.swing.JTextField txtInternalMail;
    private javax.swing.JTextField txtLoginID;
    private javax.swing.JTextField txtPassExpDate;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables

  private void EnableToolbar()
  {
      //Puts toolbar in enable mode
      cmdTop.setEnabled(true);
      cmdBack.setEnabled(true);
      cmdNext.setEnabled(true);
      cmdLast.setEnabled(true);
      cmdNew.setEnabled(true);
      cmdEdit.setEnabled(true);
      cmdDelete.setEnabled(true);
      cmdSave.setEnabled(false);
      cmdCancel.setEnabled(false);
      cmdFilter.setEnabled(true);
      cmdPreview.setEnabled(true);
      cmdPrint.setEnabled(true);
      cmdExit.setEnabled(true);
  }
  
  private void DisableToolbar()
  {
      //Puts toolbar in enable mode
      cmdTop.setEnabled(false);
      cmdBack.setEnabled(false);
      cmdNext.setEnabled(false);
      cmdLast.setEnabled(false);
      cmdNew.setEnabled(false);
      cmdEdit.setEnabled(false);
      cmdDelete.setEnabled(false);
      cmdSave.setEnabled(true);
      cmdCancel.setEnabled(true);
      cmdFilter.setEnabled(false);
      cmdPreview.setEnabled(false);
      cmdPrint.setEnabled(false);
      cmdExit.setEnabled(false);
      
  }
  
  //Didplay data on the Screen
  private void DisplayData()
  {
      
      clsMenuFunction ObjMenuFunction=new clsMenuFunction();
      clsUserRights ObjRights=new clsUserRights();
      int FunctionID=0;
      
      DefaultMutableTreeNode aNode;
      
      //Now loop through the child nodes
  
      //First revoke all rights from the childs
      for(int i=1;i<=colFunctionList.size();i++)
      {
            aNode=(DefaultMutableTreeNode) colFunctionList.get(Integer.toString(i));

            EITLTreeModel aObject=(EITLTreeModel) aNode.getUserObject();
            String Key=aObject.Key;
          
            aObject.Key="R"+Key.substring(1);
            aObject.Caption="(_) "+aObject.Caption.substring(4);
            Changing=true;
            aNode.setUserObject(aObject);
            Changing=false;
      }
      
      for(int i=1;i<=ObjUser.colRights.size();i++)
      {
            ObjRights=(clsUserRights) ObjUser.colRights.get(Integer.toString(i));
            FunctionID = (int) ObjRights.getAttribute("FUNCTION_ID").getVal();
            
            //Get the Node from the childs
            aNode=(DefaultMutableTreeNode) colFunctions.get(Integer.toString(FunctionID));    
            
            if(aNode==null)
            {}
            else
            {
                //We have the node. Now change it to Granted
                EITLTreeModel aObject=(EITLTreeModel) aNode.getUserObject();
                String Key=aObject.Key;

                aObject.Key="G"+Key.substring(1);
                aObject.Caption="(+) "+aObject.Caption.substring(4);
                Changing=true;
                aNode.setUserObject(aObject);
                Changing=false;
            }
      }
      
      //Now Display Other values
      txtUserName.setText((String) ObjUser.getAttribute("USER_NAME").getObj());
      txtLoginID.setText((String) ObjUser.getAttribute("LOGIN_ID").getObj());
      txtPassword.setText((String) ObjUser.getAttribute("PASSWORD").getObj());
      OldPassword = ObjUser.getAttribute("PASSWORD").getString();
      txtInternalMail.setText(ObjUser.getAttribute("INTERNAL_EMAIL").getString());
      txtExternalMail.setText(ObjUser.getAttribute("EXTERNAL_EMAIL").getString());
      if(ObjUser.getAttribute("LOCKED").getBool()) {
          chkLock.setSelected(true);
      } else {
          chkLock.setSelected(false);
      }
      txtPassExpDate.setText(EITLERPGLOBAL.formatDate(ObjUser.getAttribute("PASSWORD_EXPIRY_DATE").getString()));
      
      EITLERPGLOBAL.setComboIndex(cmbDept,(int)ObjUser.getAttribute("DEPT_ID").getVal());
      EITLERPGLOBAL.setComboIndex(cmbUser,(int)ObjUser.getAttribute("SUPERIOR_ID").getVal());
      //Department is Pending
      
  }

  
  //Sets data to the Class Object
  private void SetData() {
      //Now first Remove all old rights entries
      ObjUser.colRights.clear();
      // ------- Header Fields -------------
      //Now Add all Child entries to it
      ObjUser.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
      if(EditMode==EITLERPGLOBAL.ADD) {
        ObjUser.setAttribute("USER_ID",0); //It will be generated Automatically
      } 
      ObjUser.setAttribute("USER_NAME",txtUserName.getText());
      ObjUser.setAttribute("LOGIN_ID",txtLoginID.getText());
      
      if(chkResetPassword.isSelected() || EditMode == EITLERPGLOBAL.ADD) {
          ObjUser.setAttribute("PASSWORD",MBMencode.MBMen("erp123".getBytes())); 
      } else {
          ObjUser.setAttribute("PASSWORD",txtPassword.getText()); 
      }
      
      ObjUser.setAttribute("DEPT_ID",EITLERPGLOBAL.getComboCode(cmbDept)); 
      ObjUser.setAttribute("SUPERIOR_ID",EITLERPGLOBAL.getComboCode(cmbUser)); 
      
      //BY MUFFY
      if(chkLock.isSelected()) {
          ObjUser.setAttribute("LOCKED",true); 
      } else {
          ObjUser.setAttribute("LOCKED",false); 
      }
      
      ObjUser.setAttribute("INTERNAL_EMAIL",txtInternalMail.getText().trim()); 
      ObjUser.setAttribute("EXTERNAL_EMAIL",txtExternalMail.getText().trim()); 
      if(txtPassExpDate.getText().trim().equals("")) {
          //ObjUser.setAttribute("PASSWORD_EXPIRY_DATE",EITLERPGLOBAL.formatDate(clsCalcInterest.addMonthToDate(EITLERPGLOBAL.getCurrentDateDB(),2))); 
          ObjUser.setAttribute("PASSWORD_EXPIRY_DATE",EITLERPGLOBAL.formatDate(EITLERPGLOBAL.addDaysToDate(EITLERPGLOBAL.getCurrentDateDB(),60,"yyyy-MM-dd")));
      } else {
          ObjUser.setAttribute("PASSWORD_EXPIRY_DATE",txtPassExpDate.getText().trim()); 
      }
      
      
      //Audit Trail Fields
      if(EditMode==EITLERPGLOBAL.ADD) {
          ObjUser.setAttribute("CREATED_BY",EITLERPGLOBAL.gUserID);
          ObjUser.setAttribute("CREATED_DATE",EITLERPGLOBAL.formatDateDB(EITLERPGLOBAL.getCurrentDate()));
          ObjUser.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gUserID);
          ObjUser.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.formatDateDB(EITLERPGLOBAL.getCurrentDate()));
      }
      
      if(EditMode==EITLERPGLOBAL.EDIT) {
          ObjUser.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gUserID);
          ObjUser.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.formatDateDB(EITLERPGLOBAL.getCurrentDate()));
      }
      
       
      //Now turn of rights
      for(int i=1;i<=colFunctionList.size();i++) {
            DefaultMutableTreeNode aNode=(DefaultMutableTreeNode) colFunctionList.get(Integer.toString(i));

            EITLTreeModel aObject=(EITLTreeModel) aNode.getUserObject();
            String Key=aObject.Key;
          
            //Check for only "G" Nodes
            String Prefix=Key.substring(0,1);
            
            if(Prefix.equals("G")) {
                int FunctionID=Integer.parseInt(Key.substring(1));
                clsUserRights ObjRight=new clsUserRights();
                
                ObjRight.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
                ObjRight.setAttribute("USER_ID",0); //It will be updated by Header Class
                ObjRight.setAttribute("MENU_ID",0);
                ObjRight.setAttribute("FUNCTION_ID",FunctionID);
                
                ObjUser.colRights.put(Integer.toString(ObjUser.colRights.size()+1),ObjRight);
            }
      }// For Loop
      //Data had been set to Object
  }
  
  
  private void MoveFirst() {
      ObjUser.MoveFirst();
      DisplayData();
  }
  
  private void MovePrevious() {
      ObjUser.MovePrevious();
      DisplayData();
  }
  
  private void MoveNext() {
      ObjUser.MoveNext();
      DisplayData();
  }
  
  private void MoveLast() {
      ObjUser.MoveLast();
      DisplayData();
  }
  
  private void Add() {
      EditMode=EITLERPGLOBAL.ADD;
      SetFields(true);
      ClearFields();
      DisableToolbar();
  }
  
  private void Edit() {
      EditMode=EITLERPGLOBAL.EDIT;
      SetFields(true);
      DisableToolbar();
  }
  
  private void Delete() {
     if(JOptionPane.showConfirmDialog(null,"Are you sure You want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION)
     {
         if(ObjUser.Delete()) {
             DisplayData();   
         } else {
             JOptionPane.showMessageDialog(null,"Error occured while deleting "+ObjUser.LastError);
         }
     }
  }
  
  private void Save() {
      //Screen Level Validations
      if(txtUserName.getText().equals("")) {
          JOptionPane.showMessageDialog(null,"Please enter the user name");
          txtUserName.requestFocus();
          return;
      }
      
      if(txtLoginID.getText().equals("")) {
          JOptionPane.showMessageDialog(null,"Please enter the Login ID");
          txtLoginID.requestFocus();
          return;
      }
      
//      if(txtPassword.getText().equals("")) {
//          JOptionPane.showMessageDialog(null,"You must enter some password");
//          txtPassword.requestFocus();
//          return;
//      }

      //Now set the data
      SetData();
      
      if(EditMode==EITLERPGLOBAL.ADD)
      {
          if(ObjUser.Insert())
          {
              MoveLast();
          }
          else
          {
              JOptionPane.showMessageDialog(null,ObjUser.LastError);
          }
      }
      
      if(EditMode==EITLERPGLOBAL.EDIT)
      {
          if(ObjUser.Update())
          {
             //Nothing to do
          }
          else
          {
              JOptionPane.showMessageDialog(null,ObjUser.LastError);
          }
      }
      
      SetFields(false);
      EnableToolbar();
      EditMode=0;
  }

  
  private void Cancel()
  {
      SetFields(false);
      EnableToolbar();
      EditMode=0;
  }

  private void GenerateTree()
  {
    clsMenu ObjMenu=new clsMenu();
    clsMenuFunction ObjMenuFunction=new clsMenuFunction();
    HashMap List=new HashMap();
    HashMap fList=new HashMap();
    String strCaption="";
    int MenuID=0;
    int ParentID=0;
    int FunctionID=0;
    
    DefaultMutableTreeNode aNode;
        
    //Clear existing Tree
    colTree.clear();
    colFunctions.clear();
    colFunctionList.clear();
    
    List=ObjMenu.getMenuList(EITLERPGLOBAL.gCompanyID);
    
    //First create Root Node
    DefaultMutableTreeNode Root=new DefaultMutableTreeNode(new EITLTreeModel("0","Root"));
   
    DefaultTreeModel aModel=new DefaultTreeModel(Root);
    Tree.setModel(aModel);    
    
    //Add it to our collection with key '0'
    colTree.put("0",Root);
    
    //Now Loop through the List
    for(int i=1;i<=List.size();i++)
    {
        ObjMenu=(clsMenu) List.get(Integer.toString(i));
    
        strCaption=(String) ObjMenu.getAttribute("MENU_CAPTION").getObj();
        MenuID=(int) ObjMenu.getAttribute("MENU_ID").getVal();
        ParentID=(int) ObjMenu.getAttribute("PARENT_ID").getVal();
        String strKey=Integer.toString(MenuID);
        
        //Find out the parent node
        aNode=(DefaultMutableTreeNode) colTree.get(Integer.toString(ParentID));
      
        DefaultMutableTreeNode Child=new DefaultMutableTreeNode(new EITLTreeModel(strKey,strCaption));
        //Add it to our collection
        colTree.put(Integer.toString(MenuID),Child);
        
        //Insert Node into tree
        aNode.insert(Child,aNode.getChildCount());
    }

    
    colFunctionList.clear();
    colFunctions.clear();
    
    int counter=0;
    
    //Now Turn of Functions
    for(int i=1;i<=List.size();i++)
    {
        ObjMenu=(clsMenu) List.get(Integer.toString(i));
    
        MenuID=(int) ObjMenu.getAttribute("MENU_ID").getVal();
     
        //Now clear the functions list
        fList.clear();
        fList=ObjMenu.getFunctionList(EITLERPGLOBAL.gCompanyID,MenuID);
        
        
        for(int j=1;j<=fList.size();j++)
        {
            ObjMenuFunction=(clsMenuFunction) fList.get(Integer.toString(j));

            strCaption="(_) "+(String) ObjMenuFunction.getAttribute("FUNCTION_NAME").getObj();
            MenuID=(int) ObjMenuFunction.getAttribute("MENU_ID").getVal();
            FunctionID=(int) ObjMenuFunction.getAttribute("FUNCTION_ID").getVal();
            String strKey="R"+Integer.toString(FunctionID);

            //Find out the parent node
            aNode=(DefaultMutableTreeNode) colTree.get(Integer.toString(MenuID));

            DefaultMutableTreeNode Child=new DefaultMutableTreeNode(new EITLTreeModel(strKey,strCaption));

            //Add it to our collection
            counter=counter+1;
            colFunctionList.put(Integer.toString(counter),Child);
            colFunctions.put(Integer.toString(FunctionID),Child);
            
            //Insert Node into tree
            aNode.insert(Child,aNode.getChildCount());
        }
    }
  }

  
  private void SetFields(boolean pStat)
  {
      txtUserName.setEnabled(pStat);
      txtLoginID.setEnabled(pStat);
      //txtPassword.setEnabled(pStat);
      chkResetPassword.setEnabled(pStat);
      txtInternalMail.setEnabled(pStat);
      txtExternalMail.setEnabled(pStat);
      txtPassExpDate.setEnabled(pStat);
      chkLock.setEnabled(pStat);
      OpgGranted.setEnabled(pStat);
      OpgNotGranted.setEnabled(pStat);
      cmdGrantAll.setEnabled(pStat);
      cmdRevokeAll.setEnabled(pStat);
      cmbDept.setEnabled(pStat);
      cmbUser.setEnabled(pStat);
  }

  private void ClearFields()
  { 
      txtUserName.setText("");
      txtLoginID.setText("");
      txtPassword.setText("");
      chkResetPassword.setSelected(false);
      txtInternalMail.setText("");
      txtExternalMail.setText("");
      txtPassExpDate.setText("");
      chkLock.setSelected(false);
      //First revoke all rights from the childs
      for(int i=1;i<=colFunctionList.size();i++)
      {
            DefaultMutableTreeNode aNode=(DefaultMutableTreeNode) colFunctionList.get(Integer.toString(i));

            EITLTreeModel aObject=(EITLTreeModel) aNode.getUserObject();
            String Key=aObject.Key;
          
            aObject.Key="R"+Key.substring(1);
          
            Changing=true;
            aNode.setUserObject(aObject);
            Changing=false;
      }
      
  }

  private void Find()
  {
      Loader ObjLoader=new Loader(this,"EITLERP.frmUserFind",true);
      frmUserFind ObjReturn= (frmUserFind) ObjLoader.getObj();
      
      if(ObjReturn.Cancelled==false)
      {
          if(!ObjUser.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID))
          {
              JOptionPane.showMessageDialog(null,"No records found.");
          }
          MoveFirst();
      }
  }

  public void PrintReport()
  {
      try
      {
        /*Connection Conn=data.getConn();
        JasperReport jasperReport = JasperManager.loadReport("D:/Projects/Java/EITLERP/Reports/rptUsers.jasper");
        Map parameters = new HashMap();
        parameters.put("ReportTitle", "Test Report");
        JasperPrint jasperPrint = JasperManager.fillReport(jasperReport, parameters, Conn);
        JasperViewer.viewReport(jasperPrint);*/
      }
      catch(Exception e)
      {
          JOptionPane.showMessageDialog(null,"Error occured while printing report. Error is "+e.getMessage());

      }
  }

  private void GenerateCombo()
  {
        HashMap List=new HashMap();
        String strCondition="";
        
        //----- Generate cmbType ------- //
        cmbDeptModel=new EITLComboModel();
        cmbDept.removeAllItems();
        cmbDept.setModel(cmbDeptModel);
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" ";
        
        List=clsDepartment.getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsDepartment ObjDept=(clsDepartment) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjDept.getAttribute("DEPT_ID").getVal();
            aData.Text=(String)ObjDept.getAttribute("DEPT_DESC").getObj();
            aData.strCode="";
            cmbDeptModel.addElement(aData);
        }
        //------------------------------ //
        
        
        //----- Generate cmbType ------- //
        cmbUserModel=new EITLComboModel();
        cmbUser.removeAllItems();
        cmbUser.setModel(cmbUserModel);
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" ";
        
        
        List=(new clsUser()).getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int)ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            aData.strCode="";
            cmbUserModel.addElement(aData);
        }
        //------------------------------ //
        
  }
  
}
