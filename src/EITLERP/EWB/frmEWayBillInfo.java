/* frmFeltSalesInfo.java
 *
 *
 * Created on July 13, 2005, 10:47 AM
 */
package EITLERP.EWB;

import EITLERP.*;
import EITLERP.Finance.UtilFunctions;
import java.awt.Color;
import java.io.File;
import java.sql.*;
import javax.swing.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import javax.swing.table.JTableHeader;

/**
 *
 * @author ashutosh/RISHI
 */
public class frmEWayBillInfo extends javax.swing.JApplet {

    public boolean forceToChange = false;
    public boolean cancelled = false;
    private EITLTableModel[] DataModel;
    private EITLTableModel DataModelEWB = new EITLTableModel();
    private EITLComboModel cmbInvoiceTypeModel;
    
    private EITLComboModel cmbOrderByModel = new EITLComboModel();

    private boolean InvFlag = false;
    private int STGCnt = 0;
    private int FLTCnt = 0;
    private int FFCnt = 0;

    String strProductCode = "";
    private JDialog aDialog;
    //DateFormat df =  new SimpleDateFormat("dd-MMM-yy");
    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    HashMap hmPieceList = new HashMap();

    private clsExcelExporterEWB exp = new clsExcelExporterEWB();

    public void init() {
        initComponents();
        file1.setVisible(false);
        getDeptId();
        GenerateCombo();
        GenerateOrderCombo();
        FormatGrid();//780, 560
        setSize(790, 590);
        jLabel1.setForeground(Color.WHITE);
        txtFromDate.setText(EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT SUBDATE(CURDATE(),1) FROM DUAL")));
        txtToDate.setText(EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT SUBDATE(CURDATE(),1) FROM DUAL")));
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStatus = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        Table_EWB = new javax.swing.JTable();
        btnShowEWB = new javax.swing.JButton();
        Export_EWB = new javax.swing.JButton();
        file1 = new javax.swing.JFileChooser();
        jLabel85 = new javax.swing.JLabel();
        cmbOrderBy = new javax.swing.JComboBox();
        btnSendMail = new javax.swing.JButton();
        CLR_BTN = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmbInvoiceType = new javax.swing.JComboBox();

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel2.setBackground(new java.awt.Color(0, 102, 153));
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 110, 780, 10);

        txtFromDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        txtFromDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFromDateFocusLost(evt);
            }
        });
        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(170, 30, 110, 30);

        txtToDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        txtToDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToDateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtToDateFocusLost(evt);
            }
        });
        getContentPane().add(txtToDate);
        txtToDate.setBounds(380, 30, 100, 30);

        jPanel10.setLayout(null);

        Table_EWB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_EWB.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_EWB.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_EWB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_EWBKeyPressed(evt);
            }
        });
        jScrollPane10.setViewportView(Table_EWB);

        jPanel10.add(jScrollPane10);
        jScrollPane10.setBounds(10, 50, 730, 330);

        btnShowEWB.setText("Show List");
        btnShowEWB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowEWBActionPerformed(evt);
            }
        });
        jPanel10.add(btnShowEWB);
        btnShowEWB.setBounds(10, 10, 130, 30);

        Export_EWB.setText("EXPORT TO EXCEL");
        Export_EWB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_EWBActionPerformed(evt);
            }
        });
        jPanel10.add(Export_EWB);
        Export_EWB.setBounds(420, 10, 170, 33);

        file1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file1ActionPerformed(evt);
            }
        });
        jPanel10.add(file1);
        file1.setBounds(140, 50, 435, 380);

        jLabel85.setText("Order By");
        jPanel10.add(jLabel85);
        jLabel85.setBounds(180, 10, 70, 30);

        cmbOrderBy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbOrderByItemStateChanged(evt);
            }
        });
        jPanel10.add(cmbOrderBy);
        cmbOrderBy.setBounds(250, 10, 150, 33);

        btnSendMail.setText("Send Mail");
        btnSendMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendMailActionPerformed(evt);
            }
        });
        jPanel10.add(btnSendMail);
        btnSendMail.setBounds(620, 10, 120, 33);

        jTabbedPane2.addTab("EWB", jPanel10);

        getContentPane().add(jTabbedPane2);
        jTabbedPane2.setBounds(10, 120, 770, 430);

        CLR_BTN.setText("Clear");
        CLR_BTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CLR_BTN.setMargin(new java.awt.Insets(2, 7, 2, 7));
        CLR_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLR_BTNActionPerformed(evt);
            }
        });
        getContentPane().add(CLR_BTN);
        CLR_BTN.setBounds(540, 30, 80, 30);

        jLabel3.setText("Period : ");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 30, 60, 20);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("From Date :");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(60, 30, 100, 20);

        jLabel5.setText("To Date :");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(310, 30, 70, 20);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setText("E-Way Bill Information System");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 2, 780, 25);

        jLabel6.setText("Type : ");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(10, 70, 60, 20);

        cmbInvoiceType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbInvoiceTypeItemStateChanged(evt);
            }
        });
        getContentPane().add(cmbInvoiceType);
        cmbInvoiceType.setBounds(80, 70, 180, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void file1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_file1ActionPerformed

    private void txtToDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtToDateFocusGained

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    private void Table_EWBKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_EWBKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_EWBKeyPressed

    private void btnShowEWBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowEWBActionPerformed
        // TODO add your handling code here:
        if (!Validate()) {
            return;
        }
        FormatGrid();
        GenerateEWBData();
        InvFlag = true;
        STGCnt++;
        FLTCnt++;
        FFCnt++;
        txtFromDate.setEditable(false);
        txtToDate.setEditable(false);
    }//GEN-LAST:event_btnShowEWBActionPerformed

    private void Export_EWBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_EWBActionPerformed
        File file = null;
        file1.setVisible(true);
        try {
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }

            exp.fillData(Table_EWB, file, "EWB");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file1.getSelectedFile().toString() + " successfully... ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_EWBActionPerformed

    private void CLR_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLR_BTNActionPerformed
        txtFromDate.setText("");
        txtToDate.setText("");
        txtFromDate.setText(EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT SUBDATE(CURDATE(),1) FROM DUAL")));
        txtToDate.setText(EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT SUBDATE(CURDATE(),1) FROM DUAL")));
        txtFromDate.setEditable(true);
        txtToDate.setEditable(true);
        InvFlag = false;
        GenerateCombo();
        GenerateOrderCombo();
        FormatGrid();
    }//GEN-LAST:event_CLR_BTNActionPerformed

    private void cmbInvoiceTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbInvoiceTypeItemStateChanged
        // TODO add your handling code here:
        if (InvFlag) {
            if (!Validate()) {
                return;
            }
            FormatGrid();
            ShowEWBData();
        }
    }//GEN-LAST:event_cmbInvoiceTypeItemStateChanged

    private void txtFromDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFromDateFocusLost
        // TODO add your handling code here:
//        if (txtFromDate.getText().trim().equals("")) {
//            JOptionPane.showMessageDialog(null, "Please Enter from Date");
//            txtFromDate.requestFocus();
//            txtFromDate.setText("");
//        } else if (!EITLERPGLOBAL.isDate(txtFromDate.getText())) {
//            JOptionPane.showMessageDialog(null, "Invalid From Date in DD/MM/YYYY format.");
//            txtFromDate.requestFocus();
//            txtFromDate.setText("");
//        } else if (data.getIntValueFromDB("SELECT DATEDIFF('" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "',CURDATE()) FROM DUAL") > 0) {
//            JOptionPane.showMessageDialog(null, "Please enter Current Date or Previous Date in Effective From Date");
//            txtFromDate.requestFocus();
//            txtFromDate.setText("");
//        }
    }//GEN-LAST:event_txtFromDateFocusLost

    private void txtToDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToDateFocusLost
        // TODO add your handling code here:
//        if (!txtFromDate.getText().trim().equals("") && EITLERPGLOBAL.isDate(txtFromDate.getText())) {
//            if (txtToDate.getText().trim().equals("")) {
//                JOptionPane.showMessageDialog(null, "Please Enter To Date");
//                txtToDate.requestFocus();
//                txtToDate.setText("");
//            } else if (!EITLERPGLOBAL.isDate(txtToDate.getText())) {
//                JOptionPane.showMessageDialog(null, "Invalid To Date in DD/MM/YYYY format.");
//                txtToDate.requestFocus();
//                txtToDate.setText("");
//            } else if (data.getIntValueFromDB("SELECT DATEDIFF('" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "',CURDATE()) FROM DUAL") > 0 || data.getIntValueFromDB("SELECT DATEDIFF('" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "','" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "') FROM DUAL") < 0) {
//                JOptionPane.showMessageDialog(null, "Please enter Greater Date than From Date and Less than or Equals Current Date in Effective To Date");
//                txtToDate.requestFocus();
//                txtToDate.setText("");
//            }
//        } else {
//            txtFromDate.requestFocus();
//        }
    }//GEN-LAST:event_txtToDateFocusLost

    private void cmbOrderByItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbOrderByItemStateChanged
        // TODO add your handling code here:
        if (InvFlag) {
            if (!Validate()) {
                return;
            }
            FormatGrid();
            ShowEWBData();
        }
    }//GEN-LAST:event_cmbOrderByItemStateChanged

    private void btnSendMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendMailActionPerformed
        // TODO add your handling code here:
        if (!Validate()) {
            return;
        }
        
        String FromDate = EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
        String ToDate = EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());
        String locPath = "";
        int InvoiceType = cmbInvoiceType.getSelectedIndex();

        
        try {
            if (InvoiceType == 0) {
                JOptionPane.showMessageDialog(null, "Select Type to Send E-Mail");
            }
            if (InvoiceType == 1 && STGCnt == 1) {
                STGCnt++;
                locPath = "D://STG_EWay_Data_" + FromDate + "_TO_" + ToDate + ".xls";
                exp.fillData(Table_EWB, new File(locPath), "EWayData");
                EWBMail.SendSuitingEWBMail(txtFromDate.getText().trim(), txtToDate.getText().trim(), locPath);
                JOptionPane.showMessageDialog(null, "Data saved at 'D://STG_EWay_Data_" + FromDate + "_TO_" + ToDate + ".xls' successfully in Windows PC ", "Message", JOptionPane.INFORMATION_MESSAGE);
            }
            if (InvoiceType == 2 && FLTCnt == 1) {
                FLTCnt++;
                locPath = "D://FLT_EWay_Data_" + FromDate + "_TO_" + ToDate + ".xls";
                exp.fillData(Table_EWB, new File(locPath), "EWayData");
                EWBMail.SendFeltEWBMail(txtFromDate.getText().trim(), txtToDate.getText().trim(), locPath);
                JOptionPane.showMessageDialog(null, "Data saved at 'D://FLT_EWay_Data_" + FromDate + "_TO_" + ToDate + ".xls' successfully in Windows PC ", "Message", JOptionPane.INFORMATION_MESSAGE);
            }
            if (InvoiceType == 3 && FFCnt == 1) {
                FFCnt++;
                locPath = "D://FF_EWay_Data_" + FromDate + "_TO_" + ToDate + ".xls";
                exp.fillData(Table_EWB, new File(locPath), "EWayData");
                EWBMail.SendFilterFabricEWBMail(txtFromDate.getText().trim(), txtToDate.getText().trim(), locPath);
                JOptionPane.showMessageDialog(null, "Data saved at 'D://FF_EWay_Data_" + FromDate + "_TO_" + ToDate + ".xls' successfully in Windows PC ", "Message", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "E-Mail Sent.");
//            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnSendMailActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CLR_BTN;
    private javax.swing.JButton Export_EWB;
    private javax.swing.JTable Table_EWB;
    private javax.swing.JButton btnSendMail;
    private javax.swing.JButton btnShowEWB;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbInvoiceType;
    private javax.swing.JComboBox cmbOrderBy;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables

    private void GenerateCombo() {
        //--- Generate Type Combo ------//
        cmbInvoiceTypeModel = new EITLComboModel();

        cmbInvoiceType.removeAllItems();
        cmbInvoiceType.setModel(cmbInvoiceTypeModel);

        ComboData aData = new ComboData();
        aData.Code = 0;
        aData.Text = "All";
        cmbInvoiceTypeModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 1;
        aData.Text = "Suiting";
        cmbInvoiceTypeModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 2;
        aData.Text = "Felt";
        cmbInvoiceTypeModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 3;
        aData.Text = "Filter Fabric";
        cmbInvoiceTypeModel.addElement(aData);

        //===============================//
    }
    
    private void GenerateOrderCombo() {
        //--- Generate Type Combo ------//
        cmbOrderByModel = new EITLComboModel();

        cmbOrderBy.removeAllItems();
        cmbOrderBy.setModel(cmbOrderByModel);

        ComboData aData = new ComboData();
        aData.Code = 0;
        aData.Text = "Select Order";
        cmbOrderByModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 1;
        aData.Text = "Doc No";
        cmbOrderByModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 2;
        aData.Text = "Doc Date";
        cmbOrderByModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 3;
        aData.Text = "Party Code";
        cmbOrderByModel.addElement(aData);

        //===============================//
    }

    private boolean Validate() {
        //Form level validations
        if (txtFromDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter from Date");
            return false;
        } else if (!EITLERPGLOBAL.isDate(txtFromDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid From Date in DD/MM/YYYY format.");
            return false;
        }

        if (txtToDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter To Date");
            return false;
        } else if (!EITLERPGLOBAL.isDate(txtToDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid To Date in DD/MM/YYYY format.");
            return false;
        }

        return true;
    }

    private void FormatGrid() {
        try {
            DataModelEWB = new EITLTableModel();
            Table_EWB.removeAll();

            Table_EWB.setModel(DataModelEWB);
            Table_EWB.setAutoResizeMode(0);

            DataModelEWB.addColumn("SrNo");
            DataModelEWB.addColumn("Supply Type");
            DataModelEWB.addColumn("Sub Type");
            DataModelEWB.addColumn("Doc Type");
            DataModelEWB.addColumn("Doc No");
            DataModelEWB.addColumn("Doc Date");
            DataModelEWB.addColumn("From OtherPartyName");
            DataModelEWB.addColumn("From GSTIN");
            DataModelEWB.addColumn("From Address1");
            DataModelEWB.addColumn("From Address2");
            DataModelEWB.addColumn("From Place");
            DataModelEWB.addColumn("From Pin Code");
            DataModelEWB.addColumn("From State");
            DataModelEWB.addColumn("To OtherPartyName");
            DataModelEWB.addColumn("To GSTIN");
            DataModelEWB.addColumn("To Address1");
            DataModelEWB.addColumn("To Address2");
            DataModelEWB.addColumn("To Place");
            DataModelEWB.addColumn("To Pin Code");
            DataModelEWB.addColumn("To State");
            DataModelEWB.addColumn("Product");
            DataModelEWB.addColumn("Description");
            DataModelEWB.addColumn("HSN");
            DataModelEWB.addColumn("Unit");
            DataModelEWB.addColumn("QTY");
            DataModelEWB.addColumn("Assessable Value");
            DataModelEWB.addColumn("Tax Rate (S+C+I+Cess)");
            DataModelEWB.addColumn("CGST Amount");
            DataModelEWB.addColumn("SGST Amount");
            DataModelEWB.addColumn("IGST Amount");
            DataModelEWB.addColumn("Inv Amount");
            DataModelEWB.addColumn("Trans Mode");
            DataModelEWB.addColumn("Distance Level (KM)");
            DataModelEWB.addColumn("Trans Name");
            DataModelEWB.addColumn("Trans ID");
            DataModelEWB.addColumn("Trans Doc No");
            DataModelEWB.addColumn("Trans Date");
            DataModelEWB.addColumn("Vehicle No");
            DataModelEWB.addColumn("Error List");

            DataModelEWB.SetVariable(0, "SR_N0");
            DataModelEWB.SetVariable(1, "SUPPLY_TYPE");
            DataModelEWB.SetVariable(2, "SUB_TYPE");
            DataModelEWB.SetVariable(3, "DOC_TYPE");
            DataModelEWB.SetVariable(4, "DOC_NO");
            DataModelEWB.SetVariable(5, "DOC_DATE");
            DataModelEWB.SetVariable(6, "FROM_OTHER_PARTY_NAME");
            DataModelEWB.SetVariable(7, "FROM_GSTIN");
            DataModelEWB.SetVariable(8, "FROM_ADDRESS1");
            DataModelEWB.SetVariable(9, "FROM_ADDRESS2");
            DataModelEWB.SetVariable(10, "FROM_PLACE");
            DataModelEWB.SetVariable(11, "FROM_PINCODE");
            DataModelEWB.SetVariable(12, "FROM_STATE");
            DataModelEWB.SetVariable(13, "TO_OTHER_PARTY_NAME");
            DataModelEWB.SetVariable(14, "TO_GSTIN");
            DataModelEWB.SetVariable(15, "TO_ADDRESS1");
            DataModelEWB.SetVariable(16, "TO_ADDRESS2");
            DataModelEWB.SetVariable(17, "TO_PLACE");
            DataModelEWB.SetVariable(18, "TO_PINCODE");
            DataModelEWB.SetVariable(19, "TO_STATE");
            DataModelEWB.SetVariable(20, "PRODUCT");
            DataModelEWB.SetVariable(21, "DESCRIPTION");
            DataModelEWB.SetVariable(22, "HSN");
            DataModelEWB.SetVariable(23, "UNIT");
            DataModelEWB.SetVariable(24, "QTY");
            DataModelEWB.SetVariable(25, "ASSESSABLE_VALUE");
            DataModelEWB.SetVariable(26, "TAX_RATE");
            DataModelEWB.SetVariable(27, "CGST_AMOUNT");
            DataModelEWB.SetVariable(28, "SGST_AMOUNT");
            DataModelEWB.SetVariable(29, "IGST_AMOUNT");
            DataModelEWB.SetVariable(30, "CESS_AMOUNT");
            DataModelEWB.SetVariable(31, "TRANS_MODE");
            DataModelEWB.SetVariable(32, "DISTANCE_LEVEL_KM");
            DataModelEWB.SetVariable(33, "TRANSPORTER_NAME");
            DataModelEWB.SetVariable(34, "TRANSPORTER_GSTIN_ID");
            DataModelEWB.SetVariable(35, "TRANSPORTER_DOC_NO");
            DataModelEWB.SetVariable(36, "TRANSPORTER_DATE");
            DataModelEWB.SetVariable(37, "VEHICLE_NO");
            DataModelEWB.SetVariable(38, "ERROR_LIST");

            for (int i = 0; i <= 38; i++) {
                DataModelEWB.SetReadOnly(i);
            }

            for (int j = 0; j <= 21; j++) {
                Table_EWB.getColumnModel().getColumn(j).setMinWidth(100);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void GenerateEWBData() {
        GSTRDataProcess();

        EWAYDataProcess();
        
        ShowEWBData();
    }

    private void ShowEWBData() {

        String FromDate = EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
        String ToDate = EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());
        int InvoiceType = cmbInvoiceType.getSelectedIndex();
        int OrderBy = cmbOrderBy.getSelectedIndex();
        String orderBy = "";
        
        try {
            //String strSQL = "SELECT *,RIGHT(HSN_CODE,4) AS HSN,CASE WHEN CGST_AMT=0 THEN '0.00' ELSE CGST_PER END AS PER_CGST,CASE WHEN SGST_AMT=0 THEN '0.00' ELSE SGST_PER END AS PER_SGST,CASE WHEN IGST_AMT=0 THEN '0.00' ELSE IGST_PER END AS PER_IGST FROM FINANCE.D_SAL_GSTR_INVOICE WHERE INVOICE_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND INVOICE_DATE <= '"+ EITLERPGLOBAL.formatDateDB(txtToDate.getText()) +"' AND APPROVED=1 AND CANCELLED=0 ORDER BY INVOICE_DATE,INVOICE_NO "+ORDER_BY;
            String strSQL = "SELECT * ";
            strSQL += "FROM DINESHMILLS.D_SAL_EWAY_REPORT ";
            strSQL += "WHERE DOC_DATE>='" + FromDate + "' AND DOC_DATE <= '" + ToDate + "'  ";
            if (InvoiceType > 0) {
                strSQL += "AND INVOICE_TYPE=" + cmbInvoiceType.getSelectedIndex() + " ";
            }
            
            if (OrderBy == 0) {
                orderBy += " ORDER BY TRANSPORTER_ID,TRANSPORTER_NAME,DOC_DATE,DOC_NO ";
            }       
            if (OrderBy == 1) {
                orderBy += " ORDER BY DOC_NO ";
            }
            if (OrderBy == 2) {
                orderBy += " ORDER BY DOC_DATE ";
            }
            if (OrderBy == 3) {
                orderBy += " ORDER BY PARTY_CODE ";
            }

            strSQL += "AND APPROVED=1 AND CANCELLED=0 ";
            strSQL += " " +orderBy;

            ResultSet rs = data.getResult(strSQL);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {

                Object[] rowData = new Object[50];

                rowData[0] = cnt++;
                rowData[1] = UtilFunctions.getString(rs, "SUPPLY_TYPE", "");
                rowData[2] = UtilFunctions.getString(rs, "SUB_TYPE", "");
                rowData[3] = UtilFunctions.getString(rs, "DOC_TYPE", "");
                rowData[4] = UtilFunctions.getString(rs, "DOC_NO", "");

                String DocDt = rs.getString("DOC_DATE");
                if (DocDt.equals("") || DocDt.equals("0000-00-00")) {
                    rowData[5] = "";
                } else {
                    rowData[5] = df.format(rs.getDate("DOC_DATE"));
                }

                rowData[6] = UtilFunctions.getString(rs, "FROM_OTHER_PARTY_NAME", "");
                rowData[7] = UtilFunctions.getString(rs, "FROM_GSTIN", "");
                rowData[8] = UtilFunctions.getString(rs, "FROM_ADDRESS1", "");
                rowData[9] = UtilFunctions.getString(rs, "FROM_ADDRESS2", "");
                rowData[10] = UtilFunctions.getString(rs, "FROM_PLACE", "");
                rowData[11] = UtilFunctions.getString(rs, "FROM_PINCODE", "");
                rowData[12] = UtilFunctions.getString(rs, "FROM_STATE", "");
                rowData[13] = UtilFunctions.getString(rs, "TO_OTHER_PARTY_NAME", "");
                rowData[14] = UtilFunctions.getString(rs, "TO_GSTIN", "");
                rowData[15] = UtilFunctions.getString(rs, "TO_ADDRESS1", "");
                rowData[16] = UtilFunctions.getString(rs, "TO_ADDRESS2", "");
                rowData[17] = UtilFunctions.getString(rs, "TO_PLACE", "");
                rowData[18] = UtilFunctions.getString(rs, "TO_PINCODE", "");
                rowData[19] = UtilFunctions.getString(rs, "TO_STATE", "");
                rowData[20] = UtilFunctions.getString(rs, "PRODUCT", "");
                rowData[21] = UtilFunctions.getString(rs, "DESCRIPTION", "");
                rowData[22] = UtilFunctions.getString(rs, "HSN", "");
                rowData[23] = UtilFunctions.getString(rs, "UNIT", "");
                rowData[24] = UtilFunctions.getDouble(rs, "QTY", 0.00);
                rowData[25] = UtilFunctions.getDouble(rs, "ASSESSABLE_VALUE", 0.00);
                rowData[26] = UtilFunctions.getString(rs, "TAX_RATE", "");
                rowData[27] = UtilFunctions.getDouble(rs, "CGST_AMOUNT", 0.00);
                rowData[28] = UtilFunctions.getDouble(rs, "SGST_AMOUNT", 0.00);
                rowData[29] = UtilFunctions.getDouble(rs, "IGST_AMOUNT", 0.00);
                rowData[30] = UtilFunctions.getDouble(rs, "CESS_AMOUNT", 0.00);
                rowData[31] = UtilFunctions.getString(rs, "TRANS_MODE", "");
                rowData[32] = UtilFunctions.getString(rs, "DISTANCE_LEVEL_KM", "");
                rowData[33] = UtilFunctions.getString(rs, "TRANSPORTER_NAME", "");
                rowData[34] = UtilFunctions.getString(rs, "TRANSPORTER_GSTIN_ID", "");
                rowData[35] = UtilFunctions.getString(rs, "TRANSPORTER_DOC_NO", "");

                String TransDt = rs.getString("TRANSPORTER_DATE");
                if (TransDt.equals("") || TransDt == null || TransDt.equals("0000-00-00")) {
                    rowData[36] = "";
                } else {
                    rowData[36] = df.format(rs.getDate("TRANSPORTER_DATE"));
                }

                rowData[37] = UtilFunctions.getString(rs, "VEHICLE_NO", "");
                rowData[38] = UtilFunctions.getString(rs, "ERROR_LIST", "");

                DataModelEWB.addRow(rowData);
                rs.next();
            }
            rs.close();

        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }

    }

    private void EWAYDataProcess() {

        String SQL1 = "DELETE FROM DINESHMILLS.D_SAL_EWAY_REPORT WHERE DOC_DATE >= DATE_SUB(NOW() ,INTERVAL 4 DAY) ";
        System.out.println("SQL1 = " + SQL1);
        data.Execute(SQL1);

        String SQL2 = "TRUNCATE TABLE DINESHMILLS.TMP_SAL_EWAY_REPORT ";
        System.out.println("SQL2 = " + SQL2);
        data.Execute(SQL2);

        String SQL3 = "INSERT INTO DINESHMILLS.TMP_SAL_EWAY_REPORT ";
        SQL3 += "(SUPPLY_TYPE,SUB_TYPE,DOC_TYPE,INVOICE_TYPE,DOC_NO,DOC_DATE,PARTY_CODE,IGST_PER,CGST_PER,SGST_PER,IGST_AMOUNT,CGST_AMOUNT,SGST_AMOUNT,CESS_AMOUNT,ASSESSABLE_VALUE,APPROVED,CANCELLED,FROM_OTHER_PARTY_NAME,FROM_GSTIN,FROM_ADDRESS1,FROM_ADDRESS2,FROM_PLACE,FROM_PINCODE,FROM_STATE) ";
        SQL3 += "(SELECT 'Outward','Supply','Tax Invoice',INVOICE_TYPE,INVOICE_NO,INVOICE_DATE,PARTY_CODE,IGST_PER,CGST_PER,SGST_PER,IGST_AMT,CGST_AMT,SGST_AMT,NET_AMOUNT,EXCISABLE_VALUE,APPROVED,CANCELLED,'SHRI DINESH MILLS LIMITED','24AADCS3115Q1Z8','PO BOX NO 2501','PADRA ROAD AKOTA','VADODARA','390020','GUJARAT' ";
        SQL3 += "FROM DINESHMILLS.D_SAL_INVOICE_HEADER WHERE INVOICE_DATE >= '2018-01-01' ";
        SQL3 += "AND CONCAT(INVOICE_NO,INVOICE_DATE)  NOT IN ( SELECT CONCAT(DOC_NO,DOC_DATE)  FROM DINESHMILLS.D_SAL_EWAY_REPORT)) ";
        System.out.println("SQL3 = " + SQL3);
        data.Execute(SQL3);

        String SQL4 = "UPDATE DINESHMILLS.TMP_SAL_EWAY_REPORT A ,DINESHMILLS.D_SAL_PARTY_MASTER B ";
        SQL4 += "SET A.TO_OTHER_PARTY_NAME = B.PARTY_NAME, ";
        SQL4 += "A.TO_GSTIN = LTRIM(RTRIM(B.GSTIN_NO)), ";
        SQL4 += "A.TO_ADDRESS1= B.ADDRESS1, ";
        SQL4 += "A.TO_ADDRESS2 =B.ADDRESS2, ";
        SQL4 += "A.TO_PLACE= B.DISPATCH_STATION, ";
        SQL4 += "A.TO_STATE = B.STATE, ";
        SQL4 += "A.TO_PINCODE =B.PINCODE, ";
        SQL4 += "A.DISTANCE_LEVEL_KM = B.DISTANCE_KM, ";
        SQL4 += "A.TRANS_MODE ='Road', ";
//        SQL4 += "A.CESS_AMOUNT =0, ";
        SQL4 += "A.TRANSPORTER_ID = B.TRANSPORTER_ID ";
        SQL4 += "WHERE A.PARTY_CODE = B.PARTY_CODE ";
        System.out.println("SQL4 = " + SQL4);
        data.Execute(SQL4);

        String SQL5 = "UPDATE DINESHMILLS.TMP_SAL_EWAY_REPORT A ,DINESHMILLS.D_SAL_TRANSPORTER_MASTER B ";
        SQL5 += "SET A.TRANSPORTER_NAME = B.TRANSPORTER_NAME ,A.TRANSPORTER_GSTIN_ID = B.GSTIN_NO ";
        SQL5 += "WHERE A.TRANSPORTER_ID= B.TRANSPORTER_ID ";
        System.out.println("SQL5 = " + SQL5);
        data.Execute(SQL5);

        String SQL6 = "UPDATE DINESHMILLS.TMP_SAL_EWAY_REPORT SET MAIN_ACCOUNT_CODE = CASE WHEN INVOICE_TYPE =1 THEN 210027 WHEN INVOICE_TYPE =2 THEN 210010 WHEN INVOICE_TYPE =3 THEN 210072 END ";
        System.out.println("SQL6 = " + SQL6);
        data.Execute(SQL6);

        String SQL7 = "UPDATE DINESHMILLS.TMP_SAL_EWAY_REPORT SET TO_STATE ='ORISSA' WHERE TO_STATE ='ODISHA' ";
        System.out.println("SQL7 = " + SQL7);
        data.Execute(SQL7);

        String SQL8 = "UPDATE DINESHMILLS.TMP_SAL_EWAY_REPORT SET CGST_PER =0 ,SGST_PER =0 WHERE IGST_AMOUNT > 0 ";
        System.out.println("SQL8 = " + SQL8);
        data.Execute(SQL8);

        String SQL9 = "UPDATE DINESHMILLS.TMP_SAL_EWAY_REPORT SET IGST_PER =0 WHERE IGST_AMOUNT = 0";
        System.out.println("SQL9 = " + SQL9);
        data.Execute(SQL9);

        String SQL10 = "UPDATE DINESHMILLS.TMP_SAL_EWAY_REPORT SET TAX_RATE = CONCAT(SGST_PER,'+',CGST_PER,'+',IGST_PER,'+0+0')";
        System.out.println("SQL10 = " + SQL10);
        data.Execute(SQL10);

        String SQL11 = "UPDATE  DINESHMILLS.TMP_SAL_EWAY_REPORT E,FINANCE.D_SAL_GSTR_INVOICE_ERP  D ";
        SQL11 += "SET E.HSN = D.HSN_CODE, ";
        SQL11 += "E.ASSESSABLE_VALUE = ROUND(D.TAXABLE_VALUE,2) ";
        SQL11 += "WHERE D.INVOICE_NO = E.DOC_NO ";
        SQL11 += "AND D.INVOICE_DATE = E.DOC_DATE ";
        System.out.println("SQL11 = " + SQL11);
        data.Execute(SQL11);

        String SQL12 = "UPDATE DINESHMILLS.D_COM_HSN_SAC_MASTER H , DINESHMILLS.TMP_SAL_EWAY_REPORT E ";
        SQL12 += "SET PRODUCT = HSN_SAC_DESC, ";
        SQL12 += "DESCRIPTION = HSN_SAC_DESC ";
        SQL12 += "WHERE HSN_SAC_CODE = HSN ";
        SQL12 += "AND H.MAIN_ACCOUNT_CODE = E.MAIN_ACCOUNT_CODE ";
        System.out.println("SQL12 = " + SQL12);
        data.Execute(SQL12);

        String SQL13 = "UPDATE  DINESHMILLS.TMP_SAL_EWAY_REPORT E,PRODUCTION.FELT_SAL_INVOICE_HEADER H ";
        SQL13 += "SET UNIT = CASE WHEN RATE_UNIT ='MTR' THEN 'SQUARE METRE'  ELSE 'KILO GRAMS' END, ";
        SQL13 += "QTY = CASE WHEN RATE_UNIT ='MTR' THEN SQMTR  ELSE ACTUAL_WEIGHT  END ";
        SQL13 += "WHERE E.DOC_NO = H.INVOICE_NO ";
        SQL13 += "AND E.DOC_DATE = H.INVOICE_DATE ";
        SQL13 += "AND E.INVOICE_TYPE =2 ";
        System.out.println("SQL13 = " + SQL13);
        data.Execute(SQL13);

        String SQL14 = "UPDATE  DINESHMILLS.TMP_SAL_EWAY_REPORT E,DINESHMILLS.D_SAL_INVOICE_HEADER H ";
        SQL14 += "SET UNIT = 'NUMBERS/UNITS', ";
//        SQL14 += "QTY = TOTAL_NET_QTY ";
        SQL14 += "QTY = TOTAL_GROSS_QTY ";
        SQL14 += "WHERE E.DOC_NO = H.INVOICE_NO ";
        SQL14 += "AND E.DOC_DATE = H.INVOICE_DATE ";
        SQL14 += "AND E.INVOICE_TYPE =1 AND WAREHOUSE_CODE =4 ";
        System.out.println("SQL14 = " + SQL1);
        data.Execute(SQL14);

        String SQL15 = "UPDATE  DINESHMILLS.TMP_SAL_EWAY_REPORT E,DINESHMILLS.D_SAL_INVOICE_HEADER H ";
        SQL15 += "SET UNIT = 'METERS', ";
//        SQL15 += "QTY = ROUND(TOTAL_NET_QTY,2) ";
        SQL15 += "QTY = ROUND(TOTAL_GROSS_QTY,2) ";
        SQL15 += "WHERE E.DOC_NO = H.INVOICE_NO ";
        SQL15 += "AND E.DOC_DATE = H.INVOICE_DATE ";
        SQL15 += "AND E.INVOICE_TYPE =1 AND WAREHOUSE_CODE !=4 ";
        System.out.println("SQL15 = " + SQL15);
        data.Execute(SQL15);

        String SQL16 = "UPDATE  DINESHMILLS.TMP_SAL_EWAY_REPORT E,DINESHMILLS.D_SAL_INVOICE_HEADER H ";
        SQL16 += "SET UNIT = 'SQUARE METRE', ";
        SQL16 += "QTY = ROUND(TOTAL_SQ_MTR,2) ";
        SQL16 += "WHERE E.DOC_NO = H.INVOICE_NO ";
        SQL16 += "AND E.DOC_DATE = H.INVOICE_DATE ";
        SQL16 += "AND E.INVOICE_TYPE =3 ";
        System.out.println("SQL16 = " + SQL16);
        data.Execute(SQL16);

        String SQL17 = "INSERT INTO DINESHMILLS.D_SAL_EWAY_REPORT SELECT * FROM DINESHMILLS.TMP_SAL_EWAY_REPORT ";
        System.out.println("SQL17 = " + SQL17);
        data.Execute(SQL17);

    }

    private void GSTRDataProcess() {

        data.Execute("DELETE FROM FINANCE.D_SAL_GSTR_INVOICE_ERP WHERE INVOICE_DATE >= DATE_SUB(NOW(), INTERVAL 10 DAY) AND INPUT_TYPE NOT IN (2) ");

        data.Execute("TRUNCATE TABLE FINANCE.TMP_GSTR_INVOICE_ERP ");

        data.Execute("INSERT INTO FINANCE.TMP_GSTR_INVOICE_ERP (COMPANY_ID,INPUT_TYPE,PARTY_CODE,INVOICE_NO,INVOICE_DATE,GSTIN_NO,INVOICE_VALUE,IGST_PER,IGST_AMT,CGST_PER,CGST_AMT,SGST_PER,SGST_AMT,STATE_CODE,STATE_NAME,STATE_PIN_CODE,APPROVED,CANCELLED) SELECT 2,H.INVOICE_TYPE,H.PARTY_CODE,H.INVOICE_NO,H.INVOICE_DATE,GSTIN_NO,H.NET_AMOUNT,COALESCE(IGST_PER,0),COALESCE(IGST_AMT,0),COALESCE(CGST_PER,0) ,COALESCE(CGST_AMT,0),COALESCE(SGST_PER,0) ,COALESCE(SGST_AMT,0),STATE_GST_CODE,STATE,PINCODE,H.APPROVED,H.CANCELLED  FROM  DINESHMILLS.D_SAL_INVOICE_HEADER H,DINESHMILLS.D_SAL_PARTY_MASTER P WHERE H.INVOICE_DATE >= '2017-07-01'  AND INVOICE_TYPE IN (1,3) AND  INVOICE_NO NOT IN (SELECT INVOICE_NO FROM  FINANCE.D_SAL_GSTR_INVOICE_ERP ) AND P.PARTY_CODE = H.PARTY_CODE ");

        data.Execute("UPDATE FINANCE.TMP_GSTR_INVOICE_ERP E, FINANCE.D_SAL_GSTR_INVOICE C SET E.WH_CODE = C.WH_CODE, E.INVOICE_TYPE  = C.INVOICE_TYPE, E.ITEM_DESC = C.ITEM_DESC, E.GSTIN_NO= C.GSTIN_NO, E.HSN_CODE = C.HSN_CODE+0, E.TAXABLE_VALUE = C.TAXABLE_VALUE, E.PLACE_OF_SUPPLY = C.PLACE_OF_SUPPLY, E.RATE = C.RATE, E.REV_CHRG = C.REV_CHRG, E.E_COMM_GSTIN_NO  = C.E_COMM_GSTIN_NO WHERE E.INVOICE_NO = C.INVOICE_NO  AND E.PARTY_CODE = C.PARTY_CODE AND E.INVOICE_DATE = C.INVOICE_DATE AND E.INVOICE_VALUE= ROUND(C.INVOICE_VALUE+.0001,0) ");

        data.Execute("UPDATE FINANCE.D_SAL_GSTR_INVOICE_ERP E, FINANCE.D_SAL_GSTR_INVOICE C SET E.WH_CODE = C.WH_CODE, E.INVOICE_TYPE  = C.INVOICE_TYPE, E.ITEM_DESC = C.ITEM_DESC, E.GSTIN_NO= C.GSTIN_NO, E.HSN_CODE = C.HSN_CODE+0, E.TAXABLE_VALUE = C.TAXABLE_VALUE, E.PLACE_OF_SUPPLY = C.PLACE_OF_SUPPLY, E.RATE = C.RATE, E.REV_CHRG = C.REV_CHRG, E.E_COMM_GSTIN_NO  = C.E_COMM_GSTIN_NO WHERE E.INVOICE_NO = C.INVOICE_NO AND E.PARTY_CODE = C.PARTY_CODE AND E.INVOICE_DATE = C.INVOICE_DATE AND E.INVOICE_VALUE= ROUND(C.INVOICE_VALUE+.0001,0) AND E.TAXABLE_VALUE =0 ");

        data.Execute("UPDATE FINANCE.TMP_GSTR_INVOICE_ERP SET IGST_PER =0 WHERE IGST_AMT =0 ");
        data.Execute("UPDATE FINANCE.TMP_GSTR_INVOICE_ERP SET CGST_PER =0 WHERE CGST_AMT =0 ");
        data.Execute("UPDATE FINANCE.TMP_GSTR_INVOICE_ERP SET SGST_PER =0 WHERE SGST_AMT =0 ");

        data.Execute("INSERT INTO FINANCE.D_SAL_GSTR_INVOICE_ERP SELECT * FROM FINANCE.TMP_GSTR_INVOICE_ERP ");

    }
    
    private void getDeptId() {
        if (EITLERPGLOBAL.gUserDeptID == 76 || EITLERPGLOBAL.gUserDeptID == 4 || EITLERPGLOBAL.gUserDeptID == 0) {
            btnSendMail.setVisible(true);
        } else {
            btnSendMail.setVisible(false);
        }
    }

}
