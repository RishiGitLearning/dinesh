 /*
  * frmTemplate.java
  *
  * Created on April 7, 2004, 3:10 PM
  */


package EITLERP.Purchase;

/**
 *
 * @author  nhpatel
 */

import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.*;
import EITLERP.Stores.*;
import org.nfunk.jep.*;
import org.nfunk.jep.type.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import java.text.*;
import javax.swing.text.*;
import java.sql.*;
import java.net.*;

/*<APPLET CODE=frmQuotApproval.class HEIGHT=528 WIDTH=775></APPLET>*/
/**
 *
 */
public class frmQuotApproval extends javax.swing.JApplet {
    
    private int EditMode=0;
    
    private EITLTableModel DataModelH=new EITLTableModel();
    private EITLTableModel DataModelL=new EITLTableModel();
    private EITLTableModel DataModelC=new EITLTableModel();
    private EITLTableCellRenderer Renderer=new EITLTableCellRenderer();
    private EITLTableModel DataModelA;
    
    private HashMap colVariables=new HashMap();
    private HashMap colVariables_H=new HashMap();
    clsTaxColumn ObjTax=new clsTaxColumn();
    clsColumn ObjColumn=new clsColumn();
    
    private JEP myParser=new JEP();
    private boolean Updating=false;
    private boolean Updating_H=false;
    private boolean DoNotEvaluate=false;
    
    private clsQuotApproval ObjApproval;
    
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromID=0;
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbStatusModel;
    private EITLComboModel cmbItemModel;
    private EITLComboModel cmbItemCModel;
    
    private HashMap colItems=new HashMap();
    
    private boolean HistoryView=false;
    private String theDocNo="";
    private EITLTableModel DataModelHS;
    
    public frmPendingApprovals frmPA;
    
    String cellLastValue="";
    
    /** Creates new form frmTemplate */
    public void init() {
        System.gc();
        setSize(775,590);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        ObjTax.LoadData((int)EITLERPGLOBAL.gCompanyID);
        ObjColumn.LoadData((int)EITLERPGLOBAL.gCompanyID);
        
        FormatGrid();
        
        GenerateCombos();
        ObjApproval=new clsQuotApproval();
        SetMenuForRights();
        
        if(getName().equals("Link")) {
            
        }
        else {
            if(ObjApproval.LoadData(EITLERPGLOBAL.gCompanyID)) {
                ObjApproval.MoveLast();
                DisplayData();
                
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+ObjApproval.LastError);
            }
        }
        
        txtAuditRemarks.setVisible(false);
        
        DataModelL.TableReadOnly(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        Old_Report = new javax.swing.JMenuItem();
        New_Report = new javax.swing.JMenuItem();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        cmdAmend = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        chkCancelled = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        txtInquiryNo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtInquiryDate = new javax.swing.JTextField();
        cmdNext1 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableL = new javax.swing.JTable();
        cmdRetrieve = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        cmdShow = new javax.swing.JButton();
        cmbItem = new javax.swing.JComboBox();
        lblRevNo = new javax.swing.JLabel();
        cmdShowInquiry = new javax.swing.JButton();
        cmdShowQuotation = new javax.swing.JButton();
        cmdShowLastPO = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        cmbItemC = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableC = new javax.swing.JTable();
        cmdDisplay = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtIndentDesc = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        Tab3 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack3 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        Tab4 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        Old_Report.setText("Non GST");
        Old_Report.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Old_ReportActionPerformed(evt);
            }
        });
        jPopupMenu2.add(Old_Report);

        New_Report.setText("GST");
        New_Report.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                New_ReportActionPerformed(evt);
            }
        });
        jPopupMenu2.add(New_Report);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save Record");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel Record");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find Record");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        cmdAmend.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cmdAmend.setText("Amend");
        cmdAmend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAmendActionPerformed(evt);
            }
        });
        ToolBar.add(cmdAmend);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText(" SUMMARY");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 804, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tab1MouseClicked(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel2.setText("Approval No.");
        Tab1.add(jLabel2);
        jLabel2.setBounds(26, 18, 85, 17);

        txtDocNo.setBackground(new java.awt.Color(204, 204, 255));
        txtDocNo.setEditable(false);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(114, 14, 99, 27);

        jLabel3.setText("Date");
        Tab1.add(jLabel3);
        jLabel3.setBounds(254, 18, 31, 17);

        txtDocDate.setName("APPROVAL_DATE"); // NOI18N
        txtDocDate.setNextFocusableComponent(txtInquiryNo);
        txtDocDate.setEnabled(false);
        txtDocDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDocDateFocusGained(evt);
            }
        });
        Tab1.add(txtDocDate);
        txtDocDate.setBounds(290, 16, 100, 27);

        chkCancelled.setText("Cancelled");
        chkCancelled.setEnabled(false);
        chkCancelled.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                chkCancelledFocusGained(evt);
            }
        });
        Tab1.add(chkCancelled);
        chkCancelled.setBounds(656, 8, 86, 22);

        jLabel4.setText("Inquiry No.");
        Tab1.add(jLabel4);
        jLabel4.setBounds(32, 50, 70, 17);

        txtInquiryNo.setName("INQUIRY_NO"); // NOI18N
        txtInquiryNo.setNextFocusableComponent(txtRemarks);
        txtInquiryNo.setEnabled(false);
        txtInquiryNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInquiryNoActionPerformed(evt);
            }
        });
        txtInquiryNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtInquiryNoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtInquiryNoFocusLost(evt);
            }
        });
        txtInquiryNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtInquiryNoKeyPressed(evt);
            }
        });
        Tab1.add(txtInquiryNo);
        txtInquiryNo.setBounds(114, 46, 99, 27);

        jLabel6.setText("Date");
        Tab1.add(jLabel6);
        jLabel6.setBounds(256, 50, 31, 17);

        txtInquiryDate.setEditable(false);
        txtInquiryDate.setEnabled(false);
        txtInquiryDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtInquiryDateFocusGained(evt);
            }
        });
        Tab1.add(txtInquiryDate);
        txtInquiryDate.setBounds(290, 48, 100, 27);

        cmdNext1.setText("Next >>");
        cmdNext1.setNextFocusableComponent(txtDocDate);
        cmdNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNext1);
        cmdNext1.setBounds(650, 394, 91, 29);

        jLabel17.setText("Status");
        Tab1.add(jLabel17);
        jLabel17.setBounds(416, 18, 46, 17);

        cmbStatus.setName("STATUS"); // NOI18N
        cmbStatus.setEnabled(false);
        Tab1.add(cmbStatus);
        cmbStatus.setBounds(466, 16, 94, 27);

        TableL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableL.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TableLFocusLost(evt);
            }
        });
        TableL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableLKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(TableL);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(6, 160, 732, 227);

        cmdRetrieve.setText("Retrieve Quotation Details");
        cmdRetrieve.setName("INQUIRY_NO"); // NOI18N
        cmdRetrieve.setEnabled(false);
        cmdRetrieve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRetrieveActionPerformed(evt);
            }
        });
        Tab1.add(cmdRetrieve);
        cmdRetrieve.setBounds(533, 91, 204, 29);

        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel5);
        jPanel5.setBounds(6, 121, 734, 4);

        jLabel5.setText("ITEM");
        Tab1.add(jLabel5);
        jLabel5.setBounds(16, 134, 36, 17);

        cmdShow.setMnemonic('S');
        cmdShow.setText("Show List");
        cmdShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowActionPerformed(evt);
            }
        });
        Tab1.add(cmdShow);
        cmdShow.setBounds(619, 129, 116, 29);
        Tab1.add(cmbItem);
        cmbItem.setBounds(58, 130, 554, 27);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(215, 16, 37, 17);

        cmdShowInquiry.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        cmdShowInquiry.setText("Show Inquiry");
        cmdShowInquiry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowInquiryActionPerformed(evt);
            }
        });
        Tab1.add(cmdShowInquiry);
        cmdShowInquiry.setBounds(236, 391, 106, 26);

        cmdShowQuotation.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        cmdShowQuotation.setText("Show Quot.");
        cmdShowQuotation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowQuotationActionPerformed(evt);
            }
        });
        Tab1.add(cmdShowQuotation);
        cmdShowQuotation.setBounds(346, 391, 106, 26);

        cmdShowLastPO.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        cmdShowLastPO.setText("Show Last PO");
        cmdShowLastPO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowLastPOActionPerformed(evt);
            }
        });
        Tab1.add(cmdShowLastPO);
        cmdShowLastPO.setBounds(455, 391, 106, 26);

        jLabel8.setText("Remarks");
        Tab1.add(jLabel8);
        jLabel8.setBounds(32, 90, 59, 17);

        txtRemarks.setName("INQUIRY_NO"); // NOI18N
        txtRemarks.setNextFocusableComponent(cmdRetrieve);
        txtRemarks.setEnabled(false);
        Tab1.add(txtRemarks);
        txtRemarks.setBounds(113, 87, 353, 22);

        jButton2.setText("...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        Tab1.add(jButton2);
        jButton2.setBounds(469, 88, 31, 21);

        Tab.addTab("Header ", Tab1);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(null);
        jPanel2.add(cmbItemC);
        cmbItemC.setBounds(56, 16, 587, 27);

        jLabel7.setText("ITEM");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(14, 20, 36, 17);

        TableC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(TableC);

        jPanel2.add(jScrollPane4);
        jScrollPane4.setBounds(9, 82, 732, 332);

        cmdDisplay.setText("Display ");
        cmdDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDisplayActionPerformed(evt);
            }
        });
        jPanel2.add(cmdDisplay);
        cmdDisplay.setBounds(650, 17, 62, 29);

        jLabel1.setText("Indent Description");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(9, 55, 128, 17);

        txtIndentDesc.setEnabled(false);
        jPanel2.add(txtIndentDesc);
        txtIndentDesc.setBounds(135, 51, 507, 22);

        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);
        jButton1.setBounds(648, 52, 34, 22);

        Tab.addTab("Comparison View", jPanel2);

        Tab3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab3FocusGained(evt);
            }
        });
        Tab3.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab3.add(jLabel31);
        jLabel31.setBounds(16, 18, 66, 17);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        Tab3.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 14, 184, 27);

        jLabel32.setText("From");
        Tab3.add(jLabel32);
        jLabel32.setBounds(20, 52, 56, 17);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab3.add(txtFrom);
        txtFrom.setBounds(86, 50, 182, 27);

        jLabel35.setText("Remarks");
        Tab3.add(jLabel35);
        jLabel35.setBounds(20, 82, 62, 17);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab3.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 78, 518, 27);

        jLabel36.setText("Your Action  ");
        Tab3.add(jLabel36);
        jLabel36.setBounds(8, 124, 76, 17);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 169, 22);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab3.add(jPanel6);
        jPanel6.setBounds(88, 120, 182, 100);

        jLabel33.setText("Send To");
        Tab3.add(jLabel33);
        jLabel33.setBounds(18, 228, 60, 17);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab3.add(cmbSendTo);
        cmbSendTo.setBounds(84, 224, 184, 27);

        jLabel34.setText("Remarks");
        Tab3.add(jLabel34);
        jLabel34.setBounds(16, 264, 60, 17);

        txtToRemarks.setNextFocusableComponent(cmdBack3);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab3.add(txtToRemarks);
        txtToRemarks.setBounds(84, 260, 516, 27);

        cmdBack3.setText("<<Back");
        cmdBack3.setNextFocusableComponent(cmbHierarchy);
        cmdBack3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack3ActionPerformed(evt);
            }
        });
        Tab3.add(cmdBack3);
        cmdBack3.setBounds(634, 338, 102, 29);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab3.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(609, 77, 43, 21);

        Tab.addTab("Approval", Tab3);

        Tab4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab4.setLayout(null);

        jLabel26.setText("Document Approval Status");
        Tab4.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 17);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        Tab4.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 654, 144);

        jLabel9.setText("Document Update History");
        Tab4.add(jLabel9);
        jLabel9.setBounds(13, 189, 182, 17);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        Tab4.add(jScrollPane3);
        jScrollPane3.setBounds(13, 205, 505, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        Tab4.add(cmdViewHistory);
        cmdViewHistory.setBounds(531, 205, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        Tab4.add(cmdNormalView);
        cmdNormalView.setBounds(531, 236, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        Tab4.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(531, 268, 132, 24);

        txtAuditRemarks.setEnabled(false);
        Tab4.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(536, 309, 129, 27);

        Tab.addTab("Status", Tab4);

        getContentPane().add(Tab);
        Tab.setBounds(4, 68, 752, 452);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(6, 524, 750, 22);
    }// </editor-fold>//GEN-END:initComponents

    private void txtInquiryNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInquiryNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInquiryNoActionPerformed
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private void txtInquiryNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInquiryNoFocusLost
        // TODO add your handling code here:
        try {
            clsInquiry ObjInquiry=new clsInquiry();
            clsInquiry ObjNewInquiry=(clsInquiry)ObjInquiry.getObject(EITLERPGLOBAL.gCompanyID,txtInquiryNo.getText());
            txtInquiryDate.setText(EITLERPGLOBAL.formatDate((String)ObjNewInquiry.getAttribute("INQUIRY_DATE").getObj()));
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_txtInquiryNoFocusLost
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtIndentDesc;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void cmdAmendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAmendActionPerformed
        // TODO add your handling code here:
        if(EditMode==0) {
            Amend();
        }
    }//GEN-LAST:event_cmdAmendActionPerformed
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
        
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void cmdDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDisplayActionPerformed
        // TODO add your handling code here:
        DisplayComparison(EITLERPGLOBAL.getCombostrCode(cmbItemC));
    }//GEN-LAST:event_cmdDisplayActionPerformed
    
    private void cmdShowInquiryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowInquiryActionPerformed
        // TODO add your handling code here:
        try {
            String DocNo=DataModelL.getValueByVariable("INQUIRY_NO", TableL.getSelectedRow());
            if(!DocNo.trim().equals("")) {
                AppletFrame aFrame=new AppletFrame("Inquiry");
                aFrame.startAppletEx("EITLERP.Purchase.FrmInquiry","Inquiry");
                FrmInquiry ObjDoc=(FrmInquiry) aFrame.ObjApplet;
                ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
            }
            else {
                JOptionPane.showMessageDialog(null,"Inquiry no. not specified");
            }
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_cmdShowInquiryActionPerformed
    
    private void cmdShowQuotationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowQuotationActionPerformed
        // TODO add your handling code here:
        try {
            String DocNo=DataModelL.getValueByVariable("QUOT_ID", TableL.getSelectedRow());
            
            if(!DocNo.trim().equals("")) {
                AppletFrame aFrame=new AppletFrame("Quotation");
                aFrame.startAppletEx("EITLERP.Purchase.frmQuotation","Quotation");
                frmQuotation ObjDoc=(frmQuotation) aFrame.ObjApplet;
                ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
            }
            else {
                JOptionPane.showMessageDialog(null,"Quotation no. not specified");
            }
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_cmdShowQuotationActionPerformed
    
    private void cmdShowLastPOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowLastPOActionPerformed
        // TODO add your handling code here:
        try {
            String DocNo=DataModelL.getValueByVariable("LAST_PO_NO", TableL.getSelectedRow());
            
            if(!DocNo.trim().equals("")) {
                AppletFrame aFrame=new AppletFrame("Purchase Order");
                aFrame.startAppletEx("EITLERP.Purchase.frmPOGen","Purchase Order");
                frmPOGen ObjDoc=(frmPOGen) aFrame.ObjApplet;
                ObjDoc.POType=clsPOGen.getPOType(EITLERPGLOBAL.gCompanyID,DocNo);
                ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
            }
            else {
                JOptionPane.showMessageDialog(null,"Last P.O. No. not found");
            }
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_cmdShowLastPOActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjApproval.LoadData(EITLERPGLOBAL.gCompanyID);
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo=txtDocNo.getText();
        ObjApproval.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void cmdShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowActionPerformed
        // TODO add your handling code here:
        String strItemID=EITLERPGLOBAL.getCombostrCode(cmbItem);
        GenerateGrid(strItemID);
    }//GEN-LAST:event_cmdShowActionPerformed
    
    private void cmdRetrieveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRetrieveActionPerformed
        // TODO add your handling code here:
        ShowMessage("Retrieving Quotation details. Please wait ...");
        
        HashMap List=new HashMap();
        clsQuotation ObjQuot=new clsQuotation();
        ObjQuot.LoadData(EITLERPGLOBAL.gCompanyID);
        
        if(txtInquiryNo.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter the inquiry no.");
            return;
        }
        else {
            ObjApproval.colItems.clear();
            ObjApproval.colItems=ObjQuot.getQuotItemList(EITLERPGLOBAL.gCompanyID, txtInquiryNo.getText());
            
            for(int i=1;i<=ObjApproval.colItems.size();i++) {
                
                clsQuotApprovalItem ObjItem=(clsQuotApprovalItem) ObjApproval.colItems.get(Integer.toString(i));
                ObjItem.setAttribute("APPROVED",false);
                ObjItem.setAttribute("REMARKS","");
                ObjItem.setAttribute("MAIN_SR_NO",i);
            }
            
            //Generate Unique Item List
            colItems.clear();
            int cnt=0;
            for(int i=1;i<=ObjApproval.colItems.size();i++) {
                clsQuotApprovalItem ObjItem =(clsQuotApprovalItem) ObjApproval.colItems.get(Integer.toString(i));
                String strItemID=(String)ObjItem.getAttribute("ITEM_CODE").getObj();
                
                boolean found=false;
                for(int j=1;j<=colItems.size();j++) {
                    String lItemID=(String)colItems.get(Integer.toString(j));
                    if(strItemID.equals(lItemID)) {
                        found=true;
                    }
                }
                
                if(!found) {
                    cnt++;
                    //Add it to collection
                    colItems.put(Integer.toString(cnt),strItemID);
                }
            }
            
            //--- Generate Type Combo ------//
            cmbItemModel=new EITLComboModel();
            cmbItem.removeAllItems();
            cmbItem.setModel(cmbItemModel);
            
            for(int i=1;i<=colItems.size();i++) {
                String strItemID=(String)colItems.get(Integer.toString(i));
                String strItemName=clsItem.getItemName(EITLERPGLOBAL.gCompanyID,strItemID);
                
                ComboData aData=new ComboData();
                aData.strCode=strItemID;
                aData.Text=strItemID+" - "+strItemName;
                cmbItemModel.addElement(aData);
            }
            
            cmbItemCModel=new EITLComboModel();
            cmbItemC.removeAllItems();
            cmbItemC.setModel(cmbItemCModel);
            
            for(int i=1;i<=colItems.size();i++) {
                String strItemID=(String)colItems.get(Integer.toString(i));
                String strItemName=clsItem.getItemName(EITLERPGLOBAL.gCompanyID,strItemID);
                
                ComboData aData=new ComboData();
                aData.strCode=strItemID;
                aData.Text=strItemID+" "+strItemName;
                cmbItemCModel.addElement(aData);
            }
            
            
        }
        
        FormatGrid();
        
        ShowMessage("Ready");
    }//GEN-LAST:event_cmdRetrieveActionPerformed
    
    private void GenerateGrid(String pItemID) {
        int RowCnt=0;
        
        //Before Clearing the Grid. Take the Previous Values
        if(TableL.getRowCount()>0) {
            for(int i=0;i<TableL.getRowCount();i++) {
                //Get Main Sr. No.
                int MainSrNo=Integer.parseInt(DataModelL.getValueByVariable("MAIN_SR_NO", i));
                
                if(MainSrNo>0) {
                    //Get the Object
                    clsQuotApprovalItem ObjItem=(clsQuotApprovalItem)ObjApproval.colItems.get(Integer.toString(MainSrNo));
                    
                    //Now Read the Previous Values
                    String strRemarks="";
                    if(DataModelL.getValueByVariable("REMARKS", i)!=null) {
                        strRemarks=DataModelL.getValueByVariable("REMARKS", i);
                    }
                    
                    boolean blnVal=DataModelL.getBoolValueByVariable("APPROVED", i);
                    
                    
                    //Set this to Object
                    ObjItem.setAttribute("REMARKS",strRemarks);
                    ObjItem.setAttribute("APPROVED",blnVal);
                    
                    //Put it agian to main collection
                    ObjApproval.colItems.put(Integer.toString(MainSrNo),ObjItem);
                }
            }
        }
        
        
        //Clear the Grid
        FormatGrid();
        
        for(int i=1;i<=ObjApproval.colItems.size();i++) {
            //Get the Object
            clsQuotApprovalItem ObjItem=(clsQuotApprovalItem)ObjApproval.colItems.get(Integer.toString(i));
            
            String strItemID=(String)ObjItem.getAttribute("ITEM_CODE").getObj();
            
            if(strItemID.equals(pItemID)) //ID Matches
            {
                Object[] rowData=new Object[1];
                DataModelL.addRow(rowData);
                int NewRow=TableL.getRowCount()-1;
                
                RowCnt++;
                
                DataModelL.setValueByVariable("SR_NO",Integer.toString(RowCnt),NewRow);
                DataModelL.setValueByVariable("MAIN_SR_NO",Integer.toString((int)ObjItem.getAttribute("MAIN_SR_NO").getVal()),NewRow);
                DataModelL.setValueByVariable("SUPP_ID",(String)ObjItem.getAttribute("SUPP_ID").getObj(),NewRow);
                DataModelL.setValueByVariable("MAKE",(String)ObjItem.getAttribute("MAKE").getObj(),NewRow);
                DataModelL.setValueByVariable("PRICE_LIST_NO",(String)ObjItem.getAttribute("PRICE_LIST_NO").getObj(),NewRow);
                //String SuppName=clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID,(String)ObjItem.getAttribute("SUPP_ID").getObj());
                int PartyID=Integer.parseInt((String)ObjItem.getAttribute("SUPP_ID").getObj());
                String SuppName=clsParty.getPartyNameByPartyID(EITLERPGLOBAL.gCompanyID, PartyID);
                DataModelL.setValueByVariable("SUPP_NAME",SuppName,NewRow);
                DataModelL.setValueByVariable("QTY",Double.toString(ObjItem.getAttribute("QTY").getVal()),NewRow);
                DataModelL.setValueByVariable("RATE",Double.toString(ObjItem.getAttribute("RATE").getVal()),NewRow);
                DataModelL.setValueByVariable("NET_AMOUNT",Double.toString(ObjItem.getAttribute("NET_AMOUNT").getVal()),NewRow);
                DataModelL.setValueByVariable("TAX_AMOUNT",Double.toString(ObjItem.getAttribute("TAX_AMOUNT").getVal()),NewRow);
                DataModelL.setValueByVariable("LAND_COST",Double.toString(ObjItem.getAttribute("LAND_COST").getVal()),NewRow);
                DataModelL.setValueByVariable("REMARKS",(String)ObjItem.getAttribute("REMARKS").getObj(),NewRow);
                DataModelL.setValueByVariable("APPROVED",Boolean.valueOf(ObjItem.getAttribute("APPROVED").getBool()),NewRow);
                DataModelL.setValueByVariable("ITEM_CODE",(String)ObjItem.getAttribute("ITEM_CODE").getObj(),NewRow);
                DataModelL.setValueByVariable("HSN_SAC_CODE",clsItem.getHsnSacCode(2, (String)ObjItem.getAttribute("ITEM_CODE").getObj()),NewRow);
                DataModelL.setValueByVariable("MAKE",(String)ObjItem.getAttribute("MAKE").getObj(),NewRow);
                DataModelL.setValueByVariable("INQUIRY_NO",(String)ObjItem.getAttribute("INQUIRY_NO").getObj(),NewRow);
                DataModelL.setValueByVariable("INQUIRY_SR_NO",Integer.toString((int)ObjItem.getAttribute("INQUIRY_SR_NO").getVal()),NewRow);
                DataModelL.setValueByVariable("QUOT_ID",(String)ObjItem.getAttribute("QUOT_ID").getObj(),NewRow);
                DataModelL.setValueByVariable("QUOT_SR_NO",Integer.toString((int)ObjItem.getAttribute("QUOT_SR_NO").getVal()),NewRow);
                DataModelL.setValueByVariable("LAST_PO_NO",(String)ObjItem.getAttribute("LAST_PO_NO").getObj(),NewRow);
                DataModelL.setValueByVariable("LAST_PO_DATE",EITLERPGLOBAL.formatDate((String)ObjItem.getAttribute("LAST_PO_DATE").getObj()),NewRow);
                DataModelL.setValueByVariable("LAST_LANDED_RATE",Double.toString(ObjItem.getAttribute("LAST_LANDED_RATE").getVal()),NewRow);
                DataModelL.setValueByVariable("LAST_PO_RATE",Double.toString(ObjItem.getAttribute("LAST_PO_RATE").getVal()),NewRow);
            }
        }
    }
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the user to whome document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void chkCancelledFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chkCancelledFocusGained
        // TODO add your handling code here:
        ShowMessage("Shows cancel status of this document");
    }//GEN-LAST:event_chkCancelledFocusGained
    
    private void txtInquiryDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInquiryDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Shows date of PO selected");
    }//GEN-LAST:event_txtInquiryDateFocusGained
    
    private void txtInquiryNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInquiryNoFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter PO no. Press F1 for the list");
    }//GEN-LAST:event_txtInquiryNoFocusGained
    
    private void txtDocDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter date in DD/MM/YYYY");
    }//GEN-LAST:event_txtDocDateFocusGained
    
    private void Tab3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab3FocusGained
        // TODO add your handling code here:
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab3FocusGained
    
    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        // TODO add your handling code here:
        txtDocDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained
    
    private void cmdBack3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack3ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack3ActionPerformed
    
    private void cmdNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext1ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext1ActionPerformed
    
    private void Tab1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tab1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Tab1MouseClicked
    
    private void txtInquiryNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInquiryNoKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==112) //F1 key pressed
        {
            String PONo="";
            LOV aList=new LOV();
            
            aList.SQL="SELECT INQUIRY_NO,DATE_FORMAT(INQUIRY_DATE,'%d/%m/%Y') AS INQUIRY_DATE from D_PUR_INQUIRY_HEADER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=1;
            
            if(aList.ShowLOV()) {
                clsInquiry ObjInquiry=new clsInquiry();
                clsInquiry ObjNewInquiry=(clsInquiry)ObjInquiry.getObject(EITLERPGLOBAL.gCompanyID,aList.ReturnVal);
                txtInquiryNo.setText(aList.ReturnVal);
                txtInquiryDate.setText(EITLERPGLOBAL.formatDate((String)ObjNewInquiry.getAttribute("INQUIRY_DATE").getObj()));
            }
        }
    }//GEN-LAST:event_txtInquiryNoKeyPressed
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(true);
        OpgHold.setSelected(false);
        
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgFinal.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(true);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);
        SetupApproval();
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjApproval.Close();
        ObjColumn.Close();
        ObjTax.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
       // PreviewReport();
       // JOptionPane.showMessageDialog(null, "Report Called");
        jPopupMenu2.show(cmdPreview, 0, 30); 
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        Delete();
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void TableLFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableLFocusLost
                                                                    }//GEN-LAST:event_TableLFocusLost
    
    private void TableLKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableLKeyPressed
        
        
        
                    }//GEN-LAST:event_TableLKeyPressed
    
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        //Set Default Send to User
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void Old_ReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Old_ReportActionPerformed
        // TODO add your handling code here:
       // JOptionPane.showMessageDialog(null, "Old Report");
         PreviewReport();
    }//GEN-LAST:event_Old_ReportActionPerformed

    private void New_ReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_New_ReportActionPerformed
        // TODO add your handling code here:
        //  JOptionPane.showMessageDialog(null, "New Report");
         PreviewReport_GST();
    }//GEN-LAST:event_New_ReportActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem New_Report;
    private javax.swing.JMenuItem Old_Report;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab3;
    private javax.swing.JPanel Tab4;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableC;
    private javax.swing.JTable TableHS;
    private javax.swing.JTable TableL;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkCancelled;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbItem;
    private javax.swing.JComboBox cmbItemC;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbStatus;
    private javax.swing.JButton cmdAmend;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack3;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdDisplay;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRetrieve;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShow;
    private javax.swing.JButton cmdShowInquiry;
    private javax.swing.JButton cmdShowLastPO;
    private javax.swing.JButton cmdShowQuotation;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtIndentDesc;
    private javax.swing.JTextField txtInquiryDate;
    private javax.swing.JTextField txtInquiryNo;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    
    private void DisplayComparison(String pItemID) {
        try {
            Connection tmpConn;
            Statement stPO=null,stQuot=null;
            ResultSet rsPO=null,rsQuot=null,rsTmp=null;
            String InquiryNo="",IndentDesc="";
            int InquirySrNo=0;
            
            tmpConn=data.getConn();
            
            //Format the Comparison Grid
            DataModelC=new EITLTableModel();
            
            TableC.removeAll();
            TableC.setModel(DataModelC);
            
            //Set the table Readonly
            DataModelC.TableReadOnly(true);
            
            //Add Default Column
            DataModelC.addColumn("Suppliers");
            
            TableC.setAutoResizeMode(TableC.AUTO_RESIZE_OFF);
            
            for(int i=1;i<=ObjApproval.colItems.size();i++) {
                //Filter by Item
                clsQuotApprovalItem ObjItem=(clsQuotApprovalItem)ObjApproval.colItems.get(Integer.toString(i));
                
                String ItemID=(String)ObjItem.getAttribute("ITEM_CODE").getObj();
                
                if(ItemID.trim().equals(pItemID)) {
                    //Add this Supplier to Grid
                    String SuppID=(String)ObjItem.getAttribute("SUPP_ID").getObj();
                    int PartyID=Integer.parseInt(SuppID);
                    String SuppName=clsParty.getPartyNameByPartyID(EITLERPGLOBAL.gCompanyID,PartyID);
                    
                    DataModelC.addColumn(SuppID+"-"+SuppName);
                    
                    InquiryNo=(String)ObjItem.getAttribute("INQUIRY_NO").getObj();
                    InquirySrNo=(int)ObjItem.getAttribute("INQUIRY_SR_NO").getVal();
                    
                    try {
                        rsTmp=data.getResult("SELECT INDENT_NO,INDENT_SRNO FROM D_PUR_INQUIRY_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND INQUIRY_NO='"+InquiryNo+"' AND SR_NO="+InquirySrNo);
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            String IndentNo=rsTmp.getString("INDENT_NO");
                            int IndentSrNo=rsTmp.getInt("INDENT_SRNO");
                            
                            if((!IndentNo.trim().equals(""))&&IndentSrNo>0) {
                                rsTmp=data.getResult("SELECT ITEM_EXTRA_DESC FROM D_INV_INDENT_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND INDENT_NO='"+IndentNo+"' AND ITEM_CODE='"+pItemID+"'");
                                rsTmp.first();
                                
                                if(rsTmp.getRow()>0) {
                                    IndentDesc=rsTmp.getString("ITEM_EXTRA_DESC");
                                }
                            }
                            
                        }
                    }
                    catch(Exception e){}
                    
                    
                }
            }
            
            
            txtIndentDesc.setText(IndentDesc);
            //Add last Po column
            DataModelC.addColumn("Last P.O.");
            
            
            //Now Add Default Rows to Grid
            Object[] rowData=new Object[1];
            rowData[0]="Supplier's Description";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="MAKE";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="Qty.";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="Rate";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="Landed Rate";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="Payment Terms";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="Price Basis";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="Discount";
            DataModelC.addRow(rowData);
            //
            
                        
            rowData=new Object[1];
            rowData[0]="CGST";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="SGST";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="IGST";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="COMPOSITION";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="RCM";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="GST COMPENSATION CESS";
            DataModelC.addRow(rowData);
            //
            
            
            rowData=new Object[1];
            rowData[0]="Excise";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="S.T.";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="P. & F.";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="Freight";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="Octroi";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="FOB";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="CIE";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="Insurance";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="T.C.C.";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="Cenvat";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="Service Tax";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="Other Terms";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];
            rowData[0]="Price List Ref.";
            DataModelC.addRow(rowData);
            
            
            
            int ColNo=0;
            for(int i=1;i<=ObjApproval.colItems.size();i++) {
                //Filter by Item
                clsQuotApprovalItem ObjItem=(clsQuotApprovalItem)ObjApproval.colItems.get(Integer.toString(i));
                
                String ItemID=(String)ObjItem.getAttribute("ITEM_CODE").getObj();
                
                if(ItemID.trim().equals(pItemID)) {
                    ColNo++;
                    String LastPONo=(String)ObjItem.getAttribute("LAST_PO_NO").getObj();
                    double LastPORate=ObjItem.getAttribute("LAST_PO_RATE").getVal();
                    double LastPOQty=0;
                    double LastLandedRate=ObjItem.getAttribute("LAST_LANDED_RATE").getVal();
                    
                    String QuotNo=(String)ObjItem.getAttribute("QUOT_ID").getObj();
                    int QuotSrNo=(int)ObjItem.getAttribute("QUOT_SR_NO").getVal();
                    
                    String LastPODesc="";
                    String QuotDesc="";
                    String LastPOMake="";
                    String LastPOPriceListNo="";
                    
                    if(!LastPONo.trim().equals("")) {
                        //Fetch the Last PO Terms
                        stPO=tmpConn.createStatement();
                        rsPO=stPO.executeQuery("SELECT QTY,ITEM_DESC,MAKE,PRICE_LIST_NO FROM D_PUR_PO_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND PO_NO='"+LastPONo+"' AND ITEM_ID='"+ItemID+"'");
                        rsPO.first();
                        if(rsPO.getRow()>0) {
                            LastPOQty=rsPO.getDouble("QTY");
                            LastPODesc=rsPO.getString("ITEM_DESC");
                            LastPOMake=rsPO.getString("MAKE");
                            LastPOPriceListNo=rsPO.getString("PRICE_LIST_NO");
                        }
                        
                        
                        stPO=tmpConn.createStatement();
                        rsPO=stPO.executeQuery("SELECT * FROM D_PUR_PO_HEADER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND PO_NO='"+LastPONo+"'");
                        rsPO.first();
                        
                        //Start Displaying Last PO Terms
                        if(rsPO.getRow()>0) {
                            
                            TableC.setValueAt(rsPO.getString("PAYMENT_TERM"),5,TableC.getColumnCount()-1);
                            TableC.setValueAt(rsPO.getString("PRICE_BASIS_TERM"),6,TableC.getColumnCount()-1);
                            TableC.setValueAt(rsPO.getString("DISCOUNT_TERM"),7,TableC.getColumnCount()-1);
                            
                            TableC.setValueAt(rsPO.getString("CGST_TERM"),8,TableC.getColumnCount()-1);
                            TableC.setValueAt(rsPO.getString("SGST_TERM"),9,TableC.getColumnCount()-1);
                            TableC.setValueAt(rsPO.getString("IGST_TERM"),10,TableC.getColumnCount()-1);
                            TableC.setValueAt(rsPO.getString("COMPOSITION_TERM"),11,TableC.getColumnCount()-1);
                            TableC.setValueAt(rsPO.getString("RCM_TERM"),12,TableC.getColumnCount()-1);
                            TableC.setValueAt(rsPO.getString("GST_COMPENSATION_CESS_TERM"),13,TableC.getColumnCount()-1);
                            
                            TableC.setValueAt(rsPO.getString("EXCISE_TERM"),14,TableC.getColumnCount()-1);
                            TableC.setValueAt(rsPO.getString("ST_TERM"),15,TableC.getColumnCount()-1);
                            TableC.setValueAt(rsPO.getString("PF_TERM"),16,TableC.getColumnCount()-1);
                            TableC.setValueAt(rsPO.getString("FREIGHT_TERM"),17,TableC.getColumnCount()-1);
                            TableC.setValueAt(rsPO.getString("OCTROI_TERM"),18,TableC.getColumnCount()-1);
                            TableC.setValueAt(rsPO.getString("FOB_TERM"),19,TableC.getColumnCount()-1);
                            TableC.setValueAt(rsPO.getString("CIE_TERM"),20,TableC.getColumnCount()-1);
                            TableC.setValueAt(rsPO.getString("INSURANCE_TERM"),21,TableC.getColumnCount()-1);
                            TableC.setValueAt(rsPO.getString("TCC_TERM"),22,TableC.getColumnCount()-1);
                            TableC.setValueAt(rsPO.getString("CENVAT_TERM"),23,TableC.getColumnCount()-1);
                            TableC.setValueAt(rsPO.getString("SERVICE_TAX_TERM"),24,TableC.getColumnCount()-1);
                            TableC.setValueAt(rsPO.getString("OTHERS_TERM"),25,TableC.getColumnCount()-1);
                            
                            try {
                                if(rsPO.getString("DISCOUNT_TERM").trim().equals("")) {
                                    rsTmp=data.getResult("SELECT COLUMN_1_PER FROM D_PUR_PO_DETAIL WHERE PO_NO='"+LastPONo+"' AND ITEM_ID='"+ItemID+"'");
                                    rsTmp.first();
                                    
                                    if(rsTmp.getRow()>0) {
                                        double DiscountPer=rsTmp.getDouble("COLUMN_1_PER") ;
                                        String Discount=Double.toString(DiscountPer)+"%";
                                        
                                        TableC.setValueAt(Discount,7,TableC.getColumnCount()-1);
                                        
                                    }
                                    
                                }
                            }
                            catch(Exception e) {
                                
                            }
                        }
                    }
                    
                    
                    
                    if(!QuotNo.trim().equals("")) {
                        //Fetch the Quotation Details
                        stQuot=tmpConn.createStatement();
                        rsQuot=stQuot.executeQuery("SELECT * FROM D_PUR_QUOT_HEADER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND QUOT_ID='"+QuotNo+"'" );
                        rsQuot.first();
                        
                        //Start Displaying Terms
                        if(rsQuot.getRow()>0) {
                            TableC.setValueAt(rsQuot.getString("PAYMENT_TERM"),5,ColNo);
                            TableC.setValueAt(rsQuot.getString("PRICE_BASIS_TERM"),6,ColNo);
                            TableC.setValueAt(rsQuot.getString("DISCOUNT_TERM"),7,ColNo);
                            
                            TableC.setValueAt(rsQuot.getString("CGST_TERM"),8,ColNo);
                            TableC.setValueAt(rsQuot.getString("SGST_TERM"),9,ColNo);
                            TableC.setValueAt(rsQuot.getString("IGST_TERM"),10,ColNo);
                            TableC.setValueAt(rsQuot.getString("COMPOSITION_TERM"),11,ColNo);
                            TableC.setValueAt(rsQuot.getString("RCM_TERM"),12,ColNo);
                            TableC.setValueAt(rsQuot.getString("GST_COMPENSATION_CESS_TERM"),13,ColNo);
                            
                            TableC.setValueAt(rsQuot.getString("EXCISE_TERM"),14,ColNo);
                            TableC.setValueAt(rsQuot.getString("ST_TERM"),15,ColNo);
                            TableC.setValueAt(rsQuot.getString("PF_TERM"),16,ColNo);
                            TableC.setValueAt(rsQuot.getString("FREIGHT_TERM"),17,ColNo);
                            TableC.setValueAt(rsQuot.getString("OCTROI_TERM"),18,ColNo);
                            TableC.setValueAt(rsQuot.getString("FOB_TERM"),19,ColNo);
                            TableC.setValueAt(rsQuot.getString("CIE_TERM"),20,ColNo);
                            TableC.setValueAt(rsQuot.getString("INSURANCE_TERM"),21,ColNo);
                            TableC.setValueAt(rsQuot.getString("TCC_TERM"),22,ColNo);
                            TableC.setValueAt(rsQuot.getString("CENVAT_TERM"),23,ColNo);
                            TableC.setValueAt(rsQuot.getString("SERVICE_TAX_TERM"),24,ColNo);
                            TableC.setValueAt(rsQuot.getString("OTHERS_TERM"),25,ColNo);
                            
                            try {
                                rsTmp=data.getResult("SELECT SUPP_ITEM_DESC FROM D_PUR_QUOT_DETAIL WHERE QUOT_ID='"+QuotNo+"' AND SR_NO="+QuotSrNo);
                                rsTmp.first();
                                
                                if(rsTmp.getRow()>0) {
                                    QuotDesc=rsTmp.getString("SUPP_ITEM_DESC");
                                }
                                
                            }
                            catch(Exception e) {
                                
                            }
                            
                        }
                    }
                    
                    
                    double Qty=ObjItem.getAttribute("QTY").getVal();
                    double Rate=ObjItem.getAttribute("RATE").getVal();
                    double LandedRate=ObjItem.getAttribute("LAND_COST").getVal();
                    String Make=(String)ObjItem.getAttribute("MAKE").getObj();
                    String PriceListNo=(String)ObjItem.getAttribute("PRICE_LIST_NO").getObj();
                    //Display Data
                    TableC.setValueAt(QuotDesc, 0, ColNo);
                    TableC.setValueAt(Make, 1, ColNo);
                    TableC.setValueAt(Double.toString(Qty), 2, ColNo);
                    TableC.setValueAt(Double.toString(Rate), 3, ColNo);
                    TableC.setValueAt(Double.toString(LandedRate), 4, ColNo);
                    TableC.setValueAt(PriceListNo, 26, ColNo);
                    
                    //Display last PO Information
                    TableC.setValueAt(LastPODesc,0,TableC.getColumnCount()-1);
                    TableC.setValueAt(LastPOMake,1,TableC.getColumnCount()-1);
                    TableC.setValueAt(Double.toString(LastPOQty),2,TableC.getColumnCount()-1);
                    TableC.setValueAt(Double.toString(LastPORate),3,TableC.getColumnCount()-1);
                    TableC.setValueAt(Double.toString(LastLandedRate),4,TableC.getColumnCount()-1);
                    TableC.setValueAt(LastPOPriceListNo,26,TableC.getColumnCount()-1);
                }
            }
            
            //tmpConn.close();
            stPO.close();
            stQuot.close();
            rsPO.close();
            rsQuot.close();
            
            
        }
        catch(Exception e) {
            //JOptionPane.showMessageDialog(null,e.getMessage());
        }
    }
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                if(ObjApproval.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(ObjApproval.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(ObjApproval.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
                
                
            }
        }
        catch(Exception c) {
            
        }
        //============================================//
        
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=20;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        
        try {
            ClearFields();
            
            txtDocNo.setText((String)ObjApproval.getAttribute("APPROVAL_NO").getObj());
            lblTitle.setText("SUMMARY - "+txtDocNo.getText());
            lblRevNo.setText(Integer.toString((int)ObjApproval.getAttribute("REVISION_NO").getVal()));
            txtDocDate.setText(EITLERPGLOBAL.formatDate((String)ObjApproval.getAttribute("APPROVAL_DATE").getObj()));
            txtInquiryNo.setText((String)ObjApproval.getAttribute("INQUIRY_NO").getObj());
            txtInquiryDate.setText(EITLERPGLOBAL.formatDate((String)ObjApproval.getAttribute("INQUIRY_DATE").getObj()));
            EITLERPGLOBAL.setComboIndex(cmbStatus,(String)ObjApproval.getAttribute("STATUS").getObj());
            chkCancelled.setSelected(ObjApproval.getAttribute("CANCELLED").getBool());
            
            txtRemarks.setText((String)ObjApproval.getAttribute("REMARKS").getObj());
            
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,(int)ObjApproval.getAttribute("HIERARCHY_ID").getVal());
            
            //Generate Unique Item List
            colItems.clear();
            int cnt=0;
            for(int i=1;i<=ObjApproval.colItems.size();i++) {
                clsQuotApprovalItem ObjItem =(clsQuotApprovalItem) ObjApproval.colItems.get(Integer.toString(i));
                String strItemID=(String)ObjItem.getAttribute("ITEM_CODE").getObj();
                
                boolean found=false;
                for(int j=1;j<=colItems.size();j++) {
                    String lItemID=(String)colItems.get(Integer.toString(j));
                    if(strItemID.equals(lItemID)) {
                        found=true;
                    }
                }
                
                if(!found) {
                    cnt++;
                    //Add it to collection
                    colItems.put(Integer.toString(cnt),strItemID);
                }
            }
            
            if(EditMode==0) {
                DataModelL.TableReadOnly(true);
            }
            
            //--- Generate Type Combo ------//
            cmbItemModel=new EITLComboModel();
            cmbItem.removeAllItems();
            cmbItem.setModel(cmbItemModel);
            
            String strItemID="";
            String strItemName="";
            
            for(int i=1;i<=colItems.size();i++) {
                strItemID=(String)colItems.get(Integer.toString(i));
                strItemName=clsItem.getItemName(EITLERPGLOBAL.gCompanyID,strItemID);
                
                ComboData newData=new ComboData();
                newData.strCode=strItemID.trim();
                newData.Text=strItemID+" - "+strItemName;
                cmbItemModel.addElement(newData);
            }
            
            
            cmbItemCModel=new EITLComboModel();
            cmbItemC.removeAllItems();
            cmbItemC.setModel(cmbItemCModel);
            
            
            for(int i=1;i<=colItems.size();i++) {
                strItemID=(String)colItems.get(Integer.toString(i));
                strItemName=clsItem.getItemName(EITLERPGLOBAL.gCompanyID,strItemID);
                
                ComboData newData=new ComboData();
                newData.strCode=strItemID;
                newData.Text=strItemID+" "+strItemName;
                cmbItemCModel.addElement(newData);
            }
            
            
            
            if(cmbItem.getItemCount()>0) {
                FormatGrid();
                cmbItem.setSelectedIndex(0);
                strItemID=EITLERPGLOBAL.getCombostrCode(cmbItem);
                GenerateGrid(strItemID);
            }
            
            //=========================================//
            
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List=new HashMap();
            String DocNo=(String)ObjApproval.getAttribute("APPROVAL_NO").getObj();
            List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, 20, DocNo);
            for(int i=1;i<=List.size();i++) {
                clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
                Object[] rowData=new Object[7];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
                rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
                
                DataModelA.addRow(rowData);
            }
            
            
            
            //Showing Audit Trial History
            FormatGridHS();
            HashMap History=clsQuotApproval.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for(int i=1;i<=History.size();i++) {
                clsQuotApproval ObjHistory=(clsQuotApproval)History.get(Integer.toString(i));
                Object[] rowData=new Object[5];
                
                rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(long)ObjHistory.getAttribute("UPDATED_BY").getVal());
                rowData[2]=EITLERPGLOBAL.formatDate((String)ObjHistory.getAttribute("ENTRY_DATE").getObj());
                
                String ApprovalStatus="";
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                    ApprovalStatus="Approved";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                    ApprovalStatus="Final Approved";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                    ApprovalStatus="Waiting";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                    ApprovalStatus="Rejected";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                    ApprovalStatus="Pending";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                    ApprovalStatus="Skiped";
                }
                
                
                rowData[3]=ApprovalStatus;
                rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
                
                DataModelHS.addRow(rowData);
            }
            //============================================================//
            
            
            ShowMessage("Ready");
        }
        catch(Exception e) {
            
            
        }
    }
    
    
    //Sets data to the Class Object
    private void SetData() {
        
        //Header Fields
        ObjApproval.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        ObjApproval.setAttribute("PREFIX",SelPrefix);
        ObjApproval.setAttribute("SUFFIX",SelSuffix);
        ObjApproval.setAttribute("FFNO",FFNo);
        ObjApproval.setAttribute("APPROVAL_DATE",EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
        ObjApproval.setAttribute("INQUIRY_NO",txtInquiryNo.getText());
        ObjApproval.setAttribute("INQUIRY_DATE",EITLERPGLOBAL.formatDateDB(txtInquiryDate.getText()));
        ObjApproval.setAttribute("STATUS",EITLERPGLOBAL.getCombostrCode(cmbStatus));
        ObjApproval.setAttribute("REMARKS",txtRemarks.getText());
        
        if(chkCancelled.isSelected()) {
            ObjApproval.setAttribute("CANCELLED",true);
        }
        else {
            ObjApproval.setAttribute("CANCELLED",false);
        }
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjApproval.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            ObjApproval.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        else {
            ObjApproval.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
            ObjApproval.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        
        //----- Update Approval Specific Fields -----------//
        ObjApproval.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjApproval.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjApproval.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjApproval.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            ObjApproval.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjApproval.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjApproval.setAttribute("APPROVAL_STATUS","R");
        }
        
        if(OpgHold.isSelected()) {
            ObjApproval.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        
        //Take the Current Values
        if(TableL.getRowCount()>0) {
            for(int i=0;i<TableL.getRowCount();i++) {
                //Get Main Sr. No.
                int MainSrNo=Integer.parseInt(DataModelL.getValueByVariable("MAIN_SR_NO", i));
                
                //Get the Object
                clsQuotApprovalItem ObjItem=(clsQuotApprovalItem)ObjApproval.colItems.get(Integer.toString(MainSrNo));
                
                //Now Read the Previous Values
                String strRemarks="";
                if(DataModelL.getValueByVariable("REMARKS", i)!=null) {
                    strRemarks=DataModelL.getValueByVariable("REMARKS", i);
                }
                
                boolean blnVal=DataModelL.getBoolValueByVariable("APPROVED", i);
                
                //Set this to Object
                ObjItem.setAttribute("REMARKS",strRemarks);
                ObjItem.setAttribute("APPROVED",blnVal);
                
                //Put it agian to main collection
                ObjApproval.colItems.put(Integer.toString(MainSrNo),ObjItem);
            }
        }
        
        
    }
    
    
    
    private void SetupColumns() {
        HashMap List=new HashMap();
        HashMap ColList=new HashMap();
        
        TableL.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableL.setRowSelectionAllowed(true);
        TableL.setColumnSelectionAllowed(true);
        
        ColList=clsSystemColumn.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=20 AND HIDDEN=1 ORDER BY D_COM_SYSTEM_COLUMNS.ORDER");
        for(int i=1;i<=ColList.size();i++) {
            clsSystemColumn ObjColumn=(clsSystemColumn)ColList.get(Integer.toString(i));
            
            //Add Column First
            DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj()); //
            DataModelL.SetColID(TableL.getColumnCount()-1, 0);
            DataModelL.SetVariable(TableL.getColumnCount()-1,(String)ObjColumn.getAttribute("VARIABLE").getObj());
            DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
            DataModelL.SetInclude(TableL.getColumnCount()-1,true);
            
            DataModelL.SetReadOnly(TableL.getColumnCount()-1);
            
            //Hide the Column
            TableL.getColumnModel().getColumn(TableL.getColumnCount()-1).setMaxWidth(0);
            TableL.getColumnModel().getColumn(TableL.getColumnCount()-1).setMinWidth(0);
            TableL.getColumnModel().getColumn(TableL.getColumnCount()-1).setWidth(0);
        }
    }
    
    private void FormatGrid() {
        HashMap ColList=new HashMap();
        
        DataModelL=new EITLTableModel();
        
        TableL.removeAll();
        TableL.setModel(DataModelL);
        
        //Set the table Readonly
        DataModelL.TableReadOnly(false);
        
        ColList=clsSystemColumn.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=20 AND HIDDEN=0 ORDER BY D_COM_SYSTEM_COLUMNS.ORDER");
        for(int i=1;i<=ColList.size();i++) {
            clsSystemColumn ObjColumn=(clsSystemColumn)ColList.get(Integer.toString(i));
            
            //Add Column First
            DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj()); //0
            
            
            if(ObjColumn.getAttribute("NUMERIC").getBool()) {
                DataModelL.SetNumeric(TableL.getColumnCount()-1, true);
            }
            else {
                DataModelL.SetNumeric(TableL.getColumnCount()-1, false);
            }
            
            String Variable=(String)ObjColumn.getAttribute("VARIABLE").getObj();
            
            if(Variable.equals("QTY")||Variable.equals("RATE")||Variable.equals("GROSS_AMOUNT")||Variable.equals("NET_AMOUNT")) {
                DataModelL.SetColID(TableL.getColumnCount()-1, -99);
            }
            else {
                DataModelL.SetColID(TableL.getColumnCount()-1, 0);
            }
            
            
            DataModelL.SetVariable(TableL.getColumnCount()-1,Variable.trim());
            DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
            DataModelL.SetInclude(TableL.getColumnCount()-1,true);
            
            if(ObjColumn.getAttribute("READONLY").getBool()) {
                DataModelL.SetReadOnly(TableL.getColumnCount()-1);
            }
        }
        SetupColumns();
        
        //Now hide the column 1
        TableColumnModel ColModel=TableL.getColumnModel();
        TableL.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        //----- Install Table Model Event Listener -------//
        TableL.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    int col = e.getColumn();
                }
            }
        });
        
        
        //------- Install Table List Selection Listener ------//
        TableL.getColumnModel().getSelectionModel().addListSelectionListener(
        new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                int last=TableL.getSelectedColumn();
                String strVar=DataModelL.getVariable(last);
                
                //=============== Cell Editing Routine =======================//
                try {
                    cellLastValue=(String)TableL.getValueAt(TableL.getSelectedRow(),TableL.getSelectedColumn());
                    
                    TableL.editCellAt(TableL.getSelectedRow(),TableL.getSelectedColumn());
                    if(TableL.getEditorComponent() instanceof JTextComponent) {
                        ((JTextComponent)TableL.getEditorComponent()).selectAll();
                    }
                }
                catch(Exception cell){}
                //============= Cell Editing Routine Ended =================//
                
                
                ShowMessage("Ready");
                
                if(strVar.equals("LAND_COST")) {
                    ShowMessage("Shows Calculated Landing cost.");
                }
                
                if(strVar.equals("QTY")) {
                    ShowMessage("Shows Qty.");
                }
                
                if(strVar.equals("RATE")) {
                    ShowMessage("Shows supplier rate");
                }
                
                if(strVar.equals("REMARKS")) {
                    ShowMessage("Enter remarks.");
                }
                
                if(strVar.equals("APPROVED")) {
                    ShowMessage("Press spacebar to mark the item as approved.");
                }
            }
        }
        );
        //===================================================//
        
        int ApproveCol=DataModelL.getColFromVariable("APPROVED");
        Renderer.setCustomComponent(ApproveCol,"CheckBox");
        JCheckBox aCheckBox=new JCheckBox();
        aCheckBox.setBackground(Color.WHITE);
        TableL.getColumnModel().getColumn(ApproveCol).setCellEditor(new DefaultCellEditor(aCheckBox));
        TableL.getColumnModel().getColumn(ApproveCol).setCellRenderer(Renderer);
    }
    
    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        String strCondition="";
        clsUser ObjUser=new clsUser();
        
        //----- Generate cmbType ------- //
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=20");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=20");
        }
        for(int i=1;i<=List.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
        
        
        
        //--- Generate Type Combo ------//
        cmbStatusModel=new EITLComboModel();
        cmbStatus.removeAllItems();
        cmbStatus.setModel(cmbStatusModel);
        
        ComboData aData=new ComboData();
        aData.strCode="O";
        aData.Text="Open";
        cmbStatusModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="C";
        aData.Text="Close";
        cmbStatusModel.addElement(aData);
        //===============================//
    }
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, 20,(String)ObjApproval.getAttribute("APPROVAL_NO").getObj());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
        
    }
    
    private void SetupApproval() {
        // --- Hierarchy Change Rights Check --------
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,295)) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }*/
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        }
        else
        {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, 20,(String)ObjApproval.getAttribute("APPROVAL_NO").getObj());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,20,FromUserID,(String)ObjApproval.getAttribute("APPROVAL_NO").getObj());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,291)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,292)) {
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }*/
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,293)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,294)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
        
        
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,297)) {
            cmdAmend.setEnabled(true);
        }
        else {
            cmdAmend.setEnabled(false);
        }
        
    }
    
    private void UpdateSrNo() {
        int SrCol=DataModelL.getColFromVariable("SR_NO");
        
        for(int i=0;i<TableL.getRowCount();i++) {
            TableL.setValueAt(Integer.toString(i+1), i, SrCol);
        }
    }
    
    
    private void ClearFields() {
        txtDocDate.setText("");
        txtInquiryNo.setText("");
        txtInquiryDate.setText("");
        txtToRemarks.setText("");
        txtRemarks.setText("");
        FormatGrid();
        FormatGridA();
        FormatGridHS();
        cmbItem.removeAllItems();
        cmbItemC.removeAllItems();
    }
    
    private void SetFields(boolean pStat) {
        txtDocDate.setEnabled(pStat);
        txtInquiryNo.setEnabled(pStat);
        txtInquiryDate.setEnabled(pStat);
        
        cmbStatus.setEnabled(pStat);
        chkCancelled.setEnabled(pStat);
        
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        
        SetupApproval();
        
        DataModelL.TableReadOnly(!pStat);
        
        //cmbItem.setEnabled(pStat);
        cmdRetrieve.setEnabled(pStat);
        //cmdShow.setEnabled(pStat);
    }
    
    private boolean Validate() {
        int ValidEntryCount=0;
        try {
            if(txtInquiryNo.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"You must enter Inquiry no.");
                return false;
            }
            
            //Validates Item Entries
            if(ObjApproval.colItems.size()<=0) {
                JOptionPane.showMessageDialog(null,"Please enter at least one item");
                return false;
            }
            
            //Now Header level validations
            if(txtDocDate.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Please enter Date");
                return false;
            }
            
            if(cmbHierarchy.getSelectedIndex()==-1) {
                JOptionPane.showMessageDialog(null,"Please select the hierarchy.");
                return false;
            }
            
            if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
                JOptionPane.showMessageDialog(null,"Please select the Approval Action");
                return false;
            }
            
            if(!EITLERPGLOBAL.isDate(txtDocDate.getText())) {
                JOptionPane.showMessageDialog(null,"Invalid Approval Date");
                return false;
            }
            
            if(!EITLERPGLOBAL.isDate(txtInquiryDate.getText())) {
                JOptionPane.showMessageDialog(null,"Invalid inquiry date");
                return false;
            }
            
            
            if(OpgReject.isSelected()&&txtToRemarks.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Please enter the remarks for rejection");
                return false;
            }
            
            
        } catch(Exception e) {
            e.printStackTrace();
        }
        return true;
    }
    
    
    private void SetNumberFormats() {
        /*DecimalFormat decimalFormat=new DecimalFormat("0.00");
        NumberFormatter ObjFormater=new NumberFormatter(decimalFormat);
        ObjFormater.setAllowsInvalid(false);
        txtCIFCost.setFormatterFactory(new DefaultFormatterFactory(ObjFormater));*/
    }
    
    
    private void Add() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        
        //Now Generate new document no.
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=20;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 20, FFNo,  false));
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
            txtDocDate.requestFocus();
            
            lblTitle.setText("SUMMARY - "+txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
        
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=(String)ObjApproval.getAttribute("APPROVAL_NO").getObj();
        if(ObjApproval.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            EITLERPGLOBAL.ChangeCursorToWait(this);
            EditMode=EITLERPGLOBAL.EDIT;
            GenerateCombos();
            
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//
            
            if(ApprovalFlow.IsCreator(20,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,292)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            DisableToolbar();
            txtDocDate.requestFocus();
            EITLERPGLOBAL.ChangeCursorToDefault(this);
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }
    
    
    private void Amend() {
        
        //        int canAmend=clsQuotApproval.CanAmend(EITLERPGLOBAL.gCompanyID,txtDocNo.getText());
        //
        //        if(canAmend==1) //Give Warning
        //        {
        //          JOptionPane.showMessageDialog(null,"One RIA is already prepared from this Summary. You could not change the Inquiry reference. ");
        //        }
        //
        //        if(canAmend==2) //Restrict
        //        {
        //          JOptionPane.showMessageDialog(null,"Cannot Amend the document. Please cancel any RIA prepared from this Summary first.");
        //          return;
        //
        //        }
        
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=(String)ObjApproval.getAttribute("APPROVAL_NO").getObj();
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        EditMode=EITLERPGLOBAL.AMEND;
        GenerateCombos();
        
        //---New Change ---//
        GenerateCombos();
        DisplayData();
        //----------------//
        
        if(ApprovalFlow.IsCreator(20,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,292)) {
            SetFields(true);
        }
        else {
            EnableApproval();
        }
        
        txtInquiryNo.setEnabled(false);
        
        
        DisableToolbar();
        txtDocDate.requestFocus();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
        
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=(String)ObjApproval.getAttribute("APPROVAL_NO").getObj();
        
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            if(ObjApproval.CanDelete(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
                if(ObjApproval.Delete(EITLERPGLOBAL.gNewUserID)) {
                    MoveLast();
                }
                else {
                    JOptionPane.showMessageDialog(null,"Error occured while deleting. Error is "+ObjApproval.LastError);
                }
            }
            else {
                JOptionPane.showMessageDialog(null,"You cannot delete this record. It is either approved/rejected record or waiting approval for other user or is referred in other documents");
            }
        }
    }
    
    private void Save() {
        //Form level validations
        if(Validate()==false) {
            return; //Validation failed
        }
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjApproval.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjApproval.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjApproval.Update()) {
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjApproval.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        
        if(EditMode==EITLERPGLOBAL.AMEND) {
            if(ObjApproval.Amend()) {
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjApproval.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        ShowMessage("Ready");
        
        try {
            frmPA.RefreshView();
        }catch(Exception e){}
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    public void FindEx(String pApprovalNo) {
        ObjApproval.Filter(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVAL_NO='"+pApprovalNo+"'",EITLERPGLOBAL.gCompanyID);
        MoveLast();
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Purchase.frmSummaryFind",true);
        frmSummaryFind ObjReturn= (frmSummaryFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            //Add PO Type
            if(!ObjApproval.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveLast();
        }
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjApproval.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjApproval.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjApproval.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjApproval.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    //Recurses through the hierarchy of classes
    //until it finds Frame
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
    
    public void FindEx(int pCompanyID,String pDocNo) {
        ObjApproval.Filter(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND APPROVAL_NO='"+pDocNo+"'",pCompanyID);
        ObjApproval.MoveLast();
        DisplayData();
    }
    
    public void FindWaiting() {
        ObjApproval.Filter(" WHERE APPROVAL_NO IN(SELECT D_PUR_QUOT_APPROVAL_HEADER.APPROVAL_NO FROM D_PUR_QUOT_APPROVAL_HEADER,D_COM_DOC_DATA WHERE D_PUR_QUOT_APPROVAL_HEADER.APPROVAL_NO=D_COM_DOC_DATA.DOC_NO AND D_PUR_QUOT_APPROVAL_HEADER.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_PUR_QUOT_APPROVAL_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND D_COM_DOC_DATA.MODULE_ID=20)",EITLERPGLOBAL.gCompanyID);
        ObjApproval.MoveLast();
        DisplayData();
    }
    
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Tab1.getComponent(i).setEnabled(true);
                }
                
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        
        
        //=============== Setting Table Fields ==================//
        DataModelL.ClearAllReadOnly();
        
        for(int i=0;i<TableL.getColumnCount();i++) {
            FieldName=DataModelL.getVariable(i);
            
            if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
                //Do Nothing
            }
            else {
                DataModelL.SetReadOnly(i);
            }
        }
        //=======================================================//
        
    }
    
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    
    private void PreviewReport() {
        HashMap Params=new HashMap();
        
        if(chkCancelled.isSelected()) {
            JOptionPane.showMessageDialog(null,"You cannot take printout of cancelled document");
            return;
        }
        
        
        Params.put("APPROVAL_NO",txtDocNo.getText());
        Params.put("COMPANY_ID", new Integer(EITLERPGLOBAL.gCompanyID));
        
        try {
            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptSummary.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"File error "+e.getMessage());
        }
        
        
    }
     private void PreviewReport_GST() {
        HashMap Params=new HashMap();
        
        if(chkCancelled.isSelected()) {
            JOptionPane.showMessageDialog(null,"You cannot take printout of cancelled document");
            return;
        }
        
        
        Params.put("APPROVAL_NO",txtDocNo.getText());
        Params.put("COMPANY_ID", new Integer(EITLERPGLOBAL.gCompanyID));
        
        try {
            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptSummary_gst.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"File error "+e.getMessage());
        }
        
        
    }
    
}



