/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP.Purchase;

/**
 *
 * @author  nhpatel
 */

import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.*;
import EITLERP.Stores.*;
import org.nfunk.jep.*;
import org.nfunk.jep.type.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import java.text.*;
import javax.swing.text.*;
import java.sql.*;
import java.net.*;

/*<APPLET CODE=frmQuotApproval.class HEIGHT=528 WIDTH=775></APPLET>*/
/**
 *
 */
public class frmFreightComparison extends javax.swing.JApplet {
    
    private int EditMode=0;
    
    private EITLTableModel DataModelH;
    private EITLTableCellRenderer Renderer=new EITLTableCellRenderer();
    private EITLTableModel DataModelA;
    
    
    private boolean Updating=false;
    private boolean Updating_H=false;
    private boolean DoNotEvaluate=false;
    
    private clsFreightComparison ObjFreight;
    
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromID=0;
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbGrossUnitModel;
    private EITLComboModel cmbVolumeUnitModel;
    private EITLComboModel cmbCurrencyModel;
    private EITLComboModel cmbOrderModeModel;
    private EITLComboModel cmbTransporterModel;
    
    private boolean HistoryView=false;
    private String theDocNo="";
    private EITLTableModel DataModelHS;

    private boolean Changing=false;
    
    public frmPendingApprovals frmPA;
    
    String cellLastValue="";
    
    /** Creates new form frmTemplate */
    public void init() {
        System.gc();
        setSize(775,640);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        
        
        GenerateCombos();
        ObjFreight=new clsFreightComparison();
        SetMenuForRights();
        
        if(getName().equals("Link")) {
            
        }
        else {
            if(ObjFreight.LoadData(EITLERPGLOBAL.gCompanyID)) {
                ObjFreight.MoveLast();
                DisplayData();
                
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+ObjFreight.LastError);
            }
        }
        
        txtAuditRemarks.setVisible(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        chkCancelled = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        txtPONo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPODate = new javax.swing.JTextField();
        cmdNext1 = new javax.swing.JButton();
        lblRevNo = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtDescription = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtSuppID = new javax.swing.JTextField();
        txtSuppName = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cmbTransporter = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        cmbGrossUnit = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        txtGrossWeight = new javax.swing.JTextField();
        cmbOrderMode = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        txtCartons = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtVolumeCubic = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtVolumeWeight = new javax.swing.JTextField();
        cmbVolumeUnit = new javax.swing.JComboBox();
        jLabel17 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        txtDescriptionBig = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        cmdShowPO = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        cmbCurrency = new javax.swing.JComboBox();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        txtSuppPickup = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        txtSuppMinCharges = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        txtSuppCC = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        txtSuppFSC = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        txtSuppSSC = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        txtSuppOthers = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        txtLocalDescription = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        txtSuppLocalCharges = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel44 = new javax.swing.JLabel();
        txtSuppTotal = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        txtAgentPickup = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        txtAgentMinCharges = new javax.swing.JTextField();
        txtAgentCC = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        txtAgentFSC = new javax.swing.JTextField();
        txtAgentSSC = new javax.swing.JTextField();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        txtAgentOthers = new javax.swing.JTextField();
        txtAgentDO = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        txtAgentTotal = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        txtAgentBB = new javax.swing.JTextField();
        jLabel54 = new javax.swing.JLabel();
        txtAgentCartage = new javax.swing.JTextField();
        jLabel55 = new javax.swing.JLabel();
        txtAgentLocalOthers = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        cmdNext4 = new javax.swing.JButton();
        cmdBack4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtSuppPickup1 = new javax.swing.JTextField();
        txtSuppMinCharges1 = new javax.swing.JTextField();
        txtSuppCC1 = new javax.swing.JTextField();
        txtSuppFSC1 = new javax.swing.JTextField();
        txtSuppSSC1 = new javax.swing.JTextField();
        txtSuppOthers1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtAgentPickup1 = new javax.swing.JTextField();
        txtAgentMinCharges1 = new javax.swing.JTextField();
        txtAgentCC1 = new javax.swing.JTextField();
        txtAgentFSC1 = new javax.swing.JTextField();
        txtAgentSSC1 = new javax.swing.JTextField();
        txtAgentOthers1 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        txtCurrencyRate = new javax.swing.JTextField();
        chkSuppExWorks = new javax.swing.JCheckBox();
        chkSuppFreight = new javax.swing.JCheckBox();
        chkSuppLocal = new javax.swing.JCheckBox();
        chkAFLFreight = new javax.swing.JCheckBox();
        chkAFLExWorks = new javax.swing.JCheckBox();
        chkAFLLocal = new javax.swing.JCheckBox();
        jLabel56 = new javax.swing.JLabel();
        txtFinalTotal = new javax.swing.JTextField();
        Tab3 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack3 = new javax.swing.JButton();
        txtFromRemarksBig = new javax.swing.JButton();
        Tab4 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save Record");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel Record");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText("FREIGHT COMPARISON SHEET");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 804, 25);

        Tab1.setLayout(null);

        Tab1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tab1MouseClicked(evt);
            }
        });

        jLabel2.setText("Doc. No.");
        Tab1.add(jLabel2);
        jLabel2.setBounds(26, 18, 85, 15);

        txtDocNo.setBackground(new java.awt.Color(204, 204, 255));
        txtDocNo.setEditable(false);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(114, 14, 99, 19);

        jLabel3.setText("Date");
        Tab1.add(jLabel3);
        jLabel3.setBounds(254, 18, 29, 15);

        txtDocDate.setName("APPROVAL_DATE");
        txtDocDate.setNextFocusableComponent(txtPONo);
        txtDocDate.setEnabled(false);
        txtDocDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDocDateFocusGained(evt);
            }
        });

        Tab1.add(txtDocDate);
        txtDocDate.setBounds(290, 16, 100, 19);

        chkCancelled.setText("Cancelled");
        chkCancelled.setEnabled(false);
        chkCancelled.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                chkCancelledFocusGained(evt);
            }
        });

        Tab1.add(chkCancelled);
        chkCancelled.setBounds(656, 8, 85, 23);

        jLabel4.setText("P.O. No.");
        Tab1.add(jLabel4);
        jLabel4.setBounds(32, 50, 70, 15);

        txtPONo.setName("INQUIRY_NO");
        txtPONo.setNextFocusableComponent(txtDescription);
        txtPONo.setEnabled(false);
        txtPONo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPONoFocusGained(evt);
            }
        });
        txtPONo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPONoKeyPressed(evt);
            }
        });

        Tab1.add(txtPONo);
        txtPONo.setBounds(114, 46, 99, 19);

        jLabel6.setText("Date");
        Tab1.add(jLabel6);
        jLabel6.setBounds(256, 50, 29, 15);

        txtPODate.setEditable(false);
        txtPODate.setEnabled(false);
        txtPODate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPODateFocusGained(evt);
            }
        });

        Tab1.add(txtPODate);
        txtPODate.setBounds(290, 48, 100, 19);

        cmdNext1.setText("Next >>");
        cmdNext1.setNextFocusableComponent(txtDocDate);
        cmdNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext1ActionPerformed(evt);
            }
        });

        Tab1.add(cmdNext1);
        cmdNext1.setBounds(650, 394, 91, 25);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(215, 16, 37, 15);

        jLabel5.setText("Spares Description");
        Tab1.add(jLabel5);
        jLabel5.setBounds(11, 92, 129, 15);

        txtDescription.setNextFocusableComponent(txtSuppID);
        txtDescription.setEnabled(false);
        Tab1.add(txtDescription);
        txtDescription.setBounds(138, 91, 461, 22);

        jLabel7.setText("Supplier");
        Tab1.add(jLabel7);
        jLabel7.setBounds(70, 130, 61, 15);

        txtSuppID.setNextFocusableComponent(cmbOrderMode);
        txtSuppID.setEnabled(false);
        txtSuppID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSuppIDFocusLost(evt);
            }
        });
        txtSuppID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSuppIDKeyPressed(evt);
            }
        });

        Tab1.add(txtSuppID);
        txtSuppID.setBounds(138, 128, 85, 22);

        txtSuppName.setText("...");
        Tab1.add(txtSuppName);
        txtSuppName.setBounds(228, 129, 368, 15);

        jLabel10.setText("Order Mode");
        Tab1.add(jLabel10);
        jLabel10.setBounds(49, 163, 82, 15);

        cmbTransporter.setNextFocusableComponent(txtGrossWeight);
        cmbTransporter.setEnabled(false);
        Tab1.add(cmbTransporter);
        cmbTransporter.setBounds(138, 190, 287, 24);

        jLabel11.setText("Transporter");
        Tab1.add(jLabel11);
        jLabel11.setBounds(50, 193, 82, 15);

        cmbGrossUnit.setNextFocusableComponent(txtCartons);
        cmbGrossUnit.setEnabled(false);
        Tab1.add(cmbGrossUnit);
        cmbGrossUnit.setBounds(255, 225, 94, 24);

        jLabel12.setText("Gross Weight");
        Tab1.add(jLabel12);
        jLabel12.setBounds(44, 228, 93, 15);

        txtGrossWeight.setNextFocusableComponent(cmbGrossUnit);
        txtGrossWeight.setEnabled(false);
        Tab1.add(txtGrossWeight);
        txtGrossWeight.setBounds(138, 225, 108, 22);

        cmbOrderMode.setNextFocusableComponent(cmbTransporter);
        cmbOrderMode.setEnabled(false);
        Tab1.add(cmbOrderMode);
        cmbOrderMode.setBounds(138, 159, 107, 24);

        jLabel13.setText("Cartons");
        Tab1.add(jLabel13);
        jLabel13.setBounds(44, 259, 93, 15);

        txtCartons.setNextFocusableComponent(txtVolumeCubic);
        txtCartons.setEnabled(false);
        Tab1.add(txtCartons);
        txtCartons.setBounds(138, 256, 108, 22);

        jLabel14.setText("Volume");
        Tab1.add(jLabel14);
        jLabel14.setBounds(45, 289, 93, 15);

        txtVolumeCubic.setNextFocusableComponent(txtVolumeWeight);
        txtVolumeCubic.setEnabled(false);
        Tab1.add(txtVolumeCubic);
        txtVolumeCubic.setBounds(138, 286, 108, 22);

        jLabel15.setText("Cubic Mtr.");
        Tab1.add(jLabel15);
        jLabel15.setBounds(257, 290, 93, 15);

        jLabel16.setText("Volume Weight");
        Tab1.add(jLabel16);
        jLabel16.setBounds(31, 321, 108, 15);

        txtVolumeWeight.setNextFocusableComponent(cmbVolumeUnit);
        txtVolumeWeight.setEnabled(false);
        Tab1.add(txtVolumeWeight);
        txtVolumeWeight.setBounds(138, 318, 108, 22);

        cmbVolumeUnit.setNextFocusableComponent(txtRemarks);
        cmbVolumeUnit.setEnabled(false);
        Tab1.add(cmbVolumeUnit);
        cmbVolumeUnit.setBounds(257, 318, 94, 24);

        jLabel17.setText("Remarks");
        Tab1.add(jLabel17);
        jLabel17.setBounds(57, 358, 77, 15);

        txtRemarks.setNextFocusableComponent(cmdNext1);
        txtRemarks.setEnabled(false);
        Tab1.add(txtRemarks);
        txtRemarks.setBounds(138, 354, 461, 22);

        txtDescriptionBig.setText("...");
        txtDescriptionBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescriptionBigActionPerformed(evt);
            }
        });

        Tab1.add(txtDescriptionBig);
        txtDescriptionBig.setBounds(604, 91, 38, 20);

        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Tab1.add(jButton1);
        jButton1.setBounds(602, 355, 40, 21);

        cmdShowPO.setText("Show PO");
        cmdShowPO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowPOActionPerformed(evt);
            }
        });

        Tab1.add(cmdShowPO);
        cmdShowPO.setBounds(402, 47, 104, 25);

        Tab.addTab("Header ", Tab1);

        jPanel2.setLayout(null);

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel18.setText("Currency");
        jPanel2.add(jLabel18);
        jLabel18.setBounds(8, 12, 65, 15);

        cmbCurrency.setNextFocusableComponent(txtSuppPickup);
        cmbCurrency.setEnabled(false);
        jPanel2.add(cmbCurrency);
        cmbCurrency.setBounds(78, 7, 156, 24);

        jLabel20.setForeground(new java.awt.Color(51, 51, 255));
        jLabel20.setText("(1) Ex Works");
        jPanel2.add(jLabel20);
        jLabel20.setBounds(10, 80, 93, 15);

        jLabel21.setText("Pickup");
        jPanel2.add(jLabel21);
        jLabel21.setBounds(55, 105, 54, 15);

        txtSuppPickup.setNextFocusableComponent(txtSuppMinCharges);
        txtSuppPickup.setEnabled(false);
        txtSuppPickup.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSuppPickupFocusLost(evt);
            }
        });
        txtSuppPickup.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtSuppPickupInputMethodTextChanged(evt);
            }
        });
        txtSuppPickup.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                txtSuppPickupVetoableChange(evt);
            }
        });

        jPanel2.add(txtSuppPickup);
        txtSuppPickup.setBounds(116, 101, 108, 22);

        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.add(jPanel3);
        jPanel3.setBounds(7, 70, 727, 6);

        jLabel22.setText("SUPPLIER");
        jPanel2.add(jLabel22);
        jLabel22.setBounds(136, 52, 76, 15);

        jLabel23.setText("AFL LTD.");
        jPanel2.add(jLabel23);
        jLabel23.setBounds(394, 52, 76, 15);

        jLabel24.setText("Min. Charges");
        jPanel2.add(jLabel24);
        jLabel24.setBounds(22, 161, 88, 15);

        txtSuppMinCharges.setNextFocusableComponent(txtSuppCC);
        txtSuppMinCharges.setEnabled(false);
        txtSuppMinCharges.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSuppMinChargesFocusLost(evt);
            }
        });

        jPanel2.add(txtSuppMinCharges);
        txtSuppMinCharges.setBounds(116, 158, 108, 22);

        jLabel25.setForeground(new java.awt.Color(51, 51, 255));
        jLabel25.setText("(2) Freight Charges");
        jPanel2.add(jLabel25);
        jLabel25.setBounds(11, 134, 136, 15);

        jLabel27.setText("CC Fees");
        jPanel2.add(jLabel27);
        jLabel27.setBounds(22, 185, 88, 15);

        txtSuppCC.setNextFocusableComponent(txtSuppFSC);
        txtSuppCC.setEnabled(false);
        txtSuppCC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSuppCCFocusLost(evt);
            }
        });

        jPanel2.add(txtSuppCC);
        txtSuppCC.setBounds(116, 182, 108, 22);

        jLabel28.setText("FSC");
        jPanel2.add(jLabel28);
        jLabel28.setBounds(23, 210, 88, 15);

        txtSuppFSC.setNextFocusableComponent(txtSuppSSC);
        txtSuppFSC.setEnabled(false);
        txtSuppFSC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSuppFSCFocusLost(evt);
            }
        });

        jPanel2.add(txtSuppFSC);
        txtSuppFSC.setBounds(116, 207, 108, 22);

        jLabel29.setText("SSC");
        jPanel2.add(jLabel29);
        jLabel29.setBounds(24, 236, 88, 15);

        txtSuppSSC.setNextFocusableComponent(txtSuppOthers);
        txtSuppSSC.setEnabled(false);
        txtSuppSSC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSuppSSCFocusLost(evt);
            }
        });

        jPanel2.add(txtSuppSSC);
        txtSuppSSC.setBounds(116, 233, 108, 22);

        jLabel30.setText("Others");
        jPanel2.add(jLabel30);
        jLabel30.setBounds(25, 262, 88, 15);

        txtSuppOthers.setNextFocusableComponent(txtLocalDescription);
        txtSuppOthers.setEnabled(false);
        txtSuppOthers.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSuppOthersFocusLost(evt);
            }
        });

        jPanel2.add(txtSuppOthers);
        txtSuppOthers.setBounds(116, 259, 108, 22);

        jLabel37.setForeground(new java.awt.Color(51, 51, 255));
        jLabel37.setText("(3) Local Charges (INR)");
        jPanel2.add(jLabel37);
        jLabel37.setBounds(14, 293, 171, 15);

        jLabel42.setText("Charge Details");
        jPanel2.add(jLabel42);
        jLabel42.setBounds(13, 315, 100, 15);

        txtLocalDescription.setNextFocusableComponent(txtSuppLocalCharges);
        txtLocalDescription.setEnabled(false);
        jPanel2.add(txtLocalDescription);
        txtLocalDescription.setBounds(116, 312, 169, 22);

        jLabel43.setText("Local Charges");
        jPanel2.add(jLabel43);
        jLabel43.setBounds(20, 341, 95, 15);

        txtSuppLocalCharges.setNextFocusableComponent(txtAgentPickup);
        txtSuppLocalCharges.setEnabled(false);
        txtSuppLocalCharges.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSuppLocalChargesFocusLost(evt);
            }
        });

        jPanel2.add(txtSuppLocalCharges);
        txtSuppLocalCharges.setBounds(116, 338, 108, 22);

        jPanel4.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.add(jPanel4);
        jPanel4.setBounds(111, 371, 129, 6);

        jLabel44.setText("Total (INR)");
        jPanel2.add(jLabel44);
        jLabel44.setBounds(20, 386, 95, 15);

        txtSuppTotal.setBackground(new java.awt.Color(255, 255, 204));
        txtSuppTotal.setEnabled(false);
        jPanel2.add(txtSuppTotal);
        txtSuppTotal.setBounds(116, 383, 108, 22);

        jLabel45.setText("Pickup");
        jPanel2.add(jLabel45);
        jLabel45.setBounds(408, 104, 54, 15);

        txtAgentPickup.setNextFocusableComponent(txtAgentMinCharges);
        txtAgentPickup.setEnabled(false);
        txtAgentPickup.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAgentPickupFocusLost(evt);
            }
        });

        jPanel2.add(txtAgentPickup);
        txtAgentPickup.setBounds(469, 100, 108, 22);

        jLabel46.setText("Min. Charges");
        jPanel2.add(jLabel46);
        jLabel46.setBounds(375, 160, 88, 15);

        txtAgentMinCharges.setNextFocusableComponent(txtAgentCC);
        txtAgentMinCharges.setEnabled(false);
        txtAgentMinCharges.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAgentMinChargesFocusLost(evt);
            }
        });

        jPanel2.add(txtAgentMinCharges);
        txtAgentMinCharges.setBounds(469, 157, 108, 22);

        txtAgentCC.setNextFocusableComponent(txtAgentFSC);
        txtAgentCC.setEnabled(false);
        txtAgentCC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAgentCCFocusLost(evt);
            }
        });

        jPanel2.add(txtAgentCC);
        txtAgentCC.setBounds(469, 181, 108, 22);

        jLabel47.setText("CC Fees");
        jPanel2.add(jLabel47);
        jLabel47.setBounds(375, 184, 88, 15);

        jLabel48.setText("FSC");
        jPanel2.add(jLabel48);
        jLabel48.setBounds(376, 209, 88, 15);

        txtAgentFSC.setNextFocusableComponent(txtAgentSSC);
        txtAgentFSC.setEnabled(false);
        txtAgentFSC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAgentFSCFocusLost(evt);
            }
        });

        jPanel2.add(txtAgentFSC);
        txtAgentFSC.setBounds(469, 206, 108, 22);

        txtAgentSSC.setNextFocusableComponent(txtAgentOthers);
        txtAgentSSC.setEnabled(false);
        txtAgentSSC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAgentSSCFocusLost(evt);
            }
        });

        jPanel2.add(txtAgentSSC);
        txtAgentSSC.setBounds(469, 232, 108, 22);

        jLabel49.setText("SSC");
        jPanel2.add(jLabel49);
        jLabel49.setBounds(377, 235, 88, 15);

        jLabel50.setText("Others");
        jPanel2.add(jLabel50);
        jLabel50.setBounds(378, 261, 88, 15);

        txtAgentOthers.setNextFocusableComponent(txtAgentDO);
        txtAgentOthers.setEnabled(false);
        txtAgentOthers.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAgentOthersFocusLost(evt);
            }
        });

        jPanel2.add(txtAgentOthers);
        txtAgentOthers.setBounds(469, 258, 108, 22);

        txtAgentDO.setNextFocusableComponent(txtAgentBB);
        txtAgentDO.setEnabled(false);
        txtAgentDO.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAgentDOFocusLost(evt);
            }
        });

        jPanel2.add(txtAgentDO);
        txtAgentDO.setBounds(469, 306, 108, 22);

        jLabel51.setText("DO Fees");
        jPanel2.add(jLabel51);
        jLabel51.setBounds(374, 309, 95, 15);

        jLabel52.setText("Total (INR)");
        jPanel2.add(jLabel52);
        jLabel52.setBounds(376, 420, 95, 15);

        txtAgentTotal.setBackground(new java.awt.Color(255, 255, 204));
        txtAgentTotal.setEnabled(false);
        jPanel2.add(txtAgentTotal);
        txtAgentTotal.setBounds(469, 417, 108, 22);

        jLabel53.setText("BB");
        jPanel2.add(jLabel53);
        jLabel53.setBounds(374, 333, 95, 15);

        txtAgentBB.setNextFocusableComponent(txtAgentCartage);
        txtAgentBB.setEnabled(false);
        txtAgentBB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAgentBBFocusLost(evt);
            }
        });

        jPanel2.add(txtAgentBB);
        txtAgentBB.setBounds(469, 330, 108, 22);

        jLabel54.setText("Cartage");
        jPanel2.add(jLabel54);
        jLabel54.setBounds(375, 358, 95, 15);

        txtAgentCartage.setNextFocusableComponent(txtAgentLocalOthers);
        txtAgentCartage.setEnabled(false);
        txtAgentCartage.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAgentCartageFocusLost(evt);
            }
        });

        jPanel2.add(txtAgentCartage);
        txtAgentCartage.setBounds(469, 355, 108, 22);

        jLabel55.setText("Others");
        jPanel2.add(jLabel55);
        jLabel55.setBounds(376, 383, 95, 15);

        txtAgentLocalOthers.setNextFocusableComponent(cmdNext4);
        txtAgentLocalOthers.setEnabled(false);
        txtAgentLocalOthers.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAgentLocalOthersFocusLost(evt);
            }
        });

        jPanel2.add(txtAgentLocalOthers);
        txtAgentLocalOthers.setBounds(469, 380, 108, 22);

        jPanel5.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.add(jPanel5);
        jPanel5.setBounds(457, 406, 129, 6);

        cmdNext4.setText("Next");
        cmdNext4.setNextFocusableComponent(cmdBack4);
        jPanel2.add(cmdNext4);
        cmdNext4.setBounds(643, 400, 88, 25);

        cmdBack4.setText("Back");
        cmdBack4.setNextFocusableComponent(cmbCurrency);
        jPanel2.add(cmdBack4);
        cmdBack4.setBounds(644, 434, 88, 25);

        jLabel1.setText("(in INR)");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(243, 49, 45, 15);

        txtSuppPickup1.setNextFocusableComponent(txtSuppMinCharges);
        txtSuppPickup1.setEnabled(false);
        jPanel2.add(txtSuppPickup1);
        txtSuppPickup1.setBounds(232, 102, 108, 22);

        txtSuppMinCharges1.setNextFocusableComponent(txtSuppCC);
        txtSuppMinCharges1.setEnabled(false);
        jPanel2.add(txtSuppMinCharges1);
        txtSuppMinCharges1.setBounds(232, 159, 108, 22);

        txtSuppCC1.setNextFocusableComponent(txtSuppFSC);
        txtSuppCC1.setEnabled(false);
        jPanel2.add(txtSuppCC1);
        txtSuppCC1.setBounds(232, 183, 108, 22);

        txtSuppFSC1.setNextFocusableComponent(txtSuppSSC);
        txtSuppFSC1.setEnabled(false);
        jPanel2.add(txtSuppFSC1);
        txtSuppFSC1.setBounds(232, 208, 108, 22);

        txtSuppSSC1.setNextFocusableComponent(txtSuppOthers);
        txtSuppSSC1.setEnabled(false);
        jPanel2.add(txtSuppSSC1);
        txtSuppSSC1.setBounds(232, 234, 108, 22);

        txtSuppOthers1.setNextFocusableComponent(txtLocalDescription);
        txtSuppOthers1.setEnabled(false);
        jPanel2.add(txtSuppOthers1);
        txtSuppOthers1.setBounds(232, 260, 108, 22);

        jLabel8.setText("(in INR)");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(640, 48, 45, 15);

        txtAgentPickup1.setNextFocusableComponent(txtAgentMinCharges);
        txtAgentPickup1.setEnabled(false);
        jPanel2.add(txtAgentPickup1);
        txtAgentPickup1.setBounds(591, 100, 108, 22);

        txtAgentMinCharges1.setNextFocusableComponent(txtAgentCC);
        txtAgentMinCharges1.setEnabled(false);
        jPanel2.add(txtAgentMinCharges1);
        txtAgentMinCharges1.setBounds(591, 157, 108, 22);

        txtAgentCC1.setNextFocusableComponent(txtAgentFSC);
        txtAgentCC1.setEnabled(false);
        jPanel2.add(txtAgentCC1);
        txtAgentCC1.setBounds(591, 181, 108, 22);

        txtAgentFSC1.setNextFocusableComponent(txtAgentSSC);
        txtAgentFSC1.setEnabled(false);
        jPanel2.add(txtAgentFSC1);
        txtAgentFSC1.setBounds(591, 206, 108, 22);

        txtAgentSSC1.setNextFocusableComponent(txtAgentOthers);
        txtAgentSSC1.setEnabled(false);
        jPanel2.add(txtAgentSSC1);
        txtAgentSSC1.setBounds(591, 232, 108, 22);

        txtAgentOthers1.setNextFocusableComponent(txtAgentDO);
        txtAgentOthers1.setEnabled(false);
        jPanel2.add(txtAgentOthers1);
        txtAgentOthers1.setBounds(591, 258, 108, 22);

        jLabel19.setText("Currency Rate");
        jPanel2.add(jLabel19);
        jLabel19.setBounds(259, 12, 92, 15);

        txtCurrencyRate.setNextFocusableComponent(txtSuppMinCharges);
        txtCurrencyRate.setEnabled(false);
        txtCurrencyRate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCurrencyRateFocusLost(evt);
            }
        });

        jPanel2.add(txtCurrencyRate);
        txtCurrencyRate.setBounds(357, 7, 108, 22);

        chkSuppExWorks.setText("Selected");
        chkSuppExWorks.setEnabled(false);
        chkSuppExWorks.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkSuppExWorksItemStateChanged(evt);
            }
        });

        jPanel2.add(chkSuppExWorks);
        chkSuppExWorks.setBounds(163, 78, 76, 23);

        chkSuppFreight.setText("Selected");
        chkSuppFreight.setEnabled(false);
        chkSuppFreight.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkSuppFreightItemStateChanged(evt);
            }
        });

        jPanel2.add(chkSuppFreight);
        chkSuppFreight.setBounds(163, 131, 76, 23);

        chkSuppLocal.setText("Selected");
        chkSuppLocal.setEnabled(false);
        chkSuppLocal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkSuppLocalItemStateChanged(evt);
            }
        });

        jPanel2.add(chkSuppLocal);
        chkSuppLocal.setBounds(163, 287, 76, 23);

        chkAFLFreight.setText("Selected");
        chkAFLFreight.setEnabled(false);
        chkAFLFreight.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkAFLFreightItemStateChanged(evt);
            }
        });

        jPanel2.add(chkAFLFreight);
        chkAFLFreight.setBounds(471, 130, 76, 23);

        chkAFLExWorks.setText("Selected");
        chkAFLExWorks.setEnabled(false);
        chkAFLExWorks.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkAFLExWorksItemStateChanged(evt);
            }
        });

        jPanel2.add(chkAFLExWorks);
        chkAFLExWorks.setBounds(471, 77, 76, 23);

        chkAFLLocal.setText("Selected");
        chkAFLLocal.setEnabled(false);
        chkAFLLocal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkAFLLocalItemStateChanged(evt);
            }
        });

        jPanel2.add(chkAFLLocal);
        chkAFLLocal.setBounds(471, 286, 76, 23);

        jLabel56.setText("Final Total (INR)");
        jPanel2.add(jLabel56);
        jLabel56.setBounds(7, 439, 104, 15);

        txtFinalTotal.setBackground(new java.awt.Color(204, 204, 255));
        txtFinalTotal.setFont(new java.awt.Font("Dialog", 1, 12));
        txtFinalTotal.setEnabled(false);
        jPanel2.add(txtFinalTotal);
        txtFinalTotal.setBounds(115, 436, 140, 22);

        Tab.addTab("Comparison", jPanel2);

        Tab3.setLayout(null);

        Tab3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab3FocusGained(evt);
            }
        });

        jLabel31.setText("Hierarchy ");
        Tab3.add(jLabel31);
        jLabel31.setBounds(16, 18, 66, 15);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });

        Tab3.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 14, 184, 24);

        jLabel32.setText("From");
        Tab3.add(jLabel32);
        jLabel32.setBounds(20, 52, 56, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab3.add(txtFrom);
        txtFrom.setBounds(86, 50, 182, 19);

        jLabel35.setText("Remarks");
        Tab3.add(jLabel35);
        jLabel35.setBounds(20, 82, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab3.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 78, 518, 19);

        jLabel36.setText("Your Action  ");
        Tab3.add(jLabel36);
        jLabel36.setBounds(8, 124, 76, 15);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.setEnabled(false);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 168, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.setEnabled(false);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.setEnabled(false);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.setEnabled(false);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });

        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab3.add(jPanel6);
        jPanel6.setBounds(88, 120, 182, 100);

        jLabel33.setText("Send To");
        Tab3.add(jLabel33);
        jLabel33.setBounds(18, 228, 60, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });

        Tab3.add(cmbSendTo);
        cmbSendTo.setBounds(84, 224, 184, 24);

        jLabel34.setText("Remarks");
        Tab3.add(jLabel34);
        jLabel34.setBounds(16, 264, 60, 15);

        txtToRemarks.setNextFocusableComponent(cmdBack3);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });

        Tab3.add(txtToRemarks);
        txtToRemarks.setBounds(84, 260, 516, 19);

        cmdBack3.setText("<<Back");
        cmdBack3.setNextFocusableComponent(cmbHierarchy);
        cmdBack3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack3ActionPerformed(evt);
            }
        });

        Tab3.add(cmdBack3);
        cmdBack3.setBounds(634, 338, 102, 25);

        txtFromRemarksBig.setText("...");
        txtFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFromRemarksBigActionPerformed(evt);
            }
        });

        Tab3.add(txtFromRemarksBig);
        txtFromRemarksBig.setBounds(609, 76, 43, 21);

        Tab.addTab("Approval", Tab3);

        Tab4.setLayout(null);

        Tab4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status");
        Tab4.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        Tab4.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 654, 144);

        jLabel9.setText("Document Update History");
        Tab4.add(jLabel9);
        jLabel9.setBounds(13, 190, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        Tab4.add(jScrollPane3);
        jScrollPane3.setBounds(13, 206, 505, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        Tab4.add(cmdViewHistory);
        cmdViewHistory.setBounds(530, 204, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        Tab4.add(cmdNormalView);
        cmdNormalView.setBounds(530, 235, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        Tab4.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(530, 269, 132, 24);

        txtAuditRemarks.setEnabled(false);
        Tab4.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(535, 310, 129, 19);

        Tab.addTab("Status", Tab4);

        getContentPane().add(Tab);
        Tab.setBounds(4, 68, 752, 505);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(7, 579, 750, 22);

    }//GEN-END:initComponents

    private void cmdShowPOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowPOActionPerformed
        // TODO add your handling code here:
        if(!txtPONo.getText().trim().equals(""))
        {
            AppletFrame aFrame=new AppletFrame("Purchase Order Import");
            aFrame.startAppletEx("EITLERP.Purchase.frmPOGen","Purchase Order");
            frmPOGen ObjDoc=(frmPOGen) aFrame.ObjApplet;
            ObjDoc.POType=5;
            ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,txtPONo.getText());
        }
    }//GEN-LAST:event_cmdShowPOActionPerformed

    private void chkAFLLocalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkAFLLocalItemStateChanged
        // TODO add your handling code here:
        if(!Changing)
        {
         Changing=true;
         chkSuppLocal.setSelected(!chkAFLLocal.isSelected());
         Changing=false;
         DisplayTotals();
        }
        
    }//GEN-LAST:event_chkAFLLocalItemStateChanged

    private void chkAFLFreightItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkAFLFreightItemStateChanged
        // TODO add your handling code here:
        if(!Changing)
        {
         Changing=true;
         chkSuppFreight.setSelected(!chkAFLFreight.isSelected());
         Changing=false;
         DisplayTotals();
        }
        
    }//GEN-LAST:event_chkAFLFreightItemStateChanged

    private void chkAFLExWorksItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkAFLExWorksItemStateChanged
        // TODO add your handling code here:
        
        if(!Changing)
        {
         Changing=true;
         chkSuppExWorks.setSelected(!chkAFLExWorks.isSelected());
         Changing=false;
         DisplayTotals();
        }
        
    }//GEN-LAST:event_chkAFLExWorksItemStateChanged

    private void chkSuppLocalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkSuppLocalItemStateChanged
        // TODO add your handling code here:
        if(!Changing)
        {
         Changing=true;
         chkAFLLocal.setSelected(!chkSuppLocal.isSelected());
         Changing=false;
         DisplayTotals();
        }
        
    }//GEN-LAST:event_chkSuppLocalItemStateChanged

    private void chkSuppFreightItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkSuppFreightItemStateChanged
        // TODO add your handling code here:
        if(!Changing)
        {
         Changing=true;
         chkAFLFreight.setSelected(!chkSuppFreight.isSelected());
         Changing=false;
         DisplayTotals();
        }
        
    }//GEN-LAST:event_chkSuppFreightItemStateChanged

    private void chkSuppExWorksItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkSuppExWorksItemStateChanged
        // TODO add your handling code here:
        if(!Changing)
        {
         Changing=true;
         chkAFLExWorks.setSelected(!chkSuppExWorks.isSelected());
         Changing=false;
         DisplayTotals();
        }
        
        
    }//GEN-LAST:event_chkSuppExWorksItemStateChanged
    
    private void txtCurrencyRateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCurrencyRateFocusLost
        // TODO add your handling code here:
        DisplayTotals();
    }//GEN-LAST:event_txtCurrencyRateFocusLost
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
        
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void txtFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_txtFromRemarksBigActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtRemarks;
        bigEdit.ShowEdit();
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void txtDescriptionBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescriptionBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtDescription;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_txtDescriptionBigActionPerformed
    
    private void txtAgentLocalOthersFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAgentLocalOthersFocusLost
        // TODO add your handling code here:
        DisplayTotals();
    }//GEN-LAST:event_txtAgentLocalOthersFocusLost
    
    private void txtAgentCartageFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAgentCartageFocusLost
        // TODO add your handling code here:
        DisplayTotals();
    }//GEN-LAST:event_txtAgentCartageFocusLost
    
    private void txtAgentBBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAgentBBFocusLost
        // TODO add your handling code here:
        DisplayTotals();
    }//GEN-LAST:event_txtAgentBBFocusLost
    
    private void txtAgentDOFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAgentDOFocusLost
        // TODO add your handling code here:
        DisplayTotals();
    }//GEN-LAST:event_txtAgentDOFocusLost
    
    private void txtAgentOthersFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAgentOthersFocusLost
        // TODO add your handling code here:
        DisplayTotals();
    }//GEN-LAST:event_txtAgentOthersFocusLost
    
    private void txtAgentSSCFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAgentSSCFocusLost
        // TODO add your handling code here:
        DisplayTotals();
    }//GEN-LAST:event_txtAgentSSCFocusLost
    
    private void txtAgentFSCFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAgentFSCFocusLost
        // TODO add your handling code here:
        DisplayTotals();
    }//GEN-LAST:event_txtAgentFSCFocusLost
    
    private void txtAgentCCFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAgentCCFocusLost
        // TODO add your handling code here:
        DisplayTotals();
    }//GEN-LAST:event_txtAgentCCFocusLost
    
    private void txtAgentMinChargesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAgentMinChargesFocusLost
        // TODO add your handling code here:
        DisplayTotals();
    }//GEN-LAST:event_txtAgentMinChargesFocusLost
    
    private void txtAgentPickupFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAgentPickupFocusLost
        // TODO add your handling code here:
        DisplayTotals();
    }//GEN-LAST:event_txtAgentPickupFocusLost
    
    private void txtSuppLocalChargesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSuppLocalChargesFocusLost
        // TODO add your handling code here:
        DisplayTotals();
    }//GEN-LAST:event_txtSuppLocalChargesFocusLost
    
    private void txtSuppOthersFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSuppOthersFocusLost
        // TODO add your handling code here:
        DisplayTotals();
    }//GEN-LAST:event_txtSuppOthersFocusLost
    
    private void txtSuppSSCFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSuppSSCFocusLost
        // TODO add your handling code here:
        DisplayTotals();
    }//GEN-LAST:event_txtSuppSSCFocusLost
    
    private void txtSuppFSCFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSuppFSCFocusLost
        // TODO add your handling code here:
        DisplayTotals();
    }//GEN-LAST:event_txtSuppFSCFocusLost
    
    private void txtSuppCCFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSuppCCFocusLost
        // TODO add your handling code here:
        DisplayTotals();
    }//GEN-LAST:event_txtSuppCCFocusLost
    
    private void txtSuppMinChargesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSuppMinChargesFocusLost
        // TODO add your handling code here:
        DisplayTotals();
    }//GEN-LAST:event_txtSuppMinChargesFocusLost
    
    private void txtSuppPickupFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSuppPickupFocusLost
        // TODO add your handling code here:
        DisplayTotals();
    }//GEN-LAST:event_txtSuppPickupFocusLost
    
    private void txtSuppPickupVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_txtSuppPickupVetoableChange
        // TODO add your handling code here:
        DisplayTotals();
    }//GEN-LAST:event_txtSuppPickupVetoableChange
    
    private void txtSuppPickupInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtSuppPickupInputMethodTextChanged
        // TODO add your handling code here:
        DisplayTotals();
    }//GEN-LAST:event_txtSuppPickupInputMethodTextChanged
    
    private void txtSuppIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSuppIDFocusLost
        // TODO add your handling code here:
        if(!txtSuppID.getText().trim().equals("")) {
            txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, txtSuppID.getText()));
        }
        
    }//GEN-LAST:event_txtSuppIDFocusLost
    
    private void txtSuppIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSuppIDKeyPressed
        // TODO add your handling code here:
        //=========== Supplier List ===============
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            aList.SQL="SELECT SUPPLIER_CODE,SUPP_NAME FROM D_COM_SUPP_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND BLOCKED='N' AND APPROVED=1 AND ST35_REGISTERED=1 ORDER BY SUPP_NAME";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            
            if(aList.ShowLOV()) {
                
                txtSuppID.setText(aList.ReturnVal);
                txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID,aList.ReturnVal));
            }
        }
        //=========================================
        
    }//GEN-LAST:event_txtSuppIDKeyPressed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjFreight.LoadData(EITLERPGLOBAL.gCompanyID);
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo=txtDocNo.getText();
        ObjFreight.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the user to whome document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void chkCancelledFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chkCancelledFocusGained
        // TODO add your handling code here:
        ShowMessage("Shows cancel status of this document");
    }//GEN-LAST:event_chkCancelledFocusGained
    
    private void txtPODateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPODateFocusGained
        // TODO add your handling code here:
        ShowMessage("Shows date of PO selected");
    }//GEN-LAST:event_txtPODateFocusGained
    
    private void txtPONoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPONoFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter PO no. Press F1 for the list");
    }//GEN-LAST:event_txtPONoFocusGained
    
    private void txtDocDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter date in DD/MM/YYYY");
    }//GEN-LAST:event_txtDocDateFocusGained
    
    private void Tab3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab3FocusGained
        // TODO add your handling code here:
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab3FocusGained
    
    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        // TODO add your handling code here:
        txtDocDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained
    
    private void cmdBack3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack3ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack3ActionPerformed
    
    private void cmdNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext1ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext1ActionPerformed
    
    private void Tab1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tab1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Tab1MouseClicked
    
    private void txtPONoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPONoKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==112) //F1 key pressed
        {
            String PONo="";
            LOV aList=new LOV();
            
            aList.SQL="SELECT PO_NO,DATE_FORMAT(PO_DATE,'%d/%m/%Y') AS PO_DATE from D_PUR_PO_HEADER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1";
            aList.ReturnCol=1;
            aList.SecondCol=2;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=1;
            
            if(aList.ShowLOV()) {
                txtPONo.setText(aList.ReturnVal);
                txtPODate.setText(aList.SecondVal);
            }
        }
    }//GEN-LAST:event_txtPONoKeyPressed
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(true);
        OpgHold.setSelected(false);
        
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(true);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);
        
        SetupApproval();
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjFreight.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        Delete();
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        //Set Default Send to User
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab3;
    private javax.swing.JPanel Tab4;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkAFLExWorks;
    private javax.swing.JCheckBox chkAFLFreight;
    private javax.swing.JCheckBox chkAFLLocal;
    private javax.swing.JCheckBox chkCancelled;
    private javax.swing.JCheckBox chkSuppExWorks;
    private javax.swing.JCheckBox chkSuppFreight;
    private javax.swing.JCheckBox chkSuppLocal;
    private javax.swing.JComboBox cmbCurrency;
    private javax.swing.JComboBox cmbGrossUnit;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbOrderMode;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbTransporter;
    private javax.swing.JComboBox cmbVolumeUnit;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack3;
    private javax.swing.JButton cmdBack4;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdNext4;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowPO;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAgentBB;
    private javax.swing.JTextField txtAgentCC;
    private javax.swing.JTextField txtAgentCC1;
    private javax.swing.JTextField txtAgentCartage;
    private javax.swing.JTextField txtAgentDO;
    private javax.swing.JTextField txtAgentFSC;
    private javax.swing.JTextField txtAgentFSC1;
    private javax.swing.JTextField txtAgentLocalOthers;
    private javax.swing.JTextField txtAgentMinCharges;
    private javax.swing.JTextField txtAgentMinCharges1;
    private javax.swing.JTextField txtAgentOthers;
    private javax.swing.JTextField txtAgentOthers1;
    private javax.swing.JTextField txtAgentPickup;
    private javax.swing.JTextField txtAgentPickup1;
    private javax.swing.JTextField txtAgentSSC;
    private javax.swing.JTextField txtAgentSSC1;
    private javax.swing.JTextField txtAgentTotal;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtCartons;
    private javax.swing.JTextField txtCurrencyRate;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JButton txtDescriptionBig;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFinalTotal;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JButton txtFromRemarksBig;
    private javax.swing.JTextField txtGrossWeight;
    private javax.swing.JTextField txtLocalDescription;
    private javax.swing.JTextField txtPODate;
    private javax.swing.JTextField txtPONo;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtSuppCC;
    private javax.swing.JTextField txtSuppCC1;
    private javax.swing.JTextField txtSuppFSC;
    private javax.swing.JTextField txtSuppFSC1;
    private javax.swing.JTextField txtSuppID;
    private javax.swing.JTextField txtSuppLocalCharges;
    private javax.swing.JTextField txtSuppMinCharges;
    private javax.swing.JTextField txtSuppMinCharges1;
    private javax.swing.JLabel txtSuppName;
    private javax.swing.JTextField txtSuppOthers;
    private javax.swing.JTextField txtSuppOthers1;
    private javax.swing.JTextField txtSuppPickup;
    private javax.swing.JTextField txtSuppPickup1;
    private javax.swing.JTextField txtSuppSSC;
    private javax.swing.JTextField txtSuppSSC1;
    private javax.swing.JTextField txtSuppTotal;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtVolumeCubic;
    private javax.swing.JTextField txtVolumeWeight;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try
        {
        if(EditMode==0)
        {
           if(ObjFreight.getAttribute("APPROVED").getInt()==1)
           {
            lblTitle.setBackground(Color.BLUE);   
           }
           
           if(ObjFreight.getAttribute("APPROVED").getInt()!=1)
           {
            lblTitle.setBackground(Color.GRAY);   
           }
           
           if(ObjFreight.getAttribute("CANCELLED").getInt()==1)
           {
            lblTitle.setBackground(Color.RED);   
           }

            
        }
        }
        catch(Exception c)
        {
            
        }
        //============================================//
        
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=42;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
       
        
        try {
            ClearFields();
            
            txtDocNo.setText((String)ObjFreight.getAttribute("DOC_NO").getObj());
            lblTitle.setText("FREIGHT COMPARISON SHEET -"+txtDocNo.getText());
            lblRevNo.setText(Integer.toString((int)ObjFreight.getAttribute("REVISION_NO").getVal()));
            txtDocDate.setText(EITLERPGLOBAL.formatDate((String)ObjFreight.getAttribute("DOC_DATE").getObj()));
            
            
            txtPONo.setText((String)ObjFreight.getAttribute("PO_NO").getObj());
            txtPODate.setText(EITLERPGLOBAL.formatDate((String)ObjFreight.getAttribute("PO_DATE").getObj()));
            txtDescription.setText((String)ObjFreight.getAttribute("DESCRIPTION").getObj());
            txtSuppID.setText((String)ObjFreight.getAttribute("SUPP_ID").getObj());
            EITLERPGLOBAL.setComboIndex(cmbOrderMode,(String)ObjFreight.getAttribute("ORDER_MODE").getObj());
            EITLERPGLOBAL.setComboIndex(cmbTransporter,(int)ObjFreight.getAttribute("TRANSPORT_ID").getVal());
            txtGrossWeight.setText(Double.toString(ObjFreight.getAttribute("GROSS_WEIGHT").getVal()));
            EITLERPGLOBAL.setComboIndex(cmbGrossUnit,(int)ObjFreight.getAttribute("GROSS_UNIT_ID").getVal());
            txtCartons.setText((String)ObjFreight.getAttribute("CARTONS").getObj());
            txtVolumeCubic.setText(Double.toString(ObjFreight.getAttribute("VOLUME_CMT").getVal()));
            txtVolumeWeight.setText(Double.toString(ObjFreight.getAttribute("VOLUME_WEIGHT").getVal()));
            EITLERPGLOBAL.setComboIndex(cmbVolumeUnit,(int)ObjFreight.getAttribute("VOLUME_UNIT_ID").getVal());
            txtRemarks.setText((String)ObjFreight.getAttribute("REMARKS").getObj());
            EITLERPGLOBAL.setComboIndex(cmbCurrency,(int)ObjFreight.getAttribute("CURRENCY_ID").getVal());
            txtCurrencyRate.setText(Double.toString(ObjFreight.getAttribute("CURRENCY_RATE").getVal()));
            txtSuppPickup.setText(Double.toString(ObjFreight.getAttribute("SUPP_PICKUP").getVal()));
            txtSuppMinCharges.setText(Double.toString(ObjFreight.getAttribute("SUPP_MIN_CHARGES").getVal()));
            txtSuppCC.setText(Double.toString(ObjFreight.getAttribute("SUPP_CC_FEES").getVal()));
            txtSuppFSC.setText(Double.toString(ObjFreight.getAttribute("SUPP_FSC").getVal()));
            txtSuppSSC.setText(Double.toString(ObjFreight.getAttribute("SUPP_SSC").getVal()));
            txtSuppOthers.setText(Double.toString(ObjFreight.getAttribute("SUPP_OTHERS").getVal()));
            txtSuppLocalCharges.setText(Double.toString(ObjFreight.getAttribute("SUPP_LOCAL_CHARGES").getVal()));
            txtLocalDescription.setText((String)ObjFreight.getAttribute("SUPP_LOCAL_CHARGES_DESC").getObj());
            
            txtAgentPickup.setText(Double.toString(ObjFreight.getAttribute("AGENT_PICKUP").getVal()));
            txtAgentMinCharges.setText(Double.toString(ObjFreight.getAttribute("AGENT_MIN_CHARGES").getVal()));
            txtAgentCC.setText(Double.toString(ObjFreight.getAttribute("AGENT_CC_FEES").getVal()));
            txtAgentFSC.setText(Double.toString(ObjFreight.getAttribute("AGENT_FSC").getVal()));
            txtAgentSSC.setText(Double.toString(ObjFreight.getAttribute("AGENT_SSC").getVal()));
            txtAgentOthers.setText(Double.toString(ObjFreight.getAttribute("AGENT_OTHERS").getVal()));
            txtAgentDO.setText(Double.toString(ObjFreight.getAttribute("AGENT_LOCAL_DO_FEES").getVal()));
            txtAgentBB.setText(Double.toString(ObjFreight.getAttribute("AGENT_LOCAL_BB").getVal()));
            txtAgentCartage.setText(Double.toString(ObjFreight.getAttribute("AGENT_LOCAL_CARTAGE").getVal()));
            txtAgentLocalOthers.setText(Double.toString(ObjFreight.getAttribute("AGENT_LOCAL_OTHERS").getVal()));
            
            chkSuppExWorks.setSelected(ObjFreight.getAttribute("SUPP_EXWORKS_SELECTED").getBool());
            chkSuppFreight.setSelected(ObjFreight.getAttribute("SUPP_FREIGHT_SELECTED").getBool());
            chkSuppLocal.setSelected(ObjFreight.getAttribute("SUPP_LOCAL_SELECTED").getBool());
            
            chkAFLExWorks.setSelected(ObjFreight.getAttribute("AFL_EXWORKS_SELECTED").getBool());
            chkAFLFreight.setSelected(ObjFreight.getAttribute("AFL_FREIGHT_SELECTED").getBool());
            chkAFLLocal.setSelected(ObjFreight.getAttribute("AFL_LOCAL_SELECTED").getBool());
            
            
            chkCancelled.setSelected(ObjFreight.getAttribute("CANCELLED").getBool());
            
            
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,(int)ObjFreight.getAttribute("HIERARCHY_ID").getVal());
            
            
            
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List=new HashMap();
            String DocNo=(String)ObjFreight.getAttribute("DOC_NO").getObj();
            List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, 42, DocNo);
            for(int i=1;i<=List.size();i++) {
                clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
                Object[] rowData=new Object[7];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
                rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
                
                DataModelA.addRow(rowData);
            }
            
            
            
            //Showing Audit Trial History
            FormatGridHS();
            HashMap History=clsFreightComparison.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for(int i=1;i<=History.size();i++) {
                clsFreightComparison ObjHistory=(clsFreightComparison)History.get(Integer.toString(i));
                Object[] rowData=new Object[5];
                
                rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(long)ObjHistory.getAttribute("UPDATED_BY").getVal());
                rowData[2]=EITLERPGLOBAL.formatDate((String)ObjHistory.getAttribute("ENTRY_DATE").getObj());
                
                String ApprovalStatus="";
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                    ApprovalStatus="Approved";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                    ApprovalStatus="Final Approved";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                    ApprovalStatus="Waiting";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                    ApprovalStatus="Rejected";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                    ApprovalStatus="Pending";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                    ApprovalStatus="Skiped";
                }
                
                
                rowData[3]=ApprovalStatus;
                rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
                
                DataModelHS.addRow(rowData);
            }
            //============================================================//
            
            DisplayTotals();
            ShowMessage("Ready");
        }
        catch(Exception e) {
            
            
        }
    }
    
    
    //Sets data to the Class Object
    private void SetData() {
        //Header Fields
        
        if(!EITLERPGLOBAL.IsNumber(txtGrossWeight.getText())) {
            txtGrossWeight.setText("0");
        }
        
        if(!EITLERPGLOBAL.IsNumber(txtVolumeCubic.getText())) {
            txtVolumeCubic.setText("0");
        }
        
        if(!EITLERPGLOBAL.IsNumber(txtVolumeWeight.getText())) {
            txtVolumeWeight.setText("0");
        }
        
        if(!EITLERPGLOBAL.IsNumber(txtSuppPickup.getText())) {
            txtSuppPickup.setText("0");
        }
        
        
        if(!EITLERPGLOBAL.IsNumber(txtSuppMinCharges.getText())) {
            txtSuppMinCharges.setText("0");
        }
        
        
        if(!EITLERPGLOBAL.IsNumber(txtSuppCC.getText())) {
            txtSuppCC.setText("0");
        }
        
        if(!EITLERPGLOBAL.IsNumber(txtSuppFSC.getText())) {
            txtSuppFSC.setText("0");
        }
        
        
        if(!EITLERPGLOBAL.IsNumber(txtSuppSSC.getText())) {
            txtSuppSSC.setText("0");
        }
        
        if(!EITLERPGLOBAL.IsNumber(txtSuppOthers.getText())) {
            txtSuppOthers.setText("0");
        }
        
        if(!EITLERPGLOBAL.IsNumber(txtSuppLocalCharges.getText())) {
            txtSuppLocalCharges.setText("0");
        }
        
        if(!EITLERPGLOBAL.IsNumber(txtAgentPickup.getText())) {
            txtAgentPickup.setText("0");
        }
        
        if(!EITLERPGLOBAL.IsNumber(txtAgentMinCharges.getText())) {
            txtAgentMinCharges.setText("0");
        }
        
        if(!EITLERPGLOBAL.IsNumber(txtAgentCC.getText())) {
            txtAgentCC.setText("0");
        }
        
        if(!EITLERPGLOBAL.IsNumber(txtAgentFSC.getText())) {
            txtAgentFSC.setText("0");
        }
        
        if(!EITLERPGLOBAL.IsNumber(txtAgentSSC.getText())) {
            txtAgentSSC.setText("0");
        }
        
        if(!EITLERPGLOBAL.IsNumber(txtAgentOthers.getText())) {
            txtAgentOthers.setText("0");
        }
        
        if(!EITLERPGLOBAL.IsNumber(txtAgentDO.getText())) {
            txtAgentDO.setText("0");
        }
        
        
        if(!EITLERPGLOBAL.IsNumber(txtAgentBB.getText())) {
            txtAgentBB.setText("0");
        }
        
        if(!EITLERPGLOBAL.IsNumber(txtAgentCartage.getText())) {
            txtAgentCartage.setText("0");
        }
        
        if(!EITLERPGLOBAL.IsNumber(txtAgentLocalOthers.getText())) {
            txtAgentLocalOthers.setText("0");
        }
        
        if(!EITLERPGLOBAL.IsNumber(txtCurrencyRate.getText())) {
            txtCurrencyRate.setText("0");
        }
        
        ObjFreight.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        ObjFreight.setAttribute("PREFIX",SelPrefix);
        ObjFreight.setAttribute("SUFFIX",SelSuffix);
        ObjFreight.setAttribute("FFNO",FFNo);
        ObjFreight.setAttribute("DOC_DATE",EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
        ObjFreight.setAttribute("PO_NO",txtPONo.getText());
        ObjFreight.setAttribute("PO_DATE",EITLERPGLOBAL.formatDateDB(txtPODate.getText()));
        ObjFreight.setAttribute("DESCRIPTION",txtDescription.getText());
        ObjFreight.setAttribute("SUPP_ID",txtSuppID.getText());
        ObjFreight.setAttribute("ORDER_MODE",EITLERPGLOBAL.getCombostrCode(cmbOrderMode));
        ObjFreight.setAttribute("TRANSPORT_ID",EITLERPGLOBAL.getComboCode(cmbTransporter));
        
        ObjFreight.setAttribute("GROSS_WEIGHT",Double.parseDouble(txtGrossWeight.getText()));
        ObjFreight.setAttribute("GROSS_UNIT_ID",EITLERPGLOBAL.getComboCode(cmbGrossUnit));
        ObjFreight.setAttribute("CARTONS",txtCartons.getText());
        ObjFreight.setAttribute("VOLUME_CMT",Double.parseDouble(txtVolumeCubic.getText()));
        ObjFreight.setAttribute("VOLUME_WEIGHT",Double.parseDouble(txtVolumeWeight.getText()));
        ObjFreight.setAttribute("VOLUME_UNIT_ID",EITLERPGLOBAL.getComboCode(cmbVolumeUnit));
        ObjFreight.setAttribute("REMARKS",txtRemarks.getText());
        ObjFreight.setAttribute("CURRENCY_ID",EITLERPGLOBAL.getComboCode(cmbCurrency));
        ObjFreight.setAttribute("CURRENCY_RATE",Double.parseDouble(txtCurrencyRate.getText()));
        ObjFreight.setAttribute("SUPP_PICKUP",Double.parseDouble(txtSuppPickup.getText()));
        ObjFreight.setAttribute("SUPP_MIN_CHARGES",Double.parseDouble(txtSuppMinCharges.getText()));
        ObjFreight.setAttribute("SUPP_CC_FEES",Double.parseDouble(txtSuppCC.getText()));
        ObjFreight.setAttribute("SUPP_FSC",Double.parseDouble(txtSuppFSC.getText()));
        ObjFreight.setAttribute("SUPP_SSC",Double.parseDouble(txtSuppSSC.getText()));
        ObjFreight.setAttribute("SUPP_OTHERS",Double.parseDouble(txtSuppOthers.getText()));
        ObjFreight.setAttribute("SUPP_LOCAL_CHARGES",Double.parseDouble(txtSuppLocalCharges.getText()));
        ObjFreight.setAttribute("SUPP_LOCAL_CHARGES_DESC",txtLocalDescription.getText());
        ObjFreight.setAttribute("AGENT_PICKUP",Double.parseDouble(txtAgentPickup.getText()));
        ObjFreight.setAttribute("AGENT_MIN_CHARGES",Double.parseDouble(txtAgentMinCharges.getText()));
        ObjFreight.setAttribute("AGENT_CC_FEES",Double.parseDouble(txtAgentCC.getText()));
        ObjFreight.setAttribute("AGENT_FSC",Double.parseDouble(txtAgentFSC.getText()));
        ObjFreight.setAttribute("AGENT_SSC",Double.parseDouble(txtAgentSSC.getText()));
        ObjFreight.setAttribute("AGENT_OTHERS",Double.parseDouble(txtAgentOthers.getText()));
        ObjFreight.setAttribute("AGENT_LOCAL_DO_FEES",Double.parseDouble(txtAgentDO.getText()));
        ObjFreight.setAttribute("AGENT_LOCAL_BB",Double.parseDouble(txtAgentBB.getText()));
        ObjFreight.setAttribute("AGENT_LOCAL_CARTAGE",Double.parseDouble(txtAgentCartage.getText()));
        ObjFreight.setAttribute("AGENT_LOCAL_OTHERS",Double.parseDouble(txtAgentLocalOthers.getText()));
        
        ObjFreight.setAttribute("SUPP_EXWORKS_SELECTED",chkSuppExWorks.isSelected());
        ObjFreight.setAttribute("SUPP_FREIGHT_SELECTED",chkSuppFreight.isSelected());
        ObjFreight.setAttribute("SUPP_LOCAL_SELECTED",chkSuppLocal.isSelected());
        ObjFreight.setAttribute("AFL_EXWORKS_SELECTED",chkAFLExWorks.isSelected());
        ObjFreight.setAttribute("AFL_FREIGHT_SELECTED",chkAFLFreight.isSelected());
        ObjFreight.setAttribute("AFL_LOCAL_SELECTED",chkAFLLocal.isSelected());
        
        if(chkCancelled.isSelected()) {
            ObjFreight.setAttribute("CANCELLED",true);
        }
        else {
            ObjFreight.setAttribute("CANCELLED",false);
        }
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjFreight.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            ObjFreight.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        else {
            ObjFreight.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
            ObjFreight.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        
        //----- Update Approval Specific Fields -----------//
        ObjFreight.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFreight.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjFreight.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFreight.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            ObjFreight.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjFreight.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjFreight.setAttribute("APPROVAL_STATUS","R");
        }
        
        if(OpgHold.isSelected()) {
            ObjFreight.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        
        
        
    }
    
    
    
    
    
    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        String strCondition="";
        clsUser ObjUser=new clsUser();
        
        //----- Generate cmbType ------- //
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=42");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=42");
        }
        for(int i=1;i<=List.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
        
        
        //----- Generate Department Combo ------- //
        cmbCurrencyModel=new EITLComboModel();
        cmbCurrency.removeAllItems();
        cmbCurrency.setModel(cmbCurrencyModel);
        
        List=clsCurrency.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
        for(int i=1;i<=List.size();i++) {
            clsCurrency ObjCurrency=(clsCurrency) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjCurrency.getAttribute("CURRENCY_ID").getVal();
            aData.Text=(String)ObjCurrency.getAttribute("CURRENCY_DESC").getObj();
            cmbCurrencyModel.addElement(aData);
        }
        //------------------------------ //
        
        
        
        cmbTransporterModel=new EITLComboModel();
        cmbTransporter.removeAllItems();
        cmbTransporter.setModel(cmbTransporterModel);
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND PARA_ID='TRANSPORT'";
        
        List=clsParameter.getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsParameter ObjPara=(clsParameter) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjPara.getAttribute("PARA_CODE").getVal();
            aData.Text=(String)ObjPara.getAttribute("DESC").getObj();
            aData.strCode="";
            cmbTransporterModel.addElement(aData);
        }
        
        
        
        cmbTransporterModel=new EITLComboModel();
        cmbTransporter.removeAllItems();
        cmbTransporter.setModel(cmbTransporterModel);
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND PARA_ID='TRANSPORT'";
        
        List=clsParameter.getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsParameter ObjPara=(clsParameter) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjPara.getAttribute("PARA_CODE").getVal();
            aData.Text=(String)ObjPara.getAttribute("DESC").getObj();
            aData.strCode="";
            cmbTransporterModel.addElement(aData);
        }
        
        
        cmbGrossUnitModel=new EITLComboModel();
        cmbGrossUnit.removeAllItems();
        cmbGrossUnit.setModel(cmbGrossUnitModel);
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND PARA_ID='UNIT'";
        
        List=clsParameter.getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsParameter ObjPara=(clsParameter) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjPara.getAttribute("PARA_CODE").getVal();
            aData.Text=(String)ObjPara.getAttribute("DESC").getObj();
            aData.strCode="";
            cmbGrossUnitModel.addElement(aData);
        }
        
        
        cmbVolumeUnitModel=new EITLComboModel();
        cmbVolumeUnit.removeAllItems();
        cmbVolumeUnit.setModel(cmbVolumeUnitModel);
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND PARA_ID='UNIT'";
        
        List=clsParameter.getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsParameter ObjPara=(clsParameter) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjPara.getAttribute("PARA_CODE").getVal();
            aData.Text=(String)ObjPara.getAttribute("DESC").getObj();
            aData.strCode="";
            cmbVolumeUnitModel.addElement(aData);
        }
        
        
        
        cmbOrderModeModel=new EITLComboModel();
        cmbOrderMode.removeAllItems();
        cmbOrderMode.setModel(cmbOrderModeModel);
        
        ComboData aData=new ComboData();
        aData.Text="FOB";
        aData.strCode="FOB";
        cmbOrderModeModel.addElement(aData);
        
        
        aData=new ComboData();
        aData.Text="CFR";
        aData.strCode="CFR";
        cmbOrderModeModel.addElement(aData);
        
        aData=new ComboData();
        aData.Text="CIF";
        aData.strCode="CIF";
        cmbOrderModeModel.addElement(aData);
        
        aData=new ComboData();
        aData.Text="C&I";
        aData.strCode="C&I";
        cmbOrderModeModel.addElement(aData);
        
        aData=new ComboData();
        aData.Text="EXW";
        aData.strCode="EXW";
        cmbOrderModeModel.addElement(aData);
        
        
    }
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, 42,(String)ObjFreight.getAttribute("DOC_NO").getObj());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
        
    }
    
    private void SetupApproval() {
        // --- Hierarchy Change Rights Check --------
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,785)) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }*/
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        }
        else
        {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, 42,(String)ObjFreight.getAttribute("DOC_NO").getObj());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,42,FromUserID,(String)ObjFreight.getAttribute("DOC_NO").getObj());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,781)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,292)) {
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }*/
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,783)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,784)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    
    
    private void ClearFields() {
        txtDocDate.setText("");
        txtPONo.setText("");
        txtPODate.setText("");
        txtDescription.setText("");
        txtSuppID.setText("");
        txtSuppName.setText("");
        txtGrossWeight.setText("");
        txtCartons.setText("");
        txtVolumeCubic.setText("");
        txtVolumeWeight.setText("");
        txtRemarks.setText("");
        
        txtSuppPickup.setText("");
        txtSuppMinCharges.setText("");
        txtSuppCC.setText("");
        txtSuppFSC.setText("");
        txtSuppSSC.setText("");
        txtSuppOthers.setText("");
        txtLocalDescription.setText("");
        txtSuppLocalCharges.setText("");
        txtAgentPickup.setText("");
        txtAgentMinCharges.setText("");
        txtAgentFSC.setText("");
        txtAgentCC.setText("");
        txtAgentSSC.setText("");
        txtAgentOthers.setText("");
        txtAgentDO.setText("");
        txtAgentCartage.setText("");
        txtAgentBB.setText("");
        txtAgentLocalOthers.setText("");
        
        txtSuppPickup1.setText("");
        txtSuppMinCharges1.setText("");
        txtSuppCC1.setText("");
        txtSuppFSC1.setText("");
        txtSuppSSC1.setText("");
        txtSuppOthers1.setText("");
        
        txtAgentPickup1.setText("");
        txtAgentMinCharges1.setText("");
        txtAgentFSC1.setText("");
        txtAgentCC1.setText("");
        txtAgentSSC1.setText("");
        txtAgentOthers1.setText("");
        
        txtToRemarks.setText("");
        
        chkSuppExWorks.setSelected(false);
        chkSuppFreight.setSelected(false);
        chkSuppLocal.setSelected(false);
        chkAFLExWorks.setSelected(false);
        chkAFLFreight.setSelected(false);
        chkAFLLocal.setSelected(false);
        
        
        FormatGridA();
        FormatGridHS();
    }
    
    private void SetFields(boolean pStat) {
        txtDocDate.setEnabled(pStat);
        txtPONo.setEnabled(pStat);
        txtDescription.setEnabled(pStat);
        txtSuppID.setEnabled(pStat);
        cmbOrderMode.setEnabled(pStat);
        cmbTransporter.setEnabled(pStat);
        txtGrossWeight.setEnabled(pStat);
        cmbGrossUnit.setEnabled(pStat);
        txtCartons.setEnabled(pStat);
        txtVolumeCubic.setEnabled(pStat);
        txtVolumeWeight.setEnabled(pStat);
        cmbVolumeUnit.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        cmbCurrency.setEnabled(pStat);
        txtSuppPickup.setEnabled(pStat);
        txtSuppMinCharges.setEnabled(pStat);
        txtSuppCC.setEnabled(pStat);
        txtSuppFSC.setEnabled(pStat);
        txtSuppSSC.setEnabled(pStat);
        txtSuppOthers.setEnabled(pStat);
        txtLocalDescription.setEnabled(pStat);
        txtSuppLocalCharges.setEnabled(pStat);
        txtAgentPickup.setEnabled(pStat);
        txtAgentMinCharges.setEnabled(pStat);
        txtAgentFSC.setEnabled(pStat);
        txtAgentCC.setEnabled(pStat);
        txtAgentSSC.setEnabled(pStat);
        txtAgentOthers.setEnabled(pStat);
        txtAgentDO.setEnabled(pStat);
        txtAgentCartage.setEnabled(pStat);
        txtAgentBB.setEnabled(pStat);
        txtAgentLocalOthers.setEnabled(pStat);
        txtCurrencyRate.setEnabled(pStat);
        chkCancelled.setEnabled(pStat);
        
        
        chkSuppExWorks.setEnabled(pStat);
        chkSuppFreight.setEnabled(pStat);
        chkSuppLocal.setEnabled(pStat);
        chkAFLExWorks.setEnabled(pStat);
        chkAFLFreight.setEnabled(pStat);
        chkAFLLocal.setEnabled(pStat);
        
        
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        SetupApproval();
        
    }
    
    private boolean Validate() {
        int ValidEntryCount=0;
        
        //Now Header level validations
        if(txtDocDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter Date");
            return false;
        }
        
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the hierarchy.");
            return false;
        }
        
        if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null,"Please select the Approval Action");
            return false;
        }
        
        if(!EITLERPGLOBAL.isDate(txtDocDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid Approval Date");
            return false;
        }
        
        if(OpgReject.isSelected()&&txtToRemarks.getText().trim().equals(""))
        {
          JOptionPane.showMessageDialog(null,"Please enter the remarks for rejection");
          return false;
        }
        
//        if( (OpgApprove.isSelected()||OpgReject.isSelected())&&cmbSendTo.getItemCount()<=0)
//        {
//          JOptionPane.showMessageDialog(null,"Please select the user, to whom rejected document to be send");
//          return false;
//        }

        
        return true;
    }
    
    
    
    
    private void Add() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        
        //Now Generate new document no.
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=42;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix; //Selected Prefix;
            FFNo=aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 42, FFNo,  false));
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
            txtDocDate.requestFocus();
            
            lblTitle.setText("FREIGHT COMPARISON SHEET -"+txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
        
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=(String)ObjFreight.getAttribute("DOC_NO").getObj();
        if(ObjFreight.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            EITLERPGLOBAL.ChangeCursorToWait(this);
            EditMode=EITLERPGLOBAL.EDIT;
            GenerateCombos();
            
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//
            
            if(ApprovalFlow.IsCreator(42,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,782)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            DisableToolbar();
            OpgHold.setSelected(true);
            txtDocDate.requestFocus();
            EITLERPGLOBAL.ChangeCursorToDefault(this);
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=(String)ObjFreight.getAttribute("DOC_NO").getObj();
        
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            if(ObjFreight.CanDelete(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
                if(ObjFreight.Delete(EITLERPGLOBAL.gNewUserID)) {
                    MoveLast();
                }
                else {
                    JOptionPane.showMessageDialog(null,"Error occured while deleting. Error is "+ObjFreight.LastError);
                }
            }
            else {
                JOptionPane.showMessageDialog(null,"You cannot delete this record. It is either approved/rejected record or waiting approval for other user or is referred in other documents");
            }
        }
    }
    
    private void Save() {
        //Form level validations
        if(Validate()==false) {
            return; //Validation failed
        }
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjFreight.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjFreight.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjFreight.Update()) {
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjFreight.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        ShowMessage("Ready");
        
        try
        {
        frmPA.RefreshView();
        }catch(Exception e){}
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    public void FindEx(String pApprovalNo) {
        ObjFreight.Filter(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND DOC_NO='"+pApprovalNo+"'",EITLERPGLOBAL.gCompanyID);
        MoveLast();
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Purchase.frmFreightComparisonFind",true);
        frmFreightComparisonFind ObjReturn= (frmFreightComparisonFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            //Add PO Type
            if(!ObjReturn.strQuery.trim().equals("")) {
                ObjReturn.strQuery=ObjReturn.strQuery;
            }
            else {
                ObjReturn.strQuery=" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND DOC_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND DOC_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' ";
            }
            
            
            if(!ObjFreight.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveLast();
        }
        
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjFreight.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjFreight.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjFreight.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjFreight.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    //Recurses through the hierarchy of classes
    //until it finds Frame
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
    
    public void FindEx(int pCompanyID,String pDocNo) {
        ObjFreight.Filter(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND DOC_NO='"+pDocNo+"'",pCompanyID);
        ObjFreight.MoveLast();
        DisplayData();
    }
    
    public void FindWaiting() {
        ObjFreight.Filter(" WHERE DOC_NO IN (SELECT D_PUR_FREIGHT_COMPARISON.DOC_NO FROM D_PUR_FREIGHT_COMPARISON,D_COM_DOC_DATA WHERE D_PUR_FREIGHT_COMPARISON.DOC_NO=D_COM_DOC_DATA.DOC_NO AND D_PUR_FREIGHT_COMPARISON.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_PUR_FREIGHT_COMPARISON.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND D_COM_DOC_DATA.MODULE_ID=42)",EITLERPGLOBAL.gCompanyID);
        ObjFreight.MoveLast();
        DisplayData();
    }
    
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Tab1.getComponent(i).setEnabled(true);
                }
                
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        
        
        
    }
    
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    
    private void DisplayTotals() {
        double SuppTotal=0;
        double AgentTotal=0;
        double FinalTotal=0;
        double CurrencyRate=1;
        
        //Supplier Totals
        
        if(EITLERPGLOBAL.IsNumber(txtCurrencyRate.getText())) {
            CurrencyRate=Double.parseDouble(txtCurrencyRate.getText());
            
            if(CurrencyRate==0) {
                CurrencyRate=1;
            }
        }
        
        
        //IN FOREIGN CURRENCY
        if(EITLERPGLOBAL.IsNumber(txtSuppPickup.getText())) {
            SuppTotal+=Double.parseDouble(txtSuppPickup.getText())*CurrencyRate;
        
            txtSuppPickup1.setText(Double.toString(EITLERPGLOBAL.round(Double.parseDouble(txtSuppPickup.getText())*CurrencyRate,3)));
            
            if(chkSuppExWorks.isSelected()) {
                FinalTotal+=Double.parseDouble(txtSuppPickup.getText())*CurrencyRate;
            }
            
        }
        
        
        
        if(EITLERPGLOBAL.IsNumber(txtSuppMinCharges.getText())) {
            SuppTotal+=Double.parseDouble(txtSuppMinCharges.getText())*CurrencyRate;
            txtSuppMinCharges1.setText(Double.toString(EITLERPGLOBAL.round(Double.parseDouble(txtSuppMinCharges.getText())*CurrencyRate, 3)));
            
            if(chkSuppFreight.isSelected()) {
                FinalTotal+=Double.parseDouble(txtSuppMinCharges.getText())*CurrencyRate;
            }
        }
        
        if(EITLERPGLOBAL.IsNumber(txtSuppCC.getText())) {
            SuppTotal+=Double.parseDouble(txtSuppCC.getText())*CurrencyRate;
            txtSuppCC1.setText(Double.toString(EITLERPGLOBAL.round(Double.parseDouble(txtSuppCC.getText())*CurrencyRate,3)));
            
            if(chkSuppFreight.isSelected()) {
                FinalTotal+=Double.parseDouble(txtSuppCC.getText())*CurrencyRate;
            }
            
        }
        
        if(EITLERPGLOBAL.IsNumber(txtSuppFSC.getText())) {
            SuppTotal+=Double.parseDouble(txtSuppFSC.getText())*CurrencyRate;
            txtSuppFSC1.setText(Double.toString(EITLERPGLOBAL.round(Double.parseDouble(txtSuppFSC.getText())*CurrencyRate,3)));
            
            if(chkSuppFreight.isSelected()) {
                FinalTotal+=Double.parseDouble(txtSuppFSC.getText())*CurrencyRate;
            }
        }
        
        if(EITLERPGLOBAL.IsNumber(txtSuppSSC.getText())) {
            SuppTotal+=Double.parseDouble(txtSuppSSC.getText())*CurrencyRate;
            txtSuppSSC1.setText(Double.toString(EITLERPGLOBAL.round(Double.parseDouble(txtSuppSSC.getText())*CurrencyRate,3)));
            
            if(chkSuppFreight.isSelected()) {
                FinalTotal+=Double.parseDouble(txtSuppSSC.getText())*CurrencyRate;
            }
            
        }
        
        
        if(EITLERPGLOBAL.IsNumber(txtSuppOthers.getText())) {
            SuppTotal+=Double.parseDouble(txtSuppOthers.getText())*CurrencyRate;
            txtSuppOthers1.setText(Double.toString(EITLERPGLOBAL.round(Double.parseDouble(txtSuppOthers.getText())*CurrencyRate,3)));
            
            if(chkSuppFreight.isSelected()) {
                FinalTotal+=Double.parseDouble(txtSuppOthers.getText())*CurrencyRate;
            }
            
        }
        
        
        
        //IN LOCAL CHARGES
        
        if(EITLERPGLOBAL.IsNumber(txtSuppLocalCharges.getText())) {
            SuppTotal+=Double.parseDouble(txtSuppLocalCharges.getText());
            
            if(chkSuppLocal.isSelected()) {
                FinalTotal+=Double.parseDouble(txtSuppLocalCharges.getText());
            }
        }
        
        
        txtSuppTotal.setText(Double.toString(EITLERPGLOBAL.round(SuppTotal,3)));
        
        
        //AGENT TOTALS
        
        //FOREIGN CURRENCY
        
        if(EITLERPGLOBAL.IsNumber(txtAgentPickup.getText())) {
            AgentTotal+=Double.parseDouble(txtAgentPickup.getText())*CurrencyRate;
            txtAgentPickup1.setText(Double.toString(EITLERPGLOBAL.round(Double.parseDouble(txtAgentPickup.getText())*CurrencyRate,3)));
            
            if(chkAFLExWorks.isSelected())
            {
              FinalTotal+=Double.parseDouble(txtAgentPickup.getText())*CurrencyRate;  
            }
        }
        
        if(EITLERPGLOBAL.IsNumber(txtAgentMinCharges.getText())) {
            AgentTotal+=Double.parseDouble(txtAgentMinCharges.getText())*CurrencyRate;
            txtAgentMinCharges1.setText(Double.toString(EITLERPGLOBAL.round(Double.parseDouble(txtAgentMinCharges.getText())*CurrencyRate,3)));
        
            if(chkAFLFreight.isSelected())
            {
              FinalTotal+=Double.parseDouble(txtAgentMinCharges.getText())*CurrencyRate;
            }
        }
        
        if(EITLERPGLOBAL.IsNumber(txtAgentFSC.getText())) {
            AgentTotal+=Double.parseDouble(txtAgentFSC.getText())*CurrencyRate;
            txtAgentFSC1.setText(Double.toString(EITLERPGLOBAL.round(Double.parseDouble(txtAgentFSC.getText())*CurrencyRate,3)));
        
            if(chkAFLFreight.isSelected())
            {
              FinalTotal+=Double.parseDouble(txtAgentFSC.getText())*CurrencyRate;
            }
            
        }
        
        if(EITLERPGLOBAL.IsNumber(txtAgentCC.getText())) {
            AgentTotal+=Double.parseDouble(txtAgentCC.getText())*CurrencyRate;
            txtAgentCC1.setText(Double.toString(EITLERPGLOBAL.round(Double.parseDouble(txtAgentCC.getText())*CurrencyRate,3)));
        
            if(chkAFLFreight.isSelected())
            {
              FinalTotal+=Double.parseDouble(txtAgentCC.getText())*CurrencyRate;
            }
        
        }
        
        if(EITLERPGLOBAL.IsNumber(txtAgentSSC.getText())) {
            AgentTotal+=Double.parseDouble(txtAgentSSC.getText())*CurrencyRate;
            txtAgentSSC1.setText(Double.toString(EITLERPGLOBAL.round(Double.parseDouble(txtAgentSSC.getText())*CurrencyRate,3)));
            
            if(chkAFLFreight.isSelected())
            {
              FinalTotal+=Double.parseDouble(txtAgentSSC.getText())*CurrencyRate;
            }
            
        }
        
        if(EITLERPGLOBAL.IsNumber(txtAgentOthers.getText())) {
            AgentTotal+=Double.parseDouble(txtAgentOthers.getText())*CurrencyRate;
            txtAgentOthers1.setText(Double.toString(EITLERPGLOBAL.round(Double.parseDouble(txtAgentOthers.getText())*CurrencyRate,3)));
            
            if(chkAFLFreight.isSelected())
            {
              FinalTotal+=Double.parseDouble(txtAgentOthers.getText())*CurrencyRate;
            }
            
        }
        
        
        if(EITLERPGLOBAL.IsNumber(txtAgentDO.getText())) {
            AgentTotal+=Double.parseDouble(txtAgentDO.getText());
            
            if(chkAFLLocal.isSelected())
            {
              FinalTotal+=Double.parseDouble(txtAgentDO.getText());
            }
            
        }
        
        if(EITLERPGLOBAL.IsNumber(txtAgentBB.getText())) {
            AgentTotal+=Double.parseDouble(txtAgentBB.getText());
            
            if(chkAFLLocal.isSelected())
            {
              FinalTotal+=Double.parseDouble(txtAgentBB.getText());
            }
            
        }
        
        if(EITLERPGLOBAL.IsNumber(txtAgentCartage.getText())) {
            AgentTotal+=Double.parseDouble(txtAgentCartage.getText());
            
            if(chkAFLLocal.isSelected())
            {
              FinalTotal+=Double.parseDouble(txtAgentCartage.getText());
            }
            

        }
        
        if(EITLERPGLOBAL.IsNumber(txtAgentLocalOthers.getText())) {
            AgentTotal+=Double.parseDouble(txtAgentLocalOthers.getText());
            
            if(chkAFLLocal.isSelected())
            {
              FinalTotal+=Double.parseDouble(txtAgentLocalOthers.getText());
            }
        }

        txtAgentTotal.setText(Double.toString(EITLERPGLOBAL.round(AgentTotal,3)));
        txtFinalTotal.setText(Double.toString(EITLERPGLOBAL.round(FinalTotal,3)));
        
    }
    
    
    private void PreviewReport() {
        if(!chkCancelled.isSelected())
        {
        try {
            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptFreightComparision.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"File error "+e.getMessage());
        }
        }
        else
        {
          JOptionPane.showMessageDialog(null,"You cannot take printout of cancelled document");  
        }
        
    }
    
    
    
}



