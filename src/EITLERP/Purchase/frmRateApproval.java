/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */
package EITLERP.Purchase;

/**
 *
 * @author nhpatel
 */
/*<APPLET CODE=frmRateApproval.class HEIGHT=530 WIDTH=665></APPLET>*/
import javax.swing.*;
import java.awt.*;
import EITLERP.*;
import EITLERP.FeltSales.common.file_management.clsDocRateApproval;
import EITLERP.Stores.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import javax.swing.text.*;
import java.sql.*;
import java.net.*;
import javax.swing.filechooser.FileNameExtensionFilter;

public class frmRateApproval extends javax.swing.JApplet {

    private HashMap colItems = new HashMap();

    private int EditMode = 0;
    private clsRateApproval ObjApproval;

    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbForDeptModel;
    private EITLTableModel DataModelA = new EITLTableModel();
    private EITLComboModel cmbUserModel;
    private EITLComboModel cmbItemModel;
    private EITLTableCellRenderer Renderer = new EITLTableCellRenderer();

    private EITLTableModel DataModel = new EITLTableModel();
    private EITLTableModel DataModelC = new EITLTableModel();
    private boolean Updating = false;
    
    private EITLTableModel DataModel_DocHistory = new EITLTableModel();

    private boolean HistoryView = false;
    private String theDocNo = "";
    private EITLTableModel DataModelHS;

    private boolean DoNotEvaluate = false;

    public frmPendingApprovals frmPA;

    String cellLastValue = "";

    /**
     * Creates new form frmTemplate
     */
    public void init() {
        System.gc();
        setSize(665, 590);
        initComponents();

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        GenerateCombos();
        ObjApproval = new clsRateApproval();
        SetMenuForRights();

        DataModel.TableReadOnly(true);

        if (getName().equals("Link")) {
            SetFields(false);
        } else {
            if (ObjApproval.LoadData(EITLERPGLOBAL.gCompanyID)) {
                ObjApproval.MoveLast();
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while loading data. Error is " + ObjApproval.LastError);
            }
        }

        txtAuditRemarks.setVisible(false);
        DataModel.TableReadOnly(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        mnuShowDoc = new javax.swing.JPopupMenu();
        mnuShowSummary = new javax.swing.JMenuItem();
        mnuShowLastPO = new javax.swing.JMenuItem();
        mnuShowIndent = new javax.swing.JMenuItem();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        OLD_REPORT = new javax.swing.JMenuItem();
        NEW_REPORT = new javax.swing.JMenuItem();
        doc_name10 = new javax.swing.JTextField();
        doc_name9 = new javax.swing.JTextField();
        doc_name8 = new javax.swing.JTextField();
        doc_name7 = new javax.swing.JTextField();
        doc_name6 = new javax.swing.JTextField();
        doc_name5 = new javax.swing.JTextField();
        doc_name4 = new javax.swing.JTextField();
        doc_name3 = new javax.swing.JTextField();
        doc_name2 = new javax.swing.JTextField();
        doc_name1 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        cmdNext1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtInquiryNo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtInquiryDate = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtPRNo = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtPRDate = new javax.swing.JTextField();
        cmdGet = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        txtSummaryNo = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtSummaryDate = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtIndentNo = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtIndentDate = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        cmdRemarksBig = new javax.swing.JButton();
        cmdShowLastPO1 = new javax.swing.JButton();
        chkCancelled = new javax.swing.JCheckBox();
        cmdSelectAll = new javax.swing.JButton();
        cmdDeSelectAll = new javax.swing.JButton();
        lblTotal = new javax.swing.JLabel();
        cmdItemHistory = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        cmbItem = new javax.swing.JComboBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableC = new javax.swing.JTable();
        cmdDisplay = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtItemExtraDesc = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtIndentDesc = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack2 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        lblAvailable1 = new javax.swing.JLabel();
        btnShow1 = new javax.swing.JButton();
        btnRemove1 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        lblAvailable2 = new javax.swing.JLabel();
        btnShow2 = new javax.swing.JButton();
        btnRemove2 = new javax.swing.JButton();
        lblAvailable3 = new javax.swing.JLabel();
        btnShow3 = new javax.swing.JButton();
        btnRemove3 = new javax.swing.JButton();
        UID_1 = new javax.swing.JLabel();
        UID_2 = new javax.swing.JLabel();
        UID_3 = new javax.swing.JLabel();
        UID_4 = new javax.swing.JLabel();
        UID_5 = new javax.swing.JLabel();
        btnRemove5 = new javax.swing.JButton();
        btnRemove4 = new javax.swing.JButton();
        btnShow5 = new javax.swing.JButton();
        btnShow4 = new javax.swing.JButton();
        lblAvailable5 = new javax.swing.JLabel();
        lblAvailable4 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        btnUpload = new javax.swing.JButton();
        lblAvailable6 = new javax.swing.JLabel();
        btnShow6 = new javax.swing.JButton();
        btnRemove6 = new javax.swing.JButton();
        UID_6 = new javax.swing.JLabel();
        lblAvailable7 = new javax.swing.JLabel();
        btnShow7 = new javax.swing.JButton();
        btnRemove7 = new javax.swing.JButton();
        UID_7 = new javax.swing.JLabel();
        lblAvailable8 = new javax.swing.JLabel();
        btnShow8 = new javax.swing.JButton();
        btnRemove8 = new javax.swing.JButton();
        UID_8 = new javax.swing.JLabel();
        UID_9 = new javax.swing.JLabel();
        btnRemove9 = new javax.swing.JButton();
        btnShow9 = new javax.swing.JButton();
        lblAvailable9 = new javax.swing.JLabel();
        lblAvailable10 = new javax.swing.JLabel();
        btnShow10 = new javax.swing.JButton();
        btnRemove10 = new javax.swing.JButton();
        UID_10 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblDocHistory = new javax.swing.JTable();
        lblStatus = new javax.swing.JLabel();

        mnuShowSummary.setText("Show Summary");
        mnuShowSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShowSummaryActionPerformed(evt);
            }
        });
        mnuShowDoc.add(mnuShowSummary);

        mnuShowLastPO.setText("Show Last PO");
        mnuShowLastPO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShowLastPOActionPerformed(evt);
            }
        });
        mnuShowDoc.add(mnuShowLastPO);

        mnuShowIndent.setText("Show Indent");
        mnuShowIndent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShowIndentActionPerformed(evt);
            }
        });
        mnuShowDoc.add(mnuShowIndent);

        OLD_REPORT.setText("Non GST");
        OLD_REPORT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OLD_REPORTActionPerformed(evt);
            }
        });
        jPopupMenu1.add(OLD_REPORT);

        NEW_REPORT.setText("GST");
        NEW_REPORT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NEW_REPORTActionPerformed(evt);
            }
        });
        jPopupMenu1.add(NEW_REPORT);

        doc_name10.setEnabled(false);

        doc_name9.setEnabled(false);

        doc_name8.setEnabled(false);

        doc_name7.setEnabled(false);

        doc_name6.setEnabled(false);

        doc_name5.setEnabled(false);

        doc_name4.setEnabled(false);

        doc_name3.setEnabled(false);

        doc_name2.setEnabled(false);

        doc_name1.setEnabled(false);

        jLabel21.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jLabel21.setText("Document Name");

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save Record");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel Record");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        lblTitle.setText("RATE CHANGE APPROVAL");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 800, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tab1MouseClicked(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel2.setText("Approval No.");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel2);
        jLabel2.setBounds(22, 18, 88, 15);

        txtDocNo.setEditable(false);
        txtDocNo.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtDocNo.setNextFocusableComponent(txtDocDate);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(112, 14, 104, 19);

        jLabel3.setText("Date");
        Tab1.add(jLabel3);
        jLabel3.setBounds(310, 16, 34, 15);

        txtDocDate.setName("APPROVAL_DATE"); // NOI18N
        txtDocDate.setEnabled(false);
        txtDocDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDocDateFocusGained(evt);
            }
        });
        Tab1.add(txtDocDate);
        txtDocDate.setBounds(372, 14, 102, 19);

        jLabel8.setText("Remarks");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel8);
        jLabel8.setBounds(55, 173, 61, 15);

        txtRemarks.setName("REMARKS"); // NOI18N
        txtRemarks.setNextFocusableComponent(Table);
        txtRemarks.setEnabled(false);
        txtRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRemarksFocusGained(evt);
            }
        });
        Tab1.add(txtRemarks);
        txtRemarks.setBounds(117, 169, 396, 19);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setNextFocusableComponent(cmdAdd);
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(7, 230, 628, 162);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setNextFocusableComponent(cmdRemove);
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        cmdAdd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdAddFocusGained(evt);
            }
        });
        Tab1.add(cmdAdd);
        cmdAdd.setBounds(261, 436, 119, 23);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setNextFocusableComponent(cmdNext1);
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        cmdRemove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdRemoveFocusGained(evt);
            }
        });
        Tab1.add(cmdRemove);
        cmdRemove.setBounds(382, 435, 119, 23);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel3);
        jPanel3.setBounds(7, 196, 632, 6);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 153, 153));
        jLabel9.setText("Press Insert to Add new row, Delete - Remove row");
        Tab1.add(jLabel9);
        jLabel9.setBounds(10, 262, 294, 14);

        cmdNext1.setMnemonic('x');
        cmdNext1.setText("Next >>");
        cmdNext1.setNextFocusableComponent(cmdRemove);
        cmdNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNext1);
        cmdNext1.setBounds(546, 396, 88, 23);

        jLabel4.setText("Inquiry No.");
        Tab1.add(jLabel4);
        jLabel4.setBounds(41, 66, 77, 15);

        txtInquiryNo.setName("INQUIRY_NO"); // NOI18N
        txtInquiryNo.setEnabled(false);
        txtInquiryNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtInquiryNoKeyPressed(evt);
            }
        });
        Tab1.add(txtInquiryNo);
        txtInquiryNo.setBounds(113, 62, 120, 19);

        jLabel6.setText("Date");
        Tab1.add(jLabel6);
        jLabel6.setBounds(255, 66, 44, 15);

        txtInquiryDate.setName("INQUIRY_DATE"); // NOI18N
        txtInquiryDate.setEnabled(false);
        Tab1.add(txtInquiryDate);
        txtInquiryDate.setBounds(289, 62, 120, 19);

        jLabel11.setText("PR No.");
        Tab1.add(jLabel11);
        jLabel11.setBounds(66, 90, 46, 15);

        txtPRNo.setName("REQ_NO"); // NOI18N
        txtPRNo.setEnabled(false);
        Tab1.add(txtPRNo);
        txtPRNo.setBounds(114, 86, 120, 19);

        jLabel12.setText("Date");
        Tab1.add(jLabel12);
        jLabel12.setBounds(256, 90, 44, 15);

        txtPRDate.setName("REQ_DATE"); // NOI18N
        txtPRDate.setEnabled(false);
        Tab1.add(txtPRDate);
        txtPRDate.setBounds(290, 86, 120, 19);

        cmdGet.setText("Get Details");
        cmdGet.setEnabled(false);
        cmdGet.setName("INQUIRY_NO"); // NOI18N
        cmdGet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGetActionPerformed(evt);
            }
        });
        Tab1.add(cmdGet);
        cmdGet.setBounds(419, 62, 106, 25);

        jLabel13.setText("Summary No.");
        Tab1.add(jLabel13);
        jLabel13.setBounds(30, 120, 93, 15);

        txtSummaryNo.setEnabled(false);
        txtSummaryNo.setName("QUOT_APPROVAL_NO"); // NOI18N
        Tab1.add(txtSummaryNo);
        txtSummaryNo.setBounds(114, 116, 120, 19);

        jLabel14.setText("Date");
        Tab1.add(jLabel14);
        jLabel14.setBounds(256, 120, 44, 15);

        txtSummaryDate.setName("QUOT_APPROVAL_DATE"); // NOI18N
        txtSummaryDate.setEnabled(false);
        Tab1.add(txtSummaryDate);
        txtSummaryDate.setBounds(290, 116, 120, 19);

        jLabel15.setText("Indent No.");
        Tab1.add(jLabel15);
        jLabel15.setBounds(47, 145, 74, 15);

        txtIndentNo.setName("INDENT_NO"); // NOI18N
        txtIndentNo.setEnabled(false);
        Tab1.add(txtIndentNo);
        txtIndentNo.setBounds(115, 142, 120, 19);

        jLabel16.setText("Date");
        Tab1.add(jLabel16);
        jLabel16.setBounds(257, 146, 44, 15);

        txtIndentDate.setName("INDENT_DATE"); // NOI18N
        txtIndentDate.setEnabled(false);
        Tab1.add(txtIndentDate);
        txtIndentDate.setBounds(291, 142, 120, 19);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(220, 15, 44, 15);

        cmdRemarksBig.setText("...");
        cmdRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemarksBigActionPerformed(evt);
            }
        });
        Tab1.add(cmdRemarksBig);
        cmdRemarksBig.setBounds(515, 168, 36, 19);

        cmdShowLastPO1.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        cmdShowLastPO1.setText("Show Document");
        cmdShowLastPO1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowLastPO1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdShowLastPO1);
        cmdShowLastPO1.setBounds(415, 397, 126, 23);

        chkCancelled.setText("Cancelled");
        chkCancelled.setEnabled(false);
        Tab1.add(chkCancelled);
        chkCancelled.setBounds(549, 3, 98, 23);

        cmdSelectAll.setText("Approve All");
        cmdSelectAll.setEnabled(false);
        cmdSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSelectAllActionPerformed(evt);
            }
        });
        Tab1.add(cmdSelectAll);
        cmdSelectAll.setBounds(192, 397, 113, 23);

        cmdDeSelectAll.setText("DeSelect All");
        cmdDeSelectAll.setEnabled(false);
        cmdDeSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeSelectAllActionPerformed(evt);
            }
        });
        Tab1.add(cmdDeSelectAll);
        cmdDeSelectAll.setBounds(300, 397, 111, 23);

        lblTotal.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblTotal.setForeground(new java.awt.Color(102, 102, 255));
        lblTotal.setText("#");
        Tab1.add(lblTotal);
        lblTotal.setBounds(8, 399, 180, 17);

        cmdItemHistory.setText("Item History");
        cmdItemHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdItemHistoryActionPerformed(evt);
            }
        });
        Tab1.add(cmdItemHistory);
        cmdItemHistory.setBounds(514, 206, 120, 20);

        Tab.addTab("Requisition Information", Tab1);

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel4.setLayout(null);

        jLabel5.setText("Select the Item");
        jPanel4.add(jLabel5);
        jLabel5.setBounds(12, 12, 94, 15);
        jPanel4.add(cmbItem);
        cmbItem.setBounds(112, 10, 408, 24);

        TableC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(TableC);

        jPanel4.add(jScrollPane4);
        jScrollPane4.setBounds(11, 111, 620, 290);

        cmdDisplay.setText("Display");
        cmdDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDisplayActionPerformed(evt);
            }
        });
        jPanel4.add(cmdDisplay);
        cmdDisplay.setBounds(534, 8, 98, 25);

        jLabel1.setText("Supplier Desc.");
        jPanel4.add(jLabel1);
        jLabel1.setBounds(13, 55, 95, 15);

        txtItemExtraDesc.setEditable(false);
        jPanel4.add(txtItemExtraDesc);
        txtItemExtraDesc.setBounds(112, 51, 480, 22);

        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton1);
        jButton1.setBounds(595, 52, 32, 21);

        jLabel7.setText("Indent Desc.");
        jPanel4.add(jLabel7);
        jLabel7.setBounds(20, 84, 87, 15);

        txtIndentDesc.setEditable(false);
        jPanel4.add(txtIndentDesc);
        txtIndentDesc.setBounds(113, 80, 480, 22);

        jButton2.setText("...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton2);
        jButton2.setBounds(596, 81, 32, 21);

        Tab.addTab("Comparison View", jPanel4);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(16, 18, 66, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 14, 184, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(20, 52, 56, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 50, 182, 19);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(20, 82, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 78, 518, 19);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(20, 116, 86, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 168, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(88, 120, 182, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(18, 228, 60, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(84, 224, 184, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(16, 264, 60, 15);

        txtToRemarks.setNextFocusableComponent(cmdBack2);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(84, 260, 516, 19);

        cmdBack2.setText("<< Back");
        cmdBack2.setNextFocusableComponent(cmdRemove);
        cmdBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBack2);
        cmdBack2.setBounds(534, 350, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(607, 78, 36, 19);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 626, 144);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 190, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(13, 206, 482, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewHistory);
        cmdViewHistory.setBounds(505, 233, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        jPanel1.add(cmdNormalView);
        cmdNormalView.setBounds(505, 262, 132, 24);

        cmdPreviewA.setText("Preview Report");
        cmdPreviewA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewAActionPerformed(evt);
            }
        });
        jPanel1.add(cmdPreviewA);
        cmdPreviewA.setBounds(505, 205, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(505, 291, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel1.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(511, 331, 129, 19);

        Tab.addTab("Status", jPanel1);

        jPanel2.setLayout(null);

        jLabel22.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jLabel22.setText("File Name");
        jPanel2.add(jLabel22);
        jLabel22.setBounds(30, 10, 110, 17);

        lblAvailable1.setText("Available");
        jPanel2.add(lblAvailable1);
        lblAvailable1.setBounds(30, 40, 150, 15);

        btnShow1.setText("Show");
        btnShow1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShow1ActionPerformed(evt);
            }
        });
        jPanel2.add(btnShow1);
        btnShow1.setBounds(190, 30, 80, 25);

        btnRemove1.setText("Remove");
        btnRemove1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemove1ActionPerformed(evt);
            }
        });
        jPanel2.add(btnRemove1);
        btnRemove1.setBounds(270, 30, 90, 25);

        jLabel17.setText("DOC Unique ID");
        jPanel2.add(jLabel17);
        jLabel17.setBounds(370, 10, 130, 15);

        lblAvailable2.setText("Available");
        jPanel2.add(lblAvailable2);
        lblAvailable2.setBounds(30, 70, 150, 15);

        btnShow2.setText("Show");
        btnShow2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShow2ActionPerformed(evt);
            }
        });
        jPanel2.add(btnShow2);
        btnShow2.setBounds(190, 60, 80, 25);

        btnRemove2.setText("Remove");
        btnRemove2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemove2ActionPerformed(evt);
            }
        });
        jPanel2.add(btnRemove2);
        btnRemove2.setBounds(270, 60, 90, 25);

        lblAvailable3.setText("Available");
        jPanel2.add(lblAvailable3);
        lblAvailable3.setBounds(30, 100, 150, 15);

        btnShow3.setText("Show");
        btnShow3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShow3ActionPerformed(evt);
            }
        });
        jPanel2.add(btnShow3);
        btnShow3.setBounds(190, 90, 80, 25);

        btnRemove3.setText("Remove");
        btnRemove3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemove3ActionPerformed(evt);
            }
        });
        jPanel2.add(btnRemove3);
        btnRemove3.setBounds(270, 90, 90, 25);
        jPanel2.add(UID_1);
        UID_1.setBounds(370, 40, 90, 20);
        jPanel2.add(UID_2);
        UID_2.setBounds(370, 60, 90, 20);
        jPanel2.add(UID_3);
        UID_3.setBounds(370, 90, 90, 20);
        jPanel2.add(UID_4);
        UID_4.setBounds(370, 120, 90, 20);
        jPanel2.add(UID_5);
        UID_5.setBounds(370, 150, 90, 20);

        btnRemove5.setText("Remove");
        btnRemove5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemove5ActionPerformed(evt);
            }
        });
        jPanel2.add(btnRemove5);
        btnRemove5.setBounds(270, 150, 90, 25);

        btnRemove4.setText("Remove");
        btnRemove4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemove4ActionPerformed(evt);
            }
        });
        jPanel2.add(btnRemove4);
        btnRemove4.setBounds(270, 120, 90, 25);

        btnShow5.setText("Show");
        btnShow5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShow5ActionPerformed(evt);
            }
        });
        jPanel2.add(btnShow5);
        btnShow5.setBounds(190, 150, 80, 25);

        btnShow4.setText("Show");
        btnShow4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShow4ActionPerformed(evt);
            }
        });
        jPanel2.add(btnShow4);
        btnShow4.setBounds(190, 120, 80, 25);

        lblAvailable5.setText("Available");
        jPanel2.add(lblAvailable5);
        lblAvailable5.setBounds(30, 160, 150, 15);

        lblAvailable4.setText("Available");
        jPanel2.add(lblAvailable4);
        lblAvailable4.setBounds(30, 130, 150, 15);

        jLabel20.setText("Upload New Document");
        jPanel2.add(jLabel20);
        jLabel20.setBounds(50, 380, 200, 15);

        btnUpload.setText("SELECT FILE");
        btnUpload.setEnabled(false);
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });
        jPanel2.add(btnUpload);
        btnUpload.setBounds(210, 370, 150, 25);

        lblAvailable6.setText("Available");
        jPanel2.add(lblAvailable6);
        lblAvailable6.setBounds(30, 190, 150, 15);

        btnShow6.setText("Show");
        btnShow6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShow6ActionPerformed(evt);
            }
        });
        jPanel2.add(btnShow6);
        btnShow6.setBounds(190, 180, 80, 25);

        btnRemove6.setText("Remove");
        btnRemove6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemove6ActionPerformed(evt);
            }
        });
        jPanel2.add(btnRemove6);
        btnRemove6.setBounds(270, 180, 90, 25);
        jPanel2.add(UID_6);
        UID_6.setBounds(370, 180, 90, 20);

        lblAvailable7.setText("Available");
        jPanel2.add(lblAvailable7);
        lblAvailable7.setBounds(30, 220, 150, 15);

        btnShow7.setText("Show");
        btnShow7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShow7ActionPerformed(evt);
            }
        });
        jPanel2.add(btnShow7);
        btnShow7.setBounds(190, 210, 80, 25);

        btnRemove7.setText("Remove");
        btnRemove7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemove7ActionPerformed(evt);
            }
        });
        jPanel2.add(btnRemove7);
        btnRemove7.setBounds(270, 210, 90, 25);
        jPanel2.add(UID_7);
        UID_7.setBounds(370, 210, 90, 20);

        lblAvailable8.setText("Available");
        jPanel2.add(lblAvailable8);
        lblAvailable8.setBounds(30, 250, 150, 15);

        btnShow8.setText("Show");
        btnShow8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShow8ActionPerformed(evt);
            }
        });
        jPanel2.add(btnShow8);
        btnShow8.setBounds(190, 240, 80, 25);

        btnRemove8.setText("Remove");
        btnRemove8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemove8ActionPerformed(evt);
            }
        });
        jPanel2.add(btnRemove8);
        btnRemove8.setBounds(270, 240, 90, 25);
        jPanel2.add(UID_8);
        UID_8.setBounds(370, 240, 90, 20);
        jPanel2.add(UID_9);
        UID_9.setBounds(370, 270, 90, 20);

        btnRemove9.setText("Remove");
        btnRemove9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemove9ActionPerformed(evt);
            }
        });
        jPanel2.add(btnRemove9);
        btnRemove9.setBounds(270, 270, 90, 25);

        btnShow9.setText("Show");
        btnShow9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShow9ActionPerformed(evt);
            }
        });
        jPanel2.add(btnShow9);
        btnShow9.setBounds(190, 270, 80, 25);

        lblAvailable9.setText("Available");
        jPanel2.add(lblAvailable9);
        lblAvailable9.setBounds(30, 280, 150, 15);

        lblAvailable10.setText("Available");
        jPanel2.add(lblAvailable10);
        lblAvailable10.setBounds(30, 310, 150, 15);

        btnShow10.setText("Show");
        btnShow10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShow10ActionPerformed(evt);
            }
        });
        jPanel2.add(btnShow10);
        btnShow10.setBounds(190, 300, 80, 25);

        btnRemove10.setText("Remove");
        btnRemove10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemove10ActionPerformed(evt);
            }
        });
        jPanel2.add(btnRemove10);
        btnRemove10.setBounds(270, 300, 90, 25);
        jPanel2.add(UID_10);
        UID_10.setBounds(370, 300, 90, 20);

        tblDocHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblDocHistory.setDragEnabled(true);
        jScrollPane5.setViewportView(tblDocHistory);

        jPanel2.add(jScrollPane5);
        jScrollPane5.setBounds(480, 10, 290, 390);

        Tab.addTab("Documents", jPanel2);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 800, 450);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(4, 518, 650, 22);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdItemHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdItemHistoryActionPerformed
        // TODO add your handling code here:
        try {
            if (Table.getRowCount() > 0 && Table.getSelectedRow() >= 0) {

                String lItemID = DataModel.getValueByVariable("ITEM_ID", Table.getSelectedRow());

                frmItemHistory ObjItem = new frmItemHistory();
                ObjItem.ShowForm(lItemID);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please select the item");
        }

    }//GEN-LAST:event_cmdItemHistoryActionPerformed

    private void mnuShowIndentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShowIndentActionPerformed
        // TODO add your handling code here:
        try {

            String DocNo = getIndentNo();

            if (!DocNo.trim().equals("")) {
                AppletFrame aFrame = new AppletFrame("Indent");
                aFrame.startAppletEx("EITLERP.Stores.FrmIndent", "Indent");
                FrmIndent ObjDoc = (FrmIndent) aFrame.ObjApplet;
                ObjDoc.FindEx((int) EITLERPGLOBAL.gCompanyID, DocNo);
            } else {
                JOptionPane.showMessageDialog(null, "Indent no. not found");
            }
        } catch (Exception e) {
        }

    }//GEN-LAST:event_mnuShowIndentActionPerformed

    private void mnuShowLastPOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShowLastPOActionPerformed
        // TODO add your handling code here:
        try {
            String DocNo = DataModel.getValueByVariable("LAST_PO_NO", Table.getSelectedRow());

            if (!DocNo.trim().equals("")) {
                AppletFrame aFrame = new AppletFrame("Purchase Order");
                aFrame.startAppletEx("EITLERP.Purchase.frmPOGen", "Purchase Order");
                frmPOGen ObjDoc = (frmPOGen) aFrame.ObjApplet;
                ObjDoc.POType = clsPOGen.getPOType(EITLERPGLOBAL.gCompanyID, DocNo);
                ObjDoc.FindEx((int) EITLERPGLOBAL.gCompanyID, DocNo);
            } else {
                JOptionPane.showMessageDialog(null, "Last PO no. not found");
            }
        } catch (Exception e) {

        }

    }//GEN-LAST:event_mnuShowLastPOActionPerformed

    private void mnuShowSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShowSummaryActionPerformed
        // TODO add your handling code here:

        String SummaryNo = txtSummaryNo.getText();

        if (SummaryNo.trim().equals("")) {
            JOptionPane.showMessageDialog(null, "No Summary no. specified");
            return;
        }

        if (!clsQuotApproval.IsDocExist(EITLERPGLOBAL.gCompanyID, SummaryNo)) {
            JOptionPane.showMessageDialog(null, "Summary not found");
            return;
        }

        if (!SummaryNo.trim().equals("")) {
            AppletFrame aFrame = new AppletFrame("Summary");
            aFrame.startAppletEx("EITLERP.Purchase.frmQuotApproval", "Summary");
            frmQuotApproval ObjDoc = (frmQuotApproval) aFrame.ObjApplet;
            ObjDoc.FindEx((int) EITLERPGLOBAL.gCompanyID, SummaryNo);
        } else {
            JOptionPane.showMessageDialog(null, "No Summary Found.");
        }
    }//GEN-LAST:event_mnuShowSummaryActionPerformed

    private void cmdDeSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeSelectAllActionPerformed
        // TODO add your handling code here:
        try {
            for (int i = 0; i < Table.getRowCount(); i++) {
                DataModel.setValueByVariable("APPROVED", new Boolean(false), i);
            }

        } catch (Exception e) {

        }

    }//GEN-LAST:event_cmdDeSelectAllActionPerformed

    private void cmdSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSelectAllActionPerformed
        // TODO add your handling code here:

        try {
            for (int i = 0; i < Table.getRowCount(); i++) {
                DataModel.setValueByVariable("APPROVED", new Boolean(true), i);
            }

        } catch (Exception e) {

        }
    }//GEN-LAST:event_cmdSelectAllActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtIndentDesc;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtItemExtraDesc;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if (TableHS.getRowCount() > 0 && TableHS.getSelectedRow() >= 0) {
            txtAuditRemarks.setText((String) TableHS.getValueAt(TableHS.getSelectedRow(), 4));
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText = txtAuditRemarks;
            bigEdit.ShowEdit();
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdShowLastPO1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowLastPO1ActionPerformed
        // TODO add your handling code here:

        mnuShowDoc.show(Tab1, 415, 373 + 23);


    }//GEN-LAST:event_cmdShowLastPO1ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdRemarksBigActionPerformed

    private void cmdDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDisplayActionPerformed
        // TODO add your handling code here:
        DisplayComparison(EITLERPGLOBAL.getCombostrCode(cmbItem));
    }//GEN-LAST:event_cmdDisplayActionPerformed

    private void cmdPreviewAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewAActionPerformed
        // TODO add your handling code here:
        PreviewAuditReport();
    }//GEN-LAST:event_cmdPreviewAActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjApproval.LoadData(EITLERPGLOBAL.gCompanyID);
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo = txtDocNo.getText();
        ObjApproval.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void cmdGetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGetActionPerformed

        // TODO add your handling code here:
        HashMap List = new HashMap();

        if (!txtInquiryNo.getText().trim().equals("")) {
            DoNotEvaluate = true;

            //Get the Quotation Approval No.
            try {
                Connection tmpConn = data.getConn();
                Statement stPR;
                ResultSet rsPR;
                Statement stTmp = tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                ResultSet rsTmp = stTmp.executeQuery("SELECT * FROM D_PUR_QUOT_APPROVAL_HEADER WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND INQUIRY_NO='" + txtInquiryNo.getText().trim() + "' AND APPROVED=1 AND CANCELLED=0 ORDER BY APPROVAL_DATE DESC");
                //System.out.println("Summary fetch : SELECT * FROM D_PUR_QUOT_APPROVAL_HEADER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND INQUIRY_NO='"+txtInquiryNo.getText().trim()+"' AND APPROVED=1 AND CANCELLED=0 ORDER BY APPROVAL_DATE DESC");

                rsTmp.first();
                if (rsTmp.getRow() > 0) {
                    System.out.println("APPROVAL NO : " + rsTmp.getString("APPROVAL_NO"));
                    txtSummaryNo.setText(rsTmp.getString("APPROVAL_NO"));
                    txtSummaryDate.setText(EITLERPGLOBAL.formatDate(rsTmp.getString("APPROVAL_DATE")));
                }

                txtIndentNo.setText("");
                txtPRNo.setText("");
                stTmp = tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                rsTmp = stTmp.executeQuery("SELECT * FROM D_PUR_INQUIRY_DETAIL WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND INQUIRY_NO='" + txtInquiryNo.getText().trim() + "'");
                rsTmp.first();
                if (rsTmp.getRow() > 0) {
                    while (!rsTmp.isAfterLast()) {
                        txtIndentNo.setText(rsTmp.getString("INDENT_NO"));

                        clsIndent tmpObj = new clsIndent();
                        tmpObj.LoadData(EITLERPGLOBAL.gCompanyID);
                        clsIndent ObjIndent = (clsIndent) tmpObj.getObject(EITLERPGLOBAL.gCompanyID, rsTmp.getString("INDENT_NO"));

                        if (!txtIndentNo.getText().trim().equals("")) {
                            txtIndentDate.setText(EITLERPGLOBAL.formatDate((String) ObjIndent.getAttribute("INDENT_DATE").getObj()));
                        }

                        stPR = tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                        rsPR = stPR.executeQuery("SELECT * FROM D_INV_INDENT_DETAIL WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND INDENT_NO='" + txtIndentNo.getText() + "'");
                        rsPR.first();
                        if (rsPR.getRow() > 0) {
                            txtPRNo.setText(rsPR.getString("MR_NO"));

                            clsMaterialRequisition tmpObj2 = new clsMaterialRequisition();
                            tmpObj2.LoadData(EITLERPGLOBAL.gCompanyID);
                            clsMaterialRequisition ObjMR = (clsMaterialRequisition) tmpObj2.getObject(EITLERPGLOBAL.gCompanyID, txtPRNo.getText().trim());

                            if (!txtPRNo.getText().trim().equals("")) {
                                txtPRDate.setText(EITLERPGLOBAL.formatDate((String) ObjMR.getAttribute("REQ_DATE").getObj()));
                            }
                        }

                        rsTmp.next();
                    }
                }

                //tmpConn.close();
                stTmp.close();
                rsTmp.close();

            } catch (Exception e) {
                // JOptionPane.showMessageDialog(null,e.getMessage());
            }

            try {
                List = clsQuotApproval.getQuotApprovalItems(EITLERPGLOBAL.gCompanyID, txtInquiryNo.getText());
                FormatGrid();

                for (int i = 1; i <= List.size(); i++) {
                    clsQuotApprovalItem ObjItem = (clsQuotApprovalItem) List.get(Integer.toString(i));
                    Object[] rowData = new Object[52];//49

                    rowData[0] = Integer.toString(i);
                    rowData[1] = (String) ObjItem.getAttribute("ITEM_ID").getObj();
                    rowData[2] = clsItem.getItemName(EITLERPGLOBAL.gCompanyID, (String) ObjItem.getAttribute("ITEM_ID").getObj());
                    rowData[3] = (String) ObjItem.getAttribute("ITEM_EXTRA_DESC").getObj();

                    rowData[4] = (String) ObjItem.getAttribute("HSN_SAC_CODE").getObj();

                            //ObjItem.getAttribute("HSN_SAC_CODE").getObj();
                    rowData[5] = (String) ObjItem.getAttribute("SUPP_ID").getObj();

                    int PartyID = Integer.parseInt((String) ObjItem.getAttribute("SUPP_ID").getObj());
                    String SuppName = clsParty.getPartyNameByPartyID(EITLERPGLOBAL.gCompanyID, PartyID);

                    rowData[6] = SuppName;
                    rowData[7] = (String) ObjItem.getAttribute("LAST_PO_NO").getObj();
                    rowData[8] = EITLERPGLOBAL.formatDate((String) ObjItem.getAttribute("LAST_PO_DATE").getObj());
                    rowData[9] = Double.toString(ObjItem.getAttribute("LAST_PO_QTY").getVal());

                    rowData[10] = Double.toString(ObjItem.getAttribute("LAST_PO_RATE").getVal());
                    rowData[11] = Double.toString(ObjItem.getAttribute("LAST_LANDED_RATE").getVal());
                    rowData[12] = Double.toString(ObjItem.getAttribute("CURRENT_QTY").getVal());

                    rowData[13] = clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", (int) ObjItem.getAttribute("UNIT_ID").getVal());

                    rowData[14] = Double.toString(ObjItem.getAttribute("CURRENT_RATE").getVal());
                    rowData[15] = Double.toString(ObjItem.getAttribute("CURRENT_LAND_RATE").getVal());
                    double PatternCost=0;
                    double currentLandRate=ObjItem.getAttribute("CURRENT_LAND_RATE").getVal();
                    if(!ObjItem.getAttribute("OCTROI_TERM").getString().equals("N/A")){
                        PatternCost=Double.parseDouble(ObjItem.getAttribute("OCTROI_TERM").getString())/ObjItem.getAttribute("CURRENT_QTY").getVal();
                    }
                    //rowData[15]=Double.toString(ObjItem.getAttribute("CURRENT_LAND_RATE").getVal()-PatternCost);
                    rowData[16]=Double.toString(ObjItem.getAttribute("RATE_DIFFERENCE").getVal());
                    //rowData[16]=Double.toString(ObjItem.getAttribute("RATE_DIFFERENCE").getVal()-PatternCost);                    
                    rowData[17] = Double.toString(ObjItem.getAttribute("RATE_DIFFERENCE_PER").getVal());
                    rowData[18] = Double.toString(ObjItem.getAttribute("RATE_DIFFERENCE_RATE").getVal());
                    rowData[19] = Double.toString(ObjItem.getAttribute("RATE_DIFFERENCE_PER_RATE").getVal());
                    
                    rowData[23]=(String)ObjItem.getAttribute("REMARKS").getObj();  //20                    
                    
                    rowData[24]=(String)ObjItem.getAttribute("QUOT_ID").getObj();  //21
                    rowData[25]=Integer.toString((int)ObjItem.getAttribute("QUOT_SR_NO").getVal()); //22
                   //
                    rowData[26]=(String)ObjItem.getAttribute("DISCOUNT_TERM").getObj(); //23
                    rowData[27]=(String)ObjItem.getAttribute("PAYMENT_TERM").getObj();  //24
                    rowData[28]=(String)ObjItem.getAttribute("PRICE_BASIS_TERM").getObj();  //25
                    
//                    ObjItem.setAttribute("HSN_SAC_CODE", (String)ObjItem.getAttribute("HSN_SAC_CODE").getObj());
//                    ObjItem.setAttribute("CGST_PER", "");
//                    ObjItem.setAttribute("SGST_PER", "");
//                    ObjItem.setAttribute("IGST_PER", "");
//                    ObjItem.setAttribute("COMPOSITION_PER", "");
//                    ObjItem.setAttribute("RCM_PER", "");
//                    ObjItem.setAttribute("GST_COMPENSATION_CESS_PER", "");
//                    
                    rowData[29]=(String)ObjItem.getAttribute("CGST_TERM").getObj();   //26
                    rowData[30]=(String)ObjItem.getAttribute("SGST_TERM").getObj();   //27
                    rowData[31]=(String)ObjItem.getAttribute("IGST_TERM").getObj();   //28
                    rowData[32]=(String)ObjItem.getAttribute("COMPOSITION_TERM").getObj();  //29
                    rowData[33]=(String)ObjItem.getAttribute("RCM_TERM").getObj();   //30
                    rowData[34]=(String)ObjItem.getAttribute("GST_COMPENSATION_CESS_TERM").getObj();  //31
                    
                    rowData[35]=(String)ObjItem.getAttribute("EXCISE_TERM").getObj();  //32
                    rowData[36]=(String)ObjItem.getAttribute("ST_TERM").getObj();  //33
                    rowData[37]=(String)ObjItem.getAttribute("PF_TERM").getObj();  //34
                    rowData[38]=(String)ObjItem.getAttribute("FREIGHT_TERM").getObj();  //35
                    rowData[39]=(String)ObjItem.getAttribute("OCTROI_TERM").getObj();  //36
                    rowData[40]=(String)ObjItem.getAttribute("FOB_TERM").getObj();  //37
                    rowData[41]=(String)ObjItem.getAttribute("CIE_TERM").getObj();  //38
                    rowData[42]=(String)ObjItem.getAttribute("INSURANCE_TERM").getObj();  //39
                    rowData[43]=(String)ObjItem.getAttribute("TCC_TERM").getObj();  //40
                    rowData[44]=(String)ObjItem.getAttribute("CENVAT_TERM").getObj();  //41
                    rowData[45]=(String)ObjItem.getAttribute("DESPATCH_TERM").getObj();  //42
                    rowData[46]=Integer.toString((int)ObjItem.getAttribute("UNIT_ID").getVal());  //43
                    rowData[47]=(String)ObjItem.getAttribute("SERVICE_TAX_TERM").getObj();   //44
                    
                    rowData[48]=new Boolean(false);   //45
                    rowData[49]=(String)ObjItem.getAttribute("MAKE").getObj();  //46
                    rowData[50]=(String)ObjItem.getAttribute("PRICE_LIST_NO").getObj();  //47
                    rowData[51]=(String)ObjItem.getAttribute("OTHERS_TERM").getObj();    //48
                    
                    
                    if(!ObjItem.getAttribute("OCTROI_TERM").getString().equals("N/A")){
                    rowData[20]=Double.toString(ObjItem.getAttribute("CURRENT_LAND_RATE").getVal()-PatternCost);
                    }else{
                        rowData[20]="N/A";
                    }
                    DataModel.addRow(rowData);

                    try {

                        double PORateDiff= (ObjItem.getAttribute("CURRENT_RATE").getVal()-ObjItem.getAttribute("LAST_PO_RATE").getVal());
                        double PORateDiffPer=EITLERPGLOBAL.round(PORateDiff*100/ObjItem.getAttribute("LAST_PO_RATE").getVal(),3);
                        
                        
                        //double LandRateDiff= (ObjItem.getAttribute("CURRENT_LAND_RATE").getVal()-ObjItem.getAttribute("LAST_LANDED_RATE").getVal());
                        //double LandRateDiffPer=EITLERPGLOBAL.round(PORateDiff*100/ObjItem.getAttribute("LAST_LANDED_RATE").getVal(),3);
                        
                        double LandRateDiff= (ObjItem.getAttribute("CURRENT_LAND_RATE").getVal()-ObjItem.getAttribute("LAST_LANDED_RATE").getVal());
                        //double LandRateDiff= ((ObjItem.getAttribute("CURRENT_LAND_RATE").getVal()-PatternCost)-ObjItem.getAttribute("LAST_LANDED_RATE").getVal());
                        //double LandRateDiffPer=EITLERPGLOBAL.round(PORateDiff*100/ObjItem.getAttribute("LAST_LANDED_RATE").getVal(),3);
                        double LandRateDiffPer=EITLERPGLOBAL.round(LandRateDiff*100/ObjItem.getAttribute("LAST_LANDED_RATE").getVal(),3);
                        
                        double LandRateDiffWithoutPatternCost=((ObjItem.getAttribute("CURRENT_LAND_RATE").getVal()-PatternCost)-ObjItem.getAttribute("LAST_LANDED_RATE").getVal());
                        double LandRateDiffPerWithoutPatternCost=EITLERPGLOBAL.round(LandRateDiffWithoutPatternCost*100/ObjItem.getAttribute("LAST_LANDED_RATE").getVal(),3);
                        
                        double LastPORate=ObjItem.getAttribute("LAST_PO_RATE").getVal();
                        double LastLandRate=ObjItem.getAttribute("LAST_LANDED_RATE").getVal();
                        
                        if(LastPORate<=0) {
                            PORateDiffPer=0;
                        }
                        
                        if(LastLandRate==0) {
                            LandRateDiffPer=0;
                        }
                        
                        DataModel.setValueByVariable("RATE_DIFFERENCE_PER_RATE",Double.toString(PORateDiffPer), Table.getRowCount()-1);
                        DataModel.setValueByVariable("RATE_DIFFERENCE_PER",Double.toString(LandRateDiffPer), Table.getRowCount()-1);
                        
                        DataModel.setValueByVariable("RATE_DIFFERENCE_RATE",Double.toString(PORateDiff), Table.getRowCount()-1);
                        DataModel.setValueByVariable("RATE_DIFFERENCE",Double.toString(LandRateDiff), Table.getRowCount()-1);
                        
                        //DataModel.SetVariable(49,"LANDED_RATE_WITHOUT_PATTERNCOST");
        
                        DataModel.setValueByVariable("LANDED_RATE_DIFFERENCE_WITHOUT_PATTERNCOST",Double.toString(LandRateDiffWithoutPatternCost), Table.getRowCount()-1);
                        DataModel.setValueByVariable("LANDED_RATE_DIFFERENCE_WITHOUT_PATTERNCOST_PER",Double.toString(LandRateDiffPerWithoutPatternCost), Table.getRowCount()-1);
                        
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Error : " + e.getMessage());
                    }
                }
            } catch (Exception e) {

            }
            DoNotEvaluate = false;

            GenerateItemCombo();
        } else {
            JOptionPane.showMessageDialog(null, "Please specify the inquiry no. Press F1 for the list of inquiries");
            txtInquiryNo.requestFocus();
            DoNotEvaluate = false;
        }
    }//GEN-LAST:event_cmdGetActionPerformed

    private void txtInquiryNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInquiryNoKeyPressed
        // TODO add your handling code here:
        //=========== Supplier List ===============
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            //aList.SQL="SELECT DISTINCT(D_PUR_INQUIRY_HEADER.INQUIRY_NO) AS INQ_NO,DATE_FORMAT(INQUIRY_DATE,'%d/%m/%Y') AS DATE FROM D_PUR_INQUIRY_HEADER,D_PUR_INQUIRY_DETAIL,D_COM_USER_MASTER WHERE D_PUR_INQUIRY_HEADER.COMPANY_ID=D_PUR_INQUIRY_DETAIL.COMPANY_ID AND D_PUR_INQUIRY_HEADER.INQUIRY_NO=D_PUR_INQUIRY_DETAIL.INQUIRY_NO AND D_PUR_INQUIRY_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+"  AND D_PUR_INQUIRY_HEADER.APPROVED=1 AND D_PUR_INQUIRY_HEADER.APPROVED=1 AND D_PUR_INQUIRY_HEADER.STATUS='O' AND IF(D_PUR_INQUIRY_HEADER.LAST_QUOT_DATE='',CURDATE(),D_PUR_INQUIRY_HEADER.LAST_QUOT_DATE)>=CURDATE() AND D_PUR_INQUIRY_HEADER.CREATED_BY=D_COM_USER_MASTER.USER_ID AND D_PUR_INQUIRY_HEADER.COMPANY_ID=D_COM_USER_MASTER.COMPANY_ID ";
            aList.SQL = "SELECT DISTINCT(D_PUR_INQUIRY_HEADER.INQUIRY_NO) AS INQ_NO,DATE_FORMAT(INQUIRY_DATE,'%d/%m/%Y') AS DATE FROM D_PUR_INQUIRY_HEADER,D_PUR_INQUIRY_DETAIL,D_COM_USER_MASTER WHERE D_PUR_INQUIRY_HEADER.COMPANY_ID=D_PUR_INQUIRY_DETAIL.COMPANY_ID AND D_PUR_INQUIRY_HEADER.INQUIRY_NO=D_PUR_INQUIRY_DETAIL.INQUIRY_NO AND D_PUR_INQUIRY_HEADER.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + "  AND D_PUR_INQUIRY_HEADER.APPROVED=1 AND D_PUR_INQUIRY_HEADER.APPROVED=1 AND D_PUR_INQUIRY_HEADER.STATUS='O' AND D_PUR_INQUIRY_HEADER.CREATED_BY=D_COM_USER_MASTER.USER_ID AND D_PUR_INQUIRY_HEADER.COMPANY_ID=D_COM_USER_MASTER.COMPANY_ID ";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                txtInquiryNo.setText(aList.ReturnVal);
                clsInquiry tmpObj = new clsInquiry();
                clsInquiry ObjInq = (clsInquiry) tmpObj.getObject(EITLERPGLOBAL.gCompanyID, txtInquiryNo.getText());
                txtInquiryDate.setText(EITLERPGLOBAL.formatDate((String) ObjInq.getAttribute("INQUIRY_DATE").getObj()));
            }
        }
        //=========================================

    }//GEN-LAST:event_txtInquiryNoKeyPressed

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_TableKeyReleased

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        // TODO add your handling code here:
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void cmdBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack2ActionPerformed

    private void cmdNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext1ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext1ActionPerformed

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        // TODO add your handling code here:
        txtDocDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void cmdRemoveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdRemoveFocusGained
        // TODO add your handling code here:
        ShowMessage("Click on this button to remove selected row from the table");
    }//GEN-LAST:event_cmdRemoveFocusGained

    private void cmdAddFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdAddFocusGained
        // TODO add your handling code here:
        ShowMessage("Click on this button to add a new row to table");
    }//GEN-LAST:event_cmdAddFocusGained

    private void txtRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the remarks for this document");
    }//GEN-LAST:event_txtRemarksFocusGained

    private void txtDocDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Approval Date");
    }//GEN-LAST:event_txtDocDateFocusGained

    private void Tab1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tab1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Tab1MouseClicked

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);

    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();

        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if (ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID, 38, txtDocNo.getText())) {
                cmbSendTo.setEnabled(true);
            } else {
                if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
                    cmbSendTo.setEnabled(true);
                } else {
                    cmbSendTo.setEnabled(false);
                }
                //cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateFromCombo();
        }

        return;

    }//GEN-LAST:event_OpgApproveMouseClicked

    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgHoldItemStateChanged

    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgRejectItemStateChanged

    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgFinalItemStateChanged

    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgApproveItemStateChanged

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjApproval.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        //PreviewReport();
        jPopupMenu1.show(cmdPreview, 0, 30);
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this record ?", "SDML ERP", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if (Table.getRowCount() > 0) {
            DataModel.removeRow(Table.getSelectedRow());
            GenerateItemCombo();
        }

    }//GEN-LAST:event_cmdRemoveActionPerformed

    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        Updating = true;
        Object[] rowData = new Object[1];
        rowData[0] = Integer.toString(Table.getRowCount() + 1);
        DataModel.addRow(rowData);
        Updating = false;
        GenerateItemCombo();
        Table.changeSelection(Table.getRowCount() - 1, 1, false, false);
        Table.requestFocus();
    }//GEN-LAST:event_cmdAddActionPerformed

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:

        if (EditMode == 0) {
            return;
        }
        //=========== Unit List ===============//
        if (Table.getSelectedColumn() == DataModel.getColFromVariable("UNIT_NAME")) {
            if (evt.getKeyCode() == 112) //F1 Key pressed
            {
                LOV aList = new LOV();

                aList.SQL = "SELECT PARA_CODE,D_COM_PARAMETER_MAST.DESC FROM D_COM_PARAMETER_MAST WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND  PARA_ID='UNIT' ORDER BY D_COM_PARAMETER_MAST.DESC";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = false;
                aList.DefaultSearchOn = 2;

                if (aList.ShowLOV()) {
                    if (Table.getCellEditor() != null) {
                        Table.getCellEditor().stopCellEditing();
                    }

                    Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), DataModel.getColFromVariable("UNIT_ID"));
                    Table.setValueAt(clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", Integer.parseInt(aList.ReturnVal)), Table.getSelectedRow(), DataModel.getColFromVariable("UNIT_NAME"));
                }
            }
        }
        //=========================================//

        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            if (Table.getSelectedColumn() == DataModel.getColFromVariable("ITEM_ID")) {
                LOV aList = new LOV();

                aList.SQL = "SELECT ITEM_ID,ITEM_DESCRIPTION,HSN_SAC_CODE FROM D_INV_ITEM_MASTER WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND APPROVED=1 AND CANCELLED=0 ORDER BY ITEM_ID";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;

                if (aList.ShowLOV()) {
                    if (Table.getCellEditor() != null) {
                        Table.getCellEditor().stopCellEditing();
                    }
                    Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), DataModel.getColFromVariable("ITEM_ID"));
                    Table.setValueAt(clsItem.getHsnSacCode(EITLERPGLOBAL.gCompanyID, aList.ReturnVal), Table.getSelectedRow(), DataModel.getColFromVariable("HSN_SAC_CODE"));

                }
            }
        }

        //=========== Supplier List ===============
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            if (Table.getSelectedColumn() == DataModel.getColFromVariable("SUPP_ID")) {

                LOV aList = new LOV();

                aList.SQL = "SELECT PARTY_ID,SUPPLIER_CODE,PARTY_NAME FROM D_COM_PARTY WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " ORDER BY PARTY_NAME";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 3;

                if (aList.ShowLOV()) {
                    if (Table.getCellEditor() != null) {
                        Table.getCellEditor().stopCellEditing();
                    }

                    //Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(),DataModel.getColFromVariable("SUPP_ID"));
                    int PartyID = Integer.parseInt(aList.ReturnVal);
                    DoNotEvaluate = true;
                    Table.setValueAt(Integer.toString(PartyID), Table.getSelectedRow(), DataModel.getColFromVariable("SUPP_ID"));
                    String lSuppName = clsParty.getPartyNameByPartyID(EITLERPGLOBAL.gCompanyID, PartyID);
                    Table.setValueAt(lSuppName, Table.getSelectedRow(), DataModel.getColFromVariable("SUPP_NAME"));
                    DoNotEvaluate = false;

                }
            }
        }
        //=========================================


    }//GEN-LAST:event_TableKeyPressed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
                OpgFinal.setEnabled(true);
            }
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //Set Default Send to User
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void OLD_REPORTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OLD_REPORTActionPerformed
        // TODO add your handling code here:
        PreviewReport();
    }//GEN-LAST:event_OLD_REPORTActionPerformed

    private void NEW_REPORTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NEW_REPORTActionPerformed
        // TODO add your handling code here:
        PreviewReport_gst();
    }//GEN-LAST:event_NEW_REPORTActionPerformed

    private void btnShow1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShow1ActionPerformed
        // TODO add your handling code here:
        openFile(lblAvailable1.getText());
    }//GEN-LAST:event_btnShow1ActionPerformed
    private void openFile(String file_name)
    {
        try{
            ResultSet rs = null;
            rs = sdml.felt.commonUI.data.getResult("SELECT DOCUMENT FROM DOC_MGMT.PURCHASE_RATE_APPROVAL_DOCUMENT where DOC_NAME='"+file_name+"'");
 
            //File file = new File("/root/Machine_Master_Files/"+file_name);
            //File file1 = new File("D://Machine_Master_Files/"+file_name);
           
            File file = new File(file_name);
           
            try{
                    FileOutputStream output = new FileOutputStream(file);
                    System.out.println("Writing to file " + file.getAbsolutePath());
                    rs.first();
                    byte[] imagebytes = rs.getBytes("DOCUMENT");
                    output.write(imagebytes);
                    output.close();
                    
            }catch(Exception e)
            {
                e.printStackTrace();
            }
            
            if (!Desktop.isDesktopSupported()) {
                JOptionPane.showMessageDialog(null, "Desktop Not Supported");
                return;
            } else {
                Desktop desk = Desktop.getDesktop();
                if (file.exists()) {
                    desk.open(file);
                } 
            }
            
         }catch(Exception e)
         {
             e.printStackTrace();
         }
    }
    private void btnRemove1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemove1ActionPerformed
        // TODO add your handling code here:
        deleteFileFromDatabase(lblAvailable1.getText());
        DisplayStatus();
    }//GEN-LAST:event_btnRemove1ActionPerformed
    private void formateGridDocHistory()
    {
        try{
            DataModel_DocHistory = new EITLTableModel();
            tblDocHistory.removeAll();

            tblDocHistory.setModel(DataModel_DocHistory);
            tblDocHistory.setAutoResizeMode(0);
            
            DataModel_DocHistory.addColumn("SrNo"); //0 - Read Only
            DataModel_DocHistory.addColumn("Doc Name"); //1
            DataModel_DocHistory.addColumn("Date"); //2
            DataModel_DocHistory.addColumn("Action"); //3
            DataModel_DocHistory.addColumn("User"); //4
            
            tblDocHistory.getColumnModel().getColumn(0).setMaxWidth(30);
            tblDocHistory.getColumnModel().getColumn(1).setMinWidth(100);
            tblDocHistory.getColumnModel().getColumn(2).setMinWidth(80);
            tblDocHistory.getColumnModel().getColumn(2).setMaxWidth(80);
            tblDocHistory.getColumnModel().getColumn(3).setMinWidth(80);
            tblDocHistory.getColumnModel().getColumn(3).setMaxWidth(80);
            tblDocHistory.getColumnModel().getColumn(4).setMinWidth(100);
            tblDocHistory.getColumnModel().getColumn(4).setMaxWidth(100);
            
            DataModel_DocHistory.SetVariable(0, "SrNo"); //0 - Read Only
            DataModel_DocHistory.SetVariable(1, "DOC_NAME"); //1
            DataModel_DocHistory.SetVariable(2, "DATE_OF_ENTRY"); //1
            DataModel_DocHistory.SetVariable(3, "ACTION"); //1
            DataModel_DocHistory.SetVariable(4, "USERID"); //1
        
            
            
            Object[] rowData = new Object[1];
            try{
                //System.out.println("SELECT * FROM DOC_MGMT.PURCHASE_RATE_APPROVAL_DOC_HISTORY where DOCUMENT_DOC_NO='"+txtDocNo.getText()+"'");
                ResultSet rs = data.getResult("SELECT * FROM DOC_MGMT.PURCHASE_RATE_APPROVAL_DOC_HISTORY where DOCUMENT_DOC_NO='"+txtDocNo.getText()+"'");
                int i=1;
                while(!rs.isAfterLast())
                {

                    DataModel_DocHistory.addRow(rowData);
                    DataModel_DocHistory.setValueByVariable("SrNo", i+"", i-1);
                    DataModel_DocHistory.setValueByVariable("DOC_NAME", rs.getString("DOC_NAME"), 0);
                    DataModel_DocHistory.setValueByVariable("DATE_OF_ENTRY", rs.getString("DATE_OF_ENTRY"), 0);
                    DataModel_DocHistory.setValueByVariable("ACTION", rs.getString("ACTION"), 0);
                    DataModel_DocHistory.setValueByVariable("USERID",clsUser.getUserName(EITLERPGLOBAL.gCompanyID, Integer.parseInt(rs.getString("USERID"))) , 0);
                    
                    rs.next();
                }
            }catch(Exception e)
            {
               // e.printStackTrace();
            }
            
            
            
        }catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    private void DisplayStatus(){
        setInvisible();
        formateGridDocHistory();
        clsDocRateApproval  d = new clsDocRateApproval();
        ArrayList<clsDocRateApproval> dataList = d.getStatus(txtDocNo.getText());
        for(int i=0;i<dataList.size();i++)
        {
            clsDocRateApproval Obj = dataList.get(i);
            if(i==0)
            {
                lblAvailable1.setVisible(true);
                lblAvailable1.setText(Obj.getDOC_NAME());
                lblAvailable1.setForeground(Color.GREEN);
                btnShow1.setVisible(true);
                btnRemove1.setVisible(true);
                UID_1.setText(Obj.getDOC_ID()+"");
                doc_name1.setText(Obj.getDOC_NAME());
            }
            if(i==1)
            {
                lblAvailable2.setVisible(true);
                lblAvailable2.setText(Obj.getDOC_NAME());
                lblAvailable2.setForeground(Color.GREEN);
                btnShow2.setVisible(true);
                btnRemove2.setVisible(true);
                UID_2.setText(Obj.getDOC_ID()+"");
                doc_name2.setText(Obj.getDOC_NAME());
            }
            if(i==2)
            {
                lblAvailable3.setVisible(true);
                lblAvailable3.setText(Obj.getDOC_NAME());
                lblAvailable3.setForeground(Color.GREEN);
                btnShow3.setVisible(true);
                btnRemove3.setVisible(true);
                UID_3.setText(Obj.getDOC_ID()+"");
                doc_name3.setText(Obj.getDOC_NAME());
            }
            if(i==3)
            {
                lblAvailable4.setVisible(true);
                lblAvailable4.setText(Obj.getDOC_NAME());
                lblAvailable4.setForeground(Color.GREEN);
                btnShow4.setVisible(true);
                btnRemove4.setVisible(true);
                UID_4.setText(Obj.getDOC_ID()+"");
                doc_name4.setText(Obj.getDOC_NAME());
            }
            if(i==4)
            {
                lblAvailable5.setVisible(true);
                lblAvailable5.setText(Obj.getDOC_NAME());
                lblAvailable5.setForeground(Color.GREEN);
                btnShow5.setVisible(true);
                btnRemove5.setVisible(true);
                UID_5.setText(Obj.getDOC_ID()+"");
                doc_name5.setText(Obj.getDOC_NAME());
            }
            if(i==5)
            {
                lblAvailable6.setVisible(true);
                lblAvailable6.setText(Obj.getDOC_NAME());
                lblAvailable6.setForeground(Color.GREEN);
                btnShow6.setVisible(true);
                btnRemove6.setVisible(true);
                UID_6.setText(Obj.getDOC_ID()+"");
                doc_name6.setText(Obj.getDOC_NAME());
            }
            if(i==6)
            {
                lblAvailable7.setVisible(true);
                lblAvailable7.setText(Obj.getDOC_NAME());
                lblAvailable7.setForeground(Color.GREEN);
                btnShow7.setVisible(true);
                btnRemove7.setVisible(true);
                UID_7.setText(Obj.getDOC_ID()+"");
                doc_name7.setText(Obj.getDOC_NAME());
            }
            if(i==7)
            {
                lblAvailable8.setVisible(true);
                lblAvailable8.setText(Obj.getDOC_NAME());
                lblAvailable8.setForeground(Color.GREEN);
                btnShow8.setVisible(true);
                btnRemove8.setVisible(true);
                UID_8.setText(Obj.getDOC_ID()+"");
                doc_name8.setText(Obj.getDOC_NAME());
            }
            if(i==8)
            {
                lblAvailable9.setVisible(true);
                lblAvailable9.setText(Obj.getDOC_NAME());
                lblAvailable9.setForeground(Color.GREEN);
                btnShow9.setVisible(true);
                btnRemove9.setVisible(true);
                UID_9.setText(Obj.getDOC_ID()+"");
                doc_name9.setText(Obj.getDOC_NAME());
            }
            if(i==9)
            {
                lblAvailable10.setVisible(true);
                lblAvailable10.setText(Obj.getDOC_NAME());
                lblAvailable10.setForeground(Color.GREEN);
                btnShow10.setVisible(true);
                btnRemove10.setVisible(true);
                UID_10.setText(Obj.getDOC_ID()+"");
                doc_name10.setText(Obj.getDOC_NAME());
            }
            
        } 
        if((EditMode==EITLERPGLOBAL.ADD && clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) || (EditMode==EITLERPGLOBAL.EDIT && clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)))
        {
            doc_name1.setEnabled(true);
            doc_name2.setEnabled(true);
            doc_name3.setEnabled(true);
            doc_name4.setEnabled(true);
            doc_name5.setEnabled(true);
            doc_name6.setEnabled(true);
            doc_name7.setEnabled(true);
            doc_name8.setEnabled(true);
            doc_name9.setEnabled(true);
            doc_name10.setEnabled(true);
            btnUpload.setEnabled(true);
            btnRemove1.setEnabled(true);
            btnRemove2.setEnabled(true);
            btnRemove3.setEnabled(true);
            btnRemove4.setEnabled(true);
            btnRemove5.setEnabled(true);
            btnRemove6.setEnabled(true);
            btnRemove7.setEnabled(true);
            btnRemove8.setEnabled(true);
            btnRemove9.setEnabled(true);
            btnRemove10.setEnabled(true);
        }
        else
        {
            doc_name1.setEnabled(false);
            doc_name2.setEnabled(false);
            doc_name3.setEnabled(false);
            doc_name4.setEnabled(false);
            doc_name5.setEnabled(false);
            doc_name6.setEnabled(false);
            doc_name7.setEnabled(false);
            doc_name8.setEnabled(false);
            doc_name9.setEnabled(false);
            doc_name10.setEnabled(false);
            btnUpload.setEnabled(false);
            btnRemove1.setEnabled(false);
            btnRemove2.setEnabled(false);
            btnRemove3.setEnabled(false);
            btnRemove4.setEnabled(false);
            btnRemove5.setEnabled(false);
            btnRemove6.setEnabled(false);
            btnRemove7.setEnabled(false);
            btnRemove8.setEnabled(false);
            btnRemove9.setEnabled(false);
            btnRemove10.setEnabled(false);
        }
        
        
    }
    private void setInvisible()
    {
        lblAvailable1.setText("");
        lblAvailable2.setText("");
        lblAvailable3.setText("");
        lblAvailable4.setText("");
        lblAvailable5.setText("");
        lblAvailable6.setText("");
        lblAvailable7.setText("");
        lblAvailable8.setText("");
        lblAvailable9.setText("");
        lblAvailable10.setText("");
        
        btnShow1.setVisible(false);
        btnShow2.setVisible(false);
        btnShow3.setVisible(false);
        btnShow4.setVisible(false);
        btnShow5.setVisible(false);
        btnShow6.setVisible(false);
        btnShow7.setVisible(false);
        btnShow8.setVisible(false);
        btnShow9.setVisible(false);
        btnShow10.setVisible(false);
        
        btnRemove1.setVisible(false);
        btnRemove2.setVisible(false);
        btnRemove3.setVisible(false);
        btnRemove4.setVisible(false);
        btnRemove5.setVisible(false);
        btnRemove6.setVisible(false);
        btnRemove7.setVisible(false);
        btnRemove8.setVisible(false);
        btnRemove9.setVisible(false);
        btnRemove10.setVisible(false);
        
        btnRemove1.setEnabled(false);
        btnRemove2.setEnabled(false);
        btnRemove3.setEnabled(false);
        btnRemove4.setEnabled(false);
        btnRemove5.setEnabled(false);
        btnRemove6.setEnabled(false);
        btnRemove7.setEnabled(false);
        btnRemove8.setEnabled(false);
        btnRemove9.setEnabled(false);
        btnRemove10.setEnabled(false);
        
        doc_name1.setText("");
        doc_name2.setText("");
        doc_name3.setText("");
        doc_name4.setText("");
        doc_name5.setText("");
        doc_name6.setText("");
        doc_name7.setText("");
        doc_name8.setText("");
        doc_name9.setText("");
        doc_name10.setText("");
        
        doc_name1.setEnabled(false);
        doc_name2.setEnabled(false);
        doc_name3.setEnabled(false);
        doc_name4.setEnabled(false);
        doc_name5.setEnabled(false);
        doc_name6.setEnabled(false);
        doc_name7.setEnabled(false);
        doc_name8.setEnabled(false);
        doc_name9.setEnabled(false);
        doc_name10.setEnabled(false);
        
        UID_1.setText("");
        UID_2.setText("");
        UID_3.setText("");
        UID_4.setText("");
        UID_5.setText("");
        UID_6.setText("");
        UID_7.setText("");
        UID_8.setText("");
        UID_9.setText("");
        UID_10.setText("");
        
    }
    private void deleteFileFromDatabase(String file_name)
    {
        if(!file_name.equals(""))
        {
            int n=JOptionPane.showConfirmDialog(this, "Are you sure? You want to remove file "+file_name+"?","Delete Option",2);
            //int n=JOptionPane.showConfirmDialog(this, "Are you sure? You want to remove file "+file_name+"?",2);
            if(n==JOptionPane.YES_OPTION)
            {
                data.Execute("DELETE FROM DOC_MGMT.PURCHASE_RATE_APPROVAL_DOCUMENT where DOCUMENT_DOC_NO='"+txtDocNo.getText()+"' AND DOC_NAME='"+file_name+"' ");
                System.out.println("DELETE FROM DOC_MGMT.PURCHASE_RATE_APPROVAL_DOCUMENT where DOCUMENT_DOC_NO='"+txtDocNo.getText()+"' AND DOC_NAME='"+file_name+"' ");
                System.out.println("INSERT INTO DOC_MGMT.PURCHASE_RATE_APPROVAL_DOC_HISTORY (DOCUMENT_DOC_NO,DOC_NAME,DATE_OF_ENTRY,ACTION,USERID) VALUES ('"+txtDocNo.getText()+"','"+file_name+"','"+EITLERPGLOBAL.getCurrentDateTimeDB()+"','DELETE','"+EITLERPGLOBAL.gUserID+"')");
                data.Execute("INSERT INTO DOC_MGMT.PURCHASE_RATE_APPROVAL_DOC_HISTORY (DOCUMENT_DOC_NO,DOC_NAME,DATE_OF_ENTRY,ACTION,USERID) VALUES ('"+txtDocNo.getText()+"','"+file_name+"','"+EITLERPGLOBAL.getCurrentDateTimeDB()+"','DELETE','"+EITLERPGLOBAL.gUserID+"')");
            }
        }
    }
    
    private void btnShow2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShow2ActionPerformed
        // TODO add your handling code here:
        openFile(lblAvailable2.getText());
    }//GEN-LAST:event_btnShow2ActionPerformed

    private void btnRemove2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemove2ActionPerformed
        // TODO add your handling code here:
        deleteFileFromDatabase(lblAvailable2.getText());
        DisplayStatus();
    }//GEN-LAST:event_btnRemove2ActionPerformed

    private void btnShow3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShow3ActionPerformed
        // TODO add your handling code here:openFile(lblAvailable1.getText());openFile(lblAvailable1.getText());
        openFile(lblAvailable3.getText());
    }//GEN-LAST:event_btnShow3ActionPerformed

    private void btnRemove3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemove3ActionPerformed
        // TODO add your handling code here:
        deleteFileFromDatabase(lblAvailable3.getText());
        DisplayStatus();
    }//GEN-LAST:event_btnRemove3ActionPerformed

    private void btnRemove5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemove5ActionPerformed
        // TODO add your handling code here:
        deleteFileFromDatabase(lblAvailable5.getText());
        DisplayStatus();
    }//GEN-LAST:event_btnRemove5ActionPerformed

    private void btnRemove4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemove4ActionPerformed
        // TODO add your handling code here:
        deleteFileFromDatabase(lblAvailable4.getText());
        DisplayStatus();
    }//GEN-LAST:event_btnRemove4ActionPerformed

    private void btnShow5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShow5ActionPerformed
        // TODO add your handling code here:
        openFile(lblAvailable5.getText());
    }//GEN-LAST:event_btnShow5ActionPerformed

    private void btnShow4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShow4ActionPerformed
        // TODO add your handling code here:
        openFile(lblAvailable4.getText());
    }//GEN-LAST:event_btnShow4ActionPerformed

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        // TODO add your handling code here:
        if(!UID_10.getText().equals("")){
            JOptionPane.showMessageDialog(this, "10 Documents only allowed");
            return;
        }
        uploadDocument();
    }//GEN-LAST:event_btnUploadActionPerformed

    private void btnShow6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShow6ActionPerformed
        // TODO add your handling code here:
        openFile(lblAvailable6.getText());
    }//GEN-LAST:event_btnShow6ActionPerformed

    private void btnRemove6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemove6ActionPerformed
        // TODO add your handling code here:
        deleteFileFromDatabase(lblAvailable6.getText());
        DisplayStatus();
    }//GEN-LAST:event_btnRemove6ActionPerformed

    private void btnShow7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShow7ActionPerformed
        // TODO add your handling code here:
        openFile(lblAvailable7.getText());
    }//GEN-LAST:event_btnShow7ActionPerformed

    private void btnRemove7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemove7ActionPerformed
        // TODO add your handling code here:
        deleteFileFromDatabase(lblAvailable7.getText());
        DisplayStatus();
    }//GEN-LAST:event_btnRemove7ActionPerformed

    private void btnShow8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShow8ActionPerformed
        // TODO add your handling code here:
        openFile(lblAvailable8.getText());
    }//GEN-LAST:event_btnShow8ActionPerformed

    private void btnRemove8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemove8ActionPerformed
        // TODO add your handling code here:
        deleteFileFromDatabase(lblAvailable8.getText());
        DisplayStatus();
    }//GEN-LAST:event_btnRemove8ActionPerformed

    private void btnRemove9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemove9ActionPerformed
        // TODO add your handling code here:
        deleteFileFromDatabase(lblAvailable9.getText());
        DisplayStatus();
    }//GEN-LAST:event_btnRemove9ActionPerformed

    private void btnShow9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShow9ActionPerformed
        // TODO add your handling code here:
        openFile(lblAvailable9.getText());
    }//GEN-LAST:event_btnShow9ActionPerformed

    private void btnShow10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShow10ActionPerformed
        // TODO add your handling code here:
        openFile(lblAvailable10.getText());
    }//GEN-LAST:event_btnShow10ActionPerformed

    private void btnRemove10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemove10ActionPerformed
        // TODO add your handling code here:
        deleteFileFromDatabase(lblAvailable10.getText());
        DisplayStatus();
    }//GEN-LAST:event_btnRemove10ActionPerformed
    private void uploadDocument(){
        try{

            if(txtDocNo.getText().equals(""))
            {
                JOptionPane.showMessageDialog(this, "Please select Document");
                return;
            }
            
            File Source_File;
            JFileChooser chooser =new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("PDF Files", "pdf", "jpg");
            //sfilter.
            chooser.setFileFilter(filter);//
            
            int n  = chooser.showOpenDialog(this);
            
            Source_File = chooser.getSelectedFile();
            clsDocRateApproval d = new clsDocRateApproval();
            FileInputStream inputStream = new FileInputStream(Source_File);
            d.setDOC_NAME(Source_File.getName());
            d.setDOCUMENT(inputStream);
            d.setDOCUMENT_DOC_NO(txtDocNo.getText());
            System.out.println("File Size : "+(int)Source_File.length());
            if((int)Source_File.length() < 1000000)
            {
                d.saveDocumentFile((int)Source_File.length());

                System.out.println("Uploding Done...!");
            }
            else
            {
                JOptionPane.showMessageDialog(this, "File size not more than 1 MB allowed");
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        DisplayStatus();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem NEW_REPORT;
    private javax.swing.JMenuItem OLD_REPORT;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableC;
    private javax.swing.JTable TableHS;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JLabel UID_1;
    private javax.swing.JLabel UID_10;
    private javax.swing.JLabel UID_2;
    private javax.swing.JLabel UID_3;
    private javax.swing.JLabel UID_4;
    private javax.swing.JLabel UID_5;
    private javax.swing.JLabel UID_6;
    private javax.swing.JLabel UID_7;
    private javax.swing.JLabel UID_8;
    private javax.swing.JLabel UID_9;
    private javax.swing.JButton btnRemove1;
    private javax.swing.JButton btnRemove10;
    private javax.swing.JButton btnRemove2;
    private javax.swing.JButton btnRemove3;
    private javax.swing.JButton btnRemove4;
    private javax.swing.JButton btnRemove5;
    private javax.swing.JButton btnRemove6;
    private javax.swing.JButton btnRemove7;
    private javax.swing.JButton btnRemove8;
    private javax.swing.JButton btnRemove9;
    private javax.swing.JButton btnShow1;
    private javax.swing.JButton btnShow10;
    private javax.swing.JButton btnShow2;
    private javax.swing.JButton btnShow3;
    private javax.swing.JButton btnShow4;
    private javax.swing.JButton btnShow5;
    private javax.swing.JButton btnShow6;
    private javax.swing.JButton btnShow7;
    private javax.swing.JButton btnShow8;
    private javax.swing.JButton btnShow9;
    private javax.swing.JButton btnUpload;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkCancelled;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbItem;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDeSelectAll;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdDisplay;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdGet;
    private javax.swing.JButton cmdItemHistory;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemarksBig;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdSelectAll;
    private javax.swing.JButton cmdShowLastPO1;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JTextField doc_name1;
    private javax.swing.JTextField doc_name10;
    private javax.swing.JTextField doc_name2;
    private javax.swing.JTextField doc_name3;
    private javax.swing.JTextField doc_name4;
    private javax.swing.JTextField doc_name5;
    private javax.swing.JTextField doc_name6;
    private javax.swing.JTextField doc_name7;
    private javax.swing.JTextField doc_name8;
    private javax.swing.JTextField doc_name9;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblAvailable1;
    private javax.swing.JLabel lblAvailable10;
    private javax.swing.JLabel lblAvailable2;
    private javax.swing.JLabel lblAvailable3;
    private javax.swing.JLabel lblAvailable4;
    private javax.swing.JLabel lblAvailable5;
    private javax.swing.JLabel lblAvailable6;
    private javax.swing.JLabel lblAvailable7;
    private javax.swing.JLabel lblAvailable8;
    private javax.swing.JLabel lblAvailable9;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JPopupMenu mnuShowDoc;
    private javax.swing.JMenuItem mnuShowIndent;
    private javax.swing.JMenuItem mnuShowLastPO;
    private javax.swing.JMenuItem mnuShowSummary;
    private javax.swing.JTable tblDocHistory;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtIndentDate;
    private javax.swing.JTextField txtIndentDesc;
    private javax.swing.JTextField txtIndentNo;
    private javax.swing.JTextField txtInquiryDate;
    private javax.swing.JTextField txtInquiryNo;
    private javax.swing.JTextField txtItemExtraDesc;
    private javax.swing.JTextField txtPRDate;
    private javax.swing.JTextField txtPRNo;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtSummaryDate;
    private javax.swing.JTextField txtSummaryNo;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables

    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }

    private void SetFields(boolean pStat) {
        txtDocNo.setEnabled(pStat);
        txtDocDate.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        //cmdAdd.setEnabled(pStat);
        //cmdRemove.setEnabled(pStat);
        txtInquiryNo.setEnabled(pStat);
        txtInquiryDate.setEnabled(pStat);
        //txtPRNo.setEnabled(pStat);
        //txtPRDate.setEnabled(pStat);
        //txtSummaryNo.setEnabled(pStat);
        //txtSummaryDate.setEnabled(pStat);
        //txtIndentNo.setEnabled(pStat);
        //txtIndentDate.setEnabled(pStat);

        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtFromRemarks.setEnabled(pStat);  //as per Mr, Aditya sir requirement
        txtToRemarks.setEnabled(pStat);
        cmdGet.setEnabled(pStat);
        
         if((EditMode==EITLERPGLOBAL.ADD && clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) || (EditMode==EITLERPGLOBAL.EDIT && clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)))
        {
            doc_name1.setEnabled(true);
            doc_name2.setEnabled(true);
            doc_name3.setEnabled(true);
            doc_name4.setEnabled(true);
            doc_name5.setEnabled(true);
            btnUpload.setEnabled(true);
            btnRemove1.setEnabled(true);
            btnRemove2.setEnabled(true);
            btnRemove3.setEnabled(true);
            btnRemove4.setEnabled(true);
            btnRemove5.setEnabled(true);
            
        }
        else
        {
            doc_name1.setEnabled(false);
            doc_name2.setEnabled(false);
            doc_name3.setEnabled(false);
            doc_name4.setEnabled(false);
            doc_name5.setEnabled(false);
            btnUpload.setEnabled(false);
            btnRemove1.setEnabled(false);
            btnRemove2.setEnabled(false);
            btnRemove3.setEnabled(false);
            btnRemove4.setEnabled(false);
            btnRemove5.setEnabled(false);
        }
        

        SetupApproval();

        DataModel.TableReadOnly(!pStat);
        cmdSelectAll.setEnabled(pStat);
        cmdDeSelectAll.setEnabled(pStat);
    }

    private void ClearFields() {
        txtDocNo.setText("");
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtRemarks.setText("");
        txtFromRemarks.setText("");
        txtInquiryNo.setText("");
        txtInquiryDate.setText("");
        txtPRNo.setText("");
        txtPRDate.setText("");
        txtSummaryNo.setText("");
        txtSummaryDate.setText("");
        txtIndentNo.setText("");
        txtIndentDate.setText("");
        txtToRemarks.setText("");
        lblTotal.setText("");
        FormatGrid();
        FormatGridA();
        FormatGridHS();
    }

    private void DisplayComparison(String pItemID) {
        try {
            Connection tmpConn;
            Statement stPO = null, stQuot = null;
            ResultSet rsPO = null, rsQuot = null, rsTmp = null;
            String QuotID = "";
            int QuotSrNo = 0;

            tmpConn = data.getConn();

            DataModelC = new EITLTableModel();
            TableC.removeAll();

            TableC.setModel(DataModelC);
            TableC.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            DataModelC.TableReadOnly(true);

            //Add Default Columns
            DataModelC.addColumn("Suppliers");

            String IndentDesc = "";

            for (int i = 0; i < Table.getRowCount(); i++) {
                String ItemID = DataModel.getValueByVariable("ITEM_ID", i);

                if (ItemID.equals(pItemID)) {
                    String SuppID = DataModel.getValueByVariable("SUPP_ID", i);
                    String SuppName = clsParty.getPartyNameByPartyID(EITLERPGLOBAL.gCompanyID, Integer.parseInt(SuppID));

                    DataModelC.addColumn(SuppID + "-" + SuppName);

                    txtItemExtraDesc.setText(DataModel.getValueByVariable("ITEM_EXTRA_DESC", i));

                    QuotID = DataModel.getValueByVariable("QUOT_ID", i);

                    if (!DataModel.getValueByVariable("QUOT_SR_NO", i).trim().equals("")) {
                        QuotSrNo = Integer.parseInt(DataModel.getValueByVariable("QUOT_SR_NO", i));
                    }

                    try {
                        rsTmp = data.getResult("SELECT INQUIRY_NO,INQUIRY_SRNO FROM D_PUR_QUOT_DETAIL WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND QUOT_ID='" + QuotID + "' AND SR_NO=" + QuotSrNo);

                        rsTmp.first();

                        if (rsTmp.getRow() > 0) {

                            String InquiryNo = rsTmp.getString("INQUIRY_NO");
                            int InquirySrNo = rsTmp.getInt("INQUIRY_SRNO");

                            rsTmp = data.getResult("SELECT ITEM_CODE,INDENT_NO,INDENT_SRNO FROM D_PUR_INQUIRY_DETAIL WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND INQUIRY_NO='" + InquiryNo + "' AND SR_NO=" + InquirySrNo);
                            rsTmp.first();

                            if (rsTmp.getRow() > 0) {
                                String IndentNo = rsTmp.getString("INDENT_NO");
                                int IndentSrNo = rsTmp.getInt("INDENT_SRNO");
                                String IndentItem = rsTmp.getString("ITEM_CODE");

                                if ((!IndentNo.trim().equals("")) && IndentSrNo > 0) {
                                    rsTmp = data.getResult("SELECT ITEM_EXTRA_DESC FROM D_INV_INDENT_DETAIL WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND INDENT_NO='" + IndentNo + "' AND ITEM_CODE='" + pItemID + "'");
                                    rsTmp.first();

                                    if (rsTmp.getRow() > 0) {
                                        IndentDesc = rsTmp.getString("ITEM_EXTRA_DESC");
                                    }
                                }
                            }
                        }
                    } catch (Exception e) {
                    }

                    txtIndentDesc.setText(IndentDesc);
                }
            }

            //Add Default rows
            Object[] rowData = new Object[1];  //0
            rowData[0] = "Item ID";
            DataModelC.addRow(rowData);

            rowData = new Object[1];  //1
            rowData[0] = "Item Name";
            DataModelC.addRow(rowData);

            rowData = new Object[1];  //2
            rowData[0] = "HSN SAC CODE";
            DataModelC.addRow(rowData);

            rowData = new Object[1];  //3
            rowData[0] = "MAKE";
            DataModelC.addRow(rowData);

            rowData = new Object[1];  //4
            rowData[0] = "Suppliers's Description";
            DataModelC.addRow(rowData);

            rowData = new Object[1];  //5
            rowData[0] = "Qty";
            DataModelC.addRow(rowData);

            rowData = new Object[1];  //6
            rowData[0] = "Unit";
            DataModelC.addRow(rowData);

            rowData = new Object[1];  //7
            rowData[0] = "Rate";
            DataModelC.addRow(rowData);

            rowData = new Object[1];   //8
            rowData[0] = "Landed Rate";
            DataModelC.addRow(rowData);

            rowData = new Object[1];  //9
            rowData[0] = "Rate Difference";
            DataModelC.addRow(rowData);

            rowData = new Object[1];  //10
            rowData[0] = "% Difference (PO Rate)";
            DataModelC.addRow(rowData);

            rowData = new Object[1];  //11
            rowData[0] = "Landed Rate Difference";
            DataModelC.addRow(rowData);

            rowData = new Object[1];  //12
            rowData[0] = "% Difference (Landed Rate)";
            DataModelC.addRow(rowData);

            rowData=new Object[1];       //13
            rowData[0]="Landed without PatternCost";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];        //14
            rowData[0]="Landed Difference without PatternCost";
            DataModelC.addRow(rowData);
            
            rowData=new Object[1];       //15
            rowData[0]="% Difference (Landed without PatternCost)";
            DataModelC.addRow(rowData);
            
            rowData = new Object[1];  //16
            rowData[0] = "Payment Terms";
            DataModelC.addRow(rowData);

            rowData = new Object[1];   //17
            rowData[0] = "Price Basis";
            DataModelC.addRow(rowData);

            rowData = new Object[1];   //18
            rowData[0] = "Discount";
            DataModelC.addRow(rowData);

            rowData = new Object[1];  //19
            rowData[0] = "CGST";
            DataModelC.addRow(rowData);

            rowData = new Object[1];   //20
            rowData[0] = "SGST";
            DataModelC.addRow(rowData);

            rowData = new Object[1];   //21
            rowData[0] = "IGST";
            DataModelC.addRow(rowData);

            rowData = new Object[1];    //22
            rowData[0] = "COMPOSITION";
            DataModelC.addRow(rowData);

            rowData = new Object[1];    //23
            rowData[0] = "RCM";
            DataModelC.addRow(rowData);

            rowData = new Object[1];   //24
            rowData[0] = "GST COMPENSATION CESS";
            DataModelC.addRow(rowData);

            rowData = new Object[1];   //25
            rowData[0] = "Excise";
            DataModelC.addRow(rowData);

            rowData = new Object[1];   //26
            rowData[0] = "S.T.";
            DataModelC.addRow(rowData);

            rowData = new Object[1];   //27
            rowData[0] = "P.& F.";
            DataModelC.addRow(rowData);

            rowData = new Object[1];    //28
            rowData[0] = "Freight";
            DataModelC.addRow(rowData);

            rowData = new Object[1];    //29
            //rowData[0] = "Octroi";
            rowData[0]="Pattern Cost";
            DataModelC.addRow(rowData);

            rowData = new Object[1];   //30
            rowData[0] = "FOB";
            DataModelC.addRow(rowData);

            rowData = new Object[1];   //31
            rowData[0] = "CIE";
            DataModelC.addRow(rowData);

            rowData = new Object[1];   //32
            rowData[0] = "Insurance";
            DataModelC.addRow(rowData);

            rowData = new Object[1];   //33
            rowData[0] = "TCC";
            DataModelC.addRow(rowData);

            rowData = new Object[1];   //34
            rowData[0] = "Cenvat";
            DataModelC.addRow(rowData);

            rowData = new Object[1];    //35
            rowData[0] = "Service Tax";
            DataModelC.addRow(rowData);

            rowData = new Object[1];   //36
            rowData[0] = "Price List Ref";
            DataModelC.addRow(rowData);

            rowData = new Object[1];    //37
            rowData[0] = "Other Terms";
            DataModelC.addRow(rowData);

            int ColNo = 0;

            //Add Another column
            DataModelC.addColumn("Last P.O.");

            /*DataModel.SetVariable(1,"ITEM_ID"); //1
             DataModel.SetVariable(2,"ITEM_NAME"); //2 //Read Only
             DataModel.SetVariable(3,"SUPP_ID");//3
             DataModel.SetVariable(4,"SUPP_NAME");//4
             DataModel.SetVariable(5,"LAST_PO_NO");//5
             DataModel.SetVariable(6,"LAST_PO_DATE");//6
             DataModel.SetVariable(7,"LAST_PO_QTY");//7
             DataModel.SetVariable(8,"LAST_PO_RATE");//8
             DataModel.SetVariable(9,"LAST_LANDED_RATE");//9
             DataModel.SetVariable(10,"CURRENT_QTY");//10
             DataModel.SetVariable(11,"CURRENT_RATE");//11
             DataModel.SetVariable(12,"CURRENT_LAND_RATE");//12
             DataModel.SetVariable(13,"RATE_DIFFERENCE");//13
             DataModel.SetVariable(14,"RATE_DIFFERENCE_PER");//14
             DataModel.SetVariable(15,"RATE_DIFFERENCE_RATE");//15
             DataModel.SetVariable(16,"RATE_DIFFERENCE_RATE_PER");//16
             DataModel.SetVariable(17,"REMARKS");//17
             DataModel.SetVariable(18,"QUOT_ID");//18
             DataModel.SetVariable(19,"QUOT_SR_NO");//19*/
            for (int i = 0; i < Table.getRowCount(); i++) {
                String ItemID = DataModel.getValueByVariable("ITEM_ID", i);
                String ItemName = clsItem.getItemName(EITLERPGLOBAL.gCompanyID, ItemID);

                if (ItemID.equals(pItemID)) {
                    ColNo++;

                    //Now Display Qty and rate
                    double Qty = Double.parseDouble(DataModel.getValueByVariable("CURRENT_QTY", i));
                    double Rate = Double.parseDouble(DataModel.getValueByVariable("CURRENT_RATE", i));
                    double LandedRate = Double.parseDouble(DataModel.getValueByVariable("CURRENT_LAND_RATE", i));
                    double RateDiff = EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("RATE_DIFFERENCE_RATE", i)), 3);
                    double RateDiffPer = EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("RATE_DIFFERENCE_PER_RATE", i)), 3);
                    double LandRateDiff = EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("RATE_DIFFERENCE", i)), 3);
                    double LandRateDiffPer = EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("RATE_DIFFERENCE_PER", i)), 3);

                    double PatternCost=0;
                    double PatternCostperQty=0;
                    if(!DataModel.getValueByVariable("OCTROI_TERM",i).equals("N/A")){
                    PatternCost=Double.parseDouble(DataModel.getValueByVariable("OCTROI_TERM",i)); //Pattern Cost
                    PatternCostperQty=PatternCost/Qty;
                    }else{
                        PatternCostperQty=0;
                    }
                    
                    String LastPONo = DataModel.getValueByVariable("LAST_PO_NO", i);
                    double LastQty = Double.parseDouble(DataModel.getValueByVariable("LAST_PO_QTY", i));
                    double LastRate = Double.parseDouble(DataModel.getValueByVariable("LAST_PO_RATE", i));
                    double LastLandedRate = Double.parseDouble(DataModel.getValueByVariable("LAST_LANDED_RATE", i));

                    String QuotNo = DataModel.getValueByVariable("QUOT_ID", i);
                    String ItemExtraDesc = DataModel.getValueByVariable("ITEM_EXTRA_DESC", i);

                    String HSN_SAC_CODE = DataModel.getValueByVariable("HSN_SAC_CODE", i);

                    String UnitName = DataModel.getValueByVariable("UNIT_NAME", i);
                    String Make = DataModel.getValueByVariable("MAKE", i);
                    String PriceListNo = DataModel.getValueByVariable("PRICE_LIST_NO", i);

                    //Now Displaying Values
                    TableC.setValueAt(ItemID, 0, ColNo);
                    TableC.setValueAt(ItemName, 1, ColNo);
                    TableC.setValueAt(HSN_SAC_CODE, 2, ColNo);
                    TableC.setValueAt(Make, 3, ColNo);
                    TableC.setValueAt(ItemExtraDesc, 4, ColNo);
                    TableC.setValueAt(Double.toString(Qty), 5, ColNo);
                    TableC.setValueAt(UnitName, 6, ColNo);
                    TableC.setValueAt(Double.toString(Rate), 7, ColNo);
                    TableC.setValueAt(Double.toString(LandedRate), 8, ColNo);
                    TableC.setValueAt(Double.toString(RateDiff), 9, ColNo);
                    TableC.setValueAt(Double.toString(RateDiffPer), 10, ColNo);
                    TableC.setValueAt(Double.toString(LandRateDiff), 11, ColNo);
                    TableC.setValueAt(Double.toString(LandRateDiffPer), 12, ColNo);
                    TableC.setValueAt(Double.toString(LastQty), 5, TableC.getColumnCount() - 1);
                    TableC.setValueAt(PriceListNo, 30, ColNo);  //27
                   //TableC.setValueAt(HSN_SAC_CODE, 29, ColNo);

                    stPO = tmpConn.createStatement();
                    rsPO = stPO.executeQuery("SELECT UNIT,ITEM_DESC,MAKE,PRICE_LIST_NO,HSN_SAC_CODE FROM D_PUR_PO_DETAIL WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND PO_NO='" + LastPONo + "' AND ITEM_ID='" + ItemID + "'");
                    rsPO.first();

                    if (rsPO.getRow() > 0) {
                        String POUnitName = clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", rsPO.getInt("UNIT"));
                        TableC.setValueAt(POUnitName, 5, TableC.getColumnCount() - 1);
                        TableC.setValueAt(rsPO.getString("ITEM_DESC"), 1, TableC.getColumnCount() - 1);
                        TableC.setValueAt(rsPO.getString("HSN_SAC_CODE"), 2, TableC.getColumnCount() - 1);
                        TableC.setValueAt(rsPO.getString("MAKE"), 3, TableC.getColumnCount() - 1);
                        TableC.setValueAt(rsPO.getString("PRICE_LIST_NO"), 30, TableC.getColumnCount() - 1);  //27
                    }

                    TableC.setValueAt(Double.toString(LastRate), 7, TableC.getColumnCount() - 1);
                    TableC.setValueAt(Double.toString(LastLandedRate), 8, TableC.getColumnCount() - 1);

                    if(!DataModel.getValueByVariable("OCTROI_TERM",i).equals("N/A")){
                    TableC.setValueAt(Double.toString(LandedRate-PatternCostperQty),13,ColNo);
                    TableC.setValueAt(Double.toString(EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("LANDED_RATE_DIFFERENCE_WITHOUT_PATTERNCOST",i)),3)),14,ColNo);
                    TableC.setValueAt(Double.toString(EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("LANDED_RATE_DIFFERENCE_WITHOUT_PATTERNCOST_PER",i)),3)),15,ColNo);
                    }
//                    else{
//                     TableC.setValueAt("N/A",13,ColNo);
//                    TableC.setValueAt("N/A",14,ColNo);
//                    TableC.setValueAt("N/A",15,ColNo);                            
//                            }
                    /*TableC.setValueAt(Double.toString(RateDiff),7,TableC.getColumnCount()-1);
                     TableC.setValueAt(Double.toString(LandRateDiff),9,TableC.getColumnCount()-1);
                     TableC.setValueAt(Double.toString(EITLERPGLOBAL.round(RateDiffPer,3)),8,TableC.getColumnCount()-1);
                     TableC.setValueAt(Double.toString(EITLERPGLOBAL.round(LandRateDiffPer,3)),10,TableC.getColumnCount()-1);*/
                    //Now turn of Terms
                    if (!LastPONo.equals("")) {
                        stPO = tmpConn.createStatement();
                        rsPO = stPO.executeQuery("SELECT * FROM D_PUR_PO_HEADER WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND PO_NO='" + LastPONo + "'");
                        rsPO.first();

                        if (rsPO.getRow() > 0) {

                            TableC.setValueAt(rsPO.getString("PAYMENT_TERM"),16,TableC.getColumnCount()-1);//13
                            TableC.setValueAt(rsPO.getString("PRICE_BASIS_TERM"),17,TableC.getColumnCount()-1);//14
                            TableC.setValueAt(rsPO.getString("DISCOUNT_TERM"),18,TableC.getColumnCount()-1);//15
                            
                            TableC.setValueAt(rsPO.getString("CGST_TERM"),25,TableC.getColumnCount()-1);  //22
                            TableC.setValueAt(rsPO.getString("SGST_TERM"),25,TableC.getColumnCount()-1);  //22
                            TableC.setValueAt(rsPO.getString("IGST_TERM"),25,TableC.getColumnCount()-1);   //22
                            TableC.setValueAt(rsPO.getString("COMPOSITION_TERM"),25,TableC.getColumnCount()-1);   //22
                            TableC.setValueAt(rsPO.getString("RCM_TERM"),25,TableC.getColumnCount()-1);  //22
                            TableC.setValueAt(rsPO.getString("GST_COMPENSATION_CESS_TERM"),25,TableC.getColumnCount()-1);  //22
                            
                            TableC.setValueAt(rsPO.getString("EXCISE_TERM"),25,TableC.getColumnCount()-1);  //22
                            TableC.setValueAt(rsPO.getString("ST_TERM"),26,TableC.getColumnCount()-1);  //23
                            TableC.setValueAt(rsPO.getString("PF_TERM"),27,TableC.getColumnCount()-1);  //24
                            TableC.setValueAt(rsPO.getString("FREIGHT_TERM"),28,TableC.getColumnCount()-1);  //25
                            TableC.setValueAt(rsPO.getString("OCTROI_TERM"),29,TableC.getColumnCount()-1);  //26
                            TableC.setValueAt(rsPO.getString("FOB_TERM"),30,TableC.getColumnCount()-1);  //27
                            TableC.setValueAt(rsPO.getString("CIE_TERM"),31,TableC.getColumnCount()-1);  //28
                            TableC.setValueAt(rsPO.getString("INSURANCE_TERM"),32,TableC.getColumnCount()-1);  //29
                            TableC.setValueAt(rsPO.getString("TCC_TERM"),33,TableC.getColumnCount()-1);   //30
                            TableC.setValueAt(rsPO.getString("CENVAT_TERM"),34,TableC.getColumnCount()-1);  //31
                            TableC.setValueAt(rsPO.getString("SERVICE_TAX_TERM"),35,TableC.getColumnCount()-1);  //32
                            TableC.setValueAt(rsPO.getString("OTHERS_TERM"),36,TableC.getColumnCount()-1);  //33

                            try {
                                if (rsPO.getString("DISCOUNT_TERM").trim().equals("")) {
                                    rsTmp = data.getResult("SELECT COLUMN_1_PER FROM D_PUR_PO_DETAIL WHERE PO_NO='" + LastPONo + "' AND ITEM_ID='" + ItemID + "'");
                                    rsTmp.first();

                                    if (rsTmp.getRow() > 0) {
                                        double DiscountPer = rsTmp.getDouble("COLUMN_1_PER");
                                        String Discount = Double.toString(DiscountPer) + "%";

                                        TableC.setValueAt(Discount, 18, TableC.getColumnCount() - 1);  //15
                                    }

                                }
                            } catch (Exception e) {

                            }

                        }
                    }

                    TableC.setValueAt(DataModel.getValueByVariable("PAYMENT_TERM", i) ,16,ColNo);  //13
                    TableC.setValueAt(DataModel.getValueByVariable("PRICE_BASIS_TERM",i),17,ColNo);  //14
                    TableC.setValueAt(DataModel.getValueByVariable("DISCOUNT_TERM",i),18,ColNo);  //15
                    
                    TableC.setValueAt(DataModel.getValueByVariable("CGST_TERM",i),19,ColNo);  //16
                    TableC.setValueAt(DataModel.getValueByVariable("SGST_TERM",i),20,ColNo);  //17
                    TableC.setValueAt(DataModel.getValueByVariable("IGST_TERM",i),21,ColNo);  //18
                    TableC.setValueAt(DataModel.getValueByVariable("COMPOSITION_TERM",i),22,ColNo);  //19
                    TableC.setValueAt(DataModel.getValueByVariable("RCM_TERM",i),23,ColNo);  //20
                    TableC.setValueAt(DataModel.getValueByVariable("GST_COMPENSATION_CESS_TERM",i),24,ColNo);  //21
                    
                    
                    TableC.setValueAt(DataModel.getValueByVariable("EXCISE_TERM",i),25,ColNo); //22
                    TableC.setValueAt(DataModel.getValueByVariable("ST_TERM",i),26,ColNo);  //23
                    TableC.setValueAt(DataModel.getValueByVariable("PF_TERM",i),27,ColNo);  //24
                    TableC.setValueAt(DataModel.getValueByVariable("FREIGHT_TERM",i),28,ColNo);  //25
                    TableC.setValueAt(DataModel.getValueByVariable("OCTROI_TERM",i),29,ColNo);  //26
                    TableC.setValueAt(DataModel.getValueByVariable("FOB_TERM",i),30,ColNo);  //27
                    TableC.setValueAt(DataModel.getValueByVariable("CIE_TERM",i),31,ColNo);  //28
                    TableC.setValueAt(DataModel.getValueByVariable("INSURANCE_TERM",i),32,ColNo); //29
                    TableC.setValueAt(DataModel.getValueByVariable("TCC_TERM",i),33,ColNo);  //30
                    TableC.setValueAt(DataModel.getValueByVariable("CENVAT_TERM",i),34,ColNo);  //31
                    TableC.setValueAt(DataModel.getValueByVariable("SERVICE_TAX_TERM",i),35,ColNo);  //32
                    TableC.setValueAt(DataModel.getValueByVariable("OTHERS_TERM",i),37,ColNo);  //34

                    /*if(!QuotNo.equals("")) {
                     //Now turn of Terms
                     stQuot=tmpConn.createStatement();
                     rsQuot=stQuot.executeQuery("SELECT * FROM D_PUR_QUOT_HEADER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND QUOT_ID='"+QuotNo+"'");
                     rsQuot.first();
                     
                     if(rsQuot.getRow()>0) {
                     TableC.setValueAt(rsQuot.getString("PAYMENT_TERM"),9,ColNo);
                     TableC.setValueAt(rsQuot.getString("PRICE_BASIS_TERM"),10,ColNo);
                     TableC.setValueAt(rsQuot.getString("DISCOUNT_TERM"),11,ColNo);
                     TableC.setValueAt(rsQuot.getString("EXCISE_TERM"),12,ColNo);
                     TableC.setValueAt(rsQuot.getString("ST_TERM"),13,ColNo);
                     TableC.setValueAt(rsQuot.getString("PF_TERM"),14,ColNo);
                     TableC.setValueAt(rsQuot.getString("FREIGHT_TERM"),15,ColNo);
                     TableC.setValueAt(rsQuot.getString("OCTROI_TERM"),16,ColNo);
                     TableC.setValueAt(rsQuot.getString("FOB_TERM"),17,ColNo);
                     TableC.setValueAt(rsQuot.getString("CIE_TERM"),18,ColNo);
                     TableC.setValueAt(rsQuot.getString("INSURANCE_TERM"),19,ColNo);
                     TableC.setValueAt(rsQuot.getString("TCC_TERM"),20,ColNo);
                     TableC.setValueAt(rsQuot.getString("CENVAT_TERM"),21,ColNo);
                     }
                     }*/
                }
            }

            //tmpConn.close();
            stPO.close();
            stQuot.close();
            rsPO.close();
            rsQuot.close();

        } catch (Exception e) {
        }

    }

    //Didplay data on the Screen
    private void DisplayData() {

        //=========== Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjApproval.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                }

                if (ObjApproval.getAttribute("APPROVED").getInt() != 1) {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (ObjApproval.getAttribute("CANCELLED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }

            }
        } catch (Exception c) {

        }
        //============================================//

        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            int ModuleID = 38;

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleID)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        try {
            double TotalAmount = 0;

            ClearFields();
            txtDocNo.setText((String) ObjApproval.getAttribute("APPROVAL_NO").getObj());
            lblTitle.setText("RATE CHANGE APPROVAL - " + txtDocNo.getText());
            lblRevNo.setText(Integer.toString((int) ObjApproval.getAttribute("REVISION_NO").getVal()));
            txtDocDate.setText(EITLERPGLOBAL.formatDate((String) ObjApproval.getAttribute("APPROVAL_DATE").getObj()));
            txtRemarks.setText((String) ObjApproval.getAttribute("REMARKS").getObj());
            txtInquiryNo.setText((String) ObjApproval.getAttribute("INQUIRY_NO").getObj());
            txtInquiryDate.setText(EITLERPGLOBAL.formatDate((String) ObjApproval.getAttribute("INQUIRY_DATE").getObj()));
            txtSummaryNo.setText((String) ObjApproval.getAttribute("QUOT_APPROVAL_NO").getObj());
            txtSummaryDate.setText(EITLERPGLOBAL.formatDate((String) ObjApproval.getAttribute("QUOT_APPROVAL_DATE").getObj()));
            txtIndentNo.setText((String) ObjApproval.getAttribute("INDENT_NO").getObj());
            txtIndentDate.setText(EITLERPGLOBAL.formatDate((String) ObjApproval.getAttribute("INDENT_DATE").getObj()));
            txtPRNo.setText((String) ObjApproval.getAttribute("REQ_NO").getObj());
            txtPRDate.setText(EITLERPGLOBAL.formatDate((String) ObjApproval.getAttribute("REQ_DATE").getObj()));
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) ObjApproval.getAttribute("HIERARCHY_ID").getVal());
            chkCancelled.setSelected(ObjApproval.getAttribute("CANCELLED").getBool());

            FormatGrid();
            //Now Generate Table
            for (int i = 1; i <= ObjApproval.colItems.size(); i++) {
                clsRateApprovalItem ObjItem = (clsRateApprovalItem) ObjApproval.colItems.get(Integer.toString(i));
                Object[] rowData = new Object[52];//49

                rowData[0] = Integer.toString(i);
                rowData[1] = (String) ObjItem.getAttribute("ITEM_ID").getObj();
                rowData[2] = clsItem.getItemName(EITLERPGLOBAL.gCompanyID, (String) ObjItem.getAttribute("ITEM_ID").getObj());
                rowData[3] = (String) ObjItem.getAttribute("ITEM_EXTRA_DESC").getObj();

                ///
                rowData[4] = (String) ObjItem.getAttribute("HSN_SAC_CODE").getObj();
                ///

                rowData[5] = (String) ObjItem.getAttribute("SUPP_ID").getObj();

                int PartyID = Integer.parseInt((String) ObjItem.getAttribute("SUPP_ID").getObj());
                String SuppName = clsParty.getPartyNameByPartyID(EITLERPGLOBAL.gCompanyID, PartyID);
                //rowData[3]=SuppCode;
                rowData[6] = SuppName;
                rowData[7] = (String) ObjItem.getAttribute("LAST_PO_NO").getObj();
                rowData[8] = EITLERPGLOBAL.formatDate((String) ObjItem.getAttribute("LAST_PO_DATE").getObj());
                rowData[9] = Double.toString(ObjItem.getAttribute("LAST_PO_QTY").getVal());
                rowData[10] = Double.toString(ObjItem.getAttribute("LAST_PO_RATE").getVal());
                rowData[11] = Double.toString(ObjItem.getAttribute("LAST_LANDED_RATE").getVal());
                rowData[12] = Double.toString(ObjItem.getAttribute("CURRENT_QTY").getVal());
                rowData[13] = clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", (int) ObjItem.getAttribute("UNIT_ID").getVal());

                rowData[14] = Double.toString(ObjItem.getAttribute("CURRENT_RATE").getVal());
                rowData[15] = Double.toString(ObjItem.getAttribute("CURRENT_LAND_RATE").getVal());
                rowData[16] = Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("RATE_DIFFERENCE").getVal(), 3));
                rowData[17] = Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("RATE_DIFFERENCE_PER").getVal(), 3));
                rowData[18] = Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("RATE_DIFFERENCE_RATE").getVal(), 3));
                rowData[19] = Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("RATE_DIFFERENCE_PER_RATE").getVal(), 3));
                
                
                rowData[23]=(String)ObjItem.getAttribute("REMARKS").getObj(); //20
                rowData[24]=(String)ObjItem.getAttribute("QUOT_ID").getObj(); //21
                rowData[25]=Integer.toString((int)ObjItem.getAttribute("QUOT_SR_NO").getVal()); //22
                
                rowData[26]=(String)ObjItem.getAttribute("DISCOUNT_TERM").getObj(); //23
                rowData[27]=(String)ObjItem.getAttribute("PAYMENT_TERM").getObj();  //24
                rowData[28]=(String)ObjItem.getAttribute("PRICE_BASIS_TERM").getObj();  //25
                
                ///
                rowData[29] = (String)ObjItem.getAttribute("CGST_TERM").getObj();  //26
                rowData[30] = (String)ObjItem.getAttribute("SGST_TERM").getObj();  //27
                rowData[31] = (String)ObjItem.getAttribute("IGST_TERM").getObj();  //28
                rowData[32] = (String)ObjItem.getAttribute("COMPOSITION_TERM").getObj();  //29
                rowData[33] = (String)ObjItem.getAttribute("RCM_TERM").getObj();  //30
                rowData[34] = (String)ObjItem.getAttribute("GST_COMPENSATION_CESS_TERM").getObj();  //31
                ///
                
                rowData[35]=(String)ObjItem.getAttribute("EXCISE_TERM").getObj();  //32
                rowData[36]=(String)ObjItem.getAttribute("ST_TERM").getObj();  //33
                rowData[37]=(String)ObjItem.getAttribute("PF_TERM").getObj();   //34
                rowData[38]=(String)ObjItem.getAttribute("FREIGHT_TERM").getObj();  //35
                rowData[39]=(String)ObjItem.getAttribute("OCTROI_TERM").getObj();  //36
                rowData[40]=(String)ObjItem.getAttribute("FOB_TERM").getObj();  //37
                rowData[41]=(String)ObjItem.getAttribute("CIE_TERM").getObj();  //38
                rowData[42]=(String)ObjItem.getAttribute("INSURANCE_TERM").getObj();  //39
                rowData[43]=(String)ObjItem.getAttribute("TCC_TERM").getObj();  //40
                rowData[44]=(String)ObjItem.getAttribute("CENVAT_TERM").getObj();  //41
                rowData[45]=(String)ObjItem.getAttribute("DESPATCH_TERM").getObj();  //42
                rowData[47]=(String)ObjItem.getAttribute("SERVICE_TAX_TERM").getObj();  //44
                rowData[46]=Integer.toString((int)ObjItem.getAttribute("UNIT_ID").getVal());  //43
                
                rowData[48]=Boolean.valueOf(ObjItem.getAttribute("APPROVED").getBool());  //45
                rowData[49]=(String)ObjItem.getAttribute("MAKE").getObj();  //46
                rowData[50]=(String)ObjItem.getAttribute("PRICE_LIST_NO").getObj(); //47
                rowData[51]=(String)ObjItem.getAttribute("OTHERS_TERM").getObj();  //48
                
                if(!ObjItem.getAttribute("OCTROI_TERM").getString().equals("N/A")){
                    rowData[20]=Double.toString(ObjItem.getAttribute("CURRENT_LAND_RATE").getVal()-(Double.parseDouble(ObjItem.getAttribute("OCTROI_TERM").getString())/ObjItem.getAttribute("CURRENT_QTY").getVal()));
                    }else{
                        rowData[20]="N/A";
                    }
                if(!ObjItem.getAttribute("OCTROI_TERM").getString().equals("N/A")){
                    rowData[21]=Double.toString((ObjItem.getAttribute("CURRENT_LAND_RATE").getVal()-(Double.parseDouble(ObjItem.getAttribute("OCTROI_TERM").getString())/ObjItem.getAttribute("CURRENT_QTY").getVal()))-ObjItem.getAttribute("LAST_LANDED_RATE").getVal());
                    }else{
                        rowData[21]="N/A";
                    }
                if(!ObjItem.getAttribute("OCTROI_TERM").getString().equals("N/A")){
                    rowData[22]=Double.toString(EITLERPGLOBAL.round((((ObjItem.getAttribute("CURRENT_LAND_RATE").getVal()-(Double.parseDouble(ObjItem.getAttribute("OCTROI_TERM").getString())/ObjItem.getAttribute("CURRENT_QTY").getVal()))-ObjItem.getAttribute("LAST_LANDED_RATE").getVal())*100)/ObjItem.getAttribute("LAST_LANDED_RATE").getVal(),3));
                    }else{
                        rowData[22]="N/A";
                    }

                DataModel.addRow(rowData);

                double PORateDiff = (ObjItem.getAttribute("CURRENT_RATE").getVal() - ObjItem.getAttribute("LAST_PO_RATE").getVal());
                double PORateDiffPer = EITLERPGLOBAL.round(PORateDiff * 100 / ObjItem.getAttribute("LAST_PO_RATE").getVal(), 3);

                double LandRateDiff = (ObjItem.getAttribute("CURRENT_LAND_RATE").getVal() - ObjItem.getAttribute("LAST_LANDED_RATE").getVal());
                double LandRateDiffPer = EITLERPGLOBAL.round(LandRateDiff * 100 / ObjItem.getAttribute("LAST_LANDED_RATE").getVal(), 3);

                if (ObjItem.getAttribute("LAST_PO_RATE").getVal() <= 0) {
                    PORateDiffPer = 0;
                }

                if (ObjItem.getAttribute("LAST_LANDED_RATE").getVal() <= 0) {
                    LandRateDiffPer = 0;
                }

                DataModel.setValueByVariable("RATE_DIFFERENCE_PER_RATE", Double.toString(EITLERPGLOBAL.round(PORateDiffPer, 3)), Table.getRowCount() - 1);
                DataModel.setValueByVariable("RATE_DIFFERENCE_PER", Double.toString(EITLERPGLOBAL.round(LandRateDiffPer, 3)), Table.getRowCount() - 1);
                DataModel.setValueByVariable("RATE_DIFFERENCE_RATE", Double.toString(EITLERPGLOBAL.round(PORateDiff, 3)), Table.getRowCount() - 1);
                DataModel.setValueByVariable("RATE_DIFFERENCE", Double.toString(EITLERPGLOBAL.round(LandRateDiff, 3)), Table.getRowCount() - 1);

                TotalAmount += (Double.parseDouble(DataModel.getValueByVariable("CURRENT_QTY", Table.getRowCount() - 1).toString()) * Double.parseDouble(DataModel.getValueByVariable("CURRENT_LAND_RATE", Table.getRowCount() - 1).toString()));
            }

            lblTotal.setText("Amount : " + EITLERPGLOBAL.round(TotalAmount, 3));

            GenerateItemCombo();

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();
            String DocNo = (String) ObjApproval.getAttribute("APPROVAL_NO").getObj();
            List = ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, 38, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelA.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridHS();
            HashMap History = clsRateApproval.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for (int i = 1; i <= History.size(); i++) {
                clsRateApproval ObjHistory = (clsRateApproval) History.get(Integer.toString(i));
                Object[] rowData = new Object[5];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (long) ObjHistory.getAttribute("UPDATED_BY").getVal());
                rowData[2] = EITLERPGLOBAL.formatDate((String) ObjHistory.getAttribute("ENTRY_DATE").getObj());

                String ApprovalStatus = "";

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = (String) ObjHistory.getAttribute("APPROVER_REMARKS").getObj();

                DataModelHS.addRow(rowData);
            }

            //============================================================//
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Abort " + e.getMessage());
        }
        DisplayStatus();
    }

    //Sets data to the Class Object
    private void SetData() {

        ObjApproval.setAttribute("PREFIX", SelPrefix);
        ObjApproval.setAttribute("SUFFIX", SelSuffix);
        ObjApproval.setAttribute("FFNO", FFNo);
        ObjApproval.setAttribute("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
        ObjApproval.setAttribute("APPROVAL_DATE", EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
        ObjApproval.setAttribute("INQUIRY_NO", txtInquiryNo.getText());
        ObjApproval.setAttribute("INQUIRY_DATE", EITLERPGLOBAL.formatDateDB(txtInquiryDate.getText()));
        ObjApproval.setAttribute("QUOT_APPROVAL_NO", txtSummaryNo.getText());
        ObjApproval.setAttribute("QUOT_APPROVAL_DATE", EITLERPGLOBAL.formatDateDB(txtSummaryDate.getText()));
        ObjApproval.setAttribute("INDENT_NO", txtIndentNo.getText());
        ObjApproval.setAttribute("INDENT_DATE", EITLERPGLOBAL.formatDateDB(txtIndentDate.getText()));
        ObjApproval.setAttribute("REQ_NO", txtPRNo.getText());
        ObjApproval.setAttribute("REQ_DATE", EITLERPGLOBAL.formatDateDB(txtPRDate.getText()));
        ObjApproval.setAttribute("REMARKS", txtRemarks.getText());

        //----- Update Approval Specific Fields -----------//
        ObjApproval.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjApproval.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjApproval.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjApproval.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        ObjApproval.setAttribute("SEND_DOC_TO", 0);

        if (OpgApprove.isSelected()) {
            ObjApproval.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjApproval.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjApproval.setAttribute("APPROVAL_STATUS", "R");
            ObjApproval.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            ObjApproval.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjApproval.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            ObjApproval.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        } else {
            ObjApproval.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            ObjApproval.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }

        //======= Set Line part ============
        ObjApproval.colItems.clear();

        for (int i = 0; i < Table.getRowCount(); i++) {
            clsRateApprovalItem ObjItem = new clsRateApprovalItem();
            String lItemID = (String) Table.getValueAt(i, 1);

            //Add Only Valid Items
            if (clsItem.IsValidItemID(EITLERPGLOBAL.gCompanyID, lItemID)) {
                ObjItem.setAttribute("SR_NO", i);
                ObjItem.setAttribute("ITEM_ID", lItemID);
                ObjItem.setAttribute("ITEM_EXTRA_DESC", DataModel.getValueByVariable("ITEM_EXTRA_DESC", i));
                ObjItem.setAttribute("HSN_SAC_CODE", DataModel.getValueByVariable("HSN_SAC_CODE", i));
                ObjItem.setAttribute("MAKE", DataModel.getValueByVariable("MAKE", i));
                ObjItem.setAttribute("PRICE_LIST_NO", DataModel.getValueByVariable("PRICE_LIST_NO", i));
                ObjItem.setAttribute("OTHERS_TERM", DataModel.getValueByVariable("OTHERS_TERM", i));
                ObjItem.setAttribute("SUPP_ID", DataModel.getValueByVariable("SUPP_ID", i));
                ObjItem.setAttribute("LAST_PO_NO", DataModel.getValueByVariable("LAST_PO_NO", i));
                ObjItem.setAttribute("LAST_PO_DATE", EITLERPGLOBAL.formatDateDB(DataModel.getValueByVariable("LAST_PO_DATE", i)));
                ObjItem.setAttribute("LAST_PO_QTY", EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("LAST_PO_QTY", i)), 3));
                ObjItem.setAttribute("LAST_PO_RATE", EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("LAST_PO_RATE", i)), 5));
                ObjItem.setAttribute("LAST_LANDED_RATE", EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("LAST_LANDED_RATE", i)), 5));
                ObjItem.setAttribute("CURRENT_QTY", EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("CURRENT_QTY", i)), 3));
                ObjItem.setAttribute("CURRENT_RATE", EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("CURRENT_RATE", i)), 5));
                ObjItem.setAttribute("CURRENT_LAND_RATE", EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("CURRENT_LAND_RATE", i)), 5));
                ObjItem.setAttribute("RATE_DIFFERENCE", EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("RATE_DIFFERENCE", i)), 5));
                ObjItem.setAttribute("RATE_DIFFERENCE_PER", EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("RATE_DIFFERENCE_PER", i)), 3));
                ObjItem.setAttribute("RATE_DIFFERENCE_RATE", EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("RATE_DIFFERENCE_RATE", i)), 5));
                ObjItem.setAttribute("RATE_DIFFERENCE_PER_RATE", EITLERPGLOBAL.round(Double.parseDouble(DataModel.getValueByVariable("RATE_DIFFERENCE_PER_RATE", i)), 5));
                ObjItem.setAttribute("REMARKS", DataModel.getValueByVariable("REMARKS", i));
                ObjItem.setAttribute("QUOT_ID", DataModel.getValueByVariable("QUOT_ID", i));
                ObjItem.setAttribute("QUOT_SR_NO", Integer.parseInt(DataModel.getValueByVariable("QUOT_SR_NO", i)));

                ObjItem.setAttribute("UNIT_ID", Integer.parseInt(DataModel.getValueByVariable("UNIT_ID", i)));
                ObjItem.setAttribute("DISCOUNT_TERM", DataModel.getValueByVariable("DISCOUNT_TERM", i));
                ObjItem.setAttribute("PAYMENT_TERM", DataModel.getValueByVariable("PAYMENT_TERM", i));
                ObjItem.setAttribute("PRICE_BASIS_TERM", DataModel.getValueByVariable("PRICE_BASIS_TERM", i));

                ObjItem.setAttribute("IGST_TERM", DataModel.getValueByVariable("IGST_TERM", i));
                ObjItem.setAttribute("CGST_TERM", DataModel.getValueByVariable("CGST_TERM", i));
                ObjItem.setAttribute("SGST_TERM", DataModel.getValueByVariable("SGST_TERM", i));
                ObjItem.setAttribute("COMPOSITION_TERM", DataModel.getValueByVariable("COMPOSITION_TERM", i));
                ObjItem.setAttribute("RCM_TERM", DataModel.getValueByVariable("RCM_TERM", i));
                ObjItem.setAttribute("GST_COMPENSATION_CESS_TERM", DataModel.getValueByVariable("GST_COMPENSATION_CESS_TERM", i));

                ObjItem.setAttribute("EXCISE_TERM", DataModel.getValueByVariable("EXCISE_TERM", i));
                ObjItem.setAttribute("ST_TERM", DataModel.getValueByVariable("ST_TERM", i));
                ObjItem.setAttribute("PF_TERM", DataModel.getValueByVariable("PF_TERM", i));
                ObjItem.setAttribute("FREIGHT_TERM", DataModel.getValueByVariable("FREIGHT_TERM", i));
                ObjItem.setAttribute("OCTROI_TERM", DataModel.getValueByVariable("OCTROI_TERM", i));
                ObjItem.setAttribute("FOB_TERM", DataModel.getValueByVariable("FOB_TERM", i));
                ObjItem.setAttribute("CIE_TERM", DataModel.getValueByVariable("CIE_TERM", i));
                ObjItem.setAttribute("INSURANCE_TERM", DataModel.getValueByVariable("INSURANCE_TERM", i));
                ObjItem.setAttribute("TCC_TERM", DataModel.getValueByVariable("TCC_TERM", i));
                ObjItem.setAttribute("CENVAT_TERM", DataModel.getValueByVariable("CENVAT_TERM", i));
                ObjItem.setAttribute("DESPATCH_TERM", DataModel.getValueByVariable("DESPATCH_TERM", i));
                ObjItem.setAttribute("SERVICE_TAX_TERM", DataModel.getValueByVariable("SERVICE_TAX_TERM", i));
                ObjItem.setAttribute("APPROVED", DataModel.getBoolValueByVariable("APPROVED", i));

                ObjApproval.colItems.put(Integer.toString(ObjApproval.colItems.size() + 1), ObjItem);
            }
        }
    }

    private void FormatGrid() {
        Updating = true; //Stops recursion
        DoNotEvaluate = false;
        DataModel = new EITLTableModel();
        Table.removeAll();

        Table.setModel(DataModel);
        TableColumnModel ColModel = Table.getColumnModel();
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        //Add Columns to it
        DataModel.addColumn("Sr."); //0 - Read Only
        DataModel.addColumn("Item Code"); //1
        DataModel.addColumn("Item Description"); //2 //Read Only
        DataModel.addColumn("Item Extra Description");//3
        DataModel.addColumn("HSN-SAC");
        DataModel.addColumn("Supp ID");//4
        DataModel.addColumn("Supp Name");//5
        DataModel.addColumn("Last PO No");//6
        DataModel.addColumn("Last PO Date");//7
        DataModel.addColumn("Last PO Qty");//8
        DataModel.addColumn("Last PO Rate");//9
        DataModel.addColumn("Last Landed Rate");//10
        DataModel.addColumn("Current Qty");//11
        DataModel.addColumn("Unit");//12
        DataModel.addColumn("Current Rate");//13
        DataModel.addColumn("Current Landed Rate");//14
        DataModel.addColumn("Rate Diff. (Landed)");//15
        DataModel.addColumn("Diff. % (Landed)");//16
        DataModel.addColumn("Rate Diff. (PO Rate)");//17
        DataModel.addColumn("Diff. % (Po Rate)");//18
        
        DataModel.addColumn("Landed Without PatternCost");
        DataModel.addColumn("Landed Diff. Without PatternCost");
        DataModel.addColumn("Landed Diff. Per Without PatternCost");
        
        DataModel.addColumn("Remarks");//19
        DataModel.addColumn("Quot. No.");//20
        DataModel.addColumn("Quot Sr.");//21
        DataModel.addColumn("Discount");//22
        DataModel.addColumn("Payment Terms");//23
        DataModel.addColumn("Price Basis");//24        
        DataModel.addColumn("CGST");
        DataModel.addColumn("SGST");
        DataModel.addColumn("IGST");
        DataModel.addColumn("Composition");
        DataModel.addColumn("RCM");
        DataModel.addColumn("GST Compensation Cess");
        DataModel.addColumn("Excise");//25
        DataModel.addColumn("S.T.");//26
        DataModel.addColumn("P. & F.");//27
        DataModel.addColumn("Freight");//28
        //DataModel.addColumn("Octroi");//29
        DataModel.addColumn("Pattern Cost");//29
        DataModel.addColumn("FOB");//30
        DataModel.addColumn("CIE");//31
        DataModel.addColumn("Insurance");//32
        DataModel.addColumn("TCC");//33
        DataModel.addColumn("Cenvat");//34
        DataModel.addColumn("Despatch Terms");//35
        DataModel.addColumn("Unit ID");//36
        DataModel.addColumn("Service Tax");//37
        DataModel.addColumn("Approved");//38
        DataModel.addColumn("MAKE");//39
        DataModel.addColumn("Price List Ref.");//39
        DataModel.addColumn("Other Terms");//39

        DataModel.SetNumeric(8, true);
        DataModel.SetNumeric(9, true);
        DataModel.SetNumeric(10, true);
        DataModel.SetNumeric(11, true);

        DataModel.SetNumeric(13, true);
        DataModel.SetNumeric(14, true);
        DataModel.SetNumeric(15, true);
        DataModel.SetNumeric(16, true);
        DataModel.SetNumeric(17, true);
        DataModel.SetNumeric(18, true);

        DataModel.SetNumeric(24,true);//21
        
        DataModel.SetNumeric(39,true);//36

        DataModel.SetVariable(0, "SR_NO"); //0 - Read Only
        DataModel.SetVariable(1, "ITEM_ID"); //1
        DataModel.SetVariable(2, "ITEM_NAME"); //2 //Read Only
        DataModel.SetVariable(3, "ITEM_EXTRA_DESC"); //2 //Read Only
        DataModel.SetVariable(4, "HSN_SAC_CODE");
        DataModel.SetVariable(5, "SUPP_ID");//3
        DataModel.SetVariable(6, "SUPP_NAME");//4
        DataModel.SetVariable(7, "LAST_PO_NO");//5
        DataModel.SetVariable(8, "LAST_PO_DATE");//6
        DataModel.SetVariable(9, "LAST_PO_QTY");//7
        DataModel.SetVariable(10, "LAST_PO_RATE");//8
        DataModel.SetVariable(11, "LAST_LANDED_RATE");//9
        DataModel.SetVariable(12, "CURRENT_QTY");//10
        DataModel.SetVariable(13, "UNIT_NAME");//10
        DataModel.SetVariable(14, "CURRENT_RATE");//11
        DataModel.SetVariable(15, "CURRENT_LAND_RATE");//12
        DataModel.SetVariable(16, "RATE_DIFFERENCE");//13
        DataModel.SetVariable(17, "RATE_DIFFERENCE_PER");//14
        DataModel.SetVariable(18, "RATE_DIFFERENCE_RATE");//15
        DataModel.SetVariable(19, "RATE_DIFFERENCE_PER_RATE");//16
        
        
        DataModel.SetVariable(23,"REMARKS"); //20 last       //17  2ndlast
        DataModel.SetVariable(24,"QUOT_ID");  //21           //18
        DataModel.SetVariable(25,"QUOT_SR_NO");   //22       //19
        DataModel.SetVariable(26,"DISCOUNT_TERM"); //23      //19
        DataModel.SetVariable(27,"PAYMENT_TERM");  //24   //19
        DataModel.SetVariable(28,"PRICE_BASIS_TERM");  //25    //19
        
        
        DataModel.SetVariable(29,"CGST_TERM");  //26 last                 //19 2ndlast
        DataModel.SetVariable(30,"SGST_TERM");  //27                  //19
        DataModel.SetVariable(31,"IGST_TERM");  //28                  //19
        DataModel.SetVariable(32,"COMPOSITION_TERM"); //29             //19
        DataModel.SetVariable(33,"RCM_TERM");  //30                   //19
        DataModel.SetVariable(34,"GST_COMPENSATION_CESS_TERM");  //31   //19
        
        DataModel.SetVariable(35,"EXCISE_TERM"); //32                     //19 2nd last
        DataModel.SetVariable(36,"ST_TERM");      //33                    //19
        DataModel.SetVariable(37,"PF_TERM");      //34                    //19
        DataModel.SetVariable(38,"FREIGHT_TERM"); //35                    //19
        DataModel.SetVariable(39,"OCTROI_TERM");  //36                    //19
        DataModel.SetVariable(40,"FOB_TERM");     //37                    //19
        DataModel.SetVariable(41,"CIE_TERM");     //38                    //19
        DataModel.SetVariable(42,"INSURANCE_TERM"); //39                  //19
        DataModel.SetVariable(43,"TCC_TERM");       //40                  //19
        DataModel.SetVariable(44,"CENVAT_TERM");     //41                  //19
        DataModel.SetVariable(45,"DESPATCH_TERM");   //42                  //19
        DataModel.SetVariable(46,"UNIT_ID");         //43                  //19
        DataModel.SetVariable(47,"SERVICE_TAX_TERM");//44                  //19
        DataModel.SetVariable(48,"APPROVED");        //45                //19
        DataModel.SetVariable(49,"MAKE");            //46                  //19
        DataModel.SetVariable(50,"PRICE_LIST_NO");   //47                  //19
        DataModel.SetVariable(51,"OTHERS_TERM");     //48                  //19
        
        DataModel.SetVariable(20,"LANDED_RATE_WITHOUT_PATTERNCOST");
        DataModel.SetVariable(21,"LANDED_RATE_DIFFERENCE_WITHOUT_PATTERNCOST");
        DataModel.SetVariable(22,"LANDED_RATE_DIFFERENCE_WITHOUT_PATTERNCOST_PER");
        
        DataModel.TableReadOnly(false);
        for (int r = 0; r < Table.getColumnCount(); r++) {
            DataModel.SetReadOnly(r);
        }

        DataModel.ResetReadOnly(38);

        //------- Install Table List Selection Listener ------//
        Table.getColumnModel().getSelectionModel().addListSelectionListener(
                new ListSelectionListener() {
                    public void valueChanged(ListSelectionEvent e) {
                        int last = Table.getSelectedColumn();
                        String strVar = DataModel.getVariable(last);

                        //=============== Cell Editing Routine =======================//
                        try {
                            cellLastValue = (String) Table.getValueAt(Table.getSelectedRow(), Table.getSelectedColumn());

                            Table.editCellAt(Table.getSelectedRow(), Table.getSelectedColumn());
                            if (Table.getEditorComponent() instanceof JTextComponent) {
                                ((JTextComponent) Table.getEditorComponent()).selectAll();
                            }
                        } catch (Exception cell) {
                        }
                //============= Cell Editing Routine Ended =================//

                    }
                }
        );
        //===================================================//

        //----- Install Table Model Event Listener -------//
        Table.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {

                    //=========== Cell Update Prevention Check ===========//
                    String curValue = (String) Table.getValueAt(Table.getSelectedRow(), e.getColumn());
                    if (curValue.equals(cellLastValue)) {
                        return;
                    }
                    //====================================================//

                    int col = e.getColumn();

                    /*if(DoNotEvaluate)
                     {
                     return;
                     }*/
                    if (col == DataModel.getColFromVariable("CURRENT_RATE")) {
                        double LastRate = Double.parseDouble(DataModel.getValueByVariable("LAST_PO_RATE", Table.getSelectedRow()));
                        double CurrentRate = Double.parseDouble(DataModel.getValueByVariable("CURRENT_RATE", Table.getSelectedRow()));
                        double Diff = 0;
                        double RateDiffPer = 0;

                        if (LastRate > 0) {
                            Diff = EITLERPGLOBAL.round((CurrentRate - LastRate), 3);
                            RateDiffPer = EITLERPGLOBAL.round((Diff * 100) / LastRate, 3);
                        } else {
                            Diff = CurrentRate;
                            RateDiffPer = 0;
                        }

                        //RATE_DIFFERENCE_RATE_PER
                        DataModel.setValueByVariable("RATE_DIFFERENCE_RATE", Double.toString(Diff), Table.getSelectedRow());
                        DataModel.setValueByVariable("RATE_DIFFERENCE_PER_RATE", Double.toString(RateDiffPer), Table.getSelectedRow());
                    }

                    if (col == DataModel.getColFromVariable("CURRENT_LAND_RATE")) {
                        double LastRate = Double.parseDouble(DataModel.getValueByVariable("LAST_LANDED_RATE", Table.getSelectedRow()));
                        double CurrentRate = Double.parseDouble(DataModel.getValueByVariable("CURRENT_LAND_RATE", Table.getSelectedRow()));
                        double Diff = 0;
                        double RateDiffPer = 0;

                        if (LastRate > 0) {
                            Diff = EITLERPGLOBAL.round((CurrentRate - LastRate), 3);
                            RateDiffPer = EITLERPGLOBAL.round((Diff * 100) / LastRate, 3);
                        } else {
                            Diff = CurrentRate;
                            RateDiffPer = 0;
                        }

                        DataModel.setValueByVariable("RATE_DIFFERENCE", Double.toString(Diff), Table.getSelectedRow());
                        DataModel.setValueByVariable("RATE_DIFFERENCE_PER", Double.toString(RateDiffPer), Table.getSelectedRow());
                    }

                    //Update Item Name
                    if (col == DataModel.getColFromVariable("ITEM_ID")) {
                        try {
                            String lItemID = (String) Table.getValueAt(Table.getSelectedRow(), DataModel.getColFromVariable("ITEM_ID"));
                            String lItemName = clsItem.getItemName((int) EITLERPGLOBAL.gCompanyID, lItemID);
                            Table.setValueAt(lItemName, Table.getSelectedRow(), DataModel.getColFromVariable("ITEM_NAME"));

                            int ItemUnit = clsItem.getItemUnit(EITLERPGLOBAL.gCompanyID, lItemID);
                            String ItemUnitName = clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", ItemUnit);

                            DataModel.setValueByVariable("UNIT_ID", Integer.toString(ItemUnit), Table.getSelectedRow());
                            DataModel.setValueByVariable("UNIT_NAME", ItemUnitName, Table.getSelectedRow());

                            DoNotEvaluate = false;
                            FillLastPODetails();
                            GenerateItemCombo();
                        } catch (Exception ex) {
                        }
                    }

                    if (col == DataModel.getColFromVariable("SUPP_ID") && (!DoNotEvaluate)) {
                        try {
                            String lSuppID = (String) Table.getValueAt(Table.getSelectedRow(), DataModel.getColFromVariable("SUPP_ID"));
                            int PartyID = clsParty.getPartyIDFromSupplier(EITLERPGLOBAL.gCompanyID, lSuppID);

                            DoNotEvaluate = true;
                            Table.setValueAt(Integer.toString(PartyID), Table.getSelectedRow(), DataModel.getColFromVariable("SUPP_ID"));
                            String lSuppName = clsParty.getPartyNameByPartyID(EITLERPGLOBAL.gCompanyID, PartyID);
                            Table.setValueAt(lSuppName, Table.getSelectedRow(), DataModel.getColFromVariable("SUPP_NAME"));

                        } catch (Exception ex) {
                        }
                    }

                }
            }
        });

        int ApproveCol = DataModel.getColFromVariable("APPROVED");
        Renderer.setCustomComponent(ApproveCol, "CheckBox");
        JCheckBox aCheckBox = new JCheckBox();
        aCheckBox.setBackground(Color.WHITE);
        Table.getColumnModel().getColumn(ApproveCol).setCellEditor(new DefaultCellEditor(aCheckBox));
        Table.getColumnModel().getColumn(ApproveCol).setCellRenderer(Renderer);

        DoNotEvaluate = false;
        Updating = false;
        //Table formatting completed
    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=38 ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=38 ");
        }

        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = ApprovalFlow.getRemainingUsers((int) EITLERPGLOBAL.gCompanyID, 38, (String) ObjApproval.getAttribute("APPROVAL_NO").getObj());
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
        }

    }

    private void SetupApproval() {
        // --- Hierarchy Change Rights Check --------
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,685)) {
         cmbHierarchy.setEnabled(true);
         }
         else {
         cmbHierarchy.setEnabled(false);
         }*/
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {

            int FromUserID = ApprovalFlow.getFromID((int) EITLERPGLOBAL.gCompanyID, 38, (String) ObjApproval.getAttribute("APPROVAL_NO").getObj());
            lnFromID = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = ApprovalFlow.getFromRemarks((int) EITLERPGLOBAL.gCompanyID, 38, FromUserID, (String) ObjApproval.getAttribute("APPROVAL_NO").getObj());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 681)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,682))
         {
         cmdEdit.setEnabled(true);
         }
         else
         {
         cmdEdit.setEnabled(false);
         }*/

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 683)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 684)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {

        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//

        //Now Generate new document no.
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = 38;

        if (aList.ShowList()) {
            EditMode = EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix = aList.Prefix; //Selected Prefix;
            SelSuffix = aList.Suffix;
            FFNo = aList.FirstFreeNo;

            SetupApproval();
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 38, FFNo, false));
            txtDocDate.requestFocus();

            lblTitle.setText("RATE CHANGE APPROVAL - " + txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);
        } else {
            JOptionPane.showMessageDialog(null, "You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }

    }

    private void Edit() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//

        String lDocNo = (String) ObjApproval.getAttribute("APPROVAL_NO").getObj();
        if (ObjApproval.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {

            EITLERPGLOBAL.ChangeCursorToWait(this);
            EditMode = EITLERPGLOBAL.EDIT;
            GenerateCombos();

            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//

            if (ApprovalFlow.IsCreator(38, lDocNo) || clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 682)) {
                SetFields(true);
            } else {
                EnableApproval();
            }

            DisableToolbar();
            txtDocDate.requestFocus();
            EITLERPGLOBAL.ChangeCursorToDefault(this);
        } else {
            JOptionPane.showMessageDialog(null, "You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }

    private void Delete() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//

        String lDocNo = (String) ObjApproval.getAttribute("APPROVAL_NO").getObj();

        if (ObjApproval.CanDelete(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            if (ObjApproval.Delete(EITLERPGLOBAL.gNewUserID)) {
                MoveLast();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while deleting. Error is " + ObjApproval.LastError);
            }
        } else {
            JOptionPane.showMessageDialog(null, "You cannot delete this record. It is either approved/rejected record or waiting approval for other user or is referred in other documents");
        }
    }

    private void Save() {
        //Form level validations
        if (txtDocDate.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter document date");
            return;
        }

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please select the hierarchy.");
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null, "Please select the Approval Action");
            return;
        }

        //Check the no. of items
        if (Table.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(null, "Please enter some items.");
            return;
        }

        if (!EITLERPGLOBAL.isDate(txtDocDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid Document Date");
            return;
        }

        if (!Validate()) {
            return;
        }

        EITLERPGLOBAL.ChangeCursorToWait(this);
        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjApproval.Insert()) {
                MoveLast();
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while saving. Error is " + ObjApproval.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjApproval.Update()) {
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while saving. Error is " + ObjApproval.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();

        try {
            frmPA.RefreshView();
        } catch (Exception e) {
        }
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.Purchase.frmRateApprovalFind", true);
        frmRateApprovalFind ObjReturn = (frmRateApprovalFind) ObjLoader.getObj();

        if (ObjReturn.Cancelled == false) {
            //Add PO Type
            if (!ObjReturn.strQuery.trim().equals("")) {
                ObjReturn.strQuery = ObjReturn.strQuery;
            } else {
                ObjReturn.strQuery = " WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND APPROVAL_DATE>='" + EITLERPGLOBAL.FinFromDateDB + "' AND APPROVAL_DATE<='" + EITLERPGLOBAL.FinToDateDB + "' ";
            }

            if (!ObjApproval.Filter(ObjReturn.strQuery, EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null, "No records found.");
            }
            MoveLast();
        }
    }

    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjApproval.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjApproval.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjApproval.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjApproval.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    public void FindEx(int pCompanyID, String pDocNo) {
        ObjApproval.Filter(" WHERE COMPANY_ID=" + Integer.toString(pCompanyID) + " AND APPROVAL_NO='" + pDocNo + "'", pCompanyID);
        ObjApproval.MoveLast();
        DisplayData();
        DataModel.TableReadOnly(true);
    }

    public void FindWaiting() {
        ObjApproval.Filter(" WHERE APPROVAL_NO IN(SELECT D_PUR_RATE_APPROVAL_HEADER.APPROVAL_NO FROM D_PUR_RATE_APPROVAL_HEADER,D_COM_DOC_DATA WHERE D_PUR_RATE_APPROVAL_HEADER.APPROVAL_NO=D_COM_DOC_DATA.DOC_NO AND D_PUR_RATE_APPROVAL_HEADER.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_PUR_RATE_APPROVAL_HEADER.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND D_COM_DOC_DATA.USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND D_COM_DOC_DATA.STATUS='W' AND MODULE_ID=38)", EITLERPGLOBAL.gCompanyID);
        ObjApproval.MoveLast();
        DisplayData();
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }

    private void FormatGridA() {
        DataModelA = new EITLTableModel();

        TableA.removeAll();
        TableA.setModel(DataModelA);

        //Set the table Readonly
        DataModelA.TableReadOnly(true);

        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");

        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);

    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Tab1.getComponentCount() - 1; i++) {
            if (Tab1.getComponent(i).getName() != null) {

                FieldName = Tab1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {

                    Tab1.getComponent(i).setEnabled(true);
                }

            }
        }
        //=============== Header Fields Setup Complete =================//

        //=============== Setting Table Fields ==================//
        DataModel.ClearAllReadOnly();
        for (int i = 0; i < Table.getColumnCount(); i++) {
            FieldName = DataModel.getVariable(i);

            if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
                //Do Nothing
            } else {
                DataModel.SetReadOnly(i);
            }
        }
        //=======================================================//

    }

    private void FormatGridHS() {
        DataModelHS = new EITLTableModel();

        TableHS.removeAll();
        TableHS.setModel(DataModelHS);

        //Set the table Readonly
        DataModelHS.TableReadOnly(true);

        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");

        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }

    private void PreviewReport() {
        HashMap Params = new HashMap();

        if (chkCancelled.isSelected()) {
            JOptionPane.showMessageDialog(null, "You cannot take printout of cancelled document");
            return;
        }

        Params.put("comp_id", new Integer(EITLERPGLOBAL.gCompanyID));
        Params.put("app_no", txtDocNo.getText());

        try {
            URL ReportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/rptRateApproval.jsp?dbURL=" + EITLERPGLOBAL.DatabaseURL + "&CompanyID=" + EITLERPGLOBAL.gCompanyID + "&DocNo=" + txtDocNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile, "_blank");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "File error " + e.getMessage());
        }
    }

    private void PreviewReport_gst() {
        HashMap Params = new HashMap();

        if (chkCancelled.isSelected()) {
            JOptionPane.showMessageDialog(null, "You cannot take printout of cancelled document");
            return;
        }

        Params.put("comp_id", new Integer(EITLERPGLOBAL.gCompanyID));
        Params.put("app_no", txtDocNo.getText());

        try {
            URL ReportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/rptRateApproval_gst.jsp?dbURL=" + EITLERPGLOBAL.DatabaseURL + "&CompanyID=" + EITLERPGLOBAL.gCompanyID + "&DocNo=" + txtDocNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile, "_blank");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "File error " + e.getMessage());
        }
    }

    private void FillLastPODetails() {

        try {
            if (DoNotEvaluate) {
                return;
            }

            String ItemID = DataModel.getValueByVariable("ITEM_ID", Table.getSelectedRow());

            EITLERPGLOBAL.ChangeCursorToWait(this);

            String LastPONo = clsPOGen.getLastPObyItem(EITLERPGLOBAL.gCompanyID, ItemID);

            if (LastPONo.equals("")) {
                DataModel.setValueByVariable("REMARKS", "New Item", Table.getSelectedRow());
            }
            if (!LastPONo.equals("")) {
                clsPOGen tmpObj = new clsPOGen();
                int POType = clsPOGen.getPOType(EITLERPGLOBAL.gCompanyID, LastPONo);
                tmpObj.POType = POType;
                //tmpObj.LoadData(EITLERPGLOBAL.gCompanyID, 1);
                clsPOGen ObjPO = (clsPOGen) tmpObj.getObject(EITLERPGLOBAL.gCompanyID, LastPONo, POType);
                DataModel.setValueByVariable("LAST_PO_NO", LastPONo, Table.getSelectedRow());
                DataModel.setValueByVariable("LAST_PO_DATE", EITLERPGLOBAL.formatDate((String) ObjPO.getAttribute("PO_DATE").getObj()), Table.getSelectedRow());
                DataModel.setValueByVariable("LAST_PO_RATE", "0", Table.getSelectedRow());

                String SuppID = (String) ObjPO.getAttribute("SUPP_ID").getObj();
                int PartyID = clsParty.getPartyIDFromSupplier(EITLERPGLOBAL.gCompanyID, SuppID);
                String SuppName = clsParty.getPartyNameByPartyID(EITLERPGLOBAL.gCompanyID, PartyID);

                DoNotEvaluate = true;
                DataModel.setValueByVariable("SUPP_ID", Integer.toString(PartyID), Table.getSelectedRow());
                DataModel.setValueByVariable("SUPP_NAME", SuppName, Table.getSelectedRow());
                DoNotEvaluate = false;

                for (int i = 1; i <= ObjPO.colPOItems.size(); i++) {
                    clsPOItem ObjPOItem = (clsPOItem) ObjPO.colPOItems.get(Integer.toString(i));
                    String POItemID = (String) ObjPOItem.getAttribute("ITEM_ID").getObj();
                    if (POItemID.equals(ItemID)) {
                        double LastLandedRate = ObjPOItem.getAttribute("RATE").getVal();
                        DataModel.setValueByVariable("LAST_PO_RATE", Double.toString(LastLandedRate), Table.getSelectedRow());
                        DataModel.setValueByVariable("LAST_PO_QTY", Double.toString(ObjPOItem.getAttribute("QTY").getVal()), Table.getSelectedRow());
                    }

                }

                Object tmpObj2 = clsGRN.getLastGRN(EITLERPGLOBAL.gCompanyID, ItemID, true);

                if (tmpObj2 instanceof clsGRN) {
                    clsGRN ObjGRN = (clsGRN) tmpObj2;

                    //Find the Selected Item
                    for (int i = 1; i <= ObjGRN.colGRNItems.size(); i++) {
                        clsGRNItem ObjGRNItem = (clsGRNItem) ObjGRN.colGRNItems.get(Integer.toString(i));
                        String theItemID = (String) ObjGRNItem.getAttribute("ITEM_ID").getObj();

                        if (theItemID.trim().equals(ItemID)) {
                            DataModel.setValueByVariable("LAST_LANDED_RATE", Double.toString(ObjGRNItem.getAttribute("LANDED_RATE").getVal()), Table.getSelectedRow());
                            break;
                        }
                    }

                }

                if (tmpObj2 instanceof clsGRNGen) {
                    clsGRNGen ObjGRN = (clsGRNGen) tmpObj2;

                    //Find the Selected Item
                    for (int i = 1; i <= ObjGRN.colGRNItems.size(); i++) {
                        clsGRNGenItem ObjGRNItem = (clsGRNGenItem) ObjGRN.colGRNItems.get(Integer.toString(i));
                        String theItemID = (String) ObjGRNItem.getAttribute("ITEM_ID").getObj();

                        if (theItemID.trim().equals(ItemID)) {
                            DataModel.setValueByVariable("LAST_LANDED_RATE", Double.toString(ObjGRNItem.getAttribute("LANDED_RATE").getVal()), Table.getSelectedRow());
                            break;
                        }
                    }

                }

            }

            EITLERPGLOBAL.ChangeCursorToDefault(this);
        } catch (Exception e) {

        }

    }

    private void PreviewAuditReport() {
        try {
            URL ReportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/rptRateChangeApprovalA.jsp?dbURL=" + EITLERPGLOBAL.DatabaseURL + "&CompanyID=" + EITLERPGLOBAL.gCompanyID + "&DocNo=" + txtDocNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile, "_blank");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error Previwing " + e.getMessage());
        }
    }

    private void GenerateItemCombo() {
        colItems.clear();

        //First Populate the Unique Items collection
        for (int i = 0; i < Table.getRowCount(); i++) {
            String ItemID = DataModel.getValueByVariable("ITEM_ID", i);

            //Now Search in collection
            boolean Found = false;
            for (int c = 1; c <= colItems.size(); c++) {
                String tItemID = (String) colItems.get(Integer.toString(c));

                if (tItemID.trim().equals(ItemID)) {
                    Found = true;
                }
            }

            if (!Found) {
                colItems.put(Integer.toString(colItems.size() + 1), ItemID);
            }
        }

        //----- Generate cmbType ------- //
        cmbItemModel = new EITLComboModel();
        cmbItem.removeAllItems();
        cmbItem.setModel(cmbItemModel);

        for (int i = 1; i <= colItems.size(); i++) {
            String ItemID = (String) colItems.get(Integer.toString(i));
            String ItemName = clsItem.getItemName(EITLERPGLOBAL.gCompanyID, ItemID);

            ComboData aData = new ComboData();
            aData.strCode = ItemID;
            aData.Text = ItemID + "- " + ItemName;
            cmbItemModel.addElement(aData);
        }
        //------------------------------ //

    }

    private boolean Validate() {

        /*for(int i=0;i<Table.getRowCount()-1;i++) {
         
         
         String SuppCode=DataModel.getValueByVariable("SUPP_ID",i);
         
         if(clsSupplier.IsValidSuppCode(EITLERPGLOBAL.gCompanyID,SuppCode)&&(!SuppCode.trim().equals(""))) {
         
         }
         else {
         JOptionPane.showMessageDialog(null,"Please enter valid supplier code.");
         return false;
         }
         
         }*/
        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter the remarks for rejection");
            return false;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(null, "Please select the user, to whom rejected document to be send");
            return false;
        }

        return true;
    }

    private void GenerateRejectedUserCombo() {
        HashMap List = new HashMap();
        HashMap DeptList = new HashMap();
        HashMap DeptUsers = new HashMap();

        //----- Generate cmbType ------- //
        cmbToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= List.size(); i++) {
            clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

            /// NEW CODE ///
            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, 38, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, 38, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            } else {
                if (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///

        }
        //------------------------------ //

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, 38, txtDocNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }

    }

    private String getIndentNo() {
        Connection tmpConn;
        Statement stPO = null, stQuot = null;
        ResultSet rsPO = null, rsQuot = null, rsTmp = null;
        String QuotID = "";
        int QuotSrNo = 0;

        tmpConn = data.getConn();

        String returnIndentNo = "";

        String ItemID = DataModel.getValueByVariable("ITEM_ID", Table.getSelectedRow());

        String SuppID = DataModel.getValueByVariable("SUPP_ID", Table.getSelectedRow());
        String SuppName = clsParty.getPartyNameByPartyID(EITLERPGLOBAL.gCompanyID, Integer.parseInt(SuppID));

        QuotID = DataModel.getValueByVariable("QUOT_ID", Table.getSelectedRow());

        if (!DataModel.getValueByVariable("QUOT_SR_NO", Table.getSelectedRow()).trim().equals("")) {
            QuotSrNo = Integer.parseInt(DataModel.getValueByVariable("QUOT_SR_NO", Table.getSelectedRow()));
        }

        try {
            rsTmp = data.getResult("SELECT INQUIRY_NO,INQUIRY_SRNO FROM D_PUR_QUOT_DETAIL WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND QUOT_ID='" + QuotID + "' AND SR_NO=" + QuotSrNo);

            rsTmp.first();

            if (rsTmp.getRow() > 0) {

                String InquiryNo = rsTmp.getString("INQUIRY_NO");
                int InquirySrNo = rsTmp.getInt("INQUIRY_SRNO");

                rsTmp = data.getResult("SELECT INDENT_NO,INDENT_SRNO FROM D_PUR_INQUIRY_DETAIL WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND INQUIRY_NO='" + InquiryNo + "' AND SR_NO=" + InquirySrNo);
                rsTmp.first();

                if (rsTmp.getRow() > 0) {
                    returnIndentNo = rsTmp.getString("INDENT_NO");
                } else {

                    //Find by Item Code
                    rsTmp = data.getResult("SELECT INDENT_NO,INDENT_SRNO FROM D_PUR_INQUIRY_DETAIL WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND INQUIRY_NO='" + InquiryNo + "' AND ITEM_CODE='" + ItemID + "'");
                    rsTmp.first();

                    if (rsTmp.getRow() > 0) {
                        returnIndentNo = rsTmp.getString("INDENT_NO");
                    }

                }
            }
        } catch (Exception e) {
        }
        return returnIndentNo;
    }
}
