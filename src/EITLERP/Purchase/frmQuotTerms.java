/*
 * frmQuotTerms.java
 *
 * Created on July 16, 2004, 11:42 AM
 */

package EITLERP.Purchase;

/*<APPLET CODE=frmQuotTerms.class WIDTH=765 HEIGHT=420></APPLET>*/

import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.Purchase.*;
import EITLERP.*;
   
/**
 *
 * @author  nrpithva
 */
public class frmQuotTerms extends javax.swing.JApplet {
    
    private JDialog aDialog;
    
    private EITLTableModel DataModelD;
    private EITLTableModel DataModelP;
    private EITLTableModel DataModelO;
    private EITLTableModel DataModelL;
    private EITLTableModel DataModelH;
    
    
    
    /** Initializes the applet frmQuotTerms */
    public void init() {
        setSize(765,420);
        initComponents();
    }
    
    public frmQuotTerms() {
        setSize(765,420);
        initComponents();
    }
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel1 = new javax.swing.JLabel();
        txtQuotNo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtSuppID = new javax.swing.JTextField();
        txtSuppName = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TableP = new javax.swing.JTable();
        jLabel24 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableO = new javax.swing.JTable();
        jLabel23 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableD = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableL = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableH = new javax.swing.JTable();

        getContentPane().setLayout(null);

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jLabel1.setText("Quotation No.");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(1, 15, 88, 15);

        txtQuotNo.setEnabled(false);
        getContentPane().add(txtQuotNo);
        txtQuotNo.setBounds(92, 12, 90, 19);

        jLabel2.setText("Supplier");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(188, 15, 56, 15);

        txtSuppID.setEnabled(false);
        getContentPane().add(txtSuppID);
        txtSuppID.setBounds(246, 12, 86, 19);

        txtSuppName.setEnabled(false);
        getContentPane().add(txtSuppName);
        txtSuppName.setBounds(336, 12, 218, 19);

        jButton1.setMnemonic('c');
        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        getContentPane().add(jButton1);
        jButton1.setBounds(664, 53, 88, 25);

        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel22.setText("Payment Terms");
        jPanel1.add(jLabel22);
        jLabel22.setBounds(8, 3, 128, 15);

        TableP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(TableP);

        jPanel1.add(jScrollPane5);
        jScrollPane5.setBounds(8, 20, 434, 84);

        jLabel24.setText("Other Terms");
        jPanel1.add(jLabel24);
        jLabel24.setBounds(8, 235, 160, 15);

        TableO.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableO);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(8, 253, 435, 74);

        jLabel23.setText("Delivery Terms");
        jPanel1.add(jLabel23);
        jLabel23.setBounds(8, 118, 181, 15);

        TableD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(TableD);

        jPanel1.add(jScrollPane4);
        jScrollPane4.setBounds(8, 134, 434, 87);

        jTabbedPane1.addTab("Terms", jPanel1);

        jPanel2.setLayout(null);

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel3.setText("Item Level Taxes");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(11, 10, 112, 15);

        TableL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableL);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(11, 32, 429, 119);

        jLabel4.setText("Header Level Taxes");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(12, 161, 138, 15);

        TableH.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableH);

        jPanel2.add(jScrollPane2);
        jScrollPane2.setBounds(12, 183, 429, 119);

        jTabbedPane1.addTab("Tax Amounts", jPanel2);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(7, 48, 643, 361);

    }//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        aDialog.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableD;
    private javax.swing.JTable TableH;
    private javax.swing.JTable TableL;
    private javax.swing.JTable TableO;
    private javax.swing.JTable TableP;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField txtQuotNo;
    private javax.swing.JTextField txtSuppID;
    private javax.swing.JTextField txtSuppName;
    // End of variables declaration//GEN-END:variables
    
    private void ShowInformation(String pQuotID,int pSrNo) {
        try {
            clsQuotation tmpObj=new clsQuotation();
            tmpObj.LoadData(EITLERPGLOBAL.gCompanyID);
            
            clsQuotation ObjQuotation=(clsQuotation)tmpObj.getObject(EITLERPGLOBAL.gCompanyID, pQuotID);
            
            
            txtQuotNo.setText((String)ObjQuotation.getAttribute("QUOT_ID").getObj());
            txtSuppID.setText((String)ObjQuotation.getAttribute("SUPP_ID").getObj());
            txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID,txtSuppID.getText()));
            
            
            //Clear the Grids
            FormatGrid();
            
            //================= Displaying Item Level Tax Amounts ==================//
            for(int i=1;i<=ObjQuotation.colQuotationItems.size();i++) {
                clsQuotationItem ObjItem=(clsQuotationItem)ObjQuotation.colQuotationItems.get(Integer.toString(i))  ;
                
                int SrNo=(int)ObjItem.getAttribute("SR_NO").getVal();
                
                if(SrNo==pSrNo) {
                    for(int t=1;t<=10;t++) {
                        int TaxID=(int)ObjItem.getAttribute("COLUMN_"+t+"_ID").getVal();
                        if(TaxID>0) {
                            Object[] rowData=new Object[3];
                            rowData[0]=(String)ObjItem.getAttribute("COLUMN_"+t+"_CAPTION").getObj();
                            rowData[1]=Double.toString(ObjItem.getAttribute("COLUMN_"+t+"_PER").getVal());
                            rowData[2]=Double.toString(ObjItem.getAttribute("COLUMN_"+t+"_AMT").getVal());
                            
                            DataModelL.addRow(rowData);
                        }
                    }
                }
            }
            //===================================================================//
            

            //================= Displaying Item Level Tax Amounts ==================//
            for(int i=1;i<=ObjQuotation.colQuotationItems.size();i++) {
                
                    for(int t=1;t<=10;t++) {
                        int TaxID=(int)ObjQuotation.getAttribute("COLUMN_"+t+"_ID").getVal();
                        if(TaxID>0) {
                            Object[] rowData=new Object[3];
                            rowData[0]=(String)ObjQuotation.getAttribute("COLUMN_"+t+"_CAPTION").getObj();
                            rowData[1]=Double.toString(ObjQuotation.getAttribute("COLUMN_"+t+"_PER").getVal());
                            rowData[2]=Double.toString(ObjQuotation.getAttribute("COLUMN_"+t+"_AMT").getVal());
                            
                            DataModelH.addRow(rowData);
                        }
                    }
            }
            //===================================================================//
            
            
            int Counter=0;
           
            //----------------- Displaying Payment Terms --------------------//
            for(int i=1;i<=ObjQuotation.colQuotTerms.size();i++)
            {
                clsQuotTerms ObjItem=(clsQuotTerms)ObjQuotation.colQuotTerms.get(Integer.toString(i));
                String Type=(String)ObjItem.getAttribute("TERM_TYPE").getObj();
                
                if(Type.trim().equals("P"))
                {
                    Counter++;
                    Object[] rowData=new Object[3];
                    rowData[0]=Integer.toString(Counter);
                    rowData[1]=Integer.toString((int)ObjItem.getAttribute("TERM_CODE").getVal());
                    rowData[2]=(String)ObjItem.getAttribute("TERM_DESC").getObj();
                    
                    DataModelP.addRow(rowData);
                }
            }
            //==================================================================//
            

            //----------------- Displaying Payment Terms --------------------//
            Counter=0;
            for(int i=1;i<=ObjQuotation.colQuotTerms.size();i++)
            {
                clsQuotTerms ObjItem=(clsQuotTerms)ObjQuotation.colQuotTerms.get(Integer.toString(i));
                String Type=(String)ObjItem.getAttribute("TERM_TYPE").getObj();
                
                if(Type.trim().equals("D"))
                {
                    Counter++;
                    Object[] rowData=new Object[3];
                    rowData[0]=Integer.toString(Counter);
                    rowData[1]=Integer.toString((int)ObjItem.getAttribute("TERM_CODE").getVal());
                    rowData[2]=(String)ObjItem.getAttribute("TERM_DESC").getObj();
                    
                    DataModelD.addRow(rowData);
                }
            }
            //==================================================================//
            
            
            //----------------- Displaying Payment Terms --------------------//
            for(int i=1;i<=ObjQuotation.colQuotTerms.size();i++)
            {
                clsQuotTerms ObjItem=(clsQuotTerms)ObjQuotation.colQuotTerms.get(Integer.toString(i));
                String Type=(String)ObjItem.getAttribute("TERM_TYPE").getObj();
                
                if(Type.trim().equals("O"))
                {
                    Counter++;
                    Object[] rowData=new Object[3];
                    rowData[0]=Integer.toString(Counter);
                    rowData[1]=Integer.toString((int)ObjItem.getAttribute("TERM_CODE").getVal());
                    rowData[2]=(String)ObjItem.getAttribute("TERM_DESC").getObj();
                    
                    DataModelO.addRow(rowData);
                }
            }
            //==================================================================//
            
            
            
        }
        catch(Exception e) {
            
        }
    }
    

    
    private void ShowInformation(String pQuotID) {
        try {
            clsQuotation tmpObj=new clsQuotation();
            tmpObj.LoadData(EITLERPGLOBAL.gCompanyID);
            
            clsQuotation ObjQuotation=(clsQuotation)tmpObj.getObject(EITLERPGLOBAL.gCompanyID, pQuotID);
            
            
            txtQuotNo.setText((String)ObjQuotation.getAttribute("QUOT_ID").getObj());
            txtSuppID.setText((String)ObjQuotation.getAttribute("SUPP_ID").getObj());
            txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID,txtSuppID.getText()));
            
            
            //Clear the Grids
            FormatGrid();
            
//            //================= Displaying Item Level Tax Amounts ==================//
//            for(int i=1;i<=ObjQuotation.colQuotationItems.size();i++) {
//                clsQuotationItem ObjItem=(clsQuotationItem)ObjQuotation.colQuotationItems.get(Integer.toString(i))  ;
//                
//                int SrNo=(int)ObjItem.getAttribute("SR_NO").getVal();
//                
//                if(SrNo==pSrNo) {
//                    for(int t=1;t<=10;t++) {
//                        int TaxID=(int)ObjItem.getAttribute("COLUMN_"+t+"_ID").getVal();
//                        if(TaxID>0) {
//                            Object[] rowData=new Object[3];
//                            rowData[0]=(String)ObjItem.getAttribute("COLUMN_"+t+"_CAPTION").getObj();
//                            rowData[1]=Double.toString(ObjItem.getAttribute("COLUMN_"+t+"_PER").getVal());
//                            rowData[2]=Double.toString(ObjItem.getAttribute("COLUMN_"+t+"_AMT").getVal());
//                            
//                            DataModelL.addRow(rowData);
//                        }
//                    }
//                }
//            }
//            //===================================================================//
            

            //================= Displaying Item Level Tax Amounts ==================//
            for(int i=1;i<=ObjQuotation.colQuotationItems.size();i++) {
                
                    for(int t=1;t<=10;t++) {
                        int TaxID=(int)ObjQuotation.getAttribute("COLUMN_"+t+"_ID").getVal();
                        if(TaxID>0) {
                            Object[] rowData=new Object[3];
                            rowData[0]=(String)ObjQuotation.getAttribute("COLUMN_"+t+"_CAPTION").getObj();
                            rowData[1]=Double.toString(ObjQuotation.getAttribute("COLUMN_"+t+"_PER").getVal());
                            rowData[2]=Double.toString(ObjQuotation.getAttribute("COLUMN_"+t+"_AMT").getVal());
                            
                            DataModelH.addRow(rowData);
                        }
                    }
            }
            //===================================================================//
            
            
            int Counter=0;
           
            //----------------- Displaying Payment Terms --------------------//
            for(int i=1;i<=ObjQuotation.colQuotTerms.size();i++)
            {
                clsQuotTerms ObjItem=(clsQuotTerms)ObjQuotation.colQuotTerms.get(Integer.toString(i));
                String Type=(String)ObjItem.getAttribute("TERM_TYPE").getObj();
                
                if(Type.trim().equals("P"))
                {
                    Counter++;
                    Object[] rowData=new Object[3];
                    rowData[0]=Integer.toString(Counter);
                    rowData[1]=Integer.toString((int)ObjItem.getAttribute("TERM_CODE").getVal());
                    rowData[2]=(String)ObjItem.getAttribute("TERM_DESC").getObj();
                    
                    DataModelP.addRow(rowData);
                }
            }
            //==================================================================//
            

            //----------------- Displaying Payment Terms --------------------//
            Counter=0;
            for(int i=1;i<=ObjQuotation.colQuotTerms.size();i++)
            {
                clsQuotTerms ObjItem=(clsQuotTerms)ObjQuotation.colQuotTerms.get(Integer.toString(i));
                String Type=(String)ObjItem.getAttribute("TERM_TYPE").getObj();
                
                if(Type.trim().equals("D"))
                {
                    Counter++;
                    Object[] rowData=new Object[3];
                    rowData[0]=Integer.toString(Counter);
                    rowData[1]=Integer.toString((int)ObjItem.getAttribute("TERM_CODE").getVal());
                    rowData[2]=(String)ObjItem.getAttribute("TERM_DESC").getObj();
                    
                    DataModelD.addRow(rowData);
                }
            }
            //==================================================================//
            
            
            //----------------- Displaying Payment Terms --------------------//
            for(int i=1;i<=ObjQuotation.colQuotTerms.size();i++)
            {
                clsQuotTerms ObjItem=(clsQuotTerms)ObjQuotation.colQuotTerms.get(Integer.toString(i));
                String Type=(String)ObjItem.getAttribute("TERM_TYPE").getObj();
                
                if(Type.trim().equals("O"))
                {
                    Counter++;
                    Object[] rowData=new Object[3];
                    rowData[0]=Integer.toString(Counter);
                    rowData[1]=Integer.toString((int)ObjItem.getAttribute("TERM_CODE").getVal());
                    rowData[2]=(String)ObjItem.getAttribute("TERM_DESC").getObj();
                    
                    DataModelO.addRow(rowData);
                }
            }
            //==================================================================//
            
            
            
        }
        catch(Exception e) {
            
        }
    }
    
    
    public boolean ShowForm(String pQuotID,int pSrNo) {
        try {
            
            ShowInformation(pQuotID,pSrNo);
            
            setSize(765,420);
            
            Frame f=findParentFrame(this);
            
            aDialog=new JDialog(f,"Quotation Terms",true);
            
            aDialog.getContentPane().add("Center",this);
            Dimension appletSize = this.getSize();
            aDialog.setSize(appletSize);
            aDialog.setResizable(false);
            
            //Place it to center of the screen
            Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
            aDialog.setLocation((int)(screenSize.width-appletSize.getWidth())/2,(int)(screenSize.height-appletSize.getHeight())/2);
            
            aDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
            aDialog.show();
        }
        catch(Exception e) {
        }
        return true;
    }
    
    //Recurses through the hierarchy of classes
    //until it finds Frame
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
    
    
    private void FormatGrid() {
        
        DataModelL=new EITLTableModel();
        
        TableL.removeAll();
        TableL.setModel(DataModelL);
        
        //Set the table Readonly
        DataModelL.TableReadOnly(true);
        
        DataModelL.addColumn("Head");
        DataModelL.addColumn("% Value");
        DataModelL.addColumn("Value");
        
        
        DataModelH=new EITLTableModel();
        
        TableH.removeAll();
        TableH.setModel(DataModelH);
        
        //Set the table Readonly
        DataModelH.TableReadOnly(true);
        
        DataModelH.addColumn("Head");
        DataModelH.addColumn("% Value");
        DataModelH.addColumn("Value");
        
        
        
        DataModelP=new EITLTableModel();
        
        TableP.removeAll();
        TableP.setModel(DataModelP);
        
        //Set the table Readonly
        DataModelP.TableReadOnly(true);
        
        DataModelP.addColumn("Sr.");
        DataModelP.addColumn("Code");
        DataModelP.addColumn("Description");
        
        
        DataModelD=new EITLTableModel();
        
        TableD.removeAll();
        TableD.setModel(DataModelD);
        
        //Set the table Readonly
        DataModelD.TableReadOnly(true);
        
        DataModelD.addColumn("Sr.");
        DataModelD.addColumn("Code");
        DataModelD.addColumn("Description");
        
        
        DataModelO=new EITLTableModel();
        
        TableO.removeAll();
        TableO.setModel(DataModelO);
        
        //Set the table Readonly
        DataModelO.TableReadOnly(true);
        
        DataModelO.addColumn("Sr.");
        DataModelO.addColumn("Code");
        DataModelO.addColumn("Description");
    }
    
    
}
