/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP.Purchase;

/**
 *
 * @author  nhpatel
 */ 

import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.*;
import EITLERP.Stores.*;
import org.nfunk.jep.*;
import org.nfunk.jep.type.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import java.text.*;
import javax.swing.text.*;
 
/*<APPLET CODE=frmCIF.class HEIGHT=528 WIDTH=775></APPLET>*/
/**
 *
 */
public class frmCIF extends javax.swing.JApplet {
    
    private int EditMode=0;
    
    private EITLTableModel DataModelH;
    private EITLTableModel DataModelL;
    private EITLTableCellRenderer Renderer=new EITLTableCellRenderer();
    
    private HashMap colVariables=new HashMap();
    private HashMap colVariables_H=new HashMap();
    clsTaxColumn ObjTax=new clsTaxColumn();
    clsColumn ObjColumn=new clsColumn();
    
    private JEP myParser=new JEP();
    private boolean Updating=false;
    private boolean Updating_H=false;
    private boolean DoNotEvaluate=false;
    
    private clsCIF ObjCIF;
    
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromID=0;
    private String SelPrefix=""; //Selected Prefix
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbPriorityModel;
    private EITLComboModel cmbOrderModeModel;
    private EITLTableModel DataModelA;
    
    private boolean HistoryView=false;
    private String theDocNo="";
    private EITLTableModel DataModelHS;    
    
   
    /** Creates new form frmTemplate */
    public frmCIF() {
        System.gc();
        setSize(775,528);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        ObjTax.LoadData((int)EITLERPGLOBAL.gCompanyID);
        ObjColumn.LoadData((int)EITLERPGLOBAL.gCompanyID);
        
        FormatGrid();
        FormatGrid_H();
        SetNumberFormats();
        
        GenerateCombos();
        ObjCIF=new clsCIF();
        
        if(ObjCIF.LoadData(EITLERPGLOBAL.gCompanyID)) {
            ObjCIF.MoveFirst();
            DisplayData();
            SetMenuForRights();
        }
        else {
            JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+ObjCIF.LastError);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtInvoiceNo = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtInvoiceDate = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cmbPriority = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        txtCIFCost = new javax.swing.JFormattedTextField();
        chkCancelled = new javax.swing.JCheckBox();
        jLabel40 = new javax.swing.JLabel();
        txtPurpose = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        txtSubject = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtPONo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPODate = new javax.swing.JTextField();
        txtDecision = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        cmdNext1 = new javax.swing.JButton();
        lblRevNo = new javax.swing.JLabel();
        Tab2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableL = new javax.swing.JTable();
        HeaderPane = new javax.swing.JScrollPane();
        TableH = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        lblGrossAmount = new javax.swing.JLabel();
        txtGrossAmount = new javax.swing.JFormattedTextField();
        lblNetAmount = new javax.swing.JLabel();
        txtNetAmount = new javax.swing.JFormattedTextField();
        jLabel20 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        cmdNext2 = new javax.swing.JButton();
        cmdBack2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        Tab3 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack3 = new javax.swing.JButton();
        Tab4 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        lblCreatedBy = new javax.swing.JLabel();
        lblCreatedDate = new javax.swing.JLabel();
        lblModifiedBy = new javax.swing.JLabel();
        lblModifiedDate = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        
        
        getContentPane().setLayout(null);
        
        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdTop);
        
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdBack);
        
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdNext);
        
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdLast);
        
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdNew);
        
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdEdit);
        
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdDelete);
        
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdSave);
        
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdCancel);
        
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdFilter);
        
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdPreview);
        
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdPrint);
        
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdExit);
        
        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);
        
        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setText(" FREIGHT CALCULATION SHEET");
        jLabel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 40, 804, 25);
        
        Tab1.setLayout(null);
        
        Tab1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tab1MouseClicked(evt);
            }
        });
        
        jLabel2.setText("CIF No.");
        Tab1.add(jLabel2);
        jLabel2.setBounds(52, 18, 56, 15);
        
        txtDocNo.setBackground(new java.awt.Color(204, 204, 255));
        txtDocNo.setEditable(false);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(114, 14, 114, 19);
        
        jLabel3.setText("Date");
        Tab1.add(jLabel3);
        jLabel3.setBounds(295, 18, 29, 15);
        
        txtDocDate.setName("CIF_DATE");
        txtDocDate.setNextFocusableComponent(txtPONo);
        txtDocDate.setEnabled(false);
        txtDocDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDocDateFocusGained(evt);
            }
        });
        
        Tab1.add(txtDocDate);
        txtDocDate.setBounds(331, 16, 100, 19);
        
        jLabel5.setText("Remarks");
        Tab1.add(jLabel5);
        jLabel5.setBounds(38, 258, 68, 15);
        
        txtRemarks.setName("REMARKS");
        txtRemarks.setNextFocusableComponent(cmdNext1);
        txtRemarks.setEnabled(false);
        txtRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRemarksFocusGained(evt);
            }
        });
        
        Tab1.add(txtRemarks);
        txtRemarks.setBounds(114, 254, 280, 19);
        
        jLabel9.setText("Invoice No.");
        Tab1.add(jLabel9);
        jLabel9.setBounds(24, 128, 84, 15);
        
        txtInvoiceNo.setName("INVOICE_NO");
        txtInvoiceNo.setNextFocusableComponent(txtInvoiceDate);
        txtInvoiceNo.setEnabled(false);
        txtInvoiceNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtInvoiceNoFocusGained(evt);
            }
        });
        
        Tab1.add(txtInvoiceNo);
        txtInvoiceNo.setBounds(114, 124, 114, 19);
        
        jLabel10.setText("Date");
        Tab1.add(jLabel10);
        jLabel10.setBounds(254, 128, 29, 15);
        
        txtInvoiceDate.setName("INVOICE_DATE");
        txtInvoiceDate.setNextFocusableComponent(txtSubject);
        txtInvoiceDate.setEnabled(false);
        txtInvoiceDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtInvoiceDateFocusGained(evt);
            }
        });
        
        Tab1.add(txtInvoiceDate);
        txtInvoiceDate.setBounds(290, 126, 100, 19);
        
        jLabel11.setText("Priority");
        Tab1.add(jLabel11);
        jLabel11.setBounds(56, 88, 48, 16);
        
        cmbPriority.setName("PRIORITY");
        cmbPriority.setNextFocusableComponent(txtInvoiceNo);
        cmbPriority.setEnabled(false);
        cmbPriority.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbPriorityFocusGained(evt);
            }
        });
        
        Tab1.add(cmbPriority);
        cmbPriority.setBounds(114, 84, 180, 24);
        
        jLabel14.setText("CIF Cost");
        Tab1.add(jLabel14);
        jLabel14.setBounds(28, 316, 82, 15);
        
        txtCIFCost.setName("CIF_COST");
        txtCIFCost.setEnabled(false);
        Tab1.add(txtCIFCost);
        txtCIFCost.setBounds(114, 312, 132, 19);
        
        chkCancelled.setText("Cancelled");
        chkCancelled.setNextFocusableComponent(txtRemarks);
        chkCancelled.setEnabled(false);
        chkCancelled.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                chkCancelledFocusGained(evt);
            }
        });
        
        Tab1.add(chkCancelled);
        chkCancelled.setBounds(656, 8, 85, 23);
        
        jLabel40.setText("Purpose");
        Tab1.add(jLabel40);
        jLabel40.setBounds(50, 194, 52, 15);
        
        txtPurpose.setName("PURPOSE");
        txtPurpose.setNextFocusableComponent(txtDecision);
        txtPurpose.setEnabled(false);
        txtPurpose.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPurposeFocusGained(evt);
            }
        });
        
        Tab1.add(txtPurpose);
        txtPurpose.setBounds(114, 190, 276, 19);
        
        jLabel41.setText("Subject");
        Tab1.add(jLabel41);
        jLabel41.setBounds(48, 162, 52, 15);
        
        txtSubject.setName("SUBJECT");
        txtSubject.setNextFocusableComponent(txtPurpose);
        txtSubject.setEnabled(false);
        txtSubject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSubjectFocusGained(evt);
            }
        });
        
        Tab1.add(txtSubject);
        txtSubject.setBounds(114, 158, 276, 19);
        
        jLabel4.setText("P.O. No.");
        Tab1.add(jLabel4);
        jLabel4.setBounds(54, 50, 56, 15);
        
        txtPONo.setName("PO_NO");
        txtPONo.setNextFocusableComponent(txtPODate);
        txtPONo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPONoFocusGained(evt);
            }
        });
        txtPONo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPONoKeyPressed(evt);
            }
        });
        
        Tab1.add(txtPONo);
        txtPONo.setBounds(114, 46, 114, 19);
        
        jLabel6.setText("Date");
        Tab1.add(jLabel6);
        jLabel6.setBounds(296, 50, 29, 15);
        
        txtPODate.setName("PO_DATE");
        txtPODate.setNextFocusableComponent(cmbPriority);
        txtPODate.setEnabled(false);
        txtPODate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPODateFocusGained(evt);
            }
        });
        
        Tab1.add(txtPODate);
        txtPODate.setBounds(332, 48, 100, 19);
        
        txtDecision.setName("DECISION");
        txtDecision.setNextFocusableComponent(txtRemarks);
        txtDecision.setEnabled(false);
        txtDecision.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDecisionFocusGained(evt);
            }
        });
        
        Tab1.add(txtDecision);
        txtDecision.setBounds(114, 222, 280, 19);
        
        jLabel12.setText("Decision");
        Tab1.add(jLabel12);
        jLabel12.setBounds(42, 226, 68, 15);
        
        cmdNext1.setText("Next >>");
        cmdNext1.setNextFocusableComponent(txtDocDate);
        cmdNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext1ActionPerformed(evt);
            }
        });
        
        Tab1.add(cmdNext1);
        cmdNext1.setBounds(634, 338, 102, 25);
        
        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(230, 17, 44, 15);
        
        Tab.addTab("Header ", Tab1);
        
        Tab2.setLayout(null);
        
        Tab2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        
        TableL.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null}
        },
        new String [] {
            "Title 1", "Title 2", "Title 3", "Title 4"
        }
        ));
        TableL.setNextFocusableComponent(TableH);
        TableL.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TableLFocusLost(evt);
            }
        });
        TableL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableLKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableLKeyReleased(evt);
            }
        });
        
        jScrollPane1.setViewportView(TableL);
        
        Tab2.add(jScrollPane1);
        jScrollPane1.setBounds(6, 38, 732, 176);
        
        TableH.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null}
        },
        new String [] {
            "Title 1", "Title 2", "Title 3", "Title 4"
        }
        ));
        TableH.setNextFocusableComponent(cmdNext2);
        HeaderPane.setViewportView(TableH);
        
        Tab2.add(HeaderPane);
        HeaderPane.setBounds(6, 240, 254, 124);
        
        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setNextFocusableComponent(TableL);
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        cmdAdd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdAddFocusGained(evt);
            }
        });
        
        Tab2.add(cmdAdd);
        cmdAdd.setBounds(554, 8, 88, 25);
        
        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setNextFocusableComponent(TableL);
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        cmdRemove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdRemoveFocusGained(evt);
            }
        });
        
        Tab2.add(cmdRemove);
        cmdRemove.setBounds(646, 8, 92, 25);
        
        lblGrossAmount.setText("Total Accessable Amount");
        Tab2.add(lblGrossAmount);
        lblGrossAmount.setBounds(440, 226, 150, 15);
        
        txtGrossAmount.setBackground(new java.awt.Color(255, 255, 204));
        txtGrossAmount.setEditable(false);
        txtGrossAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtGrossAmount.setFont(new java.awt.Font("Arial", 1, 12));
        Tab2.add(txtGrossAmount);
        txtGrossAmount.setBounds(597, 224, 138, 19);
        
        lblNetAmount.setText("Net Amount");
        Tab2.add(lblNetAmount);
        lblNetAmount.setBounds(518, 266, 74, 15);
        
        txtNetAmount.setBackground(new java.awt.Color(255, 255, 204));
        txtNetAmount.setEditable(false);
        txtNetAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtNetAmount.setFont(new java.awt.Font("Arial", 1, 12));
        Tab2.add(txtNetAmount);
        txtNetAmount.setBounds(597, 266, 136, 19);
        
        jLabel20.setFont(new java.awt.Font("Arial", 1, 12));
        jLabel20.setText("CIF Items");
        Tab2.add(jLabel20);
        jLabel20.setBounds(10, 14, 64, 15);
        
        jPanel4.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab2.add(jPanel4);
        jPanel4.setBounds(78, 22, 468, 4);
        
        cmdNext2.setText("Next >>");
        cmdNext2.setNextFocusableComponent(cmdBack2);
        cmdNext2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext2ActionPerformed(evt);
            }
        });
        
        Tab2.add(cmdNext2);
        cmdNext2.setBounds(634, 338, 102, 25);
        
        cmdBack2.setText("<<Back");
        cmdBack2.setNextFocusableComponent(cmdAdd);
        cmdBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack2ActionPerformed(evt);
            }
        });
        
        Tab2.add(cmdBack2);
        cmdBack2.setBounds(528, 338, 102, 25);
        
        jLabel7.setText("Press Ctrl+C to copy selected line");
        Tab2.add(jLabel7);
        jLabel7.setBounds(8, 216, 290, 15);
        
        Tab.addTab("Item Information", Tab2);
        
        Tab3.setLayout(null);
        
        Tab3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab3FocusGained(evt);
            }
        });
        
        jLabel31.setText("Hierarchy ");
        Tab3.add(jLabel31);
        jLabel31.setBounds(16, 18, 66, 15);
        
        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        
        Tab3.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 14, 184, 24);
        
        jLabel32.setText("From");
        Tab3.add(jLabel32);
        jLabel32.setBounds(20, 52, 56, 15);
        
        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab3.add(txtFrom);
        txtFrom.setBounds(86, 50, 182, 19);
        
        jLabel35.setText("Remarks");
        Tab3.add(jLabel35);
        jLabel35.setBounds(20, 82, 62, 15);
        
        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        Tab3.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 78, 518, 19);
        
        jLabel36.setText("Your Action  ");
        Tab3.add(jLabel36);
        jLabel36.setBounds(8, 124, 76, 15);
        
        jPanel6.setLayout(null);
        
        jPanel6.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.setEnabled(false);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 136, 23);
        
        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.setEnabled(false);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);
        
        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.setEnabled(false);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);
        
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.setEnabled(false);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);
        
        Tab3.add(jPanel6);
        jPanel6.setBounds(88, 120, 182, 100);
        
        jLabel33.setText("Send To");
        Tab3.add(jLabel33);
        jLabel33.setBounds(18, 228, 60, 15);
        
        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        
        Tab3.add(cmbSendTo);
        cmbSendTo.setBounds(84, 224, 184, 24);
        
        jLabel34.setText("Remarks");
        Tab3.add(jLabel34);
        jLabel34.setBounds(16, 264, 60, 15);
        
        txtToRemarks.setNextFocusableComponent(cmdBack3);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        
        Tab3.add(txtToRemarks);
        txtToRemarks.setBounds(84, 260, 516, 19);
        
        cmdBack3.setText("<<Back");
        cmdBack3.setNextFocusableComponent(cmbHierarchy);
        cmdBack3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack3ActionPerformed(evt);
            }
        });
        
        Tab3.add(cmdBack3);
        cmdBack3.setBounds(634, 338, 102, 25);
        
        Tab.addTab("Approval", Tab3);
        
        Tab4.setLayout(null);
        
        Tab4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status");
        Tab4.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);
        
        TableA.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null}
        },
        new String [] {
            "Title 1", "Title 2", "Title 3", "Title 4"
        }
        ));
        jScrollPane2.setViewportView(TableA);
        
        Tab4.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 644, 144);
        
        jPanel1.setLayout(null);
        
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel38.setText("Record Created By");
        jPanel1.add(jLabel38);
        jLabel38.setBounds(7, 10, 128, 15);
        
        jLabel39.setText("Created Date");
        jPanel1.add(jLabel39);
        jLabel39.setBounds(7, 55, 93, 15);
        
        jLabel42.setText("Last Modified By");
        jPanel1.add(jLabel42);
        jLabel42.setBounds(7, 101, 110, 15);
        
        jLabel43.setText("Modified Date");
        jPanel1.add(jLabel43);
        jLabel43.setBounds(7, 145, 93, 15);
        
        lblCreatedBy.setForeground(new java.awt.Color(51, 51, 255));
        lblCreatedBy.setText("...");
        jPanel1.add(lblCreatedBy);
        lblCreatedBy.setBounds(7, 30, 292, 15);
        
        lblCreatedDate.setForeground(new java.awt.Color(51, 51, 255));
        lblCreatedDate.setText("...");
        jPanel1.add(lblCreatedDate);
        lblCreatedDate.setBounds(7, 76, 169, 15);
        
        lblModifiedBy.setForeground(new java.awt.Color(51, 51, 255));
        lblModifiedBy.setText("...");
        jPanel1.add(lblModifiedBy);
        lblModifiedBy.setBounds(7, 119, 293, 15);
        
        lblModifiedDate.setForeground(new java.awt.Color(51, 51, 255));
        lblModifiedDate.setText("...");
        jPanel1.add(lblModifiedDate);
        lblModifiedDate.setBounds(7, 162, 169, 15);
        
        Tab4.add(jPanel1);
        jPanel1.setBounds(11, 188, 334, 183);
        
        jLabel13.setText("Document Update History");
        Tab4.add(jLabel13);
        jLabel13.setBounds(361, 187, 182, 15);
        
        TableHS.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null}
        },
        new String [] {
            "Title 1", "Title 2", "Title 3", "Title 4"
        }
        ));
        jScrollPane3.setViewportView(TableHS);
        
        Tab4.add(jScrollPane3);
        jScrollPane3.setBounds(361, 203, 294, 148);
        
        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        
        Tab4.add(cmdViewHistory);
        cmdViewHistory.setBounds(361, 354, 132, 20);
        
        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        
        Tab4.add(cmdNormalView);
        cmdNormalView.setBounds(501, 354, 132, 20);
        
        Tab.addTab("Status", Tab4);
        
        getContentPane().add(Tab);
        Tab.setBounds(4, 68, 752, 404);
        
        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(6, 471, 750, 22);
        
    }//GEN-END:initComponents

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjCIF.LoadData(EITLERPGLOBAL.gCompanyID);
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo=txtDocNo.getText();
        ObjCIF.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void TableLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableLKeyReleased
        // TODO add your handling code here:
        if(EditMode!=0)
        {
          if(evt.getKeyCode()==67&&evt.getModifiersEx()==128) //Ctrl+C Key Combonation
          {
            //Check that any row exist
            if(TableL.getRowCount()>0)
            {
               //First Add new row
               Object[] rowData=new Object[1];
               DataModelL.addRow(rowData);
               int NewRow=TableL.getRowCount()-1;
               
               //Copy New row with Previous one
               for(int i=0;i<TableL.getColumnCount();i++)
               {
                 TableL.setValueAt(TableL.getValueAt(TableL.getSelectedRow(),i), NewRow, i);
               }
               UpdateSrNo();
            }
          }
        }
    }//GEN-LAST:event_TableLKeyReleased

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the user to whome document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void cmdRemoveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdRemoveFocusGained
        // TODO add your handling code here:
        ShowMessage("Click this button to remove selected row from the table");
    }//GEN-LAST:event_cmdRemoveFocusGained

    private void cmdAddFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdAddFocusGained
        // TODO add your handling code here:
        ShowMessage("Click this button to add a new row to the table");
    }//GEN-LAST:event_cmdAddFocusGained

    private void chkCancelledFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chkCancelledFocusGained
        // TODO add your handling code here:
        ShowMessage("Shows cancel status of this document");
    }//GEN-LAST:event_chkCancelledFocusGained

    private void txtRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the remarks for this document");
    }//GEN-LAST:event_txtRemarksFocusGained

    private void txtDecisionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDecisionFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the details of decision taken");
    }//GEN-LAST:event_txtDecisionFocusGained

    private void txtPurposeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPurposeFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the purpose");
    }//GEN-LAST:event_txtPurposeFocusGained

    private void txtSubjectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSubjectFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the subject");
    }//GEN-LAST:event_txtSubjectFocusGained

    private void txtInvoiceDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInvoiceDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter invoice date in DD/MM/YYYY");
    }//GEN-LAST:event_txtInvoiceDateFocusGained

    private void txtInvoiceNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInvoiceNoFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter invoice no.");
    }//GEN-LAST:event_txtInvoiceNoFocusGained

    private void cmbPriorityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbPriorityFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the priority");
    }//GEN-LAST:event_cmbPriorityFocusGained

    private void txtPODateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPODateFocusGained
        // TODO add your handling code here:
        ShowMessage("Shows date of PO selected");
    }//GEN-LAST:event_txtPODateFocusGained

    private void txtPONoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPONoFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter PO no. Press F1 for the list");
    }//GEN-LAST:event_txtPONoFocusGained

    private void txtDocDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter date in DD/MM/YYYY");
    }//GEN-LAST:event_txtDocDateFocusGained

    private void Tab3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab3FocusGained
        // TODO add your handling code here:
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab3FocusGained

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        // TODO add your handling code here:
        cmdAdd.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        // TODO add your handling code here:
        txtDocDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained

    private void cmdBack3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack3ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBack3ActionPerformed

    private void cmdBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack2ActionPerformed

    private void cmdNext2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNext2ActionPerformed

    private void cmdNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext1ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext1ActionPerformed

    private void Tab1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tab1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Tab1MouseClicked
    
    private void txtPONoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPONoKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==112) //F1 key pressed
        {
            String PONo="";
            LOV aList=new LOV();
            
            aList.SQL="SELECT PO_NO,DATE_FORMAT(PO_DATE,'%d/%m/%Y') AS PO_DATE from D_PUR_PO_HEADER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1 AND PO_TYPE=5";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=1;
            
            if(aList.ShowLOV()) {
                clsPOGen ObjPO=new clsPOGen();
                ObjPO.POType=5;
                clsPOGen ObjNewPO=(clsPOGen)ObjPO.getObject(EITLERPGLOBAL.gCompanyID,aList.ReturnVal);
                txtPONo.setText(aList.ReturnVal);
                txtPODate.setText(EITLERPGLOBAL.formatDate((String)ObjNewPO.getAttribute("PO_DATE").getObj()));
            }
        }
    }//GEN-LAST:event_txtPONoKeyPressed
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(true);
        OpgHold.setSelected(false);
        
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(true);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        Delete();
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if(TableL.getRowCount()>0) {
            DataModelL.removeRow(TableL.getSelectedRow());
            UpdateSrNo();
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void TableLFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableLFocusLost
        // TODO add your handling code here:
        
        //Update Header Custom Columns
        for(int i=0;i<TableH.getRowCount();i++) {
            UpdateResults_H(i);
        }
        
    }//GEN-LAST:event_TableLFocusLost
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        Object[] rowData=new Object[2];
        DataModelL.addRow(rowData);
        TableL.changeSelection(TableL.getRowCount()-1, 1, false,false);
        UpdateSrNo();
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void TableLKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableLKeyPressed
        // TODO add your handling code here:
        if(EditMode!=0) {
            
            //=========== Item List ===============
            if(TableL.getSelectedColumn()==DataModelL.getColFromVariable("ITEM_ID")) {
                if(evt.getKeyCode()==112) //F1 Key pressed
                {
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1 AND CANCELLED=0 ORDER BY ITEM_ID";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=2;
                    
                    if(aList.ShowLOV()) {
                        TableL.setValueAt(aList.ReturnVal, TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_ID"));
                    }
                }
            }
            //=========================================
            
            if(evt.getKeyCode()==155)//Insert Key Pressed
            {
                Object[] rowData=new Object[1];
                DataModelL.addRow(rowData);
                TableL.changeSelection(TableL.getRowCount()-1, 1, false,false);
                UpdateSrNo();
            }
            
            if(evt.getKeyCode()==127) //Delete key pressed
            {
                if(TableL.getRowCount()>0) {
                    DataModelL.removeRow(TableL.getSelectedRow());
                    UpdateSrNo();
                }
            }
        }
    }//GEN-LAST:event_TableLKeyPressed
    
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        //Set Default Send to User
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane HeaderPane;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JPanel Tab3;
    private javax.swing.JPanel Tab4;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableH;
    private javax.swing.JTable TableHS;
    private javax.swing.JTable TableL;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkCancelled;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbPriority;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdBack3;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdNext2;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblCreatedBy;
    private javax.swing.JLabel lblCreatedDate;
    private javax.swing.JLabel lblGrossAmount;
    private javax.swing.JLabel lblModifiedBy;
    private javax.swing.JLabel lblModifiedDate;
    private javax.swing.JLabel lblNetAmount;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JFormattedTextField txtCIFCost;
    private javax.swing.JTextField txtDecision;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JFormattedTextField txtGrossAmount;
    private javax.swing.JTextField txtInvoiceDate;
    private javax.swing.JTextField txtInvoiceNo;
    private javax.swing.JFormattedTextField txtNetAmount;
    private javax.swing.JTextField txtPODate;
    private javax.swing.JTextField txtPONo;
    private javax.swing.JTextField txtPurpose;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtSubject;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        try {
            txtDocNo.setText((String)ObjCIF.getAttribute("CIF_NO").getObj());
            lblRevNo.setText(Integer.toString((int)ObjCIF.getAttribute("REVISION_NO").getVal()));
            txtDocDate.setText(EITLERPGLOBAL.formatDate((String)ObjCIF.getAttribute("CIF_DATE").getObj()));
            txtPONo.setText((String)ObjCIF.getAttribute("PO_NO").getObj());
            txtPODate.setText(EITLERPGLOBAL.formatDate((String)ObjCIF.getAttribute("PO_DATE").getObj()));
            txtSubject.setText((String)ObjCIF.getAttribute("SUBJECT").getObj());
            txtInvoiceNo.setText((String)ObjCIF.getAttribute("INVOICE_NO").getObj());
            txtInvoiceDate.setText(EITLERPGLOBAL.formatDate((String)ObjCIF.getAttribute("INVOICE_DATE").getObj()));
            txtPurpose.setText((String)ObjCIF.getAttribute("PURPOSE").getObj());
            EITLERPGLOBAL.setComboIndex(cmbPriority,(int)ObjCIF.getAttribute("PRIORITY").getVal());
            txtRemarks.setText((String)ObjCIF.getAttribute("REMARKS").getObj());
            txtDecision.setText((String)ObjCIF.getAttribute("DECISION").getObj());
            txtCIFCost.setText(Double.toString(ObjCIF.getAttribute("CIF_COST").getVal()));
            chkCancelled.setSelected(ObjCIF.getAttribute("CANCELLED").getBool());
            
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,(int)ObjCIF.getAttribute("HIERARCHY_ID").getVal());
            
            //============= Display Custom Columns ========================
            for(int i=1;i<=10;i++) {
                int ColID=(int)ObjCIF.getAttribute("COLUMN_"+Integer.toString(i)+"_ID").getVal();
                int Col=DataModelH.getColFromID(ColID);
                int TaxID=ObjColumn.getTaxID(EITLERPGLOBAL.gCompanyID, ColID);
                String Variable=ObjColumn.getVariableName(EITLERPGLOBAL.gCompanyID, ColID);
                
                
                if(ColID!=0) {
                    //Set the Formula
                    if(ObjCIF.getAttribute("COLUMN_"+Integer.toString(i)+"_FORMULA").getObj()!=null) {
                        DataModelH.SetFormula(Col, (String)ObjCIF.getAttribute("COLUMN_"+Integer.toString(i)+"_FORMULA").getObj());
                    }
                    else {
                        DataModelH.SetFormula(Col, "");
                    }
                    
                    
                    //Set the Percentage. If there
                    if(ObjTax.getUsePercentage(EITLERPGLOBAL.gCompanyID, TaxID)) {
                        DataModelH.setValueByVariableEx("P_"+ColID, Double.toString(ObjCIF.getAttribute("COLUMN_"+Integer.toString(i)+"_PER").getVal()),1);
                    }
                    
                    //Set the Value
                    DataModelH.setValueByVariableEx(Variable, Double.toString(ObjCIF.getAttribute("COLUMN_"+Integer.toString(i)+"_AMT").getVal()), 1);
                }
                
            }
            //=================================================================//
            
            //========= Display Line Items =============//
            FormatGrid();
            
            for(int i=1;i<=ObjCIF.colCIFItems.size();i++) {
                //Insert New Row
                Object[] rowData=new Object[1];
                DataModelL.addRow(rowData);
                int NewRow=TableL.getRowCount()-1;
                
                clsCIFItem ObjItem=(clsCIFItem)ObjCIF.colCIFItems.get(Integer.toString(i));
                
                DataModelL.setValueByVariable("SR_NO",Integer.toString(i),NewRow);
                DataModelL.setValueByVariable("ITEM_ID",(String)ObjItem.getAttribute("ITEM_ID").getObj(),NewRow);
                String ItemName=clsItem.getItemName(EITLERPGLOBAL.gCompanyID, (String)ObjItem.getAttribute("ITEM_ID").getObj());
                DataModelL.setValueByVariable("ITEM_NAME",ItemName,NewRow);
                DataModelL.setValueByVariable("ITEM_DESC",(String)ObjItem.getAttribute("ITEM_DESC").getObj(),NewRow);
                
                String OrderMode="";
                switch((int)ObjItem.getAttribute("ORDER_MODE").getVal()) {
                    case 1:OrderMode="FOB";break;
                    case 2:OrderMode="CFR";break;
                    case 3:OrderMode="CIF";break;
                    case 4:OrderMode="C&I";break;
                }
                
                DataModelL.setValueByVariable("ORDER_MODE",OrderMode,NewRow);
                
                DataModelL.setValueByVariable("AIR_FREIGHT",Double.toString(ObjItem.getAttribute("AIR_FREIGHT").getVal()),NewRow);
                DataModelL.setValueByVariable("GROSS_WEIGHT",Double.toString(ObjItem.getAttribute("GROSS_WEIGHT").getVal()),NewRow);
                DataModelL.setValueByVariable("CARTONS",Double.toString(ObjItem.getAttribute("CARTONS").getVal()),NewRow);
                DataModelL.setValueByVariable("VOLUME_CM",Double.toString(ObjItem.getAttribute("VOLUME_CM").getVal()),NewRow);
                DataModelL.setValueByVariable("REMARKS",(String)ObjItem.getAttribute("REMARKS").getObj(),NewRow);
                DataModelL.setValueByVariable("TOTAL_AMOUNT",Double.toString(ObjItem.getAttribute("TOTAL_AMOUNT").getVal()),NewRow);
                
                //============= Display Custom Columns ========================
                for(int c=1;c<=10;c++) {
                    int ColID=(int)ObjItem.getAttribute("COLUMN_"+Integer.toString(c)+"_ID").getVal();
                    int Col=DataModelL.getColFromID(ColID);
                    int TaxID=ObjColumn.getTaxID(EITLERPGLOBAL.gCompanyID, ColID);
                    String Variable=ObjColumn.getVariableName(EITLERPGLOBAL.gCompanyID, ColID);
                    
                    if(ColID!=0) {
                        //Set the Formula
                        if(ObjItem.getAttribute("COLUMN_"+Integer.toString(c)+"_FORMULA").getObj()!=null) {
                            DataModelL.SetFormula(Col, (String)ObjItem.getAttribute("COLUMN_"+Integer.toString(c)+"_FORMULA").getObj());
                        }
                        else {
                            DataModelL.SetFormula(Col, "");
                        }
                        
                        //Set the Percentage. If there
                        if(ObjTax.getUsePercentage(EITLERPGLOBAL.gCompanyID, TaxID)) {
                            DataModelL.setValueByVariable("P_"+ColID, Double.toString(ObjItem.getAttribute("COLUMN_"+Integer.toString(c)+"_PER").getVal()),NewRow);
                        }
                        
                        //Set the Value
                        DataModelL.setValueByVariable(Variable, Double.toString(ObjItem.getAttribute("COLUMN_"+Integer.toString(c)+"_AMT").getVal()), NewRow);
                    }
                }
                //=================================================================//
            }
            
            UpdateResults_H(0);
            UpdateAmounts();
            UpdateSrNo();
            
            if(EditMode==0) {
                DataModelL.TableReadOnly(true);
                DataModelH.TableReadOnly(true);
            }
            //=========================================//
            
        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List=new HashMap();
        String DocNo=(String)ObjCIF.getAttribute("CIF_NO").getObj();
        List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, 35, DocNo);
        for(int i=1;i<=List.size();i++)
        {
          clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
          Object[] rowData=new Object[7];
          
          rowData[0]=Integer.toString(i);
          rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
          rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
          rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
          rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
          rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
          rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
          
          DataModelA.addRow(rowData);
        }
        
        lblCreatedBy.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjCIF.getAttribute("CREATED_BY").getVal()));
        lblCreatedDate.setText(EITLERPGLOBAL.formatDate((String)ObjCIF.getAttribute("CREATED_DATE").getObj()));
        lblModifiedBy.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjCIF.getAttribute("MODIFIED_BY").getVal()));
        lblModifiedDate.setText(EITLERPGLOBAL.formatDate((String)ObjCIF.getAttribute("MODIFIED_DATE").getObj()));
        
        
        //Showing Audit Trial History
        FormatGridHS();
        HashMap History=clsCIF.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
        for(int i=1;i<=History.size();i++) {
            clsCIF ObjHistory=(clsCIF)History.get(Integer.toString(i));
            Object[] rowData=new Object[5];
            
            rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(long)ObjHistory.getAttribute("UPDATED_BY").getVal());
            rowData[2]=EITLERPGLOBAL.formatDate((String)ObjHistory.getAttribute("ENTRY_DATE").getObj());
            
            String ApprovalStatus="";
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus="Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus="Final Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus="Waiting";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus="Rejected";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus="Pending";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus="Skiped";
            }
            
            
            rowData[3]=ApprovalStatus;
            rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
            
            DataModelHS.addRow(rowData);
        }
        //============================================================//
        
        //============================================================//
                        
            
            ShowMessage("Ready");
        }
        catch(Exception e) {
            
        }
    }
    
    
    //Sets data to the Class Object
    private void SetData() {
        //Header Fields
        ObjCIF.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        ObjCIF.setAttribute("PREFIX",SelPrefix);
        ObjCIF.setAttribute("CIF_DATE",EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
        ObjCIF.setAttribute("PO_NO",txtPONo.getText());
        ObjCIF.setAttribute("PO_DATE",EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
        ObjCIF.setAttribute("PO_TYPE",5);
        ObjCIF.setAttribute("SUBJECT",txtSubject.getText());
        ObjCIF.setAttribute("INVOICE_NO",txtInvoiceNo.getText());
        ObjCIF.setAttribute("INVOICE_DATE",EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText()));
        ObjCIF.setAttribute("PURPOSE",txtPurpose.getText());
        ObjCIF.setAttribute("PRIORITY",EITLERPGLOBAL.getComboCode(cmbPriority));
        ObjCIF.setAttribute("REMARKS",txtRemarks.getText());
        ObjCIF.setAttribute("DECISION",txtDecision.getText());
        ObjCIF.setAttribute("CIF_COST",Double.parseDouble(txtCIFCost.getText()));
        
        if(chkCancelled.isSelected()) {
            ObjCIF.setAttribute("CANCELLED",true);
        }
        else {
            ObjCIF.setAttribute("CANCELLED",false);
        }
        
        //----- Update Approval Specific Fields -----------//
        ObjCIF.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjCIF.setAttribute("FROM",EITLERPGLOBAL.gUserID);
        ObjCIF.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjCIF.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            ObjCIF.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjCIF.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjCIF.setAttribute("APPROVAL_STATUS","R");
        }
        
        if(OpgHold.isSelected()) {
            ObjCIF.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjCIF.setAttribute("CREATED_BY",EITLERPGLOBAL.gUserID);
            ObjCIF.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        else {
            ObjCIF.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gUserID);
            ObjCIF.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        
        //============= Set Custom Columns ========================
        int ColCounter=0;
        
        for(int i=0;i<TableH.getRowCount();i++) {
            double lnPercentValue=0;
            int ColID=DataModelH.getColID(i);
            int TaxID=ObjColumn.getTaxID(EITLERPGLOBAL.gCompanyID, ColID);
            String Variable=DataModelH.getVariable(i);
            
            if( (ColID!=0) && (ColID!=-99) && (!Variable.substring(0,2).equals("P_"))) {
                ColCounter++;
                ObjCIF.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_ID",ColID);
                ObjCIF.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_FORMULA",DataModelH.getFormula(i));
                
                if(ObjTax.getUsePercentage(EITLERPGLOBAL.gCompanyID, TaxID)) {
                    lnPercentValue=Double.parseDouble(DataModelH.getValueByVariableEx("P_"+ColID,1));
                    ObjCIF.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_PER",lnPercentValue);
                }
                ObjCIF.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_AMT",Double.parseDouble(DataModelH.getValueByVariableEx(Variable, 1)));
                ObjCIF.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_CAPTION",(String)TableH.getValueAt(i, 0));
            }
        }
        //=================================================================
        
        
        
        //=================== Setting up Line Items ==================//
        ObjCIF.colCIFItems.clear();
        
        for(int i=0;i<TableL.getRowCount();i++) {
            clsCIFItem ObjItem=new clsCIFItem();
            
            ObjItem.setAttribute("SR_NO",DataModelL.getValueByVariable("SR_NO",i));
            ObjItem.setAttribute("ITEM_ID",DataModelL.getValueByVariable("ITEM_ID",i));
            ObjItem.setAttribute("ITEM_DESC",DataModelL.getValueByVariable("ITEM_DESC",i));
            
            String OrderMode=DataModelL.getValueByVariable("ORDER_MODE",i);
            int nOrderMode=0;
            
            if(OrderMode.equals("FOB")) {
                nOrderMode=1;
            }
            if(OrderMode.equals("CFR")) {
                nOrderMode=2;
            }
            if(OrderMode.equals("CIF")) {
                nOrderMode=3;
            }
            if(OrderMode.equals("C&I")) {
                nOrderMode=4;
            }
            
            ObjItem.setAttribute("ORDER_MODE",nOrderMode);
            ObjItem.setAttribute("AIR_FREIGHT",Double.parseDouble(DataModelL.getValueByVariable("AIR_FREIGHT",i)));
            ObjItem.setAttribute("GROSS_WEIGHT",Double.parseDouble(DataModelL.getValueByVariable("GROSS_WEIGHT",i)));
            ObjItem.setAttribute("CARTONS",Double.parseDouble(DataModelL.getValueByVariable("CARTONS",i)));
            ObjItem.setAttribute("VOLUME_CM",Double.parseDouble(DataModelL.getValueByVariable("VOLUME_CM",i)));
            ObjItem.setAttribute("REMARKS",DataModelL.getValueByVariable("REMARKS",i));
            ObjItem.setAttribute("TOTAL_AMOUNT",Double.parseDouble(DataModelL.getValueByVariable("TOTAL_AMOUNT",i)));
            
            //============= Set Custom Columns ========================//
            ColCounter=0;
            
            for(int c=0;c<TableL.getColumnCount()-1;c++) {
                double lnPercentValue=0;
                int ColID=DataModelL.getColID(c);
                int TaxID=ObjColumn.getTaxID(EITLERPGLOBAL.gCompanyID, ColID);
                String Variable=DataModelL.getVariable(c);
                
                if( (ColID!=0) && (ColID!=-99) && (!Variable.substring(0,2).equals("P_"))) {
                    ColCounter++;
                    ObjItem.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_ID",ColID);
                    ObjItem.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_FORMULA",DataModelL.getFormula(c));
                    
                    if(ObjTax.getUsePercentage(EITLERPGLOBAL.gCompanyID, TaxID)) {
                        lnPercentValue=Double.parseDouble(DataModelL.getValueByVariable("P_"+ColID,i));
                        ObjItem.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_PER",lnPercentValue);
                    }
                    ObjItem.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_AMT",Double.parseDouble(DataModelL.getValueByVariable(Variable, i)));
                    ObjItem.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_CAPTION",TableL.getColumnName(c));
                }
            }
            //===========================================================//
            
            
            ObjCIF.colCIFItems.put(Integer.toString(ObjCIF.colCIFItems.size()+1),ObjItem);
        }
        //======================Completed ===========================//
    }
    
    private void SetupColumns() {
        HashMap List=new HashMap();
        HashMap ColList=new HashMap();
        
        List=clsColumn.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND MODULE_ID=35 AND HEADER_LINE='L' ORDER BY COL_ORDER");
        TableColumnModel ColModel=TableL.getColumnModel();
        
        for(int i=1;i<=List.size();i++) {
            clsColumn ObjColumn=(clsColumn)List.get(Integer.toString(i));
            int lTaxID=(int)ObjColumn.getAttribute("TAX_ID").getVal();
            int lColID=(int)ObjColumn.getAttribute("SR_NO").getVal();
            
            clsTaxColumn ObjTax = (clsTaxColumn)clsTaxColumn.getObject((int)EITLERPGLOBAL.gCompanyID,lTaxID);
            if((boolean)ObjTax.getAttribute("USE_PERCENT").getBool()) {
                //Add Percentage Column
                DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj()+"%");
                
                DataModelL.SetNumeric(TableL.getColumnCount()-1,true);
                
                //Set Column ID
                DataModelL.SetColID(TableL.getColumnCount()-1, lColID);
                
                //Set Variable for % Column. It will be P_ID
                DataModelL.SetVariable(TableL.getColumnCount()-1,"P_"+Integer.toString(lColID));
                
                //Set the Operation Add/Substract
                DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
                
                //Set stat - Include it in calculation or not
                DataModelL.SetInclude(TableL.getColumnCount()-1, true);
                
                //Set Formula
                DataModelL.SetFormula(TableL.getColumnCount()-1, (String)ObjTax.getAttribute("FORMULA").getObj());
                
                
                //Control Column Visibility
                if(!ObjTax.getAttribute("VISIBLE_ON_FORM").getBool()) {
                    ColModel.getColumn(TableL.getColumnCount()-1).setMinWidth(0);
                    ColModel.getColumn(TableL.getColumnCount()-1).setPreferredWidth(0);
                }
                
                DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj());
                
                DataModelL.SetNumeric(TableL.getColumnCount()-1,true);
                
                //Set Column ID
                DataModelL.SetColID(TableL.getColumnCount()-1, lColID);
                
                //Set Variable
                if(ObjColumn.getAttribute("VARIABLE_NAME").getObj()!=null) {
                    DataModelL.SetVariable(TableL.getColumnCount()-1,(String)ObjColumn.getAttribute("VARIABLE_NAME").getObj());
                }
                else {
                    DataModelL.SetVariable(TableL.getColumnCount()-1,"  ");
                }
                
                //Set the Operation Add/Substract
                DataModelL.SetOperation(TableL.getColumnCount()-1,(String)ObjTax.getAttribute("OPERATION").getObj());
                
                //Set stat - Include it in calculation or not
                DataModelL.SetInclude(TableL.getColumnCount()-1,(boolean)ObjTax.getAttribute("NO_CALCULATION").getBool());
                
                //Set Formula
                DataModelL.SetFormula(TableL.getColumnCount()-1, (String)ObjTax.getAttribute("FORMULA").getObj());
                
                //Control Column Visibility
                if(!ObjTax.getAttribute("VISIBLE_ON_FORM").getBool()) {
                    ColModel.getColumn(TableL.getColumnCount()-1).setMinWidth(0);
                    ColModel.getColumn(TableL.getColumnCount()-1).setPreferredWidth(0);
                }
            }
            else {
                DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj());
                
                DataModelL.SetNumeric(TableL.getColumnCount()-1,true);
                //Set Column ID
                DataModelL.SetColID(TableL.getColumnCount()-1, lColID);
                
                //Set Variable
                if(ObjColumn.getAttribute("VARIABLE_NAME").getObj()==null) {
                    DataModelL.SetVariable(TableL.getColumnCount()-1,"  ");
                }
                else {
                    DataModelL.SetVariable(TableL.getColumnCount()-1,(String)ObjColumn.getAttribute("VARIABLE_NAME").getObj());
                }
                
                //Set the Operation Add/Substract
                DataModelL.SetOperation(TableL.getColumnCount()-1,(String)ObjTax.getAttribute("OPERATION").getObj());
                
                //Include it in calculation or not
                DataModelL.SetInclude(TableL.getColumnCount()-1,(boolean)ObjTax.getAttribute("NO_CALCULATION").getBool());
                
                //Set Formula
                DataModelL.SetFormula(TableL.getColumnCount()-1, (String)ObjTax.getAttribute("FORMULA").getObj());
                
                //Control Column Visibility
                if(!ObjTax.getAttribute("VISIBLE_ON_FORM").getBool()) {
                    ColModel.getColumn(TableL.getColumnCount()-1).setMinWidth(0);
                    ColModel.getColumn(TableL.getColumnCount()-1).setPreferredWidth(0);
                }
            }
        }
        
        TableL.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableL.setRowSelectionAllowed(true);
        TableL.setColumnSelectionAllowed(true);
        
        
        ColList=clsSystemColumn.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=35 AND HIDDEN=0 AND SHOW_LAST=1 ORDER BY D_COM_SYSTEM_COLUMNS.ORDER");
        for(int i=1;i<=ColList.size();i++) {
            clsSystemColumn ObjColumn=(clsSystemColumn)ColList.get(Integer.toString(i));
            
            //Add Column First
            DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj()); //0
            
            
            if(ObjColumn.getAttribute("NUMERIC").getBool()) {
                DataModelL.SetNumeric(TableL.getColumnCount()-1, true);
            }
            else {
                DataModelL.SetNumeric(TableL.getColumnCount()-1, false);
            }
            
            
            String Variable=(String)ObjColumn.getAttribute("VARIABLE").getObj();
            
            if(Variable.equals("QTY")||Variable.equals("RATE")||Variable.equals("GROSS_AMOUNT")||Variable.equals("NET_AMOUNT")) {
                DataModelL.SetColID(TableL.getColumnCount()-1, -99);
            }
            else {
                DataModelL.SetColID(TableL.getColumnCount()-1, 0);
            }
            
            
            DataModelL.SetVariable(TableL.getColumnCount()-1,Variable.trim());
            DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
            DataModelL.SetInclude(TableL.getColumnCount()-1,true);
            
            if(ObjColumn.getAttribute("READONLY").getBool()) {
                DataModelL.SetReadOnly(TableL.getColumnCount()-1);
            }
        }

        
        ColList=clsSystemColumn.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=35 AND HIDDEN=1 ORDER BY D_COM_SYSTEM_COLUMNS.ORDER");
        for(int i=1;i<=ColList.size();i++) {
            clsSystemColumn ObjColumn=(clsSystemColumn)ColList.get(Integer.toString(i));
            
            //Add Column First
            DataModelL.addColumn(""); //
            DataModelL.SetColID(TableL.getColumnCount()-1, 0);
            DataModelL.SetVariable(TableL.getColumnCount()-1,(String)ObjColumn.getAttribute("VARIABLE").getObj());
            DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
            DataModelL.SetInclude(TableL.getColumnCount()-1,true);
            
            DataModelL.SetReadOnly(TableL.getColumnCount()-1);
            
            //Hide the Column
            TableL.getColumnModel().getColumn(TableL.getColumnCount()-1).setPreferredWidth(0);
            TableL.getColumnModel().getColumn(TableL.getColumnCount()-1).setMaxWidth(0);
            TableL.getColumnModel().getColumn(TableL.getColumnCount()-1).setMinWidth(0);
            TableL.getColumnModel().getColumn(TableL.getColumnCount()-1).setWidth(0);
        }
    }
    
    private void FormatGrid() {
        HashMap ColList=new HashMap();
        
        DataModelL=new EITLTableModel();
        
        TableL.removeAll();
        TableL.setModel(DataModelL);
        
        //Set the table Readonly
        DataModelL.TableReadOnly(false);
        
        ColList=clsSystemColumn.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=35 AND HIDDEN=0 AND SHOW_LAST=0 ORDER BY D_COM_SYSTEM_COLUMNS.ORDER");
        for(int i=1;i<=ColList.size();i++) {
            clsSystemColumn ObjColumn=(clsSystemColumn)ColList.get(Integer.toString(i));
            
            //Add Column First
            DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj()); //0
            
            
            if(ObjColumn.getAttribute("NUMERIC").getBool()) {
                DataModelL.SetNumeric(TableL.getColumnCount()-1, true);
            }
            else {
                DataModelL.SetNumeric(TableL.getColumnCount()-1, false);
            }
            
            
            String Variable=(String)ObjColumn.getAttribute("VARIABLE").getObj();
            
            if(Variable.equals("QTY")||Variable.equals("RATE")||Variable.equals("GROSS_AMOUNT")||Variable.equals("NET_AMOUNT")) {
                DataModelL.SetColID(TableL.getColumnCount()-1, -99);
            }
            else {
                DataModelL.SetColID(TableL.getColumnCount()-1, 0);
            }
            
            
            DataModelL.SetVariable(TableL.getColumnCount()-1,Variable.trim());
            DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
            DataModelL.SetInclude(TableL.getColumnCount()-1,true);
            
            if(ObjColumn.getAttribute("READONLY").getBool()) {
                DataModelL.SetReadOnly(TableL.getColumnCount()-1);
            }
        }
        
        
        SetupColumns();
        
        //Now hide the column 1
        TableColumnModel ColModel=TableL.getColumnModel();
        TableL.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        //Add ComboBox
        JComboBox cmbOrderMode=new JComboBox();
        
        cmbOrderModeModel=new EITLComboModel();
        cmbOrderMode.removeAllItems();
        cmbOrderMode.setModel(cmbOrderModeModel);
        
        ComboData aData=new ComboData();
        aData.Code=1;
        aData.Text="FOB";
        cmbOrderModeModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=2;
        aData.Text="CFR";
        cmbOrderModeModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=3;
        aData.Text="CIF";
        cmbOrderModeModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=4;
        aData.Text="C&I";
        cmbOrderModeModel.addElement(aData);
        
        
        Renderer.setCustomComponent(4,"ComboBox");
        Renderer.setCustomComponent(4,cmbOrderModeModel);
        
        TableL.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(cmbOrderMode));
        
        //------- Install Table List Selection Listener ------//
       TableL.getColumnModel().getSelectionModel().addListSelectionListener(
       new ListSelectionListener()
       {
           public void valueChanged(ListSelectionEvent e)
           {
              int last=TableL.getSelectedColumn();
              String strVar=DataModelL.getVariable(last);
             
              ShowMessage("Ready");
              
              if(strVar.equals("ITEM_ID")) 
              {
                 ShowMessage("Enter item id. Press F1 to for the list of items"); 
              }
              
              if(strVar.equals("QTY"))
              {
                 ShowMessage("Enter Qty."); 
              }
              
              if(strVar.equals("RATE"))
              {
                ShowMessage("Enter Rate");  
              }
              
              if(strVar.equals("ORDER_MODE"))
              {
                ShowMessage("Select order mode. Press Alt+Down arrow to select from the list");  
              }
              
           }
       }
       );
        //===================================================//        

        
        //----- Install Table Model Event Listener -------//
        TableL.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    int col = e.getColumn();
                    if(!Updating) {
                        UpdateResults(col);
                    }
                    
                    //If Item ID has changed
                    if(col==DataModelL.getColFromVariable("ITEM_ID")) {
                        try {
                            DoNotEvaluate=true; //Stops Formula Evaluation
                            String lItemID=(String)DataModelL.getValueAt(TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_ID"));
                            String lItemName=clsItem.getItemName((int)EITLERPGLOBAL.gCompanyID, lItemID);
                            TableL.setValueAt(lItemName, TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_NAME"));
                            DoNotEvaluate=false;
                        }
                        catch(Exception ex){DoNotEvaluate=false;}
                    }
                }
            }
        });
    }
    
    
    
    private void GatherVariableValues_H() {
        String strVariable="";
        int varCol=0;
        double lnValue=0,lnSum=0;
        
        //Scan the table and gather values for variables
        colVariables_H.clear();
        
        myParser.initSymTab(); // clear the contents of the symbol table
        myParser.addStandardConstants();
        myParser.addComplex(); // among other things adds i to the symbol table
        
        for(int i=0;i<TableH.getRowCount();i++) {
            double lValue=0;
            if(DataModelH.getVariable(i)!=null) {
                if(!DataModelH.getVariable(i).equals(""))    //If Variable not blank
                {
                    colVariables_H.put(DataModelH.getVariable(i),(String)TableH.getValueAt(i, 1));
                    
                    //Add variable Value to Parser Table
                    if((TableH.getValueAt( i,1)!=null)&&(!TableH.getValueAt( i,1).toString().equals(""))) {
                        lValue=Double.parseDouble((String)TableH.getValueAt( i,1));
                    }
                    else {
                        lValue=0;
                    }
                    myParser.addVariable(DataModelH.getVariable(i),lValue);
                }
            }
        }
        
        
        //Gather Variables - sum of line columns
        for(int c=0;c<TableL.getColumnCount();c++) {
            strVariable=DataModelL.getVariable(c);
            strVariable=strVariable.trim();
            
            if((strVariable!=null) && (!strVariable.equals(""))) {
                varCol=DataModelL.getColFromVariable(strVariable);
                
                //Do the sum
                lnSum=0;
                
                try {
                    for(int r=0;r<TableL.getRowCount();r++) {
                        String theVal=(String)DataModelL.getValueAt(r,varCol);
                        
                        if(theVal==null) {
                        }
                        else {
                            lnValue=Double.parseDouble(TableL.getValueAt(r, varCol).toString());
                            lnSum=lnSum+lnValue;
                        }
                    }
                }
                catch(Exception e) {
                }
                //Sum Complete. Add to Parser Table
                myParser.addVariable("SUM_"+strVariable,lnSum);
            }
        }
    }
    
    private void SetupColumns_H() {
        HashMap List=new HashMap();
        Object[] rowData;
        
        List=clsColumn.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND MODULE_ID=35 AND HEADER_LINE='H' ORDER BY COL_ORDER");
        TableColumnModel ColModel=TableH.getColumnModel();
        
        TableH.removeAll();
        
        if(List.size()<=0) {
            HeaderPane.setVisible(false);
        }
        
        for(int i=1;i<=List.size();i++) {
            clsColumn ObjColumn=(clsColumn)List.get(Integer.toString(i));
            int lTaxID=(int)ObjColumn.getAttribute("TAX_ID").getVal();
            int lColID=(int)ObjColumn.getAttribute("SR_NO").getVal();
            
            clsTaxColumn ObjTax = (clsTaxColumn)clsTaxColumn.getObject((int)EITLERPGLOBAL.gCompanyID,lTaxID);
            if((boolean)ObjTax.getAttribute("USE_PERCENT").getBool()) {
                //Add Percentage Column
                //DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj()+"%");
                
                rowData=new Object[2];
                rowData[0]=(String)ObjColumn.getAttribute("CAPTION").getObj()+"%";
                rowData[1]="0.00";
                DataModelH.addRow(rowData);
                
                //Set Column ID
                DataModelH.SetColID(TableH.getRowCount()-1, lColID);
                
                //Set Variable for % Column. It will be P_ID
                DataModelH.SetVariable(TableH.getRowCount()-1,"P_"+Integer.toString(lColID));
                
                //Set the Operationg Add/Substract
                DataModelH.SetOperation(TableH.getRowCount()-1, "-");
                
                //Set stat - Include it in calculation or not
                DataModelH.SetInclude(TableH.getRowCount()-1, true);
                
                //Set Formula
                DataModelH.SetFormula(TableH.getRowCount()-1,(String)ObjTax.getAttribute("FORMULA").getObj());
                
                rowData=new Object[2];
                rowData[0]=(String)ObjColumn.getAttribute("CAPTION").getObj();
                rowData[1]="0.00";
                DataModelH.addRow(rowData);
                
                //Set Column ID
                DataModelH.SetColID(TableH.getRowCount()-1, lColID);
                
                //Set Variable
                if(ObjColumn.getAttribute("VARIABLE_NAME").getObj()!=null) {
                    DataModelH.SetVariable(TableH.getRowCount()-1,(String)ObjColumn.getAttribute("VARIABLE_NAME").getObj());
                }
                else {
                    DataModelH.SetVariable(TableH.getRowCount()-1,"  ");
                }
                
                
                //Set the Operationg Add/Substract
                DataModelH.SetOperation(TableH.getRowCount()-1,(String)ObjTax.getAttribute("OPERATION").getObj());
                
                //Set stat - Include it in calculation or not
                DataModelH.SetInclude(TableH.getRowCount()-1,(boolean)ObjTax.getAttribute("NO_CALCULATION").getBool());
                
                //Set Formula
                DataModelH.SetFormula(TableH.getRowCount()-1,(String)ObjTax.getAttribute("FORMULA").getObj());
                
            }
            else {
                //DataModelH.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj());
                //Set Column ID
                
                rowData=new Object[2];
                rowData[0]=(String)ObjColumn.getAttribute("CAPTION").getObj();
                rowData[1]="0.00";
                DataModelH.addRow(rowData);
                
                DataModelH.SetColID(TableH.getRowCount()-1, lColID);
                
                //Set Variable
                if(ObjColumn.getAttribute("VARIABLE_NAME").getObj()==null) {
                    DataModelH.SetVariable(TableH.getRowCount()-1,"  ");
                }
                else {
                    DataModelH.SetVariable(TableH.getRowCount()-1,(String)ObjColumn.getAttribute("VARIABLE_NAME").getObj());
                }
                
                //Set the Operationg Add/Substract
                DataModelH.SetOperation(TableH.getRowCount()-1,(String)ObjTax.getAttribute("OPERATION").getObj());
                
                //Set stat - Include it in calculation or not
                DataModelH.SetInclude(TableH.getRowCount()-1,(boolean)ObjTax.getAttribute("NO_CALCULATION").getBool());
                
                //Set Formula
                DataModelH.SetFormula(TableH.getRowCount()-1,(String)ObjTax.getAttribute("FORMULA").getObj());
            }
        }
    }
    
    private void FormatGrid_H() {
        DataModelH=new EITLTableModel();
        
        EITLTableCellRenderer Renderer=new EITLTableCellRenderer();
        
        TableH.removeAll();
        TableH.setModel(DataModelH);
        
        Renderer.setColor(0, 0, Color.LIGHT_GRAY);
        
        //Set the table Readonly
        DataModelH.TableReadOnly(false);
        DataModelH.SetReadOnly(0);
        DataModelH.SetNumeric(1, true);
        
        //Add Default Columns
        DataModelH.addColumn("Column");
        DataModelH.addColumn("Value");
        
        TableH.getColumnModel().getColumn(0).setCellRenderer(Renderer);
        SetupColumns_H();
        
        TableColumnModel ColModel=TableH.getColumnModel();
        TableH.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        //----- Install Table Model Event Listener -------//
        TableH.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    int col = e.getColumn();
                    int row=e.getLastRow();
                    if(!Updating_H)
                    {UpdateResults_H(row);}
                }
            }
        });
    }
    
    private void UpdateResults_H(int pCol) {
        try {
            int ColID=0,TaxID=0,UpdateCol=0;
            String strFormula="",strItemID="",strVariable="",srcVariable="",srcVar2="";
            double lnPercentValue=0,lnFinalResult=0,lnNetAmount=0;
            Object result;
            boolean updateIt=true;
            int QtyCol=0,RateCol=0,GAmountCol=0;
            
            Updating_H=true; //Stops Recursion
            
            srcVariable=DataModelH.getVariable(pCol); //Variable name of currently updated Column
            
            //If this column is percentage column. Variable name would be P_XXX
            //We shoule use actual variable name, it will be found on it's associated next column
            if(srcVariable.substring(0,2).equals("P_")) {
                srcVariable=DataModelH.getVariable(pCol+1);
            }
            
            GatherVariableValues_H();
            
            for(int i=0;i<TableH.getRowCount();i++) {
                strVariable=DataModelH.getVariable(i);
                
                ColID=DataModelH.getColID(i);
                
                TaxID=ObjColumn.getTaxID((int)EITLERPGLOBAL.gCompanyID,ColID);
                
                //Exclude Percentage Columns and System Columns
                if((!strVariable.substring(0,2).equals("P_"))&&(ColID!=0)) {
                    //If percentage is used
                    if(ObjTax.getUsePercentage((int)EITLERPGLOBAL.gCompanyID,TaxID)) {
                        
                        //Load the Formula for calculation
                        if((!EITLERPGLOBAL.UseCurrentFormula)&&(EditMode!=EITLERPGLOBAL.ADD)) {
                            strFormula=clsTaxColumn.getFormula((int)EITLERPGLOBAL.gCompanyID,TaxID);
                        }
                        else {
                            strFormula=DataModelH.getFormula(i);
                        }
                        
                        
                        //Now Read Associated Percentage Column
                        lnPercentValue=Double.parseDouble(DataModelH.getValueByVariableEx("P_"+Integer.toString(ColID),1));
                        
                        //Now Parse Main expression
                        myParser.parseExpression(strFormula);
                        result=myParser.getValueAsObject();
                        if(result!=null) {
                            //Now get the percentage of the main result
                            lnFinalResult=(Double.parseDouble(result.toString())*lnPercentValue)/100;
                            //Update the Column
                            srcVar2=DataModelH.getVariable(pCol+1);
                            
                            UpdateCol=DataModelH.getColFromVariable(strVariable);
                            
                            updateIt=false;
                            
                            if(UpdateCol!=pCol) {
                                if(UpdateCol==pCol+1) {
                                    updateIt=true;
                                }
                                else {
                                    if((strFormula.indexOf(srcVariable)!=-1)) { //If this column is dependent on updated column
                                        updateIt=true; //Then update it
                                    }
                                    else {
                                        if((strFormula.indexOf("QTY")!=-1)||(strFormula.indexOf("RATE")!=-1)||(strFormula.indexOf("GROSS_AMOUNT")!=-1)) {
                                            if(pCol==QtyCol||pCol==RateCol||pCol==GAmountCol)
                                            { updateIt=true;  }
                                        }
                                    }
                                }
                            }
                            if(updateIt) {
                                DataModelH.setValueByVariableEx(strVariable,Double.toString(lnFinalResult),1);
                            }
                            //Re Gather Fresh Variable Values
                            GatherVariableValues_H();
                        }
                    }
                    else //Percentage Not Used
                    {
                        
                        //Load the Formula for calculation
                        if((!EITLERPGLOBAL.UseCurrentFormula)&&(EditMode!=EITLERPGLOBAL.ADD)) {
                            strFormula=clsTaxColumn.getFormula((int)EITLERPGLOBAL.gCompanyID,TaxID);
                        }
                        else {
                            strFormula=DataModelH.getFormula(i);
                        }
                        
                        
                        //Now Parse Main expression
                        myParser.parseExpression(strFormula);
                        result=myParser.getValueAsObject();
                        if(result!=null) {
                            //Now get the percentage of the main result
                            lnFinalResult=Double.parseDouble(result.toString());
                            //Update the Column
                            UpdateCol=DataModelH.getColFromVariable(strVariable);
                            
                            updateIt=false;
                            
                            if(UpdateCol!=pCol) {
                                if(strFormula.indexOf(srcVariable)!=-1) {
                                    updateIt=true;
                                }
                                else {updateIt=true;
                                }
                            }
                            if(updateIt) {
                                DataModelH.setValueByVariableEx(strVariable,Double.toString(lnFinalResult),1);
                            }
                            //Re Gather Fresh Variable Values
                            GatherVariableValues_H();
                        }
                    }
                }
            }
            Updating_H=false;
            UpdateAmounts();
        }
        catch(Exception e) {
            Updating_H=false;
        }
    }
    
    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        String strCondition="";
        clsUser ObjUser=new clsUser();
        
        //----- Generate cmbType ------- //
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=35");
        
        if(EditMode==EITLERPGLOBAL.EDIT)
        {
         List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=35");   
        }
        for(int i=1;i<=List.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
        
        
        
        
        //--- Generate Type Combo ------//
        cmbPriorityModel=new EITLComboModel();
        cmbPriority.removeAllItems();
        cmbPriority.setModel(cmbPriorityModel);
        
        ComboData aData=new ComboData();
        aData.Code=1;
        aData.Text="Normal";
        cmbPriorityModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=2;
        aData.Text="Urgent";
        cmbPriorityModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=3;
        aData.Text="Very Urgent";
        cmbPriorityModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=4;
        aData.Text="Most Urgent";
        cmbPriorityModel.addElement(aData);
        //===============================//
    }
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, 35,(String)ObjCIF.getAttribute("CIF_NO").getObj());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
        
    }
    
    private void SetupApproval() {
        // --- Hierarchy Change Rights Check --------
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,325)) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, 35,(String)ObjCIF.getAttribute("CIF_NO").getObj());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,35,FromUserID,(String)ObjCIF.getAttribute("CIF_NO").getObj());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
    if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,321))
   {
      cmdNew.setEnabled(true);
   }
   else
   {
       cmdNew.setEnabled(false);
   }
     
   // --- Edit Rights --
   cmdEdit.setEnabled(true);
   /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,322))
   {
      cmdEdit.setEnabled(true);
   }
   else
   {
       cmdEdit.setEnabled(false);
   }*/
     
   // --- Delete Rights --
   if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,323))
   {
      cmdDelete.setEnabled(true);
   }
   else
   {
      cmdDelete.setEnabled(false);
   }
     
   // --- Print Rights --
   if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,324))
   {
      cmdPreview.setEnabled(true);
      cmdPrint.setEnabled(true);
   }
   else
   {
      cmdPreview.setEnabled(false);
      cmdPrint.setEnabled(false);
   }
    }
    
    private void UpdateSrNo() {
        int SrCol=DataModelL.getColFromVariable("SR_NO");
        
        for(int i=0;i<TableL.getRowCount();i++) {
            TableL.setValueAt(Integer.toString(i+1), i, SrCol);
        }
    }
    
    private void UpdateAmounts() {
        //== Final Pass - Update the Net Amount ==
        double lnNetAmount=0;
        double lnColValue=0;
        double lnGrossAmount=0,lnSumNetAmount=0;
        int NetAmountCol=0,GrossAmountCol=0;
        
        NetAmountCol=DataModelL.getColFromVariable("TOTAL_AMOUNT");
         
        for(int i=0;i<TableL.getRowCount();i++) {
            if(TableL.getValueAt(i,NetAmountCol)!=null) {
                lnSumNetAmount=lnSumNetAmount+Double.parseDouble((String)TableL.getValueAt(i,NetAmountCol));
            }
        }
         
        for(int c=0;c<TableH.getRowCount();c++) {
            if(DataModelH.getInclude(c)==false) {
                //Read column value
                if(TableH.getValueAt(c,1).toString().equals("")) {
                    lnColValue=0;
                }
                else {
                    lnColValue=Double.parseDouble((String)TableH.getValueAt(c,1));
                }
         
                if(DataModelH.getOperation(c).equals("+")) //Add
                {
                    lnGrossAmount=lnGrossAmount+lnColValue;
                }
                else //Substract
                {
                    lnGrossAmount=lnGrossAmount-lnColValue;
                }
            }
        }
        txtGrossAmount.setText(Double.toString(lnSumNetAmount));
        txtNetAmount.setText(Double.toString(lnSumNetAmount+lnGrossAmount));
        txtCIFCost.setText(Double.toString(lnSumNetAmount+lnGrossAmount));
        
        /*lnGrossAmount=0;
        GrossAmountCol=DataModelL.getColFromVariable("TOTAL_AMOUNT");
        
        for(int i=0;i<TableL.getRowCount();i++) {
            if(TableL.getValueAt(i,GrossAmountCol)!=null) {
                lnGrossAmount=lnGrossAmount+Double.parseDouble((String)TableL.getValueAt(i,GrossAmountCol));
            }
        }
        
        txtNetAmount.setText(Double.toString(lnGrossAmount));
        txtGrossAmount.setText(Double.toString(lnGrossAmount));
        txtCIFCost.setText(Double.toString(lnGrossAmount));*/
        
    }
    
    private void ClearFields() {
        txtDocDate.setText("");
        txtPONo.setText("");
        txtPODate.setText("");
        txtSubject.setText("");
        txtInvoiceNo.setText("");
        txtInvoiceDate.setText("");
        txtPurpose.setText("");
        txtRemarks.setText("");
        txtDecision.setText("");
        txtCIFCost.setText("0.00");
        FormatGrid();
        FormatGrid_H();
        FormatGridA();
        
        //txtGrossAmount.setText("0.00");
        //txtNetAmount.setText("0.00");
    }
    
    private void SetFields(boolean pStat) {
        txtDocDate.setEnabled(pStat);
        txtPONo.setEnabled(pStat);
        txtPODate.setEnabled(pStat);
        txtSubject.setEnabled(pStat);
        txtInvoiceNo.setEnabled(pStat);
        txtInvoiceDate.setEnabled(pStat);
        txtPurpose.setEnabled(pStat);
        cmbPriority.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        txtDecision.setEnabled(pStat);
        txtCIFCost.setEnabled(pStat);
        chkCancelled.setEnabled(pStat);
        
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        
        SetupApproval();
        
        DataModelH.TableReadOnly(!pStat);
        DataModelL.TableReadOnly(!pStat);
    }
    
    private boolean Validate() {
        int ValidEntryCount=0;
        
        if(txtPONo.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"You must select P.O. No.");
            return false;
        }
        else {
            if(!clsPOGen.IsValidPONo(EITLERPGLOBAL.gCompanyID, txtPONo.getText(), 5)) {
                JOptionPane.showMessageDialog(null,"P.O. No. you entered is not valid. Please verify");
                return false;
            }
        }
        
        //Validates Item Entries
        if(TableL.getRowCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please enter at least one item");
            return false;
        }
        
        //Search in Table
        int ItemCol=DataModelL.getColFromVariable("ITEM_ID");
        int ItemDescCol=DataModelL.getColFromVariable("ITEM_NAME");
        
        for(int i=0;i<TableL.getRowCount();i++) {
            String ItemID="",ItemDesc="";
            
            if(TableL.getValueAt(i, ItemCol)!=null && TableL.getValueAt(i, ItemDescCol)!=null) {
                ItemID=(String)TableL.getValueAt(i, ItemCol);
                ItemDesc=(String)TableL.getValueAt(i,ItemDescCol);
                
                if(!ItemID.trim().equals("")) {
                    //Validate Item code if it has been entered
                    if(clsItem.IsValidItemID(EITLERPGLOBAL.gCompanyID, ItemID)) {
                        ValidEntryCount++;
                    }
                    else {
                        if(!ItemDesc.trim().equals("")) {
                            ValidEntryCount++;
                        }
                    }
                }
                else {
                    //If Item id not entered then description must be entered
                    if(!ItemDesc.trim().equals("")) {
                        ValidEntryCount++;
                    }
                }
            }
        }
        
        if(ValidEntryCount==0) {
            JOptionPane.showMessageDialog(null,"Item entry is not valid. Please verify");
            return false;
        }
        
        //Now Header level validations
        if(txtDocDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter P.O. Date");
            return false;
        }
        
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the hierarchy.");
            return false;
        }
        
        if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null,"Please select the Approval Action");
            return false;
        }
        
        if(!EITLERPGLOBAL.isDate(txtDocDate.getText()))
        {
           JOptionPane.showMessageDialog(null,"Invalid CIF Date");
           return false;
        }
        
        if(!EITLERPGLOBAL.isDate(txtInvoiceDate.getText()))
        {
           JOptionPane.showMessageDialog(null,"Invalid Invoice date");
           return false;
        }
        
        return true;
    }
    
    
    private void SetNumberFormats() {
        DecimalFormat decimalFormat=new DecimalFormat("0.00");
        NumberFormatter ObjFormater=new NumberFormatter(decimalFormat);
        ObjFormater.setAllowsInvalid(false);
        txtCIFCost.setFormatterFactory(new DefaultFormatterFactory(ObjFormater));
    }
    
    
    private void Add() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen)
        {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        
        //Now Generate new document no.
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=35;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SetupApproval();
            //Display newly generated document no.
            //txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 35, SelPrefix, false));
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
            txtDocDate.requestFocus();
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
        
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen)
        {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=(String)ObjCIF.getAttribute("CIF_NO").getObj();
        if(ObjCIF.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gUserID)) {
            EITLERPGLOBAL.ChangeCursorToWait(this);
            EditMode=EITLERPGLOBAL.EDIT;
            
            GenerateCombos();
            
            
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//
            
            if(ApprovalFlow.IsCreator(35,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,322)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            
            
            DisableToolbar();
            txtDocDate.requestFocus();
            EITLERPGLOBAL.ChangeCursorToDefault(this);
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen)
        {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=(String)ObjCIF.getAttribute("CIF_NO").getObj();
        
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            if(ObjCIF.CanDelete(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gUserID)) {
                if(ObjCIF.Delete(EITLERPGLOBAL.gUserID)) {
                    MoveLast();
                }
                else {
                    JOptionPane.showMessageDialog(null,"Error occured while deleting. Error is "+ObjCIF.LastError);
                }
            }
            else {
                JOptionPane.showMessageDialog(null,"You cannot delete this record. It is either approved/rejected record or waiting approval for other user or is referred in other documents");
            }
        }
    }
    
    private void Save() {
        //Form level validations
        if(Validate()==false) {
            return; //Validation failed
        }
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjCIF.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjCIF.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjCIF.Update()) {
                //Nothing to do
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjCIF.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        ShowMessage("Ready");
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    public void FindEx(String pPONo) {
        ObjCIF.Filter(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND PO_NO='"+pPONo+"'",EITLERPGLOBAL.gCompanyID);
        MoveFirst();
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Purchase.frmCIFFind",true);
        frmCIFFind ObjReturn= (frmCIFFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            //Add PO Type
            if(!ObjCIF.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveFirst();
        }
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjCIF.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjCIF.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjCIF.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjCIF.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    //Recurses through the hierarchy of classes
    //until it finds Frame
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }

  public void FindEx(int pCompanyID,String pDocNo)
  {
      
      ObjCIF.Filter(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND CIF_NO='"+pDocNo+"'",pCompanyID);
      ObjCIF.MoveFirst();
      DisplayData();
  }

private void ShowMessage(String pMessage)    
{
  lblStatus.setText(pMessage);  
}

private void FormatGridA()
{
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
                
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
   
}


private void UpdateResults(int pCol) {
        if(!DoNotEvaluate) {
            try {
                int ColID=0,TaxID=0,UpdateCol=0;
                String strFormula="",strItemID="",strVariable="",srcVariable="",srcVar2="";
                double lnPercentValue=0,lnFinalResult=0,lnNetAmount=0;
                Object result;
                boolean updateIt=true;
                int QtyCol=0,RateCol=0,GAmountCol=0;
                
                Updating=true; //Stops Recursion
                
                srcVariable=DataModelL.getVariable(pCol); //Variable name of currently updated Column
                
                //If this column is percentage column. Variable name would be P_XXX
                //We shoule use actual variable name, it will be found on it's associated next column
                if(srcVariable.substring(0,2).equals("P_")) {
                    srcVariable=DataModelL.getVariable(pCol+1);
                }
                
                QtyCol=DataModelL.getColFromVariable("QTY"); //Index of Qty Column
                RateCol=DataModelL.getColFromVariable("RATE"); //Index of Rate Column
                GAmountCol=DataModelL.getColFromVariable("GROSS_AMOUNT"); //Index of Gross Amount Column
                
                //======= Read the Item ID - To be used when accessing item specific formula ===//
                String cellValue=(String)DataModelL.getValueAt(TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_ID"));
                if(cellValue==null) {
                    strItemID="";
                }
                else {
                    strItemID=(String)DataModelL.getValueAt(TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_ID"));
                }
                //================================================================================
                
                GatherVariableValues();
                
                for(int i=0;i<TableL.getColumnCount();i++) {
                    strVariable=DataModelL.getVariable(i);
                    
                    ColID=DataModelL.getColID(i);
                    
                    TaxID=ObjColumn.getTaxID((int)EITLERPGLOBAL.gCompanyID,ColID);
                    
                    //Exclude Percentage Columns and System Columns
                    if((!strVariable.substring(0,2).equals("P_"))&&(ColID!=0)&&(ColID!=-99)) {
                        //If percentage is used
                        if(ObjTax.getUsePercentage((int)EITLERPGLOBAL.gCompanyID,TaxID)) {
                            
                            //Load the Formula for calculation
                            if((!EITLERPGLOBAL.UseCurrentFormula)&&(EditMode!=EITLERPGLOBAL.ADD)) {
                                strFormula=clsTaxColumn.getFormula((int)EITLERPGLOBAL.gCompanyID,TaxID,strItemID);
                            }
                            else {
                                strFormula=DataModelL.getFormula(i);
                            }
                            
                            //Now Read Associated Percentage Column
                            lnPercentValue=Double.parseDouble(DataModelL.getValueByVariable("P_"+Integer.toString(ColID),TableL.getSelectedRow()));
                            
                            //Now Parse Main expression
                            myParser.parseExpression(strFormula);
                            result=myParser.getValueAsObject();
                            if(result!=null) {
                                //Now get the percentage of the main result
                                lnFinalResult=(Double.parseDouble(result.toString())*lnPercentValue)/100;
                                //Update the Column
                                srcVar2=DataModelL.getVariable(pCol+1);
                                
                                UpdateCol=DataModelL.getColFromVariable(strVariable);
                                
                                updateIt=false;
                                
                                if(UpdateCol!=pCol) {
                                    if(UpdateCol==pCol+1) {
                                        updateIt=true;
                                    }
                                    else {
                                        if((strFormula.indexOf(srcVariable)!=-1)) { //If this column is dependent on updated column
                                            updateIt=true; //Then update it
                                        }
                                        else {
                                            
                                            //Check whether the formula is dependent on any system Columns
                                            boolean Dependent=false;
                                            int dCol=0;
                                            
                                            for(int d=0;d<=TableL.getColumnCount()-1;d++) {
                                                if(DataModelL.getColID(d)==0) //It's System Column
                                                {
                                                    String dVariable=DataModelL.getVariable(d);
                                                    if(strFormula.indexOf(dVariable)!=-1) {
                                                        if(pCol==d) {
                                                            Dependent=true;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                        }
                                    }
                                }
                                
                                if(updateIt) {
                                    DataModelL.setValueByVariable(strVariable,Double.toString(EITLERPGLOBAL.round(lnFinalResult,2)),TableL.getSelectedRow());
                                }
                                //Re Gather Fresh Variable Values
                                GatherVariableValues();
                            }
                        }
                        else //Percentage Not Used
                        {
                            //Load the Formula for calculation
                            if((!EITLERPGLOBAL.UseCurrentFormula)&&(EditMode!=EITLERPGLOBAL.ADD)) {
                                strFormula=clsTaxColumn.getFormula((int)EITLERPGLOBAL.gCompanyID,TaxID,strItemID);
                            }
                            else {
                                strFormula=DataModelL.getFormula(i);
                            }
                            
                            //Now Parse Main expression
                            myParser.parseExpression(strFormula);
                            result=myParser.getValueAsObject();
                            if(result!=null) {
                                //Now get the percentage of the main result
                                lnFinalResult=Double.parseDouble(result.toString());
                                //Update the Column
                                UpdateCol=DataModelL.getColFromVariable(strVariable);
                                
                                updateIt=false;
                                
                                if(UpdateCol!=pCol) {
                                    if(strFormula.indexOf(srcVariable)!=-1) {
                                        updateIt=true;
                                    }
                                    else {
                                        
                                        //Check whether the formula is dependent on any system Columns
                                        boolean Dependent=false;
                                        int dCol=0;
                                        
                                        for(int d=0;d<=TableL.getColumnCount()-1;d++) {
                                            if(DataModelL.getColID(d)==0) //It's System Column
                                            {
                                                String dVariable=DataModelL.getVariable(d);
                                                
                                                if(strFormula.indexOf(dVariable)!=-1) {
                                                    if(pCol==d) {
                                                        Dependent=true;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        
                                        if(Dependent) {
                                            updateIt=true;
                                        }
                                        
                                    }
                                }
                                if(updateIt) {
                                    DataModelL.setValueByVariable(strVariable,Double.toString(EITLERPGLOBAL.round(lnFinalResult,2)),TableL.getSelectedRow());
                                }
                                //Re Gather Fresh Variable Values
                                GatherVariableValues();
                            }
                        }
                    }
                }
                
                
                //== Final Pass - Update the Net Amount ==
                lnNetAmount=0;
                double lnColValue=0;
                double lnGrossAmount=0;
                
                //lnGrossAmount=Double.parseDouble((String)DataModelL.getValueAt(TableL.getSelectedRow(), GAmountCol));
                
                for(int c=0;c<TableL.getColumnCount();c++) {
                    
                    //To be included in Calculation or not
                    if(DataModelL.getInclude(c)==false && DataModelL.getColID(c)!=0 && DataModelL.getColFromID(c)!=99 ) {
                        //Read column value
                        if(TableL.getValueAt(TableL.getSelectedRow(), c).toString().equals("")) {
                            lnColValue=0;
                        }
                        else {
                            lnColValue=Double.parseDouble((String)TableL.getValueAt(TableL.getSelectedRow(), c));
                        }
                        
                        if(DataModelL.getOperation(c).equals("+")) //Add
                        {
                            lnGrossAmount=lnGrossAmount+lnColValue;
                        }
                        else //Substract
                        {
                            lnGrossAmount=lnGrossAmount-lnColValue;
                        }
                    }
                }
                
                //Now update the Net Amount
                DataModelL.setValueByVariable("TOTAL_AMOUNT",Double.toString(EITLERPGLOBAL.round(lnGrossAmount,2)),TableL.getSelectedRow());
                //DataModelL.setValueByVariable("TOTAL_AMOUNT",Double.toString(EITLERPGLOBAL.round(lnGrossAmount,2)),TableL.getSelectedRow());
                
                Updating=false;
                UpdateAmounts();
            }
            catch(Exception e) {
                Updating=false;
            }
        }// Do not Evaluate
    }









    private void GatherVariableValues() {
        //Scan the table and gather values for variables
        colVariables.clear();
        
        myParser.initSymTab(); // clear the contents of the symbol table
        myParser.addStandardConstants();
        myParser.addComplex(); // among other things adds i to the symbol table
        
        for(int i=0;i<TableL.getColumnCount();i++) {
            double lValue=0;
            if(DataModelL.getVariable(i)!=null) {
                //if((!DataModelL.getVariable(i).trim().equals(""))&&(DataModelL.getColID(i)!=0))    //If Variable not blank
                if((!DataModelL.getVariable(i).trim().equals(""))) {
                    //colVariables.put(DataModelL.getVariable(i),(String)DataModelL.getValueAt(TableL.getSelectedRow(), i));
                    
                    //Add variable Value to Parser Table
                    if((TableL.getValueAt(TableL.getSelectedRow(), i)!=null)&&(!TableL.getValueAt(TableL.getSelectedRow(), i).toString().equals(""))) {
                        if(TableL.getValueAt(TableL.getSelectedRow(), i) instanceof Boolean) {
                            if(DataModelL.getBoolValueByVariable(DataModelL.getVariable(i),TableL.getSelectedRow())) {
                                lValue=1;
                            }
                            else {
                                lValue=0;
                            }
                        }
                        else {
                            if(EITLERPGLOBAL.IsNumber((String)TableL.getValueAt(TableL.getSelectedRow(), i))) {
                                lValue=Double.parseDouble((String)TableL.getValueAt(TableL.getSelectedRow(), i));
                            }
                        }
                    }
                    else {
                        lValue=0;
                    }
                    myParser.addVariable(DataModelL.getVariable(i),lValue);
                }
            }
        }
        
        myParser.addFunction("IIF", new IIF(myParser));
    }

    
   private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, SelHierarchy, "H", FieldName)) {
                    
                    Tab1.getComponent(i).setEnabled(true);
                }
                
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        
        
        //=============== Setting Table Fields ==================//
        DataModelL.ClearAllReadOnly();
        for(int i=0;i<TableL.getColumnCount();i++) {
            FieldName=DataModelL.getVariable(i);
            
            if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, SelHierarchy, "L", FieldName)) {
                //Do Nothing
            }
            else {
                DataModelL.SetReadOnly(i);
            }
        }
        //=======================================================//
        
        
    }


    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
   
}



