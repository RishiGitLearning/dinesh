/* frmFeltSalesInfo.java 
 * 
 * 
 * Created on July 13, 2005, 10:47 AM
 */
package EITLERP.Purchase.Reports.New;

import EITLERP.*;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.sql.*;
import javax.swing.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import javax.swing.table.JTableHeader;



/**
 *
 * @author ashutosh/RISHI
 */
public class frmPurAdvabceSerchReport extends javax.swing.JApplet {
    public boolean forceToChange=false;
    public boolean cancelled=false;
    private EITLTableModel[] DataModel;
    private EITLTableModel DataModelB2B = new EITLTableModel();  
    private EITLTableModel DataModelB2BMIR = new EITLTableModel();  
    private EITLTableModel DataModelPendingIndent = new EITLTableModel();  
    private EITLTableModel DataModelVendorMaster = new EITLTableModel();  
    private EITLTableModel DataModelMaterialMaster = new EITLTableModel();  
    private EITLTableModel DataModelReceiptChecklist = new EITLTableModel();  
    private EITLTableModel DataModelPendingPO = new EITLTableModel();  
   //private EITLTableModel DataModelB2BHSN = new EITLTableModel();  
    
    String strProductCode = "";
    private JDialog aDialog;
    DateFormat df =  new SimpleDateFormat("dd-MMM-yy");
    HashMap hmPieceList=new HashMap();
    String ORDER_BY="";
    //private clsExcelExporter exp = new clsExcelExporter();
    //private EITLERP.Production.FeltCreditNote.clsExcelExporter exp = new EITLERP.Production.FeltCreditNote.clsExcelExporter();
    //private clsExcelExporterB2BHSN expHSN = new clsExcelExporterB2BHSN();
    private clsExcel_Exporter exp = new clsExcel_Exporter();
    
    public void init() {
        initComponents();
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        //setSize(780,660);
        jLabel1.setForeground(Color.WHITE);
        //txtToDate.setVisible(false);
        //jLabel5.setVisible(false);
        
        
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStatus = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        file1 = new javax.swing.JFileChooser();
        jLabel2 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        CLR_BTN = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        TabList = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        btnShowPendingIndent = new javax.swing.JButton();
        Export_B2BMIR = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        tableMIRToPayment = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btnShowPendingIndent1 = new javax.swing.JButton();
        Export_B2BMIR1 = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        tableReceiptChecklist = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btnShowPendingIndent2 = new javax.swing.JButton();
        Export_B2BMIR2 = new javax.swing.JButton();
        jScrollPane13 = new javax.swing.JScrollPane();
        tableVendorMaster = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        btnShowPendingIndent3 = new javax.swing.JButton();
        Export_B2BMIR3 = new javax.swing.JButton();
        jScrollPane14 = new javax.swing.JScrollPane();
        tableMaterialMaster = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        btnShowPendingIndent4 = new javax.swing.JButton();
        Export_B2BMIR4 = new javax.swing.JButton();
        jScrollPane15 = new javax.swing.JScrollPane();
        tablePendingPO = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        btnShowPendingIndent5 = new javax.swing.JButton();
        Export_B2BMIR5 = new javax.swing.JButton();
        jScrollPane16 = new javax.swing.JScrollPane();
        tablePendingIndent1 = new javax.swing.JTable();

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel2.setBackground(new java.awt.Color(0, 102, 153));
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 70, 930, 10);

        txtFromDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(170, 30, 110, 30);

        txtToDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        txtToDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToDateFocusGained(evt);
            }
        });
        getContentPane().add(txtToDate);
        txtToDate.setBounds(380, 30, 100, 30);

        CLR_BTN.setText("Clear");
        CLR_BTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CLR_BTN.setMargin(new java.awt.Insets(2, 7, 2, 7));
        CLR_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLR_BTNActionPerformed(evt);
            }
        });
        getContentPane().add(CLR_BTN);
        CLR_BTN.setBounds(540, 30, 80, 30);

        jLabel3.setText("Period : ");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 30, 60, 20);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("From Date :");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(60, 30, 100, 20);

        jLabel5.setText("To Date :");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(310, 30, 70, 20);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel1.setText("PURCHASE ADVANCE SEARCH");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 2, 940, 25);

        TabList.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabListStateChanged(evt);
            }
        });

        jPanel1.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jPanel1.setLayout(null);

        btnShowPendingIndent.setText("Show List");
        btnShowPendingIndent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowPendingIndentActionPerformed(evt);
            }
        });
        jPanel1.add(btnShowPendingIndent);
        btnShowPendingIndent.setBounds(10, 10, 130, 30);

        Export_B2BMIR.setText("EXPORT TO EXCEL");
        Export_B2BMIR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_B2BMIRActionPerformed(evt);
            }
        });
        jPanel1.add(Export_B2BMIR);
        Export_B2BMIR.setBounds(540, 10, 170, 25);

        tableMIRToPayment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableMIRToPayment.setSelectionBackground(new java.awt.Color(208, 220, 234));
        tableMIRToPayment.setSelectionForeground(new java.awt.Color(231, 16, 16));
        tableMIRToPayment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableMIRToPaymentKeyPressed(evt);
            }
        });
        jScrollPane11.setViewportView(tableMIRToPayment);

        jPanel1.add(jScrollPane11);
        jScrollPane11.setBounds(10, 50, 910, 440);

        TabList.addTab("PENDING INDENT", jPanel1);

        jPanel3.setLayout(null);

        btnShowPendingIndent1.setText("Show List");
        btnShowPendingIndent1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowPendingIndent1ActionPerformed(evt);
            }
        });
        jPanel3.add(btnShowPendingIndent1);
        btnShowPendingIndent1.setBounds(10, 10, 130, 30);

        Export_B2BMIR1.setText("EXPORT TO EXCEL");
        Export_B2BMIR1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_B2BMIR1ActionPerformed(evt);
            }
        });
        jPanel3.add(Export_B2BMIR1);
        Export_B2BMIR1.setBounds(540, 10, 170, 25);

        tableReceiptChecklist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableReceiptChecklist.setSelectionBackground(new java.awt.Color(208, 220, 234));
        tableReceiptChecklist.setSelectionForeground(new java.awt.Color(231, 16, 16));
        tableReceiptChecklist.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableReceiptChecklistKeyPressed(evt);
            }
        });
        jScrollPane12.setViewportView(tableReceiptChecklist);

        jPanel3.add(jScrollPane12);
        jScrollPane12.setBounds(10, 50, 910, 440);

        TabList.addTab("RECEIPT CHECKLIST", jPanel3);

        jPanel2.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jPanel2.setLayout(null);

        btnShowPendingIndent2.setText("Show List");
        btnShowPendingIndent2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowPendingIndent2ActionPerformed(evt);
            }
        });
        jPanel2.add(btnShowPendingIndent2);
        btnShowPendingIndent2.setBounds(10, 10, 130, 30);

        Export_B2BMIR2.setText("EXPORT TO EXCEL");
        Export_B2BMIR2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_B2BMIR2ActionPerformed(evt);
            }
        });
        jPanel2.add(Export_B2BMIR2);
        Export_B2BMIR2.setBounds(540, 10, 170, 25);

        tableVendorMaster.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableVendorMaster.setSelectionBackground(new java.awt.Color(208, 220, 234));
        tableVendorMaster.setSelectionForeground(new java.awt.Color(231, 16, 16));
        tableVendorMaster.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableVendorMasterKeyPressed(evt);
            }
        });
        jScrollPane13.setViewportView(tableVendorMaster);

        jPanel2.add(jScrollPane13);
        jScrollPane13.setBounds(10, 50, 910, 440);

        TabList.addTab("VENDOR MASTER LIST", jPanel2);

        jPanel4.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jPanel4.setLayout(null);

        btnShowPendingIndent3.setText("Show List");
        btnShowPendingIndent3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowPendingIndent3ActionPerformed(evt);
            }
        });
        jPanel4.add(btnShowPendingIndent3);
        btnShowPendingIndent3.setBounds(10, 10, 130, 30);

        Export_B2BMIR3.setText("EXPORT TO EXCEL");
        Export_B2BMIR3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_B2BMIR3ActionPerformed(evt);
            }
        });
        jPanel4.add(Export_B2BMIR3);
        Export_B2BMIR3.setBounds(540, 10, 170, 25);

        tableMaterialMaster.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableMaterialMaster.setSelectionBackground(new java.awt.Color(208, 220, 234));
        tableMaterialMaster.setSelectionForeground(new java.awt.Color(231, 16, 16));
        tableMaterialMaster.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableMaterialMasterKeyPressed(evt);
            }
        });
        jScrollPane14.setViewportView(tableMaterialMaster);

        jPanel4.add(jScrollPane14);
        jScrollPane14.setBounds(10, 50, 910, 440);

        TabList.addTab("MATERIAL MASTER LIST", jPanel4);

        jPanel5.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jPanel5.setLayout(null);

        btnShowPendingIndent4.setText("Show List");
        btnShowPendingIndent4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowPendingIndent4ActionPerformed(evt);
            }
        });
        jPanel5.add(btnShowPendingIndent4);
        btnShowPendingIndent4.setBounds(10, 10, 130, 30);

        Export_B2BMIR4.setText("EXPORT TO EXCEL");
        Export_B2BMIR4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_B2BMIR4ActionPerformed(evt);
            }
        });
        jPanel5.add(Export_B2BMIR4);
        Export_B2BMIR4.setBounds(540, 10, 170, 25);

        tablePendingPO.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablePendingPO.setSelectionBackground(new java.awt.Color(208, 220, 234));
        tablePendingPO.setSelectionForeground(new java.awt.Color(231, 16, 16));
        tablePendingPO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tablePendingPOKeyPressed(evt);
            }
        });
        jScrollPane15.setViewportView(tablePendingPO);

        jPanel5.add(jScrollPane15);
        jScrollPane15.setBounds(10, 50, 910, 440);

        TabList.addTab("PENDING PO", jPanel5);

        jPanel6.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jPanel6.setLayout(null);

        btnShowPendingIndent5.setText("Show List");
        btnShowPendingIndent5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowPendingIndent5ActionPerformed(evt);
            }
        });
        jPanel6.add(btnShowPendingIndent5);
        btnShowPendingIndent5.setBounds(10, 10, 130, 30);

        Export_B2BMIR5.setText("EXPORT TO EXCEL");
        Export_B2BMIR5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_B2BMIR5ActionPerformed(evt);
            }
        });
        jPanel6.add(Export_B2BMIR5);
        Export_B2BMIR5.setBounds(540, 10, 170, 25);

        tablePendingIndent1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablePendingIndent1.setSelectionBackground(new java.awt.Color(208, 220, 234));
        tablePendingIndent1.setSelectionForeground(new java.awt.Color(231, 16, 16));
        tablePendingIndent1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tablePendingIndent1KeyPressed(evt);
            }
        });
        jScrollPane16.setViewportView(tablePendingIndent1);

        jPanel6.add(jScrollPane16);
        jScrollPane16.setBounds(10, 50, 910, 440);

        TabList.addTab("PENDING INDENT FOR PO CREATION", jPanel6);

        getContentPane().add(TabList);
        TabList.setBounds(10, 90, 920, 580);
    }// </editor-fold>//GEN-END:initComponents

    private void txtToDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtToDateFocusGained
                                 
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        
    }//GEN-LAST:event_formMouseClicked

    private void CLR_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLR_BTNActionPerformed
        txtFromDate.setText("");
        txtToDate.setText("");        
        
        
    }//GEN-LAST:event_CLR_BTNActionPerformed

    private void tableMIRToPaymentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableMIRToPaymentKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tableMIRToPaymentKeyPressed

    private void Export_B2BMIRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_B2BMIRActionPerformed
        // TODO add your handling code here:
        /*try {
            exp.fillData(Table_b2bMIR, new File("/root/Desktop/MIR_B2B.xls"));
            exp.fillData(Table_b2bMIR, new File("D://MIR_B2B.xls"));
            File file = new File("/root/Desktop/MIR_B2B.xls");
            File file1 = new File("D://MIR_B2B.xls");
            if (!Desktop.isDesktopSupported()) {
                JOptionPane.showMessageDialog(null, "Desktop Not Supported");
                return;
            } else {
                Desktop desk = Desktop.getDesktop();
                if (file.exists()) {
                    desk.open(file);
                } else if (file1.exists()) {
                    desk.open(file1);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }*/
        File file = null;
        file1.setVisible(true);
        try {
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);
            
            exp.fillData(tableMIRToPayment, new File(file1.getSelectedFile().toString() + ".xls"), "GSTR2");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file1.getSelectedFile().toString() + " successfully... ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_B2BMIRActionPerformed

    private void btnShowPendingIndentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowPendingIndentActionPerformed
        
        /*if ( ! Validate()) {
            return;
        }*/
        FormatGridPendingIndent();
        GeneratePendingIndentData(ORDER_BY);
    }//GEN-LAST:event_btnShowPendingIndentActionPerformed

    private void btnShowPendingIndent1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowPendingIndent1ActionPerformed
/*if ( ! Validate()) {
            return;
        }*/
        FormatGridReceiptChecklist();
        GenerateReceiptChecklistData(ORDER_BY);        // TODO add your handling code here:
    }//GEN-LAST:event_btnShowPendingIndent1ActionPerformed

    private void Export_B2BMIR1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_B2BMIR1ActionPerformed
        File file = null;
        file1.setVisible(true);
        try {
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);
            
            exp.fillData(tableReceiptChecklist, new File(file1.getSelectedFile().toString() + ".xls"), "GSTR2");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file1.getSelectedFile().toString() + " successfully... ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_B2BMIR1ActionPerformed

    private void tableReceiptChecklistKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableReceiptChecklistKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tableReceiptChecklistKeyPressed

    private void btnShowPendingIndent2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowPendingIndent2ActionPerformed
 /*if ( ! Validate()) {
            return;
        }*/
        FormatGridVendorMasterList();
        GenerateVendorMasterList(ORDER_BY);
    }//GEN-LAST:event_btnShowPendingIndent2ActionPerformed

    private void Export_B2BMIR2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_B2BMIR2ActionPerformed
File file = null;
        file1.setVisible(true);
        try {
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);
            
            exp.fillData(tableVendorMaster, new File(file1.getSelectedFile().toString() + ".xls"), "GSTR2");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file1.getSelectedFile().toString() + " successfully... ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_Export_B2BMIR2ActionPerformed

    private void tableVendorMasterKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableVendorMasterKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tableVendorMasterKeyPressed

    private void btnShowPendingIndent3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowPendingIndent3ActionPerformed
/*if ( ! Validate()) {
            return;
        }*/
        FormatGridMaterialMasterList();
        GenerateMaterialMaster(ORDER_BY);        // TODO add your handling code here:
    }//GEN-LAST:event_btnShowPendingIndent3ActionPerformed

    private void Export_B2BMIR3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_B2BMIR3ActionPerformed
File file = null;
        file1.setVisible(true);
        try {
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);
            
            exp.fillData(tableMaterialMaster, new File(file1.getSelectedFile().toString() + ".xls"), "GSTR2");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file1.getSelectedFile().toString() + " successfully... ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_B2BMIR3ActionPerformed

    private void tableMaterialMasterKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableMaterialMasterKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tableMaterialMasterKeyPressed

    private void btnShowPendingIndent4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowPendingIndent4ActionPerformed
        /*if ( ! Validate()) {
            return;
        }*/
        FormatGridPendingPO();
        GeneratePendingPOData(ORDER_BY);
    }//GEN-LAST:event_btnShowPendingIndent4ActionPerformed

    private void Export_B2BMIR4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_B2BMIR4ActionPerformed
File file = null;
        file1.setVisible(true);
        try {
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);
            
            exp.fillData(tablePendingPO, new File(file1.getSelectedFile().toString() + ".xls"), "GSTR2");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file1.getSelectedFile().toString() + " successfully... ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_B2BMIR4ActionPerformed

    private void tablePendingPOKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablePendingPOKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tablePendingPOKeyPressed

    private void TabListStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabListStateChanged
        if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("PENDING INDENT")) {
            
            txtFromDate.setEnabled(false);
            txtToDate.setEnabled(false);           
            

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("RECEIPT CHECKLIST")) {
            txtFromDate.setEnabled(true);
            txtToDate.setEnabled(true);           
        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("VENDOR MASTER LIST")) {
            txtFromDate.setEnabled(false);
            txtToDate.setEnabled(false);           

        }else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("MATERIAL MASTER LIST")) {
            txtFromDate.setEnabled(false);
            txtToDate.setEnabled(false);           

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("PENDING PO")) {
            txtFromDate.setEnabled(true);
            txtToDate.setEnabled(true);           

        } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("PENDING INDENT FOR PO CREATION")) {
            txtFromDate.setEnabled(false);
            txtToDate.setEnabled(false);           

        }
        
    }//GEN-LAST:event_TabListStateChanged

    private void btnShowPendingIndent5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowPendingIndent5ActionPerformed
      FormatGridPendingIndentPOCreation();
        String sql = "UPDATE D_INV_INDENT_DETAIL ID,\n"
                + "(SELECT INDENT_NO, ITEM_CODE,GROUP_CONCAT(DISTINCT M ORDER BY SRNO) AS N FROM \n"
                + "(SELECT INDENT_NO, ITEM_CODE,CONCAT('Inquiries : ',GROUP_CONCAT(DISTINCT D.INQUIRY_NO),' ') AS M ,1 AS SRNO FROM D_PUR_INQUIRY_DETAIL D,D_PUR_INQUIRY_HEADER H \n"
                + "WHERE INDENT_NO !='' AND H.INQUIRY_NO= D.INQUIRY_NO AND INQUIRY_DATE >= '2020-01-01' AND H.CANCELLED =0 \n"
                + "GROUP BY INDENT_NO,ITEM_CODE \n"
                + "UNION ALL \n"
                + "SELECT INDENT_NO,ITEM_ID, CONCAT('PO : ',GROUP_CONCAT(DISTINCT D.PO_NO),' ') AS M ,3 AS SRNO FROM D_PUR_PO_DETAIL D, D_PUR_PO_HEADER H \n"
                + "WHERE INDENT_NO !=''  AND PO_DATE >= '2020-01-01' AND H.CANCELLED =0 AND H.PO_NO= D.PO_NO\n"
                + "GROUP BY INDENT_NO,ITEM_ID \n"
                + "UNION ALL \n"
                + "SELECT  INDENT_NO,ITEM_ID, CONCAT('RIA : ',GROUP_CONCAT(DISTINCT A.APPROVAL_NO ORDER BY A.APPROVAL_NO),' ') AS M ,2 AS SRNO FROM D_PUR_RATE_APPROVAL_DETAIL A,D_PUR_RATE_APPROVAL_HEADER H \n"
                + "WHERE H.APPROVAL_NO=A.APPROVAL_NO AND H.CANCELLED=0  AND APPROVAL_DATE >='2020-04-01'  AND  INDENT_NO !='' \n"
                + "GROUP BY INDENT_NO,ITEM_ID \n"
                + ") AS G \n"
                + "GROUP BY INDENT_NO,ITEM_CODE \n"
                + ") AS EXT \n"
                + "SET REF_DOC = N \n"
                + "WHERE ID.INDENT_NO  = EXT.INDENT_NO \n"
                + "AND ID.ITEM_CODE = EXT.ITEM_CODE \n"
                + "AND REF_DOC !=N";
        data.Execute(sql);
        GeneratePendingIndentDataPOCreation(ORDER_BY);
    }//GEN-LAST:event_btnShowPendingIndent5ActionPerformed

    private void Export_B2BMIR5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_B2BMIR5ActionPerformed
File file = null;
        file1.setVisible(true);
        try {
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);
            
            exp.fillData(tablePendingIndent1, new File(file1.getSelectedFile().toString() + ".xls"), "GSTR2");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file1.getSelectedFile().toString() + " successfully... ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_B2BMIR5ActionPerformed

    private void tablePendingIndent1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablePendingIndent1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tablePendingIndent1KeyPressed
                
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CLR_BTN;
    private javax.swing.JButton Export_B2BMIR;
    private javax.swing.JButton Export_B2BMIR1;
    private javax.swing.JButton Export_B2BMIR2;
    private javax.swing.JButton Export_B2BMIR3;
    private javax.swing.JButton Export_B2BMIR4;
    private javax.swing.JButton Export_B2BMIR5;
    private javax.swing.JTabbedPane TabList;
    private javax.swing.JButton btnShowPendingIndent;
    private javax.swing.JButton btnShowPendingIndent1;
    private javax.swing.JButton btnShowPendingIndent2;
    private javax.swing.JButton btnShowPendingIndent3;
    private javax.swing.JButton btnShowPendingIndent4;
    private javax.swing.JButton btnShowPendingIndent5;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTable tableMIRToPayment;
    private javax.swing.JTable tableMaterialMaster;
    private javax.swing.JTable tablePendingIndent1;
    private javax.swing.JTable tablePendingPO;
    private javax.swing.JTable tableReceiptChecklist;
    private javax.swing.JTable tableVendorMaster;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables
    
    private boolean Validate() {
        //Form level validations
        if(txtFromDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter from Date");
            return false;
        } else if(!EITLERPGLOBAL.isDate(txtFromDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid From Date in DD/MM/YYYY format.");
            return false;
        }
        
        if(txtToDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter To Date");
            return false;
        } else if(!EITLERPGLOBAL.isDate(txtToDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid To Date in DD/MM/YYYY format.");
            return false;
        }
        
        return true;
    }
    
    
    private void FormatGridPendingIndent() {
        try {
            DataModelB2BMIR = new EITLTableModel();
            tableMIRToPayment.removeAll();

            tableMIRToPayment.setModel(DataModelB2BMIR);
            tableMIRToPayment.setAutoResizeMode(0);

            DataModelB2BMIR.addColumn("SrNo"); //0 - Read Only
            DataModelB2BMIR.addColumn("ITEM CODE"); //1
            DataModelB2BMIR.addColumn("ITEM DESC"); //2
            DataModelB2BMIR.addColumn("ITEM EXTRA DESC"); //3
            DataModelB2BMIR.addColumn("QTY"); //4
            DataModelB2BMIR.addColumn("UOM"); //5
            DataModelB2BMIR.addColumn("BUYERNAME"); //6
            DataModelB2BMIR.addColumn("INDENT NO"); //7
            DataModelB2BMIR.addColumn("INDENT DATE"); //8
            DataModelB2BMIR.addColumn("MRNO"); //9
            DataModelB2BMIR.addColumn("MRDATE"); //10
            DataModelB2BMIR.addColumn("MRAPPROVEDDATE"); //11
            DataModelB2BMIR.addColumn("DEPT"); //12
            DataModelB2BMIR.addColumn("DEPTPERSONNAME"); //13
            DataModelB2BMIR.addColumn("LPONO"); //14
            DataModelB2BMIR.addColumn("LPODATE"); //15
            DataModelB2BMIR.addColumn("PURPOSE"); //16
            
            /*
            DataModelB2BMIR.SetVariable(0, "SR_N0"); 
            DataModelB2BMIR.SetVariable(1, "GSTIN_UIN"); 
            DataModelB2BMIR.SetVariable(2, "TRADE_NAME"); 
            DataModelB2BMIR.SetVariable(3, "INVOICE_NO"); 
            DataModelB2BMIR.SetVariable(4, "INVOICE_DATE"); 
            DataModelB2BMIR.SetVariable(5, "INVOICE_AMT");
            DataModelB2BMIR.SetVariable(6, "TAXABLE_VALUE");
            DataModelB2BMIR.SetVariable(7, "HSN_CODE");
            DataModelB2BMIR.SetVariable(8, "GST_RATE");
            DataModelB2BMIR.SetVariable(9, "IGST_AMT");
            DataModelB2BMIR.SetVariable(10, "CGST_AMT");
            DataModelB2BMIR.SetVariable(11, "SGST_AMT");
            DataModelB2BMIR.SetVariable(12, "CESS");
            DataModelB2BMIR.SetVariable(13, "POS");
            DataModelB2BMIR.SetVariable(14, "ITEM_ID");
            DataModelB2BMIR.SetVariable(15, "IGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(16, "CGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(17, "SGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(18, "CESS_ITC");
            DataModelB2BMIR.SetVariable(19, "INVOICE_NO_AMEND");
            DataModelB2BMIR.SetVariable(20, "INVOICE_DATE_AMEND");
            */
            
            
            for(int i=0;i<=17;i++) {
                DataModelB2BMIR.SetReadOnly(i);
            }
                        
            tableMIRToPayment.getColumnModel().getColumn(0).setMinWidth(30);
            tableMIRToPayment.getColumnModel().getColumn(0).setMaxWidth(40);
            tableMIRToPayment.getColumnModel().getColumn(1).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(1).setMaxWidth(70);
            tableMIRToPayment.getColumnModel().getColumn(2).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(2).setMaxWidth(80);
            //Table_b2bMIR.getColumnModel().getColumn(3).setMinWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(3).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(4).setMaxWidth(80);
            tableMIRToPayment.getColumnModel().getColumn(4).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(5).setMaxWidth(80);
            tableMIRToPayment.getColumnModel().getColumn(5).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(6).setMaxWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(6).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(7).setMaxWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(7).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(8).setMaxWidth(80);
            tableMIRToPayment.getColumnModel().getColumn(8).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(9).setMaxWidth(80);
            tableMIRToPayment.getColumnModel().getColumn(9).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(10).setMaxWidth(80);
            tableMIRToPayment.getColumnModel().getColumn(10).setMaxWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(11).setMinWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(12).setMinWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(13).setMinWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(14).setMinWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(15).setMinWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(16).setMinWidth(100);
            
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void FormatGridPendingIndentPOCreation() {
        try {
            DataModelPendingIndent = new EITLTableModel();
            tablePendingIndent1.removeAll();

            tablePendingIndent1.setModel(DataModelPendingIndent);
            tablePendingIndent1.setAutoResizeMode(0);

            DataModelPendingIndent.addColumn("SrNo"); //0 - Read Only
            DataModelPendingIndent.addColumn("Indent No"); //1
            DataModelPendingIndent.addColumn("Indent Date"); //2
            DataModelPendingIndent.addColumn("For Dept"); //3
            DataModelPendingIndent.addColumn("Created By"); //4
            DataModelPendingIndent.addColumn("Approved Date"); //5
            DataModelPendingIndent.addColumn("Item Code"); //6
            DataModelPendingIndent.addColumn("Item Extra Desc"); //7
            DataModelPendingIndent.addColumn("Dept Desc"); //8
            DataModelPendingIndent.addColumn("Item Desc"); //9
            DataModelPendingIndent.addColumn("Qty"); //10
            DataModelPendingIndent.addColumn("PO Qty"); //11
            DataModelPendingIndent.addColumn("Ref Doc"); //12
            DataModelPendingIndent.addColumn("Last PO No"); //13
            DataModelPendingIndent.addColumn("Last PO Date"); //14
            DataModelPendingIndent.addColumn("Supp Name"); //15
            //DataModelPendingIndent.addColumn("PURPOSE"); //16            
                       
            
            for(int i=0;i<=15;i++) {
                DataModelPendingIndent.SetReadOnly(i);
            }
                        
            tablePendingIndent1.getColumnModel().getColumn(0).setMinWidth(30);
            tablePendingIndent1.getColumnModel().getColumn(0).setMaxWidth(40);
            tablePendingIndent1.getColumnModel().getColumn(1).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(1).setMaxWidth(70);
            tablePendingIndent1.getColumnModel().getColumn(2).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(2).setMaxWidth(80);
            //Table_b2bMIR.getColumnModel().getColumn(3).setMinWidth(100);
            tablePendingIndent1.getColumnModel().getColumn(3).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(4).setMaxWidth(80);
            tablePendingIndent1.getColumnModel().getColumn(4).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(5).setMaxWidth(80);
            tablePendingIndent1.getColumnModel().getColumn(5).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(6).setMaxWidth(100);
            tablePendingIndent1.getColumnModel().getColumn(6).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(7).setMaxWidth(100);
            tablePendingIndent1.getColumnModel().getColumn(7).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(8).setMaxWidth(80);
            tablePendingIndent1.getColumnModel().getColumn(8).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(9).setMaxWidth(80);
            tablePendingIndent1.getColumnModel().getColumn(9).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(10).setMaxWidth(80);
            tablePendingIndent1.getColumnModel().getColumn(10).setMaxWidth(100);
            tablePendingIndent1.getColumnModel().getColumn(11).setMinWidth(100);
            tablePendingIndent1.getColumnModel().getColumn(12).setMinWidth(100);
            tablePendingIndent1.getColumnModel().getColumn(13).setMinWidth(100);
            tablePendingIndent1.getColumnModel().getColumn(14).setMinWidth(100);
            tablePendingIndent1.getColumnModel().getColumn(15).setMinWidth(100);
            //tablePendingIndent1.getColumnModel().getColumn(16).setMinWidth(100);
            
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    private void FormatGridPendingPO() {
        try {
            DataModelPendingPO = new EITLTableModel();
            tablePendingPO.removeAll();

            tablePendingPO.setModel(DataModelPendingPO);
            tablePendingPO.setAutoResizeMode(0);

            DataModelPendingPO.addColumn("SRNO"); //0 - Read Only
            DataModelPendingPO.addColumn("PO No"); //1
            DataModelPendingPO.addColumn("PO DATE"); //2
            DataModelPendingPO.addColumn("DEPT ID"); //3
            DataModelPendingPO.addColumn("SUPP ID"); //3
            DataModelPendingPO.addColumn("ITEM ID"); //4
            DataModelPendingPO.addColumn("ITEM DESC"); //5
            DataModelPendingPO.addColumn("ITEM EXT DESC"); //6
            DataModelPendingPO.addColumn("DEPT ID"); //7
            DataModelPendingPO.addColumn("BALANCE"); //8
            DataModelPendingPO.addColumn("UOM"); //9
            DataModelPendingPO.addColumn("DEPT DESC"); //10
            DataModelPendingPO.addColumn("USER ID"); //11
            DataModelPendingPO.addColumn("USER NAME"); //12
            DataModelPendingPO.addColumn("SR NO"); //13
            DataModelPendingPO.addColumn("DELIVERY DATE"); //14
            DataModelPendingPO.addColumn("PURPOSE"); //15
            DataModelPendingPO.addColumn("REMARKS"); //16
            DataModelPendingPO.addColumn("FROM DATE"); //16
            DataModelPendingPO.addColumn("TO DATE"); //16
            DataModelPendingPO.addColumn("SUPP NAME"); //16
            DataModelPendingPO.addColumn("RECD QTY"); //16
            DataModelPendingPO.addColumn("QTY"); //16
            DataModelPendingPO.addColumn("TOLERANCE LIMIT"); //16
            /*
            DataModelB2BMIR.SetVariable(0, "SR_N0"); 
            DataModelB2BMIR.SetVariable(1, "GSTIN_UIN"); 
            DataModelB2BMIR.SetVariable(2, "TRADE_NAME"); 
            DataModelB2BMIR.SetVariable(3, "INVOICE_NO"); 
            DataModelB2BMIR.SetVariable(4, "INVOICE_DATE"); 
            DataModelB2BMIR.SetVariable(5, "INVOICE_AMT");
            DataModelB2BMIR.SetVariable(6, "TAXABLE_VALUE");
            DataModelB2BMIR.SetVariable(7, "HSN_CODE");
            DataModelB2BMIR.SetVariable(8, "GST_RATE");
            DataModelB2BMIR.SetVariable(9, "IGST_AMT");
            DataModelB2BMIR.SetVariable(10, "CGST_AMT");
            DataModelB2BMIR.SetVariable(11, "SGST_AMT");
            DataModelB2BMIR.SetVariable(12, "CESS");
            DataModelB2BMIR.SetVariable(13, "POS");
            DataModelB2BMIR.SetVariable(14, "ITEM_ID");
            DataModelB2BMIR.SetVariable(15, "IGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(16, "CGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(17, "SGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(18, "CESS_ITC");
            DataModelB2BMIR.SetVariable(19, "INVOICE_NO_AMEND");
            DataModelB2BMIR.SetVariable(20, "INVOICE_DATE_AMEND");
            */
            
            
            for(int i=0;i<=17;i++) {
                DataModelPendingPO.SetReadOnly(i);
            }
                        
            tablePendingPO.getColumnModel().getColumn(0).setMinWidth(30);
            tablePendingPO.getColumnModel().getColumn(0).setMaxWidth(40);
            tablePendingPO.getColumnModel().getColumn(1).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(1).setMaxWidth(70);
            tablePendingPO.getColumnModel().getColumn(2).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(2).setMaxWidth(80);
            //Table_b2bMIR.getColumnModel().getColumn(3).setMinWidth(100);
            tablePendingPO.getColumnModel().getColumn(3).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(4).setMaxWidth(80);
            tablePendingPO.getColumnModel().getColumn(4).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(5).setMaxWidth(80);
            tablePendingPO.getColumnModel().getColumn(5).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(6).setMaxWidth(100);
            tablePendingPO.getColumnModel().getColumn(6).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(7).setMaxWidth(100);
            tablePendingPO.getColumnModel().getColumn(7).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(8).setMaxWidth(80);
            tablePendingPO.getColumnModel().getColumn(8).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(9).setMaxWidth(80);
            tablePendingPO.getColumnModel().getColumn(9).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(10).setMaxWidth(80);
            tablePendingPO.getColumnModel().getColumn(10).setMaxWidth(100);
            tablePendingPO.getColumnModel().getColumn(11).setMinWidth(100);
            tablePendingPO.getColumnModel().getColumn(12).setMinWidth(100);
            tablePendingPO.getColumnModel().getColumn(13).setMinWidth(100);
            tablePendingPO.getColumnModel().getColumn(14).setMinWidth(100);
            tablePendingPO.getColumnModel().getColumn(15).setMinWidth(100);
            tablePendingPO.getColumnModel().getColumn(16).setMinWidth(100);
            
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    private void FormatGridVendorMasterList() {
        try {
            DataModelVendorMaster = new EITLTableModel();
            tableVendorMaster.removeAll();

            tableVendorMaster.setModel(DataModelVendorMaster);
            tableVendorMaster.setAutoResizeMode(0);

            DataModelVendorMaster.addColumn("SrNo"); //0 - Read Only
            DataModelVendorMaster.addColumn("SUPP CD"); //1
            DataModelVendorMaster.addColumn("SUPP NAME"); //2
            DataModelVendorMaster.addColumn("ATTN"); //3
            DataModelVendorMaster.addColumn("CONTACT PERSN1"); //4
            DataModelVendorMaster.addColumn("CONTACT PERSN2"); //5
            DataModelVendorMaster.addColumn("PHONE OFC"); //6
            DataModelVendorMaster.addColumn("PHONE RES"); //7
            DataModelVendorMaster.addColumn("FAX NO"); //8
            DataModelVendorMaster.addColumn("MOBILE NO"); //9
            DataModelVendorMaster.addColumn("EMAIL ADD"); //10
            DataModelVendorMaster.addColumn("COUNTRY"); //11
            DataModelVendorMaster.addColumn("STATE"); //12
            DataModelVendorMaster.addColumn("CITY"); //13
            DataModelVendorMaster.addColumn("ADDRESS"); //14
            DataModelVendorMaster.addColumn("PINCODE"); //15
            DataModelVendorMaster.addColumn("GSTIN NO"); //16
            DataModelVendorMaster.addColumn("PAN NO"); //17
            DataModelVendorMaster.addColumn("MSMED"); //18
            DataModelVendorMaster.addColumn("PAYMENT TERM"); //19
            DataModelVendorMaster.addColumn("PAYMENT DAYS"); //20
            DataModelVendorMaster.addColumn("PROPOSED ITEM"); //21
            
            /*
            DataModelB2BMIR.SetVariable(0, "SR_N0"); 
            DataModelB2BMIR.SetVariable(1, "GSTIN_UIN"); 
            DataModelB2BMIR.SetVariable(2, "TRADE_NAME"); 
            DataModelB2BMIR.SetVariable(3, "INVOICE_NO"); 
            DataModelB2BMIR.SetVariable(4, "INVOICE_DATE"); 
            DataModelB2BMIR.SetVariable(5, "INVOICE_AMT");
            DataModelB2BMIR.SetVariable(6, "TAXABLE_VALUE");
            DataModelB2BMIR.SetVariable(7, "HSN_CODE");
            DataModelB2BMIR.SetVariable(8, "GST_RATE");
            DataModelB2BMIR.SetVariable(9, "IGST_AMT");
            DataModelB2BMIR.SetVariable(10, "CGST_AMT");
            DataModelB2BMIR.SetVariable(11, "SGST_AMT");
            DataModelB2BMIR.SetVariable(12, "CESS");
            DataModelB2BMIR.SetVariable(13, "POS");
            DataModelB2BMIR.SetVariable(14, "ITEM_ID");
            DataModelB2BMIR.SetVariable(15, "IGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(16, "CGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(17, "SGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(18, "CESS_ITC");
            DataModelB2BMIR.SetVariable(19, "INVOICE_NO_AMEND");
            DataModelB2BMIR.SetVariable(20, "INVOICE_DATE_AMEND");
            */
            
            
            for(int i=0;i<=17;i++) {
                DataModelVendorMaster.SetReadOnly(i);
            }
                        
            tableVendorMaster.getColumnModel().getColumn(0).setMinWidth(30);
            tableVendorMaster.getColumnModel().getColumn(0).setMaxWidth(40);
            tableVendorMaster.getColumnModel().getColumn(1).setMinWidth(100);
            //tableVendorMaster.getColumnModel().getColumn(1).setMaxWidth(70);
            tableVendorMaster.getColumnModel().getColumn(2).setMinWidth(100);
            //tableVendorMaster.getColumnModel().getColumn(2).setMaxWidth(80);
            //tableVendorMaster.getColumnModel().getColumn(3).setMinWidth(100);
            tableVendorMaster.getColumnModel().getColumn(3).setMinWidth(100);
            //tableVendorMaster.getColumnModel().getColumn(4).setMaxWidth(80);
            tableVendorMaster.getColumnModel().getColumn(4).setMinWidth(100);
            //tableVendorMaster.getColumnModel().getColumn(5).setMaxWidth(80);
            tableVendorMaster.getColumnModel().getColumn(5).setMinWidth(100);
            //tableVendorMaster.getColumnModel().getColumn(6).setMaxWidth(100);
            tableVendorMaster.getColumnModel().getColumn(6).setMinWidth(100);
            //tableVendorMaster.getColumnModel().getColumn(7).setMaxWidth(100);
            tableVendorMaster.getColumnModel().getColumn(7).setMinWidth(100);
            //tableVendorMaster.getColumnModel().getColumn(8).setMaxWidth(80);
            tableVendorMaster.getColumnModel().getColumn(8).setMinWidth(100);
            //tableVendorMaster.getColumnModel().getColumn(9).setMaxWidth(80);
            tableVendorMaster.getColumnModel().getColumn(9).setMinWidth(100);
            //tableVendorMaster.getColumnModel().getColumn(10).setMaxWidth(80);
            tableVendorMaster.getColumnModel().getColumn(10).setMaxWidth(100);
            tableVendorMaster.getColumnModel().getColumn(11).setMinWidth(100);
            tableVendorMaster.getColumnModel().getColumn(12).setMinWidth(100);
            tableVendorMaster.getColumnModel().getColumn(13).setMinWidth(100);
            tableVendorMaster.getColumnModel().getColumn(14).setMinWidth(100);
            tableVendorMaster.getColumnModel().getColumn(15).setMinWidth(100);
            tableVendorMaster.getColumnModel().getColumn(16).setMinWidth(100);
            
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void FormatGridMaterialMasterList() {
        try {
            DataModelMaterialMaster = new EITLTableModel();
            tableMaterialMaster.removeAll();

            tableMaterialMaster.setModel(DataModelMaterialMaster);
            tableMaterialMaster.setAutoResizeMode(0);

            DataModelMaterialMaster.addColumn("SrNo"); //0 - Read Only
            DataModelMaterialMaster.addColumn("ITEM CODE"); //1
            DataModelMaterialMaster.addColumn("ITEM DESC"); //2
            DataModelMaterialMaster.addColumn("UOM"); //3
            DataModelMaterialMaster.addColumn("MATGROUP"); //4
            DataModelMaterialMaster.addColumn("CATEGORY DESC"); //5
            DataModelMaterialMaster.addColumn("LOCATION ID"); //6
            DataModelMaterialMaster.addColumn("HSN SAC CD"); //7
            
            
            /*
            DataModelB2BMIR.SetVariable(0, "SR_N0"); 
            DataModelB2BMIR.SetVariable(1, "GSTIN_UIN"); 
            DataModelB2BMIR.SetVariable(2, "TRADE_NAME"); 
            DataModelB2BMIR.SetVariable(3, "INVOICE_NO"); 
            DataModelB2BMIR.SetVariable(4, "INVOICE_DATE"); 
            DataModelB2BMIR.SetVariable(5, "INVOICE_AMT");
            DataModelB2BMIR.SetVariable(6, "TAXABLE_VALUE");
            DataModelB2BMIR.SetVariable(7, "HSN_CODE");
            DataModelB2BMIR.SetVariable(8, "GST_RATE");
            DataModelB2BMIR.SetVariable(9, "IGST_AMT");
            DataModelB2BMIR.SetVariable(10, "CGST_AMT");
            DataModelB2BMIR.SetVariable(11, "SGST_AMT");
            DataModelB2BMIR.SetVariable(12, "CESS");
            DataModelB2BMIR.SetVariable(13, "POS");
            DataModelB2BMIR.SetVariable(14, "ITEM_ID");
            DataModelB2BMIR.SetVariable(15, "IGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(16, "CGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(17, "SGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(18, "CESS_ITC");
            DataModelB2BMIR.SetVariable(19, "INVOICE_NO_AMEND");
            DataModelB2BMIR.SetVariable(20, "INVOICE_DATE_AMEND");
            */
            
            
            for(int i=0;i<=17;i++) {
                DataModelMaterialMaster.SetReadOnly(i);
            }
                        
            tableMaterialMaster.getColumnModel().getColumn(0).setMinWidth(30);
            tableMaterialMaster.getColumnModel().getColumn(0).setMaxWidth(40);
            tableMaterialMaster.getColumnModel().getColumn(1).setMinWidth(100);
            //tableMaterialMaster.getColumnModel().getColumn(1).setMaxWidth(70);
            tableMaterialMaster.getColumnModel().getColumn(2).setMinWidth(100);
            //tableMaterialMaster.getColumnModel().getColumn(2).setMaxWidth(80);
            //tableMaterialMaster.getColumnModel().getColumn(3).setMinWidth(100);
            tableMaterialMaster.getColumnModel().getColumn(3).setMinWidth(100);
            //tableMaterialMaster.getColumnModel().getColumn(4).setMaxWidth(80);
            tableMaterialMaster.getColumnModel().getColumn(4).setMinWidth(100);
            //tableMaterialMaster.getColumnModel().getColumn(5).setMaxWidth(80);
            tableMaterialMaster.getColumnModel().getColumn(5).setMinWidth(100);
            //tableMaterialMaster.getColumnModel().getColumn(6).setMaxWidth(100);
            tableMaterialMaster.getColumnModel().getColumn(6).setMinWidth(100);
            //tableMaterialMaster.getColumnModel().getColumn(7).setMaxWidth(100);
            tableMaterialMaster.getColumnModel().getColumn(7).setMinWidth(100);
            //tableMaterialMaster.getColumnModel().getColumn(8).setMaxWidth(80);
            
            
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void FormatGridReceiptChecklist() {
        try {
            DataModelReceiptChecklist = new EITLTableModel();
            tableReceiptChecklist.removeAll();

            tableReceiptChecklist.setModel(DataModelReceiptChecklist);
            tableReceiptChecklist.setAutoResizeMode(0);

            DataModelReceiptChecklist.addColumn("SRNO"); //0 - Read Only
            DataModelReceiptChecklist.addColumn("GRN NO"); //1
            DataModelReceiptChecklist.addColumn("GRN DT"); //2
            DataModelReceiptChecklist.addColumn("GRN SRNO"); //3
            DataModelReceiptChecklist.addColumn("MIR NO"); //4
            DataModelReceiptChecklist.addColumn("MIR DT"); //5
            DataModelReceiptChecklist.addColumn("DEPT"); //6
            DataModelReceiptChecklist.addColumn("ITEM CD"); //7
            DataModelReceiptChecklist.addColumn("ITEM DESC"); //8
            DataModelReceiptChecklist.addColumn("PONO"); //9
            DataModelReceiptChecklist.addColumn("PODATE"); //10
            DataModelReceiptChecklist.addColumn("RCVD QTY"); //11
            DataModelReceiptChecklist.addColumn("UOM"); //12
            DataModelReceiptChecklist.addColumn("RATE"); //13
            DataModelReceiptChecklist.addColumn("TOTAL AMT"); //14
            DataModelReceiptChecklist.addColumn("SUPP ID"); //15
            DataModelReceiptChecklist.addColumn("SUPP NAME"); //16
            DataModelReceiptChecklist.addColumn("INV NO"); //17
            DataModelReceiptChecklist.addColumn("INV DT"); //18
            
            /*
            DataModelB2BMIR.SetVariable(0, "SR_N0"); 
            DataModelB2BMIR.SetVariable(1, "GSTIN_UIN"); 
            DataModelB2BMIR.SetVariable(2, "TRADE_NAME"); 
            DataModelB2BMIR.SetVariable(3, "INVOICE_NO"); 
            DataModelB2BMIR.SetVariable(4, "INVOICE_DATE"); 
            DataModelB2BMIR.SetVariable(5, "INVOICE_AMT");
            DataModelB2BMIR.SetVariable(6, "TAXABLE_VALUE");
            DataModelB2BMIR.SetVariable(7, "HSN_CODE");
            DataModelB2BMIR.SetVariable(8, "GST_RATE");
            DataModelB2BMIR.SetVariable(9, "IGST_AMT");
            DataModelB2BMIR.SetVariable(10, "CGST_AMT");
            DataModelB2BMIR.SetVariable(11, "SGST_AMT");
            DataModelB2BMIR.SetVariable(12, "CESS");
            DataModelB2BMIR.SetVariable(13, "POS");
            DataModelB2BMIR.SetVariable(14, "ITEM_ID");
            DataModelB2BMIR.SetVariable(15, "IGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(16, "CGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(17, "SGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(18, "CESS_ITC");
            DataModelB2BMIR.SetVariable(19, "INVOICE_NO_AMEND");
            DataModelB2BMIR.SetVariable(20, "INVOICE_DATE_AMEND");
            */
            
            
            for(int i=0;i<=17;i++) {
                DataModelReceiptChecklist.SetReadOnly(i);
            }
                        
            tableReceiptChecklist.getColumnModel().getColumn(0).setMinWidth(30);
            tableReceiptChecklist.getColumnModel().getColumn(0).setMaxWidth(40);
            tableReceiptChecklist.getColumnModel().getColumn(1).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(1).setMaxWidth(70);
            tableReceiptChecklist.getColumnModel().getColumn(2).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(2).setMaxWidth(80);
            //Table_b2bMIR.getColumnModel().getColumn(3).setMinWidth(100);
            tableReceiptChecklist.getColumnModel().getColumn(3).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(4).setMaxWidth(80);
            tableReceiptChecklist.getColumnModel().getColumn(4).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(5).setMaxWidth(80);
            tableReceiptChecklist.getColumnModel().getColumn(5).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(6).setMaxWidth(100);
            tableReceiptChecklist.getColumnModel().getColumn(6).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(7).setMaxWidth(100);
            tableReceiptChecklist.getColumnModel().getColumn(7).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(8).setMaxWidth(80);
            tableReceiptChecklist.getColumnModel().getColumn(8).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(9).setMaxWidth(80);
            tableReceiptChecklist.getColumnModel().getColumn(9).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(10).setMaxWidth(80);
            tableReceiptChecklist.getColumnModel().getColumn(10).setMaxWidth(100);
            tableReceiptChecklist.getColumnModel().getColumn(11).setMinWidth(100);
            tableReceiptChecklist.getColumnModel().getColumn(12).setMinWidth(100);
            tableReceiptChecklist.getColumnModel().getColumn(13).setMinWidth(100);
            tableReceiptChecklist.getColumnModel().getColumn(14).setMinWidth(100);
            tableReceiptChecklist.getColumnModel().getColumn(15).setMinWidth(100);
            tableReceiptChecklist.getColumnModel().getColumn(16).setMinWidth(100);
            
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
     
    public void GenerateGRNB2BData(String ORDER_BY) {
        
        try {
            
            
//            data.Execute("");
            /*
            data.Execute("TRUNCATE TABLE DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT");
            
            
            data.Execute("INSERT INTO DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT (SUPP_ID,INVOICE_NO, INVOICE_DATE, INVOICE_AMT,  ITEM_ID, GRN_NO, GRN_DATE, QTY, UNIT, RATE, TOTAL_AMOUNT, NET_AMOUNT,HSN_CODE,IGST_RATE,CGST_RATE,SGST_RATE)  "
                    + " ( SELECT H.SUPP_ID,H.INVOICE_NO,H.INVOICE_DATE,H.INVOICE_AMOUNT, D.ITEM_ID,H.GRN_NO,H.GRN_DATE,D.QTY,D.UNIT,D.RATE,D.TOTAL_AMOUNT,D.NET_AMOUNT,D.HSN_SAC_CODE,D.COLUMN_3_PER,D.COLUMN_4_PER,D.COLUMN_5_PER FROM DINESHMILLS.D_INV_GRN_HEADER H,DINESHMILLS.D_INV_GRN_DETAIL D " +
                        "WHERE H.COMPANY_ID=2 AND " +
                        "H.GRN_NO IN ( SELECT distinct B.GRN_NO FROM FINANCE.D_FIN_VOUCHER_HEADER A , FINANCE.D_FIN_VOUCHER_DETAIL B " +
                        "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND B.GRN_NO!='' AND A.VOUCHER_DATE >= '"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND A.VOUCHER_DATE <= '"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND SUBSTRING(A.VOUCHER_NO,1,2) = 'PJ' AND A.APPROVED =1 AND A.CANCELLED =0) " +
                        "AND H.GRN_NO=D.GRN_NO AND H.APPROVED =1 AND H.CANCELLED =0 ORDER BY H.GRN_NO)");
            
            
            data.Execute("UPDATE DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT A,DINESHMILLS.D_COM_SUPP_MASTER B " +
                        " SET A.TYPE=2,A.TRADE_NAME=B.SUPP_NAME,A.GSTIN_UIN=B.GSTIN_NO,A.POS=B.STATE " +
                        " WHERE A.SUPP_ID = B.SUPPLIER_CODE"); 
            
            data.Execute("UPDATE DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT A,DINESHMILLS.D_INV_GRN_HSN B " +
                        " SET A.TAXABLE_VALUE=B.INVOICE_AMOUNT,A.IGST_AMT=B.INVOICE_IGST,A.CGST_AMT=B.INVOICE_CGST" +
                        ",A.SGST_AMT=B.INVOICE_SGST,A.CESS=B.INVOICE_GST_COMP_CESS,A.CGST_AMT_ITC=B.CGST_INPUT_CR_AMT,"
                        + "A.SGST_AMT_ITC=B.SGST_INPUT_CR_AMT,A.IGST_AMT_ITC=B.IGST_INPUT_CR_AMT " +
                        " WHERE A.GRN_NO=B.GRN_NO AND A.GRN_DATE=B.GRN_DATE AND A.HSN_CODE=B.HSN_CODE");
            */
            
            data.Execute("TRUNCATE DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT");
            /*
            data.Execute(" INSERT INTO DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT (" +
                        " GRN_NO,GRN_DATE,TAXABLE_VALUE,HSN_CODE,SGST_AMT,CGST_AMT,IGST_AMT,SGST_AMT_ITC,CGST_AMT_ITC,IGST_AMT_ITC,SGST_RATE,CGST_RATE,IGST_RATE,SUPP_ID,INVOICE_NO,INVOICE_DATE,INVOICE_AMT,CESS)\n" +
                        " " +
                        " SELECT H.GRN_NO,H.GRN_DATE,G.INVOICE_AMOUNT,HSN_CODE,INVOICE_SGST,INVOICE_CGST,INVOICE_IGST,SGST_INPUT_CR_AMT,CGST_INPUT_CR_AMT,IGST_INPUT_CR_AMT,SGST_INPUT_CR_PER,CGST_INPUT_CR_PER,IGST_INPUT_CR_PER,SUPP_ID,INVOICE_NO,INVOICE_DATE,H.INVOICE_AMOUNT,G.INVOICE_GST_COMP_CESS FROM DINESHMILLS.D_INV_GRN_HSN G,DINESHMILLS.D_INV_GRN_HEADER H " +
                        " " +
                        " WHERE H.GRN_DATE >='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND H.GRN_DATE <='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"'  AND G.GRN_NO=H.GRN_NO AND H.APPROVED =1 AND H.CANCELLED =0 ");
            */
            data.Execute("INSERT INTO DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT ( " +
                        " GRN_NO,GRN_DATE,TAXABLE_VALUE,HSN_CODE,SGST_AMT,CGST_AMT,IGST_AMT,SGST_AMT_ITC,CGST_AMT_ITC,IGST_AMT_ITC,SGST_RATE,CGST_RATE,IGST_RATE,SUPP_ID,INVOICE_NO,INVOICE_DATE,INVOICE_AMT,CESS) " +
                        " SELECT H.GRN_NO,H.GRN_DATE,G.INVOICE_AMOUNT,HSN_CODE,INVOICE_SGST,INVOICE_CGST,INVOICE_IGST,SGST_INPUT_CR_AMT,CGST_INPUT_CR_AMT,IGST_INPUT_CR_AMT,SGST_INPUT_CR_PER,CGST_INPUT_CR_PER,IGST_INPUT_CR_PER,SUPP_ID,INVOICE_NO,INVOICE_DATE,H.INVOICE_AMOUNT,G.INVOICE_GST_COMP_CESS FROM DINESHMILLS.D_INV_GRN_HSN G,DINESHMILLS.D_INV_GRN_HEADER H " +
                        " WHERE G.GRN_NO= H.GRN_NO AND H.APPROVED =1 AND H.CANCELLED =0 " +
                        " AND H.GRN_NO IN ( SELECT distinct B.GRN_NO FROM FINANCE.D_FIN_VOUCHER_HEADER A , FINANCE.D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO = B.VOUCHER_NO AND B.GRN_NO!='' AND A.VOUCHER_DATE >= '"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND A.VOUCHER_DATE <= '"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND SUBSTRING(A.VOUCHER_NO,1,2) = 'PJ' AND A.APPROVED =1 AND A.CANCELLED =0)");
            
            System.out.println("INSERT INTO DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT ( " +
                        " GRN_NO,GRN_DATE,TAXABLE_VALUE,HSN_CODE,SGST_AMT,CGST_AMT,IGST_AMT,SGST_AMT_ITC,CGST_AMT_ITC,IGST_AMT_ITC,SGST_RATE,CGST_RATE,IGST_RATE,SUPP_ID,INVOICE_NO,INVOICE_DATE,INVOICE_AMT,CESS) " +
                        " SELECT H.GRN_NO,H.GRN_DATE,G.INVOICE_AMOUNT,HSN_CODE,INVOICE_SGST,INVOICE_CGST,INVOICE_IGST,SGST_INPUT_CR_AMT,CGST_INPUT_CR_AMT,IGST_INPUT_CR_AMT,SGST_INPUT_CR_PER,CGST_INPUT_CR_PER,IGST_INPUT_CR_PER,SUPP_ID,INVOICE_NO,INVOICE_DATE,H.INVOICE_AMOUNT,G.INVOICE_GST_COMP_CESS FROM DINESHMILLS.D_INV_GRN_HSN G,DINESHMILLS.D_INV_GRN_HEADER H " +
                        " WHERE G.GRN_NO= H.GRN_NO AND H.APPROVED =1 AND H.CANCELLED =0 " +
                        " AND H.GRN_NO IN ( SELECT distinct B.GRN_NO FROM FINANCE.D_FIN_VOUCHER_HEADER A , FINANCE.D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO = B.VOUCHER_NO AND B.GRN_NO!='' AND A.VOUCHER_DATE >= '"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND A.VOUCHER_DATE <= '"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND SUBSTRING(A.VOUCHER_NO,1,2) = 'PJ' AND A.APPROVED =1 AND A.CANCELLED =0)");
            
            data.Execute("INSERT INTO DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT (  GRN_NO,GRN_DATE,TAXABLE_VALUE,HSN_CODE,SGST_AMT,CGST_AMT,IGST_AMT,SGST_AMT_ITC,CGST_AMT_ITC,IGST_AMT_ITC,SGST_RATE,CGST_RATE,IGST_RATE,SUPP_ID,INVOICE_NO,INVOICE_DATE,INVOICE_AMT,CESS)  \n"
                    + " SELECT H.JOB_NO,H.JOB_DATE,G.INVOICE_AMOUNT,HSN_CODE,INVOICE_SGST,INVOICE_CGST,INVOICE_IGST,SGST_INPUT_CR_AMT,CGST_INPUT_CR_AMT,IGST_INPUT_CR_AMT,SGST_INPUT_CR_PER,CGST_INPUT_CR_PER,IGST_INPUT_CR_PER,SUPP_ID,INVOICE_NO,INVOICE_DATE,H.INVOICE_AMOUNT,G.INVOICE_GST_COMP_CESS FROM DINESHMILLS.D_INV_JOB_HSN G,DINESHMILLS.D_INV_JOB_HEADER H \n"
                    + " WHERE G.JOB_NO=H.JOB_NO AND H.APPROVED=1 AND H.CANCELLED=0 AND H.JOB_NO IN ( SELECT distinct B.GRN_NO FROM FINANCE.D_FIN_VOUCHER_HEADER A , FINANCE.D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO = B.VOUCHER_NO AND B.GRN_NO!='' AND A.VOUCHER_DATE >= '"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND A.VOUCHER_DATE <= '"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND SUBSTRING(A.VOUCHER_NO,1,2) = 'PJ' AND A.APPROVED =1 AND A.CANCELLED =0)");
            
           data.Execute("INSERT INTO DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT (  GRN_NO,GRN_DATE,TAXABLE_VALUE,HSN_CODE,SGST_AMT,CGST_AMT,IGST_AMT,SGST_AMT_ITC,CGST_AMT_ITC,IGST_AMT_ITC,SGST_RATE,CGST_RATE,IGST_RATE,SUPP_ID,INVOICE_NO,INVOICE_DATE,INVOICE_AMT,CESS)  "
                   + " SELECT H.JOB_NO,H.JOB_DATE,G.INVOICE_AMOUNT,HSN_CODE,INVOICE_SGST,INVOICE_CGST,INVOICE_IGST,SGST_INPUT_CR_AMT,CGST_INPUT_CR_AMT,IGST_INPUT_CR_AMT,SGST_INPUT_CR_PER,CGST_INPUT_CR_PER,IGST_INPUT_CR_PER,SUPP_ID,INVOICE_NO,INVOICE_DATE,H.INVOICE_AMOUNT,G.INVOICE_GST_COMP_CESS FROM DINESHMILLS.D_INV_JOB_HSN G,DINESHMILLS.D_INV_JOB_HEADER H "
                   + " WHERE G.JOB_NO=H.JOB_NO AND H.APPROVED=1 AND H.CANCELLED=0 AND H.JOB_NO IN ( SELECT distinct B.GRN_NO FROM FINANCE.D_FIN_VOUCHER_HEADER A , FINANCE.D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO = B.VOUCHER_NO AND B.GRN_NO!='' AND A.VOUCHER_DATE >= '2020-06-01' AND A.VOUCHER_DATE <= '2020-06-30' AND SUBSTRING(A.VOUCHER_NO,1,2) = 'PJ' AND A.APPROVED =1 AND A.CANCELLED =0)");
            
            //data.Execute("UPDATE DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT A,DINESHMILLS.D_COM_SUPP_MASTER B  SET A.TYPE=2,A.TRADE_NAME=B.SUPP_NAME,A.GSTIN_UIN=B.GSTIN_NO,A.POS=B.STATE WHERE A.SUPP_ID = B.SUPPLIER_CODE");
            
           data.Execute("UPDATE DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT A,FINANCE.D_FIN_PARTY_MASTER B  SET A.TYPE=2,A.TRADE_NAME=B.PARTY_NAME,A.GSTIN_UIN=B.GSTIN_NO,A.POS=B.STATE WHERE A.SUPP_ID = B.PARTY_CODE AND MAIN_ACCOUNT_CODE NOT IN (210027,210010,210072)");
           
            data.Execute("UPDATE DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT SET ITEM_ID = CASE WHEN (SGST_AMT_ITC+CGST_AMT_ITC+IGST_AMT_ITC) = 0 THEN 'Ineligible' ELSE 'Inputs' END,GST_RATE = SGST_RATE+CGST_RATE+IGST_RATE");
            
            
            String strSQL = "SELECT * FROM DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT";
            
            //String strSQL2 = "SELECT *,(IGST_RATE+CGST_RATE+SGST_RATE) AS GST_RATE_DISPLAY FROM DINESHMILLS.TMP_STORES_MIR_SERVICE_QUERY_REPORT";
            
            
            ResultSet rs = data.getResult(strSQL);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {
//SR_N0, GSTIN_UIN, SUPP_ID, TRADE_NAME, TYPE, INVOICE_NO, INVOICE_DATE, INVOICE_AMT, HSN_CODE, ITEM_ID, TAXABLE_VALUE, GST_RATE, IGST_RATE, IGST_AMT, CGST_RATE, CGST_AMT, SGST_RATE, SGST_AMT, CESS, POS, DIFF_PER_TAX_RATE, SUPPLY_COVER, COMMON_CREDIT, GRN_NO, GRN_DATE, QTY, UNIT, RATE, TOTAL_AMOUNT, NET_AMOUNT
                Object[] rowData = new Object[25];
                // rowData[0]=rs.getString("");
                rowData[0] = cnt++;
                rowData[1] = rs.getString("GSTIN_UIN");//GSTIN_UIN
                rowData[2] = rs.getString("TRADE_NAME");//TRADE_NAME
                rowData[3] = rs.getString("INVOICE_NO");
                rowData[4] = EITLERPGLOBAL.formatDate(rs.getString("INVOICE_DATE"));
                rowData[5] = rs.getString("INVOICE_AMT");
                rowData[6] = rs.getString("TAXABLE_VALUE");//TAXABLE_VALUE
                rowData[7] = rs.getString("HSN_CODE");//HSN_CODE
                rowData[8] = rs.getString("GST_RATE");//GST_RATE
                rowData[9] = rs.getString("IGST_AMT");//IGST_AMT
                rowData[10] = rs.getString("CGST_AMT");//CGST_AMT
                rowData[11] = rs.getString("SGST_AMT");//SGST_AMT
                rowData[12] = rs.getString("CESS");//CESS
                rowData[13] = rs.getString("POS");//POS
                
//                String Eligibility = "";
//                if(rs.getString("ITEM_ID").equals("99002001"))
//                {
//                    Eligibility = "Capital Goods";
//                }
//                else if(rs.getString("ITEM_ID").equals("99004001"))
//                {
//                    Eligibility = "Input Service";
//                }
//                else
//                {
//                    Eligibility = "Inputs";
//                }
                rowData[14] = rs.getString("ITEM_ID");
                
                rowData[15] = rs.getString("IGST_AMT_ITC");//IGST_AMT
                rowData[16] = rs.getString("CGST_AMT_ITC");//CGST_AMT
                rowData[17] = rs.getString("SGST_AMT_ITC");//SGST_AMT
                rowData[18] = rs.getString("CESS_ITC");//CESS
                rowData[19] = rs.getString("INVOICE_NO_AMEND");//CESS
                //rowData[20] = rs.getString("INVOICE_DATE_AMEND");//CESS
                
                
                DataModelB2B.addRow(rowData);
                rs.next();
            }
            rs.close();
            //Object[] rowData2 = new Object[25];
            //DataModelB2BMIR.addRow(rowData2);
            
        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
        
        String sql;
        sql="SELECT ROUND(SUM(INVOICE_AMT),2) FROM DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT ";
        String invAmt = data.getStringValueFromDB(sql);
        
        
        sql="SELECT ROUND(SUM(TAXABLE_VALUE),2) FROM DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT ";
        String taxAmt = data.getStringValueFromDB(sql);
        
    }
    
    public void GeneratePendingIndentData(String ORDER_BY) {
        
        try {
            String fromDate="";
            if(txtFromDate.getText().trim().equals("")){
                fromDate="2020-01-01";
            }else{
                fromDate=EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
            }
            
            String strSQL2 = "SELECT ITEM_CODE,ITEM_DESCRIPTION,ITEM_EXTRA_DESC,QTY,UOM,(SELECT USER_NAME FROM "
                    + "DINESHMILLS.D_COM_USER_MASTER WHERE USER_ID=BUYER) AS BUYERNAME,INDENT_NO,INDENT_DATE,MR_NO "
                    + ",REQ_DATE AS MRDATE,APPROVED_DATE AS MRAPPROVEDDATE,DEPT,(SELECT USER_NAME FROM DINESHMILLS.D_COM_USER_MASTER WHERE USER_ID=PERSON) AS DEPTPERSONNAME,LAST_PO_NO,LAST_PO_DATE,PURPOSE FROM\n"
                    + "(SELECT A.*,ITEM_DESCRIPTION,\n"
                    + "(SELECT DEPT_DESC FROM DINESHMILLS.D_COM_DEPT_MASTER WHERE DEPT_ID=FOR_DEPT_ID) AS DEPT,\n"
                    + "(SELECT `DESC` FROM DINESHMILLS.D_COM_PARAMETER_MAST WHERE COMPANY_ID=2 AND PARA_ID = 'UNIT' \n"
                    + "AND PARA_CODE=UNIT) UOM,\n"
                    + "(SELECT DISTINCT BUYER FROM DINESHMILLS.D_COM_DEPT_BUYERS WHERE BUYER!=0 AND DEPT_ID=FOR_DEPT_ID ORDER BY\n"
                    + "BUYER DESC LIMIT 1) AS BUYER FROM\n"
                    + "(SELECT D.INDENT_NO, H.INDENT_DATE, FOR_DEPT_ID, PURPOSE, MR_NO, ITEM_CODE, ITEM_EXTRA_DESC, QTY\n"
                    + ",LAST_PO_NO,LAST_PO_DATE,UNIT,BUYER AS PERSON\n"
                    + " FROM DINESHMILLS.D_INV_INDENT_HEADER H,DINESHMILLS.D_INV_INDENT_DETAIL D \n"
                    + "WHERE H.INDENT_NO=D.INDENT_NO AND H.APPROVED=0 AND  H.CANCELED=0) A\n"
                    + "LEFT JOIN\n"
                    + "(SELECT ITEM_ID,ITEM_DESCRIPTION FROM DINESHMILLS.D_INV_ITEM_MASTER) B\n"
                    + "ON ITEM_CODE = ITEM_ID ) C\n"
                    + "LEFT JOIN\n"
                    + "(SELECT REQ_NO,REQ_DATE,APPROVED_DATE FROM DINESHMILLS.D_INV_REQ_HEADER) D\n"
                    + "ON REQ_NO=MR_NO ";
            
            System.out.println("SQL "+strSQL2);
            
            ResultSet rs = data.getResult(strSQL2);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {
//SR_N0, GSTIN_UIN, SUPP_ID, TRADE_NAME, TYPE, INVOICE_NO, INVOICE_DATE, INVOICE_AMT, HSN_CODE, ITEM_ID, TAXABLE_VALUE, GST_RATE, IGST_RATE, IGST_AMT, CGST_RATE, CGST_AMT, SGST_RATE, SGST_AMT, CESS, POS, DIFF_PER_TAX_RATE, SUPPLY_COVER, COMMON_CREDIT, GRN_NO, GRN_DATE, QTY, UNIT, RATE, TOTAL_AMOUNT, NET_AMOUNT
                Object[] rowData = new Object[30];
                // rowData[0]=rs.getString("");
                rowData[0] = cnt++;
                rowData[1] = rs.getString("ITEM_CODE");
                rowData[2] = rs.getString("ITEM_DESCRIPTION");
                rowData[3] = rs.getString("ITEM_EXTRA_DESC");
                rowData[4] = rs.getString("QTY");
                rowData[5] = rs.getString("UOM");
                rowData[6] = rs.getString("BUYERNAME");                
                rowData[7] = rs.getString("INDENT_NO");
                rowData[8] = EITLERPGLOBAL.formatDate(rs.getString("INDENT_DATE"));             
                rowData[9] = rs.getString("MR_NO");
                rowData[10] = EITLERPGLOBAL.formatDate(rs.getString("MRDATE"));                
                rowData[11] = EITLERPGLOBAL.formatDate(rs.getString("MRAPPROVEDDATE"));
                rowData[12] = rs.getString("DEPT");
                rowData[13] = rs.getString("DEPTPERSONNAME");
                rowData[14] = rs.getString("LAST_PO_NO");
                rowData[15] = EITLERPGLOBAL.formatDate(rs.getString("LAST_PO_DATE"));
                rowData[16] = rs.getString("PURPOSE");   
                DataModelB2BMIR.addRow(rowData);
                rs.next();
            }
            rs.close();
            //Object[] rowData2 = new Object[25];
            //DataModelB2BMIR.addRow(rowData2);
            
        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
                
        
        
        
        
    }
    
    public void GeneratePendingIndentDataPOCreation(String ORDER_BY) {
        
        try {
            String fromDate="";
            if(txtFromDate.getText().trim().equals("")){
                fromDate="2020-01-01";
            }else{
                fromDate=EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
            }
            
            String strSQL2 = "SELECT A.INDENT_NO,A.INDENT_DATE AS INDENT_DATE,A.FOR_DEPT_ID,A.CREATED_BY,A.APPROVED_DATE AS APPROVED_DATE,B.ITEM_CODE AS ITEM_CODE,B.ITEM_EXTRA_DESC,DEPT_DESC,ITEM.ITEM_DESCRIPTION,B.QTY,B.PO_QTY,B.REF_DOC,IF(B.LAST_PO_NO IS NULL,\"\",B.LAST_PO_NO) AS LAST_PO_NO,IF(B.LAST_PO_DATE IS NULL,\"\",DATE_FORMAT(B.LAST_PO_DATE,\"%d/%m/%Y\")) AS LAST_PO_DATE,IF(SUPP.SUPP_NAME IS NULL,\"\",SUPP.SUPP_NAME) AS SUPP_NAME,BUYER FROM \n"
                    + "D_INV_INDENT_HEADER A\n"
                    + "LEFT JOIN D_COM_DEPT_MASTER DEPT ON (A.FOR_DEPT_ID=DEPT.DEPT_ID),\n"
                    + "D_INV_INDENT_DETAIL B\n"
                    + "LEFT JOIN D_INV_ITEM_MASTER ITEM ON (B.ITEM_CODE=ITEM.ITEM_ID)\n"
                    + "LEFT JOIN D_COM_SUPP_MASTER SUPP ON (SUPP.SUPPLIER_CODE=B.LAST_SUPP_ID AND B.LAST_SUPP_ID<>\"\")\n"
                    + "WHERE \n"
                    + "A.INDENT_NO=B.INDENT_NO AND \n"
                    + "A.APPROVED=1 AND \n"
                    + "A.CANCELED=0 AND \n"
                    + "A.FOR_DEPT_ID IN (SELECT DEPT_ID FROM D_COM_DEPT_BUYERS \n"
                    //+ "#WHERE BUYER=$P{BUYER}\n"
                    + ")  AND \n"
                    + "B.PO_QTY<B.QTY AND\n"
                    + "A.INDENT_NO NOT IN ( \n"
                    + "SELECT DISTINCT(C.INDENT_NO)  AS INDENT_NO FROM \n"
                    + "D_INV_INDENT_DETAIL A, \n"
                    + "D_COM_BUYER_ITEMS B, \n"
                    + "D_INV_INDENT_HEADER C \n"
                    + "WHERE \n"
                    + "A.INDENT_NO=C.INDENT_NO AND\n"
                    + "C.APPROVED=1 AND C.CANCELED=0 AND \n"
                    + "A.PO_QTY<QTY AND \n"
                    //+ "#B.BUYER<>$P{BUYER} AND \n"
                    + "B.ITEM_ID=SUBSTRING(A.ITEM_CODE,1,LENGTH(B.ITEM_ID)) \n"
                    + "UNION \n"
                    + "SELECT DISTINCT(A.INDENT_NO) AS INDENT_NO FROM D_INV_INDENT_DETAIL A, \n"
                    + "D_COM_BUYER_ITEMS B, D_INV_INDENT_HEADER C, D_INV_ITEM_MASTER D \n"
                    + "WHERE \n"
                    + "A.INDENT_NO=C.INDENT_NO AND \n"
                    + "C.APPROVED=1 AND C.CANCELED=0 AND \n"
                    + "A.PO_QTY<QTY AND \n"
                    //+ "#B.BUYER<>$P{BUYER} AND  \n"
                    + "B.ITEM_CLASS<>'' AND \n"
                    + "A.ITEM_CODE=D.ITEM_ID AND \n"
                    + "D.ABC=B.ITEM_CLASS ) \n"
                    + "\n"
                    + "UNION \n"
                    + "SELECT DISTINCT(C.INDENT_NO)  AS INDENT_NO,C.INDENT_DATE AS INDENT_DATE,C.FOR_DEPT_ID,C.CREATED_BY,C.APPROVED_DATE AS APPROVED_DATE,A.ITEM_CODE,A.ITEM_EXTRA_DESC AS ITEM_CODE,DEPT.DEPT_DESC,ITEM.ITEM_DESCRIPTION,A.QTY,A.PO_QTY,A.REF_DOC,IF(A.LAST_PO_NO IS NULL,\"\",A.LAST_PO_NO) AS LAST_PO_NO,IF(A.LAST_PO_DATE IS NULL,\"\", DATE_FORMAT(A.LAST_PO_DATE,\"%d/%m/%Y\")) AS LAST_PO_DATE,IF(SUPP.SUPP_NAME IS NULL,\"\",SUPP.SUPP_NAME) AS SUPP_NAME,B.BUYER FROM  \n"
                    + "D_INV_INDENT_DETAIL A\n"
                    + "LEFT JOIN D_INV_ITEM_MASTER ITEM ON (A.ITEM_CODE=ITEM.ITEM_ID)\n"
                    + "LEFT JOIN D_COM_SUPP_MASTER SUPP ON (SUPP.SUPPLIER_CODE=A.LAST_SUPP_ID AND A.LAST_SUPP_ID<>\"\"), \n"
                    + "D_COM_BUYER_ITEMS B, \n"
                    + "D_INV_INDENT_HEADER C \n"
                    + "LEFT JOIN D_COM_DEPT_MASTER DEPT ON (C.FOR_DEPT_ID=DEPT.DEPT_ID)\n"
                    + "WHERE \n"
                    + "A.INDENT_NO=C.INDENT_NO AND \n"
                    + "C.APPROVED=1 AND C.CANCELED=0 AND \n"
                    + "A.PO_QTY<QTY AND \n"
                    //+ "#B.BUYER=$P{BUYER} AND  \n"
                    + "B.ITEM_ID=SUBSTRING(A.ITEM_CODE,1,LENGTH(B.ITEM_ID)) \n"
                    + "UNION \n"
                    + "SELECT DISTINCT(A.INDENT_NO) AS INDENT_NO,C.INDENT_DATE AS INDENT_DATE,C.FOR_DEPT_ID,C.CREATED_BY,C.APPROVED_DATE AS APPROVED_DATE,A.ITEM_CODE  AS ITEM_CODE,A.ITEM_EXTRA_DESC,DEPT_DESC,ITEM.ITEM_DESCRIPTION,A.QTY,A.PO_QTY,A.REF_DOC,IF(A.LAST_PO_NO IS NULL,\"\",A.LAST_PO_NO) AS LAST_PO_NO,IF(A.LAST_PO_DATE IS NULL,\"\",DATE_FORMAT(A.LAST_PO_DATE,\"%d/%m/%Y\")) AS LAST_PO_DATE,IF(SUPP.SUPP_NAME IS NULL,\"\",SUPP.SUPP_NAME) AS SUPP_NAME,B.BUYER  FROM  \n"
                    + "D_INV_INDENT_DETAIL A\n"
                    + "LEFT JOIN D_INV_ITEM_MASTER ITEM ON (A.ITEM_CODE=ITEM.ITEM_ID)\n"
                    + "LEFT JOIN D_COM_SUPP_MASTER SUPP ON (SUPP.SUPPLIER_CODE=A.LAST_SUPP_ID AND A.LAST_SUPP_ID<>\"\"), \n"
                    + "D_COM_BUYER_ITEMS B, \n"
                    + "D_INV_INDENT_HEADER C\n"
                    + "LEFT JOIN D_COM_DEPT_MASTER DEPT ON (C.FOR_DEPT_ID=DEPT.DEPT_ID), \n"
                    + "D_INV_ITEM_MASTER D \n"
                    + "WHERE \n"
                    + "A.INDENT_NO=C.INDENT_NO AND \n"
                    + "C.APPROVED=1 AND C.CANCELED=0 AND \n"
                    + "A.PO_QTY<QTY AND \n"
                    //+ "#B.BUYER=$P{BUYER} AND  \n"
                    + "B.ITEM_CLASS<>'' AND \n"
                    + "A.ITEM_CODE=D.ITEM_ID AND \n"
                    + "D.ABC=B.ITEM_CLASS\n"
                    + "ORDER BY INDENT_NO,INDENT_DATE,ITEM_CODE";
            
            System.out.println("SQL "+strSQL2);
            
            ResultSet rs = data.getResult(strSQL2);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {
//SR_N0, GSTIN_UIN, SUPP_ID, TRADE_NAME, TYPE, INVOICE_NO, INVOICE_DATE, INVOICE_AMT, HSN_CODE, ITEM_ID, TAXABLE_VALUE, GST_RATE, IGST_RATE, IGST_AMT, CGST_RATE, CGST_AMT, SGST_RATE, SGST_AMT, CESS, POS, DIFF_PER_TAX_RATE, SUPPLY_COVER, COMMON_CREDIT, GRN_NO, GRN_DATE, QTY, UNIT, RATE, TOTAL_AMOUNT, NET_AMOUNT
                Object[] rowData = new Object[30];
                // rowData[0]=rs.getString("");
                rowData[0] = cnt++;
                rowData[1] = rs.getString("INDENT_NO");
                rowData[2] = EITLERPGLOBAL.formatDate(rs.getString("INDENT_DATE"));             
                rowData[3] = rs.getString("FOR_DEPT_ID");
                rowData[4] = data.getStringValueFromDB("SELECT USER_NAME FROM DINESHMILLS.D_COM_USER_MASTER WHERE USER_ID="+rs.getString("CREATED_BY")+"");
                rowData[5] = EITLERPGLOBAL.formatDate(rs.getString("APPROVED_DATE"));
                rowData[6] = rs.getString("ITEM_CODE");                
                rowData[7] = rs.getString("ITEM_EXTRA_DESC");
                rowData[8] = rs.getString("DEPT_DESC");
                rowData[9] = rs.getString("ITEM_DESCRIPTION");
                rowData[10] = rs.getString("QTY");                
                rowData[11] = rs.getString("PO_QTY");
                rowData[12] = rs.getString("REF_DOC");
                rowData[13] = rs.getString("LAST_PO_NO");
                rowData[14] = EITLERPGLOBAL.formatDate(rs.getString("LAST_PO_DATE"));
                rowData[15] = rs.getString("SUPP_NAME");
                 
                DataModelPendingIndent.addRow(rowData);
                rs.next();
            }
            rs.close();
            //Object[] rowData2 = new Object[25];
            //DataModelB2BMIR.addRow(rowData2);
            
        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
                
        
        
        
        
    }
    
    public void GeneratePendingPOData(String ORDER_BY) {
        
        try {
            String fromDate="";
            if(txtFromDate.getText().trim().equals("")){
                fromDate="2020-01-01";
            }else{
                fromDate=EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
            }
            String toDate="";
            if(txtToDate.getText().trim().equals("")){
                toDate="2023-03-31";
            }else{
                toDate=EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());
            }
            String strSQL2 = "SELECT "
                    + "A.PO_NO,A.PO_DATE, "
                    + "B.DEPT_ID,A.SUPP_ID, "
                    + "B.ITEM_ID,B.ITEM_DESC,D.ITEM_DESCRIPTION,B.DEPT_ID,(B.QTY-(SUM(IF(N.RECEIVED_QTY IS NULL,0,N.RECEIVED_QTY) - IF(N.REJECTED_QTY IS NULL,0,N.REJECTED_QTY))+  "
                    + "SUM(IF(M.RECEIVED_QTY IS NULL,0,M.RECEIVED_QTY) - IF(M.REJECTED_QTY IS NULL,0,M.REJECTED_QTY)))) BAL , E.DESC, "
                    + "C.DEPT_DESC,F.USER_ID,F.USER_NAME,B.SR_NO,B.DELIVERY_DATE,A.PURPOSE,A.REMARKS, "
                    + "DATE_FORMAT('"+fromDate+"','%d/%m/%Y') FDATE,DATE_FORMAT('"+toDate+"','%d/%m/%Y') TDATE, "
                    + "G.SUPP_NAME, SUM(IF(N.RECEIVED_QTY IS NULL,0,N.RECEIVED_QTY) - IF(N.REJECTED_QTY IS NULL,0,N.REJECTED_QTY))+  "
                    + "SUM(IF(M.RECEIVED_QTY IS NULL,0,M.RECEIVED_QTY) - IF(M.REJECTED_QTY IS NULL,0,M.REJECTED_QTY)) AS RECD_QTY, "
                    + "B.QTY,D.TOLERANCE_LIMIT "
                    + "FROM "
                    + "D_PUR_PO_HEADER A "
                    + "LEFT JOIN D_COM_USER_MASTER AS F ON (A.COMPANY_ID = F.COMPANY_ID AND A.BUYER = F.USER_ID) "
                    + "LEFT JOIN D_COM_SUPP_MASTER AS G ON (A.COMPANY_ID = G.COMPANY_ID AND A.SUPP_ID = G.SUPPLIER_CODE), "
                    + "D_PUR_PO_DETAIL B "
                    + "LEFT JOIN D_COM_DEPT_MASTER AS C ON (B.COMPANY_ID = C.COMPANY_ID AND B.DEPT_ID =C.DEPT_ID) "
                    + "LEFT JOIN D_INV_ITEM_MASTER AS D ON (B.COMPANY_ID = D.COMPANY_ID AND B.ITEM_ID = D.ITEM_ID) "
                    + "LEFT JOIN D_COM_PARAMETER_MAST AS E ON (B.COMPANY_ID = E.COMPANY_ID AND E.PARA_ID = 'UNIT' AND B.UNIT = E.PARA_CODE) "
                    + "LEFT JOIN D_INV_JOB_DETAIL N ON (N.PO_NO=B.PO_NO AND N.PO_SR_NO=B.SR_NO AND N.PO_TYPE=B.PO_TYPE AND N.JOB_NO IN (SELECT JOB_NO FROM D_INV_JOB_HEADER WHERE JOB_NO=N.JOB_NO  AND APPROVED=1 AND CANCELLED=0)) "
                    + "LEFT JOIN D_INV_MIR_DETAIL M ON (M.PO_NO=B.PO_NO AND M.PO_SR_NO=B.SR_NO AND M.PO_TYPE=B.PO_TYPE AND M.MIR_NO IN (SELECT MIR_NO FROM D_INV_MIR_HEADER WHERE MIR_NO=M.MIR_NO  AND APPROVED=1 AND CANCELLED=0)) "
                    + "WHERE "
                    + "B.COMPANY_ID =2 AND "
                    + "A.COMPANY_ID = B.COMPANY_ID AND "
                    + "B.PO_NO = A.PO_NO AND "
                    + "A.APPROVED =1 AND "
                    + "A.CANCELLED=0 AND  "
                    + "A.PO_DATE >= '"+fromDate+"' AND "
                    + "A.PO_DATE <= '"+toDate+"'   "
                    + "GROUP BY B.PO_NO,B.PO_TYPE,B.SR_NO "
                    + "HAVING ROUND(B.QTY,2) -ROUND((SUM(IF(N.RECEIVED_QTY IS NULL,0,N.RECEIVED_QTY) - IF(N.REJECTED_QTY IS NULL,0,N.REJECTED_QTY))+ "
                    + "SUM(IF(M.RECEIVED_QTY IS NULL,0,M.RECEIVED_QTY) - IF(M.REJECTED_QTY IS NULL,0,M.REJECTED_QTY))),2)  "
                    + "> ((B.QTY*D.TOLERANCE_LIMIT) / 100) "
                    + "ORDER BY F.USER_ID,B.DEPT_ID,A.PO_NO,B.SR_NO";
            
            System.out.println("SQL "+strSQL2);
            
            ResultSet rs = data.getResult(strSQL2);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {
//SR_N0, GSTIN_UIN, SUPP_ID, TRADE_NAME, TYPE, INVOICE_NO, INVOICE_DATE, INVOICE_AMT, HSN_CODE, ITEM_ID, TAXABLE_VALUE, GST_RATE, IGST_RATE, IGST_AMT, CGST_RATE, CGST_AMT, SGST_RATE, SGST_AMT, CESS, POS, DIFF_PER_TAX_RATE, SUPPLY_COVER, COMMON_CREDIT, GRN_NO, GRN_DATE, QTY, UNIT, RATE, TOTAL_AMOUNT, NET_AMOUNT
                Object[] rowData = new Object[30];
                // rowData[0]=rs.getString("");
                rowData[0] = cnt++;
                rowData[1] = rs.getString("PO_NO");
                rowData[2] = EITLERPGLOBAL.formatDate(rs.getString("PO_DATE"));
                rowData[3] = rs.getString("DEPT_ID");
                rowData[4] = rs.getString("SUPP_ID");
                rowData[5] = rs.getString("ITEM_ID");
                rowData[6] = rs.getString("ITEM_DESC");                
                rowData[7] = rs.getString("ITEM_DESCRIPTION");
                rowData[8] = rs.getString("DEPT_ID");
                rowData[9] = rs.getString("BAL");
                rowData[10] = rs.getString("DESC");                
                rowData[11] = rs.getString("DEPT_DESC");
                rowData[12] = rs.getString("USER_ID");
                rowData[13] = rs.getString("USER_NAME");
                rowData[14] = rs.getString("SR_NO");                
                rowData[15] = EITLERPGLOBAL.formatDate(rs.getString("DELIVERY_DATE"));             
                rowData[16] = rs.getString("PURPOSE");
                rowData[17] = rs.getString("REMARKS");               
                
                rowData[18] = rs.getString("FDATE");                
                rowData[19] = rs.getString("TDATE");
                rowData[20] = rs.getString("SUPP_NAME");
                rowData[21] = rs.getString("RECD_QTY");
                rowData[22] = rs.getString("QTY");                
                rowData[23] = rs.getString("TOLERANCE_LIMIT");   
                DataModelPendingPO.addRow(rowData);
                rs.next();
            }
            rs.close();
            //Object[] rowData2 = new Object[25];
            //DataModelB2BMIR.addRow(rowData2);
            
        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
                
        
        
        
        
    }
    
    public void GenerateMaterialMaster(String ORDER_BY) {
        
        try {
            String fromDate="";
            if(txtFromDate.getText().trim().equals("")){
                fromDate="2020-01-01";
            }else{
                fromDate=EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
            }
            String strSQL2 = "SELECT ITEM_ID,ITEM_DESCRIPTION,UOM,MATGROUP,CATEGORY_DESC,LOCATION_ID,HSN_SAC_CODE FROM\n"
                    + "(SELECT ITEM_ID,ITEM_DESCRIPTION,\n"
                    + "(SELECT `DESC` FROM DINESHMILLS.D_COM_PARAMETER_MAST WHERE COMPANY_ID=2 AND PARA_ID = 'UNIT' \n"
                    + "AND PARA_CODE=UNIT) UOM,GROUP_CODE,\n"
                    + "CASE WHEN GROUP_CODE IS NULL THEN '' WHEN GROUP_CODE=0 THEN '' ELSE (SELECT `DESC`  FROM D_COM_PARAMETER_MAST WHERE  PARA_ID='ITEM_TYPE' AND PARA_CODE=GROUP_CODE) END MATGROUP,\n"
                    + "WAREHOUSE_ID,\n"
                    + "CATEGORY_ID,LOCATION_ID,HSN_SAC_CODE FROM DINESHMILLS.D_INV_ITEM_MASTER WHERE APPROVED=1 AND CANCELLED=0 ) A\n"
                    + "LEFT JOIN\n"
                    + "(SELECT CATEGORY_ID,CATEGORY_DESC as CATEGORY_DESC FROM D_INV_CATEGORY_MASTER WHERE COMPANY_ID=2  AND CATEGORY_ID <> 2 UNION SELECT CATEGORY_ID,CATEGORY_NAME as CATEGORY_DESC FROM D_INV_ITEM_CATEGORY WHERE COMPANY_ID=2 ) B\n"
                    + "ON A.CATEGORY_ID=B.CATEGORY_ID ORDER BY MATGROUP,ITEM_ID";
            
            System.out.println("SQL "+strSQL2);
            
            ResultSet rs = data.getResult(strSQL2);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {
//SR_N0, GSTIN_UIN, SUPP_ID, TRADE_NAME, TYPE, INVOICE_NO, INVOICE_DATE, INVOICE_AMT, HSN_CODE, ITEM_ID, TAXABLE_VALUE, GST_RATE, IGST_RATE, IGST_AMT, CGST_RATE, CGST_AMT, SGST_RATE, SGST_AMT, CESS, POS, DIFF_PER_TAX_RATE, SUPPLY_COVER, COMMON_CREDIT, GRN_NO, GRN_DATE, QTY, UNIT, RATE, TOTAL_AMOUNT, NET_AMOUNT
                Object[] rowData = new Object[30];
                // rowData[0]=rs.getString("");
                rowData[0] = cnt++;
                rowData[1] = rs.getString("ITEM_ID");
                rowData[2] = rs.getString("ITEM_DESCRIPTION");
                rowData[3] = rs.getString("UOM");
                rowData[4] = rs.getString("MATGROUP");
                rowData[5] = rs.getString("CATEGORY_DESC");
                rowData[6] = rs.getString("LOCATION_ID");                
                rowData[7] = rs.getString("HSN_SAC_CODE");
                
                DataModelMaterialMaster.addRow(rowData);
                rs.next();
            }
            rs.close();
            //Object[] rowData2 = new Object[25];
            //DataModelB2BMIR.addRow(rowData2);
            
        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
                
        
        
        
        
    }
    
    public void GenerateVendorMasterList(String ORDER_BY) {
        
        try {
            String fromDate="";
            if(txtFromDate.getText().trim().equals("")){
                fromDate="2020-01-01";
            }else{
                fromDate=EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
            }
            String strSQL2 = "SELECT SUPPLIER_CODE, SUPP_NAME,ATTN,CONTACT_PERSON_1, CONTACT_PERSON_2, PHONE_O,PHONE_RES,FAX_NO, MOBILE_NO,EMAIL_ADD,COUNTRY, STATE, CITY, ADDRESS,PINCODE,GSTIN_NO, PAN_NO,MSMED,PAYMENTTERM,PAYMENT_DAYS,PROPOSED_ITEM, MAIN_ACCOUNT_CODE FROM\n"
                    + "(SELECT SUPPLIER_CODE, SUPP_NAME,ATTN,CONTACT_PERSON_1, COALESCE(CONTACT_PERSON_2,'') CONTACT_PERSON_2, \n"
                    + "COALESCE(PHONE_O,'') PHONE_O, COALESCE(PHONE_RES,'') PHONE_RES, COALESCE(FAX_NO,'') FAX_NO, COALESCE(MOBILE_NO,'') MOBILE_NO, COALESCE(EMAIL_ADD,'') EMAIL_ADD\n"
                    + ",COUNTRY, COALESCE(STATE,'') STATE,COALESCE(CITY,'') CITY,CONCAT(ADD1,', ', ADD2,', ', ADD3) ADDRESS, PINCODE,GSTIN_NO, PAN_NO, CASE WHEN MSME=1 THEN 'YES' ELSE 'NO' END MSMED,PAYMENT_DAYS, PAYMENT_TERM_CODE, PROPOSED_ITEM, MAIN_ACCOUNT_CODE FROM DINESHMILLS.D_COM_SUPP_MASTER \n"
                    + "WHERE COMPANY_ID=2 AND APPROVED=1 AND CANCELLED=0) A\n"
                    + "LEFT JOIN\n"
                    + "(SELECT PARA_CODE,`desc` AS PAYMENTTERM FROM DINESHMILLS.D_COM_PARAMETER_MAST WHERE COMPANY_ID=2 AND PARA_ID='PAYMENT_CODE'\n"
                    + "UNION ALL\n"
                    + "SELECT '0','' FROM DUAL) B\n"
                    + "ON A.PAYMENT_TERM_CODE=B.PARA_CODE ORDER BY SUPPLIER_CODE ";
            
            System.out.println("SQL "+strSQL2);
            
            ResultSet rs = data.getResult(strSQL2);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {
//SR_N0, GSTIN_UIN, SUPP_ID, TRADE_NAME, TYPE, INVOICE_NO, INVOICE_DATE, INVOICE_AMT, HSN_CODE, ITEM_ID, TAXABLE_VALUE, GST_RATE, IGST_RATE, IGST_AMT, CGST_RATE, CGST_AMT, SGST_RATE, SGST_AMT, CESS, POS, DIFF_PER_TAX_RATE, SUPPLY_COVER, COMMON_CREDIT, GRN_NO, GRN_DATE, QTY, UNIT, RATE, TOTAL_AMOUNT, NET_AMOUNT
                Object[] rowData = new Object[30];
                // rowData[0]=rs.getString("");
                rowData[0] = cnt++;
                //MAIN_ACCOUNT_CODE
                rowData[1] = rs.getString("SUPPLIER_CODE");
                rowData[2] = rs.getString("SUPP_NAME");
                rowData[3] = rs.getString("ATTN");
                rowData[4] = rs.getString("CONTACT_PERSON_1");
                rowData[5] = rs.getString("CONTACT_PERSON_2");
                rowData[6] = rs.getString("PHONE_O");                
                rowData[7] = rs.getString("PHONE_RES");
                rowData[8] = rs.getString("FAX_NO");             
                rowData[9] = rs.getString("MOBILE_NO");
                rowData[10] = rs.getString("EMAIL_ADD");                
                rowData[11] = rs.getString("COUNTRY");
                rowData[12] = rs.getString("STATE");
                rowData[13] = rs.getString("CITY");
                rowData[14] = rs.getString("ADDRESS");
                rowData[15] = rs.getString("PINCODE");
                rowData[16] = rs.getString("GSTIN_NO");   
                rowData[17] = rs.getString("PAN_NO");
                rowData[18] = rs.getString("MSMED");
                rowData[19] = rs.getString("PAYMENTTERM");
                rowData[20] = rs.getString("PAYMENT_DAYS");
                rowData[21] = rs.getString("PROPOSED_ITEM");   
                DataModelVendorMaster.addRow(rowData);
                rs.next();
            }
            rs.close();
            //Object[] rowData2 = new Object[25];
            //DataModelB2BMIR.addRow(rowData2);
            
        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
                
        
        
        
        
    }
    
    public void GenerateReceiptChecklistData(String ORDER_BY) {
        
        try {
            String fromDate="",toDate="";
            if(txtFromDate.getText().trim().equals("")){
                fromDate="2018-04-01";
            }else{
                fromDate=EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
            }
            if(txtToDate.getText().trim().equals("")){
                toDate="2023-03-31";
            }else{
                toDate=EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());
            }
            String strSQL2 = "SELECT B.GRN_NO,GRN_DATE,B.SR_NO,B.MIR_NO,G.MIR_DATE,\n"
                    + "DEPT_DESC,B.ITEM_ID,D.ITEM_DESCRIPTION,B.PO_NO,H.PO_DATE,RECEIVED_QTY,E.DESC UNITDESC,RATE,B.TOTAL_AMOUNT,A.SUPP_ID,F.SUPP_NAME,A.INVOICE_NO,A.INVOICE_DATE\n"
                    + "FROM DINESHMILLS.D_INV_GRN_DETAIL B\n"
                    + "LEFT JOIN DINESHMILLS.D_INV_GRN_HEADER A ON A.GRN_NO=B.GRN_NO\n"
                    + "LEFT JOIN DINESHMILLS.D_COM_DEPT_MASTER AS C ON (B.COMPANY_ID = C.COMPANY_ID AND B.DEPT_ID = C.DEPT_ID)\n"
                    + "LEFT JOIN DINESHMILLS.D_INV_ITEM_MASTER AS D ON (B.COMPANY_ID = D.COMPANY_ID AND B.ITEM_ID = D.ITEM_ID)\n"
                    + "LEFT JOIN DINESHMILLS.D_COM_PARAMETER_MAST AS E ON (B.COMPANY_ID = E.COMPANY_ID AND E.PARA_ID = 'UNIT' AND B.UNIT = E.PARA_CODE)\n"
                    + "LEFT JOIN DINESHMILLS.D_COM_SUPP_MASTER AS F ON (A.COMPANY_ID=E.COMPANY_ID AND A.SUPP_ID=F.SUPPLIER_CODE)\n"
                    + "LEFT JOIN DINESHMILLS.D_INV_MIR_HEADER AS G ON (B.COMPANY_ID=G.COMPANY_ID AND B.MIR_NO=G.MIR_NO)\n"
                    + "LEFT JOIN DINESHMILLS.D_PUR_PO_HEADER AS H ON (B.COMPANY_ID=H.COMPANY_ID AND B.PO_NO=H.PO_NO)\n"
                    + "WHERE \n"
                    + "A.GRN_NO=B.GRN_NO AND\n"
                    + "A.APPROVED=1 AND A.CANCELLED=0 \n"
                    + "AND GRN_DATE>='"+fromDate+"' AND GRN_DATE<='"+toDate+"'\n"
                    + "ORDER BY A.GRN_DATE,B.SR_NO";
            
            System.out.println("SQL "+strSQL2);
            
            ResultSet rs = data.getResult(strSQL2);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {
//SR_N0, GSTIN_UIN, SUPP_ID, TRADE_NAME, TYPE, INVOICE_NO, INVOICE_DATE, INVOICE_AMT, HSN_CODE, ITEM_ID, TAXABLE_VALUE, GST_RATE, IGST_RATE, IGST_AMT, CGST_RATE, CGST_AMT, SGST_RATE, SGST_AMT, CESS, POS, DIFF_PER_TAX_RATE, SUPPLY_COVER, COMMON_CREDIT, GRN_NO, GRN_DATE, QTY, UNIT, RATE, TOTAL_AMOUNT, NET_AMOUNT
                Object[] rowData = new Object[30];
                // rowData[0]=rs.getString("");
                rowData[0] = cnt++;
                rowData[1] = rs.getString("GRN_NO");
                rowData[2] = EITLERPGLOBAL.formatDate(rs.getString("GRN_DATE"));             
                rowData[3] = rs.getString("SR_NO");
                rowData[4] = rs.getString("MIR_NO");
                rowData[5] = EITLERPGLOBAL.formatDate(rs.getString("MIR_DATE"));                            
                rowData[6] = rs.getString("DEPT_DESC");
                rowData[7] = rs.getString("ITEM_ID");             
                rowData[8] = rs.getString("ITEM_DESCRIPTION");
                rowData[9] = rs.getString("PO_NO");                
                rowData[10] = EITLERPGLOBAL.formatDate(rs.getString("PO_DATE"));
                rowData[11] = rs.getString("RECEIVED_QTY");
                rowData[12] = rs.getString("UNITDESC");                
                rowData[13] = rs.getString("RATE");
                rowData[14] = rs.getString("TOTAL_AMOUNT");   
                rowData[15] = rs.getString("SUPP_ID");   
                rowData[16] = rs.getString("SUPP_NAME");   
                rowData[17] = rs.getString("INVOICE_NO");   
                rowData[18] = EITLERPGLOBAL.formatDate(rs.getString("INVOICE_DATE"));   
                
                DataModelReceiptChecklist.addRow(rowData);
                rs.next();
            }
            rs.close();
            //Object[] rowData2 = new Object[25];
            //DataModelB2BMIR.addRow(rowData2);
            
        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
                
        
        
        
        
    }
    
    
    
    
}