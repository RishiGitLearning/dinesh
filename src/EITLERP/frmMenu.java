/*
 * frmMenu.java
 *
 * Created on April 6, 2004, 4:00 PM
 */

package EITLERP;

/**
 *
 * @author  nhpatel
 */
import java.awt.*;

import javax.swing.tree.*;
import javax.swing.*;
import java.util.*;
import java.net.*;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import EITLERP.Purchase.*;
import EITLERP.Stores.*;
import SDMLATTPAY.IncrementProposal.frmChangeSuperPassword;
import SDMLATTPAY.IncrementProposal.frmSuperPassword;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.sql.ResultSet;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.Timer;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class frmMenu extends javax.swing.JApplet{
    
    private HashMap colTree=new HashMap();
    private EITLTableModel DataModel;
    
    /** Creates new form frmMenu */
    public frmMenu() {
        setSize(800,770);
        EITLERPGLOBAL.LoggedIn=false;
        initComponents();
        
        Dimension d=Toolkit.getDefaultToolkit().getScreenSize();
        setBounds(0,0,d.width,d.height);
        
        lblTop.setIcon(EITLERPGLOBAL.getImage("TITLE"));
        ImageIcon img_ico = new ImageIcon(EITLERPGLOBAL.getImage("RIGHTPANE").getImage().getScaledInstance(438, 300, Image.SCALE_DEFAULT));
        lblRight.setIcon(img_ico);
        //lblDiwali.setIcon(EITLERPGLOBAL.getImage("DIWALI"));
        int mbirthday = data.getIntValueFromDB("SELECT COUNT(*) FROM SDMLATTPAY.ATTPAY_EMPMST WHERE DAY(EMP_BIRTH_DATE)=DAY(CURDATE()) "
                + "AND MONTH(EMP_BIRTH_DATE)=MONTH(CURDATE()) AND EMP_LEFT_DATE='0000-00-00'  "
                + "AND EMP_MAIN_CATEGORY IN(2,5,9) ");
        if (mbirthday > 0) {
            lblRight.setBounds(10, 1, 438, 300); 
            //lblRight.set
            GenerateBirthDay();
        } else {
            lblRight.setBounds(0, 0, 500, 500);
            jScrollPane1.setVisible(false);
            
        }
        
        Tree.getSelectionModel().setSelectionMode(
        TreeSelectionModel.SINGLE_TREE_SELECTION);
        
        GenerateMenu();
        
        
        if(EITLERPGLOBAL.gUserID==361 || EITLERPGLOBAL.gUserID==352 || EITLERPGLOBAL.gUserID==136 || EITLERPGLOBAL.gUserID==318 || EITLERPGLOBAL.gUserID==329 || EITLERPGLOBAL.gUserID==331 || EITLERPGLOBAL.gUserID==28 || EITLERPGLOBAL.gUserID==394 || EITLERPGLOBAL.gUserID==280)
        {
            ActionListener task = new ActionListener() {
                public void actionPerformed(ActionEvent e) {                
                    AppletFrame.startApplet("EITLERP.FeltSales.SalesFollowup.FrmSalesFollowupEntry", "Sales Followup");      
                }
            };
            Timer timer = new Timer(500, task);
            timer.setRepeats(false);
            timer.start();
        }
        
        
        ActionListener task = new ActionListener() {
            public void actionPerformed(ActionEvent e) {                
                if(EITLERPGLOBAL.gUserID==72 || EITLERPGLOBAL.gUserID==11 || EITLERPGLOBAL.gUserID==243 || EITLERPGLOBAL.gUserID==308 ){
                
                }else{
                    AppletFrame.startApplet("EITLERP.frmDelegateAuthority", "SDML");                      
                   // AppletFrame.startApplet("EITLERP.frmYourDelegationAuthority", "");      
                }
            }
        };
        Timer timer = new Timer(2000, task);
        timer.setRepeats(false);
        timer.start();
        
        
        
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        Tree = new javax.swing.JTree();
        jPanel2 = new javax.swing.JPanel();
        lblTop = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        lblRight = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblbirthday = new javax.swing.JTable();
        lblDiwali = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(123, 137, 166));
        jPanel1.setLayout(null);

        Tree.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TreeKeyPressed(evt);
            }
        });
        Tree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OnNodeSelected(evt);
            }
        });
        jScrollPane5.setViewportView(Tree);

        jPanel1.add(jScrollPane5);
        jScrollPane5.setBounds(10, 70, 390, 480);

        jPanel2.setBackground(new java.awt.Color(123, 137, 166));
        jPanel2.add(lblTop);

        jPanel1.add(jPanel2);
        jPanel2.setBounds(10, 2, 800, 66);

        jPanel3.setOpaque(false);
        jPanel3.setLayout(null);

        lblRight.setIconTextGap(0);
        jPanel3.add(lblRight);
        lblRight.setBounds(196, 5, 0, 0);

        tblbirthday.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblbirthday);

        jPanel3.add(jScrollPane1);
        jScrollPane1.setBounds(0, 310, 460, 170);

        jPanel1.add(jPanel3);
        jPanel3.setBounds(400, 70, 460, 480);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(-10, 0, 860, 552);
        getContentPane().add(lblDiwali);
        lblDiwali.setBounds(0, 552, 850, 150);
    }// </editor-fold>//GEN-END:initComponents
    
    private void TreeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TreeKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==10) {
            
            EITLERPGLOBAL.ChangeCursorToWait(this);
            //find the last selected node
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) Tree.getLastSelectedPathComponent();
            
            if(node==null) return;
            
            EITLTreeModel aObject=(EITLTreeModel) node.getUserObject();
            String Key=aObject.Key;
            String strClass="";
            
            strClass=clsMenu.getClassName(Integer.parseInt(Key));
            
            int ModuleID= clsMenu.getModuleID(EITLERPGLOBAL.gCompanyID,Integer.parseInt(Key));
            //In case of Purchase Order following code was needed.
            
            Object ObjApplet=null;
            frmPOGen theObject=null;
            frmPOAmendGen theAmendObject=null;
            
            switch(ModuleID) {
                case 21:
                    //ObjApplet=new frmPOGen(1);
                    theObject=new frmPOGen();
                    theObject.POType=1;
                    ObjApplet=theObject;
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break; 
                case 22:
                    //ObjApplet=new frmPOGen(2);
                    //ObjApplet=new frmPOGen();
                    theObject=new frmPOGen();
                    theObject.POType=2;
                    ObjApplet=theObject;
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 23:
                    //ObjApplet=new frmPOGen(3);
                    //ObjApplet=new frmPOGen();
                    theObject=new frmPOGen();
                    theObject.POType=3;
                    ObjApplet=theObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 24:
                    //ObjApplet=new frmPOGen(4);
                    //ObjApplet=new frmPOGen();
                    theObject=new frmPOGen();
                    theObject.POType=4;
                    ObjApplet=theObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 25:
                    //ObjApplet=new frmPOGen(5);
                    //ObjApplet=new frmPOGen();
                    theObject=new frmPOGen();
                    theObject.POType=5;
                    ObjApplet=theObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 26:
                    //ObjApplet=new frmPOGen(6);
                    //ObjApplet=new frmPOGen();
                    theObject=new frmPOGen();
                    theObject.POType=6;
                    ObjApplet=theObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 27:
                    //ObjApplet=new frmPOGen(7);
                    //ObjApplet=new frmPOGen();
                    theObject=new frmPOGen();
                    theObject.POType=7;
                    ObjApplet=theObject;
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                    
                case 28:
                    //ObjApplet=new frmPOAmendGen(1);
                    //ObjApplet=new frmPOAmendGen();
                    theAmendObject=new frmPOAmendGen();
                    theAmendObject.POType=1;
                    ObjApplet=theAmendObject;
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 29:
                    //ObjApplet=new frmPOAmendGen(2);
                    //ObjApplet=new frmPOAmendGen();
                    theAmendObject=new frmPOAmendGen();
                    theAmendObject.POType=2;
                    ObjApplet=theAmendObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 30:
                    //ObjApplet=new frmPOAmendGen(3);
                    //ObjApplet=new frmPOAmendGen();
                    theAmendObject=new frmPOAmendGen();
                    theAmendObject.POType=3;
                    ObjApplet=theAmendObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 31:
                    //ObjApplet=new frmPOAmendGen(4);
                    //ObjApplet=new frmPOAmendGen();
                    theAmendObject=new frmPOAmendGen();
                    theAmendObject.POType=4;
                    ObjApplet=theAmendObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 32:
                    //ObjApplet=new frmPOAmendGen(5);
                    //ObjApplet=new frmPOAmendGen();
                    theAmendObject=new frmPOAmendGen();
                    theAmendObject.POType=5;
                    ObjApplet=theAmendObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 33:
                    //ObjApplet=new frmPOAmendGen(6);
                    //ObjApplet=new frmPOAmendGen();
                    theAmendObject=new frmPOAmendGen();
                    theAmendObject.POType=6;
                    ObjApplet=theAmendObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 34:
                    //ObjApplet=new frmPOAmendGen(7);
                    //ObjApplet=new frmPOAmendGen();
                    theAmendObject=new frmPOAmendGen();
                    theAmendObject.POType=7;
                    ObjApplet=theAmendObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 168:
                    //ObjApplet=new frmPOAmendGen(9);
                    //ObjApplet=new frmPOAmendGen();
                    theAmendObject=new frmPOAmendGen();
                    theAmendObject.POType=9;
                    ObjApplet=theAmendObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 153:
                    //ObjApplet=new frmPOGen(1);
                    theObject=new frmPOGen();
                    theObject.POType=9;
                    ObjApplet=theObject;
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                default:
                    if(strClass.equals("")) {
                        //Nothing to do
                    }
                    else {
                        if (strClass.equalsIgnoreCase("SDMLATTPAY.IncrementProposal.FrmIncrementManagementProposal")) {
                            checkacess(strClass.trim());
                        } else {
                            AppletFrame.startApplet(strClass.trim(),Tree.getLastSelectedPathComponent().toString());
                        }
                    }
                    break;
            }
            
        }
        
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }//GEN-LAST:event_TreeKeyPressed
    
    private void OnNodeSelected(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OnNodeSelected
        // Add your handling code here:
        if(evt.getClickCount()==2) //If Double Clicked then
        {
            EITLERPGLOBAL.ChangeCursorToWait(this);
            //find the last selected node
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) Tree.getLastSelectedPathComponent();
            
            if(node==null) return;
            
            EITLTreeModel aObject=(EITLTreeModel) node.getUserObject();
            String Key=aObject.Key;
            String strClass="";
            
            strClass=clsMenu.getClassName(Integer.parseInt(Key));
            
            int ModuleID= clsMenu.getModuleID(EITLERPGLOBAL.gCompanyID,Integer.parseInt(Key));
            //In case of Purchase Order following code was needed.
            
            Object ObjApplet=null;
            frmPOGen theObject=null;
            frmPOAmendGen theAmendObject=null;
            
            switch(ModuleID) {
                case 21:
                    //ObjApplet=new frmPOGen(1);
                    theObject=new frmPOGen();
                    theObject.POType=1;
                    ObjApplet=theObject;
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 22:
                    //ObjApplet=new frmPOGen(2);
                    //ObjApplet=new frmPOGen();
                    theObject=new frmPOGen();
                    theObject.POType=2;
                    ObjApplet=theObject;
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 23:
                    //ObjApplet=new frmPOGen(3);
                    //ObjApplet=new frmPOGen();
                    theObject=new frmPOGen();
                    theObject.POType=3;
                    ObjApplet=theObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 24:
                    //ObjApplet=new frmPOGen(4);
                    //ObjApplet=new frmPOGen();
                    theObject=new frmPOGen();
                    theObject.POType=4;
                    ObjApplet=theObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 25:
                    //ObjApplet=new frmPOGen(5);
                    //ObjApplet=new frmPOGen();
                    theObject=new frmPOGen();
                    theObject.POType=5;
                    ObjApplet=theObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 26:
                    //ObjApplet=new frmPOGen(6);
                    //ObjApplet=new frmPOGen();
                    theObject=new frmPOGen();
                    theObject.POType=6;
                    ObjApplet=theObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                    
                case 27:
                    //ObjApplet=new frmPOGen(7);
                    //ObjApplet=new frmPOGen();
                    theObject=new frmPOGen();
                    theObject.POType=7;
                    ObjApplet=theObject;
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 153:
                    //ObjApplet=new frmPOGen(6);
                    //ObjApplet=new frmPOGen();
                    theObject=new frmPOGen();
                    theObject.POType=9;
                    ObjApplet=theObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 28:
                    //ObjApplet=new frmPOAmendGen(1);
                    //ObjApplet=new frmPOAmendGen();
                    theAmendObject=new frmPOAmendGen();
                    theAmendObject.POType=1;
                    ObjApplet=theAmendObject;
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 29:
                    //ObjApplet=new frmPOAmendGen(2);
                    //ObjApplet=new frmPOAmendGen();
                    theAmendObject=new frmPOAmendGen();
                    theAmendObject.POType=2;
                    ObjApplet=theAmendObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 30:
                    //ObjApplet=new frmPOAmendGen(3);
                    //ObjApplet=new frmPOAmendGen();
                    theAmendObject=new frmPOAmendGen();
                    theAmendObject.POType=3;
                    ObjApplet=theAmendObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 31:
                    //ObjApplet=new frmPOAmendGen(4);
                    //ObjApplet=new frmPOAmendGen();
                    theAmendObject=new frmPOAmendGen();
                    theAmendObject.POType=4;
                    ObjApplet=theAmendObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 32:
                    //ObjApplet=new frmPOAmendGen(5);
                    //ObjApplet=new frmPOAmendGen();
                    theAmendObject=new frmPOAmendGen();
                    theAmendObject.POType=5;
                    ObjApplet=theAmendObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 33:
                    //ObjApplet=new frmPOAmendGen(6);
                    //ObjApplet=new frmPOAmendGen();
                    theAmendObject=new frmPOAmendGen();
                    theAmendObject.POType=6;
                    ObjApplet=theAmendObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 34:
                    //ObjApplet=new frmPOAmendGen(7);
                    //ObjApplet=new frmPOAmendGen();
                    theAmendObject=new frmPOAmendGen();
                    theAmendObject.POType=7;
                    ObjApplet=theAmendObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                case 168:
                    //ObjApplet=new frmPOAmendGen(7);
                    //ObjApplet=new frmPOAmendGen();
                    theAmendObject=new frmPOAmendGen();
                    theAmendObject.POType=9;
                    ObjApplet=theAmendObject;
                    
                    AppletFrame.startAppletByObject("", "SDML ERP", ObjApplet);
                    break;
                default:
                    if(strClass.equals("")) {
                        //Nothing to do
                    }
                    else {
                        if (strClass.equalsIgnoreCase("SDMLATTPAY.IncrementProposal.FrmIncrementManagementProposal")) {
                            checkacess(strClass.trim());
                        } else {
                            AppletFrame.startApplet(strClass.trim(), Tree.getLastSelectedPathComponent().toString());
                        }
                    }
                    break;
            }
            
            EITLERPGLOBAL.ChangeCursorToDefault(this);
        }
    }//GEN-LAST:event_OnNodeSelected
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree Tree;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblDiwali;
    private javax.swing.JLabel lblRight;
    private javax.swing.JLabel lblTop;
    private javax.swing.JTable tblbirthday;
    // End of variables declaration//GEN-END:variables
    
    public void checkacess(String strClass) {
        try {
            ResultSet ruser = data.getResult("SELECT USER()");
            ruser.first();
            String str = ruser.getString(1);
            String str_split[] = str.split("@");
            int validuser = 0;
            validuser = data.getIntValueFromDB("SELECT COUNT(*) FROM SDMLATTPAY.HOD WHERE HOD_USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND HOD_IP='" + str_split[1] + "'");
            if (validuser == 0) {
                JOptionPane.showMessageDialog(this, "You can not acess this system...", "ERROR", JOptionPane.ERROR_MESSAGE);
            } else {
                System.out.println("SELECT COUNT(*) FROM SDMLATTPAY.HOD H "
                        + "WHERE HOD_USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND HOD_PASSWORD_YEAR=YEAR('" + EITLERPGLOBAL.FinFromDateDB + "')");
                if (data.getIntValueFromDB("SELECT COUNT(*) FROM SDMLATTPAY.HOD H "
                        + "WHERE HOD_USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND HOD_PASSWORD_YEAR=YEAR('" + EITLERPGLOBAL.FinFromDateDB + "')") > 0) {
                    //AppletFrame.startApplet("SDMLATTPAY.IncrementProposal.frmSuperPassword", "SDML Employee Management Increment Proposal");
                    frmSuperPassword objDialog = new frmSuperPassword();
                    objDialog.ShowDialog();
                    if (objDialog.cancelled) {
                        JOptionPane.showMessageDialog(null, "Enter Password before logging into Increment Proposal system");
                    }
                } else {
                    frmChangeSuperPassword objDialog = new frmChangeSuperPassword();
                    objDialog.ShowDialog();
                    if (objDialog.cancelled) {
                        JOptionPane.showMessageDialog(null, "Set Password before logging into Increment Proposal system");
                    }
                }
                //AppletFrame.startApplet(strClass.trim(), "SDML Employee Management Increment Proposal");
            }
        } catch (Exception e) {
        }
    }
    public void GenerateMenu() { 
        clsMenu ObjMenu=new clsMenu();
        HashMap List=new HashMap();
        String strCaption="";
        int MenuID=0;
        int ParentID=0;
        DefaultMutableTreeNode aNode;
        
        //Clear existing Tree
        colTree.clear();
        
        //List=ObjMenu.getMenuList(EITLERPGLOBAL.gCompanyID);
        List=ObjMenu.getMenuList(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID);
        
        //First create Root Node
        DefaultMutableTreeNode Root=new DefaultMutableTreeNode(new EITLTreeModel("0","Menu"));
        
        DefaultTreeModel aModel=new DefaultTreeModel(Root);
        
        
        DefaultTreeCellRenderer aRender=(DefaultTreeCellRenderer) Tree.getCellRenderer();
        aRender.setLeafIcon(EITLERPGLOBAL.getImage("BULLET"));
        
        //Add it to our collection with key '0'
        colTree.put("0",Root);
        
        //Now Loop through the List
        for(int i=1;i<=List.size();i++) {
            boolean CreateNode=true;
            
            ObjMenu=(clsMenu) List.get(Integer.toString(i));
            
            strCaption=(String) ObjMenu.getAttribute("MENU_CAPTION").getObj();
            MenuID=(int) ObjMenu.getAttribute("MENU_ID").getVal();
            
            ParentID=(int) ObjMenu.getAttribute("PARENT_ID").getVal();
            String strKey=Integer.toString(MenuID);
            
            //Find out the parent node
            aNode=(DefaultMutableTreeNode) colTree.get(Integer.toString(ParentID));
            
            //Check for the access rights
            //only in case of Programs not in case of Menu
            
//            String MenuType=(String)ObjMenu.getAttribute("MENU_TYPE").getObj();
//            
//            if(MenuType.equals("P")) {
//                //Now check the rights
//                
//                if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0, MenuID)) {
//                    
//                }
//                else {
//                    CreateNode=false;
//                }
//            }
            
            if(CreateNode) {
                DefaultMutableTreeNode Child=new DefaultMutableTreeNode(new EITLTreeModel(strKey,strCaption));
                
                //Add it to our collection
                colTree.put(Integer.toString(MenuID),Child);
                //Insert Node into tree
                
                if(aNode!=null&&Child!=null) {
                    aNode.insert(Child,aNode.getChildCount());
                }
            }
        }
        
        int Stop=1;
        
        Tree.setModel(aModel);
        //GenerateAgain();
    }
    
    
    
    private void GenerateAgain() {
        clsMenu ObjMenu=new clsMenu();
        HashMap List=new HashMap();
        String strCaption="";
        int MenuID=0;
        int ParentID=0;
        DefaultMutableTreeNode aNode;
        
        //Clear existing Tree
        //colTree.clear();
        
        List=ObjMenu.getMenuList(EITLERPGLOBAL.gCompanyID);
        
        //First create Root Node
        DefaultMutableTreeNode Root=new DefaultMutableTreeNode(new EITLTreeModel("0","Menu"));
        
        DefaultTreeModel aModel=new DefaultTreeModel(Root);
        Tree.setModel(aModel);
        
        DefaultTreeCellRenderer aRender=(DefaultTreeCellRenderer) Tree.getCellRenderer();
        aRender.setLeafIcon(EITLERPGLOBAL.getImage("BULLET"));
        
        //Add it to our collection with key '0'
        colTree.put("0",Root);
        
        //Now Loop through the List
        for(int i=1;i<=List.size();i++) {
            boolean CreateNode=true;
            
            ObjMenu=(clsMenu) List.get(Integer.toString(i));
            
            strCaption=(String) ObjMenu.getAttribute("MENU_CAPTION").getObj();
            MenuID=(int) ObjMenu.getAttribute("MENU_ID").getVal();
            
            if(MenuID==33) {
                int a=0;
            }
            
            ParentID=(int) ObjMenu.getAttribute("PARENT_ID").getVal();
            String strKey=Integer.toString(MenuID);
            
            //Find out the parent node
            aNode=(DefaultMutableTreeNode) colTree.get(Integer.toString(ParentID));
            
            //Check for the access rights
            //only in case of Programs not in case of Menu
            
            String MenuType=(String)ObjMenu.getAttribute("MENU_TYPE").getObj();
            
            if(MenuType.equals("P")) {
                //Now check the rights
                if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0, MenuID)) {
                    
                }
                else {
                    CreateNode=false;
                }
            }
            
            if(CreateNode) {
                DefaultMutableTreeNode Child=new DefaultMutableTreeNode(new EITLTreeModel(strKey,strCaption));
                //Add it to our collection
                colTree.put(Integer.toString(MenuID),Child);
                //Insert Node into tree
                aNode.insert(Child,aNode.getChildCount());
            }
            
        }
    }
    //Recurses through the hierarchy of classes
    //until it finds Frame
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
private void GenerateBirthDay() {
        try {
            DataModel = new EITLTableModel();

            tblbirthday.removeAll();
            tblbirthday.setModel(DataModel);

            //Set the table Readonly
            DataModel.TableReadOnly(true);

            //Add the columns
            DataModel.addColumn("Emp No.");
            DataModel.addColumn("Name");
            DataModel.addColumn("Department");
            tblbirthday.setAutoResizeMode(tblbirthday.AUTO_RESIZE_OFF);
            ResultSet rs = data.getResult("SELECT PAY_EMP_NO AS EMP_NO,EMP_NAME AS NAME,Name AS DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST M "
                    + "LEFT JOIN SDMLATTPAY.ATT_DEPARTMENT_MASTER D "
                    + "ON DPTID=EMP_DEPARTMENT "
                    + "WHERE DAY(EMP_BIRTH_DATE)=DAY(CURDATE()) "
                    + "AND MONTH(EMP_BIRTH_DATE)=MONTH(CURDATE()) AND EMP_LEFT_DATE='0000-00-00'  "
                    + "AND EMP_MAIN_CATEGORY IN(2,5,9) "
                    + "ORDER BY PAY_EMP_NO");
            rs.first();
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[7];
                    //JOptionPane.showMessageDialog(null, "USER ID : "+ObjFlow.getAttribute("USER_ID").getVal());
                    rowData[0] = rs.getString("EMP_NO");
                    rowData[1] = rs.getString("NAME");
                    rowData[2] = rs.getString("DEPARTMENT");
                    DataModel.addRow(rowData);
                    rs.next();
                }
                final TableColumnModel columnModel = tblbirthday.getColumnModel();
                for (int column = 0; column < tblbirthday.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < tblbirthday.getRowCount(); row++) {
                        TableCellRenderer renderer = tblbirthday.getCellRenderer(row, column);
                        Component comp = tblbirthday.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }
        } catch (Exception e) {
        }
    }    
    
}
