/*
 * frmFeltPacking.java
 *
 * Created on June 19, 2013, 5:27 PM
 */
package EITLERP.FeltSales.FeltPacking;

/**
 *
 * @author JADEJA RAJPALSINH
 */
import EITLERP.ApprovalFlow;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.util.HashMap;
import java.net.URL;
import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.Loader;
import EITLERP.frmPendingApprovals;
import EITLERP.clsSales_Party;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.Production.ReportUI.JTextFieldHint;
import EITLERP.LOV;
import EITLERP.SelectFirstFree;
import EITLERP.clsFirstFree;
import EITLERP.data;
import TReportWriter.TReportEngine;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JTextField;
import EITLERP.Finance.UtilFunctions;
import java.awt.HeadlessException;
import java.sql.SQLException;

public class frmFeltPacking extends javax.swing.JApplet {

    private clsFeltPacking ObjFeltPacking;

    private int EditMode = 0;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromUserId = 0;
    private int FFNo = 0; //First Free No.
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    private boolean DoNotEvaluate = false;

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;

    private EITLTableModel DataModelPieceNo;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel = new EITLTableModel();

    public frmPendingApprovals frmPA;

    private TReportEngine objEngine = new TReportEngine();

    /**
     * Creates new form frmFeltPacking
     */
    public void init() {
        System.gc();
        setSize(1000, 700);
        initComponents();

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        ObjFeltPacking = new clsFeltPacking();
        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
        GenerateModePackingCombo();
        txtPartyCode.setEditable(false);
        txtTransportMode.setEditable(false);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);

        if (ObjFeltPacking.LoadData()) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + ObjFeltPacking.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtDpNo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdRemove = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cmdNextToTab1 = new javax.swing.JButton();
        txtPartyCode = new javax.swing.JTextField();
        txtTransportMode = new javax.swing.JTextField();
        txtDpDate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtBoxSize = new javax.swing.JTextField();
        lblPartyName = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtBaleNo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtBaleDate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtStation = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cmbModePacking = new javax.swing.JComboBox();
        cmbInsertPiece = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtChargeCode = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        Tab3 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        cmdNew.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cmdNewFocusLost(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 940, 40);

        lblTitle.setBackground(new java.awt.Color(178, 182, 185));
        lblTitle.setText(" FELT PACKING DETAILS - ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 940, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel3.setText("DP No");
        Tab1.add(jLabel3);
        jLabel3.setBounds(10, 12, 50, 16);

        txtDpNo.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        txtDpNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDpNo.setEnabled(false);
        txtDpNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDpNoFocusGained(evt);
            }
        });
        Tab1.add(txtDpNo);
        txtDpNo.setBounds(90, 10, 110, 29);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 195, 890, 150);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setToolTipText("Remove Selected Row");
        cmdRemove.setEnabled(false);
        cmdRemove.setNextFocusableComponent(cmdNextToTab1);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        Tab1.add(cmdRemove);
        cmdRemove.setBounds(520, 360, 90, 28);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel3);
        jPanel3.setBounds(10, 184, 890, 10);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.setNextFocusableComponent(cmdRemove);
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(620, 360, 90, 28);

        txtPartyCode.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        txtPartyCode.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPartyCode.setEnabled(false);
        txtPartyCode = new JTextFieldHint(new JTextField(),"Search by F1");
        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });
        Tab1.add(txtPartyCode);
        txtPartyCode.setBounds(90, 40, 110, 29);
        txtPartyCode.getAccessibleContext().setAccessibleParent(this);

        txtTransportMode.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        txtTransportMode.setToolTipText("");
        txtTransportMode.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTransportMode.setEnabled(false);
        txtTransportMode = new JTextFieldHint(new JTextField(),"Search by F1");
        txtTransportMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTransportModeActionPerformed(evt);
            }
        });
        txtTransportMode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTransportModeKeyPressed(evt);
            }
        });
        Tab1.add(txtTransportMode);
        txtTransportMode.setBounds(120, 80, 140, 29);

        txtDpDate.setEditable(false);
        txtDpDate.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        txtDpDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDpDate.setEnabled(false);
        Tab1.add(txtDpDate);
        txtDpDate.setBounds(330, 10, 150, 29);

        jLabel6.setText("DP Date");
        Tab1.add(jLabel6);
        jLabel6.setBounds(270, 10, 60, 16);

        jLabel8.setText("Party Code");
        Tab1.add(jLabel8);
        jLabel8.setBounds(10, 42, 70, 16);

        jLabel9.setText("Transport Mode");
        Tab1.add(jLabel9);
        jLabel9.setBounds(10, 80, 100, 16);

        jLabel12.setText("Box Size");
        Tab1.add(jLabel12);
        jLabel12.setBounds(10, 120, 60, 16);

        txtBoxSize.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        txtBoxSize.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtBoxSize.setEnabled(false);
        Tab1.add(txtBoxSize);
        txtBoxSize.setBounds(120, 120, 130, 29);

        lblPartyName.setBackground(new java.awt.Color(255, 255, 255));
        lblPartyName.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        lblPartyName.setOpaque(true);
        Tab1.add(lblPartyName);
        lblPartyName.setBounds(210, 40, 280, 30);

        jLabel1.setText("Bale No");
        Tab1.add(jLabel1);
        jLabel1.setBounds(490, 10, 60, 16);

        txtBaleNo.setEditable(false);
        txtBaleNo.setEnabled(false);
        Tab1.add(txtBaleNo);
        txtBaleNo.setBounds(560, 10, 130, 28);

        jLabel2.setText("Bale Date");
        Tab1.add(jLabel2);
        jLabel2.setBounds(700, 10, 70, 16);

        txtBaleDate.setEditable(false);
        txtBaleDate.setEnabled(false);
        txtBaleDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBaleDateActionPerformed(evt);
            }
        });
        Tab1.add(txtBaleDate);
        txtBaleDate.setBounds(780, 10, 140, 28);

        jLabel4.setText("Station");
        Tab1.add(jLabel4);
        jLabel4.setBounds(510, 50, 60, 16);

        txtStation.setEnabled(false);
        Tab1.add(txtStation);
        txtStation.setBounds(570, 50, 150, 28);

        jLabel5.setText("Mode Of Packing");
        Tab1.add(jLabel5);
        jLabel5.setBounds(270, 80, 120, 30);

        cmbModePacking.setEnabled(false);
        cmbModePacking.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbModePackingItemStateChanged(evt);
            }
        });
        Tab1.add(cmbModePacking);
        cmbModePacking.setBounds(400, 80, 150, 28);

        cmbInsertPiece.setText("Insert From Piece");
        cmbInsertPiece.setEnabled(false);
        cmbInsertPiece.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbInsertPieceActionPerformed(evt);
            }
        });
        Tab1.add(cmbInsertPiece);
        cmbInsertPiece.setBounds(310, 120, 170, 40);

        jLabel7.setText("Charge Code");
        Tab1.add(jLabel7);
        jLabel7.setBounds(590, 90, 90, 16);

        txtChargeCode.setEnabled(false);
        txtChargeCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtChargeCodeActionPerformed(evt);
            }
        });
        Tab1.add(txtChargeCode);
        txtChargeCode.setBounds(690, 90, 100, 28);

        lblRevNo.setText("....");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(210, 10, 30, 20);

        Tab.addTab("Packing Details", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 13, 62, 16);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 10, 230, 28);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 42, 33, 16);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 40, 230, 29);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 72, 61, 16);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 70, 540, 28);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 100, 73, 16);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 100, 160, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 212, 50, 16);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 210, 230, 28);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 242, 60, 16);

        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 240, 590, 28);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.setNextFocusableComponent(cmdRemove);
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(457, 273, 100, 28);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(633, 70, 24, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.setNextFocusableComponent(cmdRemove);
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(574, 273, 100, 28);

        Tab.addTab("Approval", Tab2);

        Tab3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab3.setLayout(null);

        jLabel26.setText("Document Approval Status");
        Tab3.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 16);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        Tab3.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 670, 100);

        lblDocumentHistory.setText("Document Update History");
        Tab3.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 132, 163, 16);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        Tab3.add(jScrollPane3);
        jScrollPane3.setBounds(10, 150, 550, 150);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.setNextFocusableComponent(cmdRemove);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });
        Tab3.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(570, 275, 110, 28);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });
        Tab3.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(570, 180, 120, 32);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });
        Tab3.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(570, 150, 120, 32);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        Tab3.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 210, 120, 32);

        Tab.addTab("Status", Tab3);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 940, 440);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(10, 510, 890, 22);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed

        ReportShow();
//        new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltPacking.rpt",new HashMap(),ObjFeltPacking.getReportData(txtDpNo.getText().trim(), EITLERPGLOBAL.formatDateDB(txtDpDate.getText().trim())));
//        EITLERPGLOBAL.PAGE_BREAK=true;
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
//        try {
//            URL reportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/Production/rptFeltPacking.jsp?dbURL=" + EITLERPGLOBAL.DatabaseURL + "&PKG_PARTY_CODE=" + txtPartyCode.getText().trim());
//            EITLERPGLOBAL.loginContext.showDocument(reportFile, "_blank");
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(this, "File error " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
//            e.printStackTrace();
//        }

        PreviewReport();
        PreviewReport1();
        PreviewReport2();
        PreviewReport3();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4).toString());
            bigEdit.ShowEdit();
        } else {
            JOptionPane.showMessageDialog(this, "Select a row from Document Update History", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjFeltPacking.HistoryView = false;
        ObjFeltPacking.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed

    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjFeltPacking.ShowHistory(EITLERPGLOBAL.formatDateDB(txtDpDate.getText()), txtDpNo.getText());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed

    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        lblStatus.setText("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        lblStatus.setText("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);

        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(715, ObjFeltPacking.getAttribute("PKG_DP_NO").getString())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjFeltPacking.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        txtDpDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained

    private void cmbInsertPieceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbInsertPieceActionPerformed
        Connection Conn;
        Statement stmt;
        String sql;
        if (Table.getRowCount() >= 1) {

        }
        if (data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_AMEND_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND APPROVED=0 AND CANCELLED!=1 AND PARTY_CODE='"+txtPartyCode.getText().trim()+"' ")) {
            JOptionPane.showMessageDialog(null, "Party is under approval for Party Master Amendment. Please final approved it's pending amendment master first.");
            return;
        } 
        if(data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_RATE_DISC_MASTER_HEADER WHERE APPROVED=0 AND CANCELED!=1 AND PARTY_CODE='"+txtPartyCode.getText().trim()+"' ")) {
            JOptionPane.showMessageDialog(null, "Party is under approval for Discount Master. Please final approved it's pending Discount Master first.");
            return;
        }
        
        Object[] option = {"Yes", "No"};

        int res = JOptionPane.showOptionDialog(null, "ARE YOU WANT TO ADD PIECE ?", "", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null, option, option[1]);

        if (res == 0) {
            try {
                if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {//Only Process keys when in editing mode
                    PKGLOV aList = new PKGLOV();
                    aList.pcd = txtPartyCode.getText().trim();
                    //aList.SQL = "SELECT DISTINCT NULL,A.PR_PIECE_NO,A.PR_BILL_PRODUCT_CODE,A.PR_BILL_LENGTH,A.PR_BILL_WIDTH,A.PR_PIECE_STAGE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER A,PRODUCTION.FELT_QLT_RATE_MASTER B WHERE A.PR_BILL_PRODUCT_CODE=(B.PRODUCT_CODE) AND A.PR_PARTY_CODE='" + txtPartyCode.getText().trim() + "' AND A.PR_PIECE_STAGE LIKE 'IN STOCK' AND (PR_MACHINE_NO='' OR PR_MACHINE_NO IS NOT NULL) AND (PR_POSITION_NO='' OR PR_POSITION_NO IS NOT NULL) AND A.PR_PIECE_NO  NOT IN (SELECT PKG_PIECE_NO FROM PRODUCTION.FELT_PKG_SLIP_DETAIL) ORDER BY PR_PIECE_NO";//UNION ALL SELECT NULL,D.PKG_PIECE_NO,D.PKG_PRODUCT_CODE,D.PKG_LENGTH,D.PKG_WIDTH,NULL  FROM PRODUCTION.FELT_PKG_SLIP_DETAIL D,PRODUCTION.FELT_PKG_SLIP_HEADER H WHERE H.PKG_BALE_NO=D.PKG_BALE_NO AND H.PKG_PARTY_CODE='" + txtPartyCode.getText().trim() + "' AND H.BALE_REOPEN_FLG=1
                    //aList.SQL = "SELECT DISTINCT NULL,A.PR_PIECE_NO,A.PR_BILL_PRODUCT_CODE,A.PR_BILL_LENGTH,A.PR_BILL_WIDTH,A.PR_PIECE_STAGE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER A,PRODUCTION.FELT_QLT_RATE_MASTER B WHERE A.PR_BILL_PRODUCT_CODE=(B.PRODUCT_CODE) AND A.PR_PARTY_CODE='" + txtPartyCode.getText().trim() + "' AND A.PR_PIECE_STAGE LIKE 'IN STOCK' AND PR_MACHINE_NO NOT IN ('',0) AND PR_MACHINE_NO IS NOT NULL AND PR_POSITION_NO NOT IN ('',0) AND PR_POSITION_NO IS NOT NULL AND A.PR_PIECE_NO NOT IN (SELECT A.PKG_PIECE_NO FROM PRODUCTION.FELT_PKG_SLIP_DETAIL A,PRODUCTION.FELT_PKG_SLIP_HEADER B WHERE B.APPROVED=1 AND B.CANCELED=0 AND A.PKG_DP_NO=B.PKG_DP_NO) ORDER BY PR_PIECE_NO"; 
                    aList.SQL ="SELECT DISTINCT NULL,A.PR_PIECE_NO,A.PR_BILL_PRODUCT_CODE,A.PR_BILL_LENGTH,A.PR_BILL_WIDTH,A.PR_PIECE_STAGE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER A,PRODUCTION.FELT_QLT_RATE_MASTER B WHERE A.PR_BILL_PRODUCT_CODE=(B.PRODUCT_CODE) AND A.PR_PARTY_CODE='" + txtPartyCode.getText().trim() +"' AND A.PR_PIECE_STAGE LIKE 'IN STOCK' AND (A.PR_PKG_DP_NO='' OR A.PR_PKG_DP_NO IS NULL) AND PR_MACHINE_NO NOT IN ('',0) AND PR_MACHINE_NO IS NOT NULL AND PR_POSITION_NO NOT IN ('',0) AND PR_POSITION_NO IS NOT NULL AND A.PR_PIECE_NO NOT IN (SELECT PKG_PIECE_NO FROM PRODUCTION.FELT_PKG_SLIP_DETAIL A,PRODUCTION.FELT_PKG_SLIP_HEADER B WHERE B.CANCELED=0 AND B.BALE_REOPEN_FLG=0 AND A.PKG_DP_NO=B.PKG_DP_NO) ORDER BY PR_PIECE_NO";
                            
                    System.out.println("query = " + aList.SQL);
                    aList.ReturnCol = 1;
                    aList.SecondCol = 2; //to get Second Value
                    aList.ShowReturnCol = true;
                    aList.DefaultSearchOn = 2;

                    if (aList.ShowLOV()) {

                        Conn = data.getConn();
                        stmt = Conn.createStatement();

                        sql = "SELECT A.PR_PIECE_NO,A.PR_BILL_LENGTH,A.PR_BILL_WIDTH,A.PR_BILL_GSM,A.PR_BILL_WEIGHT,A.PR_BILL_SQMTR,A.PR_SYN_PER,PR_BILL_STYLE,PR_BILL_PRODUCT_CODE,B.PRODUCT_DESC,A.PR_POSITION_NO,A.PR_MACHINE_NO,A.PR_DOC_NO,A.PR_ORDER_DATE,A.PR_PO_NO,PR_PO_DATE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER A,PRODUCTION.FELT_QLT_RATE_MASTER B WHERE A.PR_PARTY_CODE='" + txtPartyCode.getText().trim() + "' AND A.PR_PIECE_NO='" + aList.ReturnVal.toString() + "' AND A.PR_BILL_PRODUCT_CODE=(B.PRODUCT_CODE) AND (B.EFFECTIVE_TO='0000-00-00' OR B.EFFECTIVE_TO IS NULL) AND B.APPROVED=1 AND B.CANCELED=0 ";
                        ResultSet rsData = stmt.executeQuery(sql);
                        rsData.first();
                        int i = 1;
                        while (!rsData.isAfterLast()) {
                            Object[] rowData = new Object[25];
                            rowData[0] = Integer.toString(Table.getRowCount() + 1);
                            rowData[1] = rsData.getString("PR_PIECE_NO");
                            rowData[2] = rsData.getString("PR_BILL_LENGTH");
                            rowData[3] = rsData.getString("PR_BILL_WIDTH");
                            rowData[4] = rsData.getString("PR_BILL_GSM");
                            rowData[5] = rsData.getString("PR_BILL_WEIGHT");
                            rowData[6] = rsData.getString("PR_BILL_SQMTR");
                            rowData[7] = rsData.getString("PR_SYN_PER");
                            rowData[8] = rsData.getString("PR_BILL_STYLE");
                            rowData[9] = rsData.getString("PR_BILL_PRODUCT_CODE");
                            rowData[10] = rsData.getString("PRODUCT_DESC");
                            rowData[11] = rsData.getString("PR_MACHINE_NO");
                            rowData[12] = rsData.getString("PR_POSITION_NO");
                            rowData[13]= data.getStringValueFromDB("SELECT POSITION_DESIGN_NO FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='"+rsData.getString("PR_POSITION_NO")+"'");
                            rowData[14] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='"+rsData.getString("PR_POSITION_NO")+"'");
                            rowData[15]=  data.getStringValueFromDB("SELECT PR_UPN FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+rsData.getString("PR_PIECE_NO")+"'");                                                                      
                            //rowData[13] = "";
                            rowData[16] = rsData.getString("PR_DOC_NO");//14
                            rowData[17] = EITLERPGLOBAL.formatDate(rsData.getString("PR_ORDER_DATE"));//15
                            rowData[18] = rsData.getString("PR_PO_NO"); //16
                            rowData[19] = EITLERPGLOBAL.formatDate(rsData.getString("PR_PO_DATE")); //17
                            rowData[20] = "";//18
                            rowData[21] = "";//19

                            i++;

                            DataModelPieceNo.addRow(rowData);
                            rsData.next();
                        }

                    }

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            for (int k = 0; k <= Table.getRowCount() - 1; k++) {
                for (int l = k; l <= Table.getRowCount() - 1; l++) {
                    if (l != k && ((String) Table.getValueAt(k, 1)).trim().equals(((String) Table.getValueAt(l, 1)).trim())) {
                        JOptionPane.showMessageDialog(this, "Same Piece No at Row " + (k + 1) + " and " + (l + 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }
        }
    }//GEN-LAST:event_cmbInsertPieceActionPerformed

    private void cmbModePackingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbModePackingItemStateChanged

    }//GEN-LAST:event_cmbModePackingItemStateChanged

    private void txtBaleDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBaleDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBaleDateActionPerformed

    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

//            aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010";
//            aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND PARTY_CLOSE_IND!=1";
            aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND COALESCE(PARTY_CLOSE_IND,0)!=1 AND COALESCE(PARTY_LOCK,0)!=1 ";

            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;

            if (aList.ShowLOV()) {
                txtPartyCode.setText(aList.ReturnVal);
                lblPartyName.setText(clsFeltPacking.getParyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
                txtChargeCode.setText(clsFeltPacking.getChargeCode(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
                txtStation.setText(clsFeltPacking.getStation(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
                txtStation.requestFocus();
            }

        }

    }//GEN-LAST:event_txtPartyCodeKeyPressed

    private void txtPartyCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusGained
        lblStatus.setText("Press F1 for Party Code");
    }//GEN-LAST:event_txtPartyCodeFocusGained

    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed

    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        if (Table.getRowCount() > 0) {
            DataModelPieceNo.removeRow(Table.getSelectedRow());
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed

    }//GEN-LAST:event_TableKeyPressed

    private void txtDpNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDpNoFocusGained
        lblStatus.setText("Enter Packing Date.");
    }//GEN-LAST:event_txtDpNoFocusGained

    private void txtTransportModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTransportModeActionPerformed

        // TODO add your handling code here:

    }//GEN-LAST:event_txtTransportModeActionPerformed

    private void txtTransportModeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTransportModeKeyPressed

        if (evt.getKeyCode() == 112) { //F1 Key pressed
            LOV aList = new LOV();
            aList.SQL = "SELECT PARA_DESC FROM PRODUCTION.FELT_PARAMETER_MASTER WHERE PARA_ID='FELT_PACKINGSLIP'";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                txtTransportMode.setText(aList.ReturnVal);

            }
        }

// TODO add your handling code here:
    }//GEN-LAST:event_txtTransportModeKeyPressed

    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
        try {
            if (!txtPartyCode.getText().equals("")) {
                if (data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND PARTY_CODE=" + txtPartyCode.getText().trim() + " AND (GSTIN_NO!='' OR STATE_GST_CODE!='')")) {
                String strSQL = "";
                ResultSet rsTmp;
                strSQL = "";
                strSQL += "SELECT PARTY_NAME,CHARGE_CODE FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND PARTY_CODE=" + txtPartyCode.getText().trim() + "";
                rsTmp = data.getResult(strSQL);
                rsTmp.first();
                lblPartyName.setText(rsTmp.getString("PARTY_NAME"));
                txtChargeCode.setText(rsTmp.getString("CHARGE_CODE"));
                txtStation.requestFocus();
                }
                else {
                    JOptionPane.showMessageDialog(null, "GSTIN NO/GST STATE CODE missing. Please update Party Master.");
                    txtPartyCode.requestFocus();
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter valid party code");
            txtPartyCode.requestFocus();
        }


    }//GEN-LAST:event_txtPartyCodeFocusLost

    private void txtChargeCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtChargeCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtChargeCodeActionPerformed

    private void cmdNewFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdNewFocusLost
        txtPartyCode.requestFocus();      // TODO add your handling code here:
    }//GEN-LAST:event_cmdNewFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JPanel Tab3;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JButton cmbInsertPiece;
    private javax.swing.JComboBox cmbModePacking;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblPartyName;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtBaleDate;
    private javax.swing.JTextField txtBaleNo;
    private javax.swing.JTextField txtBoxSize;
    private javax.swing.JTextField txtChargeCode;
    private javax.swing.JTextField txtDpDate;
    private javax.swing.JTextField txtDpNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtStation;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtTransportMode;
    // End of variables declaration//GEN-END:variables

    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }

    private void SetFields(boolean pStat) {
        txtPartyCode.setEnabled(pStat);
        txtTransportMode.setEnabled(pStat);
        txtBoxSize.setEnabled(pStat);
        txtBaleNo.setEnabled(pStat);
        txtBaleDate.setEnabled(pStat);
        lblPartyName.setEnabled(pStat);
        txtStation.setEnabled(pStat);
        cmbModePacking.setEnabled(pStat);
        cmbInsertPiece.setEnabled(pStat);
        txtChargeCode.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);

        SetupApproval();
    }

    private void ClearFields() {
        txtDpDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtBaleNo.setText("");
        txtBaleDate.setText("");
        txtPartyCode.setText("");
        lblPartyName.setText("");
        txtStation.setText("");
        txtTransportMode.setText("");
        txtBoxSize.setText("");
        txtChargeCode.setText("");
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        cmbModePacking.setSelectedIndex(0);
    }

    //Display data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, 715)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //=========== Title Bar Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjFeltPacking.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                } else {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (ObjFeltPacking.getAttribute("CANCELED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
            //============================================//

            String dpNo = ObjFeltPacking.getAttribute("PKG_DP_NO").getString();
            lblTitle.setText(" FELT PACKING DETAILS - " + dpNo);
            lblRevNo.setText(Integer.toString((int) ObjFeltPacking.getAttribute("REVISION_NO").getVal()));
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, ObjFeltPacking.getAttribute("HIERARCHY_ID").getInt());
            DoNotEvaluate = true;

            txtDpNo.setText(dpNo);
            txtDpDate.setText(EITLERPGLOBAL.formatDate(ObjFeltPacking.getAttribute("PKG_DP_DATE").getString()));
            txtBaleNo.setText(ObjFeltPacking.getAttribute("PKG_BALE_NO").getString());
            txtBaleDate.setText(EITLERPGLOBAL.formatDate(ObjFeltPacking.getAttribute("PKG_BALE_DATE").getString()));
            txtPartyCode.setText(ObjFeltPacking.getAttribute("PKG_PARTY_CODE").getString());
            lblPartyName.setText(ObjFeltPacking.getAttribute("PKG_PARTY_NAME").getString());
            txtStation.setText(ObjFeltPacking.getAttribute("PKG_STATION").getString());
            txtTransportMode.setText(ObjFeltPacking.getAttribute("PKG_TRANSPORT_MODE").getString());
            txtBoxSize.setText(ObjFeltPacking.getAttribute("PKG_BOX_SIZE").getString());
            cmbModePacking.setSelectedItem(ObjFeltPacking.getAttribute("PKG_MODE_PACKING").getString());
            txtChargeCode.setText(ObjFeltPacking.getAttribute("PKG_CHARGE_CODE").getString());

            //Now Generate Table
            FormatGrid();
            for (int i = 1; i <= ObjFeltPacking.hmFeltPackingDetails.size(); i++) {
                clsFeltPackingDetails ObjFeltPackingDetails = (clsFeltPackingDetails) ObjFeltPacking.hmFeltPackingDetails.get(Integer.toString(i));

                Object[] rowData = new Object[20];
                rowData[0] = Integer.toString(i);
                rowData[1] = ObjFeltPackingDetails.getAttribute("PKG_PIECE_NO").getString();
                rowData[2] = Double.toString(EITLERPGLOBAL.round(ObjFeltPackingDetails.getAttribute("PKG_LENGTH").getVal(), 2));
                rowData[3] = Double.toString(EITLERPGLOBAL.round(ObjFeltPackingDetails.getAttribute("PKG_WIDTH").getVal(), 2));
                rowData[4] = Integer.toString(ObjFeltPackingDetails.getAttribute("PKG_GSM").getInt());
                rowData[5] = Double.toString(EITLERPGLOBAL.round(ObjFeltPackingDetails.getAttribute("PKG_WEIGHT").getVal(),2));
                rowData[6] = Double.toString(EITLERPGLOBAL.round(ObjFeltPackingDetails.getAttribute("PKG_SQM").getVal(),2));
                rowData[7] = Integer.toString(ObjFeltPackingDetails.getAttribute("PKG_SYN_PER").getInt());
                rowData[8] = ObjFeltPackingDetails.getAttribute("PKG_STYLE").getString();
                rowData[9] = ObjFeltPackingDetails.getAttribute("PKG_PRODUCT_CODE").getString();
                rowData[10] = ObjFeltPackingDetails.getAttribute("PKG_PRODUCT_DESC").getString();
                rowData[11] = ObjFeltPackingDetails.getAttribute("PKG_MACHINE_NO").getString();
                rowData[12] = ObjFeltPackingDetails.getAttribute("PKG_MCN_POSITION_DESC").getString();
                rowData[13]= data.getStringValueFromDB("SELECT POSITION_DESIGN_NO FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='"+ObjFeltPackingDetails.getAttribute("PKG_MCN_POSITION_DESC").getString()+"'");
                rowData[14] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='"+ObjFeltPackingDetails.getAttribute("PKG_MCN_POSITION_DESC").getString()+"'");
                rowData[15]=  data.getStringValueFromDB("SELECT PR_UPN FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+ObjFeltPackingDetails.getAttribute("PKG_PIECE_NO").getString()+"'");
                rowData[16] = ObjFeltPackingDetails.getAttribute("PKG_ORDER_NO").getString();
                rowData[17] = EITLERPGLOBAL.formatDate(ObjFeltPackingDetails.getAttribute("PKG_ORDER_DATE").getString());
                rowData[18] = ObjFeltPackingDetails.getAttribute("PKG_PO_NO").getString();
                rowData[19] = EITLERPGLOBAL.formatDate(ObjFeltPackingDetails.getAttribute("PKG_PO_DATE").getString());
                //rowData[16] = EITLERPGLOBAL.formatDate(ObjFeltPackingDetails.getAttribute("PKG_PO_DATE").getString());
                
                DataModelPieceNo.addRow(rowData);
            }

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList = new HashMap();

            hmList = clsFeltProductionApprovalFlow.getDocumentFlow(715, ObjFeltPacking.getAttribute("PKG_DP_NO").getString());
            for (int i = 1; i <= hmList.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) hmList.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3] = ObjFlow.getAttribute("STATUS").getString();
                rowData[4] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString());
                rowData[5] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString());
                rowData[6] = ObjFlow.getAttribute("REMARKS").getString();

                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//

            // Generating Grid for Showing Production Details Update History
            FormatGridUpdateHistory();
            HashMap hmApprovalHistory = clsFeltPacking.getHistoryList(ObjFeltPacking.getAttribute("PKG_DP_DATE").getString(), dpNo);
            for (int i = 1; i <= hmApprovalHistory.size(); i++) {
                clsFeltPacking ObjFeltPacking = (clsFeltPacking) hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjFeltPacking.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(2, (int) ObjFeltPacking.getAttribute("UPDATED_BY").getVal());
                rowData[2] = ObjFeltPacking.getAttribute("ENTRY_DATE").getString();

                String ApprovalStatus = "";

                if ((ObjFeltPacking.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                if ((ObjFeltPacking.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjFeltPacking.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if ((ObjFeltPacking.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjFeltPacking.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjFeltPacking.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjFeltPacking.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjFeltPacking.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjFeltPacking.getAttribute("FROM_IP").getString();

                DataModelUpdateHistory.addRow(rowData);
                
                    
               
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DoNotEvaluate = false;
    }

    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=715 ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=715 ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    private void SetupApproval() {
        OpgHold.setSelected(true);
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            int FromUserID = clsFeltProductionApprovalFlow.getFromID(715, ObjFeltPacking.getAttribute("PKG_DP_NO").getString());
            lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = clsFeltProductionApprovalFlow.getFromRemarks(715, FromUserID, ObjFeltPacking.getAttribute("PKG_DP_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(715, ObjFeltPacking.getAttribute("PKG_DP_NO").getString())) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
        
        if (clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            OpgReject.setEnabled(false);
        }
        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            //JOptionPane.showMessageDialog(null, "Final Approver");
            OpgApprove.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6057, 60571)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6057, 60572)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6057, 60573)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6057, 60574)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(this, "The year is closed. You cannot enter/edit any transaction", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //----------------------------------//

        //Generate new document no.
        EITLERP.SelectFirstFree aList = new EITLERP.SelectFirstFree();
        aList.ModuleID = 715;
        aList.FirstFreeNo = 169;
        FFNo = aList.FirstFreeNo;
        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        FFNo = aList.FirstFreeNo;
        SetupApproval();
        txtDpNo.setText(EITLERP.clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 715, FFNo, false));
        lblTitle.setText("FELT PACKING DETAILS - " + txtDpNo.getText());
        lblTitle.setBackground(Color.GRAY);
        txtDpDate.setEnabled(true);
        txtPartyCode.setEditable(true);
        txtTransportMode.setEditable(true);
//        txtBaleDate.setEditable(true);
//        txtBaleNo.setEditable(true);
    }

    private void Edit() {
        if (ObjFeltPacking.IsEditable(txtDpNo.getText(), ObjFeltPacking.getAttribute("PKG_DP_DATE").getString(), EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            if(!ApprovalFlow.IsCreator(715, txtDpNo.getText().trim()) && !clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)){
                
            }
            if (clsFeltProductionApprovalFlow.IsCreator(715, ObjFeltPacking.getAttribute("PKG_DP_NO").getString())) {
                SetFields(true);
            } else {
                EnableApproval();
                if(!ApprovalFlow.IsCreator(715, txtDpNo.getText().trim()) && !clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)){
                    txtBoxSize.setEnabled(true);
                    cmbModePacking.setEnabled(true);
                }
                //Added by Dharmendra on 16-05-2019
                if(!ApprovalFlow.IsCreator(715, txtDpNo.getText().trim()) && clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)){
                    txtBoxSize.setEnabled(true);
                    cmbModePacking.setEnabled(true);
                }
                //End
            }
        } else {
            JOptionPane.showMessageDialog(this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(this, "The year is closed. You cannot enter/edit any transaction", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //----------------------------------//

        if (ObjFeltPacking.CanDelete(txtDpNo.getText(), txtDpDate.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, ObjFeltPacking.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Save() {

        String dpDate, dpNo, baleNo, baleDate, partyCode = "", partyName = "", station = "", transportMode = "", boxSize = "", modePacking = "", chargecode = "";
        boolean POChk = false;

        dpNo = txtDpNo.getText().trim();
        dpDate = txtDpDate.getText().trim();
        baleNo = txtBaleNo.getText().trim();
        baleDate = txtBaleDate.getText().trim();
        partyCode = txtPartyCode.getText().trim();
        partyName = lblPartyName.getText();
        station = txtStation.getText();
        transportMode = txtTransportMode.getText().trim();
        boxSize = txtBoxSize.getText().trim().toUpperCase();
        modePacking = (String) cmbModePacking.getSelectedItem();
        chargecode = txtChargeCode.getText().trim();

        //Form level validations
        if (dpNo.equals("")) {
            JOptionPane.showMessageDialog(this, "Enter Packing No.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (dpDate.equals("") || !EITLERPGLOBAL.isDate(baleDate)) {
            JOptionPane.showMessageDialog(this, "Enter Valid Packing Date", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // check Packing Date is Within Financial Year?
        java.sql.Date FinFromDate = java.sql.Date.valueOf(EITLERPGLOBAL.FinFromDateDB);
        java.sql.Date FinToDate = java.sql.Date.valueOf(EITLERPGLOBAL.FinToDateDB);
        java.sql.Date dp_Date = java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(dpDate));
        if ((dp_Date.after(FinFromDate) || dp_Date.compareTo(FinFromDate) == 0) && (dp_Date.before(FinToDate) || dp_Date.compareTo(FinToDate) == 0)) {
            //Within the year
        } else {
            JOptionPane.showMessageDialog(this, "Packing Date is Not Within Financial Year.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (dp_Date.compareTo(java.sql.Date.valueOf(EITLERPGLOBAL.getCurrentDateDB())) > 0) {
            JOptionPane.showMessageDialog(this, "Packing Date Must be Before or the Same Date as Today.", "Wrong Packing Date", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (partyCode.equals("") || partyCode.equals(null) || clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, partyCode).equals("")) {
            JOptionPane.showMessageDialog(this, "Enter Party Code.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PO_NO_REQUIRED=1 AND PARTY_CODE='" + partyCode + "' ")) {
            POChk = true;
        }

        try {
            if (transportMode.equals("") || transportMode.equals(null)) {
                JOptionPane.showMessageDialog(this, "Enter Transporter Code.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (boxSize.equals("")) {
            }

        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "Enter Correct Details. Error is : " + nfe.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            nfe.printStackTrace();
            return;
        }

        //Check the no. of items
        if (Table.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Enter Packing Details Before Saving.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CLOSE_IND=1 AND PARTY_CODE='" + partyCode + "' ")) {
            JOptionPane.showMessageDialog(null, "Party closed in Party Master.");
            return;
        }
        
        for (int j = 0; j < Table.getRowCount(); j++) {
            String machineNo = ((String) Table.getValueAt(j, 11)).trim();
            String positionNo = ((String) Table.getValueAt(j, 12)).trim();

            if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER WHERE MACHINE_CLOSE_IND=1 AND MM_PARTY_CODE='" + partyCode + "' AND MM_MACHINE_NO='" + machineNo + "' ")) {
                JOptionPane.showMessageDialog(null, "Party Machine closed in Machine Master at Row : "+ (j+1));
                return;
            } else if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE POSITION_CLOSE_IND=1 AND MM_PARTY_CODE='" + partyCode + "' AND MM_MACHINE_NO='" + machineNo + "' AND MM_MACHINE_POSITION='" + positionNo + "' ")) {
                JOptionPane.showMessageDialog(null, "Party Machine Position closed in Machine Master at Row : "+ (j+1));
                return;
            }

        }
        
        if (data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_LOCK=1 AND PARTY_CODE='" + partyCode + "' ")) {
            JOptionPane.showMessageDialog(null, "Party locked in Party Master.");
            return;
        }
        
        for (int j = 0; j < Table.getRowCount(); j++) {
            String machineNo = ((String) Table.getValueAt(j, 11)).trim();
            String positionNo = ((String) Table.getValueAt(j, 12)).trim();

            if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER WHERE MACHINE_LOCK_IND=1 AND MM_PARTY_CODE='" + partyCode + "' AND MM_MACHINE_NO='" + machineNo + "' ")) {
                JOptionPane.showMessageDialog(null, "Party Machine locked in Machine Master at Row : "+ (j+1));
                return;
            } else if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE POSITION_LOCK_IND=1 AND MM_PARTY_CODE='" + partyCode + "' AND MM_MACHINE_NO='" + machineNo + "' AND MM_MACHINE_POSITION='" + positionNo + "' ")) {
                JOptionPane.showMessageDialog(null, "Party Machine Position locked in Machine Master at Row : "+ (j+1));
                return;
            }

        }

        int i = 0, j = 0;
        try {
            String pieceNo = "", lengthString = "", widthString = "", weightString = "", gsmString = "", sqmString = "", synPerString = "",
                    style = "", productCode = "", positionDescription = "", positionNo = "", orderNo = "", orderDate = "", productDesc = "",pono = "", podate = "";
            float length = 0, width = 0, weight = 0;
            int synPer = 0, gsm = 0, sqm = 0;

            // check duplicate piece no in table
            for (int k = 0; k <= Table.getRowCount() - 1; k++) {
                for (int l = k; l <= Table.getRowCount() - 1; l++) {
                    if (l != k && ((String) Table.getValueAt(k, 1)).trim().equals(((String) Table.getValueAt(l, 1)).trim())) {
                        JOptionPane.showMessageDialog(this, "Same Piece No at Row " + (k + 1) + " and " + (l + 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }

            //Check the entered details in Table.
            for (i = 0; i <= Table.getRowCount() - 1; i++) {
                pieceNo = ((String) Table.getValueAt(i, 1)).trim();
                
                try{
                    ResultSet rs = data.getResult("SELECT * FROM PRODUCTION.FELT_SALES_ORDER_DIVERSION WHERE ORIGINAL_PIECE_NO='"+pieceNo+"' AND APPROVED=0 AND CANCELED=0");
                    //System.out.println("SELECT * FROM PRODUCTION.FELT_SALES_ORDER_DIVERSION WHERE ORIGINAL_PIECE_NO='"+pieceNo+"' AND APPROVED=0 AND CANCELED=0");
                
                    rs.last();
                    if(rs.getRow() > 0)
                    {
                        JOptionPane.showMessageDialog(null, "DIVERSION In-Process for PIECE : "+pieceNo+", Please complete action for diversion first.");
                        return;
                    }
                }catch(SQLException | HeadlessException e)
                {
                    e.printStackTrace();
                }

		try{
                    String STOCK_REVIEW_PENDING = data.getStringValueFromDB("SELECT H.PIECE_AMEND_STOCK_NO FROM PRODUCTION.FELT_SALES_PIECE_AMEND_APPROVAL_STOCK_HEADER H,PRODUCTION.FELT_SALES_PIECE_AMEND_APPROVAL_STOCK_DETAIL D WHERE H.PIECE_AMEND_STOCK_NO=D.PIECE_AMEND_STOCK_NO AND H.APPROVED=0 AND H.CANCELED=0 AND D.PIECE_NO='"+pieceNo+"'");
                    
                    if(!STOCK_REVIEW_PENDING.equals(""))
                    {
                        JOptionPane.showMessageDialog(this, "STOCK REVIEW PENDING, STOCK REVIEW NO : "+STOCK_REVIEW_PENDING);
                        return;
                    }
                }catch(Exception e)
                {
                    e.printStackTrace();
                }                


                lengthString = ((String) Table.getValueAt(i, 2)).trim();
                widthString = ((String) Table.getValueAt(i, 3)).trim();
                weightString = ((String) Table.getValueAt(i, 4)).trim();
                gsmString = ((String) Table.getValueAt(i, 5)).trim();
                sqmString = ((String) Table.getValueAt(i, 6)).trim();
                synPerString = ((String) Table.getValueAt(i, 7)).trim();
                style = ((String) Table.getValueAt(i, 8)).trim();
                productCode = ((String) Table.getValueAt(i, 9)).trim();
                productDesc = ((String) Table.getValueAt(i, 10)).trim();
                positionNo = ((String) Table.getValueAt(i, 11)).trim();
                positionDescription = ((String) Table.getValueAt(i, 12)).trim();
                orderNo = ((String) Table.getValueAt(i, 16)).trim();  //14
                orderDate = ((String) Table.getValueAt(i, 17)).trim();//15
                pono = ((String) Table.getValueAt(i, 18)).trim();//16
                podate = ((String) Table.getValueAt(i, 19)).trim();//17

                j++;
                if (pieceNo.equals("") || pieceNo.equals(null)) {
                    JOptionPane.showMessageDialog(this, "Enter Piece No.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                j++;
                if (lengthString.equals("") || lengthString.equals(null)) {
                    JOptionPane.showMessageDialog(this, "Enter Felt Length.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                j++;
                if (widthString.equals("") || widthString.equals(null)) {
                    JOptionPane.showMessageDialog(this, "Enter Felt Width.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                j++;
                if (gsmString.equals("")) {
                }

                j++;
                if (sqmString.equals("")) {
                }

                j++;
                if (synPerString.equals("")) {
                }

                j++;
                if (style.equals("")) {
                }

                j++;
                if (productCode.equals("")) {
                }

                j++;
                if (productDesc.equals("")) {
                }

                j++;
                if (positionDescription.equals("")) {
                }

                j++;
                if (positionNo.equals("")) {
                }

                j++;
                if (orderNo.equals("")) {
                }

                j++;
                if (orderDate.equals("")) {
                }
                
                j++;
                if (pono.equals("")) {
                }

                j++;
                if (podate.equals("")) {
                }
                
                j++;
                if (pono.equals("") && POChk) {
                    JOptionPane.showMessageDialog(this, "Update PO No.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                j++;
                if (podate.equals("") && POChk) {
                    JOptionPane.showMessageDialog(this, "Update PO Date.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                

                j = 0;

            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "Enter Correct Details at Row " + (i + 1) + " and Column " + (j + 1) + ". Error is : " + nfe.getMessage());
            j = 0;
            nfe.printStackTrace();
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send");
            return;
        }

        //set data for insert/update
        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjFeltPacking.Insert()) {
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + ObjFeltPacking.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjFeltPacking.Update()) {

                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + ObjFeltPacking.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        //lblPartyName.setText("");
        txtDpDate.setEnabled(false);
        txtToRemarks.setText("");
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Sets data to the Details Class Object
    private void SetData() {
        String dpNo, dpDate, baleDate, baleNo, partyCode = "", partyName = "", station = "", transportMode = "", boxSize = "", modePacking = "", chargecode = "";

        dpNo = txtDpNo.getText().trim();
        dpDate = txtDpDate.getText().trim();
        baleNo = txtBaleNo.getText().trim();
        if (txtBaleDate.getText().trim().length() == 10) {
            baleDate = txtBaleDate.getText().trim();
        } else {
            baleDate = "00/00/0000";
        }
        partyCode = txtPartyCode.getText().trim();
        partyName = lblPartyName.getText().trim();
        station = txtStation.getText().trim();
        boxSize = txtBoxSize.getText().trim().toUpperCase();
        transportMode = txtTransportMode.getText().trim();
        modePacking = cmbModePacking.getSelectedItem().toString();
        chargecode = txtChargeCode.getText().trim();

        ObjFeltPacking.setAttribute("FFNO", FFNo);
        ObjFeltPacking.setAttribute("PKG_DP_NO", dpNo);
        ObjFeltPacking.setAttribute("PKG_DP_DATE", dpDate);
        ObjFeltPacking.setAttribute("PKG_BALE_NO", baleNo);
        ObjFeltPacking.setAttribute("PKG_BALE_DATE", baleDate);
        ObjFeltPacking.setAttribute("PKG_PARTY_CODE", partyCode);
        ObjFeltPacking.setAttribute("PKG_PARTY_NAME", partyName);
        ObjFeltPacking.setAttribute("PKG_STATION", station);
        ObjFeltPacking.setAttribute("PKG_TRANSPORT_MODE", transportMode);
        ObjFeltPacking.setAttribute("PKG_BOX_SIZE", boxSize);
        ObjFeltPacking.setAttribute("PKG_MODE_PACKING", modePacking);
        ObjFeltPacking.setAttribute("PKG_CHARGE_CODE", chargecode);

        //-------- Update Approval Specific Fields -----------//
        ObjFeltPacking.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFeltPacking.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjFeltPacking.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFeltPacking.setAttribute("FROM_REMARKS", txtToRemarks.getText().trim());
        ObjFeltPacking.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
        if (OpgApprove.isSelected()) {
            ObjFeltPacking.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjFeltPacking.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjFeltPacking.setAttribute("APPROVAL_STATUS", "R");
            ObjFeltPacking.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            ObjFeltPacking.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjFeltPacking.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
        } else {
            ObjFeltPacking.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
        }

        ObjFeltPacking.hmFeltPackingDetails.clear();
        // Insert entered data in hashmap for update or insert
        for (int i = 0; i < Table.getRowCount(); i++) {
            clsFeltPackingDetails ObjFeltPackingDetails = new clsFeltPackingDetails();
            String pieceNo = (String) Table.getValueAt(i, 1);

            ObjFeltPackingDetails.setAttribute("PKG_PIECE_NO", pieceNo); //1
            ObjFeltPackingDetails.setAttribute("PKG_LENGTH", Float.parseFloat((String) Table.getValueAt(i, 2)));
            ObjFeltPackingDetails.setAttribute("PKG_WIDTH", Float.parseFloat((String) Table.getValueAt(i, 3))); //3
            
            try {
                ObjFeltPackingDetails.setAttribute("PKG_GSM", Float.parseFloat((String) Table.getValueAt(i, 4))); //4
            } catch (Exception r) {
                ObjFeltPackingDetails.setAttribute("PKG_GSM", 0.0); //4
            }
            try {
                ObjFeltPackingDetails.setAttribute("PKG_WEIGHT", Float.parseFloat((String) Table.getValueAt(i, 5))); //4
            } catch (Exception r) {
                ObjFeltPackingDetails.setAttribute("PKG_WEIGHT", 0.0); //4
            }
            try {
                ObjFeltPackingDetails.setAttribute("PKG_SQM", Float.parseFloat((String) Table.getValueAt(i, 6))); //5
            } catch (Exception r1) {
                ObjFeltPackingDetails.setAttribute("PKG_SQM", 0.0); //5
            }
            try {
                ObjFeltPackingDetails.setAttribute("PKG_SYN_PER", Float.parseFloat((String) Table.getValueAt(i, 7)));;
            } catch (Exception r2) {
                ObjFeltPackingDetails.setAttribute("PKG_SYN_PER", 0.0);;
            }
            ObjFeltPackingDetails.setAttribute("PKG_STYLE", (String) Table.getValueAt(i, 8));;
            ObjFeltPackingDetails.setAttribute("PKG_PRODUCT_CODE", (String) Table.getValueAt(i, 9));
            ObjFeltPackingDetails.setAttribute("PKG_PRODUCT_DESC", (String) Table.getValueAt(i, 10));
            ObjFeltPackingDetails.setAttribute("PKG_MACHINE_NO", (String) Table.getValueAt(i, 11));;
            ObjFeltPackingDetails.setAttribute("PKG_MCN_POSITION_DESC", (String) Table.getValueAt(i, 12));;
            ObjFeltPackingDetails.setAttribute("PKG_ORDER_NO", (String) Table.getValueAt(i, 16)); //14
            ObjFeltPackingDetails.setAttribute("PKG_ORDER_DATE", (String) Table.getValueAt(i, 17)); //15
            ObjFeltPackingDetails.setAttribute("PKG_PO_NO", (String) Table.getValueAt(i, 18)); //16
            ObjFeltPackingDetails.setAttribute("PKG_PO_DATE", (String) Table.getValueAt(i, 19)); //17
            ObjFeltPacking.hmFeltPackingDetails.put(Integer.toString(ObjFeltPacking.hmFeltPackingDetails.size() + 1), ObjFeltPackingDetails);
        }
    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        lblPartyName.setText("");
        txtDpDate.setEnabled(false);
        EnableToolbar();
        SetMenuForRights();
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.FeltSales.FeltPacking.frmFindFeltPacking", true);
        frmFindFeltPacking ObjFindFeltPacking = (frmFindFeltPacking) ObjLoader.getObj();

        if (ObjFindFeltPacking.Cancelled == false) {
            if (!ObjFeltPacking.Filter(ObjFindFeltPacking.stringFindQuery)) {
                JOptionPane.showMessageDialog(frmFeltPacking.this, " No records found.", "Find Felt Packing Details", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    // find details by doc no
    public void Find(String docNo) {
        ObjFeltPacking.Filter("PKG_DP_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    // find all pending document
    public void FindWaiting() {
        ObjFeltPacking.Filter("PKG_DP_NO IN (SELECT H.PKG_DP_NO FROM PRODUCTION.FELT_PACKING_HEADER H, PRODUCTION.FELT_PROD_DOC_DATA D WHERE H.PKG_DP_NO=D.DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=715 AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void MoveFirst() {
        ObjFeltPacking.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        ObjFeltPacking.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        ObjFeltPacking.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        ObjFeltPacking.MoveLast();
        DisplayData();
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        OpgHold.setSelected(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //=============== Setting Table Fields ==================//
        DataModel.ClearAllReadOnly();
        Table.setEnabled(false);
    }

    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(715, ObjFeltPacking.getAttribute("PKG_DP_NO").getString());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {

                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(715, ObjFeltPacking.getAttribute("PKG_DP_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(715, ObjFeltPacking.getAttribute("PKG_DP_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(715, ObjFeltPacking.getAttribute("PKG_DP_NO").getString());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }

    private void FormatGrid() {
        DataModelPieceNo = new EITLTableModel();
        Table.removeAll();

        Table.setModel(DataModelPieceNo);
        TableColumnModel ColModel = Table.getColumnModel();
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        DataModelPieceNo.addColumn("Sr.No"); //0
        DataModelPieceNo.addColumn("Piece No."); //1
        DataModelPieceNo.addColumn("Length"); //2
        DataModelPieceNo.addColumn("Width"); //3
        DataModelPieceNo.addColumn("GSM"); //4
        DataModelPieceNo.addColumn("Weight"); //5
        DataModelPieceNo.addColumn("SQM"); //6
        DataModelPieceNo.addColumn("Syn %"); //7
        DataModelPieceNo.addColumn("Style"); //8
        DataModelPieceNo.addColumn("Product Code"); //9
        DataModelPieceNo.addColumn("Product Desc"); //10
        DataModelPieceNo.addColumn("Machine No"); //11
        DataModelPieceNo.addColumn("Position No"); //12
        DataModelPieceNo.addColumn("Position No(Design)"); //13
        DataModelPieceNo.addColumn("Position Description"); //14
        DataModelPieceNo.addColumn("UPN"); //15
        DataModelPieceNo.addColumn("Order No"); //16
        DataModelPieceNo.addColumn("Order Date"); //17
        DataModelPieceNo.addColumn("Po No"); //18
        DataModelPieceNo.addColumn("Po Date"); //19
        
        

        DataModelPieceNo.SetVariable(0, "");
        DataModelPieceNo.SetVariable(1, "PKG_PIECE_NO");
        DataModelPieceNo.SetVariable(2, "PKG_LENGTH");
        DataModelPieceNo.SetVariable(3, "PKG_WIDTH");
        DataModelPieceNo.SetVariable(4, "PKG_GSM");
        DataModelPieceNo.SetVariable(5, "PKG_WEIGHT");
        DataModelPieceNo.SetVariable(6, "PKG_SQM");
        DataModelPieceNo.SetVariable(7, "PKG_SYN_PER");
        DataModelPieceNo.SetVariable(8, "PKG_STYLE");
        DataModelPieceNo.SetVariable(9, "PKG_PRODUCT_CODE");
        DataModelPieceNo.SetVariable(10, "PKG_MCN_POSITION_DESC");
        DataModelPieceNo.SetVariable(11, "PKG_MACHINE_NO");
        DataModelPieceNo.SetVariable(12, "PKG_ORDER_NO");
        DataModelPieceNo.SetVariable(13, "PKG_ORDER_DATE");
        DataModelPieceNo.SetVariable(14, "PKG_PO_NO");
        DataModelPieceNo.SetVariable(15, "PKG_PO_DATE");
        
        //DataModelPieceNo.SetNumeric(2, true);
        
        DataModelPieceNo.TableReadOnly(false);

        for (int i = 1; i <= 19; i++) {
            DataModelPieceNo.SetReadOnly(i);
        }
       
        
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableColumnModel tcm = TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(90);
        tcm.getColumn(5).setPreferredWidth(90);
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From Ip");

        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(2).setPreferredWidth(50);
        tcm.getColumn(3).setPreferredWidth(20);
    }

    private void GenerateModePackingCombo() {

        EITLComboModel cmbModePackingModel = new EITLComboModel();
        cmbModePacking.removeAllItems();
        cmbModePacking.setModel(cmbModePackingModel);

        ComboData aData = new ComboData();
        aData = new ComboData();
        aData.strCode = "0";
        aData.Text = "Select Mode";
        cmbModePackingModel.addElement(aData);

        aData = new ComboData();
        aData.strCode = "1";
        aData.Text = "SLEEVE";
        cmbModePackingModel.addElement(aData);

        aData = new ComboData();
        aData.strCode = "2";
        aData.Text = "BALE";
        cmbModePackingModel.addElement(aData);

        aData = new ComboData();
        aData.strCode = "3";
        aData.Text = "WOODEN BOX";
        cmbModePackingModel.addElement(aData);

    }

    private void PreviewReport() {
        String partycode = txtPartyCode.getText().trim();
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();
            parameterMap.put("CONTEXT","http://200.0.0.227:8080/SDMLERP/");

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            String strSQL = "SELECT C.ADDRESS1,D.POSITION_DESC,A.PKG_BALE_NO,A.PKG_BALE_DATE,A.PKG_TRANSACTION_CODE,A.PKG_TRANSPORT_MODE,A.PKG_BOX_SIZE,A.PKG_PARTY_CODE,A.PKG_PARTY_NAME,A.PKG_STATION,B.PKG_PIECE_NO,B.PKG_LENGTH,B.PKG_WIDTH, B.PKG_WEIGHT, B.PKG_GSM, B.PKG_SYN_PER, B.PKG_STYLE,B.PKG_PRODUCT_CODE,B.PKG_PRODUCT_DESC, B.PKG_MCN_POSITION_DESC, B.PKG_ORDER_NO,B.PKG_SQM,B.PKG_ORDER_DATE,B.PKG_MACHINE_NO,B.PKG_PO_NO,B.PKG_PO_DATE FROM PRODUCTION.FELT_PKG_SLIP_DETAIL B,PRODUCTION.FELT_PKG_SLIP_HEADER A,DINESHMILLS.D_SAL_PARTY_MASTER C,PRODUCTION.FELT_MACHINE_POSITION_MST D WHERE D.POSITION_NO=B.PKG_MCN_POSITION_DESC AND A.PKG_DP_NO='"+txtDpNo.getText().trim()+"' AND A.PKG_BALE_NO=B.PKG_BALE_NO AND A.PKG_BALE_DATE=B.PKG_BALE_DATE AND A.PKG_PARTY_CODE=C.PARTY_CODE AND A.APPROVED=1 AND A.CANCELED=0";
            

            rpt.setReportName("/EITLERP/FeltSales/FeltPacking/rptFeltPacking.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/EITLERP/FeltSales/FeltPacking/Packing.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        } 
    }

    private void PreviewReport1() {
        String partycode = txtPartyCode.getText().trim();
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();
            parameterMap.put("CONTEXT","http://200.0.0.227:8080/SDMLERP/");

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            String strSQL = "SELECT C.ADDRESS1,D.POSITION_DESC,A.PKG_BALE_NO,A.PKG_BALE_DATE,A.PKG_TRANSACTION_CODE,A.PKG_TRANSPORT_MODE,A.PKG_BOX_SIZE,A.PKG_PARTY_CODE,A.PKG_PARTY_NAME,A.PKG_STATION,B.PKG_PIECE_NO,B.PKG_LENGTH,B.PKG_WIDTH, B.PKG_WEIGHT, B.PKG_GSM, B.PKG_SYN_PER, B.PKG_STYLE,B.PKG_PRODUCT_CODE,B.PKG_PRODUCT_DESC, B.PKG_MCN_POSITION_DESC, B.PKG_ORDER_NO,B.PKG_SQM,B.PKG_ORDER_DATE,B.PKG_MACHINE_NO,B.PKG_PO_NO,B.PKG_PO_DATE FROM PRODUCTION.FELT_PKG_SLIP_DETAIL B,PRODUCTION.FELT_PKG_SLIP_HEADER A,DINESHMILLS.D_SAL_PARTY_MASTER C,PRODUCTION.FELT_MACHINE_POSITION_MST D WHERE D.POSITION_NO=B.PKG_MCN_POSITION_DESC AND A.PKG_DP_NO='"+txtDpNo.getText().trim()+"' AND A.PKG_BALE_NO=B.PKG_BALE_NO AND A.PKG_BALE_DATE=B.PKG_BALE_DATE AND A.PKG_PARTY_CODE=C.PARTY_CODE AND A.APPROVED=1 AND A.CANCELED=0";
            

            rpt.setReportName("/EITLERP/FeltSales/FeltPacking/Packing1.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        } 
    }
    
    private void PreviewReport2() {
        String partycode = txtPartyCode.getText().trim();
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();
            parameterMap.put("CONTEXT","http://200.0.0.227:8080/SDMLERP/");

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            String strSQL = "SELECT C.ADDRESS1,D.POSITION_DESC,A.PKG_BALE_NO,A.PKG_BALE_DATE,A.PKG_TRANSACTION_CODE,A.PKG_TRANSPORT_MODE,A.PKG_BOX_SIZE,A.PKG_PARTY_CODE,A.PKG_PARTY_NAME,A.PKG_STATION,B.PKG_PIECE_NO,B.PKG_LENGTH,B.PKG_WIDTH, B.PKG_WEIGHT, B.PKG_GSM, B.PKG_SYN_PER, B.PKG_STYLE,B.PKG_PRODUCT_CODE,B.PKG_PRODUCT_DESC, B.PKG_MCN_POSITION_DESC, B.PKG_ORDER_NO,B.PKG_SQM,B.PKG_ORDER_DATE,B.PKG_MACHINE_NO,B.PKG_PO_NO,B.PKG_PO_DATE FROM PRODUCTION.FELT_PKG_SLIP_DETAIL B,PRODUCTION.FELT_PKG_SLIP_HEADER A,DINESHMILLS.D_SAL_PARTY_MASTER C,PRODUCTION.FELT_MACHINE_POSITION_MST D WHERE D.POSITION_NO=B.PKG_MCN_POSITION_DESC AND A.PKG_DP_NO='"+txtDpNo.getText().trim()+"' AND A.PKG_BALE_NO=B.PKG_BALE_NO AND A.PKG_BALE_DATE=B.PKG_BALE_DATE AND A.PKG_PARTY_CODE=C.PARTY_CODE AND A.APPROVED=1 AND A.CANCELED=0";
            

            rpt.setReportName("/EITLERP/FeltSales/FeltPacking/Packing2.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        } 
    }
    
    private void PreviewReport3() {
        String partycode = txtPartyCode.getText().trim();
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);
            parameterMap.put("CONTEXT","http://200.0.0.227:8080/SDMLERP/");

            String strSQL = "SELECT C.ADDRESS1,D.POSITION_DESC,A.PKG_BALE_NO,A.PKG_BALE_DATE,A.PKG_TRANSACTION_CODE,A.PKG_TRANSPORT_MODE,A.PKG_BOX_SIZE,A.PKG_PARTY_CODE,A.PKG_PARTY_NAME,A.PKG_STATION,B.PKG_PIECE_NO,B.PKG_LENGTH,B.PKG_WIDTH, B.PKG_WEIGHT, B.PKG_GSM, B.PKG_SYN_PER, B.PKG_STYLE,B.PKG_PRODUCT_CODE,B.PKG_PRODUCT_DESC, B.PKG_MCN_POSITION_DESC, B.PKG_ORDER_NO,B.PKG_SQM,B.PKG_ORDER_DATE,B.PKG_MACHINE_NO,B.PKG_PO_NO,B.PKG_PO_DATE FROM PRODUCTION.FELT_PKG_SLIP_DETAIL B,PRODUCTION.FELT_PKG_SLIP_HEADER A,DINESHMILLS.D_SAL_PARTY_MASTER C,PRODUCTION.FELT_MACHINE_POSITION_MST D WHERE D.POSITION_NO=B.PKG_MCN_POSITION_DESC AND A.PKG_DP_NO='"+txtDpNo.getText().trim()+"' AND A.PKG_BALE_NO=B.PKG_BALE_NO AND A.PKG_BALE_DATE=B.PKG_BALE_DATE AND A.PKG_PARTY_CODE=C.PARTY_CODE AND A.APPROVED=1 AND A.CANCELED=0";
            

            rpt.setReportName("/EITLERP/FeltSales/FeltPacking/Packing3.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        } 
    }
    
    private void ReportShow() {
        
        try {
            
            
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("ADDRESS1");//1
            objReportData.AddColumn("POSITION_DESC");//2
            objReportData.AddColumn("PKG_BALE_NO");//3
            objReportData.AddColumn("PKG_BALE_DATE");//4
            objReportData.AddColumn("PKG_PARTY_NAME");//5
            objReportData.AddColumn("PKG_PARTY_CODE");//6
            objReportData.AddColumn("PKG_ORDER_NO");//7
            objReportData.AddColumn("PKG_ORDER_DATE");//8
            objReportData.AddColumn("PKG_TRANSPORT_MODE");//9
            objReportData.AddColumn("PKG_STATION");//10
            objReportData.AddColumn("PKG_PIECE_NO");//11
            objReportData.AddColumn("PKG_LENGTH");//12
            objReportData.AddColumn("PKG_WIDTH");//13
            objReportData.AddColumn("PKG_WEIGHT");//14
            objReportData.AddColumn("PKG_GSM");//15
            objReportData.AddColumn("PKG_SQM");//16
            objReportData.AddColumn("PKG_MCN_POSITION_DESC");//17
            objReportData.AddColumn("PKG_SYN_PER");//18
            objReportData.AddColumn("PKG_STYLE");//19
            objReportData.AddColumn("PKG_PRODUCT_CODE");//20
            objReportData.AddColumn("PKG_PRODUCT_DESC");//21
            objReportData.AddColumn("PKG_BOX_SIZE");//22
            objReportData.AddColumn("PKG_PO_NO");//23
            objReportData.AddColumn("PKG_PO_DATE");//24
            objReportData.AddColumn("PKG_MACHINE_NO");//24
            
            
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            
            objOpeningRow.setValue("ADDRESS1","");//1
            objOpeningRow.setValue("POSITION_DESC","");//2
            objOpeningRow.setValue("PKG_BALE_NO","");//3
            objOpeningRow.setValue("PKG_BALE_DATE","");//4
            objOpeningRow.setValue("PKG_PARTY_NAME","");//5
            objOpeningRow.setValue("PKG_PARTY_CODE","");//6
            objOpeningRow.setValue("PKG_ORDER_NO","");//7
            objOpeningRow.setValue("PKG_ORDER_DATE","");//8
            objOpeningRow.setValue("PKG_TRANSPORT_MODE","");//9
            objOpeningRow.setValue("PKG_STATION","");//10
            objOpeningRow.setValue("PKG_PIECE_NO","");//11
            objOpeningRow.setValue("PKG_LENGTH","");//12
            objOpeningRow.setValue("PKG_WIDTH","");//13
            objOpeningRow.setValue("PKG_GSM","");//14
            objOpeningRow.setValue("PKG_WEIGHT","");//15
            objOpeningRow.setValue("PKG_SQM","");//16
            objOpeningRow.setValue("PKG_MCN_POSITION_DESC","");//17
            objOpeningRow.setValue("PKG_SYN_PER","");//18
            objOpeningRow.setValue("PKG_STYLE","");//19
            objOpeningRow.setValue("PKG_PRODUCT_CODE","");//20
            objOpeningRow.setValue("PKG_PRODUCT_DESC","");//21
            objOpeningRow.setValue("PKG_BOX_SIZE","");//22
            objOpeningRow.setValue("PKG_PO_NO","");//23
            objOpeningRow.setValue("PKG_PO_DATE","");//24
            objOpeningRow.setValue("PKG_MACHINE_NO","");//24
           
            String strSQL="SELECT C.ADDRESS1,D.POSITION_DESC,A.PKG_BALE_NO,A.PKG_BALE_DATE,A.PKG_TRANSACTION_CODE,A.PKG_TRANSPORT_MODE,A.PKG_BOX_SIZE,A.PKG_PARTY_CODE,A.PKG_PARTY_NAME,A.PKG_STATION,B.PKG_PIECE_NO,B.PKG_LENGTH,B.PKG_WIDTH, B.PKG_WEIGHT, B.PKG_GSM, B.PKG_SYN_PER, B.PKG_STYLE,B.PKG_PRODUCT_CODE,B.PKG_PRODUCT_DESC, B.PKG_MCN_POSITION_DESC, B.PKG_ORDER_NO,B.PKG_SQM,B.PKG_ORDER_DATE,B.PKG_MACHINE_NO,B.PKG_PO_NO,B.PKG_PO_DATE FROM PRODUCTION.FELT_PKG_SLIP_DETAIL B,PRODUCTION.FELT_PKG_SLIP_HEADER A,DINESHMILLS.D_SAL_PARTY_MASTER C,PRODUCTION.FELT_MACHINE_POSITION_MST D WHERE D.POSITION_NO=B.PKG_MCN_POSITION_DESC AND A.PKG_DP_NO='"+txtDpNo.getText().trim()+"' AND A.PKG_BALE_NO=B.PKG_BALE_NO AND A.PKG_BALE_DATE=B.PKG_BALE_DATE AND A.PKG_PARTY_CODE=C.PARTY_CODE AND A.APPROVED=1 AND A.CANCELED=0 ";
            
            System.out.println(strSQL);
            ResultSet rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            int Counter = 0;
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Counter ++;
                    objRow=objReportData.newRow();
                    
                    objRow.setValue("ADDRESS1",UtilFunctions.getString(rsTmp,"ADDRESS1",""));
                    objRow.setValue("POSITION_DESC",UtilFunctions.getString(rsTmp,"POSITION_DESC",""));
                    objRow.setValue("PKG_BALE_NO",UtilFunctions.getString(rsTmp,"PKG_BALE_NO",""));
                    objRow.setValue("PKG_BALE_DATE",UtilFunctions.getString(rsTmp,"PKG_BALE_DATE",""));
                    objRow.setValue("PKG_PARTY_NAME",UtilFunctions.getString(rsTmp,"PKG_PARTY_NAME",""));
                    objRow.setValue("PKG_PARTY_CODE",UtilFunctions.getString(rsTmp,"PKG_PARTY_CODE",""));
                    objRow.setValue("PKG_ORDER_NO",UtilFunctions.getString(rsTmp,"PKG_ORDER_NO",""));
                    objRow.setValue("PKG_ORDER_DATE",UtilFunctions.getString(rsTmp,"PKG_ORDER_DATE",""));
                    objRow.setValue("PKG_TRANSPORT_MODE",UtilFunctions.getString(rsTmp,"PKG_TRANSPORT_MODE",""));
                    objRow.setValue("PKG_STATION",UtilFunctions.getString(rsTmp,"PKG_STATION",""));
                    objRow.setValue("PKG_PIECE_NO",UtilFunctions.getString(rsTmp,"PKG_PIECE_NO",""));
                    objRow.setValue("PKG_LENGTH",UtilFunctions.getString(rsTmp,"PKG_LENGTH",""));
                    objRow.setValue("PKG_WIDTH",UtilFunctions.getString(rsTmp,"PKG_WIDTH",""));
                    objRow.setValue("PKG_GSM",UtilFunctions.getString(rsTmp,"PKG_GSM",""));
                    objRow.setValue("PKG_WEIGHT",UtilFunctions.getString(rsTmp,"PKG_WEIGHT",""));
                    objRow.setValue("PKG_SQM",UtilFunctions.getString(rsTmp,"PKG_SQM",""));
                    objRow.setValue("PKG_MCN_POSITION_DESC",UtilFunctions.getString(rsTmp,"PKG_MCN_POSITION_DESC",""));
                    objRow.setValue("PKG_SYN_PER",UtilFunctions.getString(rsTmp,"PKG_SYN_PER",""));
                    objRow.setValue("PKG_STYLE",UtilFunctions.getString(rsTmp,"PKG_STYLE",""));
                    objRow.setValue("PKG_PRODUCT_CODE",UtilFunctions.getString(rsTmp,"PKG_PRODUCT_CODE",""));
                    objRow.setValue("PKG_PRODUCT_DESC",UtilFunctions.getString(rsTmp,"PKG_PRODUCT_DESC",""));
                    objRow.setValue("PKG_BOX_SIZE",UtilFunctions.getString(rsTmp,"PKG_BOX_SIZE",""));
                    objRow.setValue("PKG_PO_NO",UtilFunctions.getString(rsTmp,"PKG_PO_NO",""));
                    objRow.setValue("PKG_PO_DATE",UtilFunctions.getString(rsTmp,"PKG_PO_DATE",""));
                    objRow.setValue("PKG_MACHINE_NO",UtilFunctions.getString(rsTmp,"PKG_MACHINE_NO",""));
                    
                    objReportData.AddRow(objRow);
                    
                    rsTmp.next();
                }
            }
            
            int Comp_ID = EITLERPGLOBAL.gCompanyID;
            
            HashMap Parameters=new HashMap();
           Parameters.put("PKG_DP_NO",txtDpNo.getText().trim());
//            Parameters.put("BALE_NO",txtBaleNo.getText().trim());
//            Parameters.put("BALE_NO",txtBaleDate.getText().trim());
//            //Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptPacking.rpt",Parameters,objReportData);
            
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
}
