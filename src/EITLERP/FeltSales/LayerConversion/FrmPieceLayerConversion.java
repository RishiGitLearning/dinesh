/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.LayerConversion;

import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.common.JavaMail;
import EITLERP.FeltSales.common.LOV;
import EITLERP.Loader;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.SelectFirstFree;
import EITLERP.clsAuthority;
import EITLERP.clsDepartment;
import EITLERP.clsDocFlow;
import EITLERP.clsFirstFree;
import EITLERP.clsHierarchy;
import EITLERP.clsSales_Party;
import EITLERP.clsUser;
import EITLERP.data;
import EITLERP.frmPendingApprovals;
import TReportWriter.TReportEngine;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.TableColumnModel;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author DAXESH PRAJAPATI
 *
 */
public class FrmPieceLayerConversion extends javax.swing.JApplet {

    private int EditMode = 0;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    //private EITLTableModel DataModel;
    private EITLTableModel DataModel_ExistSALES;
    private EITLTableModel DataModel_ExistWIP;
    private EITLTableModel DataModel_ConvertedSALES;
    private EITLTableModel DataModel_ConvertedWIP;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private int FFNo = 0;
    private final int ModuleId = 821;
    private String DOC_NO = "";
    private clsPieceLayerConversion feltPieceLayerConversion;
    private EITLComboModel cmbSendToModel;
    private TReportEngine objEngine = new TReportEngine();
    private String AB_FLAG = "";
    String seleval = "", seltyp = "", selqlt = "", selshd = "", selpiece = "", selext = "", selinv = "", selsz = "";
    private int mlstrc;

    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    DateFormat dateForDB = new SimpleDateFormat("yyyy-MM-dd");

//    DecimalFormat f_single = new DecimalFormat("##.0");
//    DecimalFormat f_double = new DecimalFormat("##.00");
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    public frmPendingApprovals frmPA;

    /**
     * Initializes the applet FrmfeltPieceLayerConversion
     */
    @Override
    public void init() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(dim.width, dim.height);
        initComponents();
        GenerateCombos();
        
        
        GenerateFromCombo();
        GenerateHierarchyCombo();
        SetupApproval();
        SetMenuForRights();
        
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        
        FormatGrid_existSALES();
        FormatGrid_existWIP();
        FormatGrid_convertedSALES();
        FormatGrid_convertedWIP();
        DefaultSettings();
        //Cancel();
        try {
            MaskFormatter dateMask = new MaskFormatter("##/##/####");
            dateMask.setPlaceholderCharacter('_');
            dateMask.install(DocDate);

        } catch (ParseException ex) {
            System.out.println("Error on Mask : " + ex.getLocalizedMessage());
        }
        DocDate.setText(df.format(new Date()));

        feltPieceLayerConversion = new clsPieceLayerConversion();
        boolean load = feltPieceLayerConversion.LoadData();

        if (load) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + feltPieceLayerConversion.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        SetFields(false);
        
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    public void DefaultSettings() {

        //String data = toString();
        Object[] rowData = new Object[15];
        rowData[0] = "1";
        DataModel_ExistSALES.addRow(rowData);
        DataModel_ExistWIP.addRow(rowData);
        DataModel_ConvertedSALES.addRow(rowData);
        DataModel_ConvertedWIP.addRow(rowData);

        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        clearFields();
    }

    private void clearFields() {
        DocNo.setText("0");
        txtPieceNo.setText("");
        
        //JOptionPane.showMessageDialog(null, "Data Model size : "+DataModel.getRowCount());
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        
        FormatGrid_existSALES();
        FormatGrid_existWIP();
        FormatGrid_convertedSALES();
        FormatGrid_convertedWIP();
        // FormatGridA();
        FormatGridHS();

        for (int i = 0; i < DataModel_ExistSALES.getRowCount(); i++) {
            DataModel_ExistSALES.removeRow(i);
        }
        if (DataModel_ExistSALES.getRowCount() > 0) {
            DataModel_ExistSALES.removeRow(0);
        }
        
        for (int i = 0; i < DataModel_ExistWIP.getRowCount(); i++) {
            DataModel_ExistWIP.removeRow(i);
        }
        if (DataModel_ExistWIP.getRowCount() > 0) {
            DataModel_ExistWIP.removeRow(0);
        }
        
        
        for (int i = 0; i < DataModel_ConvertedSALES.getRowCount(); i++) {
            DataModel_ConvertedSALES.removeRow(i);
        }
        if (DataModel_ConvertedSALES.getRowCount() > 0) {
            DataModel_ConvertedSALES.removeRow(0);
        }
        
        
        for (int i = 0; i < DataModel_ConvertedWIP.getRowCount(); i++) {
            DataModel_ConvertedWIP.removeRow(i);
        }
        if (DataModel_ConvertedWIP.getRowCount() > 0) {
            DataModel_ConvertedWIP.removeRow(0);
        }
        
        Object[] rowData = new Object[15];
        rowData[0] = 1;
        DataModel_ExistSALES.addRow(rowData);
        DataModel_ExistWIP.addRow(rowData);
        DataModel_ConvertedSALES.addRow(rowData);
        DataModel_ConvertedWIP.addRow(rowData);
    }

    private void DisplayData() {

        //=========== Color Indication ===============//
        try {

            if (feltPieceLayerConversion.getAttribute("APPROVED").getInt() == 1) {
                lblTitle.setBackground(Color.BLUE);
                lblTitle.setForeground(Color.WHITE);
            }

            if (feltPieceLayerConversion.getAttribute("APPROVED").getInt() == 0) {
                lblTitle.setBackground(Color.GRAY);
                lblTitle.setForeground(Color.BLACK);
            }

            if (feltPieceLayerConversion.getAttribute("CANCELED").getInt() == 1) {
                lblTitle.setBackground(Color.RED);
                lblTitle.setForeground(Color.BLACK);
            }
        } catch (Exception c) {

            c.printStackTrace();
        }
        //============================================//

        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleId)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        //clsfeltPieceLayerConversion.ChangeVoucherNo=false;
        clearFields();
        try {
            DocNo.setText(feltPieceLayerConversion.getAttribute("DOC_NO").getString());
            lblTitle.setText("Felt Piece LayerConversion - " + feltPieceLayerConversion.getAttribute("DOC_NO").getString());
            DocDate.setText(EITLERPGLOBAL.formatDate(feltPieceLayerConversion.getAttribute("DOC_DATE").getString()));
            lblRevNo.setText(Integer.toString((int) feltPieceLayerConversion.getAttribute("REVISION_NO").getVal()));
            txtPieceNo.setText(feltPieceLayerConversion.getAttribute("PIECE_NO").getString());
            
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, feltPieceLayerConversion.getAttribute("HIERARCHY_ID").getInt());

           
            FormatGrid_existSALES();
            FormatGrid_existWIP();
            FormatGrid_convertedSALES();
            FormatGrid_convertedWIP();
            
            //Now Generate Table
            for (int i = 1; i <= feltPieceLayerConversion.hmFeltPieceLayerConversionDetails_existSales.size(); i++) {
                clsPieceLayerConversionDetails ObjItem = (clsPieceLayerConversionDetails) feltPieceLayerConversion.hmFeltPieceLayerConversionDetails_existSales.get(Integer.toString(i));
                
                int NewRow = i - 1;
                Object[] rowData = new Object[1];
                //rowData[0] = (NewRow+1)+"";
                DataModel_ExistSALES.addRow(rowData);
                
                DataModel_ExistSALES.setValueByVariable("SR_NO", ObjItem.getAttribute("SR_NO").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("PARTY_CODE", ObjItem.getAttribute("PARTY_CODE").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("PARTY_NAME", ObjItem.getAttribute("PARTY_NAME").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("MACHINE_NO", ObjItem.getAttribute("MACHINE_NO").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("POSITION", ObjItem.getAttribute("POSITION").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("POSITION_DESC", ObjItem.getAttribute("POSITION_DESC").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("PIECE_NO", ObjItem.getAttribute("PIECE_NO").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("PRODUCT", ObjItem.getAttribute("PRODUCT").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("PRODUCT_DESCRIPTION", ObjItem.getAttribute("PRODUCT_DESCRIPTION").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("PRODUCT_GROUP", ObjItem.getAttribute("PRODUCT_GROUP").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("LENGTH", ObjItem.getAttribute("LENGTH").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("WIDTH", ObjItem.getAttribute("WIDTH").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("GSM", ObjItem.getAttribute("GSM").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("THEORTICAL_WEIGHT", ObjItem.getAttribute("THEORTICAL_WEIGHT").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("SQ_MT", ObjItem.getAttribute("SQ_MT").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("STYLE", ObjItem.getAttribute("STYLE").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("REQ_MONTH", ObjItem.getAttribute("REQ_MONTH").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("SYN_PER", ObjItem.getAttribute("SYN_PER").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("REMARK", ObjItem.getAttribute("REMARK").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("BILL_LENGTH", ObjItem.getAttribute("BILL_LENGTH").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("BILL_WIDTH", ObjItem.getAttribute("BILL_WIDTH").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("BILL_WEIGHT", ObjItem.getAttribute("BILL_WEIGHT").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("BILL_SQMTR", ObjItem.getAttribute("BILL_SQMTR").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("BILL_GSM", ObjItem.getAttribute("BILL_GSM").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("BILL_PRODUCT_CODE", ObjItem.getAttribute("BILL_PRODUCT_CODE").getString(), NewRow);
                DataModel_ExistSALES.setValueByVariable("PIECE_STAGE", ObjItem.getAttribute("PIECE_STAGE").getString(), NewRow);
                DataModel_ExistSALES.setValueAt(ObjItem.getAttribute("SR_NO").getString(), NewRow, 0);
               
            }
            
            //Now Generate Table
            for(int i = 1; i <= feltPieceLayerConversion.hmFeltPieceLayerConversionDetails_existWIP.size(); i++) {
                clsPieceLayerConversionDetails ObjItem = (clsPieceLayerConversionDetails) feltPieceLayerConversion.hmFeltPieceLayerConversionDetails_existWIP.get(Integer.toString(i));

                Object[] rowData = new Object[1];
                DataModel_ExistWIP.addRow(rowData);
                int NewRow = i - 1;
                //DataModel_ExistWIP.setValueByVariable("SR_NO", (NewRow+1)+"", NewRow);
                DataModel_ExistWIP.setValueByVariable("SR_NO", ObjItem.getAttribute("SR_NO").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("PARTY_CODE", ObjItem.getAttribute("PARTY_CODE").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("PARTY_NAME", ObjItem.getAttribute("PARTY_NAME").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("MACHINE_NO", ObjItem.getAttribute("MACHINE_NO").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("POSITION", ObjItem.getAttribute("POSITION").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("POSITION_DESC", ObjItem.getAttribute("POSITION_DESC").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("PIECE_NO", ObjItem.getAttribute("PIECE_NO").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("EXT_PIECE_NO", ObjItem.getAttribute("EXT_PIECE_NO").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("PRODUCT", ObjItem.getAttribute("PRODUCT").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("PRODUCT_DESCRIPTION", ObjItem.getAttribute("PRODUCT_DESCRIPTION").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("PRODUCT_GROUP", ObjItem.getAttribute("PRODUCT_GROUP").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("LENGTH", ObjItem.getAttribute("LENGTH").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("WIDTH", ObjItem.getAttribute("WIDTH").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("GSM", ObjItem.getAttribute("GSM").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("THEORTICAL_WEIGHT", ObjItem.getAttribute("THEORTICAL_WEIGHT").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("SQ_MT", ObjItem.getAttribute("SQ_MT").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("STYLE", ObjItem.getAttribute("STYLE").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("REQ_MONTH", ObjItem.getAttribute("REQ_MONTH").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("SYN_PER", ObjItem.getAttribute("SYN_PER").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("REMARK", ObjItem.getAttribute("REMARK").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("BILL_LENGTH", ObjItem.getAttribute("BILL_LENGTH").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("BILL_WIDTH", ObjItem.getAttribute("BILL_WIDTH").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("BILL_WEIGHT", ObjItem.getAttribute("BILL_WEIGHT").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("BILL_SQMTR", ObjItem.getAttribute("BILL_SQMTR").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("BILL_GSM", ObjItem.getAttribute("BILL_GSM").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("BILL_PRODUCT_CODE", ObjItem.getAttribute("BILL_PRODUCT_CODE").getString(), NewRow);
                DataModel_ExistWIP.setValueByVariable("PIECE_STAGE", ObjItem.getAttribute("PIECE_STAGE").getString(), NewRow);
                DataModel_ExistWIP.setValueAt(ObjItem.getAttribute("SR_NO").getString(), NewRow, 0);
            }
            
            
            //Now Generate Table
            for(int i = 1; i <= feltPieceLayerConversion.hmFeltPieceLayerConversionDetails_convertedSales.size(); i++) {
                clsPieceLayerConversionDetails ObjItem = (clsPieceLayerConversionDetails) feltPieceLayerConversion.hmFeltPieceLayerConversionDetails_convertedSales.get(Integer.toString(i));

                Object[] rowData = new Object[1];
                DataModel_ConvertedSALES.addRow(rowData);
                int NewRow = i - 1;
                DataModel_ConvertedSALES.setValueByVariable("SR_NO", ObjItem.getAttribute("SR_NO").getString(), NewRow);
                DataModel_ConvertedSALES.setValueByVariable("PIECE_NO", ObjItem.getAttribute("PIECE_NO").getString(), NewRow);
                DataModel_ConvertedSALES.setValueByVariable("PRODUCT", ObjItem.getAttribute("PRODUCT").getString(), NewRow);
                DataModel_ConvertedSALES.setValueByVariable("STYLE", ObjItem.getAttribute("STYLE").getString(), NewRow);
                DataModel_ConvertedSALES.setValueAt(ObjItem.getAttribute("SR_NO").getString(), NewRow, 0);
                
            }
            
            
            //Now Generate Table
            for(int i = 1; i <= feltPieceLayerConversion.hmFeltPieceLayerConversionDetails_convertedWIP.size(); i++) {
                clsPieceLayerConversionDetails ObjItem = (clsPieceLayerConversionDetails) feltPieceLayerConversion.hmFeltPieceLayerConversionDetails_convertedWIP.get(Integer.toString(i));

                Object[] rowData = new Object[1];
                DataModel_ConvertedWIP.addRow(rowData);
                int NewRow = i - 1;
                DataModel_ConvertedWIP.setValueByVariable("SR_NO", ObjItem.getAttribute("SR_NO").getString(), NewRow);
                DataModel_ConvertedWIP.setValueByVariable("WIP_PIECE_NO", ObjItem.getAttribute("WIP_PIECE_NO").getString(), NewRow);
                DataModel_ConvertedWIP.setValueByVariable("WIP_EXT_PIECE_NO", ObjItem.getAttribute("WIP_EXT_PIECE_NO").getString(), NewRow);
                DataModel_ConvertedWIP.setValueByVariable("WIP_PIECE_AB_FLAG", ObjItem.getAttribute("WIP_PIECE_AB_FLAG").getString(), NewRow);
                DataModel_ConvertedWIP.setValueByVariable("PRODUCT", ObjItem.getAttribute("PRODUCT").getString(), NewRow);
                DataModel_ConvertedWIP.setValueByVariable("WIP_PRIORITY_HOLD_CAN_FLAG", ObjItem.getAttribute("WIP_PRIORITY_HOLD_CAN_FLAG").getString(), NewRow);
                DataModel_ConvertedWIP.setValueByVariable("WIP_THORITICAL_WEIGHT", ObjItem.getAttribute("WIP_THORITICAL_WEIGHT").getString(), NewRow);
                DataModel_ConvertedWIP.setValueAt(ObjItem.getAttribute("SR_NO").getString(), NewRow, 0);
            }
            

            //DoNotEvaluate=false;
            //UpdateTotals();
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();
            String DocNo = feltPieceLayerConversion.getAttribute("DOC_NO").getString();
            List = clsFeltProductionApprovalFlow.getDocumentFlow(ModuleId, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];
                //JOptionPane.showMessageDialog(null, "USER ID : "+ObjFlow.getAttribute("USER_ID").getVal());
                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelApprovalStatus.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridHS();
            HashMap History = feltPieceLayerConversion.getHistoryList(EITLERPGLOBAL.gCompanyID + "", DocNo);
            for (int i = 1; i <= History.size(); i++) {
                clsPieceLayerConversion ObjHistory = (clsPieceLayerConversion) History.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, Integer.parseInt(ObjHistory.getAttribute("MODIFIED_BY").getString()));
                rowData[2] = ObjHistory.getAttribute("MODIFIED_DATE").getString();

                String ApprovalStatus = "";

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjHistory.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjHistory.getAttribute("FROM_IP").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
            //txtPieceNoFocusLost(null);
            //============================================================//
            //setSTATUS();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridA() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableApprovalStatus.setAutoResizeMode(TableApprovalStatus.AUTO_RESIZE_OFF);

    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6255, 62551)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6255, 62552)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6255, 62553)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6255, 62555)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            //cmdPreview.setEnabled(false);
            //cmdPrint.setEnabled(false);
        }
    }

    private void SetupApproval() {

        if (cmbHierarchy.getItemCount() > 1) {
            cmbHierarchy.setEnabled(true);
        }
        //JOptionPane.showMessageDialog(null, "Approval Cmb : "+cmbHierarchy.getItemCount());
        //In Edit Mode Hierarchy Should be disabled
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID));
            txtFromRemarks.setText("");
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "Hierarchy Id = "+SelHierarchyID);
        //GenerateFromCombo();
        //GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }

        if (EditMode == 0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            //txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }

        if (clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            OpgReject.setEnabled(false);
        }
        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            //JOptionPane.showMessageDialog(null, "Final Approver");
            OpgApprove.setEnabled(false);
        }
    }

    private void FormatGrid_existSALES()
    {
        try {
            DataModel_ExistSALES = new EITLTableModel();
            Table_ExistSales.removeAll();

            Table_ExistSales.setModel(DataModel_ExistSALES);
            Table_ExistSales.setAutoResizeMode(0);

            DataModel_ExistSALES.addColumn("SrNo"); //0 - Read Only
            DataModel_ExistSALES.addColumn("PIECE NO"); //1
            DataModel_ExistSALES.addColumn("LAYER");//22
            DataModel_ExistSALES.addColumn("PARTY CODE"); //2
            DataModel_ExistSALES.addColumn("PARTY NAME"); //3
            DataModel_ExistSALES.addColumn("MACHINE NO"); //4
            DataModel_ExistSALES.addColumn("POSITION"); //5
            DataModel_ExistSALES.addColumn("POSITION DESC"); //6
            DataModel_ExistSALES.addColumn("PRODUCT"); //7
            DataModel_ExistSALES.addColumn("DESCRIPTION"); //8
            DataModel_ExistSALES.addColumn("GROUP"); //9
            DataModel_ExistSALES.addColumn("LENGTH"); //10
            DataModel_ExistSALES.addColumn("WIDTH"); //11
            DataModel_ExistSALES.addColumn("GSM"); //12
            DataModel_ExistSALES.addColumn("THEORTICAL WEIGHT"); //13
            DataModel_ExistSALES.addColumn("SQ MT"); //14
            DataModel_ExistSALES.addColumn("STYLE"); //15
            DataModel_ExistSALES.addColumn("BILL LENGTH");//16
            DataModel_ExistSALES.addColumn("BILL WIDTH");//17
            DataModel_ExistSALES.addColumn("BILL WEIGHT");//18
            DataModel_ExistSALES.addColumn("BILL SQMTR");//19
            DataModel_ExistSALES.addColumn("BILL GSM");//20
            DataModel_ExistSALES.addColumn("BILL PRODUCT CODE");//21
            DataModel_ExistSALES.addColumn("PIECE STAGE");//22
            
            

            DataModel_ExistSALES.SetVariable(0, "SR_NO"); //0 - Read Only
            DataModel_ExistSALES.SetVariable(1, "PIECE_NO"); //4
            DataModel_ExistSALES.SetVariable(2, "LAYER");//22
            DataModel_ExistSALES.SetVariable(3, "PARTY_CODE"); //1
            DataModel_ExistSALES.SetVariable(4, "PARTY_NAME"); //1
            DataModel_ExistSALES.SetVariable(5, "MACHINE_NO"); //1
            DataModel_ExistSALES.SetVariable(6, "POSITION"); //2
            DataModel_ExistSALES.SetVariable(7, "POSITION_DESC"); //3
            DataModel_ExistSALES.SetVariable(8, "PRODUCT"); //5
            DataModel_ExistSALES.SetVariable(9, "PRODUCT_DESCRIPTION"); //6
            DataModel_ExistSALES.SetVariable(10, "PRODUCT_GROUP"); //7
            DataModel_ExistSALES.SetVariable(11, "LENGTH"); //8
            DataModel_ExistSALES.SetVariable(12, "WIDTH"); //9
            DataModel_ExistSALES.SetVariable(13, "GSM"); //10
            DataModel_ExistSALES.SetVariable(14, "THEORTICAL_WEIGHT"); //11
            DataModel_ExistSALES.SetVariable(15, "SQ_MT"); //12
            DataModel_ExistSALES.SetVariable(16, "STYLE"); //13
            DataModel_ExistSALES.SetVariable(17, "BILL_LENGTH");
            DataModel_ExistSALES.SetVariable(18, "BILL_WIDTH");
            DataModel_ExistSALES.SetVariable(19, "BILL_WEIGHT");
            DataModel_ExistSALES.SetVariable(20, "BILL_SQMTR");
            DataModel_ExistSALES.SetVariable(21, "BILL_GSM");
            DataModel_ExistSALES.SetVariable(22, "BILL_PRODUCT_CODE");//21
            DataModel_ExistSALES.SetVariable(23, "PIECE_STAGE");//22
            

            Table_ExistSales.getColumnModel().getColumn(0).setMinWidth(20);

            for (int i = 1; i <= 23; i++) {
                Table_ExistSales.getColumnModel().getColumn(i).setMinWidth(130);
            }
            
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void FormatGrid_existWIP()
    {
        try {
            DataModel_ExistWIP = new EITLTableModel();
            Table_ExistWIP.removeAll();

            Table_ExistWIP.setModel(DataModel_ExistWIP);
            Table_ExistWIP.setAutoResizeMode(0);

            DataModel_ExistWIP.addColumn("SrNo"); //0 - Read Only
            DataModel_ExistWIP.addColumn("PIECE NO"); //1
            DataModel_ExistWIP.addColumn("EXT PIECE NO"); //1
            DataModel_ExistWIP.addColumn("PARTY CODE"); //2
            DataModel_ExistWIP.addColumn("PARTY NAME"); //3
            DataModel_ExistWIP.addColumn("MACHINE NO"); //4
            DataModel_ExistWIP.addColumn("POSITION"); //5
            DataModel_ExistWIP.addColumn("POSITION DESC"); //6
            DataModel_ExistWIP.addColumn("PRODUCT"); //7
            DataModel_ExistWIP.addColumn("DESCRIPTION"); //8
            DataModel_ExistWIP.addColumn("GROUP"); //9
            DataModel_ExistWIP.addColumn("LENGTH"); //10
            DataModel_ExistWIP.addColumn("WIDTH"); //11
            DataModel_ExistWIP.addColumn("GSM"); //12
            DataModel_ExistWIP.addColumn("THEORTICAL WEIGHT"); //13
            DataModel_ExistWIP.addColumn("SQ MT"); //14
            DataModel_ExistWIP.addColumn("STYLE"); //15
            DataModel_ExistWIP.addColumn("BILL LENGTH");//16
            DataModel_ExistWIP.addColumn("BILL WIDTH");//17
            DataModel_ExistWIP.addColumn("BILL WEIGHT");//18
            DataModel_ExistWIP.addColumn("BILL SQMTR");//19
            DataModel_ExistWIP.addColumn("BILL GSM");//20
            DataModel_ExistWIP.addColumn("BILL PRODUCT CODE");//21
            DataModel_ExistWIP.addColumn("PIECE STAGE");//22

            DataModel_ExistWIP.SetVariable(0, "SR_NO"); //0 - Read Only
            DataModel_ExistWIP.SetVariable(1, "PIECE_NO"); //4
            DataModel_ExistWIP.SetVariable(2, "EXT_PIECE_NO"); //4
            DataModel_ExistWIP.SetVariable(3, "PARTY_CODE"); //1
            DataModel_ExistWIP.SetVariable(4, "PARTY_NAME"); //1
            DataModel_ExistWIP.SetVariable(5, "MACHINE_NO"); //1
            DataModel_ExistWIP.SetVariable(6, "POSITION"); //2
            DataModel_ExistWIP.SetVariable(7, "POSITION_DESC"); //3
            DataModel_ExistWIP.SetVariable(8, "PRODUCT"); //5
            DataModel_ExistWIP.SetVariable(9, "PRODUCT_DESCRIPTION"); //6
            DataModel_ExistWIP.SetVariable(10, "PRODUCT_GROUP"); //7
            DataModel_ExistWIP.SetVariable(11, "LENGTH"); //8
            DataModel_ExistWIP.SetVariable(12, "WIDTH"); //9
            DataModel_ExistWIP.SetVariable(13, "GSM"); //10
            DataModel_ExistWIP.SetVariable(14, "THEORTICAL_WEIGHT"); //11
            DataModel_ExistWIP.SetVariable(15, "SQ_MT"); //12
            DataModel_ExistWIP.SetVariable(16, "STYLE"); //13
            DataModel_ExistWIP.SetVariable(17, "BILL_LENGTH");
            DataModel_ExistWIP.SetVariable(18, "BILL_WIDTH");
            DataModel_ExistWIP.SetVariable(19, "BILL_WEIGHT");
            DataModel_ExistWIP.SetVariable(20, "BILL_SQMTR");
            DataModel_ExistWIP.SetVariable(21, "BILL_GSM");
            DataModel_ExistWIP.SetVariable(22, "BILL_PRODUCT_CODE");//21
            DataModel_ExistWIP.SetVariable(23, "PIECE_STAGE");//22

            Table_ExistWIP.getColumnModel().getColumn(0).setMinWidth(20);

            for (int i = 1; i <= 22; i++) {
                Table_ExistWIP.getColumnModel().getColumn(i).setMinWidth(130);
                
            }
            
            
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void FormatGrid_convertedSALES()
    {
        try {
            DataModel_ConvertedSALES = new EITLTableModel();
            Table_ConvertedSales.removeAll();

            Table_ConvertedSales.setModel(DataModel_ConvertedSALES);
            Table_ConvertedSales.setAutoResizeMode(0);

            DataModel_ConvertedSALES.addColumn("SrNo"); //0 - Read Only
            DataModel_ConvertedSALES.addColumn("PIECE_NO"); //1
            DataModel_ConvertedSALES.addColumn("PR_PIECE_AB_FLAG"); //2
            DataModel_ConvertedSALES.addColumn("PRODUCT"); //2
            DataModel_ConvertedSALES.addColumn("STYLE"); //2
          

            DataModel_ConvertedSALES.SetVariable(0, "SR_NO"); //0 - Read Only
            DataModel_ConvertedSALES.SetVariable(1, "PIECE_NO"); //4
            DataModel_ConvertedSALES.SetVariable(2, "PR_PIECE_AB_FLAG"); //1
            DataModel_ConvertedSALES.SetVariable(3, "PRODUCT"); //1
            DataModel_ConvertedSALES.SetVariable(4, "STYLE"); //1
            

            Table_ConvertedSales.getColumnModel().getColumn(0).setMinWidth(20);
            Table_ConvertedSales.getColumnModel().getColumn(1).setMinWidth(130);
            Table_ConvertedSales.getColumnModel().getColumn(2).setMinWidth(130);
            Table_ConvertedSales.getColumnModel().getColumn(3).setMinWidth(110);
            Table_ConvertedSales.getColumnModel().getColumn(4).setMinWidth(110);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    private void FormatGrid_convertedWIP()
    {
        try {
            DataModel_ConvertedWIP = new EITLTableModel();
            Table_ConvertedWIP.removeAll();

            Table_ConvertedWIP.setModel(DataModel_ConvertedWIP);
            Table_ConvertedWIP.setAutoResizeMode(0);

            DataModel_ConvertedWIP.addColumn("SR_NO");//0 - Read Only
            DataModel_ConvertedWIP.addColumn("WIP_EXT_PIECE_NO"); //1
            DataModel_ConvertedWIP.addColumn("WIP_PIECE_NO"); //2
            DataModel_ConvertedWIP.addColumn("WIP_PIECE_AB_FLAG"); //2
            DataModel_ConvertedWIP.addColumn("WIP_PRIORITY_HOLD_CAN_FLAG"); //2
            DataModel_ConvertedWIP.addColumn("WIP_THORITICAL_WEIGHT"); //2
            
            DataModel_ConvertedWIP.SetVariable(0, "SR_NO"); //0 - Read Only
            DataModel_ConvertedWIP.SetVariable(1, "WIP_EXT_PIECE_NO"); //4
            DataModel_ConvertedWIP.SetVariable(2, "WIP_PIECE_NO"); //1
            DataModel_ConvertedWIP.SetVariable(3, "WIP_PIECE_AB_FLAG"); //2
            DataModel_ConvertedWIP.SetVariable(4, "WIP_PRIORITY_HOLD_CAN_FLAG"); //2
            DataModel_ConvertedWIP.SetVariable(5, "WIP_THORITICAL_WEIGHT"); //2

            Table_ConvertedWIP.getColumnModel().getColumn(0).setMinWidth(20);
            Table_ConvertedWIP.getColumnModel().getColumn(1).setMinWidth(130);
            Table_ConvertedWIP.getColumnModel().getColumn(2).setMinWidth(140);
            Table_ConvertedWIP.getColumnModel().getColumn(3).setMinWidth(140);
            Table_ConvertedWIP.getColumnModel().getColumn(4).setMinWidth(200);
            Table_ConvertedWIP.getColumnModel().getColumn(5).setMinWidth(200);
            
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void FormatGridHS() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("FROM_IP");

        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(20);
        tcm.getColumn(1).setPreferredWidth(120);
        tcm.getColumn(2).setPreferredWidth(100);
        tcm.getColumn(3).setPreferredWidth(80);
        tcm.getColumn(4).setPreferredWidth(80);
        tcm.getColumn(5).setPreferredWidth(100);
        TableUpdateHistory.setAutoResizeMode(TableUpdateHistory.AUTO_RESIZE_OFF);
    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (EITLERPGLOBAL.gNewUserID == clsFeltProductionApprovalFlow.getCreator(ModuleId, DOC_NO + "")) {
                List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + (ModuleId));
            } else {
                List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
            }
        }

        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsFeltProductionApprovalFlow.getRemainingUsers(ModuleId, DOC_NO + "");
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
        }

    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableColumnModel tcm = TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(150);
        tcm.getColumn(5).setPreferredWidth(150);
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("FROM_IP");

//        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
//        tcm.getColumn(0).setPreferredWidth(10);
//        tcm.getColumn(2).setPreferredWidth(50);
//        tcm.getColumn(3).setPreferredWidth(20);
//        tcm.getColumn(4).setPreferredWidth(80);
//        tcm.getColumn(5).setPreferredWidth(70);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        Tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        DocNo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table_ConvertedWIP = new javax.swing.JTable();
        DocDate = new javax.swing.JFormattedTextField();
        lblRevNo = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Table_ExistSales = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtPieceNo = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        Table_ExistWIP = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        Table_ConvertedSales = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        StatusPanel = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();

        getContentPane().setLayout(null);

        Tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        jLabel2.setText("L C Date");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(10, 20, 80, 16);

        jLabel3.setText("L C  No");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(320, 20, 80, 16);

        DocNo.setEditable(false);
        DocNo.setBackground(new java.awt.Color(254, 242, 230));
        DocNo.setText("PD000001");
        DocNo.setEnabled(false);
        jPanel1.add(DocNo);
        DocNo.setBounds(380, 10, 200, 28);

        Table_ConvertedWIP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_ConvertedWIP.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_ConvertedWIP.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_ConvertedWIP.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                Table_ConvertedWIPAncestorMoved(evt);
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        Table_ConvertedWIP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Table_ConvertedWIPFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                Table_ConvertedWIPFocusLost(evt);
            }
        });
        Table_ConvertedWIP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Table_ConvertedWIPMouseClicked(evt);
            }
        });
        Table_ConvertedWIP.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                Table_ConvertedWIPCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        Table_ConvertedWIP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_ConvertedWIPKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Table_ConvertedWIPKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table_ConvertedWIP);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 400, 900, 100);

        DocDate.setEditable(false);
        jPanel1.add(DocDate);
        DocDate.setBounds(90, 10, 200, 30);

        lblRevNo.setText("...");
        jPanel1.add(lblRevNo);
        lblRevNo.setBounds(280, 10, 34, 30);

        Table_ExistSales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(Table_ExistSales);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 100, 900, 60);

        jLabel1.setText("Existing Piece Detail : WIP REGISTER");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 160, 300, 16);

        jLabel4.setText("Piece No *");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(10, 50, 90, 20);

        txtPieceNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPieceNoFocusLost(evt);
            }
        });
        txtPieceNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPieceNoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPieceNoKeyReleased(evt);
            }
        });
        jPanel1.add(txtPieceNo);
        txtPieceNo.setBounds(90, 40, 130, 30);

        jLabel8.setText("Converted Piece : SALES REGISTER");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(10, 300, 300, 16);

        jLabel5.setText("Existing Piece Detail : SALES REGISTER");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(10, 80, 300, 20);

        Table_ExistWIP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(Table_ExistWIP);

        jPanel1.add(jScrollPane4);
        jScrollPane4.setBounds(10, 180, 900, 100);

        jLabel9.setText("Converted Piece : WIP REGISTER");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(10, 380, 230, 16);

        Table_ConvertedSales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(Table_ConvertedSales);

        jPanel1.add(jScrollPane5);
        jScrollPane5.setBounds(10, 320, 900, 60);
        jPanel1.add(jSeparator1);
        jSeparator1.setBounds(0, 290, 920, 3);

        Tab.addTab("Felt Piece Layer Conversion", jPanel1);

        jPanel2.setLayout(null);

        Tab2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 23, 66, 16);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(90, 20, 180, 28);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 62, 56, 16);

        txtFrom.setBackground(new java.awt.Color(246, 238, 238));
        txtFrom.setForeground(new java.awt.Color(11, 7, 7));
        Tab2.add(txtFrom);
        txtFrom.setBounds(90, 60, 180, 28);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 95, 62, 16);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(90, 95, 530, 28);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 130, 81, 16);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(90, 130, 180, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 253, 60, 16);

        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(90, 250, 180, 28);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 292, 60, 16);

        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 290, 570, 28);

        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(450, 400, 102, 28);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(630, 95, 33, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(570, 400, 102, 28);

        jPanel2.add(Tab2);
        Tab2.setBounds(0, 0, 770, 460);

        Tab.addTab("Approval", jPanel2);

        jPanel3.setLayout(null);

        StatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StatusPanel.setLayout(null);

        jLabel60.setText("Document Approval Status");
        StatusPanel.add(jLabel60);
        jLabel60.setBounds(12, 10, 242, 16);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableApprovalStatus);

        StatusPanel.add(jScrollPane2);
        jScrollPane2.setBounds(0, 40, 694, 120);

        jLabel19.setText("Document Update History");
        StatusPanel.add(jLabel19);
        jLabel19.setBounds(10, 170, 182, 16);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableUpdateHistory);

        StatusPanel.add(jScrollPane6);
        jScrollPane6.setBounds(10, 190, 540, 130);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdViewHistory);
        cmdViewHistory.setBounds(570, 170, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdNormalView);
        cmdNormalView.setBounds(570, 200, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 230, 132, 24);

        txtAuditRemarks.setEnabled(false);
        StatusPanel.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(570, 260, 129, 28);

        jButton4.setText("Next >>");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton4);
        jButton4.setBounds(660, 290, 100, 30);

        jButton5.setText("<<Previous");
        jButton5.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton5);
        jButton5.setBounds(560, 290, 100, 30);

        jPanel3.add(StatusPanel);
        StatusPanel.setBounds(10, 0, 790, 380);

        Tab.addTab("Status", jPanel3);

        getContentPane().add(Tab);
        Tab.setBounds(0, 80, 930, 550);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 930, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("Felt Piece Layer Conversion");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 930, 25);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 630, 930, 30);
        getContentPane().add(jPanel5);
        jPanel5.setBounds(210, 50, 10, 10);
    }// </editor-fold>//GEN-END:initComponents

    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);
        DOC_NO = DocNo.getText();
        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);

        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {

                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    //JOptionPane.showMessageDialog(null, "Module Id :"+ModuleId+", DOC No : "+sorder_no+", User Id : "+ObjUser.getAttribute("USER_ID").getInt()+", New user Id "+SDMLERPGLOBAL.gNewUserID);
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                    // JOptionPane.showMessageDialog(null, "IncludeUser = "+IncludeUser);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(ModuleId, DOC_NO + "");
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();

    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        ReportShow();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmdPrintActionPerformed

    private void TabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabMouseClicked

    }//GEN-LAST:event_TabMouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

    }//GEN-LAST:event_jButton4ActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed

    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        feltPieceLayerConversion.HistoryView = false;
        feltPieceLayerConversion.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        String DocNo1 = DocNo.getText();
        feltPieceLayerConversion.ShowHistory(DocNo1);
        MoveLast();

    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained

    }//GEN-LAST:event_Tab2FocusGained

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed

    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed

    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed

    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained

    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained

    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained

    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged

    }//GEN-LAST:event_OpgHoldItemStateChanged

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained

    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged

    }//GEN-LAST:event_OpgRejectItemStateChanged

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained

    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged

    }//GEN-LAST:event_OpgFinalItemStateChanged

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged

    }//GEN-LAST:event_OpgApproveItemStateChanged

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked

        if (!OpgApprove.isEnabled()) {
            return;
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "SelHierarchyId : "+SelHierarchyID);

        //cmbSendTo.setEnabled(true);
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(ModuleId, DOC_NO + "")) {
                cmbSendTo.setEnabled(true);
                txtToRemarks.setEnabled(true);
                txtFromRemarks.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }
        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }

        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(true);
        OpgHold.setSelected(false);
        txtToRemarks.setEnabled(false);
        if (!OpgApprove.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
                OpgFinal.setEnabled(true);
            }
        } else {
            OpgApprove.setEnabled(false);
            OpgApprove.setSelected(false);
        }

        if (clsHierarchy.IsCreator((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgApprove.setEnabled(true);
            OpgReject.setEnabled(false);
            OpgReject.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void Table_ConvertedWIPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_ConvertedWIPKeyPressed
        // if (evt.getKeyCode() == 112 || evt.getKeyCode() == 10) {

    }//GEN-LAST:event_Table_ConvertedWIPKeyPressed

    private void Table_ConvertedWIPAncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_Table_ConvertedWIPAncestorMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_ConvertedWIPAncestorMoved

    private void Table_ConvertedWIPCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_Table_ConvertedWIPCaretPositionChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_ConvertedWIPCaretPositionChanged

    private void Table_ConvertedWIPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Table_ConvertedWIPFocusLost
        // TODO add your handling code here:if(Table.getSelectedColumn() == 1)
        lblStatus.setText("");
    }//GEN-LAST:event_Table_ConvertedWIPFocusLost

    private void Table_ConvertedWIPFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Table_ConvertedWIPFocusGained
        // TODO add your handling code here:
        if (Table_ConvertedWIP.getSelectedColumn() == 1) {
            lblStatus.setText("Press F1 for selection Machine No and Position No");
        } else {
            lblStatus.setText("");
        }
    }//GEN-LAST:event_Table_ConvertedWIPFocusGained

    private void Table_ConvertedWIPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Table_ConvertedWIPMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_Table_ConvertedWIPMouseClicked

    private void txtPieceNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPieceNoFocusLost
        // TODO add your handling code here:

        if (EditMode == EITLERPGLOBAL.EDIT || EditMode == EITLERPGLOBAL.ADD) {

            if (!txtPieceNo.getText().equals("")) {

                try {

                    Object[] rowData = new Object[15];
                    FormatGrid_existSALES();
                    rowData[0] = 1;
                    DataModel_ExistSALES.addRow(rowData);

                    Connection Conn;
                    Statement stmt;
                    ResultSet rsData;

                    Conn = data.getConn();
                    stmt = Conn.createStatement();

                    rsData = stmt.executeQuery("SELECT *,COALESCE(PR_PIECE_AB_FLAG, '') as PIECE_AB_FLAG FROM PRODUCTION.FELT_SALES_PIECE_REGISTER where PR_PIECE_NO='" + txtPieceNo.getText() + "'");
                    rsData.first();

                    if (!(rsData.getString("PR_PIECE_STAGE").equals("BOOKING") || rsData.getString("PR_PIECE_STAGE").equals("PLANNING"))) {
                        JOptionPane.showMessageDialog(null, "Piece stage " + rsData.getString("PR_PIECE_STAGE") + " not valid for LAYER CONVERSION");
                        txtPieceNo.requestFocus();
                        return;
                    }

                    DataModel_ExistSALES.setValueByVariable("SR_NO", 1 + "", 0);
                    DataModel_ExistSALES.setValueByVariable("PIECE_NO", rsData.getString("PR_PIECE_NO"), 0);

                    DataModel_ExistSALES.setValueByVariable("PARTY_CODE", rsData.getString("PR_PARTY_CODE"), 0);
                    DataModel_ExistSALES.setValueByVariable("PARTY_NAME", clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, rsData.getString("PR_PARTY_CODE")), 0);

                    DataModel_ExistSALES.setValueByVariable("MACHINE_NO", rsData.getString("PR_MACHINE_NO"), 0);
                    DataModel_ExistSALES.setValueByVariable("POSITION", rsData.getString("PR_POSITION_NO"), 0);

                    String check_lock = data.getStringValueFromDB("SELECT COALESCE(PARTY_LOCK, 0) AS PARTY_LOCK FROM DINESHMILLS.D_SAL_PARTY_MASTER where PARTY_CODE='"+rsData.getString("PR_PARTY_CODE")+"'");
                    if("1".equals(check_lock))
                    {
                        JOptionPane.showMessageDialog(null, "Party Code : "+rsData.getString("PR_PARTY_CODE")+" is locked.");
                        return;
                    }
                    String check_lock_MACHINE = data.getStringValueFromDB("SELECT COALESCE(MACHINE_LOCK_IND, 0) AS PARTY_LOCK FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER WHERE MM_PARTY_CODE='"+rsData.getString("PR_PARTY_CODE")+"' AND MM_MACHINE_NO='"+rsData.getString("PR_MACHINE_NO")+"'");
                    if("1".equals(check_lock_MACHINE))
                    {
                        JOptionPane.showMessageDialog(null, "Machine : "+rsData.getString("PR_MACHINE_NO")+" is locked for Party Code : "+rsData.getString("PR_PARTY_CODE")+".");
                        return;
                    }
                    String check_lock_POSITION = data.getStringValueFromDB("SELECT COALESCE(POSITION_LOCK_IND, 0) AS POSITION_LOCK_IND FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='"+rsData.getString("PR_PARTY_CODE")+"' AND MM_MACHINE_NO='"+rsData.getString("PR_MACHINE_NO")+"' AND MM_MACHINE_POSITION='"+rsData.getString("PR_POSITION_NO")+"'");
                    if("1".equals(check_lock_POSITION))
                    {
                        JOptionPane.showMessageDialog(null, "Machine : "+rsData.getString("PR_MACHINE_NO")+" AND Position : "+rsData.getString("PR_POSITION_NO")+" is locked for Party Code : "+rsData.getString("PR_PARTY_CODE")+".");
                        return;
                    }
                    
                    try {
                        DataModel_ExistSALES.setValueByVariable("POSITION_DESC", data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + rsData.getString("PR_POSITION_NO") + "'"), 0);
                    } catch (Exception ew) {
                        ew.printStackTrace();
                        //System.out.println("Error on getting from Machine Master");
                    }
                    DataModel_ExistSALES.setValueByVariable("PRODUCT", rsData.getString("PR_PRODUCT_CODE"), 0);
                    DataModel_ExistSALES.setValueByVariable("PRODUCT_DESCRIPTION", data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + rsData.getString("PR_PRODUCT_CODE") + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')"), 0);
                    DataModel_ExistSALES.setValueByVariable("PRODUCT_GROUP", rsData.getString("PR_GROUP"), 0);
                    DataModel_ExistSALES.setValueByVariable("LENGTH", rsData.getString("PR_LENGTH"), 0);
                    DataModel_ExistSALES.setValueByVariable("WIDTH", rsData.getString("PR_WIDTH"), 0);
                    DataModel_ExistSALES.setValueByVariable("GSM", rsData.getString("PR_GSM"), 0);
                    DataModel_ExistSALES.setValueByVariable("THEORTICAL_WEIGHT", rsData.getString("PR_THORITICAL_WEIGHT"), 0);
                    DataModel_ExistSALES.setValueByVariable("SQ_MT", rsData.getString("PR_SQMTR"), 0);
                    DataModel_ExistSALES.setValueByVariable("STYLE", rsData.getString("PR_STYLE"), 0);
                    DataModel_ExistSALES.setValueByVariable("REQ_MONTH", rsData.getString("PR_REQUESTED_MONTH"), 0);
                    DataModel_ExistSALES.setValueByVariable("SYN_PER", rsData.getString("PR_SYN_PER"), 0);
                    DataModel_ExistSALES.setValueByVariable("REMARK", rsData.getString("PR_PIECE_REMARK"), 0);
                    DataModel_ExistSALES.setValueByVariable("BILL_LENGTH", rsData.getString("PR_BILL_LENGTH"), 0);
                    DataModel_ExistSALES.setValueByVariable("BILL_WIDTH", rsData.getString("PR_BILL_WIDTH"), 0);
                    DataModel_ExistSALES.setValueByVariable("BILL_WEIGHT", rsData.getString("PR_BILL_WEIGHT"), 0);
                    DataModel_ExistSALES.setValueByVariable("BILL_SQMTR", rsData.getString("PR_BILL_SQMTR"), 0);
                    DataModel_ExistSALES.setValueByVariable("BILL_GSM", rsData.getString("PR_BILL_GSM"), 0);
                    DataModel_ExistSALES.setValueByVariable("BILL_PRODUCT_CODE", rsData.getString("PR_BILL_PRODUCT_CODE"), 0);
                    DataModel_ExistSALES.setValueByVariable("PIECE_STAGE", rsData.getString("PR_PIECE_STAGE"), 0);
                    DataModel_ExistSALES.setValueByVariable("LAYER", rsData.getString("PR_PIECE_AB_FLAG"), 0);

                    if(rsData.getString("PIECE_AB_FLAG").equals("AB"))
                    {
                        AB_FLAG = "WITH_AB";
                    }
                    else
                    {
                        AB_FLAG = "WITHOUT_AB";
                    }
                    
                    DataModel_ExistSALES.setValueByVariable("ACTUAL_LENGTH", rsData.getString("PR_ACTUAL_LENGTH"), 0);
                    DataModel_ExistSALES.setValueByVariable("ACTUAL_WIDTH", rsData.getString("PR_ACTUAL_WIDTH"), 0);
                    DataModel_ExistSALES.setValueByVariable("ACTUAL_WEIGHT", rsData.getString("PR_ACTUAL_WEIGHT"), 0);

                    
                    
                    GenerateConvertedPieces();
                    

                } catch (Exception e) {
                    e.printStackTrace();
                    System.out.println("Error onm fetch data for  Piece Register " + e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_txtPieceNoFocusLost

    private void Table_ConvertedWIPKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_ConvertedWIPKeyReleased
        // TODO add your handling code here:

        

    }//GEN-LAST:event_Table_ConvertedWIPKeyReleased

    private void txtPieceNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPieceNoKeyPressed
        // TODO add your handling code here:
        
        FormatGrid_existSALES();
        if (evt.getKeyChar() == KeyEvent.VK_TAB || evt.getKeyChar() == 10) {
           
        } else if (evt.getKeyCode() == 112) {
            try {
                LOV aList = new LOV();

                aList.SQL = "SELECT A.PR_PIECE_NO,A.PR_PARTY_CODE,B.PARTY_NAME,A.PR_PIECE_STAGE  FROM PRODUCTION.FELT_SALES_PIECE_REGISTER A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE A.PR_PIECE_STAGE IN ('BOOKING','PLANNING') AND A.PR_PRIORITY_HOLD_CAN_FLAG IN ('1','2','3','4','5') AND A.PR_PARTY_CODE=B.PARTY_CODE";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;
                aList.UseSpecifiedConn = true;
                aList.dbURL = EITLERPGLOBAL.DatabaseURL;

                if (aList.ShowLOV()) {
                    txtPieceNo.setText(aList.ReturnVal);
                    
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_txtPieceNoKeyPressed

    private void txtPieceNoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPieceNoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPieceNoKeyReleased
    private void ReportShow() {

    }
    private void GenerateConvertedPieces()
    {
        String PieceNo = txtPieceNo.getText();
        String th_weight = "";
        try{
            
            ResultSet rsData = data.getResult("SELECT * FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='"+PieceNo+"'");
            rsData.first();
            FormatGrid_existWIP();
            //DataModel_ExistWIP
            int cnt = 0;
            
            while(!rsData.isAfterLast())
            {
                Object[] rowData = new Object[24];
                cnt++;
                rowData[0] = cnt;
                
                rowData[1] = rsData.getString("WIP_PIECE_NO");//PIECE_NO
                rowData[2] = rsData.getString("WIP_EXT_PIECE_NO");//EXT_PIECE_NO
                rowData[3] = rsData.getString("WIP_PARTY_CODE");//PARTY_CODE
                rowData[4] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, rsData.getString("WIP_PARTY_CODE"));//PARTY_NAME
                rowData[5] = rsData.getString("WIP_MACHINE_NO");//MACHINE_NO
                rowData[6] = rsData.getString("WIP_POSITION_NO");//POSITION
                try {
                        rowData[7] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + rsData.getString("WIP_POSITION_NO") + "'");//POSITION_DESC
                } catch (Exception ew) {                }
             
                rowData[8] =rsData.getString("WIP_PRODUCT_CODE");//PRODUCT
                rowData[9] = data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + rsData.getString("WIP_PRODUCT_CODE") + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");//PRODUCT_DESCRIPTION
                rowData[10] =rsData.getString("WIP_GROUP");//PRODUCT_GROUP
                rowData[11] =rsData.getString("WIP_LENGTH");//LENGTH
                rowData[12] =rsData.getString("WIP_WIDTH");//WIDTH
                rowData[13] =rsData.getString("WIP_GSM");//GSM
                rowData[14] =rsData.getString("WIP_THORITICAL_WEIGHT");//THEORTICAL_WEIGHT
                th_weight = rsData.getString("WIP_THORITICAL_WEIGHT");//THEORTICAL_WEIGHT
                System.out.println("TH WET - "+th_weight);
                rowData[15] =rsData.getString("WIP_SQMTR");//SQ_MT
                rowData[16] =rsData.getString("WIP_STYLE");//STYLE
                rowData[17] =rsData.getString("WIP_BILL_LENGTH");//BILL_LENGTH
                rowData[18] =rsData.getString("WIP_BILL_WIDTH");//BILL_WIDTH
                rowData[19] =rsData.getString("WIP_BILL_WEIGHT");//BILL_WEIGHT
                rowData[20] =rsData.getString("WIP_BILL_SQMTR");//BILL_SQMTR
                rowData[21] =rsData.getString("WIP_BILL_GSM");//BILL_GSM
                rowData[22] =rsData.getString("WIP_BILL_PRODUCT_CODE");//BILL_PRODUCT_CODE
                rowData[23] =rsData.getString("WIP_PIECE_STAGE");//PIECE_STAGE
                
                DataModel_ExistWIP.addRow(rowData);
                rsData.next();
            }
            
            
            FormatGrid_convertedSALES();
            FormatGrid_convertedWIP();
            
            if(AB_FLAG.equals("WITHOUT_AB"))
            {
                int cnt2 = 0;
            
                Object[] rowData1 = new Object[24];
                cnt2++;
                
                rowData1[0] = cnt2;//
                rowData1[1] = PieceNo.trim();//
                rowData1[2] = "AB";//
                String Product = data.getStringValueFromDB("SELECT PR_PRODUCT_CODE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+PieceNo.trim()+"'");
                String Style = data.getStringValueFromDB("SELECT PR_STYLE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+PieceNo.trim()+"'");
                rowData1[3] = Product;//Product
                rowData1[4] = Style;//Style
                
                DataModel_ConvertedSALES.addRow(rowData1);
                
                
                Object[] rowData2 = new Object[24];
                
                rowData2[0] = 1;//
                rowData2[1] = PieceNo.trim()+"-A";//
                rowData2[2] = PieceNo.trim();//
                rowData2[3] = "AB";//
                rowData2[4] = "0";//
                rowData2[5] = th_weight+"";//
                DataModel_ConvertedWIP.addRow(rowData2);
                
                rowData2[0] = 2;//
                rowData2[1] = PieceNo.trim()+"-B";//WIP_EXT_PIECE_NO
                rowData2[2] = PieceNo.trim();//WIP_PIECE_NO
                rowData2[3] = "AB";//WIP_PIECE_AB_FLAG
                rowData2[4] = "0";//WIP_PRIORITY_HOLD_CAN_FLAG
                rowData2[5] = "0";//WIP_THORITICAL_WEIGHT
                DataModel_ConvertedWIP.addRow(rowData2);
                
                rowData2[0] = 3;//
                rowData2[1] = PieceNo.trim()+"-AB";//
                rowData2[2] = PieceNo.trim();//
                rowData2[3] = "AB";//
                rowData2[4] = "1";//
                rowData2[5] = th_weight+"";//
                DataModel_ConvertedWIP.addRow(rowData2);
               
            }
            
            if(AB_FLAG.equals("WITH_AB"))
            {
                int cnt2 = 0;
            
                Object[] rowData1 = new Object[24];
                cnt2++;
                rowData1[0] = cnt2;
                rowData1[1] = PieceNo.trim();//
                rowData1[2] = "";//
                String Product = data.getStringValueFromDB("SELECT PR_PRODUCT_CODE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+PieceNo.trim()+"'");
                String Style = data.getStringValueFromDB("SELECT PR_STYLE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+PieceNo.trim()+"'");
                rowData1[3] = Product;//Product
                rowData1[4] = Style;//Style
                
                DataModel_ConvertedSALES.addRow(rowData1);
                
                Object[] rowData2 = new Object[24];
                rowData2[0] = 1;//
                rowData2[1] = PieceNo.trim()+"";//
                rowData2[2] = PieceNo.trim();//
                rowData2[3] = "";//
                rowData2[4] = "0";//
                rowData2[5] = th_weight+"";//
                DataModel_ConvertedWIP.addRow(rowData2);
            }
            
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        
    }
    private void MoveFirst() {
        feltPieceLayerConversion.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        feltPieceLayerConversion.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        feltPieceLayerConversion.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        feltPieceLayerConversion.MoveLast();
        DisplayData();
    }

    private void Add() {
        //  EditMode=EITLERPGLOBAL.ADD;

        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        clearFields();

        EditMode = EITLERPGLOBAL.ADD;
        DisableToolbar();
        SetFields(true);
        SetupApproval();
        lblTitle.setBackground(new Color(0, 102, 153));
        lblTitle.setForeground(Color.WHITE);

        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = ModuleId;
        aList.FirstFreeNo = 325;

        DocDate.setText(df.format(new Date()));
        FFNo = aList.FirstFreeNo;
        DocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        lblTitle.setText("Felt Piece LayerConversion - " + DocNo.getText());
        txtPieceNo.requestFocus();
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.FeltSales.Order.frmFindfeltPieceLayerConversion", true);
        frmFindPieceLayerConversion ObjFindfeltPieceLayerConversion = (frmFindPieceLayerConversion) ObjLoader.getObj();

        if (ObjFindfeltPieceLayerConversion.Cancelled == false) {
            if (!feltPieceLayerConversion.Filter(ObjFindfeltPieceLayerConversion.stringFindQuery)) {
                JOptionPane.showMessageDialog(this, "No records found.", "Find Felt LayerConversion", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    public void FindEx(int pCompanyID, String AmendID) {
        feltPieceLayerConversion.Filter(" DOC_NO='" + AmendID + "'");
        feltPieceLayerConversion.MoveFirst();
        DisplayData();
    }

    // find rate update by doc no
    public void Find(String docNo) {
        feltPieceLayerConversion.Filter(" DOC_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    public void FindWaiting() {
        feltPieceLayerConversion.Filter(" AND PROD_DOC_NO IN (SELECT DISTINCT PROD_DOC_NO FROM PRODUCTION.FELT_PROD_DATA, PRODUCTION.FELT_PROD_DOC_DATA WHERE PROD_DOC_NO=DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=" + ModuleId + " AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void Save() {

        if (txtPieceNo.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter Piece No");
            txtPieceNo.requestFocus();
            return;
        }

        if (Table_ConvertedWIP.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(null, "Data not correct");
            return;
        }


        
        
        SetData();

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //feltPieceLayerConversion.LoadData();
        if (EditMode == EITLERPGLOBAL.ADD) {
            if (feltPieceLayerConversion.Insert()) {
                SelectFirstFree aList = new SelectFirstFree();
                aList.ModuleID = ModuleId;
                aList.FirstFreeNo = 325;
                FFNo = aList.FirstFreeNo;
                clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, true);
                EditMode = 0;

                if (OpgFinal.isSelected()) {

                    try{
                            String PieceNo = DataModel_ConvertedSALES.getValueByVariable("PIECE_NO", 0);
                            String PR_PIECE_AB_FLAG = DataModel_ConvertedSALES.getValueByVariable("PR_PIECE_AB_FLAG", 0);

                            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_AB_FLAG = '"+PR_PIECE_AB_FLAG+"' WHERE PR_PIECE_NO='"+PieceNo+"'");

                            String WIP_PIECE_NO=DataModel_ConvertedWIP.getValueByVariable("WIP_PIECE_NO", 0);
                            String WIP_EXT_PIECE_NO=DataModel_ConvertedWIP.getValueByVariable("WIP_EXT_PIECE_NO", 0);
                            String WIP_PIECE_AB_FLAG=DataModel_ConvertedWIP.getValueByVariable("WIP_PIECE_AB_FLAG", 0);
                            String WIP_PRIORITY_HOLD_CAN_FLAG=DataModel_ConvertedWIP.getValueByVariable("WIP_PRIORITY_HOLD_CAN_FLAG", 0);
                            String WIP_THORITICAL_WEIGHT=DataModel_ConvertedWIP.getValueByVariable("WIP_THORITICAL_WEIGHT", 0);

                            if(WIP_PIECE_AB_FLAG.equals("AB"))
                            {
                                //insert 3 wip pieces
                                data.Execute(" UPDATE PRODUCTION.FELT_WIP_PIECE_REGISTER SET WIP_EXT_PIECE_NO=CONCAT(WIP_EXT_PIECE_NO,'-AB'),WIP_PRIORITY_HOLD_CAN_FLAG=1,WIP_PIECE_AB_FLAG='AB'\n" +
                                             " WHERE WIP_PIECE_NO='"+WIP_PIECE_NO+"' AND WIP_EXT_PIECE_NO='"+WIP_PIECE_NO+"'");
                                data.Execute("INSERT INTO PRODUCTION.FELT_WIP_PIECE_REGISTER " +
                                            "(WIP_PIECE_NO, WIP_EXT_PIECE_NO, WIP_DATE, WIP_ORDER_DATE, WIP_DOC_NO, WIP_UPN, WIP_MACHINE_NO, WIP_POSITION_NO, WIP_PARTY_CODE, WIP_GROUP, WIP_PRODUCT_CODE, WIP_BILL_PRODUCT_CODE, WIP_STYLE, WIP_BILL_STYLE, WIP_LENGTH, WIP_ACTUAL_LENGTH, WIP_BILL_LENGTH, WIP_WIDTH, WIP_ACTUAL_WIDTH, WIP_BILL_WIDTH, WIP_GSM, WIP_TENDER_GSM, WIP_BILL_GSM, WIP_THORITICAL_WEIGHT, WIP_ACTUAL_WEIGHT, WIP_TENDER_WEIGHT, WIP_BILL_WEIGHT, WIP_SQMTR, WIP_BILL_SQMTR, WIP_PRIORITY_HOLD_CAN_FLAG, WIP_PARTY_CODE_ORIGINAL, WIP_PIECE_NO_ORIGINAL, WIP_SYN_PER, WIP_REQUESTED_MONTH, WIP_REQ_MTH_LAST_DDMMYY, WIP_DATE_SLOT, WIP_REGION, WIP_INCHARGE, WIP_REFERENCE, WIP_REFERENCE_DATE, WIP_PO_NO, WIP_PO_DATE, WIP_ORDER_REMARK, WIP_PIECE_REMARK, WIP_PIECE_STAGE, WIP_STATUS, WIP_GIDC_STATUS, WIP_PIECE_AB_FLAG, WIP_WARP_LAYER_REMARK, WIP_WARP_DATE, WIP_WARP_A_DATE, WIP_WARP_B_DATE, WIP_WARPING_WEIGHT, WIP_WARPING_WEIGHT_A, WIP_WARPING_WEIGHT_B, WIP_WVG_LAYER_REMARK, WIP_WVG_DATE, WIP_WVG_A_DATE, WIP_WVG_B_DATE, WIP_WEAVING_WEIGHT, WIP_WEAVING_WEIGHT_A, WIP_WEAVING_WEIGHT_B, WIP_MND_LAYER_REMARK, WIP_MND_DATE, WIP_MND_A_DATE, WIP_MND_B_DATE, WIP_MENDING_WEIGHT, WIP_MENDING_WEIGHT_A, WIP_MENDING_WEIGHT_B, WIP_NDL_DATE, WIP_NEEDLING_WEIGHT, WIP_SPLICE_DATE, WIP_SPLICE_WEIGHT, WIP_SEAM_DATE, WIP_SEAM_WEIGHT, WIP_FNSG_DATE, WIP_FELT_VALUE_WITH_GST, WIP_FELT_VALUE_WITHOUT_GST, WIP_FELT_BASE_VALUE, WIP_DAYS_ORDER_WARPED, WIP_DAYS_ORDER_WARPED_STATUS, WIP_DAYS_ORDER_WVG, WIP_DAYS_ORDER_WVG_STATUS, WIP_DAYS_ORDER_MND, WIP_DAYS_ORDER_MND_STATUS, WIP_DAYS_ORDER_NDL, WIP_DAYS_ORDER_NDL_STATUS, WIP_DAYS_ORDER_FNG, WIP_DAYS_ORDER_FNG_STATUS, WIP_DAYS_WRP_WVG, WIP_DAYS_WRP_WVG_STATUS, WIP_DAYS_WVG_MND, WIP_DAYS_WVG_MND_STATUS, WIP_DAYS_MND_NDL, WIP_DAYS_MND_NDL_STATUS, WIP_DAYS_NDL_FNG, WIP_DAYS_NDL_FNG_STATUS, WIP_DAYS_MND_FNG, WIP_DAYS_MND_FNG_STATUS, WIP_DAYS_STATUS, WIP_REJECTED_FLAG, WIP_REJECTED_REMARK, WIP_DIVERSION_FLAG, WIP_DIVERSION_REASON, WIP_DIVERTED_FLAG, WIP_DIVERTED_REASON, WIP_EXP_DISPATCH_DATE, WIP_HOLD_DATE, WIP_HOLD_REASON, WIP_RELEASE_DATE, WIP_OBSOLETE, WIP_OBSOLETE_REASON, WIP_OBSOLETE_DATE, WIP_MFG_MONTH, WIP_MFG_YEAR, WIP_MFG_SPILL_OVEVER_REMARK, WIP_WARP_EXECUTE_DATE, WIP_DAYS_WH_STOCK, WIP_DAYS_WH_PACKED, WIP_SCHEDULE_MONTH, WIP_CLOSURE_REOPEN_IND, WIP_CLOSURE_DATE, WIP_CLOSURE_REMARK, WIP_REOPEN_DATE, WIP_REOPEN_REMARK, WIP_DAYS_CURRENT_STAGE, WIP_EXPECTED_DISPATCH, WIP_EXP_DISPATCH_FROM, WIP_EXP_DISPATCH_DOCNO, WIP_ADJUSTABLE_LENGTH, WIP_ADJUSTABLE_WIDTH, WIP_ADJUSTABLE_GSM, WIP_ADJUSTABLE_WEIGHT, WIP_PIECE_IT_DEPT_REMARK, WIP_OA_NO, WIP_OA_DATE, WIP_OC_NO, WIP_OC_DATE, WIP_OC_MONTHYEAR, WIP_OC_LAST_DDMMYY, WIP_CURRENT_SCH_MONTH, WIP_CURRENT_SCH_LAST_DDMMYY, WIP_SP_MONTHYEAR, WIP_SP_LAST_DDMMYY, WIP_SP_REMARKS, WIP_SPL_REQUEST_MONTHYEAR, WIP_SPL_REQUEST_DATE, WIP_SPL_REQUEST_REMARK, WIP_EXP_WIP_DELIVERY_DATE, PR_REFERENCE, WIP_SDF_INSTRUCT_DATE, WIP_SDF_SPIRALED_DATE, WIP_SDF_ASSEMBLED_DATE) " +
                                            "SELECT WIP_PIECE_NO, concat(WIP_PIECE_NO,'-A'), WIP_DATE, WIP_ORDER_DATE, WIP_DOC_NO, WIP_UPN, WIP_MACHINE_NO, WIP_POSITION_NO, WIP_PARTY_CODE, WIP_GROUP, WIP_PRODUCT_CODE, WIP_BILL_PRODUCT_CODE, WIP_STYLE, WIP_BILL_STYLE, WIP_LENGTH, WIP_ACTUAL_LENGTH, WIP_BILL_LENGTH, WIP_WIDTH, WIP_ACTUAL_WIDTH, WIP_BILL_WIDTH, WIP_GSM, WIP_TENDER_GSM, WIP_BILL_GSM, WIP_THORITICAL_WEIGHT, WIP_ACTUAL_WEIGHT, WIP_TENDER_WEIGHT, WIP_BILL_WEIGHT, WIP_SQMTR, WIP_BILL_SQMTR, '0', WIP_PARTY_CODE_ORIGINAL, WIP_PIECE_NO_ORIGINAL, WIP_SYN_PER, WIP_REQUESTED_MONTH, WIP_REQ_MTH_LAST_DDMMYY, WIP_DATE_SLOT, WIP_REGION, WIP_INCHARGE, WIP_REFERENCE, WIP_REFERENCE_DATE, WIP_PO_NO, WIP_PO_DATE, WIP_ORDER_REMARK, WIP_PIECE_REMARK, WIP_PIECE_STAGE, WIP_STATUS, WIP_GIDC_STATUS, WIP_PIECE_AB_FLAG, WIP_WARP_LAYER_REMARK, WIP_WARP_DATE, WIP_WARP_A_DATE, WIP_WARP_B_DATE, WIP_WARPING_WEIGHT, WIP_WARPING_WEIGHT_A, WIP_WARPING_WEIGHT_B, WIP_WVG_LAYER_REMARK, WIP_WVG_DATE, WIP_WVG_A_DATE, WIP_WVG_B_DATE, WIP_WEAVING_WEIGHT, WIP_WEAVING_WEIGHT_A, WIP_WEAVING_WEIGHT_B, WIP_MND_LAYER_REMARK, WIP_MND_DATE, WIP_MND_A_DATE, WIP_MND_B_DATE, WIP_MENDING_WEIGHT, WIP_MENDING_WEIGHT_A, WIP_MENDING_WEIGHT_B, WIP_NDL_DATE, WIP_NEEDLING_WEIGHT, WIP_SPLICE_DATE, WIP_SPLICE_WEIGHT, WIP_SEAM_DATE, WIP_SEAM_WEIGHT, WIP_FNSG_DATE, WIP_FELT_VALUE_WITH_GST, WIP_FELT_VALUE_WITHOUT_GST, WIP_FELT_BASE_VALUE, WIP_DAYS_ORDER_WARPED, WIP_DAYS_ORDER_WARPED_STATUS, WIP_DAYS_ORDER_WVG, WIP_DAYS_ORDER_WVG_STATUS, WIP_DAYS_ORDER_MND, WIP_DAYS_ORDER_MND_STATUS, WIP_DAYS_ORDER_NDL, WIP_DAYS_ORDER_NDL_STATUS, WIP_DAYS_ORDER_FNG, WIP_DAYS_ORDER_FNG_STATUS, WIP_DAYS_WRP_WVG, WIP_DAYS_WRP_WVG_STATUS, WIP_DAYS_WVG_MND, WIP_DAYS_WVG_MND_STATUS, WIP_DAYS_MND_NDL, WIP_DAYS_MND_NDL_STATUS, WIP_DAYS_NDL_FNG, WIP_DAYS_NDL_FNG_STATUS, WIP_DAYS_MND_FNG, WIP_DAYS_MND_FNG_STATUS, WIP_DAYS_STATUS, WIP_REJECTED_FLAG, WIP_REJECTED_REMARK, WIP_DIVERSION_FLAG, WIP_DIVERSION_REASON, WIP_DIVERTED_FLAG, WIP_DIVERTED_REASON, WIP_EXP_DISPATCH_DATE, WIP_HOLD_DATE, WIP_HOLD_REASON, WIP_RELEASE_DATE, WIP_OBSOLETE, WIP_OBSOLETE_REASON, WIP_OBSOLETE_DATE, WIP_MFG_MONTH, WIP_MFG_YEAR, WIP_MFG_SPILL_OVEVER_REMARK, WIP_WARP_EXECUTE_DATE, WIP_DAYS_WH_STOCK, WIP_DAYS_WH_PACKED, WIP_SCHEDULE_MONTH, WIP_CLOSURE_REOPEN_IND, WIP_CLOSURE_DATE, WIP_CLOSURE_REMARK, WIP_REOPEN_DATE, WIP_REOPEN_REMARK, WIP_DAYS_CURRENT_STAGE, WIP_EXPECTED_DISPATCH, WIP_EXP_DISPATCH_FROM, WIP_EXP_DISPATCH_DOCNO, WIP_ADJUSTABLE_LENGTH, WIP_ADJUSTABLE_WIDTH, WIP_ADJUSTABLE_GSM, WIP_ADJUSTABLE_WEIGHT, WIP_PIECE_IT_DEPT_REMARK, WIP_OA_NO, WIP_OA_DATE, WIP_OC_NO, WIP_OC_DATE, WIP_OC_MONTHYEAR, WIP_OC_LAST_DDMMYY, WIP_CURRENT_SCH_MONTH, WIP_CURRENT_SCH_LAST_DDMMYY, WIP_SP_MONTHYEAR, WIP_SP_LAST_DDMMYY, WIP_SP_REMARKS, WIP_SPL_REQUEST_MONTHYEAR, WIP_SPL_REQUEST_DATE, WIP_SPL_REQUEST_REMARK, WIP_EXP_WIP_DELIVERY_DATE, PR_REFERENCE, WIP_SDF_INSTRUCT_DATE, WIP_SDF_SPIRALED_DATE, WIP_SDF_ASSEMBLED_DATE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='"+WIP_PIECE_NO+"'");
                                data.Execute("INSERT INTO PRODUCTION.FELT_WIP_PIECE_REGISTER " +
                                            "(WIP_PIECE_NO, WIP_EXT_PIECE_NO, WIP_DATE, WIP_ORDER_DATE, WIP_DOC_NO, WIP_UPN, WIP_MACHINE_NO, WIP_POSITION_NO, WIP_PARTY_CODE, WIP_GROUP, WIP_PRODUCT_CODE, WIP_BILL_PRODUCT_CODE, WIP_STYLE, WIP_BILL_STYLE, WIP_LENGTH, WIP_ACTUAL_LENGTH, WIP_BILL_LENGTH, WIP_WIDTH, WIP_ACTUAL_WIDTH, WIP_BILL_WIDTH, WIP_GSM, WIP_TENDER_GSM, WIP_BILL_GSM, WIP_THORITICAL_WEIGHT, WIP_ACTUAL_WEIGHT, WIP_TENDER_WEIGHT, WIP_BILL_WEIGHT, WIP_SQMTR, WIP_BILL_SQMTR, WIP_PRIORITY_HOLD_CAN_FLAG, WIP_PARTY_CODE_ORIGINAL, WIP_PIECE_NO_ORIGINAL, WIP_SYN_PER, WIP_REQUESTED_MONTH, WIP_REQ_MTH_LAST_DDMMYY, WIP_DATE_SLOT, WIP_REGION, WIP_INCHARGE, WIP_REFERENCE, WIP_REFERENCE_DATE, WIP_PO_NO, WIP_PO_DATE, WIP_ORDER_REMARK, WIP_PIECE_REMARK, WIP_PIECE_STAGE, WIP_STATUS, WIP_GIDC_STATUS, WIP_PIECE_AB_FLAG, WIP_WARP_LAYER_REMARK, WIP_WARP_DATE, WIP_WARP_A_DATE, WIP_WARP_B_DATE, WIP_WARPING_WEIGHT, WIP_WARPING_WEIGHT_A, WIP_WARPING_WEIGHT_B, WIP_WVG_LAYER_REMARK, WIP_WVG_DATE, WIP_WVG_A_DATE, WIP_WVG_B_DATE, WIP_WEAVING_WEIGHT, WIP_WEAVING_WEIGHT_A, WIP_WEAVING_WEIGHT_B, WIP_MND_LAYER_REMARK, WIP_MND_DATE, WIP_MND_A_DATE, WIP_MND_B_DATE, WIP_MENDING_WEIGHT, WIP_MENDING_WEIGHT_A, WIP_MENDING_WEIGHT_B, WIP_NDL_DATE, WIP_NEEDLING_WEIGHT, WIP_SPLICE_DATE, WIP_SPLICE_WEIGHT, WIP_SEAM_DATE, WIP_SEAM_WEIGHT, WIP_FNSG_DATE, WIP_FELT_VALUE_WITH_GST, WIP_FELT_VALUE_WITHOUT_GST, WIP_FELT_BASE_VALUE, WIP_DAYS_ORDER_WARPED, WIP_DAYS_ORDER_WARPED_STATUS, WIP_DAYS_ORDER_WVG, WIP_DAYS_ORDER_WVG_STATUS, WIP_DAYS_ORDER_MND, WIP_DAYS_ORDER_MND_STATUS, WIP_DAYS_ORDER_NDL, WIP_DAYS_ORDER_NDL_STATUS, WIP_DAYS_ORDER_FNG, WIP_DAYS_ORDER_FNG_STATUS, WIP_DAYS_WRP_WVG, WIP_DAYS_WRP_WVG_STATUS, WIP_DAYS_WVG_MND, WIP_DAYS_WVG_MND_STATUS, WIP_DAYS_MND_NDL, WIP_DAYS_MND_NDL_STATUS, WIP_DAYS_NDL_FNG, WIP_DAYS_NDL_FNG_STATUS, WIP_DAYS_MND_FNG, WIP_DAYS_MND_FNG_STATUS, WIP_DAYS_STATUS, WIP_REJECTED_FLAG, WIP_REJECTED_REMARK, WIP_DIVERSION_FLAG, WIP_DIVERSION_REASON, WIP_DIVERTED_FLAG, WIP_DIVERTED_REASON, WIP_EXP_DISPATCH_DATE, WIP_HOLD_DATE, WIP_HOLD_REASON, WIP_RELEASE_DATE, WIP_OBSOLETE, WIP_OBSOLETE_REASON, WIP_OBSOLETE_DATE, WIP_MFG_MONTH, WIP_MFG_YEAR, WIP_MFG_SPILL_OVEVER_REMARK, WIP_WARP_EXECUTE_DATE, WIP_DAYS_WH_STOCK, WIP_DAYS_WH_PACKED, WIP_SCHEDULE_MONTH, WIP_CLOSURE_REOPEN_IND, WIP_CLOSURE_DATE, WIP_CLOSURE_REMARK, WIP_REOPEN_DATE, WIP_REOPEN_REMARK, WIP_DAYS_CURRENT_STAGE, WIP_EXPECTED_DISPATCH, WIP_EXP_DISPATCH_FROM, WIP_EXP_DISPATCH_DOCNO, WIP_ADJUSTABLE_LENGTH, WIP_ADJUSTABLE_WIDTH, WIP_ADJUSTABLE_GSM, WIP_ADJUSTABLE_WEIGHT, WIP_PIECE_IT_DEPT_REMARK, WIP_OA_NO, WIP_OA_DATE, WIP_OC_NO, WIP_OC_DATE, WIP_OC_MONTHYEAR, WIP_OC_LAST_DDMMYY, WIP_CURRENT_SCH_MONTH, WIP_CURRENT_SCH_LAST_DDMMYY, WIP_SP_MONTHYEAR, WIP_SP_LAST_DDMMYY, WIP_SP_REMARKS, WIP_SPL_REQUEST_MONTHYEAR, WIP_SPL_REQUEST_DATE, WIP_SPL_REQUEST_REMARK, WIP_EXP_WIP_DELIVERY_DATE, PR_REFERENCE, WIP_SDF_INSTRUCT_DATE, WIP_SDF_SPIRALED_DATE, WIP_SDF_ASSEMBLED_DATE) " +
                                            "SELECT WIP_PIECE_NO, concat(WIP_PIECE_NO,'-B'), WIP_DATE, WIP_ORDER_DATE, WIP_DOC_NO, WIP_UPN, WIP_MACHINE_NO, WIP_POSITION_NO, WIP_PARTY_CODE, WIP_GROUP, WIP_PRODUCT_CODE, WIP_BILL_PRODUCT_CODE, WIP_STYLE, WIP_BILL_STYLE, WIP_LENGTH, WIP_ACTUAL_LENGTH, WIP_BILL_LENGTH, WIP_WIDTH, WIP_ACTUAL_WIDTH, WIP_BILL_WIDTH, WIP_GSM, WIP_TENDER_GSM, WIP_BILL_GSM, 0, WIP_ACTUAL_WEIGHT, WIP_TENDER_WEIGHT, WIP_BILL_WEIGHT, WIP_SQMTR, WIP_BILL_SQMTR, '0', WIP_PARTY_CODE_ORIGINAL, WIP_PIECE_NO_ORIGINAL, WIP_SYN_PER, WIP_REQUESTED_MONTH, WIP_REQ_MTH_LAST_DDMMYY, WIP_DATE_SLOT, WIP_REGION, WIP_INCHARGE, WIP_REFERENCE, WIP_REFERENCE_DATE, WIP_PO_NO, WIP_PO_DATE, WIP_ORDER_REMARK, WIP_PIECE_REMARK, WIP_PIECE_STAGE, WIP_STATUS, WIP_GIDC_STATUS, WIP_PIECE_AB_FLAG, WIP_WARP_LAYER_REMARK, WIP_WARP_DATE, WIP_WARP_A_DATE, WIP_WARP_B_DATE, WIP_WARPING_WEIGHT, WIP_WARPING_WEIGHT_A, WIP_WARPING_WEIGHT_B, WIP_WVG_LAYER_REMARK, WIP_WVG_DATE, WIP_WVG_A_DATE, WIP_WVG_B_DATE, WIP_WEAVING_WEIGHT, WIP_WEAVING_WEIGHT_A, WIP_WEAVING_WEIGHT_B, WIP_MND_LAYER_REMARK, WIP_MND_DATE, WIP_MND_A_DATE, WIP_MND_B_DATE, WIP_MENDING_WEIGHT, WIP_MENDING_WEIGHT_A, WIP_MENDING_WEIGHT_B, WIP_NDL_DATE, WIP_NEEDLING_WEIGHT, WIP_SPLICE_DATE, WIP_SPLICE_WEIGHT, WIP_SEAM_DATE, WIP_SEAM_WEIGHT, WIP_FNSG_DATE, WIP_FELT_VALUE_WITH_GST, WIP_FELT_VALUE_WITHOUT_GST, WIP_FELT_BASE_VALUE, WIP_DAYS_ORDER_WARPED, WIP_DAYS_ORDER_WARPED_STATUS, WIP_DAYS_ORDER_WVG, WIP_DAYS_ORDER_WVG_STATUS, WIP_DAYS_ORDER_MND, WIP_DAYS_ORDER_MND_STATUS, WIP_DAYS_ORDER_NDL, WIP_DAYS_ORDER_NDL_STATUS, WIP_DAYS_ORDER_FNG, WIP_DAYS_ORDER_FNG_STATUS, WIP_DAYS_WRP_WVG, WIP_DAYS_WRP_WVG_STATUS, WIP_DAYS_WVG_MND, WIP_DAYS_WVG_MND_STATUS, WIP_DAYS_MND_NDL, WIP_DAYS_MND_NDL_STATUS, WIP_DAYS_NDL_FNG, WIP_DAYS_NDL_FNG_STATUS, WIP_DAYS_MND_FNG, WIP_DAYS_MND_FNG_STATUS, WIP_DAYS_STATUS, WIP_REJECTED_FLAG, WIP_REJECTED_REMARK, WIP_DIVERSION_FLAG, WIP_DIVERSION_REASON, WIP_DIVERTED_FLAG, WIP_DIVERTED_REASON, WIP_EXP_DISPATCH_DATE, WIP_HOLD_DATE, WIP_HOLD_REASON, WIP_RELEASE_DATE, WIP_OBSOLETE, WIP_OBSOLETE_REASON, WIP_OBSOLETE_DATE, WIP_MFG_MONTH, WIP_MFG_YEAR, WIP_MFG_SPILL_OVEVER_REMARK, WIP_WARP_EXECUTE_DATE, WIP_DAYS_WH_STOCK, WIP_DAYS_WH_PACKED, WIP_SCHEDULE_MONTH, WIP_CLOSURE_REOPEN_IND, WIP_CLOSURE_DATE, WIP_CLOSURE_REMARK, WIP_REOPEN_DATE, WIP_REOPEN_REMARK, WIP_DAYS_CURRENT_STAGE, WIP_EXPECTED_DISPATCH, WIP_EXP_DISPATCH_FROM, WIP_EXP_DISPATCH_DOCNO, WIP_ADJUSTABLE_LENGTH, WIP_ADJUSTABLE_WIDTH, WIP_ADJUSTABLE_GSM, WIP_ADJUSTABLE_WEIGHT, WIP_PIECE_IT_DEPT_REMARK, WIP_OA_NO, WIP_OA_DATE, WIP_OC_NO, WIP_OC_DATE, WIP_OC_MONTHYEAR, WIP_OC_LAST_DDMMYY, WIP_CURRENT_SCH_MONTH, WIP_CURRENT_SCH_LAST_DDMMYY, WIP_SP_MONTHYEAR, WIP_SP_LAST_DDMMYY, WIP_SP_REMARKS, WIP_SPL_REQUEST_MONTHYEAR, WIP_SPL_REQUEST_DATE, WIP_SPL_REQUEST_REMARK, WIP_EXP_WIP_DELIVERY_DATE, PR_REFERENCE, WIP_SDF_INSTRUCT_DATE, WIP_SDF_SPIRALED_DATE, WIP_SDF_ASSEMBLED_DATE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='"+WIP_PIECE_NO+"'");
                            }
                            else
                            {
                                //delete 2 wip pieces -A and -B
                                //DELETE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='' AND WIP_EXT_PIECE_NO='' AND WIP_EXT_PIECE_NO NOT LIKE '%AB%' AND WIP_PRIORITY_HOLD_CAN_FLAG=0
                                //DELETE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='' AND WIP_EXT_PIECE_NO='' AND WIP_EXT_PIECE_NO NOT LIKE '%AB%' AND WIP_PRIORITY_HOLD_CAN_FLAG=0
                                data.Execute("DELETE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='"+WIP_PIECE_NO+"' AND WIP_EXT_PIECE_NO='"+WIP_PIECE_NO+"-A' AND WIP_EXT_PIECE_NO NOT LIKE '%AB%' AND WIP_PRIORITY_HOLD_CAN_FLAG=0");
                                data.Execute("DELETE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='"+WIP_PIECE_NO+"' AND WIP_EXT_PIECE_NO='"+WIP_PIECE_NO+"-B' AND WIP_EXT_PIECE_NO NOT LIKE '%AB%' AND WIP_PRIORITY_HOLD_CAN_FLAG=0");
                                data.Execute("UPDATE PRODUCTION.FELT_WIP_PIECE_REGISTER SET WIP_EXT_PIECE_NO='"+WIP_PIECE_NO+"',WIP_PRIORITY_HOLD_CAN_FLAG=0,WIP_PIECE_AB_FLAG='' WHERE WIP_PIECE_NO='"+WIP_PIECE_NO+"' AND WIP_EXT_PIECE_NO LIKE '"+WIP_PIECE_NO+"-AB%'");
                                System.out.println("DELETE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='"+WIP_PIECE_NO+"' AND WIP_EXT_PIECE_NO='"+WIP_PIECE_NO+"-A' AND WIP_EXT_PIECE_NO NOT LIKE '%AB%' AND WIP_PRIORITY_HOLD_CAN_FLAG=0");
                                System.out.println("DELETE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='"+WIP_PIECE_NO+"' AND WIP_EXT_PIECE_NO='"+WIP_PIECE_NO+"-B' AND WIP_EXT_PIECE_NO NOT LIKE '%AB%' AND WIP_PRIORITY_HOLD_CAN_FLAG=0");
                                System.out.println("UPDATE PRODUCTION.FELT_WIP_PIECE_REGISTER SET WIP_EXT_PIECE_NO='"+WIP_PIECE_NO+"',WIP_PRIORITY_HOLD_CAN_FLAG=0,WIP_PIECE_AB_FLAG='' WHERE WIP_PIECE_NO='"+WIP_PIECE_NO+"' AND WIP_EXT_PIECE_NO LIKE '"+WIP_PIECE_NO+"-AB%'");
                            }   
                            /*
                            DataModel_ConvertedWIP.SetVariable(1, "WIP_EXT_PIECE_NO"); //4
                            DataModel_ConvertedWIP.SetVariable(2, "WIP_PIECE_NO"); //1
                            DataModel_ConvertedWIP.SetVariable(3, "WIP_PIECE_AB_FLAG"); //2
                            DataModel_ConvertedWIP.SetVariable(4, "WIP_PRIORITY_HOLD_CAN_FLAG"); //2
                            DataModel_ConvertedWIP.SetVariable(5, "WIP_THORITICAL_WEIGHT"); //2
                            */
                        }catch(Exception e)
                        {
                            e.printStackTrace();
                        }
                    
                }

                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + feltPieceLayerConversion.LastError, " SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (feltPieceLayerConversion.Update()) {
                if (OpgFinal.isSelected())  {
                        try{
                            String PieceNo = DataModel_ConvertedSALES.getValueByVariable("PIECE_NO", 0);
                            String PR_PIECE_AB_FLAG = DataModel_ConvertedSALES.getValueByVariable("PR_PIECE_AB_FLAG", 0);

                            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_AB_FLAG = '"+PR_PIECE_AB_FLAG+"' WHERE PR_PIECE_NO='"+PieceNo+"'");

                            String WIP_PIECE_NO=DataModel_ConvertedWIP.getValueByVariable("WIP_PIECE_NO", 0);
                            String WIP_EXT_PIECE_NO=DataModel_ConvertedWIP.getValueByVariable("WIP_EXT_PIECE_NO", 0);
                            String WIP_PIECE_AB_FLAG=DataModel_ConvertedWIP.getValueByVariable("WIP_PIECE_AB_FLAG", 0);
                            String WIP_PRIORITY_HOLD_CAN_FLAG=DataModel_ConvertedWIP.getValueByVariable("WIP_PRIORITY_HOLD_CAN_FLAG", 0);
                            String WIP_THORITICAL_WEIGHT=DataModel_ConvertedWIP.getValueByVariable("WIP_THORITICAL_WEIGHT", 0);

                            if(WIP_PIECE_AB_FLAG.equals("AB"))
                            {
                                //insert 3 wip pieces
                                data.Execute(" UPDATE PRODUCTION.FELT_WIP_PIECE_REGISTER SET WIP_EXT_PIECE_NO=CONCAT(WIP_EXT_PIECE_NO,'-AB'),WIP_PRIORITY_HOLD_CAN_FLAG=1,WIP_PIECE_AB_FLAG='AB'\n" +
                                             " WHERE WIP_PIECE_NO='"+WIP_PIECE_NO+"' AND WIP_EXT_PIECE_NO='"+WIP_PIECE_NO+"'");
                                data.Execute("INSERT INTO PRODUCTION.FELT_WIP_PIECE_REGISTER " +
                                            "(WIP_PIECE_NO, WIP_EXT_PIECE_NO, WIP_DATE, WIP_ORDER_DATE, WIP_DOC_NO, WIP_UPN, WIP_MACHINE_NO, WIP_POSITION_NO, WIP_PARTY_CODE, WIP_GROUP, WIP_PRODUCT_CODE, WIP_BILL_PRODUCT_CODE, WIP_STYLE, WIP_BILL_STYLE, WIP_LENGTH, WIP_ACTUAL_LENGTH, WIP_BILL_LENGTH, WIP_WIDTH, WIP_ACTUAL_WIDTH, WIP_BILL_WIDTH, WIP_GSM, WIP_TENDER_GSM, WIP_BILL_GSM, WIP_THORITICAL_WEIGHT, WIP_ACTUAL_WEIGHT, WIP_TENDER_WEIGHT, WIP_BILL_WEIGHT, WIP_SQMTR, WIP_BILL_SQMTR, WIP_PRIORITY_HOLD_CAN_FLAG, WIP_PARTY_CODE_ORIGINAL, WIP_PIECE_NO_ORIGINAL, WIP_SYN_PER, WIP_REQUESTED_MONTH, WIP_REQ_MTH_LAST_DDMMYY, WIP_DATE_SLOT, WIP_REGION, WIP_INCHARGE, WIP_REFERENCE, WIP_REFERENCE_DATE, WIP_PO_NO, WIP_PO_DATE, WIP_ORDER_REMARK, WIP_PIECE_REMARK, WIP_PIECE_STAGE, WIP_STATUS, WIP_GIDC_STATUS, WIP_PIECE_AB_FLAG, WIP_WARP_LAYER_REMARK, WIP_WARP_DATE, WIP_WARP_A_DATE, WIP_WARP_B_DATE, WIP_WARPING_WEIGHT, WIP_WARPING_WEIGHT_A, WIP_WARPING_WEIGHT_B, WIP_WVG_LAYER_REMARK, WIP_WVG_DATE, WIP_WVG_A_DATE, WIP_WVG_B_DATE, WIP_WEAVING_WEIGHT, WIP_WEAVING_WEIGHT_A, WIP_WEAVING_WEIGHT_B, WIP_MND_LAYER_REMARK, WIP_MND_DATE, WIP_MND_A_DATE, WIP_MND_B_DATE, WIP_MENDING_WEIGHT, WIP_MENDING_WEIGHT_A, WIP_MENDING_WEIGHT_B, WIP_NDL_DATE, WIP_NEEDLING_WEIGHT, WIP_SPLICE_DATE, WIP_SPLICE_WEIGHT, WIP_SEAM_DATE, WIP_SEAM_WEIGHT, WIP_FNSG_DATE, WIP_FELT_VALUE_WITH_GST, WIP_FELT_VALUE_WITHOUT_GST, WIP_FELT_BASE_VALUE, WIP_DAYS_ORDER_WARPED, WIP_DAYS_ORDER_WARPED_STATUS, WIP_DAYS_ORDER_WVG, WIP_DAYS_ORDER_WVG_STATUS, WIP_DAYS_ORDER_MND, WIP_DAYS_ORDER_MND_STATUS, WIP_DAYS_ORDER_NDL, WIP_DAYS_ORDER_NDL_STATUS, WIP_DAYS_ORDER_FNG, WIP_DAYS_ORDER_FNG_STATUS, WIP_DAYS_WRP_WVG, WIP_DAYS_WRP_WVG_STATUS, WIP_DAYS_WVG_MND, WIP_DAYS_WVG_MND_STATUS, WIP_DAYS_MND_NDL, WIP_DAYS_MND_NDL_STATUS, WIP_DAYS_NDL_FNG, WIP_DAYS_NDL_FNG_STATUS, WIP_DAYS_MND_FNG, WIP_DAYS_MND_FNG_STATUS, WIP_DAYS_STATUS, WIP_REJECTED_FLAG, WIP_REJECTED_REMARK, WIP_DIVERSION_FLAG, WIP_DIVERSION_REASON, WIP_DIVERTED_FLAG, WIP_DIVERTED_REASON, WIP_EXP_DISPATCH_DATE, WIP_HOLD_DATE, WIP_HOLD_REASON, WIP_RELEASE_DATE, WIP_OBSOLETE, WIP_OBSOLETE_REASON, WIP_OBSOLETE_DATE, WIP_MFG_MONTH, WIP_MFG_YEAR, WIP_MFG_SPILL_OVEVER_REMARK, WIP_WARP_EXECUTE_DATE, WIP_DAYS_WH_STOCK, WIP_DAYS_WH_PACKED, WIP_SCHEDULE_MONTH, WIP_CLOSURE_REOPEN_IND, WIP_CLOSURE_DATE, WIP_CLOSURE_REMARK, WIP_REOPEN_DATE, WIP_REOPEN_REMARK, WIP_DAYS_CURRENT_STAGE, WIP_EXPECTED_DISPATCH, WIP_EXP_DISPATCH_FROM, WIP_EXP_DISPATCH_DOCNO, WIP_ADJUSTABLE_LENGTH, WIP_ADJUSTABLE_WIDTH, WIP_ADJUSTABLE_GSM, WIP_ADJUSTABLE_WEIGHT, WIP_PIECE_IT_DEPT_REMARK, WIP_OA_NO, WIP_OA_DATE, WIP_OC_NO, WIP_OC_DATE, WIP_OC_MONTHYEAR, WIP_OC_LAST_DDMMYY, WIP_CURRENT_SCH_MONTH, WIP_CURRENT_SCH_LAST_DDMMYY, WIP_SP_MONTHYEAR, WIP_SP_LAST_DDMMYY, WIP_SP_REMARKS, WIP_SPL_REQUEST_MONTHYEAR, WIP_SPL_REQUEST_DATE, WIP_SPL_REQUEST_REMARK, WIP_EXP_WIP_DELIVERY_DATE, PR_REFERENCE, WIP_SDF_INSTRUCT_DATE, WIP_SDF_SPIRALED_DATE, WIP_SDF_ASSEMBLED_DATE) " +
                                            "SELECT WIP_PIECE_NO, concat(WIP_PIECE_NO,'-A'), WIP_DATE, WIP_ORDER_DATE, WIP_DOC_NO, WIP_UPN, WIP_MACHINE_NO, WIP_POSITION_NO, WIP_PARTY_CODE, WIP_GROUP, WIP_PRODUCT_CODE, WIP_BILL_PRODUCT_CODE, WIP_STYLE, WIP_BILL_STYLE, WIP_LENGTH, WIP_ACTUAL_LENGTH, WIP_BILL_LENGTH, WIP_WIDTH, WIP_ACTUAL_WIDTH, WIP_BILL_WIDTH, WIP_GSM, WIP_TENDER_GSM, WIP_BILL_GSM, WIP_THORITICAL_WEIGHT, WIP_ACTUAL_WEIGHT, WIP_TENDER_WEIGHT, WIP_BILL_WEIGHT, WIP_SQMTR, WIP_BILL_SQMTR, '0', WIP_PARTY_CODE_ORIGINAL, WIP_PIECE_NO_ORIGINAL, WIP_SYN_PER, WIP_REQUESTED_MONTH, WIP_REQ_MTH_LAST_DDMMYY, WIP_DATE_SLOT, WIP_REGION, WIP_INCHARGE, WIP_REFERENCE, WIP_REFERENCE_DATE, WIP_PO_NO, WIP_PO_DATE, WIP_ORDER_REMARK, WIP_PIECE_REMARK, 'PLANNING', 'CONFIRMED', WIP_GIDC_STATUS, WIP_PIECE_AB_FLAG, WIP_WARP_LAYER_REMARK, '0000-00-00', '0000-00-00', '0000-00-00', WIP_WARPING_WEIGHT, WIP_WARPING_WEIGHT_A, WIP_WARPING_WEIGHT_B, WIP_WVG_LAYER_REMARK, '0000-00-00', '0000-00-00', '0000-00-00', WIP_WEAVING_WEIGHT, WIP_WEAVING_WEIGHT_A, WIP_WEAVING_WEIGHT_B, WIP_MND_LAYER_REMARK, '0000-00-00', '0000-00-00', '0000-00-00', WIP_MENDING_WEIGHT, WIP_MENDING_WEIGHT_A, WIP_MENDING_WEIGHT_B, '0000-00-00', WIP_NEEDLING_WEIGHT, '0000-00-00', WIP_SPLICE_WEIGHT, '0000-00-00', WIP_SEAM_WEIGHT, '0000-00-00', WIP_FELT_VALUE_WITH_GST, WIP_FELT_VALUE_WITHOUT_GST, WIP_FELT_BASE_VALUE, WIP_DAYS_ORDER_WARPED, WIP_DAYS_ORDER_WARPED_STATUS, WIP_DAYS_ORDER_WVG, WIP_DAYS_ORDER_WVG_STATUS, WIP_DAYS_ORDER_MND, WIP_DAYS_ORDER_MND_STATUS, WIP_DAYS_ORDER_NDL, WIP_DAYS_ORDER_NDL_STATUS, WIP_DAYS_ORDER_FNG, WIP_DAYS_ORDER_FNG_STATUS, WIP_DAYS_WRP_WVG, WIP_DAYS_WRP_WVG_STATUS, WIP_DAYS_WVG_MND, WIP_DAYS_WVG_MND_STATUS, WIP_DAYS_MND_NDL, WIP_DAYS_MND_NDL_STATUS, WIP_DAYS_NDL_FNG, WIP_DAYS_NDL_FNG_STATUS, WIP_DAYS_MND_FNG, WIP_DAYS_MND_FNG_STATUS, WIP_DAYS_STATUS, WIP_REJECTED_FLAG, WIP_REJECTED_REMARK, WIP_DIVERSION_FLAG, WIP_DIVERSION_REASON, WIP_DIVERTED_FLAG, WIP_DIVERTED_REASON, WIP_EXP_DISPATCH_DATE, WIP_HOLD_DATE, WIP_HOLD_REASON, WIP_RELEASE_DATE, WIP_OBSOLETE, WIP_OBSOLETE_REASON, WIP_OBSOLETE_DATE, WIP_MFG_MONTH, WIP_MFG_YEAR, WIP_MFG_SPILL_OVEVER_REMARK, WIP_WARP_EXECUTE_DATE, WIP_DAYS_WH_STOCK, WIP_DAYS_WH_PACKED, WIP_SCHEDULE_MONTH, WIP_CLOSURE_REOPEN_IND, WIP_CLOSURE_DATE, WIP_CLOSURE_REMARK, WIP_REOPEN_DATE, WIP_REOPEN_REMARK, WIP_DAYS_CURRENT_STAGE, WIP_EXPECTED_DISPATCH, WIP_EXP_DISPATCH_FROM, WIP_EXP_DISPATCH_DOCNO, WIP_ADJUSTABLE_LENGTH, WIP_ADJUSTABLE_WIDTH, WIP_ADJUSTABLE_GSM, WIP_ADJUSTABLE_WEIGHT, WIP_PIECE_IT_DEPT_REMARK, WIP_OA_NO, WIP_OA_DATE, WIP_OC_NO, WIP_OC_DATE, WIP_OC_MONTHYEAR, WIP_OC_LAST_DDMMYY, WIP_CURRENT_SCH_MONTH, WIP_CURRENT_SCH_LAST_DDMMYY, WIP_SP_MONTHYEAR, WIP_SP_LAST_DDMMYY, WIP_SP_REMARKS, WIP_SPL_REQUEST_MONTHYEAR, WIP_SPL_REQUEST_DATE, WIP_SPL_REQUEST_REMARK, WIP_EXP_WIP_DELIVERY_DATE, PR_REFERENCE, WIP_SDF_INSTRUCT_DATE, WIP_SDF_SPIRALED_DATE, WIP_SDF_ASSEMBLED_DATE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='"+WIP_PIECE_NO+"'");
                                data.Execute("INSERT INTO PRODUCTION.FELT_WIP_PIECE_REGISTER " +
                                            "(WIP_PIECE_NO, WIP_EXT_PIECE_NO, WIP_DATE, WIP_ORDER_DATE, WIP_DOC_NO, WIP_UPN, WIP_MACHINE_NO, WIP_POSITION_NO, WIP_PARTY_CODE, WIP_GROUP, WIP_PRODUCT_CODE, WIP_BILL_PRODUCT_CODE, WIP_STYLE, WIP_BILL_STYLE, WIP_LENGTH, WIP_ACTUAL_LENGTH, WIP_BILL_LENGTH, WIP_WIDTH, WIP_ACTUAL_WIDTH, WIP_BILL_WIDTH, WIP_GSM, WIP_TENDER_GSM, WIP_BILL_GSM, WIP_THORITICAL_WEIGHT, WIP_ACTUAL_WEIGHT, WIP_TENDER_WEIGHT, WIP_BILL_WEIGHT, WIP_SQMTR, WIP_BILL_SQMTR, WIP_PRIORITY_HOLD_CAN_FLAG, WIP_PARTY_CODE_ORIGINAL, WIP_PIECE_NO_ORIGINAL, WIP_SYN_PER, WIP_REQUESTED_MONTH, WIP_REQ_MTH_LAST_DDMMYY, WIP_DATE_SLOT, WIP_REGION, WIP_INCHARGE, WIP_REFERENCE, WIP_REFERENCE_DATE, WIP_PO_NO, WIP_PO_DATE, WIP_ORDER_REMARK, WIP_PIECE_REMARK, WIP_PIECE_STAGE, WIP_STATUS, WIP_GIDC_STATUS, WIP_PIECE_AB_FLAG, WIP_WARP_LAYER_REMARK, WIP_WARP_DATE, WIP_WARP_A_DATE, WIP_WARP_B_DATE, WIP_WARPING_WEIGHT, WIP_WARPING_WEIGHT_A, WIP_WARPING_WEIGHT_B, WIP_WVG_LAYER_REMARK, WIP_WVG_DATE, WIP_WVG_A_DATE, WIP_WVG_B_DATE, WIP_WEAVING_WEIGHT, WIP_WEAVING_WEIGHT_A, WIP_WEAVING_WEIGHT_B, WIP_MND_LAYER_REMARK, WIP_MND_DATE, WIP_MND_A_DATE, WIP_MND_B_DATE, WIP_MENDING_WEIGHT, WIP_MENDING_WEIGHT_A, WIP_MENDING_WEIGHT_B, WIP_NDL_DATE, WIP_NEEDLING_WEIGHT, WIP_SPLICE_DATE, WIP_SPLICE_WEIGHT, WIP_SEAM_DATE, WIP_SEAM_WEIGHT, WIP_FNSG_DATE, WIP_FELT_VALUE_WITH_GST, WIP_FELT_VALUE_WITHOUT_GST, WIP_FELT_BASE_VALUE, WIP_DAYS_ORDER_WARPED, WIP_DAYS_ORDER_WARPED_STATUS, WIP_DAYS_ORDER_WVG, WIP_DAYS_ORDER_WVG_STATUS, WIP_DAYS_ORDER_MND, WIP_DAYS_ORDER_MND_STATUS, WIP_DAYS_ORDER_NDL, WIP_DAYS_ORDER_NDL_STATUS, WIP_DAYS_ORDER_FNG, WIP_DAYS_ORDER_FNG_STATUS, WIP_DAYS_WRP_WVG, WIP_DAYS_WRP_WVG_STATUS, WIP_DAYS_WVG_MND, WIP_DAYS_WVG_MND_STATUS, WIP_DAYS_MND_NDL, WIP_DAYS_MND_NDL_STATUS, WIP_DAYS_NDL_FNG, WIP_DAYS_NDL_FNG_STATUS, WIP_DAYS_MND_FNG, WIP_DAYS_MND_FNG_STATUS, WIP_DAYS_STATUS, WIP_REJECTED_FLAG, WIP_REJECTED_REMARK, WIP_DIVERSION_FLAG, WIP_DIVERSION_REASON, WIP_DIVERTED_FLAG, WIP_DIVERTED_REASON, WIP_EXP_DISPATCH_DATE, WIP_HOLD_DATE, WIP_HOLD_REASON, WIP_RELEASE_DATE, WIP_OBSOLETE, WIP_OBSOLETE_REASON, WIP_OBSOLETE_DATE, WIP_MFG_MONTH, WIP_MFG_YEAR, WIP_MFG_SPILL_OVEVER_REMARK, WIP_WARP_EXECUTE_DATE, WIP_DAYS_WH_STOCK, WIP_DAYS_WH_PACKED, WIP_SCHEDULE_MONTH, WIP_CLOSURE_REOPEN_IND, WIP_CLOSURE_DATE, WIP_CLOSURE_REMARK, WIP_REOPEN_DATE, WIP_REOPEN_REMARK, WIP_DAYS_CURRENT_STAGE, WIP_EXPECTED_DISPATCH, WIP_EXP_DISPATCH_FROM, WIP_EXP_DISPATCH_DOCNO, WIP_ADJUSTABLE_LENGTH, WIP_ADJUSTABLE_WIDTH, WIP_ADJUSTABLE_GSM, WIP_ADJUSTABLE_WEIGHT, WIP_PIECE_IT_DEPT_REMARK, WIP_OA_NO, WIP_OA_DATE, WIP_OC_NO, WIP_OC_DATE, WIP_OC_MONTHYEAR, WIP_OC_LAST_DDMMYY, WIP_CURRENT_SCH_MONTH, WIP_CURRENT_SCH_LAST_DDMMYY, WIP_SP_MONTHYEAR, WIP_SP_LAST_DDMMYY, WIP_SP_REMARKS, WIP_SPL_REQUEST_MONTHYEAR, WIP_SPL_REQUEST_DATE, WIP_SPL_REQUEST_REMARK, WIP_EXP_WIP_DELIVERY_DATE, PR_REFERENCE, WIP_SDF_INSTRUCT_DATE, WIP_SDF_SPIRALED_DATE, WIP_SDF_ASSEMBLED_DATE) " +
                                            "SELECT WIP_PIECE_NO, concat(WIP_PIECE_NO,'-B'), WIP_DATE, WIP_ORDER_DATE, WIP_DOC_NO, WIP_UPN, WIP_MACHINE_NO, WIP_POSITION_NO, WIP_PARTY_CODE, WIP_GROUP, WIP_PRODUCT_CODE, WIP_BILL_PRODUCT_CODE, WIP_STYLE, WIP_BILL_STYLE, WIP_LENGTH, WIP_ACTUAL_LENGTH, WIP_BILL_LENGTH, WIP_WIDTH, WIP_ACTUAL_WIDTH, WIP_BILL_WIDTH, WIP_GSM, WIP_TENDER_GSM, WIP_BILL_GSM, 0, WIP_ACTUAL_WEIGHT, WIP_TENDER_WEIGHT, WIP_BILL_WEIGHT, WIP_SQMTR, WIP_BILL_SQMTR, '0', WIP_PARTY_CODE_ORIGINAL, WIP_PIECE_NO_ORIGINAL, WIP_SYN_PER, WIP_REQUESTED_MONTH, WIP_REQ_MTH_LAST_DDMMYY, WIP_DATE_SLOT, WIP_REGION, WIP_INCHARGE, WIP_REFERENCE, WIP_REFERENCE_DATE, WIP_PO_NO, WIP_PO_DATE, WIP_ORDER_REMARK, WIP_PIECE_REMARK, 'PLANNING', 'CONFIRMED', WIP_GIDC_STATUS, WIP_PIECE_AB_FLAG, WIP_WARP_LAYER_REMARK, '0000-00-00', '0000-00-00', '0000-00-00', WIP_WARPING_WEIGHT, WIP_WARPING_WEIGHT_A, WIP_WARPING_WEIGHT_B, WIP_WVG_LAYER_REMARK, '0000-00-00', '0000-00-00', '0000-00-00', WIP_WEAVING_WEIGHT, WIP_WEAVING_WEIGHT_A, WIP_WEAVING_WEIGHT_B, WIP_MND_LAYER_REMARK, '0000-00-00', '0000-00-00', '0000-00-00', WIP_MENDING_WEIGHT, WIP_MENDING_WEIGHT_A, WIP_MENDING_WEIGHT_B, WIP_NDL_DATE, WIP_NEEDLING_WEIGHT, '0000-00-00', WIP_SPLICE_WEIGHT, '0000-00-00', WIP_SEAM_WEIGHT, '0000-00-00', WIP_FELT_VALUE_WITH_GST, WIP_FELT_VALUE_WITHOUT_GST, WIP_FELT_BASE_VALUE, WIP_DAYS_ORDER_WARPED, WIP_DAYS_ORDER_WARPED_STATUS, WIP_DAYS_ORDER_WVG, WIP_DAYS_ORDER_WVG_STATUS, WIP_DAYS_ORDER_MND, WIP_DAYS_ORDER_MND_STATUS, WIP_DAYS_ORDER_NDL, WIP_DAYS_ORDER_NDL_STATUS, WIP_DAYS_ORDER_FNG, WIP_DAYS_ORDER_FNG_STATUS, WIP_DAYS_WRP_WVG, WIP_DAYS_WRP_WVG_STATUS, WIP_DAYS_WVG_MND, WIP_DAYS_WVG_MND_STATUS, WIP_DAYS_MND_NDL, WIP_DAYS_MND_NDL_STATUS, WIP_DAYS_NDL_FNG, WIP_DAYS_NDL_FNG_STATUS, WIP_DAYS_MND_FNG, WIP_DAYS_MND_FNG_STATUS, WIP_DAYS_STATUS, WIP_REJECTED_FLAG, WIP_REJECTED_REMARK, WIP_DIVERSION_FLAG, WIP_DIVERSION_REASON, WIP_DIVERTED_FLAG, WIP_DIVERTED_REASON, WIP_EXP_DISPATCH_DATE, WIP_HOLD_DATE, WIP_HOLD_REASON, WIP_RELEASE_DATE, WIP_OBSOLETE, WIP_OBSOLETE_REASON, WIP_OBSOLETE_DATE, WIP_MFG_MONTH, WIP_MFG_YEAR, WIP_MFG_SPILL_OVEVER_REMARK, WIP_WARP_EXECUTE_DATE, WIP_DAYS_WH_STOCK, WIP_DAYS_WH_PACKED, WIP_SCHEDULE_MONTH, WIP_CLOSURE_REOPEN_IND, WIP_CLOSURE_DATE, WIP_CLOSURE_REMARK, WIP_REOPEN_DATE, WIP_REOPEN_REMARK, WIP_DAYS_CURRENT_STAGE, WIP_EXPECTED_DISPATCH, WIP_EXP_DISPATCH_FROM, WIP_EXP_DISPATCH_DOCNO, WIP_ADJUSTABLE_LENGTH, WIP_ADJUSTABLE_WIDTH, WIP_ADJUSTABLE_GSM, WIP_ADJUSTABLE_WEIGHT, WIP_PIECE_IT_DEPT_REMARK, WIP_OA_NO, WIP_OA_DATE, WIP_OC_NO, WIP_OC_DATE, WIP_OC_MONTHYEAR, WIP_OC_LAST_DDMMYY, WIP_CURRENT_SCH_MONTH, WIP_CURRENT_SCH_LAST_DDMMYY, WIP_SP_MONTHYEAR, WIP_SP_LAST_DDMMYY, WIP_SP_REMARKS, WIP_SPL_REQUEST_MONTHYEAR, WIP_SPL_REQUEST_DATE, WIP_SPL_REQUEST_REMARK, WIP_EXP_WIP_DELIVERY_DATE, PR_REFERENCE, WIP_SDF_INSTRUCT_DATE, WIP_SDF_SPIRALED_DATE, WIP_SDF_ASSEMBLED_DATE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='"+WIP_PIECE_NO+"'");
                            }
                            else
                            {
                                //delete 2 wip pieces -A and -B
                                //DELETE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='' AND WIP_EXT_PIECE_NO='' AND WIP_EXT_PIECE_NO NOT LIKE '%AB%' AND WIP_PRIORITY_HOLD_CAN_FLAG=0
                                //DELETE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='' AND WIP_EXT_PIECE_NO='' AND WIP_EXT_PIECE_NO NOT LIKE '%AB%' AND WIP_PRIORITY_HOLD_CAN_FLAG=0
                                data.Execute("DELETE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='"+WIP_PIECE_NO+"' AND WIP_EXT_PIECE_NO='"+WIP_PIECE_NO+"-A' AND WIP_EXT_PIECE_NO NOT LIKE '%AB%' AND WIP_PRIORITY_HOLD_CAN_FLAG=0");
                                data.Execute("DELETE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='"+WIP_PIECE_NO+"' AND WIP_EXT_PIECE_NO='"+WIP_PIECE_NO+"-B' AND WIP_EXT_PIECE_NO NOT LIKE '%AB%' AND WIP_PRIORITY_HOLD_CAN_FLAG=0");
                                data.Execute("UPDATE PRODUCTION.FELT_WIP_PIECE_REGISTER SET WIP_EXT_PIECE_NO='"+WIP_PIECE_NO+"',WIP_PRIORITY_HOLD_CAN_FLAG=0,WIP_PIECE_AB_FLAG='' WHERE WIP_PIECE_NO='"+WIP_PIECE_NO+"' AND WIP_EXT_PIECE_NO LIKE '"+WIP_PIECE_NO+"-AB%'");
                                System.out.println("DELETE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='"+WIP_PIECE_NO+"' AND WIP_EXT_PIECE_NO='"+WIP_PIECE_NO+"-A' AND WIP_EXT_PIECE_NO NOT LIKE '%AB%' AND WIP_PRIORITY_HOLD_CAN_FLAG=0");
                                System.out.println("DELETE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='"+WIP_PIECE_NO+"' AND WIP_EXT_PIECE_NO='"+WIP_PIECE_NO+"-B' AND WIP_EXT_PIECE_NO NOT LIKE '%AB%' AND WIP_PRIORITY_HOLD_CAN_FLAG=0");
                                System.out.println("UPDATE PRODUCTION.FELT_WIP_PIECE_REGISTER SET WIP_EXT_PIECE_NO='"+WIP_PIECE_NO+"',WIP_PRIORITY_HOLD_CAN_FLAG=0,WIP_PIECE_AB_FLAG='' WHERE WIP_PIECE_NO='"+WIP_PIECE_NO+"' AND WIP_EXT_PIECE_NO LIKE '"+WIP_PIECE_NO+"-AB%'");
                            }   
                            /*
                            DataModel_ConvertedWIP.SetVariable(1, "WIP_EXT_PIECE_NO"); //4
                            DataModel_ConvertedWIP.SetVariable(2, "WIP_PIECE_NO"); //1
                            DataModel_ConvertedWIP.SetVariable(3, "WIP_PIECE_AB_FLAG"); //2
                            DataModel_ConvertedWIP.SetVariable(4, "WIP_PRIORITY_HOLD_CAN_FLAG"); //2
                            DataModel_ConvertedWIP.SetVariable(5, "WIP_THORITICAL_WEIGHT"); //2
                            */
                        }catch(Exception e)
                        {
                            e.printStackTrace();
                        }
                }
                EditMode = 0;
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + feltPieceLayerConversion.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void Cancel() {

        EditMode = 0;
        DisplayData();
        EnableToolbar();
        SetMenuForRights();
        SetFields(false);

    }

    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void Edit() {

        String productionDocumentNo = (String) feltPieceLayerConversion.getAttribute("DOC_NO").getObj();
        if (feltPieceLayerConversion.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            
            DisableToolbar();
            
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            
            
            SetupApproval();
            //ReasonResetReadonly();
            //cmbOrderReason.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(ModuleId, productionDocumentNo)) {
                SetFields(true);
            } else {
                EnableApproval();
            }
        } else {
            JOptionPane.showMessageDialog(this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "EDITING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {
        if (feltPieceLayerConversion.CanDelete(DocNo.getText() + "", DocDate.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, feltPieceLayerConversion.LastError, "DELETION ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(ModuleId, DocNo.getText() + "");
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        SetFields(true);
        //========== Setting Up Header Fields ================//
        String FieldName = "";
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

    }

    private void SetFields(boolean pStat) {
        DocDate.setEnabled(pStat);
        DocNo.setEnabled(pStat);
        txtPieceNo.setEnabled(pStat);

        if (EditMode == EITLERPGLOBAL.ADD) {
            //cmbLayerConversionBy.setEnabled(true);
            //cmbNo_Of_LayerConversion.setEnabled(true);
        } else {
            //cmbLayerConversionBy.setEnabled(false);
            //cmbNo_Of_LayerConversion.setEnabled(false);
        }

        

        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);

        Table_ConvertedWIP.setEnabled(pStat);
        //JOptionPane.showMessageDialog(null, "Dept Id :"+EITLERPGLOBAL.gUserDeptID);

        DataModel_ExistSALES.ClearAllReadOnly();

        DataModel_ExistSALES.SetReadOnly(0);
        DataModel_ExistSALES.SetReadOnly(1);
        DataModel_ExistSALES.SetReadOnly(2);
        DataModel_ExistSALES.SetReadOnly(3);
        //DataModel_ExistSALES.SetReadOnly(4);
        DataModel_ExistSALES.SetReadOnly(5);
        DataModel_ExistSALES.SetReadOnly(6);
        DataModel_ExistSALES.SetReadOnly(7);
        DataModel_ExistSALES.SetReadOnly(8);
        DataModel_ExistSALES.SetReadOnly(9);

        
        DataModel_ExistSALES.SetReadOnly(12);
        DataModel_ExistSALES.SetReadOnly(13);
        DataModel_ExistSALES.SetReadOnly(14);
        DataModel_ExistSALES.SetReadOnly(15);
        DataModel_ExistSALES.SetReadOnly(16);
        DataModel_ExistSALES.SetReadOnly(17);
        DataModel_ExistSALES.SetReadOnly(18);
        DataModel_ExistSALES.SetReadOnly(19);
        DataModel_ExistSALES.SetReadOnly(20);
        DataModel_ExistSALES.SetReadOnly(21);
        DataModel_ExistSALES.SetReadOnly(22);
       
        SetupApproval();
    }

    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    private void filterHierarchyCombo() {
        GenerateHierarchyCombo();

        String incharge = data.getStringValueFromDB("SELECT DESIGNER_INCHARGE FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=''");
        System.out.println("Selected Incharge : " + incharge);

        switch (incharge) {
            case "2": {
                ArrayList<String> Hierarchy = new ArrayList<>();
                Hierarchy.add("AP-SJP-RKP");
                Hierarchy.add("AC-SJP-RKP");
                Hierarchy.add("SR-SJP-RKP");
                filter(Hierarchy);
                break;
            }
            case "1": {
                ArrayList<String> Hierarchy = new ArrayList<>();
                Hierarchy.add("AP-KM-RKP");
                Hierarchy.add("AC-KM-RKP");
                Hierarchy.add("SR-KM-RKP");
                filter(Hierarchy);
                break;
            }
        }
    }

    private void filter(ArrayList<String> Hierarchy) {
        for (String current : Hierarchy) {
            int n = cmbHierarchyModel.getIndexOf(current);
            if (n != -1) {
                cmbHierarchyModel.setSelectedItem(current);
            }
        }

    }

    private void SetData() {

        feltPieceLayerConversion.setAttribute("DOC_NO", DocNo.getText());
        feltPieceLayerConversion.setAttribute("DOC_DATE", DocDate.getText());

        feltPieceLayerConversion.setAttribute("PIECE_NO", txtPieceNo.getText());
        

        DOC_NO = DocNo.getText();
        feltPieceLayerConversion.setAttribute("DOC_NO", DocNo.getText());
        feltPieceLayerConversion.setAttribute("DOC_DATE", DocDate.getText());
        feltPieceLayerConversion.setAttribute("MODULE_ID", ModuleId);
        feltPieceLayerConversion.setAttribute("USER_ID", EITLERPGLOBAL.gNewUserID);

        //----- Update Approval Specific Fields -----------//
        feltPieceLayerConversion.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        feltPieceLayerConversion.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        feltPieceLayerConversion.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        feltPieceLayerConversion.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            feltPieceLayerConversion.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            feltPieceLayerConversion.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            feltPieceLayerConversion.setAttribute("APPROVAL_STATUS", "R");
            feltPieceLayerConversion.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            feltPieceLayerConversion.setAttribute("APPROVAL_STATUS", "H");
        }

        if (EditMode == EITLERPGLOBAL.ADD) {
            feltPieceLayerConversion.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            feltPieceLayerConversion.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        } else {
            feltPieceLayerConversion.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            feltPieceLayerConversion.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
            feltPieceLayerConversion.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
            feltPieceLayerConversion.setAttribute("UPDATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }

        //======= Set Line part ============
        try {
            feltPieceLayerConversion.hmFeltPieceLayerConversionDetails_existSales.clear();

            for (int i = 0; i <= Table_ExistSales.getRowCount() - 1; i++) {

                clsPieceLayerConversionDetails objfeltPieceLayerConversionDetails = new clsPieceLayerConversionDetails();

                //objfeltPieceLayerConversionDetails.setAttribute("S_ORDER_DETAIL_CODE","");
                objfeltPieceLayerConversionDetails.setAttribute("DOC_NO", DocNo.getText());
                objfeltPieceLayerConversionDetails.setAttribute("SR_NO", (i + 1));
                objfeltPieceLayerConversionDetails.setAttribute("PIECE_NO", DataModel_ExistSALES.getValueByVariable("PIECE_NO", i));
                objfeltPieceLayerConversionDetails.setAttribute("PARTY_CODE", DataModel_ExistSALES.getValueByVariable("PARTY_CODE", i));
                objfeltPieceLayerConversionDetails.setAttribute("PARTY_NAME", DataModel_ExistSALES.getValueByVariable("PARTY_NAME", i));
                objfeltPieceLayerConversionDetails.setAttribute("MACHINE_NO", DataModel_ExistSALES.getValueByVariable("MACHINE_NO", i));
                objfeltPieceLayerConversionDetails.setAttribute("POSITION", DataModel_ExistSALES.getValueByVariable("POSITION", i));
                objfeltPieceLayerConversionDetails.setAttribute("POSITION_DESC", DataModel_ExistSALES.getValueByVariable("POSITION_DESC", i));
                objfeltPieceLayerConversionDetails.setAttribute("PRODUCT", DataModel_ExistSALES.getValueByVariable("PRODUCT", i));
                objfeltPieceLayerConversionDetails.setAttribute("PRODUCT_DESCRIPTION", DataModel_ExistSALES.getValueByVariable("PRODUCT_DESCRIPTION", i));
                objfeltPieceLayerConversionDetails.setAttribute("PRODUCT_GROUP", DataModel_ExistSALES.getValueByVariable("PRODUCT_GROUP", i));
                objfeltPieceLayerConversionDetails.setAttribute("LENGTH", DataModel_ExistSALES.getValueByVariable("LENGTH", i));
                objfeltPieceLayerConversionDetails.setAttribute("WIDTH", DataModel_ExistSALES.getValueByVariable("WIDTH", i));
                objfeltPieceLayerConversionDetails.setAttribute("GSM", DataModel_ExistSALES.getValueByVariable("GSM", i));
                objfeltPieceLayerConversionDetails.setAttribute("THEORTICAL_WEIGHT", DataModel_ExistSALES.getValueByVariable("THEORTICAL_WEIGHT", i));
                objfeltPieceLayerConversionDetails.setAttribute("SQ_MT", DataModel_ExistSALES.getValueByVariable("SQ_MT", i));
                objfeltPieceLayerConversionDetails.setAttribute("STYLE", DataModel_ExistSALES.getValueByVariable("STYLE", i));
                objfeltPieceLayerConversionDetails.setAttribute("BILL_LENGTH", DataModel_ExistSALES.getValueByVariable("BILL_LENGTH", i));
                objfeltPieceLayerConversionDetails.setAttribute("BILL_WIDTH", DataModel_ExistSALES.getValueByVariable("BILL_WIDTH", i));
                objfeltPieceLayerConversionDetails.setAttribute("BILL_WEIGHT", DataModel_ExistSALES.getValueByVariable("BILL_WEIGHT", i));
                objfeltPieceLayerConversionDetails.setAttribute("BILL_SQMTR", DataModel_ExistSALES.getValueByVariable("BILL_SQMTR", i));
                objfeltPieceLayerConversionDetails.setAttribute("BILL_GSM", DataModel_ExistSALES.getValueByVariable("BILL_GSM", i));
                objfeltPieceLayerConversionDetails.setAttribute("BILL_PRODUCT_CODE", DataModel_ExistSALES.getValueByVariable("BILL_PRODUCT_CODE", i));
                objfeltPieceLayerConversionDetails.setAttribute("PIECE_STAGE", DataModel_ExistSALES.getValueByVariable("PIECE_STAGE", i));
                objfeltPieceLayerConversionDetails.setAttribute("PR_PIECE_AB_FLAG", DataModel_ExistSALES.getValueByVariable("LAYER", i));
                 
                
                
                feltPieceLayerConversion.hmFeltPieceLayerConversionDetails_existSales.put(Integer.toString(feltPieceLayerConversion.hmFeltPieceLayerConversionDetails_existSales.size() + 1), objfeltPieceLayerConversionDetails);

            }
            
            feltPieceLayerConversion.hmFeltPieceLayerConversionDetails_existWIP.clear();

            for (int i = 0; i <= Table_ExistWIP.getRowCount() - 1; i++) {

                clsPieceLayerConversionDetails objfeltPieceLayerConversionDetails = new clsPieceLayerConversionDetails();

                //objfeltPieceLayerConversionDetails.setAttribute("S_ORDER_DETAIL_CODE","");
                objfeltPieceLayerConversionDetails.setAttribute("DOC_NO", DocNo.getText());
                objfeltPieceLayerConversionDetails.setAttribute("SR_NO", (i + 1));
                objfeltPieceLayerConversionDetails.setAttribute("PIECE_NO", DataModel_ExistWIP.getValueByVariable("PIECE_NO", i));
                objfeltPieceLayerConversionDetails.setAttribute("EXT_PIECE_NO", DataModel_ExistWIP.getValueByVariable("EXT_PIECE_NO", i));
                objfeltPieceLayerConversionDetails.setAttribute("PARTY_CODE", DataModel_ExistWIP.getValueByVariable("PARTY_CODE", i));
                objfeltPieceLayerConversionDetails.setAttribute("PARTY_NAME", DataModel_ExistWIP.getValueByVariable("PARTY_NAME", i));
                objfeltPieceLayerConversionDetails.setAttribute("MACHINE_NO", DataModel_ExistWIP.getValueByVariable("MACHINE_NO", i));
                objfeltPieceLayerConversionDetails.setAttribute("POSITION", DataModel_ExistWIP.getValueByVariable("POSITION", i));
                objfeltPieceLayerConversionDetails.setAttribute("POSITION_DESC", DataModel_ExistWIP.getValueByVariable("POSITION_DESC", i));
                objfeltPieceLayerConversionDetails.setAttribute("PRODUCT", DataModel_ExistWIP.getValueByVariable("PRODUCT", i));
                objfeltPieceLayerConversionDetails.setAttribute("PRODUCT_DESCRIPTION", DataModel_ExistWIP.getValueByVariable("PRODUCT_DESCRIPTION", i));
                objfeltPieceLayerConversionDetails.setAttribute("PRODUCT_GROUP", DataModel_ExistWIP.getValueByVariable("PRODUCT_GROUP", i));
                objfeltPieceLayerConversionDetails.setAttribute("LENGTH", DataModel_ExistWIP.getValueByVariable("LENGTH", i));
                objfeltPieceLayerConversionDetails.setAttribute("WIDTH", DataModel_ExistWIP.getValueByVariable("WIDTH", i));
                objfeltPieceLayerConversionDetails.setAttribute("GSM", DataModel_ExistWIP.getValueByVariable("GSM", i));
                objfeltPieceLayerConversionDetails.setAttribute("THEORTICAL_WEIGHT", DataModel_ExistWIP.getValueByVariable("THEORTICAL_WEIGHT", i));
                objfeltPieceLayerConversionDetails.setAttribute("SQ_MT", DataModel_ExistWIP.getValueByVariable("SQ_MT", i));
                objfeltPieceLayerConversionDetails.setAttribute("STYLE", DataModel_ExistWIP.getValueByVariable("STYLE", i));
                objfeltPieceLayerConversionDetails.setAttribute("BILL_LENGTH", DataModel_ExistWIP.getValueByVariable("BILL_LENGTH", i));
                objfeltPieceLayerConversionDetails.setAttribute("BILL_WIDTH", DataModel_ExistWIP.getValueByVariable("BILL_WIDTH", i));
                objfeltPieceLayerConversionDetails.setAttribute("BILL_WEIGHT", DataModel_ExistWIP.getValueByVariable("BILL_WEIGHT", i));
                objfeltPieceLayerConversionDetails.setAttribute("BILL_SQMTR", DataModel_ExistWIP.getValueByVariable("BILL_SQMTR", i));
                objfeltPieceLayerConversionDetails.setAttribute("BILL_GSM", DataModel_ExistWIP.getValueByVariable("BILL_GSM", i));
                objfeltPieceLayerConversionDetails.setAttribute("BILL_PRODUCT_CODE", DataModel_ExistWIP.getValueByVariable("BILL_PRODUCT_CODE", i));
                objfeltPieceLayerConversionDetails.setAttribute("PIECE_STAGE", DataModel_ExistWIP.getValueByVariable("PIECE_STAGE", i));
                 
                feltPieceLayerConversion.hmFeltPieceLayerConversionDetails_existWIP.put(Integer.toString(feltPieceLayerConversion.hmFeltPieceLayerConversionDetails_existWIP.size() + 1), objfeltPieceLayerConversionDetails);

            }
            
            feltPieceLayerConversion.hmFeltPieceLayerConversionDetails_convertedSales.clear();

            for (int i = 0; i <= Table_ConvertedSales.getRowCount() - 1; i++) {

                clsPieceLayerConversionDetails objfeltPieceLayerConversionDetails = new clsPieceLayerConversionDetails();

                //objfeltPieceLayerConversionDetails.setAttribute("S_ORDER_DETAIL_CODE","");
                objfeltPieceLayerConversionDetails.setAttribute("DOC_NO", DocNo.getText());
                objfeltPieceLayerConversionDetails.setAttribute("SR_NO", (i + 1));
                objfeltPieceLayerConversionDetails.setAttribute("PIECE_NO", DataModel_ConvertedSALES.getValueByVariable("PIECE_NO", i));
                objfeltPieceLayerConversionDetails.setAttribute("PRODUCT", DataModel_ConvertedSALES.getValueByVariable("PRODUCT", i));
                objfeltPieceLayerConversionDetails.setAttribute("STYLE", DataModel_ConvertedSALES.getValueByVariable("STYLE", i));
                
                feltPieceLayerConversion.hmFeltPieceLayerConversionDetails_convertedSales.put(Integer.toString(feltPieceLayerConversion.hmFeltPieceLayerConversionDetails_convertedSales.size() + 1), objfeltPieceLayerConversionDetails);

            }
            
            feltPieceLayerConversion.hmFeltPieceLayerConversionDetails_convertedWIP.clear();

            for (int i = 0; i <= Table_ConvertedWIP.getRowCount() - 1; i++) {

                clsPieceLayerConversionDetails objfeltPieceLayerConversionDetails = new clsPieceLayerConversionDetails();

                //objfeltPieceLayerConversionDetails.setAttribute("S_ORDER_DETAIL_CODE","");
                objfeltPieceLayerConversionDetails.setAttribute("DOC_NO", DocNo.getText());
                objfeltPieceLayerConversionDetails.setAttribute("SR_NO", (i + 1));
                objfeltPieceLayerConversionDetails.setAttribute("WIP_EXT_PIECE_NO", DataModel_ConvertedWIP.getValueByVariable("WIP_EXT_PIECE_NO", i));
                objfeltPieceLayerConversionDetails.setAttribute("WIP_PIECE_NO", DataModel_ConvertedWIP.getValueByVariable("WIP_PIECE_NO", i));
                objfeltPieceLayerConversionDetails.setAttribute("WIP_PIECE_AB_FLAG", DataModel_ConvertedWIP.getValueByVariable("WIP_PIECE_AB_FLAG", i));
                objfeltPieceLayerConversionDetails.setAttribute("WIP_PRIORITY_HOLD_CAN_FLAG", DataModel_ConvertedWIP.getValueByVariable("WIP_PRIORITY_HOLD_CAN_FLAG", i));
                objfeltPieceLayerConversionDetails.setAttribute("WIP_THORITICAL_WEIGHT", DataModel_ConvertedWIP.getValueByVariable("WIP_THORITICAL_WEIGHT", i));
                
                
                feltPieceLayerConversion.hmFeltPieceLayerConversionDetails_convertedWIP.put(Integer.toString(feltPieceLayerConversion.hmFeltPieceLayerConversionDetails_convertedWIP.size() + 1), objfeltPieceLayerConversionDetails);

            }
            
            
        } catch (Exception e) {
            System.out.println("Error on setData : " + e.getMessage());
            e.printStackTrace();
        };
    }

    
    
       
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField DocDate;
    private javax.swing.JTextField DocNo;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JTable Table_ConvertedSales;
    private javax.swing.JTable Table_ConvertedWIP;
    private javax.swing.JTable Table_ExistSales;
    private javax.swing.JTable Table_ExistWIP;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtPieceNo;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
}
