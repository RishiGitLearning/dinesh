/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.SalesTracker;

import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.PieceRegister.clsIncharge;
import EITLERP.FeltSales.Reports.clsExcelExporter;
import EITLERP.FeltSales.common.FeltInvCalc;
import EITLERP.FeltSales.common.SelectSortFields;
import EITLERP.FeltSales.common.clsOrderValueCalc;
import EITLERP.JTextFieldHint;
import EITLERP.LOV;
import EITLERP.clsSales_Party;
import EITLERP.data;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Dharmendra
 */
public class xlsSalesTracker extends javax.swing.JApplet {

    /**
     * Initializes the applet xlsSalesTracker
     */
    private EITLComboModel cmbIncharge, cmodelProductGroup, modelMonthYear;
    private DecimalFormat df;
    private EITLTableModel DataModel1, DataModel2, DataModel3, DataModel4, DataModel5, DataModel6;
    private clsExcelExporter exp = new clsExcelExporter();
    String ORDER_BY = "";

    @Override
    public void init() {

        /* Create and display the applet */
        initComponents();

        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(dim.width, dim.height);
        cmbIncharge = new EITLComboModel();
        cmodelProductGroup = new EITLComboModel();
        modelMonthYear = new EITLComboModel();
        GenerateCombo();
        GenerateComboMonthYear();
        cmbMonthYear.setSelectedItem(data.getStringValueFromDB("SELECT CONCAT(LEFT(MONTHNAME(CURDATE()),3),' - ',YEAR(CURDATE())) FROM DUAL LIMIT 1"));
        df = new DecimalFormat("0.00");
        df.setMinimumFractionDigits(2);
        df.setMaximumFractionDigits(2);
        btnShowDataActionPerformed(null);
        
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel8 = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        txtPartyCode = new JTextFieldHint(new JTextField(),"Search by F1");
        jLabel7 = new javax.swing.JLabel();
        cmbZone = new javax.swing.JComboBox();
        lblPartyName = new javax.swing.JLabel();
        cmbMonthYear = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();
        excel2 = new javax.swing.JButton();
        excel1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        table3 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        table5 = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        table4 = new javax.swing.JTable();
        excel5 = new javax.swing.JButton();
        excel3 = new javax.swing.JButton();
        excel4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnShowData = new javax.swing.JButton();

        getContentPane().setLayout(null);

        jLabel8.setText("PARTY CODE");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(10, 60, 100, 20);

        txtPartyCode.setToolTipText("Press F1 ");
        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });
        getContentPane().add(txtPartyCode);
        txtPartyCode.setBounds(150, 50, 120, 30);

        jLabel7.setText("Zone");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(300, 50, 50, 30);

        cmbZone.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(cmbZone);
        cmbZone.setBounds(340, 50, 110, 30);

        lblPartyName.setText("Party Name");
        getContentPane().add(lblPartyName);
        lblPartyName.setBounds(150, 80, 410, 20);

        cmbMonthYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMonthYearItemStateChanged(evt);
            }
        });
        cmbMonthYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMonthYearActionPerformed(evt);
            }
        });
        getContentPane().add(cmbMonthYear);
        cmbMonthYear.setBounds(150, 10, 140, 30);

        jLabel1.setText("Current Sch Month");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 10, 120, 30);

        jPanel1.setLayout(null);

        table2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table2);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 230, 990, 160);

        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(table1);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 30, 990, 170);

        excel2.setText("EXPORT TO EXCEL");
        excel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excel2ActionPerformed(evt);
            }
        });
        jPanel1.add(excel2);
        excel2.setBounds(820, 390, 170, 30);

        excel1.setText("EXPORT TO EXCEL");
        excel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excel1ActionPerformed(evt);
            }
        });
        jPanel1.add(excel1);
        excel1.setBounds(820, 200, 170, 30);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Actual Sales Planned / Commited But Unschedule / Unplanned");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(10, 200, 700, 30);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Planned");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(10, 0, 210, 30);

        jTabbedPane1.addTab("Sales Summary", jPanel1);

        jPanel2.setLayout(null);

        table3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(table3);

        jPanel2.add(jScrollPane4);
        jScrollPane4.setBounds(10, 30, 990, 110);

        table5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(table5);

        jPanel2.add(jScrollPane5);
        jScrollPane5.setBounds(10, 310, 990, 110);

        table4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(table4);

        jPanel2.add(jScrollPane6);
        jScrollPane6.setBounds(10, 170, 990, 110);

        excel5.setText("EXPORT TO EXCEL");
        excel5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excel5ActionPerformed(evt);
            }
        });
        jPanel2.add(excel5);
        excel5.setBounds(820, 420, 170, 30);

        excel3.setText("EXPORT TO EXCEL");
        excel3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excel3ActionPerformed(evt);
            }
        });
        jPanel2.add(excel3);
        excel3.setBounds(820, 140, 170, 30);

        excel4.setText("EXPORT TO EXCEL");
        excel4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excel4ActionPerformed(evt);
            }
        });
        jPanel2.add(excel4);
        excel4.setBounds(820, 280, 170, 30);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Unplanned");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(10, 280, 280, 30);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Planned");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(10, 0, 210, 30);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Commited But Unschedule");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(10, 140, 210, 30);

        jTabbedPane1.addTab("Sales Detail", jPanel2);

        jPanel3.setLayout(null);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Week End on", "Saturday"},
                {"Selected Month on", "PR_CURRENT_SCH_MONTH"},
                {"if PR_EXP_PAY_CHQRC_DATE!='' then", "PLANNED"},
                {"PR_INVOICE_DATE!='' AND PR_CURRENT_SCH_MONTH!=SELECTED MONTH", "NotInCurrentScheduleMonth"},
                {"if PR_EXP_PAY_CHQRC_DATE=''", "CommitedButUnschedule"},
                {"if PR_INVOICE_DATE!=''", "Amount as Actual Amount"},
                {"IF PR_INVOICE_DATE!='' THEN PR_INVOICE_DATE ELSE PR_EXP_PAY_CHQRC_DATE", "WeekDay"},
                {"PIECE_STAGE IN ('NEEDLING','MENDING','SEAMING','FINISHING','WEAVING','PLANNING','BOOKING') AND PR_EXP_WIP_DELIVERY_DATE!='' ", "Filter"},
                {"OR  PIECE_STAGE IN ('IN STOCK','INVOICED','BSR')", "Filter"},
                {"ZONE!='EXPORT'", "Filter"},
                {"PR_DELINK!='OBSOLETE'", "Filter"},
                {"Every Tuesday PR_EXP_PAY_CHQRC_DATE will be Next Saturday or End of moth date  if not invoiced and PR_EXP_PAY_CHQRC_DATE is not blank", "PR_EXP_PAY_CHQRC_DATE will next Saturday or End of month date"},
                {"Every 1st day of Month PR_EXP_PAY_CHQRC_DATE will be Next Saturday  if not invoiced and PR_EXP_PAY_CHQRC_DATE is not blank", "R_EXP_PAY_CHQRC_DATE will next Saturday"}
            },
            new String [] {
                "Condition", "Value"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jPanel3.add(jScrollPane2);
        jScrollPane2.setBounds(0, 0, 970, 230);

        jTabbedPane1.addTab("Formula", jPanel3);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(10, 110, 1010, 500);

        btnShowData.setText("SHOW DATA");
        btnShowData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowDataActionPerformed(evt);
            }
        });
        getContentPane().add(btnShowData);
        btnShowData.setBounds(510, 50, 130, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
        // TODO add your handling code here:
        if (txtPartyCode.getText().equals("")) {
            lblPartyName.setText("");
        } else if (data.getStringValueFromDB("SELECT PR_PARTY_CODE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE   PR_PARTY_CODE='" + txtPartyCode.getText() + "'").equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(this, "Invalid Party Code", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtPartyCode.setText("");
            lblPartyName.setText("");
            txtPartyCode.requestFocus();
        } else {
            lblPartyName.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, txtPartyCode.getText()));
        }
    }//GEN-LAST:event_txtPartyCodeFocusLost

    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            //aList.SQL="SELECT PARTY_CODE,NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER ORDER BY NAME";
            aList.SQL = "SELECT DISTINCT PR_PARTY_CODE,PARTY_NAME FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER "
                    + "ON PR_PARTY_CODE=PARTY_CODE "
                    + "WHERE  PR_CURRENT_SCH_MONTH='" + cmbMonthYear.getSelectedItem().toString() + "' ";
            if (!cmbZone.getSelectedItem().equals("ALL")) {

                aList.SQL = aList.SQL + " AND PR_INCHARGE = " + data.getStringValueFromDB("SELECT INCHARGE_CD FROM PRODUCTION.FELT_INCHARGE where INCHARGE_NAME='" + cmbZone.getSelectedItem() + "'");
            }

            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                txtPartyCode.setText(aList.ReturnVal);
                lblPartyName.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
            }
        }

    }//GEN-LAST:event_txtPartyCodeKeyPressed

    private void cmbMonthYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMonthYearItemStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_cmbMonthYearItemStateChanged

    private void cmbMonthYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMonthYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbMonthYearActionPerformed

    private void btnShowDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowDataActionPerformed
        // TODO add your handling code here:
        GenerateData();
    }//GEN-LAST:event_btnShowDataActionPerformed

    private void excel4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excel4ActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(table4, new File("D://CBUS.xls"), "CBUS");
            exp.fillData(table4, new File(System.getProperty("user.home") + "/Desktop/CBUS.xls"), "CBUS");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/CBUS.xls' or 'D://CBUS.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_excel4ActionPerformed

    private void excel3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excel3ActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(table3, new File("D://Planned.xls"), "Planned");
            exp.fillData(table3, new File(System.getProperty("user.home") + "/Desktop/Planned.xls"), "RFNC");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/Planned.xls' or 'D://Planned.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_excel3ActionPerformed

    private void excel5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excel5ActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(table5, new File("D://NCSM.xls"), "NCSM");
            exp.fillData(table5, new File(System.getProperty("user.home") + "/Desktop/NCSM.xls"), "NCSM");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/NCSM.xls' or 'D://NCSM.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_excel5ActionPerformed

    private void excel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excel1ActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(table1, new File("D://PlannedSummary.xls"), "PlannedSummary");
            exp.fillData(table1, new File(System.getProperty("user.home") + "/Desktop/PlannedSummary.xls"), "PlannedSummary");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/PlannedSummary.xls' or 'D://PlannedSummary.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_excel1ActionPerformed

    private void excel2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excel2ActionPerformed

        try {
            exp.fillData(table2, new File("D://PLAN_CBUS_NSCM.xls"), "PLAN_CBUS_NSCM");
            exp.fillData(table2, new File(System.getProperty("user.home") + "/Desktop/PLAN_CBUS_NSCM.xls"), "PLAN_CBUS_NSCM");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/PLAN_CBUS_NSCM.xls' or 'D://PLAN_CBUS_NSCM.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_excel2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnShowData;
    private javax.swing.JComboBox cmbMonthYear;
    private javax.swing.JComboBox cmbZone;
    private javax.swing.JButton excel1;
    private javax.swing.JButton excel2;
    private javax.swing.JButton excel3;
    private javax.swing.JButton excel4;
    private javax.swing.JButton excel5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblPartyName;
    private javax.swing.JTable table1;
    private javax.swing.JTable table2;
    private javax.swing.JTable table3;
    private javax.swing.JTable table4;
    private javax.swing.JTable table5;
    private javax.swing.JTextField txtPartyCode;
    // End of variables declaration//GEN-END:variables
private void GenerateCombo() {

        HashMap List = new HashMap();
        clsIncharge ObjIncharge;

        cmbZone.setModel(cmbIncharge);
        cmbIncharge.removeAllElements();  //Clearing previous contents

        List = clsIncharge.getIncgargeList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjIncharge = (clsIncharge) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Text = (String) ObjIncharge.getAttribute("INCHARGE_NAME").getObj();
            aData.Code = (long) ObjIncharge.getAttribute("INCHARGE_CD").getVal();
            cmbIncharge.addElement(aData);
        }
    }

    private void GenerateComboMonthYear() {

        cmbMonthYear.setModel(modelMonthYear);
        modelMonthYear.removeAllElements();  //Clearing previous contents

        int current_month = 2;

        int current_year = 2019;

        if (current_month > 12) {
            current_month = 1;
            current_year = current_year + 1;
        }
        String Month_Name = getMonthName(current_month);
        //addToMonthYearCombo(Month_Name + " - " + current_year);
        //current_month = current_month + 1;
        // System.out.println("DATA = SELECT PR_REQUESTED_MONTH FROM PRODUCTION.FELT_SALES_PIECE_REGISTER  WHERE PR_PIECE_STAGE IN ('BOOKING','PLANNING','SEAMING','SPLICING','WEAVING','NEEDLING','MENDING','FINISHING','IN STOCK','BSR')  AND PR_REQ_MTH_LAST_DDMMYY!='0000-00-00'  AND PR_REQ_MTH_LAST_DDMMYY>='"+exist_last_date+"' AND PR_GROUP!='SDF' AND PR_DELINK!='OBSOLETE'  ORDER BY PR_REQ_MTH_LAST_DDMMYY DESC LIMIT 1");    
        String Req_Month_Last_Available = data.getStringValueFromDB("SELECT CONCAT(LEFT(MONTHNAME(CURDATE()),3),' - ',YEAR(CURDATE())) FROM DUAL LIMIT 1");
        // System.out.println("Req_Month_Last_Available = "+Req_Month_Last_Available);
        if (!Req_Month_Last_Available.equals("")) {
            int j = 0;
            do {
                j++;
                if (current_month > 12) {
                    current_month = 1;
                    current_year = current_year + 1;
                }
                Month_Name = getMonthName(current_month);
                addToMonthYearCombo(Month_Name + " - " + current_year);
                current_month = current_month + 1;
                Month_Name = Month_Name + " - " + current_year;
//                if (j == 10) {
//                    break;
//                }
            } while (!Req_Month_Last_Available.equals(Month_Name));
        }

    }

    private void addToMonthYearCombo(String MonthYear) {
        ComboData aData = new ComboData();
        aData.Text = MonthYear;
        aData.strCode = MonthYear;
        modelMonthYear.addElement(aData);
    }

    private String getMonthName(int month) {
        if (month == 1) {
            return "Jan";
        } else if (month == 2) {
            return "Feb";
        } else if (month == 3) {
            return "Mar";
        } else if (month == 4) {
            return "Apr";
        } else if (month == 5) {
            return "May";
        } else if (month == 6) {
            return "Jun";
        } else if (month == 7) {
            return "Jul";
        } else if (month == 8) {
            return "Aug";
        } else if (month == 9) {
            return "Sep";
        } else if (month == 10) {
            return "Oct";
        } else if (month == 11) {
            return "Nov";
        } else if (month == 12) {
            return "Dec";
        } else {
            return "";
        }
    }

    private void GenerateData() {
        try {
            HashMap hm = new HashMap();
            hm.put("Jan", "01");
            hm.put("Feb", "02");
            hm.put("Mar", "03");
            hm.put("Apr", "04");
            hm.put("May", "05");
            hm.put("Jun", "06");
            hm.put("Jul", "07");
            hm.put("Aug", "08");
            hm.put("Sep", "09");
            hm.put("Oct", "10");
            hm.put("Nov", "11");
            hm.put("Dec", "12");
            String fdt, ldt, mtm;
            mtm = data.getStringValueFromDB("SELECT DATE_FORMAT(NOW(),'%d/%m/%Y %T') FROM DUAL");
            fdt = cmbMonthYear.getSelectedItem().toString().substring(6) + "-" + hm.get(cmbMonthYear.getSelectedItem().toString().substring(0, 3)).toString() + "-01";
            System.out.println("FDT:" + fdt);
            ldt = data.getStringValueFromDB("SELECT LAST_DAY('" + fdt + "') FROM DUAL");
            System.out.println("lDT:" + ldt);
            data.Execute("DELETE FROM PRODUCTION.TMP_WEEK_TABLE");
            data.Execute("INSERT INTO PRODUCTION.TMP_WEEK_TABLE "
                    + "select SELECTED_DATE AS S_DATE, WEEK(SELECTED_DATE, 0) -  WEEK(SELECTED_DATE - INTERVAL DAY(SELECTED_DATE)-1 DAY, 0) + 1 AS WDAY "
                    + "from (select adddate('1970-01-01',t4*10000 + t3*1000 + t2*100 + t1*10 + t0) selected_date "
                    + "from (select 0 t0 union select 1 union select 2 union select 3 union select 4 "
                    + "union select 5 union select 6 union select 7 union select 8 union select 9) t0,"
                    + "(select 0 t1 union select 1 union select 2 union select 3 union select 4 "
                    + "union select 5 union select 6 union select 7 union select 8 union select 9) t1,"
                    + "(select 0 t2 union select 1 union select 2 union select 3 "
                    + "union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t2,"
                    + "(select 0 t3 union select 1 union select 2 union select 3 union select 4 "
                    + "union select 5 union select 6 union select 7 union select 8 union select 9) t3, "
                    + "(select 0 t4 union select 1 union select 2 union select 3 "
                    + "union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t4) v "
                    + "where selected_date between '" + fdt + "' and '" + ldt + "'");
            ResultSet trs1, trs2, trs3, trs4, trs5, trs6, trs7, trs8;
            trs1 = data.getResult("SELECT DATE_FORMAT(MIN(S_DATE),\"%d/%m/%Y\") AS S_DATE,DATE_FORMAT(MAX(S_DATE),\"%d/%m/%Y\") AS E_DATE FROM PRODUCTION.TMP_WEEK_TABLE GROUP BY WDAY");
            data.Execute("DELETE FROM PRODUCTION.TMP_PAYMENT_RECEIVE");
            String sql = "INSERT INTO PRODUCTION.TMP_PAYMENT_RECEIVE"
                    + "(TPR_PARTY_CODE,TPR_WDAY,TPR_INCHARGE,TPR_PIECES_TARGET,TPR_TARGET,TPR_ACTUAL,TPR_CATEGORY,TPR_PIECES_ACTUAL)"
                    + " SELECT PR_PARTY_CODE,CONCAT(\"Week-\",WDAY) AS W_DAY,INCHARGE_NAME,"
                    + "COUNT(PR_PIECE_NO) AS TPC,SUM(TARGET_AMOUNT) AS TAMT,"
                    + "SUM(ACTUAL_AMOUNT) AS TAAMT,"
                    + "CASE WHEN D.EXP_DATE!='' THEN 'PLANNED' "
                    + "WHEN D.EXP_DATE='' AND PR_CURRENT_SCH_MONTH='" + cmbMonthYear.getSelectedItem().toString() + "' THEN 'R_F_N_C' "
                    + "WHEN D.EXP_DATE='' AND INV_DATE!='' AND PR_CURRENT_SCH_MONTH!='" + cmbMonthYear.getSelectedItem().toString() + "' THEN 'N_C_S_M' "
                    + "END AS CATEGORY,SUM(CASE WHEN ACTUAL_AMOUNT>0 THEN 1 ELSE 0 END) AS TAPC "
                    + " FROM (SELECT PR_CURRENT_SCH_MONTH,PR_PIECE_NO,INCHARGE_NAME,PR_PARTY_CODE,PARTY_NAME,PR_MACHINE_NO,POSITION_DESC,PR_BILL_PRODUCT_CODE,PR_GROUP, "
                    + "PR_BILL_LENGTH,PR_BILL_WIDTH,PR_BILL_GSM,PR_BILL_WEIGHT,PR_BILL_SQMTR,"
                    + "CASE WHEN PR_PIECE_STAGE='INVOICED' THEN PR_INVOICE_AMOUNT ELSE PR_FELT_VALUE_WITH_GST END AS TARGET_AMOUNT,"
                    + "CASE WHEN COALESCE(PR_INVOICE_DATE,'0000-00-00')!='0000-00-00' THEN PR_INVOICE_AMOUNT ELSE 0 END AS ACTUAL_AMOUNT, "
                    + "COALESCE(CASE WHEN PR_INVOICE_DATE='0000-00-00' THEN '' ELSE PR_INVOICE_DATE END,'') AS INV_DATE, "
                    + "COALESCE(CASE WHEN PR_EXP_PAY_CHQRC_DATE='0000-00-00' THEN '' ELSE PR_EXP_PAY_CHQRC_DATE END,'') AS EXP_DATE, "
                    + "COALESCE(CASE WHEN PR_ACT_PAY_CHQRC_DATE='0000-00-00' THEN '' ELSE PR_ACT_PAY_CHQRC_DATE END,'') AS ACT_DATE "
                    + ",CASE WHEN COALESCE(SIDATE,'')='' THEN COALESCE(SCDATE,'') ELSE COALESCE(SIDATE,'') END AS S_DATE,"
                    + "CASE WHEN COALESCE(SIDATE,'')='' THEN COALESCE(SCWDAY,'') ELSE COALESCE(SIWDAY,'') END AS WDAY  "
                    //+ ",COALESCE(CASE WHEN PR_EXP_PAY_CHQRC_DATE='0000-00-00' THEN '' ELSE WDAY END,'') AS WDAY "
                    + " FROM PRODUCTION.FELT_SALES_PIECE_REGISTER P "
                    + "LEFT JOIN PRODUCTION.FELT_INCHARGE ON PR_INCHARGE=INCHARGE_CD "
                    + "LEFT JOIN PRODUCTION.FELT_MACHINE_POSITION_MST ON PR_POSITION_NO=POSITION_NO "
                    + "LEFT JOIN (SELECT PARTY_CODE,PARTY_NAME,CHARGE_CODE FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS PM ON PR_PARTY_CODE=PM.PARTY_CODE "
                    + "LEFT JOIN (SELECT S_DATE AS SCDATE,WDAY AS SCWDAY FROM PRODUCTION.TMP_WEEK_TABLE) AS AA "
                    + "ON PR_EXP_PAY_CHQRC_DATE=AA.SCDATE "
                    + "LEFT JOIN (SELECT S_DATE AS SIDATE,WDAY AS SIWDAY FROM PRODUCTION.TMP_WEEK_TABLE) AS BB "
                    + "ON PR_INVOICE_DATE=BB.SIDATE "
                    + "WHERE COALESCE(PR_DELINK,'')!='OBSOLETE' AND "
                    + "(COALESCE(PR_INVOICE_DATE,'0000-00-00')='0000-00-00' || COALESCE(PR_INVOICE_DATE,'0000-00-00')>='" + fdt + "') AND "
                    + "((PR_PIECE_STAGE IN ('NEEDLING','MENDING','SEAMING','FINISHING','WEAVING','PLANNING','BOOKING') "
                    + "AND COALESCE(PR_EXP_WIP_DELIVERY_DATE,'0000-00-00')!='0000-00-00') OR (PR_PIECE_STAGE IN ('IN STOCK','INVOICED','BSR'))) AND "
                    + "(PR_CURRENT_SCH_MONTH='" + cmbMonthYear.getSelectedItem().toString() + "'  OR PR_INVOICE_DATE IN (SELECT S_DATE FROM PRODUCTION.TMP_WEEK_TABLE)) AND PR_INCHARGE!=6 ";
            if (!cmbZone.getSelectedItem().equals("ALL")) {

                sql = sql + " AND PR_INCHARGE = " + data.getStringValueFromDB("SELECT INCHARGE_CD FROM PRODUCTION.FELT_INCHARGE where INCHARGE_NAME='" + cmbZone.getSelectedItem() + "'");
            }
            if (!txtPartyCode.getText().equals("")) {

                sql = sql + " AND PR_PARTY_CODE = " + txtPartyCode.getText() + " ";
            }
            sql = sql + ") AS D "
                    + "GROUP BY PR_PARTY_CODE,CATEGORY,WDAY ";
            System.out.println("Query:" + sql);
            data.Execute(sql);
            //trs2 = data.getResult(sql);

//            trs2.first();
//            if (trs2.getRow() > 0) {
//                Connection Conn = data.getConn();
//                Conn.setAutoCommit(false);
//                PreparedStatement pstm, pstmu;
//                pstm = Conn.prepareStatement("INSERT INTO PRODUCTION.TMP_PAYMENT_RECEIVE "
//                        + "(TPR_PARTY_CODE,TPR_WDAY,TPR_INCHARGE,TPR_PIECES_TARGET,TPR_TARGET,TPR_ACTUAL,TPR_CATEGORY) "
//                        + "VALUES(?,?,?,?,?,?,?)");
//                pstmu = Conn.prepareStatement("UPDATE PRODUCTION.TMP_PAYMENT_RECEIVE "
//                        + "SET TPR_PIECES_TARGET=TPR_PIECES_TARGET+?,TPR_TARGET=TPR_TARGET+?,TPR_ACTUAL=TPR_ACTUAL+? "
//                        + "WHERE TPR_PARTY_CODE=? AND TPR_WDAY=?");
//                HashMap hmchk = new HashMap();
//
//                while (!trs2.isAfterLast()) {
//
//                    FeltInvCalc inv_calc;
//                    try {
//                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
//                                trs2.getString("PR_PIECE_NO"),
//                                trs2.getString("PR_BILL_PRODUCT_CODE"),
//                                trs2.getString("PR_PARTY_CODE"),
//                                Float.parseFloat(trs2.getString("PR_BILL_LENGTH")),
//                                Float.parseFloat(trs2.getString("PR_BILL_WIDTH")),
//                                Float.parseFloat(trs2.getString("PR_BILL_WEIGHT")),
//                                Float.parseFloat(trs2.getString("PR_BILL_SQMTR")),
//                                EITLERPGLOBAL.getCurrentDateDB());
//                        if (hmchk.containsKey(trs2.getString("PR_PARTY_CODE").trim() + trs2.getString("WDAY").trim() + trs2.getString("CATEGORY").trim())) {
//                            System.out.println("Update Key:" + trs2.getString("PR_PARTY_CODE") + trs2.getString("WDAY") + "#");
//                            pstmu.setInt(1, 1);
//                            pstmu.setDouble(2, inv_calc.getFicInvAmt());
//                            if (!trs2.getString("INV_DATE").equalsIgnoreCase("")) {
//                                pstmu.setDouble(3, inv_calc.getFicInvAmt());
//                            } else {
//                                pstmu.setDouble(3, 0);
//                            }
//                            pstmu.setString(4, trs2.getString("PR_PARTY_CODE"));
//                            pstmu.setString(5, "Week-" + trs2.getString("WDAY"));
//                            pstmu.addBatch();
//                        } else {
//                            hmchk.put(trs2.getString("PR_PARTY_CODE").trim() + trs2.getString("WDAY").trim() + trs2.getString("CATEGORY").trim(), "");
//                            System.out.println("Add Key:" + trs2.getString("PR_PARTY_CODE") + trs2.getString("WDAY") + "#");
//                            pstm.setString(1, trs2.getString("PR_PARTY_CODE"));
//                            pstm.setString(2, "Week-" + trs2.getString("WDAY").trim());
//                            pstm.setString(3, trs2.getString("INCHARGE_NAME"));
//                            pstm.setInt(4, 1);
//                            pstm.setDouble(5, inv_calc.getFicInvAmt());
//                            if (!trs2.getString("INV_DATE").equalsIgnoreCase("")) {
//                                pstm.setDouble(6, inv_calc.getFicInvAmt());
//                            } else {
//                                pstm.setDouble(6, 0);
//                            }
//                            pstm.setString(7, trs2.getString("CATEGORY"));
//                            pstm.addBatch();
//
//                        }
//                    } catch (Exception a) {
//                        a.printStackTrace();
//                    }
//                    trs2.next();
//                }
//                pstm.executeBatch();
//                pstmu.executeBatch();
//                Conn.commit();
//                Conn.setAutoCommit(true);
//            }
            trs3 = data.getResult("SELECT ZONE,"
                    + "COALESCE(W1_TP,'') AS W1_TP,COALESCE(W1_AP,'') AS W1_AP,COALESCE(W1_TARGET,'') AS W1_TARGET,COALESCE(W1_ACTUAL,'') AS W1_ACTUAL,"
                    + "COALESCE(W2_TP,'') AS W2_TP,COALESCE(W2_AP,'') AS W2_AP,COALESCE(W2_TARGET,'') AS W2_TARGET,COALESCE(W2_ACTUAL,'') AS W2_ACTUAL,"
                    + "COALESCE(W3_TP,'') AS W3_TP,COALESCE(W3_AP,'') AS W3_AP,COALESCE(W3_TARGET,'') AS W3_TARGET,COALESCE(W3_ACTUAL,'') AS W3_ACTUAL,"
                    + "COALESCE(W4_TP,'') AS W4_TP,COALESCE(W4_AP,'') AS W4_AP,COALESCE(W4_TARGET,'') AS W4_TARGET,COALESCE(W4_ACTUAL,'') AS W4_ACTUAL,"
                    + "COALESCE(W5_TP,'') AS W5_TP,COALESCE(W5_AP,'') AS W5_AP,COALESCE(W5_TARGET,'') AS W5_TARGET,COALESCE(W5_ACTUAL,'') AS W5_ACTUAL,"
                    + "COALESCE(W6_TP,'') AS W6_TP,COALESCE(W6_AP,'') AS W6_AP,COALESCE(W6_TARGET,'') AS W6_TARGET,COALESCE(W6_ACTUAL,'') AS W6_ACTUAL,"
                    + "COALESCE(RFNC_TPIECE,'') AS RFNC_TPIECE,COALESCE(RFNC_TARGET,'') AS RFNC_TARGET,"
                    + "COALESCE(RFNC_APIECE,'') AS RFNC_APIECE,COALESCE(RFNC_ACTUAL,'') AS RFNC_ACTUAL "
                    + "FROM ("
                    + "SELECT TPR_INCHARGE AS ZONE,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-1' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W1_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-1' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W1_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-1' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W1_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-1' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W1_ACTUAL,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-2' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W2_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-2' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W2_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-2' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W2_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-2' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W2_ACTUAL,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-3' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W3_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-3' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W3_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-3' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W3_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-3' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W3_ACTUAL,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-4' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W4_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-4' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W4_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-4' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W4_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-4' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W4_ACTUAL,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-5' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W5_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-5' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W5_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-5' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W5_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-5' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W5_ACTUAL,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-6' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W6_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-6' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W6_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-6' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W6_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-6' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W6_ACTUAL,"
                    + "SUM(CASE WHEN TPR_CATEGORY='R_F_N_C' THEN TPR_PIECES_TARGET END) AS RFNC_TPIECE,"
                    + "SUM(CASE WHEN TPR_CATEGORY='R_F_N_C' THEN TPR_TARGET END)/100000 AS RFNC_TARGET,"
                    + "SUM(CASE WHEN TPR_CATEGORY='R_F_N_C' THEN TPR_PIECES_ACTUAL END) AS RFNC_APIECE,"
                    + "SUM(CASE WHEN TPR_CATEGORY='R_F_N_C' THEN TPR_ACTUAL END)/100000 AS RFNC_ACTUAL "
                    + "FROM PRODUCTION.TMP_PAYMENT_RECEIVE  "
                    + "WHERE TPR_CATEGORY='PLANNED' OR TPR_CATEGORY='R_F_N_C'  "
                    + "GROUP BY TPR_INCHARGE "
                    + "UNION ALL SELECT 'TOTAL',"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-1' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W1_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-1' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W1_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-1' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W1_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-1' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W1_ACTUAL,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-2' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W2_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-2' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W2_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-2' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W2_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-2' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W2_ACTUAL,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-3' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W3_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-3' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W3_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-3' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W3_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-3' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W3_ACTUAL,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-4' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W4_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-4' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W4_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-4' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W4_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-4' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W4_ACTUAL,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-5' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W5_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-5' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W5_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-5' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W5_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-5' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W5_ACTUAL,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-6' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W6_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-6' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W6_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-6' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W6_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-6' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W6_ACTUAL,"
                    + "SUM(CASE WHEN TPR_CATEGORY='R_F_N_C' THEN TPR_PIECES_TARGET END) AS RFNC_TPIECE,"
                    + "SUM(CASE WHEN TPR_CATEGORY='R_F_N_C' THEN TPR_TARGET END)/100000 AS RFNC_TARGET,"
                    + "SUM(CASE WHEN TPR_CATEGORY='R_F_N_C' THEN TPR_PIECES_ACTUAL END) AS RFNC_APIECE,"
                    + "SUM(CASE WHEN TPR_CATEGORY='R_F_N_C' THEN TPR_ACTUAL END)/100000 AS RFNC_ACTUAL "
                    + " FROM PRODUCTION.TMP_PAYMENT_RECEIVE "
                    + "WHERE TPR_CATEGORY='PLANNED' OR TPR_CATEGORY='R_F_N_C' ) AS D");

            //Payment Summary Header
            DataModel1 = new EITLTableModel();

            table1.removeAll();
            table1.setModel(DataModel1);
            table1.setAutoResizeMode(table1.AUTO_RESIZE_OFF);

            //Set the table Readonly
            DataModel1.TableReadOnly(true);
            DataModel1.addColumn("Zone");
            int mnofwk = 0;
            trs1.first(); //Week Table
            while (!trs1.isAfterLast()) {
                mnofwk++;
                DataModel1.addColumn("Week");
                DataModel1.addColumn(mnofwk);
                DataModel1.addColumn(trs1.getString("S_DATE"));
                DataModel1.addColumn(trs1.getString("E_DATE"));
                trs1.next();
            }

            //DataModel1.addColumn("Ready Felt Not Considered");
            DataModel1.addColumn("Week Total");
            DataModel1.addColumn("Week Total");
            DataModel1.addColumn("Week Total");
            DataModel1.addColumn("Week Total");
            DataModel1.addColumn("Commited but Unschedule ");
            DataModel1.addColumn("Commited but Unschedule ");
            DataModel1.addColumn("Commited but Unschedule ");
            DataModel1.addColumn("Commited but Unschedule ");
            DataModel1.addColumn("Grand Total");
            DataModel1.addColumn("Grand Total");
            DataModel1.addColumn("Grand Total");
            DataModel1.addColumn("Grand Total");
            DataModel1.addColumn("Time");
            Object[] rowData = new Object[100];

            rowData = new Object[100];
            rowData[0] = "";
            int j = 1;
            for (int i = 1; i <= mnofwk; i++) {
                rowData[j] = "Target Pieces";
                j++;
                rowData[j] = "Target Sales [In Lac]";
                j++;
                rowData[j] = "Actual Pieces";
                j++;
                rowData[j] = "Actual Sales [In Lac]";
                j++;
            }
            rowData[j] = "Target Pieces";
            j++;
            rowData[j] = "Target Sales [In Lac]";
            j++;
            rowData[j] = "Actual Pieces";
            j++;
            rowData[j] = "Actual Sales [In Lac]";
            j++;
            rowData[j] = "Target Pieces";
            j++;
            rowData[j] = "Total Value";
            j++;
            rowData[j] = "Actual Pieces";
            j++;
            rowData[j] = "Actual Sales [In Lac]";
            j++;

            rowData[j] = "Target Pieces";
            j++;
            rowData[j] = "Target Sales [In Lac]";
            j++;
            rowData[j] = "Actual Pieces";
            j++;
            rowData[j] = "Actual Sales [In Lac]";
            j++;

            DataModel1.addRow(rowData);

            //Payment Summary Data
            trs3.first();

            while (!trs3.isAfterLast()) {
                j = 1;
                double tt = 0, ta = 0, ttp = 0, tap = 0;
                rowData = new Object[100];
                rowData[0] = trs3.getString("ZONE");
                for (int i = 1; i <= mnofwk; i++) {
                    rowData[j] = df.format(trs3.getDouble("W" + i + "_TP"));
                    ttp = ttp + Double.parseDouble(rowData[j].toString());
                    j++;
                    rowData[j] = df.format(trs3.getDouble("W" + i + "_TARGET"));
                    tt = tt + Double.parseDouble(rowData[j].toString());
                    j++;
                    rowData[j] = df.format(trs3.getDouble("W" + i + "_AP"));
                    tap = tap + Double.parseDouble(rowData[j].toString());
                    j++;
                    rowData[j] = df.format(trs3.getDouble("W" + i + "_ACTUAL"));
                    ta = ta + Double.parseDouble(rowData[j].toString());
                    j++;
                }

                rowData[j] = (ttp);
                j++;
                rowData[j] = df.format(tt);
                j++;
                rowData[j] = (tap);
                j++;
                rowData[j] = df.format(ta);
                j++;

                rowData[j] = trs3.getString("RFNC_TPIECE");
                ttp = ttp + Double.parseDouble(rowData[j].toString());
                j++;
                rowData[j] = df.format(trs3.getDouble("RFNC_TARGET"));
                tt = tt + Double.parseDouble(rowData[j].toString());
                j++;
                rowData[j] = trs3.getString("RFNC_APIECE");
                tap = tap + Double.parseDouble(rowData[j].toString());
                j++;
                rowData[j] = df.format(trs3.getDouble("RFNC_ACTUAL"));
                ta = ta + Double.parseDouble(rowData[j].toString());
                j++;

                rowData[j] = (ttp);
                j++;
                rowData[j] = df.format(tt);
                j++;
                rowData[j] = (tap);
                j++;
                rowData[j] = df.format(ta);
                j++;
                rowData[j] = mtm;

                DataModel1.addRow(rowData);
                trs3.next();
            }
            final TableColumnModel columnModel = table1.getColumnModel();
            for (int column = 0; column < table1.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < table1.getRowCount(); row++) {
                    TableCellRenderer renderer = table1.getCellRenderer(row, column);
                    Component comp = table1.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
            DataModel1.TableReadOnly(true);
            //Payment Summary Data End

            trs4 = data.getResult("SELECT ZONE,COALESCE(P_PIECES,'') AS P_PIECES,COALESCE(P_VALUE,'') AS P_VALUE,"
                    + "COALESCE(RFNC_PIECES,'') AS RFNC_PIECES,COALESCE(RFNC_VALUE,'') AS RFNC_VALUE,"
                    + "COALESCE(NS_PIECES,'') AS NS_PIECES,COALESCE(NS_VALUE,'') AS NS_VALUE,"
                    + "COALESCE(T_PIECES,'') AS T_PIECES,COALESCE(T_VALUE,'') AS T_VALUE "
                    + " FROM (SELECT TPR_INCHARGE AS ZONE,"
                    + "SUM(CASE WHEN TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS P_PIECES,"
                    + "SUM(CASE WHEN TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS P_VALUE,"
                    + "SUM(CASE WHEN TPR_CATEGORY='R_F_N_C' THEN TPR_PIECES_ACTUAL END) AS RFNC_PIECES,"
                    + "SUM(CASE WHEN TPR_CATEGORY='R_F_N_C' THEN TPR_ACTUAL END)/100000 AS RFNC_VALUE,"
                    + "SUM(CASE WHEN TPR_CATEGORY='N_C_S_M' THEN TPR_PIECES_ACTUAL END) AS NS_PIECES,"
                    + "SUM(CASE WHEN TPR_CATEGORY='N_C_S_M' THEN TPR_ACTUAL END)/100000 AS NS_VALUE,"
                    + "SUM(TPR_PIECES_ACTUAL) AS T_PIECES,"
                    + "SUM(TPR_ACTUAL)/100000 AS T_VALUE "
                    + " FROM PRODUCTION.TMP_PAYMENT_RECEIVE  "
                    + "GROUP BY TPR_INCHARGE "
                    + "UNION ALL "
                    + "SELECT 'TOTAL',"
                    + "SUM(CASE WHEN TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS P_PIECES,"
                    + "SUM(CASE WHEN TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS P_VALUE,"
                    + "SUM(CASE WHEN TPR_CATEGORY='R_F_N_C' THEN TPR_PIECES_ACTUAL END) AS RFNC_PIECES,"
                    + "SUM(CASE WHEN TPR_CATEGORY='R_F_N_C' THEN TPR_ACTUAL END)/100000 AS RFNC_VALUE,"
                    + "SUM(CASE WHEN TPR_CATEGORY='N_C_S_M' THEN TPR_PIECES_ACTUAL END) AS NS_PIECES,"
                    + "SUM(CASE WHEN TPR_CATEGORY='N_C_S_M' THEN TPR_ACTUAL END)/100000 AS NS_VALUE,"
                    + "SUM(TPR_PIECES_ACTUAL) AS T_PIECES,"
                    + "SUM(TPR_ACTUAL)/100000 AS T_VALUE "
                    + " FROM PRODUCTION.TMP_PAYMENT_RECEIVE  "
                    + ") AS D");

//planned & unplanned Summary
            DataModel2 = new EITLTableModel();

            table2.removeAll();
            table2.setModel(DataModel2);
            table2.setAutoResizeMode(table2.AUTO_RESIZE_OFF);

            //Set the table Readonly
            DataModel2.TableReadOnly(true);
            DataModel2.addColumn("Zone");
            DataModel2.addColumn("Planned_Pieces");
            DataModel2.addColumn("Planned_Value [In Lac]");
            DataModel2.addColumn("Commited but Unschedule Pieces");
            DataModel2.addColumn("Commited but Unschedule Value [In Lac]");
            DataModel2.addColumn("Unplanned Pieces");
            DataModel2.addColumn("Unplanned Value [In Lac]");
            DataModel2.addColumn("Total_Pieces");
            DataModel2.addColumn("Total_Value [In Lac]");
            DataModel2.addColumn("Time");

            trs4.first();
            while (!trs4.isAfterLast()) {
                rowData = new Object[100];
                rowData[0] = trs4.getString("ZONE");
                rowData[1] = trs4.getString("P_PIECES");
                rowData[2] = df.format(trs4.getDouble("P_VALUE"));
                rowData[3] = trs4.getString("RFNC_PIECES");
                rowData[4] = df.format(trs4.getDouble("RFNC_VALUE"));
                rowData[5] = trs4.getString("NS_PIECES");
                rowData[6] = df.format(trs4.getDouble("NS_VALUE"));
                rowData[7] = trs4.getString("T_PIECES");
                rowData[8] = df.format(trs4.getDouble("T_VALUE"));
                rowData[9] = mtm;
                DataModel2.addRow(rowData);
                trs4.next();
            }
            final TableColumnModel columnModel2 = table2.getColumnModel();
            for (int column = 0; column < table2.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < table2.getRowCount(); row++) {
                    TableCellRenderer renderer = table2.getCellRenderer(row, column);
                    Component comp = table2.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel2.getColumn(column).setPreferredWidth(width);
            }
            DataModel2.TableReadOnly(true);
            //planned & unplanned End

            trs5 = data.getResult("SELECT ZONE,PARTY_CODE,PARTY_NAME,"
                    + "COALESCE(W1_TP,'') AS W1_TP,COALESCE(W1_AP,'') AS W1_AP,COALESCE(W1_TARGET,'') AS W1_TARGET,COALESCE(W1_ACTUAL,'') AS W1_ACTUAL,"
                    + "COALESCE(W2_TP,'') AS W2_TP,COALESCE(W2_AP,'') AS W2_AP,COALESCE(W2_TARGET,'') AS W2_TARGET,COALESCE(W2_ACTUAL,'') AS W2_ACTUAL,"
                    + "COALESCE(W3_TP,'') AS W3_TP,COALESCE(W3_AP,'') AS W3_AP,COALESCE(W3_TARGET,'') AS W3_TARGET,COALESCE(W3_ACTUAL,'') AS W3_ACTUAL,"
                    + "COALESCE(W4_TP,'') AS W4_TP,COALESCE(W4_AP,'') AS W4_AP,COALESCE(W4_TARGET,'') AS W4_TARGET,COALESCE(W4_ACTUAL,'') AS W4_ACTUAL,"
                    + "COALESCE(W5_TP,'') AS W5_TP,COALESCE(W5_AP,'') AS W5_AP,COALESCE(W5_TARGET,'') AS W5_TARGET,COALESCE(W5_ACTUAL,'') AS W5_ACTUAL,"
                    + "COALESCE(W6_TP,'') AS W6_TP,COALESCE(W6_AP,'') AS W6_AP,COALESCE(W6_TARGET,'') AS W6_TARGET,COALESCE(W6_ACTUAL,'') AS W6_ACTUAL,"
                    + "COALESCE(RFNC_TPIECE,'') AS RFNC_TPIECE,COALESCE(RFNC_TARGET,'') AS RFNC_TARGET,"
                    + "COALESCE(RFNC_APIECE,'') AS RFNC_APIECE,COALESCE(RFNC_ACTUAL,'') AS RFNC_ACTUAL "
                    + "FROM ("
                    + "SELECT TPR_INCHARGE AS ZONE,TPR_PARTY_CODE AS PARTY_CODE,PARTY_NAME,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-1' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W1_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-1' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W1_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-1' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W1_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-1' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W1_ACTUAL,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-2' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W2_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-2' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W2_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-2' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W2_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-2' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W2_ACTUAL,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-3' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W3_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-3' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W3_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-3' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W3_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-3' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W3_ACTUAL,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-4' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W4_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-4' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W4_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-4' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W4_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-4' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W4_ACTUAL,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-5' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W5_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-5' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W5_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-5' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W5_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-5' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W5_ACTUAL,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-6' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W6_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-6' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W6_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-6' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W6_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-6' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W6_ACTUAL,"
                    + "SUM(CASE WHEN TPR_CATEGORY='R_F_N_C' THEN TPR_PIECES_TARGET END) AS RFNC_TPIECE,"
                    + "SUM(CASE WHEN TPR_CATEGORY='R_F_N_C' THEN TPR_TARGET END)/100000 AS RFNC_TARGET,"
                    + "SUM(CASE WHEN TPR_CATEGORY='R_F_N_C' THEN TPR_PIECES_ACTUAL END) AS RFNC_APIECE,"
                    + "SUM(CASE WHEN TPR_CATEGORY='R_F_N_C' THEN TPR_ACTUAL END)/100000 AS RFNC_ACTUAL "
                    + "FROM PRODUCTION.TMP_PAYMENT_RECEIVE  "
                    + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER "
                    + "ON TPR_PARTY_CODE=PARTY_CODE "
                    + "WHERE TPR_CATEGORY='PLANNED' OR TPR_CATEGORY='R_F_N_C'  "
                    + "GROUP BY TPR_INCHARGE,TPR_PARTY_CODE "
                    + "UNION ALL SELECT 'TOTAL','','',"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-1' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W1_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-1' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W1_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-1' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W1_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-1' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W1_ACTUAL,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-2' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W2_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-2' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W2_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-2' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W2_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-2' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W2_ACTUAL,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-3' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W3_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-3' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W3_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-3' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W3_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-3' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W3_ACTUAL,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-4' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W4_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-4' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W4_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-4' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W4_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-4' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W4_ACTUAL,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-5' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W5_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-5' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W5_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-5' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W5_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-5' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W5_ACTUAL,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-6' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_TARGET END) AS W6_TP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-6' AND TPR_CATEGORY='PLANNED' THEN TPR_TARGET END)/100000 AS W6_TARGET,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-6' AND TPR_CATEGORY='PLANNED' THEN TPR_PIECES_ACTUAL END) AS W6_AP,"
                    + "SUM(CASE WHEN TPR_WDAY='WEEK-6' AND TPR_CATEGORY='PLANNED' THEN TPR_ACTUAL END)/100000 AS W6_ACTUAL,"
                    + "SUM(CASE WHEN TPR_CATEGORY='R_F_N_C' THEN TPR_PIECES_TARGET END) AS RFNC_TPIECE,"
                    + "SUM(CASE WHEN TPR_CATEGORY='R_F_N_C' THEN TPR_TARGET END)/100000 AS RFNC_TARGET,"
                    + "SUM(CASE WHEN TPR_CATEGORY='R_F_N_C' THEN TPR_PIECES_ACTUAL END) AS RFNC_APIECE,"
                    + "SUM(CASE WHEN TPR_CATEGORY='R_F_N_C' THEN TPR_ACTUAL END)/100000 AS RFNC_ACTUAL "
                    + " FROM PRODUCTION.TMP_PAYMENT_RECEIVE "
                    + "WHERE TPR_CATEGORY='PLANNED' OR TPR_CATEGORY='R_F_N_C' ) AS D");

            //Payment Summary Detail
            DataModel3 = new EITLTableModel();

            table3.removeAll();
            table3.setModel(DataModel3);
            table3.setAutoResizeMode(table3.AUTO_RESIZE_OFF);

            //Set the table Readonly
            DataModel3.TableReadOnly(true);
            DataModel3.addColumn("Zone");
            DataModel3.addColumn("Party Code");
            DataModel3.addColumn("Name");
            mnofwk = 0;
            trs1.first(); //Week Table

            while (!trs1.isAfterLast()) {
                mnofwk++;
                DataModel3.addColumn("Week");
                DataModel3.addColumn(mnofwk);
                DataModel3.addColumn(trs1.getString("S_DATE"));
                DataModel3.addColumn(trs1.getString("E_DATE"));
                trs1.next();
            }
//            DataModel3.addColumn("Commited but Unschedule ");
//            DataModel3.addColumn("In " + cmbMonthYear.getSelectedItem().toString());

            DataModel3.addColumn("Total");
            DataModel3.addColumn("Total");
            DataModel3.addColumn("Total");
            DataModel3.addColumn("Total");
            DataModel3.addColumn("Time");

            rowData = new Object[100];
            rowData[0] = "";
            rowData[1] = "";
            rowData[2] = "";
            j = 3;
            for (int i = 1; i <= mnofwk + 1; i++) {
                rowData[j] = "Target Pieces";
                j++;
                rowData[j] = "Target Sales [In Lac]";
                j++;
                rowData[j] = "Actual Pieces";
                j++;
                rowData[j] = "Actual Sales [In Lac]";
                j++;
            }

            DataModel3.addRow(rowData);

            //Payment Summary Data
            trs5.first();

            while (!trs5.isAfterLast()) {
                j = 3;
                double tt = 0, ta = 0, ttp = 0, tap = 0;
                rowData = new Object[100];
                rowData[0] = trs5.getString("ZONE");
                rowData[1] = trs5.getString("PARTY_CODE");
                rowData[2] = trs5.getString("PARTY_NAME");

                for (int i = 1; i <= mnofwk; i++) {
                    rowData[j] = df.format(trs5.getDouble("W" + i + "_TP"));
                    ttp = ttp + Double.parseDouble(rowData[j].toString());
                    j++;
                    rowData[j] = df.format(trs5.getDouble("W" + i + "_TARGET"));
                    tt = tt + Double.parseDouble(rowData[j].toString());
                    j++;
                    rowData[j] = df.format(trs5.getDouble("W" + i + "_AP"));
                    tap = tap + Double.parseDouble(rowData[j].toString());
                    j++;
                    rowData[j] = df.format(trs5.getDouble("W" + i + "_ACTUAL"));
                    ta = ta + Double.parseDouble(rowData[j].toString());
                    j++;
                }
                rowData[j] = (ttp);
                j++;
                rowData[j] = df.format(tt);
                j++;
                rowData[j] = (tap);
                j++;
                rowData[j] = df.format(ta);
                j++;
                rowData[j] = mtm;
                DataModel3.addRow(rowData);
                trs5.next();
            }
            final TableColumnModel columnModel3 = table3.getColumnModel();
            for (int column = 0; column < table3.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < table3.getRowCount(); row++) {
                    TableCellRenderer renderer = table3.getCellRenderer(row, column);
                    Component comp = table3.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel3.getColumn(column).setPreferredWidth(width);
            }
            DataModel3.TableReadOnly(true);
            //Payment Summary Detail Data End

            trs6 = data.getResult("SELECT TPR_INCHARGE,TPR_PARTY_CODE,PARTY_NAME,TPR_PIECES_TARGET,TPR_PIECES_ACTUAL,TPR_TARGET/100000 AS TPR_TARGET,TPR_ACTUAL/100000 AS TPR_ACTUAL FROM PRODUCTION.TMP_PAYMENT_RECEIVE "
                    + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER "
                    + "ON TPR_PARTY_CODE=PARTY_CODE  "
                    + "WHERE TPR_CATEGORY='R_F_N_C' "
                    + "UNION ALL "
                    + "SELECT 'TOTAL','','',SUM(TPR_PIECES_TARGET),SUM(TPR_PIECES_ACTUAL),SUM(TPR_TARGET)/100000 AS TPR_TARGET,SUM(TPR_ACTUAL)/100000 AS TPR_ACTUAL FROM PRODUCTION.TMP_PAYMENT_RECEIVE "
                    + "WHERE TPR_CATEGORY='R_F_N_C' "
                    + "ORDER BY TPR_INCHARGE");
            //ReadyFeltNotConsider Detail
            DataModel4 = new EITLTableModel();

            table4.removeAll();
            table4.setModel(DataModel4);
            table4.setAutoResizeMode(table4.AUTO_RESIZE_OFF);

            //Set the table Readonly
            DataModel4.TableReadOnly(true);
            DataModel4.addColumn("Zone");
            DataModel4.addColumn("Party Code");
            DataModel4.addColumn("Name");
            DataModel4.addColumn("Target Pieces");
            DataModel4.addColumn("Total Value [In Lac]");
            DataModel4.addColumn("Actual Pieces");
            DataModel4.addColumn("Actual Sales [In Lac]");
            DataModel4.addColumn("Time");

            trs6.first();
            while (!trs6.isAfterLast()) {
                rowData = new Object[100];
                rowData[0] = trs6.getString("TPR_INCHARGE");
                rowData[1] = trs6.getString("TPR_PARTY_CODE");
                rowData[2] = trs6.getString("PARTY_NAME");
                rowData[3] = trs6.getString("TPR_PIECES_TARGET");
                rowData[4] = df.format(trs6.getDouble("TPR_TARGET"));
                rowData[5] = df.format(trs6.getDouble("TPR_PIECES_ACTUAL"));
                rowData[6] = df.format(trs6.getDouble("TPR_ACTUAL"));
                rowData[7] = mtm;
                DataModel4.addRow(rowData);
                trs6.next();
            }
            final TableColumnModel columnModel4 = table4.getColumnModel();
            for (int column = 0; column < table4.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < table4.getRowCount(); row++) {
                    TableCellRenderer renderer = table4.getCellRenderer(row, column);
                    Component comp = table4.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel4.getColumn(column).setPreferredWidth(width);
            }
            DataModel3.TableReadOnly(true);
            //ReadyFeltNotConsider Data End

            trs7 = data.getResult("SELECT TPR_INCHARGE,TPR_PARTY_CODE,PARTY_NAME,TPR_PIECES_TARGET,TPR_ACTUAL/100000 AS TPR_ACTUAL FROM PRODUCTION.TMP_PAYMENT_RECEIVE "
                    + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER "
                    + "ON TPR_PARTY_CODE=PARTY_CODE  "
                    + "WHERE TPR_CATEGORY='N_C_S_M' "
                    + "UNION ALL "
                    + "SELECT 'TOTAL','','',SUM(TPR_PIECES_TARGET),SUM(TPR_ACTUAL)/100000 FROM PRODUCTION.TMP_PAYMENT_RECEIVE "
                    + "WHERE TPR_CATEGORY='N_C_S_M' "
                    + "ORDER BY TPR_INCHARGE");
            
            //Unplanned Detail
            DataModel5 = new EITLTableModel();

            table5.removeAll();
            table5.setModel(DataModel5);
            table5.setAutoResizeMode(table4.AUTO_RESIZE_OFF);

            //Set the table Readonly
            DataModel5.TableReadOnly(true);
            DataModel5.addColumn("Zone");
            DataModel5.addColumn("Party Code");
            DataModel5.addColumn("Name");
            DataModel5.addColumn("Nos.");
            DataModel5.addColumn("Value [In Lac]");
            DataModel5.addColumn("Time");

            trs7.first();
            while (!trs7.isAfterLast()) {
                rowData = new Object[100];
                rowData[0] = trs7.getString("TPR_INCHARGE");
                rowData[1] = trs7.getString("TPR_PARTY_CODE");
                rowData[2] = trs7.getString("PARTY_NAME");
                rowData[3] = trs7.getString("TPR_PIECES_TARGET");
                rowData[4] = df.format(trs7.getDouble("TPR_ACTUAL"));
                rowData[5] = mtm;
                DataModel5.addRow(rowData);
                trs7.next();
            }
            final TableColumnModel columnModel5 = table5.getColumnModel();
            for (int column = 0; column < table5.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < table5.getRowCount(); row++) {
                    TableCellRenderer renderer = table5.getCellRenderer(row, column);
                    Component comp = table5.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel5.getColumn(column).setPreferredWidth(width);
            }
            DataModel5.TableReadOnly(true);
            //ReadyFeltNotConsider Data End

            sql = "SELECT PR_PARTY_CODE,PARTY_NAME,PR_PIECE_NO,PR_MACHINE_NO,PR_POSITION_NO,POSITION_DESC,PR_BILL_PRODUCT_CODE,PR_GROUP,"
                    + "PR_BILL_LENGTH,PR_BILL_WIDTH,PR_BILL_GSM,PR_BILL_WEIGHT,PR_BILL_SQMTR,PR_GROUP,PR_PRODUCT_CODE,INCHARGE_NAME,"
                    + "DATE_FORMAT(PR_FNSG_DATE,'%d/%m/%Y') AS FINISHING_DATE,DATE_FORMAT(PR_EXP_PAY_CHQRC_DATE,'%d/%m/%Y') AS EXP_DATE "
                    + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + "LEFT JOIN PRODUCTION.FELT_INCHARGE ON PR_INCHARGE=INCHARGE_CD "
                    + "LEFT JOIN (SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS PM "
                    + "ON PR_PARTY_CODE=PARTY_CODE "
                    + "LEFT JOIN PRODUCTION.FELT_MACHINE_POSITION_MST ON PR_POSITION_NO=POSITION_NO "
                    + "WHERE PR_EXP_PAY_CHQRC_DATE<'" + fdt + "' AND COALESCE(PR_EXP_PAY_CHQRC_DATE,'0000-00-00')!='0000-00-00' and COALESCE(PR_INVOICE_DATE,'0000-00-00')='0000-00-00'  ";

            if (!cmbZone.getSelectedItem().equals("ALL")) {

                sql = sql + " AND PR_INCHARGE = " + data.getStringValueFromDB("SELECT INCHARGE_CD FROM PRODUCTION.FELT_INCHARGE where INCHARGE_NAME='" + cmbZone.getSelectedItem() + "'");
            }
            if (!txtPartyCode.getText().equals("")) {

                sql = sql + " AND PR_PARTY_CODE = " + txtPartyCode.getText() + " ";
            }
            sql = sql + "  ORDER BY PR_PARTY_CODE";

//            trs8 = data.getResult(sql);
//
//            
//
//            //Planned But Not Invoiced
//            trs8.first();
//            if (trs8.getRow() > 0) {
//                DataModel6 = new EITLTableModel();
//
//                table6.removeAll();
//                table6.setModel(DataModel6);
//                table6.setAutoResizeMode(table4.AUTO_RESIZE_OFF);
//
//                //Set the table Readonly
//                DataModel6.TableReadOnly(true);
//                DataModel6.addColumn("Party Code");
//                DataModel6.addColumn("Name");
//                DataModel6.addColumn("Piece No");
//                DataModel6.addColumn("Machine");
//                DataModel6.addColumn("Position");
//                DataModel6.addColumn("Length");
//                DataModel6.addColumn("Width");
//                DataModel6.addColumn("GSM");
//                DataModel6.addColumn("SQMTR");
//                DataModel6.addColumn("Group");
//                DataModel6.addColumn("Product Code");
//                DataModel6.addColumn("Amount");
//                DataModel6.addColumn("Zone");
//                DataModel6.addColumn("Finishing Date");
//                DataModel6.addColumn("Expected Payment Date");
//                DataModel6.addColumn("Time");
//
//                while (!trs8.isAfterLast()) {
//                    FeltInvCalc inv_calc;
//                    try {
//                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
//                                trs8.getString("PR_PIECE_NO"),
//                                trs8.getString("PR_BILL_PRODUCT_CODE"),
//                                trs8.getString("PR_PARTY_CODE"),
//                                Float.parseFloat(trs8.getString("PR_BILL_LENGTH")),
//                                Float.parseFloat(trs8.getString("PR_BILL_WIDTH")),
//                                Float.parseFloat(trs8.getString("PR_BILL_WEIGHT")),
//                                Float.parseFloat(trs8.getString("PR_BILL_SQMTR")),
//                                EITLERPGLOBAL.getCurrentDateDB());
//
//                        rowData = new Object[100];
//                        rowData[0] = trs8.getString("PR_PARTY_CODE");
//                        rowData[1] = trs8.getString("PARTY_NAME");
//                        rowData[2] = trs8.getString("PR_PIECE_NO");
//                        rowData[3] = trs8.getString("PR_MACHINE_NO");
//                        rowData[4] = trs8.getString("POSITION_DESC");
//                        rowData[5] = df.format(trs8.getDouble("PR_BILL_LENGTH"));
//                        rowData[6] = df.format(trs8.getDouble("PR_BILL_WIDTH"));
//                        rowData[7] = df.format(trs8.getDouble("PR_BILL_GSM"));
//                        rowData[8] = df.format(trs8.getDouble("PR_BILL_SQMTR"));
//                        rowData[9] = trs8.getString("PR_GROUP");
//                        rowData[10] = trs8.getString("PR_PRODUCT_CODE");
//                        rowData[11] = df.format(inv_calc.getFicInvAmt());
//                        rowData[12] = trs8.getString("INCHARGE_NAME");
//                        rowData[13] = trs8.getString("FINISHING_DATE");
//                        rowData[14] = trs8.getString("EXP_DATE");
//                        rowData[15] = mtm;
//                        DataModel6.addRow(rowData);
//                    } catch (Exception a) {
//                        a.printStackTrace();
//                    }
//
//                    trs8.next();
//                }
//                final TableColumnModel columnModel6 = table6.getColumnModel();
//                for (int column = 0; column < table6.getColumnCount(); column++) {
//                    int width = 100; // Min width
//                    for (int row = 0; row < table6.getRowCount(); row++) {
//                        TableCellRenderer renderer = table6.getCellRenderer(row, column);
//                        Component comp = table6.prepareRenderer(renderer, row, column);
//                        width = Math.max(comp.getPreferredSize().width + 1, width);
//                    }
//                    if (width > 300) {
//                        width = 300;
//                    }
//                    columnModel6.getColumn(column).setPreferredWidth(width);
//                }
//                DataModel5.TableReadOnly(true);
//            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
