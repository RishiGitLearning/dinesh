/*
 * frmFeltlocation.java
 *
 * Created on March 12, 2013, 3:10 PM
 */
package EITLERP.FeltSales.LocationAssignment;

/**
 *
 * @author RAJPALSINH JADEJA
 */
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.util.HashMap;
import EITLERP.*;
import java.net.URL;
import EITLERP.data;
import EITLERP.LOV;
import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.Loader;
import EITLERP.AppletFrame;
import EITLERP.FeltSales.common.JavaMail;
import EITLERP.frmPendingApprovals;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.Production.FeltUser;
import java.sql.ResultSet;
import EITLERP.FeltSales.LocationAssignment.PKGLOV;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;

public class frmFeltLocationAssignment extends javax.swing.JApplet {

    private int EditMode = 0;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromUserId = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;
    public int DeptID = EITLERPGLOBAL.gUserDeptID;
    public String finalapproved = "";

    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    private boolean DoNotEvaluate = false;

    private clsFeltLocationAssignment ObjFeltOrderUpd;

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel cmbAmendReasonModel;

    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;

    public frmPendingApprovals frmPA;

    /**
     * Creates new form frmFeltPieceAmend
     */
    public void init() {
        System.gc();
        setSize(830, 590);
        initComponents();
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        DataModel = new EITLTableModel();
        ObjFeltOrderUpd = new clsFeltLocationAssignment();
        //    DeptID = 40 ;
        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
        GenerateAmendReasonCombo();
        FormatGrid();
        cmbAmendReason.setEnabled(false);
        jButton1.setEnabled(false);
        DataModel.SetReadOnly(0);
        if (ObjFeltOrderUpd.LoadData()) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, "Error occured while Loading Data. Error is " + ObjFeltOrderUpd.LastError, "DATA LOADING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu = new javax.swing.JPopupMenu();
        jMenuItemWarping = new javax.swing.JMenuItem();
        jMenuItemOrder = new javax.swing.JMenuItem();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        ItemShift1 = new javax.swing.JMenuItem();
        ItemShift2 = new javax.swing.JMenuItem();
        ItemShift3 = new javax.swing.JMenuItem();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtAmendDate = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdRemove = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cmdNextToTab1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtAmendID = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cmbAmendReason = new javax.swing.JComboBox();
        txtamendreasoncode = new javax.swing.JTextField();
        txtamendreasonname = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        txttotallength = new javax.swing.JTextField();
        txttotalweigth = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblLocationDesc = new javax.swing.JLabel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        jMenuItemWarping.setText("Warping Report");
        jMenuItemWarping.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemWarpingActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemWarping);

        jMenuItemOrder.setText("Order Detail");
        jMenuItemOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOrderActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemOrder);

        ItemShift1.setText("IN STOCK");
        ItemShift1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemShift1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(ItemShift1);

        ItemShift2.setText("BSR");
        ItemShift2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemShift2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(ItemShift2);

        ItemShift3.setText("Invoiced But Not Dispatched (F6)");
        ItemShift3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemShift3ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(ItemShift3);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 830, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText(" FELT LOCATION ASSIGNMENT ENTRY FORM - ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 830, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel3.setText("Doc Date");
        Tab1.add(jLabel3);
        jLabel3.setBounds(10, 12, 130, 20);

        txtAmendDate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtAmendDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtAmendDate.setEnabled(false);
        txtAmendDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtAmendDateFocusGained(evt);
            }
        });
        Tab1.add(txtAmendDate);
        txtAmendDate.setBounds(140, 10, 102, 30);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        Table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TableFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TableFocusLost(evt);
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(11, 80, 760, 280);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setToolTipText("Remove Selected Row");
        cmdRemove.setEnabled(false);
        cmdRemove.setNextFocusableComponent(cmdNextToTab1);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        Tab1.add(cmdRemove);
        cmdRemove.setBounds(575, 365, 90, 30);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel3);
        jPanel3.setBounds(6, 70, 770, 6);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.setNextFocusableComponent(cmdRemove);
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(680, 365, 90, 30);

        jLabel5.setText("Doc No");
        Tab1.add(jLabel5);
        jLabel5.setBounds(10, 42, 110, 20);

        txtAmendID.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtAmendID.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtAmendID.setEnabled(false);
        Tab1.add(txtAmendID);
        txtAmendID.setBounds(140, 40, 102, 30);

        lblRevNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(260, 10, 20, 18);

        jLabel12.setText("Location Id");
        Tab1.add(jLabel12);
        jLabel12.setBounds(280, 40, 90, 30);

        cmbAmendReason.setBackground(new java.awt.Color(255, 255, 255));
        cmbAmendReason.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cmbAmendReason.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAmendReasonItemStateChanged(evt);
            }
        });
        cmbAmendReason.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAmendReasonActionPerformed(evt);
            }
        });
        Tab1.add(cmbAmendReason);
        cmbAmendReason.setBounds(360, 40, 110, 30);

        txtamendreasoncode.setEnabled(false);
        txtamendreasoncode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtamendreasoncodeActionPerformed(evt);
            }
        });
        Tab1.add(txtamendreasoncode);
        txtamendreasoncode.setBounds(310, 10, 69, 30);

        txtamendreasonname.setEnabled(false);
        Tab1.add(txtamendreasonname);
        txtamendreasonname.setBounds(390, 10, 160, 30);

        jButton1.setText("Insert Piece");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        Tab1.add(jButton1);
        jButton1.setBounds(640, 40, 130, 30);

        txttotallength.setEnabled(false);
        Tab1.add(txttotallength);
        txttotallength.setBounds(190, 370, 130, 37);

        txttotalweigth.setEnabled(false);
        Tab1.add(txttotalweigth);
        txttotalweigth.setBounds(430, 370, 120, 37);

        jLabel1.setText("Total Length");
        Tab1.add(jLabel1);
        jLabel1.setBounds(100, 370, 90, 20);

        jLabel2.setText("Total Weight");
        Tab1.add(jLabel2);
        jLabel2.setBounds(330, 370, 90, 20);
        Tab1.add(lblLocationDesc);
        lblLocationDesc.setBounds(490, 40, 120, 30);

        Tab.addTab("Location Details", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 23, 62, 20);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 20, 184, 37);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 62, 33, 20);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 60, 184, 34);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 97, 61, 20);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 95, 630, 37);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 130, 73, 20);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 24);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 130, 184, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 249, 50, 20);

        cmbSendTo.setEnabled(false);
        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 245, 184, 37);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 288, 60, 20);

        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 286, 630, 37);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.setNextFocusableComponent(cmdRemove);
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(500, 350, 102, 30);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(728, 94, 22, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.setNextFocusableComponent(cmdRemove);
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(620, 350, 102, 30);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 20);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 760, 150);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 191, 163, 20);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 210, 640, 180);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.setNextFocusableComponent(cmdRemove);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(662, 390, 110, 30);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(662, 240, 110, 34);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(662, 210, 110, 34);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(662, 270, 110, 34);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 790, 450);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(2, 520, 790, 22);
    }// </editor-fold>//GEN-END:initComponents

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            if (evt.getKeyCode() == 112) //F1 Key pressed
            {
                if (Table.getSelectedColumn() == 1) {
                    PKGLOV aList = new PKGLOV();

                    String strSQL = "SELECT null,A.PR_PIECE_NO,A.PR_PARTY_CODE,B.PARTY_NAME,A.PR_ORDER_DATE,A.PR_PIECE_STAGE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE A.PR_PIECE_STAGE='IN STOCK' AND (A.PR_PKG_DP_NO='' OR A.PR_PKG_DP_NO IS NULL) AND A.PR_PARTY_CODE=B.PARTY_CODE ORDER BY A.PR_ORDER_DATE";
                    aList.SQL = strSQL;
                    aList.ReturnCol = 1;
                    aList.ShowReturnCol = true;
                    aList.DefaultSearchOn = 1;

                    if (aList.ShowLOV()) {
                        if (Table.getCellEditor() != null) {
                            Table.getCellEditor().stopCellEditing();
                        }
                        Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), 1);
                    }
                }
            }

        }// TODO add your handling code here:
    }//GEN-LAST:event_TableKeyPressed

    private void TableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusGained
        ReasonResetReadonly();
    }//GEN-LAST:event_TableFocusGained

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased

    }//GEN-LAST:event_TableKeyReleased

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TableMouseClicked

    private void txtamendreasoncodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtamendreasoncodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtamendreasoncodeActionPerformed

    private void cmbAmendReasonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAmendReasonItemStateChanged
       // lblStatus.setText(Integer.toString(cmbAmendReason.getSelectedIndex()));
        int AmdReason = cmbAmendReason.getSelectedIndex();
        txtamendreasoncode.setText(Integer.toString(cmbAmendReason.getSelectedIndex()));
        txtamendreasonname.setText(cmbAmendReason.getSelectedItem().toString().substring(0, 1));
        ReasonResetReadonly();
        cmbAmendReason.setEnabled(false);
        String LocationDesc = data.getStringValueFromDB("SELECT LOCATION_DESC FROM PRODUCTION.FELT_WH_LOCATION_MST WHERE LOCATION_ID='" + txtamendreasonname.getText() + "'");
        lblLocationDesc.setText(LocationDesc);
    }//GEN-LAST:event_cmbAmendReasonItemStateChanged

    private void cmbAmendReasonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAmendReasonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbAmendReasonActionPerformed

    private void jMenuItemOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOrderActionPerformed

    }//GEN-LAST:event_jMenuItemOrderActionPerformed

    private void jMenuItemWarpingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemWarpingActionPerformed

    }//GEN-LAST:event_jMenuItemWarpingActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed

    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        try {
            URL reportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/Production/rptFeltWeaving.jsp?dbURL=" + EITLERPGLOBAL.DatabaseURL + "&PROD_DATE=" + EITLERPGLOBAL.formatDateDB(txtAmendDate.getText()));
            EITLERPGLOBAL.loginContext.showDocument(reportFile, "_blank");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, "File error " + e.getMessage(), "FILE ERROR", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4).toString());
            bigEdit.ShowEdit();
        } else {
            JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, "Select a row from Document Update History");
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjFeltOrderUpd.HistoryView = false;
        ObjFeltOrderUpd.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed

    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjFeltOrderUpd.ShowHistory(EITLERPGLOBAL.formatDateDB(txtAmendDate.getText()), txtAmendID.getText());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed

    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        txtAmendDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void txtAmendDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAmendDateFocusGained
        ShowMessage("Enter Updation Date");
    }//GEN-LAST:event_txtAmendDateFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        finalapproved = "NO";
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);

        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        finalapproved = "NO";
        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        finalapproved = "YES";
        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        finalapproved = "NO";
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(770, txtAmendID.getText())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjFeltOrderUpd.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(frmFeltLocationAssignment.this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        if (Table.getRowCount() > 0) {
            DataModel.removeRow(Table.getSelectedRow());
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void TableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusLost
        // TODO add your handling code here:
        ReasonResetReadonly();

    }//GEN-LAST:event_TableFocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ReasonResetReadonly();
        Connection Conn;
        Statement stmt;
        String sql;
        
        String Pices = "'',";
        
        //SELECT PIECE_NO FROM PRODUCTION.FELT_LOCATION_ASSIGNMENT where APPROVED=0 AND CANCELED=0
        boolean flag = false;
        for (int i = 0; i <= Table.getRowCount() - 1; i++) {
                String pieceNo = ((String) Table.getValueAt(i, 1)).trim().toUpperCase();
                if (!pieceNo.equals("")) {
                    
                    Pices = Pices + "'"+ pieceNo + "',";
                    
                }
        }
        if(Pices!="")
        {
            Pices = Pices.substring(0, Pices.length() - 1);
        }
        try {
            if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {//Only Process keys when in editing mode
                    
                    if(txtAmendID.getText().startsWith("LAB")) // BSR
                    {
                        PKGLOV_LAB aList = new PKGLOV_LAB();

                       // aList.SQL = "SELECT null,A.PR_PIECE_NO,A.PR_PARTY_CODE,B.PARTY_NAME,A.PR_ORDER_DATE,A.PR_PIECE_STAGE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE A.PR_PIECE_STAGE='IN STOCK' AND (A.PR_PKG_DP_NO='' OR A.PR_PKG_DP_NO IS NULL) AND A.PR_PARTY_CODE=B.PARTY_CODE ORDER BY A.PR_ORDER_DATE";

                        //aList.SQL = "SELECT null,A.PR_PIECE_NO,A.PR_PARTY_CODE,B.PARTY_NAME,A.PR_ORDER_DATE,A.PR_PIECE_STAGE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE A.PR_PIECE_STAGE='IN STOCK' AND (A.PR_PKG_DP_NO='' OR A.PR_PKG_DP_NO IS NULL) AND A.PR_PARTY_CODE=B.PARTY_CODE AND A.PR_PIECE_NO NOT IN (SELECT PIECE_NO FROM PRODUCTION.FELT_LOCATION_ASSIGNMENT WHERE CANCELED=0 AND DOC_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"'  AND DOC_DATE<='"+EITLERPGLOBAL.FinToDateDB+"') ORDER BY A.PR_ORDER_DATE";
                        aList.SQL = "SELECT null,A.PR_PIECE_NO,A.PR_PARTY_CODE,B.PARTY_NAME,A.PR_ORDER_DATE,A.PR_PIECE_STAGE,PR_BALE_NO,PR_PACKED_DATE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE A.PR_PIECE_STAGE='BSR' AND (A.PR_PKG_DP_NO!='' OR A.PR_PKG_DP_NO IS NOT NULL) AND A.PR_PARTY_CODE=B.PARTY_CODE AND A.PR_PIECE_NO NOT IN (SELECT PIECE_NO FROM PRODUCTION.FELT_LOCATION_ASSIGNMENT WHERE CANCELED=0 AND DOC_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"'  AND DOC_DATE<='"+EITLERPGLOBAL.FinToDateDB+"') AND A.PR_PIECE_NO NOT IN ("+Pices+") ORDER BY A.PR_ORDER_DATE ";
                        System.out.println("query = " + aList.SQL);
                        aList.ReturnCol = 1;
                        aList.SecondCol = 2; //to get Second Value
                        aList.ShowReturnCol = true;
                        aList.DefaultSearchOn = 2;
                        int k = 5;
                        if (aList.ShowLOV()) {

                            Conn = data.getConn();
                            stmt = Conn.createStatement();

                            sql = "SELECT A.PR_PIECE_NO,A.PR_PARTY_CODE,B.PARTY_NAME,A.PR_ORDER_DATE,A.PR_PRODUCT_CODE,A.PR_GROUP,A.PR_STYLE,A.PR_LENGTH,A.PR_WIDTH,A.PR_GSM,A.PR_THORITICAL_WEIGHT,A.PR_SQMTR,A.PR_BILL_LENGTH,A.PR_BILL_WIDTH,A.PR_BILL_GSM,A.PR_BILL_WEIGHT,A.PR_BILL_SQMTR,A.PR_BILL_PRODUCT_CODE,A.PR_PIECE_STAGE,C.INCHARGE_NAME FROM PRODUCTION.FELT_SALES_PIECE_REGISTER A,DINESHMILLS.D_SAL_PARTY_MASTER B,PRODUCTION.FELT_INCHARGE C WHERE A.PR_PARTY_CODE=B.PARTY_CODE AND B.INCHARGE_CD=C.INCHARGE_CD AND A.PR_PIECE_NO IN (" + aList.ReturnVal.toString() + ")";
                            
                            ResultSet rsData = stmt.executeQuery(sql);
                             System.out.println("query = " +sql);
                            rsData.first();
                            int i = 1;

                            double total_length=0;
                            double total_weigth=0;


                            while (!rsData.isAfterLast()) {
                                Object[] rowData = new Object[25];
                                rowData[0] = ""+(Table.getRowCount()+1);
                                rowData[1] = rsData.getString("PR_PIECE_NO");
                                rowData[2] = rsData.getString("PR_PARTY_CODE");
                                rowData[3] = rsData.getString("PARTY_NAME");
                                rowData[4] = EITLERPGLOBAL.formatDate(rsData.getString("PR_ORDER_DATE"));
                                rowData[5] = rsData.getString("PR_PRODUCT_CODE");
                                rowData[6] = rsData.getString("PR_GROUP");
                                rowData[7] = rsData.getString("PR_STYLE");
                                rowData[8] = rsData.getString("PR_LENGTH");
                                rowData[9] = rsData.getString("PR_WIDTH");
                                rowData[10] = rsData.getString("PR_GSM");
                                rowData[11] = rsData.getString("PR_THORITICAL_WEIGHT");
                                rowData[12] = rsData.getString("PR_SQMTR");
                                rowData[13] = rsData.getString("PR_BILL_LENGTH");

                                total_length = total_length + Double.parseDouble(rsData.getString("PR_BILL_LENGTH"));

                                rowData[14] = rsData.getString("PR_BILL_WIDTH");
                                rowData[15] = rsData.getString("PR_BILL_GSM");
                                rowData[16] = rsData.getString("PR_BILL_WEIGHT");

                                total_weigth = total_weigth + EITLERPGLOBAL.round(Double.parseDouble(rsData.getString("PR_BILL_WEIGHT")),2);

                                rowData[17] = rsData.getString("PR_BILL_SQMTR");
                                rowData[18] = rsData.getString("PR_BILL_PRODUCT_CODE");
                                rowData[19] = rsData.getString("PR_PIECE_STAGE");
                                rowData[20] = rsData.getString("INCHARGE_NAME");
                                i++;

                                DataModel.addRow(rowData);
                                rsData.next();
                            }


                            txttotallength.setText(""+total_length);
                            txttotalweigth.setText(""+total_weigth);
                        }
                    }
                    else if(txtAmendID.getText().startsWith("LAF")) // Invoiced but not dispatched
                    {
                        PKGLOV_LAF aList = new PKGLOV_LAF();

                        //aList.SQL = "SELECT null,A.PR_PIECE_NO,A.PR_PARTY_CODE,B.PARTY_NAME,A.PR_ORDER_DATE,A.PR_PIECE_STAGE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE A.PR_PIECE_STAGE='IN STOCK' AND (A.PR_PKG_DP_NO='' OR A.PR_PKG_DP_NO IS NULL) AND A.PR_PARTY_CODE=B.PARTY_CODE AND A.PR_PIECE_NO NOT IN (SELECT PIECE_NO FROM PRODUCTION.FELT_LOCATION_ASSIGNMENT WHERE CANCELED=0 AND DOC_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"'  AND DOC_DATE<='"+EITLERPGLOBAL.FinToDateDB+"') ORDER BY A.PR_ORDER_DATE";

                        aList.SQL = "SELECT " +
                                "null,A.PR_PIECE_NO,A.PR_PARTY_CODE,B.PARTY_NAME,A.PR_ORDER_DATE,A.PR_PIECE_STAGE,PR_INVOICE_NO,PR_INVOICE_DATE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER " +
                                "A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE A.PR_PIECE_STAGE='INVOICED'  AND A.PR_PIECE_NO NOT IN ("+Pices+")  " +
                                "AND CONCAT(PR_INVOICE_NO,PR_INVOICE_DATE,PR_PIECE_NO) IN ( " +
                                "SELECT CONCAT(H.INVOICE_NO,H.INVOICE_DATE,D.PIECE_NO) FROM " +
                                "PRODUCTION.FELT_SAL_INVOICE_HEADER H  LEFT JOIN " +
                                "PRODUCTION.FELT_SAL_INVOICE_DETAIL D on H.INVOICE_NO=D.INVOICE_NO AND " +
                                "H.INVOICE_DATE=SUBSTRING(D.INVOICE_DATE,1,10) WHERE H.APPROVED=1 AND " +
                                "H.CANCELLED=0 AND H.INVOICE_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND " +
                                "H.INVOICE_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND H.INVOICE_DATE<='"+EITLERPGLOBAL.FinToDateDB+"'   " +
                                "AND CONCAT(H.INVOICE_NO,H.INVOICE_DATE) NOT IN (SELECT " +
                                "CONCAT(INV_NO,INV_DATE) FROM PRODUCTION.FELT_POST_INVOICE_DATA) " +
                                "AND CONCAT(H.INVOICE_NO,H.INVOICE_DATE,D.PIECE_NO) NOT IN (SELECT " +
                                "CONCAT(INVOICE_NO,INVOICE_DATE,PIECE_NO)   FROM " +
                                "PRODUCTION.FELT_SALES_RETURNS_DETAIL D,PRODUCTION.FELT_SALES_RETURNS_HEADER H " +
                                "WHERE H.DOC_NO = D.DOC_NO AND H.APPROVED =1 AND H.CANCELED =0) " +
                                ")" +
                                " " +
                                " AND A.PR_PARTY_CODE=B.PARTY_CODE AND A.PR_PIECE_NO NOT IN ("+Pices+") AND A.PR_PIECE_NO NOT IN (SELECT PIECE_NO " +
                                "FROM PRODUCTION.FELT_LOCATION_ASSIGNMENT  " +
                                " " +
                                " WHERE CANCELED=0 AND DOC_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"'  AND DOC_DATE<='"+EITLERPGLOBAL.FinToDateDB+"') " +
                                "ORDER BY A.PR_ORDER_DATE";
                        
                        System.out.println("query = " + aList.SQL);
                        aList.ReturnCol = 1;
                        aList.SecondCol = 2; //to get Second Value
                        aList.ShowReturnCol = true;
                        aList.DefaultSearchOn = 2;
                        int k = 5;
                        if (aList.ShowLOV()) {

                            Conn = data.getConn();
                            stmt = Conn.createStatement();

                            sql = "SELECT A.PR_PIECE_NO,A.PR_PARTY_CODE,B.PARTY_NAME,A.PR_ORDER_DATE,A.PR_PRODUCT_CODE,A.PR_GROUP,A.PR_STYLE,A.PR_LENGTH,A.PR_WIDTH,A.PR_GSM,A.PR_THORITICAL_WEIGHT,A.PR_SQMTR,A.PR_BILL_LENGTH,A.PR_BILL_WIDTH,A.PR_BILL_GSM,A.PR_BILL_WEIGHT,A.PR_BILL_SQMTR,A.PR_BILL_PRODUCT_CODE,A.PR_PIECE_STAGE,C.INCHARGE_NAME FROM PRODUCTION.FELT_SALES_PIECE_REGISTER A,DINESHMILLS.D_SAL_PARTY_MASTER B,PRODUCTION.FELT_INCHARGE C WHERE A.PR_PARTY_CODE=B.PARTY_CODE AND B.INCHARGE_CD=C.INCHARGE_CD AND A.PR_PIECE_NO IN (" + aList.ReturnVal.toString() + ")";
                            ResultSet rsData = stmt.executeQuery(sql);
                             System.out.println("query = " +sql);
                            rsData.first();
                            int i = 1;

                            double total_length=0;
                            double total_weigth=0;


                            while (!rsData.isAfterLast()) {
                                Object[] rowData = new Object[25];
                                rowData[0] = ""+(Table.getRowCount()+1);
                                rowData[1] = rsData.getString("PR_PIECE_NO");
                                rowData[2] = rsData.getString("PR_PARTY_CODE");
                                rowData[3] = rsData.getString("PARTY_NAME");
                                rowData[4] = EITLERPGLOBAL.formatDate(rsData.getString("PR_ORDER_DATE"));
                                rowData[5] = rsData.getString("PR_PRODUCT_CODE");
                                rowData[6] = rsData.getString("PR_GROUP");
                                rowData[7] = rsData.getString("PR_STYLE");
                                rowData[8] = rsData.getString("PR_LENGTH");
                                rowData[9] = rsData.getString("PR_WIDTH");
                                rowData[10] = rsData.getString("PR_GSM");
                                rowData[11] = rsData.getString("PR_THORITICAL_WEIGHT");
                                rowData[12] = rsData.getString("PR_SQMTR");
                                rowData[13] = rsData.getString("PR_BILL_LENGTH");

                                total_length = total_length + Double.parseDouble(rsData.getString("PR_BILL_LENGTH"));

                                rowData[14] = rsData.getString("PR_BILL_WIDTH");
                                rowData[15] = rsData.getString("PR_BILL_GSM");
                                rowData[16] = rsData.getString("PR_BILL_WEIGHT");

                                total_weigth = total_weigth + EITLERPGLOBAL.round(Double.parseDouble(rsData.getString("PR_BILL_WEIGHT")),2);

                                rowData[17] = rsData.getString("PR_BILL_SQMTR");
                                rowData[18] = rsData.getString("PR_BILL_PRODUCT_CODE");
                                rowData[19] = rsData.getString("PR_PIECE_STAGE");
                                rowData[20] = rsData.getString("INCHARGE_NAME");
                                i++;

                                DataModel.addRow(rowData);
                                rsData.next();
                            }


                            txttotallength.setText(""+total_length);
                            txttotalweigth.setText(""+total_weigth);
                        }
                    }
                    else // IN STOCK
                    {
                        PKGLOV aList = new PKGLOV();

                       // aList.SQL = "SELECT null,A.PR_PIECE_NO,A.PR_PARTY_CODE,B.PARTY_NAME,A.PR_ORDER_DATE,A.PR_PIECE_STAGE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE A.PR_PIECE_STAGE='IN STOCK' AND (A.PR_PKG_DP_NO='' OR A.PR_PKG_DP_NO IS NULL) AND A.PR_PARTY_CODE=B.PARTY_CODE ORDER BY A.PR_ORDER_DATE";

                        aList.SQL = "SELECT null,A.PR_PIECE_NO,A.PR_PARTY_CODE,B.PARTY_NAME,A.PR_ORDER_DATE,A.PR_PIECE_STAGE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE A.PR_PIECE_STAGE='IN STOCK' AND (A.PR_PKG_DP_NO='' OR A.PR_PKG_DP_NO IS NULL) AND A.PR_PARTY_CODE=B.PARTY_CODE AND A.PR_PIECE_NO NOT IN (SELECT PIECE_NO FROM PRODUCTION.FELT_LOCATION_ASSIGNMENT WHERE CANCELED=0 AND DOC_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"'  AND DOC_DATE<='"+EITLERPGLOBAL.FinToDateDB+"') AND A.PR_PIECE_NO NOT IN ("+Pices+") ORDER BY A.PR_ORDER_DATE";

                        System.out.println("query = " + aList.SQL);
                        aList.ReturnCol = 1;
                        aList.SecondCol = 2; //to get Second Value
                        aList.ShowReturnCol = true;
                        aList.DefaultSearchOn = 2;
                        int k = 5;
                        if (aList.ShowLOV()) {

                            Conn = data.getConn();
                            stmt = Conn.createStatement();

                            sql = "SELECT A.PR_PIECE_NO,A.PR_PARTY_CODE,B.PARTY_NAME,A.PR_ORDER_DATE,A.PR_PRODUCT_CODE,A.PR_GROUP,A.PR_STYLE,A.PR_LENGTH,A.PR_WIDTH,A.PR_GSM,A.PR_THORITICAL_WEIGHT,A.PR_SQMTR,A.PR_BILL_LENGTH,A.PR_BILL_WIDTH,A.PR_BILL_GSM,A.PR_BILL_WEIGHT,A.PR_BILL_SQMTR,A.PR_BILL_PRODUCT_CODE,A.PR_PIECE_STAGE,C.INCHARGE_NAME FROM PRODUCTION.FELT_SALES_PIECE_REGISTER A,DINESHMILLS.D_SAL_PARTY_MASTER B,PRODUCTION.FELT_INCHARGE C WHERE A.PR_PARTY_CODE=B.PARTY_CODE AND B.INCHARGE_CD=C.INCHARGE_CD AND A.PR_PIECE_NO IN (" + aList.ReturnVal.toString() + ")";
                            ResultSet rsData = stmt.executeQuery(sql);
                             System.out.println("query = " +sql);
                            rsData.first();
                            int i = 1;

                            double total_length=0;
                            double total_weigth=0;

                            while (!rsData.isAfterLast()) {
                                Object[] rowData = new Object[25];
                                rowData[0] = ""+(Table.getRowCount()+1);
                                rowData[1] = rsData.getString("PR_PIECE_NO");
                                rowData[2] = rsData.getString("PR_PARTY_CODE");
                                rowData[3] = rsData.getString("PARTY_NAME");
                                rowData[4] = EITLERPGLOBAL.formatDate(rsData.getString("PR_ORDER_DATE"));
                                rowData[5] = rsData.getString("PR_PRODUCT_CODE");
                                rowData[6] = rsData.getString("PR_GROUP");
                                rowData[7] = rsData.getString("PR_STYLE");
                                rowData[8] = rsData.getString("PR_LENGTH");
                                rowData[9] = rsData.getString("PR_WIDTH");
                                rowData[10] = rsData.getString("PR_GSM");
                                rowData[11] = rsData.getString("PR_THORITICAL_WEIGHT");
                                rowData[12] = rsData.getString("PR_SQMTR");
                                rowData[13] = rsData.getString("PR_BILL_LENGTH");

                                total_length = total_length + Double.parseDouble(rsData.getString("PR_BILL_LENGTH"));

                                rowData[14] = rsData.getString("PR_BILL_WIDTH");
                                rowData[15] = rsData.getString("PR_BILL_GSM");
                                rowData[16] = rsData.getString("PR_BILL_WEIGHT");

                                total_weigth = total_weigth + EITLERPGLOBAL.round(Double.parseDouble(rsData.getString("PR_BILL_WEIGHT")),2);

                                rowData[17] = rsData.getString("PR_BILL_SQMTR");
                                rowData[18] = rsData.getString("PR_BILL_PRODUCT_CODE");
                                rowData[19] = rsData.getString("PR_PIECE_STAGE");
                                rowData[20] = rsData.getString("INCHARGE_NAME");
                                i++;

                                DataModel.addRow(rowData);
                                rsData.next();
                            }


                            txttotallength.setText(""+total_length);
                            txttotalweigth.setText(""+total_weigth);
                        }
                    }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        for (int k = 0; k <= Table.getRowCount() - 1; k++) {
            for (int l = k; l <= Table.getRowCount() - 1; l++) {
                if (l != k && ((String) Table.getValueAt(k, 1)).trim().equals(((String) Table.getValueAt(l, 1)).trim())) {
                    JOptionPane.showMessageDialog(this, "Same Piece No at Row " + (k + 1) + " and " + (l + 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ItemShift1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemShift1ActionPerformed
        cmbAmendReason.setEnabled(true);

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        
        SetupApproval();
        //Display newly generated document no.
        txtAmendID.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 770, 239, false));
        EITLERPGLOBAL.setComboIndex(cmbAmendReason, 0);
        cmbAmendReason.setEnabled(true);
        jButton1.setEnabled(true);
        txtAmendDate.requestFocus();

        lblTitle.setText(" FELT LOCATION ASSIGNMENT DETAIL (IN STOCK)- " + txtAmendID.getText());
        lblTitle.setBackground(Color.GRAY);
        
//        //Now Generate new document no.
//        SelectFirstFree aList = new SelectFirstFree();
//        aList.ModuleID = 770;
//
//        if (aList.ShowList()) {
//            EditMode = EITLERPGLOBAL.ADD;
//            SetFields(true);
//            DisableToolbar();
//            ClearFields();
//            SelPrefix = aList.Prefix; //Selected Prefix;
//            SelSuffix = aList.Suffix;
//            FFNo = aList.FirstFreeNo;
//            SetupApproval();
//            //Display newly generated document no.
//            txtAmendID.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 770, FFNo, false));
//            EITLERPGLOBAL.setComboIndex(cmbAmendReason, 0);
//            cmbAmendReason.setEnabled(true);
//            jButton1.setEnabled(true);
//            txtAmendDate.requestFocus();
//            
//            lblTitle.setText(" FELT LOCATION ASSIGNMENT DETAIL - " + txtAmendID.getText());
//            lblTitle.setBackground(Color.BLUE);
//            
//        } else {
//            JOptionPane.showMessageDialog(null, "You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
//        }
    }//GEN-LAST:event_ItemShift1ActionPerformed

    private void ItemShift2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemShift2ActionPerformed
      
        cmbAmendReason.setEnabled(true);

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        
        SetupApproval();
        //Display newly generated document no.
        txtAmendID.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 770, 341, false));
        EITLERPGLOBAL.setComboIndex(cmbAmendReason, 0);
        cmbAmendReason.setEnabled(true);
        jButton1.setEnabled(true);
        txtAmendDate.requestFocus();

        lblTitle.setText(" FELT LOCATION ASSIGNMENT DETAIL (BSR)- " + txtAmendID.getText());
        lblTitle.setBackground(Color.GRAY);

    }//GEN-LAST:event_ItemShift2ActionPerformed

    private void ItemShift3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemShift3ActionPerformed
        
        cmbAmendReason.setEnabled(true);

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        
        SetupApproval();
        //Display newly generated document no.
        txtAmendID.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 770, 342, false));
        EITLERPGLOBAL.setComboIndex(cmbAmendReason, 0);
        cmbAmendReason.setEnabled(true);
        jButton1.setEnabled(true);
        txtAmendDate.requestFocus();

        lblTitle.setText(" FELT LOCATION ASSIGNMENT DETAIL (Invoice But Not Dispatched)- " + txtAmendID.getText());
        lblTitle.setBackground(Color.GRAY);
    }//GEN-LAST:event_ItemShift3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ItemShift1;
    private javax.swing.JMenuItem ItemShift2;
    private javax.swing.JMenuItem ItemShift3;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbAmendReason;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuItem jMenuItemOrder;
    private javax.swing.JMenuItem jMenuItemWarping;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblLocationDesc;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAmendDate;
    private javax.swing.JTextField txtAmendID;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtamendreasoncode;
    private javax.swing.JTextField txtamendreasonname;
    private javax.swing.JTextField txttotallength;
    private javax.swing.JTextField txttotalweigth;
    // End of variables declaration//GEN-END:variables

    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    private void SetFields(boolean pStat) {
        txtAmendDate.setEnabled(pStat);
        jButton1.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);

        SetupApproval();
    }

    private void ClearFields() {
        txtAmendDate.setText(EITLERPGLOBAL.getCurrentDate());
        // txtFormNo.setText("");
        txtAmendID.setText("");
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        txtamendreasoncode.setText("");
        txtamendreasonname.setText("");
        txttotallength.setText("");
        txttotalweigth.setText("");
        lblLocationDesc.setText("");
        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }

    //Display data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, 770)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        //=========== Title Bar Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjFeltOrderUpd.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                } else {
                    lblTitle.setBackground(Color.GRAY);
                }

            }
            //============================================//

            String AmendDate = EITLERPGLOBAL.formatDate(ObjFeltOrderUpd.getAttribute("DOC_DATE").getString());
            String AmendID = ObjFeltOrderUpd.getAttribute("DOC_NO").getString();
            lblTitle.setText("  FELT LOCATION ASSIGNMENT ENTRY FORM -  " + AmendID);
            lblRevNo.setText(Integer.toString((int) ObjFeltOrderUpd.getAttribute("REVISION_NO").getVal()));
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) ObjFeltOrderUpd.getAttribute("HIERARCHY_ID").getVal());
            
            DoNotEvaluate = true;
            
            FormatGrid();
            txtAmendDate.setText(AmendDate);
            txtAmendID.setText(AmendID);
            txtamendreasonname.setText(ObjFeltOrderUpd.getAttribute("LOCATION_ID").getString());
            cmbAmendReason.setSelectedItem(ObjFeltOrderUpd.getAttribute("LOCATION_ID").getString());
            
            String LocationDesc = data.getStringValueFromDB("SELECT LOCATION_DESC FROM PRODUCTION.FELT_WH_LOCATION_MST WHERE LOCATION_ID='" + ObjFeltOrderUpd.getAttribute("LOCATION_ID").getString() + "'");
            lblLocationDesc.setText(LocationDesc);
            //Now Generate Table
            for (int i = 1; i <= ObjFeltOrderUpd.hmFeltOrderUpdDetails.size(); i++) {
                clsFeltLocationAssignmentDetails ObjFeltOrderUpdDetails = (clsFeltLocationAssignmentDetails) ObjFeltOrderUpd.hmFeltOrderUpdDetails.get(Integer.toString(i));

                Object[] rowData = new Object[35];
                rowData[0] = ObjFeltOrderUpdDetails.getAttribute("SR_NO").getString();
                rowData[1] = ObjFeltOrderUpdDetails.getAttribute("PIECE_NO").getString();
                rowData[2] = ObjFeltOrderUpdDetails.getAttribute("PARTY_CODE").getString();
                rowData[3] = ObjFeltOrderUpdDetails.getAttribute("PARTY_NAME").getString();
                rowData[4] = EITLERPGLOBAL.formatDate(ObjFeltOrderUpdDetails.getAttribute("ORDER_DATE").getString());
                rowData[5] = ObjFeltOrderUpdDetails.getAttribute("PRODUCT_CODE").getString();
                rowData[6] = ObjFeltOrderUpdDetails.getAttribute("GROUP").getString();
                rowData[7] = ObjFeltOrderUpdDetails.getAttribute("STYLE").getString();
                rowData[8] = ObjFeltOrderUpdDetails.getAttribute("LENGTH").getString();
                rowData[9] = ObjFeltOrderUpdDetails.getAttribute("WIDTH").getString();
                rowData[10] = ObjFeltOrderUpdDetails.getAttribute("GSM").getString();
                rowData[11] = ObjFeltOrderUpdDetails.getAttribute("WEIGHT").getString();
                rowData[12] = ObjFeltOrderUpdDetails.getAttribute("SQMTR").getString();
                rowData[13] = ObjFeltOrderUpdDetails.getAttribute("BILL_LENGTH").getString();
                rowData[14] = ObjFeltOrderUpdDetails.getAttribute("BILL_WIDTH").getString();
                rowData[15] = ObjFeltOrderUpdDetails.getAttribute("BILL_GSM").getString();
                rowData[16] = ObjFeltOrderUpdDetails.getAttribute("BILL_WEIGHT").getString();
                rowData[17] = ObjFeltOrderUpdDetails.getAttribute("BILL_SQMTR").getString();
                rowData[18] = ObjFeltOrderUpdDetails.getAttribute("BILL_PRODUCT_CODE").getString();
                rowData[19] = ObjFeltOrderUpdDetails.getAttribute("MFG_STATUS").getString();
                rowData[20] = ObjFeltOrderUpdDetails.getAttribute("INCHARGE_NAME").getString();
                DataModel.addRow(rowData);
            }
           
            

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList = new HashMap();

            hmList = clsFeltProductionApprovalFlow.getDocumentFlow(770, AmendID);
            for (int i = 1; i <= hmList.size(); i++) {
                //clsDocFlow is collection class used for holding approval flow data
                clsDocFlow ObjFlow = (clsDocFlow) hmList.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3] = ObjFlow.getAttribute("STATUS").getString();
                rowData[4] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString());
                rowData[5] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString());
                rowData[6] = ObjFlow.getAttribute("REMARKS").getString();

                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//

            // Generating Grid for Showing Production Details Update History
            FormatGridUpdateHistory();
//            HashMap hmApprovalHistory=clsFeltPieceAmend.getHistoryList(ObjFeltOrderUpd.getAttribute("DOC_NO").getString(), txtAmendID.getText());
            HashMap hmApprovalHistory = clsFeltLocationAssignment.getHistoryList(AmendDate, AmendID);
            for (int i = 1; i <= hmApprovalHistory.size(); i++) {
                clsFeltLocationAssignment ObjFeltOrderUpd = (clsFeltLocationAssignment) hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData = new Object[5];

                rowData[0] = Integer.toString((int) ObjFeltOrderUpd.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFeltOrderUpd.getAttribute("UPDATED_BY").getVal());
                rowData[2] = EITLERPGLOBAL.formatDate(ObjFeltOrderUpd.getAttribute("ENTRY_DATE").getString());

                String ApprovalStatus = "";

                if ((ObjFeltOrderUpd.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                if ((ObjFeltOrderUpd.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjFeltOrderUpd.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if ((ObjFeltOrderUpd.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjFeltOrderUpd.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjFeltOrderUpd.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjFeltOrderUpd.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjFeltOrderUpd.getAttribute("APPROVER_REMARKS").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
         double totallength=0, totalWeight=0;
             for(int i=0;i<Table.getRowCount();i++) {
                if(Table.getValueAt(i,3)!=null) {
                    totallength=totallength+Double.parseDouble((String)Table.getValueAt(i,8));
                    totalWeight=totalWeight+Double.parseDouble((String)Table.getValueAt(i,11));
                }
            }
            
            txttotallength.setText(Double.toString(EITLERPGLOBAL.round(totallength,2)));
            txttotalweigth.setText(Double.toString(EITLERPGLOBAL.round(totalWeight,2)));

        DoNotEvaluate = false;
    }

    private void FormatGrid() {
        try {
           // cmdAdd.requestFocus();

            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            TableColumnModel ColModel = Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            //Add Columns to it
            DataModel.addColumn("Sr. No.");//0
            DataModel.addColumn("Piece No");//1
            DataModel.addColumn("Party Code");//2
            DataModel.addColumn("Party Name");//3
            DataModel.addColumn("Order Date");//4
            DataModel.addColumn("Product Code");//5
            DataModel.addColumn("Group");//6
            DataModel.addColumn("Style");//7
            DataModel.addColumn("Length");//8
            DataModel.addColumn("Width");//9
            DataModel.addColumn("GSM");//10
            DataModel.addColumn("Weight");//11
            DataModel.addColumn("Sqmtr");//12
            DataModel.addColumn("Bill Length");//13
            DataModel.addColumn("Bill Width");//14
            DataModel.addColumn("Bill GSM");//15
            DataModel.addColumn("Bill Weight");//16
            DataModel.addColumn("Bill Sqntr");//17
            DataModel.addColumn("Bill Product Code");//18
            DataModel.addColumn("MFG Status");//20
            DataModel.addColumn("Incharge Name");//21

            

            if (EditMode != 0) {
                //------- Install Table List Selection Listener ------//
                Table.getColumnModel().getSelectionModel().addListSelectionListener(
                        new ListSelectionListener() {
                            public void valueChanged(ListSelectionEvent e) {
                                int column = Table.getSelectedColumn();
                                String strVar = DataModel.getVariable(column);
                                //=============== Cell Editing Routine =======================//
                                Table.editCellAt(Table.getSelectedRow(), column);
                                if (Table.getEditorComponent() instanceof JTextComponent) {
                                    ((JTextComponent) Table.getEditorComponent()).selectAll();
                                }
                                if (column == 1) {
                                    ShowMessage("Press F1 for Piece No List...");
                                }
                                //============= Cell Editing Routine Ended =================//
                            }
                        });

                //----- Install Table Model Event Listener For Displaying Party code and Group -------//
                Table.getModel().addTableModelListener(new TableModelListener() {
                    public void tableChanged(TableModelEvent e) {
                        if (e.getType() == TableModelEvent.UPDATE) {
                            int row = Table.getSelectedRow();
                            int column = e.getColumn();

                            //=========== Cell Update Prevention Check ===========//
                            String curValue = ((String) Table.getValueAt(row, column)).trim();
                            if (curValue.equals("")) {
                                return;
                            }
                            //====================================================//
                            if (DoNotEvaluate) {
                                return;
                            }

                            //EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString())
                            if (column == 1) {
                                String pieceNo = ((String) Table.getValueAt(row, 1)).trim();

                                Table.setValueAt(ObjFeltOrderUpd.getPartyCode(pieceNo), row, 2);
                                Table.setValueAt(ObjFeltOrderUpd.getPartyName(pieceNo), row, 3);
                                Table.setValueAt(EITLERPGLOBAL.formatDate(ObjFeltOrderUpd.getOrderDate(pieceNo)), row, 4);
                                Table.setValueAt(ObjFeltOrderUpd.getProductCode(pieceNo), row, 5);
                                Table.setValueAt(ObjFeltOrderUpd.getGroupCD(pieceNo), row, 6);
                                Table.setValueAt(ObjFeltOrderUpd.getStyle(pieceNo), row, 7);
                                Table.setValueAt(ObjFeltOrderUpd.getLength(pieceNo), row, 8);
                                Table.setValueAt(ObjFeltOrderUpd.getWidth(pieceNo), row, 9);
                                Table.setValueAt(ObjFeltOrderUpd.getGSM(pieceNo), row, 10);
                                Table.setValueAt(ObjFeltOrderUpd.getWeight(pieceNo), row, 11);
                                Table.setValueAt(ObjFeltOrderUpd.getSqmtr(pieceNo), row, 12);
                                Table.setValueAt(ObjFeltOrderUpd.getBillLength(pieceNo), row, 13);
                                Table.setValueAt(ObjFeltOrderUpd.getBillWidth(pieceNo), row, 14);
                                Table.setValueAt(ObjFeltOrderUpd.getBillGSM(pieceNo), row, 15);
                                Table.setValueAt(ObjFeltOrderUpd.getBillWeight(pieceNo), row, 16);
                                Table.setValueAt(ObjFeltOrderUpd.getBillSqmtr(pieceNo), row, 17);
                                Table.setValueAt(ObjFeltOrderUpd.getBillProductCode(pieceNo), row, 18);
                                Table.setValueAt(ObjFeltOrderUpd.getmfgstatus(pieceNo), row, 19);
                                Table.setValueAt(ObjFeltOrderUpd.getInchargeName(pieceNo), row, 20);
                            }

                            if (column == 5) {
                                String productNo = ((String) Table.getValueAt(row, 5)).trim();
                                Table.setValueAt(ObjFeltOrderUpd.getGroupID(productNo), row, 6);
                            }
                        }
                    }
                });

            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=770 ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=770 ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(770, ObjFeltOrderUpd.getAttribute("DOC_NO").getString());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(770, txtAmendID.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(770, txtAmendID.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }

        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(770, txtAmendID.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }

    //Generates User Name Combo Box
    private void SetupApproval() {
        // select hold for default approval
        OpgHold.setSelected(true);

        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            int FromUserID = clsFeltProductionApprovalFlow.getFromID(770, ObjFeltOrderUpd.getAttribute("DOC_NO").getString());
            lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = clsFeltProductionApprovalFlow.getFromRemarks(770, FromUserID, ObjFeltOrderUpd.getAttribute("DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(770, txtAmendID.getText())) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        //if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6083, 60831)) {
            if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6231, 62311)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        //if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6083, 60832)) {
            if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6231, 62312)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }
        
        // --- Delete Rights --
        //if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6083, 60833)) {
            if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6231, 62313)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        //if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6083, 60834)) {
            if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6231, 62314)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {
       jPopupMenu1.show(cmdNew, 0, 35);
    }

    private void Edit() {

        String productionDocumentNo = (String) ObjFeltOrderUpd.getAttribute("DOC_NO").getObj();
        if (ObjFeltOrderUpd.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;

            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            cmbAmendReason.setEnabled(true);
            if (clsFeltProductionApprovalFlow.IsCreator(770, productionDocumentNo)) {
                SetFields(true);
                txtAmendDate.setEnabled(false);
                //            txtFormNo.setEnabled(false);
            } else {

                EnableApproval();
            }
        } else {
            JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "EDITING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {
        if (ObjFeltOrderUpd.CanDelete(txtAmendID.getText(), txtAmendDate.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, ObjFeltOrderUpd.LastError, "DELETION ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Save() {
        String AmendDate, productionDocumentNo, AmendReason;
        float weight = 0, length = 0, width = 0, gsm = 0, sqmtr = 0, billlength = 0, billwidth = 0, billgsm = 0, billweight = 0, bilsqmtr = 0;
        int loomNo = 0, i = 0, j = 0, weave_diff_days = 0;
        String srno="",pieceNo = "", AmendID = "", partyCode = "", orderdate = "", productcode = "", style = "", billproductcode = "";
        String weightString = "", widthString = "", lengthString = "", gsmString = "", groupString = "", sqmtrString = "";
        String billlengthString = "", billwidthString = "", billgsmString = "", billweightString = "", billsqmtrString = "";
        String req_dateString = "", comm_dateString = "", agreeddateString = "";
        String rev_req_dateString = "", rev_comm_dateString = "", rev_agreeddateString = "";
        String rev_req_reasonString = "", rev_comm_reasonString = "";
        String machineno = "", positionno = "", refno = "", confno = "", po_no = "", po_date = "", po_remark = "";
        String wvg_dateString = "", ndl_dateString = "", mnd_dateString = "";
        String Amend_Reason = "", agreedindstring = "", prodindstring = "", amendremarkstring = "", mfgstatusstring = "", partyname = "", inchargename = "";

        AmendDate = txtAmendDate.getText().trim();
        AmendID = txtAmendID.getText().trim();
        Amend_Reason = Integer.toString(cmbAmendReason.getSelectedIndex());

        //Form level validations
        if (AmendDate.equals("") || !EITLERPGLOBAL.isDate(AmendDate)) {
            JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, "Enter Valid UpdationDate.", "Wrong Updation Date", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // check Production Date is Within Financial Year?
        java.sql.Date FinFromDate = java.sql.Date.valueOf(EITLERPGLOBAL.FinFromDateDB);
        java.sql.Date FinToDate = java.sql.Date.valueOf(EITLERPGLOBAL.FinToDateDB);
        java.sql.Date Amend_Date = java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(AmendDate));
        if ((Amend_Date.after(FinFromDate) || Amend_Date.compareTo(FinFromDate) == 0) && (Amend_Date.before(FinToDate) || Amend_Date.compareTo(FinToDate) == 0)) {
            //Within the year
        } else {
            JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, "Updation Date is Not Within Financial Year.", "FINANCIAL YEAR ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (Amend_Date.compareTo(java.sql.Date.valueOf(EITLERPGLOBAL.getCurrentDateDB())) > 0) {
            JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, "Updation Date Must be Before or the Same Date as Today.", "Wrong Production Date", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Check the no. of items in table
        if (Table.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, "Enter Piece Updation Details Before Saving.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // check duplicate piece no in table
            for (int k = 0; k <= Table.getRowCount() - 1; k++) {
                for (int l = k; l <= Table.getRowCount() - 1; l++) {
                    if (l != k && ((String) Table.getValueAt(k, 1)).trim().equals(((String) Table.getValueAt(l, 1)).trim())) {
                        JOptionPane.showMessageDialog(this, "Same Piece No at Row " + (k + 1) + " and " + (l + 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }

            ObjFeltOrderUpd.hmFeltOrderUpdDetails.clear();

            //Check the entered details in Table.
            for (i = 0; i <= Table.getRowCount() - 1; i++) {

                // Piece no Validation before Saving  
                
                j++;
                srno = ((String) Table.getValueAt(i, 0)).trim();
                if (srno.equals("") || srno.equals(null)) {
                    JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, "Enter Sr No.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                j++;
                pieceNo = ((String) Table.getValueAt(i, 1)).trim().toUpperCase();
                if (pieceNo.equals("") || pieceNo.equals(null)) {
                    JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, "Enter Piece No.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                j++;
                partyCode = ((String) Table.getValueAt(i, 2)).trim();
                if (partyCode.equals("") || partyCode.equals(null)) {
                    JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, "Enter Party Code.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                j++;
                partyname = ((String) Table.getValueAt(i, 3)).trim();
                if (partyCode.equals("") || partyCode.equals(null)) {
                    JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, "Enter Party Name", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                j++;
                orderdate = ((String) Table.getValueAt(i, 4)).trim();
                j++;
                productcode = ((String) Table.getValueAt(i, 5)).trim();
                if (productcode.equals("")) {
                    JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, "Enter Product Code.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                j++;
                groupString = ((String) Table.getValueAt(i, 6)).trim();
                j++;
                style = ((String) Table.getValueAt(i, 7)).trim();
                j++;
                lengthString = ((String) Table.getValueAt(i, 8)).trim();
                j++;
                widthString = ((String) Table.getValueAt(i, 9)).trim();
                j++;
                gsmString = ((String) Table.getValueAt(i, 10)).trim();
                j++;
                weightString = Table.getValueAt(i, 11).toString().trim();
                j++;
                sqmtrString = Table.getValueAt(i, 12).toString().trim();
                j++;
                billlengthString = Table.getValueAt(i, 13).toString().trim();
                j++;
                billwidthString = Table.getValueAt(i, 14).toString().trim();
                j++;
                billgsmString = Table.getValueAt(i, 15).toString().trim();
                j++;
                billweightString = Table.getValueAt(i, 16).toString().trim();
                j++;
                billsqmtrString = Table.getValueAt(i, 17).toString().trim();
                j++;
                billproductcode = Table.getValueAt(i, 18).toString().trim();
                j = 0;
                mfgstatusstring = ((String) Table.getValueAt(i, 19)).trim();
                j++;
                inchargename = ((String) Table.getValueAt(i, 20)).trim();


                // check piece no is already weaved?
                clsFeltLocationAssignmentDetails ObjFeltOrderUpdDetails = new clsFeltLocationAssignmentDetails();
                
                ObjFeltOrderUpdDetails.setAttribute("SR_NO", srno);
                ObjFeltOrderUpdDetails.setAttribute("PIECE_NO", pieceNo);
                ObjFeltOrderUpdDetails.setAttribute("PARTY_CODE", partyCode);
                ObjFeltOrderUpdDetails.setAttribute("PARTY_NAME", partyname);
                ObjFeltOrderUpdDetails.setAttribute("ORDER_DATE", EITLERPGLOBAL.formatDateDB(orderdate));
                ObjFeltOrderUpdDetails.setAttribute("PRODUCT_CODE", productcode);
                ObjFeltOrderUpdDetails.setAttribute("GROUP", groupString);
                ObjFeltOrderUpdDetails.setAttribute("STYLE", style);
                ObjFeltOrderUpdDetails.setAttribute("LENGTH", lengthString);
                ObjFeltOrderUpdDetails.setAttribute("WIDTH", widthString);
                ObjFeltOrderUpdDetails.setAttribute("GSM", gsmString);
                ObjFeltOrderUpdDetails.setAttribute("WEIGHT", weightString);
                ObjFeltOrderUpdDetails.setAttribute("SQMTR", sqmtrString);
                ObjFeltOrderUpdDetails.setAttribute("BILL_LENGTH", billlengthString);
                ObjFeltOrderUpdDetails.setAttribute("BILL_WIDTH", billwidthString);
                ObjFeltOrderUpdDetails.setAttribute("BILL_GSM", billgsmString);
                ObjFeltOrderUpdDetails.setAttribute("BILL_WEIGHT", billweightString);
                ObjFeltOrderUpdDetails.setAttribute("BILL_SQMTR", billsqmtrString);
                ObjFeltOrderUpdDetails.setAttribute("BILL_PRODUCT_CODE", billproductcode);
                ObjFeltOrderUpdDetails.setAttribute("MFG_STATUS", mfgstatusstring);
                ObjFeltOrderUpdDetails.setAttribute("INCHARGE_NAME", inchargename);

                ObjFeltOrderUpd.hmFeltOrderUpdDetails.put(Integer.toString(ObjFeltOrderUpd.hmFeltOrderUpdDetails.size() + 1), ObjFeltOrderUpdDetails);
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, "Enter Correct Details at Row " + (i + 1) + " and Column " + (j + 1) + ". Error is " + nfe.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            j = 0;
            nfe.printStackTrace();
            return;

        }

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //set data for insert/update
        ObjFeltOrderUpd.setAttribute("DOC_DATE", AmendDate);
        ObjFeltOrderUpd.setAttribute("DOC_NO", AmendID);
        ObjFeltOrderUpd.setAttribute("LOCATION_ID", Amend_Reason);

        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjFeltOrderUpd.Insert()) {

                if(txtAmendID.getText().startsWith("LAB")) // BSR
                {
                    clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 770, 341, true);
                }
                else if(txtAmendID.getText().startsWith("LAF")) // BSR
                {
                    clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 770, 342, true);
                }
                else
                {
                    clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 770, 239, true);
                }
                
                
                if (OpgFinal.isSelected()) {
                    try {
                        String DOC_NO = txtAmendID.getText();
                        String DOC_DATE = txtAmendDate.getText();
                        String Party_Code = "";

                        String responce = JavaMail.sendFinalApprovalMail(770, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, SelHierarchyID, true);
                        System.out.println("Send Mail Responce : " + responce);

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, "Error occured while saving. Error is " + ObjFeltOrderUpd.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjFeltOrderUpd.Update()) {
                if (OpgFinal.isSelected()) {
                    try {
                        String DOC_NO = txtAmendID.getText();
                        String DOC_DATE = txtAmendDate.getText();
                        String Party_Code = "";

                        String responce = JavaMail.sendFinalApprovalMail(770, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, SelHierarchyID, true);
                        System.out.println("Send Mail Responce : " + responce);

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

                DisplayData();
            } else {
                JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, "Error occured while saving editing. Error is " + ObjFeltOrderUpd.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        cmbAmendReason.setEnabled(false);
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    //Sets data to the Details Class Object  
    private void SetData() {
        
        String DocNo, DocDate, Amend_Reason;

        DocNo = txtAmendID.getText().trim();
        DocDate = txtAmendDate.getText().trim();
       // Amend_Reason = Integer.toString(cmbAmendReason.getSelectedIndex());
        Amend_Reason =(String) cmbAmendReason.getSelectedItem();
        Amend_Reason =txtamendreasonname.getText().trim();

        ObjFeltOrderUpd.setAttribute("FFNO", FFNo);
        ObjFeltOrderUpd.setAttribute("PKG_DP_NO", DocNo);
        ObjFeltOrderUpd.setAttribute("PKG_DP_DATE", DocDate);
        ObjFeltOrderUpd.setAttribute("LOCATION_ID", Amend_Reason);
        

        //-------- Update Approval Specific Fields -----------//
        ObjFeltOrderUpd.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFeltOrderUpd.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjFeltOrderUpd.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFeltOrderUpd.setAttribute("FROM_REMARKS", txtToRemarks.getText().trim());
        //    ObjFeltOrderUpd.setAttribute("UPDATED_BY",EITLERPGLOBAL.getComboCode(cmbUserName));
        ObjFeltOrderUpd.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
        if (OpgApprove.isSelected()) {
            ObjFeltOrderUpd.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjFeltOrderUpd.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjFeltOrderUpd.setAttribute("APPROVAL_STATUS", "R");
            ObjFeltOrderUpd.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            ObjFeltOrderUpd.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjFeltOrderUpd.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
        } else {
            ObjFeltOrderUpd.setAttribute("CREATED_BY", (int) ObjFeltOrderUpd.getAttribute("CREATED_BY").getVal());
            ObjFeltOrderUpd.setAttribute("CREATED_DATE", ObjFeltOrderUpd.getAttribute("CREATED_DATE").getString());
            ObjFeltOrderUpd.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
        }
    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        cmbAmendReason.setEnabled(false);
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.FeltSales.LocationAssignment.frmFindLocationAssignment", true);
        frmFindLocationAssignment ObjFindFeltOrderUpd = (frmFindLocationAssignment) ObjLoader.getObj();

        if (ObjFindFeltOrderUpd.Cancelled == false) {
            if (!ObjFeltOrderUpd.Filter(ObjFindFeltOrderUpd.stringFindQuery)) {
                JOptionPane.showMessageDialog(frmFeltLocationAssignment.this, " No records found.", "Find Felt Location Assignment Details", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    // find details by production date
    public void Find(String AmendID) {
        ObjFeltOrderUpd.Filter(" DOC_NO='" + AmendID + "'");
        SetMenuForRights();
        DisplayData();
    }

    // find details by piece no.
    public void Find(String pieceNo, String prodDate) {
        ObjFeltOrderUpd.Filter(" FELT_AMEND_PIECE_NO+0='" + pieceNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    // find all pending document
    public void FindWaiting() {
        ObjFeltOrderUpd.Filter(" DOC_NO IN (SELECT DISTINCT L.DOC_NO FROM PRODUCTION.FELT_LOCATION_ASSIGNMENT L, PRODUCTION.FELT_PROD_DOC_DATA D WHERE L.DOC_NO=D.DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=770 AND L.CANCELED=0) ");
        SetMenuForRights();
        DisplayData();

    }

    public void FindEx(int pCompanyID, String AmendID) {
        ObjFeltOrderUpd.Filter(" DOC_NO='" + AmendID + "'");
        ObjFeltOrderUpd.MoveFirst();
        DisplayData();
    }

    private void MoveFirst() {
        ObjFeltOrderUpd.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        ObjFeltOrderUpd.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        ObjFeltOrderUpd.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        ObjFeltOrderUpd.MoveLast();
        DisplayData();
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(" " + pMessage);
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Tab1.getComponentCount() - 1; i++) {
            if (Tab1.getComponent(i).getName() != null) {

                FieldName = Tab1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    Tab1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//

        //=============== Setting Table Fields ==================//
        //   DataModel.ClearAllReadOnly();
        Table.setEnabled(true);
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
    }

 
    private void GenerateAmendReasonCombo() {
        HashMap hmAmendList = new HashMap();

        cmbAmendReasonModel = new EITLComboModel();
        cmbAmendReason.removeAllItems();
        cmbAmendReason.setModel(cmbAmendReasonModel);

        hmAmendList = clsFeltLocationAssignment.getAmendReasonList();
        for (int i = 1; i <= hmAmendList.size(); i++) {
            cmbAmendReasonModel.addElement((ComboData) hmAmendList.get(new Integer(i)));
            
        }
    }

    private void ReasonResetReadonly() {
        
        DataModel.SetReadOnly(1);
        DataModel.SetReadOnly(2);
        DataModel.SetReadOnly(3);
        DataModel.SetReadOnly(4);
        DataModel.SetReadOnly(5);
        DataModel.SetReadOnly(6);
        DataModel.SetReadOnly(7);
        DataModel.SetReadOnly(8);
        DataModel.SetReadOnly(9);
        DataModel.SetReadOnly(10);
        DataModel.SetReadOnly(11);
        DataModel.SetReadOnly(12);
        DataModel.SetReadOnly(13);
        DataModel.SetReadOnly(14);
        DataModel.SetReadOnly(15);
        DataModel.SetReadOnly(16);
        DataModel.SetReadOnly(17);
        DataModel.SetReadOnly(18);
        DataModel.SetReadOnly(19);
        DataModel.SetReadOnly(20);
        
    }

    private void ReasonReadonly() {
        int AmdReason = Integer.parseInt(txtamendreasoncode.getText());
        System.out.println("AMEND REASON : " + AmdReason);
    }
}
