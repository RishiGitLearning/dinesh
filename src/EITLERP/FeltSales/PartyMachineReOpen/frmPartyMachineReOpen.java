/*
 * frmDocCancel.java
 *
 * Created on December 11, 2004, 2:37 PM
 */
package EITLERP.FeltSales.PartyMachineReOpen;

/**
 *
 * @author root
 */
//import EITLERP.*;
import EITLERP.AppletFrame;
import EITLERP.BigEdit;
import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.FeltEvaluation.*;
import EITLERP.FeltSales.ReopenBale12.*;
import EITLERP.Finance.UtilFunctions;
import EITLERP.JTextFieldHint;
import EITLERP.LOV;
import EITLERP.Loader;
import EITLERP.Production.FeltMachineSurvey.clsmachinesurvey;
import EITLERP.Production.FeltMachineSurvey.frmmachinesurvey;
import EITLERP.Production.FeltMachineSurvey.frmmachinesurveyFind;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.SelectFirstFree;
import javax.swing.*;
import java.awt.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import javax.swing.text.*;
import java.net.*;
import java.io.*;
import EITLERP.Utils.*;
import EITLERP.clsAuthority;
import EITLERP.clsDepartment;
import EITLERP.clsDeptUsers;
import EITLERP.clsDocFlow;
import EITLERP.clsFirstFree;
import EITLERP.clsHierarchy;
import EITLERP.clsMenu;
import EITLERP.clsModules;
import EITLERP.clsSales_Party;
import EITLERP.clsUser;
import EITLERP.data;
import EITLERP.frmPendingApprovals;
import java.sql.*;
import javax.swing.JTextField;
//import EITLERP.Sales.*;

public class frmPartyMachineReOpen extends javax.swing.JApplet {

    private int EditMode = 0;
    private clsPartyMachineReOpen ObjDoc;

    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLTableModel DataModelA;

    private EITLTableModel DataModel;
    private boolean Updating = false;

    private boolean HistoryView = false;
    private String theDocNo = "";
    private EITLTableModel DataModelHS;

    private boolean DoNotEvaluate = false;

    String cellLastValue = "";

    public frmPendingApprovals frmPA;
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module

    public frmPartyMachineReOpen() {

    }

    /**
     * Initializes the applet frmInvoiceCancel
     */
    public void init() {
        System.gc();
        setSize(665, 530);
        initComponents();

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        //((JFrame) getParent().getParent().getParent().getParent()).setTitle("Jay");
        ObjDoc = new clsPartyMachineReOpen();
        GenerateCombos();
        SetMenuForRights();
        SetFields(false);
        lblTitle.setForeground(Color.WHITE);

        if (getName().equals("Link")) {

        } else {
            if (ObjDoc.LoadData()) {
                ObjDoc.MoveLast();
                DisplayData();
            } else {
            }
        }
        txtAuditRemarks.setVisible(false);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        mnuParty = new javax.swing.JMenuItem();
        mnuMachine = new javax.swing.JMenuItem();
        mnuPosition = new javax.swing.JMenuItem();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPurpose = new javax.swing.JTextField();
        cmdNext1 = new javax.swing.JButton();
        lblRevNo = new javax.swing.JLabel();
        cmdPurposeBig = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        txtPartyName = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtMachineNo = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtPositionNo = new javax.swing.JTextField();
        txtPositionDesc = new javax.swing.JTextField();
        btnShowPartyMst = new javax.swing.JButton();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack2 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        mnuParty.setText("Party ReOpen");
        mnuParty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPartyActionPerformed(evt);
            }
        });
        jPopupMenu1.add(mnuParty);

        mnuMachine.setText("Machine ReOpen");
        mnuMachine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuMachineActionPerformed(evt);
            }
        });
        jPopupMenu1.add(mnuMachine);

        mnuPosition.setText("Position ReOpen");
        mnuPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPositionActionPerformed(evt);
            }
        });
        jPopupMenu1.add(mnuPosition);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("ReOpen Party Machine Position ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 666, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.setLayout(null);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Doc No. :");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel2);
        jLabel2.setBounds(10, 20, 105, 30);

        txtDocNo.setEditable(false);
        txtDocNo.setName("GATEPASS_REQ_NO"); // NOI18N
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(120, 20, 104, 30);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Date :");
        Tab1.add(jLabel3);
        jLabel3.setBounds(300, 20, 60, 30);

        txtDocDate.setEditable(false);
        txtDocDate.setName("REQ_DATE"); // NOI18N
        Tab1.add(txtDocDate);
        txtDocDate.setBounds(370, 20, 102, 30);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Purpose :");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel6);
        jLabel6.setBounds(10, 190, 105, 30);

        txtPurpose.setEnabled(false);
        txtPurpose.setName("PURPOSE"); // NOI18N
        Tab1.add(txtPurpose);
        txtPurpose.setBounds(120, 190, 440, 30);

        cmdNext1.setMnemonic('x');
        cmdNext1.setText("Next >>");
        cmdNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNext1);
        cmdNext1.setBounds(510, 330, 102, 28);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(240, 30, 44, 16);

        cmdPurposeBig.setText("...");
        cmdPurposeBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPurposeBigActionPerformed(evt);
            }
        });
        Tab1.add(cmdPurposeBig);
        cmdPurposeBig.setBounds(580, 190, 33, 30);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Machine No :");
        Tab1.add(jLabel13);
        jLabel13.setBounds(10, 110, 105, 30);

        txtPartyCode.setEditable(false);
        txtPartyCode.setBackground(java.awt.Color.white);
        txtPartyCode.setEnabled(false);
        txtPartyCode.setName("DOC_NO"); // NOI18N
        txtPartyCode = new JTextFieldHint(new JTextField(),"Search By F1");
        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });
        Tab1.add(txtPartyCode);
        txtPartyCode.setBounds(120, 70, 100, 30);

        txtPartyName.setEditable(false);
        txtPartyName.setName("DOC_NO"); // NOI18N
        Tab1.add(txtPartyName);
        txtPartyName.setBounds(220, 70, 390, 30);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("Party Code :");
        Tab1.add(jLabel14);
        jLabel14.setBounds(10, 70, 105, 30);

        txtMachineNo.setEditable(false);
        txtMachineNo.setBackground(java.awt.Color.white);
        txtMachineNo.setEnabled(false);
        txtMachineNo.setName("DOC_NO"); // NOI18N
        txtMachineNo = new JTextFieldHint(new JTextField(),"Search By F1");
        txtMachineNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMachineNoKeyPressed(evt);
            }
        });
        Tab1.add(txtMachineNo);
        txtMachineNo.setBounds(120, 110, 100, 30);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Position No :");
        Tab1.add(jLabel15);
        jLabel15.setBounds(10, 150, 105, 30);

        txtPositionNo.setEditable(false);
        txtPositionNo.setBackground(java.awt.Color.white);
        txtPositionNo.setEnabled(false);
        txtPositionNo.setName("DOC_NO"); // NOI18N
        txtPositionNo = new JTextFieldHint(new JTextField(),"Search By F1");
        txtPositionNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPositionNoFocusLost(evt);
            }
        });
        txtPositionNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPositionNoKeyPressed(evt);
            }
        });
        Tab1.add(txtPositionNo);
        txtPositionNo.setBounds(120, 150, 100, 30);

        txtPositionDesc.setEditable(false);
        txtPositionDesc.setName("DOC_NO"); // NOI18N
        Tab1.add(txtPositionDesc);
        txtPositionDesc.setBounds(220, 150, 390, 30);

        btnShowPartyMst.setText("Show Machine Master");
        btnShowPartyMst.setMaximumSize(new java.awt.Dimension(78, 35));
        btnShowPartyMst.setMinimumSize(new java.awt.Dimension(78, 35));
        btnShowPartyMst.setPreferredSize(new java.awt.Dimension(78, 35));
        btnShowPartyMst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowPartyMstActionPerformed(evt);
            }
        });
        Tab1.add(btnShowPartyMst);
        btnShowPartyMst.setBounds(320, 110, 210, 30);

        Tab.addTab("Information", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.setLayout(null);

        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Hierarchy :");
        Tab2.add(jLabel31);
        jLabel31.setBounds(5, 18, 85, 16);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(95, 14, 184, 28);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("From :");
        Tab2.add(jLabel32);
        jLabel32.setBounds(5, 52, 85, 16);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(95, 50, 182, 28);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel35.setText("Remarks :");
        Tab2.add(jLabel35);
        jLabel35.setBounds(5, 82, 85, 16);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(95, 78, 461, 28);

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Your Action :");
        Tab2.add(jLabel36);
        jLabel36.setBounds(5, 120, 85, 16);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 163, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(95, 120, 182, 100);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Send To :");
        Tab2.add(jLabel33);
        jLabel33.setBounds(5, 228, 85, 16);

        cmbSendTo.setEnabled(false);
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(95, 224, 184, 28);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Remarks :");
        Tab2.add(jLabel34);
        jLabel34.setBounds(5, 264, 85, 16);

        txtToRemarks.setEnabled(false);
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(95, 260, 516, 28);

        cmdBack2.setText("<< Back");
        cmdBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBack2);
        cmdBack2.setBounds(520, 330, 102, 28);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(560, 77, 33, 21);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status :");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 16);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 626, 144);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(14, 207, 477, 148);

        jLabel9.setText("Document Update History :");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(14, 191, 182, 16);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewHistory);
        cmdViewHistory.setBounds(497, 209, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        jPanel1.add(cmdNormalView);
        cmdNormalView.setBounds(497, 239, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel1.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(500, 330, 129, 28);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(498, 269, 132, 24);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 654, 419);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(6, 488, 650, 22);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack2ActionPerformed

    private void cmdNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext1ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext1ActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if (TableHS.getRowCount() > 0 && TableHS.getSelectedRow() >= 0) {
            txtAuditRemarks.setText((String) TableHS.getValueAt(TableHS.getSelectedRow(), 4));
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText = txtAuditRemarks;
            bigEdit.ShowEdit();
        }

    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjDoc.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo = txtDocNo.getText();
        ObjDoc.ShowHistory(DocNo);
        MoveLast();

    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);

    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);

    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            //OpgFinal.setSelected(false);
            OpgHold.setSelected(true);

        }

    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(true);
        OpgReject.setSelected(false);
        OpgFinal.setSelected(false);
        OpgHold.setSelected(false);

    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();

    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmdPurposeBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPurposeBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtPurpose;
        bigEdit.ShowEdit();

    }//GEN-LAST:event_cmdPurposeBigActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjDoc.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        //PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        Delete();
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
//        Add();
        jPopupMenu1.show(cmdNew, 0, 30);
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void mnuPartyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPartyActionPerformed
        // TODO add your handling code here:
        //Now Generate new document no.
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = clsPartyMachineReOpen.ModuleID;

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        SelPrefix = aList.Prefix; //Selected Prefix;
        SelSuffix = aList.Suffix;
        FFNo = 255;
        SetupApproval();
        //Display newly generated document no.
        txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsPartyMachineReOpen.ModuleID, FFNo, false));
        txtDocDate.requestFocus();

        jLabel13.setVisible(false);
        txtMachineNo.setVisible(false);

        jLabel15.setVisible(false);
        txtPositionNo.setVisible(false);
        txtPositionDesc.setVisible(false);

        lblTitle.setText("ReOpen Party Machine Position - " + txtDocNo.getText());
        //lblTitle.setBackground(Color.BLUE);
        lblTitle.setBackground(Color.GRAY);

    }//GEN-LAST:event_mnuPartyActionPerformed

    private void mnuMachineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuMachineActionPerformed
        // TODO add your handling code here:
        //Now Generate new document no.
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = clsPartyMachineReOpen.ModuleID;

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        SelPrefix = aList.Prefix; //Selected Prefix;
        SelSuffix = aList.Suffix;
        FFNo = 256;
        SetupApproval();
        //Display newly generated document no.
        txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsPartyMachineReOpen.ModuleID, FFNo, false));
        txtDocDate.requestFocus();

        jLabel13.setVisible(true);
        txtMachineNo.setVisible(true);

        jLabel15.setVisible(false);
        txtPositionNo.setVisible(false);
        txtPositionDesc.setVisible(false);

        lblTitle.setText("ReOpen Party Machine Position - " + txtDocNo.getText());
        //lblTitle.setBackground(Color.BLUE);
        lblTitle.setBackground(Color.GRAY);
    }//GEN-LAST:event_mnuMachineActionPerformed

    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            //aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND MAIN_ACCOUNT_CODE=210010";
            if (txtDocNo.getText().startsWith("FPA")) {
//                aList.SQL = "SELECT DISTINCT C.PARTY_CODE,C.PARTY_NAME FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE C,DINESHMILLS.D_SAL_PARTY_MASTER P WHERE C.PARTY_CODE=P.PARTY_CODE AND PARTY_CLOSE_IND=1 AND C.STATUS_TYPE='CLOSURE' AND DOC_NO LIKE 'FPC%' ";
//                aList.SQL = "SELECT DISTINCT C.PARTY_CODE,C.PARTY_NAME FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE C,DINESHMILLS.D_SAL_PARTY_MASTER P WHERE C.PARTY_CODE=P.PARTY_CODE AND PARTY_CLOSE_IND=1 AND C.STATUS_TYPE='CLOSURE' AND DOC_NO LIKE 'FPC%' AND CLOSED_IND!=1";
                aList.SQL = "SELECT DISTINCT C.PARTY_CODE,C.PARTY_NAME FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE C,DINESHMILLS.D_SAL_PARTY_MASTER P WHERE C.PARTY_CODE=P.PARTY_CODE AND PARTY_CLOSE_IND=1 AND C.STATUS_TYPE='CLOSURE' AND DOC_NO LIKE 'FPC%' ";
            }
            if (txtDocNo.getText().startsWith("PMA")) {
//                aList.SQL = "SELECT DISTINCT C.PARTY_CODE,C.PARTY_NAME FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE C,PRODUCTION.FELT_MACHINE_MASTER_HEADER H WHERE C.PARTY_CODE=H.MM_PARTY_CODE AND C.MACHINE_NO=H.MM_MACHINE_NO AND MACHINE_CLOSE_IND=1 AND C.STATUS_TYPE='CLOSURE' AND DOC_NO LIKE 'PMC%' ";
                aList.SQL = "SELECT DISTINCT C.PARTY_CODE,C.PARTY_NAME FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE C,PRODUCTION.FELT_MACHINE_MASTER_HEADER H WHERE C.PARTY_CODE=H.MM_PARTY_CODE AND C.MACHINE_NO=H.MM_MACHINE_NO AND MACHINE_CLOSE_IND=1 AND C.STATUS_TYPE='CLOSURE' AND DOC_NO LIKE 'PMC%' AND CLOSED_IND!=1";
            }
            if (txtDocNo.getText().startsWith("MPA")) {
//                aList.SQL = "SELECT DISTINCT C.PARTY_CODE,C.PARTY_NAME FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE C,PRODUCTION.FELT_MACHINE_MASTER_DETAIL D WHERE C.PARTY_CODE=D.MM_PARTY_CODE AND C.MACHINE_NO=D.MM_MACHINE_NO AND C.POSITION_NO=D.MM_MACHINE_POSITION AND POSITION_CLOSE_IND=1 AND C.STATUS_TYPE='CLOSURE' AND DOC_NO LIKE 'MPC%' ";
                aList.SQL = "SELECT DISTINCT C.PARTY_CODE,C.PARTY_NAME FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE C,PRODUCTION.FELT_MACHINE_MASTER_DETAIL D WHERE C.PARTY_CODE=D.MM_PARTY_CODE AND C.MACHINE_NO=D.MM_MACHINE_NO AND C.POSITION_NO=D.MM_MACHINE_POSITION AND POSITION_CLOSE_IND=1 AND C.STATUS_TYPE='CLOSURE' AND DOC_NO LIKE 'MPC%' AND CLOSED_IND!=1";
            }
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;

            if (aList.ShowLOV()) {
                txtPartyCode.setText(aList.ReturnVal);
                txtPartyName.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
            }
        }
    }//GEN-LAST:event_txtPartyCodeKeyPressed

    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
        // TODO add your handling code here:
        try {
            if (!txtPartyCode.getText().equals("")) {
                String strSQL = "";
                ResultSet rsTmp;
                strSQL = "";
                strSQL += "SELECT PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND MAIN_ACCOUNT_CODE=210010 AND PARTY_CODE = '" + txtPartyCode.getText().trim() + "' ";
                rsTmp = data.getResult(strSQL);
                rsTmp.first();
                txtPartyName.setText(rsTmp.getString("PARTY_NAME"));

            }

        } catch (Exception e) {

        }
    }//GEN-LAST:event_txtPartyCodeFocusLost

    private void txtMachineNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMachineNoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            //aList.SQL = "SELECT MM_MACHINE_NO FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MACHINE_CLOSE_IND=1 AND MM_PARTY_CODE= '" + txtPartyCode.getText().trim() + "' ";
            //aList.SQL = "SELECT C.MACHINE_NO FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE C,PRODUCTION.FELT_MACHINE_MASTER_HEADER H WHERE C.PARTY_CODE=H.MM_PARTY_CODE AND C.MACHINE_NO=H.MM_MACHINE_NO AND MACHINE_CLOSE_IND=1 AND C.STATUS_TYPE='CLOSURE' AND DOC_NO LIKE 'PMC%' ";
            if (txtDocNo.getText().startsWith("PMA")) {
//                aList.SQL = "SELECT DISTINCT C.MACHINE_NO FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE C,PRODUCTION.FELT_MACHINE_MASTER_HEADER H WHERE C.PARTY_CODE=H.MM_PARTY_CODE AND C.MACHINE_NO=H.MM_MACHINE_NO AND C.PARTY_CODE='" + txtPartyCode.getText() + "' AND MACHINE_CLOSE_IND=1 AND C.STATUS_TYPE='CLOSURE' AND DOC_NO LIKE 'PMC%' ";
                aList.SQL = "SELECT DISTINCT C.MACHINE_NO FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE C,PRODUCTION.FELT_MACHINE_MASTER_HEADER H WHERE C.PARTY_CODE=H.MM_PARTY_CODE AND C.MACHINE_NO=H.MM_MACHINE_NO AND C.PARTY_CODE='" + txtPartyCode.getText() + "' AND MACHINE_CLOSE_IND=1 AND C.STATUS_TYPE='CLOSURE' AND DOC_NO LIKE 'PMC%' AND CLOSED_IND!=1";
            }
            if (txtDocNo.getText().startsWith("MPA")) {
//                aList.SQL = "SELECT DISTINCT C.MACHINE_NO FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE C,PRODUCTION.FELT_MACHINE_MASTER_DETAIL D WHERE C.PARTY_CODE=D.MM_PARTY_CODE AND C.MACHINE_NO=D.MM_MACHINE_NO AND C.POSITION_NO=D.MM_MACHINE_POSITION AND C.PARTY_CODE='" + txtPartyCode.getText() + "' AND POSITION_CLOSE_IND=1 AND C.STATUS_TYPE='CLOSURE' AND DOC_NO LIKE 'MPC%' ";
                aList.SQL = "SELECT DISTINCT C.MACHINE_NO FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE C,PRODUCTION.FELT_MACHINE_MASTER_DETAIL D WHERE C.PARTY_CODE=D.MM_PARTY_CODE AND C.MACHINE_NO=D.MM_MACHINE_NO AND C.POSITION_NO=D.MM_MACHINE_POSITION AND C.PARTY_CODE='" + txtPartyCode.getText() + "' AND POSITION_CLOSE_IND=1 AND C.STATUS_TYPE='CLOSURE' AND DOC_NO LIKE 'MPC%' AND CLOSED_IND!=1";
            }

            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                txtMachineNo.setText(aList.ReturnVal);
            }
        }
    }//GEN-LAST:event_txtMachineNoKeyPressed

    private void txtPositionNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPositionNoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            //aList.SQL = "SELECT MM_MACHINE_POSITION FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MACHINE_CLOSE_IND=0 AND MM_PARTY_CODE= '" + txtPartyCode.getText().trim() + "' AND MM_MACHINE_NO='" + txtMachineNo.getText().trim() + "' ";
            //aList.SQL = "SELECT C.POSITION_NO FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE C,PRODUCTION.FELT_MACHINE_MASTER_DETAIL D WHERE C.PARTY_CODE=D.MM_PARTY_CODE AND C.MACHINE_NO=D.MM_MACHINE_NO AND C.POSITION_NO=D.MM_MACHINE_POSITION AND MACHINE_CLOSE_IND=1 AND C.STATUS_TYPE='CLOSURE' AND DOC_NO LIKE 'MPC%' ";
//            aList.SQL = "SELECT DISTINCT C.POSITION_NO,D.MM_MACHINE_POSITION_DESC FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE C,PRODUCTION.FELT_MACHINE_MASTER_DETAIL D WHERE C.PARTY_CODE=D.MM_PARTY_CODE AND C.MACHINE_NO=D.MM_MACHINE_NO AND C.POSITION_NO=D.MM_MACHINE_POSITION AND C.PARTY_CODE='" + txtPartyCode.getText() + "' AND C.MACHINE_NO='" + txtMachineNo.getText() + "' AND POSITION_CLOSE_IND=1 AND C.STATUS_TYPE='CLOSURE' AND DOC_NO LIKE 'MPC%' ";
            aList.SQL = "SELECT DISTINCT C.POSITION_NO,D.MM_MACHINE_POSITION_DESC FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE C,PRODUCTION.FELT_MACHINE_MASTER_DETAIL D WHERE C.PARTY_CODE=D.MM_PARTY_CODE AND C.MACHINE_NO=D.MM_MACHINE_NO AND C.POSITION_NO=D.MM_MACHINE_POSITION AND C.PARTY_CODE='" + txtPartyCode.getText() + "' AND C.MACHINE_NO='" + txtMachineNo.getText() + "' AND POSITION_CLOSE_IND=1 AND C.STATUS_TYPE='CLOSURE' AND DOC_NO LIKE 'MPC%' AND CLOSED_IND!=1";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;

            if (aList.ShowLOV()) {
                txtPositionNo.setText(aList.ReturnVal);
                txtPositionDesc.setText(clsmachinesurvey.getpositiondesc(aList.ReturnVal));
            }
        }
    }//GEN-LAST:event_txtPositionNoKeyPressed

    private void txtPositionNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPositionNoFocusLost
        // TODO add your handling code here:
        try {
            if (!txtPositionNo.getText().equals("")) {
                txtPositionDesc.setText(clsmachinesurvey.getpositiondesc(txtPositionNo.getText()));
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_txtPositionNoFocusLost

    private void mnuPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPositionActionPerformed
        // TODO add your handling code here:
        //Now Generate new document no.
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = clsPartyMachineReOpen.ModuleID;

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        SelPrefix = aList.Prefix; //Selected Prefix;
        SelSuffix = aList.Suffix;
        FFNo = 257;
        SetupApproval();
        //Display newly generated document no.
        txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsPartyMachineReOpen.ModuleID, FFNo, false));
        txtDocDate.requestFocus();

        jLabel13.setVisible(true);
        txtMachineNo.setVisible(true);

        jLabel15.setVisible(true);
        txtPositionNo.setVisible(true);
        txtPositionDesc.setVisible(true);

        lblTitle.setText("ReOpen Party Machine Position - " + txtDocNo.getText());
        //lblTitle.setBackground(Color.BLUE);
        lblTitle.setBackground(Color.GRAY);
    }//GEN-LAST:event_mnuPositionActionPerformed

    private void btnShowPartyMstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowPartyMstActionPerformed
        // TODO add your handling code here:
        if (txtDocNo.getText().startsWith("FPA") && !data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER WHERE MACHINE_CLOSE_IND=1 AND MM_PARTY_CODE='" + txtPartyCode.getText() + "'")) {
            JOptionPane.showMessageDialog(null, "Machine Master not closed.");
            return;
        } else {
            if (!txtPartyCode.getText().equals("") && !txtMachineNo.getText().equals("")) {
                AppletFrame aFrame = new AppletFrame("Machine Master");
                aFrame.startAppletEx("EITLERP.Production.FeltMachineSurvey.frmmachinesurvey", "Machine Master");
                frmmachinesurvey ObjDoc = (frmmachinesurvey) aFrame.ObjApplet;
                ObjDoc.requestFocus();
                ObjDoc.FindEx(2, txtPartyCode.getText(), txtMachineNo.getText());
            } else if (!txtPartyCode.getText().equals("")) {
                AppletFrame aFrame = new AppletFrame("Machine Master");
                aFrame.startAppletEx("EITLERP.Production.FeltMachineSurvey.frmmachinesurvey", "Machine Master");
                frmmachinesurvey ObjDoc = (frmmachinesurvey) aFrame.ObjApplet;
                ObjDoc.requestFocus();
                ObjDoc.FindEx2(2, txtPartyCode.getText());
            }
        }
    }//GEN-LAST:event_btnShowPartyMstActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton btnShowPartyMst;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdPurposeBig;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JMenuItem mnuMachine;
    private javax.swing.JMenuItem mnuParty;
    private javax.swing.JMenuItem mnuPosition;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtMachineNo;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtPartyName;
    private javax.swing.JTextField txtPositionDesc;
    private javax.swing.JTextField txtPositionNo;
    private javax.swing.JTextField txtPurpose;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables

    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    private void SetFields(boolean pStat) {
        txtDocNo.setEnabled(pStat);
        txtDocDate.setEnabled(pStat);
        txtPurpose.setEnabled(pStat);
        txtPartyCode.setEnabled(pStat);
        txtMachineNo.setEnabled(pStat);
        txtPositionNo.setEnabled(pStat);

        jLabel13.setVisible(true);
        txtMachineNo.setVisible(true);
        jLabel15.setVisible(true);
        txtPositionNo.setVisible(true);
        txtPositionDesc.setVisible(true);

        if (txtDocNo.getText().startsWith("FPA")) {
            jLabel13.setVisible(false);
            txtMachineNo.setVisible(false);
            jLabel15.setVisible(false);
            txtPositionNo.setVisible(false);
            txtPositionDesc.setVisible(false);
        }
        if (txtDocNo.getText().startsWith("PMA")) {
            jLabel13.setVisible(true);
            txtMachineNo.setVisible(true);
            jLabel15.setVisible(false);
            txtPositionNo.setVisible(false);
            txtPositionDesc.setVisible(false);
        }

        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);

        SetupApproval();

    }

    private void ClearFields() {
        txtDocNo.setText("");
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtPurpose.setText("");
        txtFromRemarks.setText("");
        txtPartyCode.setText("");
        txtPartyName.setText("");
        txtMachineNo.setText("");
        txtPositionNo.setText("");
        txtPositionDesc.setText("");

        FormatGridA();
        FormatGridHS();
    }

    //Didplay data on the Screen
    private void DisplayData() {
        //if ((int)ObjDoc.getAttribute("MODULE_ID").getVal()==80) {
        //=========== Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjDoc.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                }

                if (ObjDoc.getAttribute("APPROVED").getInt() != 1) {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (ObjDoc.getAttribute("CANCELLED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }

            }
        } catch (Exception c) {

        }
            //============================================//

        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            int ModuleID = clsPartyMachineReOpen.ModuleID;

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleID)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        GenerateCombos();
        txtDocNo.setText((String) ObjDoc.getAttribute("DOC_NO").getObj());
        lblTitle.setText("ReOpen Party Machine Position - " + txtDocNo.getText());
        lblRevNo.setText(Integer.toString((int) ObjDoc.getAttribute("REVISION_NO").getVal()));
        txtDocDate.setText(EITLERPGLOBAL.formatDate((String) ObjDoc.getAttribute("DOC_DATE").getObj()));
        txtPartyCode.setText((String) ObjDoc.getAttribute("PARTY_CODE").getObj());
        txtPartyName.setText((String) ObjDoc.getAttribute("PARTY_NAME").getObj());
        txtPurpose.setText((String) ObjDoc.getAttribute("PURPOSE").getObj());
        txtMachineNo.setText((String) ObjDoc.getAttribute("MACHINE_NO").getObj());
        txtPositionNo.setText((String) ObjDoc.getAttribute("POSITION_NO").getObj());
        txtPositionDesc.setText((String) ObjDoc.getAttribute("POSITION_DESC").getObj());

        EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) ObjDoc.getAttribute("HIERARCHY_ID").getVal());

        if (ObjDoc.getAttribute("DOC_NO").getObj().toString().startsWith("MPA")) {
            jLabel13.setVisible(true);
            txtMachineNo.setVisible(true);
            jLabel15.setVisible(true);
            txtPositionNo.setVisible(true);
            txtPositionDesc.setVisible(true);
        } else if (ObjDoc.getAttribute("DOC_NO").getObj().toString().startsWith("PMA")) {
            jLabel13.setVisible(true);
            txtMachineNo.setVisible(true);
            jLabel15.setVisible(false);
            txtPositionNo.setVisible(false);
            txtPositionDesc.setVisible(false);
        } else {
            jLabel13.setVisible(false);
            txtMachineNo.setVisible(false);
            jLabel15.setVisible(false);
            txtPositionNo.setVisible(false);
            txtPositionDesc.setVisible(false);
        }

        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List = new HashMap();
        String DocNo = (String) ObjDoc.getAttribute("DOC_NO").getObj();
        List = clsFeltProductionApprovalFlow.getDocumentFlow(clsPartyMachineReOpen.ModuleID, DocNo);
        for (int i = 1; i <= List.size(); i++) {
            clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
            Object[] rowData = new Object[7];

            rowData[0] = Integer.toString(i);
            rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
            rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
            rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
            rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
            rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
            rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

            DataModelA.addRow(rowData);
        }

        //Showing Audit Trial History
        FormatGridHS();
        HashMap History = clsPartyMachineReOpen.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
        for (int i = 1; i <= History.size(); i++) {
            clsPartyMachineReOpen ObjHistory = (clsPartyMachineReOpen) History.get(Integer.toString(i));
            Object[] rowData = new Object[6];

            rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
            rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (long) ObjHistory.getAttribute("UPDATED_BY").getVal());
            rowData[2] = formatDateTime(ObjHistory.getAttribute("ENTRY_DATE").getString());

            String ApprovalStatus = "";

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus = "Approved";
            }

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus = "Final Approved";
            }

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus = "Waiting";
            }

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus = "Rejected";
            }

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus = "Pending";
            }

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus = "Skiped";
            }

            rowData[3] = ApprovalStatus;
            rowData[4] = (String) ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
            rowData[5] = (String) ObjHistory.getAttribute("FROM_IP").getObj();

            DataModelHS.addRow(rowData);
        }
        //============================================================//
        //}
        //else {
        //    MoveNext();
        //}

    }

    //Sets data to the Class Object
    private void SetData() {
        ObjDoc.setAttribute("PREFIX", SelPrefix);
        ObjDoc.setAttribute("SUFFIX", SelSuffix);
        ObjDoc.setAttribute("FFNO", FFNo);

        ObjDoc.setAttribute("DOC_NO", txtDocNo.getText());
        ObjDoc.setAttribute("DOC_DATE", EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
        ObjDoc.setAttribute("PARTY_CODE", txtPartyCode.getText());
        ObjDoc.setAttribute("PARTY_NAME", txtPartyName.getText());
        ObjDoc.setAttribute("MACHINE_NO", txtMachineNo.getText());
        ObjDoc.setAttribute("POSITION_NO", txtPositionNo.getText());
        ObjDoc.setAttribute("POSITION_DESC", txtPositionDesc.getText());
        ObjDoc.setAttribute("PURPOSE", txtPurpose.getText());

        //----- Update Approval Specific Fields -----------//
        ObjDoc.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjDoc.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjDoc.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjDoc.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            ObjDoc.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjDoc.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjDoc.setAttribute("APPROVAL_STATUS", "R");
        }

        if (OpgHold.isSelected()) {
            ObjDoc.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjDoc.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            ObjDoc.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        } else {
            ObjDoc.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            ObjDoc.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }

    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID='" + clsPartyMachineReOpen.ModuleID + "' ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID='" + clsPartyMachineReOpen.ModuleID + "' ");
        }
        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //

    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsFeltProductionApprovalFlow.getRemainingUsers(clsPartyMachineReOpen.ModuleID, (String) ObjDoc.getAttribute("DOC_NO").getObj());
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
        }

    }

    private void SetupApproval() {

        if (cmbHierarchy.getItemCount() > 1) {
            cmbHierarchy.setEnabled(true);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {

            int FromUserID = clsFeltProductionApprovalFlow.getFromID(clsPartyMachineReOpen.ModuleID, (String) ObjDoc.getAttribute("DOC_NO").getObj());
            lnFromID = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = clsFeltProductionApprovalFlow.getFromRemarks(clsPartyMachineReOpen.ModuleID, FromUserID, (String) ObjDoc.getAttribute("DOC_NO").getObj());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6095, 60951)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        cmdEdit.setEnabled(true);

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6095, 60953)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6095, 60955)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {

        //Now Generate new document no.
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = clsPartyMachineReOpen.ModuleID;

        if (aList.ShowList()) {
            EditMode = EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix = aList.Prefix; //Selected Prefix;
            SelSuffix = aList.Suffix;
            FFNo = aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsPartyMachineReOpen.ModuleID, FFNo, false));
            txtDocDate.requestFocus();

            lblTitle.setText("ReOpen Party Machine Position - " + txtDocNo.getText());
            //lblTitle.setBackground(Color.BLUE);
            lblTitle.setBackground(Color.GRAY);

        } else {
            JOptionPane.showMessageDialog(null, "You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }

    }

    private void Edit() {
        String lDocNo = (String) ObjDoc.getAttribute("DOC_NO").getObj();
        if (ObjDoc.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {

            EITLERPGLOBAL.ChangeCursorToWait(this);

            EditMode = EITLERPGLOBAL.EDIT;
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//

            if (clsFeltProductionApprovalFlow.IsCreator(clsPartyMachineReOpen.ModuleID, lDocNo) || clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 60952)) {
                SetFields(true);
            } else {
                EnableApproval();
            }

            DisableToolbar();
            txtDocDate.requestFocus();

            EITLERPGLOBAL.ChangeCursorToDefault(this);

        } else {
            JOptionPane.showMessageDialog(null, "You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }

    private void Delete() {

        String lDocNo = (String) ObjDoc.getAttribute("DOC_NO").getObj();

        if (ObjDoc.CanDelete(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            if (ObjDoc.Delete(EITLERPGLOBAL.gNewUserID)) {
                MoveLast();
            } else {

            }
        } else {
            JOptionPane.showMessageDialog(null, "You cannot delete this record. It is either approved/rejected record or waiting approval for other user or is referred in other documents");
        }
    }

    private void Save() {

        //Form level validations
        if (txtPartyCode.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter Party Code");
            return;
        }

        if ((txtDocNo.getText().startsWith("PMA") || txtDocNo.getText().startsWith("MPA")) && txtMachineNo.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter Machine No");
            return;
        }

        if (txtDocNo.getText().startsWith("MPA") && txtPositionNo.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter Machine Position No");
            return;
        }

        if (txtDocNo.getText().startsWith("FPA") && !txtDocNo.getText().equals("")) {
            if (!data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CLOSE_IND=1 AND PARTY_CODE='" + txtPartyCode.getText() + "' ")) {
                JOptionPane.showMessageDialog(null, "Party not close in Party Master");
                return;
            }
        }

        if (txtDocNo.getText().startsWith("PMA") && !txtMachineNo.getText().equals("")) {
            if (!data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER WHERE MACHINE_CLOSE_IND=1 AND MM_PARTY_CODE='" + txtPartyCode.getText() + "' AND MM_MACHINE_NO='" + txtMachineNo.getText() + "'")) {
                JOptionPane.showMessageDialog(null, "Party Machine not close in Machine Master");
                return;
            }
        }

        if (txtDocNo.getText().startsWith("MPA") && !txtMachineNo.getText().equals("") && !txtPositionNo.getText().equals("")) {
            if (!data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE POSITION_CLOSE_IND=1 AND MM_PARTY_CODE='" + txtPartyCode.getText() + "' AND MM_MACHINE_NO='" + txtMachineNo.getText() + "' AND MM_MACHINE_POSITION='" + txtPositionNo.getText() + "' ")) {
                JOptionPane.showMessageDialog(null, "Party Machine Position not close in Machine Master");
                return;
            }
        }

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please select the hierarchy.");
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null, "Please select the Approval Action");
            return;
        }

        if (txtPurpose.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter purpose");
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter the remarks for rejection");
            return;
        }

        EITLERPGLOBAL.ChangeCursorToWait(this);

        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjDoc.Insert()) {
                MoveLast();
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while saving. Error is " + ObjDoc.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjDoc.Update()) {
                //Nothing to do
                if (OpgFinal.isSelected()) {
                    String DOC_NO = txtDocNo.getText();
                    String DOC_DATE = txtDocDate.getText();
                    String Party_Code = txtPartyCode.getText();
                    
                    
                    try {
                        Connection Conn1;
                        Statement stmt1;
                        ResultSet rsData1;

                        Conn1 = data.getConn();
                        stmt1 = Conn1.createStatement();
                        rsData1 = stmt1.executeQuery("SELECT * FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE WHERE DOC_NO = '" + DOC_NO + "' ");
                        rsData1.first();

                        String partyCd = rsData1.getString("PARTY_CODE");
                        String machineNo = rsData1.getString("MACHINE_NO");
                        String positionNo = rsData1.getString("POSITION_NO");
                        try {
                            Connection Conn;
                            Statement stmt;
                            ResultSet rsData;
                            
                            String prSQL = "";
                            Conn = data.getConn();
                            stmt = Conn.createStatement();

                            if (DOC_NO.startsWith("FPA")) {
                                prSQL = "SELECT PR_PIECE_STAGE,COALESCE(PR_PIECE_NO,'') AS PR_PIECE_NO,COALESCE(PR_MACHINE_NO,'') AS PR_MACHINE_NO,COALESCE(PR_POSITION_NO,'') AS PR_POSITION_NO FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PARTY_CODE = '" + partyCd + "' AND PR_PIECE_STAGE IN ('WEAVING','MENDING','NEEDLING','FINISHING','IN STOCK','BSR')  ORDER BY PR_PIECE_STAGE,PR_PIECE_NO ";                                
                            }

                            if (DOC_NO.startsWith("PMA")) {
                                prSQL = "SELECT PR_PIECE_STAGE,COALESCE(PR_PIECE_NO,'') AS PR_PIECE_NO,COALESCE(PR_MACHINE_NO,'') AS PR_MACHINE_NO,COALESCE(PR_POSITION_NO,'') AS PR_POSITION_NO FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PARTY_CODE = '" + partyCd + "' AND PR_MACHINE_NO = " + machineNo + " AND PR_PIECE_STAGE IN ('WEAVING','MENDING','NEEDLING','FINISHING','IN STOCK','BSR')  ORDER BY PR_PIECE_STAGE,PR_PIECE_NO ";
                            }

                            if (DOC_NO.startsWith("MPA")) {
                                prSQL = "SELECT PR_PIECE_STAGE,COALESCE(PR_PIECE_NO,'') AS PR_PIECE_NO,COALESCE(PR_MACHINE_NO,'') AS PR_MACHINE_NO,COALESCE(PR_POSITION_NO,'') AS PR_POSITION_NO FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PARTY_CODE = '" + partyCd + "' AND PR_MACHINE_NO = " + machineNo + " AND PR_POSITION_NO = " + positionNo + " AND PR_PIECE_STAGE IN ('WEAVING','MENDING','NEEDLING','FINISHING','IN STOCK','BSR')  ORDER BY PR_PIECE_STAGE,PR_PIECE_NO ";                                
                            }

                            System.out.println("prSQL : " + prSQL);
                            
                            rsData = stmt.executeQuery(prSQL);
                            rsData.first();

                            if (rsData.getRow() > 0) {
                                while (!rsData.isAfterLast()) {
                                    
                                    if (DOC_NO.startsWith("FPA")) {
                                        data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_CLOSURE_REOPEN_IND='0',PR_REOPEN_REMARK='PARTY REOPEN',PR_REOPEN_DATE='"+EITLERPGLOBAL.getCurrentDateDB()+"' WHERE PR_PIECE_NO = '" + rsData.getString("PR_PIECE_NO") + "' ");
                                    }

                                    if (DOC_NO.startsWith("PMA")) {
                                        data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_CLOSURE_REOPEN_IND='0',PR_REOPEN_REMARK='PARTY MACHINE REOPEN',PR_REOPEN_DATE='"+EITLERPGLOBAL.getCurrentDateDB()+"' WHERE PR_PIECE_NO = '" + rsData.getString("PR_PIECE_NO") + "' ");
                                    }

                                    if (DOC_NO.startsWith("MPA")) {
                                        data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_CLOSURE_REOPEN_IND='0',PR_REOPEN_REMARK='PARTY MACHINE POSITION REOPEN',PR_REOPEN_DATE='"+EITLERPGLOBAL.getCurrentDateDB()+"' WHERE PR_PIECE_NO = '" + rsData.getString("PR_PIECE_NO") + "' ");
                                    }

                                    rsData.next();
                                }
                            }  
                            
                            
                            /* START - Party Amend, Machine Amend open  */
                            
                            //partyCd
                            //machineNo
                            //positionNo
                            
                                if (DOC_NO.startsWith("FPA")) {
                                    //All Machine Amend open
                                    try{
                                        ResultSet rsPartyMachines = data.getResult("SELECT * FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER WHERE MM_PARTY_CODE='"+partyCd+"'");
                                        rsPartyMachines.first();
                                        
                                        while(!rsPartyMachines.isAfterLast())
                                        {
                                            String AmendDocNo = EITLERP.clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 725, 214, true);
                                            //insert prod doc data
                                            data.Execute("INSERT INTO PRODUCTION.FELT_PROD_DOC_DATA  " +
                                            "(MODULE_ID, DOC_NO, DOC_DATE, USER_ID, STATUS, TYPE, REMARKS, SR_NO, FROM_USER_ID, FROM_REMARKS, RECEIVED_DATE, ACTION_DATE, CHANGED, CHANGED_DATE) " +
                                            "VALUES " +
                                            "('725', '"+AmendDocNo+"', '"+EITLERPGLOBAL.getCurrentDateDB()+"', '339', 'W', 'C', 'Auto Entry for evaluation', '1', 0, '', '"+EITLERPGLOBAL.getCurrentDateTimeDB()+"', '0000-00-00 00:00:00', 0, '0000-00-00 00:00:00')");
                                            
                                            data.Execute("INSERT INTO PRODUCTION.FELT_PROD_DOC_DATA  " +
                                            "(MODULE_ID, DOC_NO, DOC_DATE, USER_ID, STATUS, TYPE, REMARKS, SR_NO, FROM_USER_ID, FROM_REMARKS, RECEIVED_DATE, ACTION_DATE, CHANGED, CHANGED_DATE) " +
                                            "VALUES " +
                                            "('725', '"+AmendDocNo+"', '"+EITLERPGLOBAL.getCurrentDateDB()+"', '306', 'P', 'F', 'Auto Entry for evaluation', '2', 0, '', '"+EITLERPGLOBAL.getCurrentDateTimeDB()+"', '0000-00-00 00:00:00', 0, '0000-00-00 00:00:00')");
                                            //insert header part
                                            String Doc_No = partyCd+machineNo;
                                            data.Execute("INSERT INTO PRODUCTION.FELT_MACHINE_MASTER_AMEND_HEADER " +
                                            "(MM_DOC_NO, MM_PARTY_CODE, MM_PARTY_NAME, MM_INCHARGE_NAME, MM_STATION, MM_MACHINE_NO, MM_MACHINE_TYPE_FORMING, MM_PAPER_GRADE, MM_MACHINE_SPEED_RANGE, MM_PAPER_GSM_RANGE, MM_MACHINE_TYPE_PRESSING, MM_FURNISH, MM_TYPE_OF_FILLER, MM_WIRE_DETAIL_1, MM_WIRE_DETAIL_2, MM_WIRE_DETAIL_3, MM_WIRE_DETAIL_4, MM_PAPER_DECKLE_AFTER_WIRE, MM_PAPER_DECKLE_AFTER_PRESS, MM_PAPER_DECKLE_AT_POPE_REEL, MM_DRYER_SECTION, MM_ZONE, MM_CAPACITY, MM_MACHINE_STATUS, MM_ZONE_REPRESENTATIVE, MM_DATE_OF_UPDATE, MM_TOTAL_DRYER_GROUP, MM_UNIRUM_GROUP, MM_CONVENTIONAL_GROUP, MM_HOOD_TYPE, MM_SIZE_PRESS, MM_SIZE_PRESS_POSITION, MM_SHEET_DRYNESS_SIZE_PRESS, HIERARCHY_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, APPROVED, APPROVED_DATE, REJECTED, REJECTED_DATE, CANCELED, CHANGED, CHANGED_DATE, REJECTED_REMARKS, MM_AMEND_NO, MM_DRIVE_TYPE, MM_MACHINE_MAKE) " +
                                            "SELECT MM_DOC_NO, MM_PARTY_CODE, MM_PARTY_NAME, MM_INCHARGE_NAME, MM_STATION, MM_MACHINE_NO, MM_MACHINE_TYPE_FORMING, MM_PAPER_GRADE, MM_MACHINE_SPEED_RANGE, MM_PAPER_GSM_RANGE, MM_MACHINE_TYPE_PRESSING, MM_FURNISH, MM_TYPE_OF_FILLER, MM_WIRE_DETAIL_1, MM_WIRE_DETAIL_2, MM_WIRE_DETAIL_3, MM_WIRE_DETAIL_4, MM_PAPER_DECKLE_AFTER_WIRE, MM_PAPER_DECKLE_AFTER_PRESS, MM_PAPER_DECKLE_AT_POPE_REEL, MM_DRYER_SECTION, MM_ZONE, MM_CAPACITY, MM_MACHINE_STATUS, MM_ZONE_REPRESENTATIVE, MM_DATE_OF_UPDATE, MM_TOTAL_DRYER_GROUP, MM_UNIRUM_GROUP, MM_CONVENTIONAL_GROUP, MM_HOOD_TYPE, MM_SIZE_PRESS, MM_SIZE_PRESS_POSITION, MM_SHEET_DRYNESS_SIZE_PRESS, '4442', '339', '"+EITLERPGLOBAL.getCurrentDateDB()+"', 0, '0000-00-00', 0, '0000-00-00', 0, '0000-00-00', 0, 0, '0000-00-00', '', '"+AmendDocNo+"', MM_DRIVE_TYPE, MM_MACHINE_MAKE FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER WHERE MM_DOC_NO='"+rsPartyMachines.getString("MM_DOC_NO")+"' AND MM_PARTY_CODE='"+rsPartyMachines.getString("MM_PARTY_CODE")+"' AND MM_MACHINE_NO='"+rsPartyMachines.getString("MM_MACHINE_NO")+"'");

                                            data.Execute("INSERT INTO PRODUCTION.FELT_MACHINE_MASTER_AMEND_DETAIL " +
                                            "( " +
                                            "MM_AMEND_NO,SR_NO, MM_DOC_NO, MM_PARTY_CODE, MM_MACHINE_NO, MM_MACHINE_POSITION, MM_MACHINE_POSITION_DESC, MM_COMBINATION_CODE, MM_PRESS_TYPE, MM_PRESS_ROLL_DAI_MM, MM_PRESS_ROLL_FACE_TOTAL_MM, MM_PRESS_ROLL_FACE_NET_MM, MM_FELT_ROLL_WIDTH_MM, MM_PRESS_LOAD, MM_VACCUM_CAPACITY, MM_UHLE_BOX, MM_HP_SHOWER, MM_LP_SHOWER, MM_FELT_LENGTH, MM_FELT_WIDTH, MM_FELT_GSM, MM_FELT_WEIGHT, MM_FELT_TYPE, MM_FELT_STYLE, MM_AVG_LIFE, MM_AVG_PRODUCTION, MM_FELT_CONSUMPTION, MM_DINESH_SHARE, MM_REMARK_DESIGN, MM_REMARK_GENERAL, MM_NO_DRYER_CYLINDER, MM_CYLINDER_DIA_MM, MM_CYLINDER_FACE_NET_MM, MM_DRIVE_TYPE, MM_GUIDE_TYPE, MM_GUIDE_PAM_TYPE, MM_VENTILATION_TYPE, MM_FABRIC_LENGTH, MM_FABRIC_WIDTH, MM_SIZE_M2, MM_SCREEN_TYPE, MM_STYLE_DRY, MM_CFM_DRY, MM_AVG_LIFE_DRY, MM_CONSUMPTION_DRY, MM_DINESH_SHARE_DRY, MM_REMARK_DRY, MM_ITEM_CODE, MM_GRUP, MM_BASE_GSM, MM_WEB_GSM, MM_TOTAL_GSM, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, CHANGED_DATE, CHANGED, MM_FELT_LIFE, MM_TPD, MM_TOTAL_PRODUCTION, MM_PAPER_FELT, MM_POSITION_WISE,  MM_VACCUM_IN_UHLE_BOX, MM_FELT_WASHING_CHEMICALS, MM_HARDNESS, MM_P_NO_TEMP, MM_M_NO_TEMP, MM_MACHINE_FLOOR, MM_TYPE_OF_FORMING_FABRIC, MM_PRESS_ROLL_FOR_1ST_NIP_FACE_LENGTH, MM_PRESS_ROLL_FOR_2ND_NIP_FACE_LENGTH, MM_PRESS_ROLL_FOR_3RD_NIP_FACE_LENGTH, MM_PRESS_ROLL_FOR_4TH_NIP_FACE_LENGTH, MM_WASH_ROLL_SHOWER, MM_HP_SHOWER_NOZZLES, MM_UHLE_BOX_VACUUM, MM_CHEMICAL_SHOWER, MM_1ST_LINEAR_NIP_PRESSURE, MM_2ND_LINEAR_NIP_PRESSURE, MM_3RD_LINEAR_NIP_PRESSURE, MM_4TH_LINEAR_NIP_PRESSURE, MM_LOADING_SYSTEM, MM_LP_SHOWER_NOZZLES, MM_1ST_ROLL_MATERIAL, MM_2ND_ROLL_MATERIAL, MM_3RD_ROLL_MATERIAL, MM_4TH_ROLL_MATERIAL, MM_5TH_ROLL_MATERIAL, MM_6TH_ROLL_MATERIAL, MM_7TH_ROLL_MATERIAL, MM_8TH_ROLL_MATERIAL, MM_BATT_GSM, MM_FIBERS_USED, MM_STRETCH, MM_MG, MM_YANKEE, MM_MG_YANKEE_NIP_LOAD, MM_NUMBER_OF_FORMING_FABRIC, MM_CATEGORY, UC_CODE, MM_POSITION_DESIGN_NO, MM_UPN_NO, MM_MAX_CIRCUIT_LENGTH, MM_MIN_CIRCUIT_LENGTH, GOAL " +
                                            ") " +
                                            "SELECT '"+AmendDocNo+"',SR_NO, MM_DOC_NO, MM_PARTY_CODE, MM_MACHINE_NO, MM_MACHINE_POSITION, MM_MACHINE_POSITION_DESC, MM_COMBINATION_CODE, MM_PRESS_TYPE, MM_PRESS_ROLL_DAI_MM, MM_PRESS_ROLL_FACE_TOTAL_MM, MM_PRESS_ROLL_FACE_NET_MM, MM_FELT_ROLL_WIDTH_MM, MM_PRESS_LOAD, MM_VACCUM_CAPACITY, MM_UHLE_BOX, MM_HP_SHOWER, MM_LP_SHOWER, MM_FELT_LENGTH, MM_FELT_WIDTH, MM_FELT_GSM, MM_FELT_WEIGHT, MM_FELT_TYPE, MM_FELT_STYLE, MM_AVG_LIFE, MM_AVG_PRODUCTION, MM_FELT_CONSUMPTION, MM_DINESH_SHARE, MM_REMARK_DESIGN, MM_REMARK_GENERAL, MM_NO_DRYER_CYLINDER, MM_CYLINDER_DIA_MM, MM_CYLINDER_FACE_NET_MM, MM_DRIVE_TYPE, MM_GUIDE_TYPE, MM_GUIDE_PAM_TYPE, MM_VENTILATION_TYPE, MM_FABRIC_LENGTH, MM_FABRIC_WIDTH, MM_SIZE_M2, MM_SCREEN_TYPE, MM_STYLE_DRY, MM_CFM_DRY, MM_AVG_LIFE_DRY, MM_CONSUMPTION_DRY, MM_DINESH_SHARE_DRY, MM_REMARK_DRY, MM_ITEM_CODE, MM_GRUP, MM_BASE_GSM, MM_WEB_GSM, MM_TOTAL_GSM, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, CHANGED_DATE, CHANGED, MM_FELT_LIFE, MM_TPD, MM_TOTAL_PRODUCTION, MM_PAPER_FELT, MM_POSITION_WISE,  MM_VACCUM_IN_UHLE_BOX, MM_FELT_WASHING_CHEMICALS, MM_HARDNESS, MM_P_NO_TEMP, MM_M_NO_TEMP, MM_MACHINE_FLOOR, MM_TYPE_OF_FORMING_FABRIC, MM_PRESS_ROLL_FOR_1ST_NIP_FACE_LENGTH, MM_PRESS_ROLL_FOR_2ND_NIP_FACE_LENGTH, MM_PRESS_ROLL_FOR_3RD_NIP_FACE_LENGTH, MM_PRESS_ROLL_FOR_4TH_NIP_FACE_LENGTH, MM_WASH_ROLL_SHOWER, MM_HP_SHOWER_NOZZLES, MM_UHLE_BOX_VACUUM, MM_CHEMICAL_SHOWER, MM_1ST_LINEAR_NIP_PRESSURE, MM_2ND_LINEAR_NIP_PRESSURE, MM_3RD_LINEAR_NIP_PRESSURE, MM_4TH_LINEAR_NIP_PRESSURE, MM_LOADING_SYSTEM, MM_LP_SHOWER_NOZZLES, MM_1ST_ROLL_MATERIAL, MM_2ND_ROLL_MATERIAL, MM_3RD_ROLL_MATERIAL, MM_4TH_ROLL_MATERIAL, MM_5TH_ROLL_MATERIAL, MM_6TH_ROLL_MATERIAL, MM_7TH_ROLL_MATERIAL, MM_8TH_ROLL_MATERIAL, MM_BATT_GSM, MM_FIBERS_USED, MM_STRETCH, MM_MG, MM_YANKEE, MM_MG_YANKEE_NIP_LOAD, MM_NUMBER_OF_FORMING_FABRIC, MM_CATEGORY, UC_CODE, MM_POSITION_DESIGN_NO, MM_UPN_NO, MM_MAX_CIRCUIT_LENGTH, MM_MIN_CIRCUIT_LENGTH, GOAL  " +
                                            " " +
                                            "FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL where MM_DOC_NO='"+rsPartyMachines.getString("MM_DOC_NO")+"' AND MM_PARTY_CODE='"+rsPartyMachines.getString("MM_PARTY_CODE")+"' AND MM_MACHINE_NO='"+rsPartyMachines.getString("MM_MACHINE_NO")+"'");
                                            
                                            rsPartyMachines.next();
                                        }   
                                    }catch(Exception e)
                                    {
                                        e.printStackTrace();
                                    }
                                }
                                if (DOC_NO.startsWith("PMA") || DOC_NO.startsWith("MPA")) {
                                    //Selected machineNo Machine Amend open
                                    try{
                                        //ResultSet rsPartyMachines = data.getResult("SELECT * FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER WHERE MM_PARTY_CODE='"+partyCd+"'  AND MACHINE_CLOSE_IND=0 AND MACHINE_LOCK_IND=0 AND MACHINE_MILL_CLOSED_IND=0");
                                        //rsPartyMachines.first();
                                        
                                            String AmendDocNo = EITLERP.clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 725, 214, true);
                                            //insert prod doc data
                                            data.Execute("INSERT INTO PRODUCTION.FELT_PROD_DOC_DATA  " +
                                            "(MODULE_ID, DOC_NO, DOC_DATE, USER_ID, STATUS, TYPE, REMARKS, SR_NO, FROM_USER_ID, FROM_REMARKS, RECEIVED_DATE, ACTION_DATE, CHANGED, CHANGED_DATE) " +
                                            "VALUES " +
                                            "('725', '"+AmendDocNo+"', '"+EITLERPGLOBAL.getCurrentDateDB()+"', '339', 'W', 'C', 'Auto Entry for evaluation', '1', 0, '', '"+EITLERPGLOBAL.getCurrentDateTimeDB()+"', '0000-00-00 00:00:00', 0, '0000-00-00 00:00:00')");
                                            
                                            data.Execute("INSERT INTO PRODUCTION.FELT_PROD_DOC_DATA  " +
                                            "(MODULE_ID, DOC_NO, DOC_DATE, USER_ID, STATUS, TYPE, REMARKS, SR_NO, FROM_USER_ID, FROM_REMARKS, RECEIVED_DATE, ACTION_DATE, CHANGED, CHANGED_DATE) " +
                                            "VALUES " +
                                            "('725', '"+AmendDocNo+"', '"+EITLERPGLOBAL.getCurrentDateDB()+"', '306', 'P', 'F', 'Auto Entry for evaluation', '2', 0, '', '"+EITLERPGLOBAL.getCurrentDateTimeDB()+"', '0000-00-00 00:00:00', 0, '0000-00-00 00:00:00')");
                                           
                                            String Doc_No = partyCd+machineNo;
                                            //insert header part
                                            data.Execute("INSERT INTO PRODUCTION.FELT_MACHINE_MASTER_AMEND_HEADER " +
                                            "(MM_DOC_NO, MM_PARTY_CODE, MM_PARTY_NAME, MM_INCHARGE_NAME, MM_STATION, MM_MACHINE_NO, MM_MACHINE_TYPE_FORMING, MM_PAPER_GRADE, MM_MACHINE_SPEED_RANGE, MM_PAPER_GSM_RANGE, MM_MACHINE_TYPE_PRESSING, MM_FURNISH, MM_TYPE_OF_FILLER, MM_WIRE_DETAIL_1, MM_WIRE_DETAIL_2, MM_WIRE_DETAIL_3, MM_WIRE_DETAIL_4, MM_PAPER_DECKLE_AFTER_WIRE, MM_PAPER_DECKLE_AFTER_PRESS, MM_PAPER_DECKLE_AT_POPE_REEL, MM_DRYER_SECTION, MM_ZONE, MM_CAPACITY, MM_MACHINE_STATUS, MM_ZONE_REPRESENTATIVE, MM_DATE_OF_UPDATE, MM_TOTAL_DRYER_GROUP, MM_UNIRUM_GROUP, MM_CONVENTIONAL_GROUP, MM_HOOD_TYPE, MM_SIZE_PRESS, MM_SIZE_PRESS_POSITION, MM_SHEET_DRYNESS_SIZE_PRESS, HIERARCHY_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, APPROVED, APPROVED_DATE, REJECTED, REJECTED_DATE, CANCELED, CHANGED, CHANGED_DATE, REJECTED_REMARKS, MM_AMEND_NO, MM_DRIVE_TYPE, MM_MACHINE_MAKE) " +
                                            "SELECT MM_DOC_NO, MM_PARTY_CODE, MM_PARTY_NAME, MM_INCHARGE_NAME, MM_STATION, MM_MACHINE_NO, MM_MACHINE_TYPE_FORMING, MM_PAPER_GRADE, MM_MACHINE_SPEED_RANGE, MM_PAPER_GSM_RANGE, MM_MACHINE_TYPE_PRESSING, MM_FURNISH, MM_TYPE_OF_FILLER, MM_WIRE_DETAIL_1, MM_WIRE_DETAIL_2, MM_WIRE_DETAIL_3, MM_WIRE_DETAIL_4, MM_PAPER_DECKLE_AFTER_WIRE, MM_PAPER_DECKLE_AFTER_PRESS, MM_PAPER_DECKLE_AT_POPE_REEL, MM_DRYER_SECTION, MM_ZONE, MM_CAPACITY, MM_MACHINE_STATUS, MM_ZONE_REPRESENTATIVE, MM_DATE_OF_UPDATE, MM_TOTAL_DRYER_GROUP, MM_UNIRUM_GROUP, MM_CONVENTIONAL_GROUP, MM_HOOD_TYPE, MM_SIZE_PRESS, MM_SIZE_PRESS_POSITION, MM_SHEET_DRYNESS_SIZE_PRESS, '4442', '339', '"+EITLERPGLOBAL.getCurrentDateDB()+"', 0, '0000-00-00', 0, '0000-00-00', 0, '0000-00-00', 0, 0, '0000-00-00', '', '"+AmendDocNo+"', MM_DRIVE_TYPE, MM_MACHINE_MAKE FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER WHERE MM_DOC_NO='"+Doc_No+"' AND MM_PARTY_CODE='"+partyCd+"' AND MM_MACHINE_NO='"+machineNo+"'");

                                            data.Execute("INSERT INTO PRODUCTION.FELT_MACHINE_MASTER_AMEND_DETAIL " +
                                            "( " +
                                            "MM_AMEND_NO,SR_NO, MM_DOC_NO, MM_PARTY_CODE, MM_MACHINE_NO, MM_MACHINE_POSITION, MM_MACHINE_POSITION_DESC, MM_COMBINATION_CODE, MM_PRESS_TYPE, MM_PRESS_ROLL_DAI_MM, MM_PRESS_ROLL_FACE_TOTAL_MM, MM_PRESS_ROLL_FACE_NET_MM, MM_FELT_ROLL_WIDTH_MM, MM_PRESS_LOAD, MM_VACCUM_CAPACITY, MM_UHLE_BOX, MM_HP_SHOWER, MM_LP_SHOWER, MM_FELT_LENGTH, MM_FELT_WIDTH, MM_FELT_GSM, MM_FELT_WEIGHT, MM_FELT_TYPE, MM_FELT_STYLE, MM_AVG_LIFE, MM_AVG_PRODUCTION, MM_FELT_CONSUMPTION, MM_DINESH_SHARE, MM_REMARK_DESIGN, MM_REMARK_GENERAL, MM_NO_DRYER_CYLINDER, MM_CYLINDER_DIA_MM, MM_CYLINDER_FACE_NET_MM, MM_DRIVE_TYPE, MM_GUIDE_TYPE, MM_GUIDE_PAM_TYPE, MM_VENTILATION_TYPE, MM_FABRIC_LENGTH, MM_FABRIC_WIDTH, MM_SIZE_M2, MM_SCREEN_TYPE, MM_STYLE_DRY, MM_CFM_DRY, MM_AVG_LIFE_DRY, MM_CONSUMPTION_DRY, MM_DINESH_SHARE_DRY, MM_REMARK_DRY, MM_ITEM_CODE, MM_GRUP, MM_BASE_GSM, MM_WEB_GSM, MM_TOTAL_GSM, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, CHANGED_DATE, CHANGED, MM_FELT_LIFE, MM_TPD, MM_TOTAL_PRODUCTION, MM_PAPER_FELT, MM_POSITION_WISE,  MM_VACCUM_IN_UHLE_BOX, MM_FELT_WASHING_CHEMICALS, MM_HARDNESS, MM_P_NO_TEMP, MM_M_NO_TEMP, MM_MACHINE_FLOOR, MM_TYPE_OF_FORMING_FABRIC, MM_PRESS_ROLL_FOR_1ST_NIP_FACE_LENGTH, MM_PRESS_ROLL_FOR_2ND_NIP_FACE_LENGTH, MM_PRESS_ROLL_FOR_3RD_NIP_FACE_LENGTH, MM_PRESS_ROLL_FOR_4TH_NIP_FACE_LENGTH, MM_WASH_ROLL_SHOWER, MM_HP_SHOWER_NOZZLES, MM_UHLE_BOX_VACUUM, MM_CHEMICAL_SHOWER, MM_1ST_LINEAR_NIP_PRESSURE, MM_2ND_LINEAR_NIP_PRESSURE, MM_3RD_LINEAR_NIP_PRESSURE, MM_4TH_LINEAR_NIP_PRESSURE, MM_LOADING_SYSTEM, MM_LP_SHOWER_NOZZLES, MM_1ST_ROLL_MATERIAL, MM_2ND_ROLL_MATERIAL, MM_3RD_ROLL_MATERIAL, MM_4TH_ROLL_MATERIAL, MM_5TH_ROLL_MATERIAL, MM_6TH_ROLL_MATERIAL, MM_7TH_ROLL_MATERIAL, MM_8TH_ROLL_MATERIAL, MM_BATT_GSM, MM_FIBERS_USED, MM_STRETCH, MM_MG, MM_YANKEE, MM_MG_YANKEE_NIP_LOAD, MM_NUMBER_OF_FORMING_FABRIC, MM_CATEGORY, UC_CODE, MM_POSITION_DESIGN_NO, MM_UPN_NO, MM_MAX_CIRCUIT_LENGTH, MM_MIN_CIRCUIT_LENGTH, GOAL " +
                                            ") " +
                                            "SELECT '"+AmendDocNo+"',SR_NO, MM_DOC_NO, MM_PARTY_CODE, MM_MACHINE_NO, MM_MACHINE_POSITION, MM_MACHINE_POSITION_DESC, MM_COMBINATION_CODE, MM_PRESS_TYPE, MM_PRESS_ROLL_DAI_MM, MM_PRESS_ROLL_FACE_TOTAL_MM, MM_PRESS_ROLL_FACE_NET_MM, MM_FELT_ROLL_WIDTH_MM, MM_PRESS_LOAD, MM_VACCUM_CAPACITY, MM_UHLE_BOX, MM_HP_SHOWER, MM_LP_SHOWER, MM_FELT_LENGTH, MM_FELT_WIDTH, MM_FELT_GSM, MM_FELT_WEIGHT, MM_FELT_TYPE, MM_FELT_STYLE, MM_AVG_LIFE, MM_AVG_PRODUCTION, MM_FELT_CONSUMPTION, MM_DINESH_SHARE, MM_REMARK_DESIGN, MM_REMARK_GENERAL, MM_NO_DRYER_CYLINDER, MM_CYLINDER_DIA_MM, MM_CYLINDER_FACE_NET_MM, MM_DRIVE_TYPE, MM_GUIDE_TYPE, MM_GUIDE_PAM_TYPE, MM_VENTILATION_TYPE, MM_FABRIC_LENGTH, MM_FABRIC_WIDTH, MM_SIZE_M2, MM_SCREEN_TYPE, MM_STYLE_DRY, MM_CFM_DRY, MM_AVG_LIFE_DRY, MM_CONSUMPTION_DRY, MM_DINESH_SHARE_DRY, MM_REMARK_DRY, MM_ITEM_CODE, MM_GRUP, MM_BASE_GSM, MM_WEB_GSM, MM_TOTAL_GSM, 339, '"+EITLERPGLOBAL.getCurrentDateDB()+"', 0, '0000-00-00', '0000-00-00', 0, MM_FELT_LIFE, MM_TPD, MM_TOTAL_PRODUCTION, MM_PAPER_FELT, MM_POSITION_WISE,  MM_VACCUM_IN_UHLE_BOX, MM_FELT_WASHING_CHEMICALS, MM_HARDNESS, MM_P_NO_TEMP, MM_M_NO_TEMP, MM_MACHINE_FLOOR, MM_TYPE_OF_FORMING_FABRIC, MM_PRESS_ROLL_FOR_1ST_NIP_FACE_LENGTH, MM_PRESS_ROLL_FOR_2ND_NIP_FACE_LENGTH, MM_PRESS_ROLL_FOR_3RD_NIP_FACE_LENGTH, MM_PRESS_ROLL_FOR_4TH_NIP_FACE_LENGTH, MM_WASH_ROLL_SHOWER, MM_HP_SHOWER_NOZZLES, MM_UHLE_BOX_VACUUM, MM_CHEMICAL_SHOWER, MM_1ST_LINEAR_NIP_PRESSURE, MM_2ND_LINEAR_NIP_PRESSURE, MM_3RD_LINEAR_NIP_PRESSURE, MM_4TH_LINEAR_NIP_PRESSURE, MM_LOADING_SYSTEM, MM_LP_SHOWER_NOZZLES, MM_1ST_ROLL_MATERIAL, MM_2ND_ROLL_MATERIAL, MM_3RD_ROLL_MATERIAL, MM_4TH_ROLL_MATERIAL, MM_5TH_ROLL_MATERIAL, MM_6TH_ROLL_MATERIAL, MM_7TH_ROLL_MATERIAL, MM_8TH_ROLL_MATERIAL, MM_BATT_GSM, MM_FIBERS_USED, MM_STRETCH, MM_MG, MM_YANKEE, MM_MG_YANKEE_NIP_LOAD, MM_NUMBER_OF_FORMING_FABRIC, MM_CATEGORY, UC_CODE, MM_POSITION_DESIGN_NO, MM_UPN_NO, MM_MAX_CIRCUIT_LENGTH, MM_MIN_CIRCUIT_LENGTH, GOAL  " +
                                            " " +
                                            "FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL where MM_DOC_NO='"+Doc_No+"' AND MM_PARTY_CODE='"+partyCd+"' AND MM_MACHINE_NO='"+machineNo+"'");
                                            
                                    }catch(Exception e)
                                    {
                                        e.printStackTrace();
                                    }
                                }
                                if (DOC_NO.startsWith("MPA")) {
                                //Selected machineNo Machine Amend open
                                                                    
                                }
                                /* END - Party Amend, Machine Amend open  */
                            
                        } catch (Exception e) {
                            System.out.println("Error on Flag Updation. : " + e.getMessage());
                        }

                    } catch (Exception e) {
                        System.out.println("Error on Updation. : " + e.getMessage());
                    }
                    
                    
                    try {
                        clsFeltEvaluationReOpen objPieceEVC = new clsFeltEvaluationReOpen();
                        HashMap hmPieceList = new HashMap();
                        hmPieceList = objPieceEVC.getPieceList(DOC_NO, Party_Code);

                        if (hmPieceList.size() > 0) {

                            objPieceEVC.setAttribute("DOC_DATE", EITLERPGLOBAL.getCurrentDate());
                            objPieceEVC.setAttribute("PARTY_CODE", Party_Code);
                            objPieceEVC.setAttribute("MODULE_ID", 612);

                            //----- Update Approval Specific Fields -----------//
                            objPieceEVC.setAttribute("HIERARCHY_ID", 2716);
                            objPieceEVC.setAttribute("FROM", 338);
                            objPieceEVC.setAttribute("TO", 338);
                            objPieceEVC.setAttribute("FROM_REMARKS", "");
                            objPieceEVC.setAttribute("UPDATED_BY", 338);
                            objPieceEVC.setAttribute("CREATED_BY", 338);

                            objPieceEVC.setAttribute("APPROVAL_STATUS", "H");

                            //======= Set Line part ============
                            try {
                                objPieceEVC.hmFeltEvaluationDetails.clear();

                                for (int j = 1; j <= hmPieceList.size(); j++) {
                                    clsFeltEvaluationDetails objFeltDetails = new clsFeltEvaluationDetails();
                                    clsFeltEvaluationReOpen piece = (clsFeltEvaluationReOpen) hmPieceList.get(j);

                                    objFeltDetails.setAttribute("SR_NO", j);
                                    objFeltDetails.setAttribute("DELINK_FLAG", "0");
                                    objFeltDetails.setAttribute("DIVERSION_CLOSE_FLAG", "0");

                                    objFeltDetails.setAttribute("PIECE_NO", (String) piece.getAttribute("PIECE_NO").getObj());
                                    objFeltDetails.setAttribute("PIECE_STAGE", (String) piece.getAttribute("PIECE_STAGE").getObj());
                                    objFeltDetails.setAttribute("MACHINE_NO", (String) piece.getAttribute("MACHINE_NO").getObj());
                                    objFeltDetails.setAttribute("POSITION_NO", (String) piece.getAttribute("POSITION_NO").getObj());
                                    objFeltDetails.setAttribute("STYLE_CODE", (String) piece.getAttribute("STYLE_CODE").getObj());
                                    objFeltDetails.setAttribute("LENGTH", (String) piece.getAttribute("LENGTH").getObj());
                                    objFeltDetails.setAttribute("WIDTH", (String) piece.getAttribute("WIDTH").getObj());
                                    objFeltDetails.setAttribute("WEIGHT", (String) piece.getAttribute("WEIGHT").getObj());
                                    objFeltDetails.setAttribute("GSM", (String) piece.getAttribute("GSM").getObj());
                                    objFeltDetails.setAttribute("REMARKS", "");
                                    objFeltDetails.setAttribute("OC_MONTH", "");

                                    objPieceEVC.hmFeltEvaluationDetails.put(Integer.toString(objPieceEVC.hmFeltEvaluationDetails.size() + 1), objFeltDetails);

                                }

                                if (objPieceEVC.Insert()) {

                                }
                            } catch (Exception e) {

                                System.out.println("Eroor on setData : " + e.getMessage());
                                e.printStackTrace();
                            };

                        }
                    } catch (Exception e) {
                        System.out.println("Error on Evaluation ReOpen. : " + e.getMessage());
                    }
                    
                    try {

                        Connection Conn;
                        Statement stmt;
                        ResultSet rsData;

                        String prSQL = "";
                        String mcNo = "";
                        String poNo = "";
                        Conn = data.getConn();
                        stmt = Conn.createStatement();

                        if (DOC_NO.startsWith("FPA")) {
                            prSQL = "SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PARTY_CODE = '" + Party_Code + "' AND PR_PIECE_STAGE IN ('BSR')  ORDER BY PR_PIECE_STAGE,PR_PIECE_NO ";
                        }

                        if (DOC_NO.startsWith("PMA")) {
                            mcNo = data.getStringValueFromDB("SELECT MACHINE_NO FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE WHERE DOC_NO = '" + DOC_NO + "'");
                            prSQL = "SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PARTY_CODE = '" + Party_Code + "' AND PR_MACHINE_NO = " + mcNo + " AND PR_PIECE_STAGE IN ('BSR')  ORDER BY PR_PIECE_STAGE,PR_PIECE_NO ";
                        }

                        if (DOC_NO.startsWith("MPA")) {
                            mcNo = data.getStringValueFromDB("SELECT MACHINE_NO FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE WHERE DOC_NO = '" + DOC_NO + "'");
                            poNo = data.getStringValueFromDB("SELECT POSITION_NO FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE WHERE DOC_NO = '" + DOC_NO + "'");
                            prSQL = "SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PARTY_CODE = '" + Party_Code + "' AND PR_MACHINE_NO = " + mcNo + " AND PR_POSITION_NO = " + poNo + " AND PR_PIECE_STAGE IN ('BSR')  ORDER BY PR_PIECE_STAGE,PR_PIECE_NO ";
                        }

                        System.out.println("prSQL : " + prSQL);

                        rsData = stmt.executeQuery(prSQL);
                        rsData.first();

                        if (rsData.getRow() > 0) {
                            while (!rsData.isAfterLast()) {

                                String Piece_No = rsData.getString("PR_PIECE_NO");
                                String Bale_No = rsData.getString("PR_BALE_NO");
                                String Bale_Date = rsData.getString("PR_PACKED_DATE");
                                clsFeltReopenBale ObjFeltReopenBale = new clsFeltReopenBale();
                                HashMap hmPieceList = new HashMap();
                                hmPieceList = ObjFeltReopenBale.getPieceList(DOC_NO, Party_Code, Piece_No, Bale_No, Bale_Date);

                                if (hmPieceList.size() > 0) {

                                    String strSQL1 = "SELECT * FROM PRODUCTION.FELT_PKG_SLIP_HEADER WHERE PKG_BALE_NO='" + Bale_No + "' AND PKG_BALE_DATE='" + Bale_Date + "' ";
                                    ResultSet rsTmp1 = data.getResult(strSQL1);
                                    
                                    ObjFeltReopenBale.setAttribute("DOC_NO", "");
                                    ObjFeltReopenBale.setAttribute("BALE_NO", Bale_No);
                                    ObjFeltReopenBale.setAttribute("BALE_DATE", EITLERPGLOBAL.formatDate(Bale_Date));
                                    ObjFeltReopenBale.setAttribute("PARTY_CODE", UtilFunctions.getString(rsTmp1, "PKG_PARTY_CODE", ""));
                                    ObjFeltReopenBale.setAttribute("PARTY_NAME", UtilFunctions.getString(rsTmp1, "PKG_PARTY_NAME", ""));
                                    ObjFeltReopenBale.setAttribute("STATION", UtilFunctions.getString(rsTmp1, "PKG_STATION", ""));
                                    ObjFeltReopenBale.setAttribute("TRANSPORT_MODE", UtilFunctions.getString(rsTmp1, "PKG_TRANSPORT_MODE", ""));
                                    ObjFeltReopenBale.setAttribute("BOX_SIZE", UtilFunctions.getString(rsTmp1, "PKG_BOX_SIZE", ""));
                                    ObjFeltReopenBale.setAttribute("MODE_PACKING", UtilFunctions.getString(rsTmp1, "PKG_MODE_PACKING", ""));

                                    //----- Update Approval Specific Fields -----------//
                                    ObjFeltReopenBale.setAttribute("HIERARCHY_ID", 1685);
                                    ObjFeltReopenBale.setAttribute("FROM", 318);
                                    ObjFeltReopenBale.setAttribute("TO", 318);
                                    ObjFeltReopenBale.setAttribute("FROM_REMARKS", "");
                                    ObjFeltReopenBale.setAttribute("UPDATED_BY", 318);
                                    ObjFeltReopenBale.setAttribute("CREATED_BY", 318);

                                    ObjFeltReopenBale.setAttribute("APPROVAL_STATUS", "H");

                                    //======= Set Line part ============
                                    try {
                                        ObjFeltReopenBale.hmFeltReopenBaleDetails.clear();

                                        for (int j = 1; j <= hmPieceList.size(); j++) {
                                            clsFeltReopenBaleDetails ObjFeltReopenBaleDetails = new clsFeltReopenBaleDetails();
                                            clsFeltReopenBale piece = (clsFeltReopenBale) hmPieceList.get(j);

                                            ObjFeltReopenBaleDetails.setAttribute("PIECE_NO", (String) piece.getAttribute("PIECE_NO").getObj());
                                            ObjFeltReopenBaleDetails.setAttribute("LENGTH", Float.parseFloat((String) piece.getAttribute("LENGTH").getObj()));
                                            ObjFeltReopenBaleDetails.setAttribute("WIDTH", Float.parseFloat((String) piece.getAttribute("WIDTH").getObj()));
                                            ObjFeltReopenBaleDetails.setAttribute("GSM", Float.parseFloat((String) piece.getAttribute("GSM").getObj()));
                                            ObjFeltReopenBaleDetails.setAttribute("SQM", Float.parseFloat((String) piece.getAttribute("SQM").getObj()));
                                            ObjFeltReopenBaleDetails.setAttribute("SYN_PER", Float.parseFloat((String) piece.getAttribute("SYN_PER").getObj()));
                                            ObjFeltReopenBaleDetails.setAttribute("STYLE", (String) piece.getAttribute("STYLE").getObj());
                                            ObjFeltReopenBaleDetails.setAttribute("PRODUCT_CODE", (String) piece.getAttribute("PRODUCT_CODE").getObj());
                                            ObjFeltReopenBaleDetails.setAttribute("MCN_POSITION_DESC", (String) piece.getAttribute("MCN_POSITION_DESC").getObj());
                                            ObjFeltReopenBaleDetails.setAttribute("MACHINE_NO", (String) piece.getAttribute("MACHINE_NO").getObj());
                                            ObjFeltReopenBaleDetails.setAttribute("ORDER_NO", (String) piece.getAttribute("ORDER_NO").getObj());
                                            ObjFeltReopenBaleDetails.setAttribute("ORDER_DATE", (String) piece.getAttribute("ORDER_DATE").getObj());

                                            ObjFeltReopenBale.hmFeltReopenBaleDetails.put(Integer.toString(ObjFeltReopenBale.hmFeltReopenBaleDetails.size() + 1), ObjFeltReopenBaleDetails);

                                        }

                                        if (ObjFeltReopenBale.Insert()) {

                                        }
                                    } catch (Exception e) {

                                        System.out.println("Eroor on setData ReOpen Bale : " + e.getMessage());
                                        e.printStackTrace();
                                    };

                                }

                                //data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DIVERSION_FLAG = 'READY' WHERE PR_PIECE_NO = '" + rsData.getString("PR_PIECE_NO") + "' ");
                                rsData.next();
                            }
                        }

                    } catch (Exception e) {
                        System.out.println("Error on Evaluation ReOpen Bale. : " + e.getMessage());
                    }

                }
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while saving. Error is " + ObjDoc.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            frmPA.RefreshView();
        } catch (Exception e) {
        }

        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void Find() {

        Loader ObjLoader = new Loader(this, "EITLERP.FeltSales.PartyMachineReOpen.frmPartyMachineReOpenFind", true);
        frmPartyMachineReOpenFind ObjReturn = (frmPartyMachineReOpenFind) ObjLoader.getObj();

        if (ObjReturn.Cancelled == false) {
            if (!ObjDoc.Filter(ObjReturn.strQuery, EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null, "No records found.");
            }
            MoveLast();
        }

    }

    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjDoc.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjDoc.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjDoc.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjDoc.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    public void FindEx(int pCompanyID, String pDocNo) {
        ObjDoc.Filter(" WHERE STATUS_TYPE='REOPEN' AND DOC_NO='" + pDocNo + "'", pCompanyID);
        ObjDoc.MoveLast();
        DisplayData();
    }

    public void FindWaiting() {
        ObjDoc.Filter(" WHERE STATUS_TYPE='REOPEN' AND DOC_NO IN (SELECT PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE.DOC_NO FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE,PRODUCTION.FELT_PROD_DOC_DATA WHERE PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE.DOC_NO=PRODUCTION.FELT_PROD_DOC_DATA.DOC_NO AND PRODUCTION.FELT_PROD_DOC_DATA.USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND PRODUCTION.FELT_PROD_DOC_DATA.STATUS='W' AND PRODUCTION.FELT_PROD_DOC_DATA.MODULE_ID='" + clsPartyMachineReOpen.ModuleID + "')", EITLERPGLOBAL.gCompanyID);
        ObjDoc.MoveLast();
        DisplayData();
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }

    private void FormatGridA() {
        DataModelA = new EITLTableModel();

        TableA.removeAll();
        TableA.setModel(DataModelA);

        //Set the table Readonly
        DataModelA.TableReadOnly(true);

        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");

        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);

    }

    private void FormatGridHS() {
        DataModelHS = new EITLTableModel();

        TableHS.removeAll();
        TableHS.setModel(DataModelHS);

        //Set the table Readonly
        DataModelHS.TableReadOnly(true);

        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        DataModelHS.addColumn("From Ip");

        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Tab1.getComponentCount() - 1; i++) {
            if (Tab1.getComponent(i).getName() != null) {

                FieldName = Tab1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {

                    Tab1.getComponent(i).setEnabled(true);
                }

            }
        }
        //=============== Header Fields Setup Complete =================//

    }

    private void GenerateRejectedUserCombo() {

        HashMap List = new HashMap();
        HashMap DeptList = new HashMap();
        HashMap DeptUsers = new HashMap();
        String DocCode = txtDocNo.getText();

        //----- Generate cmbType ------- //
        cmbToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= List.size(); i++) {
            clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

            /// NEW CODE ///
            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(clsPartyMachineReOpen.ModuleID, DocCode, (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(clsPartyMachineReOpen.ModuleID, DocCode, (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            } else {
                if (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///

        }
        //------------------------------ //

        if (EditMode == EITLERPGLOBAL.EDIT) {
            String DocNo = (String) ObjDoc.getAttribute("DOC_NO").getObj();
            int Creator = clsFeltProductionApprovalFlow.getCreator(clsPartyMachineReOpen.ModuleID, DocNo);
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }

    public static String formatDateTime(String pDate) {
        try {
            if (pDate.equals("")) {
                return "";
            } else {
                String formatedDate = pDate.substring(8, 10) + "/" + pDate.substring(5, 7) + "/" + pDate.substring(0, 4);

                if (EITLERPGLOBAL.isDate(formatedDate)) {
                    return pDate.substring(8, 10) + "/" + pDate.substring(5, 7) + "/" + pDate.substring(0, 4) + " " + pDate.substring(11, 19);
                } else {
                    return "";
                }
            }
        } catch (Exception ex) {
            return "";
        }
    }
}
