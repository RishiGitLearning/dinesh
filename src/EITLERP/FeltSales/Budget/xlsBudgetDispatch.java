/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.Budget;

import EITLERP.EITLERPGLOBAL;
import EITLERP.JTextFieldHint;
import javax.swing.JTextField;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.FeltFinishing.ReportRegister;
import java.awt.Component;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import sdml.felt.commonUI.data;

/**
 *
 * @author Dharmendra
 */
public class xlsBudgetDispatch extends javax.swing.JApplet {

    /**
     * Initializes the applet xlsBudget
     */
    private EITLTableModel DataModel = new EITLTableModel();
    public EITLERP.FeltSales.Budget.clsxlsExcelExporter exprt = new EITLERP.FeltSales.Budget.clsxlsExcelExporter();

    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the applet */
        initComponents();

        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        file1.setVisible(false);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtyear = new javax.swing.JTextField();
        BudgetTab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableB = new javax.swing.JTable();
        bview = new javax.swing.JButton();
        bexcel = new javax.swing.JButton();
        btnq1 = new javax.swing.JButton();
        btnq2 = new javax.swing.JButton();
        btnq3 = new javax.swing.JButton();
        btnq4 = new javax.swing.JButton();
        file1 = new javax.swing.JFileChooser();
        lblyearto = new javax.swing.JLabel();
        txtpartycode = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbarea = new javax.swing.JComboBox<>();

        jLabel1.setText("YEAR :");

        txtyear.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtyearFocusLost(evt);
            }
        });

        TableB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableB);

        bview.setText("ALL");
        bview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bviewActionPerformed(evt);
            }
        });

        bexcel.setText("Excel");
        bexcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bexcelActionPerformed(evt);
            }
        });

        btnq1.setText("QTR-1");
        btnq1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnq1ActionPerformed(evt);
            }
        });

        btnq2.setText("QTR-2");
        btnq2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnq2ActionPerformed(evt);
            }
        });

        btnq3.setText("QTR-3");
        btnq3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnq3ActionPerformed(evt);
            }
        });

        btnq4.setText("QTR-4");
        btnq4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnq4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1027, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bview, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnq1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnq2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnq3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnq4, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(bexcel, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnq1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bview, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bexcel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnq2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnq3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnq4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        BudgetTab.addTab("Data", jPanel1);

        file1.setFocusable(false);

        lblyearto.setText("YYYY");

        txtpartycode.setToolTipText("Press F1 key for search Party Code");
        txtpartycode = new JTextFieldHint(new JTextField(),"Search by F1");
        txtpartycode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtpartycodeFocusLost(evt);
            }
        });
        txtpartycode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtpartycodeKeyPressed(evt);
            }
        });

        jLabel4.setText("Party Code");

        jLabel2.setText("Area");

        cmbarea.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0-> ALL", "1-> SOUTH", "2-> NORTH", "3-> EAST-WEST", "5-> ACNE", "6-> EXPORT", "7-> KEY CLIENT", "8-> OTHER" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BudgetTab)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtyear, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblyearto, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbarea, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtpartycode, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(52, 52, 52)
                        .addComponent(file1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtyear, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblyearto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbarea, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(file1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtpartycode, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BudgetTab, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bviewActionPerformed
        // TODO add your handling code here:
        data("ALL");
    }//GEN-LAST:event_bviewActionPerformed

    private void bexcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bexcelActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableB, new File(file1.getSelectedFile().toString() + ".xls"), "Budget");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_bexcelActionPerformed

    private void txtyearFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtyearFocusLost
        // TODO add your handling code here:
        try {
            lblyearto.setText(String.valueOf(Integer.parseInt(txtyear.getText()) + 1));
        } catch (Exception e) {
            txtyear.setText("");
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtyearFocusLost

    private void txtpartycodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtpartycodeFocusLost
        try {
            //            if (!txtpartycode.getText().equals("")) {
            //                String strSQL = "";
            //                ResultSet rsTmp;
            //                strSQL = "";
            //                strSQL += "SELECT PARTY_NAME,ADDRESS1,ADDRESS2,DISPATCH_STATION,INSURANCE_CODE FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='210010' AND PARTY_CODE = " + txtpartycode.getText().trim() + "";
            //                rsTmp = data.getResult(strSQL);
            //                rsTmp.first();
            //                txtpartyname.setText(rsTmp.getString("PARTY_NAME"));
            //}
        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtpartycodeFocusLost

    private void txtpartycodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpartycodeKeyPressed

        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            BudgetLOV aList = new BudgetLOV();
            //aList.SQL="SELECT PARTY_CODE,NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER ORDER BY NAME";
            aList.SQL = "SELECT NULL,PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='210010' AND LEFT(PARTY_CODE,1)='8' ";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtpartycode.setText(aList.ReturnVal);
                //txtpartyname.setText(clsSales_Part.getPartyName(EITLERPGLOBAL.gCompanyID,aList.ReturnVal));
            }

        }
    }//GEN-LAST:event_txtpartycodeKeyPressed

    private void btnq1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnq1ActionPerformed
        // TODO add your handling code here:
        data("Q1");
    }//GEN-LAST:event_btnq1ActionPerformed

    private void btnq2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnq2ActionPerformed
        // TODO add your handling code here:
        data("Q2");
    }//GEN-LAST:event_btnq2ActionPerformed

    private void btnq3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnq3ActionPerformed
        // TODO add your handling code here:
        data("Q3");
    }//GEN-LAST:event_btnq3ActionPerformed

    private void btnq4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnq4ActionPerformed
        // TODO add your handling code here:
        data("Q4");
    }//GEN-LAST:event_btnq4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane BudgetTab;
    private javax.swing.JTable TableB;
    private javax.swing.JButton bexcel;
    private javax.swing.JButton btnq1;
    private javax.swing.JButton btnq2;
    private javax.swing.JButton btnq3;
    private javax.swing.JButton btnq4;
    private javax.swing.JButton bview;
    private javax.swing.JComboBox<String> cmbarea;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblyearto;
    private javax.swing.JTextField txtpartycode;
    private javax.swing.JTextField txtyear;
    // End of variables declaration//GEN-END:variables

    private void data(String mquater) {
        String sql, cndpcd = "", cndarea = "";
        if (txtpartycode.getText().trim().length() > 0) {
            cndpcd = " AND PARTY_CODE IN (" + txtpartycode.getText() + ")";
        }
        if (cmbarea.getSelectedItem().toString().substring(0, 1).equals("0")) {

        } else {
            cndarea = "WHERE INCHARGE_CD='" + cmbarea.getSelectedItem().toString().substring(0, 1) + "' ";
        }
        sql = "SELECT * FROM (SELECT A.PARTY_CODE,PARTY_NAME,A.MACHINE_NO,A.POSITION_NO,POSITION_DESC,STYLE,GROUP_NAME, LENGTH,WIDTH,"
                + "PRESS_GSM,WEIGHT,SQMTR, TOTAL,NET_AMOUNT,Q1,Q2,Q3,Q4,Q1NET_AMOUNT,Q2NET_AMOUNT,Q3NET_AMOUNT,Q4NET_AMOUNT,WIP,WIP_NPLAN,STOCK,INVOICE,INVOICE_AMT,"
                + "Q1INVOICE,Q1INVOICE_AMT,Q2INVOICE,Q2INVOICE_AMT,Q3INVOICE,Q3INVOICE_AMT,Q4INVOICE,Q4INVOICE_AMT,PARTY_STATUS FROM "
                + "(SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_NO,POSITION_DESC,STYLE,GROUP_NAME, "
                + "(PRESS_LENGTH+DRY_LENGTH) AS LENGTH,(PRESS_WIDTH+DRY_WIDTH) AS WIDTH,PRESS_GSM,(PRESS_WEIGHT+DRY_WEIGHT) AS WEIGHT,(PRESS_SQMTR+DRY_SQMTR) AS SQMTR, "
                + "TOTAL,NET_AMOUNT,Q1,Q2,Q3,Q4,Q1NET_AMOUNT,Q2NET_AMOUNT,Q3NET_AMOUNT,Q4NET_AMOUNT,PARTY_STATUS "
                + "FROM PRODUCTION.FELT_BUDGET WHERE YEAR_FROM='" + txtyear.getText() + "'  " + cndpcd + ") AS A "
                + "LEFT JOIN (SELECT PR_PARTY_CODE,PR_MACHINE_NO,PR_POSITION_NO,COUNT(*) AS WIP FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                + "WHERE PR_PIECE_STAGE IN ('WEAVING','MENDING','FINISHING','NEEDLING') "
                + "AND PR_PRIORITY_HOLD_CAN_FLAG!=9 "
                + "GROUP BY PR_PARTY_CODE,PR_MACHINE_NO,PR_POSITION_NO) AS B "
                + "ON A.PARTY_CODE=B.PR_PARTY_CODE AND RIGHT(100+A.MACHINE_NO,2)=RIGHT(100+B.PR_MACHINE_NO,2) AND RIGHT(100+A.POSITION_NO,2)=RIGHT(100+B.PR_POSITION_NO,2) "
                + "LEFT JOIN "
                + "(SELECT PR_PARTY_CODE,PR_MACHINE_NO,PR_POSITION_NO,COUNT(*) AS WIP_NPLAN "
                + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                + "WHERE PR_PIECE_STAGE IN ('PLANNING') AND PR_PRIORITY_HOLD_CAN_FLAG!=9 "
                + "GROUP BY PR_PARTY_CODE,PR_MACHINE_NO,PR_POSITION_NO) AS BB "
                + "ON A.PARTY_CODE=BB.PR_PARTY_CODE AND RIGHT(100+A.MACHINE_NO,2)=RIGHT(100+BB.PR_MACHINE_NO,2) AND "
                + "RIGHT(100+A.POSITION_NO,2)=RIGHT(100+BB.PR_POSITION_NO,2) "
                + "LEFT JOIN (SELECT PR_PARTY_CODE,PR_MACHINE_NO,PR_POSITION_NO,COUNT(*) AS STOCK FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                + "WHERE PR_PIECE_STAGE IN ('IN STOCK','BSR') "
                + "AND PR_PRIORITY_HOLD_CAN_FLAG!=9 "
                + "GROUP BY PR_PARTY_CODE,PR_MACHINE_NO,PR_POSITION_NO) AS C "
                + "ON A.PARTY_CODE=C.PR_PARTY_CODE AND RIGHT(100+A.MACHINE_NO,2)=RIGHT(100+C.PR_MACHINE_NO,2) AND RIGHT(100+A.POSITION_NO,2)=RIGHT(100+C.PR_POSITION_NO,2) "
                + "LEFT JOIN (SELECT PARTY_CODE,MACHINE_NO,POSITION_NO,SUM(NO_OF_PIECES) AS INVOICE,SUM(INVOICE_AMT) AS INVOICE_AMT FROM PRODUCTION.FELT_SAL_INVOICE_HEADER "
                + "WHERE INVOICE_DATE>='" + txtyear.getText() + "-04-01'  AND INVOICE_DATE<='" + (Integer.parseInt(txtyear.getText()) + 1) + "-03-31' AND APPROVED=1 AND CANCELLED=0 "
                + "GROUP BY PARTY_CODE,MACHINE_NO,POSITION_NO) AS D "
                + "ON A.PARTY_CODE=D.PARTY_CODE AND RIGHT(100+A.MACHINE_NO,2)=RIGHT(100+D.MACHINE_NO,2) AND RIGHT(100+A.POSITION_NO,2)=RIGHT(100+D.POSITION_NO,2) "
                + "LEFT JOIN (SELECT PARTY_CODE,MACHINE_NO,POSITION_NO,SUM(NO_OF_PIECES) AS Q1INVOICE,SUM(INVOICE_AMT) AS Q1INVOICE_AMT FROM PRODUCTION.FELT_SAL_INVOICE_HEADER "
                + "WHERE INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND INVOICE_DATE<='" + txtyear.getText() + "-06-30' AND APPROVED=1 AND CANCELLED=0 "
                + "GROUP BY PARTY_CODE,MACHINE_NO,POSITION_NO) AS E "
                + "ON A.PARTY_CODE=E.PARTY_CODE AND RIGHT(100+A.MACHINE_NO,2)=RIGHT(100+E.MACHINE_NO,2) AND RIGHT(100+A.POSITION_NO,2)=RIGHT(100+E.POSITION_NO,2) "
                + "LEFT JOIN (SELECT PARTY_CODE,MACHINE_NO,POSITION_NO,SUM(NO_OF_PIECES) AS Q2INVOICE,SUM(INVOICE_AMT) AS Q2INVOICE_AMT FROM PRODUCTION.FELT_SAL_INVOICE_HEADER "
                + "WHERE INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND INVOICE_DATE<='" + txtyear.getText() + "-09-30' AND APPROVED=1 AND CANCELLED=0 "
                + "GROUP BY PARTY_CODE,MACHINE_NO,POSITION_NO) AS F "
                + "ON A.PARTY_CODE=F.PARTY_CODE AND RIGHT(100+A.MACHINE_NO,2)=RIGHT(100+F.MACHINE_NO,2) AND RIGHT(100+A.POSITION_NO,2)=RIGHT(100+F.POSITION_NO,2) "
                + "LEFT JOIN (SELECT PARTY_CODE,MACHINE_NO,POSITION_NO,SUM(NO_OF_PIECES) AS Q3INVOICE,SUM(INVOICE_AMT) AS Q3INVOICE_AMT FROM PRODUCTION.FELT_SAL_INVOICE_HEADER "
                + "WHERE INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND INVOICE_DATE<='" + txtyear.getText() + "-12-31' AND APPROVED=1 AND CANCELLED=0 "
                + "GROUP BY PARTY_CODE,MACHINE_NO,POSITION_NO) AS G "
                + "ON A.PARTY_CODE=G.PARTY_CODE AND RIGHT(100+A.MACHINE_NO,2)=RIGHT(100+G.MACHINE_NO,2) AND RIGHT(100+A.POSITION_NO,2)=RIGHT(100+G.POSITION_NO,2) "
                + "LEFT JOIN (SELECT PARTY_CODE,MACHINE_NO,POSITION_NO,SUM(NO_OF_PIECES) AS Q4INVOICE,SUM(INVOICE_AMT) AS Q4INVOICE_AMT FROM PRODUCTION.FELT_SAL_INVOICE_HEADER "
                + "WHERE INVOICE_DATE>='" + (Integer.parseInt(txtyear.getText()) + 1) + "-01-01' AND INVOICE_DATE<='" + (Integer.parseInt(txtyear.getText()) + 1) + "-03-31' AND APPROVED=1 AND CANCELLED=0 "
                + "GROUP BY PARTY_CODE,MACHINE_NO,POSITION_NO) AS H "
                + "ON A.PARTY_CODE=H.PARTY_CODE AND RIGHT(100+A.MACHINE_NO,2)=RIGHT(100+H.MACHINE_NO,2) AND RIGHT(100+A.POSITION_NO,2)=RIGHT(100+H.POSITION_NO,2) "
                + ""
                + "UNION ALL "
                + "SELECT PCD,PARTY_NAME,MACHINE,POS,MM_MACHINE_POSITION_DESC,STYLE,GRUP, ROUND(LENGTH,2),ROUND(WIDTH,2),"
                + "ROUND(GSM,0),ROUND(WEIGHT,2),ROUND(SQMTR,0), ROUND(TOTAL,2),ROUND(NET_AMOUNT,2),Q1,Q2,Q3,Q4,Q1NET_AMOUNT,Q2NET_AMOUNT,Q3NET_AMOUNT,Q4NET_AMOUNT,WIP,WIP_NPLAN,STOCK,INVOICE,INVOICE_AMT,"
                + "Q1INVOICE,Q1INVOICE_AMT,Q2INVOICE,Q2INVOICE_AMT,Q3INVOICE,Q3INVOICE_AMT,Q4INVOICE,Q4INVOICE_AMT,'' FROM "
                + "(SELECT Z.PARTY_CODE AS PCD,X.PARTY_NAME,Z.MACHINE_NO AS MACHINE,Z.POSITION_NO AS POS,Y.MM_MACHINE_POSITION_DESC,CONCAT(COALESCE(MM_FELT_STYLE,''),COALESCE(MM_STYLE_DRY,'')) AS STYLE, "
                + "COALESCE(MM_GRUP,'') AS GRUP,COALESCE(MM_FELT_LENGTH,0)+COALESCE(MM_FABRIC_LENGTH,0) AS LENGTH,COALESCE(MM_FELT_WIDTH,0)+COALESCE(MM_FABRIC_WIDTH,0) AS WIDTH, "
                + "COALESCE(MM_FELT_GSM,0) AS GSM,COALESCE(MM_FELT_WEIGHT,0) AS WEIGHT,'' as SQMTR,0 as TOTAL,0 AS NET_AMOUNT,0 AS Q1,0 AS Q2,0 AS Q3,0 AS Q4, "
                + "0 AS Q1NET_AMOUNT,0 AS Q2NET_AMOUNT,0 AS Q3NET_AMOUNT,0 AS Q4NET_AMOUNT "
                + " FROM (SELECT PARTY_CODE,MACHINE_NO,POSITION_NO FROM PRODUCTION.FELT_SAL_INVOICE_HEADER "
                + "WHERE INVOICE_DATE>='" + txtyear.getText() + "-04-01'  AND INVOICE_DATE<='" + (Integer.parseInt(txtyear.getText()) + 1) + "-03-31'   " + cndpcd + " AND APPROVED=1 AND CANCELLED=0 AND "
                + "CONCAT(PARTY_CODE,RIGHT(100+MACHINE_NO,2),RIGHT(100+POSITION_NO,2)) NOT IN (SELECT CONCAT(PARTY_CODE,RIGHT(100+MACHINE_NO,2),RIGHT(100+POSITION_NO,2)) FROM PRODUCTION.FELT_BUDGET WHERE YEAR_FROM='" + txtyear.getText() + "'  " + cndpcd + ") "
                + "GROUP BY PARTY_CODE,MACHINE_NO,POSITION_NO) AS Z "
                + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL) AS Y "
                + "ON Z.PARTY_CODE=Y.MM_PARTY_CODE AND RIGHT(Z.MACHINE_NO+100,2)=RIGHT(Y.MM_MACHINE_NO+100,2) AND RIGHT(Z.POSITION_NO+100,2)=RIGHT(Y.MM_MACHINE_POSITION+100,2) "
                + "LEFT JOIN (SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS X "
                + "ON Z.PARTY_CODE=X.PARTY_CODE) AS ZZZ "
                + "LEFT JOIN (SELECT PR_PARTY_CODE,PR_MACHINE_NO,PR_POSITION_NO,COUNT(*) AS WIP FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                + "WHERE PR_PIECE_STAGE IN ('WEAVING','MENDING','FINISHING','NEEDLING') AND PR_PRIORITY_HOLD_CAN_FLAG!=9 "
                + "GROUP BY PR_PARTY_CODE,PR_MACHINE_NO,PR_POSITION_NO) AS B "
                + "ON ZZZ.PCD=B.PR_PARTY_CODE AND RIGHT(100+ZZZ.MACHINE,2)=RIGHT(100+B.PR_MACHINE_NO,2) AND RIGHT(100+ZZZ.POS,2)=RIGHT(100+B.PR_POSITION_NO,2) "
                + "LEFT JOIN (SELECT PR_PARTY_CODE,PR_MACHINE_NO,PR_POSITION_NO,COUNT(*) AS WIP_NPLAN FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                + " WHERE PR_PIECE_STAGE IN ('PLANNING') AND PR_PRIORITY_HOLD_CAN_FLAG!=9 "
                + " GROUP BY PR_PARTY_CODE,PR_MACHINE_NO,PR_POSITION_NO) AS BB "
                + " ON ZZZ.PCD=BB.PR_PARTY_CODE AND RIGHT(100+ZZZ.MACHINE,2)=RIGHT(100+BB.PR_MACHINE_NO,2) AND RIGHT(100+ZZZ.POS,2)=RIGHT(100+BB.PR_POSITION_NO,2) "
                + "LEFT JOIN (SELECT PR_PARTY_CODE,PR_MACHINE_NO,PR_POSITION_NO,COUNT(*) AS STOCK FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                + "WHERE PR_PIECE_STAGE IN ('IN STOCK','BSR') AND PR_PRIORITY_HOLD_CAN_FLAG!=9 GROUP BY PR_PARTY_CODE,PR_MACHINE_NO,PR_POSITION_NO) AS C "
                + "ON ZZZ.PCD=C.PR_PARTY_CODE AND RIGHT(100+ZZZ.MACHINE,2)=RIGHT(100+C.PR_MACHINE_NO,2) AND RIGHT(100+ZZZ.POS,2)=RIGHT(100+C.PR_POSITION_NO,2) "
                + "LEFT JOIN (SELECT PARTY_CODE,MACHINE_NO,POSITION_NO,SUM(NO_OF_PIECES) AS INVOICE,SUM(INVOICE_AMT) AS INVOICE_AMT "
                + "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER WHERE INVOICE_DATE>='" + txtyear.getText() + "-04-01'  AND INVOICE_DATE<='" + (Integer.parseInt(txtyear.getText()) + 1) + "-03-31'  AND APPROVED=1 AND CANCELLED=0 "
                + "GROUP BY PARTY_CODE,MACHINE_NO,POSITION_NO) AS D "
                + "ON ZZZ.PCD=D.PARTY_CODE AND RIGHT(100+ZZZ.MACHINE,2)=RIGHT(100+D.MACHINE_NO,2) AND RIGHT(100+ZZZ.POS,2)=RIGHT(100+D.POSITION_NO,2) "
                + "LEFT JOIN (SELECT PARTY_CODE,MACHINE_NO,POSITION_NO,SUM(NO_OF_PIECES) AS Q1INVOICE,SUM(INVOICE_AMT) AS Q1INVOICE_AMT "
                + "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER WHERE INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND INVOICE_DATE<='" + txtyear.getText() + "-06-30' AND APPROVED=1 AND CANCELLED=0 "
                + "GROUP BY PARTY_CODE,MACHINE_NO,POSITION_NO) AS E "
                + "ON ZZZ.PCD=E.PARTY_CODE AND RIGHT(100+ZZZ.MACHINE,2)=RIGHT(100+E.MACHINE_NO,2) AND RIGHT(100+ZZZ.POS,2)=RIGHT(100+E.POSITION_NO,2) "
                + "LEFT JOIN (SELECT PARTY_CODE,MACHINE_NO,POSITION_NO,SUM(NO_OF_PIECES) AS Q2INVOICE,SUM(INVOICE_AMT) AS Q2INVOICE_AMT "
                + "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER WHERE INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND INVOICE_DATE<='" + txtyear.getText() + "-09-30' AND APPROVED=1 AND CANCELLED=0 "
                + "GROUP BY PARTY_CODE,MACHINE_NO,POSITION_NO) AS F "
                + "ON ZZZ.PCD=F.PARTY_CODE AND RIGHT(100+ZZZ.MACHINE,2)=RIGHT(100+F.MACHINE_NO,2) AND RIGHT(100+ZZZ.POS,2)=RIGHT(100+F.POSITION_NO,2) "
                + "LEFT JOIN (SELECT PARTY_CODE,MACHINE_NO,POSITION_NO,SUM(NO_OF_PIECES) AS Q3INVOICE,SUM(INVOICE_AMT) AS Q3INVOICE_AMT "
                + "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER WHERE INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND INVOICE_DATE<='" + txtyear.getText() + "-12-31' AND APPROVED=1 AND CANCELLED=0 "
                + "GROUP BY PARTY_CODE,MACHINE_NO,POSITION_NO) AS G "
                + "ON ZZZ.PCD=G.PARTY_CODE AND RIGHT(100+ZZZ.MACHINE,2)=RIGHT(100+G.MACHINE_NO,2) AND RIGHT(100+ZZZ.POS,2)=RIGHT(100+G.POSITION_NO,2) "
                + "LEFT JOIN (SELECT PARTY_CODE,MACHINE_NO,POSITION_NO,SUM(NO_OF_PIECES) AS Q4INVOICE,SUM(INVOICE_AMT) AS Q4INVOICE_AMT "
                + "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER WHERE INVOICE_DATE>='" + (Integer.parseInt(txtyear.getText()) + 1) + "-01-01' AND INVOICE_DATE<='" + (Integer.parseInt(txtyear.getText()) + 1) + "-03-31' AND APPROVED=1 AND CANCELLED=0 "
                + "GROUP BY PARTY_CODE,MACHINE_NO,POSITION_NO) AS H "
                + "ON ZZZ.PCD=H.PARTY_CODE AND RIGHT(100+ZZZ.MACHINE,2)=RIGHT(100+H.MACHINE_NO,2) AND RIGHT(100+ZZZ.POS,2)=RIGHT(100+H.POSITION_NO,2) ) AS AAAA "
                + "LEFT JOIN (SELECT PARTY_CODE AS PM_PARTY_CODE,COALESCE(INCHARGE_CD,'') AS INCHARGE_CD FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS ZZZ "
                + "ON PARTY_CODE=ZZZ.PM_PARTY_CODE "
                + cndarea
                + " ORDER BY PARTY_CODE,MACHINE_NO,POSITION_NO";

        data_generate(sql, mquater);
    }

    private void data_generate(String msql, String mquater) {

        boolean chk = false;
        ResultSet rs;
        if (txtyear.getText().trim().length() >= 4) {
            chk = true;
        } else {
            JOptionPane.showMessageDialog(this, "Please Enter Year...", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtyear.requestFocus();
        }
        if (chk) {
            try {
//                mTableModel = new EITLTableModel();
//                TableB.removeAll();
//                TableB.setModel(mTableModel);
//               

                System.out.println("Sql Query :" + msql);
                rs = EITLERP.data.getResult(msql);
                FormatGrid(mquater);
                rs.first();
                String qtr = "", s;
                int i = 1, mqtrmn1 = 0, mqtrmn2 = 0, mqtrmn3 = 0, mqtrmn4 = 0, mdmnth = 0;
                int mcurmnth = EITLERPGLOBAL.getCurrentMonth();
                if (mcurmnth < 4) {
                    if (EITLERPGLOBAL.getCurrentYear() == Integer.parseInt(lblyearto.getText())) {
                        s = "C";
                    } else {
                        s = "P";
                    }
                } else {
                    if (EITLERPGLOBAL.getCurrentYear() == Integer.parseInt(txtyear.getText())) {
                        s = "C";
                    } else {
                        s = "P";
                    }
                }
                if (s.equalsIgnoreCase("C")) {
                    if (mcurmnth < 4) {
                        mdmnth = mcurmnth + 9;
                        mqtrmn4 = mcurmnth;
                        mqtrmn1 = mqtrmn2 = mqtrmn3 = 3;
                        qtr = "Q4";
                    } else {
                        mdmnth = mcurmnth - 3;
                        if (mcurmnth > 3 && mcurmnth < 7) {
                            mqtrmn1 = mcurmnth - 3;
                            mqtrmn2 = mqtrmn3 = mqtrmn4 = 0;
                            qtr = "Q1";
                        }
                        if (mcurmnth > 6 && mcurmnth < 10) {
                            mqtrmn2 = mcurmnth - 6;
                            mqtrmn1 = 3;
                            mqtrmn3 = mqtrmn4 = 0;
                            qtr = "Q2";
                        }
                        if (mcurmnth > 9) {
                            mqtrmn3 = mcurmnth - 9;
                            mqtrmn1 = mqtrmn2 = 3;
                            mqtrmn4 = 0;
                            qtr = "Q3";
                        }
                    }
                } else {
                    mdmnth = 12;
                    mqtrmn1 = mqtrmn2 = mqtrmn3 = mqtrmn4 = 3;
                    qtr = "";
                }
                if (rs.getRow() > 0) {
                    String incharge = "";
                    Object[] rowData = new Object[100];
                    for (int k = 1; k < 60; k++) {

                        rowData[k - 1] = k;
                    }
                    DataModel.addRow(rowData);
                    int col;
                    while (!rs.isAfterLast()) {
                        rowData = new Object[100];
                        rowData[0] = i;
                        rowData[1] = rs.getString("PARTY_CODE");
                        rowData[2] = rs.getString("PARTY_NAME");
                        rowData[3] = rs.getString("MACHINE_NO");
                        rowData[4] = rs.getString("POSITION_NO");
                        rowData[5] = rs.getString("POSITION_DESC");
                        rowData[6] = rs.getString("STYLE");
                        rowData[7] = rs.getString("GROUP_NAME");
                        rowData[8] = rs.getDouble("LENGTH");
                        rowData[9] = rs.getDouble("WIDTH");
                        rowData[10] = rs.getDouble("PRESS_GSM");
                        rowData[11] = rs.getDouble("WEIGHT");
                        rowData[12] = rs.getDouble("SQMTR");
                        rowData[13] = rs.getDouble("TOTAL");
                        rowData[14] = EITLERPGLOBAL.round(rs.getDouble("NET_AMOUNT") / 100000, 2);

                        rowData[15] = rs.getDouble("WIP");
                        rowData[16] = rs.getDouble("STOCK");
                        rowData[17] = rs.getDouble("WIP") + rs.getDouble("STOCK");
                        rowData[18] = EITLERPGLOBAL.round((rs.getDouble("TOTAL") / 12) * mdmnth, 0);
                        rowData[19] = EITLERPGLOBAL.round(((rs.getDouble("NET_AMOUNT") / 100000) / 12) * mdmnth, 2);
                        rowData[20] = rs.getDouble("INVOICE");
                        rowData[21] = EITLERPGLOBAL.round(rs.getDouble("INVOICE_AMT") / 100000, 2);
                        rowData[22] = EITLERPGLOBAL.round(Double.parseDouble(rowData[19].toString()) - Double.parseDouble(rowData[21].toString()), 2);
                        rowData[23] = EITLERPGLOBAL.round(Double.parseDouble(rowData[20].toString()) - Double.parseDouble(rowData[22].toString()), 2);

                        col = 24;
                        if (mquater.equalsIgnoreCase("ALL") || mquater.equalsIgnoreCase("Q1") || mquater.equalsIgnoreCase("Q2")) {
                            rowData[col] = rs.getDouble("Q1");//24
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(rs.getDouble("Q1NET_AMOUNT") / 100000, 2);//25
                            col++;
                            rowData[col] = EITLERPGLOBAL.round((rs.getDouble("Q1") / 3) * mqtrmn1, 0);//26
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(((rs.getDouble("Q1NET_AMOUNT") / 100000) / 3) * mqtrmn1, 2);//27
                            col++;
                            rowData[col] = rs.getDouble("Q1INVOICE");//28
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(rs.getDouble("Q1INVOICE_AMT") / 100000, 2);//29
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(Double.parseDouble(rowData[col - 4].toString()) - Double.parseDouble(rowData[col - 2].toString()), 2);
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(Double.parseDouble(rowData[col - 4].toString()) - Double.parseDouble(rowData[col - 2].toString()), 2);
                            col++;
                        }
                        if (mquater.equalsIgnoreCase("ALL") || mquater.equalsIgnoreCase("Q2")) {
                            rowData[col] = rs.getDouble("Q2");
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(rs.getDouble("Q2NET_AMOUNT") / 100000, 2);
                            col++;
                            rowData[col] = EITLERPGLOBAL.round((rs.getDouble("Q2") / 3) * mqtrmn2, 0);
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(((rs.getDouble("Q2NET_AMOUNT") / 100000) / 3) * mqtrmn2, 2);
                            col++;
                            rowData[col] = rs.getDouble("Q2INVOICE");
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(rs.getDouble("Q2INVOICE_AMT") / 100000, 2);
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(Double.parseDouble(rowData[col - 4].toString()) - Double.parseDouble(rowData[col - 2].toString()), 2);
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(Double.parseDouble(rowData[col - 4].toString()) - Double.parseDouble(rowData[col - 2].toString()), 2);
                            col++;
                        }
                        if (mquater.equalsIgnoreCase("Q3")) {
                            rowData[col] = rs.getDouble("Q1") + rs.getDouble("Q2");
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(EITLERPGLOBAL.round(rs.getDouble("Q1NET_AMOUNT") / 100000, 2) + EITLERPGLOBAL.round(rs.getDouble("Q2NET_AMOUNT") / 100000, 2), 2);
                            col++;
                            rowData[col] = rs.getDouble("Q1INVOICE") + rs.getDouble("Q2INVOICE");
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(EITLERPGLOBAL.round(rs.getDouble("Q1INVOICE_AMT") / 100000, 2) + EITLERPGLOBAL.round(rs.getDouble("Q2INVOICE_AMT") / 100000, 2), 2);
                            col++;
                        }
                        if (mquater.equalsIgnoreCase("ALL") || mquater.equalsIgnoreCase("Q3")) {
                            rowData[col] = rs.getDouble("Q3");
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(rs.getDouble("Q3NET_AMOUNT") / 100000, 2);
                            col++;
                            rowData[col] = EITLERPGLOBAL.round((rs.getDouble("Q3") / 3) * mqtrmn3, 0);
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(((rs.getDouble("Q3NET_AMOUNT") / 100000) / 3) * mqtrmn3, 2);
                            col++;
                            rowData[col] = rs.getDouble("Q3INVOICE");
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(rs.getDouble("Q3INVOICE_AMT") / 100000, 2);
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(Double.parseDouble(rowData[col - 4].toString()) - Double.parseDouble(rowData[col - 2].toString()), 2);
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(Double.parseDouble(rowData[col - 4].toString()) - Double.parseDouble(rowData[col - 2].toString()), 2);
                            col++;
                        }
                        if (mquater.equalsIgnoreCase("Q4")) {
                            rowData[col] = rs.getDouble("Q1") + rs.getDouble("Q2") + rs.getDouble("Q3");
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(EITLERPGLOBAL.round(rs.getDouble("Q1NET_AMOUNT") / 100000, 2) + EITLERPGLOBAL.round(rs.getDouble("Q2NET_AMOUNT") / 100000, 2) + EITLERPGLOBAL.round(rs.getDouble("Q3NET_AMOUNT") / 100000, 2), 2);
                            col++;
                            rowData[col] = rs.getDouble("Q1INVOICE") + rs.getDouble("Q2INVOICE") + rs.getDouble("Q3INVOICE");
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(EITLERPGLOBAL.round(rs.getDouble("Q1INVOICE_AMT") / 100000, 2) + EITLERPGLOBAL.round(rs.getDouble("Q2INVOICE_AMT") / 100000, 2) + EITLERPGLOBAL.round(rs.getDouble("Q3INVOICE_AMT") / 100000, 2), 2);
                            col++;
                        }
                        if (mquater.equalsIgnoreCase("ALL") || mquater.equalsIgnoreCase("Q4")) {
                            rowData[col] = rs.getDouble("Q4");
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(rs.getDouble("Q4NET_AMOUNT") / 100000, 2);
                            col++;
                            rowData[col] = EITLERPGLOBAL.round((rs.getDouble("Q4") / 3) * mqtrmn4, 0);
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(((rs.getDouble("Q4NET_AMOUNT") / 100000) / 3) * mqtrmn4, 2);
                            col++;
                            rowData[col] = rs.getDouble("Q4INVOICE");
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(rs.getDouble("Q4INVOICE_AMT") / 100000, 2);
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(Double.parseDouble(rowData[col - 4].toString()) - Double.parseDouble(rowData[col - 2].toString()), 2);
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(Double.parseDouble(rowData[col - 4].toString()) - Double.parseDouble(rowData[col - 2].toString()), 2);
                            col++;
                        }

                        switch (rs.getString("INCHARGE_CD").trim()) {
                            case "1":
                                incharge = "SOUTH";
                                break;
                            case "2":
                                incharge = "NORTH";
                                break;
                            case "3":
                                incharge = "EAST-WEST";
                                break;
                            case "5":
                                incharge = "ACNE";
                                break;
                            case "6":
                                incharge = "EXPORT";
                                break;
                            case "7":
                                incharge = "KEY CLIENT";
                                break;
                            case "8":
                                incharge = "OTHER";
                                break;
                            default:
                                incharge = "NOT DEFINE";
                                break;
                        }
                        rowData[col] = incharge;
                        col++;
                        rowData[col] = rs.getDouble("WIP_NPLAN");
                        col++;
                        rowData[col] = rs.getString("PARTY_STATUS");
                        col++;
                        DataModel.addRow(rowData);
                        i++;
                        rs.next();
                    }
                }
                final TableColumnModel columnModel = TableB.getColumnModel();
                for (int column = 0; column < TableB.getColumnCount(); column++) {
                    int width = 100; // Min width
                    for (int row = 0; row < TableB.getRowCount(); row++) {
                        TableCellRenderer renderer = TableB.getCellRenderer(row, column);
                        Component comp = TableB.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
                DataModel.TableReadOnly(true);
            } catch (Exception s) {
                s.printStackTrace();
            }
        }
    }

    private void FormatGrid(String mquater) {
        int i = 1, mqtrmn = 0, mdmnth = 0;
        String mnth[] = {"ZERO", "ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "NINE", "TEN", "ELEVEN", "TWELVE"};
        String mcmnth, mqmnth, s = "", qtr = "";
        int mqtrmn1 = 0, mqtrmn2 = 0, mqtrmn3 = 0, mqtrmn4 = 0, col;
        int mcurmnth = EITLERPGLOBAL.getCurrentMonth();
        if (mcurmnth < 4) {
            if (EITLERPGLOBAL.getCurrentYear() == Integer.parseInt(lblyearto.getText())) {
                s = "C";
            } else {
                s = "P";
            }
        } else {
            if (EITLERPGLOBAL.getCurrentYear() == Integer.parseInt(txtyear.getText())) {
                s = "C";
            } else {
                s = "P";
            }
        }
        if (s.equalsIgnoreCase("C")) {
            if (mcurmnth < 4) {
                mdmnth = mcurmnth + 9;
                mqtrmn4 = mcurmnth;
                mqtrmn1 = mqtrmn2 = mqtrmn3 = 3;
                qtr = "Q4";
            } else {
                mdmnth = mcurmnth - 3;
                if (mcurmnth > 3 && mcurmnth < 7) {
                    mqtrmn1 = mcurmnth - 3;
                    mqtrmn2 = mqtrmn3 = mqtrmn4 = 0;
                    qtr = "Q1";
                }
                if (mcurmnth > 6 && mcurmnth < 10) {
                    mqtrmn2 = mcurmnth - 6;
                    mqtrmn1 = 3;
                    mqtrmn3 = mqtrmn4 = 0;
                    qtr = "Q2";
                }
                if (mcurmnth > 9) {
                    mqtrmn3 = mcurmnth - 9;
                    mqtrmn1 = mqtrmn2 = 3;
                    mqtrmn4 = 0;
                    qtr = "Q3";
                }
            }
        } else {
            mdmnth = 12;
            mqtrmn1 = mqtrmn2 = mqtrmn3 = mqtrmn4 = 3;
            qtr = "";
        }
        mcmnth = mnth[mdmnth];
        mqmnth = mnth[mqtrmn];
        DataModel = new EITLTableModel();

        TableB.removeAll();
        TableB.setModel(DataModel);
        TableB.setAutoResizeMode(TableB.AUTO_RESIZE_OFF);

        //Set the table Readonly
        DataModel.TableReadOnly(true);

        //Add the columns
        DataModel.addColumn("Sr.");                     //0
        DataModel.addColumn("Party Code");              //1
        DataModel.addColumn("Party Name");              //2
        DataModel.addColumn("Machine No.");             //3
        DataModel.addColumn("Position");                //4
        DataModel.addColumn("Position Description");    //5        
        DataModel.addColumn("Style");                   //6
        DataModel.addColumn("Group");                   //7
        DataModel.addColumn("Length");                  //8
        DataModel.addColumn("Width");                   //9
        DataModel.addColumn("GSM");                     //10
        DataModel.addColumn("Weight");                  //11
        DataModel.addColumn("SQMTR");                   //12
        DataModel.addColumn("Tot_Budget_Nos");          //13
        DataModel.addColumn("Tot_Budget_Rs[In Lac]");   //14

        DataModel.addColumn("WIP");                     //16
        DataModel.addColumn("In Stock");                //17
        DataModel.addColumn("Total[16+17]");                   //18

        DataModel.addColumn("ProRata Tgt Des Nos[14/Twelve*" + mcmnth + "]"); //19
        DataModel.addColumn("ProRata Tgt Des[In Lac][15/Twelve*" + mcmnth + "]");//20
        DataModel.addColumn("Des Nos");                //21
        DataModel.addColumn("Des [In Lac]");       //22
        DataModel.addColumn("Variance Des Nos[19-21]");       //23
        DataModel.addColumn("Variance Des [In Lac][20-22]");//24
        col = 25;
        if (mquater.equalsIgnoreCase("ALL") || mquater.equalsIgnoreCase("Q1") || mquater.equalsIgnoreCase("Q2")) {
            DataModel.addColumn("Qtr-1 Nos");            //25
            DataModel.addColumn("Qtr-1 [In Lac]");       //26
            DataModel.addColumn("Prorata Tgt Qtr-1 Nos[25/THREE*" + mnth[mqtrmn1] + "]");//27
            DataModel.addColumn("Prorata Tgt Qtr-1[In Lac][26/THREE*" + mnth[mqtrmn1] + "]");//28
            DataModel.addColumn("Qtr-1 Des Nos");       //29
            DataModel.addColumn("Qtr-1 Des [In Lac]");//30
            DataModel.addColumn("Variance Qtr-1 Des Nos[27-29]");//31
            DataModel.addColumn("Variance Qtr-1 Des[In Lac][28-30]");//32
            col = col + 8;
        }
        if (mquater.equalsIgnoreCase("ALL") || mquater.equalsIgnoreCase("Q2")) {
            DataModel.addColumn("Qtr-2 Nos");            //33
            DataModel.addColumn("Qtr-2 [In Lac]");       //34
            DataModel.addColumn("Prorata Tgt Qtr-2 Nos[33/THREE*" + mnth[mqtrmn2] + "]");//35
            DataModel.addColumn("Prorata Tgt Qtr-2[In Lac][34/THREE*" + mnth[mqtrmn2] + "]");//36
            DataModel.addColumn("Qtr-2 Des Nos");       //37
            DataModel.addColumn("Qtr-2 Des [In Lac]");//38
            DataModel.addColumn("Variance Qtr-2 Des Nos[35-37]");//39
            DataModel.addColumn("Variance Qtr-2 Des[In Lac][36-38]");//40
            col = col + 8;
        }

        if (mquater.equalsIgnoreCase("Q3")) {
            DataModel.addColumn("Qtr-1+Qtr-2 Nos");
            DataModel.addColumn("Qtr-1+Qtr-2 [In Lac]");
            DataModel.addColumn("Qtr-1+Qtr-2 Des Nos");
            DataModel.addColumn("Qtr-1+Qtr-2 Des [In Lac]");
            col = col + 4;
        }

        if (mquater.equalsIgnoreCase("ALL") || mquater.equalsIgnoreCase("Q3")) {
            DataModel.addColumn("Qtr-3 Nos");            //41
            DataModel.addColumn("Qtr-3 [In Lac]");       //42
            DataModel.addColumn("Prorata Tgt Qtr-3 Nos[" + (col) + "/THREE*" + mnth[mqtrmn3] + "]");//43
            DataModel.addColumn("Prorata Tgt Qtr-3[In Lac][" + (col + 1) + "/THREE*" + mnth[mqtrmn3] + "]");//44
            DataModel.addColumn("Qtr-3 Des Nos");       //45
            DataModel.addColumn("Qtr-3 Des [In Lac]");//46
            DataModel.addColumn("Variance Qtr-3 Des Nos[" + (col + 2) + "-" + (col + 4) + "]");//47
            DataModel.addColumn("Variance Qtr-3 Des[In Lac][" + (col + 3) + "-" + (col + 5) + "]");//48
            col = col + 8;
        }
        if (mquater.equalsIgnoreCase("Q4")) {
            DataModel.addColumn("Q-1+Q-2+Q-3 Nos");
            DataModel.addColumn("Q-1+Q-2+Q-3 [In Lac]");
            DataModel.addColumn("Q-1+Q-2+Q-3 Des Nos");
            DataModel.addColumn("Q-1+Q-2+Q-3 Des [In Lac]");
            col = col + 4;
        }
        if (mquater.equalsIgnoreCase("ALL") || mquater.equalsIgnoreCase("Q4")) {
            DataModel.addColumn("Qtr-4 Nos");            //49
            DataModel.addColumn("Qtr-4 [In Lac]");       //50
            DataModel.addColumn("Prorata Tgt Qtr-4 Nos[" + (col) + "/THREE*" + mnth[mqtrmn4] + "]");//51
            DataModel.addColumn("Prorata Tgt Qtr-4[In Lac][" + (col + 1) + "/THREE*" + mnth[mqtrmn4] + "]");//52
            DataModel.addColumn("Qtr-4 Des Nos");       //53
            DataModel.addColumn("Qtr-4 Des [In Lac]");//54
            DataModel.addColumn("Variance Qtr-4 Des Nos[" + (col + 2) + "-" + (col + 4) + "]");//55
            DataModel.addColumn("Variance Qtr-4 Des[In Lac][" + (col + 3) + "-" + (col + 5) + "]");//56
        }
        DataModel.addColumn("AREA");
        DataModel.addColumn("WIP_NOTPLAN");
        DataModel.addColumn("PARTY STATUS");
    }
}
