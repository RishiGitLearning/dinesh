/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author
 */
package EITLERP.FeltSales.Budget;

import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.data;
import javax.swing.*;
import java.awt.*;
import javax.swing.table.*;
import java.sql.*;
import java.awt.Frame;

public class FrmSchedule extends javax.swing.JApplet {

    /**
     * Initializes the applet searchkey
     */
    public String SQL, MSQL, tempSQL;
    public int ReturnCol;
    public int SecondCol = -1;
    public boolean ShowReturnCol;
    public int DefaultSearchOn;
    public String Party_Code;
    public String QueryCode;
    public boolean Cancelled = true;
    public boolean UseSpecifiedConn = false;
    public String dbURL = "";

    public String ReturnVal = "";
    public String SecondVal = "";

    private JDialog aDialog;

    private EITLTableModel DataModel;

    public boolean UseCreatedConn = false;

    private int mfnd = 0;
    private int mtotcol = 0;
    Connection Conn = null;
    Statement stmt = null;

    public FrmSchedule() {
        System.gc();
        initComponents();
        DataModel = new EITLTableModel();
        SQL = "";
        MSQL = "";
        ReturnCol = 0;
        ShowReturnCol = false;
        DefaultSearchOn = 0;
        try {
            if (UseSpecifiedConn) {
                Conn = data.getConn(EITLERPGLOBAL.DatabaseURL_Production);
            } else {
                if (UseCreatedConn) {
                    //Conn=data.getCreatedConn();
                    Conn = data.getConn(EITLERPGLOBAL.DatabaseURL_Production);
                } else {
                    Conn = data.getConn(EITLERPGLOBAL.DatabaseURL_Production);
                }
            }
            stmt = Conn.createStatement();
        } catch (Exception e) {
            System.out.println("Error on connectrion = " + e.getMessage());
        }

    }

    public FrmSchedule(String pSQL, int pReturnCol, boolean pShowReturnCol, int pDefaultSearchOn) {
        System.gc();
        initComponents();
        DataModel = new EITLTableModel();
        SQL = pSQL;
        MSQL = pSQL;
        ReturnCol = pReturnCol;
        ShowReturnCol = pShowReturnCol;
        DefaultSearchOn = pDefaultSearchOn;

    }

    @Override
    public void init() {
        initComponents();
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdOK = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();

        jScrollPane1.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N

        Table.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        cmdOK.setText("OK");
        cmdOK.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cmdOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOKActionPerformed(evt);
            }
        });

        cmdCancel.setText("Cancel");
        cmdCancel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cmdOK, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(cmdCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(56, 56, 56))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmdOK, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmdOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOKActionPerformed
        // Add your handling code here:
        if (Table.getRowCount() <= 0) {
            Cancelled = true;
        } else {
            double totsch, totprs, totoc, oc;
            totsch = totprs = oc = 0;
            String Err = "";
            for (int i = 0; i < Table.getRowCount(); i++) {
                try {
                    totsch = totsch + Double.parseDouble(Table.getValueAt(i, 1).toString());
                } catch (Exception e) {
                    Err = Err + "\nError at " + Table.getValueAt(i, 0) + " Row at Schedule";
                }
                totprs = totprs + Double.parseDouble(Table.getValueAt(i, 2).toString());
            }
            if (totprs > totsch) {
                Err = Err + "\nTotal Schedule must be grater than or equal to Plan Requirement Schedule";
            }
            for (int i = 0; i < Table.getRowCount(); i++) {
                oc=0;
                try {
                    oc = Double.parseDouble(Table.getValueAt(i, 4).toString());
                } catch (Exception e) {

                }
                totoc = 0;
                for (int j = i; j < Table.getRowCount(); j++) {
                    try {
                        totoc = totoc + Double.parseDouble(Table.getValueAt(i, 1).toString());
                    } catch (Exception e) {

                    }
                }
                if (oc > totoc) {
                    Err = Err + "\nTotal Schedule must be grater than or equal to OC Schedule";
                }
            }
            if (Err.length() > 0) {
                JOptionPane.showMessageDialog(this, Err);
                return;
            }

            Cancelled = false;
            ReturnVal = "";
            for (int i = 0; i < Table.getRowCount(); i++) {
                ReturnVal = ReturnVal + (String) DataModel.getValueAt(i, 1) + "#";
            }            
            SecondVal = String.valueOf(totsch);
        }
        System.gc();
        aDialog.dispose();
    }//GEN-LAST:event_cmdOKActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // Add your handling code here:
        Cancelled = true;
        ReturnVal = "";
        System.gc();
        aDialog.dispose();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_TableKeyPressed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
//        if (evt.getClickCount() == 2) {
//            if (Table.getRowCount() <= 0) {
//                Cancelled = true;
//            } else {
//                //JOptionPane.showMessageDialog(null, "Selected Row = "+Table.getSelectedRow()+" , Selected Col = "+(ReturnCol - 1));
//                Cancelled = false;
//                ReturnVal = (String) DataModel.getValueAt(Table.getSelectedRow(), 0);
//                SecondVal = (String) DataModel.getValueAt(Table.getSelectedRow(), 1);
//
//                try {
//                    if (SecondCol >= 0) {
//                        //System.out.println("Data = "+DataModel.getValueAt(Table.getSelectedRow(), SecondCol - 1));
//                        SecondVal = (String) DataModel.getValueAt(Table.getSelectedRow(), SecondCol - 1);
//                    }
//                } catch (Exception e) {
//                    System.out.println("Error on second value = " + e.getMessage());
//                }
//
//            }
//            aDialog.dispose();
//            return;
//        }
    }//GEN-LAST:event_TableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdOK;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public void setsearchText(String pstxt) {
        System.out.println("Data in Search Box = " + pstxt);
    }

    public boolean ShowLOV() {
        try {
            GenerateLOV();

            setSize(900, 350);

            Frame f = findParentFrame(this);

            aDialog = new JDialog(f, "Enter Schdule...", true);

            aDialog.getContentPane().add("Center", this);
            Dimension appletSize = this.getSize();
            aDialog.setSize(appletSize);
            aDialog.setResizable(true);

            //Place it to center of the screen
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            aDialog.setLocation((int) (screenSize.width - appletSize.getWidth()) / 2, (int) (screenSize.height - appletSize.getHeight()) / 2);

            aDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
            aDialog.show();
        } catch (Exception e) {
        }
        //if (mfnd==1)
        return !Cancelled;
        //else
        //    return false;
    }

    private void GenerateLOV() {
        try {
            System.out.println("ShowLOV1 SQL = " + SQL);
            ResultSet rsData = stmt.executeQuery(SQL);
            //System.out.println("Data on rsData = "+rsData.getString(1));
            ResultSetMetaData rsInfo = rsData.getMetaData();

            //Format the table from the resultset meta data
            for (int i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
            }

            Table.setModel(DataModel);
            Table.setColumnSelectionAllowed(true);
            Table.setRowSelectionAllowed(true);
            //DataModel.TableReadOnly(true);
            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(2);
            DataModel.SetReadOnly(3);

            //Now Populate the table
            rsData.first();
            mtotcol = rsInfo.getColumnCount();
            while (!rsData.isAfterLast()) {
                Object[] rowData = new Object[rsInfo.getColumnCount()];

                //Fillup the array
                for (int i = 1; i <= rsInfo.getColumnCount(); i++) {
                    switch (rsInfo.getColumnType(i)) {
                        case -5: //Long
                            rowData[i - 1] = Long.toString(rsData.getLong(i));
                            break;

                        case 4: //Integer,Small int
                            rowData[i - 1] = Integer.toString(rsData.getInt(i));
                            break;
                        case 5: //Integer,Small int
                            rowData[i - 1] = Integer.toString(rsData.getInt(i));
                            break;
                        case -6: //Integer,Small int
                            rowData[i - 1] = Integer.toString(rsData.getInt(i));
                            break;
                        case 16: //Boolean
                            if (rsData.getBoolean(i) == true) {
                                rowData[i - 1] = "Yes";
                            } else {
                                rowData[i - 1] = "No";
                            }
                            break;
                        case 91: //Date
                            rowData[i - 1] = EITLERPGLOBAL.formatDate(rsData.getDate(i));
                            break;
                        case 8: //Double
                            rowData[i - 1] = Double.toString(rsData.getDouble(i));
                            break;
                        case 6: //Float
                            rowData[i - 1] = Float.toString(rsData.getFloat(i));
                            break;
                        case 12://Varchar
                            rowData[i - 1] = rsData.getString(i);
                            break;
                        default: //Varchar
                            rowData[i - 1] = rsData.getString(i);
                            break;
                    } //Switch
                }// for

                if (rowData[1].toString().length() == 1) {
                    rowData[1] = "0" + rowData[1];
                }
                //Add a row to the table
                DataModel.addRow(rowData);

                //Move to the next row
                rsData.next();
            }

            TableColumnModel ColModel = Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

            Table.changeSelection(0, 0, false, false);

            if (ShowReturnCol == false) {
                System.out.println("Return Col = " + ReturnCol);
                ColModel.getColumn(ReturnCol - 1).setMinWidth(0);
                ColModel.getColumn(ReturnCol - 1).setPreferredWidth(0);
            }

        } catch (Exception e) {
            //JOptionPane.showMessageDialog(null,e.getMessage());
            e.printStackTrace();
        }
    }

    private void FilterLOV() {
        try {

            ResultSet rsData = stmt.executeQuery(SQL);

            ResultSetMetaData rsInfo = rsData.getMetaData();
            //JOptionPane.showMessageDialog(null, "Data Loaded");
            //Format the table from the resultset meta data
            Table.setModel(DataModel);
            Table.setColumnSelectionAllowed(true);
            Table.setRowSelectionAllowed(true);
            DataModel.TableReadOnly(true);

            int rowCount = DataModel.getRowCount();
//Remove rows one by one from the end of the table
            for (int i = rowCount - 1; i >= 0; i--) {
                DataModel.removeRow(i);
            }

            //Now Populate the table
            rsData.first();

            while (!rsData.isAfterLast()) {
                Object[] rowData = new Object[rsInfo.getColumnCount()];
                System.out.println("Total Collumn Count = " + rsInfo.getColumnCount());
                //Fillup the array
                for (int i = 1; i <= rsInfo.getColumnCount(); i++) {
                    switch (rsInfo.getColumnType(i)) {
                        case -5: //Long
                            rowData[i - 1] = Long.toString(rsData.getLong(i));
                            break;
                        case 4: //Integer,Small int
                            rowData[i - 1] = Integer.toString(rsData.getInt(i));
                            break;
                        case 5: //Integer,Small int
                            rowData[i - 1] = Integer.toString(rsData.getInt(i));
                            break;
                        case -6: //Integer,Small int
                            rowData[i - 1] = Integer.toString(rsData.getInt(i));
                            break;
                        case 16: //Boolean
                            if (rsData.getBoolean(i) == true) {
                                rowData[i - 1] = "Yes";
                            } else {
                                rowData[i - 1] = "No";
                            }
                            break;
                        case 91: //Date
                            rowData[i - 1] = EITLERPGLOBAL.formatDate(rsData.getDate(i));
                            break;
                        case 8: //Double
                            rowData[i - 1] = Double.toString(rsData.getDouble(i));
                            break;
                        case 6: //Float
                            rowData[i - 1] = Float.toString(rsData.getFloat(i));
                            break;
                        case 12://Varchar
                            rowData[i - 1] = rsData.getString(i);
                            break;
                        default: //Varchar
                            rowData[i - 1] = rsData.getString(i);
                            break;
                    } //Switch
                }// for
                if (rowData[1].toString().length() == 1) {

                    rowData[1] = "0" + rowData[1];
                }
                //Add a row to the table
                DataModel.addRow(rowData);

                //Move to the next row
                rsData.next();
            }

            TableColumnModel ColModel = Table.getColumnModel();
            //Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

            Table.changeSelection(0, 0, false, false);

            if (ShowReturnCol == false) {
                ColModel.getColumn(ReturnCol - 1).setMinWidth(0);
                ColModel.getColumn(ReturnCol - 1).setPreferredWidth(0);
            }

        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "MACHINE & POSITION NOT FOUND! " + e.getLocalizedMessage());

            //FilterLOV();
            e.printStackTrace();
        }
    }

    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while (c != null) {
            if (c instanceof Frame) {
                return (Frame) c;
            }

            c = c.getParent();
        }
        return (Frame) null;
    }

    public void destroy() {
        try {
            stmt.close();
            Conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
