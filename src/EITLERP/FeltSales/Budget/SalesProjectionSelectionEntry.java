/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.Budget;

import EITLERP.AppletFrame;
import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.PieceRegister.clsIncharge;
import EITLERP.LOV;
import java.awt.Color;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.util.HashMap;
import EITLERP.JTextFieldHint;
import EITLERP.data;
import java.awt.Component;
import java.io.File;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author root
 */
public class SalesProjectionSelectionEntry extends javax.swing.JApplet {

    private EITLTableModel DataModel_Selection = new EITLTableModel();
    private EITLTableModel DataModel_Pieces = new EITLTableModel();
    private EITLTableModel DataModel_History = new EITLTableModel();
    public EITLERP.FeltSales.Reports.clsExcelExporter ExpToExcel = new EITLERP.FeltSales.Reports.clsExcelExporter();
    private EITLComboModel cmbInchargeModel = new EITLComboModel();
    String d = "";

    /**
     * Initializes the applet DispatchSelectionEntry
     */
    @Override
    public void init() {


        /* Create and display the applet */
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);

        initComponents();
        file_ETE.setVisible(false);
        lblTitle.setForeground(Color.WHITE);
        lblDate.setText("Date : " + EITLERPGLOBAL.getCurrentDate());

        if (data.getIntValueFromDB("SELECT MONTH(CURDATE()) FROM DUAL") == 3) {
            d = "B" + EITLERPGLOBAL.FinToDate.substring(8, 10) + (Integer.parseInt(EITLERPGLOBAL.FinToDate.substring(8, 10)) + 1);
        } else {
            d = "B" + EITLERPGLOBAL.FinFromDate.substring(8, 10) + EITLERPGLOBAL.FinToDate.substring(8, 10);
        }
//        d = d + data.getStringValueFromDB("SELECT RIGHT(100+MONTH(ADDDATE(CURDATE(),INTERVAL 1 MONTH)),2) FROM DUAL");
        if (data.getIntValueFromDB("SELECT DAY(CURDATE()) FROM DUAL") < 11) {
            d = d + data.getStringValueFromDB("SELECT RIGHT(100+MONTH(CURDATE()),2) FROM DUAL");
        } else {
            d = d + data.getStringValueFromDB("SELECT RIGHT(100+MONTH(ADDDATE(CURDATE(),INTERVAL 1 MONTH)),2) FROM DUAL");
        }
        InchargeCombo();
        FormatGrid();
        GenerateList();
        Table_Selection.requestFocus();

    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        TabbedPane = new javax.swing.JTabbedPane();
        Selection = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table_Selection = new javax.swing.JTable();
        file_ETE = new javax.swing.JFileChooser();
        btnExportToExcel = new javax.swing.JButton();
        cmdsave = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        SelectedPieces = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table_Pieces = new javax.swing.JTable();
        btnExportToExcel_P = new javax.swing.JButton();
        lblDate = new javax.swing.JLabel();
        lblIncharge = new javax.swing.JLabel();
        cmbIncharge = new javax.swing.JComboBox();
        lblParty = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setText("Sales Projection Selection");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);

        TabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabbedPaneStateChanged(evt);
            }
        });

        Table_Selection.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_Selection.getTableHeader().setReorderingAllowed(false);
        Table_Selection.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Table_SelectionMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table_Selection);

        btnExportToExcel.setText("Export To Excel");
        btnExportToExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportToExcelActionPerformed(evt);
            }
        });

        cmdsave.setText("Save");
        cmdsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdsaveActionPerformed(evt);
            }
        });

        jLabel1.setText("Double Click to View Projection");

        javax.swing.GroupLayout SelectionLayout = new javax.swing.GroupLayout(Selection);
        Selection.setLayout(SelectionLayout);
        SelectionLayout.setHorizontalGroup(
            SelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SelectionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SelectionLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1095, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(SelectionLayout.createSequentialGroup()
                        .addComponent(btnExportToExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmdsave, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(SelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(SelectionLayout.createSequentialGroup()
                    .addGap(488, 488, 488)
                    .addComponent(file_ETE, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(286, Short.MAX_VALUE)))
        );
        SelectionLayout.setVerticalGroup(
            SelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SelectionLayout.createSequentialGroup()
                .addGroup(SelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExportToExcel)
                    .addComponent(cmdsave)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
            .addGroup(SelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(SelectionLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(file_ETE, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(456, Short.MAX_VALUE)))
        );

        TabbedPane.addTab("Selection", Selection);

        Table_Pieces.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        Table_Pieces.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(Table_Pieces);

        btnExportToExcel_P.setText("Export To Excel");
        btnExportToExcel_P.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportToExcel_PActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SelectedPiecesLayout = new javax.swing.GroupLayout(SelectedPieces);
        SelectedPieces.setLayout(SelectedPiecesLayout);
        SelectedPiecesLayout.setHorizontalGroup(
            SelectedPiecesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SelectedPiecesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SelectedPiecesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SelectedPiecesLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(btnExportToExcel_P, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1095, Short.MAX_VALUE))
                .addContainerGap())
        );
        SelectedPiecesLayout.setVerticalGroup(
            SelectedPiecesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SelectedPiecesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExportToExcel_P)
                .addGap(23, 23, 23))
        );

        TabbedPane.addTab("Selected Party", SelectedPieces);

        lblDate.setText("Date : ");

        lblIncharge.setText("Incharge : ");

        cmbIncharge.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbIncharge.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbInchargeItemStateChanged(evt);
            }
        });

        lblParty.setText("Party : ");

        txtPartyCode = new JTextFieldHint(new JTextField(),"Press F1");
        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TabbedPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDate)
                        .addGap(18, 18, 18)
                        .addComponent(lblIncharge)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbIncharge, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(lblParty)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPartyCode, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblParty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtPartyCode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblIncharge, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbIncharge, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TabbedPane))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbInchargeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbInchargeItemStateChanged
        // TODO add your handling code here:
        FormatGrid();
        GenerateList();
        GeneratePartyList();
    }//GEN-LAST:event_cmbInchargeItemStateChanged

    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
        // TODO add your handling code here:
        if (!txtPartyCode.getText().trim().equals("")) {
            FormatGrid();
            GenerateList();
//            btnSave.setEnabled(true);
        } else {
//            btnSave.setEnabled(false);
        }
    }//GEN-LAST:event_txtPartyCodeFocusLost

    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            String cndtn = "";
            if (!cmbIncharge.getSelectedItem().equals("ALL")) {
                cndtn = " AND I.INCHARGE_NAME='" + cmbIncharge.getSelectedItem().toString().trim() + "' ";
            }
            LOV aList = new LOV();
            aList.SQL = "SELECT PARTY_CODE,PARTY_NAME,DISPATCH_STATION,"
                    + "CASE WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 "
                    + "AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'ACTIVE' "
                    + "WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 "
                    + "AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'ACTIVE' "
                    + "WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 "
                    + "AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'ACTIVE' "
                    + "WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 "
                    + "AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'IN-ACTIVE' "
                    + "WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 "
                    + "AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'PERMANENTLY CLOSED' "
                    + "WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 "
                    + "AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 2 THEN 'TEMPORARY CLOSED' "
                    + "WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 "
                    + "AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'PERMANENTLY CLOSED' "
                    + "WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 "
                    + "AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'PERMANENTLY CLOSED' END AS PARTY_STATUS, INCHARGE_NAME "
                    + "FROM DINESHMILLS.D_SAL_PARTY_MASTER PM, PRODUCTION.FELT_INCHARGE I "
                    + "WHERE MAIN_ACCOUNT_CODE=210010 AND APPROVED=1 AND CANCELLED=0 AND PM.INCHARGE_CD=I.INCHARGE_CD " + cndtn;
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtPartyCode.setText(aList.ReturnVal);
                FormatGrid();
                GenerateList();
                GeneratePartyList();
            }
        }
    }//GEN-LAST:event_txtPartyCodeKeyPressed

    private void btnExportToExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportToExcelActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file_ETE.setVisible(true);
            int returnVal = file_ETE.showSaveDialog(this);
            if (returnVal == file_ETE.APPROVE_OPTION) {
                file = file_ETE.getSelectedFile();
            }
            file_ETE.setVisible(false);

            ExpToExcel.fillData(Table_Selection, new File(file_ETE.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExportToExcelActionPerformed

    private void TabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabbedPaneStateChanged
        // TODO add your handling code here:
        if (TabbedPane.getTitleAt(TabbedPane.getSelectedIndex()).equals("Selection")) {
            FormatGrid();
            GenerateList();
        } else if (TabbedPane.getTitleAt(TabbedPane.getSelectedIndex()).equals("Selected Party")) {
            GeneratePartyList();
        } else {

        }
    }//GEN-LAST:event_TabbedPaneStateChanged

    private void btnExportToExcel_PActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportToExcel_PActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file_ETE.setVisible(true);
            int returnVal = file_ETE.showSaveDialog(this);
            if (returnVal == file_ETE.APPROVE_OPTION) {
                file = file_ETE.getSelectedFile();
            }
            file_ETE.setVisible(false);

            ExpToExcel.fillData(Table_Pieces, new File(file_ETE.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExportToExcel_PActionPerformed

    private void cmdsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdsaveActionPerformed
        // TODO add your handling code here:
        try {
            String tick, partyCode, incharge;
            if (JOptionPane.showConfirmDialog(this, "Are you sure want to Change in Projection for Selected Party?", "Projection Selection", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                for (int i = 0; i < Table_Selection.getRowCount(); i++) {
                    tick = Table_Selection.getValueAt(i, 0).toString();
                    partyCode = Table_Selection.getValueAt(i, 2).toString();
                    incharge = Table_Selection.getValueAt(i, 4).toString();

                    if (tick.equalsIgnoreCase("true")) {
                        data.Execute("INSERT INTO PRODUCTION.FELT_PROJECTION_SELECTION_DATA_HISTORY "
                                + "(SELECTION_DATE, PARTY_CODE, INCHARGE_NAME,  ENTRY_STATUS, ENTRY_TIME, USER_ID, IP_ADDRESS) "
                                + "VALUES (CURDATE(),'" + partyCode + "','" + incharge + "','ADD',NOW(),'" + EITLERPGLOBAL.gNewUserID + "',SUBSTRING_INDEX(USER(),'@',-1) ) ");
//                        if (!data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_PROJECTION_SELECTION_DATA WHERE SELECTION_DATE=CURDATE() AND PARTY_CODE='" + partyCode + "'")) {
                            data.Execute("INSERT INTO PRODUCTION.FELT_PROJECTION_SELECTION_DATA "
                                    + "(SELECTION_DATE, PARTY_CODE, INCHARGE_NAME) "
                                    + "VALUES (CURDATE(),'" + partyCode + "','" + incharge + "')");
                            data.Execute("UPDATE PRODUCTION.FELT_PROD_DOC_DATA SET STATUS='W' "
                                    + "WHERE MODULE_ID=834 AND DOC_NO LIKE '" + d + partyCode + "%' AND SR_NO=1");
                            data.Execute("UPDATE PRODUCTION.FELT_PROD_DOC_DATA SET STATUS='P' "
                                    + "WHERE MODULE_ID=834 AND DOC_NO LIKE '" + d + partyCode + "%' AND SR_NO!=1");
//                        }
                    }
                }
                FormatGrid();
                GenerateList();
                GeneratePartyList();
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_cmdsaveActionPerformed

    private void Table_SelectionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Table_SelectionMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            if (Table_Selection.getSelectedColumn() != 0) {
                String cnd = " DOC_NO LIKE '"+d+Table_Selection.getValueAt(Table_Selection.getSelectedRow(),2).toString()+"%'";
                AppletFrame aFrame = new AppletFrame("Budget Review Entry Form");
                aFrame.startAppletEx("EITLERP.FeltSales.Budget.FrmNewSalesProjectionEntry", "Budget Review Entry Form");
                FrmNewSalesProjectionEntry ObjDoc = (FrmNewSalesProjectionEntry) aFrame.ObjApplet;                
                ObjDoc.FindD(cnd);
                ObjDoc.PENDING_DOCUMENT = true;
            }
        }
    }//GEN-LAST:event_Table_SelectionMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel SelectedPieces;
    private javax.swing.JPanel Selection;
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JTable Table_Pieces;
    private javax.swing.JTable Table_Selection;
    private javax.swing.JButton btnExportToExcel;
    private javax.swing.JButton btnExportToExcel_P;
    private javax.swing.JComboBox cmbIncharge;
    private javax.swing.JButton cmdsave;
    private javax.swing.JFileChooser file_ETE;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblIncharge;
    private javax.swing.JLabel lblParty;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtPartyCode;
    // End of variables declaration//GEN-END:variables

    private void InchargeCombo() {

        HashMap List = new HashMap();
        clsIncharge ObjIncharge;

        cmbIncharge.setModel(cmbInchargeModel);
        cmbInchargeModel.removeAllElements();  //Clearing previous contents

        List = clsIncharge.getIncgargeList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjIncharge = (clsIncharge) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Text = (String) ObjIncharge.getAttribute("INCHARGE_NAME").getObj();
            aData.Code = (long) ObjIncharge.getAttribute("INCHARGE_CD").getVal();
            cmbInchargeModel.addElement(aData);
        }

    }

    private void FormatGrid() {
        try {
            DataModel_Selection = new EITLTableModel();
            Table_Selection.removeAll();

            Table_Selection.setModel(DataModel_Selection);
            Table_Selection.setAutoResizeMode(0);
            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();

            DataModel_Selection.addColumn("Select"); //0
            DataModel_Selection.addColumn("SrNo"); //1            
            DataModel_Selection.addColumn("Party Code"); //2
            DataModel_Selection.addColumn("Party Name"); //3            
            DataModel_Selection.addColumn("Incharge"); //5

            Renderer.setCustomComponent(0, "CheckBox");
            Table_Selection.getColumnModel().getColumn(0).setCellRenderer(Renderer);
            Table_Selection.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));

            DataModel_Selection.SetVariable(0, "SELECTED_FLAG"); //0
            DataModel_Selection.SetVariable(1, "SR_NO"); //1            
            DataModel_Selection.SetVariable(2, "PARTY_CODE"); //2
            DataModel_Selection.SetVariable(3, "PARTY_NAME"); //3            
            DataModel_Selection.SetVariable(4, "INCHARGE_NAME"); //4

            for (int a = 1; a <= 4; a++) {
                DataModel_Selection.SetReadOnly(a);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void GenerateList() {
        String sql = "";
        String cndtn = "";
        try {
            if (!cmbIncharge.getSelectedItem().equals("ALL")) {
                cndtn += " AND INCHARGE_NAME='" + cmbIncharge.getSelectedItem().toString().trim() + "' ";
            }
            if (!txtPartyCode.getText().trim().equals("")) {
                cndtn += " AND BR.PARTY_CODE='" + txtPartyCode.getText().toString().trim() + "' ";
            }
            
            //cndtn += " AND BR.DOC_NO LIKE '" + d + "%'";
            cndtn += " AND COALESCE(BR.APPROVED,0)=0 AND COALESCE(BR.CANCELED,0)=0 ";

            sql = "SELECT DISTINCT PARTY_CODE,PARTY_NAME,INCHARGE_NAME "
                    + "FROM PRODUCTION.FELT_BUDGET_REVIEW_DETAIL BR, PRODUCTION.FELT_INCHARGE I "
                    + "WHERE BR.INCHARGE=I.INCHARGE_CD "
                    //+ "AND PARTY_CODE NOT IN (SELECT PARTY_CODE FROM PRODUCTION.FELT_PROJECTION_SELECTION_DATA "
                    //+ "WHERE MONTH(SELECTION_DATE)=MONTH(CURDATE()) AND YEAR(SELECTION_DATE)=YEAR(CURDATE()) )"
                    + cndtn
                    + " ORDER BY INCHARGE_NAME,PARTY_CODE";
            System.out.println("sql : " + sql);

            ResultSet rsTmp = data.getResult(sql);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[50];
//                    rowData[p] = false;
//                    p++;
                    if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_PROJECTION_SELECTION_DATA WHERE SELECTION_DATE=CURDATE() AND PARTY_CODE='" + rsTmp.getString("PARTY_CODE") + "'")) {
                        rowData[p] = true;
                        p++;
                    } else {
                        rowData[p] = false;
                        p++;
                    }
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("INCHARGE_NAME");
                    p++;

                    DataModel_Selection.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table_Selection.getColumnModel();
                for (int column = 0; column < Table_Selection.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table_Selection.getRowCount(); row++) {
                        TableCellRenderer renderer = Table_Selection.getCellRenderer(row, column);
                        Component comp = Table_Selection.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
//            e.printStackTrace();
        }
    }

    private void GeneratePartyList() {
        String cndtn = "";
        if (!cmbIncharge.getSelectedItem().equals("ALL")) {
            cndtn += " AND INCHARGE_NAME='" + cmbIncharge.getSelectedItem().toString().trim() + "' ";
        }
        if (!txtPartyCode.getText().trim().equals("")) {
            cndtn += " AND BR.PARTY_CODE='" + txtPartyCode.getText().toString().trim() + "' ";
        }
        String sql;
        sql = "SELECT '' AS 'SrNo',BR.PARTY_CODE AS 'Party Code',PARTY_NAME AS 'Party Name',INCHARGE_NAME AS 'Incharge',"
                + "USER_NAME AS 'SELECTED BY',DATE_FORMAT(ENTRY_TIME,'%d/%m/%Y %r') AS ETIME,IP_ADDRESS "
                + "FROM PRODUCTION.FELT_PROJECTION_SELECTION_DATA_HISTORY BR , DINESHMILLS.D_SAL_PARTY_MASTER I, DINESHMILLS.D_COM_USER_MASTER M "
                + "WHERE BR.USER_ID=M.USER_ID AND BR.PARTY_CODE=I.PARTY_CODE  "
                + cndtn
                + " ORDER BY INCHARGE_NAME,BR.PARTY_CODE";
        System.out.println("sql : " + sql);

        Table_Pieces.setEnabled(true);
        ResultSet rs = data.getResult(sql);
        try {
            rs.first();
            if (rs.getRow() > 0) {
                DataModel_Pieces = new EITLTableModel();
                Table_Pieces.removeAll();

                Table_Pieces.setModel(DataModel_Pieces);
                Table_Pieces.setAutoResizeMode(0);
                ResultSetMetaData rsInfo = rs.getMetaData();

                //Format the table from the resultset meta data
                int i = 1;
                DataModel_Pieces.ClearAllReadOnly();
                DataModel_Pieces.SetReadOnly(0);

                for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                    DataModel_Pieces.addColumn(rsInfo.getColumnName(i));
                    DataModel_Pieces.SetReadOnly(i);
                }
                int m = 1;
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = Integer.toString(m);
                    for (int k = 1; k < (i - 1); k++) {
                        rowData[k] = rs.getString(k + 1);
                    }
                    DataModel_Pieces.addRow(rowData);
                    rs.next();
                    m++;
                }
                final TableColumnModel columnModel = Table_Pieces.getColumnModel();
                for (int column = 0; column < Table_Pieces.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table_Pieces.getRowCount(); row++) {
                        TableCellRenderer renderer_pieces = Table_Pieces.getCellRenderer(row, column);
                        Component comp = Table_Pieces.prepareRenderer(renderer_pieces, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 150) {
                        width = 150;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
//                Table_Pieces.getTableHeader().setDefaultRenderer(new MultiLineTableHeaderRenderer());
//                Table_Pieces.getTableHeader().setPreferredSize(new Dimension(Table_Pieces.getColumnModel().getTotalColumnWidth(), 100));
                DataModel_Pieces.TableReadOnly(true);
            } else {
                for (int i = DataModel_Pieces.getRowCount() - 1; i >= 0; i--) {
                    DataModel_Pieces.removeRow(i);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
