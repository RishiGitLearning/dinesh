/*
 * frmChangePassword.java
 *
 * Created on July 3, 2004, 3:36 PM
 */
package EITLERP.FeltSales.Budget;

import SDMLATTPAY.AdvanceSearch.*;
import EITLERP.*;
import SDMLATTPAY.Employee.clsMaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.sql.*;
import javax.swing.*;
import java.text.DecimalFormat;
//import java.text.DecimalFormat;
import java.util.HashMap;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
//import EITLERP.Sales.clsExcelExporter;

/*<APPLET CODE=frmChangePassword HEIGHT=200 WIDTH=430></APPLET>*/
/**
 *
 * @author Daxesh Prajapati
 */
public class FrmBudgetReport extends javax.swing.JApplet {

    private clsExcel_Exporter exp = new clsExcel_Exporter();

    private EITLTableModel DataModel = new EITLTableModel();

    private EITLComboModel modelDept = new EITLComboModel();
    private EITLComboModel modelShift = new EITLComboModel();
    private EITLComboModel modelMainCategory = new EITLComboModel();
    private EITLComboModel modelCategory = new EITLComboModel();
    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();

    //GenerateInvoiceParameterModificationCombo();
    /**
     * Initializes the applet frmChangePassword
     */
    public void init() {
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        initComponents();
        //setSize(1000, 750);

        jLabel1.setForeground(Color.WHITE);        
        
        FormatGridPartySalesHistory();
        FormatGridMachineProductGroupDetail();
        FormatGridMachinewise();
        FormatGridMachinewiseCategorywiseDetail();
        FormatGridSelectedMachineDetail();
        FormatGridSelectedMachineProductwiseDetail();
        FormatGridMachinewiseCategorywise();
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ExporttoExcelFileChooser = new javax.swing.JFileChooser();
        file1 = new javax.swing.JFileChooser();
        CoffRokadiBtnGrp = new javax.swing.ButtonGroup();
        LCBtnGrp = new javax.swing.ButtonGroup();
        GatePassBtnGrp = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblPartyCode = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        TabList = new javax.swing.JTabbedPane();
        rptPartyMchCatg = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableMachinewise = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableMachinewiseCategorywise = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableSelectedMachine = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TableMachinewiseCategorywiseDetail = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableMachineProductGroupDetail = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        TableMachinewiseProductSummary = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        TableSelectedMachineProductwiseDetail = new javax.swing.JTable();
        jButton8 = new javax.swing.JButton();
        txtPartycode = new javax.swing.JTextField();
        txtPartyName = new javax.swing.JTextField();
        txtMachine = new javax.swing.JTextField();

        getContentPane().setLayout(null);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel1.setText("PARTY SALES HISTORY");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 2, 1210, 25);

        jLabel2.setBackground(new java.awt.Color(0, 102, 153));
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 60, 1210, 10);

        lblPartyCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPartyCode.setText("PARTY CODE : ");
        getContentPane().add(lblPartyCode);
        lblPartyCode.setBounds(10, 30, 110, 20);

        lblDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDate.setText("MACHINE : ");
        getContentPane().add(lblDate);
        lblDate.setBounds(570, 30, 110, 20);

        TabList.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabListStateChanged(evt);
            }
        });

        rptPartyMchCatg.setLayout(null);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table);

        rptPartyMchCatg.add(jScrollPane1);
        jScrollPane1.setBounds(20, 20, 1140, 350);

        jButton1.setText("Export to Excel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        rptPartyMchCatg.add(jButton1);
        jButton1.setBounds(830, 390, 130, 28);

        TabList.addTab("SALES HISTORY", rptPartyMchCatg);

        jPanel1.setLayout(null);

        TableMachinewise.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableMachinewise);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(30, 20, 1110, 360);

        jButton2.setText("Export to Excel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(810, 390, 150, 28);

        TabList.addTab("M/CWISE", jPanel1);
        jPanel1.getAccessibleContext().setAccessibleName("");

        jPanel2.setLayout(null);

        TableMachinewiseCategorywise.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableMachinewiseCategorywise);

        jPanel2.add(jScrollPane3);
        jScrollPane3.setBounds(10, 40, 1140, 350);

        jButton3.setText("Export to Excel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3);
        jButton3.setBounds(800, 400, 150, 30);

        TabList.addTab("M/CWISE CATWISE SALES HISTORY", jPanel2);

        jPanel3.setLayout(null);

        TableSelectedMachine.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(TableSelectedMachine);

        jPanel3.add(jScrollPane4);
        jScrollPane4.setBounds(20, 20, 1130, 370);

        jButton4.setText("Export to Excel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton4);
        jButton4.setBounds(810, 400, 140, 28);

        TabList.addTab("SELECTED M/C DETAIL", jPanel3);

        jPanel4.setLayout(null);

        TableMachinewiseCategorywiseDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(TableMachinewiseCategorywiseDetail);

        jPanel4.add(jScrollPane5);
        jScrollPane5.setBounds(20, 30, 1130, 360);

        jButton5.setText("Export to Excel");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton5);
        jButton5.setBounds(810, 400, 150, 28);

        TabList.addTab("M/CWISE CATWISE DETAIL", jPanel4);

        jPanel5.setLayout(null);

        TableMachineProductGroupDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableMachineProductGroupDetail);

        jPanel5.add(jScrollPane6);
        jScrollPane6.setBounds(20, 20, 1120, 370);

        jButton6.setText("Export to Excel");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton6);
        jButton6.setBounds(810, 400, 140, 28);

        TabList.addTab("M/C PRODUCT GRP DETAIL", jPanel5);

        jPanel6.setLayout(null);

        TableMachinewiseProductSummary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(TableMachinewiseProductSummary);

        jPanel6.add(jScrollPane7);
        jScrollPane7.setBounds(20, 30, 1120, 360);

        jButton7.setText("Export to Excel");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton7);
        jButton7.setBounds(810, 400, 150, 28);

        TabList.addTab("M/CWISE PRODUCT SUMMARY", jPanel6);

        jPanel7.setLayout(null);

        TableSelectedMachineProductwiseDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane8.setViewportView(TableSelectedMachineProductwiseDetail);

        jPanel7.add(jScrollPane8);
        jScrollPane8.setBounds(0, 30, 1130, 360);

        jButton8.setText("Export to Excel");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton8);
        jButton8.setBounds(810, 400, 150, 28);

        TabList.addTab("SELECTED M/C PRODUCTWISE DETAIL", jPanel7);

        getContentPane().add(TabList);
        TabList.setBounds(10, 83, 1190, 500);
        TabList.getAccessibleContext().setAccessibleName("MCHWISE CATGWISE");

        txtPartycode.setToolTipText("Press F1 key for search Employee No");
        txtPartycode = new JTextFieldHint(new JTextField(),"Search by F1");
        txtPartycode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartycodeFocusLost(evt);
            }
        });
        txtPartycode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartycodeKeyPressed(evt);
            }
        });
        getContentPane().add(txtPartycode);
        txtPartycode.setBounds(120, 30, 120, 20);

        txtPartyName.setEditable(false);
        txtPartyName.setDisabledTextColor(java.awt.Color.black);
        txtPartyName.setEnabled(false);
        getContentPane().add(txtPartyName);
        txtPartyName.setBounds(250, 30, 280, 20);
        getContentPane().add(txtMachine);
        txtMachine.setBounds(690, 30, 80, 20);
    }// </editor-fold>//GEN-END:initComponents


    private void txtPartycodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartycodeFocusLost
        // TODO add your handling code here:        
        if (!txtPartycode.getText().trim().equals("") && data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND PARTY_CODE='" + txtPartycode.getText().trim() + "'")) {
            txtPartyName.setText(data.getStringValueFromDB("SELECT PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + txtPartycode.getText() + "'"));
        } else {
            if (!txtPartycode.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Party Code doesn't exist.");
            }
            txtPartycode.setText("");
            txtPartyName.setText("");
        }
    }//GEN-LAST:event_txtPartycodeFocusLost

    private void txtPartycodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartycodeKeyPressed
if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();
            aList.SQL = "SELECT PARTY_CODE,PARTY_NAME,PARTY_CLOSE_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 ";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtPartycode.setText(aList.ReturnVal);
                txtPartyName.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
                int Ind = data.getIntValueFromDB("SELECT PARTY_CLOSE_IND FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + aList.ReturnVal + "' ");
//                clsSales_Party.getPartyCloseInd(EITLERPGLOBAL.gCompanyID, aList.ReturnVal);
                
//                txtpartyind.setText(clsSales_Party.getPartyCloseInd(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
            }
        }
    }//GEN-LAST:event_txtPartycodeKeyPressed

    private void TabListStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabListStateChanged
        // TODO add your handling code here:
        if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Reports")) {
            FormatGridPartySalesHistory();
            txtPartycode.setEnabled(true);
            txtMachine.setEnabled(true);
        }
    }//GEN-LAST:event_TabListStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableMachinewise, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableMachinewiseCategorywise, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableSelectedMachine, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableMachinewiseCategorywiseDetail, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableMachineProductGroupDetail, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableMachinewiseProductSummary, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableSelectedMachineProductwiseDetail, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup CoffRokadiBtnGrp;
    private javax.swing.JFileChooser ExporttoExcelFileChooser;
    private javax.swing.ButtonGroup GatePassBtnGrp;
    private javax.swing.ButtonGroup LCBtnGrp;
    private javax.swing.JTabbedPane TabList;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableMachineProductGroupDetail;
    private javax.swing.JTable TableMachinewise;
    private javax.swing.JTable TableMachinewiseCategorywise;
    private javax.swing.JTable TableMachinewiseCategorywiseDetail;
    private javax.swing.JTable TableMachinewiseProductSummary;
    private javax.swing.JTable TableSelectedMachine;
    private javax.swing.JTable TableSelectedMachineProductwiseDetail;
    private javax.swing.JFileChooser file1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblPartyCode;
    private javax.swing.JPanel rptPartyMchCatg;
    private javax.swing.JTextField txtMachine;
    private javax.swing.JTextField txtPartyName;
    private javax.swing.JTextField txtPartycode;
    // End of variables declaration//GEN-END:variables

    

    private void FormatGridPartySalesHistory() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");         //0
        DataModel.addColumn("Party Code");  //1
        DataModel.addColumn("Party Name");    //2
        //DataModel.addColumn("M/C NO");  //3
//        DataModel.addColumn("Position");  //4
//        DataModel.addColumn("Product");       //5     
//        DataModel.addColumn("Group Name");        //6
        //DataModel.addColumn("Catg");     //7    
        //DataModel.addColumn("Prod Catg");    //8
        //DataModel.addColumn("Potential");//9
        DataModel.addColumn("Qty 18-19");//10
        DataModel.addColumn("Value 18-19");//10
        DataModel.addColumn("Qty 19-20");//10
        DataModel.addColumn("Value 19-20");//10
        DataModel.addColumn("WIP Qty");//10
        DataModel.addColumn("WIP Value");//10
        DataModel.addColumn("Stock Qty");//10
        DataModel.addColumn("Stock Value");//10

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }
   
    private void FormatGridMachinewise() {
        DataModel = new EITLTableModel();
        TableMachinewise.removeAll();
        TableMachinewise.setModel(DataModel);

        TableMachinewise.setAutoResizeMode(Table.AUTO_RESIZE_OFF);        
        
        DataModel.addColumn("Sr.");
        DataModel.addColumn("Party Code");
        DataModel.addColumn("Party Name");
        DataModel.addColumn("M/C No");
        DataModel.addColumn("Position Desc");        
        //DataModel.addColumn("CATG");
        //DataModel.addColumn("PROD CTG");
        DataModel.addColumn("Potential");
        DataModel.addColumn("Qty 18-19");//10
        DataModel.addColumn("Value 18-19");//10
        DataModel.addColumn("Qty 19-20");//10
        DataModel.addColumn("Value 19-20");//10
        DataModel.addColumn("WIP Qty");//10
        DataModel.addColumn("WIP Value");//10
        DataModel.addColumn("Stock Qty");//10
        DataModel.addColumn("Stock Value");//10

        DataModel.TableReadOnly(true);
        TableMachinewise.getColumnModel().getColumn(0).setMaxWidth(50);
    }
    
    private void FormatGridMachinewiseCategorywise() {
        DataModel = new EITLTableModel();
        TableMachinewiseCategorywise.removeAll();
        TableMachinewiseCategorywise.setModel(DataModel);

        TableMachinewiseCategorywise.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Party Code");
        DataModel.addColumn("Party Name");
        DataModel.addColumn("M/C No");
        DataModel.addColumn("Position Desc");
        //DataModel.addColumn("Quality No");
        DataModel.addColumn("Group Name");
        DataModel.addColumn("Cat");
        DataModel.addColumn("Prod Cat");
        DataModel.addColumn("Potential");
        DataModel.addColumn("Qty 18-19");//10
        DataModel.addColumn("Value 18-19");//10
        DataModel.addColumn("Qty 19-20");//10
        DataModel.addColumn("Value 19-20");//10
        DataModel.addColumn("WIP Qty");//10
        DataModel.addColumn("WIP Value");//10
        DataModel.addColumn("Stock Qty");//10
        DataModel.addColumn("Stock Value");//10

        DataModel.TableReadOnly(true);
        TableMachinewiseCategorywise.getColumnModel().getColumn(0).setMaxWidth(50);
    }
    
    private void FormatGridSelectedMachineDetail() {
        DataModel = new EITLTableModel();
        TableSelectedMachine.removeAll();
        TableSelectedMachine.setModel(DataModel);

        TableSelectedMachine.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Party Code");
        DataModel.addColumn("Party Name");
        DataModel.addColumn("M/C No");
        DataModel.addColumn("Position Desc");
        DataModel.addColumn("Quality No");
        DataModel.addColumn("Group Name");
        DataModel.addColumn("Cat");
        DataModel.addColumn("Prod Cat");
        DataModel.addColumn("Potential");
        DataModel.addColumn("Qty 18-19");//10
        DataModel.addColumn("Value 18-19");//10
        DataModel.addColumn("Qty 19-20");//10
        DataModel.addColumn("Value 19-20");//10
        DataModel.addColumn("WIP Qty");//10
        DataModel.addColumn("WIP Value");//10
        DataModel.addColumn("Stock Qty");//10
        DataModel.addColumn("Stock Value");//10

        DataModel.TableReadOnly(true);
        TableSelectedMachine.getColumnModel().getColumn(0).setMaxWidth(50);
    }
    
    private void FormatGridMachinewiseCategorywiseDetail() {
        DataModel = new EITLTableModel();
        TableMachinewiseCategorywiseDetail.removeAll();
        TableMachinewiseCategorywiseDetail.setModel(DataModel);

        TableMachinewiseCategorywiseDetail.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Party Code");
        DataModel.addColumn("Party Name");
        DataModel.addColumn("M/C No");
        DataModel.addColumn("Position Desc");
        DataModel.addColumn("Quality No");
        DataModel.addColumn("Group Name");
        DataModel.addColumn("Cat");
        DataModel.addColumn("Prod Cat");
        DataModel.addColumn("Potential");
        DataModel.addColumn("Qty 18-19");//10
        DataModel.addColumn("Value 18-19");//10
        DataModel.addColumn("Qty 19-20");//10
        DataModel.addColumn("Value 19-20");//10
        DataModel.addColumn("WIP Qty");//10
        DataModel.addColumn("WIP Value");//10
        DataModel.addColumn("Stock Qty");//10
        DataModel.addColumn("Stock Value");//10

        DataModel.TableReadOnly(true);
        TableMachinewiseCategorywiseDetail.getColumnModel().getColumn(0).setMaxWidth(50);
    }
    
    private void FormatGridMachineProductGroupDetail() {
        DataModel = new EITLTableModel();
        TableMachineProductGroupDetail.removeAll();
        TableMachineProductGroupDetail.setModel(DataModel);

        TableMachineProductGroupDetail.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Party Code");
        DataModel.addColumn("Party Name");
        DataModel.addColumn("M/C No");
        DataModel.addColumn("Position Desc");
        DataModel.addColumn("Quality No");
        DataModel.addColumn("Group Name");
        DataModel.addColumn("Cat");
        DataModel.addColumn("Prod Cat");
        DataModel.addColumn("Potential");
        DataModel.addColumn("Qty 18-19");//10
        DataModel.addColumn("Value 18-19");//10
        DataModel.addColumn("Qty 19-20");//10
        DataModel.addColumn("Value 19-20");//10
        DataModel.addColumn("WIP Qty");//10
        DataModel.addColumn("WIP Value");//10
        DataModel.addColumn("Stock Qty");//10
        DataModel.addColumn("Stock Value");//10

        DataModel.TableReadOnly(true);
        TableMachineProductGroupDetail.getColumnModel().getColumn(0).setMaxWidth(50);
    }
    
    private void FormatGridMachinewiseProductSummary() {
        DataModel = new EITLTableModel();
        TableMachinewiseProductSummary.removeAll();
        TableMachinewiseProductSummary.setModel(DataModel);

        TableMachinewiseProductSummary.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Party Code");
        DataModel.addColumn("Party Name");
        DataModel.addColumn("M/C No");
        DataModel.addColumn("Position Desc");
        DataModel.addColumn("Quality No");
        DataModel.addColumn("Group Name");
        DataModel.addColumn("Cat");
        DataModel.addColumn("Prod Cat");
        DataModel.addColumn("Potential");
        DataModel.addColumn("Qty 18-19");//10
        DataModel.addColumn("Value 18-19");//10
        DataModel.addColumn("Qty 19-20");//10
        DataModel.addColumn("Value 19-20");//10
        DataModel.addColumn("WIP Qty");//10
        DataModel.addColumn("WIP Value");//10
        DataModel.addColumn("Stock Qty");//10
        DataModel.addColumn("Stock Value");//10

        DataModel.TableReadOnly(true);
        TableMachinewiseProductSummary.getColumnModel().getColumn(0).setMaxWidth(50);
    }
    
    private void FormatGridSelectedMachineProductwiseDetail() {
        DataModel = new EITLTableModel();
        TableSelectedMachineProductwiseDetail.removeAll();
        TableSelectedMachineProductwiseDetail.setModel(DataModel);

        TableSelectedMachineProductwiseDetail.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Party Code");
        DataModel.addColumn("Party Name");
        DataModel.addColumn("M/C No");
        DataModel.addColumn("Position Desc");
        DataModel.addColumn("Quality No");
        DataModel.addColumn("Group Name");
        DataModel.addColumn("Cat");
        DataModel.addColumn("Prod Cat");
        DataModel.addColumn("Potential");
        DataModel.addColumn("Qty 18-19");//10
        DataModel.addColumn("Value 18-19");//10
        DataModel.addColumn("Qty 19-20");//10
        DataModel.addColumn("Value 19-20");//10
        DataModel.addColumn("WIP Qty");//10
        DataModel.addColumn("WIP Value");//10
        DataModel.addColumn("Stock Qty");//10
        DataModel.addColumn("Stock Value");//10

        DataModel.TableReadOnly(true);
        TableSelectedMachineProductwiseDetail.getColumnModel().getColumn(0).setMaxWidth(50);
    }
    
private void GeneratePartySalesHistory(String pPartycode,String pMachineno){
    String cndtn = "";
    
        try {
            FormatGridPartySalesHistory(); //clear existing content of table
            ResultSet rsTmp;

//            if (!txtPartycode.getText().trim().equals("")) {
//                cndtn += " AND PARTY_CODE= '" + txtPartycode.getText().trim() + "'";
//            }    
//            
//            if (!txtMachine.getText().trim().equals("")) {
//                cndtn += " AND MACHINE_NO= '" + txtMachine.getText().trim() + "'";
//            }

            String strSQL = "";

            strSQL = "SELECT PARTY_CODE,PARTY_NAME,SUM(PREV_PREV_YEAR_QTY) AS PREV_PREV_YEAR_QTY, "
                    + "SUM(PREV_PREV_YEAR_VALUE) AS PREV_PREV_YEAR_VALUE , "
                    + "SUM(PREV_YEAR_QTY) AS PREV_YEAR_QTY, "
                    + "SUM(PREV_YEAR_VALUE) AS PREV_YEAR_VALUE , "
                    + "SUM(WIP_QTY)  AS WIP_QTY, "
                    + "SUM(WIP_VALUE) AS WIP_VALUE, "
                    + "SUM(STOCK_QTY)  AS STOCK_QTY, "
                    + "SUM(STOCK_VALUE) AS STOCK_VALUE "
                    + "   ,1 AS A,1 AS B,1 AS C "
                    + "FROM ( "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN 'DRIER'  ELSE 'PRESS' END AS CATG, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS' "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF' "
                    + "ELSE 'PRESS' END AS PROD_CATG, "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY,"
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE ,"
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY, "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE , "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY, "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE,"
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY,"
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND PARTY_CODE = '"+pPartycode+"' ) AS DET "
                    + "GROUP BY PARTY_CODE,PARTY_NAME";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[20];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PARTY_CODE");
                    rowData[2] = rsTmp.getString("PARTY_NAME");
                    //rowData[3] = "";
//                    rowData[4] = rsTmp.getString("POSITION_DESC");
//                    rowData[5] = rsTmp.getString("QUALITY_NO");
//                    rowData[6] = rsTmp.getString("GROUP_NAME");
                    //rowData[4] = "";
                    
                    //rowData[5] = "";
                    //rowData[6] = "";
                    System.out.println(rsTmp.getDouble("PREV_PREV_YEAR_QTY"));
                    rowData[3] = rsTmp.getString("PREV_PREV_YEAR_QTY");
                    rowData[4] = rsTmp.getString("PREV_PREV_YEAR_VALUE");
                    rowData[5] = rsTmp.getString("PREV_YEAR_QTY");
                    rowData[6] = rsTmp.getString("PREV_YEAR_VALUE");
                    rowData[7] = rsTmp.getString("WIP_QTY");
                    rowData[8] = rsTmp.getString("WIP_VALUE");
                    rowData[9] = rsTmp.getString("STOCK_QTY");
                    rowData[10] = rsTmp.getString("STOCK_VALUE");
                    

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    
    
    
    
}

private void GeneratePartyMachinewise(String pPartycode,String pMachineno){
    String cndtn = "";
    
        try {
            FormatGridMachinewise(); //clear existing content of table
            ResultSet rsTmp;

//            if (!txtPartycode.getText().trim().equals("")) {
//                cndtn += " AND PARTY_CODE= '" + txtPartycode.getText().trim() + "'";
//            }    
//            
//            if (!txtMachine.getText().trim().equals("")) {
//                cndtn += " AND MACHINE_NO= '" + txtMachine.getText().trim() + "'";
//            }

            String strSQL = "";

            strSQL = "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,CONCAT('TOTAL MACHINE NO. ',MACHINE_NO) AS POSITION_DESC,'' AS QUALITY_NO,CONCAT('TOTAL MACHINE NO. ',MACHINE_NO) AS GROUP_NAME, '' AS CATG, CONCAT('TOTAL MACHINE NO. ',MACHINE_NO) AS PROD_CATG, "
                    + "SUM(POTENTIAL) AS POTENTIAL, "
                    + "SUM(PREV_PREV_YEAR_QTY) AS PREV_PREV_YEAR_QTY, "
                    + "SUM(PREV_PREV_YEAR_VALUE) AS PREV_PREV_YEAR_VALUE , "
                    + "SUM(PREV_YEAR_QTY) AS PREV_YEAR_QTY, "
                    + "SUM(PREV_YEAR_VALUE) AS PREV_YEAR_VALUE , "
                    + "SUM(WIP_QTY)  AS WIP_QTY, "
                    + "SUM(WIP_VALUE) AS WIP_VALUE, "
                    + "SUM(STOCK_QTY)  AS STOCK_QTY, "
                    + "SUM(STOCK_VALUE) AS STOCK_VALUE "
                    + "  ,2 AS A,1 AS B,1 AS C "
                    + "FROM ( "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN 'DRIER'  ELSE 'PRESS' END AS CATG, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF'  "
                    + "ELSE 'PRESS' END AS PROD_CATG, "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL, "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY, "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE , "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY, "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE , "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY,"
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE, "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY, "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND PARTY_CODE = '"+pPartycode+"' ) AS DET "
                    + "GROUP BY PARTY_CODE,PARTY_NAME,MACHINE_NO "
                    + "UNION ALL "
                    + "SELECT PARTY_CODE,PARTY_NAME,'' AS MACHINE_NO,CONCAT('PARTY TOTAL ',PARTY_CODE) AS POSITION_DESC,'' AS QUALITY_NO,CONCAT('PARTY TOTAL',PARTY_CODE) AS GROUP_NAME, '' AS CATG, CONCAT('PARTY TOTAL ',PARTY_CODE) AS PROD_CATG, "
                    + "SUM(POTENTIAL) AS POTENTIAL, "
                    + "SUM(PREV_PREV_YEAR_QTY) AS PREV_PREV_YEAR_QTY, "
                    + "SUM(PREV_PREV_YEAR_VALUE) AS PREV_PREV_YEAR_VALUE , "
                    + "SUM(PREV_YEAR_QTY) AS PREV_YEAR_QTY, "
                    + "SUM(PREV_YEAR_VALUE) AS PREV_YEAR_VALUE , "
                    + "SUM(WIP_QTY)  AS WIP_QTY, "
                    + "SUM(WIP_VALUE) AS WIP_VALUE, "
                    + "SUM(STOCK_QTY)  AS STOCK_QTY, "
                    + "SUM(STOCK_VALUE) AS STOCK_VALUE "
                    + "   ,1 AS A,1 AS B,1 AS C "
                    + "FROM ( "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN 'DRIER'  ELSE 'PRESS' END AS CATG, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF'  "
                    + "ELSE 'PRESS' END AS PROD_CATG, "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL, "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY, "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE , "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY, "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE , "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY, "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE, "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY, "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND PARTY_CODE = '"+pPartycode+"') AS DET "
                    + "GROUP BY PARTY_CODE,PARTY_NAME "
                    + "ORDER BY PARTY_CODE,PARTY_NAME ,MACHINE_NO,A,B,C,POSITION_DESC";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[20];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PARTY_CODE");
                    rowData[2] = rsTmp.getString("PARTY_NAME");
                    rowData[3] = rsTmp.getString("MACHINE_NO");
                    rowData[4] = rsTmp.getString("POSITION_DESC");
                    //rowData[5] = rsTmp.getString("QUALITY_NO");
                    //rowData[6] = rsTmp.getString("GROUP_NAME");
                    //rowData[7] = rsTmp.getString("CATG");
                    
                    //rowData[8] = rsTmp.getString("PROD_CATG");
                    rowData[5] = rsTmp.getString("POTENTIAL");
                    rowData[6] = rsTmp.getString("PREV_PREV_YEAR_QTY");
                    rowData[7] = rsTmp.getString("PREV_PREV_YEAR_VALUE");
                    rowData[8] = rsTmp.getString("PREV_YEAR_QTY");
                    rowData[9] = rsTmp.getString("PREV_YEAR_VALUE");
                    rowData[10] = rsTmp.getString("WIP_QTY");
                    rowData[11] = rsTmp.getString("WIP_VALUE");
                    rowData[12] = rsTmp.getString("STOCK_QTY");
                    rowData[13] = rsTmp.getString("STOCK_VALUE");
                    

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = TableMachinewise.getColumnModel();
                for (int column = 0; column < TableMachinewise.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < TableMachinewise.getRowCount(); row++) {
                        TableCellRenderer renderer = TableMachinewise.getCellRenderer(row, column);
                        Component comp = TableMachinewise.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    
    
    
    
}
    
private void GeneratePartyMachinewiseCategorywise(String pPartycode,String pMachineno){
    String cndtn = "";
    
        try {
            FormatGridMachinewiseCategorywise(); //clear existing content of table
            ResultSet rsTmp;
//            if (!txtPartycode.getText().trim().equals("")) {
//                cndtn += " AND PARTY_CODE= '" + txtPartycode.getText().trim() + "'";
//            }                
//            if (!txtMachine.getText().trim().equals("")) {
//                cndtn += " AND MACHINE_NO= '" + txtMachine.getText().trim() + "'";
//            }

            String strSQL = "";

            strSQL = "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,CONCAT('TOTAL ',CATG) AS POSITION_DESC,'' AS QUALITY_NO,'' AS GROUP_NAME, CATG, CONCAT('TOTAL ',CATG) AS PROD_CATG, "
                    + "SUM(POTENTIAL) AS POTENTIAL, "
                    + "SUM(PREV_PREV_YEAR_QTY) AS PREV_PREV_YEAR_QTY, "
                    + "SUM(PREV_PREV_YEAR_VALUE) AS PREV_PREV_YEAR_VALUE , "
                    + "SUM(PREV_YEAR_QTY) AS PREV_YEAR_QTY, "
                    + "SUM(PREV_YEAR_VALUE) AS PREV_YEAR_VALUE , "
                    + "SUM(WIP_QTY)  AS WIP_QTY, "
                    + "SUM(WIP_VALUE) AS WIP_VALUE, "
                    + "SUM(STOCK_QTY)  AS STOCK_QTY, "
                    + "SUM(STOCK_VALUE) AS STOCK_VALUE "
                    + ",A,B,C "
                    + "FROM ( "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN 'DRIER'  ELSE 'PRESS' END AS CATG, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF'  "
                    + "ELSE 'PRESS' END AS PROD_CATG, "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL, "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY, "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE , "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY, "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE , "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY, "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE, "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY, "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE "
                    + ",2 AS A, CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN '2'  ELSE '1' END AS B,2 AS C "
                    + "FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021  AND PARTY_CODE = '"+pPartycode+"') AS DET "
                    + "GROUP BY PARTY_CODE,PARTY_NAME,MACHINE_NO,CATG "
                    + "UNION ALL "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,CONCAT('TOTAL MACHINE NO. ',MACHINE_NO) AS POSITION_DESC,'' AS QUALITY_NO,CONCAT('TOTAL MACHINE NO. ',MACHINE_NO) AS GROUP_NAME, '' AS CATG, CONCAT('TOTAL MACHINE NO. ',MACHINE_NO) AS PROD_CATG, "
                    + "SUM(POTENTIAL) AS POTENTIAL, "
                    + "SUM(PREV_PREV_YEAR_QTY) AS PREV_PREV_YEAR_QTY, "
                    + "SUM(PREV_PREV_YEAR_VALUE) AS PREV_PREV_YEAR_VALUE , "
                    + "SUM(PREV_YEAR_QTY) AS PREV_YEAR_QTY, "
                    + "SUM(PREV_YEAR_VALUE) AS PREV_YEAR_VALUE , "
                    + "SUM(WIP_QTY)  AS WIP_QTY, "
                    + "SUM(WIP_VALUE) AS WIP_VALUE, "
                    + "SUM(STOCK_QTY)  AS STOCK_QTY, "
                    + "SUM(STOCK_VALUE) AS STOCK_VALUE "
                    + "  ,2 AS A,1 AS B,1 AS C "
                    + "FROM ( "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN 'DRIER'  ELSE 'PRESS' END AS CATG, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF'  "
                    + "ELSE 'PRESS' END AS PROD_CATG, "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL, "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY, "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE , "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY, "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE , "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY, "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE, "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY, "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND PARTY_CODE = '"+pPartycode+"' ) AS DET "
                    + "GROUP BY PARTY_CODE,PARTY_NAME,MACHINE_NO "
                    + "UNION ALL "
                    + "SELECT PARTY_CODE,PARTY_NAME,'' AS MACHINE_NO,CONCAT('PARTY TOTAL ',PARTY_CODE) AS POSITION_DESC,'' AS QUALITY_NO,CONCAT('PARTY TOTAL',PARTY_CODE) AS GROUP_NAME, '' AS CATG, CONCAT('PARTY TOTAL ',PARTY_CODE) AS PROD_CATG, "
                    + "SUM(POTENTIAL) AS POTENTIAL, "
                    + "SUM(PREV_PREV_YEAR_QTY) AS PREV_PREV_YEAR_QTY, "
                    + "SUM(PREV_PREV_YEAR_VALUE) AS PREV_PREV_YEAR_VALUE , "
                    + "SUM(PREV_YEAR_QTY) AS PREV_YEAR_QTY, "
                    + "SUM(PREV_YEAR_VALUE) AS PREV_YEAR_VALUE , "
                    + "SUM(WIP_QTY)  AS WIP_QTY, "
                    + "SUM(WIP_VALUE) AS WIP_VALUE, "
                    + "SUM(STOCK_QTY)  AS STOCK_QTY, "
                    + "SUM(STOCK_VALUE) AS STOCK_VALUE "
                    + "   ,1 AS A,1 AS B,1 AS C "
                    + "FROM ( "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN 'DRIER'  ELSE 'PRESS' END AS CATG, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF'  "
                    + "ELSE 'PRESS' END AS PROD_CATG, "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL, "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY, "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE ,COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY, "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE , "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY, "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE, "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY, "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND PARTY_CODE = '"+pPartycode+"') AS DET "
                    + "GROUP BY PARTY_CODE,PARTY_NAME "
                    + "ORDER BY PARTY_CODE,PARTY_NAME ,MACHINE_NO,A,B,C,POSITION_DESC";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[20];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PARTY_CODE");
                    rowData[2] = rsTmp.getString("PARTY_NAME");
                    rowData[3] = rsTmp.getString("MACHINE_NO");
                    rowData[4] = rsTmp.getString("POSITION_DESC");
//                    rowData[5] = rsTmp.getString("QUALITY_NO");
                    rowData[5] = rsTmp.getString("GROUP_NAME");
                    rowData[6] = rsTmp.getString("CATG");
                    
                    rowData[7] = rsTmp.getString("PROD_CATG");
                    rowData[8] = rsTmp.getString("POTENTIAL");
                    rowData[9] = rsTmp.getString("PREV_PREV_YEAR_QTY");
                    rowData[10] = rsTmp.getString("PREV_PREV_YEAR_VALUE");
                    rowData[11] = rsTmp.getString("PREV_YEAR_QTY");
                    rowData[12] = rsTmp.getString("PREV_YEAR_VALUE");
                    rowData[13] = rsTmp.getString("WIP_QTY");
                    rowData[14] = rsTmp.getString("WIP_VALUE");
                    rowData[15] = rsTmp.getString("STOCK_QTY");
                    rowData[16] = rsTmp.getString("STOCK_VALUE");
                    

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = TableMachinewiseCategorywise.getColumnModel();
                for (int column = 0; column < TableMachinewiseCategorywise.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < TableMachinewiseCategorywise.getRowCount(); row++) {
                        TableCellRenderer renderer = TableMachinewiseCategorywise.getCellRenderer(row, column);
                        Component comp = TableMachinewiseCategorywise.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    
}

private void GeneratePartySelectedMachineDetail(String pPartycode,String pMachineno){
    String cndtn = "";
    
        try {
            FormatGridSelectedMachineDetail(); //clear existing content of table
            ResultSet rsTmp;
//            if (!txtPartycode.getText().trim().equals("")) {
//                cndtn += " AND PARTY_CODE= '" + txtPartycode.getText().trim() + "'";
//            }                
//            if (!txtMachine.getText().trim().equals("")) {
//                cndtn += " AND MACHINE_NO= '" + txtMachine.getText().trim() + "'";
//            }
            
            String strSQL = "";

            strSQL = "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN 'DRIER'  ELSE 'PRESS' END AS CATG, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF'  "
                    + "ELSE 'PRESS' END AS PROD_CATG, "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL, "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY, "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE , "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY, "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE , "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY, "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE, "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY, "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE,2 AS A, CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN '2'  ELSE '1' END AS B,3 AS C FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND MACHINE_NO = '"+pMachineno+"' AND PARTY_CODE='"+pPartycode+"' "
                    + "UNION ALL "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,CONCAT('TOTAL ',CATG) AS POSITION_DESC,'' AS QUALITY_NO,'' AS GROUP_NAME, CATG, CONCAT('TOTAL ',CATG) AS PROD_CATG, "
                    + "SUM(POTENTIAL) AS POTENTIAL, "
                    + "SUM(PREV_PREV_YEAR_QTY) AS PREV_PREV_YEAR_QTY, "
                    + "SUM(PREV_PREV_YEAR_VALUE) AS PREV_PREV_YEAR_VALUE , "
                    + "SUM(PREV_YEAR_QTY) AS PREV_YEAR_QTY, "
                    + "SUM(PREV_YEAR_VALUE) AS PREV_YEAR_VALUE , "
                    + "SUM(WIP_QTY)  AS WIP_QTY, "
                    + "SUM(WIP_VALUE) AS WIP_VALUE, "
                    + "SUM(STOCK_QTY)  AS STOCK_QTY, "
                    + "SUM(STOCK_VALUE) AS STOCK_VALUE "
                    + ",A,B,C "
                    + "FROM ( "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN 'DRIER'  ELSE 'PRESS' END AS CATG, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF'  "
                    + "ELSE 'PRESS' END AS PROD_CATG, "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL, "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY, "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE , "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY, "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE , "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY, "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE, "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY, "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE "
                    + ",2 AS A, CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN '2'  ELSE '1' END AS B,2 AS C "
                    + "FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021  AND PARTY_CODE = '"+pPartycode+"' AND MACHINE_NO ='"+pMachineno+"') AS DET "
                    + "GROUP BY PARTY_CODE,PARTY_NAME,MACHINE_NO,CATG "
                    + "UNION ALL "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,CONCAT('TOTAL MACHINE NO. ',MACHINE_NO) AS POSITION_DESC,'' AS QUALITY_NO,CONCAT('TOTAL MACHINE NO. ',MACHINE_NO) AS GROUP_NAME, '' AS CATG, CONCAT('TOTAL MACHINE NO. ',MACHINE_NO) AS PROD_CATG, "
                    + "SUM(POTENTIAL) AS POTENTIAL, "
                    + "SUM(PREV_PREV_YEAR_QTY) AS PREV_PREV_YEAR_QTY, "
                    + "SUM(PREV_PREV_YEAR_VALUE) AS PREV_PREV_YEAR_VALUE , "
                    + "SUM(PREV_YEAR_QTY) AS PREV_YEAR_QTY, "
                    + "SUM(PREV_YEAR_VALUE) AS PREV_YEAR_VALUE , "
                    + "SUM(WIP_QTY)  AS WIP_QTY, "
                    + "SUM(WIP_VALUE) AS WIP_VALUE, "
                    + "SUM(STOCK_QTY)  AS STOCK_QTY, "
                    + "SUM(STOCK_VALUE) AS STOCK_VALUE "
                    + "  ,2 AS A,1 AS B,1 AS C "
                    + "FROM ( "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN 'DRIER'  ELSE 'PRESS' END AS CATG, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF'  "
                    + "ELSE 'PRESS' END AS PROD_CATG, "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL, "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY, "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE , "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY, "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE , "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY, "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE, "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY, "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND PARTY_CODE = '"+pPartycode+"' ) AS DET "
                    + "GROUP BY PARTY_CODE,PARTY_NAME,MACHINE_NO "
                    + "UNION ALL "
                    + "SELECT PARTY_CODE,PARTY_NAME,'' AS MACHINE_NO,CONCAT('PARTY TOTAL ',PARTY_CODE) AS POSITION_DESC,'' AS QUALITY_NO,CONCAT('PARTY TOTAL',PARTY_CODE) AS GROUP_NAME, '' AS CATG, CONCAT('PARTY TOTAL ',PARTY_CODE) AS PROD_CATG, "
                    + "SUM(POTENTIAL) AS POTENTIAL, "
                    + "SUM(PREV_PREV_YEAR_QTY) AS PREV_PREV_YEAR_QTY, "
                    + "SUM(PREV_PREV_YEAR_VALUE) AS PREV_PREV_YEAR_VALUE , "
                    + "SUM(PREV_YEAR_QTY) AS PREV_YEAR_QTY, "
                    + "SUM(PREV_YEAR_VALUE) AS PREV_YEAR_VALUE , "
                    + "SUM(WIP_QTY)  AS WIP_QTY, "
                    + "SUM(WIP_VALUE) AS WIP_VALUE, "
                    + "SUM(STOCK_QTY)  AS STOCK_QTY, "
                    + "SUM(STOCK_VALUE) AS STOCK_VALUE "
                    + "   ,1 AS A,1 AS B,1 AS C "
                    + "FROM ( "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN 'DRIER'  ELSE 'PRESS' END AS CATG, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF'  "
                    + "ELSE 'PRESS' END AS PROD_CATG, "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL, "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY, "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE , "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY, "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE , "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY, "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE, "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY, "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND PARTY_CODE = '"+pPartycode+"') AS DET "
                    + "GROUP BY PARTY_CODE,PARTY_NAME "
                    + "ORDER BY PARTY_CODE,PARTY_NAME ,MACHINE_NO,A,B,C,POSITION_DESC ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[20];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PARTY_CODE");
                    rowData[2] = rsTmp.getString("PARTY_NAME");
                    rowData[3] = rsTmp.getString("MACHINE_NO");
                    rowData[4] = rsTmp.getString("POSITION_DESC");
                    rowData[5] = rsTmp.getString("QUALITY_NO");
                    rowData[6] = rsTmp.getString("GROUP_NAME");
                    rowData[7] = rsTmp.getString("CATG");
                    
                    rowData[8] = rsTmp.getString("PROD_CATG");
                    rowData[9] = rsTmp.getString("POTENTIAL");
                    rowData[10] = rsTmp.getString("PREV_PREV_YEAR_QTY");
                    rowData[11] = rsTmp.getString("PREV_PREV_YEAR_VALUE");
                    rowData[12] = rsTmp.getString("PREV_YEAR_QTY");
                    rowData[13] = rsTmp.getString("PREV_YEAR_VALUE");
                    rowData[14] = rsTmp.getString("WIP_QTY");
                    rowData[15] = rsTmp.getString("WIP_VALUE");
                    rowData[16] = rsTmp.getString("STOCK_QTY");
                    rowData[17] = rsTmp.getString("STOCK_VALUE");
                    

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = TableSelectedMachine.getColumnModel();
                for (int column = 0; column < TableSelectedMachine.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < TableSelectedMachine.getRowCount(); row++) {
                        TableCellRenderer renderer = TableSelectedMachine.getCellRenderer(row, column);
                        Component comp = TableSelectedMachine.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    
    
    
    
}

private void GeneratePartyMachinewiseCategorywiseDetail(String pPartycode,String pMachineno){
    String cndtn = "";
    
        try {
            FormatGridMachinewiseCategorywiseDetail(); //clear existing content of table
            ResultSet rsTmp;
//            if (!txtPartycode.getText().trim().equals("")) {
//                cndtn += " AND PARTY_CODE= '" + txtPartycode.getText().trim() + "'";
//            }                
//            if (!txtMachine.getText().trim().equals("")) {
//                cndtn += " AND MACHINE_NO= '" + txtMachine.getText().trim() + "'";
//            }
            
            String strSQL = "";

            strSQL = "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN 'DRIER'  ELSE 'PRESS' END AS CATG, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF'  "
                    + "ELSE 'PRESS' END AS PROD_CATG, "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL, "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY, "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE , "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY, "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE , "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY, "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE, "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY, "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE,2 AS A, CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN '2'  ELSE '1' END AS B,3 AS C FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND PARTY_CODE='"+pPartycode+"' "
                    + "UNION ALL "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,CONCAT('TOTAL ',CATG) AS POSITION_DESC,'' AS QUALITY_NO,'' AS GROUP_NAME, CATG, CONCAT('TOTAL ',CATG) AS PROD_CATG, "
                    + "SUM(POTENTIAL) AS POTENTIAL, "
                    + "SUM(PREV_PREV_YEAR_QTY) AS PREV_PREV_YEAR_QTY, "
                    + "SUM(PREV_PREV_YEAR_VALUE) AS PREV_PREV_YEAR_VALUE , "
                    + "SUM(PREV_YEAR_QTY) AS PREV_YEAR_QTY, "
                    + "SUM(PREV_YEAR_VALUE) AS PREV_YEAR_VALUE , "
                    + "SUM(WIP_QTY)  AS WIP_QTY, "
                    + "SUM(WIP_VALUE) AS WIP_VALUE, "
                    + "SUM(STOCK_QTY)  AS STOCK_QTY, "
                    + "SUM(STOCK_VALUE) AS STOCK_VALUE "
                    + ",A,B,C "
                    + "FROM ( "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN 'DRIER'  ELSE 'PRESS' END AS CATG, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF'  "
                    + "ELSE 'PRESS' END AS PROD_CATG, "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL, "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY, "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE , "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY, "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE , "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY, "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE, "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY, "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE "
                    + ",2 AS A, CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN '2'  ELSE '1' END AS B,2 AS C "
                    + "FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021  AND PARTY_CODE = '"+pPartycode+"' ) AS DET "
                    + "GROUP BY PARTY_CODE,PARTY_NAME,MACHINE_NO,CATG "
                    + "UNION ALL "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,CONCAT('TOTAL MACHINE NO. ',MACHINE_NO) AS POSITION_DESC,'' AS QUALITY_NO,CONCAT('TOTAL MACHINE NO. ',MACHINE_NO) AS GROUP_NAME, '' AS CATG, CONCAT('TOTAL MACHINE NO. ',MACHINE_NO) AS PROD_CATG, "
                    + "SUM(POTENTIAL) AS POTENTIAL, "
                    + "SUM(PREV_PREV_YEAR_QTY) AS PREV_PREV_YEAR_QTY, "
                    + "SUM(PREV_PREV_YEAR_VALUE) AS PREV_PREV_YEAR_VALUE , "
                    + "SUM(PREV_YEAR_QTY) AS PREV_YEAR_QTY, "
                    + "SUM(PREV_YEAR_VALUE) AS PREV_YEAR_VALUE , "
                    + "SUM(WIP_QTY)  AS WIP_QTY, "
                    + "SUM(WIP_VALUE) AS WIP_VALUE, "
                    + "SUM(STOCK_QTY)  AS STOCK_QTY, "
                    + "SUM(STOCK_VALUE) AS STOCK_VALUE "
                    + "  ,2 AS A,1 AS B,1 AS C "
                    + "FROM ( "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN 'DRIER'  ELSE 'PRESS' END AS CATG, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF'  "
                    + "ELSE 'PRESS' END AS PROD_CATG, "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL, "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY, "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE , "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY, "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE , "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY, "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE, "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY, "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND PARTY_CODE = '"+pPartycode+"' ) AS DET "
                    + "GROUP BY PARTY_CODE,PARTY_NAME,MACHINE_NO "
                    + "UNION ALL  "
                    + "SELECT PARTY_CODE,PARTY_NAME,'' AS MACHINE_NO,CONCAT('PARTY TOTAL ',PARTY_CODE) AS POSITION_DESC,'' AS QUALITY_NO,CONCAT('PARTY TOTAL',PARTY_CODE) AS GROUP_NAME, '' AS CATG, CONCAT('PARTY TOTAL ',PARTY_CODE) AS PROD_CATG, "
                    + "SUM(POTENTIAL) AS POTENTIAL, "
                    + "SUM(PREV_PREV_YEAR_QTY) AS PREV_PREV_YEAR_QTY, "
                    + "SUM(PREV_PREV_YEAR_VALUE) AS PREV_PREV_YEAR_VALUE , "
                    + "SUM(PREV_YEAR_QTY) AS PREV_YEAR_QTY, "
                    + "SUM(PREV_YEAR_VALUE) AS PREV_YEAR_VALUE , "
                    + "SUM(WIP_QTY)  AS WIP_QTY, "
                    + "SUM(WIP_VALUE) AS WIP_VALUE, "
                    + "SUM(STOCK_QTY)  AS STOCK_QTY, "
                    + "SUM(STOCK_VALUE) AS STOCK_VALUE "
                    + "   ,1 AS A,1 AS B,1 AS C "
                    + "FROM ( "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN 'DRIER'  ELSE 'PRESS' END AS CATG, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF'  "
                    + "ELSE 'PRESS' END AS PROD_CATG, "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL, "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY, "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE , "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY, "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE , "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY, "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE, "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY, "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND PARTY_CODE = '"+pPartycode+"') AS DET "
                    + "GROUP BY PARTY_CODE,PARTY_NAME "
                    + "ORDER BY PARTY_CODE,PARTY_NAME ,MACHINE_NO,A,B,C,POSITION_DESC";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[20];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PARTY_CODE");
                    rowData[2] = rsTmp.getString("PARTY_NAME");
                    rowData[3] = rsTmp.getString("MACHINE_NO");
                    rowData[4] = rsTmp.getString("POSITION_DESC");
                    rowData[5] = rsTmp.getString("QUALITY_NO");
                    rowData[6] = rsTmp.getString("GROUP_NAME");
                    rowData[7] = rsTmp.getString("CATG");
                    
                    rowData[8] = rsTmp.getString("PROD_CATG");
                    rowData[9] = rsTmp.getString("POTENTIAL");
                    rowData[10] = rsTmp.getString("PREV_PREV_YEAR_QTY");
                    rowData[11] = rsTmp.getString("PREV_PREV_YEAR_VALUE");
                    rowData[12] = rsTmp.getString("PREV_YEAR_QTY");
                    rowData[13] = rsTmp.getString("PREV_YEAR_VALUE");
                    rowData[14] = rsTmp.getString("WIP_QTY");
                    rowData[15] = rsTmp.getString("WIP_VALUE");
                    rowData[16] = rsTmp.getString("STOCK_QTY");
                    rowData[17] = rsTmp.getString("STOCK_VALUE");
                    

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = TableMachinewiseCategorywiseDetail.getColumnModel();
                for (int column = 0; column < TableMachinewiseCategorywiseDetail.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < TableMachinewiseCategorywiseDetail.getRowCount(); row++) {
                        TableCellRenderer renderer = TableMachinewiseCategorywiseDetail.getCellRenderer(row, column);
                        Component comp = TableMachinewiseCategorywiseDetail.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    
    
    
    
}

private void GenerateMachineProductGroupDetail(String pPartycode,String pMachineno){
    String cndtn = "";
    
        try {
            FormatGridMachineProductGroupDetail(); //clear existing content of table
            ResultSet rsTmp;
//            if (!txtPartycode.getText().trim().equals("")) {
//                cndtn += " AND PARTY_CODE= '" + txtPartycode.getText().trim() + "'";
//            }                
//            if (!txtMachine.getText().trim().equals("")) {
//                cndtn += " AND MACHINE_NO= '" + txtMachine.getText().trim() + "'";
//            }
            
            String strSQL = "";

            strSQL = "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF' "
                    + "WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACFC' "
                    + "ELSE 'PRESS' END  AS CATG, "
                    + " CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF' "
                    + "WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACFC' "
                    + "ELSE 'PRESS' END AS PROD_CATG, "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL, "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY, "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE , "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY, "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE , "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY, "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE, "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY, "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE,2 AS A, CASE WHEN GROUP_NAME IN ('HDS') THEN '3'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN '4' "
                    + "WHEN GROUP_NAME IN ('ACNE','FCNE') THEN '2' "
                    + "ELSE '1' END  AS B,3 AS C FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND PARTY_CODE = '"+pPartycode+"'  "
                    + "UNION ALL  "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,CONCAT('TOTAL ',PROD_CATG) AS POSITION_DESC,'' AS QUALITY_NO,'' AS GROUP_NAME, PROD_CATG AS CATG, CONCAT('TOTAL ',PROD_CATG) AS PROD_CATG, "
                    + "SUM(POTENTIAL) AS POTENTIAL, "
                    + "SUM(PREV_PREV_YEAR_QTY) AS PREV_PREV_YEAR_QTY, "
                    + "SUM(PREV_PREV_YEAR_VALUE) AS PREV_PREV_YEAR_VALUE , "
                    + "SUM(PREV_YEAR_QTY) AS PREV_YEAR_QTY, "
                    + "SUM(PREV_YEAR_VALUE) AS PREV_YEAR_VALUE , "
                    + "SUM(WIP_QTY)  AS WIP_QTY, "
                    + "SUM(WIP_VALUE) AS WIP_VALUE, "
                    + "SUM(STOCK_QTY)  AS STOCK_QTY, "
                    + "SUM(STOCK_VALUE) AS STOCK_VALUE "
                    + ",A,B,C "
                    + "FROM ( "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF' "
                    + "WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACFC' "
                    + "ELSE 'PRESS' END  AS CATG, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF' "
                    + "WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACFC' "
                    + "ELSE 'PRESS' END AS PROD_CATG, "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL, "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY, "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE , "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY, "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE , "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY, "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE, "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY, "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE "
                    + ",2 AS A, CASE WHEN GROUP_NAME IN ('HDS') THEN '3'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN '4' "
                    + "WHEN GROUP_NAME IN ('ACNE','FCNE') THEN '2' "
                    + "ELSE '1' END  AS B,2 AS C "
                    + "FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND PARTY_CODE = '"+pPartycode+"') AS DET "
                    + "GROUP BY PARTY_CODE,PARTY_NAME,MACHINE_NO,PROD_CATG "
                    + "UNION ALL "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,CONCAT('TOTAL MACHINE NO. ',MACHINE_NO) AS POSITION_DESC,'' AS QUALITY_NO,CONCAT('TOTAL MACHINE NO. ',MACHINE_NO) AS GROUP_NAME, '' AS CATG, CONCAT('TOTAL MACHINE NO. ',MACHINE_NO) AS PROD_CATG, "
                    + "SUM(POTENTIAL) AS POTENTIAL, "
                    + "SUM(PREV_PREV_YEAR_QTY) AS PREV_PREV_YEAR_QTY, "
                    + "SUM(PREV_PREV_YEAR_VALUE) AS PREV_PREV_YEAR_VALUE , "
                    + "SUM(PREV_YEAR_QTY) AS PREV_YEAR_QTY, "
                    + "SUM(PREV_YEAR_VALUE) AS PREV_YEAR_VALUE , "
                    + "SUM(WIP_QTY)  AS WIP_QTY, "
                    + "SUM(WIP_VALUE) AS WIP_VALUE, "
                    + "SUM(STOCK_QTY)  AS STOCK_QTY, "
                    + "SUM(STOCK_VALUE) AS STOCK_VALUE "
                    + "  ,2 AS A,1 AS B,1 AS C "
                    + "FROM ( "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN 'DRIER'  ELSE 'PRESS' END AS CATG, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF' "
                    + "WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACFC' "
                    + "ELSE 'PRESS' END AS PROD_CATG, "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL, "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY, "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE , "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY, "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE , "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY, "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE, "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY, "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND PARTY_CODE = '"+pPartycode+"') AS DET "
                    + "GROUP BY PARTY_CODE,PARTY_NAME,MACHINE_NO "
                    + "UNION ALL  "
                    + "SELECT PARTY_CODE,PARTY_NAME,'' AS MACHINE_NO,CONCAT('PARTY TOTAL ',PARTY_CODE) AS POSITION_DESC,'' AS QUALITY_NO,CONCAT('PARTY TOTAL',PARTY_CODE) AS GROUP_NAME, '' AS CATG, CONCAT('PARTY TOTAL ',PARTY_CODE) AS PROD_CATG, "
                    + "SUM(POTENTIAL) AS POTENTIAL, "
                    + "SUM(PREV_PREV_YEAR_QTY) AS PREV_PREV_YEAR_QTY,  "
                    + "SUM(PREV_PREV_YEAR_VALUE) AS PREV_PREV_YEAR_VALUE , "
                    + "SUM(PREV_YEAR_QTY) AS PREV_YEAR_QTY, "
                    + "SUM(PREV_YEAR_VALUE) AS PREV_YEAR_VALUE , "
                    + "SUM(WIP_QTY)  AS WIP_QTY,  "
                    + "SUM(WIP_VALUE) AS WIP_VALUE, "
                    + "SUM(STOCK_QTY)  AS STOCK_QTY,  "
                    + "SUM(STOCK_VALUE) AS STOCK_VALUE "
                    + "   ,1 AS A,1 AS B,1 AS C  "
                    + "FROM ( "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN 'DRIER'  ELSE 'PRESS' END AS CATG, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF' "
                    + "WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACFC'  "
                    + "ELSE 'PRESS' END AS PROD_CATG, "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL, "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY, "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE , "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY, "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE , "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY, "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE, "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY, "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND PARTY_CODE = '"+pPartycode+"') AS DET "
                    + "GROUP BY PARTY_CODE,PARTY_NAME "
                    + "ORDER BY PARTY_CODE,PARTY_NAME ,MACHINE_NO,A,B,C,POSITION_DESC";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[20];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PARTY_CODE");
                    rowData[2] = rsTmp.getString("PARTY_NAME");
                    rowData[3] = rsTmp.getString("MACHINE_NO");
                    rowData[4] = rsTmp.getString("POSITION_DESC");
                    rowData[5] = rsTmp.getString("QUALITY_NO");
                    rowData[6] = rsTmp.getString("GROUP_NAME");
                    rowData[7] = rsTmp.getString("CATG");
                    
                    rowData[8] = rsTmp.getString("PROD_CATG");
                    rowData[9] = rsTmp.getString("POTENTIAL");
                    rowData[10] = rsTmp.getString("PREV_PREV_YEAR_QTY");
                    rowData[11] = rsTmp.getString("PREV_PREV_YEAR_VALUE");
                    rowData[12] = rsTmp.getString("PREV_YEAR_QTY");
                    rowData[13] = rsTmp.getString("PREV_YEAR_VALUE");
                    rowData[14] = rsTmp.getString("WIP_QTY");
                    rowData[15] = rsTmp.getString("WIP_VALUE");
                    rowData[16] = rsTmp.getString("STOCK_QTY");
                    rowData[17] = rsTmp.getString("STOCK_VALUE");
                    

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = TableMachineProductGroupDetail.getColumnModel();
                for (int column = 0; column < TableMachineProductGroupDetail.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < TableMachineProductGroupDetail.getRowCount(); row++) {
                        TableCellRenderer renderer = TableMachineProductGroupDetail.getCellRenderer(row, column);
                        Component comp = TableMachineProductGroupDetail.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    
    
    
    
}

private void GenerateMachinewiseProductSummary(String pPartycode,String pMachineno){
    String cndtn = "";
    
        try {
            FormatGridMachinewiseProductSummary(); //clear existing content of table
            ResultSet rsTmp;
//            if (!txtPartycode.getText().trim().equals("")) {
//                cndtn += " AND PARTY_CODE= '" + txtPartycode.getText().trim() + "'";
//            }                
//            if (!txtMachine.getText().trim().equals("")) {
//                cndtn += " AND MACHINE_NO= '" + txtMachine.getText().trim() + "'";
//            }
            
            String strSQL = "";

            strSQL = "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,CONCAT('TOTAL ',PROD_CATG) AS POSITION_DESC,'' AS QUALITY_NO,'' AS GROUP_NAME, PROD_CATG AS CATG, CONCAT('TOTAL ',PROD_CATG) AS PROD_CATG, "
                    + "SUM(POTENTIAL) AS POTENTIAL, "
                    + "SUM(PREV_PREV_YEAR_QTY) AS PREV_PREV_YEAR_QTY, "
                    + "SUM(PREV_PREV_YEAR_VALUE) AS PREV_PREV_YEAR_VALUE , "
                    + "SUM(PREV_YEAR_QTY) AS PREV_YEAR_QTY, "
                    + "SUM(PREV_YEAR_VALUE) AS PREV_YEAR_VALUE , "
                    + "SUM(WIP_QTY)  AS WIP_QTY, "
                    + "SUM(WIP_VALUE) AS WIP_VALUE, "
                    + "SUM(STOCK_QTY)  AS STOCK_QTY, "
                    + "SUM(STOCK_VALUE) AS STOCK_VALUE "
                    + ",A,B,C "
                    + "FROM ( "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF' "
                    + "WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACFC' "
                    + "ELSE 'PRESS' END  AS CATG, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF' "
                    + "WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACFC'  "
                    + "ELSE 'PRESS' END AS PROD_CATG,  "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL,  "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY, "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE , "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY, "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE , "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY, "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE, "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY, "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE "
                    + ",2 AS A, CASE WHEN GROUP_NAME IN ('HDS') THEN '3'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN '4'  "
                    + "WHEN GROUP_NAME IN ('ACNE','FCNE') THEN '2'  "
                    + "ELSE '1' END  AS B,2 AS C  "
                    + "FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND PARTY_CODE = '"+pPartycode+"') AS DET "
                    + "GROUP BY PARTY_CODE,PARTY_NAME,MACHINE_NO,PROD_CATG  "
                    + "UNION ALL  "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,CONCAT('TOTAL MACHINE NO. ',MACHINE_NO) AS POSITION_DESC,'' AS QUALITY_NO,CONCAT('TOTAL MACHINE NO. ',MACHINE_NO) AS GROUP_NAME, '' AS CATG, CONCAT('TOTAL MACHINE NO. ',MACHINE_NO) AS PROD_CATG, "
                    + "SUM(POTENTIAL) AS POTENTIAL, "
                    + "SUM(PREV_PREV_YEAR_QTY) AS PREV_PREV_YEAR_QTY, "
                    + "SUM(PREV_PREV_YEAR_VALUE) AS PREV_PREV_YEAR_VALUE , "
                    + "SUM(PREV_YEAR_QTY) AS PREV_YEAR_QTY, "
                    + "SUM(PREV_YEAR_VALUE) AS PREV_YEAR_VALUE , "
                    + "SUM(WIP_QTY)  AS WIP_QTY, "
                    + "SUM(WIP_VALUE) AS WIP_VALUE, "
                    + "SUM(STOCK_QTY)  AS STOCK_QTY, "
                    + "SUM(STOCK_VALUE) AS STOCK_VALUE "
                    + "  ,2 AS A,1 AS B,1 AS C  "
                    + "FROM ( "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN 'DRIER'  ELSE 'PRESS' END AS CATG,  "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF'  "
                    + "WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACFC'  "
                    + "ELSE 'PRESS' END AS PROD_CATG,  "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL,  "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY,  "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE ,  "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY, "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE , "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY,  "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE,  "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY,  "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND PARTY_CODE = '"+pPartycode+"') AS DET  "
                    + "GROUP BY PARTY_CODE,PARTY_NAME,MACHINE_NO  "
                    + "UNION ALL  "
                    + "SELECT PARTY_CODE,PARTY_NAME,'' AS MACHINE_NO,CONCAT('PARTY TOTAL ',PARTY_CODE) AS POSITION_DESC,'' AS QUALITY_NO,CONCAT('PARTY TOTAL',PARTY_CODE) AS GROUP_NAME, '' AS CATG, CONCAT('PARTY TOTAL ',PARTY_CODE) AS PROD_CATG, "
                    + "SUM(POTENTIAL) AS POTENTIAL,  "
                    + "SUM(PREV_PREV_YEAR_QTY) AS PREV_PREV_YEAR_QTY,  "
                    + "SUM(PREV_PREV_YEAR_VALUE) AS PREV_PREV_YEAR_VALUE , "
                    + "SUM(PREV_YEAR_QTY) AS PREV_YEAR_QTY,  "
                    + "SUM(PREV_YEAR_VALUE) AS PREV_YEAR_VALUE , "
                    + "SUM(WIP_QTY)  AS WIP_QTY,  "
                    + "SUM(WIP_VALUE) AS WIP_VALUE,  "
                    + "SUM(STOCK_QTY)  AS STOCK_QTY,  "
                    + "SUM(STOCK_VALUE) AS STOCK_VALUE  "
                    + "   ,1 AS A,1 AS B,1 AS C  "
                    + "FROM (  "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN 'DRIER'  ELSE 'PRESS' END AS CATG, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF'  "
                    + "WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACFC'  "
                    + "ELSE 'PRESS' END AS PROD_CATG,  "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL,  "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY,  "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE ,  "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY,  "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE ,  "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY,  "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE,  "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY,  "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND PARTY_CODE = '"+pPartycode+"') AS DET "
                    + "GROUP BY PARTY_CODE,PARTY_NAME  "
                    + "ORDER BY PARTY_CODE,PARTY_NAME ,MACHINE_NO,A,B,C,POSITION_DESC ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[20];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PARTY_CODE");
                    rowData[2] = rsTmp.getString("PARTY_NAME");
                    rowData[3] = rsTmp.getString("MACHINE_NO");
                    rowData[4] = rsTmp.getString("POSITION_DESC");
                    //rowData[5] = rsTmp.getString("QUALITY_NO");
                    rowData[5] = rsTmp.getString("GROUP_NAME");
                    rowData[6] = rsTmp.getString("CATG");
                    
                    rowData[7] = rsTmp.getString("PROD_CATG");
                    rowData[8] = rsTmp.getString("POTENTIAL");
                    rowData[9] = rsTmp.getString("PREV_PREV_YEAR_QTY");
                    rowData[10] = rsTmp.getString("PREV_PREV_YEAR_VALUE");
                    rowData[11] = rsTmp.getString("PREV_YEAR_QTY");
                    rowData[12] = rsTmp.getString("PREV_YEAR_VALUE");
                    rowData[13] = rsTmp.getString("WIP_QTY");
                    rowData[14] = rsTmp.getString("WIP_VALUE");
                    rowData[15] = rsTmp.getString("STOCK_QTY");
                    rowData[16] = rsTmp.getString("STOCK_VALUE");
                    

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = TableMachinewiseProductSummary.getColumnModel();
                for (int column = 0; column < TableMachinewiseProductSummary.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < TableMachinewiseProductSummary.getRowCount(); row++) {
                        TableCellRenderer renderer = TableMachinewiseProductSummary.getCellRenderer(row, column);
                        Component comp = TableMachinewiseProductSummary.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    
    
    
    
}

private void GenerateSelectedMachineProductwiseDetail(String pPartycode,String pMachineno){
    String cndtn = "";
    
        try {
            FormatGridSelectedMachineProductwiseDetail();
            ResultSet rsTmp;
//            if (!txtPartycode.getText().trim().equals("")) {
//                cndtn += " AND PARTY_CODE= '" + txtPartycode.getText().trim() + "'";
//            }                
//            if (!txtMachine.getText().trim().equals("")) {
//                cndtn += " AND MACHINE_NO= '" + txtMachine.getText().trim() + "'";
//            }
            
            String strSQL = "";

            strSQL = "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF'  "
                    + "WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACFC'  "
                    + "ELSE 'PRESS' END  AS CATG,  "
                    + " CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'   "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF'  "
                    + "WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACFC'  "
                    + "ELSE 'PRESS' END AS PROD_CATG, "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL, "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY,  "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE ,  "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY,  "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE ,  "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY,  "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE,  "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY,  "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE,2 AS A, CASE WHEN GROUP_NAME IN ('HDS') THEN '3'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN '4'  "
                    + "WHEN GROUP_NAME IN ('ACNE','FCNE') THEN '2'  "
                    + "ELSE '1' END  AS B,3 AS C FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND PARTY_CODE = '"+pPartycode+"' AND MACHINE_NO ='"+pMachineno+"'  "
                    + "UNION ALL    "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,CONCAT('TOTAL ',PROD_CATG) AS POSITION_DESC,'' AS QUALITY_NO,'' AS GROUP_NAME, PROD_CATG AS CATG, CONCAT('TOTAL ',PROD_CATG) AS PROD_CATG, "
                    + "SUM(POTENTIAL) AS POTENTIAL, "
                    + "SUM(PREV_PREV_YEAR_QTY) AS PREV_PREV_YEAR_QTY, "
                    + "SUM(PREV_PREV_YEAR_VALUE) AS PREV_PREV_YEAR_VALUE , "
                    + "SUM(PREV_YEAR_QTY) AS PREV_YEAR_QTY, "
                    + "SUM(PREV_YEAR_VALUE) AS PREV_YEAR_VALUE , "
                    + "SUM(WIP_QTY)  AS WIP_QTY, "
                    + "SUM(WIP_VALUE) AS WIP_VALUE, "
                    + "SUM(STOCK_QTY)  AS STOCK_QTY, "
                    + "SUM(STOCK_VALUE) AS STOCK_VALUE "
                    + ",A,B,C  "
                    + "FROM ( "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF'  "
                    + "WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACFC'  "
                    + "ELSE 'PRESS' END  AS CATG,  "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF'  "
                    + "WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACFC'  "
                    + "ELSE 'PRESS' END AS PROD_CATG,  "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL,  "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY,  "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE , "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY,  "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE , "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY,  "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE,  "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY,  "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE  "
                    + ",2 AS A, CASE WHEN GROUP_NAME IN ('HDS') THEN '3'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN '4'  "
                    + "WHEN GROUP_NAME IN ('ACNE','FCNE') THEN '2'  "
                    + "ELSE '1' END  AS B,2 AS C  "
                    + "FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND PARTY_CODE = '"+pPartycode+"' AND MACHINE_NO ='"+pMachineno+"') AS DET  "
                    + "GROUP BY PARTY_CODE,PARTY_NAME,MACHINE_NO,PROD_CATG  "
                    + "UNION ALL  "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,CONCAT('TOTAL MACHINE NO. ',MACHINE_NO) AS POSITION_DESC,'' AS QUALITY_NO,CONCAT('TOTAL MACHINE NO. ',MACHINE_NO) AS GROUP_NAME, '' AS CATG, CONCAT('TOTAL MACHINE NO. ',MACHINE_NO) AS PROD_CATG,  "
                    + "SUM(POTENTIAL) AS POTENTIAL,  "
                    + "SUM(PREV_PREV_YEAR_QTY) AS PREV_PREV_YEAR_QTY,  "
                    + "SUM(PREV_PREV_YEAR_VALUE) AS PREV_PREV_YEAR_VALUE ,  "
                    + "SUM(PREV_YEAR_QTY) AS PREV_YEAR_QTY,  "
                    + "SUM(PREV_YEAR_VALUE) AS PREV_YEAR_VALUE ,  "
                    + "SUM(WIP_QTY)  AS WIP_QTY, "
                    + "SUM(WIP_VALUE) AS WIP_VALUE,  "
                    + "SUM(STOCK_QTY)  AS STOCK_QTY,  "
                    + "SUM(STOCK_VALUE) AS STOCK_VALUE  "
                    + "  ,2 AS A,1 AS B,1 AS C  "
                    + "FROM ( "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME, "
                    + "CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN 'DRIER'  ELSE 'PRESS' END AS CATG, "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'  "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF'  "
                    + "WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACFC'  "
                    + "ELSE 'PRESS' END AS PROD_CATG,  "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL,  "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY,  "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE ,  "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY,  "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE ,  "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY,  "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE,  "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY,  "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND PARTY_CODE = '"+pPartycode+"') AS DET "
                    + "GROUP BY PARTY_CODE,PARTY_NAME,MACHINE_NO  "
                    + "UNION ALL  "
                    + "SELECT PARTY_CODE,PARTY_NAME,'' AS MACHINE_NO,CONCAT('PARTY TOTAL ',PARTY_CODE) AS POSITION_DESC,'' AS QUALITY_NO,CONCAT('PARTY TOTAL',PARTY_CODE) AS GROUP_NAME, '' AS CATG, CONCAT('PARTY TOTAL ',PARTY_CODE) AS PROD_CATG, "
                    + "SUM(POTENTIAL) AS POTENTIAL,  "
                    + "SUM(PREV_PREV_YEAR_QTY) AS PREV_PREV_YEAR_QTY,  "
                    + "SUM(PREV_PREV_YEAR_VALUE) AS PREV_PREV_YEAR_VALUE ,  "
                    + "SUM(PREV_YEAR_QTY) AS PREV_YEAR_QTY,  "
                    + "SUM(PREV_YEAR_VALUE) AS PREV_YEAR_VALUE ,  "
                    + "SUM(WIP_QTY)  AS WIP_QTY,  "
                    + "SUM(WIP_VALUE) AS WIP_VALUE,  "
                    + "SUM(STOCK_QTY)  AS STOCK_QTY,  "
                    + "SUM(STOCK_VALUE) AS STOCK_VALUE  "
                    + "   ,1 AS A,1 AS B,1 AS C  "
                    + "FROM ( "
                    + "SELECT PARTY_CODE,PARTY_NAME,MACHINE_NO,POSITION_DESC,QUALITY_NO,GROUP_NAME,  "
                    + "CASE WHEN GROUP_NAME IN ('HDS','SDF') THEN 'DRIER'  ELSE 'PRESS' END AS CATG,  "
                    + "CASE WHEN GROUP_NAME IN ('HDS') THEN 'HDS'   "
                    + "WHEN GROUP_NAME IN ('SDF') THEN 'SDF'  "
                    + "WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACFC'  "
                    + "ELSE 'PRESS' END AS PROD_CATG,  "
                    + "COALESCE(POTENTIAL,0) AS POTENTIAL,  "
                    + "COALESCE(PREV_PREV_YEAR_QTY,0) AS PREV_PREV_YEAR_QTY,  "
                    + "COALESCE(PREV_PREV_YEAR_VALUE,0) AS PREV_PREV_YEAR_VALUE ,  "
                    + "COALESCE(PREV_YEAR_QTY,0) AS PREV_YEAR_QTY,  "
                    + "COALESCE(PREV_YEAR_VALUE,0)  AS PREV_YEAR_VALUE ,  "
                    + "COALESCE(WIP_QTY,0)  AS WIP_QTY,  "
                    + "COALESCE(WIP_VALUE,0)  AS WIP_VALUE,  "
                    + "COALESCE(STOCK_QTY,0)  AS STOCK_QTY,  "
                    + "COALESCE(STOCK_VALUE,0)  AS STOCK_VALUE FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE YEAR_FROM = 2020 AND YEAR_TO = 2021 AND PARTY_CODE = '"+pPartycode+"') AS DET "
                    + "GROUP BY PARTY_CODE,PARTY_NAME  "
                    + "ORDER BY PARTY_CODE,PARTY_NAME ,MACHINE_NO,A,B,C,POSITION_DESC ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[20];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PARTY_CODE");
                    rowData[2] = rsTmp.getString("PARTY_NAME");
                    rowData[3] = rsTmp.getString("MACHINE_NO");
                    rowData[4] = rsTmp.getString("POSITION_DESC");
                    rowData[5] = rsTmp.getString("QUALITY_NO");
                    rowData[6] = rsTmp.getString("GROUP_NAME");
                    rowData[7] = rsTmp.getString("CATG");
                    
                    rowData[8] = rsTmp.getString("PROD_CATG");
                    rowData[9] = rsTmp.getString("POTENTIAL");
                    rowData[10] = rsTmp.getString("PREV_PREV_YEAR_QTY");
                    rowData[11] = rsTmp.getString("PREV_PREV_YEAR_VALUE");
                    rowData[12] = rsTmp.getString("PREV_YEAR_QTY");
                    rowData[13] = rsTmp.getString("PREV_YEAR_VALUE");
                    rowData[14] = rsTmp.getString("WIP_QTY");
                    rowData[15] = rsTmp.getString("WIP_VALUE");
                    rowData[16] = rsTmp.getString("STOCK_QTY");
                    rowData[17] = rsTmp.getString("STOCK_VALUE");
                    

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = TableSelectedMachineProductwiseDetail.getColumnModel();
                for (int column = 0; column < TableSelectedMachineProductwiseDetail.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < TableSelectedMachineProductwiseDetail.getRowCount(); row++) {
                        TableCellRenderer renderer = TableSelectedMachineProductwiseDetail.getCellRenderer(row, column);
                        Component comp = TableSelectedMachineProductwiseDetail.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    
    
    
    
}

public void GetParameter(String pPartycode, String pMachineno) {
 String partycode=pPartycode;
 String machineno=pMachineno; 
 
    System.out.println(partycode);
    System.out.println(machineno);
    
    txtPartycode.setEnabled(false);
    txtMachine.setEnabled(false); 
    
    txtPartycode.setText(pPartycode);     
    txtPartyName.setText(data.getStringValueFromDB("SELECT PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='"+pPartycode+"'"));
    txtMachine.setText(pMachineno);
    
    GeneratePartySalesHistory(pPartycode,pMachineno);
    GeneratePartyMachinewise(pPartycode,pMachineno);    
    GeneratePartyMachinewiseCategorywise(pPartycode,pMachineno);
    GeneratePartySelectedMachineDetail(pPartycode,pMachineno);
    GeneratePartyMachinewiseCategorywiseDetail(pPartycode,pMachineno);     
    GenerateMachinewiseProductSummary(pPartycode,pMachineno); 
    GenerateMachineProductGroupDetail(pPartycode,pMachineno); 
    GenerateSelectedMachineProductwiseDetail(pPartycode,pMachineno); 
    
    
    
//leaveapplication.Filter(" LVT_DOC_NO='" + docno + "'");
//        leaveapplication.MoveFirst();
//        DisplayData();
    }

}
