/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.Budget;

import EITLERP.EITLERPGLOBAL;
import EITLERP.JTextFieldHint;
import javax.swing.JTextField;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.FeltFinishing.ReportRegister;
import java.awt.Component;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import sdml.felt.commonUI.data;

/**
 *
 * @author Dharmendra
 */
public class xlsBudgetSummry extends javax.swing.JApplet {

    /**
     * Initializes the applet xlsBudget
     */
    private EITLTableModel DataModel = new EITLTableModel();
    public EITLERP.FeltSales.Budget.clsxlsExcelExporter exprt = new EITLERP.FeltSales.Budget.clsxlsExcelExporter();

    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
       
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the applet */
        initComponents();

        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        file1.setVisible(false);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtyear = new javax.swing.JTextField();
        BudgetTab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableB = new javax.swing.JTable();
        bview = new javax.swing.JButton();
        bexcel = new javax.swing.JButton();
        btnq1 = new javax.swing.JButton();
        btnq2 = new javax.swing.JButton();
        btnq3 = new javax.swing.JButton();
        btnq4 = new javax.swing.JButton();
        file1 = new javax.swing.JFileChooser();
        lblyearto = new javax.swing.JLabel();
        txtpartycode = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbarea = new javax.swing.JComboBox<>();

        jLabel1.setText("YEAR :");

        txtyear.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtyearFocusLost(evt);
            }
        });

        TableB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableB);

        bview.setText("ALL");
        bview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bviewActionPerformed(evt);
            }
        });

        bexcel.setText("Excel");
        bexcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bexcelActionPerformed(evt);
            }
        });

        btnq1.setText("QTR-1");
        btnq1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnq1ActionPerformed(evt);
            }
        });

        btnq2.setText("QTR-2");
        btnq2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnq2ActionPerformed(evt);
            }
        });

        btnq3.setText("QTR-3");
        btnq3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnq3ActionPerformed(evt);
            }
        });

        btnq4.setText("QTR-4");
        btnq4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnq4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1027, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bview, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnq1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnq2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnq3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnq4, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(bexcel, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnq1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bview, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bexcel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnq2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnq3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnq4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        BudgetTab.addTab("Data", jPanel1);

        file1.setFocusable(false);

        lblyearto.setText("YYYY");

        txtpartycode.setToolTipText("Press F1 key for search Party Code");
        txtpartycode = new JTextFieldHint(new JTextField(),"Search by F1");
        txtpartycode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtpartycodeFocusLost(evt);
            }
        });
        txtpartycode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtpartycodeKeyPressed(evt);
            }
        });

        jLabel4.setText("Party Code");

        jLabel2.setText("Area");

        cmbarea.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0-> ALL", "1-> SOUTH", "2-> NORTH", "3-> EAST-WEST", "5-> ACNE", "6-> EXPORT", "7-> KEY CLIENT", "8-> OTHER" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BudgetTab)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtyear, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblyearto, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbarea, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtpartycode, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(52, 52, 52)
                        .addComponent(file1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtyear, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblyearto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbarea, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(file1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtpartycode, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BudgetTab, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bviewActionPerformed
        // TODO add your handling code here:
        data("ALL");
    }//GEN-LAST:event_bviewActionPerformed

    private void bexcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bexcelActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableB, new File(file1.getSelectedFile().toString() + ".xls"), "Budget");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_bexcelActionPerformed

    private void txtyearFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtyearFocusLost
        // TODO add your handling code here:
        try {
            lblyearto.setText(String.valueOf(Integer.parseInt(txtyear.getText()) + 1));
        } catch (Exception e) {
            txtyear.setText("");
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtyearFocusLost

    private void txtpartycodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtpartycodeFocusLost
        try {
            //            if (!txtpartycode.getText().equals("")) {
            //                String strSQL = "";
            //                ResultSet rsTmp;
            //                strSQL = "";
            //                strSQL += "SELECT PARTY_NAME,ADDRESS1,ADDRESS2,DISPATCH_STATION,INSURANCE_CODE FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='210010' AND PARTY_CODE = " + txtpartycode.getText().trim() + "";
            //                rsTmp = data.getResult(strSQL);
            //                rsTmp.first();
            //                txtpartyname.setText(rsTmp.getString("PARTY_NAME"));
            //}
        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtpartycodeFocusLost

    private void txtpartycodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpartycodeKeyPressed

        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            BudgetLOV aList = new BudgetLOV();
            //aList.SQL="SELECT PARTY_CODE,NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER ORDER BY NAME";
            aList.SQL = "SELECT NULL,PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='210010' AND LEFT(PARTY_CODE,1)='8' ";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtpartycode.setText(aList.ReturnVal);
                //txtpartyname.setText(clsSales_Part.getPartyName(EITLERPGLOBAL.gCompanyID,aList.ReturnVal));
            }

        }
    }//GEN-LAST:event_txtpartycodeKeyPressed

    private void btnq1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnq1ActionPerformed
        // TODO add your handling code here:
        data("Q1");
    }//GEN-LAST:event_btnq1ActionPerformed

    private void btnq2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnq2ActionPerformed
        // TODO add your handling code here:
        data("Q2");
    }//GEN-LAST:event_btnq2ActionPerformed

    private void btnq3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnq3ActionPerformed
        // TODO add your handling code here:
        data("Q3");
    }//GEN-LAST:event_btnq3ActionPerformed

    private void btnq4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnq4ActionPerformed
        // TODO add your handling code here:
        data("Q4");
    }//GEN-LAST:event_btnq4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane BudgetTab;
    private javax.swing.JTable TableB;
    private javax.swing.JButton bexcel;
    private javax.swing.JButton btnq1;
    private javax.swing.JButton btnq2;
    private javax.swing.JButton btnq3;
    private javax.swing.JButton btnq4;
    private javax.swing.JButton bview;
    private javax.swing.JComboBox<String> cmbarea;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblyearto;
    private javax.swing.JTextField txtpartycode;
    private javax.swing.JTextField txtyear;
    // End of variables declaration//GEN-END:variables

    private void data(String mquater) {
        String sql, cndpcd = "", cndarea = "";
        if (txtpartycode.getText().trim().length() > 0) {
            cndpcd = " AND PARTY_CODE IN (" + txtpartycode.getText() + ")";
        }
        if (cmbarea.getSelectedItem().toString().substring(0, 1).equals("0")) {

        } else {
            cndarea = "WHERE INCHARGE_CD='" + cmbarea.getSelectedItem().toString().substring(0, 1) + "' ";
        }
        sql = "SELECT * FROM (SELECT PARTY_CODE AS CURPCD,PARTY_NAME AS CURPCDNM,"
                + "GROUP_CONCAT(DISTINCT PARTY_STATUS) AS CURRENT_STS,"
                + "SUM(TOTAL) AS CURNOS,SUM(PRESS_WEIGHT)+SUM(DRY_WEIGHT) AS CURWEIGHT,SUM(PRESS_SQMTR)+SUM(DRY_SQMTR) AS CURSQMTR,SUM(NET_AMOUNT) AS CURAMT,"
                + "SUM(Q1) AS CURQ1NOS,SUM(Q1KG) AS CURQ1KG,SUM(Q1SQMTR) AS CURQ1SQMTR,SUM(Q1NET_AMOUNT) AS CURQ1AMT,"
                + "SUM(Q2) AS CURQ2NOS,SUM(Q2KG) AS CURQ2KG,SUM(Q2SQMTR) AS CURQ2SQMTR,SUM(Q2NET_AMOUNT) AS CURQ2AMT,"
                + "SUM(Q3) AS CURQ3NOS,SUM(Q3KG) AS CURQ3KG,SUM(Q3SQMTR) AS CURQ3SQMTR,SUM(Q3NET_AMOUNT) AS CURQ3AMT,"
                + "SUM(Q4) AS CURQ4NOS,SUM(Q4KG) AS CURQ4KG,SUM(Q4SQMTR) AS CURQ4SQMTR,SUM(Q4NET_AMOUNT) AS CURQ4AMT "
                + " FROM PRODUCTION.FELT_BUDGET WHERE YEAR_FROM='" + txtyear.getText() + "'  " + cndpcd
                + "GROUP BY PARTY_CODE) AS A "
                + "LEFT JOIN ( "
                + "SELECT PARTY_CODE AS PREVPCD,PARTY_NAME AS PREVPCDNM,"
                + "GROUP_CONCAT(DISTINCT PARTY_STATUS) AS PREV_STS,"
                + "SUM(TOTAL) AS PREVNOS,SUM(PRESS_WEIGHT)+SUM(DRY_WEIGHT) AS PREVWEIGHT,SUM(PRESS_SQMTR)+SUM(DRY_SQMTR) AS PREVSQMTR,SUM(NET_AMOUNT) AS PREVAMT,"
                + "SUM(Q1) AS PREVQ1NOS,SUM(Q1KG) AS PREVQ1KG,SUM(Q1SQMTR) AS PREVQ1SQMTR,SUM(Q1NET_AMOUNT) AS PREVQ1AMT,"
                + "SUM(Q2) AS PREVQ2NOS,SUM(Q2KG) AS PREVQ2KG,SUM(Q2SQMTR) AS PREVQ2SQMTR,SUM(Q2NET_AMOUNT) AS PREVQ2AMT,"
                + "SUM(Q3) AS PREVQ3NOS,SUM(Q3KG) AS PREVQ3KG,SUM(Q3SQMTR) AS PREVQ3SQMTR,SUM(Q3NET_AMOUNT) AS PREVQ3AMT,"
                + "SUM(Q4) AS PREVQ4NOS,SUM(Q4KG) AS PREVQ4KG,SUM(Q4SQMTR) AS PREVQ4SQMTR,SUM(Q4NET_AMOUNT) AS PREVQ4AMT "
                + " FROM (SELECT * FROM PRODUCTION.FELT_BUDGET_DETAIL "
                + "WHERE YEAR_FROM='" + txtyear.getText() + "'  " + cndpcd
                + "AND DOC_NO IN (SELECT DOC_NO FROM PRODUCTION.FELT_PROD_DOC_DATA "
                + "WHERE MODULE_ID IN (766,768) "
                + "AND STATUS='F'  UNION ALL SELECT 'BU00000001' FROM DUAL) "
                + "GROUP BY PARTY_CODE,MACHINE_NO,POSITION_NO "
                + "ORDER BY CREATED_DATE DESC,PARTY_CODE,MACHINE_NO,POSITION_NO "
                + ") AS D "
                + "GROUP BY PARTY_CODE) AS B "
                + "ON A.CURPCD=B.PREVPCD "
                + "LEFT JOIN (SELECT PARTY_CODE AS PM_PARTY_CODE,COALESCE(INCHARGE_CD,'') AS INCHARGE_CD FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS ZZZ "
                + "ON CURPCD=ZZZ.PM_PARTY_CODE "
                + cndarea
                + " ORDER BY CURPCD";

        data_generate(sql, mquater);
    }

    private void data_generate(String msql, String mquater) {

        boolean chk = false;
        ResultSet rs;
        if (txtyear.getText().trim().length() >= 4) {
            chk = true;
        } else {
            JOptionPane.showMessageDialog(this, "Please Enter Year...", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtyear.requestFocus();
        }
        if (chk) {
            try {
//                mTableModel = new EITLTableModel();
//                TableB.removeAll();
//                TableB.setModel(mTableModel);
//               

                System.out.println("Sql Query :" + msql);
                rs = EITLERP.data.getResult(msql);
                FormatGrid(mquater);
                rs.first();
                String qtr = "", s;
                int i = 1, mqtrmn1 = 0, mqtrmn2 = 0, mqtrmn3 = 0, mqtrmn4 = 0, mdmnth = 0;
                int mcurmnth = EITLERPGLOBAL.getCurrentMonth();
                if (mcurmnth < 4) {
                    if (EITLERPGLOBAL.getCurrentYear() == Integer.parseInt(lblyearto.getText())) {
                        s = "C";
                    } else {
                        s = "P";
                    }
                } else {
                    if (EITLERPGLOBAL.getCurrentYear() == Integer.parseInt(txtyear.getText())) {
                        s = "C";
                    } else {
                        s = "P";
                    }
                }
                if (s.equalsIgnoreCase("C")) {
                    if (mcurmnth < 4) {
                        mdmnth = mcurmnth + 9;
                        mqtrmn4 = mcurmnth;
                        mqtrmn1 = mqtrmn2 = mqtrmn3 = 3;
                        qtr = "Q4";
                    } else {
                        mdmnth = mcurmnth - 3;
                        if (mcurmnth > 3 && mcurmnth < 7) {
                            mqtrmn1 = mcurmnth - 3;
                            mqtrmn2 = mqtrmn3 = mqtrmn4 = 0;
                            qtr = "Q1";
                        }
                        if (mcurmnth > 6 && mcurmnth < 10) {
                            mqtrmn2 = mcurmnth - 6;
                            mqtrmn1 = 3;
                            mqtrmn3 = mqtrmn4 = 0;
                            qtr = "Q2";
                        }
                        if (mcurmnth > 9) {
                            mqtrmn3 = mcurmnth - 9;
                            mqtrmn1 = mqtrmn2 = 3;
                            mqtrmn4 = 0;
                            qtr = "Q3";
                        }
                    }
                } else {
                    mdmnth = 12;
                    mqtrmn1 = mqtrmn2 = mqtrmn3 = mqtrmn4 = 3;
                    qtr = "";
                }
                if (rs.getRow() > 0) {
                    String incharge = "";
                    Object[] rowData = new Object[300];
                    for (int k = 1; k < 200; k++) {

                        rowData[k - 1] = k;
                    }
                    DataModel.addRow(rowData);
                    int col;
                    while (!rs.isAfterLast()) {
                        rowData = new Object[100];
                        rowData[0] = i;
                        rowData[1] = rs.getString("CURPCD");
                        rowData[2] = rs.getString("CURPCDNM");
                        rowData[3] = rs.getString("CURRENT_STS");
                        rowData[4] = rs.getString("PREV_STS");
                        rowData[5] = rs.getDouble("CURNOS");
                        rowData[6] = rs.getDouble("CURWEIGHT");
                        rowData[7] = rs.getDouble("CURSQMTR");
                        rowData[8] = EITLERPGLOBAL.round(rs.getDouble("CURAMT") / 100000, 2);
                        rowData[9] = rs.getDouble("PREVNOS");
                        rowData[10] = rs.getDouble("PREVWEIGHT");
                        rowData[11] = rs.getDouble("PREVSQMTR");
                        rowData[12] = EITLERPGLOBAL.round(rs.getDouble("PREVAMT") / 100000, 2);
                        

                        col = 13;
                        if (mquater.equalsIgnoreCase("ALL") || mquater.equalsIgnoreCase("Q1") || mquater.equalsIgnoreCase("Q2")) {
                            rowData[col] = rs.getDouble("CURQ1NOS");//24
                            col++;
                            rowData[col] = rs.getDouble("CURQ1KG");//24
                            col++;
                            rowData[col] = rs.getDouble("CURQ1SQMTR");//24
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(rs.getDouble("CURQ1AMT") / 100000, 2);//25
                            col++;
                            
                            rowData[col] = rs.getDouble("PREVQ1NOS");//24
                            col++;
                            rowData[col] = rs.getDouble("PREVQ1KG");//24
                            col++;
                            rowData[col] = rs.getDouble("PREVQ1SQMTR");//24
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(rs.getDouble("PREVQ1AMT") / 100000, 2);//25
                            col++;
                        }
                        if (mquater.equalsIgnoreCase("ALL") || mquater.equalsIgnoreCase("Q2")) {
                            rowData[col] = rs.getDouble("CURQ2NOS");//24
                            col++;
                            rowData[col] = rs.getDouble("CURQ2KG");//24
                            col++;
                            rowData[col] = rs.getDouble("CURQ2SQMTR");//24
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(rs.getDouble("CURQ2AMT") / 100000, 2);//25
                            col++;
                            
                            rowData[col] = rs.getDouble("PREVQ2NOS");//24
                            col++;
                            rowData[col] = rs.getDouble("PREVQ2KG");//24
                            col++;
                            rowData[col] = rs.getDouble("PREVQ2SQMTR");//24
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(rs.getDouble("PREVQ2AMT") / 100000, 2);//25
                            col++;
                        }
                        if (mquater.equalsIgnoreCase("Q3")) {
                            rowData[col] = rs.getDouble("CURQ1NOS") + rs.getDouble("CURQ2NOS");
                            col++;
                            rowData[col] = rs.getDouble("CURQ1KG") + rs.getDouble("CURQ2KG");
                            col++;
                            rowData[col] = rs.getDouble("CURQ1SQMTR") + rs.getDouble("CURQ2SQMTR");
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(EITLERPGLOBAL.round(rs.getDouble("CURQ1AMT") / 100000, 2) + EITLERPGLOBAL.round(rs.getDouble("CURQ2AMT") / 100000, 2), 2);
                            col++;
                            
                            rowData[col] = rs.getDouble("PREVQ1NOS") + rs.getDouble("PREVQ2NOS");
                            col++;
                            rowData[col] = rs.getDouble("PREVQ1KG") + rs.getDouble("PREVQ2KG");
                            col++;
                            rowData[col] = rs.getDouble("PREVQ1SQMTR") + rs.getDouble("PREVQ2SQMTR");
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(EITLERPGLOBAL.round(rs.getDouble("PREVQ1AMT") / 100000, 2) + EITLERPGLOBAL.round(rs.getDouble("PREVQ2AMT") / 100000, 2), 2);
                            col++;
                            
                        }
                        if (mquater.equalsIgnoreCase("ALL") || mquater.equalsIgnoreCase("Q3")) {
                            rowData[col] = rs.getDouble("CURQ3NOS");//24
                            col++;
                            rowData[col] = rs.getDouble("CURQ3KG");//24
                            col++;
                            rowData[col] = rs.getDouble("CURQ3SQMTR");//24
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(rs.getDouble("CURQ3AMT") / 100000, 2);//25
                            col++;
                            
                            rowData[col] = rs.getDouble("PREVQ3NOS");//24
                            col++;
                            rowData[col] = rs.getDouble("PREVQ3KG");//24
                            col++;
                            rowData[col] = rs.getDouble("PREVQ3SQMTR");//24
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(rs.getDouble("PREVQ3AMT") / 100000, 2);//25
                            col++;
                        }
                        if (mquater.equalsIgnoreCase("Q4")) {
                            rowData[col] = rs.getDouble("CURQ1NOS") + rs.getDouble("CURQ2NOS") + rs.getDouble("CURQ3NOS");
                            col++;
                            rowData[col] = rs.getDouble("CURQ1KG") + rs.getDouble("CURQ2KG") + rs.getDouble("CURQ3KG");
                            col++;
                            rowData[col] = rs.getDouble("CURQ1SQMTR") + rs.getDouble("CURQ2SQMTR") + rs.getDouble("CURQ3SQMTR");
                            col++;                            
                            rowData[col] = EITLERPGLOBAL.round(EITLERPGLOBAL.round(rs.getDouble("CURQ1AMT") / 100000, 2) + EITLERPGLOBAL.round(rs.getDouble("CURQ2AMT") / 100000, 2) + EITLERPGLOBAL.round(rs.getDouble("CURQ3AMT") / 100000, 2), 2);
                            col++;
                            
                            rowData[col] = rs.getDouble("PREVQ1NOS") + rs.getDouble("PREVQ2NOS") + rs.getDouble("PREVQ3NOS");
                            col++;
                            rowData[col] = rs.getDouble("PREVQ1KG") + rs.getDouble("PREVQ2KG") + rs.getDouble("PREVQ3KG");
                            col++;
                            rowData[col] = rs.getDouble("PREVQ1SQMTR") + rs.getDouble("PREVQ2SQMTR") + rs.getDouble("PREVQ3SQMTR");
                            col++;                            
                            rowData[col] = EITLERPGLOBAL.round(EITLERPGLOBAL.round(rs.getDouble("PREVQ1AMT") / 100000, 2) + EITLERPGLOBAL.round(rs.getDouble("PREVQ2AMT") / 100000, 2) + EITLERPGLOBAL.round(rs.getDouble("PREVQ3AMT") / 100000, 2), 2);
                            col++;
                            
                        }
                        if (mquater.equalsIgnoreCase("ALL") || mquater.equalsIgnoreCase("Q4")) {
                             rowData[col] = rs.getDouble("CURQ4NOS");//24
                            col++;
                            rowData[col] = rs.getDouble("CURQ4KG");//24
                            col++;
                            rowData[col] = rs.getDouble("CURQ4SQMTR");//24
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(rs.getDouble("CURQ4AMT") / 100000, 2);//25
                            col++;
                            
                            rowData[col] = rs.getDouble("PREVQ4NOS");//24
                            col++;
                            rowData[col] = rs.getDouble("PREVQ4KG");//24
                            col++;
                            rowData[col] = rs.getDouble("PREVQ4SQMTR");//24
                            col++;
                            rowData[col] = EITLERPGLOBAL.round(rs.getDouble("PREVQ4AMT") / 100000, 2);//25
                            col++;
                        }

                        switch (rs.getString("INCHARGE_CD").trim()) {
                            case "1":
                                incharge = "SOUTH";
                                break;
                            case "2":
                                incharge = "NORTH";
                                break;
                            case "3":
                                incharge = "EAST-WEST";
                                break;
                            case "5":
                                incharge = "ACNE";
                                break;
                            case "6":
                                incharge = "EXPORT";
                                break;
                            case "7":
                                incharge = "KEY CLIENT";
                                break;
                            case "8":
                                incharge = "OTHER";
                                break;
                            default:
                                incharge = "NOT DEFINE";
                                break;
                        }
                        rowData[col] = incharge;
                        col++;
                        DataModel.addRow(rowData);
                        i++;
                        rs.next();
                    }
                }
                final TableColumnModel columnModel = TableB.getColumnModel();
                for (int column = 0; column < TableB.getColumnCount(); column++) {
                    int width = 100; // Min width
                    for (int row = 0; row < TableB.getRowCount(); row++) {
                        TableCellRenderer renderer = TableB.getCellRenderer(row, column);
                        Component comp = TableB.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
                DataModel.TableReadOnly(true);
            } catch (Exception s) {
                s.printStackTrace();
            }
        }
    }

    private void FormatGrid(String mquater) {
        int i = 1, mqtrmn = 0, mdmnth = 0;
        String mnth[] = {"ZERO", "ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "NINE", "TEN", "ELEVEN", "TWELVE"};
        String mcmnth, mqmnth, s = "", qtr = "";
        int mqtrmn1 = 0, mqtrmn2 = 0, mqtrmn3 = 0, mqtrmn4 = 0, col;
        int mcurmnth = EITLERPGLOBAL.getCurrentMonth();
        if (mcurmnth < 4) {
            if (EITLERPGLOBAL.getCurrentYear() == Integer.parseInt(lblyearto.getText())) {
                s = "C";
            } else {
                s = "P";
            }
        } else {
            if (EITLERPGLOBAL.getCurrentYear() == Integer.parseInt(txtyear.getText())) {
                s = "C";
            } else {
                s = "P";
            }
        }
        if (s.equalsIgnoreCase("C")) {
            if (mcurmnth < 4) {
                mdmnth = mcurmnth + 9;
                mqtrmn4 = mcurmnth;
                mqtrmn1 = mqtrmn2 = mqtrmn3 = 3;
                qtr = "Q4";
            } else {
                mdmnth = mcurmnth - 3;
                if (mcurmnth > 3 && mcurmnth < 7) {
                    mqtrmn1 = mcurmnth - 3;
                    mqtrmn2 = mqtrmn3 = mqtrmn4 = 0;
                    qtr = "Q1";
                }
                if (mcurmnth > 6 && mcurmnth < 10) {
                    mqtrmn2 = mcurmnth - 6;
                    mqtrmn1 = 3;
                    mqtrmn3 = mqtrmn4 = 0;
                    qtr = "Q2";
                }
                if (mcurmnth > 9) {
                    mqtrmn3 = mcurmnth - 9;
                    mqtrmn1 = mqtrmn2 = 3;
                    mqtrmn4 = 0;
                    qtr = "Q3";
                }
            }
        } else {
            mdmnth = 12;
            mqtrmn1 = mqtrmn2 = mqtrmn3 = mqtrmn4 = 3;
            qtr = "";
        }
        mcmnth = mnth[mdmnth];
        mqmnth = mnth[mqtrmn];
        DataModel = new EITLTableModel();

        TableB.removeAll();
        TableB.setModel(DataModel);
        TableB.setAutoResizeMode(TableB.AUTO_RESIZE_OFF);

        //Set the table Readonly
        DataModel.TableReadOnly(true);

        //Add the columns
        DataModel.addColumn("Sr.");                     //0
        DataModel.addColumn("Party Code");              //1
        DataModel.addColumn("Party Name");              //2
        DataModel.addColumn("Cur Status");          //3
        DataModel.addColumn("Prev Status");                //4
        DataModel.addColumn("Cur Tot_Budget_Nos");          //5
        DataModel.addColumn("Cur Weight");                  //6
        DataModel.addColumn("Cur SQMTR");                   //7        
        DataModel.addColumn("Cur Tot_Budget_Rs[In Lac]");   //8

        DataModel.addColumn("Prev Tot_Budget_Nos");          //9
        DataModel.addColumn("Prev Weight");                  //10
        DataModel.addColumn("Prev SQMTR");                   //11        
        DataModel.addColumn("Prev Tot_Budget_Rs[In Lac]");   //12

        col = 13;
        if (mquater.equalsIgnoreCase("ALL") || mquater.equalsIgnoreCase("Q1") || mquater.equalsIgnoreCase("Q2")) {
            DataModel.addColumn("Cur Qtr-1 Nos");
            DataModel.addColumn("Cur Qtr-1 Weight");
            DataModel.addColumn("Cur Qtr-1 SQMTR");
            DataModel.addColumn("Cur Qtr-1 [In Lac]");

            DataModel.addColumn("Prev Qtr-1 Nos");
            DataModel.addColumn("Prev Qtr-1 Weight");
            DataModel.addColumn("Prev Qtr-1 SQMTR");
            DataModel.addColumn("Prev Qtr-1 [In Lac]");

            col = col + 8;
        }
        if (mquater.equalsIgnoreCase("ALL") || mquater.equalsIgnoreCase("Q2")) {
            DataModel.addColumn("Cur Qtr-2 Nos");
            DataModel.addColumn("Cur Qtr-2 Weight");
            DataModel.addColumn("Cur Qtr-2 SQMTR");
            DataModel.addColumn("Cur Qtr-2 [In Lac]");

            DataModel.addColumn("Prev Qtr-2 Nos");
            DataModel.addColumn("Prev Qtr-2 Weight");
            DataModel.addColumn("Prev Qtr-2 SQMTR");
            DataModel.addColumn("Prev Qtr-2 [In Lac]");
            col = col + 8;
        }

        if (mquater.equalsIgnoreCase("Q3")) {
            DataModel.addColumn("Cur Qtr-1+Qtr-2 Nos");
            DataModel.addColumn("Cur Qtr-1+Qtr-2 Weight");
            DataModel.addColumn("Cur Qtr-1+Qtr-2 SQMTR");
            DataModel.addColumn("Cur Qtr-1+Qtr-2 [In Lac]");

            DataModel.addColumn("Prev Qtr-1+Qtr-2 Nos");
            DataModel.addColumn("Prev Qtr-1+Qtr-2 Weight");
            DataModel.addColumn("Prev Qtr-1+Qtr-2 SQMTR");
            DataModel.addColumn("Prev Qtr-1+Qtr-2 [In Lac]");

            col = col + 8;
        }

        if (mquater.equalsIgnoreCase("ALL") || mquater.equalsIgnoreCase("Q3")) {
            DataModel.addColumn("Cur Qtr-3 Nos");
            DataModel.addColumn("Cur Qtr-3 Weight");
            DataModel.addColumn("Cur Qtr-3 SQMTR");
            DataModel.addColumn("Cur Qtr-3 [In Lac]");

            DataModel.addColumn("Prev Qtr-3 Nos");
            DataModel.addColumn("Prev Qtr-3 Weight");
            DataModel.addColumn("Prev Qtr-3 SQMTR");
            DataModel.addColumn("Prev Qtr-3 [In Lac]");
            col = col + 8;
        }
        if (mquater.equalsIgnoreCase("Q4")) {
            DataModel.addColumn("Cur Q-1+Q-2+Q-3 Nos");
            DataModel.addColumn("Cur Q-1+Q-2+Q-3 Weight");
            DataModel.addColumn("Cur Q-1+Q-2+Q-3 SQMTR");
            DataModel.addColumn("Cur Q-1+Q-2+Q-3 [In Lac]");

            DataModel.addColumn("Prev Q-1+Q-2+Q-3 Nos");
            DataModel.addColumn("Prev Q-1+Q-2+Q-3 Weight");
            DataModel.addColumn("Prev Q-1+Q-2+Q-3 SQMTR");
            DataModel.addColumn("Prev Q-1+Q-2+Q-3 [In Lac]");

            col = col + 8;
        }
        if (mquater.equalsIgnoreCase("ALL") || mquater.equalsIgnoreCase("Q4")) {
            DataModel.addColumn("Cur Qtr-4 Nos");
            DataModel.addColumn("Cur Qtr-4 Weight");
            DataModel.addColumn("Cur Qtr-4 SQMTR");
            DataModel.addColumn("Cur Qtr-4 [In Lac]");

            DataModel.addColumn("Prev Qtr-4 Nos");
            DataModel.addColumn("Prev Qtr-4 Weight");
            DataModel.addColumn("Prev Qtr-4 SQMTR");
            DataModel.addColumn("Prev Qtr-4 [In Lac]");
        }
        DataModel.addColumn("AREA");
    }
}
