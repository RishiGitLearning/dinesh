/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.Budget;

import EITLERP.EITLERPGLOBAL;
import EITLERP.JTextFieldHint;
import javax.swing.JTextField;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.FeltFinishing.ReportRegister;
import java.awt.Component;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import sdml.felt.commonUI.data;

/**
 *
 * @author Dharmendra
 */
public class xlsBudgetrpt extends javax.swing.JApplet {

    /**
     * Initializes the applet xlsBudget
     */
    private EITLTableModel DataModel = new EITLTableModel();
    public EITLERP.FeltSales.Budget.clsxlsExcelExporter exprt = new EITLERP.FeltSales.Budget.clsxlsExcelExporter();
    private String btnclick = "";

    @Override
    public void init() {
        /* Create and display the applet */
        initComponents();

        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        file1.setVisible(false);
        int mnth = data.getIntValueFromDB("SELECT MONTH(CURDATE()) FROM DUAL");
        if (mnth > 3) {
            mnth = mnth - 4;
        } else {
            mnth = mnth + 8;
        }
        cmbmonth.setSelectedIndex(mnth);
        report.setVisible(false);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        txtyear = new javax.swing.JTextField();
        BudgetTab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableB = new javax.swing.JTable();
        bview = new javax.swing.JButton();
        bexcel = new javax.swing.JButton();
        btnbudget = new javax.swing.JButton();
        btnq2 = new javax.swing.JButton();
        btnq3 = new javax.swing.JButton();
        btnq4 = new javax.swing.JButton();
        report = new javax.swing.JPanel();
        smry = new javax.swing.JRadioButton();
        qtr = new javax.swing.JRadioButton();
        btninv = new javax.swing.JButton();
        file1 = new javax.swing.JFileChooser();
        lblyearto = new javax.swing.JLabel();
        txtpartycode = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cmbmonth = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();

        jLabel1.setText("YEAR :");

        txtyear.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtyearFocusLost(evt);
            }
        });

        TableB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableB);

        bview.setText("Summary");
        bview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bviewActionPerformed(evt);
            }
        });

        bexcel.setText("Excel");
        bexcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bexcelActionPerformed(evt);
            }
        });

        btnbudget.setText("Budgeted");
        btnbudget.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbudgetActionPerformed(evt);
            }
        });

        btnq2.setText("Upgrade");
        btnq2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnq2ActionPerformed(evt);
            }
        });

        btnq3.setText("Closer");
        btnq3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnq3ActionPerformed(evt);
            }
        });

        btnq4.setText("Downgrade");
        btnq4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnq4ActionPerformed(evt);
            }
        });

        buttonGroup1.add(smry);
        smry.setSelected(true);
        smry.setText("Summary");
        smry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smryActionPerformed(evt);
            }
        });

        buttonGroup1.add(qtr);
        qtr.setText("Quaterwise");
        qtr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtrActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout reportLayout = new javax.swing.GroupLayout(report);
        report.setLayout(reportLayout);
        reportLayout.setHorizontalGroup(
            reportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(smry)
                .addGap(26, 26, 26)
                .addComponent(qtr)
                .addContainerGap(83, Short.MAX_VALUE))
        );
        reportLayout.setVerticalGroup(
            reportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportLayout.createSequentialGroup()
                .addGroup(reportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(smry)
                    .addComponent(qtr))
                .addGap(0, 7, Short.MAX_VALUE))
        );

        btninv.setText("Invoice");
        btninv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btninvActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(report, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(bview, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnbudget, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnq2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnq3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnq4, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btninv, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(bexcel, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1007, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnbudget, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bview, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bexcel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnq2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnq3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnq4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btninv, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(report, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        BudgetTab.addTab("Data", jPanel1);

        file1.setFocusable(false);

        lblyearto.setText("YYYY");

        txtpartycode.setToolTipText("Press F1 key for search Party Code");
        txtpartycode = new JTextFieldHint(new JTextField(),"Search by F1");
        txtpartycode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtpartycodeFocusLost(evt);
            }
        });
        txtpartycode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtpartycodeKeyPressed(evt);
            }
        });

        jLabel4.setText("Party Code");

        cmbmonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "APRIL", "MAY", "JUN", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER", "JANUARY", "FEBRUARY", "MARCH", " " }));

        jLabel2.setText("Month");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BudgetTab, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtyear, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblyearto, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cmbmonth, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtpartycode, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(52, 52, 52)
                        .addComponent(file1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtyear, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblyearto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbmonth, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(file1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtpartycode, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BudgetTab, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bviewActionPerformed
        // TODO add your handling code here:
        FormatGrid("ALL");
        report.setVisible(false);
        btnclick = "Summary";
        data("ALL");
    }//GEN-LAST:event_bviewActionPerformed

    private void bexcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bexcelActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableB, new File(file1.getSelectedFile().toString() + ".xls"), "Budget");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_bexcelActionPerformed

    private void txtyearFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtyearFocusLost
        // TODO add your handling code here:
        try {
            lblyearto.setText(String.valueOf(Integer.parseInt(txtyear.getText()) + 1));
        } catch (Exception e) {
            txtyear.setText("");
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtyearFocusLost

    private void txtpartycodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtpartycodeFocusLost
        try {
            //            if (!txtpartycode.getText().equals("")) {
            //                String strSQL = "";
            //                ResultSet rsTmp;
            //                strSQL = "";
            //                strSQL += "SELECT PARTY_NAME,ADDRESS1,ADDRESS2,DISPATCH_STATION,INSURANCE_CODE FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='210010' AND PARTY_CODE = " + txtpartycode.getText().trim() + "";
            //                rsTmp = data.getResult(strSQL);
            //                rsTmp.first();
            //                txtpartyname.setText(rsTmp.getString("PARTY_NAME"));
            //}
        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtpartycodeFocusLost

    private void txtpartycodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpartycodeKeyPressed

        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            BudgetLOV aList = new BudgetLOV();
            //aList.SQL="SELECT PARTY_CODE,NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER ORDER BY NAME";
            aList.SQL = "SELECT NULL,PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='210010' AND LEFT(PARTY_CODE,1)='8' ";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtpartycode.setText(aList.ReturnVal);
                //txtpartyname.setText(clsSales_Part.getPartyName(EITLERPGLOBAL.gCompanyID,aList.ReturnVal));
            }

        }
    }//GEN-LAST:event_txtpartycodeKeyPressed

    private void btnbudgetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbudgetActionPerformed
        // TODO add your handling code here:
        FormatGrid("BUDGET");
        report.setVisible(true);
        smry.setSelected(true);
        btnclick = "BUDGET";
        data("BUDGET");
    }//GEN-LAST:event_btnbudgetActionPerformed

    private void btnq2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnq2ActionPerformed
        // TODO add your handling code here:
        FormatGrid("UPGRADE");
        report.setVisible(true);
        smry.setSelected(true);
        btnclick = "UPGRADE";
        data("UPGRADE");
    }//GEN-LAST:event_btnq2ActionPerformed

    private void btnq3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnq3ActionPerformed
        // TODO add your handling code here:
        FormatGrid("CLOSER");
        report.setVisible(true);
        smry.setSelected(true);
        btnclick = "CLOSER";
        data("CLOSER");
    }//GEN-LAST:event_btnq3ActionPerformed

    private void btnq4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnq4ActionPerformed
        // TODO add your handling code here:
        FormatGrid("DOWNGRADE");
        btnclick = "DOWNGRADE";
        smry.setSelected(true);
        report.setVisible(true);
        data("DOWNGRADE");
    }//GEN-LAST:event_btnq4ActionPerformed

    private void smryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smryActionPerformed
        // TODO add your handling code here:
        data(btnclick);
    }//GEN-LAST:event_smryActionPerformed

    private void qtrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtrActionPerformed
        // TODO add your handling code here:
        dataqtr(btnclick);
    }//GEN-LAST:event_qtrActionPerformed

    private void btninvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btninvActionPerformed
        // TODO add your handling code here:
        FormatGrid("INVOICE");
        btnclick = "INVOICE";
        smry.setSelected(true);
        report.setVisible(true);
        data("INVOICE");
    }//GEN-LAST:event_btninvActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane BudgetTab;
    private javax.swing.JTable TableB;
    private javax.swing.JButton bexcel;
    private javax.swing.JButton btnbudget;
    private javax.swing.JButton btninv;
    private javax.swing.JButton btnq2;
    private javax.swing.JButton btnq3;
    private javax.swing.JButton btnq4;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton bview;
    private javax.swing.JComboBox<String> cmbmonth;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblyearto;
    private javax.swing.JRadioButton qtr;
    private javax.swing.JPanel report;
    private javax.swing.JRadioButton smry;
    private javax.swing.JTextField txtpartycode;
    private javax.swing.JTextField txtyear;
    // End of variables declaration//GEN-END:variables

    private void data(String mquater) {
        String sql = "", cndpcd = " AND YEAR_FROM='" + txtyear.getText().trim() + "' ", cndarea = "";

        if (txtpartycode.getText().trim().length() > 0) {
            cndpcd = " AND PARTY_CODE IN (" + txtpartycode.getText() + ") ";
        }
        int selemnth = cmbmonth.getSelectedIndex();
        int seleyr;
        if (selemnth > 8) {
            selemnth = selemnth - 8;
        } else {
            selemnth = selemnth + 4;
        }
        if (selemnth < 4) {
            seleyr = Integer.parseInt(txtyear.getText()) + 1;
        } else {
            seleyr = Integer.parseInt(txtyear.getText());
        }
        String lastdate;
        System.out.println("SELECT LAST_DAY(" + seleyr + "-" + selemnth + "-01) FROM DUAL");
        lastdate = data.getStringValueFromDB("SELECT LAST_DAY('" + seleyr + "-" + selemnth + "-01') FROM DUAL");
        System.out.println("Last Date :" + lastdate);

        if (mquater.equalsIgnoreCase("ALL")) {
            sql = "SELECT 'Budgeted-PRESS' AS DESCRIPTION,COALESCE(SUM(COALESCE(TOTAL,0)),0) AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0) AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0) AS SQMTR,COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)/100000 AS AMOUNT "
                    + "FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE DOC_NO LIKE 'BU%' " + cndpcd + " AND QUALITY_NO NOT LIKE '7%' AND QUALITY_NO NOT LIKE '6%' "
                    + "UNION ALL "
                    + "SELECT 'Budgeted-ACNE' AS DESCRIPTION,COALESCE(SUM(COALESCE(TOTAL,0)),0) AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0) AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0) AS SQMTR,COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)/100000 AS AMOUNT "
                    + "FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE DOC_NO LIKE 'BU%' " + cndpcd + "  AND QUALITY_NO LIKE '6%' "
                    + "UNION ALL   "
                    + "SELECT 'Budgeted-SDF' AS DESCRIPTION,COALESCE(SUM(COALESCE(TOTAL,0)),0) AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0) AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0) AS SQMTR,COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)/100000 AS AMOUNT "
                    + "FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE DOC_NO LIKE 'BU%' " + cndpcd + "  AND QUALITY_NO LIKE '729%' "
                    + "UNION ALL "
                    + "SELECT 'Budgeted-HDS' AS DESCRIPTION,COALESCE(SUM(COALESCE(TOTAL,0)),0) AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0) AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0) AS SQMTR,COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)/100000 AS AMOUNT "
                    + "FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE DOC_NO LIKE 'BU%' " + cndpcd + "  AND QUALITY_NO NOT LIKE '729%' AND QUALITY_NO LIKE '7%' "
                    + "UNION ALL "
                    + "SELECT 'Budgeted-TOTAL' AS DESCRIPTION,COALESCE(SUM(COALESCE(TOTAL,0)),0) AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0) AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0) AS SQMTR,COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)/100000 AS AMOUNT "
                    + "FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE DOC_NO LIKE 'BU%' " + cndpcd
                    + " UNION ALL "
                    + "SELECT DESCRIPTION,SUM(NOS) AS NOS,SUM(DIFFKG) AS KG,SUM(DIFFSQMTR) AS SQMTR,SUM(DIFFAMOUNT) AS AMOUNT "
                    + "FROM "
                    + "(SELECT 'Upgrade-PRESS' AS DESCRIPTION,SUM(TOTAL)-SUM(NTOTAL) AS NOS,SUM(KG)-SUM(NKG) AS DIFFKG,SUM(SQMTR)-SUM(NSQMTR) AS DIFFSQMTR, "
                    + "(SUM(AMOUNT)-SUM(NAMOUNT))/100000 AS DIFFAMOUNT "
                    + "FROM "
                    + "(SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,A.TOTAL AS NTOTAL,B.TOTAL, "
                    + "A.TOTAL_KG AS NKG,B.TOTAL_KG AS KG,"
                    + "CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN A.TOTAL_SQMTR ELSE 0 END AS NSQMTR,"
                    + "CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN B.TOTAL_SQMTR ELSE 0 END AS SQMTR,"
                    + "A.NET_AMOUNT AS NAMOUNT,B.NET_AMOUNT AS AMOUNT,A.PARTY_STATUS "
                    + "FROM (SELECT * FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + " AND QUALITY_NO NOT LIKE '7%' AND "
                    + "QUALITY_NO NOT LIKE '6%') AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET"
                    + " WHERE  QUALITY_NO NOT LIKE '7%' " + cndpcd + " AND QUALITY_NO NOT LIKE '6%') AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + ") AS C "
                    + "WHERE NTOTAL<TOTAL "
                    + "UNION ALL "
                    + "SELECT 'Upgrade-PRESS' AS DESCRIPTION,COALESCE(SUM(COALESCE(TOTAL,0)),0) AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0) AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0) AS SQMTR,COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)/100000 AS AMOUNT "
                    + "FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) NOT IN ( "
                    + "SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + ") " + cndpcd + " AND QUALITY_NO NOT LIKE '7%' AND QUALITY_NO NOT LIKE '6%') AS AA "
                    + "UNION ALL "
                    + "SELECT DESCRIPTION,SUM(NOS) AS NOS,SUM(DIFFKG) AS KG,SUM(DIFFSQMTR) AS SQMTR,SUM(DIFFAMOUNT) AS AMOUNT "
                    + "FROM "
                    + "(SELECT 'Upgrade-ACNE' AS DESCRIPTION,SUM(TOTAL)-SUM(NTOTAL) AS NOS,SUM(KG)-SUM(NKG) AS DIFFKG,SUM(SQMTR)-SUM(NSQMTR) AS DIFFSQMTR, "
                    + "(SUM(AMOUNT)-SUM(NAMOUNT))/100000 AS DIFFAMOUNT "
                    + "FROM "
                    + "(SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,A.TOTAL AS NTOTAL,B.TOTAL, "
                    + "A.TOTAL_KG AS NKG,B.TOTAL_KG AS KG,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN A.TOTAL_SQMTR ELSE 0 END AS NSQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN B.TOTAL_SQMTR ELSE 0 END AS SQMTR,A.NET_AMOUNT AS NAMOUNT,B.NET_AMOUNT AS AMOUNT,A.PARTY_STATUS "
                    + "FROM (SELECT * FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + " AND QUALITY_NO LIKE '6%') AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO LIKE '6%' " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + ") AS C "
                    + "WHERE NTOTAL<TOTAL "
                    + "UNION ALL "
                    + "SELECT 'Upgrade-ACNE' AS DESCRIPTION,COALESCE(SUM(COALESCE(TOTAL,0)),0) AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0) AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0) AS SQMTR,COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)/100000 AS AMOUNT "
                    + "FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) NOT IN ( "
                    + "SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + ") " + cndpcd + " AND QUALITY_NO LIKE '6%') AS AA "
                    + "UNION ALL "
                    + "SELECT DESCRIPTION,SUM(NOS) AS NOS,SUM(DIFFKG) AS KG,SUM(DIFFSQMTR) AS SQMTR,SUM(DIFFAMOUNT) AS AMOUNT "
                    + "FROM "
                    + "(SELECT 'Upgrade-SDF' AS DESCRIPTION,SUM(TOTAL)-SUM(NTOTAL) AS NOS,SUM(KG)-SUM(NKG) AS DIFFKG,SUM(SQMTR)-SUM(NSQMTR) AS DIFFSQMTR, "
                    + "(SUM(AMOUNT)-SUM(NAMOUNT))/100000 AS DIFFAMOUNT "
                    + "FROM "
                    + "(SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,A.TOTAL AS NTOTAL,B.TOTAL, "
                    + "A.TOTAL_KG AS NKG,B.TOTAL_KG AS KG,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN A.TOTAL_SQMTR ELSE 0 END AS NSQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN B.TOTAL_SQMTR ELSE 0 END AS SQMTR,A.NET_AMOUNT AS NAMOUNT,B.NET_AMOUNT AS AMOUNT,A.PARTY_STATUS "
                    + "FROM (SELECT * FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + " AND QUALITY_NO LIKE '729%') AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO LIKE '729%' " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + ") AS C "
                    + "WHERE NTOTAL<TOTAL "
                    + "UNION ALL "
                    + "SELECT 'Upgrade-SDF' AS DESCRIPTION,COALESCE(SUM(COALESCE(TOTAL,0)),0) AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0) AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0) AS SQMTR,COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)/100000 AS AMOUNT "
                    + "FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) NOT IN ( "
                    + "SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + ") " + cndpcd + " AND QUALITY_NO LIKE '729%') AS AA "
                    + "UNION ALL "
                    + "SELECT DESCRIPTION,SUM(NOS) AS NOS,SUM(DIFFKG) AS KG,SUM(DIFFSQMTR) AS SQMTR,SUM(DIFFAMOUNT) AS AMOUNT "
                    + "FROM "
                    + "(SELECT 'Upgrade-HDS' AS DESCRIPTION,SUM(TOTAL)-SUM(NTOTAL) AS NOS,SUM(KG)-SUM(NKG) AS DIFFKG,SUM(SQMTR)-SUM(NSQMTR) AS DIFFSQMTR, "
                    + "(SUM(AMOUNT)-SUM(NAMOUNT))/100000 AS DIFFAMOUNT "
                    + "FROM "
                    + "(SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,A.TOTAL AS NTOTAL,B.TOTAL, "
                    + "A.TOTAL_KG AS NKG,B.TOTAL_KG AS KG,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN A.TOTAL_SQMTR ELSE 0 END AS NSQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN B.TOTAL_SQMTR ELSE 0 END AS SQMTR,A.NET_AMOUNT AS NAMOUNT,B.NET_AMOUNT AS AMOUNT,A.PARTY_STATUS "
                    + "FROM (SELECT * FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + " AND QUALITY_NO NOT LIKE '729%' AND QUALITY_NO LIKE '7%') AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO NOT LIKE '729%' AND QUALITY_NO LIKE '7%' " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + ") AS C "
                    + "WHERE NTOTAL<TOTAL "
                    + "UNION ALL "
                    + "SELECT 'Upgrade-HDS' AS DESCRIPTION,COALESCE(SUM(COALESCE(TOTAL,0)),0) AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0) AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0) AS SQMTR,COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)/100000 AS AMOUNT "
                    + "FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) NOT IN ( "
                    + "SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + ") " + cndpcd + " AND QUALITY_NO NOT LIKE '729%' AND QUALITY_NO LIKE '7%') AS AA "
                    + "UNION ALL "
                    + "SELECT DESCRIPTION,SUM(NOS) AS NOS,SUM(DIFFKG) AS KG,SUM(DIFFSQMTR) AS SQMTR,SUM(DIFFAMOUNT) AS AMOUNT "
                    + "FROM "
                    + "(SELECT 'Upgrade-TOTAL' AS DESCRIPTION,SUM(TOTAL)-SUM(NTOTAL) AS NOS,SUM(KG)-SUM(NKG) AS DIFFKG,SUM(SQMTR)-SUM(NSQMTR) AS DIFFSQMTR, "
                    + "(SUM(AMOUNT)-SUM(NAMOUNT))/100000 AS DIFFAMOUNT "
                    + "FROM "
                    + "(SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,A.TOTAL AS NTOTAL,B.TOTAL, "
                    + "A.TOTAL_KG AS NKG,B.TOTAL_KG AS KG,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN A.TOTAL_SQMTR ELSE 0 END AS NSQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN B.TOTAL_SQMTR ELSE 0 END AS SQMTR,A.NET_AMOUNT AS NAMOUNT,B.NET_AMOUNT AS AMOUNT,A.PARTY_STATUS "
                    + "FROM (SELECT * FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + ") AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE TOTAL>0 " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + ") AS C "
                    + "WHERE NTOTAL<TOTAL "
                    + "UNION ALL "
                    + "SELECT 'Upgrade-TOTAL' AS DESCRIPTION,COALESCE(SUM(COALESCE(TOTAL,0)),0) AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0) AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0) AS SQMTR,COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)/100000 AS AMOUNT "
                    + "FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) NOT IN ( "
                    + "SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + ") " + cndpcd + ") AS AA "
                    + "UNION ALL "
                    + "SELECT 'Closer -PRESS',COALESCE(SUM(COALESCE(TOTAL,0)),0)*-1 AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0)*-1 AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0)*-1 AS SQMTR,(COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)*-1)/100000 AS AMOUNT "
                    + " FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(MM_PARTY_CODE,RIGHT(MM_MACHINE_NO+100,2),RIGHT(MM_MACHINE_POSITION+100,2)) FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL "
                    + "WHERE POSITION_CLOSE_IND='1') AND QUALITY_NO NOT LIKE '7%' AND QUALITY_NO NOT LIKE '6%' " + cndpcd + "  "
                    + " UNION ALL "
                    + "SELECT 'Closer -ACNE',COALESCE(SUM(COALESCE(TOTAL,0)),0)*-1 AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0)*-1 AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0)*-1 AS SQMTR,(COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)*-1)/100000 AS AMOUNT "
                    + " FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(MM_PARTY_CODE,RIGHT(MM_MACHINE_NO+100,2),RIGHT(MM_MACHINE_POSITION+100,2)) FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL "
                    + "WHERE POSITION_CLOSE_IND='1') AND QUALITY_NO LIKE '6%' " + cndpcd + " "
                    + " UNION ALL "
                    + "SELECT 'Closer -SDF',COALESCE(SUM(COALESCE(TOTAL,0)),0)*-1 AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0)*-1 AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0)*-1 AS SQMTR,(COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)*-1)/100000 AS AMOUNT "
                    + " FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(MM_PARTY_CODE,RIGHT(MM_MACHINE_NO+100,2),RIGHT(MM_MACHINE_POSITION+100,2)) FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL "
                    + "WHERE POSITION_CLOSE_IND='1') AND QUALITY_NO LIKE '729%' " + cndpcd + " "
                    + " UNION ALL "
                    + "SELECT 'Closer -HDS',COALESCE(SUM(COALESCE(TOTAL,0)),0)*-1 AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0)*-1 AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0)*-1 AS SQMTR,(COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)*-1)/100000 AS AMOUNT "
                    + " FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(MM_PARTY_CODE,RIGHT(MM_MACHINE_NO+100,2),RIGHT(MM_MACHINE_POSITION+100,2)) FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL "
                    + "WHERE POSITION_CLOSE_IND='1') AND QUALITY_NO NOT LIKE '729%' AND QUALITY_NO LIKE '7%' " + cndpcd + "  "
                    + " UNION ALL "
                    + "SELECT 'Closer -TOTAL',COALESCE(SUM(COALESCE(TOTAL,0)),0)*-1 AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0)*-1 AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0)*-1 AS SQMTR,(COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)*-1)/100000 AS AMOUNT "
                    + " FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(MM_PARTY_CODE,RIGHT(MM_MACHINE_NO+100,2),RIGHT(MM_MACHINE_POSITION+100,2)) FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL "
                    + "WHERE POSITION_CLOSE_IND='1') " + cndpcd + " "
                    + " UNION ALL "
                    + "SELECT 'Downward-PRESS',SUM(TOTAL)-SUM(NTOTAL) AS NOS,SUM(KG)-SUM(NKG) AS DIFFKG,SUM(SQMTR)-SUM(NSQMTR) AS DIFFSQMTR, "
                    + "(SUM(AMOUNT)-SUM(NAMOUNT))/100000 AS DIFFAMOUNT FROM (SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,A.TOTAL AS NTOTAL,B.TOTAL, "
                    + "A.TOTAL_KG AS NKG,B.TOTAL_KG AS KG,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN A.TOTAL_SQMTR ELSE 0 END AS NSQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN B.TOTAL_SQMTR ELSE 0 END AS SQMTR,A.NET_AMOUNT AS NAMOUNT,B.NET_AMOUNT AS AMOUNT,A.PARTY_STATUS "
                    + " FROM (SELECT * FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE DOC_NO LIKE 'BU%' " + cndpcd + ") "
                    + "AND QUALITY_NO NOT LIKE '7%' " + cndpcd + " AND QUALITY_NO NOT LIKE '6%') AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO NOT LIKE '7%' AND QUALITY_NO NOT LIKE '6%' " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + ") AS C "
                    + "WHERE NTOTAL>TOTAL "
                    + " UNION ALL "
                    + "SELECT 'Downward-ACNE',SUM(TOTAL)-SUM(NTOTAL) AS NOS,SUM(KG)-SUM(NKG) AS DIFFKG,SUM(SQMTR)-SUM(NSQMTR) AS DIFFSQMTR, "
                    + "(SUM(AMOUNT)-SUM(NAMOUNT))/100000 AS DIFFAMOUNT FROM (SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,A.TOTAL AS NTOTAL,B.TOTAL, "
                    + "A.TOTAL_KG AS NKG,B.TOTAL_KG AS KG,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN A.TOTAL_SQMTR ELSE 0 END AS NSQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN B.TOTAL_SQMTR ELSE 0 END AS SQMTR,A.NET_AMOUNT AS NAMOUNT,B.NET_AMOUNT AS AMOUNT,A.PARTY_STATUS "
                    + " FROM (SELECT * FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE DOC_NO LIKE 'BU%' " + cndpcd + ") "
                    + " " + cndpcd + " AND QUALITY_NO LIKE '6%') AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO LIKE '6%' " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + ") AS C "
                    + "WHERE NTOTAL>TOTAL "
                    + " UNION ALL "
                    + "SELECT 'Downward-SDF',SUM(TOTAL)-SUM(NTOTAL) AS NOS,SUM(KG)-SUM(NKG) AS DIFFKG,SUM(SQMTR)-SUM(NSQMTR) AS DIFFSQMTR, "
                    + "(SUM(AMOUNT)-SUM(NAMOUNT))/100000 AS DIFFAMOUNT FROM (SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,A.TOTAL AS NTOTAL,B.TOTAL, "
                    + "A.TOTAL_KG AS NKG,B.TOTAL_KG AS KG,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN A.TOTAL_SQMTR ELSE 0 END AS NSQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN B.TOTAL_SQMTR ELSE 0 END AS SQMTR,A.NET_AMOUNT AS NAMOUNT,B.NET_AMOUNT AS AMOUNT,A.PARTY_STATUS "
                    + " FROM (SELECT * FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE DOC_NO LIKE 'BU%' " + cndpcd + ") "
                    + " " + cndpcd + "AND QUALITY_NO LIKE '729%') AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO LIKE '729%' " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + ") AS C "
                    + "WHERE NTOTAL>TOTAL "
                    + " UNION ALL "
                    + "SELECT 'Downward-HDS',SUM(TOTAL)-SUM(NTOTAL) AS NOS,SUM(KG)-SUM(NKG) AS DIFFKG,SUM(SQMTR)-SUM(NSQMTR) AS DIFFSQMTR, "
                    + "(SUM(AMOUNT)-SUM(NAMOUNT))/100000 AS DIFFAMOUNT FROM (SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,A.TOTAL AS NTOTAL,B.TOTAL, "
                    + "A.TOTAL_KG AS NKG,B.TOTAL_KG AS KG,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN A.TOTAL_SQMTR ELSE 0 END AS NSQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN B.TOTAL_SQMTR ELSE 0 END AS SQMTR,A.NET_AMOUNT AS NAMOUNT,B.NET_AMOUNT AS AMOUNT,A.PARTY_STATUS "
                    + " FROM (SELECT * FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE DOC_NO LIKE 'BU%' " + cndpcd + ") "
                    + "AND QUALITY_NO NOT LIKE '729%' " + cndpcd + " AND QUALITY_NO LIKE '7%') AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO NOT LIKE '729%' AND QUALITY_NO LIKE '7%' " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + ") AS C "
                    + "WHERE NTOTAL>TOTAL "
                    + " UNION ALL "
                    + "SELECT 'Downward-TOTAL',SUM(TOTAL)-SUM(NTOTAL) AS NOS,SUM(KG)-SUM(NKG) AS DIFFKG,SUM(SQMTR)-SUM(NSQMTR) AS DIFFSQMTR, "
                    + "(SUM(AMOUNT)-SUM(NAMOUNT))/100000 AS DIFFAMOUNT FROM (SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,A.TOTAL AS NTOTAL,B.TOTAL, "
                    + "A.TOTAL_KG AS NKG,B.TOTAL_KG AS KG,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN A.TOTAL_SQMTR ELSE 0 END AS NSQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN B.TOTAL_SQMTR ELSE 0 END AS SQMTR,A.NET_AMOUNT AS NAMOUNT,B.NET_AMOUNT AS AMOUNT,A.PARTY_STATUS "
                    + " FROM (SELECT * FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE DOC_NO LIKE 'BU%' " + cndpcd + ")) AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE TOTAL>0 " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + ") AS C "
                    + "WHERE NTOTAL>TOTAL"
                    + " UNION ALL "
                    + "SELECT 'INVOICED-PRESS',SUM(H.NO_OF_PIECES) AS NOS,SUM(D.ACTUAL_WEIGHT),"
                    + "SUM(CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END),SUM(ROUND(D.INVOICE_AMT,0))/100000  "
                    + "FROM PRODUCTION.FELT_SAL_INVOICE_DETAIL D,PRODUCTION.FELT_SAL_INVOICE_HEADER H "
                    + "WHERE D.INVOICE_NO=H.INVOICE_NO AND SUBSTRING(D.INVOICE_DATE,1,10)=SUBSTRING(H.INVOICE_DATE,1,10) AND  "
                    + " D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + lastdate + " 23:59:59' "
                    + " AND H.CANCELLED!=1 AND H.APPROVED=1 AND D.PRODUCT_CODE NOT LIKE '7%' AND D.PRODUCT_CODE NOT LIKE '6%' "
                    + " UNION ALL "
                    + "SELECT 'INVOICED-ACNE',SUM(H.NO_OF_PIECES) AS NOS,SUM(D.ACTUAL_WEIGHT),"
                    + "SUM(CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END),SUM(ROUND(D.INVOICE_AMT,0))/100000  "
                    + "FROM PRODUCTION.FELT_SAL_INVOICE_DETAIL D,PRODUCTION.FELT_SAL_INVOICE_HEADER H "
                    + "WHERE D.INVOICE_NO=H.INVOICE_NO AND SUBSTRING(D.INVOICE_DATE,1,10)=SUBSTRING(H.INVOICE_DATE,1,10) AND  "
                    + " D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + lastdate + " 23:59:59' "
                    + " AND H.CANCELLED!=1 AND H.APPROVED=1 AND  D.PRODUCT_CODE LIKE '6%' "
                    + " UNION ALL "
                    + "SELECT 'INVOICED-SDF',SUM(H.NO_OF_PIECES) AS NOS,SUM(D.ACTUAL_WEIGHT),"
                    + "SUM(CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END),SUM(ROUND(D.INVOICE_AMT,0))/100000  "
                    + "FROM PRODUCTION.FELT_SAL_INVOICE_DETAIL D,PRODUCTION.FELT_SAL_INVOICE_HEADER H "
                    + "WHERE D.INVOICE_NO=H.INVOICE_NO AND SUBSTRING(D.INVOICE_DATE,1,10)=SUBSTRING(H.INVOICE_DATE,1,10) AND  "
                    + " D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + lastdate + " 23:59:59' "
                    + " AND H.CANCELLED!=1 AND H.APPROVED=1 AND  D.PRODUCT_CODE LIKE '729%' "
                    + " UNION ALL "
                    + "SELECT 'INVOICED-HDS',SUM(H.NO_OF_PIECES) AS NOS,SUM(D.ACTUAL_WEIGHT),"
                    + "SUM(CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END),SUM(ROUND(D.INVOICE_AMT,0))/100000  "
                    + "FROM PRODUCTION.FELT_SAL_INVOICE_DETAIL D,PRODUCTION.FELT_SAL_INVOICE_HEADER H "
                    + "WHERE D.INVOICE_NO=H.INVOICE_NO AND SUBSTRING(D.INVOICE_DATE,1,10)=SUBSTRING(H.INVOICE_DATE,1,10) AND  "
                    + " D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + lastdate + " 23:59:59' "
                    + " AND H.CANCELLED!=1 AND H.APPROVED=1 AND  D.PRODUCT_CODE NOT LIKE '729%' AND D.PRODUCT_CODE LIKE '7%' "
                    + " UNION ALL "
                    + "SELECT 'INVOICED-TOTAL',SUM(H.NO_OF_PIECES) AS NOS,SUM(D.ACTUAL_WEIGHT),"
                    + "SUM(CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END),SUM(ROUND(D.INVOICE_AMT,0))/100000  "
                    + "FROM PRODUCTION.FELT_SAL_INVOICE_DETAIL D,PRODUCTION.FELT_SAL_INVOICE_HEADER H "
                    + "WHERE D.INVOICE_NO=H.INVOICE_NO AND SUBSTRING(D.INVOICE_DATE,1,10)=SUBSTRING(H.INVOICE_DATE,1,10) AND  "
                    + " D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + lastdate + " 23:59:59' "
                    + " AND H.CANCELLED!=1 AND H.APPROVED=1 ";
        }
        if (mquater.equalsIgnoreCase("BUDGET")) {
            sql = "SELECT 'Budgeted-PRESS' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(TOTAL,0)),0) AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0) AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0) AS SQMTR,COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)/100000 AS AMOUNT,PARTY_STATUS "
                    + "FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE DOC_NO LIKE 'BU%' " + cndpcd + " AND QUALITY_NO NOT LIKE '7%' AND QUALITY_NO NOT LIKE '6%' "
                    + "GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT 'Budgeted-ACNE' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(TOTAL,0)),0) AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0) AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0) AS SQMTR,COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)/100000 AS AMOUNT,PARTY_STATUS "
                    + "FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE DOC_NO LIKE 'BU%' " + cndpcd + " AND QUALITY_NO LIKE '6%' "
                    + "GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT 'Budgeted-SDF' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(TOTAL,0)),0) AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0) AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0) AS SQMTR,COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)/100000 AS AMOUNT,PARTY_STATUS "
                    + "FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE DOC_NO LIKE 'BU%' " + cndpcd + " AND QUALITY_NO LIKE '729%' "
                    + "GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT 'Budgeted-HDS' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(TOTAL,0)),0) AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0) AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0) AS SQMTR,COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)/100000 AS AMOUNT,PARTY_STATUS "
                    + "FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE DOC_NO LIKE 'BU%' " + cndpcd + " AND QUALITY_NO NOT LIKE '729%' AND QUALITY_NO LIKE '7%' "
                    + "GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT 'Budgeted-TOTAL' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(TOTAL,0)),0) AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0) AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0) AS SQMTR,COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)/100000 AS AMOUNT,PARTY_STATUS "
                    + "FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE DOC_NO LIKE 'BU%' " + cndpcd + " "
                    + "GROUP BY PARTY_CODE";
        }
        if (mquater.equalsIgnoreCase("UPGRADE")) {
            sql = "SELECT DESCRIPTION,PARTY_CODE,PARTY_NAME,SUM(NOS) AS NOS,SUM(DIFFKG) AS KG,SUM(DIFFSQMTR) AS SQMTR,SUM(DIFFAMOUNT) AS AMOUNT,PARTY_STATUS "
                    + "FROM "
                    + "(SELECT 'Upgrade-PRESS' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,SUM(TOTAL)-SUM(NTOTAL) AS NOS,SUM(KG)-SUM(NKG) AS DIFFKG,SUM(SQMTR)-SUM(NSQMTR) AS DIFFSQMTR, "
                    + "(SUM(AMOUNT)-SUM(NAMOUNT))/100000 AS DIFFAMOUNT,PARTY_STATUS "
                    + "FROM "
                    + "(SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,SUM(A.TOTAL) AS NTOTAL,SUM(B.TOTAL) AS TOTAL, "
                    + "SUM(A.TOTAL_KG) AS NKG,SUM(B.TOTAL_KG) AS KG,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.TOTAL_SQMTR) ELSE 0 END AS NSQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.TOTAL_SQMTR) ELSE 0 END AS SQMTR,SUM(A.NET_AMOUNT) AS NAMOUNT,SUM(B.NET_AMOUNT) AS AMOUNT,A.PARTY_STATUS "
                    + "FROM (SELECT * FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + " AND QUALITY_NO NOT LIKE '7%' AND QUALITY_NO NOT LIKE '6%' ) AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO NOT LIKE '7%' " + cndpcd + " AND QUALITY_NO NOT LIKE '6%') AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + " GROUP BY PARTY_CODE) AS C "
                    + "WHERE NTOTAL<TOTAL "
                    + "GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT 'Upgrade-PRESS' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(TOTAL,0)),0) AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0) AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0) AS SQMTR,COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)/100000 AS AMOUNT,GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + "FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) NOT IN ( "
                    + "SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + ") " + cndpcd + " AND QUALITY_NO NOT LIKE '7%' AND QUALITY_NO NOT LIKE '6%' GROUP BY PARTY_CODE) AS AA "
                    + " GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT DESCRIPTION,PARTY_CODE,PARTY_NAME,SUM(NOS) AS NOS,SUM(DIFFKG) AS KG,SUM(DIFFSQMTR) AS SQMTR,SUM(DIFFAMOUNT) AS AMOUNT,GROUP_CONCAT(DISTINCT PARTY_STATUS)  "
                    + "FROM "
                    + "(SELECT 'Upgrade-ACNE' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,SUM(TOTAL)-SUM(NTOTAL) AS NOS,SUM(KG)-SUM(NKG) AS DIFFKG,SUM(SQMTR)-SUM(NSQMTR) AS DIFFSQMTR, "
                    + "(SUM(AMOUNT)-SUM(NAMOUNT))/100000 AS DIFFAMOUNT,PARTY_STATUS "
                    + "FROM "
                    + "(SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,SUM(A.TOTAL) AS NTOTAL,SUM(B.TOTAL) AS TOTAL, "
                    + "SUM(A.TOTAL_KG) AS NKG,SUM(B.TOTAL_KG) AS KG,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.TOTAL_SQMTR) ELSE 0 END AS NSQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.TOTAL_SQMTR) ELSE 0 END AS SQMTR,SUM(A.NET_AMOUNT) AS NAMOUNT,SUM(B.NET_AMOUNT) AS AMOUNT,A.PARTY_STATUS "
                    + "FROM (SELECT * FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + " AND QUALITY_NO LIKE '6%'  ) AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO LIKE '6%' " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + " GROUP BY PARTY_CODE) AS C "
                    + "WHERE NTOTAL<TOTAL "
                    + " GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT 'Upgrade-ACNE' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(TOTAL,0)),0) AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0) AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0) AS SQMTR,COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)/100000 AS AMOUNT,GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + "FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) NOT IN ( "
                    + "SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + ") " + cndpcd + " AND QUALITY_NO LIKE '6%'  GROUP BY PARTY_CODE) AS AA "
                    + " GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT DESCRIPTION,PARTY_CODE,PARTY_NAME,SUM(NOS) AS NOS,SUM(DIFFKG) AS KG,SUM(DIFFSQMTR) AS SQMTR,SUM(DIFFAMOUNT) AS AMOUNT,GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + "FROM "
                    + "(SELECT 'Upgrade-SDF' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,SUM(TOTAL)-SUM(NTOTAL) AS NOS,SUM(KG)-SUM(NKG) AS DIFFKG,SUM(SQMTR)-SUM(NSQMTR) AS DIFFSQMTR, "
                    + "(SUM(AMOUNT)-SUM(NAMOUNT))/100000 AS DIFFAMOUNT,PARTY_STATUS "
                    + "FROM "
                    + "(SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,SUM(A.TOTAL) AS NTOTAL,SUM(B.TOTAL) AS TOTAL, "
                    + "SUM(A.TOTAL_KG) AS NKG,SUM(B.TOTAL_KG) AS KG,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.TOTAL_SQMTR) ELSE 0 END AS NSQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.TOTAL_SQMTR) ELSE 0 END AS SQMTR,SUM(A.NET_AMOUNT) AS NAMOUNT,SUM(B.NET_AMOUNT) AS AMOUNT,A.PARTY_STATUS "
                    + "FROM (SELECT * FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + " AND QUALITY_NO LIKE '729%'  ) AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO LIKE '729%' " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + " GROUP BY PARTY_CODE) AS C "
                    + "WHERE NTOTAL<TOTAL "
                    + " GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT 'Upgrade-SDF' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(TOTAL,0)),0) AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0) AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0) AS SQMTR,COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)/100000 AS AMOUNT,GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + "FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) NOT IN ( "
                    + "SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + ") " + cndpcd + " AND QUALITY_NO LIKE '729%'  GROUP BY PARTY_CODE) AS AA "
                    + " GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT DESCRIPTION,PARTY_CODE,PARTY_NAME,SUM(NOS) AS NOS,SUM(DIFFKG) AS KG,SUM(DIFFSQMTR) AS SQMTR,SUM(DIFFAMOUNT) AS AMOUNT,GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + "FROM "
                    + "(SELECT 'Upgrade-HDS' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,SUM(TOTAL)-SUM(NTOTAL) AS NOS,SUM(KG)-SUM(NKG) AS DIFFKG,SUM(SQMTR)-SUM(NSQMTR) AS DIFFSQMTR, "
                    + "(SUM(AMOUNT)-SUM(NAMOUNT))/100000 AS DIFFAMOUNT,PARTY_STATUS "
                    + "FROM "
                    + "(SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,SUM(A.TOTAL) AS NTOTAL,SUM(B.TOTAL) AS TOTAL, "
                    + "SUM(A.TOTAL_KG) AS NKG,SUM(B.TOTAL_KG) AS KG,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.TOTAL_SQMTR) ELSE 0 END AS NSQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.TOTAL_SQMTR) ELSE 0 END AS SQMTR,SUM(A.NET_AMOUNT) AS NAMOUNT,SUM(B.NET_AMOUNT) AS AMOUNT,A.PARTY_STATUS "
                    + "FROM (SELECT * FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + " AND QUALITY_NO NOT LIKE '729%' AND QUALITY_NO LIKE '7%'  ) AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO NOT LIKE '729%' AND QUALITY_NO LIKE '7%' " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + " GROUP BY PARTY_CODE) AS C "
                    + "WHERE NTOTAL<TOTAL "
                    + " GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT 'Upgrade-HDS' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(TOTAL,0)),0) AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0) AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0) AS SQMTR,COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)/100000 AS AMOUNT,GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + "FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) NOT IN ( "
                    + "SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + ") " + cndpcd + " AND QUALITY_NO NOT LIKE '729%' AND QUALITY_NO LIKE '7%'  GROUP BY PARTY_CODE) AS AA "
                    + " GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT DESCRIPTION,PARTY_CODE,PARTY_NAME,SUM(NOS) AS NOS,SUM(DIFFKG) AS KG,SUM(DIFFSQMTR) AS SQMTR,SUM(DIFFAMOUNT) AS AMOUNT,GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + "FROM "
                    + "(SELECT 'Upgrade-TOTAL' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,SUM(TOTAL)-SUM(NTOTAL) AS NOS,SUM(KG)-SUM(NKG) AS DIFFKG,SUM(SQMTR)-SUM(NSQMTR) AS DIFFSQMTR, "
                    + "(SUM(AMOUNT)-SUM(NAMOUNT))/100000 AS DIFFAMOUNT,PARTY_STATUS "
                    + "FROM "
                    + "(SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,SUM(A.TOTAL) AS NTOTAL,SUM(B.TOTAL) AS TOTAL, "
                    + "SUM(A.TOTAL_KG) AS NKG,SUM(B.TOTAL_KG) AS KG,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.TOTAL_SQMTR) ELSE 0 END AS NSQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.TOTAL_SQMTR) ELSE 0 END AS SQMTR,SUM(A.NET_AMOUNT) AS NAMOUNT,SUM(B.NET_AMOUNT) AS AMOUNT,A.PARTY_STATUS "
                    + "FROM (SELECT * FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + "  ) AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE TOTAL>0 " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + " GROUP BY PARTY_CODE) AS C "
                    + "WHERE NTOTAL<TOTAL "
                    + " GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT 'Upgrade-TOTAL' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(TOTAL,0)),0) AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0) AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0) AS SQMTR,COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)/100000 AS AMOUNT,GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + "FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) NOT IN ( "
                    + "SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + ") " + cndpcd + "  GROUP BY PARTY_CODE) AS AA "
                    + " GROUP BY PARTY_CODE";
        }
        if (mquater.equalsIgnoreCase("CLOSER")) {
            sql = "SELECT 'Closer -PRESS',PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(TOTAL,0)),0)*-1 AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0)*-1 AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0)*-1 AS SQMTR,(COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)*-1)/100000 AS AMOUNT,GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + " FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(MM_PARTY_CODE,RIGHT(MM_MACHINE_NO+100,2),RIGHT(MM_MACHINE_POSITION+100,2)) FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL "
                    + "WHERE POSITION_CLOSE_IND='1') AND QUALITY_NO NOT LIKE '7%' AND QUALITY_NO NOT LIKE '6%' " + cndpcd + "  "
                    + "GROUP BY PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'Closer -ACNE',PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(TOTAL,0)),0)*-1 AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0)*-1 AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0)*-1 AS SQMTR,(COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)*-1)/100000 AS AMOUNT,GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + " FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(MM_PARTY_CODE,RIGHT(MM_MACHINE_NO+100,2),RIGHT(MM_MACHINE_POSITION+100,2)) FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL "
                    + "WHERE POSITION_CLOSE_IND='1') AND QUALITY_NO LIKE '6%' " + cndpcd + " "
                    + "GROUP BY PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'Closer -SDF',PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(TOTAL,0)),0)*-1 AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0)*-1 AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0)*-1 AS SQMTR,(COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)*-1)/100000 AS AMOUNT,GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + " FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(MM_PARTY_CODE,RIGHT(MM_MACHINE_NO+100,2),RIGHT(MM_MACHINE_POSITION+100,2)) FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL "
                    + "WHERE POSITION_CLOSE_IND='1') AND QUALITY_NO LIKE '729%' " + cndpcd + " "
                    + "GROUP BY PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'Closer -HDS',PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(TOTAL,0)),0)*-1 AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0)*-1 AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0)*-1 AS SQMTR,(COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)*-1)/100000 AS AMOUNT,GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + " FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(MM_PARTY_CODE,RIGHT(MM_MACHINE_NO+100,2),RIGHT(MM_MACHINE_POSITION+100,2)) FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL "
                    + "WHERE POSITION_CLOSE_IND='1') AND QUALITY_NO NOT LIKE '729%' AND QUALITY_NO LIKE '7%' " + cndpcd + "  "
                    + "GROUP BY PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'Closer -TOTAL',PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(TOTAL,0)),0)*-1 AS NOS,COALESCE(SUM(COALESCE(TOTAL_KG,0)),0)*-1 AS KG, "
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN TOTAL_SQMTR ELSE 0 END,0)),0)*-1 AS SQMTR,(COALESCE(SUM(COALESCE(NET_AMOUNT,0)),0)*-1)/100000 AS AMOUNT,GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + " FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(MM_PARTY_CODE,RIGHT(MM_MACHINE_NO+100,2),RIGHT(MM_MACHINE_POSITION+100,2)) FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL "
                    + "WHERE POSITION_CLOSE_IND='1') " + cndpcd + " "
                    + " GROUP BY PARTY_CODE";
        }
        if (mquater.equalsIgnoreCase("DOWNGRADE")) {
            sql = "SELECT 'Downward-PRESS',PARTY_CODE,PARTY_NAME,SUM(TOTAL)-SUM(NTOTAL) AS NOS,SUM(KG)-SUM(NKG) AS DIFFKG,SUM(SQMTR)-SUM(NSQMTR) AS DIFFSQMTR, "
                    + "(SUM(AMOUNT)-SUM(NAMOUNT))/100000 AS DIFFAMOUNT,GROUP_CONCAT(DISTINCT PARTY_STATUS) FROM (SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,SUM(A.TOTAL) AS NTOTAL,SUM(B.TOTAL) AS TOTAL, "
                    + "SUM(A.TOTAL_KG) AS NKG,SUM(B.TOTAL_KG) AS KG,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.TOTAL_SQMTR) ELSE 0 END AS NSQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.TOTAL_SQMTR) ELSE 0 END AS SQMTR,SUM(A.NET_AMOUNT) AS NAMOUNT,SUM(B.NET_AMOUNT) AS AMOUNT,A.PARTY_STATUS "
                    + " FROM (SELECT * FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE DOC_NO LIKE 'BU%' " + cndpcd + ") "
                    + "AND QUALITY_NO NOT LIKE '7%' " + cndpcd + " AND QUALITY_NO NOT LIKE '6%') AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO NOT LIKE '7%' AND QUALITY_NO NOT LIKE '6%' " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + ") AS C "
                    + "WHERE NTOTAL>TOTAL "
                    + "GROUP BY PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'Downward-ACNE',PARTY_CODE,PARTY_NAME,SUM(TOTAL)-SUM(NTOTAL) AS NOS,SUM(KG)-SUM(NKG) AS DIFFKG,SUM(SQMTR)-SUM(NSQMTR) AS DIFFSQMTR, "
                    + "(SUM(AMOUNT)-SUM(NAMOUNT))/100000 AS DIFFAMOUNT,GROUP_CONCAT(DISTINCT PARTY_STATUS) FROM (SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,SUM(A.TOTAL) AS NTOTAL,SUM(B.TOTAL) AS TOTAL, "
                    + "SUM(A.TOTAL_KG) AS NKG,SUM(B.TOTAL_KG) AS KG,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.TOTAL_SQMTR) ELSE 0 END AS NSQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.TOTAL_SQMTR) ELSE 0 END AS SQMTR,SUM(A.NET_AMOUNT) AS NAMOUNT,SUM(B.NET_AMOUNT) AS AMOUNT,A.PARTY_STATUS "
                    + " FROM (SELECT * FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE DOC_NO LIKE 'BU%' " + cndpcd + ") "
                    + " " + cndpcd + " AND QUALITY_NO LIKE '6%') AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO LIKE '6%' " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + ") AS C "
                    + "WHERE NTOTAL>TOTAL "
                    + "GROUP BY PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'Downward-SDF',PARTY_CODE,PARTY_NAME,SUM(TOTAL)-SUM(NTOTAL) AS NOS,SUM(KG)-SUM(NKG) AS DIFFKG,SUM(SQMTR)-SUM(NSQMTR) AS DIFFSQMTR, "
                    + "(SUM(AMOUNT)-SUM(NAMOUNT))/100000 AS DIFFAMOUNT,GROUP_CONCAT(DISTINCT PARTY_STATUS) FROM (SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,SUM(A.TOTAL) AS NTOTAL,SUM(B.TOTAL) AS TOTAL, "
                    + "SUM(A.TOTAL_KG) AS NKG,SUM(B.TOTAL_KG) AS KG,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.TOTAL_SQMTR) ELSE 0 END AS NSQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.TOTAL_SQMTR) ELSE 0 END AS SQMTR,SUM(A.NET_AMOUNT) AS NAMOUNT,SUM(B.NET_AMOUNT) AS AMOUNT,A.PARTY_STATUS "
                    + " FROM (SELECT * FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE DOC_NO LIKE 'BU%' " + cndpcd + ") "
                    + " " + cndpcd + "AND QUALITY_NO LIKE '729%') AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO LIKE '729%' " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + ") AS C "
                    + "WHERE NTOTAL>TOTAL "
                    + "GROUP BY PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'Downward-HDS',PARTY_CODE,PARTY_NAME,SUM(TOTAL)-SUM(NTOTAL) AS NOS,SUM(KG)-SUM(NKG) AS DIFFKG,SUM(SQMTR)-SUM(NSQMTR) AS DIFFSQMTR, "
                    + "(SUM(AMOUNT)-SUM(NAMOUNT))/100000 AS DIFFAMOUNT,GROUP_CONCAT(DISTINCT PARTY_STATUS) FROM (SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,SUM(A.TOTAL) AS NTOTAL,SUM(B.TOTAL) AS TOTAL, "
                    + "SUM(A.TOTAL_KG) AS NKG,SUM(B.TOTAL_KG) AS KG,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.TOTAL_SQMTR) ELSE 0 END AS NSQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.TOTAL_SQMTR) ELSE 0 END AS SQMTR,SUM(A.NET_AMOUNT) AS NAMOUNT,SUM(B.NET_AMOUNT) AS AMOUNT,A.PARTY_STATUS "
                    + " FROM (SELECT * FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE DOC_NO LIKE 'BU%' " + cndpcd + ") "
                    + "AND QUALITY_NO NOT LIKE '729%' " + cndpcd + " AND QUALITY_NO LIKE '7%') AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO NOT LIKE '729%' AND QUALITY_NO LIKE '7%' " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + ") AS C "
                    + "WHERE NTOTAL>TOTAL "
                    + "GROUP BY PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'Downward-TOTAL',PARTY_CODE,PARTY_NAME,SUM(TOTAL)-SUM(NTOTAL) AS NOS,SUM(KG)-SUM(NKG) AS DIFFKG,SUM(SQMTR)-SUM(NSQMTR) AS DIFFSQMTR, "
                    + "(SUM(AMOUNT)-SUM(NAMOUNT))/100000 AS DIFFAMOUNT,GROUP_CONCAT(DISTINCT PARTY_STATUS) FROM (SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,SUM(A.TOTAL) AS NTOTAL,SUM(B.TOTAL) AS TOTAL, "
                    + "SUM(A.TOTAL_KG) AS NKG,SUM(B.TOTAL_KG) AS KG,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.TOTAL_SQMTR) ELSE 0 END AS NSQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.TOTAL_SQMTR) ELSE 0 END AS SQMTR,SUM(A.NET_AMOUNT) AS NAMOUNT,SUM(B.NET_AMOUNT) AS AMOUNT,A.PARTY_STATUS "
                    + " FROM (SELECT * FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE DOC_NO LIKE 'BU%' " + cndpcd + ")) AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE TOTAL>0 " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + ") AS C "
                    + "WHERE NTOTAL>TOTAL "
                    + "GROUP BY PARTY_CODE";
        }
        if (mquater.equalsIgnoreCase("INVOICE")) {
            sql = "SELECT 'INVOICED-PRESS' AS DESCRIPTION,H.PARTY_CODE,PARTY_NAME,SUM(H.NO_OF_PIECES) AS NOS,SUM(D.ACTUAL_WEIGHT) AS KG,"
                    + "SUM(CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END) AS SQMTR,SUM(ROUND(D.INVOICE_AMT,0))/100000 AS AMOUNT,COALESCE(PARTY_STATUS,'') AS PARTY_STATUS "
                    + "FROM PRODUCTION.FELT_SAL_INVOICE_DETAIL D,PRODUCTION.FELT_SAL_INVOICE_HEADER H "
                    + "LEFT JOIN (SELECT PARTY_CODE AS PCD,GROUP_CONCAT(DISTINCT PARTY_STATUS) AS PARTY_STATUS FROM PRODUCTION.FELT_BUDGET GROUP BY PARTY_CODE) AS AA "
                    + "ON H.PARTY_CODE=AA.PCD "
                    + "WHERE D.INVOICE_NO=H.INVOICE_NO AND SUBSTRING(D.INVOICE_DATE,1,10)=SUBSTRING(H.INVOICE_DATE,1,10) AND "
                    + " D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + lastdate + " 23:59:59' "
                    + " AND H.CANCELLED!=1 AND H.APPROVED=1 AND D.PRODUCT_CODE NOT LIKE '7%' AND D.PRODUCT_CODE NOT LIKE '6%' "
                    + "GROUP BY H.PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'INVOICED-ACNE',H.PARTY_CODE,PARTY_NAME,SUM(H.NO_OF_PIECES) AS NOS,SUM(D.ACTUAL_WEIGHT),"
                    + "SUM(CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END),SUM(ROUND(D.INVOICE_AMT,0))/100000,COALESCE(PARTY_STATUS,'') AS PARTY_STATUS "
                    + "FROM PRODUCTION.FELT_SAL_INVOICE_DETAIL D,PRODUCTION.FELT_SAL_INVOICE_HEADER H "
                    + "LEFT JOIN (SELECT PARTY_CODE AS PCD,GROUP_CONCAT(DISTINCT PARTY_STATUS) AS PARTY_STATUS FROM PRODUCTION.FELT_BUDGET GROUP BY PARTY_CODE) AS AA "
                    + "ON H.PARTY_CODE=AA.PCD "
                    + "WHERE D.INVOICE_NO=H.INVOICE_NO AND SUBSTRING(D.INVOICE_DATE,1,10)=SUBSTRING(H.INVOICE_DATE,1,10) AND "
                    + " D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + lastdate + " 23:59:59' "
                    + " AND H.CANCELLED!=1 AND H.APPROVED=1 AND  D.PRODUCT_CODE LIKE '6%' "
                    + "GROUP BY H.PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'INVOICED-SDF',H.PARTY_CODE,PARTY_NAME,SUM(H.NO_OF_PIECES) AS NOS,SUM(D.ACTUAL_WEIGHT),"
                    + "SUM(CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END),SUM(ROUND(D.INVOICE_AMT,0))/100000,COALESCE(PARTY_STATUS,'') AS PARTY_STATUS "
                    + "FROM PRODUCTION.FELT_SAL_INVOICE_DETAIL D,PRODUCTION.FELT_SAL_INVOICE_HEADER H "
                    + "LEFT JOIN (SELECT PARTY_CODE AS PCD,GROUP_CONCAT(DISTINCT PARTY_STATUS) AS PARTY_STATUS FROM PRODUCTION.FELT_BUDGET GROUP BY PARTY_CODE) AS AA "
                    + "ON H.PARTY_CODE=AA.PCD "
                    + "WHERE D.INVOICE_NO=H.INVOICE_NO AND SUBSTRING(D.INVOICE_DATE,1,10)=SUBSTRING(H.INVOICE_DATE,1,10) AND "
                    + " D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + lastdate + " 23:59:59' "
                    + " AND H.CANCELLED!=1 AND H.APPROVED=1 AND  D.PRODUCT_CODE LIKE '729%' "
                    + "GROUP BY H.PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'INVOICED-HDS',H.PARTY_CODE,PARTY_NAME,SUM(H.NO_OF_PIECES) AS NOS,SUM(D.ACTUAL_WEIGHT),"
                    + "SUM(CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END),SUM(ROUND(D.INVOICE_AMT,0))/100000  ,COALESCE(PARTY_STATUS,'') AS PARTY_STATUS "
                    + "FROM PRODUCTION.FELT_SAL_INVOICE_DETAIL D,PRODUCTION.FELT_SAL_INVOICE_HEADER H "
                    + "LEFT JOIN (SELECT PARTY_CODE AS PCD,GROUP_CONCAT(DISTINCT PARTY_STATUS) AS PARTY_STATUS FROM PRODUCTION.FELT_BUDGET GROUP BY PARTY_CODE) AS AA "
                    + "ON H.PARTY_CODE=AA.PCD "
                    + "WHERE D.INVOICE_NO=H.INVOICE_NO AND SUBSTRING(D.INVOICE_DATE,1,10)=SUBSTRING(H.INVOICE_DATE,1,10) AND "
                    + " D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + lastdate + " 23:59:59' "
                    + " AND H.CANCELLED!=1 AND H.APPROVED=1 AND  D.PRODUCT_CODE NOT LIKE '729%' AND D.PRODUCT_CODE LIKE '7%' "
                    + "GROUP BY H.PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'INVOICED-TOTAL',H.PARTY_CODE,PARTY_NAME,SUM(H.NO_OF_PIECES) AS NOS,SUM(D.ACTUAL_WEIGHT),"
                    + "SUM(CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END),SUM(ROUND(D.INVOICE_AMT,0))/100000,COALESCE(PARTY_STATUS,'') AS PARTY_STATUS "
                    + "FROM PRODUCTION.FELT_SAL_INVOICE_DETAIL D,PRODUCTION.FELT_SAL_INVOICE_HEADER H "
                    + "LEFT JOIN (SELECT PARTY_CODE AS PCD,GROUP_CONCAT(DISTINCT PARTY_STATUS) AS PARTY_STATUS FROM PRODUCTION.FELT_BUDGET GROUP BY PARTY_CODE) AS AA "
                    + "ON H.PARTY_CODE=AA.PCD "
                    + "WHERE D.INVOICE_NO=H.INVOICE_NO AND SUBSTRING(D.INVOICE_DATE,1,10)=SUBSTRING(H.INVOICE_DATE,1,10) AND  "
                    + " D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + lastdate + " 23:59:59' "
                    + " AND H.CANCELLED!=1 AND H.APPROVED=1 "
                    + "GROUP BY H.PARTY_CODE";
        }
        data_generate(sql, mquater);
    }

    private void dataqtr(String mquater) {
        String sql = "", cndpcd = " AND YEAR_FROM='" + txtyear.getText().trim() + "' ", cndarea = "";

        if (txtpartycode.getText().trim().length() > 0) {
            cndpcd = " AND PARTY_CODE IN (" + txtpartycode.getText() + ") ";
        }
        int selemnth = cmbmonth.getSelectedIndex();
        int seleyr;
        if (selemnth > 8) {
            selemnth = selemnth - 8;
        } else {
            selemnth = selemnth + 4;
        }
        if (selemnth < 4) {
            seleyr = Integer.parseInt(txtyear.getText()) + 1;
        } else {
            seleyr = Integer.parseInt(txtyear.getText());
        }
        String lastdate;
        System.out.println("SELECT LAST_DAY(" + seleyr + "-" + selemnth + "-01) FROM DUAL");
        lastdate = data.getStringValueFromDB("SELECT LAST_DAY('" + seleyr + "-" + selemnth + "-01') FROM DUAL");
        System.out.println("Last Date :" + lastdate);

        if (mquater.equalsIgnoreCase("BUDGET")) {
            sql = "SELECT 'Budgeted-PRESS' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(Q1,0)),0) AS Q1,COALESCE(SUM(COALESCE(Q2,0)),0) AS Q2,"
                    + "COALESCE(SUM(COALESCE(Q3,0)),0) AS Q3,COALESCE(SUM(COALESCE(Q4,0)),0) AS Q4,"
                    + "COALESCE(SUM(COALESCE(Q1KG,0)),0) AS Q1KG,COALESCE(SUM(COALESCE(Q2KG,0)),0) AS Q2KG,"
                    + "COALESCE(SUM(COALESCE(Q3KG,0)),0) AS Q3KG,COALESCE(SUM(COALESCE(Q4KG,0)),0) AS Q4KG,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q1SQMTR ELSE 0 END,0)),0) AS Q1SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q2SQMTR ELSE 0 END,0)),0) AS Q2SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q3SQMTR ELSE 0 END,0)),0) AS Q3SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q3SQMTR ELSE 0 END,0)),0) AS Q4SQMTR,"
                    + "COALESCE(SUM(COALESCE(Q1NET_AMOUNT,0)),0)/100000 AS Q1AMOUNT,"
                    + "COALESCE(SUM(COALESCE(Q2NET_AMOUNT,0)),0)/100000 AS Q2AMOUNT,"
                    + "COALESCE(SUM(COALESCE(Q3NET_AMOUNT,0)),0)/100000 AS Q3AMOUNT,"
                    + "COALESCE(SUM(COALESCE(Q4NET_AMOUNT,0)),0)/100000 AS Q4AMOUNT,"
                    + "PARTY_STATUS "
                    + "FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE DOC_NO LIKE 'BU%' " + cndpcd + " AND QUALITY_NO NOT LIKE '7%' AND QUALITY_NO NOT LIKE '6%' "
                    + "GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT 'Budgeted-ACNE' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(Q1,0)),0) AS Q1,COALESCE(SUM(COALESCE(Q2,0)),0) AS Q2,"
                    + "COALESCE(SUM(COALESCE(Q3,0)),0) AS Q3,COALESCE(SUM(COALESCE(Q4,0)),0) AS Q4,"
                    + "COALESCE(SUM(COALESCE(Q1KG,0)),0) AS Q1KG,COALESCE(SUM(COALESCE(Q2KG,0)),0) AS Q2KG,"
                    + "COALESCE(SUM(COALESCE(Q3KG,0)),0) AS Q3KG,COALESCE(SUM(COALESCE(Q4KG,0)),0) AS Q4KG,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q1SQMTR ELSE 0 END,0)),0) AS Q1SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q2SQMTR ELSE 0 END,0)),0) AS Q2SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q3SQMTR ELSE 0 END,0)),0) AS Q3SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q3SQMTR ELSE 0 END,0)),0) AS Q4SQMTR,"
                    + "COALESCE(SUM(COALESCE(Q1NET_AMOUNT,0)),0)/100000 AS Q1AMOUNT,"
                    + "COALESCE(SUM(COALESCE(Q2NET_AMOUNT,0)),0)/100000 AS Q2AMOUNT,"
                    + "COALESCE(SUM(COALESCE(Q3NET_AMOUNT,0)),0)/100000 AS Q3AMOUNT,"
                    + "COALESCE(SUM(COALESCE(Q4NET_AMOUNT,0)),0)/100000 AS Q4AMOUNT,"
                    + "PARTY_STATUS "
                    + "FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE DOC_NO LIKE 'BU%' " + cndpcd + " AND QUALITY_NO LIKE '6%' "
                    + "GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT 'Budgeted-SDF' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(Q1,0)),0) AS Q1,COALESCE(SUM(COALESCE(Q2,0)),0) AS Q2,"
                    + "COALESCE(SUM(COALESCE(Q3,0)),0) AS Q3,COALESCE(SUM(COALESCE(Q4,0)),0) AS Q4,"
                    + "COALESCE(SUM(COALESCE(Q1KG,0)),0) AS Q1KG,COALESCE(SUM(COALESCE(Q2KG,0)),0) AS Q2KG,"
                    + "COALESCE(SUM(COALESCE(Q3KG,0)),0) AS Q3KG,COALESCE(SUM(COALESCE(Q4KG,0)),0) AS Q4KG,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q1SQMTR ELSE 0 END,0)),0) AS Q1SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q2SQMTR ELSE 0 END,0)),0) AS Q2SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q3SQMTR ELSE 0 END,0)),0) AS Q3SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q3SQMTR ELSE 0 END,0)),0) AS Q4SQMTR,"
                    + "COALESCE(SUM(COALESCE(Q1NET_AMOUNT,0)),0)/100000 AS Q1AMOUNT,"
                    + "COALESCE(SUM(COALESCE(Q2NET_AMOUNT,0)),0)/100000 AS Q2AMOUNT,"
                    + "COALESCE(SUM(COALESCE(Q3NET_AMOUNT,0)),0)/100000 AS Q3AMOUNT,"
                    + "COALESCE(SUM(COALESCE(Q4NET_AMOUNT,0)),0)/100000 AS Q4AMOUNT,"
                    + "PARTY_STATUS "
                    + "FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE DOC_NO LIKE 'BU%' " + cndpcd + " AND QUALITY_NO LIKE '729%' "
                    + "GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT 'Budgeted-HDS' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(Q1,0)),0) AS Q1,COALESCE(SUM(COALESCE(Q2,0)),0) AS Q2,"
                    + "COALESCE(SUM(COALESCE(Q3,0)),0) AS Q3,COALESCE(SUM(COALESCE(Q4,0)),0) AS Q4,"
                    + "COALESCE(SUM(COALESCE(Q1KG,0)),0) AS Q1KG,COALESCE(SUM(COALESCE(Q2KG,0)),0) AS Q2KG,"
                    + "COALESCE(SUM(COALESCE(Q3KG,0)),0) AS Q3KG,COALESCE(SUM(COALESCE(Q4KG,0)),0) AS Q4KG,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q1SQMTR ELSE 0 END,0)),0) AS Q1SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q2SQMTR ELSE 0 END,0)),0) AS Q2SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q3SQMTR ELSE 0 END,0)),0) AS Q3SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q3SQMTR ELSE 0 END,0)),0) AS Q4SQMTR,"
                    + "COALESCE(SUM(COALESCE(Q1NET_AMOUNT,0)),0)/100000 AS Q1AMOUNT,"
                    + "COALESCE(SUM(COALESCE(Q2NET_AMOUNT,0)),0)/100000 AS Q2AMOUNT,"
                    + "COALESCE(SUM(COALESCE(Q3NET_AMOUNT,0)),0)/100000 AS Q3AMOUNT,"
                    + "COALESCE(SUM(COALESCE(Q4NET_AMOUNT,0)),0)/100000 AS Q4AMOUNT,"
                    + "PARTY_STATUS "
                    + "FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE DOC_NO LIKE 'BU%' " + cndpcd + " AND QUALITY_NO NOT LIKE '729%' AND QUALITY_NO LIKE '7%' "
                    + "GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT 'Budgeted-TOTAL' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(Q1,0)),0) AS Q1,COALESCE(SUM(COALESCE(Q2,0)),0) AS Q2,"
                    + "COALESCE(SUM(COALESCE(Q3,0)),0) AS Q3,COALESCE(SUM(COALESCE(Q4,0)),0) AS Q4,"
                    + "COALESCE(SUM(COALESCE(Q1KG,0)),0) AS Q1KG,COALESCE(SUM(COALESCE(Q2KG,0)),0) AS Q2KG,"
                    + "COALESCE(SUM(COALESCE(Q3KG,0)),0) AS Q3KG,COALESCE(SUM(COALESCE(Q4KG,0)),0) AS Q4KG,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q1SQMTR ELSE 0 END,0)),0) AS Q1SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q2SQMTR ELSE 0 END,0)),0) AS Q2SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q3SQMTR ELSE 0 END,0)),0) AS Q3SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q3SQMTR ELSE 0 END,0)),0) AS Q4SQMTR,"
                    + "COALESCE(SUM(COALESCE(Q1NET_AMOUNT,0)),0)/100000 AS Q1AMOUNT,"
                    + "COALESCE(SUM(COALESCE(Q2NET_AMOUNT,0)),0)/100000 AS Q2AMOUNT,"
                    + "COALESCE(SUM(COALESCE(Q3NET_AMOUNT,0)),0)/100000 AS Q3AMOUNT,"
                    + "COALESCE(SUM(COALESCE(Q4NET_AMOUNT,0)),0)/100000 AS Q4AMOUNT,"
                    + "PARTY_STATUS "
                    + "FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE DOC_NO LIKE 'BU%' " + cndpcd + " "
                    + "GROUP BY PARTY_CODE";
        }
        if (mquater.equalsIgnoreCase("UPGRADE")) {
            sql = "SELECT DESCRIPTION,PARTY_CODE,PARTY_NAME,SUM(Q1NOS) AS Q1,SUM(Q2NOS) AS Q2,SUM(Q3NOS) AS Q3,SUM(Q4NOS) AS Q4,"
                    + "SUM(Q1DIFFKG) AS Q1KG,SUM(Q2DIFFKG) AS Q2KG,SUM(Q3DIFFKG) AS Q3KG,SUM(Q4DIFFKG) AS Q4KG,"
                    + "SUM(Q1DIFFSQMTR) AS Q1SQMTR,SUM(Q2DIFFSQMTR) AS Q2SQMTR,SUM(Q3DIFFSQMTR) AS Q3SQMTR,SUM(Q4DIFFSQMTR) AS Q4SQMTR,"
                    + "SUM(Q1DIFFAMOUNT) AS Q1AMOUNT,SUM(Q2DIFFAMOUNT) AS Q2AMOUNT,SUM(Q3DIFFAMOUNT) AS Q3AMOUNT,SUM(Q4DIFFAMOUNT) AS Q4AMOUNT,"
                    + "PARTY_STATUS "
                    + "FROM "
                    + "(SELECT 'Upgrade-PRESS' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,SUM(Q1TOTAL)-SUM(Q1NTOTAL) AS Q1NOS,SUM(Q2TOTAL)-SUM(Q2NTOTAL) AS Q2NOS,SUM(Q3TOTAL)-SUM(Q3NTOTAL) AS Q3NOS,SUM(Q4TOTAL)-SUM(Q4NTOTAL) AS Q4NOS,"
                    + "SUM(Q1KG)-SUM(Q1NKG) AS Q1DIFFKG,SUM(Q2KG)-SUM(Q2NKG) AS Q2DIFFKG,SUM(Q3KG)-SUM(Q3NKG) AS Q3DIFFKG,SUM(Q4KG)-SUM(Q4NKG) AS Q4DIFFKG,"
                    + "SUM(Q1SQMTR)-SUM(Q1NSQMTR) AS Q1DIFFSQMTR,SUM(Q2SQMTR)-SUM(Q2NSQMTR) AS Q2DIFFSQMTR,SUM(Q3SQMTR)-SUM(Q3NSQMTR) AS Q3DIFFSQMTR,SUM(Q4SQMTR)-SUM(Q4NSQMTR) AS Q4DIFFSQMTR,"
                    + "(SUM(Q1AMOUNT)-SUM(Q1NAMOUNT))/100000 AS Q1DIFFAMOUNT,(SUM(Q2AMOUNT)-SUM(Q2NAMOUNT))/100000 AS Q2DIFFAMOUNT,"
                    + "(SUM(Q3AMOUNT)-SUM(Q3NAMOUNT))/100000 AS Q3DIFFAMOUNT,(SUM(Q4AMOUNT)-SUM(Q4NAMOUNT))/100000 AS Q4DIFFAMOUNT,"
                    + "PARTY_STATUS "
                    + "FROM "
                    + "(SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,SUM(A.Q1) AS Q1NTOTAL,SUM(A.Q2) AS Q2NTOTAL,SUM(A.Q3) AS Q3NTOTAL,SUM(A.Q4) AS Q4NTOTAL,"
                    + "SUM(B.Q1) AS Q1TOTAL,SUM(B.Q2) AS Q2TOTAL,SUM(B.Q3) AS Q3TOTAL,SUM(B.Q4) AS Q4TOTAL,"
                    + "SUM(A.Q1KG) AS Q1NKG,SUM(A.Q2KG) AS Q2NKG,SUM(A.Q3KG) AS Q3NKG,SUM(A.Q4KG) AS Q4NKG,"
                    + "SUM(B.Q1KG) AS Q1KG,SUM(B.Q2KG) AS Q2KG,SUM(B.Q3KG) AS Q3KG,SUM(B.Q4KG) AS Q4KG,"
                    + "CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q1SQMTR) ELSE 0 END AS Q1NSQMTR,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q2SQMTR) ELSE 0 END AS Q2NSQMTR,"
                    + "CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q3SQMTR) ELSE 0 END AS Q3NSQMTR,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q4SQMTR) ELSE 0 END AS Q4NSQMTR,"
                    + "CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q1SQMTR) ELSE 0 END AS Q1SQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q2SQMTR) ELSE 0 END AS Q2SQMTR,"
                    + "CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q3SQMTR) ELSE 0 END AS Q3SQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q4SQMTR) ELSE 0 END AS Q4SQMTR,"
                    + "SUM(A.Q1NET_AMOUNT) AS Q1NAMOUNT,SUM(A.Q2NET_AMOUNT) AS Q2NAMOUNT,SUM(A.Q3NET_AMOUNT) AS Q3NAMOUNT,SUM(A.Q4NET_AMOUNT) AS Q4NAMOUNT,"
                    + "SUM(B.Q1NET_AMOUNT) AS Q1AMOUNT,SUM(B.Q2NET_AMOUNT) AS Q2AMOUNT,SUM(B.Q3NET_AMOUNT) AS Q3AMOUNT,SUM(B.Q4NET_AMOUNT) AS Q4AMOUNT,"
                    + "A.PARTY_STATUS "
                    + "FROM (SELECT * FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + " AND QUALITY_NO NOT LIKE '7%' AND QUALITY_NO NOT LIKE '6%' ) AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO NOT LIKE '7%' " + cndpcd + " AND QUALITY_NO NOT LIKE '6%') AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + " GROUP BY PARTY_CODE) AS C "
                    + "WHERE (Q1TOTAL>Q1NTOTAL OR Q2TOTAL>Q2NTOTAL OR Q3TOTAL>Q3NTOTAL OR Q4TOTAL>Q4NTOTAL)  "
                    + "GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT 'Upgrade-PRESS' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(Q1,0)),0) AS Q1NOS,COALESCE(SUM(COALESCE(Q2,0)),0) AS Q2NOS,COALESCE(SUM(COALESCE(Q3,0)),0) AS Q3NOS,COALESCE(SUM(COALESCE(Q4,0)),0) AS Q4NOS,"
                    + "COALESCE(SUM(COALESCE(Q1KG,0)),0) AS Q1KG,COALESCE(SUM(COALESCE(Q2KG,0)),0) AS Q2KG,COALESCE(SUM(COALESCE(Q3KG,0)),0) AS Q3KG,COALESCE(SUM(COALESCE(Q4KG,0)),0) AS Q4KG,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q1SQMTR ELSE 0 END,0)),0) AS Q1SQMTR,COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q2SQMTR ELSE 0 END,0)),0) AS Q2SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q3SQMTR ELSE 0 END,0)),0) AS Q3SQMTR,COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q4SQMTR ELSE 0 END,0)),0) AS Q4SQMTR,"
                    + "COALESCE(SUM(COALESCE(Q1NET_AMOUNT,0)),0)/100000 AS Q1AMOUNT,COALESCE(SUM(COALESCE(Q2NET_AMOUNT,0)),0)/100000 AS Q2AMOUNT,"
                    + "COALESCE(SUM(COALESCE(Q3NET_AMOUNT,0)),0)/100000 AS Q3AMOUNT,COALESCE(SUM(COALESCE(Q4NET_AMOUNT,0)),0)/100000 AS Q4AMOUNT,"
                    + "GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + "FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) NOT IN ( "
                    + "SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + ") " + cndpcd + " AND QUALITY_NO NOT LIKE '7%' AND QUALITY_NO NOT LIKE '6%' GROUP BY PARTY_CODE) AS AA "
                    + " GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT DESCRIPTION,PARTY_CODE,PARTY_NAME,SUM(Q1NOS) AS Q1NOS,SUM(Q2NOS) AS Q2NOS,SUM(Q3NOS) AS Q3NOS,SUM(Q4NOS) AS Q4NOS,"
                    + "SUM(Q1DIFFKG) AS Q1KG,SUM(Q2DIFFKG) AS Q2KG,SUM(Q3DIFFKG) AS Q3KG,SUM(Q4DIFFKG) AS Q4KG,"
                    + "SUM(Q1DIFFSQMTR) AS Q1SQMTR,SUM(Q2DIFFSQMTR) AS Q2SQMTR,SUM(Q3DIFFSQMTR) AS Q3SQMTR,SUM(Q4DIFFSQMTR) AS Q4SQMTR,"
                    + "SUM(Q1DIFFAMOUNT) AS Q1AMOUNT,SUM(Q2DIFFAMOUNT) AS Q2AMOUNT,SUM(Q3DIFFAMOUNT) AS Q3AMOUNT,SUM(Q4DIFFAMOUNT) AS Q4AMOUNT,"
                    + "GROUP_CONCAT(DISTINCT PARTY_STATUS)  "
                    + "FROM "
                    + "(SELECT 'Upgrade-ACNE' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,SUM(Q1TOTAL)-SUM(Q1NTOTAL) AS Q1NOS,SUM(Q2TOTAL)-SUM(Q2NTOTAL) AS Q2NOS,SUM(Q3TOTAL)-SUM(Q3NTOTAL) AS Q3NOS,SUM(Q4TOTAL)-SUM(Q4NTOTAL) AS Q4NOS,"
                    + "SUM(Q1KG)-SUM(Q1NKG) AS Q1DIFFKG,SUM(Q2KG)-SUM(Q2NKG) AS Q2DIFFKG,SUM(Q3KG)-SUM(Q3NKG) AS Q3DIFFKG,SUM(Q4KG)-SUM(Q4NKG) AS Q4DIFFKG,"
                    + "SUM(Q1SQMTR)-SUM(Q1NSQMTR) AS Q1DIFFSQMTR,SUM(Q2SQMTR)-SUM(Q2NSQMTR) AS Q2DIFFSQMTR,SUM(Q3SQMTR)-SUM(Q3NSQMTR) AS Q3DIFFSQMTR,SUM(Q4SQMTR)-SUM(Q4NSQMTR) AS Q4DIFFSQMTR,"
                    + "(SUM(Q1AMOUNT)-SUM(Q1NAMOUNT))/100000 AS Q1DIFFAMOUNT,(SUM(Q2AMOUNT)-SUM(Q2NAMOUNT))/100000 AS Q2DIFFAMOUNT,"
                    + "(SUM(Q3AMOUNT)-SUM(Q3NAMOUNT))/100000 AS Q3DIFFAMOUNT,(SUM(Q4AMOUNT)-SUM(Q4NAMOUNT))/100000 AS Q4DIFFAMOUNT,"
                    + "PARTY_STATUS "
                    + "FROM "
                    + "(SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,SUM(A.Q1) AS Q1NTOTAL,SUM(A.Q2) AS Q2NTOTAL,SUM(A.Q3) AS Q3NTOTAL,SUM(A.Q4) AS Q4NTOTAL,"
                    + "SUM(B.Q1) AS Q1TOTAL,SUM(B.Q2) AS Q2TOTAL,SUM(B.Q3) AS Q3TOTAL,SUM(B.Q4) AS Q4TOTAL,"
                    + "SUM(A.Q1KG) AS Q1NKG,SUM(A.Q2KG) AS Q2NKG,SUM(A.Q3KG) AS Q3NKG,SUM(A.Q4KG) AS Q4NKG,"
                    + "SUM(B.Q1KG) AS Q1KG,SUM(B.Q2KG) AS Q2KG,SUM(B.Q3KG) AS Q3KG,SUM(B.Q4KG) AS Q4KG,"
                    + "CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q1SQMTR) ELSE 0 END AS Q1NSQMTR,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q2SQMTR) ELSE 0 END AS Q2NSQMTR,"
                    + "CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q3SQMTR) ELSE 0 END AS Q3NSQMTR,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q4SQMTR) ELSE 0 END AS Q4NSQMTR,"
                    + "CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q1SQMTR) ELSE 0 END AS Q1SQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q2SQMTR) ELSE 0 END AS Q2SQMTR,"
                    + "CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q3SQMTR) ELSE 0 END AS Q3SQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q4SQMTR) ELSE 0 END AS Q4SQMTR,"
                    + "SUM(A.Q1NET_AMOUNT) AS Q1NAMOUNT,SUM(A.Q2NET_AMOUNT) AS Q2NAMOUNT,SUM(A.Q3NET_AMOUNT) AS Q3NAMOUNT,SUM(A.Q4NET_AMOUNT) AS Q4NAMOUNT,"
                    + "SUM(B.Q1NET_AMOUNT) AS Q1AMOUNT,SUM(B.Q2NET_AMOUNT) AS Q2AMOUNT,SUM(B.Q3NET_AMOUNT) AS Q3AMOUNT,SUM(B.Q4NET_AMOUNT) AS Q4AMOUNT,"
                    + "A.PARTY_STATUS "
                    + "FROM (SELECT * FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + " AND QUALITY_NO LIKE '6%' ) AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO LIKE '6%' " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + " GROUP BY PARTY_CODE) AS C "
                    + "WHERE (Q1TOTAL>Q1NTOTAL OR Q2TOTAL>Q2NTOTAL OR Q3TOTAL>Q3NTOTAL OR Q4TOTAL>Q4NTOTAL)  "
                    + " GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT 'Upgrade-ACNE' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(Q1,0)),0) AS Q1NOS,COALESCE(SUM(COALESCE(Q2,0)),0) AS Q2NOS,COALESCE(SUM(COALESCE(Q3,0)),0) AS Q3NOS,COALESCE(SUM(COALESCE(Q4,0)),0) AS Q4NOS,"
                    + "COALESCE(SUM(COALESCE(Q1KG,0)),0) AS Q1KG,COALESCE(SUM(COALESCE(Q2KG,0)),0) AS Q2KG,COALESCE(SUM(COALESCE(Q3KG,0)),0) AS Q3KG,COALESCE(SUM(COALESCE(Q4KG,0)),0) AS Q4KG,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q1SQMTR ELSE 0 END,0)),0) AS Q1SQMTR,COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q2SQMTR ELSE 0 END,0)),0) AS Q2SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q3SQMTR ELSE 0 END,0)),0) AS Q3SQMTR,COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q4SQMTR ELSE 0 END,0)),0) AS Q4SQMTR,"
                    + "COALESCE(SUM(COALESCE(Q1NET_AMOUNT,0)),0)/100000 AS Q1AMOUNT,COALESCE(SUM(COALESCE(Q2NET_AMOUNT,0)),0)/100000 AS Q2AMOUNT,"
                    + "COALESCE(SUM(COALESCE(Q3NET_AMOUNT,0)),0)/100000 AS Q3AMOUNT,COALESCE(SUM(COALESCE(Q4NET_AMOUNT,0)),0)/100000 AS Q4AMOUNT,"
                    + "GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + "FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) NOT IN ( "
                    + "SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + ") " + cndpcd + " AND QUALITY_NO LIKE '6%'  GROUP BY PARTY_CODE) AS AA "
                    + " GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT DESCRIPTION,PARTY_CODE,PARTY_NAME,SUM(Q1NOS) AS Q1NOS,SUM(Q2NOS) AS Q2NOS,SUM(Q3NOS) AS Q3NOS,SUM(Q4NOS) AS Q4NOS,"
                    + "SUM(Q1DIFFKG) AS Q1KG,SUM(Q2DIFFKG) AS Q2KG,SUM(Q3DIFFKG) AS Q3KG,SUM(Q4DIFFKG) AS Q4KG,"
                    + "SUM(Q1DIFFSQMTR) AS Q1SQMTR,SUM(Q2DIFFSQMTR) AS Q2SQMTR,SUM(Q3DIFFSQMTR) AS Q3SQMTR,SUM(Q4DIFFSQMTR) AS Q4SQMTR,"
                    + "SUM(Q1DIFFAMOUNT) AS Q1AMOUNT,SUM(Q2DIFFAMOUNT) AS Q2AMOUNT,SUM(Q3DIFFAMOUNT) AS Q3AMOUNT,SUM(Q4DIFFAMOUNT) AS Q4AMOUNT,"
                    + "GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + "FROM "
                    + "(SELECT 'Upgrade-SDF' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,SUM(Q1TOTAL)-SUM(Q1NTOTAL) AS Q1NOS,SUM(Q2TOTAL)-SUM(Q2NTOTAL) AS Q2NOS,SUM(Q3TOTAL)-SUM(Q3NTOTAL) AS Q3NOS,SUM(Q4TOTAL)-SUM(Q4NTOTAL) AS Q4NOS,"
                    + "SUM(Q1KG)-SUM(Q1NKG) AS Q1DIFFKG,SUM(Q2KG)-SUM(Q2NKG) AS Q2DIFFKG,SUM(Q3KG)-SUM(Q3NKG) AS Q3DIFFKG,SUM(Q4KG)-SUM(Q4NKG) AS Q4DIFFKG,"
                    + "SUM(Q1SQMTR)-SUM(Q1NSQMTR) AS Q1DIFFSQMTR,SUM(Q2SQMTR)-SUM(Q2NSQMTR) AS Q2DIFFSQMTR,SUM(Q3SQMTR)-SUM(Q3NSQMTR) AS Q3DIFFSQMTR,SUM(Q4SQMTR)-SUM(Q4NSQMTR) AS Q4DIFFSQMTR,"
                    + "(SUM(Q1AMOUNT)-SUM(Q1NAMOUNT))/100000 AS Q1DIFFAMOUNT,(SUM(Q2AMOUNT)-SUM(Q2NAMOUNT))/100000 AS Q2DIFFAMOUNT,"
                    + "(SUM(Q3AMOUNT)-SUM(Q3NAMOUNT))/100000 AS Q3DIFFAMOUNT,(SUM(Q4AMOUNT)-SUM(Q4NAMOUNT))/100000 AS Q4DIFFAMOUNT,"
                    + "PARTY_STATUS "
                    + "FROM "
                    + "(SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,SUM(A.Q1) AS Q1NTOTAL,SUM(A.Q2) AS Q2NTOTAL,SUM(A.Q3) AS Q3NTOTAL,SUM(A.Q4) AS Q4NTOTAL,"
                    + "SUM(B.Q1) AS Q1TOTAL,SUM(B.Q2) AS Q2TOTAL,SUM(B.Q3) AS Q3TOTAL,SUM(B.Q4) AS Q4TOTAL,"
                    + "SUM(A.Q1KG) AS Q1NKG,SUM(A.Q2KG) AS Q2NKG,SUM(A.Q3KG) AS Q3NKG,SUM(A.Q4KG) AS Q4NKG,"
                    + "SUM(B.Q1KG) AS Q1KG,SUM(B.Q2KG) AS Q2KG,SUM(B.Q3KG) AS Q3KG,SUM(B.Q4KG) AS Q4KG,"
                    + "CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q1SQMTR) ELSE 0 END AS Q1NSQMTR,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q2SQMTR) ELSE 0 END AS Q2NSQMTR,"
                    + "CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q3SQMTR) ELSE 0 END AS Q3NSQMTR,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q4SQMTR) ELSE 0 END AS Q4NSQMTR,"
                    + "CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q1SQMTR) ELSE 0 END AS Q1SQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q2SQMTR) ELSE 0 END AS Q2SQMTR,"
                    + "CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q3SQMTR) ELSE 0 END AS Q3SQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q4SQMTR) ELSE 0 END AS Q4SQMTR,"
                    + "SUM(A.Q1NET_AMOUNT) AS Q1NAMOUNT,SUM(A.Q2NET_AMOUNT) AS Q2NAMOUNT,SUM(A.Q3NET_AMOUNT) AS Q3NAMOUNT,SUM(A.Q4NET_AMOUNT) AS Q4NAMOUNT,"
                    + "SUM(B.Q1NET_AMOUNT) AS Q1AMOUNT,SUM(B.Q2NET_AMOUNT) AS Q2AMOUNT,SUM(B.Q3NET_AMOUNT) AS Q3AMOUNT,SUM(B.Q4NET_AMOUNT) AS Q4AMOUNT,"
                    + "A.PARTY_STATUS "
                    + "FROM (SELECT * FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + " AND QUALITY_NO LIKE '729%'  ) AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO LIKE '729%' " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + " GROUP BY PARTY_CODE) AS C "
                    + "WHERE (Q1TOTAL>Q1NTOTAL OR Q2TOTAL>Q2NTOTAL OR Q3TOTAL>Q3NTOTAL OR Q4TOTAL>Q4NTOTAL)  "
                    + " GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT 'Upgrade-SDF' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(Q1,0)),0) AS Q1NOS,COALESCE(SUM(COALESCE(Q2,0)),0) AS Q2NOS,COALESCE(SUM(COALESCE(Q3,0)),0) AS Q3NOS,COALESCE(SUM(COALESCE(Q4,0)),0) AS Q4NOS,"
                    + "COALESCE(SUM(COALESCE(Q1KG,0)),0) AS Q1KG,COALESCE(SUM(COALESCE(Q2KG,0)),0) AS Q2KG,COALESCE(SUM(COALESCE(Q3KG,0)),0) AS Q3KG,COALESCE(SUM(COALESCE(Q4KG,0)),0) AS Q4KG,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q1SQMTR ELSE 0 END,0)),0) AS Q1SQMTR,COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q2SQMTR ELSE 0 END,0)),0) AS Q2SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q3SQMTR ELSE 0 END,0)),0) AS Q3SQMTR,COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q4SQMTR ELSE 0 END,0)),0) AS Q4SQMTR,"
                    + "COALESCE(SUM(COALESCE(Q1NET_AMOUNT,0)),0)/100000 AS Q1AMOUNT,COALESCE(SUM(COALESCE(Q2NET_AMOUNT,0)),0)/100000 AS Q2AMOUNT,"
                    + "COALESCE(SUM(COALESCE(Q3NET_AMOUNT,0)),0)/100000 AS Q3AMOUNT,COALESCE(SUM(COALESCE(Q4NET_AMOUNT,0)),0)/100000 AS Q4AMOUNT,"
                    + "GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + "FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) NOT IN ( "
                    + "SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + ") " + cndpcd + " AND QUALITY_NO LIKE '729%'  GROUP BY PARTY_CODE) AS AA "
                    + " GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT DESCRIPTION,PARTY_CODE,PARTY_NAME,SUM(Q1NOS) AS Q1NOS,SUM(Q2NOS) AS Q2NOS,SUM(Q3NOS) AS Q3NOS,SUM(Q4NOS) AS Q4NOS,"
                    + "SUM(Q1DIFFKG) AS Q1KG,SUM(Q2DIFFKG) AS Q2KG,SUM(Q3DIFFKG) AS Q3KG,SUM(Q4DIFFKG) AS Q4KG,"
                    + "SUM(Q1DIFFSQMTR) AS Q1SQMTR,SUM(Q2DIFFSQMTR) AS Q2SQMTR,SUM(Q3DIFFSQMTR) AS Q3SQMTR,SUM(Q4DIFFSQMTR) AS Q4SQMTR,"
                    + "SUM(Q1DIFFAMOUNT) AS Q1AMOUNT,SUM(Q2DIFFAMOUNT) AS Q2AMOUNT,SUM(Q3DIFFAMOUNT) AS Q3AMOUNT,SUM(Q4DIFFAMOUNT) AS Q4AMOUNT,"
                    + "GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + "FROM "
                    + "(SELECT 'Upgrade-HDS' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,SUM(Q1TOTAL)-SUM(Q1NTOTAL) AS Q1NOS,SUM(Q2TOTAL)-SUM(Q2NTOTAL) AS Q2NOS,SUM(Q3TOTAL)-SUM(Q3NTOTAL) AS Q3NOS,SUM(Q4TOTAL)-SUM(Q4NTOTAL) AS Q4NOS,"
                    + "SUM(Q1KG)-SUM(Q1NKG) AS Q1DIFFKG,SUM(Q2KG)-SUM(Q2NKG) AS Q2DIFFKG,SUM(Q3KG)-SUM(Q3NKG) AS Q3DIFFKG,SUM(Q4KG)-SUM(Q4NKG) AS Q4DIFFKG,"
                    + "SUM(Q1SQMTR)-SUM(Q1NSQMTR) AS Q1DIFFSQMTR,SUM(Q2SQMTR)-SUM(Q2NSQMTR) AS Q2DIFFSQMTR,SUM(Q3SQMTR)-SUM(Q3NSQMTR) AS Q3DIFFSQMTR,SUM(Q4SQMTR)-SUM(Q4NSQMTR) AS Q4DIFFSQMTR,"
                    + "(SUM(Q1AMOUNT)-SUM(Q1NAMOUNT))/100000 AS Q1DIFFAMOUNT,(SUM(Q2AMOUNT)-SUM(Q2NAMOUNT))/100000 AS Q2DIFFAMOUNT,"
                    + "(SUM(Q3AMOUNT)-SUM(Q3NAMOUNT))/100000 AS Q3DIFFAMOUNT,(SUM(Q4AMOUNT)-SUM(Q4NAMOUNT))/100000 AS Q4DIFFAMOUNT,"
                    + "PARTY_STATUS "
                    + "FROM "
                    + "(SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,SUM(A.Q1) AS Q1NTOTAL,SUM(A.Q2) AS Q2NTOTAL,SUM(A.Q3) AS Q3NTOTAL,SUM(A.Q4) AS Q4NTOTAL,"
                    + "SUM(B.Q1) AS Q1TOTAL,SUM(B.Q2) AS Q2TOTAL,SUM(B.Q3) AS Q3TOTAL,SUM(B.Q4) AS Q4TOTAL,"
                    + "SUM(A.Q1KG) AS Q1NKG,SUM(A.Q2KG) AS Q2NKG,SUM(A.Q3KG) AS Q3NKG,SUM(A.Q4KG) AS Q4NKG,"
                    + "SUM(B.Q1KG) AS Q1KG,SUM(B.Q2KG) AS Q2KG,SUM(B.Q3KG) AS Q3KG,SUM(B.Q4KG) AS Q4KG,"
                    + "CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q1SQMTR) ELSE 0 END AS Q1NSQMTR,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q2SQMTR) ELSE 0 END AS Q2NSQMTR,"
                    + "CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q3SQMTR) ELSE 0 END AS Q3NSQMTR,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q4SQMTR) ELSE 0 END AS Q4NSQMTR,"
                    + "CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q1SQMTR) ELSE 0 END AS Q1SQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q2SQMTR) ELSE 0 END AS Q2SQMTR,"
                    + "CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q3SQMTR) ELSE 0 END AS Q3SQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q4SQMTR) ELSE 0 END AS Q4SQMTR,"
                    + "SUM(A.Q1NET_AMOUNT) AS Q1NAMOUNT,SUM(A.Q2NET_AMOUNT) AS Q2NAMOUNT,SUM(A.Q3NET_AMOUNT) AS Q3NAMOUNT,SUM(A.Q4NET_AMOUNT) AS Q4NAMOUNT,"
                    + "SUM(B.Q1NET_AMOUNT) AS Q1AMOUNT,SUM(B.Q2NET_AMOUNT) AS Q2AMOUNT,SUM(B.Q3NET_AMOUNT) AS Q3AMOUNT,SUM(B.Q4NET_AMOUNT) AS Q4AMOUNT,"
                    + "A.PARTY_STATUS "
                    + "FROM (SELECT * FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + " AND QUALITY_NO NOT LIKE '729%' AND QUALITY_NO LIKE '7%'  ) AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO NOT LIKE '729%' AND QUALITY_NO LIKE '7%' " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + " GROUP BY PARTY_CODE) AS C "
                    + "WHERE (Q1TOTAL>Q1NTOTAL OR Q2TOTAL>Q2NTOTAL OR Q3TOTAL>Q3NTOTAL OR Q4TOTAL>Q4NTOTAL)  "
                    + " GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT 'Upgrade-HDS' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(Q1,0)),0) AS Q1NOS,COALESCE(SUM(COALESCE(Q2,0)),0) AS Q2NOS,COALESCE(SUM(COALESCE(Q3,0)),0) AS Q3NOS,COALESCE(SUM(COALESCE(Q4,0)),0) AS Q4NOS,"
                    + "COALESCE(SUM(COALESCE(Q1KG,0)),0) AS Q1KG,COALESCE(SUM(COALESCE(Q2KG,0)),0) AS Q2KG,COALESCE(SUM(COALESCE(Q3KG,0)),0) AS Q3KG,COALESCE(SUM(COALESCE(Q4KG,0)),0) AS Q4KG,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q1SQMTR ELSE 0 END,0)),0) AS Q1SQMTR,COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q2SQMTR ELSE 0 END,0)),0) AS Q2SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q3SQMTR ELSE 0 END,0)),0) AS Q3SQMTR,COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q4SQMTR ELSE 0 END,0)),0) AS Q4SQMTR,"
                    + "COALESCE(SUM(COALESCE(Q1NET_AMOUNT,0)),0)/100000 AS Q1AMOUNT,COALESCE(SUM(COALESCE(Q2NET_AMOUNT,0)),0)/100000 AS Q2AMOUNT,"
                    + "COALESCE(SUM(COALESCE(Q3NET_AMOUNT,0)),0)/100000 AS Q3AMOUNT,COALESCE(SUM(COALESCE(Q4NET_AMOUNT,0)),0)/100000 AS Q4AMOUNT,"
                    + "GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + "FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) NOT IN ( "
                    + "SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + ") " + cndpcd + " AND QUALITY_NO NOT LIKE '729%' AND QUALITY_NO LIKE '7%'  GROUP BY PARTY_CODE) AS AA "
                    + " GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT DESCRIPTION,PARTY_CODE,PARTY_NAME,SUM(Q1NOS) AS Q1NOS,SUM(Q2NOS) AS Q2NOS,SUM(Q3NOS) AS Q3NOS,SUM(Q4NOS) AS Q4NOS,"
                    + "SUM(Q1DIFFKG) AS Q1KG,SUM(Q2DIFFKG) AS Q2KG,SUM(Q3DIFFKG) AS Q3KG,SUM(Q4DIFFKG) AS Q4KG,"
                    + "SUM(Q1DIFFSQMTR) AS Q1SQMTR,SUM(Q2DIFFSQMTR) AS Q2SQMTR,SUM(Q3DIFFSQMTR) AS Q3SQMTR,SUM(Q4DIFFSQMTR) AS Q4SQMTR,"
                    + "SUM(Q1DIFFAMOUNT) AS Q1AMOUNT,SUM(Q2DIFFAMOUNT) AS Q2AMOUNT,SUM(Q3DIFFAMOUNT) AS Q3AMOUNT,SUM(Q4DIFFAMOUNT) AS Q4AMOUNT,"
                    + "GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + "FROM "
                    + "(SELECT 'Upgrade-TOTAL' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,SUM(Q1TOTAL)-SUM(Q1NTOTAL) AS Q1NOS,SUM(Q2TOTAL)-SUM(Q2NTOTAL) AS Q2NOS,SUM(Q3TOTAL)-SUM(Q3NTOTAL) AS Q3NOS,SUM(Q4TOTAL)-SUM(Q4NTOTAL) AS Q4NOS,"
                    + "SUM(Q1KG)-SUM(Q1NKG) AS Q1DIFFKG,SUM(Q2KG)-SUM(Q2NKG) AS Q2DIFFKG,SUM(Q3KG)-SUM(Q3NKG) AS Q3DIFFKG,SUM(Q4KG)-SUM(Q4NKG) AS Q4DIFFKG,"
                    + "SUM(Q1SQMTR)-SUM(Q1NSQMTR) AS Q1DIFFSQMTR,SUM(Q2SQMTR)-SUM(Q2NSQMTR) AS Q2DIFFSQMTR,SUM(Q3SQMTR)-SUM(Q3NSQMTR) AS Q3DIFFSQMTR,SUM(Q4SQMTR)-SUM(Q4NSQMTR) AS Q4DIFFSQMTR,"
                    + "(SUM(Q1AMOUNT)-SUM(Q1NAMOUNT))/100000 AS Q1DIFFAMOUNT,(SUM(Q2AMOUNT)-SUM(Q2NAMOUNT))/100000 AS Q2DIFFAMOUNT,"
                    + "(SUM(Q3AMOUNT)-SUM(Q3NAMOUNT))/100000 AS Q3DIFFAMOUNT,(SUM(Q4AMOUNT)-SUM(Q4NAMOUNT))/100000 AS Q4DIFFAMOUNT,"
                    + "PARTY_STATUS "
                    + "FROM "
                    + "(SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,SUM(A.Q1) AS Q1NTOTAL,SUM(A.Q2) AS Q2NTOTAL,SUM(A.Q3) AS Q3NTOTAL,SUM(A.Q4) AS Q4NTOTAL,"
                    + "SUM(B.Q1) AS Q1TOTAL,SUM(B.Q2) AS Q2TOTAL,SUM(B.Q3) AS Q3TOTAL,SUM(B.Q4) AS Q4TOTAL,"
                    + "SUM(A.Q1KG) AS Q1NKG,SUM(A.Q2KG) AS Q2NKG,SUM(A.Q3KG) AS Q3NKG,SUM(A.Q4KG) AS Q4NKG,"
                    + "SUM(B.Q1KG) AS Q1KG,SUM(B.Q2KG) AS Q2KG,SUM(B.Q3KG) AS Q3KG,SUM(B.Q4KG) AS Q4KG,"
                    + "CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q1SQMTR) ELSE 0 END AS Q1NSQMTR,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q2SQMTR) ELSE 0 END AS Q2NSQMTR,"
                    + "CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q3SQMTR) ELSE 0 END AS Q3NSQMTR,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q4SQMTR) ELSE 0 END AS Q4NSQMTR,"
                    + "CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q1SQMTR) ELSE 0 END AS Q1SQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q2SQMTR) ELSE 0 END AS Q2SQMTR,"
                    + "CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q3SQMTR) ELSE 0 END AS Q3SQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q4SQMTR) ELSE 0 END AS Q4SQMTR,"
                    + "SUM(A.Q1NET_AMOUNT) AS Q1NAMOUNT,SUM(A.Q2NET_AMOUNT) AS Q2NAMOUNT,SUM(A.Q3NET_AMOUNT) AS Q3NAMOUNT,SUM(A.Q4NET_AMOUNT) AS Q4NAMOUNT,"
                    + "SUM(B.Q1NET_AMOUNT) AS Q1AMOUNT,SUM(B.Q2NET_AMOUNT) AS Q2AMOUNT,SUM(B.Q3NET_AMOUNT) AS Q3AMOUNT,SUM(B.Q4NET_AMOUNT) AS Q4AMOUNT,"
                    + "A.PARTY_STATUS "
                    + "FROM (SELECT * FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + "  ) AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE TOTAL>0 " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + " GROUP BY PARTY_CODE) AS C "
                    + "WHERE (Q1TOTAL>Q1NTOTAL OR Q2TOTAL>Q2NTOTAL OR Q3TOTAL>Q3NTOTAL OR Q4TOTAL>Q4NTOTAL)  "
                    + " GROUP BY PARTY_CODE "
                    + "UNION ALL "
                    + "SELECT 'Upgrade-TOTAL' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(Q1,0)),0) AS Q1NOS,COALESCE(SUM(COALESCE(Q2,0)),0) AS Q2NOS,COALESCE(SUM(COALESCE(Q3,0)),0) AS Q3NOS,COALESCE(SUM(COALESCE(Q4,0)),0) AS Q4NOS,"
                    + "COALESCE(SUM(COALESCE(Q1KG,0)),0) AS Q1KG,COALESCE(SUM(COALESCE(Q2KG,0)),0) AS Q2KG,COALESCE(SUM(COALESCE(Q3KG,0)),0) AS Q3KG,COALESCE(SUM(COALESCE(Q4KG,0)),0) AS Q4KG,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q1SQMTR ELSE 0 END,0)),0) AS Q1SQMTR,COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q2SQMTR ELSE 0 END,0)),0) AS Q2SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q3SQMTR ELSE 0 END,0)),0) AS Q3SQMTR,COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q4SQMTR ELSE 0 END,0)),0) AS Q4SQMTR,"
                    + "COALESCE(SUM(COALESCE(Q1NET_AMOUNT,0)),0)/100000 AS Q1AMOUNT,COALESCE(SUM(COALESCE(Q2NET_AMOUNT,0)),0)/100000 AS Q2AMOUNT,"
                    + "COALESCE(SUM(COALESCE(Q3NET_AMOUNT,0)),0)/100000 AS Q3AMOUNT,COALESCE(SUM(COALESCE(Q4NET_AMOUNT,0)),0)/100000 AS Q4AMOUNT,"
                    + "GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + "FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) NOT IN ( "
                    + "SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL "
                    + "WHERE  DOC_NO LIKE 'BU%' " + cndpcd + ") " + cndpcd + "  GROUP BY PARTY_CODE) AS AA "
                    + " GROUP BY PARTY_CODE";
        }
        if (mquater.equalsIgnoreCase("CLOSER")) {
            sql = "SELECT 'Closer -PRESS' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(Q1,0)),0)*-1 AS Q1,COALESCE(SUM(COALESCE(Q2,0)),0)*-1 AS Q2,COALESCE(SUM(COALESCE(Q3,0)),0)*-1 AS Q3,COALESCE(SUM(COALESCE(Q4,0)),0)*-1 AS Q4,"
                    + "COALESCE(SUM(COALESCE(Q1KG,0)),0)*-1 AS Q1KG,COALESCE(SUM(COALESCE(Q2KG,0)),0)*-1 AS Q2KG,COALESCE(SUM(COALESCE(Q3KG,0)),0)*-1 AS Q3KG,COALESCE(SUM(COALESCE(Q4KG,0)),0)*-1 AS Q4KG,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q1SQMTR ELSE 0 END,0)),0)*-1 AS Q1SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q2SQMTR ELSE 0 END,0)),0)*-1 AS Q2SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q3SQMTR ELSE 0 END,0)),0)*-1 AS Q3SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q4SQMTR ELSE 0 END,0)),0)*-1 AS Q4SQMTR,"
                    + "(COALESCE(SUM(COALESCE(Q1NET_AMOUNT,0)),0)*-1)/100000 AS Q1AMOUNT,"
                    + "(COALESCE(SUM(COALESCE(Q2NET_AMOUNT,0)),0)*-1)/100000 AS Q2AMOUNT,"
                    + "(COALESCE(SUM(COALESCE(Q3NET_AMOUNT,0)),0)*-1)/100000 AS Q3AMOUNT,"
                    + "(COALESCE(SUM(COALESCE(Q4NET_AMOUNT,0)),0)*-1)/100000 AS Q4AMOUNT,"
                    + "GROUP_CONCAT(DISTINCT PARTY_STATUS) AS PARTY_STATUS "
                    + " FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(MM_PARTY_CODE,RIGHT(MM_MACHINE_NO+100,2),RIGHT(MM_MACHINE_POSITION+100,2)) FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL "
                    + "WHERE POSITION_CLOSE_IND='1') AND QUALITY_NO NOT LIKE '7%' AND QUALITY_NO NOT LIKE '6%' " + cndpcd + "  "
                    + "GROUP BY PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'Closer -ACNE',PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(Q1,0)),0)*-1 AS Q1,COALESCE(SUM(COALESCE(Q2,0)),0)*-1 AS Q2,COALESCE(SUM(COALESCE(Q3,0)),0)*-1 AS Q3,COALESCE(SUM(COALESCE(Q4,0)),0)*-1 AS Q4,"
                    + "COALESCE(SUM(COALESCE(Q1KG,0)),0)*-1 AS Q1KG,COALESCE(SUM(COALESCE(Q2KG,0)),0)*-1 AS Q2KG,COALESCE(SUM(COALESCE(Q3KG,0)),0)*-1 AS Q3KG,COALESCE(SUM(COALESCE(Q4KG,0)),0)*-1 AS Q4KG,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q1SQMTR ELSE 0 END,0)),0)*-1 AS Q1SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q2SQMTR ELSE 0 END,0)),0)*-1 AS Q2SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q3SQMTR ELSE 0 END,0)),0)*-1 AS Q3SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q4SQMTR ELSE 0 END,0)),0)*-1 AS Q4SQMTR,"
                    + "(COALESCE(SUM(COALESCE(Q1NET_AMOUNT,0)),0)*-1)/100000 AS Q1AMOUNT,"
                    + "(COALESCE(SUM(COALESCE(Q2NET_AMOUNT,0)),0)*-1)/100000 AS Q2AMOUNT,"
                    + "(COALESCE(SUM(COALESCE(Q3NET_AMOUNT,0)),0)*-1)/100000 AS Q3AMOUNT,"
                    + "(COALESCE(SUM(COALESCE(Q4NET_AMOUNT,0)),0)*-1)/100000 AS Q4AMOUNT,"
                    + "GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + " FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(MM_PARTY_CODE,RIGHT(MM_MACHINE_NO+100,2),RIGHT(MM_MACHINE_POSITION+100,2)) FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL "
                    + "WHERE POSITION_CLOSE_IND='1') AND QUALITY_NO LIKE '6%' " + cndpcd + " "
                    + "GROUP BY PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'Closer -SDF',PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(Q1,0)),0)*-1 AS Q1,COALESCE(SUM(COALESCE(Q2,0)),0)*-1 AS Q2,COALESCE(SUM(COALESCE(Q3,0)),0)*-1 AS Q3,COALESCE(SUM(COALESCE(Q4,0)),0)*-1 AS Q4,"
                    + "COALESCE(SUM(COALESCE(Q1KG,0)),0)*-1 AS Q1KG,COALESCE(SUM(COALESCE(Q2KG,0)),0)*-1 AS Q2KG,COALESCE(SUM(COALESCE(Q3KG,0)),0)*-1 AS Q3KG,COALESCE(SUM(COALESCE(Q4KG,0)),0)*-1 AS Q4KG,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q1SQMTR ELSE 0 END,0)),0)*-1 AS Q1SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q2SQMTR ELSE 0 END,0)),0)*-1 AS Q2SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q3SQMTR ELSE 0 END,0)),0)*-1 AS Q3SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q4SQMTR ELSE 0 END,0)),0)*-1 AS Q4SQMTR,"
                    + "(COALESCE(SUM(COALESCE(Q1NET_AMOUNT,0)),0)*-1)/100000 AS Q1AMOUNT,"
                    + "(COALESCE(SUM(COALESCE(Q2NET_AMOUNT,0)),0)*-1)/100000 AS Q2AMOUNT,"
                    + "(COALESCE(SUM(COALESCE(Q3NET_AMOUNT,0)),0)*-1)/100000 AS Q3AMOUNT,"
                    + "(COALESCE(SUM(COALESCE(Q4NET_AMOUNT,0)),0)*-1)/100000 AS Q4AMOUNT,"
                    + "GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + " FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(MM_PARTY_CODE,RIGHT(MM_MACHINE_NO+100,2),RIGHT(MM_MACHINE_POSITION+100,2)) FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL "
                    + "WHERE POSITION_CLOSE_IND='1') AND QUALITY_NO LIKE '729%' " + cndpcd + " "
                    + "GROUP BY PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'Closer -HDS',PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(Q1,0)),0)*-1 AS Q1,COALESCE(SUM(COALESCE(Q2,0)),0)*-1 AS Q2,COALESCE(SUM(COALESCE(Q3,0)),0)*-1 AS Q3,COALESCE(SUM(COALESCE(Q4,0)),0)*-1 AS Q4,"
                    + "COALESCE(SUM(COALESCE(Q1KG,0)),0)*-1 AS Q1KG,COALESCE(SUM(COALESCE(Q2KG,0)),0)*-1 AS Q2KG,COALESCE(SUM(COALESCE(Q3KG,0)),0)*-1 AS Q3KG,COALESCE(SUM(COALESCE(Q4KG,0)),0)*-1 AS Q4KG,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q1SQMTR ELSE 0 END,0)),0)*-1 AS Q1SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q2SQMTR ELSE 0 END,0)),0)*-1 AS Q2SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q3SQMTR ELSE 0 END,0)),0)*-1 AS Q3SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q4SQMTR ELSE 0 END,0)),0)*-1 AS Q4SQMTR,"
                    + "(COALESCE(SUM(COALESCE(Q1NET_AMOUNT,0)),0)*-1)/100000 AS Q1AMOUNT,"
                    + "(COALESCE(SUM(COALESCE(Q2NET_AMOUNT,0)),0)*-1)/100000 AS Q2AMOUNT,"
                    + "(COALESCE(SUM(COALESCE(Q3NET_AMOUNT,0)),0)*-1)/100000 AS Q3AMOUNT,"
                    + "(COALESCE(SUM(COALESCE(Q4NET_AMOUNT,0)),0)*-1)/100000 AS Q4AMOUNT,"
                    + "GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + " FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(MM_PARTY_CODE,RIGHT(MM_MACHINE_NO+100,2),RIGHT(MM_MACHINE_POSITION+100,2)) FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL "
                    + "WHERE POSITION_CLOSE_IND='1') AND QUALITY_NO NOT LIKE '729%' AND QUALITY_NO LIKE '7%' " + cndpcd + "  "
                    + "GROUP BY PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'Closer -TOTAL',PARTY_CODE,PARTY_NAME,COALESCE(SUM(COALESCE(Q1,0)),0)*-1 AS Q1,COALESCE(SUM(COALESCE(Q2,0)),0)*-1 AS Q2,COALESCE(SUM(COALESCE(Q3,0)),0)*-1 AS Q3,COALESCE(SUM(COALESCE(Q4,0)),0)*-1 AS Q4,"
                    + "COALESCE(SUM(COALESCE(Q1KG,0)),0)*-1 AS Q1KG,COALESCE(SUM(COALESCE(Q2KG,0)),0)*-1 AS Q2KG,COALESCE(SUM(COALESCE(Q3KG,0)),0)*-1 AS Q3KG,COALESCE(SUM(COALESCE(Q4KG,0)),0)*-1 AS Q4KG,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q1SQMTR ELSE 0 END,0)),0)*-1 AS Q1SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q2SQMTR ELSE 0 END,0)),0)*-1 AS Q2SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q3SQMTR ELSE 0 END,0)),0)*-1 AS Q3SQMTR,"
                    + "COALESCE(SUM(COALESCE(CASE WHEN LEFT(QUALITY_NO,1)='7' THEN Q4SQMTR ELSE 0 END,0)),0)*-1 AS Q4SQMTR,"
                    + "(COALESCE(SUM(COALESCE(Q1NET_AMOUNT,0)),0)*-1)/100000 AS Q1AMOUNT,"
                    + "(COALESCE(SUM(COALESCE(Q2NET_AMOUNT,0)),0)*-1)/100000 AS Q2AMOUNT,"
                    + "(COALESCE(SUM(COALESCE(Q3NET_AMOUNT,0)),0)*-1)/100000 AS Q3AMOUNT,"
                    + "(COALESCE(SUM(COALESCE(Q4NET_AMOUNT,0)),0)*-1)/100000 AS Q4AMOUNT,"
                    + "GROUP_CONCAT(DISTINCT PARTY_STATUS) "
                    + " FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(MM_PARTY_CODE,RIGHT(MM_MACHINE_NO+100,2),RIGHT(MM_MACHINE_POSITION+100,2)) FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL "
                    + "WHERE POSITION_CLOSE_IND='1') " + cndpcd + " "
                    + " GROUP BY PARTY_CODE";
        }
        if (mquater.equalsIgnoreCase("DOWNGRADE")) {
            sql = "SELECT 'Downward-PRESS' AS DESCRIPTION,PARTY_CODE,PARTY_NAME,SUM(Q1TOTAL)-SUM(Q1NTOTAL) AS Q1NOS,SUM(Q2TOTAL)-SUM(Q2NTOTAL) AS Q2NOS,SUM(Q3TOTAL)-SUM(Q3NTOTAL) AS Q3NOS,SUM(Q4TOTAL)-SUM(Q4NTOTAL) AS Q4NOS,"
                    + "SUM(Q1KG)-SUM(Q1NKG) AS Q1DIFFKG,SUM(Q2KG)-SUM(Q2NKG) AS Q2DIFFKG,SUM(Q3KG)-SUM(Q3NKG) AS Q3DIFFKG,SUM(Q4KG)-SUM(Q4NKG) AS Q4DIFFKG,"
                    + "SUM(Q1SQMTR)-SUM(Q1NSQMTR) AS Q1DIFFSQMTR,SUM(Q2SQMTR)-SUM(Q2NSQMTR) AS Q2DIFFSQMTR,SUM(Q3SQMTR)-SUM(Q3NSQMTR) AS Q3DIFFSQMTR,SUM(Q4SQMTR)-SUM(Q4NSQMTR) AS Q4DIFFSQMTR,"
                    + "(SUM(Q1AMOUNT)-SUM(Q1NAMOUNT))/100000 AS Q1DIFFAMOUNT,(SUM(Q2AMOUNT)-SUM(Q2NAMOUNT))/100000 AS Q2DIFFAMOUNT,"
                    + "(SUM(Q3AMOUNT)-SUM(Q3NAMOUNT))/100000 AS Q3DIFFAMOUNT,(SUM(Q4AMOUNT)-SUM(Q4NAMOUNT))/100000 AS Q4DIFFAMOUNT,"
                    + "GROUP_CONCAT(DISTINCT PARTY_STATUS) AS PARTY_STATUS FROM (SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,SUM(A.Q1) AS Q1NTOTAL,SUM(A.Q2) AS Q2NTOTAL,SUM(A.Q3) AS Q3NTOTAL,SUM(A.Q4) AS Q4NTOTAL,"
                    + "SUM(B.Q1) AS Q1TOTAL,SUM(B.Q2) AS Q2TOTAL,SUM(B.Q3) AS Q3TOTAL,SUM(B.Q4) AS Q4TOTAL,"
                    + "SUM(A.Q1KG) AS Q1NKG,SUM(A.Q2KG) AS Q2NKG,SUM(A.Q3KG) AS Q3NKG,SUM(A.Q4KG) AS Q4NKG,"
                    + "SUM(B.Q1KG) AS Q1KG,SUM(B.Q2KG) AS Q2KG,SUM(B.Q3KG) AS Q3KG,SUM(B.Q4KG) AS Q4KG,"
                    + "CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q1SQMTR) ELSE 0 END AS Q1NSQMTR,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q2SQMTR) ELSE 0 END AS Q2NSQMTR,"
                    + "CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q3SQMTR) ELSE 0 END AS Q3NSQMTR,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q4SQMTR) ELSE 0 END AS Q4NSQMTR,"
                    + "CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q1SQMTR) ELSE 0 END AS Q1SQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q2SQMTR) ELSE 0 END AS Q2SQMTR,"
                    + "CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q3SQMTR) ELSE 0 END AS Q3SQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q4SQMTR) ELSE 0 END AS Q4SQMTR,"
                    + "SUM(A.Q1NET_AMOUNT) AS Q1NAMOUNT,SUM(A.Q2NET_AMOUNT) AS Q2NAMOUNT,SUM(A.Q3NET_AMOUNT) AS Q3NAMOUNT,SUM(A.Q4NET_AMOUNT) AS Q4NAMOUNT,"
                    + "SUM(B.Q1NET_AMOUNT) AS Q1AMOUNT,SUM(B.Q2NET_AMOUNT) AS Q2AMOUNT,SUM(B.Q3NET_AMOUNT) AS Q3AMOUNT,SUM(B.Q4NET_AMOUNT) AS Q4AMOUNT,"
                    + "A.PARTY_STATUS "
                    + " FROM (SELECT * FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE DOC_NO LIKE 'BU%' " + cndpcd + ") "
                    + "AND QUALITY_NO NOT LIKE '7%' " + cndpcd + " AND QUALITY_NO NOT LIKE '6%') AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO NOT LIKE '7%' AND QUALITY_NO NOT LIKE '6%' " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + " GROUP BY PARTY_CODE) AS C "
                    + "WHERE (Q1NTOTAL>Q1TOTAL OR Q2NTOTAL>Q2TOTAL OR Q3NTOTAL>Q3TOTAL OR Q4NTOTAL>Q4TOTAL) "
                    + "GROUP BY PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'Downward-ACNE',PARTY_CODE,PARTY_NAME,SUM(Q1TOTAL)-SUM(Q1NTOTAL) AS Q1NOS,SUM(Q2TOTAL)-SUM(Q2NTOTAL) AS Q2NOS,SUM(Q3TOTAL)-SUM(Q3NTOTAL) AS Q3NOS,SUM(Q4TOTAL)-SUM(Q4NTOTAL) AS Q4NOS,"
                    + "SUM(Q1KG)-SUM(Q1NKG) AS Q1DIFFKG,SUM(Q2KG)-SUM(Q2NKG) AS Q2DIFFKG,SUM(Q3KG)-SUM(Q3NKG) AS Q3DIFFKG,SUM(Q4KG)-SUM(Q4NKG) AS Q4DIFFKG,"
                    + "SUM(Q1SQMTR)-SUM(Q1NSQMTR) AS Q1DIFFSQMTR,SUM(Q2SQMTR)-SUM(Q2NSQMTR) AS Q2DIFFSQMTR,SUM(Q3SQMTR)-SUM(Q3NSQMTR) AS Q3DIFFSQMTR,SUM(Q4SQMTR)-SUM(Q4NSQMTR) AS Q4DIFFSQMTR,"
                    + "(SUM(Q1AMOUNT)-SUM(Q1NAMOUNT))/100000 AS Q1DIFFAMOUNT,(SUM(Q2AMOUNT)-SUM(Q2NAMOUNT))/100000 AS Q2DIFFAMOUNT,"
                    + "(SUM(Q3AMOUNT)-SUM(Q3NAMOUNT))/100000 AS Q3DIFFAMOUNT,(SUM(Q4AMOUNT)-SUM(Q4NAMOUNT))/100000 AS Q4DIFFAMOUNT,"
                    + "GROUP_CONCAT(DISTINCT PARTY_STATUS) FROM (SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,SUM(A.Q1) AS Q1NTOTAL,SUM(A.Q2) AS Q2NTOTAL,SUM(A.Q3) AS Q3NTOTAL,SUM(A.Q4) AS Q4NTOTAL,"
                    + "SUM(B.Q1) AS Q1TOTAL,SUM(B.Q2) AS Q2TOTAL,SUM(B.Q3) AS Q3TOTAL,SUM(B.Q4) AS Q4TOTAL,"
                    + "SUM(A.Q1KG) AS Q1NKG,SUM(A.Q2KG) AS Q2NKG,SUM(A.Q3KG) AS Q3NKG,SUM(A.Q4KG) AS Q4NKG,"
                    + "SUM(B.Q1KG) AS Q1KG,SUM(B.Q2KG) AS Q2KG,SUM(B.Q3KG) AS Q3KG,SUM(B.Q4KG) AS Q4KG,"
                    + "CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q1SQMTR) ELSE 0 END AS Q1NSQMTR,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q2SQMTR) ELSE 0 END AS Q2NSQMTR,"
                    + "CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q3SQMTR) ELSE 0 END AS Q3NSQMTR,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q4SQMTR) ELSE 0 END AS Q4NSQMTR,"
                    + "CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q1SQMTR) ELSE 0 END AS Q1SQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q2SQMTR) ELSE 0 END AS Q2SQMTR,"
                    + "CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q3SQMTR) ELSE 0 END AS Q3SQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q4SQMTR) ELSE 0 END AS Q4SQMTR,"
                    + "SUM(A.Q1NET_AMOUNT) AS Q1NAMOUNT,SUM(A.Q2NET_AMOUNT) AS Q2NAMOUNT,SUM(A.Q3NET_AMOUNT) AS Q3NAMOUNT,SUM(A.Q4NET_AMOUNT) AS Q4NAMOUNT,"
                    + "SUM(B.Q1NET_AMOUNT) AS Q1AMOUNT,SUM(B.Q2NET_AMOUNT) AS Q2AMOUNT,SUM(B.Q3NET_AMOUNT) AS Q3AMOUNT,SUM(B.Q4NET_AMOUNT) AS Q4AMOUNT,"
                    + "A.PARTY_STATUS "
                    + " FROM (SELECT * FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE DOC_NO LIKE 'BU%' " + cndpcd + ") "
                    + " " + cndpcd + " AND QUALITY_NO LIKE '6%') AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO LIKE '6%' " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + " GROUP BY PARTY_CODE) AS C "
                    + "WHERE (Q1NTOTAL>Q1TOTAL OR Q2NTOTAL>Q2TOTAL OR Q3NTOTAL>Q3TOTAL OR Q4NTOTAL>Q4TOTAL) "
                    + "GROUP BY PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'Downward-SDF',PARTY_CODE,PARTY_NAME,SUM(Q1TOTAL)-SUM(Q1NTOTAL) AS Q1NOS,SUM(Q2TOTAL)-SUM(Q2NTOTAL) AS Q2NOS,SUM(Q3TOTAL)-SUM(Q3NTOTAL) AS Q3NOS,SUM(Q4TOTAL)-SUM(Q4NTOTAL) AS Q4NOS,"
                    + "SUM(Q1KG)-SUM(Q1NKG) AS Q1DIFFKG,SUM(Q2KG)-SUM(Q2NKG) AS Q2DIFFKG,SUM(Q3KG)-SUM(Q3NKG) AS Q3DIFFKG,SUM(Q4KG)-SUM(Q4NKG) AS Q4DIFFKG,"
                    + "SUM(Q1SQMTR)-SUM(Q1NSQMTR) AS Q1DIFFSQMTR,SUM(Q2SQMTR)-SUM(Q2NSQMTR) AS Q2DIFFSQMTR,SUM(Q3SQMTR)-SUM(Q3NSQMTR) AS Q3DIFFSQMTR,SUM(Q4SQMTR)-SUM(Q4NSQMTR) AS Q4DIFFSQMTR,"
                    + "(SUM(Q1AMOUNT)-SUM(Q1NAMOUNT))/100000 AS Q1DIFFAMOUNT,(SUM(Q2AMOUNT)-SUM(Q2NAMOUNT))/100000 AS Q2DIFFAMOUNT,"
                    + "(SUM(Q3AMOUNT)-SUM(Q3NAMOUNT))/100000 AS Q3DIFFAMOUNT,(SUM(Q4AMOUNT)-SUM(Q4NAMOUNT))/100000 AS Q4DIFFAMOUNT,"
                    + "GROUP_CONCAT(DISTINCT PARTY_STATUS) FROM (SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,SUM(A.Q1) AS Q1NTOTAL,SUM(A.Q2) AS Q2NTOTAL,SUM(A.Q3) AS Q3NTOTAL,SUM(A.Q4) AS Q4NTOTAL,"
                    + "SUM(B.Q1) AS Q1TOTAL,SUM(B.Q2) AS Q2TOTAL,SUM(B.Q3) AS Q3TOTAL,SUM(B.Q4) AS Q4TOTAL,"
                    + "SUM(A.Q1KG) AS Q1NKG,SUM(A.Q2KG) AS Q2NKG,SUM(A.Q3KG) AS Q3NKG,SUM(A.Q4KG) AS Q4NKG,"
                    + "SUM(B.Q1KG) AS Q1KG,SUM(B.Q2KG) AS Q2KG,SUM(B.Q3KG) AS Q3KG,SUM(B.Q4KG) AS Q4KG,"
                    + "CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q1SQMTR) ELSE 0 END AS Q1NSQMTR,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q2SQMTR) ELSE 0 END AS Q2NSQMTR,"
                    + "CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q3SQMTR) ELSE 0 END AS Q3NSQMTR,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q4SQMTR) ELSE 0 END AS Q4NSQMTR,"
                    + "CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q1SQMTR) ELSE 0 END AS Q1SQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q2SQMTR) ELSE 0 END AS Q2SQMTR,"
                    + "CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q3SQMTR) ELSE 0 END AS Q3SQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q4SQMTR) ELSE 0 END AS Q4SQMTR,"
                    + "SUM(A.Q1NET_AMOUNT) AS Q1NAMOUNT,SUM(A.Q2NET_AMOUNT) AS Q2NAMOUNT,SUM(A.Q3NET_AMOUNT) AS Q3NAMOUNT,SUM(A.Q4NET_AMOUNT) AS Q4NAMOUNT,"
                    + "SUM(B.Q1NET_AMOUNT) AS Q1AMOUNT,SUM(B.Q2NET_AMOUNT) AS Q2AMOUNT,SUM(B.Q3NET_AMOUNT) AS Q3AMOUNT,SUM(B.Q4NET_AMOUNT) AS Q4AMOUNT,"
                    + "A.PARTY_STATUS "
                    + " FROM (SELECT * FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE DOC_NO LIKE 'BU%' " + cndpcd + ") "
                    + " " + cndpcd + "AND QUALITY_NO LIKE '729%') AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO LIKE '729%' " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + " GROUP BY PARTY_CODE) AS C "
                    + "WHERE (Q1NTOTAL>Q1TOTAL OR Q2NTOTAL>Q2TOTAL OR Q3NTOTAL>Q3TOTAL OR Q4NTOTAL>Q4TOTAL) "
                    + "GROUP BY PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'Downward-HDS',PARTY_CODE,PARTY_NAME,SUM(Q1TOTAL)-SUM(Q1NTOTAL) AS Q1NOS,SUM(Q2TOTAL)-SUM(Q2NTOTAL) AS Q2NOS,SUM(Q3TOTAL)-SUM(Q3NTOTAL) AS Q3NOS,SUM(Q4TOTAL)-SUM(Q4NTOTAL) AS Q4NOS,"
                    + "SUM(Q1KG)-SUM(Q1NKG) AS Q1DIFFKG,SUM(Q2KG)-SUM(Q2NKG) AS Q2DIFFKG,SUM(Q3KG)-SUM(Q3NKG) AS Q3DIFFKG,SUM(Q4KG)-SUM(Q4NKG) AS Q4DIFFKG,"
                    + "SUM(Q1SQMTR)-SUM(Q1NSQMTR) AS Q1DIFFSQMTR,SUM(Q2SQMTR)-SUM(Q2NSQMTR) AS Q2DIFFSQMTR,SUM(Q3SQMTR)-SUM(Q3NSQMTR) AS Q3DIFFSQMTR,SUM(Q4SQMTR)-SUM(Q4NSQMTR) AS Q4DIFFSQMTR,"
                    + "(SUM(Q1AMOUNT)-SUM(Q1NAMOUNT))/100000 AS Q1DIFFAMOUNT,(SUM(Q2AMOUNT)-SUM(Q2NAMOUNT))/100000 AS Q2DIFFAMOUNT,"
                    + "(SUM(Q3AMOUNT)-SUM(Q3NAMOUNT))/100000 AS Q3DIFFAMOUNT,(SUM(Q4AMOUNT)-SUM(Q4NAMOUNT))/100000 AS Q4DIFFAMOUNT,"
                    + "GROUP_CONCAT(DISTINCT PARTY_STATUS) FROM (SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,SUM(A.Q1) AS Q1NTOTAL,SUM(A.Q2) AS Q2NTOTAL,SUM(A.Q3) AS Q3NTOTAL,SUM(A.Q4) AS Q4NTOTAL,"
                    + "SUM(B.Q1) AS Q1TOTAL,SUM(B.Q2) AS Q2TOTAL,SUM(B.Q3) AS Q3TOTAL,SUM(B.Q4) AS Q4TOTAL,"
                    + "SUM(A.Q1KG) AS Q1NKG,SUM(A.Q2KG) AS Q2NKG,SUM(A.Q3KG) AS Q3NKG,SUM(A.Q4KG) AS Q4NKG,"
                    + "SUM(B.Q1KG) AS Q1KG,SUM(B.Q2KG) AS Q2KG,SUM(B.Q3KG) AS Q3KG,SUM(B.Q4KG) AS Q4KG,"
                    + "CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q1SQMTR) ELSE 0 END AS Q1NSQMTR,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q2SQMTR) ELSE 0 END AS Q2NSQMTR,"
                    + "CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q3SQMTR) ELSE 0 END AS Q3NSQMTR,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q4SQMTR) ELSE 0 END AS Q4NSQMTR,"
                    + "CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q1SQMTR) ELSE 0 END AS Q1SQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q2SQMTR) ELSE 0 END AS Q2SQMTR,"
                    + "CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q3SQMTR) ELSE 0 END AS Q3SQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q4SQMTR) ELSE 0 END AS Q4SQMTR,"
                    + "SUM(A.Q1NET_AMOUNT) AS Q1NAMOUNT,SUM(A.Q2NET_AMOUNT) AS Q2NAMOUNT,SUM(A.Q3NET_AMOUNT) AS Q3NAMOUNT,SUM(A.Q4NET_AMOUNT) AS Q4NAMOUNT,"
                    + "SUM(B.Q1NET_AMOUNT) AS Q1AMOUNT,SUM(B.Q2NET_AMOUNT) AS Q2AMOUNT,SUM(B.Q3NET_AMOUNT) AS Q3AMOUNT,SUM(B.Q4NET_AMOUNT) AS Q4AMOUNT,"
                    + "A.PARTY_STATUS "
                    + " FROM (SELECT * FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE DOC_NO LIKE 'BU%' " + cndpcd + ") "
                    + "AND QUALITY_NO NOT LIKE '729%' " + cndpcd + " AND QUALITY_NO LIKE '7%') AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE  QUALITY_NO NOT LIKE '729%' AND QUALITY_NO LIKE '7%' " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + " GROUP BY PARTY_CODE) AS C "
                    + "WHERE (Q1NTOTAL>Q1TOTAL OR Q2NTOTAL>Q2TOTAL OR Q3NTOTAL>Q3TOTAL OR Q4NTOTAL>Q4TOTAL) "
                    + "GROUP BY PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'Downward-TOTAL',PARTY_CODE,PARTY_NAME,SUM(Q1TOTAL)-SUM(Q1NTOTAL) AS Q1NOS,SUM(Q2TOTAL)-SUM(Q2NTOTAL) AS Q2NOS,SUM(Q3TOTAL)-SUM(Q3NTOTAL) AS Q3NOS,SUM(Q4TOTAL)-SUM(Q4NTOTAL) AS Q4NOS,"
                    + "SUM(Q1KG)-SUM(Q1NKG) AS Q1DIFFKG,SUM(Q2KG)-SUM(Q2NKG) AS Q2DIFFKG,SUM(Q3KG)-SUM(Q3NKG) AS Q3DIFFKG,SUM(Q4KG)-SUM(Q4NKG) AS Q4DIFFKG,"
                    + "SUM(Q1SQMTR)-SUM(Q1NSQMTR) AS Q1DIFFSQMTR,SUM(Q2SQMTR)-SUM(Q2NSQMTR) AS Q2DIFFSQMTR,SUM(Q3SQMTR)-SUM(Q3NSQMTR) AS Q3DIFFSQMTR,SUM(Q4SQMTR)-SUM(Q4NSQMTR) AS Q4DIFFSQMTR,"
                    + "(SUM(Q1AMOUNT)-SUM(Q1NAMOUNT))/100000 AS Q1DIFFAMOUNT,(SUM(Q2AMOUNT)-SUM(Q2NAMOUNT))/100000 AS Q2DIFFAMOUNT,"
                    + "(SUM(Q3AMOUNT)-SUM(Q3NAMOUNT))/100000 AS Q3DIFFAMOUNT,(SUM(Q4AMOUNT)-SUM(Q4NAMOUNT))/100000 AS Q4DIFFAMOUNT,"
                    + "GROUP_CONCAT(DISTINCT PARTY_STATUS) FROM (SELECT A.YEAR_FROM,A.YEAR_TO,A.PARTY_CODE,A.PARTY_NAME,SUM(A.Q1) AS Q1NTOTAL,SUM(A.Q2) AS Q2NTOTAL,SUM(A.Q3) AS Q3NTOTAL,SUM(A.Q4) AS Q4NTOTAL,"
                    + "SUM(B.Q1) AS Q1TOTAL,SUM(B.Q2) AS Q2TOTAL,SUM(B.Q3) AS Q3TOTAL,SUM(B.Q4) AS Q4TOTAL,"
                    + "SUM(A.Q1KG) AS Q1NKG,SUM(A.Q2KG) AS Q2NKG,SUM(A.Q3KG) AS Q3NKG,SUM(A.Q4KG) AS Q4NKG,"
                    + "SUM(B.Q1KG) AS Q1KG,SUM(B.Q2KG) AS Q2KG,SUM(B.Q3KG) AS Q3KG,SUM(B.Q4KG) AS Q4KG,"
                    + "CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q1SQMTR) ELSE 0 END AS Q1NSQMTR,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q2SQMTR) ELSE 0 END AS Q2NSQMTR,"
                    + "CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q3SQMTR) ELSE 0 END AS Q3NSQMTR,CASE WHEN LEFT(A.QUALITY_NO,1)='7' THEN SUM(A.Q4SQMTR) ELSE 0 END AS Q4NSQMTR,"
                    + "CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q1SQMTR) ELSE 0 END AS Q1SQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q2SQMTR) ELSE 0 END AS Q2SQMTR,"
                    + "CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q3SQMTR) ELSE 0 END AS Q3SQMTR,CASE WHEN LEFT(B.QUALITY_NO,1)='7' THEN SUM(B.Q4SQMTR) ELSE 0 END AS Q4SQMTR,"
                    + "SUM(A.Q1NET_AMOUNT) AS Q1NAMOUNT,SUM(A.Q2NET_AMOUNT) AS Q2NAMOUNT,SUM(A.Q3NET_AMOUNT) AS Q3NAMOUNT,SUM(A.Q4NET_AMOUNT) AS Q4NAMOUNT,"
                    + "SUM(B.Q1NET_AMOUNT) AS Q1AMOUNT,SUM(B.Q2NET_AMOUNT) AS Q2AMOUNT,SUM(B.Q3NET_AMOUNT) AS Q3AMOUNT,SUM(B.Q4NET_AMOUNT) AS Q4AMOUNT,"
                    + "A.PARTY_STATUS "
                    + " FROM (SELECT * FROM PRODUCTION.FELT_BUDGET "
                    + "WHERE CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) IN "
                    + "(SELECT CONCAT(PARTY_CODE,RIGHT(MACHINE_NO+100,2),RIGHT(POSITION_NO+100,2)) FROM PRODUCTION.FELT_BUDGET_DETAIL WHERE DOC_NO LIKE 'BU%' " + cndpcd + ")) AS A "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_BUDGET WHERE TOTAL>0 " + cndpcd + ") AS B "
                    + "ON CONCAT(A.PARTY_CODE,RIGHT(A.MACHINE_NO+100,2),RIGHT(A.POSITION_NO+100,2))=CONCAT(B.PARTY_CODE,RIGHT(B.MACHINE_NO+100,2),RIGHT(B.POSITION_NO+100,2)) "
                    + " GROUP BY PARTY_CODE) AS C "
                    + "WHERE (Q1NTOTAL>Q1TOTAL OR Q2NTOTAL>Q2TOTAL OR Q3NTOTAL>Q3TOTAL OR Q4NTOTAL>Q4TOTAL) "
                    + "GROUP BY PARTY_CODE";
        }
        if (mquater.equalsIgnoreCase("INVOICE")) {
            sql = "SELECT 'INVOICED-PRESS' AS DESCRIPTION,H.PARTY_CODE,PARTY_NAME, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-06-30 23:59:59' THEN H.NO_OF_PIECES ELSE 0 END) AS Q1, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-09-30 23:59:59' THEN H.NO_OF_PIECES ELSE 0 END) AS Q2, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-12-31 23:59:59' THEN H.NO_OF_PIECES ELSE 0 END) AS Q3, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + lblyearto.getText() + "-01-01' AND D.INVOICE_DATE<='" + lblyearto.getText() + "-03-31 23:59:59' THEN H.NO_OF_PIECES ELSE 0 END) AS Q4, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-06-30 23:59:59' THEN D.ACTUAL_WEIGHT ELSE 0 END) AS Q1KG, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-09-30 23:59:59' THEN D.ACTUAL_WEIGHT ELSE 0 END) AS Q2KG, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-12-31 23:59:59' THEN D.ACTUAL_WEIGHT ELSE 0 END) AS Q3KG, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + lblyearto.getText() + "-01-01' AND D.INVOICE_DATE<='" + lblyearto.getText() + "-03-31 23:59:59' THEN D.ACTUAL_WEIGHT ELSE 0 END) AS Q4KG, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-06-30 23:59:59' THEN CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END ELSE 0 END) AS Q1SQMTR, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-09-30 23:59:59' THEN CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END ELSE 0 END) AS Q2SQMTR, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-12-31 23:59:59' THEN CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END ELSE 0 END) AS Q3SQMTR, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + lblyearto.getText() + "-01-01' AND D.INVOICE_DATE<='" + lblyearto.getText() + "-03-31 23:59:59' THEN CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END ELSE 0 END) AS Q4SQMTR, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-06-30 23:59:59' THEN ROUND(D.INVOICE_AMT,0) ELSE 0 END)/100000 AS Q1AMOUNT, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-09-30 23:59:59' THEN ROUND(D.INVOICE_AMT,0) ELSE 0 END)/100000 AS Q2AMOUNT, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-12-31 23:59:59' THEN ROUND(D.INVOICE_AMT,0) ELSE 0 END)/100000 AS Q3AMOUNT, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + lblyearto.getText() + "-01-01' AND D.INVOICE_DATE<='" + lblyearto.getText() + "-03-31 23:59:59' THEN ROUND(D.INVOICE_AMT,0) ELSE 0 END)/100000 AS Q4AMOUNT, "
                    + "COALESCE(PARTY_STATUS,'') AS PARTY_STATUS "
                    + "FROM PRODUCTION.FELT_SAL_INVOICE_DETAIL D,PRODUCTION.FELT_SAL_INVOICE_HEADER H "
                    + "LEFT JOIN (SELECT PARTY_CODE AS PCD,GROUP_CONCAT(DISTINCT PARTY_STATUS) AS PARTY_STATUS FROM PRODUCTION.FELT_BUDGET GROUP BY PARTY_CODE) AS AA "
                    + "ON H.PARTY_CODE=AA.PCD "
                    + "WHERE D.INVOICE_NO=H.INVOICE_NO AND SUBSTRING(D.INVOICE_DATE,1,10)=SUBSTRING(H.INVOICE_DATE,1,10) AND "
                    + "  D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + lastdate + " 23:59:59' "
                    + " AND H.CANCELLED!=1 AND H.APPROVED=1 AND D.PRODUCT_CODE NOT LIKE '7%' AND D.PRODUCT_CODE NOT LIKE '6%' "
                    + "GROUP BY H.PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'INVOICED-ACNE',H.PARTY_CODE,PARTY_NAME,"
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-06-30 23:59:59' THEN H.NO_OF_PIECES ELSE 0 END) AS Q1, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-09-30 23:59:59' THEN H.NO_OF_PIECES ELSE 0 END) AS Q2, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-12-31 23:59:59' THEN H.NO_OF_PIECES ELSE 0 END) AS Q3, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + lblyearto.getText() + "-01-01' AND D.INVOICE_DATE<='" + lblyearto.getText() + "-03-31 23:59:59' THEN H.NO_OF_PIECES ELSE 0 END) AS Q4, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-06-30 23:59:59' THEN D.ACTUAL_WEIGHT ELSE 0 END) AS Q1KG, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-09-30 23:59:59' THEN D.ACTUAL_WEIGHT ELSE 0 END) AS Q2KG, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-12-31 23:59:59' THEN D.ACTUAL_WEIGHT ELSE 0 END) AS Q3KG, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + lblyearto.getText() + "-01-01' AND D.INVOICE_DATE<='" + lblyearto.getText() + "-03-31 23:59:59' THEN D.ACTUAL_WEIGHT ELSE 0 END) AS Q4KG, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-06-30 23:59:59' THEN CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END ELSE 0 END) AS Q1SQMTR, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-09-30 23:59:59' THEN CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END ELSE 0 END) AS Q2SQMTR, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-12-31 23:59:59' THEN CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END ELSE 0 END) AS Q3SQMTR, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + lblyearto.getText() + "-01-01' AND D.INVOICE_DATE<='" + lblyearto.getText() + "-03-31 23:59:59' THEN CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END ELSE 0 END) AS Q4SQMTR, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-06-30 23:59:59' THEN ROUND(D.INVOICE_AMT,0) ELSE 0 END)/100000 AS Q1AMOUNT, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-09-30 23:59:59' THEN ROUND(D.INVOICE_AMT,0) ELSE 0 END)/100000 AS Q2AMOUNT, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-12-31 23:59:59' THEN ROUND(D.INVOICE_AMT,0) ELSE 0 END)/100000 AS Q3AMOUNT, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + lblyearto.getText() + "-01-01' AND D.INVOICE_DATE<='" + lblyearto.getText() + "-03-31 23:59:59' THEN ROUND(D.INVOICE_AMT,0) ELSE 0 END)/100000 AS Q4AMOUNT, "
                    + "COALESCE(PARTY_STATUS,'') AS PARTY_STATUS "
                    + "FROM PRODUCTION.FELT_SAL_INVOICE_DETAIL D,PRODUCTION.FELT_SAL_INVOICE_HEADER H "
                    + "LEFT JOIN (SELECT PARTY_CODE AS PCD,GROUP_CONCAT(DISTINCT PARTY_STATUS) AS PARTY_STATUS FROM PRODUCTION.FELT_BUDGET GROUP BY PARTY_CODE) AS AA "
                    + "ON H.PARTY_CODE=AA.PCD "
                    + "WHERE D.INVOICE_NO=H.INVOICE_NO AND SUBSTRING(D.INVOICE_DATE,1,10)=SUBSTRING(H.INVOICE_DATE,1,10) AND "
                    + "  D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + lastdate + " 23:59:59' "
                    + " AND H.CANCELLED!=1 AND H.APPROVED=1 AND  D.PRODUCT_CODE LIKE '6%' "
                    + "GROUP BY H.PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'INVOICED-SDF',H.PARTY_CODE,PARTY_NAME,"
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-06-30 23:59:59' THEN H.NO_OF_PIECES ELSE 0 END) AS Q1, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-09-30 23:59:59' THEN H.NO_OF_PIECES ELSE 0 END) AS Q2, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-12-31 23:59:59' THEN H.NO_OF_PIECES ELSE 0 END) AS Q3, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + lblyearto.getText() + "-01-01' AND D.INVOICE_DATE<='" + lblyearto.getText() + "-03-31 23:59:59' THEN H.NO_OF_PIECES ELSE 0 END) AS Q4, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-06-30 23:59:59' THEN D.ACTUAL_WEIGHT ELSE 0 END) AS Q1KG, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-09-30 23:59:59' THEN D.ACTUAL_WEIGHT ELSE 0 END) AS Q2KG, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-12-31 23:59:59' THEN D.ACTUAL_WEIGHT ELSE 0 END) AS Q3KG, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + lblyearto.getText() + "-01-01' AND D.INVOICE_DATE<='" + lblyearto.getText() + "-03-31 23:59:59' THEN D.ACTUAL_WEIGHT ELSE 0 END) AS Q4KG, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-06-30 23:59:59' THEN CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END ELSE 0 END) AS Q1SQMTR, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-09-30 23:59:59' THEN CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END ELSE 0 END) AS Q2SQMTR, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-12-31 23:59:59' THEN CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END ELSE 0 END) AS Q3SQMTR, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + lblyearto.getText() + "-01-01' AND D.INVOICE_DATE<='" + lblyearto.getText() + "-03-31 23:59:59' THEN CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END ELSE 0 END) AS Q4SQMTR, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-06-30 23:59:59' THEN ROUND(D.INVOICE_AMT,0) ELSE 0 END)/100000 AS Q1AMOUNT, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-09-30 23:59:59' THEN ROUND(D.INVOICE_AMT,0) ELSE 0 END)/100000 AS Q2AMOUNT, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-12-31 23:59:59' THEN ROUND(D.INVOICE_AMT,0) ELSE 0 END)/100000 AS Q3AMOUNT, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + lblyearto.getText() + "-01-01' AND D.INVOICE_DATE<='" + lblyearto.getText() + "-03-31 23:59:59' THEN ROUND(D.INVOICE_AMT,0) ELSE 0 END)/100000 AS Q4AMOUNT, "
                    + "COALESCE(PARTY_STATUS,'') AS PARTY_STATUS "
                    + "FROM PRODUCTION.FELT_SAL_INVOICE_DETAIL D,PRODUCTION.FELT_SAL_INVOICE_HEADER H "
                    + "LEFT JOIN (SELECT PARTY_CODE AS PCD,GROUP_CONCAT(DISTINCT PARTY_STATUS) AS PARTY_STATUS FROM PRODUCTION.FELT_BUDGET GROUP BY PARTY_CODE) AS AA "
                    + "ON H.PARTY_CODE=AA.PCD "
                    + "WHERE D.INVOICE_NO=H.INVOICE_NO AND SUBSTRING(D.INVOICE_DATE,1,10)=SUBSTRING(H.INVOICE_DATE,1,10) AND "
                    + "  D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + lastdate + " 23:59:59' "
                    + " AND H.CANCELLED!=1 AND H.APPROVED=1 AND  D.PRODUCT_CODE LIKE '729%' "
                    + "GROUP BY H.PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'INVOICED-HDS',H.PARTY_CODE,PARTY_NAME,"
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-06-30 23:59:59' THEN H.NO_OF_PIECES ELSE 0 END) AS Q1, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-09-30 23:59:59' THEN H.NO_OF_PIECES ELSE 0 END) AS Q2, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-12-31 23:59:59' THEN H.NO_OF_PIECES ELSE 0 END) AS Q3, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + lblyearto.getText() + "-01-01' AND D.INVOICE_DATE<='" + lblyearto.getText() + "-03-31 23:59:59' THEN H.NO_OF_PIECES ELSE 0 END) AS Q4, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-06-30 23:59:59' THEN D.ACTUAL_WEIGHT ELSE 0 END) AS Q1KG, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-09-30 23:59:59' THEN D.ACTUAL_WEIGHT ELSE 0 END) AS Q2KG, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-12-31 23:59:59' THEN D.ACTUAL_WEIGHT ELSE 0 END) AS Q3KG, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + lblyearto.getText() + "-01-01' AND D.INVOICE_DATE<='" + lblyearto.getText() + "-03-31 23:59:59' THEN D.ACTUAL_WEIGHT ELSE 0 END) AS Q4KG, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-06-30 23:59:59' THEN CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END ELSE 0 END) AS Q1SQMTR, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-09-30 23:59:59' THEN CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END ELSE 0 END) AS Q2SQMTR, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-12-31 23:59:59' THEN CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END ELSE 0 END) AS Q3SQMTR, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + lblyearto.getText() + "-01-01' AND D.INVOICE_DATE<='" + lblyearto.getText() + "-03-31 23:59:59' THEN CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END ELSE 0 END) AS Q4SQMTR, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-06-30 23:59:59' THEN ROUND(D.INVOICE_AMT,0) ELSE 0 END)/100000 AS Q1AMOUNT, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-09-30 23:59:59' THEN ROUND(D.INVOICE_AMT,0) ELSE 0 END)/100000 AS Q2AMOUNT, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-12-31 23:59:59' THEN ROUND(D.INVOICE_AMT,0) ELSE 0 END)/100000 AS Q3AMOUNT, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + lblyearto.getText() + "-01-01' AND D.INVOICE_DATE<='" + lblyearto.getText() + "-03-31 23:59:59' THEN ROUND(D.INVOICE_AMT,0) ELSE 0 END)/100000 AS Q4AMOUNT, "
                    + "COALESCE(PARTY_STATUS,'') AS PARTY_STATUS "
                    + "FROM PRODUCTION.FELT_SAL_INVOICE_DETAIL D,PRODUCTION.FELT_SAL_INVOICE_HEADER H "
                    + "LEFT JOIN (SELECT PARTY_CODE AS PCD,GROUP_CONCAT(DISTINCT PARTY_STATUS) AS PARTY_STATUS FROM PRODUCTION.FELT_BUDGET GROUP BY PARTY_CODE) AS AA "
                    + "ON H.PARTY_CODE=AA.PCD "
                    + "WHERE D.INVOICE_NO=H.INVOICE_NO AND SUBSTRING(D.INVOICE_DATE,1,10)=SUBSTRING(H.INVOICE_DATE,1,10) AND "
                    + "  D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + lastdate + " 23:59:59' "
                    + " AND H.CANCELLED!=1 AND H.APPROVED=1 AND  D.PRODUCT_CODE NOT LIKE '729%' AND D.PRODUCT_CODE LIKE '7%' "
                    + "GROUP BY H.PARTY_CODE "
                    + " UNION ALL "
                    + "SELECT 'INVOICED-TOTAL',H.PARTY_CODE,PARTY_NAME,"
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-06-30 23:59:59' THEN H.NO_OF_PIECES ELSE 0 END) AS Q1, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-09-30 23:59:59' THEN H.NO_OF_PIECES ELSE 0 END) AS Q2, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-12-31 23:59:59' THEN H.NO_OF_PIECES ELSE 0 END) AS Q3, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + lblyearto.getText() + "-01-01' AND D.INVOICE_DATE<='" + lblyearto.getText() + "-03-31 23:59:59' THEN H.NO_OF_PIECES ELSE 0 END) AS Q4, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-06-30 23:59:59' THEN D.ACTUAL_WEIGHT ELSE 0 END) AS Q1KG, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-09-30 23:59:59' THEN D.ACTUAL_WEIGHT ELSE 0 END) AS Q2KG, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-12-31 23:59:59' THEN D.ACTUAL_WEIGHT ELSE 0 END) AS Q3KG, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + lblyearto.getText() + "-01-01' AND D.INVOICE_DATE<='" + lblyearto.getText() + "-03-31 23:59:59' THEN D.ACTUAL_WEIGHT ELSE 0 END) AS Q4KG, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-06-30 23:59:59' THEN CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END ELSE 0 END) AS Q1SQMTR, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-09-30 23:59:59' THEN CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END ELSE 0 END) AS Q2SQMTR, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-12-31 23:59:59' THEN CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END ELSE 0 END) AS Q3SQMTR, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + lblyearto.getText() + "-01-01' AND D.INVOICE_DATE<='" + lblyearto.getText() + "-03-31 23:59:59' THEN CASE WHEN LEFT(D.PRODUCT_CODE,1)='7' THEN D.SQMTR ELSE 0 END ELSE 0 END) AS Q4SQMTR, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-06-30 23:59:59' THEN ROUND(D.INVOICE_AMT,0) ELSE 0 END)/100000 AS Q1AMOUNT, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-07-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-09-30 23:59:59' THEN ROUND(D.INVOICE_AMT,0) ELSE 0 END)/100000 AS Q2AMOUNT, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + txtyear.getText() + "-10-01' AND D.INVOICE_DATE<='" + txtyear.getText() + "-12-31 23:59:59' THEN ROUND(D.INVOICE_AMT,0) ELSE 0 END)/100000 AS Q3AMOUNT, "
                    + "SUM(CASE WHEN D.INVOICE_DATE>='" + lblyearto.getText() + "-01-01' AND D.INVOICE_DATE<='" + lblyearto.getText() + "-03-31 23:59:59' THEN ROUND(D.INVOICE_AMT,0) ELSE 0 END)/100000 AS Q4AMOUNT, "
                    + "COALESCE(PARTY_STATUS,'') AS PARTY_STATUS "
                    + "FROM PRODUCTION.FELT_SAL_INVOICE_DETAIL D,PRODUCTION.FELT_SAL_INVOICE_HEADER H "
                    + "LEFT JOIN (SELECT PARTY_CODE AS PCD,GROUP_CONCAT(DISTINCT PARTY_STATUS) AS PARTY_STATUS FROM PRODUCTION.FELT_BUDGET GROUP BY PARTY_CODE) AS AA "
                    + "ON H.PARTY_CODE=AA.PCD "
                    + "WHERE D.INVOICE_NO=H.INVOICE_NO AND SUBSTRING(D.INVOICE_DATE,1,10)=SUBSTRING(H.INVOICE_DATE,1,10) AND   "
                    + "  D.INVOICE_DATE>='" + txtyear.getText() + "-04-01' AND D.INVOICE_DATE<='" + lastdate + " 23:59:59' "
                    + " AND H.CANCELLED!=1 AND H.APPROVED=1 "
                    + "GROUP BY H.PARTY_CODE";
        }
        dataqtr_generate(sql, mquater);
    }

    private void data_generate(String msql, String mquater) {

        boolean chk = false;
        ResultSet rs;
        if (txtyear.getText().trim().length() >= 4) {
            chk = true;
        } else {
            JOptionPane.showMessageDialog(this, "Please Enter Year...", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtyear.requestFocus();
        }
        if (chk) {
            try {
//                mTableModel = new EITLTableModel();
//                TableB.removeAll();
//                TableB.setModel(mTableModel);
//               

                System.out.println("Sql Query :" + msql);
                rs = EITLERP.data.getResult(msql);
                FormatGrid(mquater);
                rs.first();
                int i = 1, k = 1;
                if (rs.getRow() > 0) {
                    if (mquater.equalsIgnoreCase("ALL")) {
                        //BUDGETED
                        Object[] rowData = new Object[100];
                        for (k = 1; k < 6; k++) {
                            rowData = new Object[100];
                            rowData[0] = rs.getString("DESCRIPTION");
                            rowData[1] = EITLERPGLOBAL.round(rs.getDouble("NOS"), 2);
                            rowData[2] = EITLERPGLOBAL.round(rs.getDouble("KG"), 2);
                            rowData[3] = EITLERPGLOBAL.round(rs.getDouble("SQMTR"), 2);
                            rowData[4] = EITLERPGLOBAL.round(rs.getDouble("AMOUNT"), 2);
                            DataModel.addRow(rowData);
                            rs.next();
                        }
                        rowData = new Object[100];
                        rowData[0] = "";
                        DataModel.addRow(rowData);
                        //UPGRADE
                        for (k = 1; k < 6; k++) {
                            rowData = new Object[100];
                            rowData[0] = rs.getString("DESCRIPTION");
                            rowData[1] = EITLERPGLOBAL.round(rs.getDouble("NOS"), 2);
                            rowData[2] = EITLERPGLOBAL.round(rs.getDouble("KG"), 2);
                            rowData[3] = EITLERPGLOBAL.round(rs.getDouble("SQMTR"), 2);
                            rowData[4] = EITLERPGLOBAL.round(rs.getDouble("AMOUNT"), 2);
                            DataModel.addRow(rowData);

                            rs.next();
                        }

                        //BLANK
                        rowData = new Object[100];
                        rowData[0] = "";
                        DataModel.addRow(rowData);

                        //TOTAL
                        rowData = new Object[100];
                        rowData[0] = "Total-PRESS";
                        rowData[1] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(0, 1).toString()) + Double.parseDouble(TableB.getValueAt(6, 1).toString()), 2);
                        rowData[2] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(0, 2).toString()) + Double.parseDouble(TableB.getValueAt(6, 2).toString()), 2);
                        rowData[3] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(0, 3).toString()) + Double.parseDouble(TableB.getValueAt(6, 3).toString()), 2);
                        rowData[4] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(0, 4).toString()) + Double.parseDouble(TableB.getValueAt(6, 4).toString()), 2);
                        DataModel.addRow(rowData);
                        rowData = new Object[100];
                        rowData[0] = "Total-ACNE";
                        rowData[1] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(1, 1).toString()) + Double.parseDouble(TableB.getValueAt(7, 1).toString()), 2);
                        rowData[2] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(1, 2).toString()) + Double.parseDouble(TableB.getValueAt(7, 2).toString()), 2);
                        rowData[3] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(1, 3).toString()) + Double.parseDouble(TableB.getValueAt(7, 3).toString()), 2);
                        rowData[4] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(1, 4).toString()) + Double.parseDouble(TableB.getValueAt(7, 4).toString()), 2);
                        DataModel.addRow(rowData);
                        rowData = new Object[100];
                        rowData[0] = "Total-SDF";
                        rowData[1] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(2, 1).toString()) + Double.parseDouble(TableB.getValueAt(8, 1).toString()), 2);
                        rowData[2] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(2, 2).toString()) + Double.parseDouble(TableB.getValueAt(8, 2).toString()), 2);
                        rowData[3] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(2, 3).toString()) + Double.parseDouble(TableB.getValueAt(8, 3).toString()), 2);
                        rowData[4] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(2, 4).toString()) + Double.parseDouble(TableB.getValueAt(8, 4).toString()), 2);
                        DataModel.addRow(rowData);
                        rowData = new Object[100];
                        rowData[0] = "Total-HDS";
                        rowData[1] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(3, 1).toString()) + Double.parseDouble(TableB.getValueAt(9, 1).toString()), 2);
                        rowData[2] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(3, 2).toString()) + Double.parseDouble(TableB.getValueAt(9, 2).toString()), 2);
                        rowData[3] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(3, 3).toString()) + Double.parseDouble(TableB.getValueAt(9, 3).toString()), 2);
                        rowData[4] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(3, 4).toString()) + Double.parseDouble(TableB.getValueAt(9, 4).toString()), 2);
                        DataModel.addRow(rowData);
                        rowData = new Object[100];
                        rowData[0] = "Total";
                        rowData[1] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(4, 1).toString()) + Double.parseDouble(TableB.getValueAt(10, 1).toString()), 2);
                        rowData[2] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(4, 2).toString()) + Double.parseDouble(TableB.getValueAt(10, 2).toString()), 2);
                        rowData[3] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(4, 3).toString()) + Double.parseDouble(TableB.getValueAt(10, 3).toString()), 2);
                        rowData[4] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(4, 4).toString()) + Double.parseDouble(TableB.getValueAt(10, 4).toString()), 2);
                        DataModel.addRow(rowData);

                        //BLANK
                        rowData = new Object[100];
                        rowData[0] = "";
                        DataModel.addRow(rowData);
                        rowData = new Object[100];
                        rowData[0] = "";
                        DataModel.addRow(rowData);
                        //CLOSER

                        for (k = 1; k < 6; k++) {
                            rowData = new Object[100];
                            rowData[0] = rs.getString("DESCRIPTION");
                            rowData[1] = EITLERPGLOBAL.round(rs.getDouble("NOS"), 2);
                            rowData[2] = EITLERPGLOBAL.round(rs.getDouble("KG"), 2);
                            rowData[3] = EITLERPGLOBAL.round(rs.getDouble("SQMTR"), 2);
                            rowData[4] = EITLERPGLOBAL.round(rs.getDouble("AMOUNT"), 2);
                            DataModel.addRow(rowData);
                            rs.next();
                        }
                        rowData = new Object[100];
                        rowData[0] = "";
                        DataModel.addRow(rowData);
                        //DOWNGRADE
                        for (k = 1; k < 6; k++) {
                            rowData = new Object[100];
                            rowData[0] = rs.getString("DESCRIPTION");
                            rowData[1] = EITLERPGLOBAL.round(rs.getDouble("NOS"), 2);
                            rowData[2] = EITLERPGLOBAL.round(rs.getDouble("KG"), 2);
                            rowData[3] = EITLERPGLOBAL.round(rs.getDouble("SQMTR"), 2);
                            rowData[4] = EITLERPGLOBAL.round(rs.getDouble("AMOUNT"), 2);
                            DataModel.addRow(rowData);
                            rs.next();
                        }
                        //BLANK
                        rowData = new Object[100];
                        rowData[0] = "";
                        DataModel.addRow(rowData);
                        rowData = new Object[100];
                        rowData[0] = "";
                        DataModel.addRow(rowData);
                        //NET BUDGET
                        rowData = new Object[100];
                        rowData[0] = "Net Budget-PRESS";
                        rowData[1] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(12, 1).toString()) + (Double.parseDouble(TableB.getValueAt(19, 1).toString()) + Double.parseDouble(TableB.getValueAt(25, 1).toString())), 2);
                        rowData[2] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(12, 2).toString()) + (Double.parseDouble(TableB.getValueAt(19, 2).toString()) + Double.parseDouble(TableB.getValueAt(25, 2).toString())), 2);
                        rowData[3] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(12, 3).toString()) + (Double.parseDouble(TableB.getValueAt(19, 3).toString()) + Double.parseDouble(TableB.getValueAt(25, 3).toString())), 2);
                        rowData[4] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(12, 4).toString()) + (Double.parseDouble(TableB.getValueAt(19, 4).toString()) + Double.parseDouble(TableB.getValueAt(25, 4).toString())), 2);
                        DataModel.addRow(rowData);

                        rowData = new Object[100];
                        rowData[0] = "Net Budget-ACNE";
                        rowData[1] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(13, 1).toString()) + (Double.parseDouble(TableB.getValueAt(20, 1).toString()) + Double.parseDouble(TableB.getValueAt(26, 1).toString())), 2);
                        rowData[2] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(13, 2).toString()) + (Double.parseDouble(TableB.getValueAt(20, 2).toString()) + Double.parseDouble(TableB.getValueAt(26, 2).toString())), 2);
                        rowData[3] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(13, 3).toString()) + (Double.parseDouble(TableB.getValueAt(20, 3).toString()) + Double.parseDouble(TableB.getValueAt(26, 3).toString())), 2);
                        rowData[4] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(13, 4).toString()) + (Double.parseDouble(TableB.getValueAt(20, 4).toString()) + Double.parseDouble(TableB.getValueAt(26, 4).toString())), 2);
                        DataModel.addRow(rowData);
                        rowData = new Object[100];
                        rowData[0] = "Net Budget-SDF";
                        rowData[1] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(14, 1).toString()) + (Double.parseDouble(TableB.getValueAt(21, 1).toString()) + Double.parseDouble(TableB.getValueAt(27, 1).toString())), 2);
                        rowData[2] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(14, 2).toString()) + (Double.parseDouble(TableB.getValueAt(21, 2).toString()) + Double.parseDouble(TableB.getValueAt(27, 2).toString())), 2);
                        rowData[3] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(14, 3).toString()) + (Double.parseDouble(TableB.getValueAt(21, 3).toString()) + Double.parseDouble(TableB.getValueAt(27, 3).toString())), 2);
                        rowData[4] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(14, 4).toString()) + (Double.parseDouble(TableB.getValueAt(21, 4).toString()) + Double.parseDouble(TableB.getValueAt(27, 4).toString())), 2);
                        DataModel.addRow(rowData);
                        rowData = new Object[100];
                        rowData[0] = "Net Budget-HDS";
                        rowData[1] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(15, 1).toString()) + (Double.parseDouble(TableB.getValueAt(22, 1).toString()) + Double.parseDouble(TableB.getValueAt(28, 1).toString())), 2);
                        rowData[2] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(15, 2).toString()) + (Double.parseDouble(TableB.getValueAt(22, 2).toString()) + Double.parseDouble(TableB.getValueAt(28, 2).toString())), 2);
                        rowData[3] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(15, 3).toString()) + (Double.parseDouble(TableB.getValueAt(22, 3).toString()) + Double.parseDouble(TableB.getValueAt(28, 3).toString())), 2);
                        rowData[4] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(15, 4).toString()) + (Double.parseDouble(TableB.getValueAt(22, 4).toString()) + Double.parseDouble(TableB.getValueAt(28, 4).toString())), 2);
                        DataModel.addRow(rowData);
                        rowData = new Object[100];
                        rowData[0] = "Net Budget";
                        rowData[1] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(16, 1).toString()) + (Double.parseDouble(TableB.getValueAt(23, 1).toString()) + Double.parseDouble(TableB.getValueAt(29, 1).toString())), 2);
                        rowData[2] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(16, 2).toString()) + (Double.parseDouble(TableB.getValueAt(23, 2).toString()) + Double.parseDouble(TableB.getValueAt(29, 2).toString())), 2);
                        rowData[3] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(16, 3).toString()) + (Double.parseDouble(TableB.getValueAt(23, 3).toString()) + Double.parseDouble(TableB.getValueAt(29, 3).toString())), 2);
                        rowData[4] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(16, 4).toString()) + (Double.parseDouble(TableB.getValueAt(23, 4).toString()) + Double.parseDouble(TableB.getValueAt(29, 4).toString())), 2);
                        DataModel.addRow(rowData);

                        //BLANK
                        rowData = new Object[100];
                        rowData[0] = "";
                        DataModel.addRow(rowData);
                        //BLANK
                        rowData = new Object[100];
                        rowData[0] = "";
                        DataModel.addRow(rowData);
                        //Invoiced
                        for (k = 1; k < 6; k++) {
                            rowData = new Object[100];
                            rowData[0] = rs.getString("DESCRIPTION");
                            rowData[1] = EITLERPGLOBAL.round(rs.getDouble("NOS"), 2);
                            rowData[2] = EITLERPGLOBAL.round(rs.getDouble("KG"), 2);
                            rowData[3] = EITLERPGLOBAL.round(rs.getDouble("SQMTR"), 2);
                            rowData[4] = EITLERPGLOBAL.round(rs.getDouble("AMOUNT"), 2);
                            DataModel.addRow(rowData);
                            rs.next();
                        }
                        //BLANK
                        rowData = new Object[100];
                        rowData[0] = "";
                        DataModel.addRow(rowData);
                        //BLANK
                        rowData = new Object[100];
                        rowData[0] = "";
                        DataModel.addRow(rowData);
                        // Achivable
                        rowData = new Object[100];
                        rowData[0] = "Net Achivable-PRESS";
                        rowData[1] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(32, 1).toString()) - (Double.parseDouble(TableB.getValueAt(39, 1).toString())), 2);
                        rowData[2] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(32, 2).toString()) - (Double.parseDouble(TableB.getValueAt(39, 2).toString())), 2);
                        rowData[3] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(32, 3).toString()) - (Double.parseDouble(TableB.getValueAt(39, 3).toString())), 2);
                        rowData[4] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(32, 4).toString()) - (Double.parseDouble(TableB.getValueAt(39, 4).toString())), 2);
                        DataModel.addRow(rowData);

                        rowData = new Object[100];
                        rowData[0] = "Net  Achivable-ACNE";
                        rowData[1] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(33, 1).toString()) - (Double.parseDouble(TableB.getValueAt(40, 1).toString())), 2);
                        rowData[2] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(33, 2).toString()) - (Double.parseDouble(TableB.getValueAt(40, 2).toString())), 2);
                        rowData[3] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(33, 3).toString()) - (Double.parseDouble(TableB.getValueAt(40, 3).toString())), 2);
                        rowData[4] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(33, 4).toString()) - (Double.parseDouble(TableB.getValueAt(40, 4).toString())), 2);
                        DataModel.addRow(rowData);
                        rowData = new Object[100];
                        rowData[0] = "Net  Achivable-SDF";
                        rowData[1] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(34, 1).toString()) - (Double.parseDouble(TableB.getValueAt(41, 1).toString())), 2);
                        rowData[2] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(34, 2).toString()) - (Double.parseDouble(TableB.getValueAt(41, 2).toString())), 2);
                        rowData[3] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(34, 3).toString()) - (Double.parseDouble(TableB.getValueAt(41, 3).toString())), 2);
                        rowData[4] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(34, 4).toString()) - (Double.parseDouble(TableB.getValueAt(41, 4).toString())), 2);
                        DataModel.addRow(rowData);
                        rowData = new Object[100];
                        rowData[0] = "Net  Achivable-HDS";
                        rowData[1] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(35, 1).toString()) - (Double.parseDouble(TableB.getValueAt(42, 1).toString())), 2);
                        rowData[2] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(35, 2).toString()) - (Double.parseDouble(TableB.getValueAt(42, 2).toString())), 2);
                        rowData[3] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(35, 3).toString()) - (Double.parseDouble(TableB.getValueAt(42, 3).toString())), 2);
                        rowData[4] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(35, 4).toString()) - (Double.parseDouble(TableB.getValueAt(42, 4).toString())), 2);
                        DataModel.addRow(rowData);
                        rowData = new Object[100];
                        rowData[0] = "Net  Achivable-Total";
                        rowData[1] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(36, 1).toString()) - (Double.parseDouble(TableB.getValueAt(43, 1).toString())), 2);
                        rowData[2] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(36, 2).toString()) - (Double.parseDouble(TableB.getValueAt(43, 2).toString())), 2);
                        rowData[3] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(36, 3).toString()) - (Double.parseDouble(TableB.getValueAt(43, 3).toString())), 2);
                        rowData[4] = EITLERPGLOBAL.round(Double.parseDouble(TableB.getValueAt(36, 4).toString()) - (Double.parseDouble(TableB.getValueAt(43, 4).toString())), 2);
                        DataModel.addRow(rowData);

                    } else {
                        while (!rs.isAfterLast()) {
                            Object[] rowData = new Object[100];
                            rowData[0] = i;
                            for (int j = 1; j < 9; j++) {
                                if (j == 1 || j == 2 || j == 3 || j == 8) {
                                    rowData[j] = rs.getString(j);
                                } else {
                                    rowData[j] = EITLERPGLOBAL.round(rs.getDouble(j), 2);
                                }
                            }
                            DataModel.addRow(rowData);
                            rs.next();
                            i++;
                        }
                    }

                }
                final TableColumnModel columnModel = TableB.getColumnModel();
                for (int column = 0; column < TableB.getColumnCount(); column++) {
                    int width = 100; // Min width
                    for (int row = 0; row < TableB.getRowCount(); row++) {
                        TableCellRenderer renderer = TableB.getCellRenderer(row, column);
                        Component comp = TableB.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
                DataModel.TableReadOnly(true);
            } catch (Exception s) {
                s.printStackTrace();
            }
        }
    }

    private void dataqtr_generate(String msql, String mquater) {

        boolean chk = false;
        ResultSet rs;
        if (txtyear.getText().trim().length() >= 4) {
            chk = true;
        } else {
            JOptionPane.showMessageDialog(this, "Please Enter Year...", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtyear.requestFocus();
        }
        if (chk) {
            try {

                System.out.println("Sql Query :" + msql);
                rs = EITLERP.data.getResult(msql);
                FormatGridqtr(mquater);
                rs.first();
                int i = 1, k = 1;
                if (rs.getRow() > 0) {

                    while (!rs.isAfterLast()) {
                        Object[] rowData = new Object[100];
                        rowData[0] = i;
                        rowData[1] = rs.getString("DESCRIPTION");
                        rowData[2] = rs.getString("PARTY_CODE");
                        rowData[3] = rs.getString("PARTY_NAME");

                        rowData[4] = rs.getInt("Q1");
                        rowData[5] = EITLERPGLOBAL.round(rs.getDouble("Q1KG"), 2);
                        rowData[6] = EITLERPGLOBAL.round(rs.getDouble("Q1SQMTR"), 2);
                        rowData[7] = EITLERPGLOBAL.round(rs.getDouble("Q1AMOUNT"), 2);

                        rowData[8] = rs.getInt("Q2");
                        rowData[9] = EITLERPGLOBAL.round(rs.getDouble("Q2KG"), 2);
                        rowData[10] = EITLERPGLOBAL.round(rs.getDouble("Q2SQMTR"), 2);
                        rowData[11] = EITLERPGLOBAL.round(rs.getDouble("Q2AMOUNT"), 2);

                        rowData[12] = rs.getInt("Q3");
                        rowData[13] = EITLERPGLOBAL.round(rs.getDouble("Q3KG"), 2);
                        rowData[14] = EITLERPGLOBAL.round(rs.getDouble("Q3SQMTR"), 2);
                        rowData[15] = EITLERPGLOBAL.round(rs.getDouble("Q3AMOUNT"), 2);

                        rowData[16] = rs.getInt("Q4");
                        rowData[17] = EITLERPGLOBAL.round(rs.getDouble("Q4KG"), 2);
                        rowData[18] = EITLERPGLOBAL.round(rs.getDouble("Q4SQMTR"), 2);
                        rowData[19] = EITLERPGLOBAL.round(rs.getDouble("Q4AMOUNT"), 2);

                        rowData[20] = rs.getString("PARTY_STATUS");
                        DataModel.addRow(rowData);
                        rs.next();
                        i++;
                    }

                }
                final TableColumnModel columnModel = TableB.getColumnModel();
                for (int column = 0; column < TableB.getColumnCount(); column++) {
                    int width = 100; // Min width
                    for (int row = 0; row < TableB.getRowCount(); row++) {
                        TableCellRenderer renderer = TableB.getCellRenderer(row, column);
                        Component comp = TableB.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
                DataModel.TableReadOnly(true);
            } catch (Exception s) {
                s.printStackTrace();
            }
        }
    }

    private void FormatGrid(String mquater) {
        DataModel = new EITLTableModel();

        TableB.removeAll();
        TableB.setModel(DataModel);
        TableB.setAutoResizeMode(TableB.AUTO_RESIZE_OFF);

        //Set the table Readonly
        DataModel.TableReadOnly(true);
        if (mquater.equalsIgnoreCase("ALL")) {
            //Add the columns
            DataModel.addColumn("Description");                     //0     
            DataModel.addColumn("Nos.");                     //1     
            DataModel.addColumn("KG");              //2
            DataModel.addColumn("SQMTR");          //3
            DataModel.addColumn("Amount [In Lac]");  //4
        } else {
            //Add the columns
            DataModel.addColumn("Sr.No.");                     //0
            DataModel.addColumn("Description");                     //0
            DataModel.addColumn("Party");              //1
            DataModel.addColumn("Name");              //2      
            DataModel.addColumn("Nos.");              //2      
            DataModel.addColumn("KG");              //4
            DataModel.addColumn("SQMTR");          //5
            DataModel.addColumn("Amount [In Lac]");  //6
            DataModel.addColumn("Party Status");  //6
        }

    }

    private void FormatGridqtr(String mquater) {
        DataModel = new EITLTableModel();

        TableB.removeAll();
        TableB.setModel(DataModel);
        TableB.setAutoResizeMode(TableB.AUTO_RESIZE_OFF);

        //Set the table Readonly
        DataModel.TableReadOnly(true);

        //Add the columns
        DataModel.addColumn("Sr.No.");                     //0
        DataModel.addColumn("Description");                     //0
        DataModel.addColumn("Party");              //1
        DataModel.addColumn("Name");              //2      
        DataModel.addColumn("Q1Nos.");              //2              
        DataModel.addColumn("Q1KG");              //4
        DataModel.addColumn("Q1SQMTR");          //5
        DataModel.addColumn("Q1Amount [In Lac]");  //6
        DataModel.addColumn("Q2Nos.");              //2              
        DataModel.addColumn("Q2KG");              //4
        DataModel.addColumn("Q2SQMTR");          //5
        DataModel.addColumn("Q2Amount [In Lac]");  //6
        DataModel.addColumn("Q3Nos.");              //2              
        DataModel.addColumn("Q3KG");              //4
        DataModel.addColumn("Q3SQMTR");          //5
        DataModel.addColumn("Q3Amount [In Lac]");  //6
        DataModel.addColumn("Q4Nos.");              //2              
        DataModel.addColumn("Q4KG");              //4
        DataModel.addColumn("Q4SQMTR");          //5
        DataModel.addColumn("Q4Amount [In Lac]");  //6
        DataModel.addColumn("Party Status");  //6

    }
}
