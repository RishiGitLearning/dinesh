/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.Budget;

import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.FeltFinishing.ReportRegister;
import EITLERP.FeltSales.GroupMasterAmend.clsFeltGroupMasterAmend;
import EITLERP.JTextFieldHint;
import EITLERP.LOV;
import EITLERP.clsSales_Party;
import EITLERP.data;
import java.awt.Component;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Dharmendra
 */
public class xlsNewYearBudget extends javax.swing.JApplet {

    /**
     * Initializes the applet xlsBudget
     */
    private EITLTableModel DataModelBudget = new EITLTableModel();
    private EITLTableModel DataModelNonBudget = new EITLTableModel();
    private EITLTableModel DataModelUnderApprovalBudget = new EITLTableModel();
    public EITLERP.FeltSales.Budget.clsxlsExcelExporter exprt = new EITLERP.FeltSales.Budget.clsxlsExcelExporter();
    private HashMap mmonth;

    @Override

    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        //</editor-fold>

        /* Create and display the applet */
        initComponents();

        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        file1.setVisible(false);
        txtyear.setText(EITLERPGLOBAL.FinToDate.substring(6));
        txtyearFocusLost(null);
        TableB.setAutoCreateRowSorter(true);
        //jLabel35.setVisible(false);
        //txtproductcode.setVisible(false);
        txtproductcode.setText("ALL");
        BudgetTab.remove(jPanel1);
        BudgetTab.remove(jPanel2);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        txtyear = new javax.swing.JTextField();
        BudgetTab = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        bview3 = new javax.swing.JButton();
        bexcel3 = new javax.swing.JButton();
        btngroupwise = new javax.swing.JRadioButton();
        btnpartywise = new javax.swing.JRadioButton();
        btnproductwise = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        bview2 = new javax.swing.JButton();
        bexcel2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        bview = new javax.swing.JButton();
        bexcel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        bview1 = new javax.swing.JButton();
        bexcel1 = new javax.swing.JButton();
        file1 = new javax.swing.JFileChooser();
        lblyearto = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbarea = new javax.swing.JComboBox<String>();
        jLabel3 = new javax.swing.JLabel();
        txtpartycode = new javax.swing.JTextField();
        txtpartyname = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableB = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        txtgroupcode = new javax.swing.JTextField();
        txtgroupname = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtproductcode = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        jLabel1.setText("YEAR :");

        txtyear.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtyearFocusLost(evt);
            }
        });

        BudgetTab.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                BudgetTabStateChanged(evt);
            }
        });

        bview3.setText("View");
        bview3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bview3ActionPerformed(evt);
            }
        });

        bexcel3.setText("Excel");
        bexcel3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bexcel3ActionPerformed(evt);
            }
        });

        buttonGroup1.add(btngroupwise);
        btngroupwise.setSelected(true);
        btngroupwise.setText("GroupWiseSummary");
        btngroupwise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btngroupwiseActionPerformed(evt);
            }
        });

        buttonGroup1.add(btnpartywise);
        btnpartywise.setText("PartyWiseSummary");
        btnpartywise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnpartywiseActionPerformed(evt);
            }
        });

        buttonGroup1.add(btnproductwise);
        btnproductwise.setText("PartyProductWiseSummary");
        btnproductwise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnproductwiseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bview3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bexcel3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btngroupwise)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnpartywise)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnproductwise)
                .addContainerGap(544, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bview3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bexcel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btngroupwise)
                    .addComponent(btnpartywise)
                    .addComponent(btnproductwise))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        BudgetTab.addTab("PartyGroupWise", jPanel4);

        bview2.setText("View");
        bview2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bview2ActionPerformed(evt);
            }
        });

        bexcel2.setText("Excel");
        bexcel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bexcel2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bview2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bexcel2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(961, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bview2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bexcel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        BudgetTab.addTab("ProductWise", jPanel3);

        bview.setText("View");
        bview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bviewActionPerformed(evt);
            }
        });

        bexcel.setText("Excel");
        bexcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bexcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bview, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bexcel, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(961, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bview, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bexcel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        BudgetTab.addTab("PartyWise", jPanel1);

        bview1.setText("View");
        bview1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bview1ActionPerformed(evt);
            }
        });

        bexcel1.setText("Excel");
        bexcel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bexcel1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bview1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bexcel1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(961, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bview1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bexcel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        BudgetTab.addTab("PartyProductWise", jPanel2);

        file1.setFocusable(false);

        lblyearto.setText("YYYY");

        jLabel2.setText("Zone");

        cmbarea.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0-> All Except EXPORT", "1-> SOUTH", "2-> NORTH", "3-> EAST-WEST", "5-> ACNE", "6-> EXPORT", "7-> KEY CLIENT", "8-> OTHER", "9-> All" }));

        jLabel3.setText("Party Code");

        txtpartycode.setToolTipText("Press F1 key for search Party Code");
        txtpartycode = new JTextFieldHint(new JTextField(),"Search by F1");
        txtpartycode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtpartycodeFocusLost(evt);
            }
        });
        txtpartycode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtpartycodeKeyPressed(evt);
            }
        });

        txtpartyname.setDisabledTextColor(java.awt.Color.black);
        txtpartyname = new JTextFieldHint(new JTextField(),"Party Name");
        txtpartyname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpartynameActionPerformed(evt);
            }
        });

        TableB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableB);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Group Code");

        txtgroupcode.setToolTipText("Press F1 key for search Party Code");
        txtgroupcode = new JTextFieldHint(new JTextField(),"Search by F1");
        txtgroupcode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtgroupcodeFocusLost(evt);
            }
        });
        txtgroupcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtgroupcodeKeyPressed(evt);
            }
        });

        txtgroupname.setDisabledTextColor(java.awt.Color.black);
        txtgroupname = new JTextFieldHint(new JTextField(),"Group Name");
        txtgroupname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtgroupnameActionPerformed(evt);
            }
        });

        jLabel35.setText("Product Group");

        txtproductcode.setText("ALL");
        txtproductcode.setToolTipText("Press F! key to search Product Code");
        txtproductcode = new JTextFieldHint(new JTextField(),"Search By Press F1");
        txtproductcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtproductcodeActionPerformed(evt);
            }
        });
        txtproductcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtproductcodeKeyPressed(evt);
            }
        });

        jLabel4.setText("All values in Lac");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BudgetTab, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtyear, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblyearto, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cmbarea, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtpartycode, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtpartyname, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(187, 187, 187)
                                .addComponent(jLabel11)
                                .addGap(18, 18, 18)
                                .addComponent(txtgroupcode, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtgroupname, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(100, 100, 100)
                                        .addComponent(txtproductcode, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(file1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtyear, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblyearto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(file1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbarea, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                                .addComponent(txtpartycode)
                                .addComponent(txtpartyname)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtgroupcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtgroupname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtproductcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BudgetTab, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(17, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bviewActionPerformed
        // TODO add your handling code here:
        String sql;
        String cond = "", cond1 = "";

        if (txtpartycode.getText().trim().length() > 0) {
            cond = cond + " AND B.PARTY_CODE=" + txtpartycode.getText() + " ";
        }
        if (cmbarea.getSelectedItem().toString().substring(0, 1).equals("0")) {

        } else {
            cond = cond + " AND PMST.INCHARGE_CD='" + cmbarea.getSelectedItem().toString().substring(0, 1) + "' ";
        }
        if (txtgroupcode.getText().trim().length() > 0) {
            cond = cond + " AND  GCODE= '" + txtgroupcode.getText().trim() + "' ";
        }
//        if (!txtproductcode.getText().trim().equalsIgnoreCase("ALL")) {
//            cond1 = cond1 + " WHERE PRODUCT_GROUP= '" + txtproductcode.getText().trim() + "' ";
//        }
        sql = "SELECT * FROM "
                + "(SELECT PARTY_CODE,PARTY_NAME,GROUP_DESC AS PARTY_GROUP,INCHARGE_NAME AS ZONE,"
                + "ROUND(SUM(CONSUMPTION_VALUE)/100000,2) AS CONSUMPTION_VALUE,ROUND(SUM(GOAL_VALUE)/100000,2) AS GOAL_VALUE,"
                + "ROUND(SUM(SCHEDULE_VALUE)/100000,2) AS SCHEDULE_VALUE,ROUND((SUM(GOAL_VALUE)-SUM(SCHEDULE_VALUE))/100000,2) AS DIFF_GOAL_SCHEDULE_VALUE,"
                + "ROUND((SUM(CONSUMPTION_VALUE)-SUM(GOAL_VALUE))/100000,2) AS DIFF_CONSUMPTION_GOAL_VALUE "
                + "FROM (SELECT B.PARTY_CODE,B.PARTY_NAME,COALESCE(GROUP_DESC,'') AS GROUP_DESC,"
                + "CASE WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACNE' WHEN GROUP_NAME IN ('SDF') THEN 'SDF' "
                + "WHEN GROUP_NAME IN ('HDS') THEN 'HDS' ELSE 'PRESS' END AS PRODUCT_GROUP,"
                + "INCHARGE_NAME,"
                + "COALESCE(CEILING(COALESCE(MRF,0)/MM_AVG_LIFE),0) AS CONSUMPTION,"
                + "COALESCE(CEILING(COALESCE(MRF,0)/MM_AVG_LIFE),0)*SELLING_PRICE AS CONSUMPTION_VALUE,COALESCE(ACTUAL_BUDGET,0) AS GOAL,"
                + "COALESCE(ACTUAL_BUDGET,0)*SELLING_PRICE AS GOAL_VALUE,COALESCE(CURRENT_PROJECTION,0) AS SCHEDULE,"
                + "COALESCE(CURRENT_PROJECTION,0)*SELLING_PRICE AS SCHEDULE_VALUE FROM PRODUCTION.FELT_BUDGET_REVIEW_DETAIL B "
                + "LEFT JOIN (SELECT MM_AVG_LIFE,MM_ITEM_CODE,MM_UPN_NO "
                + "FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER H,  PRODUCTION.FELT_MACHINE_MASTER_DETAIL D "
                + "WHERE  H.MM_DOC_NO=D.MM_DOC_NO AND H.APPROVED=1 AND H.CANCELED=0 ) AS MM ON MM.MM_UPN_NO=B.UPN "
                + "LEFT JOIN (SELECT PRODUCT_CODE,SQM_RATE,WT_RATE FROM PRODUCTION.FELT_QLT_RATE_MASTER R WHERE EFFECTIVE_TO ='0000-00-00' ) AS QLT "
                + "ON QLT.PRODUCT_CODE=MM_ITEM_CODE "
                + "LEFT JOIN (SELECT PARTY_CODE,INCHARGE_CD FROM DINESHMILLS.D_SAL_PARTY_MASTER ) AS PMST ON PMST.PARTY_CODE=B.PARTY_CODE "
                + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_INCHARGE) AS INCHG ON PMST.INCHARGE_CD=INCHG.INCHARGE_CD "
                + "LEFT JOIN (SELECT DG1.PARTY_CODE,H1.GROUP_CODE AS GCODE,GROUP_DESC "
                + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H1 ,PRODUCTION.FELT_GROUP_MASTER_DETAIL DG1 "
                + "WHERE H1.GROUP_CODE=DG1.GROUP_CODE   AND H1.APPROVED=1 AND H1.CANCELED=0) AS GRP ON GRP.PARTY_CODE=B.PARTY_CODE "
                + "WHERE YEAR_FROM='" + txtyear.getText() + "' AND B.DOC_NO LIKE 'N%' " + cond + ") AS DD "
                + "GROUP BY PARTY_CODE) AS DDD "
                + cond1
                + "ORDER BY DIFF_GOAL_SCHEDULE_VALUE DESC ";
//        sql = "SELECT * FROM (SELECT PARTY_CODE,PARTY_NAME,GROUP_DESC AS PARTY_GROUP,INCHARGE_NAME AS ZONE,"
//                //+ "SUM(CONSUMPTION) AS CONSUMPTION,"
//                + "ROUND(SUM(CONSUMPTION_VALUE)/100000,2) AS CONSUMPTION_VALUE,"
//                //+ "SUM(GOAL) AS GOAL,"
//                + "ROUND(SUM(GOAL_VALUE)/100000,2) AS GOAL_VALUE,"
//                //+ "SUM(SCHEDULE) AS SCHEDULE,"
//                + "ROUND(SUM(SCHEDULE_VALUE)/100000,2) AS SCHEDULE_VALUE,"
//                //+ "SUM(GOAL)-SUM(SCHEDULE) AS DIFF_GOAL_SCHEDULE,"
//                + "ROUND((SUM(GOAL_VALUE)-SUM(SCHEDULE_VALUE))/100000,2) AS DIFF_GOAL_SCHEDULE_VALUE,"
//                //+ "SUM(CONSUMPTION)-SUM(GOAL) AS DIFF_CONSUMTTION_GOAL,"
//                + "ROUND((SUM(CONSUMPTION_VALUE)-SUM(GOAL_VALUE))/100000,2) AS DIFF_CONSUMPTION_GOAL_VALUE "
//                + " FROM (SELECT B.PARTY_CODE,B.PARTY_NAME,GROUP_DESC,INCHARGE_NAME,"
//                + "COALESCE(CEILING(COALESCE(MRF,0)/D.MM_AVG_LIFE),0) AS CONSUMPTION,"
//                + "COALESCE(CEILING(COALESCE(MRF,0)/D.MM_AVG_LIFE),0)*SELLING_PRICE AS CONSUMPTION_VALUE,"
//                + "COALESCE(ACTUAL_BUDGET,0) AS GOAL,COALESCE(ACTUAL_BUDGET,0)*SELLING_PRICE AS GOAL_VALUE,"
//                + "COALESCE(CURRENT_PROJECTION,0) AS SCHEDULE,COALESCE(CURRENT_PROJECTION,0)*SELLING_PRICE AS SCHEDULE_VALUE"
//                + " FROM PRODUCTION.FELT_BUDGET_REVIEW_DETAIL B,PRODUCTION.FELT_MACHINE_MASTER_HEADER H,  "
//                + "PRODUCTION.FELT_MACHINE_MASTER_DETAIL D, PRODUCTION.FELT_QLT_RATE_MASTER R, "
//                + "DINESHMILLS.D_SAL_PARTY_MASTER P , PRODUCTION.FELT_MACHINE_POSITION_MST MP,DINESHMILLS.D_SAL_PARTY_MASTER D1,"
//                + " PRODUCTION.FELT_INCHARGE I,PRODUCTION.FELT_GROUP_MASTER_HEADER H1,PRODUCTION.FELT_GROUP_MASTER_DETAIL DG1 "
//                + "WHERE H1.GROUP_CODE=DG1.GROUP_CODE   AND H1.APPROVED=1 AND H1.CANCELED=0 AND DG1.PARTY_CODE=B.PARTY_CODE "
//                + "AND B.PARTY_CODE=D1.PARTY_CODE AND D1.INCHARGE_CD=I.INCHARGE_CD AND H.MM_DOC_NO=D.MM_DOC_NO AND H.APPROVED=1 AND H.CANCELED=0  AND MM_ITEM_CODE = PRODUCT_CODE  "
//                + "AND EFFECTIVE_TO ='0000-00-00'  AND P.PARTY_CODE = H.MM_PARTY_CODE AND MP.POSITION_NO+0 = MM_MACHINE_POSITION+0 "
//                + "AND D.MM_UPN_NO=B.UPN " + cond + " "
//                + "AND YEAR_FROM='" + txtyear.getText() + "' AND B.DOC_NO LIKE 'N%') AS DD "
//                + "GROUP BY PARTY_CODE) AS DDD "
//                + cond1
//                + "ORDER BY DIFF_GOAL_SCHEDULE_VALUE DESC ";
        data_generate(sql, DataModelBudget, "Party");
    }//GEN-LAST:event_bviewActionPerformed

    private void bexcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bexcelActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableB, new File(file1.getSelectedFile().toString() + ".xls"), "BudgetPartyWise");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_bexcelActionPerformed

    private void txtyearFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtyearFocusLost
        // TODO add your handling code here:
        try {
            lblyearto.setText(String.valueOf(Integer.parseInt(txtyear.getText()) + 1));
        } catch (Exception e) {
            txtyear.setText("");
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtyearFocusLost

    private void txtpartycodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtpartycodeFocusLost
        // TODO add your handling code here:
        if (!txtpartycode.getText().trim().equals("") && data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + txtpartycode.getText().trim() + "' AND MAIN_ACCOUNT_CODE=210010 ")) {
            txtpartyname.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, txtpartycode.getText()));

        } else {
            if (!txtpartycode.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Party Code doesn't exist/under approval.");
            }
            txtpartycode.setText("");
            txtpartyname.setText("");
        }
    }//GEN-LAST:event_txtpartycodeFocusLost

    private void txtpartycodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpartycodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();
            aList.SQL = "SELECT DISTINCT PARTY_CODE,PARTY_NAME FROM PRODUCTION.FELT_BUDGET_REVIEW_DETAIL WHERE YEAR_FROM = " + txtyear.getText() + " ";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtpartycode.setText(aList.ReturnVal);
                txtpartyname.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
            }
        }
    }//GEN-LAST:event_txtpartycodeKeyPressed

    private void txtpartynameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpartynameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtpartynameActionPerformed

    private void bview1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bview1ActionPerformed
        // TODO add your handling code here:
        String sql;
        String cond = "", cond1 = "";

        if (txtpartycode.getText().trim().length() > 0) {
            cond = cond + " AND B.PARTY_CODE=" + txtpartycode.getText() + " ";
        }
        if (cmbarea.getSelectedItem().toString().substring(0, 1).equals("0")) {

        } else {
            cond = cond + " AND PMST.INCHARGE_CD='" + cmbarea.getSelectedItem().toString().substring(0, 1) + "' ";
        }
        if (txtgroupcode.getText().trim().length() > 0) {
            cond = cond + " AND  GCODE= '" + txtgroupcode.getText().trim() + "' ";
        }

        if (!txtproductcode.getText().trim().equalsIgnoreCase("ALL")) {
            cond1 = cond1 + " WHERE PRODUCT_GROUP= '" + txtproductcode.getText().trim() + "' ";
        }
        sql = "SELECT * FROM "
                + "(SELECT PARTY_CODE,PARTY_NAME,GROUP_DESC AS PARTY_GROUP,INCHARGE_NAME AS ZONE,PRODUCT_GROUP,"
                + "ROUND(SUM(CONSUMPTION_VALUE)/100000,2) AS CONSUMPTION_VALUE,ROUND(SUM(GOAL_VALUE)/100000,2) AS GOAL_VALUE,"
                + "ROUND(SUM(SCHEDULE_VALUE)/100000,2) AS SCHEDULE_VALUE,ROUND((SUM(GOAL_VALUE)-SUM(SCHEDULE_VALUE))/100000,2) AS DIFF_GOAL_SCHEDULE_VALUE,"
                + "ROUND((SUM(CONSUMPTION_VALUE)-SUM(GOAL_VALUE))/100000,2) AS DIFF_CONSUMPTION_GOAL_VALUE "
                + "FROM (SELECT B.PARTY_CODE,B.PARTY_NAME,COALESCE(GROUP_DESC,'') AS GROUP_DESC,"
                + "CASE WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACNE' WHEN GROUP_NAME IN ('SDF') THEN 'SDF' "
                + "WHEN GROUP_NAME IN ('HDS') THEN 'HDS' ELSE 'PRESS' END AS PRODUCT_GROUP,"
                + "INCHARGE_NAME,"
                + "COALESCE(CEILING(COALESCE(MRF,0)/MM_AVG_LIFE),0) AS CONSUMPTION,"
                + "COALESCE(CEILING(COALESCE(MRF,0)/MM_AVG_LIFE),0)*SELLING_PRICE AS CONSUMPTION_VALUE,COALESCE(ACTUAL_BUDGET,0) AS GOAL,"
                + "COALESCE(ACTUAL_BUDGET,0)*SELLING_PRICE AS GOAL_VALUE,COALESCE(CURRENT_PROJECTION,0) AS SCHEDULE,"
                + "COALESCE(CURRENT_PROJECTION,0)*SELLING_PRICE AS SCHEDULE_VALUE FROM PRODUCTION.FELT_BUDGET_REVIEW_DETAIL B "
                + "LEFT JOIN (SELECT MM_AVG_LIFE,MM_ITEM_CODE,MM_UPN_NO "
                + "FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER H,  PRODUCTION.FELT_MACHINE_MASTER_DETAIL D "
                + "WHERE  H.MM_DOC_NO=D.MM_DOC_NO AND H.APPROVED=1 AND H.CANCELED=0 ) AS MM ON MM.MM_UPN_NO=B.UPN "
                + "LEFT JOIN (SELECT PRODUCT_CODE,SQM_RATE,WT_RATE FROM PRODUCTION.FELT_QLT_RATE_MASTER R WHERE EFFECTIVE_TO ='0000-00-00' ) AS QLT "
                + "ON QLT.PRODUCT_CODE=MM_ITEM_CODE "
                + "LEFT JOIN (SELECT PARTY_CODE,INCHARGE_CD FROM DINESHMILLS.D_SAL_PARTY_MASTER ) AS PMST ON PMST.PARTY_CODE=B.PARTY_CODE "
                + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_INCHARGE) AS INCHG ON PMST.INCHARGE_CD=INCHG.INCHARGE_CD "
                + "LEFT JOIN (SELECT DG1.PARTY_CODE,H1.GROUP_CODE AS GCODE,GROUP_DESC "
                + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H1 ,PRODUCTION.FELT_GROUP_MASTER_DETAIL DG1 "
                + "WHERE H1.GROUP_CODE=DG1.GROUP_CODE   AND H1.APPROVED=1 AND H1.CANCELED=0) AS GRP ON GRP.PARTY_CODE=B.PARTY_CODE "
                + "WHERE YEAR_FROM='" + txtyear.getText() + "' AND B.DOC_NO LIKE 'N%' " + cond + ") AS DD "
                + "GROUP BY PARTY_CODE,PRODUCT_GROUP) AS DDD "
                + cond1
                + "ORDER BY DIFF_GOAL_SCHEDULE_VALUE DESC ";

//        sql = "SELECT * FROM (SELECT PARTY_CODE,PARTY_NAME,GROUP_DESC AS PARTY_GROUP,INCHARGE_NAME AS ZONE,PRODUCT_GROUP,"
//                //+ "SUM(CONSUMPTION) AS CONSUMPTION,"
//                + "ROUND(SUM(CONSUMPTION_VALUE)/100000,2) AS CONSUMPTION_VALUE,"
//                //+ "SUM(GOAL) AS GOAL,"
//                + "ROUND(SUM(GOAL_VALUE)/100000,2) AS GOAL_VALUE,"
//                //+ "SUM(SCHEDULE) AS SCHEDULE,"
//                + "ROUND(SUM(SCHEDULE_VALUE)/100000,2) AS SCHEDULE_VALUE,"
//                //+ "SUM(GOAL)-SUM(SCHEDULE) AS DIFF_GOAL_SCHEDULE,"
//                + "ROUND((SUM(GOAL_VALUE)-SUM(SCHEDULE_VALUE))/100000,2) AS DIFF_GOAL_SCHEDULE_VALUE,"
//                //+ "SUM(CONSUMPTION)-SUM(GOAL) AS DIFF_CONSUMTTION_GOAL,"
//                + "ROUND((SUM(CONSUMPTION_VALUE)-SUM(GOAL_VALUE))/100000,2) AS DIFF_CONSUMPTION_GOAL_VALUE "
//                + " FROM (SELECT B.PARTY_CODE,B.PARTY_NAME,GROUP_DESC,INCHARGE_NAME,"
//                + "CASE WHEN B.GROUP_NAME IN ('ACNE','FCNE') THEN 'ACNE' WHEN B.GROUP_NAME IN ('SDF') THEN 'SDF' WHEN B.GROUP_NAME IN ('HDS') THEN 'HDS' ELSE 'PRESS' END AS PRODUCT_GROUP,"
//                + "COALESCE(CEILING(COALESCE(MRF,0)/D.MM_AVG_LIFE),0) AS CONSUMPTION,"
//                + "COALESCE(CEILING(COALESCE(MRF,0)/D.MM_AVG_LIFE),0)*SELLING_PRICE AS CONSUMPTION_VALUE,"
//                + "COALESCE(ACTUAL_BUDGET,0) AS GOAL,COALESCE(ACTUAL_BUDGET,0)*SELLING_PRICE AS GOAL_VALUE,"
//                + "COALESCE(CURRENT_PROJECTION,0) AS SCHEDULE,COALESCE(CURRENT_PROJECTION,0)*SELLING_PRICE AS SCHEDULE_VALUE"
//                + " FROM PRODUCTION.FELT_BUDGET_REVIEW_DETAIL B,PRODUCTION.FELT_MACHINE_MASTER_HEADER H,  "
//                + "PRODUCTION.FELT_MACHINE_MASTER_DETAIL D, PRODUCTION.FELT_QLT_RATE_MASTER R, "
//                + "DINESHMILLS.D_SAL_PARTY_MASTER P , PRODUCTION.FELT_MACHINE_POSITION_MST MP,DINESHMILLS.D_SAL_PARTY_MASTER D1,"
//                + " PRODUCTION.FELT_INCHARGE I,PRODUCTION.FELT_GROUP_MASTER_HEADER H1,PRODUCTION.FELT_GROUP_MASTER_DETAIL DG1 "
//                + "WHERE H1.GROUP_CODE=DG1.GROUP_CODE   AND H1.APPROVED=1 AND H1.CANCELED=0 AND DG1.PARTY_CODE=B.PARTY_CODE "
//                + "AND B.PARTY_CODE=D1.PARTY_CODE AND D1.INCHARGE_CD=I.INCHARGE_CD AND H.MM_DOC_NO=D.MM_DOC_NO AND H.APPROVED=1 AND H.CANCELED=0  AND MM_ITEM_CODE = PRODUCT_CODE  "
//                + "AND EFFECTIVE_TO ='0000-00-00'  AND P.PARTY_CODE = H.MM_PARTY_CODE AND MP.POSITION_NO+0 = MM_MACHINE_POSITION+0 "
//                + "AND D.MM_UPN_NO=B.UPN " + cond + " "
//                + "AND YEAR_FROM='" + txtyear.getText() + "' AND B.DOC_NO LIKE 'N%') AS DD "
//                + "GROUP BY PARTY_CODE,PRODUCT_GROUP) AS DDD "
//                + cond1
//                + "ORDER BY DIFF_GOAL_SCHEDULE_VALUE DESC ";
        data_generate(sql, DataModelBudget, "PartyProduct");
    }//GEN-LAST:event_bview1ActionPerformed

    private void bexcel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bexcel1ActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableB, new File(file1.getSelectedFile().toString() + ".xls"), "BudgetPartyProductWise");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_bexcel1ActionPerformed

    private void txtgroupcodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtgroupcodeFocusLost
        // TODO add your handling code here:
        if (txtgroupcode.getText().trim().length() == 0) {
            txtgroupname.setText("");
        }
    }//GEN-LAST:event_txtgroupcodeFocusLost

    private void txtgroupcodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtgroupcodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            aList.SQL = "SELECT GROUP_CODE,GROUP_DESC FROM PRODUCTION.FELT_GROUP_MASTER_HEADER WHERE APPROVED=1 AND CANCELED=0 ORDER BY GROUP_CODE";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                txtgroupcode.setText(aList.ReturnVal);
                txtgroupname.setText(clsFeltGroupMasterAmend.getgroupdesc(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
            }
        }
    }//GEN-LAST:event_txtgroupcodeKeyPressed

    private void txtgroupnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtgroupnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtgroupnameActionPerformed

    private void txtproductcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtproductcodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtproductcodeActionPerformed

    private void txtproductcodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtproductcodeKeyPressed

        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();
            //aList.SQL="SELECT PARTY_CODE,NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER ORDER BY NAME";
            //            aList.SQL = "SELECT SUBSTRING(ITEM_CODE,1,6) AS ITEM_CODE,ITEM_DESC,GRUP FROM PRODUCTION.FELT_RATE_MASTER ORDER BY ITEM_CODE ";
            aList.SQL = "SELECT 'ALL' AS PRODUCT_GROUP,'ALL' AS PRODUCT_GROUP_CODE FROM DUAL "
                    + "UNION ALL SELECT 'PRESS','PRESS' FROM DUAL "
                    + "UNION ALL SELECT 'ACNE','ACNE' FROM DUAL "
                    + "UNION ALL SELECT 'HDS','HDS' FROM DUAL "
                    + "UNION ALL SELECT 'SDF','SDF' FROM DUAL ";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            if (aList.ShowLOV()) {
                //txtpartycode.setText(aList.ReturnVal);
                //txtpartyname.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID,aList.ReturnVal));
                //txtproductcode.setText(aList.ReturnVal);
                txtproductcode.setText(aList.ReturnVal);
            }
        }
    }//GEN-LAST:event_txtproductcodeKeyPressed

    private void bview2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bview2ActionPerformed
        // TODO add your handling code here:
        String sql;
        String cond = "", cond1 = "";

        if (txtpartycode.getText().trim().length() > 0) {
            cond = cond + " AND B.PARTY_CODE=" + txtpartycode.getText() + " ";
        }
        if (cmbarea.getSelectedItem().toString().substring(0, 1).equals("9")) {

        }
        else if(cmbarea.getSelectedItem().toString().substring(0, 1).equals("0"))
        {
            cond = cond + " AND PMST.INCHARGE_CD!='6' ";
        }else {
            cond = cond + " AND PMST.INCHARGE_CD='" + cmbarea.getSelectedItem().toString().substring(0, 1) + "' ";
        }
        
        /*
        if (cmbarea.getSelectedItem().toString().substring(0, 1).equals("9")) {

        }
        else if (cmbarea.getSelectedItem().toString().substring(0, 1).equals("0")) {
            cond = cond + " AND PMST.INCHARGE_CD!='6' ";
        }else {
            cond = cond + " AND PMST.INCHARGE_CD='" + cmbarea.getSelectedItem().toString().substring(0, 1) + "' ";
        }
        */
        
        if (txtgroupcode.getText().trim().length() > 0) {
            cond = cond + " AND  GCODE= '" + txtgroupcode.getText().trim() + "' ";
        }
        if (!txtproductcode.getText().trim().equalsIgnoreCase("ALL")) {
            cond1 = cond1 + " WHERE  PRODUCT_GROUP= '" + txtproductcode.getText().trim() + "' ";
        }

        sql = "SELECT * FROM "
                + "(SELECT PRODUCT_GROUP,"
                + "ROUND(SUM(CONSUMPTION_VALUE)/100000,2) AS CONSUMPTION_VALUE,ROUND(SUM(GOAL_VALUE)/100000,2) AS GOAL_VALUE,"
                + "ROUND(SUM(SCHEDULE_VALUE)/100000,2) AS SCHEDULE_VALUE,ROUND((SUM(GOAL_VALUE)-SUM(SCHEDULE_VALUE))/100000,2) AS DIFF_GOAL_SCHEDULE_VALUE,"
                + "ROUND((SUM(CONSUMPTION_VALUE)-SUM(GOAL_VALUE))/100000,2) AS DIFF_CONSUMPTION_GOAL_VALUE ";
        for (int a = 4; a <= 12; a++) {
            sql = sql + ",ROUND(SUM(" + mmonth.get(a) + "_BUDGET)/100000,2) AS '" + mmonth.get(a) + "'";
        }
        for (int a = 1; a <= 3; a++) {
            sql = sql + ",ROUND(SUM(" + mmonth.get(a) + "_BUDGET)/100000,2) AS '" + mmonth.get(a) + "'";
        }

        sql = sql + " FROM (SELECT B.PARTY_CODE,B.PARTY_NAME,COALESCE(GROUP_DESC,'') AS GROUP_DESC,"
                + "CASE WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACNE' WHEN GROUP_NAME IN ('SDF') THEN 'SDF' "
                + "WHEN GROUP_NAME IN ('HDS') THEN 'HDS' ELSE 'PRESS' END AS PRODUCT_GROUP,"
                + "INCHARGE_NAME";
        for (int a = 4; a <= 12; a++) {
            sql = sql + ",COALESCE(" + mmonth.get(a) + "_BUDGET,0)*SELLING_PRICE AS " + mmonth.get(a) + "_BUDGET";
        }
        for (int a = 1; a <= 3; a++) {
            sql = sql + ",COALESCE(" + mmonth.get(a) + "_BUDGET,0)*SELLING_PRICE AS " + mmonth.get(a) + "_BUDGET";
        }
        sql = sql + ",COALESCE(CEILING(COALESCE(MRF,0)/MM_AVG_LIFE),0) AS CONSUMPTION,"
                + "COALESCE(CEILING(COALESCE(MRF,0)/MM_AVG_LIFE),0)*SELLING_PRICE AS CONSUMPTION_VALUE,COALESCE(ACTUAL_BUDGET,0) AS GOAL,"
                + "COALESCE(ACTUAL_BUDGET,0)*SELLING_PRICE AS GOAL_VALUE,COALESCE(CURRENT_PROJECTION,0) AS SCHEDULE,"
                + "COALESCE(CURRENT_PROJECTION,0)*SELLING_PRICE AS SCHEDULE_VALUE FROM PRODUCTION.FELT_BUDGET_REVIEW_DETAIL B "
                + "LEFT JOIN (SELECT MM_AVG_LIFE,MM_ITEM_CODE,MM_UPN_NO "
                + "FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER H,  PRODUCTION.FELT_MACHINE_MASTER_DETAIL D "
                + "WHERE  H.MM_DOC_NO=D.MM_DOC_NO AND H.APPROVED=1 AND H.CANCELED=0 ) AS MM ON MM.MM_UPN_NO=B.UPN "
                + "LEFT JOIN (SELECT PRODUCT_CODE,SQM_RATE,WT_RATE FROM PRODUCTION.FELT_QLT_RATE_MASTER R WHERE EFFECTIVE_TO ='0000-00-00' ) AS QLT "
                + "ON QLT.PRODUCT_CODE=MM_ITEM_CODE "
                + "LEFT JOIN (SELECT PARTY_CODE,INCHARGE_CD FROM DINESHMILLS.D_SAL_PARTY_MASTER ) AS PMST ON PMST.PARTY_CODE=B.PARTY_CODE "
                + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_INCHARGE) AS INCHG ON PMST.INCHARGE_CD=INCHG.INCHARGE_CD "
                + "LEFT JOIN (SELECT DG1.PARTY_CODE,H1.GROUP_CODE AS GCODE,GROUP_DESC "
                + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H1 ,PRODUCTION.FELT_GROUP_MASTER_DETAIL DG1 "
                + "WHERE H1.GROUP_CODE=DG1.GROUP_CODE   AND H1.APPROVED=1 AND H1.CANCELED=0) AS GRP ON GRP.PARTY_CODE=B.PARTY_CODE "
                + "WHERE YEAR_FROM='" + txtyear.getText() + "' AND B.DOC_NO LIKE 'N%' " + cond + ") AS DD "
                + "GROUP BY PRODUCT_GROUP) AS DDD "
                + cond1
                + "ORDER BY DIFF_GOAL_SCHEDULE_VALUE DESC ";

//        sql = "SELECT * FROM (SELECT PRODUCT_GROUP,"
//                //+ "SUM(CONSUMPTION) AS CONSUMPTION,"
//                + "ROUND(SUM(CONSUMPTION_VALUE)/100000,2) AS CONSUMPTION_VALUE,"
//                //+ "SUM(GOAL) AS GOAL,"
//                + "ROUND(SUM(GOAL_VALUE)/100000,2) AS GOAL_VALUE,"
//                //+ "SUM(SCHEDULE) AS SCHEDULE,"
//                + "ROUND(SUM(SCHEDULE_VALUE)/100000,2) AS SCHEDULE_VALUE,"
//                //+ "SUM(GOAL)-SUM(SCHEDULE) AS DIFF_GOAL_SCHEDULE,"
//                + "ROUND((SUM(GOAL_VALUE)-SUM(SCHEDULE_VALUE))/100000,2) AS DIFF_GOAL_SCHEDULE_VALUE,"
//                //+ "SUM(CONSUMPTION)-SUM(GOAL) AS DIFF_CONSUMTTION_GOAL,"
//                + "ROUND((SUM(CONSUMPTION_VALUE)-SUM(GOAL_VALUE))/100000,2) AS DIFF_CONSUMPTION_GOAL_VALUE "
//                + " FROM (SELECT B.PARTY_CODE,B.PARTY_NAME,INCHARGE_NAME,"
//                + "CASE WHEN B.GROUP_NAME IN ('ACNE','FCNE') THEN 'ACNE' WHEN B.GROUP_NAME IN ('SDF') THEN 'SDF' WHEN B.GROUP_NAME IN ('HDS') THEN 'HDS' ELSE 'PRESS' END AS PRODUCT_GROUP,"
//                + "COALESCE(CEILING(COALESCE(MRF,0)/D.MM_AVG_LIFE),0) AS CONSUMPTION,"
//                + "COALESCE(CEILING(COALESCE(MRF,0)/D.MM_AVG_LIFE),0)*SELLING_PRICE AS CONSUMPTION_VALUE,"
//                + "COALESCE(ACTUAL_BUDGET,0) AS GOAL,COALESCE(ACTUAL_BUDGET,0)*SELLING_PRICE AS GOAL_VALUE,"
//                + "COALESCE(CURRENT_PROJECTION,0) AS SCHEDULE,COALESCE(CURRENT_PROJECTION,0)*SELLING_PRICE AS SCHEDULE_VALUE"
//                + " FROM PRODUCTION.FELT_BUDGET_REVIEW_DETAIL B,PRODUCTION.FELT_MACHINE_MASTER_HEADER H,  "
//                + "PRODUCTION.FELT_MACHINE_MASTER_DETAIL D, PRODUCTION.FELT_QLT_RATE_MASTER R, "
//                + "DINESHMILLS.D_SAL_PARTY_MASTER P , PRODUCTION.FELT_MACHINE_POSITION_MST MP,DINESHMILLS.D_SAL_PARTY_MASTER D1,"
//                + " PRODUCTION.FELT_INCHARGE I,PRODUCTION.FELT_GROUP_MASTER_HEADER H1,PRODUCTION.FELT_GROUP_MASTER_DETAIL DG1 "
//                + "WHERE H1.GROUP_CODE=DG1.GROUP_CODE   AND H1.APPROVED=1 AND H1.CANCELED=0 AND DG1.PARTY_CODE=B.PARTY_CODE "
//                + "AND B.PARTY_CODE=D1.PARTY_CODE AND D1.INCHARGE_CD=I.INCHARGE_CD AND H.MM_DOC_NO=D.MM_DOC_NO AND H.APPROVED=1 AND H.CANCELED=0  AND MM_ITEM_CODE = PRODUCT_CODE  "
//                + "AND EFFECTIVE_TO ='0000-00-00'  AND P.PARTY_CODE = H.MM_PARTY_CODE AND MP.POSITION_NO+0 = MM_MACHINE_POSITION+0 "
//                + "AND D.MM_UPN_NO=B.UPN " + cond + " "
//                + "AND YEAR_FROM='" + txtyear.getText() + "' AND B.DOC_NO LIKE 'N%') AS DD "
//                + "GROUP BY PRODUCT_GROUP) AS DDD "
//                + "ORDER BY DIFF_GOAL_SCHEDULE_VALUE DESC ";
        data_generate(sql, DataModelBudget, "Product");
    }//GEN-LAST:event_bview2ActionPerformed

    private void bexcel2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bexcel2ActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableB, new File(file1.getSelectedFile().toString() + ".xls"), "BudgetProductWise");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_bexcel2ActionPerformed

    private void BudgetTabStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_BudgetTabStateChanged
        // TODO add your handling code here:
        try {
            if (BudgetTab.getTitleAt(BudgetTab.getSelectedIndex()).equalsIgnoreCase("PartyWise")) {
                jLabel35.setVisible(false);
                txtproductcode.setVisible(false);
                bviewActionPerformed(null);
            }
            if (BudgetTab.getTitleAt(BudgetTab.getSelectedIndex()).equalsIgnoreCase("PartyProductWise")) {
                jLabel35.setVisible(true);
                txtproductcode.setVisible(true);
                bview1ActionPerformed(null);
            }
            if (BudgetTab.getTitleAt(BudgetTab.getSelectedIndex()).equalsIgnoreCase("ProductWise")) {
                jLabel35.setVisible(true);
                txtproductcode.setVisible(true);
                bview2ActionPerformed(null);
            }
            if (BudgetTab.getTitleAt(BudgetTab.getSelectedIndex()).equalsIgnoreCase("PartyGroupWise")) {
                jLabel35.setVisible(true);
                txtproductcode.setVisible(true);
                bview3ActionPerformed(null);
            }

        } catch (Exception e) {
        }
    }//GEN-LAST:event_BudgetTabStateChanged

    private void bview3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bview3ActionPerformed
        // TODO add your handling code here:
        mmonth = new HashMap();
        mmonth.put(1, "JAN");
        mmonth.put(2, "FEB");
        mmonth.put(3, "MAR");
        mmonth.put(4, "APR");
        mmonth.put(5, "MAY");
        mmonth.put(6, "JUN");
        mmonth.put(7, "JUL");
        mmonth.put(8, "AUG");
        mmonth.put(9, "SEP");
        mmonth.put(10, "OCT");
        mmonth.put(11, "NOV");
        mmonth.put(12, "DEC");

        String sql;
        String cond = "", cond1 = "";

        if (txtpartycode.getText().trim().length() > 0) {
            cond = cond + " AND B.PARTY_CODE=" + txtpartycode.getText() + " ";
        }
        
        if (cmbarea.getSelectedItem().toString().substring(0, 1).equals("9")) {

        }
        else if (cmbarea.getSelectedItem().toString().substring(0, 1).equals("0")) {
            cond = cond + " AND PMST.INCHARGE_CD!='6' ";
        }else {
            cond = cond + " AND PMST.INCHARGE_CD='" + cmbarea.getSelectedItem().toString().substring(0, 1) + "' ";
        }
        
        if (txtgroupcode.getText().trim().length() > 0) {
            cond = cond + " AND  GCODE= '" + txtgroupcode.getText().trim() + "' ";
        }

        if (!txtproductcode.getText().trim().equalsIgnoreCase("ALL")) {
            cond1 = cond1 + " WHERE PRODUCT_GROUP= '" + txtproductcode.getText().trim() + "' ";
        }
        if (btngroupwise.isSelected()) {
            sql = "SELECT * FROM "
                    + "(SELECT CASE WHEN GROUP_DESC=PARTY_CODE THEN PARTY_NAME ELSE GROUP_DESC END AS PARTY_NAME,INCHARGE_NAME AS ZONE,";
            if (!txtproductcode.getText().trim().equalsIgnoreCase("ALL")) {
                sql = sql + "PRODUCT_GROUP,";
            } else {
                sql = sql + "'ALL' AS PRODUCT_GROUP,";
            }
            sql = sql + "ROUND(SUM(CONSUMPTION_VALUE)/100000,2) AS CONSUMPTION_VALUE,ROUND(SUM(GOAL_VALUE)/100000,2) AS GOAL_VALUE,"
                    + "ROUND(SUM(SCHEDULE_VALUE)/100000,2) AS SCHEDULE_VALUE,ROUND((SUM(GOAL_VALUE)-SUM(SCHEDULE_VALUE))/100000,2) AS DIFF_GOAL_SCHEDULE_VALUE,"
                    + "ROUND((SUM(CONSUMPTION_VALUE)-SUM(GOAL_VALUE))/100000,2) AS DIFF_CONSUMPTION_GOAL_VALUE ";
            for (int a = 4; a <= 12; a++) {
                sql = sql + ",ROUND(SUM(" + mmonth.get(a) + "_BUDGET)/100000,2) AS '" + mmonth.get(a) + "'";
            }
            for (int a = 1; a <= 3; a++) {
                sql = sql + ",ROUND(SUM(" + mmonth.get(a) + "_BUDGET)/100000,2) AS '" + mmonth.get(a) + "'";
            }
            sql = sql + " FROM (SELECT B.PARTY_CODE,B.PARTY_NAME,"
                    + "CASE WHEN COALESCE(GROUP_DESC,'')='' THEN B.PARTY_CODE ELSE COALESCE(GROUP_DESC,'') END AS GROUP_DESC,"
                    + "CASE WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACNE' WHEN GROUP_NAME IN ('SDF') THEN 'SDF' "
                    + "WHEN GROUP_NAME IN ('HDS') THEN 'HDS' ELSE 'PRESS' END AS PRODUCT_GROUP,"
                    + "INCHARGE_NAME";
            for (int a = 4; a <= 12; a++) {
                sql = sql + ",COALESCE(" + mmonth.get(a) + "_BUDGET,0)*SELLING_PRICE AS " + mmonth.get(a) + "_BUDGET";
            }
            for (int a = 1; a <= 3; a++) {
                sql = sql + ",COALESCE(" + mmonth.get(a) + "_BUDGET,0)*SELLING_PRICE AS " + mmonth.get(a) + "_BUDGET";
            }
            sql = sql + ",COALESCE(CEILING(COALESCE(MRF,0)/MM_AVG_LIFE),0) AS CONSUMPTION,"
                    + "COALESCE(CEILING(COALESCE(MRF,0)/MM_AVG_LIFE),0)*SELLING_PRICE AS CONSUMPTION_VALUE,COALESCE(ACTUAL_BUDGET,0) AS GOAL,"
                    + "COALESCE(ACTUAL_BUDGET,0)*SELLING_PRICE AS GOAL_VALUE,COALESCE(CURRENT_PROJECTION,0) AS SCHEDULE,"
                    + "COALESCE(CURRENT_PROJECTION,0)*SELLING_PRICE AS SCHEDULE_VALUE FROM PRODUCTION.FELT_BUDGET_REVIEW_DETAIL B "
                    + "LEFT JOIN (SELECT MM_AVG_LIFE,MM_ITEM_CODE,MM_UPN_NO "
                    + "FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER H,  PRODUCTION.FELT_MACHINE_MASTER_DETAIL D "
                    + "WHERE  H.MM_DOC_NO=D.MM_DOC_NO AND H.APPROVED=1 AND H.CANCELED=0 ) AS MM ON MM.MM_UPN_NO=B.UPN "
                    + "LEFT JOIN (SELECT PRODUCT_CODE,SQM_RATE,WT_RATE FROM PRODUCTION.FELT_QLT_RATE_MASTER R WHERE EFFECTIVE_TO ='0000-00-00' ) AS QLT "
                    + "ON QLT.PRODUCT_CODE=MM_ITEM_CODE "
                    + "LEFT JOIN (SELECT PARTY_CODE,INCHARGE_CD FROM DINESHMILLS.D_SAL_PARTY_MASTER ) AS PMST ON PMST.PARTY_CODE=B.PARTY_CODE "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_INCHARGE) AS INCHG ON PMST.INCHARGE_CD=INCHG.INCHARGE_CD "
                    + "LEFT JOIN (SELECT DG1.PARTY_CODE,H1.GROUP_CODE AS GCODE,GROUP_DESC "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H1 ,PRODUCTION.FELT_GROUP_MASTER_DETAIL DG1 "
                    + "WHERE H1.GROUP_CODE=DG1.GROUP_CODE   AND H1.APPROVED=1 AND H1.CANCELED=0) AS GRP ON GRP.PARTY_CODE=B.PARTY_CODE "
                    + "WHERE YEAR_FROM='" + txtyear.getText() + "' AND B.DOC_NO LIKE 'N%' " + cond + ") AS DD "
                    + "GROUP BY GROUP_DESC";
            if (!txtproductcode.getText().toString().equalsIgnoreCase("ALL")) {
                sql = sql + ",PRODUCT_GROUP";
            }
            sql = sql + ") AS DDD "
                    + cond1
                    + "ORDER BY DIFF_GOAL_SCHEDULE_VALUE DESC ";
            data_generate(sql, DataModelBudget, "PartyGroupWise");
        }
        if (btnpartywise.isSelected()) {

            cond = "";
            cond1 = "";

            if (txtpartycode.getText().trim().length() > 0) {
                cond = cond + " AND B.PARTY_CODE=" + txtpartycode.getText() + " ";
            }
            if (cmbarea.getSelectedItem().toString().substring(0, 1).equals("9")) {

            }
            else if (cmbarea.getSelectedItem().toString().substring(0, 1).equals("0")) {
                cond = cond + " AND PMST.INCHARGE_CD!='6' ";
            }
            else {
                cond = cond + " AND PMST.INCHARGE_CD='" + cmbarea.getSelectedItem().toString().substring(0, 1) + "' ";
            }
            if (txtgroupcode.getText().trim().length() > 0) {
                cond = cond + " AND  GCODE= '" + txtgroupcode.getText().trim() + "' ";
            }
//        if (!txtproductcode.getText().trim().equalsIgnoreCase("ALL")) {
//            cond1 = cond1 + " WHERE PRODUCT_GROUP= '" + txtproductcode.getText().trim() + "' ";
//        }
            sql = "SELECT * FROM "
                    + "(SELECT PARTY_CODE,PARTY_NAME,GROUP_DESC AS PARTY_GROUP,INCHARGE_NAME AS ZONE,"
                    + "ROUND(SUM(CONSUMPTION_VALUE)/100000,2) AS CONSUMPTION_VALUE,ROUND(SUM(GOAL_VALUE)/100000,2) AS GOAL_VALUE,"
                    + "ROUND(SUM(SCHEDULE_VALUE)/100000,2) AS SCHEDULE_VALUE,ROUND((SUM(GOAL_VALUE)-SUM(SCHEDULE_VALUE))/100000,2) AS DIFF_GOAL_SCHEDULE_VALUE,"
                    + "ROUND((SUM(CONSUMPTION_VALUE)-SUM(GOAL_VALUE))/100000,2) AS DIFF_CONSUMPTION_GOAL_VALUE ";
            for (int a = 4; a <= 12; a++) {
                sql = sql + ",ROUND(SUM(" + mmonth.get(a) + "_BUDGET)/100000,2) AS '" + mmonth.get(a) + "'";
            }
            for (int a = 1; a <= 3; a++) {
                sql = sql + ",ROUND(SUM(" + mmonth.get(a) + "_BUDGET)/100000,2) AS '" + mmonth.get(a) + "'";
            }

            sql = sql + " FROM (SELECT B.PARTY_CODE,B.PARTY_NAME,COALESCE(GROUP_DESC,'') AS GROUP_DESC,"
                    + "CASE WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACNE' WHEN GROUP_NAME IN ('SDF') THEN 'SDF' "
                    + "WHEN GROUP_NAME IN ('HDS') THEN 'HDS' ELSE 'PRESS' END AS PRODUCT_GROUP,"
                    + "INCHARGE_NAME";
            for (int a = 4; a <= 12; a++) {
                sql = sql + ",COALESCE(" + mmonth.get(a) + "_BUDGET,0)*SELLING_PRICE AS " + mmonth.get(a) + "_BUDGET";
            }
            for (int a = 1; a <= 3; a++) {
                sql = sql + ",COALESCE(" + mmonth.get(a) + "_BUDGET,0)*SELLING_PRICE AS " + mmonth.get(a) + "_BUDGET";
            }
            sql = sql + ",COALESCE(CEILING(COALESCE(MRF,0)/MM_AVG_LIFE),0) AS CONSUMPTION,"
                    + "COALESCE(CEILING(COALESCE(MRF,0)/MM_AVG_LIFE),0)*SELLING_PRICE AS CONSUMPTION_VALUE,COALESCE(ACTUAL_BUDGET,0) AS GOAL,"
                    + "COALESCE(ACTUAL_BUDGET,0)*SELLING_PRICE AS GOAL_VALUE,COALESCE(CURRENT_PROJECTION,0) AS SCHEDULE,"
                    + "COALESCE(CURRENT_PROJECTION,0)*SELLING_PRICE AS SCHEDULE_VALUE FROM PRODUCTION.FELT_BUDGET_REVIEW_DETAIL B "
                    + "LEFT JOIN (SELECT MM_AVG_LIFE,MM_ITEM_CODE,MM_UPN_NO "
                    + "FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER H,  PRODUCTION.FELT_MACHINE_MASTER_DETAIL D "
                    + "WHERE  H.MM_DOC_NO=D.MM_DOC_NO AND H.APPROVED=1 AND H.CANCELED=0 ) AS MM ON MM.MM_UPN_NO=B.UPN "
                    + "LEFT JOIN (SELECT PRODUCT_CODE,SQM_RATE,WT_RATE FROM PRODUCTION.FELT_QLT_RATE_MASTER R WHERE EFFECTIVE_TO ='0000-00-00' ) AS QLT "
                    + "ON QLT.PRODUCT_CODE=MM_ITEM_CODE "
                    + "LEFT JOIN (SELECT PARTY_CODE,INCHARGE_CD FROM DINESHMILLS.D_SAL_PARTY_MASTER ) AS PMST ON PMST.PARTY_CODE=B.PARTY_CODE "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_INCHARGE) AS INCHG ON PMST.INCHARGE_CD=INCHG.INCHARGE_CD "
                    + "LEFT JOIN (SELECT DG1.PARTY_CODE,H1.GROUP_CODE AS GCODE,GROUP_DESC "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H1 ,PRODUCTION.FELT_GROUP_MASTER_DETAIL DG1 "
                    + "WHERE H1.GROUP_CODE=DG1.GROUP_CODE   AND H1.APPROVED=1 AND H1.CANCELED=0) AS GRP ON GRP.PARTY_CODE=B.PARTY_CODE "
                    + "WHERE YEAR_FROM='" + txtyear.getText() + "' AND B.DOC_NO LIKE 'N%' " + cond + ") AS DD "
                    + "GROUP BY PARTY_CODE) AS DDD "
                    + cond1
                    + "ORDER BY DIFF_GOAL_SCHEDULE_VALUE DESC ";
            data_generate(sql, DataModelBudget, "Party");
        }
        if (btnproductwise.isSelected()) {

            cond = "";
            cond1 = "";

            if (txtpartycode.getText().trim().length() > 0) {
                cond = cond + " AND B.PARTY_CODE=" + txtpartycode.getText() + " ";
            }
            if (cmbarea.getSelectedItem().toString().substring(0, 1).equals("9")) {

            } 
            else if (cmbarea.getSelectedItem().toString().substring(0, 1).equals("0")) {
                cond = cond + " AND PMST.INCHARGE_CD!='6' ";
            }
            else {
                cond = cond + " AND PMST.INCHARGE_CD='" + cmbarea.getSelectedItem().toString().substring(0, 1) + "' ";
            }
            if (txtgroupcode.getText().trim().length() > 0) {
                cond = cond + " AND  GCODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!txtproductcode.getText().trim().equalsIgnoreCase("ALL")) {
                cond1 = cond1 + " WHERE PRODUCT_GROUP= '" + txtproductcode.getText().trim() + "' ";
            }
            sql = "SELECT * FROM "
                    + "(SELECT PARTY_CODE,PARTY_NAME,GROUP_DESC AS PARTY_GROUP,INCHARGE_NAME AS ZONE,PRODUCT_GROUP,"
                    + "ROUND(SUM(CONSUMPTION_VALUE)/100000,2) AS CONSUMPTION_VALUE,ROUND(SUM(GOAL_VALUE)/100000,2) AS GOAL_VALUE,"
                    + "ROUND(SUM(SCHEDULE_VALUE)/100000,2) AS SCHEDULE_VALUE,ROUND((SUM(GOAL_VALUE)-SUM(SCHEDULE_VALUE))/100000,2) AS DIFF_GOAL_SCHEDULE_VALUE,"
                    + "ROUND((SUM(CONSUMPTION_VALUE)-SUM(GOAL_VALUE))/100000,2) AS DIFF_CONSUMPTION_GOAL_VALUE ";
            for (int a = 4; a <= 12; a++) {
                sql = sql + ",ROUND(SUM(" + mmonth.get(a) + "_BUDGET)/100000,2) AS '" + mmonth.get(a) + "'";
            }
            for (int a = 1; a <= 3; a++) {
                sql = sql + ",ROUND(SUM(" + mmonth.get(a) + "_BUDGET)/100000,2) AS '" + mmonth.get(a) + "'";
            }

            sql = sql + " FROM (SELECT B.PARTY_CODE,B.PARTY_NAME,COALESCE(GROUP_DESC,'') AS GROUP_DESC,"
                    + "CASE WHEN GROUP_NAME IN ('ACNE','FCNE') THEN 'ACNE' WHEN GROUP_NAME IN ('SDF') THEN 'SDF' "
                    + "WHEN GROUP_NAME IN ('HDS') THEN 'HDS' ELSE 'PRESS' END AS PRODUCT_GROUP,"
                    + "INCHARGE_NAME";
            for (int a = 4; a <= 12; a++) {
                sql = sql + ",COALESCE(" + mmonth.get(a) + "_BUDGET,0)*SELLING_PRICE AS " + mmonth.get(a) + "_BUDGET";
            }
            for (int a = 1; a <= 3; a++) {
                sql = sql + ",COALESCE(" + mmonth.get(a) + "_BUDGET,0)*SELLING_PRICE AS " + mmonth.get(a) + "_BUDGET";
            }
            sql = sql + ",COALESCE(CEILING(COALESCE(MRF,0)/MM_AVG_LIFE),0) AS CONSUMPTION,"
                    + "COALESCE(CEILING(COALESCE(MRF,0)/MM_AVG_LIFE),0)*SELLING_PRICE AS CONSUMPTION_VALUE,COALESCE(ACTUAL_BUDGET,0) AS GOAL,"
                    + "COALESCE(ACTUAL_BUDGET,0)*SELLING_PRICE AS GOAL_VALUE,COALESCE(CURRENT_PROJECTION,0) AS SCHEDULE,"
                    + "COALESCE(CURRENT_PROJECTION,0)*SELLING_PRICE AS SCHEDULE_VALUE FROM PRODUCTION.FELT_BUDGET_REVIEW_DETAIL B "
                    + "LEFT JOIN (SELECT MM_AVG_LIFE,MM_ITEM_CODE,MM_UPN_NO "
                    + "FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER H,  PRODUCTION.FELT_MACHINE_MASTER_DETAIL D "
                    + "WHERE  H.MM_DOC_NO=D.MM_DOC_NO AND H.APPROVED=1 AND H.CANCELED=0 ) AS MM ON MM.MM_UPN_NO=B.UPN "
                    + "LEFT JOIN (SELECT PRODUCT_CODE,SQM_RATE,WT_RATE FROM PRODUCTION.FELT_QLT_RATE_MASTER R WHERE EFFECTIVE_TO ='0000-00-00' ) AS QLT "
                    + "ON QLT.PRODUCT_CODE=MM_ITEM_CODE "
                    + "LEFT JOIN (SELECT PARTY_CODE,INCHARGE_CD FROM DINESHMILLS.D_SAL_PARTY_MASTER ) AS PMST ON PMST.PARTY_CODE=B.PARTY_CODE "
                    + "LEFT JOIN (SELECT * FROM PRODUCTION.FELT_INCHARGE) AS INCHG ON PMST.INCHARGE_CD=INCHG.INCHARGE_CD "
                    + "LEFT JOIN (SELECT DG1.PARTY_CODE,H1.GROUP_CODE AS GCODE,GROUP_DESC "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H1 ,PRODUCTION.FELT_GROUP_MASTER_DETAIL DG1 "
                    + "WHERE H1.GROUP_CODE=DG1.GROUP_CODE   AND H1.APPROVED=1 AND H1.CANCELED=0) AS GRP ON GRP.PARTY_CODE=B.PARTY_CODE "
                    + "WHERE YEAR_FROM='" + txtyear.getText() + "' AND B.DOC_NO LIKE 'N%' " + cond + ") AS DD "
                    + "GROUP BY PARTY_CODE,PRODUCT_GROUP) AS DDD "
                    + cond1
                    + "ORDER BY DIFF_GOAL_SCHEDULE_VALUE DESC ";

            data_generate(sql, DataModelBudget, "PartyProduct");
        }
    }//GEN-LAST:event_bview3ActionPerformed

    private void bexcel3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bexcel3ActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableB, new File(file1.getSelectedFile().toString() + ".xls"), "BudgetPartyProductWise");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_bexcel3ActionPerformed

    private void btngroupwiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btngroupwiseActionPerformed
        // TODO add your handling code here:
        jLabel35.setVisible(true);
        txtproductcode.setVisible(true);
        bview3ActionPerformed(null);

    }//GEN-LAST:event_btngroupwiseActionPerformed

    private void btnpartywiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnpartywiseActionPerformed
        // TODO add your handling code here:
        jLabel35.setVisible(false);
        txtproductcode.setVisible(false);
        bview3ActionPerformed(null);
    }//GEN-LAST:event_btnpartywiseActionPerformed

    private void btnproductwiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnproductwiseActionPerformed
        // TODO add your handling code here:        

        jLabel35.setVisible(true);
        txtproductcode.setVisible(true);
        bview3ActionPerformed(null);


    }//GEN-LAST:event_btnproductwiseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane BudgetTab;
    private javax.swing.JTable TableB;
    private javax.swing.JButton bexcel;
    private javax.swing.JButton bexcel1;
    private javax.swing.JButton bexcel2;
    private javax.swing.JButton bexcel3;
    private javax.swing.JRadioButton btngroupwise;
    private javax.swing.JRadioButton btnpartywise;
    private javax.swing.JRadioButton btnproductwise;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton bview;
    private javax.swing.JButton bview1;
    private javax.swing.JButton bview2;
    private javax.swing.JButton bview3;
    private javax.swing.JComboBox<String> cmbarea;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblyearto;
    private javax.swing.JTextField txtgroupcode;
    private javax.swing.JTextField txtgroupname;
    private javax.swing.JTextField txtpartycode;
    private javax.swing.JTextField txtpartyname;
    private javax.swing.JTextField txtproductcode;
    private javax.swing.JTextField txtyear;
    // End of variables declaration//GEN-END:variables
private void data_generate(String msql, EITLTableModel mTableModel, String mTable) {

        boolean chk = false;
        ResultSet rs;
        double mtconsumption, mtgoal, mtschedule, mtdgs, mtdcg;
        mtconsumption = mtgoal = mtschedule = mtdgs = mtdcg = 0;
        if (txtyear.getText().trim().length() >= 4) {
            chk = true;
        } else {
            JOptionPane.showMessageDialog(this, "Please Enter Year...", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtyear.requestFocus();
        }
        if (chk) {
            mmonth = new HashMap();
            mmonth.put(1, "JAN");
            mmonth.put(2, "FEB");
            mmonth.put(3, "MAR");
            mmonth.put(4, "APR");
            mmonth.put(5, "MAY");
            mmonth.put(6, "JUN");
            mmonth.put(7, "JUL");
            mmonth.put(8, "AUG");
            mmonth.put(9, "SEP");
            mmonth.put(10, "OCT");
            mmonth.put(11, "NOV");
            mmonth.put(12, "DEC");
            try {
                mTableModel = new EITLTableModel();
                //if (mTable.equalsIgnoreCase("Budget")) {
                TableB.removeAll();
                TableB.setModel(mTableModel);
                //TableB.setAutoResizeMode(TableB.AUTO_RESIZE_OFF);
                //}
                System.out.println("Sql Query :" + msql);
                rs = EITLERP.data.getResult(msql);
                ResultSetMetaData rsInfo = rs.getMetaData();

                //Format the table from the resultset meta data
                int i = 1;
                for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                    mTableModel.addColumn(rsInfo.getColumnName(i));
                }

                rs.first();
                if (rs.getRow() > 0) {
                    double budget[] = new double[15];
                    for (int a = 0; a < 12; a++) {
                        budget[a] = 0;
                    }
                    while (!rs.isAfterLast()) {
                        Object[] rowData = new Object[100];
                        for (int m = 1; m < i; m++) {
                            if (m == 1) {
                                rowData[m - 1] = rs.getString(m);
                            } else {
                                try {
                                    //rowData[m - 1] = rs.getDouble(m);
                                    rowData[m - 1] = rs.getString(m);
                                } catch (Exception e) {

                                }
                            }
                        }
                        mTableModel.addRow(rowData);
                        for (int a = 1; a <= 12; a++) {
                            budget[a]=budget[a]+rs.getDouble(mmonth.get(a).toString());
                        }                        
                        mtconsumption = mtconsumption + rs.getDouble("CONSUMPTION_VALUE");
                        mtgoal = mtgoal + rs.getDouble("GOAL_VALUE");
                        mtschedule = mtschedule + rs.getDouble("SCHEDULE_VALUE");
                        mtdgs = mtdgs + rs.getDouble("DIFF_GOAL_SCHEDULE_VALUE");
                        mtdcg = mtdcg + rs.getDouble("DIFF_CONSUMPTION_GOAL_VALUE");

                        rs.next();
                    }
                    Object[] rowData = new Object[100];
                    mTableModel.addRow(rowData);
                    rowData = new Object[100];
                    rowData[0] = "Total";
                    int st = 3;

                    if (mTable.equalsIgnoreCase("Party")) {
                        st = 4;
                    }
                    if (mTable.equalsIgnoreCase("PartyProduct")) {
                        st = 5;
                    }
                    if (mTable.equalsIgnoreCase("Product")) {
                        st = 1;
                    }
                    if (mTable.equalsIgnoreCase("PartyGroupWise")) {
                        st = 3;
                    }
                    rowData[st] = EITLERPGLOBAL.round(mtconsumption, 2);
                    st++;
                    rowData[st] = EITLERPGLOBAL.round(mtgoal, 2);
                    st++;
                    rowData[st] = EITLERPGLOBAL.round(mtschedule, 2);
                    st++;
                    rowData[st] = EITLERPGLOBAL.round(mtdgs, 2);
                    st++;
                    rowData[st] = EITLERPGLOBAL.round(mtdcg, 2);
                    st++;
                    for(int a=4;a<=12;a++){
                        rowData[st] = EITLERPGLOBAL.round(budget[a], 2);
                        st++;
                    }
                    for(int a=1;a<=3;a++){
                        rowData[st] = EITLERPGLOBAL.round(budget[a], 2);
                        st++;
                    }
                    mTableModel.addRow(rowData);
                }
                final TableColumnModel columnModel = TableB.getColumnModel();
                for (int column = 0; column < TableB.getColumnCount(); column++) {
                    int width = 100; // Min width
                    for (int row = 0; row < TableB.getRowCount(); row++) {
                        TableCellRenderer renderer = TableB.getCellRenderer(row, column);
                        Component comp = TableB.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        //width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
                mTableModel.TableReadOnly(true);
            } catch (Exception s) {
                s.printStackTrace();
            }
        }
    }
}
