/* frmFeltSalesInfo.java 
 * 
 * 
 * Created on July 13, 2005, 10:47 AM
 */
package EITLERP.FeltSales.ObsoleteStatus;

import EITLERP.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.sql.*;
import java.net.*;
import java.math.*;
import java.lang.*;
import java.text.DecimalFormat;
import java.lang.Double;
import java.io.File;
import EITLERP.Production.ReportUI.*;
import java.awt.Cursor;

/**
 *
 * @author ashutosh/RISHI
 */
public class frmFeltObsoleteStatus extends javax.swing.JApplet {

    private EITLTableModel DataModelFinishedGoods = new EITLTableModel();
    private EITLTableModel DataModelWIP = new EITLTableModel();
    private EITLTableModel DataModelCSS = new EITLTableModel();

    private EITLTableModel DataModelDetailFG = new EITLTableModel();
    private EITLTableModel DataModelDetailWIP = new EITLTableModel();
    private EITLTableModel DataModelDetailCS = new EITLTableModel();

    private EITLComboModel cmbSortFGModel = new EITLComboModel();
    private EITLComboModel cmbSortWIPModel = new EITLComboModel();
    private EITLComboModel cmbSortCSModel = new EITLComboModel();

    private EITLComboModel cmbFilterStockModel = new EITLComboModel();
    private EITLComboModel cmbFilterWIPModel = new EITLComboModel();
    private EITLComboModel cmbFilterCSModel = new EITLComboModel();

    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();  
    
    private String finYear ="";
    private String fromYear ="";
    private String toYear ="";
    
    public void init() {
        System.gc();
        setSize(1000, 750);
        initComponents();
        GenerateCombo();
        FormatGrid();
        
        finYear = cmbFinYear.getSelectedItem().toString();
        fromYear = finYear.substring(0, 4);
        toYear = finYear.substring(5, 9);
        
        System.out.println("f "+finYear+" "+fromYear+" "+toYear);      
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStatus = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        file1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        SummaryPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableFinishedGoods = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableWIP = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        TableCSS = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cmdETEFinished = new javax.swing.JButton();
        cmdETEWIP = new javax.swing.JButton();
        cmdETECSS = new javax.swing.JButton();
        cmdShow = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cmbFinYear = new javax.swing.JComboBox();
        FinishedGoodsDetailPanel = new javax.swing.JPanel();
        cmdShowFG = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableDetailFG = new javax.swing.JTable();
        btnETE_FG = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        cmbSortFG = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        cmbFilterStock = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        cmbMonthStock = new javax.swing.JComboBox();
        WIPDetailPanel = new javax.swing.JPanel();
        cmdShowWIP = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableDetailWIP = new javax.swing.JTable();
        btnETE_WIP = new javax.swing.JButton();
        cmbSortWIP = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        cmbFilterWIP = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        cmbMonthWIP = new javax.swing.JComboBox();
        ConvertedStockDetailPanel = new javax.swing.JPanel();
        cmdShowCS = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        TableDetailCS = new javax.swing.JTable();
        btnETE_CS = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        cmbSortCS = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        cmbFilterCS = new javax.swing.JComboBox();

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Felt's Historical Stock Information System  ");

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 102, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setMinimumSize(new java.awt.Dimension(1000, 29));

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Obsolete Conversion Status");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jTabbedPane1.setToolTipText("");
        jTabbedPane1.setAutoscrolls(true);
        jTabbedPane1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);

        SummaryPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        SummaryPanel.setToolTipText("Summary");
        SummaryPanel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        jLabel2.setText("Stock Obsolete Conversion Status");

        TableFinishedGoods.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableFinishedGoods.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        TableFinishedGoods.setMinimumSize(new java.awt.Dimension(1, 64));
        TableFinishedGoods.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableFinishedGoodsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(TableFinishedGoods);

        TableWIP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableWIP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        TableWIP.setMinimumSize(new java.awt.Dimension(1, 64));
        TableWIP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableWIPMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(TableWIP);

        TableCSS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableCSS.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        TableCSS.setMinimumSize(new java.awt.Dimension(1, 64));
        TableCSS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableCSSMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(TableCSS);

        jLabel7.setText("Diverted Obsolete Inventory Liquidation Status");

        jLabel5.setText("WIP Obsolete Conversion Status");

        cmdETEFinished.setText("Export to Excel");
        cmdETEFinished.setMargin(new java.awt.Insets(1, 7, 1, 7));
        cmdETEFinished.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdETEFinishedActionPerformed(evt);
            }
        });

        cmdETEWIP.setText("Export to Excel");
        cmdETEWIP.setMargin(new java.awt.Insets(1, 7, 1, 7));
        cmdETEWIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdETEWIPActionPerformed(evt);
            }
        });

        cmdETECSS.setText("Export to Excel");
        cmdETECSS.setMargin(new java.awt.Insets(1, 7, 1, 7));
        cmdETECSS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdETECSSActionPerformed(evt);
            }
        });

        cmdShow.setText("Show List");
        cmdShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowActionPerformed(evt);
            }
        });

        jLabel3.setText("Fin Year : ");

        cmbFinYear.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2019-2020", "2020-2021", "2021-2022", "2022-2023" }));
        cmbFinYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFinYearItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout SummaryPanelLayout = new javax.swing.GroupLayout(SummaryPanel);
        SummaryPanel.setLayout(SummaryPanelLayout);
        SummaryPanelLayout.setHorizontalGroup(
            SummaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SummaryPanelLayout.createSequentialGroup()
                .addGroup(SummaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SummaryPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbFinYear, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(536, 536, 536)
                        .addComponent(cmdShow, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SummaryPanelLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(330, 330, 330)
                        .addComponent(cmdETEFinished, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SummaryPanelLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 950, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SummaryPanelLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(330, 330, 330)
                        .addComponent(cmdETEWIP, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SummaryPanelLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 950, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SummaryPanelLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(330, 330, 330)
                        .addComponent(cmdETECSS, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SummaryPanelLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 950, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(13, 13, 13))
        );
        SummaryPanelLayout.setVerticalGroup(
            SummaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SummaryPanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(SummaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cmdShow, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(SummaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbFinYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(SummaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdETEFinished))
                .addGap(7, 7, 7)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(SummaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdETEWIP))
                .addGap(7, 7, 7)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(SummaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdETECSS))
                .addGap(7, 7, 7)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(111, 111, 111))
        );

        jTabbedPane1.addTab("Summary", SummaryPanel);

        FinishedGoodsDetailPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        FinishedGoodsDetailPanel.setToolTipText("Finished Goods Detail");
        FinishedGoodsDetailPanel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        FinishedGoodsDetailPanel.setLayout(null);

        cmdShowFG.setText("Show List");
        cmdShowFG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowFGActionPerformed(evt);
            }
        });
        FinishedGoodsDetailPanel.add(cmdShowFG);
        cmdShowFG.setBounds(830, 10, 118, 25);

        TableDetailFG.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableDetailFG.getTableHeader().setFont(new Font("Plain", Font.BOLD, 12));
        jScrollPane2.setViewportView(TableDetailFG);

        FinishedGoodsDetailPanel.add(jScrollPane2);
        jScrollPane2.setBounds(10, 40, 960, 430);

        btnETE_FG.setText("Export to Excel");
        btnETE_FG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnETE_FGActionPerformed(evt);
            }
        });
        FinishedGoodsDetailPanel.add(btnETE_FG);
        btnETE_FG.setBounds(20, 10, 180, 25);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Sort By :");
        FinishedGoodsDetailPanel.add(jLabel11);
        jLabel11.setBounds(620, 10, 70, 20);
        FinishedGoodsDetailPanel.add(cmbSortFG);
        cmbSortFG.setBounds(700, 10, 120, 24);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Filter By :");
        FinishedGoodsDetailPanel.add(jLabel13);
        jLabel13.setBounds(210, 10, 80, 20);
        FinishedGoodsDetailPanel.add(cmbFilterStock);
        cmbFilterStock.setBounds(300, 10, 150, 24);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("Month : ");
        FinishedGoodsDetailPanel.add(jLabel4);
        jLabel4.setBounds(470, 10, 70, 20);

        cmbMonthStock.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        FinishedGoodsDetailPanel.add(cmbMonthStock);
        cmbMonthStock.setBounds(540, 10, 72, 24);

        jTabbedPane1.addTab("Stock Conversion Detail", FinishedGoodsDetailPanel);

        WIPDetailPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        WIPDetailPanel.setToolTipText("WIP Detail");
        WIPDetailPanel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        WIPDetailPanel.setLayout(null);

        cmdShowWIP.setText("Show List");
        cmdShowWIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowWIPActionPerformed(evt);
            }
        });
        WIPDetailPanel.add(cmdShowWIP);
        cmdShowWIP.setBounds(830, 10, 118, 25);

        TableDetailWIP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableDetailFG.getTableHeader().setFont(new Font("Plain", Font.BOLD, 12));
        jScrollPane6.setViewportView(TableDetailWIP);

        WIPDetailPanel.add(jScrollPane6);
        jScrollPane6.setBounds(10, 40, 960, 430);

        btnETE_WIP.setText("Export to Excel");
        btnETE_WIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnETE_WIPActionPerformed(evt);
            }
        });
        WIPDetailPanel.add(btnETE_WIP);
        btnETE_WIP.setBounds(20, 10, 180, 25);
        WIPDetailPanel.add(cmbSortWIP);
        cmbSortWIP.setBounds(700, 10, 120, 24);

        jLabel12.setText("Sort By :");
        WIPDetailPanel.add(jLabel12);
        jLabel12.setBounds(630, 10, 60, 20);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("Filter By :");
        WIPDetailPanel.add(jLabel14);
        jLabel14.setBounds(210, 10, 80, 20);
        WIPDetailPanel.add(cmbFilterWIP);
        cmbFilterWIP.setBounds(300, 10, 150, 24);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("Month : ");
        WIPDetailPanel.add(jLabel6);
        jLabel6.setBounds(470, 10, 70, 20);

        cmbMonthWIP.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        WIPDetailPanel.add(cmbMonthWIP);
        cmbMonthWIP.setBounds(540, 10, 72, 24);

        jTabbedPane1.addTab("WIP Conversion Detail", WIPDetailPanel);

        ConvertedStockDetailPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ConvertedStockDetailPanel.setToolTipText("ConvertedStock Detail");
        ConvertedStockDetailPanel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        ConvertedStockDetailPanel.setLayout(null);

        cmdShowCS.setText("Show List");
        cmdShowCS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowCSActionPerformed(evt);
            }
        });
        ConvertedStockDetailPanel.add(cmdShowCS);
        cmdShowCS.setBounds(830, 10, 118, 25);

        TableDetailCS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableDetailFG.getTableHeader().setFont(new Font("Plain", Font.BOLD, 12));
        jScrollPane7.setViewportView(TableDetailCS);

        ConvertedStockDetailPanel.add(jScrollPane7);
        jScrollPane7.setBounds(10, 40, 960, 430);

        btnETE_CS.setText("Export to Excel");
        btnETE_CS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnETE_CSActionPerformed(evt);
            }
        });
        ConvertedStockDetailPanel.add(btnETE_CS);
        btnETE_CS.setBounds(20, 10, 180, 25);

        jLabel18.setText("Sort By :");
        ConvertedStockDetailPanel.add(jLabel18);
        jLabel18.setBounds(630, 10, 60, 20);
        ConvertedStockDetailPanel.add(cmbSortCS);
        cmbSortCS.setBounds(700, 10, 120, 24);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Filter By :");
        ConvertedStockDetailPanel.add(jLabel15);
        jLabel15.setBounds(210, 10, 80, 20);
        ConvertedStockDetailPanel.add(cmbFilterCS);
        cmbFilterCS.setBounds(300, 10, 150, 24);

        jTabbedPane1.addTab("Diverted Conversion Detail", ConvertedStockDetailPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 980, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents


    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    private void cmdShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowActionPerformed
        // TODO add your handling code here:
//        GenerateStock();
//        GenerateWIP();
//        GenerateDiverted();
        
        GenerateStockFin();
        GenerateWIPFin();
        GenerateDivertedFin();
    }//GEN-LAST:event_cmdShowActionPerformed

    private void TableFinishedGoodsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableFinishedGoodsMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TableFinishedGoodsMouseClicked

    private void cmdETEFinishedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdETEFinishedActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableFinishedGoods, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdETEFinishedActionPerformed

    private void TableWIPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableWIPMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TableWIPMouseClicked

    private void cmdETEWIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdETEWIPActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableWIP, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdETEWIPActionPerformed

    private void cmdETECSSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdETECSSActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableCSS, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdETECSSActionPerformed

    private void TableCSSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableCSSMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TableCSSMouseClicked

    private void cmdShowFGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowFGActionPerformed
        // TODO add your handling code here:
//        GenerateDetailStock();
        GenerateDetailStockFin();
    }//GEN-LAST:event_cmdShowFGActionPerformed

    private void btnETE_FGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnETE_FGActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableDetailFG, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnETE_FGActionPerformed

    private void cmdShowCSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowCSActionPerformed
        // TODO add your handling code here:
//        GenerateDetailCS();
        GenerateDetailCSFin();
    }//GEN-LAST:event_cmdShowCSActionPerformed

    private void btnETE_CSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnETE_CSActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableDetailCS, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnETE_CSActionPerformed

    private void btnETE_WIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnETE_WIPActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableDetailWIP, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnETE_WIPActionPerformed

    private void cmdShowWIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowWIPActionPerformed
        // TODO add your handling code here:
//        GenerateDetailWIP();
        GenerateDetailWIPFin();
    }//GEN-LAST:event_cmdShowWIPActionPerformed

    private void cmbFinYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFinYearItemStateChanged
        // TODO add your handling code here:
        finYear = cmbFinYear.getSelectedItem().toString();
        fromYear = finYear.substring(0, 4);
        toYear = finYear.substring(5, 9);
        
        System.out.println("f "+finYear+" "+fromYear+" "+toYear);  
    }//GEN-LAST:event_cmbFinYearItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ConvertedStockDetailPanel;
    private javax.swing.JPanel FinishedGoodsDetailPanel;
    private javax.swing.JPanel SummaryPanel;
    private javax.swing.JTable TableCSS;
    private javax.swing.JTable TableDetailCS;
    private javax.swing.JTable TableDetailFG;
    private javax.swing.JTable TableDetailWIP;
    private javax.swing.JTable TableFinishedGoods;
    private javax.swing.JTable TableWIP;
    private javax.swing.JPanel WIPDetailPanel;
    private javax.swing.JButton btnETE_CS;
    private javax.swing.JButton btnETE_FG;
    private javax.swing.JButton btnETE_WIP;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbFilterCS;
    private javax.swing.JComboBox cmbFilterStock;
    private javax.swing.JComboBox cmbFilterWIP;
    private javax.swing.JComboBox cmbFinYear;
    private javax.swing.JComboBox cmbMonthStock;
    private javax.swing.JComboBox cmbMonthWIP;
    private javax.swing.JComboBox cmbSortCS;
    private javax.swing.JComboBox cmbSortFG;
    private javax.swing.JComboBox cmbSortWIP;
    private javax.swing.JButton cmdETECSS;
    private javax.swing.JButton cmdETEFinished;
    private javax.swing.JButton cmdETEWIP;
    private javax.swing.JButton cmdShow;
    private javax.swing.JButton cmdShowCS;
    private javax.swing.JButton cmdShowFG;
    private javax.swing.JButton cmdShowWIP;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblStatus;
    // End of variables declaration//GEN-END:variables

    private void GenerateCombo() {
        ComboData aData = new ComboData();

        cmbSortFGModel = new EITLComboModel();
        cmbSortFG.removeAllItems();
        cmbSortFG.setModel(cmbSortFGModel);

        cmbSortWIPModel = new EITLComboModel();
        cmbSortWIP.removeAllItems();
        cmbSortWIP.setModel(cmbSortWIPModel);

        cmbSortCSModel = new EITLComboModel();
        cmbSortCS.removeAllItems();
        cmbSortCS.setModel(cmbSortCSModel);

        aData = new ComboData();
        aData.Code = 1;
        aData.Text = "OPENING DATE";
        cmbSortFGModel.addElement(aData);
        cmbSortWIPModel.addElement(aData);
        cmbSortCSModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 2;
        aData.Text = "PIECE NO";
        cmbSortFGModel.addElement(aData);
        cmbSortWIPModel.addElement(aData);
        cmbSortCSModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 3;
        aData.Text = "PARTY CODE";
        cmbSortFGModel.addElement(aData);
        cmbSortWIPModel.addElement(aData);
        cmbSortCSModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 4;
        aData.Text = "PRODUCT CODE";
        cmbSortFGModel.addElement(aData);
        cmbSortWIPModel.addElement(aData);
        cmbSortCSModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 5;
        aData.Text = "PIECE STAGE";
        cmbSortFGModel.addElement(aData);
        cmbSortWIPModel.addElement(aData);
        cmbSortCSModel.addElement(aData);
        
/////////////////////////////////////////////////////////////////////////        
        cmbFilterStockModel = new EITLComboModel();
        cmbFilterStock.removeAllItems();
        cmbFilterStock.setModel(cmbFilterStockModel);

        aData = new ComboData();
        aData.Code = 0;
        aData.Text = "SELECT";
        cmbFilterStockModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code = 1;
        aData.Text = "OPENING";
        cmbFilterStockModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code = 2;
        aData.Text = "ADDITION";
        cmbFilterStockModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code = 3;
        aData.Text = "DIVERTED";
        cmbFilterStockModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code = 4;
        aData.Text = "DIVIDED";
        cmbFilterStockModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code = 5;
        aData.Text = "INVOICE";
        cmbFilterStockModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code = 6;
        aData.Text = "RETURN TO ORIGINAL PARTY";
        cmbFilterStockModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code = 7;
        aData.Text = "SCRAP";
        cmbFilterStockModel.addElement(aData);
        
/////////////////////////////////////////////////////////////////////////
        cmbFilterWIPModel = new EITLComboModel();
        cmbFilterWIP.removeAllItems();
        cmbFilterWIP.setModel(cmbFilterWIPModel);

        aData = new ComboData();
        aData.Code = 0;
        aData.Text = "SELECT";
        cmbFilterWIPModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code = 1;
        aData.Text = "OPENING";
        cmbFilterWIPModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code = 2;
        aData.Text = "ADDITION";
        cmbFilterWIPModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code = 3;
        aData.Text = "DIVERTED";
        cmbFilterWIPModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code = 4;
        aData.Text = "DIVIDED";
        cmbFilterWIPModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code = 5;
        aData.Text = "JOINED";
        cmbFilterWIPModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code = 6;
        aData.Text = "SCRAP";
        cmbFilterWIPModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code = 7;
        aData.Text = "IN STOCK TRANSFER";
        cmbFilterWIPModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code = 8;
        aData.Text = "RETURN TO ORIGINAL PARTY";
        cmbFilterWIPModel.addElement(aData);
        
/////////////////////////////////////////////////////////////////////////
        cmbFilterCSModel = new EITLComboModel();
        cmbFilterCS.removeAllItems();
        cmbFilterCS.setModel(cmbFilterCSModel);
        
        aData = new ComboData();
        aData.Code = 0;
        aData.Text = "SELECT";
        cmbFilterCSModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code = 1;
        aData.Text = "OPENING";
        cmbFilterCSModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code = 2;
        aData.Text = "ADDITION";
        cmbFilterCSModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code = 3;
        aData.Text = "DIVERTED";
        cmbFilterCSModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code = 4;
        aData.Text = "DIVIDED";
        cmbFilterCSModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code = 5;
        aData.Text = "INVOICE";
        cmbFilterCSModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code = 6;
        aData.Text = "RE OBSOLETE";
        cmbFilterCSModel.addElement(aData);        
        
    }

    private void FormatGrid() {
        DataModelFinishedGoods = new EITLTableModel();
        TableFinishedGoods.removeAll();
        TableFinishedGoods.setModel(DataModelFinishedGoods);

        TableFinishedGoods.setAutoResizeMode(TableFinishedGoods.AUTO_RESIZE_OFF);
//        DataModelFinishedGoods.addColumn("       ");
        DataModelFinishedGoods.TableReadOnly(true);

        DataModelWIP = new EITLTableModel();
        TableWIP.removeAll();
        TableWIP.setModel(DataModelWIP);

        TableWIP.setAutoResizeMode(TableWIP.AUTO_RESIZE_OFF);
//        DataModelWIP.addColumn("       ");
        DataModelWIP.TableReadOnly(true);

        DataModelCSS = new EITLTableModel();
        TableCSS.removeAll();
        TableCSS.setModel(DataModelCSS);

        TableCSS.setAutoResizeMode(TableCSS.AUTO_RESIZE_OFF);
//        DataModelCSS.addColumn("       ");
        DataModelCSS.TableReadOnly(true);

        DataModelDetailFG = new EITLTableModel();
        TableDetailFG.removeAll();
        TableDetailFG.setModel(DataModelDetailFG);

        TableDetailFG.setAutoResizeMode(TableDetailFG.AUTO_RESIZE_OFF);
//        DataModelDetailFG.addColumn("       ");
        DataModelDetailFG.TableReadOnly(true);

        DataModelDetailWIP = new EITLTableModel();
        TableDetailWIP.removeAll();
        TableDetailWIP.setModel(DataModelDetailWIP);

        TableDetailWIP.setAutoResizeMode(TableDetailWIP.AUTO_RESIZE_OFF);
//        DataModelDetailWIP.addColumn("       ");
        DataModelDetailWIP.TableReadOnly(true);

        DataModelDetailCS = new EITLTableModel();
        TableDetailCS.removeAll();
        TableDetailCS.setModel(DataModelDetailCS);

        TableDetailCS.setAutoResizeMode(TableDetailCS.AUTO_RESIZE_OFF);
//        DataModelDetailCS.addColumn("       ");
        DataModelDetailCS.TableReadOnly(true);
    }

    private void GenerateStock() {
        String sql = "";
        ResultSet rs;
        DataModelFinishedGoods = new EITLTableModel();
        TableFinishedGoods.removeAll();
        TableFinishedGoods.setModel(DataModelFinishedGoods);
        TableFinishedGoods.setAutoResizeMode(TableFinishedGoods.AUTO_RESIZE_OFF);
        
        try {
            sql = "SELECT 'STOCK', "
                    + "SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN 1 ELSE 0 END) AS OPENING, "
                    + "ROUND(SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN VALUE ELSE 0 END)/100000,2) AS OPENING_VALUE, "
                    + "SUM(CASE WHEN OBSOLETE_DATE >= '2019-04-01' AND OPENING_DATE != '2019-04-01'  THEN 1 ELSE 0 END) AS ADDITION, "
                    + "ROUND(SUM(CASE WHEN OBSOLETE_DATE >= '2019-04-01' AND OPENING_DATE != '2019-04-01'  THEN VALUE ELSE 0 END)/100000,2) AS ADDITION_VALUE, "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE'  THEN 1 ELSE 0 END) AS DIVERTED, "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' THEN VALUE ELSE 0 END)/100000,2) AS DIVERTED_VALUE, "
//                    + "SUM(CASE WHEN PIECE_STAGE IN ('DIVIDED')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE'  THEN 1 ELSE 0 END) AS DIVIDED_TO_WIP, "
//                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('DIVIDED') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' THEN VALUE ELSE 0 END)/100000,2) AS DIVIDED_TO_WIP_VALUE, "
//                    + "SUM(CASE WHEN PIECE_STAGE IN ('INVOICED','EXP-INVOICE') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' THEN 1 ELSE 0 END) AS INVOICED, "
//                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('INVOICED','EXP-INVOICE') AND NEW_OBSOLETE_STATUS = 'OBSOLETE'  THEN VALUE ELSE 0 END)/100000,2) AS INVOICED_VALUE, "
//                    + "SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = '' THEN 1 ELSE 0 END) AS RETAIN, "
//                    + "ROUND(SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = '' THEN VALUE ELSE 0 END)/100000,2) AS RETAIN_VALUE, "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('CANCELED','SCRAP')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE'  THEN 1 ELSE 0 END) AS SCRAP, "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('CANCELED','SCRAP') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' THEN VALUE ELSE 0 END)/100000,2) AS SCRAP_VALUE, "
                    + "SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN 1 ELSE 0 END) + "
                    + "SUM(CASE WHEN OBSOLETE_DATE >= '2019-04-01' AND OPENING_DATE != '2019-04-01'  THEN 1 ELSE 0 END) - "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED','DIVIDED') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' THEN 1 ELSE 0 END)- "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('INVOICED','EXP-INVOICE') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' THEN 1 ELSE 0 END) - "
                    + "SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = '' THEN 1 ELSE 0 END) "
                    + "AS CLOSING, "
                    + "ROUND(SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN VALUE ELSE 0 END)/100000,2) + "
                    + "ROUND(SUM(CASE WHEN OBSOLETE_DATE >= '2019-04-01' AND OPENING_DATE != '2019-04-01'  THEN VALUE ELSE 0 END)/100000,2) - "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED','DIVIDED') AND NEW_OBSOLETE_STATUS = 'OBSOLETE'  THEN VALUE ELSE 0 END)/100000,2) - "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('INVOICED','EXP-INVOICE') AND NEW_OBSOLETE_STATUS = 'OBSOLETE'  THEN VALUE ELSE 0 END)/100000,2) - "
                    + "ROUND(SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = '' THEN VALUE ELSE 0 END)/100000,2) "
                    + "AS CLOSING_VALUE, "
                    + "CONCAT(DATE_FORMAT(CURRENT_DATE(), '%d/%m/%Y'),' ',CURRENT_TIME()) AS RUN_DATETIME "
                    //                    + "SUM(CASE WHEN PIECE_STAGE IN ('IN STOCK' )  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' THEN 1 ELSE 0 END) AS OBSOLETE, "
                    //                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('IN STOCK' ) AND NEW_OBSOLETE_STATUS = 'OBSOLETE' THEN VALUE ELSE 0 END)/100000,2) AS OBSOLETE_VALUE "
                    + "FROM PRODUCTION.PR_OBSOLETE_STOCK_STATUS ";

            System.out.println(sql);
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelFinishedGoods.addColumn(rsInfo.getColumnName(i));
            }
            rs.first();
            System.out.println("Row no." + rs.getRow());
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }
                    DataModelFinishedGoods.addRow(rowData);
                    rs.next();
                }
            }
            DataModelFinishedGoods.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateWIP() {
        String sql = "";
        ResultSet rs;
        DataModelWIP = new EITLTableModel();
        TableWIP.removeAll();
        TableWIP.setModel(DataModelWIP);
        TableWIP.setAutoResizeMode(TableWIP.AUTO_RESIZE_OFF);
        try {
            sql = "SELECT 'WIP', "
                    + "SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN 1 ELSE 0 END) AS OPENING, "
                    + "ROUND(SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN VALUE ELSE 0 END)/100000,2) AS OPENING_VALUE, "
                    + "SUM(CASE WHEN OBSOLETE_DATE >= '2019-04-01' AND OPENING_DATE != '2019-04-01'  THEN 1 ELSE 0 END) AS ADDITION, "
                    + "ROUND(SUM(CASE WHEN OBSOLETE_DATE >= '2019-04-01' AND OPENING_DATE != '2019-04-01'  THEN VALUE ELSE 0 END)/100000,2) AS ADDITION_VALUE, "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE'  THEN 1 ELSE 0 END) AS DIVERTED, "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' THEN VALUE ELSE 0 END)/100000,2) AS DIVERTED_VALUE, "
//                    + "SUM(CASE WHEN PIECE_STAGE IN ('DIVIDED')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE'  THEN 1 ELSE 0 END) AS DIVIDED_TO_WIP, "
//                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('DIVIDED') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' THEN VALUE ELSE 0 END)/100000,2) AS DIVIDED_TO_WIP_VALUE, "
//                    + "SUM(CASE WHEN PIECE_STAGE IN ('JOINED')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE'  THEN 1 ELSE 0 END) AS JOINED, "
//                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('JOINED') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' THEN VALUE ELSE 0 END)/100000,2) AS JOINED_VALUE, "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('CANCELED','SCRAP')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE'  THEN 1 ELSE 0 END) AS SCRAP, "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('CANCELED','SCRAP') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' THEN VALUE ELSE 0 END)/100000,2) AS SCRAP_VALUE, "
//                    + "SUM(CASE WHEN PIECE_STAGE IN ('IN STOCK','BSR','INVOICED','EXP-INVOICE') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' THEN 1 ELSE 0 END) AS INSTOCKTRANSFER, "
//                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('IN STOCK','BSR','INVOICED','EXP-INVOICE') AND NEW_OBSOLETE_STATUS = 'OBSOLETE'  THEN VALUE ELSE 0 END)/100000,2) AS INSTOCKTRANFER_VALUE, "
//                    + "SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = '' THEN 1 ELSE 0 END) AS RETAIN, "
//                    + "ROUND(SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = '' THEN VALUE ELSE 0 END)/100000,2) AS RETAIN_VALUE, "
                    + "SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN 1 ELSE 0 END) + "
                    + "SUM(CASE WHEN OBSOLETE_DATE >= '2019-04-01' AND OPENING_DATE != '2019-04-01'  THEN 1 ELSE 0 END) - "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED','DIVIDED','JOINED','CANCELED','SCRAP') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' THEN 1 ELSE 0 END)- "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('IN STOCK','BSR','INVOICED','EXP-INVOICE') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' THEN 1 ELSE 0 END) - "
                    + "SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = '' THEN 1 ELSE 0 END) "
                    + "AS CLOSING, "
                    + "ROUND(SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN VALUE ELSE 0 END)/100000,2) + "
                    + "ROUND(SUM(CASE WHEN OBSOLETE_DATE >= '2019-04-01' AND OPENING_DATE != '2019-04-01'  THEN VALUE ELSE 0 END)/100000,2) - "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED','DIVIDED','JOINED','CANCELED','SCRAP') AND NEW_OBSOLETE_STATUS = 'OBSOLETE'  THEN VALUE ELSE 0 END)/100000,2) - "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('IN STOCK','BSR','INVOICED','EXP-INVOICE') AND NEW_OBSOLETE_STATUS = 'OBSOLETE'  THEN VALUE ELSE 0 END)/100000,2) - "
                    + "ROUND(SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = '' THEN VALUE ELSE 0 END)/100000,2) "
                    + "AS CLOSING_VALUE, "
                    + "CONCAT(DATE_FORMAT(CURRENT_DATE(), '%d/%m/%Y'),' ',CURRENT_TIME()) AS RUN_DATETIME "
                    //                    + "SUM(CASE WHEN PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','SEAMING','FINISHING','SPLICING','ASSEMBLY','SPIRALLING','WIP')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' THEN 1 ELSE 0 END) AS OBSOLETE, "
                    //                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','SEAMING','FINISHING','SPLICING','ASSEMBLY','SPIRALLING','WIP' ) AND NEW_OBSOLETE_STATUS = 'OBSOLETE' THEN VALUE ELSE 0 END)/100000,2) AS OBSOLETE_VALUE "
                    + "FROM PRODUCTION.PR_OBSOLETE_WIP_STATUS";

            System.out.println(sql);
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelWIP.addColumn(rsInfo.getColumnName(i));
            }
            rs.first();
            System.out.println("Row no." + rs.getRow());
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }
                    DataModelWIP.addRow(rowData);
                    rs.next();
                }
            }
            DataModelWIP.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateDiverted() {
        String sql = "";
        ResultSet rs;
        DataModelCSS = new EITLTableModel();
        TableCSS.removeAll();
        TableCSS.setModel(DataModelCSS);
        TableCSS.setAutoResizeMode(TableCSS.AUTO_RESIZE_OFF);
        try {
            sql = "SELECT 'DIVERTED', "
                    + "SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN 1 ELSE 0 END) AS OPENING, "
                    + "ROUND(SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN VALUE ELSE 0 END)/100000,2) AS OPENING_VALUE, "
                    + "SUM(CASE WHEN OBS_DIVERTED_DATE >= '2019-04-01' AND OPENING_DATE != '2019-04-01'  THEN 1 ELSE 0 END) AS ADDITION, "
                    + "ROUND(SUM(CASE WHEN OBS_DIVERTED_DATE >= '2019-04-01' AND OPENING_DATE != '2019-04-01'  THEN VALUE ELSE 0 END)/100000,2) AS ADDITION_VALUE, "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE'  THEN 1 ELSE 0 END) AS DIVERTED, "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' THEN VALUE ELSE 0 END)/100000,2) AS DIVERTED_VALUE, "
//                    + "SUM(CASE WHEN PIECE_STAGE IN ('DIVIDED')   AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE'  THEN 1 ELSE 0 END) AS DIVIDED_TO_WIP, "
//                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('DIVIDED')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' THEN VALUE ELSE 0 END)/100000,2) AS DIVIDED_TO_WIP_VALUE, "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('INVOICED','EXP-INVOICE','RETURN')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' THEN 1 ELSE 0 END) AS INVOICED, "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('INVOICED','EXP-INVOICE','RETURN')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' THEN VALUE ELSE 0 END)/100000,2) AS INVOICED_VALUE, "
                    + "SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = 'OBSOLETE' THEN 1 ELSE 0 END) AS REOBSOLETE, "
                    + "ROUND(SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = 'OBSOLETE' THEN VALUE ELSE 0 END)/100000,2) AS REOBSOLETE_VALUE, "
                    + "SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN 1 ELSE 0 END) + "
                    + "SUM(CASE WHEN OBS_DIVERTED_DATE >= '2019-04-01' AND OPENING_DATE != '2019-04-01'  THEN 1 ELSE 0 END) - "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED','DIVIDED')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE'THEN 1 ELSE 0 END)- "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('INVOICED','EXP-INVOICE','RETURN')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE'THEN 1 ELSE 0 END) - "
                    + "SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = 'OBSOLETE' THEN 1 ELSE 0 END) "
                    + "AS CLOSING, "
                    + "ROUND(SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN VALUE ELSE 0 END)/100000,2) + "
                    + "ROUND(SUM(CASE WHEN OBS_DIVERTED_DATE >= '2019-04-01' AND OPENING_DATE != '2019-04-01'  THEN VALUE ELSE 0 END)/100000,2) - "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED','DIVIDED')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE'  THEN VALUE ELSE 0 END)/100000,2) - "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('INVOICED','EXP-INVOICE','RETURN')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE'  THEN VALUE ELSE 0 END)/100000,2) - "
                    + "ROUND(SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = 'OBSOLETE' THEN VALUE ELSE 0 END)/100000,2) "
                    + "AS CLOSING_VALUE, "
                    + "CONCAT(DATE_FORMAT(CURRENT_DATE(), '%d/%m/%Y'),' ',CURRENT_TIME()) AS RUN_DATETIME "                    
//                    + "SUM(CASE WHEN PIECE_STAGE NOT IN ('INVOICED','EXP-INVOICE','DIVERTED','DIVIDED','RETURN')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' THEN 1 ELSE 0 END) AS OBSOLETE, "
//                    + "ROUND(SUM(CASE WHEN PIECE_STAGE NOT IN ('INVOICED','EXP-INVOICE','DIVERTED','DIVIDED','RETURN')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' THEN VALUE ELSE 0 END)/100000,2) AS OBSOLETE_VALUE "
                    + "FROM PRODUCTION.PR_OBSOLETE_DIVERTED_STATUS ";

            System.out.println(sql);
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelCSS.addColumn(rsInfo.getColumnName(i));
            }
            rs.first();
            System.out.println("Row no." + rs.getRow());
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }
                    DataModelCSS.addRow(rowData);
                    rs.next();
                }
            }
            DataModelCSS.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateDetailStock() {
        String sql = "";
        String orderBy = "";
        String filterBy = "";
        ResultSet rs;
        DataModelDetailFG = new EITLTableModel();
        TableDetailFG.removeAll();
        TableDetailFG.setModel(DataModelDetailFG);
        TableDetailFG.setAutoResizeMode(TableDetailFG.AUTO_RESIZE_OFF);
        try {
            int FilterBy = EITLERPGLOBAL.getComboCode(cmbFilterStock);
            if (FilterBy == 1)
                filterBy += " WHERE OPENING_DATE = '2019-04-01' ";
            if (FilterBy == 2)
                filterBy += " WHERE OBSOLETE_DATE >= '2019-04-01' AND OPENING_DATE != '2019-04-01' ";
            if (FilterBy == 3)
                filterBy += " WHERE PIECE_STAGE IN ('DIVERTED')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' ";
            if (FilterBy == 4)
                filterBy += " WHERE PIECE_STAGE IN ('DIVIDED')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' ";
            if (FilterBy == 5)
                filterBy += " WHERE PIECE_STAGE IN ('INVOICED','EXP-INVOICE') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' ";
            if (FilterBy == 6)
                filterBy += " WHERE COALESCE(NEW_OBSOLETE_STATUS,'') = '' ";
            
            int Orderby = EITLERPGLOBAL.getComboCode(cmbSortFG);
            if (Orderby == 1)
                orderBy += " ORDER BY OPENING_DATE DESC,PIECE_NO ";
            if (Orderby == 2)
                orderBy += " ORDER BY PIECE_NO ";
            if (Orderby == 3)
                orderBy += " ORDER BY PARTY_CODE,PIECE_NO ";
            if (Orderby == 4)
                orderBy += " ORDER BY PRODUCT_CODE,PIECE_NO ";
            if (Orderby == 5)
                orderBy += " ORDER BY PIECE_STAGE,PIECE_NO ";

            sql = "SELECT @a:=@a+1 AS SR_NO, OPENING_DATE, OBSOLETE_STATUS, OBSOLETE_REASON, PIECE_NO, PARTY_CODE, PARTY_NAME, MACHINE_NO, POSITION_NO, UPN, PRODUCT_CODE, P_GROUP, STYLE, LENGTH, WIDTH, GSM, SQMTR, WEIGHT, VALUE, PIECE_STAGE, "
                    + "OLD_PIECE_STAGE, NEW_OBSOLETE_STATUS, NEW_OBSOLETE_DATE, NEW_OBSOLETE_REASON, DIVERTED_DATE, DIVERTED_NO, DIVERTED_REASON, INVOICE_NO, INVOICE_DATE, INVOICE_VALUE, WARP_DATE, WVG_DATE, SPLICE_DATE, MND_DATE, "
                    + "NDL_DATE, SEAM_DATE, FNSG_DATE, SDF_INSTRUCT_DATE, SDF_SPIRALED_DATE, SDF_ASSEMBLED_DATE, CLOSURE_DATE, CLOSURE_REMARK, REOPEN_DATE, REOPEN_REMARK, RUN_DATETIME FROM "
                    + "(SELECT DATE_FORMAT(OPENING_DATE, '%d/%m/%Y') AS OPENING_DATE, OBSOLETE_STATUS, OBSOLETE_REASON, PIECE_NO, PARTY_CODE, MACHINE_NO, POSITION_NO, UPN, PRODUCT_CODE, P_GROUP, "
                    + "STYLE, LENGTH, WIDTH, GSM, SQMTR, WEIGHT, VALUE, PIECE_STAGE, OLD_PIECE_STAGE, NEW_OBSOLETE_STATUS, DATE_FORMAT(NEW_OBSOLETE_DATE, '%d/%m/%Y') AS NEW_OBSOLETE_DATE, NEW_OBSOLETE_REASON, "
                    + "DATE_FORMAT(DIVERTED_DATE, '%d/%m/%Y') AS DIVERTED_DATE, DIVERTED_NO, DIVERTED_REASON, INVOICE_NO, DATE_FORMAT(DIVERTED_DATE, '%d/%m/%Y') AS INVOICE_DATE, INVOICE_VALUE, "
                    + "DATE_FORMAT(WARP_DATE, '%d/%m/%Y') AS WARP_DATE, DATE_FORMAT(WVG_DATE, '%d/%m/%Y') AS WVG_DATE, DATE_FORMAT(SPLICE_DATE, '%d/%m/%Y') AS SPLICE_DATE, DATE_FORMAT(MND_DATE, '%d/%m/%Y') AS MND_DATE, "
                    + "DATE_FORMAT(NDL_DATE, '%d/%m/%Y') AS NDL_DATE, DATE_FORMAT(SEAM_DATE, '%d/%m/%Y') AS SEAM_DATE, DATE_FORMAT(FNSG_DATE, '%d/%m/%Y') AS FNSG_DATE, DATE_FORMAT(SDF_INSTRUCT_DATE, '%d/%m/%Y') AS SDF_INSTRUCT_DATE, "
                    + "DATE_FORMAT(SDF_SPIRALED_DATE, '%d/%m/%Y') AS SDF_SPIRALED_DATE, DATE_FORMAT(SDF_ASSEMBLED_DATE, '%d/%m/%Y') AS SDF_ASSEMBLED_DATE, DATE_FORMAT(CLOSURE_DATE, '%d/%m/%Y') AS CLOSURE_DATE, CLOSURE_REMARK, DATE_FORMAT(REOPEN_DATE, '%d/%m/%Y') AS REOPEN_DATE, REOPEN_REMARK, CONCAT(DATE_FORMAT(CURRENT_DATE(), '%d/%m/%Y'),' ',CURRENT_TIME()) AS RUN_DATETIME "
                    + "FROM PRODUCTION.PR_OBSOLETE_STOCK_STATUS "                    
                    + filterBy + " "
                    + ") AS OB "
                    + "LEFT JOIN (SELECT PARTY_CODE AS PM_PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS PM "
                    + "ON OB.PARTY_CODE=PM.PM_PARTY_CODE ,(select @a:=0) as a  "
                    + orderBy + " ";

            System.out.println(sql);
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelDetailFG.addColumn(rsInfo.getColumnName(i));
            }
            rs.first();
            System.out.println("Row no." + rs.getRow());
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);                        
                    }
                    DataModelDetailFG.addRow(rowData);
                    rs.next();
                }
            }
            DataModelDetailFG.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateDetailWIP() {
        String sql = "";
        String orderBy = "";
        String filterBy = "";
        ResultSet rs;
        DataModelDetailWIP = new EITLTableModel();
        TableDetailWIP.removeAll();
        TableDetailWIP.setModel(DataModelDetailWIP);
        TableDetailWIP.setAutoResizeMode(TableDetailWIP.AUTO_RESIZE_OFF);
        try {
            int FilterBy = EITLERPGLOBAL.getComboCode(cmbFilterWIP);
            if (FilterBy == 1)
                filterBy += " WHERE OPENING_DATE = '2019-04-01' ";
            if (FilterBy == 2)
                filterBy += " WHERE OBSOLETE_DATE >= '2019-04-01' AND OPENING_DATE != '2019-04-01' ";
            if (FilterBy == 3)
                filterBy += " WHERE PIECE_STAGE IN ('DIVERTED')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' ";
            if (FilterBy == 4)
                filterBy += " WHERE PIECE_STAGE IN ('DIVIDED')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' ";
            if (FilterBy == 5)
                filterBy += " WHERE PIECE_STAGE IN ('JOINED')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' ";
            if (FilterBy == 6)
                filterBy += " WHERE PIECE_STAGE IN ('CANCELED','SCRAP')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' ";
            if (FilterBy == 7)
                filterBy += " WHERE PIECE_STAGE IN ('IN STOCK','BSR','INVOICED','EXP-INVOICE') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' ";
            if (FilterBy == 8)
                filterBy += " WHERE COALESCE(NEW_OBSOLETE_STATUS,'') = '' ";
            
            int Orderby = EITLERPGLOBAL.getComboCode(cmbSortWIP);
            if (Orderby == 1)
                orderBy += " ORDER BY OPENING_DATE DESC,PIECE_NO ";
            if (Orderby == 2)
                orderBy += " ORDER BY PIECE_NO ";
            if (Orderby == 3)
                orderBy += " ORDER BY PARTY_CODE,PIECE_NO ";
            if (Orderby == 4)
                orderBy += " ORDER BY PRODUCT_CODE,PIECE_NO ";
            if (Orderby == 5)
                orderBy += " ORDER BY PIECE_STAGE,PIECE_NO ";
                        
            sql = "SELECT @a:=@a+1 AS SR_NO, OPENING_DATE, OBSOLETE_STATUS, OBSOLETE_REASON, PIECE_NO, PARTY_CODE, PARTY_NAME, MACHINE_NO, POSITION_NO, UPN, PRODUCT_CODE, P_GROUP, STYLE, LENGTH, WIDTH, GSM, SQMTR, WEIGHT, VALUE, PIECE_STAGE, "
                    + "OLD_PIECE_STAGE, NEW_OBSOLETE_STATUS, NEW_OBSOLETE_DATE, NEW_OBSOLETE_REASON, DIVERTED_DATE, DIVERTED_NO, DIVERTED_REASON, INVOICE_NO, INVOICE_DATE, INVOICE_VALUE, WARP_DATE, WVG_DATE, SPLICE_DATE, MND_DATE, "
                    + "NDL_DATE, SEAM_DATE, FNSG_DATE, SDF_INSTRUCT_DATE, SDF_SPIRALED_DATE, SDF_ASSEMBLED_DATE, CLOSURE_DATE, CLOSURE_REMARK, REOPEN_DATE, REOPEN_REMARK, RUN_DATETIME FROM "
                    + "(SELECT DATE_FORMAT(OPENING_DATE, '%d/%m/%Y') AS OPENING_DATE, OBSOLETE_STATUS, OBSOLETE_REASON, PIECE_NO, PARTY_CODE, MACHINE_NO, POSITION_NO, UPN, PRODUCT_CODE, P_GROUP, "
                    + "STYLE, LENGTH, WIDTH, GSM, SQMTR, WEIGHT, VALUE, PIECE_STAGE, OLD_PIECE_STAGE, NEW_OBSOLETE_STATUS, DATE_FORMAT(NEW_OBSOLETE_DATE, '%d/%m/%Y') AS NEW_OBSOLETE_DATE, NEW_OBSOLETE_REASON, "
                    + "DATE_FORMAT(DIVERTED_DATE, '%d/%m/%Y') AS DIVERTED_DATE, DIVERTED_NO, DIVERTED_REASON, INVOICE_NO, DATE_FORMAT(DIVERTED_DATE, '%d/%m/%Y') AS INVOICE_DATE, INVOICE_VALUE, "
                    + "DATE_FORMAT(WARP_DATE, '%d/%m/%Y') AS WARP_DATE, DATE_FORMAT(WVG_DATE, '%d/%m/%Y') AS WVG_DATE, DATE_FORMAT(SPLICE_DATE, '%d/%m/%Y') AS SPLICE_DATE, DATE_FORMAT(MND_DATE, '%d/%m/%Y') AS MND_DATE, "
                    + "DATE_FORMAT(NDL_DATE, '%d/%m/%Y') AS NDL_DATE, DATE_FORMAT(SEAM_DATE, '%d/%m/%Y') AS SEAM_DATE, DATE_FORMAT(FNSG_DATE, '%d/%m/%Y') AS FNSG_DATE, DATE_FORMAT(SDF_INSTRUCT_DATE, '%d/%m/%Y') AS SDF_INSTRUCT_DATE, "
                    + "DATE_FORMAT(SDF_SPIRALED_DATE, '%d/%m/%Y') AS SDF_SPIRALED_DATE, DATE_FORMAT(SDF_ASSEMBLED_DATE, '%d/%m/%Y') AS SDF_ASSEMBLED_DATE, DATE_FORMAT(CLOSURE_DATE, '%d/%m/%Y') AS CLOSURE_DATE, CLOSURE_REMARK, DATE_FORMAT(REOPEN_DATE, '%d/%m/%Y') AS REOPEN_DATE, REOPEN_REMARK, CONCAT(DATE_FORMAT(CURRENT_DATE(), '%d/%m/%Y'),' ',CURRENT_TIME()) AS RUN_DATETIME "
                    + "FROM PRODUCTION.PR_OBSOLETE_WIP_STATUS "                    
                    + filterBy + " "
                    + ") AS OB "
                    + "LEFT JOIN (SELECT PARTY_CODE AS PM_PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS PM "
                    + "ON OB.PARTY_CODE=PM.PM_PARTY_CODE ,(select @a:=0) as a  "
                    + orderBy + " ";

            System.out.println(sql);
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelDetailWIP.addColumn(rsInfo.getColumnName(i));
            }
            rs.first();
            System.out.println("Row no." + rs.getRow());
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }
                    DataModelDetailWIP.addRow(rowData);
                    rs.next();
                }
            }
            DataModelDetailWIP.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateDetailCS() {
        String sql = "";
        String orderBy = "";        
        String filterBy = "";
        ResultSet rs;
        DataModelDetailCS = new EITLTableModel();
        TableDetailCS.removeAll();
        TableDetailCS.setModel(DataModelDetailCS);
        TableDetailCS.setAutoResizeMode(TableDetailCS.AUTO_RESIZE_OFF);
        try {
            int FilterBy = EITLERPGLOBAL.getComboCode(cmbFilterCS);
            if (FilterBy == 1)
                filterBy += " WHERE OPENING_DATE = '2019-04-01' ";
            if (FilterBy == 2)
                filterBy += " WHERE OBS_DIVERTED_DATE >= '2019-04-01' AND OPENING_DATE != '2019-04-01' ";
            if (FilterBy == 3)
                filterBy += " WHERE PIECE_STAGE IN ('DIVERTED')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' ";
            if (FilterBy == 4)
                filterBy += " WHERE PIECE_STAGE IN ('DIVIDED')   AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' ";
            if (FilterBy == 5)
                filterBy += " WHERE PIECE_STAGE IN ('INVOICED','EXP-INVOICE','RETURN')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' ";
            if (FilterBy == 6)
                filterBy += " WHERE COALESCE(NEW_OBSOLETE_STATUS,'') = 'OBSOLETE' ";
            
            int Orderby = EITLERPGLOBAL.getComboCode(cmbSortCS);
            if (Orderby == 1)
                orderBy += " ORDER BY OPENING_DATE DESC,PIECE_NO ";
            if (Orderby == 2)
                orderBy += " ORDER BY PIECE_NO ";
            if (Orderby == 3)
                orderBy += " ORDER BY PARTY_CODE,PIECE_NO ";
            if (Orderby == 4)
                orderBy += " ORDER BY PRODUCT_CODE,PIECE_NO ";
            if (Orderby == 5)
                orderBy += " ORDER BY PIECE_STAGE,PIECE_NO ";
            
            sql = "SELECT @a:=@a+1 AS SR_NO, OPENING_DATE, OBSOLETE_STATUS, OBSOLETE_REASON, PIECE_NO, PARTY_CODE, PARTY_NAME, MACHINE_NO, POSITION_NO, UPN, PRODUCT_CODE, P_GROUP, STYLE, LENGTH, WIDTH, GSM, SQMTR, WEIGHT, VALUE, PIECE_STAGE, "
                    + "OLD_PIECE_STAGE, NEW_OBSOLETE_STATUS, NEW_OBSOLETE_DATE, NEW_OBSOLETE_REASON, DIVERTED_DATE, DIVERTED_NO, DIVERTED_REASON, INVOICE_NO, INVOICE_DATE, INVOICE_VALUE, WARP_DATE, WVG_DATE, SPLICE_DATE, MND_DATE, "
                    + "NDL_DATE, SEAM_DATE, FNSG_DATE, SDF_INSTRUCT_DATE, SDF_SPIRALED_DATE, SDF_ASSEMBLED_DATE, CLOSURE_DATE, CLOSURE_REMARK, REOPEN_DATE, REOPEN_REMARK, RUN_DATETIME FROM "
                    + "(SELECT DATE_FORMAT(OPENING_DATE, '%d/%m/%Y') AS OPENING_DATE, OBSOLETE_STATUS, OBSOLETE_REASON, PIECE_NO, PARTY_CODE, MACHINE_NO, POSITION_NO, UPN, PRODUCT_CODE, P_GROUP, "
                    + "STYLE, LENGTH, WIDTH, GSM, SQMTR, WEIGHT, VALUE, PIECE_STAGE, OLD_PIECE_STAGE, NEW_OBSOLETE_STATUS, DATE_FORMAT(NEW_OBSOLETE_DATE, '%d/%m/%Y') AS NEW_OBSOLETE_DATE, NEW_OBSOLETE_REASON, "
                    + "DATE_FORMAT(DIVERTED_DATE, '%d/%m/%Y') AS DIVERTED_DATE, DIVERTED_NO, DIVERTED_REASON, INVOICE_NO, DATE_FORMAT(DIVERTED_DATE, '%d/%m/%Y') AS INVOICE_DATE, INVOICE_VALUE, "
                    + "DATE_FORMAT(WARP_DATE, '%d/%m/%Y') AS WARP_DATE, DATE_FORMAT(WVG_DATE, '%d/%m/%Y') AS WVG_DATE, DATE_FORMAT(SPLICE_DATE, '%d/%m/%Y') AS SPLICE_DATE, DATE_FORMAT(MND_DATE, '%d/%m/%Y') AS MND_DATE, "
                    + "DATE_FORMAT(NDL_DATE, '%d/%m/%Y') AS NDL_DATE, DATE_FORMAT(SEAM_DATE, '%d/%m/%Y') AS SEAM_DATE, DATE_FORMAT(FNSG_DATE, '%d/%m/%Y') AS FNSG_DATE, DATE_FORMAT(SDF_INSTRUCT_DATE, '%d/%m/%Y') AS SDF_INSTRUCT_DATE, "
                    + "DATE_FORMAT(SDF_SPIRALED_DATE, '%d/%m/%Y') AS SDF_SPIRALED_DATE, DATE_FORMAT(SDF_ASSEMBLED_DATE, '%d/%m/%Y') AS SDF_ASSEMBLED_DATE, DATE_FORMAT(CLOSURE_DATE, '%d/%m/%Y') AS CLOSURE_DATE, CLOSURE_REMARK, DATE_FORMAT(REOPEN_DATE, '%d/%m/%Y') AS REOPEN_DATE, REOPEN_REMARK, CONCAT(DATE_FORMAT(CURRENT_DATE(), '%d/%m/%Y'),' ',CURRENT_TIME()) AS RUN_DATETIME "
                    + "FROM PRODUCTION.PR_OBSOLETE_DIVERTED_STATUS "                    
                    + filterBy + " "
                    + ") AS OB "
                    + "LEFT JOIN (SELECT PARTY_CODE AS PM_PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS PM "
                    + "ON OB.PARTY_CODE=PM.PM_PARTY_CODE ,(select @a:=0) as a  "
                    + orderBy + " ";

            System.out.println(sql);
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelDetailCS.addColumn(rsInfo.getColumnName(i));
            }
            rs.first();
            System.out.println("Row no." + rs.getRow());
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }
                    DataModelDetailCS.addRow(rowData);
                    rs.next();
                }
            }
            DataModelDetailCS.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void GenerateStockFin() {
        String sql = "";
        ResultSet rs;
        DataModelFinishedGoods = new EITLTableModel();
        TableFinishedGoods.removeAll();
        TableFinishedGoods.setModel(DataModelFinishedGoods);
        TableFinishedGoods.setAutoResizeMode(TableFinishedGoods.AUTO_RESIZE_OFF);
        
        String finYear = cmbFinYear.getSelectedItem().toString();
        String fromYear = finYear.substring(0, 4);
        String toYear = finYear.substring(5, 9);
        
//        System.out.println("f "+finYear+" "+fromYear+" "+toYear);
        
        try {
            sql = "SELECT 'STOCK', ";
//            if (fromYear.equals("2019")) {
//                sql += "SUM(CASE WHEN OPENING_DATE = '2019-04-01'  THEN 1 ELSE 0 END) AS OPENING, ";
//                sql += "ROUND(SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN VALUE ELSE 0 END)/100000,2) AS OPENING_VALUE, ";
//            } else {
//                sql += "SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','INVOICED','EXP-INVOICE') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN 1 ELSE 0 END) AS OPENING, ";
//                sql += "ROUND(SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','INVOICED','EXP-INVOICE') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN VALUE ELSE 0 END)/100000,2) AS OPENING_VALUE, ";
//            }
            sql += " "
                    + "SUM(CASE WHEN FIN_YEAR = '"+finYear+"' AND OPENING_DATE = '"+fromYear+"-04-01' THEN 1 ELSE 0 END) AS OPENING, "
                    + "ROUND(SUM(CASE WHEN FIN_YEAR = '"+finYear+"' AND OPENING_DATE = '"+fromYear+"-04-01' THEN VALUE ELSE 0 END)/100000,2) AS OPENING_VALUE, "
//                    + "SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','INVOICED','EXP-INVOICE') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN 1 ELSE 0 END) AS OPENING, "
//                    + "ROUND(SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','INVOICED','EXP-INVOICE') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN VALUE ELSE 0 END)/100000,2) AS OPENING_VALUE, "
                    + "SUM(CASE WHEN OBSOLETE_DATE >= '"+fromYear+"-04-01' AND OBSOLETE_DATE <= '"+toYear+"-03-31' AND OPENING_DATE != '2019-04-01'  THEN 1 ELSE 0 END) AS ADDITION, "
                    + "ROUND(SUM(CASE WHEN OBSOLETE_DATE >= '"+fromYear+"-04-01' AND OBSOLETE_DATE <= '"+toYear+"-03-31' AND OPENING_DATE != '2019-04-01'  THEN VALUE ELSE 0 END)/100000,2) AS ADDITION_VALUE, "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) AS DIVERTED, "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) AS DIVERTED_VALUE, "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('DIVIDED','JOINED')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) AS DIVIDED_JOIN_TO_WIP, "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('DIVIDED','JOINED') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) AS DIVIDED_JOIN_TO_WIP_VALUE, "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('INVOICED','EXP-INVOICE') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) AS INVOICED, "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('INVOICED','EXP-INVOICE') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) AS INVOICED_VALUE, "
                    + "SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = '' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) AS RETURN_TO_ORIGINAL_PARTY, "
                    + "ROUND(SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = '' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) AS RETURN_TO_ORIGINAL_PARTY_VALUE, "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('CANCELED','SCRAP')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) AS SCRAP, "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('CANCELED','SCRAP') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) AS SCRAP_VALUE, ";
//            if (fromYear.equals("2019")) {
//                sql += "SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN 1 ELSE 0 END) + ";
//            } else {
//                sql += "SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','INVOICED','EXP-INVOICE') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN 1 ELSE 0 END) + ";
//            }
            sql += " "  
                    + "SUM(CASE WHEN FIN_YEAR = '"+finYear+"' AND OPENING_DATE = '"+fromYear+"-04-01' THEN 1 ELSE 0 END) + "
//                    + "SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','INVOICED','EXP-INVOICE') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN 1 ELSE 0 END) + "
                    + "SUM(CASE WHEN OBSOLETE_DATE >= '"+fromYear+"-04-01' AND OBSOLETE_DATE <= '"+toYear+"-03-31' AND OPENING_DATE != '2019-04-01'  THEN 1 ELSE 0 END) - "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED','DIVIDED','JOINED') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END)- "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('INVOICED','EXP-INVOICE') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) - "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('CANCELED','SCRAP','RETURN') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) - "
                    + "SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = '' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) "
                    + "AS CLOSING, ";
//            if (fromYear.equals("2019")) {
//                sql += "ROUND(SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN VALUE ELSE 0 END)/100000,2) + ";
//            } else {
//                sql += "ROUND(SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','INVOICED','EXP-INVOICE') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN VALUE ELSE 0 END)/100000,2) + ";
//            }
            sql += " "                     
                    + "ROUND(SUM(CASE WHEN FIN_YEAR = '"+finYear+"' AND OPENING_DATE = '"+fromYear+"-04-01' THEN VALUE ELSE 0 END)/100000,2) + "
//                    + "ROUND(SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','INVOICED','EXP-INVOICE') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN VALUE ELSE 0 END)/100000,2) + "
                    + "ROUND(SUM(CASE WHEN OBSOLETE_DATE >= '"+fromYear+"-04-01' AND OBSOLETE_DATE <= '"+toYear+"-03-31' AND OPENING_DATE != '2019-04-01'  THEN VALUE ELSE 0 END)/100000,2) - "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED','DIVIDED','JOINED') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) - "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('INVOICED','EXP-INVOICE') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) - "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('CANCELED','SCRAP','RETURN') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) - "
                    + "ROUND(SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = '' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) "
                    + "AS CLOSING_VALUE, "
                    + "CONCAT(DATE_FORMAT(CURRENT_DATE(), '%d/%m/%Y'),' ',CURRENT_TIME()) AS RUN_DATETIME "
                    //                    + "SUM(CASE WHEN PIECE_STAGE IN ('IN STOCK' )  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' THEN 1 ELSE 0 END) AS OBSOLETE, "
                    //                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('IN STOCK' ) AND NEW_OBSOLETE_STATUS = 'OBSOLETE' THEN VALUE ELSE 0 END)/100000,2) AS OBSOLETE_VALUE "
                    + "FROM PRODUCTION.PR_OBSOLETE_STOCK_STATUS_FY "
                    + "WHERE FIN_YEAR = '"+finYear+"' ";

            System.out.println(sql);
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelFinishedGoods.addColumn(rsInfo.getColumnName(i));
            }
            rs.first();
            System.out.println("Row no." + rs.getRow());
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }
                    DataModelFinishedGoods.addRow(rowData);
                    rs.next();
                }
            }
            DataModelFinishedGoods.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateWIPFin() {
        String sql = "";
        ResultSet rs;
        DataModelWIP = new EITLTableModel();
        TableWIP.removeAll();
        TableWIP.setModel(DataModelWIP);
        TableWIP.setAutoResizeMode(TableWIP.AUTO_RESIZE_OFF);
        
        String finYear = cmbFinYear.getSelectedItem().toString();
        String fromYear = finYear.substring(0, 4);
        String toYear = finYear.substring(5, 9);
        
//        System.out.println("f "+finYear+" "+fromYear+" "+toYear);
        
        try {
            sql = "SELECT 'WIP', ";
//            if (fromYear.equals("2019")) {
//                sql += "SUM(CASE WHEN OPENING_DATE = '2019-04-01'  THEN 1 ELSE 0 END) AS OPENING, ";
//                sql += "ROUND(SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN VALUE ELSE 0 END)/100000,2) AS OPENING_VALUE, ";
//            } else {
//                sql += "SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','JOINED','CANCELED','SCRAP','IN STOCK','BSR','INVOICED','EXP-INVOICE') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN 1 ELSE 0 END) AS OPENING, ";
//                sql += "ROUND(SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','JOINED','CANCELED','SCRAP','IN STOCK','BSR','INVOICED','EXP-INVOICE') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN VALUE ELSE 0 END)/100000,2) AS OPENING_VALUE, ";
//            }
            sql += " "
                    + "SUM(CASE WHEN FIN_YEAR = '"+finYear+"' AND OPENING_DATE = '"+fromYear+"-04-01' THEN 1 ELSE 0 END) AS OPENING, "
                    + "ROUND(SUM(CASE WHEN FIN_YEAR = '"+finYear+"' AND OPENING_DATE = '"+fromYear+"-04-01' THEN VALUE ELSE 0 END)/100000,2) AS OPENING_VALUE, "
//                    + "SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','JOINED','CANCELED','SCRAP','IN STOCK','BSR','INVOICED','EXP-INVOICE') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN 1 ELSE 0 END) AS OPENING, "
//                    + "ROUND(SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','JOINED','CANCELED','SCRAP','IN STOCK','BSR','INVOICED','EXP-INVOICE') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN VALUE ELSE 0 END)/100000,2) AS OPENING_VALUE, "
                    + "SUM(CASE WHEN OBSOLETE_DATE >= '"+fromYear+"-04-01' AND OBSOLETE_DATE <= '"+toYear+"-03-31' AND OPENING_DATE != '2019-04-01'  THEN 1 ELSE 0 END) AS ADDITION, "
                    + "ROUND(SUM(CASE WHEN OBSOLETE_DATE >= '"+fromYear+"-04-01' AND OBSOLETE_DATE <= '"+toYear+"-03-31' AND OPENING_DATE != '2019-04-01'  THEN VALUE ELSE 0 END)/100000,2) AS ADDITION_VALUE, "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) AS DIVERTED, "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) AS DIVERTED_VALUE, "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('DIVIDED')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) AS DIVIDED_TO_WIP, "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('DIVIDED') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) AS DIVIDED_TO_WIP_VALUE, "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('JOINED')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) AS JOINED, "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('JOINED') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) AS JOINED_VALUE, "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('CANCELED','SCRAP')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) AS SCRAP, "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('CANCELED','SCRAP') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) AS SCRAP_VALUE, "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('IN STOCK','BSR','INVOICED','EXP-INVOICE') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) AS INSTOCKTRANSFER, "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('IN STOCK','BSR','INVOICED','EXP-INVOICE') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) AS INSTOCKTRANFER_VALUE, "
                    + "SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = '' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) AS RETURN_TO_ORIGINAL_PARTY, "
                    + "ROUND(SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = '' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) AS RETURN_TO_ORIGINAL_PARTY_VALUE, "
                    + " ";
//            if (fromYear.equals("2019")) {
//                sql += "SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN 1 ELSE 0 END) + ";
//            } else {
//                sql += "SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','JOINED','CANCELED','SCRAP','IN STOCK','BSR','INVOICED','EXP-INVOICE') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN 1 ELSE 0 END) + ";
//            }
            sql += " "                    
                    + "SUM(CASE WHEN FIN_YEAR = '"+finYear+"' AND OPENING_DATE = '"+fromYear+"-04-01' THEN 1 ELSE 0 END) + "
//                    + "SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','JOINED','CANCELED','SCRAP','IN STOCK','BSR','INVOICED','EXP-INVOICE') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN 1 ELSE 0 END) + "
                    + "SUM(CASE WHEN OBSOLETE_DATE >= '"+fromYear+"-04-01' AND OBSOLETE_DATE <= '"+toYear+"-03-31' AND OPENING_DATE != '2019-04-01'  THEN 1 ELSE 0 END) - "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED','DIVIDED','JOINED','CANCELED','SCRAP') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END)- "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('IN STOCK','BSR','INVOICED','EXP-INVOICE') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) - "
                    + "SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = '' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) "
                    + "AS CLOSING, ";
//            if (fromYear.equals("2019")) {
//                sql += "ROUND(SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN VALUE ELSE 0 END)/100000,2) + ";
//            } else {
//                sql += "ROUND(SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','JOINED','CANCELED','SCRAP','IN STOCK','BSR','INVOICED','EXP-INVOICE') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN VALUE ELSE 0 END)/100000,2) + ";
//            }
            sql += " " 
                    + "ROUND(SUM(CASE WHEN FIN_YEAR = '"+finYear+"' AND OPENING_DATE = '"+fromYear+"-04-01' THEN VALUE ELSE 0 END)/100000,2) + "
//                    + "ROUND(SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','JOINED','CANCELED','SCRAP','IN STOCK','BSR','INVOICED','EXP-INVOICE') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN VALUE ELSE 0 END)/100000,2) + "
                    + "ROUND(SUM(CASE WHEN OBSOLETE_DATE >= '"+fromYear+"-04-01' AND OBSOLETE_DATE <= '"+toYear+"-03-31' AND OPENING_DATE != '2019-04-01'  THEN VALUE ELSE 0 END)/100000,2) - "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED','DIVIDED','JOINED','CANCELED','SCRAP') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) - "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('IN STOCK','BSR','INVOICED','EXP-INVOICE') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) - "
                    + "ROUND(SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = '' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) "
                    + "AS CLOSING_VALUE, "
                    + "CONCAT(DATE_FORMAT(CURRENT_DATE(), '%d/%m/%Y'),' ',CURRENT_TIME()) AS RUN_DATETIME "
                    //                    + "SUM(CASE WHEN PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','SEAMING','FINISHING','SPLICING','ASSEMBLY','SPIRALLING','WIP')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' THEN 1 ELSE 0 END) AS OBSOLETE, "
                    //                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','SEAMING','FINISHING','SPLICING','ASSEMBLY','SPIRALLING','WIP' ) AND NEW_OBSOLETE_STATUS = 'OBSOLETE' THEN VALUE ELSE 0 END)/100000,2) AS OBSOLETE_VALUE "
                    + "FROM PRODUCTION.PR_OBSOLETE_WIP_STATUS_FY "
                    + "WHERE FIN_YEAR='"+finYear+"' ";

            System.out.println(sql);
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelWIP.addColumn(rsInfo.getColumnName(i));
            }
            rs.first();
            System.out.println("Row no." + rs.getRow());
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }
                    DataModelWIP.addRow(rowData);
                    rs.next();
                }
            }
            DataModelWIP.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateDivertedFin() {
        String sql = "";
        ResultSet rs;
        DataModelCSS = new EITLTableModel();
        TableCSS.removeAll();
        TableCSS.setModel(DataModelCSS);
        TableCSS.setAutoResizeMode(TableCSS.AUTO_RESIZE_OFF);
        
        String finYear = cmbFinYear.getSelectedItem().toString();
        String fromYear = finYear.substring(0, 4);
        String toYear = finYear.substring(5, 9);
        
//        System.out.println("f "+finYear+" "+fromYear+" "+toYear);
        
        try {
            sql = "SELECT 'DIVERTED', ";
//            if (fromYear.equals("2019")) {
//                sql += "SUM(CASE WHEN OPENING_DATE = '2019-04-01'  THEN 1 ELSE 0 END) AS OPENING, ";
//                sql += "ROUND(SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN VALUE ELSE 0 END)/100000,2) AS OPENING_VALUE, ";
//            } else {
//                sql += "SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN 1 ELSE 0 END) +  SUM(CASE WHEN OBS_DIVERTED_DATE >= '2019-04-01' AND OBS_DIVERTED_DATE <= '2020-03-31' AND OPENING_DATE != '2019-04-01'  THEN 1 ELSE 0 END) - SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED','DIVIDED')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' AND OPENING_DATE >= '2019-04-01' AND OPENING_DATE <= '2020-03-31' THEN 1 ELSE 0 END)- SUM(CASE WHEN PIECE_STAGE IN ('INVOICED','EXP-INVOICE','RETURN')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' AND OPENING_DATE >= '2019-04-01' AND OPENING_DATE <= '2020-03-31' THEN 1 ELSE 0 END) - SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = 'OBSOLETE' AND OPENING_DATE >= '2019-04-01' AND OPENING_DATE <= '2020-03-31' THEN 1 ELSE 0 END) AS OPENING, ";
////                        + "SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','INVOICED','EXP-INVOICE','RETURN') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN 1 ELSE 0 END) AS OPENING, ";
//                sql += "ROUND(SUM(CASE WHEN OPENING_DATE <= '2019-04-01' THEN VALUE ELSE 0 END)/100000,2) +  ROUND(SUM(CASE WHEN OBS_DIVERTED_DATE >= '2019-04-01' AND OBS_DIVERTED_DATE <= '2020-03-31' AND OPENING_DATE != '2019-04-01'  THEN VALUE ELSE 0 END)/100000,2) - ROUND(SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED','DIVIDED')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' AND OPENING_DATE >= '2019-04-01' AND OPENING_DATE <= '2020-03-31' THEN VALUE ELSE 0 END)/100000,2) - ROUND(SUM(CASE WHEN PIECE_STAGE IN ('INVOICED','EXP-INVOICE','RETURN')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' AND OPENING_DATE >= '2019-04-01' AND OPENING_DATE <= '2020-03-31' THEN VALUE ELSE 0 END)/100000,2) - ROUND(SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = 'OBSOLETE' AND OPENING_DATE >= '2019-04-01' AND OPENING_DATE <= '2020-03-31' THEN VALUE ELSE 0 END)/100000,2) AS OPENING_VALUE, ";
////                        + "ROUND(SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','INVOICED','EXP-INVOICE','RETURN') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN VALUE ELSE 0 END)/100000,2) AS OPENING_VALUE, ";
//            }
            sql += " "
                    + "SUM(CASE WHEN FIN_YEAR = '"+finYear+"' AND OPENING_DATE = '"+fromYear+"-04-01' THEN 1 ELSE 0 END) AS OPENING, "
                    + "ROUND(SUM(CASE WHEN FIN_YEAR = '"+finYear+"' AND OPENING_DATE = '"+fromYear+"-04-01' THEN VALUE ELSE 0 END)/100000,2) AS OPENING_VALUE, "
//                    + "SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','INVOICED','EXP-INVOICE','RETURN') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN 1 ELSE 0 END) AS OPENING, "
//                    + "ROUND(SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','INVOICED','EXP-INVOICE','RETURN') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN VALUE ELSE 0 END)/100000,2) AS OPENING_VALUE, "
                    + "SUM(CASE WHEN OBS_DIVERTED_DATE >= '"+fromYear+"-04-01' AND OBS_DIVERTED_DATE <= '"+toYear+"-03-31' AND OPENING_DATE != '"+fromYear+"-04-01'  THEN 1 ELSE 0 END) AS ADDITION, "
                    + "ROUND(SUM(CASE WHEN OBS_DIVERTED_DATE >= '"+fromYear+"-04-01' AND OBS_DIVERTED_DATE <= '"+toYear+"-03-31' AND OPENING_DATE != '"+fromYear+"-04-01'  THEN VALUE ELSE 0 END)/100000,2) AS ADDITION_VALUE, "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) AS DIVERTED, "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) AS DIVERTED_VALUE, "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('DIVIDED')   AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE'  AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) AS DIVIDED_TO_WIP, "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('DIVIDED')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) AS DIVIDED_TO_WIP_VALUE, "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('INVOICED','EXP-INVOICE','RETURN','SCRAP')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) AS INVOICED, "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('INVOICED','EXP-INVOICE','RETURN','SCRAP')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) AS INVOICED_VALUE, "
                    + "SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) AS REOBSOLETE, "
                    + "ROUND(SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) AS REOBSOLETE_VALUE, ";
//            if (fromYear.equals("2019")) {
//                sql += "SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN 1 ELSE 0 END) + ";
//            } else {
////                sql += "SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','INVOICED','EXP-INVOICE','RETURN') AND COALESCE(NEW_OBSOLETE_STATUS,'') != ''  AND COALESCE(NEW_OBSOLETE_STATUS,'') != 'OBSOLETE' THEN 1 ELSE 0 END) + ";
//                sql += "SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN 1 ELSE 0 END) +  SUM(CASE WHEN OBS_DIVERTED_DATE >= '2019-04-01' AND OBS_DIVERTED_DATE <= '2020-03-31' AND OPENING_DATE != '2019-04-01'  THEN 1 ELSE 0 END) - SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED','DIVIDED')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' AND OPENING_DATE >= '2019-04-01' AND OPENING_DATE <= '2020-03-31' THEN 1 ELSE 0 END)- SUM(CASE WHEN PIECE_STAGE IN ('INVOICED','EXP-INVOICE','RETURN')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' AND OPENING_DATE >= '2019-04-01' AND OPENING_DATE <= '2020-03-31' THEN 1 ELSE 0 END) - SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = 'OBSOLETE' AND OPENING_DATE >= '2019-04-01' AND OPENING_DATE <= '2020-03-31' THEN 1 ELSE 0 END) + ";
//            }
            sql += " "
                    + "SUM(CASE WHEN FIN_YEAR='"+finYear+"' AND OPENING_DATE = '"+fromYear+"-04-01' THEN 1 ELSE 0 END) + "
//                    + "SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','INVOICED','EXP-INVOICE','RETURN') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN 1 ELSE 0 END) + "
                    + "SUM(CASE WHEN OBS_DIVERTED_DATE >= '"+fromYear+"-04-01' AND OBS_DIVERTED_DATE <= '"+toYear+"-03-31' AND OPENING_DATE != '"+fromYear+"-04-01'  THEN 1 ELSE 0 END) - "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED','DIVIDED')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END)- "
                    + "SUM(CASE WHEN PIECE_STAGE IN ('INVOICED','EXP-INVOICE','RETURN','SCRAP')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) - "
                    + "SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN 1 ELSE 0 END) "
                    + "AS CLOSING, ";
//            if (fromYear.equals("2019")) {
//                sql += "ROUND(SUM(CASE WHEN OPENING_DATE = '2019-04-01' THEN VALUE ELSE 0 END)/100000,2) + ";
//            } else {
////                sql += "ROUND(SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','INVOICED','EXP-INVOICE','RETURN') AND COALESCE(NEW_OBSOLETE_STATUS,'') != ''  AND COALESCE(NEW_OBSOLETE_STATUS,'') != 'OBSOLETE' THEN VALUE ELSE 0 END)/100000,2) + ";
//                sql += "ROUND(SUM(CASE WHEN OPENING_DATE <= '2019-04-01' THEN VALUE ELSE 0 END)/100000,2) +  ROUND(SUM(CASE WHEN OBS_DIVERTED_DATE >= '2019-04-01' AND OBS_DIVERTED_DATE <= '2020-03-31' AND OPENING_DATE != '2019-04-01'  THEN VALUE ELSE 0 END)/100000,2) - ROUND(SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED','DIVIDED')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' AND OPENING_DATE >= '2019-04-01' AND OPENING_DATE <= '2020-03-31' THEN VALUE ELSE 0 END)/100000,2) - ROUND(SUM(CASE WHEN PIECE_STAGE IN ('INVOICED','EXP-INVOICE','RETURN')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' AND OPENING_DATE >= '2019-04-01' AND OPENING_DATE <= '2020-03-31' THEN VALUE ELSE 0 END)/100000,2) - ROUND(SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = 'OBSOLETE' AND OPENING_DATE >= '2019-04-01' AND OPENING_DATE <= '2020-03-31' THEN VALUE ELSE 0 END)/100000,2) + ";
//            }
            sql += " "
                    + "ROUND(SUM(CASE WHEN FIN_YEAR='"+finYear+"' AND OPENING_DATE = '"+fromYear+"-04-01' THEN VALUE ELSE 0 END)/100000,2) + "
//                    + "ROUND(SUM(CASE WHEN OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','INVOICED','EXP-INVOICE','RETURN') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' THEN VALUE ELSE 0 END)/100000,2) + "
                    + "ROUND(SUM(CASE WHEN OBS_DIVERTED_DATE >= '"+fromYear+"-04-01' AND OBS_DIVERTED_DATE <= '"+toYear+"-03-31' AND OPENING_DATE != '"+fromYear+"-04-01'  THEN VALUE ELSE 0 END)/100000,2) - "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('DIVERTED','DIVIDED')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) - "
                    + "ROUND(SUM(CASE WHEN PIECE_STAGE IN ('INVOICED','EXP-INVOICE','RETURN','SCRAP')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) - "
                    + "ROUND(SUM(CASE WHEN COALESCE(NEW_OBSOLETE_STATUS,'') = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' THEN VALUE ELSE 0 END)/100000,2) "
                    + "AS CLOSING_VALUE, "
                    + "CONCAT(DATE_FORMAT(CURRENT_DATE(), '%d/%m/%Y'),' ',CURRENT_TIME()) AS RUN_DATETIME "                    
//                    + "SUM(CASE WHEN PIECE_STAGE NOT IN ('INVOICED','EXP-INVOICE','DIVERTED','DIVIDED','RETURN')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' THEN 1 ELSE 0 END) AS OBSOLETE, "
//                    + "ROUND(SUM(CASE WHEN PIECE_STAGE NOT IN ('INVOICED','EXP-INVOICE','DIVERTED','DIVIDED','RETURN')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' THEN VALUE ELSE 0 END)/100000,2) AS OBSOLETE_VALUE "
                    + "FROM PRODUCTION.PR_OBSOLETE_DIVERTED_STATUS_FY "
                    + "WHERE FIN_YEAR='"+finYear+"' ";

            System.out.println(sql);
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelCSS.addColumn(rsInfo.getColumnName(i));
            }
            rs.first();
            System.out.println("Row no." + rs.getRow());
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }
                    DataModelCSS.addRow(rowData);
                    rs.next();
                }
            }
            DataModelCSS.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void GenerateDetailStockFin() {
        String sql = "";
        String orderBy = "";
        String filterBy = "";
        ResultSet rs;
        DataModelDetailFG = new EITLTableModel();
        TableDetailFG.removeAll();
        TableDetailFG.setModel(DataModelDetailFG);
        TableDetailFG.setAutoResizeMode(TableDetailFG.AUTO_RESIZE_OFF);
        
        try {
            int FilterBy = EITLERPGLOBAL.getComboCode(cmbFilterStock);
            if (FilterBy == 0)
                filterBy += " WHERE OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' AND FIN_YEAR='"+finYear+"' ";
//            if (FilterBy == 1 && fromYear.equals("2019"))
//                filterBy += " WHERE OPENING_DATE = '2019-04-01' AND FIN_YEAR='"+finYear+"' ";
//            if (FilterBy == 1 && !fromYear.equals("2019"))
//                filterBy += " WHERE OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','INVOICED','EXP-INVOICE') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' ";
            if (FilterBy == 1)
                filterBy += " WHERE OPENING_DATE = '"+fromYear+"-04-01' AND FIN_YEAR='"+finYear+"' ";
            if (FilterBy == 2)
                filterBy += " WHERE OBSOLETE_DATE >= '"+fromYear+"-04-01' AND OBSOLETE_DATE <= '"+toYear+"-03-31' AND OPENING_DATE != '2019-04-01' AND FIN_YEAR='"+finYear+"' ";
            if (FilterBy == 3)
                filterBy += " WHERE PIECE_STAGE IN ('DIVERTED')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' AND FIN_YEAR='"+finYear+"' ";
            if (FilterBy == 4)
                filterBy += " WHERE PIECE_STAGE IN ('DIVIDED')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' AND FIN_YEAR='"+finYear+"' ";
            if (FilterBy == 5)
                filterBy += " WHERE PIECE_STAGE IN ('INVOICED','EXP-INVOICE') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' AND FIN_YEAR='"+finYear+"' ";
            if (FilterBy == 6)
                filterBy += " WHERE COALESCE(NEW_OBSOLETE_STATUS,'') = '' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' AND FIN_YEAR='"+finYear+"' ";
            if (FilterBy == 7)
                filterBy += " WHERE PIECE_STAGE IN ('CANCELED','SCRAP')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' AND FIN_YEAR='"+finYear+"' ";
            
            int pMonth = cmbMonthStock.getSelectedIndex();
            if (pMonth != 0)
                filterBy += " AND MONTH(OPENING_DATE) = "+pMonth+" ";            
            
            int Orderby = EITLERPGLOBAL.getComboCode(cmbSortFG);
            if (Orderby == 1)
                orderBy += " ORDER BY OPENING_DATE DESC,PIECE_NO ";
            if (Orderby == 2)
                orderBy += " ORDER BY PIECE_NO ";
            if (Orderby == 3)
                orderBy += " ORDER BY PARTY_CODE,PIECE_NO ";
            if (Orderby == 4)
                orderBy += " ORDER BY PRODUCT_CODE,PIECE_NO ";
            if (Orderby == 5)
                orderBy += " ORDER BY PIECE_STAGE,PIECE_NO ";

            sql = "SELECT @a:=@a+1 AS SR_NO, OPENING_DATE, OBSOLETE_STATUS, OBSOLETE_REASON, "
                    + "COALESCE(UPN_ASSIGN_STATUS,'') AS UPN_ASSIGN_STATUS, COALESCE(OBSOLETE_STAGE_DEPT,'') AS OBSOLETE_STAGE_DEPT, "
                    + "PIECE_NO, PARTY_CODE, PARTY_NAME, MACHINE_NO, POSITION_NO, UPN, PRODUCT_CODE, P_GROUP, STYLE, LENGTH, WIDTH, GSM, SQMTR, WEIGHT, VALUE, PIECE_STAGE, "
                    + "OLD_PIECE_STAGE, NEW_OBSOLETE_STATUS, NEW_OBSOLETE_DATE, NEW_OBSOLETE_REASON, DIVERTED_DATE, DIVERTED_NO, DIVERTED_REASON, INVOICE_NO, INVOICE_DATE, INVOICE_VALUE, WARP_DATE, WVG_DATE, SPLICE_DATE, MND_DATE, "
                    + "NDL_DATE, SEAM_DATE, FNSG_DATE, SDF_INSTRUCT_DATE, SDF_SPIRALED_DATE, SDF_ASSEMBLED_DATE, CLOSURE_DATE, CLOSURE_REMARK, REOPEN_DATE, REOPEN_REMARK, RUN_DATETIME FROM "
                    + "(SELECT DATE_FORMAT(OPENING_DATE, '%d/%m/%Y') AS OPENING_DATE, OBSOLETE_STATUS, OBSOLETE_REASON, "
                    + "CASE WHEN COALESCE(OBSOLETE_REASON,'') LIKE ('%REJECT%') THEN 'PRODUCTION' ELSE 'SALES' END AS OBSOLETE_STAGE_DEPT, "
                    + "PIECE_NO, PARTY_CODE, MACHINE_NO, POSITION_NO, UPN, PRODUCT_CODE, P_GROUP, "
                    + "STYLE, LENGTH, WIDTH, GSM, SQMTR, WEIGHT, VALUE, PIECE_STAGE, OLD_PIECE_STAGE, NEW_OBSOLETE_STATUS, DATE_FORMAT(NEW_OBSOLETE_DATE, '%d/%m/%Y') AS NEW_OBSOLETE_DATE, NEW_OBSOLETE_REASON, "
                    + "DATE_FORMAT(DIVERTED_DATE, '%d/%m/%Y') AS DIVERTED_DATE, DIVERTED_NO, DIVERTED_REASON, INVOICE_NO, DATE_FORMAT(DIVERTED_DATE, '%d/%m/%Y') AS INVOICE_DATE, INVOICE_VALUE, "
                    + "DATE_FORMAT(WARP_DATE, '%d/%m/%Y') AS WARP_DATE, DATE_FORMAT(WVG_DATE, '%d/%m/%Y') AS WVG_DATE, DATE_FORMAT(SPLICE_DATE, '%d/%m/%Y') AS SPLICE_DATE, DATE_FORMAT(MND_DATE, '%d/%m/%Y') AS MND_DATE, "
                    + "DATE_FORMAT(NDL_DATE, '%d/%m/%Y') AS NDL_DATE, DATE_FORMAT(SEAM_DATE, '%d/%m/%Y') AS SEAM_DATE, DATE_FORMAT(FNSG_DATE, '%d/%m/%Y') AS FNSG_DATE, DATE_FORMAT(SDF_INSTRUCT_DATE, '%d/%m/%Y') AS SDF_INSTRUCT_DATE, "
                    + "DATE_FORMAT(SDF_SPIRALED_DATE, '%d/%m/%Y') AS SDF_SPIRALED_DATE, DATE_FORMAT(SDF_ASSEMBLED_DATE, '%d/%m/%Y') AS SDF_ASSEMBLED_DATE, DATE_FORMAT(CLOSURE_DATE, '%d/%m/%Y') AS CLOSURE_DATE, CLOSURE_REMARK, DATE_FORMAT(REOPEN_DATE, '%d/%m/%Y') AS REOPEN_DATE, REOPEN_REMARK, CONCAT(DATE_FORMAT(CURRENT_DATE(), '%d/%m/%Y'),' ',CURRENT_TIME()) AS RUN_DATETIME "
                    + "FROM PRODUCTION.PR_OBSOLETE_STOCK_STATUS_FY "                    
                    + filterBy + " "
                    + ") AS OB "
                    + "LEFT JOIN (SELECT PARTY_CODE AS PM_PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS PM "
                    + "ON OB.PARTY_CODE=PM.PM_PARTY_CODE "
                    + "LEFT JOIN (SELECT * FROM (SELECT PIECE_NO AS UA_PIECE_NO,UPN_ASSIGN_STATUS,OBSOLETE_SOURCE,ENTRY_DATE FROM PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP ORDER BY ENTRY_DATE DESC ) AS A GROUP BY UA_PIECE_NO) AS UA "
                    + "ON OB.PIECE_NO=UA.UA_PIECE_NO "
                    + ",(select @a:=0) as a  "
                    + orderBy + " ";

            System.out.println(sql);
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelDetailFG.addColumn(rsInfo.getColumnName(i));
            }
            rs.first();
            System.out.println("Row no." + rs.getRow());
            if (rs.getRow() > 0) {
                int cnt = 1;
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }                    
                    rowData[0] = cnt;
                    DataModelDetailFG.addRow(rowData);
                    cnt++;
                    rs.next();
                }
            }
            DataModelDetailFG.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateDetailWIPFin() {
        String sql = "";
        String orderBy = "";
        String filterBy = "";
        ResultSet rs;
        DataModelDetailWIP = new EITLTableModel();
        TableDetailWIP.removeAll();
        TableDetailWIP.setModel(DataModelDetailWIP);
        TableDetailWIP.setAutoResizeMode(TableDetailWIP.AUTO_RESIZE_OFF);
       
        try {
            int FilterBy = EITLERPGLOBAL.getComboCode(cmbFilterWIP);
            if (FilterBy == 0)
                filterBy += " WHERE OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' AND FIN_YEAR='"+finYear+"' ";
//            if (FilterBy == 1 && fromYear.equals("2019"))
//                filterBy += " WHERE OPENING_DATE = '2019-04-01' ";
//            if (FilterBy == 1 && !fromYear.equals("2019"))
//                filterBy += " WHERE OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','JOINED','CANCELED','SCRAP','IN STOCK','BSR','INVOICED','EXP-INVOICE') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' ";
            if (FilterBy == 1)
                filterBy += " WHERE OPENING_DATE = '"+fromYear+"-04-01' AND FIN_YEAR='"+finYear+"' ";
            if (FilterBy == 2)
                filterBy += " WHERE OBSOLETE_DATE >= '"+fromYear+"-04-01' AND OBSOLETE_DATE <= '"+toYear+"-03-31' AND OPENING_DATE != '2019-04-01' AND FIN_YEAR='"+finYear+"' ";
            if (FilterBy == 3)
                filterBy += " WHERE PIECE_STAGE IN ('DIVERTED')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' AND FIN_YEAR='"+finYear+"' ";
            if (FilterBy == 4)
                filterBy += " WHERE PIECE_STAGE IN ('DIVIDED')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' AND FIN_YEAR='"+finYear+"' ";
            if (FilterBy == 5)
                filterBy += " WHERE PIECE_STAGE IN ('JOINED')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' AND FIN_YEAR='"+finYear+"' ";
            if (FilterBy == 6)
                filterBy += " WHERE PIECE_STAGE IN ('CANCELED','SCRAP')  AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' AND FIN_YEAR='"+finYear+"' ";
            if (FilterBy == 7)
                filterBy += " WHERE PIECE_STAGE IN ('IN STOCK','BSR','INVOICED','EXP-INVOICE') AND NEW_OBSOLETE_STATUS = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' AND FIN_YEAR='"+finYear+"' ";
            if (FilterBy == 8)
                filterBy += " WHERE COALESCE(NEW_OBSOLETE_STATUS,'') = '' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' AND FIN_YEAR='"+finYear+"' ";
            
            int pMonth = cmbMonthWIP.getSelectedIndex();
            if (pMonth != 0)
                filterBy += " AND MONTH(OPENING_DATE) = "+pMonth+" ";            
            
            int Orderby = EITLERPGLOBAL.getComboCode(cmbSortWIP);
            if (Orderby == 1)
                orderBy += " ORDER BY OPENING_DATE DESC,PIECE_NO ";
            if (Orderby == 2)
                orderBy += " ORDER BY PIECE_NO ";
            if (Orderby == 3)
                orderBy += " ORDER BY PARTY_CODE,PIECE_NO ";
            if (Orderby == 4)
                orderBy += " ORDER BY PRODUCT_CODE,PIECE_NO ";
            if (Orderby == 5)
                orderBy += " ORDER BY PIECE_STAGE,PIECE_NO ";
                        
            sql = "SELECT @a:=@a+1 AS SR_NO, OPENING_DATE, OBSOLETE_STATUS, OBSOLETE_REASON, "
                    + "COALESCE(UPN_ASSIGN_STATUS,'') AS UPN_ASSIGN_STATUS, COALESCE(OBSOLETE_STAGE_DEPT,'') AS OBSOLETE_STAGE_DEPT, "
                    + "PIECE_NO, PARTY_CODE, PARTY_NAME, MACHINE_NO, POSITION_NO, UPN, PRODUCT_CODE, P_GROUP, STYLE, LENGTH, WIDTH, GSM, SQMTR, WEIGHT, VALUE, PIECE_STAGE, "
                    + "OLD_PIECE_STAGE, NEW_OBSOLETE_STATUS, NEW_OBSOLETE_DATE, NEW_OBSOLETE_REASON, DIVERTED_DATE, DIVERTED_NO, DIVERTED_REASON, INVOICE_NO, INVOICE_DATE, INVOICE_VALUE, WARP_DATE, WVG_DATE, SPLICE_DATE, MND_DATE, "
                    + "NDL_DATE, SEAM_DATE, FNSG_DATE, SDF_INSTRUCT_DATE, SDF_SPIRALED_DATE, SDF_ASSEMBLED_DATE, CLOSURE_DATE, CLOSURE_REMARK, REOPEN_DATE, REOPEN_REMARK, RUN_DATETIME FROM "
                    + "(SELECT DATE_FORMAT(OPENING_DATE, '%d/%m/%Y') AS OPENING_DATE, OBSOLETE_STATUS, OBSOLETE_REASON, "
                    + "CASE WHEN COALESCE(OBSOLETE_REASON,'') LIKE ('%REJECT%') THEN 'PRODUCTION' ELSE 'SALES' END AS OBSOLETE_STAGE_DEPT, "
                    + "PIECE_NO, PARTY_CODE, MACHINE_NO, POSITION_NO, UPN, PRODUCT_CODE, P_GROUP, "
                    + "STYLE, LENGTH, WIDTH, GSM, SQMTR, WEIGHT, VALUE, PIECE_STAGE, OLD_PIECE_STAGE, NEW_OBSOLETE_STATUS, DATE_FORMAT(NEW_OBSOLETE_DATE, '%d/%m/%Y') AS NEW_OBSOLETE_DATE, NEW_OBSOLETE_REASON, "
                    + "DATE_FORMAT(DIVERTED_DATE, '%d/%m/%Y') AS DIVERTED_DATE, DIVERTED_NO, DIVERTED_REASON, INVOICE_NO, DATE_FORMAT(DIVERTED_DATE, '%d/%m/%Y') AS INVOICE_DATE, INVOICE_VALUE, "
                    + "DATE_FORMAT(WARP_DATE, '%d/%m/%Y') AS WARP_DATE, DATE_FORMAT(WVG_DATE, '%d/%m/%Y') AS WVG_DATE, DATE_FORMAT(SPLICE_DATE, '%d/%m/%Y') AS SPLICE_DATE, DATE_FORMAT(MND_DATE, '%d/%m/%Y') AS MND_DATE, "
                    + "DATE_FORMAT(NDL_DATE, '%d/%m/%Y') AS NDL_DATE, DATE_FORMAT(SEAM_DATE, '%d/%m/%Y') AS SEAM_DATE, DATE_FORMAT(FNSG_DATE, '%d/%m/%Y') AS FNSG_DATE, DATE_FORMAT(SDF_INSTRUCT_DATE, '%d/%m/%Y') AS SDF_INSTRUCT_DATE, "
                    + "DATE_FORMAT(SDF_SPIRALED_DATE, '%d/%m/%Y') AS SDF_SPIRALED_DATE, DATE_FORMAT(SDF_ASSEMBLED_DATE, '%d/%m/%Y') AS SDF_ASSEMBLED_DATE, DATE_FORMAT(CLOSURE_DATE, '%d/%m/%Y') AS CLOSURE_DATE, CLOSURE_REMARK, DATE_FORMAT(REOPEN_DATE, '%d/%m/%Y') AS REOPEN_DATE, REOPEN_REMARK, CONCAT(DATE_FORMAT(CURRENT_DATE(), '%d/%m/%Y'),' ',CURRENT_TIME()) AS RUN_DATETIME "
                    + "FROM PRODUCTION.PR_OBSOLETE_WIP_STATUS_FY "                    
                    + filterBy + " "
                    + ") AS OB "
                    + "LEFT JOIN (SELECT PARTY_CODE AS PM_PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS PM "
                    + "ON OB.PARTY_CODE=PM.PM_PARTY_CODE "
                    + "LEFT JOIN (SELECT * FROM (SELECT PIECE_NO AS UA_PIECE_NO,UPN_ASSIGN_STATUS,OBSOLETE_SOURCE,ENTRY_DATE FROM PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP ORDER BY ENTRY_DATE DESC ) AS A GROUP BY UA_PIECE_NO) AS UA "
                    + "ON OB.PIECE_NO=UA.UA_PIECE_NO "
                    + ",(select @a:=0) as a  "
                    + orderBy + " ";

            System.out.println(sql);
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelDetailWIP.addColumn(rsInfo.getColumnName(i));
            }
            rs.first();
            System.out.println("Row no." + rs.getRow());
            if (rs.getRow() > 0) {
                int cnt = 1;
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }
                    rowData[0] = cnt;
                    DataModelDetailWIP.addRow(rowData);
                    cnt++;
                    rs.next();
                }
            }
            DataModelDetailWIP.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateDetailCSFin() {
        String sql = "";
        String orderBy = "";        
        String filterBy = "";
        ResultSet rs;
        DataModelDetailCS = new EITLTableModel();
        TableDetailCS.removeAll();
        TableDetailCS.setModel(DataModelDetailCS);
        TableDetailCS.setAutoResizeMode(TableDetailCS.AUTO_RESIZE_OFF);
        
        try {
            int FilterBy = EITLERPGLOBAL.getComboCode(cmbFilterCS);
            if (FilterBy == 0)
                filterBy += " WHERE OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' AND FIN_YEAR='"+finYear+"' ";
//            if (FilterBy == 1 && fromYear.equals("2019"))
//                filterBy += " WHERE OPENING_DATE = '2019-04-01' ";
//            if (FilterBy == 1 && !fromYear.equals("2019"))
//                filterBy += " WHERE OPENING_DATE <= '"+fromYear+"-04-01' AND PIECE_STAGE NOT IN ('DIVERTED','DIVIDED','INVOICED','EXP-INVOICE','RETURN') AND COALESCE(NEW_OBSOLETE_STATUS,'') != '' ";
            if (FilterBy == 1)
                filterBy += " WHERE OPENING_DATE = '"+fromYear+"-04-01' AND FIN_YEAR='"+finYear+"' ";
            if (FilterBy == 2)
                filterBy += " WHERE OBS_DIVERTED_DATE >= '"+fromYear+"-04-01' AND OBS_DIVERTED_DATE <= '"+toYear+"-03-31' AND OPENING_DATE != '"+fromYear+"-04-01' AND FIN_YEAR='"+finYear+"' ";
            if (FilterBy == 3)
                filterBy += " WHERE PIECE_STAGE IN ('DIVERTED')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' AND FIN_YEAR='"+finYear+"' ";
            if (FilterBy == 4)
                filterBy += " WHERE PIECE_STAGE IN ('DIVIDED')   AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' AND FIN_YEAR='"+finYear+"' ";
            if (FilterBy == 5)
                filterBy += " WHERE PIECE_STAGE IN ('INVOICED','EXP-INVOICE','RETURN')  AND COALESCE(NEW_OBSOLETE_STATUS,'') !='OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' AND FIN_YEAR='"+finYear+"' ";
            if (FilterBy == 6)
                filterBy += " WHERE COALESCE(NEW_OBSOLETE_STATUS,'') = 'OBSOLETE' AND OPENING_DATE >= '"+fromYear+"-04-01' AND OPENING_DATE <= '"+toYear+"-03-31' AND FIN_YEAR='"+finYear+"' ";
            
            int Orderby = EITLERPGLOBAL.getComboCode(cmbSortCS);
            if (Orderby == 1)
                orderBy += " ORDER BY OPENING_DATE DESC,PIECE_NO ";
            if (Orderby == 2)
                orderBy += " ORDER BY PIECE_NO ";
            if (Orderby == 3)
                orderBy += " ORDER BY PARTY_CODE,PIECE_NO ";
            if (Orderby == 4)
                orderBy += " ORDER BY PRODUCT_CODE,PIECE_NO ";
            if (Orderby == 5)
                orderBy += " ORDER BY PIECE_STAGE,PIECE_NO ";
            
            sql = "SELECT @a:=@a+1 AS SR_NO, OPENING_DATE, OBSOLETE_STATUS, OBSOLETE_REASON, PIECE_NO, PARTY_CODE, PARTY_NAME, MACHINE_NO, POSITION_NO, UPN, PRODUCT_CODE, P_GROUP, STYLE, LENGTH, WIDTH, GSM, SQMTR, WEIGHT, VALUE, PIECE_STAGE, "
                    + "OLD_PIECE_STAGE, NEW_OBSOLETE_STATUS, NEW_OBSOLETE_DATE, NEW_OBSOLETE_REASON, DIVERTED_DATE, DIVERTED_NO, DIVERTED_REASON, INVOICE_NO, INVOICE_DATE, INVOICE_VALUE, WARP_DATE, WVG_DATE, SPLICE_DATE, MND_DATE, "
                    + "NDL_DATE, SEAM_DATE, FNSG_DATE, SDF_INSTRUCT_DATE, SDF_SPIRALED_DATE, SDF_ASSEMBLED_DATE, CLOSURE_DATE, CLOSURE_REMARK, REOPEN_DATE, REOPEN_REMARK, RUN_DATETIME FROM "
                    + "(SELECT DATE_FORMAT(OPENING_DATE, '%d/%m/%Y') AS OPENING_DATE, OBSOLETE_STATUS, OBSOLETE_REASON, PIECE_NO, PARTY_CODE, MACHINE_NO, POSITION_NO, UPN, PRODUCT_CODE, P_GROUP, "
                    + "STYLE, LENGTH, WIDTH, GSM, SQMTR, WEIGHT, VALUE, PIECE_STAGE, OLD_PIECE_STAGE, NEW_OBSOLETE_STATUS, DATE_FORMAT(NEW_OBSOLETE_DATE, '%d/%m/%Y') AS NEW_OBSOLETE_DATE, NEW_OBSOLETE_REASON, "
                    + "DATE_FORMAT(DIVERTED_DATE, '%d/%m/%Y') AS DIVERTED_DATE, DIVERTED_NO, DIVERTED_REASON, INVOICE_NO, DATE_FORMAT(DIVERTED_DATE, '%d/%m/%Y') AS INVOICE_DATE, INVOICE_VALUE, "
                    + "DATE_FORMAT(WARP_DATE, '%d/%m/%Y') AS WARP_DATE, DATE_FORMAT(WVG_DATE, '%d/%m/%Y') AS WVG_DATE, DATE_FORMAT(SPLICE_DATE, '%d/%m/%Y') AS SPLICE_DATE, DATE_FORMAT(MND_DATE, '%d/%m/%Y') AS MND_DATE, "
                    + "DATE_FORMAT(NDL_DATE, '%d/%m/%Y') AS NDL_DATE, DATE_FORMAT(SEAM_DATE, '%d/%m/%Y') AS SEAM_DATE, DATE_FORMAT(FNSG_DATE, '%d/%m/%Y') AS FNSG_DATE, DATE_FORMAT(SDF_INSTRUCT_DATE, '%d/%m/%Y') AS SDF_INSTRUCT_DATE, "
                    + "DATE_FORMAT(SDF_SPIRALED_DATE, '%d/%m/%Y') AS SDF_SPIRALED_DATE, DATE_FORMAT(SDF_ASSEMBLED_DATE, '%d/%m/%Y') AS SDF_ASSEMBLED_DATE, DATE_FORMAT(CLOSURE_DATE, '%d/%m/%Y') AS CLOSURE_DATE, CLOSURE_REMARK, DATE_FORMAT(REOPEN_DATE, '%d/%m/%Y') AS REOPEN_DATE, REOPEN_REMARK, CONCAT(DATE_FORMAT(CURRENT_DATE(), '%d/%m/%Y'),' ',CURRENT_TIME()) AS RUN_DATETIME "
                    + "FROM PRODUCTION.PR_OBSOLETE_DIVERTED_STATUS_FY "                    
                    + filterBy + " "
                    + ") AS OB "
                    + "LEFT JOIN (SELECT PARTY_CODE AS PM_PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS PM "
                    + "ON OB.PARTY_CODE=PM.PM_PARTY_CODE ,(select @a:=0) as a  "
                    + orderBy + " ";

            System.out.println(sql);
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelDetailCS.addColumn(rsInfo.getColumnName(i));
            }
            rs.first();
            System.out.println("Row no." + rs.getRow());
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }
                    DataModelDetailCS.addRow(rowData);
                    rs.next();
                }
            }
            DataModelDetailCS.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
}