/*
 * frmIndentsInfo.java
 *
 * Created on July 13, 2005, 10:47 AM
 */

package EITLERP.FeltSales.MonthlySalesPlan;

import EITLERP.*;
import EITLERP.Stores.*;
import EITLERP.Purchase.*;
import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.sql.*;
import java.net.*;
import java.text.DecimalFormat;
import EITLERP.FeltSales.common.FeltInvCalc;
import EITLERP.FeltSales.common.clsOrderValueCalc;
import java.io.File;



/**
 *
 * @author  root
 */
public class frmFeltMonthlySalesPlan extends javax.swing.JApplet {
    
    private EITLTableModel DataModelSelection;
    private EITLTableModel DataModelSelected=new EITLTableModel();
    private EITLTableModel DataModelDeleted=new EITLTableModel();
    private EITLTableCellRenderer Render=new EITLTableCellRenderer();
    private EITLTableModel DataModel = new EITLTableModel();
    private EITLTableModel DataModelInstock = new EITLTableModel();
    private EITLTableModel DataModelWIP = new EITLTableModel();
    
      
    private EITLComboModel cmbSelectionModel=new EITLComboModel();
    private clsFeltMonthlySalesPlan ObjFeltMonthlySalesPlan= new clsFeltMonthlySalesPlan();
    private EITLComboModel cmbSelectedModel=new EITLComboModel();
    private clsExcelExporter exp = new clsExcelExporter();
    private EITLERP.FeltSales.MonthlySalesPlan.clsExcelExporter exp1 = new EITLERP.FeltSales.MonthlySalesPlan.clsExcelExporter();    
    private EITLComboModel cmbInStockModel = new EITLComboModel();
    private EITLComboModel cmbWIPModel = new EITLComboModel();
    private boolean cblerpFlag = false;
    
//  
    
//    private EITLComboModel cmbDespatchModel = new EITLComboModel();
//    private EITLComboModel cmbStockModel = new EITLComboModel();
//    private EITLComboModel cmbDiscountModel = new EITLComboModel();
//    private EITLComboModel cmbSeamModel = new EITLComboModel();    
//    private EITLComboModel cmbDeptModel=new EITLComboModel();
//    private EITLComboModel cmbApprovalModel=new EITLComboModel();
//    
    /** Initializes the applet frmIndentsInfo */
    public void init() {
        setSize(1000, 650);
        initComponents();
        GenerateCombo();
        GenerateStockCombo();
        GenerateWIPCombo();
        FormatGrid();
        FormatGridInStrock();
        FormatGridWIP();
        FormatGridSelectedTbl();
        
        
     //EITLERPGLOBAL.setComboIndex(cmbBuyer,EITLERPGLOBAL.gUserID);
        //txtRIA.setVisible(false);
        txtSelectedtoDelete.setVisible(false);
        cmdOpenU.setVisible(false);
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileexport = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        cmdShowI = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TblSelection = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cmbSelection = new javax.swing.JComboBox();
        txtSelectedtoInsert = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        cmdShowU = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TblSelected = new javax.swing.JTable();
        cmdOpenU = new javax.swing.JButton();
        cmbSelected = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        txtSelectedtoDelete = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        Table1 = new javax.swing.JTable();
        cmdShowsummary1 = new javax.swing.JButton();
        cmbsort1 = new javax.swing.JComboBox<String>();
        jLabel12 = new javax.swing.JLabel();
        ExportData1 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableInstock = new javax.swing.JTable();
        cmdInstock = new javax.swing.JButton();
        cmbInstock2 = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        Instockexc = new javax.swing.JButton();
        cmbInstock1 = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TableWIP = new javax.swing.JTable();
        cmbWIP1 = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        cmdWIP = new javax.swing.JButton();
        WIPexc = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        cmbWIP2 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtMonth = new javax.swing.JTextField();
        txtYear = new javax.swing.JTextField();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(0, 102, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setMinimumSize(new java.awt.Dimension(1000, 29));
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Piece Tracker");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(2, 4, 360, 20);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(2, 2, 990, 29);

        jTabbedPane1.setAutoscrolls(true);
        jTabbedPane1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(null);

        cmdShowI.setText("Show List");
        cmdShowI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowIActionPerformed(evt);
            }
        });
        jPanel2.add(cmdShowI);
        cmdShowI.setBounds(250, 10, 118, 20);

        TblSelection.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TblSelection.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        TblSelection.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TblSelectionMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TblSelection);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(9, 48, 920, 320);

        cmdAdd.setText("Add Selected");
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        jPanel2.add(cmdAdd);
        cmdAdd.setBounds(180, 390, 120, 28);

        jLabel3.setText("Selection by :");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(10, 10, 90, 20);
        jPanel2.add(cmbSelection);
        cmbSelection.setBounds(110, 10, 120, 20);
        jPanel2.add(txtSelectedtoInsert);
        txtSelectedtoInsert.setBounds(110, 390, 50, 28);

        jTabbedPane1.addTab("Piece Selection", jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(null);

        cmdShowU.setText("Show List");
        cmdShowU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowUActionPerformed(evt);
            }
        });
        jPanel3.add(cmdShowU);
        cmdShowU.setBounds(250, 10, 118, 20);

        TblSelected.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TblSelected.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TblSelectedMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TblSelected);

        jPanel3.add(jScrollPane2);
        jScrollPane2.setBounds(10, 40, 940, 330);

        cmdOpenU.setText("Delete Selected");
        jPanel3.add(cmdOpenU);
        cmdOpenU.setBounds(390, 390, 140, 28);
        jPanel3.add(cmbSelected);
        cmbSelected.setBounds(110, 10, 120, 20);

        jLabel8.setText("Selected By :");
        jPanel3.add(jLabel8);
        jLabel8.setBounds(10, 10, 90, 20);
        jPanel3.add(txtSelectedtoDelete);
        txtSelectedtoDelete.setBounds(190, 390, 70, 28);

        jTabbedPane1.addTab("Piece Selected", jPanel3);

        jPanel8.setLayout(null);

        Table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(Table1);

        jPanel8.add(jScrollPane7);
        jScrollPane7.setBounds(0, 70, 940, 402);

        cmdShowsummary1.setText("Show List");
        cmdShowsummary1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowsummary1ActionPerformed(evt);
            }
        });
        jPanel8.add(cmdShowsummary1);
        cmdShowsummary1.setBounds(250, 10, 118, 20);

        cmbsort1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PARTY CODE", "NAME" }));
        jPanel8.add(cmbsort1);
        cmbsort1.setBounds(90, 10, 120, 28);

        jLabel12.setText("Order By");
        jPanel8.add(jLabel12);
        jLabel12.setBounds(10, 10, 70, 20);

        ExportData1.setText("EXPORT TO EXCEL");
        ExportData1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportData1ActionPerformed(evt);
            }
        });
        jPanel8.add(ExportData1);
        ExportData1.setBounds(10, 480, 160, 40);

        jTabbedPane1.addTab("Summary Rpt", jPanel8);

        jPanel7.setLayout(null);

        TableInstock.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableInstock.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        jScrollPane4.setViewportView(TableInstock);

        jPanel7.add(jScrollPane4);
        jScrollPane4.setBounds(9, 48, 920, 320);

        cmdInstock.setText("Show List");
        cmdInstock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdInstockActionPerformed(evt);
            }
        });
        jPanel7.add(cmdInstock);
        cmdInstock.setBounds(250, 10, 118, 20);
        jPanel7.add(cmbInstock2);
        cmbInstock2.setBounds(550, 10, 220, 20);

        jLabel6.setText("Stock Days Criteria :");
        jPanel7.add(jLabel6);
        jLabel6.setBounds(410, 10, 130, 20);

        Instockexc.setText("EXPORT TO EXCEL");
        Instockexc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InstockexcActionPerformed(evt);
            }
        });
        jPanel7.add(Instockexc);
        Instockexc.setBounds(730, 390, 170, 28);
        jPanel7.add(cmbInstock1);
        cmbInstock1.setBounds(110, 10, 120, 20);

        jLabel9.setText("Select by :");
        jPanel7.add(jLabel9);
        jLabel9.setBounds(10, 10, 80, 20);

        jTabbedPane1.addTab("In Stock Rpt", jPanel7);

        jPanel11.setLayout(null);

        TableWIP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableWIP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        jScrollPane5.setViewportView(TableWIP);

        jPanel11.add(jScrollPane5);
        jScrollPane5.setBounds(9, 48, 920, 320);
        jPanel11.add(cmbWIP1);
        cmbWIP1.setBounds(100, 10, 120, 20);

        jLabel7.setText("Select by :");
        jPanel11.add(jLabel7);
        jLabel7.setBounds(10, 10, 80, 20);

        cmdWIP.setText("Show List");
        cmdWIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdWIPActionPerformed(evt);
            }
        });
        jPanel11.add(cmdWIP);
        cmdWIP.setBounds(250, 10, 118, 20);

        WIPexc.setText("EXPORT TO EXCEL");
        WIPexc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WIPexcActionPerformed(evt);
            }
        });
        jPanel11.add(WIPexc);
        WIPexc.setBounds(730, 390, 170, 28);

        jLabel10.setText("Stock Days Criteria :");
        jPanel11.add(jLabel10);
        jLabel10.setBounds(410, 10, 130, 20);
        jPanel11.add(cmbWIP2);
        cmbWIP2.setBounds(550, 10, 220, 20);

        jTabbedPane1.addTab("WIP Rpt", jPanel11);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(6, 99, 960, 560);
        jTabbedPane1.getAccessibleContext().setAccessibleName("Pending Order Form");

        jLabel2.setText("Year :");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(180, 50, 40, 20);

        jLabel5.setText("Month :");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(10, 50, 50, 20);
        getContentPane().add(txtMonth);
        txtMonth.setBounds(80, 50, 70, 28);
        getContentPane().add(txtYear);
        txtYear.setBounds(240, 50, 70, 28);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdShowsummary1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowsummary1ActionPerformed
        if(!txtMonth.getText().equals("") && !txtYear.getText().equals(""))
        {
            Run_Queries(Integer.parseInt(txtMonth.getText()),Integer.parseInt(txtYear.getText()));
        }
        try {
            ResultSet r = null;
            String sql;
            sql = "SELECT SP_MONTH AS MONTH,SP_YEAR AS YEAR,SP_GROUP_NAME AS \"PARTY GROUP\",SP_PARTY_CODE AS \"PARTY CODE\",SP_PARTY_NAME  AS NAME,COUNT(*) AS \"NO OF FELTS\", "
            + "ROUND(SUM(SP_ORDER_AMOUNT),2) AS VALUE,ROUND(AVG(SP_STOCK_SINCE_DAYS),0) AS AGEING "
            + "FROM PRODUCTION.FELT_MONTHLY_SALES_PLAN "
            + "WHERE SP_NEW_PIECE_STAGE='IN STOCK' ";
            if (txtMonth.getText().trim().length() > 0) {
                sql = sql + " AND SP_MONTH=" + txtMonth.getText();
            }
            if (txtYear.getText().trim().length() > 0) {
                sql = sql + " AND SP_YEAR = " + txtYear.getText() + " ";
            }

            sql = sql + " GROUP BY SP_PARTY_CODE "
            + "ORDER BY SP_MONTH,SP_YEAR";
            if (cmbsort1.getSelectedItem().toString().equalsIgnoreCase("PARTY CODE")) {
                sql = sql + ",SP_PARTY_CODE";
            } else {
                sql = sql + ",NAME";
            }
            System.out.println(sql);
            r = data.getResult(sql);
            ResultSetMetaData rsInfo = r.getMetaData();
            DataModel = new EITLTableModel();
            Table1.setModel(DataModel);
            Table1.removeAll();
            for (int i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
            }

            DataModel.TableReadOnly(true);
            while (!r.isAfterLast()) {
                Object[] rowData = new Object[rsInfo.getColumnCount()];

                //Fillup the array
                for (int i = 1; i <= rsInfo.getColumnCount(); i++) {
                    rowData[i - 1] = r.getString(i);
                }// for

                //Add a row to the table
                DataModel.addRow(rowData);

                //Move to the next row
                r.next();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_cmdShowsummary1ActionPerformed

    private void cmdInstockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInstockActionPerformed
        if(!txtMonth.getText().equals("") && !txtYear.getText().equals(""))
        {
            Run_Queries(Integer.parseInt(txtMonth.getText()),Integer.parseInt(txtYear.getText()));
        }
        GenerateInstock();
        // cblerpFlag = true;// TODO add your handling code here:
    }//GEN-LAST:event_cmdInstockActionPerformed

    private void TblSelectedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TblSelectedMouseClicked
        int cnt1=0;
        for(int r=0;r<TblSelected.getRowCount();r++) {                
                if(TblSelected.getValueAt(r,0).equals(new Boolean(true))) {
                   cnt1++;     
                }
     }
     txtSelectedtoDelete.setText(Integer.toString(cnt1));
    }//GEN-LAST:event_TblSelectedMouseClicked

    private void TblSelectionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TblSelectionMouseClicked
     int cnt=0;
        for(int r=0;r<TblSelection.getRowCount();r++) {                
                if(TblSelection.getValueAt(r,0).equals(new Boolean(true))) {
                   cnt++;     
                }
     }
     txtSelectedtoInsert.setText(Integer.toString(cnt));
    }//GEN-LAST:event_TblSelectionMouseClicked

    private void cmdShowUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowUActionPerformed
        GenerateSelectedTable();          // TODO add your handling code here:
    }//GEN-LAST:event_cmdShowUActionPerformed

    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed

 try {            
            ObjFeltMonthlySalesPlan.hmSelection.clear();
            
            for(int r=0;r<TblSelection.getRowCount();r++) {
                
                if(TblSelection.getValueAt(r,0).equals(new Boolean(true))) {
                    
                    clsFeltMonthlySalesPlan objItem=new clsFeltMonthlySalesPlan();
                    
                    objItem.setAttribute("SP_MONTH",txtMonth.getText());
                    objItem.setAttribute("SP_YEAR",txtYear.getText());
                    objItem.setAttribute("SP_PIECE_NO",((String)TblSelection.getValueAt(r, 2)).trim());
                    objItem.setAttribute("SP_PARTY_CODE",((String)TblSelection.getValueAt(r, 3)).trim());
                    objItem.setAttribute("SP_PARTY_NAME",((String)TblSelection.getValueAt(r, 4)).trim());
                    objItem.setAttribute("SP_PIECE_STATUS",((String)TblSelection.getValueAt(r, 5)).trim());
                    objItem.setAttribute("SP_MACHINE_NO",((String)TblSelection.getValueAt(r, 6)).trim());
                    objItem.setAttribute("SP_POSITION",((String)TblSelection.getValueAt(r, 7)).trim());
                    objItem.setAttribute("SP_LENGTH",((String)TblSelection.getValueAt(r, 8)).trim());
                    objItem.setAttribute("SP_WIDTH",((String)TblSelection.getValueAt(r, 9)).trim());
                    objItem.setAttribute("SP_WEIGHT",((String)TblSelection.getValueAt(r, 10)).trim());
                    objItem.setAttribute("SP_GSM",((String)TblSelection.getValueAt(r, 11)).trim());
                    objItem.setAttribute("SP_PRODUCT_CODE",((String)TblSelection.getValueAt(r, 12)).trim());
                    objItem.setAttribute("SP_WEAVING_DATE",((String)TblSelection.getValueAt(r, 13)).trim());
                    objItem.setAttribute("SP_NEEDLING_DATE",((String)TblSelection.getValueAt(r, 14)).trim());
                    objItem.setAttribute("SP_FINISHING_DATE",((String)TblSelection.getValueAt(r, 15)).trim());
                    objItem.setAttribute("SP_MENDING_DATE",((String)TblSelection.getValueAt(r, 16)).trim());
                    objItem.setAttribute("SP_GROUP",((String)TblSelection.getValueAt(r, 17)).trim());
                    
                    
//                    objItem.setAttribute("DEBITMEMO_NO",DataModel.getValueByVariable("DEBITMEMO_NO",r));
//                    objItem.setAttribute("DEBITMEMO_DATE",DataModel.getValueByVariable("DEBITMEMO_DATE",r));
//                    objItem.setAttribute("RECEIPT_VOUCHER_NO",DataModel.getValueByVariable("RECEIPT_VOUCHER_NO",r));                    
//                    objItem.setAttribute("INVOICE_NO",DataModel.getValueByVariable("INVOICE_NO",r));
//                    objItem.setAttribute("INVOICE_DATE",DataModel.getValueByVariable("INVOICE_DATE",r));
//                    objItem.setAttribute("INVOICE_DUE_DATE",DataModel.getValueByVariable("INVOICE_DUE_DATE",r));
//                    objItem.setAttribute("VALUE_DATE",DataModel.getValueByVariable("VALUE_DUE_DATE",r));
//                    objItem.setAttribute("DAYS",UtilFunctions.CInt(DataModel.getValueByVariable("DAYS",r)));
//                    objItem.setAttribute("INVOICE_AMOUNT",UtilFunctions.CDbl(DataModel.getValueByVariable("INVOICE_AMOUNT",r)));
//                    objItem.setAttribute("INTEREST_PER",UtilFunctions.CDbl(DataModel.getValueByVariable("INTEREST_PER",r)));
//                    objItem.setAttribute("INTEREST_AMT",UtilFunctions.CDbl(DataModel.getValueByVariable("INTEREST_AMT",r)));
//                    objItem.setAttribute("DEBITNOTE_VOUCHER_NO",DataModel.getValueByVariable("DEBITNOTE_VOUCHER_NO",r));
//                    objItem.setAttribute("DEBITNOTE_VOUCHERDATE",DataModel.getValueByVariable("DEBITNOTE_VOUCHER_DATE",r));
//                    objItem.setAttribute("DEBIT_NOTE_AMOUNT",UtilFunctions.CDbl(DataModel.getValueByVariable("DEBIT_NOTE_AMOUNT",r)));
//                    objItem.setAttribute("COMPANY_ID",UtilFunctions.CInt(DataModel.getValueByVariable("COMPANY_ID",r)));
//                    
                    
                     ObjFeltMonthlySalesPlan.hmSelection.put(Integer.toString(ObjFeltMonthlySalesPlan.hmSelection.size()+1),objItem); 
                }
            }         
            
            
            //Cancelled=false;
            //aDialog.dispose();
            
        }
        catch(Exception e) {
            e.printStackTrace();
            //Cancelled=true;
            //aDialog.dispose();
        }
          ObjFeltMonthlySalesPlan.Insert();
    }//GEN-LAST:event_cmdAddActionPerformed

    private void cmdShowIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowIActionPerformed
      GenerateSelectionTable();  
    }//GEN-LAST:event_cmdShowIActionPerformed
                    
    /**
     *
     */            
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formMouseClicked

    private void cmdWIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdWIPActionPerformed
if(!txtMonth.getText().equals("") && !txtYear.getText().equals(""))
        {
            Run_Queries(Integer.parseInt(txtMonth.getText()),Integer.parseInt(txtYear.getText()));
        }
        GenerateWIP();    
    }//GEN-LAST:event_cmdWIPActionPerformed

    private void ExportData1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportData1ActionPerformed
        // TODO add your handling code here:
        try {
            File file;
            fileexport.show(true);
            fileexport.setDialogTitle("Enter Excel File Name");
            fileexport.setFileSelectionMode(JFileChooser.APPROVE_OPTION);
            int returnVal = fileexport.showSaveDialog(frmFeltMonthlySalesPlan.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = fileexport.getSelectedFile();
                exp1.fillData(Table1, new File(file + ".xls"),"FELTSALEPLAN");
                JOptionPane.showMessageDialog(null, " Excel File Saved at : " + file + ".xls", "Message", JOptionPane.INFORMATION_MESSAGE);
            }
            fileexport.show(false);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_ExportData1ActionPerformed

    private void WIPexcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WIPexcActionPerformed
 try {
            File file;
            fileexport.show(true);
            fileexport.setDialogTitle("Enter Excel File Name");
            fileexport.setFileSelectionMode(JFileChooser.APPROVE_OPTION);
            int returnVal = fileexport.showSaveDialog(frmFeltMonthlySalesPlan.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = fileexport.getSelectedFile();
                exp.fillData(TableWIP, new File(file + ".xls"));
                JOptionPane.showMessageDialog(null, " Excel File Saved at : " + file + ".xls", "Message", JOptionPane.INFORMATION_MESSAGE);
            }
            fileexport.show(false);
        } catch (Exception ex) {
            ex.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_WIPexcActionPerformed

    private void InstockexcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InstockexcActionPerformed
        try {
            File file;
            fileexport.show(true);
            fileexport.setDialogTitle("Enter Excel File Name");
            fileexport.setFileSelectionMode(JFileChooser.APPROVE_OPTION);
            int returnVal = fileexport.showSaveDialog(frmFeltMonthlySalesPlan.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = fileexport.getSelectedFile();
                exp.fillData(TableInstock, new File(file + ".xls"));
                JOptionPane.showMessageDialog(null, " Excel File Saved at : " + file + ".xls", "Message", JOptionPane.INFORMATION_MESSAGE);
            }
            fileexport.show(false);
        } catch (Exception ex) {
            ex.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_InstockexcActionPerformed
                    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ExportData1;
    private javax.swing.JButton Instockexc;
    private javax.swing.JTable Table1;
    private javax.swing.JTable TableInstock;
    private javax.swing.JTable TableWIP;
    private javax.swing.JTable TblSelected;
    private javax.swing.JTable TblSelection;
    private javax.swing.JButton WIPexc;
    private javax.swing.JComboBox cmbInstock1;
    private javax.swing.JComboBox cmbInstock2;
    private javax.swing.JComboBox cmbSelected;
    private javax.swing.JComboBox cmbSelection;
    private javax.swing.JComboBox cmbWIP1;
    private javax.swing.JComboBox cmbWIP2;
    private javax.swing.JComboBox<String> cmbsort1;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdInstock;
    private javax.swing.JButton cmdOpenU;
    private javax.swing.JButton cmdShowI;
    private javax.swing.JButton cmdShowU;
    private javax.swing.JButton cmdShowsummary1;
    private javax.swing.JButton cmdWIP;
    private javax.swing.JFileChooser fileexport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField txtMonth;
    private javax.swing.JTextField txtSelectedtoDelete;
    private javax.swing.JTextField txtSelectedtoInsert;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
    
    
    private void GenerateCombo() {
        //Selection combo
        cmbSelectionModel = new EITLComboModel();
        cmbSelection.removeAllItems();
        cmbSelection.setModel(cmbSelectionModel);        
        ComboData aData = new ComboData();
        aData.Code=1;
        aData.Text ="In Stock";
        cmbSelectionModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code=2;
        aData.Text ="In WIP";
        cmbSelectionModel.addElement(aData);
      
        cmbSelectedModel = new EITLComboModel();
        cmbSelected.removeAllItems();
        cmbSelected.setModel(cmbSelectedModel);        
        aData = new ComboData();
        aData.Code=1;
        aData.Text ="In Stock";
        cmbSelectedModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code=2;
        aData.Text ="In WIP";
        cmbSelectedModel.addElement(aData);
      
    }
    
    private void FormatGrid() {
        try {            
            DataModelSelection=new EITLTableModel();
            TblSelection.removeAll();
            
            TblSelection.setModel(DataModelSelection);
            TableColumnModel ColModel=TblSelection.getColumnModel();
            TblSelection.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            DataModelSelection.addColumn("*");
            DataModelSelection.addColumn("Sr."); //0 - Read Only
            DataModelSelection.addColumn("Piece No"); //1
            DataModelSelection.addColumn("Party Code"); //2 //Read Only
            DataModelSelection.addColumn("Party Name"); //3
            DataModelSelection.addColumn("Piece Stage"); //3
            DataModelSelection.addColumn("Machine No"); //3
            DataModelSelection.addColumn("Position No"); //4
            DataModelSelection.addColumn("Length"); //5
            DataModelSelection.addColumn("Width"); //6
            DataModelSelection.addColumn("Weight"); //7
            DataModelSelection.addColumn("GSM"); //8
            DataModelSelection.addColumn("Product Code"); //8
            DataModelSelection.addColumn("Weaving Date");
            DataModelSelection.addColumn("Mending Date");
            DataModelSelection.addColumn("Needling Date");
            DataModelSelection.addColumn("Finishing Date");            
            DataModelSelection.addColumn("Group");
            
            
//            DataModel.SetVariable(0,"SELECT"); //0 - Read Only
//            DataModel.SetVariable(1,"SR_NO"); //0 - Read Only
//            DataModel.SetVariable(2,"DEBITMEMO_NO"); //1
//            DataModel.SetVariable(3,"DEBITMEMO_DATE"); //2 //Read Only
//            DataModel.SetVariable(4,"RECEIPT_VOUCHER_NO"); //2 //Read Only
//            DataModel.SetVariable(5,"INVOICE_NO"); //2 //Read Only
//            DataModel.SetVariable(6,"INVOICE_DATE");
//            DataModel.SetVariable(7,"INVOICE_DUE_DATE"); //2 //Read Only
//            DataModel.SetVariable(8,"VALUE_DATE"); //2 //Read Only
//            DataModel.SetVariable(9,"DAYS"); //2 //Read Only
//            DataModel.SetVariable(10,"INVOICE_AMOUNT"); //2 //Read Only
//            DataModel.SetVariable(11,"INTEREST_PER"); //2 //Read Only
//            DataModel.SetVariable(12,"INTEREST_AMT"); //2 //Read Only
//            DataModel.SetVariable(13,"DEBITNOTE_VOUCHER_NO"); //2 //Read Only
//            DataModel.SetVariable(14,"DEBITNOTE_VOUCHER_DATE"); //2 //Read Only
//            DataModel.SetVariable(15,"DEBIT_NOTE_AMOUNT"); //2 //Read Only            
//            DataModel.SetVariable(16,"COMPANY_ID"); //2 //Read Only            
//            
            DataModelSelection.TableReadOnly(false);
            
            DataModelSelection.SetReadOnly(1);
            DataModelSelection.SetReadOnly(2);
            DataModelSelection.SetReadOnly(3);
            DataModelSelection.SetReadOnly(4);
            DataModelSelection.SetReadOnly(5);
            DataModelSelection.SetReadOnly(6);
            DataModelSelection.SetReadOnly(7);
            DataModelSelection.SetReadOnly(8);
            DataModelSelection.SetReadOnly(9);
            DataModelSelection.SetReadOnly(10);
            DataModelSelection.SetReadOnly(11);
            DataModelSelection.SetReadOnly(12);
            DataModelSelection.SetReadOnly(13);
            DataModelSelection.SetReadOnly(14);
            DataModelSelection.SetReadOnly(15);
            DataModelSelection.SetReadOnly(16);
            
            Render.setCustomComponent(0,"CheckBox");
            TblSelection.getColumnModel().getColumn(0).setCellRenderer(Render);
            TblSelection.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));
//            
        }
        catch(Exception e) {
            e.printStackTrace();            
        }
        
    } 
    
    private void FormatGridSelectedTbl() {
        try {            
            DataModelSelected=new EITLTableModel();
            TblSelected.removeAll();
            
            TblSelected.setModel(DataModelSelected);
            TableColumnModel ColModel=TblSelected.getColumnModel();
            TblSelected.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //DataModelSelected.addColumn("*");
            DataModelSelected.addColumn("Sr."); //0 - Read Only
            DataModelSelected.addColumn("Piece No"); //1
            DataModelSelected.addColumn("Party Code"); //2 //Read Only
            DataModelSelected.addColumn("Party Name"); //3
            DataModelSelected.addColumn("Piece Stage"); //3
            DataModelSelected.addColumn("Machine No"); //3
            DataModelSelected.addColumn("Position No"); //4
            DataModelSelected.addColumn("Length"); //5
            DataModelSelected.addColumn("Width"); //6
            DataModelSelected.addColumn("Weight"); //7
            DataModelSelected.addColumn("GSM"); //8
            DataModelSelected.addColumn("Product Code"); //8
            DataModelSelected.addColumn("Weaving Date");
            DataModelSelected.addColumn("Mending Date");
            DataModelSelected.addColumn("Needling Date");
            DataModelSelected.addColumn("Finishing Date");            
            DataModelSelected.addColumn("Group");
            
            
//            DataModel.SetVariable(0,"SELECT"); //0 - Read Only
//            DataModel.SetVariable(1,"SR_NO"); //0 - Read Only
//            DataModel.SetVariable(2,"DEBITMEMO_NO"); //1
//            DataModel.SetVariable(3,"DEBITMEMO_DATE"); //2 //Read Only
//            DataModel.SetVariable(4,"RECEIPT_VOUCHER_NO"); //2 //Read Only
//            DataModel.SetVariable(5,"INVOICE_NO"); //2 //Read Only
//            DataModel.SetVariable(6,"INVOICE_DATE");
//            DataModel.SetVariable(7,"INVOICE_DUE_DATE"); //2 //Read Only
//            DataModel.SetVariable(8,"VALUE_DATE"); //2 //Read Only
//            DataModel.SetVariable(9,"DAYS"); //2 //Read Only
//            DataModel.SetVariable(10,"INVOICE_AMOUNT"); //2 //Read Only
//            DataModel.SetVariable(11,"INTEREST_PER"); //2 //Read Only
//            DataModel.SetVariable(12,"INTEREST_AMT"); //2 //Read Only
//            DataModel.SetVariable(13,"DEBITNOTE_VOUCHER_NO"); //2 //Read Only
//            DataModel.SetVariable(14,"DEBITNOTE_VOUCHER_DATE"); //2 //Read Only
//            DataModel.SetVariable(15,"DEBIT_NOTE_AMOUNT"); //2 //Read Only            
//            DataModel.SetVariable(16,"COMPANY_ID"); //2 //Read Only            
//            
            DataModelSelected.TableReadOnly(false);
            
            DataModelSelected.SetReadOnly(1);
            DataModelSelected.SetReadOnly(2);
            DataModelSelected.SetReadOnly(3);
            DataModelSelected.SetReadOnly(4);
            DataModelSelected.SetReadOnly(5);
            DataModelSelected.SetReadOnly(6);
            DataModelSelected.SetReadOnly(7);
            DataModelSelected.SetReadOnly(8);
            DataModelSelected.SetReadOnly(9);
            DataModelSelected.SetReadOnly(10);
            DataModelSelected.SetReadOnly(11);
            DataModelSelected.SetReadOnly(12);
            DataModelSelected.SetReadOnly(13);
            DataModelSelected.SetReadOnly(14);
            DataModelSelected.SetReadOnly(15);
            DataModelSelected.SetReadOnly(16);
            
            Render.setCustomComponent(0,"CheckBox");
            TblSelected.getColumnModel().getColumn(0).setCellRenderer(Render);
            TblSelected.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));
//            
        }
        catch(Exception e) {
            e.printStackTrace();            
        }
        
    } 
    
    private void FormatGridInStrock() {
        DataModelInstock = new EITLTableModel();
        TableInstock.removeAll();
        TableInstock.setModel(DataModelInstock);

        TableInstock.setAutoResizeMode(TableInstock.AUTO_RESIZE_OFF);

         DataModelInstock.addColumn("Sr.");
        DataModelInstock.addColumn("Month");//1
        DataModelInstock.addColumn("Year");//1
        DataModelInstock.addColumn("Old WH Status");//1
        DataModelInstock.addColumn("Updated WH Status");//17
        DataModelInstock.addColumn("Piece No");//1
        DataModelInstock.addColumn("Party Code");//4
        DataModelInstock.addColumn("Party Name");//7
        DataModelInstock.addColumn("Product Code");//8
        DataModelInstock.addColumn("Product Name");//9
        DataModelInstock.addColumn("Group");//10
        DataModelInstock.addColumn("Length");//11
        DataModelInstock.addColumn("Width");//39
        DataModelInstock.addColumn("Gsm");//40
        DataModelInstock.addColumn("Weight");//40
        DataModelInstock.addColumn("Machine No");//41
        DataModelInstock.addColumn("Position No");//42
        DataModelInstock.addColumn("Order Date");//43
        DataModelInstock.addColumn("Weaving Date");//13
        DataModelInstock.addColumn("Mending Date");//14
        DataModelInstock.addColumn("Needling Date");//15
        DataModelInstock.addColumn("WH Rcpt Date");//16
        DataModelInstock.addColumn("Days Since WH Rcpt/Invoiced");//29
        DataModelInstock.addColumn("Criteria Since WH Rcpt/Invoiced");//18
        DataModelInstock.addColumn("Invoice No");//19
        DataModelInstock.addColumn("Invoice Date");//20
        DataModelInstock.addColumn("Invoice Amount");//21
        DataModelInstock.addColumn("Bale No");//22
        DataModelInstock.addColumn("Bale Date");//23
        DataModelInstock.addColumn("First Pi No");//24
        DataModelInstock.addColumn("First Pi Date");//25
        DataModelInstock.addColumn("Last Pi No");//26
        DataModelInstock.addColumn("Last Pi Date");//27
        DataModelInstock.addColumn("party Group Name");//28
        DataModelInstock.addColumn("Order Value");//29
        
        
        
        DataModelInstock.TableReadOnly(true);
        TableInstock.getColumnModel().getColumn(0).setMaxWidth(50);
    }
    
    private void FormatGridWIP() {
        DataModelWIP = new EITLTableModel();
        TableWIP.removeAll();
        TableWIP.setModel(DataModelWIP);

        TableWIP.setAutoResizeMode(TableWIP.AUTO_RESIZE_OFF);

        DataModelWIP.addColumn("Sr.");
        DataModelWIP.addColumn("Month");//1
        DataModelWIP.addColumn("Year");//1
        DataModelWIP.addColumn("Old Mfr Status");//1
        DataModelWIP.addColumn("Mfr Status");//17
        DataModelWIP.addColumn("Piece No");//1
        DataModelWIP.addColumn("Party Code ");//4
        DataModelWIP.addColumn("Party Name");//7
        DataModelWIP.addColumn("Product Code");//8
        DataModelWIP.addColumn("Product Name");//9
        DataModelWIP.addColumn("Group");//10
        DataModelWIP.addColumn("Length");//11
        DataModelWIP.addColumn("Width");//39
        DataModelWIP.addColumn("GSM");//40
        DataModelWIP.addColumn("Weight");//40
        DataModelWIP.addColumn("Machine No");//41
        DataModelWIP.addColumn("Position No");//42
        DataModelWIP.addColumn("Order Date");//43
        DataModelWIP.addColumn("Weaving Date");//13
        DataModelWIP.addColumn("Mending Date");//14
        DataModelWIP.addColumn("Needling Date");//15
        DataModelWIP.addColumn("Finishing Date");//16
        DataModelWIP.addColumn("Mfr Status Since Days");//29
        DataModelWIP.addColumn("Mfr Status Criteria");//18
        DataModelWIP.addColumn("Invoice No");//19
        DataModelWIP.addColumn("Invoice Date");//20
        DataModelWIP.addColumn("Invoice Amount");//21
        DataModelWIP.addColumn("Bale No");//22
        DataModelWIP.addColumn("Bale Date");//23
        DataModelWIP.addColumn("First Pi No");//24
        DataModelWIP.addColumn("First Pi Date");//25
        DataModelWIP.addColumn("Last Pi No");//26
        DataModelWIP.addColumn("Last Pi Date");//27
        DataModelWIP.addColumn("party Group Name");//28
        DataModelWIP.addColumn("Order Value");//29
        
        
        
        DataModelWIP.TableReadOnly(true);
        TableWIP.getColumnModel().getColumn(0).setMaxWidth(50);
    }
    
    
    private void GenerateSelectionTable() {
        try {
            
            if(txtYear.getText().trim().equals("") || txtMonth.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(this,"Insert Year and Month");
                return;
            }
            
            HashMap List=new HashMap();
            FormatGrid();            
            String Year = txtYear.getText().trim();
            String Month = txtMonth.getText().trim();                                   
            
            String strSQL="SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO NOT IN (SELECT SP_PIECE_NO FROM PRODUCTION.FELT_MONTHLY_SALES_PLAN WHERE SP_MONTH='"+txtMonth.getText()+"' AND SP_YEAR='"+txtYear.getText()+"') AND ";
            int Selectionby=EITLERPGLOBAL.getComboCode(cmbSelection);
            
            if(Selectionby==1) {
                strSQL+=" PR_PIECE_STAGE IN ('IN STOCK','BSR') ";
            }
            if(Selectionby==2) {
                strSQL+=" PR_PIECE_STAGE IN ('WEAVING','MENDING','NEEDLING','FINISHING') ";                
            }
            strSQL+=" ORDER BY PR_PIECE_NO ";
            System.out.println(strSQL);
            ResultSet rsTblSelection=data.getResult(strSQL);
            rsTblSelection.first();
            
            if(rsTblSelection.getRow()>0) {
                int cnt=0;
                while(!rsTblSelection.isAfterLast()) {                    
                    cnt++;
                    Object[] rowData=new Object[20];
                    rowData[0]=new Boolean(false);                    
                    rowData[1]=Integer.toString(cnt);
                    rowData[2]=rsTblSelection.getString("PR_PIECE_NO");
                    rowData[3]=rsTblSelection.getString("PR_PARTY_CODE");
                    rowData[4]=data.getStringValueFromDB("SELECT PARTY_NAME FROM D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='210010' AND PARTY_CODE='"+rsTblSelection.getString("PR_PARTY_CODE")+"'");
                    rowData[5]=rsTblSelection.getString("PR_PIECE_STAGE");
                    rowData[6]=rsTblSelection.getString("PR_MACHINE_NO");
                    rowData[7]=rsTblSelection.getString("PR_POSITION_NO");
                    rowData[8]=rsTblSelection.getString("PR_BILL_LENGTH");
                    rowData[9]=rsTblSelection.getString("PR_BILL_WIDTH");
                    rowData[10]=rsTblSelection.getString("PR_BILL_WEIGHT");
                    rowData[11]=rsTblSelection.getString("PR_BILL_GSM");
                    rowData[12]=rsTblSelection.getString("PR_BILL_PRODUCT_CODE");
                    rowData[13]=EITLERPGLOBAL.formatDate(rsTblSelection.getString("PR_WVG_DATE"));
                    rowData[14]=EITLERPGLOBAL.formatDate(rsTblSelection.getString("PR_NDL_DATE"));
                    rowData[15]=EITLERPGLOBAL.formatDate(rsTblSelection.getString("PR_FNSG_DATE"));
                    rowData[16]=EITLERPGLOBAL.formatDate(rsTblSelection.getString("PR_MND_DATE"));                    
                    rowData[17]=rsTblSelection.getString("PR_GROUP");
                    
                    DataModelSelection.addRow(rowData);              
                    rsTblSelection.next();
                    
                    
//                    DataModelSelection.addRow(rowData);                   
//                    int NewIndex=TblSelection.getRowCount()-1;
//                    DataModelSelection.setValueByVariable("SELECT",new Boolean(false), NewIndex);
//                    DataModelSelection.setValueByVariable("SR_NO",Integer.toString(NewIndex+1), NewIndex);
//                    DataModelSelection.setValueByVariable("PR_PIECE_NO",UtilFunctions.getString(rsDM,"DEBITMEMO_NO",""), NewIndex);
//                    DataModelSelection.setValueByVariable("PR_PARTY_CODE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsDM,"DEBITMEMO_DATE","")), NewIndex);
//                    DataModelSelection.setValueByVariable("RECEIPT_VOUCHER_NO",UtilFunctions.getString(rsDM,"RECEIPT_VOUCHER_NO",""), NewIndex);
//                    DataModelSelection.setValueByVariable("INVOICE_NO",UtilFunctions.getString(rsDM,"INVOICE_NO",""), NewIndex);
//                    DataModelSelection.setValueByVariable("INVOICE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsDM,"INVOICE_DATE","")), NewIndex);
//                    DataModelSelection.setValueByVariable("INVOICE_DUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsDM,"INVOICE_DUE_DATE","")), NewIndex);
//                    DataModelSelection.setValueByVariable("VALUE_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsDM,"VALUE_DATE","")), NewIndex);
//                    DataModelSelection.setValueByVariable("DAYS",Integer.toString(UtilFunctions.getInt(rsDM,"DAYS",0)), NewIndex);
//                    DataModelSelection.setValueByVariable("INVOICE_AMOUNT",Double.toString(UtilFunctions.getDouble(rsDM,"INVOICE_AMOUNT",0)), NewIndex);
//                    DataModelSelection.setValueByVariable("INTEREST_PER",Double.toString(UtilFunctions.getDouble(rsDM,"INTEREST_PER",0)), NewIndex);
//                    DataModelSelection.setValueByVariable("INTEREST_AMT",Double.toString(UtilFunctions.getDouble(rsDM,"INTEREST_AMT",0)), NewIndex);
//                    DataModelSelection.setValueByVariable("DEBITNOTE_VOUCHER_NO",UtilFunctions.getString(rsDM,"DEBITNOTE_VOUCHER_NO",""), NewIndex);
//                    DataModelSelection.setValueByVariable("DEBITNOTE_VOUCHER_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsDM,"DEBITNOTE_VOUCHER_DATE","")), NewIndex);
//                    DataModelSelection.setValueByVariable("DEBIT_NOTE_AMOUNT",Double.toString(UtilFunctions.getDouble(rsDM,"DEBIT_NOTE_AMOUNT",0)), NewIndex);
//                    DataModelSelection.setValueByVariable("COMPANY_ID",Integer.toString(UtilFunctions.getInt(rsDM,"COMPANY_ID",0)), NewIndex);
//                    rsDM.next();
                }
            }            
        } catch(Exception e) {
            
            e.printStackTrace();
        }
             
    }
    
    private void GenerateSelectedTable() {
        try {
            
            if(txtYear.getText().trim().equals("") || txtMonth.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(this,"Insert Year and Month");
                return;
            }
            
            HashMap List=new HashMap();
            FormatGridSelectedTbl();            
            String Year = txtYear.getText().trim();
            String Month = txtMonth.getText().trim();                                   
            
            String strSQL="SELECT * FROM PRODUCTION.FELT_MONTHLY_SALES_PLAN WHERE SP_MONTH='"+txtMonth.getText()+"' AND SP_YEAR='"+txtYear.getText()+"' ";
            int Selectedby=EITLERPGLOBAL.getComboCode(cmbSelected);
            
            if(Selectedby==1) {
                strSQL+=" AND SP_PIECE_STATUS IN ('IN STOCK','BSR') ";
            }
            if(Selectedby==2) {
                strSQL+=" AND SP_PIECE_STATUS IN ('WEAVING','MENDING','NEEDLING','FINISHING') ";                
            }
            strSQL+=" ORDER BY SP_PIECE_NO ";
            System.out.println(strSQL);
            ResultSet rsTblSelected=data.getResult(strSQL);
            rsTblSelected.first();
            
            if(rsTblSelected.getRow()>0) {
                int cnt=0;
                while(!rsTblSelected.isAfterLast()) {                    
                    cnt++;
                    Object[] rowData=new Object[20];
                    //rowData[0]=new Boolean(false);                    
                    rowData[0]=Integer.toString(cnt);
                    rowData[1]=rsTblSelected.getString("SP_PIECE_NO");
                    rowData[2]=rsTblSelected.getString("SP_PARTY_CODE");
                    rowData[3]=rsTblSelected.getString("SP_PARTY_NAME");
                    rowData[4]=rsTblSelected.getString("SP_PIECE_STATUS");
                    rowData[5]=rsTblSelected.getString("SP_MACHINE_NO");
                    rowData[6]=rsTblSelected.getString("SP_POSITION");
                    rowData[7]=rsTblSelected.getString("SP_LENGTH");
                    rowData[8]=rsTblSelected.getString("SP_WIDTH");
                    rowData[9]=rsTblSelected.getString("SP_WEIGHT");
                    rowData[10]=rsTblSelected.getString("SP_GSM");
                    rowData[11]=rsTblSelected.getString("SP_PRODUCT_CODE");
                    rowData[12]=EITLERPGLOBAL.formatDate(rsTblSelected.getString("SP_WEAVING_DATE"));
                    rowData[13]=EITLERPGLOBAL.formatDate(rsTblSelected.getString("SP_NEEDLING_DATE"));
                    rowData[14]=EITLERPGLOBAL.formatDate(rsTblSelected.getString("SP_FINISHING_DATE"));
                    rowData[15]=EITLERPGLOBAL.formatDate(rsTblSelected.getString("SP_MENDING_DATE"));                    
                    rowData[16]=rsTblSelected.getString("SP_GROUP");
                    
                    DataModelSelected.addRow(rowData);              
                    rsTblSelected.next();
                    
                    
//                    
                }
            }            
        } catch(Exception e) {
            
            e.printStackTrace();
        }
             
    }
    
    private void GenerateInstock() {
        String cndtn = "";
        String InStock="";
        try {
            FormatGridInStrock(); //clear existing content of table
            String Month = txtMonth.getText().toString();
            String Year = txtYear.getText().toString();
            ResultSet rsTmp;

            if (!txtMonth.getText().equals("")) {
                cndtn += " AND SP_MONTH= '" + Month + "'";
            }
            if (!txtYear.getText().equals("")) {
                cndtn += " AND SP_YEAR='" + Year + "'";
            }
            
            
           // int status = cmbInstock2.getSelectedIndex();
            
            if(!cmbInstock2.getSelectedItem().equals("ALL"))
            {
                    cndtn += " AND SP_STOCK_DAYS_CRITERIA='"+cmbInstock2.getSelectedItem()+"' ";
            }
//             if (status == 1) {
//           
//                cndtn += " ";
//            }
//            
//             if (status == 2) {
//           
//                cndtn += " AND SP_STOCK_DAYS_CRITERIA='BALE BETWEEN 11 TO 20 DAYS' ";
//            }
//            if (status == 3) {
//           
//                cndtn += " AND SP_STOCK_DAYS_CRITERIA='BALE GREATER THEN 30 DAYS' ";
//            }
//            if (status == 4) {
//           
//                cndtn += " AND SP_STOCK_DAYS_CRITERIA='BALE LESS THEN 10 DAYS' ";
//            }
//            if (status == 4) {
//           
//                cndtn += " AND SP_STOCK_DAYS_CRITERIA='INSTOCK BETWEEN 11 TO 20 DAYS' ";
//            }
//            if (status == 5) {
//           
//                cndtn += " AND SP_STOCK_DAYS_CRITERIA='INSTOCK GREATER THEN 30 DAYS' ";
//            }
//            if (status == 6) {
//               
//                cndtn += "AND SP_STOCK_DAYS_CRITERIA='INSTOCK LESS THEN 10 DAYS'";
//            }
//            if (status == 7) {
//               
//                cndtn += "AND SP_STOCK_DAYS_CRITERIA='INVOICED BETWEEN 11 TO 20 DAYS'";
//            }
//            
//            if (status == 8) {
//                
//                cndtn += "AND SP_STOCK_DAYS_CRITERIA='INVOICED GREATER THEN 30 DAYS'";
//            }
//            
//            if (status == 9) {
//                
//                cndtn += "AND SP_STOCK_DAYS_CRITERIA='INVOICED LESS THEN 10 DAYS";
//            }


            String strSQL = "";

           strSQL ="SELECT SP_MONTH,SP_YEAR,SP_PIECE_NO,SP_PIECE_STATUS,SP_PARTY_CODE,SP_PARTY_NAME,SP_PRODUCT_CODE,SP_PRODUCT_NAME,SP_GROUP,SP_LENGTH,SP_WIDTH,SP_GSM,SP_WEIGHT,SP_MACHINE_NO,SP_POSITION,SP_ORDER_DATE,SP_WEAVING_DATE,SP_MENDING_DATE,SP_NEEDLING_DATE,SP_FINISHING_DATE,SP_NEW_PIECE_STAGE,SP_STOCK_DAYS_CRITERIA,SP_INVOICE_NO,SP_INVOICE_DATE,SP_INVOICE_AMOUNT,SP_BALE_NO,SP_BALE_DATE,SP_FIRST_PI_NO,SP_FIRST_PI_DATE,SP_LAST_PI_NO,SP_LAST_PI_DATE,SP_GROUP_NAME,SP_ORDER_AMOUNT,SP_STOCK_SINCE_DAYS FROM PRODUCTION.FELT_MONTHLY_SALES_PLAN WHERE SP_PIECE_STATUS IN ('IN STOCK','BSR','INVOICED') "+cndtn+"";
            
            int Orderby = cmbInstock1.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
           
                strSQL += " ORDER BY SP_PARTY_CODE ";
            }
            if (Orderby == 2) {
           
                strSQL += " ORDER BY SP_PARTY_NAME ";
            }
            if (Orderby == 3) {
           
                strSQL += " ORDER BY SP_PIECE_NO ";
            }
            if (Orderby == 4) {
           
                strSQL += " ORDER BY SP_WEAVING_DATE ";
            }
            if (Orderby == 5) {
           
                strSQL += " ORDER BY SP_MENDING_DATE ";
            }
            if (Orderby == 6) {
           
                strSQL += " ORDER BY SP_NEEDLING_DATE ";
            }
            if (Orderby == 7) {
           
                strSQL += " ORDER BY SP_FINISHING_DATE ";
            }
             
                
        cmbInStockModel = new EITLComboModel();
        cmbInstock1.removeAllItems();
        cmbInstock1.setModel(cmbInStockModel);
        ComboData aData = new ComboData();

        aData.Code = 1;
        aData.Text = "PARTY CODE";
        cmbInStockModel.addElement(aData);
        
        aData.Code = 2;
        aData.Text = "PARTY NAME";
        cmbInStockModel.addElement(aData);
        
        aData.Code = 3;
        aData.Text = "PIECE NO";
        cmbInStockModel.addElement(aData);
        
        aData.Code = 4;
        aData.Text = "WEAVING DATE";
        cmbInStockModel.addElement(aData);
        
        aData.Code = 5;
        aData.Text = "MENDING DATE";
        cmbInStockModel.addElement(aData);
        
        aData.Code = 6;
        aData.Text = "NEEDLING DATE";
        cmbInStockModel.addElement(aData);
        
        aData.Code = 7;
        aData.Text = "FINISHING DATE";
        cmbInStockModel.addElement(aData);

        

            System.out.println("Query..."+strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no."+rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    System.out.println(cnt);

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("SP_MONTH");
                    rowData[2] = rsTmp.getString("SP_YEAR");
                    rowData[3] = rsTmp.getString("SP_PIECE_STATUS");
                    rowData[4] = rsTmp.getString("SP_NEW_PIECE_STAGE");
                    rowData[5] = rsTmp.getString("SP_PIECE_NO");
                    rowData[6] = rsTmp.getString("SP_PARTY_CODE");
                    rowData[7] = rsTmp.getString("SP_PARTY_NAME");
                    rowData[8] = rsTmp.getString("SP_PRODUCT_CODE");
                    rowData[9] = rsTmp.getString("SP_PRODUCT_NAME");
                    rowData[10] = rsTmp.getString("SP_GROUP");
                    rowData[11] = rsTmp.getString("SP_LENGTH");
                    rowData[12] = rsTmp.getString("SP_WIDTH");
                    rowData[13] = rsTmp.getString("SP_GSM");
                    rowData[14] = rsTmp.getString("SP_WEIGHT");
                    rowData[15] = rsTmp.getString("SP_MACHINE_NO");
                    rowData[16] = rsTmp.getString("SP_POSITION");
                    rowData[17] = EITLERPGLOBAL.formatDate(rsTmp.getString("SP_ORDER_DATE"));
                    rowData[18] = EITLERPGLOBAL.formatDate(rsTmp.getString("SP_WEAVING_DATE"));
                    rowData[19] = EITLERPGLOBAL.formatDate(rsTmp.getString("SP_MENDING_DATE"));
                    rowData[20] = EITLERPGLOBAL.formatDate(rsTmp.getString("SP_NEEDLING_DATE"));
                    rowData[21] = EITLERPGLOBAL.formatDate(rsTmp.getString("SP_FINISHING_DATE"));
                    rowData[22] = rsTmp.getString("SP_STOCK_SINCE_DAYS");
                    rowData[23] = rsTmp.getString("SP_STOCK_DAYS_CRITERIA");
                    rowData[24] = rsTmp.getString("SP_INVOICE_NO");
                    rowData[25] = EITLERPGLOBAL.formatDate(rsTmp.getString("SP_INVOICE_DATE"));
                    rowData[26] = rsTmp.getString("SP_INVOICE_AMOUNT");
                    rowData[27] = rsTmp.getString("SP_BALE_NO");
                    rowData[28] = EITLERPGLOBAL.formatDate(rsTmp.getString("SP_BALE_DATE"));
                    rowData[29] = rsTmp.getString("SP_FIRST_PI_NO");
                    rowData[30] = EITLERPGLOBAL.formatDate(rsTmp.getString("SP_FIRST_PI_DATE"));
                    rowData[31] = rsTmp.getString("SP_LAST_PI_NO");
                    rowData[32] = EITLERPGLOBAL.formatDate(rsTmp.getString("SP_LAST_PI_DATE"));
                    rowData[33] = rsTmp.getString("SP_GROUP_NAME");
                    rowData[34] = rsTmp.getString("SP_ORDER_AMOUNT");
                    
                    
                    DataModelInstock.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private void GenerateWIP() {
        String cndtn = "";
        try {
            FormatGridWIP(); //clear existing content of table
            String Month = txtMonth.getText().toString();
            String Year = txtYear.getText().toString();
            ResultSet rsTmp;

            if (!txtMonth.getText().equals("")) {
                cndtn += " AND SP_MONTH= '" + Month + "'";
            }
            if (!txtYear.getText().equals("")) {
                cndtn += " AND SP_YEAR='" + Year + "'";
            }
            
             if(!cmbWIP2.getSelectedItem().equals("ALL"))
            {
                    cndtn += " AND SP_STOCK_DAYS_CRITERIA='"+cmbWIP2.getSelectedItem()+"' ";
            }

            String strSQL = "";

           strSQL ="SELECT SP_MONTH,SP_YEAR,SP_PIECE_NO,SP_PIECE_STATUS,SP_PARTY_CODE,SP_PARTY_NAME,SP_PRODUCT_CODE,SP_PRODUCT_NAME,SP_GROUP,SP_LENGTH,SP_WIDTH,SP_GSM,SP_WEIGHT,SP_MACHINE_NO,SP_POSITION,SP_ORDER_DATE,SP_WEAVING_DATE,SP_MENDING_DATE,SP_NEEDLING_DATE,SP_FINISHING_DATE,SP_NEW_PIECE_STAGE,SP_STOCK_DAYS_CRITERIA,SP_INVOICE_NO,SP_INVOICE_DATE,SP_INVOICE_AMOUNT,SP_BALE_NO,SP_BALE_DATE,SP_FIRST_PI_NO,SP_FIRST_PI_DATE,SP_LAST_PI_NO,SP_LAST_PI_DATE,SP_GROUP_NAME,SP_ORDER_AMOUNT,SP_STOCK_SINCE_DAYS FROM PRODUCTION.FELT_MONTHLY_SALES_PLAN WHERE SP_PIECE_STATUS IN ('FINISHING','NEEDLING','MENDING','WARPING','WEAVING','DIV','DIVERTED') "+cndtn+"";
            
            int Orderby = cmbWIP1.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
           
                strSQL += " ORDER BY SP_PARTY_CODE ";
            }
            if (Orderby == 2) {
           
                strSQL += " ORDER BY SP_PARTY_NAME ";
            }
            if (Orderby == 3) {
           
                strSQL += " ORDER BY SP_PIECE_NO ";
            }
            if (Orderby == 4) {
           
                strSQL += " ORDER BY SP_WEAVING_DATE ";
            }
            if (Orderby == 5) {
           
                strSQL += " ORDER BY SP_MENDING_DATE ";
            }
            if (Orderby == 6) {
           
                strSQL += " ORDER BY SP_NEEDLING_DATE ";
            }
            if (Orderby == 7) {
           
                strSQL += " ORDER BY SP_FINISHING_DATE ";
            }
             
                
        cmbWIPModel = new EITLComboModel();
        cmbWIP1.removeAllItems();
        cmbWIP1.setModel(cmbWIPModel);
        ComboData aData = new ComboData();

        aData.Code = 1;
        aData.Text = "PARTY CODE";
        cmbWIPModel.addElement(aData);
        
        aData.Code = 2;
        aData.Text = "PARTY NAME";
        cmbWIPModel.addElement(aData);
        
        aData.Code = 3;
        aData.Text = "PIECE NO";
        cmbWIPModel.addElement(aData);
        
        aData.Code = 4;
        aData.Text = "WEAVING DATE";
        cmbWIPModel.addElement(aData);
        
        aData.Code = 5;
        aData.Text = "MENDING DATE";
        cmbWIPModel.addElement(aData);
        
        aData.Code = 6;
        aData.Text = "NEEDLING DATE";
        cmbWIPModel.addElement(aData);
        
        aData.Code = 7;
        aData.Text = "FINISHING DATE";
        cmbWIPModel.addElement(aData);

        

            System.out.println("Query..."+strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no."+rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    System.out.println(cnt);

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("SP_MONTH");
                    rowData[2] = rsTmp.getString("SP_YEAR");
                    rowData[3] = rsTmp.getString("SP_PIECE_STATUS");
                    rowData[4] = rsTmp.getString("SP_NEW_PIECE_STAGE");
                    rowData[5] = rsTmp.getString("SP_PIECE_NO");
                    rowData[6] = rsTmp.getString("SP_PARTY_CODE");
                    rowData[7] = rsTmp.getString("SP_PARTY_NAME");
                    rowData[8] = rsTmp.getString("SP_PRODUCT_CODE");
                    rowData[9] = rsTmp.getString("SP_PRODUCT_NAME");
                    rowData[10] = rsTmp.getString("SP_GROUP");
                    rowData[11] = rsTmp.getString("SP_LENGTH");
                    rowData[12] = rsTmp.getString("SP_WIDTH");
                    rowData[13] = rsTmp.getString("SP_GSM");
                    rowData[14] = rsTmp.getString("SP_WEIGHT");
                    rowData[15] = rsTmp.getString("SP_MACHINE_NO");
                    rowData[16] = rsTmp.getString("SP_POSITION");
                    rowData[17] = EITLERPGLOBAL.formatDate(rsTmp.getString("SP_ORDER_DATE"));
                    rowData[18] = EITLERPGLOBAL.formatDate(rsTmp.getString("SP_WEAVING_DATE"));
                    rowData[19] = EITLERPGLOBAL.formatDate(rsTmp.getString("SP_MENDING_DATE"));
                    rowData[20] = EITLERPGLOBAL.formatDate(rsTmp.getString("SP_NEEDLING_DATE"));
                    rowData[21] = EITLERPGLOBAL.formatDate(rsTmp.getString("SP_FINISHING_DATE"));
                    rowData[22] = rsTmp.getString("SP_STOCK_SINCE_DAYS");
                    rowData[23] = rsTmp.getString("SP_STOCK_DAYS_CRITERIA");
                    rowData[24] = rsTmp.getString("SP_INVOICE_NO");
                    rowData[25] = EITLERPGLOBAL.formatDate(rsTmp.getString("SP_INVOICE_DATE"));
                    rowData[26] = rsTmp.getString("SP_INVOICE_AMOUNT");
                    rowData[27] = rsTmp.getString("SP_BALE_NO");
                    rowData[28] = EITLERPGLOBAL.formatDate(rsTmp.getString("SP_BALE_DATE"));
                    rowData[29] = rsTmp.getString("SP_FIRST_PI_NO");
                    rowData[30] = EITLERPGLOBAL.formatDate(rsTmp.getString("SP_FIRST_PI_DATE"));
                    rowData[31] = rsTmp.getString("SP_LAST_PI_NO");
                    rowData[32] = EITLERPGLOBAL.formatDate(rsTmp.getString("SP_LAST_PI_DATE"));
                    rowData[33] = rsTmp.getString("SP_GROUP_NAME");
                    rowData[34] = rsTmp.getString("SP_ORDER_AMOUNT");
                    
                    DataModelWIP.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private void GenerateStockCombo(){
        
        HashMap hmAmendList=new HashMap();
        
        cmbInStockModel=new EITLComboModel();
        cmbInstock2.removeAllItems();
        cmbInstock2.setModel(cmbInStockModel);
        
        hmAmendList = clsFeltMonthlySalesPlan.getInstockList();
        for(int i=1;i<=hmAmendList.size();i++) {
            cmbInStockModel.addElement((ComboData)hmAmendList.get(new Integer(i)));
        }
    }
    
    private void GenerateWIPCombo(){
        
        HashMap hmAmendList=new HashMap();
        
        cmbWIPModel=new EITLComboModel();
        cmbWIP2.removeAllItems();
        cmbWIP2.setModel(cmbWIPModel);
        
        hmAmendList = clsFeltMonthlySalesPlan.getWIPList();
        for(int i=1;i<=hmAmendList.size();i++) {
            cmbWIPModel.addElement((ComboData)hmAmendList.get(new Integer(i)));
        }
    }
    
    private void Run_Queries(int MM,int YYYY)    {
        
       data.Execute("INSERT INTO FELT_MONTHLY_SALES_PLAN (SP_MONTH,SP_YEAR,SP_PIECE_NO,SP_PARTY_CODE,SP_PRODUCT_CODE,SP_GROUP,SP_PIEC E_STATUS,SP_LENGTH,SP_WIDTH,SP_GSM,SP_MACHINE_NO,SP_POSITION,SP_WEIGHT) SELECT SP_MONTH,SP_YEAR,D_PIECE_NO,D_PARTY_CODE,PR_BILL_PRODUCT_CODE , D_GROUP,'DIV',PR_BILL_LENGTH,PR_BILL_WIDTH,PR_BILL_GSM,D_MACHINE_NO,D_POSITION_NO,PR_BILL_WEIGHT FROM FELT_SALES_ORDER_DIVERSION ,FELT_MONTHLY_SALES_PLAN  WHERE SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+" AND ORIGINAL_PIECE_NO = SP_PIECE_NO AND CANCELED =0 AND APPROVED =1 AND D_PIECE_NO NOT IN ( SELECT SP_PIECE_NO FROM FELT_MONTHLY_SALES_PLAN WHERE SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+") ");
        
        
       data.Execute("UPDATE PRODUCTION.FELT_MONTHLY_SALES_PLAN,PRODUCTION.FELT_SALES_PIECE_REGISTER SET SP_BALE_NO = PR_BALE_NO,SP_BALE_DATE = PR_PACKED_DATE,SP_NEW_PIECE_STAGE= PR_PIECE_STAGE ,SP_WEAVING_DATE= PR_WVG_DATE,SP_NEEDLING_DATE= PR_NDL_DATE,SP_MENDING_DATE= PR_MND_DATE,SP_FINISHING_DATE= PR_FNSG_DATE,SP_WEIGHT = PR_BILL_WEIGHT,SP_ORDER_DATE = PR_ORDER_DATE WHERE PR_PIECE_NO = SP_PIECE_NO AND SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+""); 

       // ----------   UPDATE INVOICE STATUS'    

       data.Execute("UPDATE PRODUCTION.FELT_MONTHLY_SALES_PLAN ,PRODUCTION.FELT_SAL_INVOICE_DETAIL D,PRODUCTION.FELT_SAL_INVOICE_HEADER H SET SP_INVOICE_NO = H.INVOICE_NO,SP_INVOICE_DATE = H.INVOICE_DATE, SP_INVOICE_AMOUNT = H.INVOICE_AMT,SP_NEW_PIECE_STAGE = 'INVOICED' WHERE H.PIECE_NO = SP_PIECE_NO AND H.PIECE_NO = D.PIECE_NO AND SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+" AND APPROVED =1 AND CANCELLED =0");

       //---------------   UPDATE PI STATUS  ----------

       data.Execute("UPDATE PRODUCTION.FELT_MONTHLY_SALES_PLAN , (SELECT PIECE_NO,MAH.PROFORMA_DATE) AS LAST_PI_DATE,MIN(H.PROFORMA_DATE) AS FIRST_PI_DATE,COUNT AS CNT FROM PRODUCTION.FELT_PROFORMA_INVOICE_HEADER H,PRODUCTION.FELT_PROFORMA_INVOICE_DETAIL D,PRODUCTION.FELT_MONTHLY_SALES_PLAN WHERE H.PROFORMA_NO = D.PROFORMA_NO AND SP_PIECE_NO = PIECE_NO  AND APPROVED =1 AND CANCELED =0 GROUP BY PIECE_NO     ) AS PI SET SP_FIRST_PI_DATE = FIRST_PI_DATE, SP_LAST_PI_DATE = LAST_PI_DATE ,SP_TOTAL_PI_SEND_NO = CNT WHERE SP_PIECE_NO = PIECE_NO");

       data.Execute("UPDATE PRODUCTION.FELT_PROFORMA_INVOICE_HEADER H,PRODUCTION.FELT_PROFORMA_INVOICE_DETAIL D,PRODUCTION.FELT_MONTHLY_SALES_PLAN SET SP_FIRST_PI_NO = H.PROFORMA_NO WHERE H.PROFORMA_NO = D.PROFORMA_NO AND SP_PIECE_NO = PIECE_NO AND SP_FIRST_PI_DATE = H.PROFORMA_DATE AND APPROVED =1 AND CANCELED =0 ");

 
       data.Execute("UPDATE PRODUCTION.FELT_PROFORMA_INVOICE_HEADER H,PRODUCTION.FELT_PROFORMA_INVOICE_DETAIL D,PRODUCTION.FELT_MONTHLY_SALES_PLAN SET SP_LAST_PI_NO = H.PROFORMA_NO WHERE H.PROFORMA_NO = D.PROFORMA_NO AND SP_PIECE_NO = PIECE_NO AND SP_LAST_PI_DATE = H.PROFORMA_DATE AND APPROVED =1 AND CANCELED =0");

       //---------------------------UPDATE PARTY NAME

        data.Execute("UPDATE PRODUCTION.FELT_MONTHLY_SALES_PLAN,DINESHMILLS.D_SAL_PARTY_MASTER SET SP_PARTY_NAME = CONCAT(PARTY_NAME,',',CITY_ID) WHERE SP_PARTY_CODE = PARTY_CODE AND MAIN_ACCOUNT_CODE = 210010 AND SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+"");

        //----------------------UPDATE POSITION DESCRIPTION

        data.Execute("UPDATE PRODUCTION.FELT_MONTHLY_SALES_PLAN, PRODUCTION.FELT_MACHINE_POSITION_MST SET SP_POSITION_DESC = UPPER(POSITION_DESC) WHERE POSITION_NO = SP_POSITION AND SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+"");

        //--------------------UPDATE GROUP DESCRIPTION

        data.Execute("UPDATE PRODUCTION.FELT_GROUP_MASTER_DETAIL D,PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_MONTHLY_SALES_PLAN SET SP_GROUP_NAME = GROUP_DESC WHERE H.GROUP_CODE = D.GROUP_CODE AND SP_PARTY_CODE = PARTY_CODE  AND SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+"");

        //--------------- UPDATE PRODUCT DESCRIPTION

        data.Execute("UPDATE PRODUCTION.FELT_QLT_RATE_MASTER ,PRODUCTION.FELT_MONTHLY_SALES_PLAN SET SP_PRODUCT_NAME = PRODUCT_DESC WHERE EFFECTIVE_TO = '0000-00-00' AND PRODUCT_CODE = SP_PRODUCT_CODE AND SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+"");

 
        //----------- UPDATE  PIECE IN STOCK  DAYS  WITH CURRENT DATE

        data.Execute("UPDATE  PRODUCTION.FELT_MONTHLY_SALES_PLAN SET SP_STOCK_SINCE_DAYS = DATEDIFF(NOW(),SP_FINISHING_DATE) WHERE SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+" AND SP_INVOICE_DATE = '0000-00-00' AND SP_NEW_PIECE_STAGE = 'IN STOCK'");

 
        data.Execute("UPDATE  PRODUCTION.FELT_MONTHLY_SALES_PLAN SET SP_STOCK_DAYS_CRITERIA = CASE WHEN SP_STOCK_SINCE_DAYS <= 10 THEN 'INSTOCK LESS THEN 10 DAYS' WHEN SP_STOCK_SINCE_DAYS >= 11 AND SP_STOCK_SINCE_DAYS <= 20    THEN 'INSTOCK BETWEEN 11 TO 20 DAYS' WHEN SP_STOCK_SINCE_DAYS >= 21 AND SP_STOCK_SINCE_DAYS <= 30 THEN 'INSTOCK BETWEEN 11 TO 20 DAYS' WHEN SP_STOCK_SINCE_DAYS >= 31    THEN 'INSTOCK GREATER THEN 30 DAYS'  END WHERE SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+" AND SP_INVOICE_DATE = '0000-00-00' AND SP_NEW_PIECE_STAGE = 'IN STOCK'");

 
        //------------ UPDATE  PIECE INVOICE  DAYS WITH STOCK  

        data.Execute("UPDATE  PRODUCTION.FELT_MONTHLY_SALES_PLAN SET SP_STOCK_SINCE_DAYS = DATEDIFF(SP_INVOICE_DATE,SP_FINISHING_DATE) WHERE SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+" AND SP_INVOICE_DATE != '0000-00-00' AND SP_NEW_PIECE_STAGE = 'INVOICED'");

 
        data.Execute("UPDATE  PRODUCTION.FELT_MONTHLY_SALES_PLAN SET SP_STOCK_DAYS_CRITERIA = CASE WHEN SP_STOCK_SINCE_DAYS <= 10 THEN 'INVOICED LESS THEN 10 DAYS' WHEN SP_STOCK_SINCE_DAYS >= 11 AND SP_STOCK_SINCE_DAYS <= 20    THEN 'INVOICED BETWEEN 11 TO 20 DAYS' WHEN SP_STOCK_SINCE_DAYS >= 21 AND SP_STOCK_SINCE_DAYS <= 30    THEN 'INVOICED BETWEEN 11 TO 20 DAYS' WHEN SP_STOCK_SINCE_DAYS >= 31    THEN 'INVOICED GREATER THEN 30 DAYS'  END WHERE SP_MONTH = 11 AND SP_YEAR = 2017 AND SP_INVOICE_DATE != '0000-00-00' AND SP_NEW_PIECE_STAGE = 'INVOICED'");

 
        //------------ UPDATE  PIECE BALE  DAYS WITH STOCK  

 
        data.Execute(" UPDATE  PRODUCTION.FELT_MONTHLY_SALES_PLAN SET SP_STOCK_SINCE_DAYS = DATEDIFF(SP_BALE_DATE,SP_FINISHING_DATE) WHERE SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+" AND SP_INVOICE_DATE = '0000-00-00' AND SP_BALE_DATE != '0000-00-00' AND SP_NEW_PIECE_STAGE = 'BSR'");

 
        data.Execute(" UPDATE  PRODUCTION.FELT_MONTHLY_SALES_PLAN SET SP_STOCK_DAYS_CRITERIA = CASE WHEN SP_STOCK_SINCE_DAYS <= 10 THEN 'BALE LESS THEN 10 DAYS' WHEN SP_STOCK_SINCE_DAYS >= 11 AND SP_STOCK_SINCE_DAYS <= 20    THEN 'BALE BETWEEN 11 TO 20 DAYS' WHEN SP_STOCK_SINCE_DAYS >= 21 AND SP_STOCK_SINCE_DAYS <= 30    THEN 'BALE BETWEEN 11 TO 20 DAYS' WHEN SP_STOCK_SINCE_DAYS >= 31    THEN 'BALE GREATER THEN 30 DAYS'  END  WHERE SP_MONTH = 11 AND SP_YEAR = 2017 AND SP_INVOICE_DATE = '0000-00-00' AND SP_BALE_DATE != '0000-00-00' AND SP_NEW_PIECE_STAGE = 'BSR'");

 
        //----------
 

        data.Execute(" UPDATE PRODUCTION.FELT_MONTHLY_SALES_PLAN SET SP_STOCK_SINCE_DAYS = DATEDIFF(NOW(),SP_MENDING_DATE) WHERE SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+" AND SP_INVOICE_DATE = '0000-00-00' AND SP_BALE_DATE = '0000-00-00' AND SP_NEW_PIECE_STAGE = 'NEEDLING'");

 

        data.Execute(" UPDATE  PRODUCTION.FELT_MONTHLY_SALES_PLAN SET SP_STOCK_DAYS_CRITERIA = CASE WHEN SP_STOCK_SINCE_DAYS <= 10 THEN 'IN NEEDLING  LESS THEN 10 DAYS' WHEN SP_STOCK_SINCE_DAYS >= 11 AND SP_STOCK_SINCE_DAYS <= 20    THEN 'IN NEEDLING BETWEEN 11 TO 20 DAYS' WHEN SP_STOCK_SINCE_DAYS >= 21 AND SP_STOCK_SINCE_DAYS <= 30    THEN 'IN NEEDLING BETWEEN 11 TO 20 DAYS' WHEN SP_STOCK_SINCE_DAYS >= 31    THEN 'IN NEEDLING GREATER THEN 30 DAYS' END WHERE SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+" AND SP_INVOICE_DATE = '0000-00-00' AND SP_BALE_DATE = '0000-00-00' AND SP_NEW_PIECE_STAGE = 'NEEDLING'");

 
        //---------------------------------
 

        data.Execute(" UPDATE PRODUCTION.FELT_MONTHLY_SALES_PLAN SET SP_STOCK_SINCE_DAYS = DATEDIFF(NOW(),SP_WEAVING_DATE) WHERE SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+" AND SP_INVOICE_DATE = '0000-00-00' AND SP_BALE_DATE = '0000-00-00' AND SP_NEW_PIECE_STAGE = 'MENDING'");

 

        data.Execute(" UPDATE  PRODUCTION.FELT_MONTHLY_SALES_PLAN SET SP_STOCK_DAYS_CRITERIA = CASE WHEN SP_STOCK_SINCE_DAYS <= 10 THEN 'IN MENDING  LESS THEN 10 DAYS' WHEN SP_STOCK_SINCE_DAYS >= 11 AND SP_STOCK_SINCE_DAYS <= 20    THEN 'IN MENDING BETWEEN 11 TO 20 DAYS' WHEN SP_STOCK_SINCE_DAYS >= 21 AND SP_STOCK_SINCE_DAYS <= 30    THEN 'IN MENDING BETWEEN 11 TO 20 DAYS' WHEN SP_STOCK_SINCE_DAYS >= 31    THEN 'IN MENDING GREATER THEN 30 DAYS' END WHERE SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+" AND SP_INVOICE_DATE = '0000-00-00' AND SP_BALE_DATE = '0000-00-00' AND SP_NEW_PIECE_STAGE = 'MENDING'");

 
        data.Execute(" UPDATE PRODUCTION.FELT_MONTHLY_SALES_PLAN SET SP_STOCK_SINCE_DAYS = DATEDIFF(NOW(),SP_ORDER_DATE) WHERE SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+" AND SP_INVOICE_DATE = '0000-00-00' AND SP_BALE_DATE = '0000-00-00' AND SP_NEW_PIECE_STAGE = 'WEAVING'");

 
        data.Execute(" UPDATE  PRODUCTION.FELT_MONTHLY_SALES_PLAN SET SP_STOCK_DAYS_CRITERIA = CASE WHEN SP_STOCK_SINCE_DAYS <= 10 THEN 'IN WEAVING  LESS THEN 10 DAYS' WHEN SP_STOCK_SINCE_DAYS >= 11 AND SP_STOCK_SINCE_DAYS <= 20    THEN 'IN WEAVING BETWEEN 11 TO 20 DAYS' WHEN SP_STOCK_SINCE_DAYS >= 21 AND SP_STOCK_SINCE_DAYS <= 30    THEN 'IN WEAVING BETWEEN 11 TO 20 DAYS' WHEN SP_STOCK_SINCE_DAYS >= 31    THEN 'IN WEAVING GREATER THEN 30 DAYS' END WHERE SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+" AND SP_INVOICE_DATE = '0000-00-00' AND SP_BALE_DATE = '0000-00-00' AND SP_NEW_PIECE_STAGE = 'WEAVING'");

        //----------\

        data.Execute(" UPDATE PRODUCTION.FELT_MONTHLY_SALES_PLAN SET SP_STOCK_SINCE_DAYS = DATEDIFF(NOW(),SP_NEEDLING_DATE) WHERE SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+" AND SP_INVOICE_DATE = '0000-00-00' AND SP_BALE_DATE = '0000-00-00' AND SP_NEW_PIECE_STAGE = 'FINISHING'");


        data.Execute(" UPDATE PRODUCTION.FELT_MONTHLY_SALES_PLAN SET SP_STOCK_SINCE_DAYS = DATEDIFF(NOW(),SP_ORDER_DATE) WHERE SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+" AND SP_INVOICE_DATE = '0000-00-00' AND SP_BALE_DATE = '0000-00-00' AND SP_NEW_PIECE_STAGE = 'FINISHING'; AND SP_PIECE_STATUS ='DIV'");


        data.Execute(" UPDATE  PRODUCTION.FELT_MONTHLY_SALES_PLAN SET SP_STOCK_DAYS_CRITERIA = CASE WHEN SP_STOCK_SINCE_DAYS <= 10 THEN 'IN FINISHING  LESS THEN 10 DAYS' WHEN SP_STOCK_SINCE_DAYS >= 11 AND SP_STOCK_SINCE_DAYS <= 20    THEN 'IN FINISHING BETWEEN 11 TO 20 DAYS' WHEN SP_STOCK_SINCE_DAYS >= 21 AND SP_STOCK_SINCE_DAYS <= 30    THEN 'IN FINISHING BETWEEN 11 TO 20 DAYS' WHEN SP_STOCK_SINCE_DAYS >= 31    THEN 'IN FINISHING GREATER THEN 30 DAYS' END WHERE SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+" AND SP_INVOICE_DATE = '0000-00-00' AND SP_BALE_DATE = '0000-00-00' AND SP_NEW_PIECE_STAGE = 'FINISHING'");

 
    //--------------------------

        
        
        try {
            Connection connection = data.getConn();
            Statement statement=connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);

            String query = "SELECT SP_PIECE_NO,SP_PRODUCT_CODE,SP_PARTY_CODE,SP_LENGTH,SP_WIDTH,SP_WEIGHT,SP_SQMTR,SP_MONTH,SP_YEAR FROM PRODUCTION.FELT_MONTHLY_SALES_PLAN WHERE SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+"";
            System.out.println("Query : "+query);
            ResultSet resultSet=statement.executeQuery(query);
            int srNo = 0;
            while(resultSet.next()) {
                
                //resultSet.getString("S_ORDER_NO")
                //SELECT SP_PIECE_NO,SP_PRODUCT_CODE,SP_PARTY_CODE,SP_LENGTH,SP_WIDTH,SP_WEIGHT FROM PRODUCTION.FELT_MONTHLY_SALES_PLAN;
                FeltInvCalc inv_details;

                String Piece_No = resultSet.getString("SP_PIECE_NO");
                String Product_Code = resultSet.getString("SP_PRODUCT_CODE");
                String Party_Code = resultSet.getString("SP_PARTY_CODE");
                Float Length = Float.parseFloat(resultSet.getString("SP_LENGTH"));
                Float Width = Float.parseFloat(resultSet.getString("SP_WIDTH"));
                Float Weight = Float.parseFloat(resultSet.getString("SP_WEIGHT"));
                
                //String SP_MONTH = resultSet.getString("SP_MONTH");
                //String SP_YEAR = resultSet.getString("SP_YEAR");
                
                double SQMT = EITLERPGLOBAL.round(Double.parseDouble((Length*Width)+""),2);
                String CurDate = EITLERPGLOBAL.getCurrentDateDB();
                inv_details = clsOrderValueCalc.calculate(Piece_No, Product_Code, Party_Code, Length, Width, Weight, Float.parseFloat(SQMT+""), CurDate);
        
                data.Execute("UPDATE PRODUCTION.FELT_MONTHLY_SALES_PLAN SET SP_ORDER_AMOUNT = "+inv_details.getFicInvAmt()+",SP_SQMTR = "+SQMT+" WHERE SP_PIECE_NO = '"+Piece_No+"' AND SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+"");
                System.out.println("UPDATE PRODUCTION.FELT_MONTHLY_SALES_PLAN SET SP_ORDER_AMOUNT = "+inv_details.getFicInvAmt()+",SP_SQMTR = "+SQMT+" WHERE SP_PIECE_NO = '"+Piece_No+"' AND SP_MONTH = "+MM+" AND SP_YEAR = "+YYYY+"");
            }
            }catch(Exception e)
            {
                e.printStackTrace();
            }
        
    }
    
    
    }
    
