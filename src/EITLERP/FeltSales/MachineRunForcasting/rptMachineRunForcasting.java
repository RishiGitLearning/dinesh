/*
 * frmChangePassword.java
 *
 * Created on July 3, 2004, 3:36 PM
 */
package EITLERP.FeltSales.MachineRunForcasting;

import EITLERP.*;
import EITLERP.FeltSales.PieceRegister.clsIncharge;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.io.File;
import java.sql.*;
import javax.swing.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
//import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
//import EITLERP.Sales.clsExcelExporter;

/*<APPLET CODE=frmChangePassword HEIGHT=200 WIDTH=430></APPLET>*/
/**
 *
 * @author Daxesh Prajapati
 */
public class rptMachineRunForcasting extends javax.swing.JApplet {

    private EITLTableModel DataModel = new EITLTableModel();

    private EITLComboModel cmbUserModel = new EITLComboModel();
    private EITLComboModel modelShift = new EITLComboModel();
    private EITLComboModel modelMainCategory = new EITLComboModel();
    private EITLComboModel modelCategory = new EITLComboModel();
    private EITLComboModel cmbIncharge = new EITLComboModel();
    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();

    private int prvmnth, curmnth, remainmonth, currentmonth, curqtr;
    private String pmnth, cmnth;

    //GenerateInvoiceParameterModificationCombo();
    /**
     * Initializes the applet frmChangePassword
     */
    public void init() {
        initComponents();
        setSize(1000, 750);

        GenerateCombo();
        GenerateUserCombo();
        //canpieced.setVisible(false);
        jLabel1.setForeground(Color.WHITE);
        txtpartyname.setEnabled(false);

        jLabel5.setVisible(false);
        cmbmonth.setVisible(false);

        jLabel26.setVisible(false);
        INCHARGE.setVisible(false);

        jLabel4.setVisible(false);
        txtpartycode.setVisible(false);
        txtpartyname.setVisible(false);
        
        jLabel86.setVisible(false);
        cmbStatus.setVisible(false);

        TabList.remove(jPanel1);
//        TabList.remove(jPanel3);
//        TabList.remove(jPanel4);
//        TabList.remove(jPanel5);
//        TabList.remove(jPanel6);
//        TabList.remove(jPanel7);
//        TabList.remove(jPanel8);
//        TabList.remove(jPanel9);
//        

        //TabList.remove(5);
        //TabList.remove(6);
        //TabList.remove(7);
        //TabList.remove(8);
        //TabList.remove(9);
//        FormatGridZAS();
        FormatGridUAS();
        if (EITLERPGLOBAL.getCurrentMonth()==1 || EITLERPGLOBAL.getCurrentMonth()==2 || EITLERPGLOBAL.getCurrentMonth()==3) {
            cmbQuarter.setSelectedItem("Q4");
        } else if (EITLERPGLOBAL.getCurrentMonth()==4 || EITLERPGLOBAL.getCurrentMonth()==5 || EITLERPGLOBAL.getCurrentMonth()==6) {
            cmbQuarter.setSelectedItem("Q1");
        } else if (EITLERPGLOBAL.getCurrentMonth()==7 || EITLERPGLOBAL.getCurrentMonth()==8 || EITLERPGLOBAL.getCurrentMonth()==9) {
            cmbQuarter.setSelectedItem("Q2");
        } else if (EITLERPGLOBAL.getCurrentMonth()==10 || EITLERPGLOBAL.getCurrentMonth()==11 || EITLERPGLOBAL.getCurrentMonth()==12) {
            cmbQuarter.setSelectedItem("Q3");
        } else {
            cmbQuarter.setSelectedItem("Q1");
        }
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ExporttoExcelFileChooser = new javax.swing.JFileChooser();
        file1 = new javax.swing.JFileChooser();
        CANEXCESSGRUP = new javax.swing.ButtonGroup();
        YTMGROUP = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        TabList = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        btnZASView = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnUASView = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        btnUPDView = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jScrollPane25 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        btnEmpMstETE = new javax.swing.JButton();
        cmbFY = new javax.swing.JComboBox();
        lblMonthCmb1 = new javax.swing.JLabel();
        jLabel86 = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox();
        jLabel26 = new javax.swing.JLabel();
        INCHARGE = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        txtpartycode = new javax.swing.JTextField();
        txtpartyname = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cmbmonth = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cmbQuarter = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        cmbUser = new javax.swing.JComboBox();

        getContentPane().setLayout(null);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setText("Machine Run Forcasting Report");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 2, 1000, 25);

        jLabel2.setBackground(new java.awt.Color(0, 102, 153));
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 90, 1000, 10);

        TabList.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabListStateChanged(evt);
            }
        });

        jPanel1.setLayout(null);

        btnZASView.setText("View");
        btnZASView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZASViewActionPerformed(evt);
            }
        });
        jPanel1.add(btnZASView);
        btnZASView.setBounds(860, 0, 100, 30);

        TabList.addTab("Zonewise Approval Status", jPanel1);

        jPanel2.setLayout(null);

        btnUASView.setText("View");
        btnUASView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUASViewActionPerformed(evt);
            }
        });
        jPanel2.add(btnUASView);
        btnUASView.setBounds(860, 0, 100, 30);

        TabList.addTab("Userwise Approval Status", jPanel2);

        jPanel3.setLayout(null);

        btnUPDView.setText("View");
        btnUPDView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUPDViewActionPerformed(evt);
            }
        });
        jPanel3.add(btnUPDView);
        btnUPDView.setBounds(860, 0, 100, 30);

        TabList.addTab("Userwise Partywise Detail", jPanel3);

        getContentPane().add(TabList);
        TabList.setBounds(10, 103, 980, 110);

        btnClear.setText("Clear All");
        btnClear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnClear.setMargin(new java.awt.Insets(2, 7, 2, 7));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        getContentPane().add(btnClear);
        btnClear.setBounds(880, 50, 110, 30);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.getTableHeader().setReorderingAllowed(false);
        jScrollPane25.setViewportView(Table);

        getContentPane().add(jScrollPane25);
        jScrollPane25.setBounds(10, 220, 980, 320);

        btnEmpMstETE.setLabel("Export to Excel");
        btnEmpMstETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpMstETEActionPerformed(evt);
            }
        });
        getContentPane().add(btnEmpMstETE);
        btnEmpMstETE.setBounds(830, 550, 150, 30);

        cmbFY.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2021-2022" }));
        getContentPane().add(cmbFY);
        cmbFY.setBounds(130, 30, 170, 20);

        lblMonthCmb1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMonthCmb1.setText("Financial Year : ");
        getContentPane().add(lblMonthCmb1);
        lblMonthCmb1.setBounds(0, 30, 120, 20);

        jLabel86.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel86.setText("Status : ");
        getContentPane().add(jLabel86);
        jLabel86.setBounds(60, 60, 60, 20);

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Approved", "Unapproved", "Cancelled", "All" }));
        cmbStatus.setSelectedIndex(3);
        cmbStatus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbStatusItemStateChanged(evt);
            }
        });
        getContentPane().add(cmbStatus);
        cmbStatus.setBounds(130, 60, 150, 20);

        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel26.setText("Zone : ");
        getContentPane().add(jLabel26);
        jLabel26.setBounds(600, 60, 60, 20);

        INCHARGE.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Sales Eng 1", "Sales Eng 2", "Sales Eng 3" }));
        getContentPane().add(INCHARGE);
        INCHARGE.setBounds(660, 60, 100, 20);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Quarter : ");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(310, 30, 80, 20);

        txtpartycode.setToolTipText("Press F1 key for search Party Code");
        txtpartycode = new JTextFieldHint(new JTextField(),"Search by F1");
        txtpartycode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtpartycodeFocusLost(evt);
            }
        });
        txtpartycode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtpartycodeKeyPressed(evt);
            }
        });
        getContentPane().add(txtpartycode);
        txtpartycode.setBounds(550, 30, 70, 20);

        txtpartyname.setDisabledTextColor(java.awt.Color.black);
        txtpartyname = new JTextFieldHint(new JTextField(),"Party Name");
        txtpartyname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpartynameActionPerformed(evt);
            }
        });
        getContentPane().add(txtpartyname);
        txtpartyname.setBounds(620, 30, 370, 20);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Party Code : ");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(450, 30, 100, 20);

        cmbmonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        cmbmonth.setSelectedIndex(3);
        cmbmonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbmonthActionPerformed(evt);
            }
        });
        getContentPane().add(cmbmonth);
        cmbmonth.setBounds(820, 60, 40, 24);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Month");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(760, 60, 50, 20);

        cmbQuarter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Q1", "Q2", "Q3", "Q4" }));
        cmbQuarter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbQuarterActionPerformed(evt);
            }
        });
        getContentPane().add(cmbQuarter);
        cmbQuarter.setBounds(390, 30, 60, 20);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("User : ");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(290, 60, 100, 20);

        cmbUser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(cmbUser);
        cmbUser.setBounds(390, 60, 180, 20);
    }// </editor-fold>//GEN-END:initComponents

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        cmbFY.setSelectedIndex(0);
    }//GEN-LAST:event_btnClearActionPerformed


    private void btnEmpMstETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpMstETEActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnEmpMstETEActionPerformed

    private void btnZASViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZASViewActionPerformed
        // TODO add your handling code here:
        if (!cmbFY.getSelectedItem().equals("Select")) {
            GenerateZAS();
        } else {
            JOptionPane.showMessageDialog(null, "Select Financial Year");
        }
    }//GEN-LAST:event_btnZASViewActionPerformed

    private void TabListStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabListStateChanged
        // TODO add your handling code here:
        try {
            if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Zonewise Approval Status")) {
                FormatGridZAS();
                cmbStatus.setEnabled(false);
                INCHARGE.setEnabled(false);
                txtpartycode.setEnabled(false);
//                cmbmonth.setEnabled(true);
                cmbQuarter.setEnabled(true);
                INCHARGE.setSelectedIndex(0);
                txtpartycode.setText("");
                cmbUser.setEnabled(false);
                cmbUser.setSelectedIndex(0);
            } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Userwise Approval Status")) {
                FormatGridUAS();
                cmbStatus.setEnabled(false);
                INCHARGE.setEnabled(false);
                txtpartycode.setEnabled(false);
//                cmbmonth.setEnabled(true);
                cmbQuarter.setEnabled(true);
                INCHARGE.setSelectedIndex(0);
                txtpartycode.setText("");
                cmbUser.setEnabled(false);
                cmbUser.setSelectedIndex(0);
            } else if (TabList.getTitleAt(TabList.getSelectedIndex()).equals("Userwise Partywise Detail")) {
                FormatGridUPD();
                cmbStatus.setEnabled(false);
                INCHARGE.setEnabled(false);
                txtpartycode.setEnabled(true);
//                cmbmonth.setEnabled(true);
                cmbQuarter.setEnabled(true);
                INCHARGE.setSelectedIndex(0);
                txtpartycode.setText("");
                cmbUser.setEnabled(true);
                cmbUser.setSelectedIndex(0);
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_TabListStateChanged

    private void cmbStatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbStatusItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbStatusItemStateChanged

    private void txtpartycodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtpartycodeFocusLost
        // TODO add your handling code here:
        if (!txtpartycode.getText().trim().equals("") && data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + txtpartycode.getText().trim() + "' AND MAIN_ACCOUNT_CODE=210010 ")) {
            txtpartyname.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, txtpartycode.getText()));

        } else {
            if (!txtpartycode.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Party Code doesn't exist/under approval.");
            }
            txtpartycode.setText("");
            txtpartyname.setText("");
        }
    }//GEN-LAST:event_txtpartycodeFocusLost

    private void txtpartycodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpartycodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();
            //            aList.SQL = "SELECT PARTY_CODE,PARTY_NAME,PARTY_CLOSE_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 ";
//            aList.SQL = "SELECT PARTY_CODE,PARTY_NAME,PARTY_CLOSE_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND APPROVED=1 AND CANCELLED=0";
            aList.SQL = "SELECT DISTINCT PARTY_CODE,PARTY_NAME FROM PRODUCTION.FELT_MACHINE_RUN_FORCASTING_DETAIL WHERE YEAR_FROM = 2021 AND YEAR_TO = 2022 ";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtpartycode.setText(aList.ReturnVal);
                txtpartyname.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
            }
        }
    }//GEN-LAST:event_txtpartycodeKeyPressed

    private void txtpartynameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpartynameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtpartynameActionPerformed

    private void cmbmonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbmonthActionPerformed
        // TODO add your handling code here:
        SetVariable();
    }//GEN-LAST:event_cmbmonthActionPerformed

    private void btnUASViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUASViewActionPerformed
        // TODO add your handling code here:
        if (!cmbFY.getSelectedItem().equals("Select")) {
            GenerateUAS();
        } else {
            JOptionPane.showMessageDialog(null, "Select Financial Year.");
        }
    }//GEN-LAST:event_btnUASViewActionPerformed

    private void cmbQuarterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbQuarterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbQuarterActionPerformed

    private void btnUPDViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUPDViewActionPerformed
        // TODO add your handling code here:
//        if (!cmbUser.getSelectedItem().equals("Select")) {
            GenerateUPD();
//        } else {
//            JOptionPane.showMessageDialog(null, "Select User.");
//        }
    }//GEN-LAST:event_btnUPDViewActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup CANEXCESSGRUP;
    private javax.swing.JFileChooser ExporttoExcelFileChooser;
    private javax.swing.JComboBox INCHARGE;
    private javax.swing.JTabbedPane TabList;
    private javax.swing.JTable Table;
    private javax.swing.ButtonGroup YTMGROUP;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnEmpMstETE;
    private javax.swing.JButton btnUASView;
    private javax.swing.JButton btnUPDView;
    private javax.swing.JButton btnZASView;
    private javax.swing.JComboBox cmbFY;
    private javax.swing.JComboBox cmbQuarter;
    private javax.swing.JComboBox cmbStatus;
    private javax.swing.JComboBox cmbUser;
    private javax.swing.JComboBox cmbmonth;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JLabel lblMonthCmb1;
    private javax.swing.JTextField txtpartycode;
    private javax.swing.JTextField txtpartyname;
    // End of variables declaration//GEN-END:variables

    private void GenerateCombo() {

        HashMap List = new HashMap();
        clsIncharge ObjIncharge;

        INCHARGE.setModel(cmbIncharge);
        cmbIncharge.removeAllElements();  //Clearing previous contents

        List = clsIncharge.getIncgargeList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjIncharge = (clsIncharge) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Text = (String) ObjIncharge.getAttribute("INCHARGE_NAME").getObj();
            aData.Code = (long) ObjIncharge.getAttribute("INCHARGE_CD").getVal();
            cmbIncharge.addElement(aData);
        }

    }

    private void GenerateUserCombo() {

        cmbUser.setModel(cmbUserModel);
        cmbUserModel.removeAllElements();  //Clearing previous contents

        ResultSet rsTmp;
        Connection tmpConn;
        Statement tmpStmt;

        tmpConn = data.getCreatedConn();

        HashMap List = new HashMap();

        try {
            tmpStmt = tmpConn.createStatement();
            rsTmp = tmpStmt.executeQuery("SELECT DISTINCT INCHARGE_USER_ID,USER_NAME FROM PRODUCTION.FELT_MACHINE_RUN_FORCASTING_DETAIL LEFT JOIN DINESHMILLS.D_COM_USER_MASTER ON INCHARGE_USER_ID=USER_ID");
            ComboData aData = new ComboData();
            aData.Text = "Select";
            aData.Code = 0;
            cmbUserModel.addElement(aData);

            while (rsTmp.next()) {
                aData.Text = rsTmp.getString("USER_NAME");
                aData.Code = rsTmp.getInt("INCHARGE_USER_ID");
                cmbUserModel.addElement(aData);
            }

            rsTmp.close();
            tmpStmt.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void SetVariable() {
        HashMap mnth = new HashMap();
        mnth.put(0, "");
        mnth.put(1, "JAN");
        mnth.put(2, "FEB");
        mnth.put(3, "MAR");
        mnth.put(4, "APR");
        mnth.put(5, "MAY");
        mnth.put(6, "JUN");
        mnth.put(7, "JUL");
        mnth.put(8, "AUG");
        mnth.put(9, "SEP");
        mnth.put(10, "OCT");
        mnth.put(11, "NOV");
        mnth.put(12, "DEC");

        curmnth = cmbmonth.getSelectedIndex() + 1;
        if (curmnth == 4) {
            prvmnth = 0;
        } else if (curmnth == 1) {
            prvmnth = 12;
        } else {
            prvmnth = curmnth - 1;
        }
        pmnth = mnth.get(prvmnth).toString();
        cmnth = mnth.get(curmnth).toString();
        remainmonth = currentmonth = 0;
        switch (cmnth) {
            case "APR":
                remainmonth = 12;
                currentmonth = 1;
                break;
            case "MAY":
                remainmonth = 11;
                currentmonth = 2;
                break;
            case "JUN":
                remainmonth = 10;
                currentmonth = 3;
                break;
            case "JUL":
                remainmonth = 9;
                currentmonth = 4;
                break;
            case "AUG":
                remainmonth = 8;
                currentmonth = 5;
                break;
            case "SEP":
                remainmonth = 7;
                currentmonth = 6;
                break;
            case "OCT":
                remainmonth = 6;
                currentmonth = 7;
                break;
            case "NOV":
                remainmonth = 5;
                currentmonth = 8;
                break;
            case "DEC":
                remainmonth = 4;
                currentmonth = 9;
                break;
            case "JAN":
                remainmonth = 3;
                currentmonth = 10;
                break;
            case "FEB":
                remainmonth = 2;
                currentmonth = 11;
                break;
            case "MAR":
                remainmonth = 1;
                currentmonth = 12;
                break;

        }
    }

    private void FormatGridZAS() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Incharge");
        DataModel.addColumn("Zone");
        DataModel.addColumn("Total No of Parties");
        DataModel.addColumn("Approve by Technical Incharge");
        DataModel.addColumn("Final Approved");
        DataModel.addColumn("Cancelled");
        DataModel.addColumn("Grand Total");
        DataModel.addColumn("RunTime");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
        Table.getColumnModel().getColumn(1).setMinWidth(50);
        Table.getColumnModel().getColumn(2).setMinWidth(50);
        Table.getColumnModel().getColumn(3).setMinWidth(150);
        Table.getColumnModel().getColumn(4).setMinWidth(150);
        Table.getColumnModel().getColumn(5).setMinWidth(100);
        Table.getColumnModel().getColumn(6).setMinWidth(100);
        Table.getColumnModel().getColumn(7).setMinWidth(100);

    }

    private void GenerateZAS() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridZAS(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT INCHARGE,INCHARGE_NAME,COUNT(*) AS TOTAL , "
                    + "SUM(COALESCE(CASE WHEN APPROVED =1 AND CANCELED =0 THEN 1 ELSE 0 END,0)) AS FINAL_APPROVED, "
                    + "SUM(COALESCE(CASE WHEN CANCELED =1 AND APPROVED =1 THEN 1 ELSE 0 END,0)) AS CANCELLED, "
                    + "SUM(COALESCE(CASE WHEN CANCELED =0 AND APPROVED =0 THEN 1 ELSE 0 END,0)) AS UNDER_APPROVED, "
                    + "SUM(CREATOR) AS CREATOR,SUM(FINALAPPROVER) AS FINAL_APPROVER "
                    + "FROM "
                    + "(SELECT INCHARGE,INCHARGE_NAME,V.DOC_NO,APPROVED,CANCELED,CREATOR,FINALAPPROVER FROM "
                    + "(SELECT DISTINCT INCHARGE,INCHARGE_NAME,DOC_NO,COALESCE(APPROVED,0) AS APPROVED ,COALESCE(CANCELED,0) AS CANCELED FROM PRODUCTION.FELT_MACHINE_RUN_FORCASTING_DETAIL,PRODUCTION.FELT_INCHARGE  WHERE YEAR_FROM = 2021 AND YEAR_TO = 2022 "
                    //                    + "AND INCHARGE = INCHARGE_CD  AND  LEFT(DOC_NO,9)=CONCAT('MRF2122',RIGHT(100+" + cmbmonth.getSelectedItem().toString() + ",2))"
                    + "AND INCHARGE = INCHARGE_CD  AND  LEFT(DOC_NO,9)=CONCAT('MRF2122','" + cmbQuarter.getSelectedItem().toString() + "') "
                    + ") AS V "
                    + "LEFT JOIN "
                    + "(SELECT DOC_NO, "
                    + "CASE WHEN USER_ID IN (339,355,334,324) THEN 1 ELSE 0 END AS CREATOR, "
                    + "CASE WHEN USER_ID IN (284) THEN 1 ELSE 0 END AS FINALAPPROVER "
                    //                    + "FROM PRODUCTION.FELT_PROD_DOC_DATA WHERE MODULE_ID = 851 AND DOC_DATE >='2020-01-01' AND STATUS = 'W'  AND  LEFT(DOC_NO,9)=CONCAT('MRF2122',RIGHT(100+" + cmbmonth.getSelectedItem().toString() + ",2)))  AS D "
                    + "FROM PRODUCTION.FELT_PROD_DOC_DATA WHERE MODULE_ID = 851 AND DOC_DATE >='2020-01-01' AND STATUS = 'W'  AND  LEFT(DOC_NO,9)=CONCAT('MRF2122','" + cmbQuarter.getSelectedItem().toString() + "'))  AS D "
                    + "ON D.DOC_NO = V.DOC_NO) AS M "
                    + "GROUP BY INCHARGE,INCHARGE_NAME "
                    + ""
                    + "UNION ALL "
                    + ""
                    + "SELECT CONVERT('' USING UTF8) AS INCHARGE,CONVERT('TOTAL' USING UTF8) AS INCHARGE_NAME,COUNT(*) AS TOTAL , "
                    + "SUM(COALESCE(CASE WHEN APPROVED =1 AND CANCELED =0 THEN 1 ELSE 0 END,0)) AS FINAL_APPROVED, "
                    + "SUM(COALESCE(CASE WHEN CANCELED =1 AND APPROVED =1 THEN 1 ELSE 0 END,0)) AS CANCELLED, "
                    + "SUM(COALESCE(CASE WHEN CANCELED =0 AND APPROVED =0 THEN 1 ELSE 0 END,0)) AS UNDER_APPROVED, "
                    + "SUM(CREATOR) AS CREATOR,SUM(FINALAPPROVER) AS FINAL_APPROVER "
                    + "FROM "
                    + "(SELECT INCHARGE,INCHARGE_NAME,V.DOC_NO,APPROVED,CANCELED,CREATOR,FINALAPPROVER FROM "
                    + "(SELECT DISTINCT INCHARGE,INCHARGE_NAME,DOC_NO,COALESCE(APPROVED,0) AS APPROVED ,COALESCE(CANCELED,0) AS CANCELED FROM PRODUCTION.FELT_MACHINE_RUN_FORCASTING_DETAIL,PRODUCTION.FELT_INCHARGE  WHERE YEAR_FROM = 2021 AND YEAR_TO = 2022 "
                    //                    + "AND INCHARGE = INCHARGE_CD  AND  LEFT(DOC_NO,9)=CONCAT('MRF2122',RIGHT(100+" + cmbmonth.getSelectedItem().toString() + ",2)) "
                    + "AND INCHARGE = INCHARGE_CD  AND  LEFT(DOC_NO,9)=CONCAT('MRF2122','" + cmbQuarter.getSelectedItem().toString() + "') "
                    + ") AS V "
                    + "LEFT JOIN "
                    + "(SELECT DOC_NO, "
                    + "CASE WHEN USER_ID IN (339,355,334,324) THEN 1 ELSE 0 END AS CREATOR, "
                    + "CASE WHEN USER_ID IN (284) THEN 1 ELSE 0 END AS FINALAPPROVER "
                    //                    + "FROM PRODUCTION.FELT_PROD_DOC_DATA WHERE MODULE_ID = 851 AND DOC_DATE >='2020-01-01' AND STATUS = 'W'  AND  LEFT(DOC_NO,9)=CONCAT('MRF2122',RIGHT(100+" + cmbmonth.getSelectedItem().toString() + ",2)))  AS D "
                    + "FROM PRODUCTION.FELT_PROD_DOC_DATA WHERE MODULE_ID = 851 AND DOC_DATE >='2020-01-01' AND STATUS = 'W'  AND  LEFT(DOC_NO,9)=CONCAT('MRF2122','" + cmbQuarter.getSelectedItem().toString() + "'))  AS D "
                    + "ON D.DOC_NO = V.DOC_NO) AS M ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
//            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

//                    rowData[0] = Integer.toString(cnt);
//                    rowData[1] = rsTmp.getString("INCHARGE");
//                    rowData[2] = rsTmp.getString("INCHARGE_NAME");
//                    rowData[3] = rsTmp.getString("TOTAL");
//                    rowData[4] = rsTmp.getString("FINAL_APPROVED");
//                    rowData[5] = rsTmp.getString("CANCELLED");
//                    rowData[6] = rsTmp.getString("UNDER_APPROVED");
//                    rowData[7] = rsTmp.getString("CREATOR");
////                    rowData[8] = rsTmp.getString("APPROVER");
//                    rowData[8] = rsTmp.getString("FINAL_APPROVER");
//                    rowData[9] = EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime();
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("INCHARGE");
                    rowData[2] = rsTmp.getString("INCHARGE_NAME");
                    rowData[3] = rsTmp.getString("CREATOR");
                    rowData[4] = rsTmp.getString("FINAL_APPROVER");
                    rowData[5] = rsTmp.getString("FINAL_APPROVED");
                    rowData[6] = rsTmp.getString("CANCELLED");
                    rowData[7] = rsTmp.getString("TOTAL");
                    rowData[8] = EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime();

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Zero (0) Record Found.");
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridUAS() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("User");
        DataModel.addColumn("Total No of Parties");
        DataModel.addColumn("Approve by Technical Incharge");
        DataModel.addColumn("Final Approved");
        DataModel.addColumn("Cancelled");
        DataModel.addColumn("Grand Total");
        DataModel.addColumn("RunTime");

        DataModel.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
        Table.getColumnModel().getColumn(1).setMinWidth(150);
        Table.getColumnModel().getColumn(2).setMinWidth(150);
        Table.getColumnModel().getColumn(3).setMinWidth(150);
        Table.getColumnModel().getColumn(4).setMinWidth(100);
        Table.getColumnModel().getColumn(5).setMinWidth(100);
        Table.getColumnModel().getColumn(6).setMinWidth(100);

    }

    private void GenerateUAS() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridUAS(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT USER_NAME,INCHARGE,INCHARGE_NAME,COUNT(*) AS TOTAL , "
                    + "SUM(COALESCE(CASE WHEN APPROVED =1 AND CANCELED =0 THEN 1 ELSE 0 END,0)) AS FINAL_APPROVED, "
                    + "SUM(COALESCE(CASE WHEN CANCELED =1 AND APPROVED =1 THEN 1 ELSE 0 END,0)) AS CANCELLED, "
                    + "SUM(COALESCE(CASE WHEN CANCELED =0 AND APPROVED =0 THEN 1 ELSE 0 END,0)) AS UNDER_APPROVED, "
                    + "SUM(CREATOR) AS CREATOR,SUM(FINALAPPROVER) AS FINAL_APPROVER "
                    + "FROM "
                    + "(SELECT INCHARGE_USER_ID,USER_NAME,INCHARGE,INCHARGE_NAME,V.DOC_NO,APPROVED,CANCELED,CREATOR,FINALAPPROVER FROM "
                    + "(SELECT DISTINCT INCHARGE_USER_ID,USER_NAME,INCHARGE,INCHARGE_NAME,DOC_NO,COALESCE(APPROVED,0) AS APPROVED ,COALESCE(CANCELED,0) AS CANCELED FROM PRODUCTION.FELT_MACHINE_RUN_FORCASTING_DETAIL,PRODUCTION.FELT_INCHARGE,DINESHMILLS.D_COM_USER_MASTER  WHERE YEAR_FROM = 2021 AND YEAR_TO = 2022 "
                    //                    + "AND INCHARGE = INCHARGE_CD AND INCHARGE_USER_ID=USER_ID AND  LEFT(DOC_NO,9)=CONCAT('MRF2122',RIGHT(100+" + cmbmonth.getSelectedItem().toString() + ",2))" 
                    + "AND INCHARGE = INCHARGE_CD AND INCHARGE_USER_ID=USER_ID AND  LEFT(DOC_NO,9)=CONCAT('MRF2122','" + cmbQuarter.getSelectedItem().toString() + "') "
                    + ") AS V "
                    + "LEFT JOIN "
                    + "(SELECT DOC_NO, "
                    + "CASE WHEN USER_ID IN (339,355,334,324) THEN 1 ELSE 0 END AS CREATOR, "
                    + "CASE WHEN USER_ID IN (284) THEN 1 ELSE 0 END AS FINALAPPROVER "
                    //                    + "FROM PRODUCTION.FELT_PROD_DOC_DATA WHERE MODULE_ID = 851 AND DOC_DATE >='2020-01-01' AND STATUS = 'W'  AND  LEFT(DOC_NO,9)=CONCAT('MRF2122',RIGHT(100+" + cmbmonth.getSelectedItem().toString() + ",2)))  AS D "
                    + "FROM PRODUCTION.FELT_PROD_DOC_DATA WHERE MODULE_ID = 851 AND DOC_DATE >='2020-01-01' AND STATUS = 'W'  AND  LEFT(DOC_NO,9)=CONCAT('MRF2122','" + cmbQuarter.getSelectedItem().toString() + "'))  AS D "
                    + "ON D.DOC_NO = V.DOC_NO) AS M "
                    + "GROUP BY INCHARGE_USER_ID "
                    + ""
                    + "UNION ALL "
                    + ""
                    + "SELECT CONVERT('' USING UTF8) AS USER_NAME,CONVERT('' USING UTF8) AS INCHARGE,CONVERT('TOTAL' USING UTF8) AS INCHARGE_NAME,COUNT(*) AS TOTAL , "
                    + "SUM(COALESCE(CASE WHEN APPROVED =1 AND CANCELED =0 THEN 1 ELSE 0 END,0)) AS FINAL_APPROVED, "
                    + "SUM(COALESCE(CASE WHEN CANCELED =1 AND APPROVED =1 THEN 1 ELSE 0 END,0)) AS CANCELLED, "
                    + "SUM(COALESCE(CASE WHEN CANCELED =0 AND APPROVED =0 THEN 1 ELSE 0 END,0)) AS UNDER_APPROVED, "
                    + "SUM(CREATOR) AS CREATOR,SUM(FINALAPPROVER) AS FINAL_APPROVER "
                    + "FROM "
                    + "(SELECT INCHARGE_USER_ID,USER_NAME,INCHARGE,INCHARGE_NAME,V.DOC_NO,APPROVED,CANCELED,CREATOR,FINALAPPROVER FROM "
                    + "(SELECT DISTINCT INCHARGE_USER_ID,USER_NAME,INCHARGE,INCHARGE_NAME,DOC_NO,COALESCE(APPROVED,0) AS APPROVED ,COALESCE(CANCELED,0) AS CANCELED FROM PRODUCTION.FELT_MACHINE_RUN_FORCASTING_DETAIL,PRODUCTION.FELT_INCHARGE,DINESHMILLS.D_COM_USER_MASTER  WHERE YEAR_FROM = 2021 AND YEAR_TO = 2022 "
                    //                    + "AND INCHARGE = INCHARGE_CD AND INCHARGE_USER_ID=USER_ID AND  LEFT(DOC_NO,9)=CONCAT('MRF2122',RIGHT(100+" + cmbmonth.getSelectedItem().toString() + ",2)) "
                    + "AND INCHARGE = INCHARGE_CD AND INCHARGE_USER_ID=USER_ID AND  LEFT(DOC_NO,9)=CONCAT('MRF2122','" + cmbQuarter.getSelectedItem().toString() + "') "
                    + ") AS V "
                    + "LEFT JOIN "
                    + "(SELECT DOC_NO, "
                    + "CASE WHEN USER_ID IN (339,355,334,324) THEN 1 ELSE 0 END AS CREATOR, "
                    + "CASE WHEN USER_ID IN (284) THEN 1 ELSE 0 END AS FINALAPPROVER "
                    //                    + "FROM PRODUCTION.FELT_PROD_DOC_DATA WHERE MODULE_ID = 851 AND DOC_DATE >='2020-01-01' AND STATUS = 'W'  AND  LEFT(DOC_NO,9)=CONCAT('MRF2122',RIGHT(100+" + cmbmonth.getSelectedItem().toString() + ",2)))  AS D "
                    + "FROM PRODUCTION.FELT_PROD_DOC_DATA WHERE MODULE_ID = 851 AND DOC_DATE >='2020-01-01' AND STATUS = 'W'  AND  LEFT(DOC_NO,9)=CONCAT('MRF2122','" + cmbQuarter.getSelectedItem().toString() + "'))  AS D "
                    + "ON D.DOC_NO = V.DOC_NO) AS M ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
//            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("USER_NAME");
                    rowData[2] = rsTmp.getString("CREATOR");
                    rowData[3] = rsTmp.getString("FINAL_APPROVER");
                    rowData[4] = rsTmp.getString("FINAL_APPROVED");
                    rowData[5] = rsTmp.getString("CANCELLED");
                    rowData[6] = rsTmp.getString("TOTAL");
                    rowData[7] = EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime();

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Zero (0) Record Found.");
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridUPD() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("Party Code");
        DataModel.addColumn("Party Name");
        DataModel.addColumn("Party Group");
        DataModel.addColumn("Machine No");
        DataModel.addColumn("Q1 Expected Run Days");
        DataModel.addColumn("Q1 Expected Remark");
        DataModel.addColumn("Q1 Actual Run Days");
        DataModel.addColumn("Q1 Actual Remark");
        DataModel.addColumn("Q2 Expected Run Days");
        DataModel.addColumn("Q2 Expected Remark");
        DataModel.addColumn("Q2 Actual Run Days");
        DataModel.addColumn("Q2 Actual Remark");
        DataModel.addColumn("Q3 Expected Run Days");
        DataModel.addColumn("Q3 Expected Remark");
        DataModel.addColumn("Q3 Actual Run Days");
        DataModel.addColumn("Q3 Actual Remark");
        DataModel.addColumn("Q4 Expected Run Days");
        DataModel.addColumn("Q4 Expected Remark");
        DataModel.addColumn("Q4 Actual Run Days");
        DataModel.addColumn("Q4 Actual Remark");
        DataModel.addColumn("Total Expected Run Days");
        DataModel.addColumn("User Name");
        DataModel.addColumn("RunDateTime");

        DataModel.TableReadOnly(true);
//        Table.getColumnModel().getColumn(0).setMaxWidth(50);
//        Table.getColumnModel().getColumn(1).setMinWidth(80);
//        Table.getColumnModel().getColumn(2).setMinWidth(150);
//        Table.getColumnModel().getColumn(3).setMinWidth(100);
//        Table.getColumnModel().getColumn(4).setMinWidth(80);
//        Table.getColumnModel().getColumn(5).setMinWidth(100);
//        Table.getColumnModel().getColumn(6).setMinWidth(100);
//        Table.getColumnModel().getColumn(7).setMinWidth(100);
//        Table.getColumnModel().getColumn(8).setMinWidth(100);
//        Table.getColumnModel().getColumn(9).setMinWidth(100);
//        Table.getColumnModel().getColumn(10).setMinWidth(100);
//        Table.getColumnModel().getColumn(11).setMinWidth(100);
//        Table.getColumnModel().getColumn(12).setMinWidth(100);
//        Table.getColumnModel().getColumn(13).setMinWidth(100);
//        Table.getColumnModel().getColumn(14).setMinWidth(100);
//        Table.getColumnModel().getColumn(15).setMinWidth(100);
//        Table.getColumnModel().getColumn(16).setMinWidth(100);
//        Table.getColumnModel().getColumn(17).setMinWidth(100);
//        Table.getColumnModel().getColumn(18).setMinWidth(100);
//        Table.getColumnModel().getColumn(19).setMinWidth(100);
//        Table.getColumnModel().getColumn(20).setMinWidth(100);

    }

    private void GenerateUPD() {
        String cndtn = "";
        String grp_cndtn = "";
        if (!cmbUser.getSelectedItem().equals("Select")) {
            cndtn = " AND USER_NAME = '" + cmbUser.getSelectedItem().toString() + "' ";
        }
        try {
            FormatGridUPD(); //clear existing content of table
            ResultSet rsTmp;

            String strSQL = "";

            strSQL = "SELECT * FROM PRODUCTION.FELT_MACHINE_RUN_FORCASTING_DETAIL,DINESHMILLS.D_COM_USER_MASTER "
                    + "WHERE INCHARGE_USER_ID=USER_ID "
                    + "AND YEAR_FROM = " + cmbFY.getSelectedItem().toString().substring(0, 4) + " "
                    + "AND YEAR_TO = " + cmbFY.getSelectedItem().toString().substring(5, 9) + " "
                    + "AND LEFT(DOC_NO,9)=CONCAT('MRF2122','" + cmbQuarter.getSelectedItem().toString() + "') "
//                    + "AND USER_NAME = '" + cmbUser.getSelectedItem().toString() + "' ";
                    + cndtn;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
//            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PARTY_CODE");
                    rowData[2] = rsTmp.getString("PARTY_NAME");
                    rowData[3] = rsTmp.getString("PARTY_GROUP");
                    rowData[4] = rsTmp.getString("MACHINE_NO");
                    rowData[5] = rsTmp.getString("Q_1_EXP_RD");
                    rowData[6] = rsTmp.getString("Q_1_EXP_RD_REMARK");
                    rowData[7] = rsTmp.getString("Q_1_ACT_RD");
                    rowData[8] = rsTmp.getString("Q_1_ACT_RD_REMARK");
                    rowData[9] = rsTmp.getString("Q_2_EXP_RD");
                    rowData[10] = rsTmp.getString("Q_2_EXP_RD_REMARK");
                    rowData[11] = rsTmp.getString("Q_2_ACT_RD");
                    rowData[12] = rsTmp.getString("Q_2_ACT_RD_REMARK");
                    rowData[13] = rsTmp.getString("Q_3_EXP_RD");
                    rowData[14] = rsTmp.getString("Q_3_EXP_RD_REMARK");
                    rowData[15] = rsTmp.getString("Q_3_ACT_RD");
                    rowData[16] = rsTmp.getString("Q_3_ACT_RD_REMARK");
                    rowData[17] = rsTmp.getString("Q_4_EXP_RD");
                    rowData[18] = rsTmp.getString("Q_4_EXP_RD_REMARK");
                    rowData[19] = rsTmp.getString("Q_4_ACT_RD");
                    rowData[20] = rsTmp.getString("Q_4_ACT_RD_REMARK");
                    rowData[21] = rsTmp.getString("MRF_TOT_EXP_ACT_RUN_DAYS");
                    rowData[22] = rsTmp.getString("USER_NAME");
                    rowData[23] = EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime();

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Zero (0) Record Found.");
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

}
