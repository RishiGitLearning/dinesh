/*
 * frmSalesParty.java
 *
 * Created on June 14, 2004, 3:00 PM
 */
package EITLERP.FeltSales.FeltInvReport;

/**
 *
 * @author
 */
/*<APPLET CODE=frmInvoiceReport.class HEIGHT=574 WIDTH=758></APPLET>*/
import javax.swing.*;
import java.util.*;
import EITLERP.*;
import TReportWriter.SimpleDataProvider.TRow;
import TReportWriter.SimpleDataProvider.TTable;
import TReportWriter.TReportEngine;
import java.lang.*;
import java.sql.*;
import java.lang.String;

//import EITLERP.Purchase.frmSendMail;
public class frmFeltInvReport extends javax.swing.JApplet {

    private int EditMode = 0;
    private NumWord nw;

    //private clsPackingentry ObjPackingEntry;
    private TReportEngine objEngine = new TReportEngine();
    private EITLComboModel cmbLotModel = new EITLComboModel();

    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;

    private EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
    private EITLTableCellRenderer Paint = new EITLTableCellRenderer();

    private HashMap colVariables = new HashMap();
    private HashMap colVariables_H = new HashMap();
    //clsColumn ObjColumn=new clsColumn();

    private boolean Updating = false;
    private boolean Updating_H = false;
    private boolean DoNotEvaluate = false;

    private boolean HistoryView = false;
    private String theDocNo = "";
    public frmPendingApprovals frmPA;
    private int charge09index = 0;
    private EITLTableCellRenderer Rend = new EITLTableCellRenderer();
    String cellLastValue = "";

    /**
     * Creates new form frmSalesParty
     */
    public frmFeltInvReport() {
        System.gc();
        setSize(800, 700);
        initComponents();

        txtinvdt.setText(EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT SUBSTRING(INVOICE_DATE,1,10) FROM PRODUCTION.FELT_SAL_INVOICE_HEADER ORDER BY INVOICE_NO DESC")));
        GenerateCombo();
        btn.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        grpSisterConcern = new javax.swing.ButtonGroup();
        lblStatus = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtinvdt = new javax.swing.JTextField();
        cmbLot = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        btn = new javax.swing.JPanel();
        cmdinvslp = new javax.swing.JButton();
        cmbinvsmy = new javax.swing.JButton();
        cmdinvslp1 = new javax.swing.JButton();
        cmdexcise = new javax.swing.JButton();
        cmdvat = new javax.swing.JButton();
        cmdcst = new javax.swing.JButton();
        cmdGST = new javax.swing.JButton();
        cmbbnksmy = new javax.swing.JButton();

        getContentPane().setLayout(null);

        lblStatus.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(0, 0, 255));
        lblStatus.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(20, 640, 610, 20);

        jLabel1.setText("Invoice Date :");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 80, 100, 21);

        jLabel2.setText("DD/MM/YYYY");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(130, 50, 90, 21);

        txtinvdt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtinvdtFocusLost(evt);
            }
        });
        getContentPane().add(txtinvdt);
        txtinvdt.setBounds(120, 70, 120, 40);

        cmbLot.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        getContentPane().add(cmbLot);
        cmbLot.setBounds(250, 70, 130, 40);

        jLabel3.setText("Lot No.");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(250, 50, 70, 21);

        btn.setLayout(null);

        cmdinvslp.setText("Invoice Slip");
        cmdinvslp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdinvslpActionPerformed(evt);
            }
        });
        btn.add(cmdinvslp);
        cmdinvslp.setBounds(220, 30, 130, 33);

        cmbinvsmy.setText("Invoice Summary");
        cmbinvsmy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbinvsmyActionPerformed(evt);
            }
        });
        btn.add(cmbinvsmy);
        cmbinvsmy.setBounds(10, 30, 180, 33);

        cmdinvslp1.setText("Transport Letter");
        cmdinvslp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdinvslp1ActionPerformed(evt);
            }
        });
        btn.add(cmdinvslp1);
        cmdinvslp1.setBounds(10, 90, 180, 33);

        cmdexcise.setText("GST Sheet (For Excise Dept)");
        cmdexcise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdexciseActionPerformed(evt);
            }
        });
        btn.add(cmdexcise);
        cmdexcise.setBounds(380, 30, 220, 33);

        cmdvat.setText("Vat");
        cmdvat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdvatActionPerformed(evt);
            }
        });
        btn.add(cmdvat);
        cmdvat.setBounds(360, 160, 130, 33);

        cmdcst.setText("Cst");
        cmdcst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdcstActionPerformed(evt);
            }
        });
        btn.add(cmdcst);
        cmdcst.setBounds(90, 160, 130, 33);

        cmdGST.setText("GST");
        cmdGST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGSTActionPerformed(evt);
            }
        });
        btn.add(cmdGST);
        cmdGST.setBounds(220, 90, 130, 33);

        cmbbnksmy.setText("Bank Nego. Summary");
        cmbbnksmy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbbnksmyActionPerformed(evt);
            }
        });
        btn.add(cmbbnksmy);
        cmbbnksmy.setBounds(400, 90, 180, 33);

        getContentPane().add(btn);
        btn.setBounds(30, 140, 680, 300);
    }// </editor-fold>//GEN-END:initComponents

    private void txtinvdtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtinvdtFocusLost
        // TODO add your handling code here:
        if (GenerateCombo()) {
            btn.setVisible(true);
            cmdcst.setVisible(false);
            cmdvat.setVisible(false);
        } else {
            JOptionPane.showMessageDialog(null, "Invoice not Generated...");
            txtinvdt.setText("");
            btn.setVisible(false);
            txtinvdt.requestFocus();
        }
    }//GEN-LAST:event_txtinvdtFocusLost

    private void cmdinvslpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdinvslpActionPerformed
        // TODO add your handling code here:
        //PreviewReport();
        String sql;
        if (cmbLot.isVisible()) {
            HashMap Parameters = new HashMap();
            Parameters.put("CURDATE", EITLERPGLOBAL.getCurrentDate());

            TTable objData = new TTable();
            objData.AddColumn("DESC");
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("DRAFT_NO");
            objData.AddColumn("GATEPASS_NO");
            objData.AddColumn("CINV");
            objData.AddColumn("INVOICE_TYPE");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("BALE_NO");
            objData.AddColumn("PACKING_DATE");
            objData.AddColumn("CHARGE_CODE");
            objData.AddColumn("HSN_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("ADDRESS1");
            objData.AddColumn("ADDRESS2");
            objData.AddColumn("PINCODE");
            objData.AddColumn("CITY_ID");
            objData.AddColumn("DISPATCH_STATION");
            objData.AddColumn("CITY_NAME");
            objData.AddColumn("DOCUMENT_THROUGH");
            objData.AddColumn("ECC_NO");
            objData.AddColumn("INSURANCE_CODE");
            objData.AddColumn("TIN_NO");
            objData.AddColumn("STATE_GST_CODE");
            objData.AddColumn("GSTIN_NO");
            objData.AddColumn("PRODUCT_CODE");
            objData.AddColumn("TRANSPORTER_CODE");
            objData.AddColumn("NO_OF_PIECES");
            objData.AddColumn("PIECE_NO");
            objData.AddColumn("MACHINE_NO");
            objData.AddColumn("POSITION_NO");
            //objData.AddColumn("MM_MACHINE_POSITION_DESC");
            objData.AddColumn("MACHINE_NO_DESC");
            objData.AddColumn("PRODUCT_DESC");
            objData.AddColumn("SYN_PER");
            objData.AddColumn("LENGTH");
            objData.AddColumn("WIDTH");
            objData.AddColumn("GSM");
            objData.AddColumn("STYLE");
            objData.AddColumn("RATE_UNIT");
            objData.AddColumn("RATE");
            objData.AddColumn("SQMTR");
            objData.AddColumn("THORITICAL_WEIGHT");
            objData.AddColumn("ACTUAL_WEIGHT");
            objData.AddColumn("BAS_AMT");
            objData.AddColumn("DISC_PER");
            objData.AddColumn("DISC_AMT");
            objData.AddColumn("CHEM_TRT_CHG");
            objData.AddColumn("SPIRAL_CHG");
            objData.AddColumn("PIN_CHG");
            objData.AddColumn("CAMT");
            objData.AddColumn("TOTAMT");
            objData.AddColumn("NETAMT");
            objData.AddColumn("INSURANCE_AMT");
            objData.AddColumn("TAXABLE_AMT");
            objData.AddColumn("TOTAL_AMT");
            objData.AddColumn("NET_AMT");
            objData.AddColumn("INVOICE_AMT");
            objData.AddColumn("IGST_PER");
            objData.AddColumn("IGST_AMT");
            objData.AddColumn("CGST_PER");
            objData.AddColumn("CGST_AMT");
            objData.AddColumn("SGST_PER");
            objData.AddColumn("SGST_AMT");
            objData.AddColumn("GST_COMP_CESS_PER");
            objData.AddColumn("GST_COMP_CESS_AMT");
            objData.AddColumn("ADV_RECEIVED_AMT");
            objData.AddColumn("ADV_AGN_IGST_AMT");
            objData.AddColumn("ADV_AGN_CGST_AMT");
            objData.AddColumn("ADV_AGN_SGST_AMT");
            objData.AddColumn("ADV_AGN_GST_COMP_CESS_AMT");
            objData.AddColumn("ADV_DOC_NO");
            objData.AddColumn("VEHICLE_NO");
            objData.AddColumn("BALANCE");
            objData.AddColumn("BALANCE_IGST_AMT");
            objData.AddColumn("BALANCE_CGST_AMT");
            objData.AddColumn("BALANCE_SGST_AMT");
            objData.AddColumn("BALANCE_GST_COMP_CESS_AMT");


            try {

                String strSQL = "";
                ResultSet rsReport;

                //Retrieve data
                
//                strSQL += "SELECT * FROM ( SELECT M.DESC,H.INVOICE_NO,RIGHT(H.INVOICE_NO,4) AS DRAFT_NO,H.GATEPASS_NO, CASE WHEN H.CANCELLED=1 THEN 'CANCELLED INVOICE' ELSE '' END AS CINV, H.INVOICE_TYPE,H.INVOICE_DATE,H.PARTY_CODE,H.BALE_NO,H.PACKING_DATE,H.CHARGE_CODE,H.HSN_CODE, P.PARTY_NAME,P.ADDRESS1,P.ADDRESS2,P.PINCODE,P.CITY_ID,P.DISPATCH_STATION,P.CITY_NAME, P.DOCUMENT_THROUGH,P.ECC_NO,P.INSURANCE_CODE,P.TIN_NO,P.STATE_GST_CODE, CASE WHEN P.GSTIN_NO IS NULL THEN 'XXXXXXXXXXXXXXX' ELSE CASE WHEN LENGTH(P.GSTIN_NO)!=15 THEN 'XXXXXXXXXXXXXXX' ELSE P.GSTIN_NO END END AS GSTIN_NO, D.PRODUCT_CODE,H.TRANSPORTER_CODE,H.NO_OF_PIECES,GROUP_CONCAT(D.PIECE_NO) AS PIECE_NO,D.MACHINE_NO,D.POSITION_NO, MD.MM_MACHINE_POSITION_DESC, ";
//                strSQL += "CONCAT('PM ',D.MACHINE_NO,' ',MD.MM_MACHINE_POSITION_DESC) AS MACHINE_NO_DESC, Q.PRODUCT_DESC,D.SYN_PER,D.LENGTH,D.WIDTH,D.GSM,D.STYLE, CASE WHEN Q.SQM_IND=1 THEN 'MTR' ELSE 'KG' END AS RATE_UNIT, D.RATE,SUM(D.SQMTR) AS SQMTR,D.THORITICAL_WEIGHT,SUM(D.ACTUAL_WEIGHT) AS ACTUAL_WEIGHT, H.BAS_AMT,D.DISC_PER,H.DISC_AMT,H.CHEM_TRT_CHG,H.SPIRAL_CHG,H.PIN_CHG, (H.SPIRAL_CHG+H.PIN_CHG) AS CAMT, (H.BAS_AMT+H.CHEM_TRT_CHG+H.SPIRAL_CHG+H.PIN_CHG) AS TOTAMT, (H.BAS_AMT-H.DISC_AMT+H.CHEM_TRT_CHG+H.SPIRAL_CHG+H.PIN_CHG) AS NETAMT,H.INSURANCE_AMT, (H.BAS_AMT-H.DISC_AMT+H.CHEM_TRT_CHG+H.SPIRAL_CHG+H.PIN_CHG+H.INSURANCE_AMT) AS TAXABLE_AMT, (H.BAS_AMT-H.DISC_AMT+H.CHEM_TRT_CHG+H.SPIRAL_CHG+H.PIN_CHG+H.INSURANCE_AMT+H.IGST_AMT+H.CGST_AMT+H.SGST_AMT+H.GST_COMP_CESS_AMT) AS TOTAL_AMT, ";
//                strSQL += "SELECT * FROM ( SELECT M.DESC,H.INVOICE_NO,RIGHT(H.INVOICE_NO,4) AS DRAFT_NO,H.GATEPASS_NO, CASE WHEN H.CANCELLED=1 THEN 'CANCELLED INVOICE' ELSE '' END AS CINV, H.INVOICE_TYPE,H.INVOICE_DATE,H.PARTY_CODE,H.BALE_NO,H.PACKING_DATE,H.CHARGE_CODE,H.HSN_CODE, P.PARTY_NAME,P.ADDRESS1,P.ADDRESS2,P.PINCODE,P.CITY_ID,P.DISPATCH_STATION,P.CITY_NAME, P.DOCUMENT_THROUGH,P.ECC_NO,P.INSURANCE_CODE,P.TIN_NO,P.STATE_GST_CODE, CASE WHEN P.GSTIN_NO IS NULL THEN 'XXXXXXXXXXXXXXX' ELSE CASE WHEN LENGTH(P.GSTIN_NO)!=15 THEN 'XXXXXXXXXXXXXXX' ELSE P.GSTIN_NO END END AS GSTIN_NO, D.PRODUCT_CODE,H.TRANSPORTER_CODE,H.NO_OF_PIECES,GROUP_CONCAT(D.PIECE_NO) AS PIECE_NO,D.MACHINE_NO,D.POSITION_NO, ";
                strSQL += "SELECT * FROM ( SELECT COALESCE(M.TRANSPORTER_NAME,'') AS TRANSPORTER_NAME,H.INVOICE_NO,RIGHT(H.INVOICE_NO,4) AS DRAFT_NO,H.GATEPASS_NO, CASE WHEN H.CANCELLED=1 THEN 'CANCELLED INVOICE' ELSE '' END AS CINV, H.INVOICE_TYPE,H.INVOICE_DATE,H.PARTY_CODE,H.BALE_NO,H.PACKING_DATE,H.CHARGE_CODE,H.HSN_CODE, P.PARTY_NAME,P.ADDRESS1,P.ADDRESS2,P.PINCODE,P.CITY_ID,P.DISPATCH_STATION,P.CITY_NAME, P.DOCUMENT_THROUGH,P.ECC_NO,P.INSURANCE_CODE,P.TIN_NO,SUBSTRING(P.GSTIN_NO,1,2) AS STATE_GST_CODE, CASE WHEN P.GSTIN_NO IS NULL THEN 'XXXXXXXXXXXXXXX' ELSE CASE WHEN LENGTH(P.GSTIN_NO)!=15 THEN 'XXXXXXXXXXXXXXX' ELSE P.GSTIN_NO END END AS GSTIN_NO, D.PRODUCT_CODE,H.TRANSPORTER_CODE,H.NO_OF_PIECES,GROUP_CONCAT(D.PIECE_NO) AS PIECE_NO,D.MACHINE_NO,D.POSITION_NO, ";
                strSQL += "CONCAT('PM ',D.MACHINE_NO,' ',MD.POSITION_DESC) AS MACHINE_NO_DESC, Q.PRODUCT_DESC,D.SYN_PER,D.LENGTH,D.WIDTH,D.GSM,D.STYLE, CASE WHEN Q.SQM_IND=1 THEN 'MTR' ELSE 'KG' END AS RATE_UNIT, D.RATE,SUM(D.SQMTR) AS SQMTR,D.THORITICAL_WEIGHT,SUM(D.ACTUAL_WEIGHT) AS ACTUAL_WEIGHT, H.BAS_AMT,D.DISC_PER,H.DISC_AMT,H.CHEM_TRT_CHG,H.SPIRAL_CHG,H.PIN_CHG, (H.SPIRAL_CHG+H.PIN_CHG) AS CAMT, (H.BAS_AMT+H.CHEM_TRT_CHG+H.SPIRAL_CHG+H.PIN_CHG) AS TOTAMT, (H.BAS_AMT-H.DISC_AMT+H.CHEM_TRT_CHG+H.SPIRAL_CHG+H.PIN_CHG) AS NETAMT,H.INSURANCE_AMT, (H.BAS_AMT-H.DISC_AMT+H.CHEM_TRT_CHG+H.SPIRAL_CHG+H.PIN_CHG+H.INSURANCE_AMT) AS TAXABLE_AMT, (H.BAS_AMT-H.DISC_AMT+H.CHEM_TRT_CHG+H.SPIRAL_CHG+H.PIN_CHG+H.INSURANCE_AMT+H.IGST_AMT+H.CGST_AMT+H.SGST_AMT+H.GST_COMP_CESS_AMT) AS TOTAL_AMT, ";
                strSQL += "H.NET_AMT,H.INVOICE_AMT,H.IGST_PER,H.IGST_AMT,H.CGST_PER,H.CGST_AMT,H.SGST_PER,H.SGST_AMT, H.GST_COMP_CESS_PER,H.GST_COMP_CESS_AMT,H.ADV_RECEIVED_AMT,H.ADV_AGN_IGST_AMT,H.ADV_AGN_CGST_AMT,H.ADV_AGN_SGST_AMT,H.ADV_AGN_GST_COMP_CESS_AMT, COALESCE(H.ADV_DOC_NO,'') AS ADV_DOC_NO,COALESCE(H.VEHICLE_NO,'') AS VEHICLE_NO, (H.BAS_AMT-H.DISC_AMT+H.CHEM_TRT_CHG+H.SPIRAL_CHG+H.PIN_CHG+H.INSURANCE_AMT-H.ADV_RECEIVED_AMT) AS BALANCE,(H.IGST_AMT-H.ADV_AGN_IGST_AMT) AS BALANCE_IGST_AMT,(H.CGST_AMT-H.ADV_AGN_CGST_AMT) AS BALANCE_CGST_AMT,(H.SGST_AMT-H.ADV_AGN_SGST_AMT) AS BALANCE_SGST_AMT,(H.GST_COMP_CESS_AMT-H.ADV_AGN_GST_COMP_CESS_AMT) AS BALANCE_GST_COMP_CESS_AMT ";
                strSQL += "FROM  PRODUCTION.FELT_SAL_INVOICE_HEADER H, PRODUCTION.FELT_SAL_INVOICE_DETAIL D, ";
//                strSQL += "DINESHMILLS.D_SAL_PARTY_MASTER P, DINESHMILLS.D_COM_PARAMETER_MAST M, ";
                strSQL += "DINESHMILLS.D_SAL_PARTY_MASTER P, DINESHMILLS.D_SAL_TRANSPORTER_MASTER M, ";
//                strSQL += "PRODUCTION.FELT_MACHINE_MASTER_DETAIL MD, PRODUCTION.FELT_MACHINE_MASTER_HEADER MH, ";
                strSQL += "PRODUCTION.FELT_MACHINE_POSITION_MST MD, ";
                strSQL += "PRODUCTION.FELT_QLT_RATE_MASTER Q ";
                strSQL += "WHERE H.INVOICE_NO=D.INVOICE_NO AND SUBSTRING(D.INVOICE_DATE,1,10)='" + EITLERPGLOBAL.formatDateDB(txtinvdt.getText().trim()) + "' ";
                strSQL += "AND H.APPROVED=1 AND H.CANCELLED=0 AND P.MAIN_ACCOUNT_CODE=210010 ";
//                strSQL += "AND H.PARTY_CODE=P.PARTY_CODE AND M.PARA_ID='TRANSPORT' ";
//                strSQL += "AND H.TRANSPORTER_CODE=M.PARA_CODE AND H.LOT_NO='" + EITLERPGLOBAL.getComboCode(cmbLot) + "' ";
                strSQL += "AND H.PARTY_CODE=P.PARTY_CODE ";
                strSQL += "AND H.TRANSPORTER_CODE=M.TRANSPORTER_ID AND H.LOT_NO='" + EITLERPGLOBAL.getComboCode(cmbLot) + "' ";
                strSQL += "AND P.PARTY_CODE=D.PARTY_CODE AND D.PARTY_CODE=H.PARTY_CODE ";
                strSQL += "AND P.COMPANY_ID=H.COMPANY_ID AND H.COMPANY_ID=M.COMPANY_ID ";
                strSQL += "AND SUBSTRING(H.INVOICE_DATE,1,10)=SUBSTRING(D.INVOICE_DATE,1,10) ";
//                strSQL += "AND MH.MM_DOC_NO=MD.MM_DOC_NO AND MD.MM_PARTY_CODE=H.PARTY_CODE ";
//                strSQL += "AND MD.MM_MACHINE_NO=D.MACHINE_NO AND MD.MM_MACHINE_POSITION=D.POSITION_NO ";
//                strSQL += "AND MH.APPROVED=1 AND MH.CANCELED=0 ";
                strSQL += "AND MD.POSITION_NO=D.POSITION_NO ";
                strSQL += "AND Q.PRODUCT_CODE = SUBSTRING(D.PRODUCT_CODE,1,6) ";
                strSQL += "AND Q.EFFECTIVE_TO='0000-00-00' AND Q.APPROVED=1 AND Q.CANCELED=0 ";
                strSQL += "GROUP BY D.INVOICE_NO) SUB";

                rsReport = data.getResult(strSQL);
                rsReport.first();

                if (rsReport.getRow() > 0) {

                    while (!rsReport.isAfterLast()) {
                        TRow objRow = new TRow();

                        objRow.setValue("DESC", rsReport.getString("TRANSPORTER_NAME"));
                        objRow.setValue("INVOICE_NO", rsReport.getString("INVOICE_NO"));
                        objRow.setValue("DRAFT_NO", rsReport.getString("DRAFT_NO"));
                        objRow.setValue("GATEPASS_NO", rsReport.getString("GATEPASS_NO"));
                        objRow.setValue("CINV", rsReport.getString("CINV"));
                        objRow.setValue("INVOICE_TYPE", rsReport.getString("INVOICE_TYPE"));
                        objRow.setValue("INVOICE_DATE", rsReport.getString("INVOICE_DATE"));
                        objRow.setValue("PARTY_CODE", rsReport.getString("PARTY_CODE"));
                        objRow.setValue("BALE_NO", rsReport.getString("BALE_NO"));
                        objRow.setValue("PACKING_DATE", rsReport.getString("PACKING_DATE"));
                        objRow.setValue("CHARGE_CODE", rsReport.getString("CHARGE_CODE"));
                        objRow.setValue("HSN_CODE", rsReport.getString("HSN_CODE"));
                        objRow.setValue("PARTY_NAME", rsReport.getString("PARTY_NAME"));
                        objRow.setValue("ADDRESS1", rsReport.getString("ADDRESS1"));
                        objRow.setValue("ADDRESS2", rsReport.getString("ADDRESS2"));
                        objRow.setValue("PINCODE", rsReport.getString("PINCODE"));
                        objRow.setValue("CITY_ID", rsReport.getString("CITY_ID"));
                        objRow.setValue("DISPATCH_STATION", rsReport.getString("DISPATCH_STATION"));
                        objRow.setValue("CITY_NAME", rsReport.getString("CITY_NAME"));
                        objRow.setValue("DOCUMENT_THROUGH", rsReport.getString("DOCUMENT_THROUGH"));
                        objRow.setValue("ECC_NO", rsReport.getString("ECC_NO"));
                        objRow.setValue("INSURANCE_CODE", rsReport.getString("INSURANCE_CODE"));
                        objRow.setValue("TIN_NO", rsReport.getString("TIN_NO"));
                        objRow.setValue("STATE_GST_CODE", rsReport.getString("STATE_GST_CODE"));
                        objRow.setValue("GSTIN_NO", rsReport.getString("GSTIN_NO"));
                        objRow.setValue("PRODUCT_CODE", rsReport.getString("PRODUCT_CODE"));
                        objRow.setValue("TRANSPORTER_CODE", rsReport.getString("TRANSPORTER_CODE"));
                        objRow.setValue("NO_OF_PIECES", Double.toString(rsReport.getDouble("NO_OF_PIECES")));
                        objRow.setValue("PIECE_NO", rsReport.getString("PIECE_NO"));
                        objRow.setValue("MACHINE_NO", rsReport.getString("MACHINE_NO"));
                        objRow.setValue("POSITION_NO", rsReport.getString("POSITION_NO"));
                        //objRow.setValue("MM_MACHINE_POSITION_DESC", rsReport.getString("MM_MACHINE_POSITION_DESC"));
                        objRow.setValue("MACHINE_NO_DESC", rsReport.getString("MACHINE_NO_DESC"));
                        objRow.setValue("PRODUCT_DESC", rsReport.getString("PRODUCT_DESC"));
                        objRow.setValue("SYN_PER", rsReport.getString("SYN_PER"));
                        objRow.setValue("LENGTH", rsReport.getString("LENGTH"));
                        objRow.setValue("WIDTH", rsReport.getString("WIDTH"));
                        objRow.setValue("GSM", rsReport.getString("GSM"));
                        objRow.setValue("STYLE", rsReport.getString("STYLE"));
                        objRow.setValue("RATE_UNIT", rsReport.getString("RATE_UNIT"));
                        objRow.setValue("RATE", Double.toString(rsReport.getDouble("RATE")));
                        objRow.setValue("SQMTR", Double.toString(rsReport.getDouble("SQMTR")));
                        objRow.setValue("THORITICAL_WEIGHT", Double.toString(rsReport.getDouble("THORITICAL_WEIGHT")));
                        objRow.setValue("ACTUAL_WEIGHT", Double.toString(rsReport.getDouble("ACTUAL_WEIGHT")));
                        objRow.setValue("BAS_AMT", Double.toString(rsReport.getDouble("BAS_AMT")));
                        objRow.setValue("DISC_PER", Double.toString(rsReport.getDouble("DISC_PER")));
                        objRow.setValue("DISC_AMT", Double.toString(rsReport.getDouble("DISC_AMT")));
                        objRow.setValue("CHEM_TRT_CHG", Double.toString(rsReport.getDouble("CHEM_TRT_CHG")));
                        objRow.setValue("SPIRAL_CHG", Double.toString(rsReport.getDouble("SPIRAL_CHG")));
                        objRow.setValue("PIN_CHG", Double.toString(rsReport.getDouble("PIN_CHG")));
                        objRow.setValue("CAMT", Double.toString(rsReport.getDouble("CAMT")));
                        objRow.setValue("TOTAMT", Double.toString(rsReport.getDouble("TOTAMT")));
                        objRow.setValue("NETAMT", Double.toString(rsReport.getDouble("NETAMT")));
                        objRow.setValue("INSURANCE_AMT", Double.toString(rsReport.getDouble("INSURANCE_AMT")));
                        objRow.setValue("TAXABLE_AMT", Double.toString(rsReport.getDouble("TAXABLE_AMT")));
                        objRow.setValue("TOTAL_AMT", Double.toString(rsReport.getDouble("TOTAL_AMT")));
                        objRow.setValue("NET_AMT", Double.toString(rsReport.getDouble("NET_AMT")));
                        objRow.setValue("INVOICE_AMT", Double.toString(rsReport.getDouble("INVOICE_AMT")));
                        objRow.setValue("IGST_PER", Double.toString(rsReport.getDouble("IGST_PER")));
                        objRow.setValue("IGST_AMT", Double.toString(rsReport.getDouble("IGST_AMT")));
                        objRow.setValue("CGST_PER", Double.toString(rsReport.getDouble("CGST_PER")));
                        objRow.setValue("CGST_AMT", Double.toString(rsReport.getDouble("CGST_AMT")));
                        objRow.setValue("SGST_PER", Double.toString(rsReport.getDouble("SGST_PER")));
                        objRow.setValue("SGST_AMT", Double.toString(rsReport.getDouble("SGST_AMT")));
                        objRow.setValue("GST_COMP_CESS_PER", Double.toString(rsReport.getDouble("GST_COMP_CESS_PER")));
                        objRow.setValue("GST_COMP_CESS_AMT", Double.toString(rsReport.getDouble("GST_COMP_CESS_AMT")));
                        objRow.setValue("ADV_RECEIVED_AMT", Double.toString(rsReport.getDouble("ADV_RECEIVED_AMT")));
                        objRow.setValue("ADV_AGN_IGST_AMT", Double.toString(rsReport.getDouble("ADV_AGN_IGST_AMT")));
                        objRow.setValue("ADV_AGN_CGST_AMT", Double.toString(rsReport.getDouble("ADV_AGN_CGST_AMT")));
                        objRow.setValue("ADV_AGN_SGST_AMT", Double.toString(rsReport.getDouble("ADV_AGN_SGST_AMT")));
                        objRow.setValue("ADV_AGN_GST_COMP_CESS_AMT", Double.toString(rsReport.getDouble("ADV_AGN_GST_COMP_CESS_AMT")));
                        objRow.setValue("ADV_DOC_NO", rsReport.getString("ADV_DOC_NO"));
                        objRow.setValue("VEHICLE_NO", Double.toString(rsReport.getDouble("VEHICLE_NO")));
                        objRow.setValue("BALANCE", Double.toString(rsReport.getDouble("BALANCE")));
                        objRow.setValue("BALANCE_IGST_AMT", Double.toString(rsReport.getDouble("BALANCE_IGST_AMT")));
                        objRow.setValue("BALANCE_CGST_AMT", Double.toString(rsReport.getDouble("BALANCE_CGST_AMT")));
                        objRow.setValue("BALANCE_SGST_AMT", Double.toString(rsReport.getDouble("BALANCE_SGST_AMT")));
                        objRow.setValue("BALANCE_GST_COMP_CESS_AMT", Double.toString(rsReport.getDouble("BALANCE_GST_COMP_CESS_AMT")));

                        objData.AddRow(objRow);
                        rsReport.next();
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/FeltSales/fltinv.rpt", Parameters, objData);
            
        }
    }//GEN-LAST:event_cmdinvslpActionPerformed

    private void cmbinvsmyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbinvsmyActionPerformed
        // TODO add your handling code here:
        String sql;
        if (cmbLot.isVisible()) {
            HashMap Parameters = new HashMap();
            Parameters.put("CURDATE", EITLERPGLOBAL.getCurrentDate());

            TTable objData = new TTable();
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("BALE_NO");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("PIECE_NO");
            objData.AddColumn("CHARGE_CODE");
            objData.AddColumn("GROSS_QTY");
            objData.AddColumn("BAS_AMT");
            objData.AddColumn("CGST_AMT");
            objData.AddColumn("SGST_AMT");
            objData.AddColumn("IGST_AMT");
            objData.AddColumn("DISC_AMT");
            objData.AddColumn("INSURANCE_AMT");
            objData.AddColumn("NET_AMT");
            objData.AddColumn("INVOICE_AMT");

            try {

                String strSQL = "";
                ResultSet rsReport;

                //Retrieve data
                strSQL = "SELECT RIGHT(H.INVOICE_NO,4) AS INVOICE_NO,SUBSTRING(H.INVOICE_DATE,1,10) AS INVOICE_DATE,H.BALE_NO,H.PARTY_CODE,"
                        + "SUBSTRING(P.PARTY_NAME,1,22) AS PARTY_NAME, GROUP_CONCAT(D.PIECE_NO) AS PIECE_NO,H.CHARGE_CODE,"
                        + "SUM(D.ACTUAL_WEIGHT) AS GROSS_QTY,H.BAS_AMT,H.CGST_AMT ,H.SGST_AMT ,H.IGST_AMT, H.DISC_AMT,H.INSURANCE_AMT,H.NET_AMT,H.INVOICE_AMT,"
                        + "(H.CST2+H.CST5+H.VAT1+H.VAT4) AS CST_VAT "
                        + "FROM DINESHMILLS.D_SAL_PARTY_MASTER P, PRODUCTION.FELT_SAL_INVOICE_HEADER H, PRODUCTION.FELT_SAL_INVOICE_DETAIL D "
                        + "WHERE H.PARTY_CODE=P.PARTY_CODE  AND H.INVOICE_NO=D.INVOICE_NO AND H.APPROVED=1 AND H.CANCELLED=0 AND P.MAIN_ACCOUNT_CODE=210010 "
                        + "AND SUBSTRING(H.INVOICE_DATE,1,10)='" + EITLERPGLOBAL.formatDateDB(txtinvdt.getText().trim()) + "' "
                        + "AND H.LOT_NO='" + EITLERPGLOBAL.getComboCode(cmbLot) + "' "
                        + "GROUP BY D.INVOICE_NO  ORDER BY H.PARTY_CODE,H.INVOICE_NO";

                rsReport = data.getResult(strSQL);
                rsReport.first();

                if (rsReport.getRow() > 0) {

                    while (!rsReport.isAfterLast()) {
                        TRow objRow = new TRow();

                        objRow.setValue("INVOICE_NO", rsReport.getString("INVOICE_NO"));
                        objRow.setValue("INVOICE_DATE", rsReport.getString("INVOICE_DATE"));
                        objRow.setValue("BALE_NO", rsReport.getString("BALE_NO"));
                        objRow.setValue("PARTY_CODE", rsReport.getString("PARTY_CODE"));
                        objRow.setValue("PARTY_NAME", rsReport.getString("PARTY_NAME"));
                        objRow.setValue("PIECE_NO", rsReport.getString("PIECE_NO"));
                        objRow.setValue("CHARGE_CODE", rsReport.getString("CHARGE_CODE"));
                        objRow.setValue("GROSS_QTY", Double.toString(rsReport.getDouble("GROSS_QTY")));
                        objRow.setValue("BAS_AMT", Double.toString(rsReport.getDouble("BAS_AMT")));
                        objRow.setValue("CGST_AMT", Double.toString(rsReport.getDouble("CGST_AMT")));
                        objRow.setValue("SGST_AMT", Double.toString(rsReport.getDouble("SGST_AMT")));
                        objRow.setValue("IGST_AMT", Double.toString(rsReport.getDouble("IGST_AMT")));
                        objRow.setValue("DISC_AMT", Double.toString(rsReport.getDouble("DISC_AMT")));
                        objRow.setValue("INSURANCE_AMT", Double.toString(rsReport.getDouble("INSURANCE_AMT")));
                        objRow.setValue("NET_AMT", Double.toString(rsReport.getDouble("NET_AMT")));
                        objRow.setValue("INVOICE_AMT", Double.toString(rsReport.getDouble("INVOICE_AMT")));

                        objData.AddRow(objRow);
                        rsReport.next();
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/FeltSales/rptInvoiceSummary.rpt", Parameters, objData);

        }

    }//GEN-LAST:event_cmbinvsmyActionPerformed

    private void cmdinvslp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdinvslp1ActionPerformed
        // TODO add your handling code here:
        String sql;
        if (cmbLot.isVisible()) {
            HashMap Parameters = new HashMap();
            Parameters.put("CURDATE", EITLERPGLOBAL.getCurrentDate());

            TTable objData = new TTable();
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("TRANSPORTER_NAME");
            objData.AddColumn("TRANSPORTER_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("STATION_CODE");
            objData.AddColumn("NET_AMOUNT");
            objData.AddColumn("BALE_NO");
            objData.AddColumn("GROSS_WEIGHT");
            objData.AddColumn("TRANSPORTER_CODE");
            objData.AddColumn("SR_NO");

            try {

                String strSQL = "";
                ResultSet rsReport;

                //Retrieve data
                strSQL = "SELECT INVOICE_NO,INVOICE_DATE,TRANSPORTER_NAME,TRANSPORTER_CODE,PARTY_NAME,STATION_CODE,NET_AMOUNT,BALE_NO,"
                        + "GROSS_WEIGHT,TRANSPORTER_CODE, "
                        + "@i:= IF(TRANSPORTER_CODE = @last_outlet, @i + 1, 1) as SR_NO, @last_outlet := TRANSPORTER_CODE from (SELECT  @i := 0, @last_outlet := NULL) h   "
                        + "JOIN  "
                        + "(SELECT RIGHT(H.INVOICE_NO,4) AS INVOICE_NO,SUBSTRING(H.INVOICE_DATE,1,10) AS INVOICE_DATE,M.DESC AS TRANSPORTER_NAME,H.TRANSPORTER_CODE,P.PARTY_NAME,"
                        + "P.DISPATCH_STATION AS STATION_CODE,H.INVOICE_AMT AS NET_AMOUNT,H.BALE_NO, 0.00 AS GROSS_WEIGHT  "
                        + "FROM DINESHMILLS.D_SAL_PARTY_MASTER P, PRODUCTION.FELT_SAL_INVOICE_HEADER H, DINESHMILLS.D_COM_PARAMETER_MAST M, (SELECT @a:= 0) AS a  "
                        + " WHERE H.PARTY_CODE=P.PARTY_CODE AND P.MAIN_ACCOUNT_CODE=210010 AND H.APPROVED=1 AND H.CANCELLED=0 AND M.PARA_ID='TRANSPORT' AND H.TRANSPORTER_CODE=M.PARA_CODE "
                        + " AND SUBSTRING(H.INVOICE_DATE,1,10)='" + EITLERPGLOBAL.formatDateDB(txtinvdt.getText().trim()) + "' "
                        + " AND H.LOT_NO='" + EITLERPGLOBAL.getComboCode(cmbLot) + "' "
                        + " AND H.COMPANY_ID=M.COMPANY_ID ORDER BY TRANSPORTER_CODE) I ";

                System.out.println(strSQL);
                rsReport = data.getResult(strSQL);
                rsReport.first();

                if (rsReport.getRow() > 0) {

                    while (!rsReport.isAfterLast()) {
                        TRow objRow = new TRow();

                        objRow.setValue("INVOICE_NO", rsReport.getString("INVOICE_NO"));
                        objRow.setValue("INVOICE_DATE", rsReport.getString("INVOICE_DATE"));
                        objRow.setValue("TRANSPORTER_NAME", rsReport.getString("TRANSPORTER_NAME"));
                        objRow.setValue("STATION_CODE", rsReport.getString("STATION_CODE"));
                        objRow.setValue("PARTY_NAME", rsReport.getString("PARTY_NAME"));
                        objRow.setValue("BALE_NO", rsReport.getString("BALE_NO"));
                        objRow.setValue("TRANSPORTER_CODE", Integer.toString(rsReport.getInt("TRANSPORTER_CODE")));
                        objRow.setValue("SR_NO", Integer.toString(rsReport.getInt("SR_NO")));
                        objRow.setValue("NET_AMOUNT", Double.toString(rsReport.getDouble("NET_AMOUNT")));
                        objRow.setValue("GROSS_WEIGHT", Double.toString(rsReport.getDouble("GROSS_WEIGHT")));

                        objData.AddRow(objRow);
                        rsReport.next();
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/FeltSales/rptTransport.rpt", Parameters, objData);

        }
    }//GEN-LAST:event_cmdinvslp1ActionPerformed

    private void cmdexciseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdexciseActionPerformed
        // TODO add your handling code here:
        String sql;
        if (cmbLot.isVisible()) {
            HashMap Parameters = new HashMap();
            Parameters.put("CURDATE", EITLERPGLOBAL.getCurrentDate());

            TTable objData = new TTable();
            objData.AddColumn("INV");
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("GATEPASS_NO");
            objData.AddColumn("BALE_NO");
            objData.AddColumn("SQMTR");
            objData.AddColumn("LENGTH");
            objData.AddColumn("WEIGHT");
            objData.AddColumn("DISC_BAS_AMT");
            objData.AddColumn("CGST_AMT");
            objData.AddColumn("SGST_AMT");
            objData.AddColumn("IGST_AMT");
            objData.AddColumn("CFLAG");

            try {

                String strSQL = "";
                ResultSet rsReport;

                //Retrieve data
//                strSQL = "SELECT 1 AS INV,RIGHT(H.INVOICE_NO,4) AS INVOICE_NO,SUBSTRING(H.INVOICE_DATE,1,10) AS INVOICE_DATE,H.GATEPASS_NO,H.BALE_NO,SUM(D.SQMTR) AS SQMTR,"
//                        + "SUM(D.LENGTH) AS LENGTH,SUM(D.ACTUAL_WEIGHT) AS WEIGHT,H.DISC_BAS_AMT,H.EXCISE,"
//                        + "CASE WHEN H.CANCELLED=1 THEN 'C' ELSE '' END AS CFLAG "
//                        + "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER H,PRODUCTION.FELT_SAL_INVOICE_DETAIL D "
//                        + "WHERE H.INVOICE_NO=D.INVOICE_NO AND SUBSTRING(H.INVOICE_DATE,1,10)=SUBSTRING(D.INVOICE_DATE,1,10) "
//                        //+ "AND H.APPROVED=1 AND CANCELLED=0 "
//                        + "AND (H.APPROVED!=0 OR H.CANCELLED!=0) "
//                        + "AND SUBSTRING(H.INVOICE_DATE,1,10)='"+EITLERPGLOBAL.formatDateDB(txtinvdt.getText().trim())+"' "
//                        + "AND H.LOT_NO='"+EITLERPGLOBAL.getComboCode(cmbLot)+"' "
//                        + " GROUP BY D.INVOICE_NO  ";
//                
                strSQL = "SELECT 1 AS INV,H.INVOICE_NO AS INVOICE_NO,SUBSTRING(H.INVOICE_DATE,1,10) AS INVOICE_DATE,H.GATEPASS_NO,H.BALE_NO,SUM(D.SQMTR) AS SQMTR, "
                        + "SUM(D.LENGTH) AS LENGTH,SUM(D.ACTUAL_WEIGHT) AS WEIGHT,(H.BAS_AMT-H.DISC_AMT+H.CHEM_TRT_CHG+H.SPIRAL_CHG+H.PIN_CHG+H.INSURANCE_AMT) AS DISC_BAS_AMT,H.CGST_AMT,H.SGST_AMT,H.IGST_AMT,"
                        + "CASE WHEN H.CANCELLED=1 THEN 'C' ELSE '' END AS CFLAG "
                        + "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER H,PRODUCTION.FELT_SAL_INVOICE_DETAIL D "
                        + "WHERE H.INVOICE_NO=D.INVOICE_NO AND SUBSTRING(H.INVOICE_DATE,1,10)=SUBSTRING(D.INVOICE_DATE,1,10) "
                        + "AND (H.APPROVED!=0 OR H.CANCELLED!=0) "
                        + "AND SUBSTRING(H.INVOICE_DATE,1,10)='" + EITLERPGLOBAL.formatDateDB(txtinvdt.getText().trim()) + "' "
                        + "AND H.LOT_NO='" + EITLERPGLOBAL.getComboCode(cmbLot) + "' "
                        + "GROUP BY D.INVOICE_NO  "
                        + "UNION ALL "
                        + "SELECT '','T O T A L','',COUNT(DISTINCT H.INVOICE_NO),'',SUM(D.SQMTR) AS TSQMTR,"
                        + "SUM(D.LENGTH) AS TLENGTH,SUM(D.ACTUAL_WEIGHT) AS TWEIGHT,SUM(D.BAS_AMT-D.DISC_AMT+D.CHEM_TRT_CHG+D.SPIRAL_CHG+D.PIN_CHG+D.INSURANCE_AMT) AS TDISCAMT,"
                        + "SUM(D.CGST_AMT) AS TCGST,SUM(D.SGST_AMT) AS TSGST,SUM(D.IGST_AMT) AS TIGST,'' "
                        + "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER H,PRODUCTION.FELT_SAL_INVOICE_DETAIL D "
                        + "WHERE H.INVOICE_NO=D.INVOICE_NO AND SUBSTRING(H.INVOICE_DATE,1,10)=SUBSTRING(D.INVOICE_DATE,1,10) "
                        + "AND H.CANCELLED=0 AND H.APPROVED=1 "
                        + "AND SUBSTRING(H.INVOICE_DATE,1,10)='" + EITLERPGLOBAL.formatDateDB(txtinvdt.getText().trim()) + "' "
                        + "AND H.LOT_NO='" + EITLERPGLOBAL.getComboCode(cmbLot) + "' ";

                System.out.println(strSQL);
                rsReport = data.getResult(strSQL);
                rsReport.first();

                if (rsReport.getRow() > 0) {

                    while (!rsReport.isAfterLast()) {
                        TRow objRow = new TRow();

                        objRow.setValue("INV", Integer.toString(rsReport.getInt("INV")));
                        objRow.setValue("INVOICE_NO", rsReport.getString("INVOICE_NO"));
                        objRow.setValue("INVOICE_DATE", rsReport.getString("INVOICE_DATE"));
                        objRow.setValue("GATEPASS_NO", rsReport.getString("GATEPASS_NO"));
                        objRow.setValue("BALE_NO", rsReport.getString("BALE_NO"));
                        objRow.setValue("SQMTR", Double.toString(rsReport.getDouble("SQMTR")));
                        objRow.setValue("LENGTH", Double.toString(rsReport.getDouble("LENGTH")));
                        objRow.setValue("WEIGHT", Double.toString(rsReport.getDouble("WEIGHT")));
                        objRow.setValue("DISC_BAS_AMT", Double.toString(rsReport.getDouble("DISC_BAS_AMT")));
                        objRow.setValue("CGST_AMT", Double.toString(rsReport.getDouble("CGST_AMT")));
                        objRow.setValue("SGST_AMT", Double.toString(rsReport.getDouble("SGST_AMT")));
                        objRow.setValue("IGST_AMT", Double.toString(rsReport.getDouble("IGST_AMT")));
                        objRow.setValue("CFLAG", rsReport.getString("CFLAG"));

                        objData.AddRow(objRow);
                        rsReport.next();
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/FeltSales/rptExcisePPGST.rpt", Parameters, objData);

        }
    }//GEN-LAST:event_cmdexciseActionPerformed

    private void cmdvatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdvatActionPerformed
        // TODO add your handling code here:
        String sql;
        if (cmbLot.isVisible()) {
            HashMap Parameters = new HashMap();
            Parameters.put("CURDATE", EITLERPGLOBAL.getCurrentDate());

            TTable objData = new TTable();
            objData.AddColumn("CHECK_POST");
            objData.AddColumn("STATION_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("ADDRESS1");
            objData.AddColumn("ADDRESS2");
            objData.AddColumn("CITY_ID");
            objData.AddColumn("DISTRICT");
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("TOTAL_GROSS_QTY");
            objData.AddColumn("PER");
            objData.AddColumn("NET_AMOUNT");
            objData.AddColumn("TIN");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("TRANSPORTER_NAME");

            try {

                String strSQL = "";
                ResultSet rsReport;

                //Retrieve data
                strSQL = "SELECT ' ' AS CHECK_POST,P.DISPATCH_STATION AS STATION_CODE,P.PARTY_NAME,P.ADDRESS1,P.ADDRESS2,P.CITY_ID,"
                        + "P.DISTRICT,RIGHT(H.INVOICE_NO,4) AS INVOICE_NO,SUBSTRING(H.INVOICE_DATE,1,10) AS INVOICE_DATE,"
                        + " SUM(D.ACTUAL_WEIGHT) AS TOTAL_GROSS_QTY, 5 AS PER,H.INVOICE_AMT AS NET_AMOUNT,"
                        + " CASE WHEN LENGTH(P.TIN_NO)>5 THEN P.TIN_NO ELSE '99999999999' END AS TIN,H.PARTY_CODE,M.DESC AS TRANSPORTER_NAME  "
                        + "FROM DINESHMILLS.D_SAL_PARTY_MASTER P, PRODUCTION.FELT_SAL_INVOICE_HEADER H, PRODUCTION.FELT_SAL_INVOICE_DETAIL D, "
                        + "DINESHMILLS.D_COM_PARAMETER_MAST M  "
                        + " WHERE H.PARTY_CODE=P.PARTY_CODE AND H.INVOICE_NO=D.INVOICE_NO AND H.APPROVED=1 AND H.CANCELLED=0 AND P.MAIN_ACCOUNT_CODE=210010 AND H.VAT1>0 "
                        + " AND M.PARA_ID='TRANSPORT' AND H.TRANSPORTER_CODE=M.PARA_CODE AND H.COMPANY_ID=M.COMPANY_ID "
                        + " AND SUBSTRING(H.INVOICE_DATE,1,10)='" + EITLERPGLOBAL.formatDateDB(txtinvdt.getText().trim()) + "' "
                        + " AND H.LOT_NO='" + EITLERPGLOBAL.getComboCode(cmbLot) + "' "
                        + " GROUP BY D.INVOICE_NO"
                        + " ORDER BY H.PARTY_CODE,H.INVOICE_NO";

                System.out.println(strSQL);
                rsReport = data.getResult(strSQL);
                rsReport.first();

                if (rsReport.getRow() > 0) {

                    while (!rsReport.isAfterLast()) {
                        TRow objRow = new TRow();

                        objRow.setValue("INVOICE_DATE", rsReport.getString("INVOICE_DATE"));
                        objRow.setValue("CHECK_POST", rsReport.getString("CHECK_POST"));
                        objRow.setValue("INVOICE_NO", rsReport.getString("INVOICE_NO"));
                        objRow.setValue("STATION_CODE", rsReport.getString("STATION_CODE"));
                        objRow.setValue("PARTY_NAME", rsReport.getString("PARTY_NAME"));
                        objRow.setValue("ADDRESS1", rsReport.getString("ADDRESS1"));
                        objRow.setValue("ADDRESS2", rsReport.getString("ADDRESS2"));
                        objRow.setValue("CITY_ID", rsReport.getString("CITY_ID"));
                        objRow.setValue("DISTRICT", rsReport.getString("DISTRICT"));
                        objRow.setValue("TIN", rsReport.getString("TIN"));
                        objRow.setValue("TRANSPORTER_NAME", rsReport.getString("TRANSPORTER_NAME"));
                        objRow.setValue("PARTY_CODE", rsReport.getString("PARTY_CODE"));
                        objRow.setValue("PER", Double.toString(rsReport.getDouble("PER")));
                        objRow.setValue("NET_AMOUNT", Double.toString(rsReport.getDouble("NET_AMOUNT")));
                        objRow.setValue("TOTAL_GROSS_QTY", Double.toString(rsReport.getDouble("TOTAL_GROSS_QTY")));

                        objData.AddRow(objRow);
                        rsReport.next();
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/FeltSales/rptVat.rpt", Parameters, objData);

        }
    }//GEN-LAST:event_cmdvatActionPerformed

    private void cmdcstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdcstActionPerformed
        // TODO add your handling code here:
        String sql;
        if (cmbLot.isVisible()) {
            HashMap Parameters = new HashMap();
            Parameters.put("CURDATE", EITLERPGLOBAL.getCurrentDate());

            TTable objData = new TTable();
            objData.AddColumn("CHECK_POST");
            objData.AddColumn("STATION_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("ADDRESS1");
            objData.AddColumn("ADDRESS2");
            objData.AddColumn("CITY_ID");
            objData.AddColumn("DISTRICT");
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("TOTAL_GROSS_QTY");
            objData.AddColumn("PER");
            objData.AddColumn("NET_AMOUNT");
            objData.AddColumn("TIN");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("TRANSPORTER_NAME");

            try {

                String strSQL = "";
                ResultSet rsReport;

                //Retrieve data
                strSQL = "SELECT ' ' AS CHECK_POST,P.DISPATCH_STATION AS STATION_CODE,P.PARTY_NAME,P.ADDRESS1,P.ADDRESS2,P.CITY_ID,"
                        + "P.DISTRICT,RIGHT(H.INVOICE_NO,4) AS INVOICE_NO,SUBSTRING(H.INVOICE_DATE,1,10) AS INVOICE_DATE,"
                        + " SUM(D.ACTUAL_WEIGHT) AS TOTAL_GROSS_QTY, CASE WHEN H.CST2>0 THEN 2 ELSE 5 END AS PER,H.INVOICE_AMT AS NET_AMOUNT,"
                        + " CASE WHEN LENGTH(P.TIN_NO)>5 THEN P.TIN_NO ELSE '99999999999' END AS TIN,H.PARTY_CODE,M.DESC AS TRANSPORTER_NAME  "
                        + "FROM DINESHMILLS.D_SAL_PARTY_MASTER P, PRODUCTION.FELT_SAL_INVOICE_HEADER H, PRODUCTION.FELT_SAL_INVOICE_DETAIL D, "
                        + "DINESHMILLS.D_COM_PARAMETER_MAST M  "
                        + " WHERE H.PARTY_CODE=P.PARTY_CODE AND H.INVOICE_NO=D.INVOICE_NO AND H.APPROVED=1 AND H.CANCELLED=0 AND P.MAIN_ACCOUNT_CODE=210010 AND H.VAT1=0 "
                        + " AND M.PARA_ID='TRANSPORT' AND H.TRANSPORTER_CODE=M.PARA_CODE AND H.COMPANY_ID=M.COMPANY_ID "
                        + " AND SUBSTRING(H.INVOICE_DATE,1,10)='" + EITLERPGLOBAL.formatDateDB(txtinvdt.getText().trim()) + "' "
                        + " AND H.LOT_NO='" + EITLERPGLOBAL.getComboCode(cmbLot) + "' "
                        + " GROUP BY D.INVOICE_NO"
                        + " ORDER BY H.PARTY_CODE,H.INVOICE_NO";

                System.out.println(strSQL);
                rsReport = data.getResult(strSQL);
                rsReport.first();

                if (rsReport.getRow() > 0) {

                    while (!rsReport.isAfterLast()) {
                        TRow objRow = new TRow();

                        objRow.setValue("INVOICE_DATE", rsReport.getString("INVOICE_DATE"));
                        objRow.setValue("CHECK_POST", rsReport.getString("CHECK_POST"));
                        objRow.setValue("INVOICE_NO", rsReport.getString("INVOICE_NO"));
                        objRow.setValue("STATION_CODE", rsReport.getString("STATION_CODE"));
                        objRow.setValue("PARTY_NAME", rsReport.getString("PARTY_NAME"));
                        objRow.setValue("ADDRESS1", rsReport.getString("ADDRESS1"));
                        objRow.setValue("ADDRESS2", rsReport.getString("ADDRESS2"));
                        objRow.setValue("CITY_ID", rsReport.getString("CITY_ID"));
                        objRow.setValue("DISTRICT", rsReport.getString("DISTRICT"));
                        objRow.setValue("TIN", rsReport.getString("TIN"));
                        objRow.setValue("TRANSPORTER_NAME", rsReport.getString("TRANSPORTER_NAME"));
                        objRow.setValue("PARTY_CODE", rsReport.getString("PARTY_CODE"));
                        objRow.setValue("PER", Double.toString(rsReport.getDouble("PER")));
                        objRow.setValue("NET_AMOUNT", Double.toString(rsReport.getDouble("NET_AMOUNT")));
                        objRow.setValue("TOTAL_GROSS_QTY", Double.toString(rsReport.getDouble("TOTAL_GROSS_QTY")));

                        objData.AddRow(objRow);
                        rsReport.next();
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/FeltSales/rptCst.rpt", Parameters, objData);

        }
    }//GEN-LAST:event_cmdcstActionPerformed

    private void cmdGSTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGSTActionPerformed
        // TODO add your handling code here:
        String sql;
        if (cmbLot.isVisible()) {
            HashMap Parameters = new HashMap();
            Parameters.put("CURDATE", EITLERPGLOBAL.getCurrentDate());

            TTable objData = new TTable();
            objData.AddColumn("CHECK_POST");
            objData.AddColumn("STATION_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("ADDRESS1");
            objData.AddColumn("ADDRESS2");
            objData.AddColumn("CITY_ID");
            objData.AddColumn("DISTRICT");
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("TOTAL_GROSS_QTY");
            objData.AddColumn("PER");
            objData.AddColumn("NET_AMOUNT");
            objData.AddColumn("TIN");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("TRANSPORTER_NAME");

            try {

                String strSQL = "";
                ResultSet rsReport;

                //Retrieve data
                strSQL = "SELECT ' ' AS CHECK_POST,P.DISPATCH_STATION AS STATION_CODE,P.PARTY_NAME,P.ADDRESS1,P.ADDRESS2,P.CITY_ID,"
                        + "P.DISTRICT,RIGHT(H.INVOICE_NO,4) AS INVOICE_NO,SUBSTRING(H.INVOICE_DATE,1,10) AS INVOICE_DATE,"
                        + " SUM(D.ACTUAL_WEIGHT) AS TOTAL_GROSS_QTY, 12 AS PER,H.INVOICE_AMT AS NET_AMOUNT,"
                        + " CASE WHEN LENGTH(P.TIN_NO)>5 THEN P.TIN_NO ELSE '99999999999' END AS TIN,H.PARTY_CODE,M.DESC AS TRANSPORTER_NAME  "
                        + "FROM DINESHMILLS.D_SAL_PARTY_MASTER P, PRODUCTION.FELT_SAL_INVOICE_HEADER H, PRODUCTION.FELT_SAL_INVOICE_DETAIL D, "
                        + "DINESHMILLS.D_COM_PARAMETER_MAST M  "
                        + " WHERE H.PARTY_CODE=P.PARTY_CODE AND H.INVOICE_NO=D.INVOICE_NO AND H.APPROVED=1 AND H.CANCELLED=0 AND P.MAIN_ACCOUNT_CODE=210010 "
                        + " AND M.PARA_ID='TRANSPORT' AND H.TRANSPORTER_CODE=M.PARA_CODE AND H.COMPANY_ID=M.COMPANY_ID "
                        + " AND SUBSTRING(H.INVOICE_DATE,1,10)='" + EITLERPGLOBAL.formatDateDB(txtinvdt.getText().trim()) + "' "
                        + " AND H.LOT_NO='" + EITLERPGLOBAL.getComboCode(cmbLot) + "' "
                        + " GROUP BY D.INVOICE_NO"
                        + " ORDER BY H.PARTY_CODE,H.INVOICE_NO";

                System.out.println(strSQL);
                rsReport = data.getResult(strSQL);
                rsReport.first();

                if (rsReport.getRow() > 0) {

                    while (!rsReport.isAfterLast()) {
                        TRow objRow = new TRow();

                        objRow.setValue("INVOICE_DATE", rsReport.getString("INVOICE_DATE"));
                        objRow.setValue("CHECK_POST", rsReport.getString("CHECK_POST"));
                        objRow.setValue("INVOICE_NO", rsReport.getString("INVOICE_NO"));
                        objRow.setValue("STATION_CODE", rsReport.getString("STATION_CODE"));
                        objRow.setValue("PARTY_NAME", rsReport.getString("PARTY_NAME"));
                        objRow.setValue("ADDRESS1", rsReport.getString("ADDRESS1"));
                        objRow.setValue("ADDRESS2", rsReport.getString("ADDRESS2"));
                        objRow.setValue("CITY_ID", rsReport.getString("CITY_ID"));
                        objRow.setValue("DISTRICT", rsReport.getString("DISTRICT"));
                        objRow.setValue("TIN", rsReport.getString("TIN"));
                        objRow.setValue("TRANSPORTER_NAME", rsReport.getString("TRANSPORTER_NAME"));
                        objRow.setValue("PARTY_CODE", rsReport.getString("PARTY_CODE"));
                        objRow.setValue("PER", Double.toString(rsReport.getDouble("PER")));
                        objRow.setValue("NET_AMOUNT", Double.toString(rsReport.getDouble("NET_AMOUNT")));
                        objRow.setValue("TOTAL_GROSS_QTY", Double.toString(rsReport.getDouble("TOTAL_GROSS_QTY")));

                        objData.AddRow(objRow);
                        rsReport.next();
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/FeltSales/rptGST.rpt", Parameters, objData);

        }
    }//GEN-LAST:event_cmdGSTActionPerformed

    private void cmbbnksmyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbbnksmyActionPerformed
        // TODO add your handling code here:
        String sql;
        if (cmbLot.isVisible()) {
            HashMap Parameters = new HashMap();
            Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());

            TTable objData = new TTable();
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("INVOICE_AMT");

            try {

                String strSQL = "";
                ResultSet rsReport;

                //Retrieve data
                strSQL = "SELECT H.INVOICE_NO,SUBSTRING(H.INVOICE_DATE,1,10) AS INVOICE_DATE,H.PARTY_CODE,"
                        + "SUBSTRING(P.PARTY_NAME,1,22) AS PARTY_NAME,H.INVOICE_AMT "
                        + "FROM DINESHMILLS.D_SAL_PARTY_MASTER P, PRODUCTION.FELT_SAL_INVOICE_HEADER H "
                        + "WHERE H.PARTY_CODE=P.PARTY_CODE  AND H.APPROVED=1 AND H.CANCELLED=0 AND P.MAIN_ACCOUNT_CODE=210010 "
                        + "AND SUBSTRING(H.INVOICE_DATE,1,10)='" + EITLERPGLOBAL.formatDateDB(txtinvdt.getText().trim()) + "' "
                        + "AND H.LOT_NO='" + EITLERPGLOBAL.getComboCode(cmbLot) + "' "
                        + "ORDER BY H.INVOICE_NO";

                rsReport = data.getResult(strSQL);
                rsReport.first();

                if (rsReport.getRow() > 0) {

                    while (!rsReport.isAfterLast()) {
                        TRow objRow = new TRow();

                        objRow.setValue("INVOICE_NO", rsReport.getString("INVOICE_NO"));
                        objRow.setValue("INVOICE_DATE", rsReport.getString("INVOICE_DATE"));
                        objRow.setValue("PARTY_CODE", rsReport.getString("PARTY_CODE"));
                        objRow.setValue("PARTY_NAME", rsReport.getString("PARTY_NAME"));
                        objRow.setValue("INVOICE_AMT", Double.toString(rsReport.getDouble("INVOICE_AMT")));

                        objData.AddRow(objRow);
                        rsReport.next();
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/FeltSales/rptBankSummary.rpt", Parameters, objData);

        }
    }//GEN-LAST:event_cmbbnksmyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel btn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbLot;
    private javax.swing.JButton cmbbnksmy;
    private javax.swing.JButton cmbinvsmy;
    private javax.swing.JButton cmdGST;
    private javax.swing.JButton cmdcst;
    private javax.swing.JButton cmdexcise;
    private javax.swing.JButton cmdinvslp;
    private javax.swing.JButton cmdinvslp1;
    private javax.swing.JButton cmdvat;
    private javax.swing.ButtonGroup grpSisterConcern;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField txtinvdt;
    // End of variables declaration//GEN-END:variables

    private boolean GenerateCombo() {
        int i = 0;
        try {

            cmbLotModel = new EITLComboModel();
            cmbLot.removeAllItems();
            cmbLot.setModel(cmbLotModel);

            ResultSet rs = data.getResult("SELECT DISTINCT LOT_NO FROM PRODUCTION.FELT_SAL_INVOICE_HEADER WHERE SUBSTRING(INVOICE_DATE,1,10)='" + EITLERPGLOBAL.formatDateDB(txtinvdt.getText().trim()) + "' ORDER BY LOT_NO DESC");
            rs.first();

            while (!rs.isAfterLast()) {
                i++;
                ComboData objData = new ComboData();
                objData.Text = rs.getString("LOT_NO");
                objData.Code = rs.getInt("LOT_NO");
                cmbLotModel.addElement(objData);
                rs.next();
            }
            if (i > 0) {
                return true;
            } else {
                return false;
            }

        } catch (Exception e) {

        }
        return false;
    }

    private void PreviewReport1() {

        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();

//            int amount = data.getIntValueFromDB("SELECT INVOICE_AMT FROM PRODUCTION.FELT_SAL_INVOICE_HEADER WHERE INVOICE_NO='" + InvNo + "' AND SUBSTRING(INVOICE_DATE,1,10)='" + InvDt + "' AND PARTY_CODE='" + PartyCd + "' ");
//            double excise = data.getDoubleValueFromDB("SELECT EXCISE FROM PRODUCTION.FELT_SAL_INVOICE_HEADER WHERE INVOICE_NO='" + InvNo + "' AND SUBSTRING(INVOICE_DATE,1,10)='" + InvDt + "' AND PARTY_CODE='" + PartyCd + "' ");
//            nw = new NumWord();
////            String amt2 = nw.convertNumToWord(amount);
////            String exc = nw.convertNumToWord(excise);
////            //String tdt = EITLERPGLOBAL.formatDate(ToDt);
////
//            parameterMap.put("INV_AMT", amt2);
//            parameterMap.put("EXC_AMT", exc);
            parameterMap.put("INV_AMT", "");
            parameterMap.put("EXC_AMT", "");
            //parameterMap.put("TO_DATE", tdt);

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            String strSQL = "SELECT * FROM ( "
                    + "SELECT M.DESC,H.INVOICE_NO,RIGHT(H.INVOICE_NO,4) AS DRAFT_NO,H.GATEPASS_NO, "
                    + "CASE WHEN TAX_INV_NO IS NULL THEN CONCAT('RETAIL INVOICE : ',RETAIL_INV_NO) ELSE CONCAT('TAX INVOICE : ',TAX_INV_NO) END AS TR_INV_NO, "
                    + "CASE WHEN H.CANCELLED=1 THEN 'CANCELLED INVOICE' ELSE '' END AS CINV, "
                    + "H.INVOICE_TYPE,H.INVOICE_DATE,H.PARTY_CODE,H.BALE_NO,H.PACKING_DATE,P.PARTY_NAME, "
                    + "P.ADDRESS1,P.ADDRESS2,P.PINCODE,P.CITY_ID,P.DISPATCH_STATION,P.CITY_NAME,H.CHARGE_CODE,D.PRODUCT_CODE, "
                    + "H.TRANSPORTER_CODE,H.NO_OF_PIECES,D.PIECE_NO,D.MACHINE_NO,D.POSITION_NO,MD.MM_MACHINE_POSITION_DESC, "
                    + "CONCAT('PM ',D.MACHINE_NO,' ',MD.MM_MACHINE_POSITION_DESC) AS MACHINE_NO_DESC,Q.PRODUCT_DESC, "
                    + "D.SYN_PER,D.LENGTH,D.WIDTH,D.GSM,D.STYLE, "
                    + "CASE WHEN Q.SQM_IND=1 THEN 'MTR' ELSE 'KG' END AS RATE_UNIT, "
                    + "D.RATE,D.SQMTR,D.THORITICAL_WEIGHT,D.ACTUAL_WEIGHT, "
                    + "D.BAS_AMT,H.BAS_AMT AS BASAMT,D.DISC_AMT,D.CHEM_TRT_CHG,D.SPIRAL_CHG,D.PIN_CHG, "
                    + "(D.BAS_AMT-D.DISC_AMT+D.CHEM_TRT_CHG+D.SPIRAL_CHG+D.PIN_CHG) AS AMOUNT,H.EXCISE, "
                    + "CASE WHEN H.CST2>0 THEN 'CST 2%' ELSE (CASE WHEN H.CST5>0 THEN 'CST 5%' ELSE (CASE WHEN H.VAT1>0 THEN 'VAT 5%' END) END) END AS CST_VAT, "
                    + "(H.CST2+H.CST5+H.VAT1+H.VAT4) AS CST_VAT_AMT, "
                    + "CASE WHEN H.SD_AMT>0 THEN 'SD' END AS SD,H.SD_AMT,H.INSURANCE_AMT, "
                    + "H.NET_AMT,H.INVOICE_AMT, "
                    + "P.DOCUMENT_THROUGH,P.ECC_NO,P.INSURANCE_CODE,P.TIN_NO "
                    + "FROM  "
                    + "PRODUCTION.FELT_SAL_INVOICE_HEADER H, "
                    + "PRODUCTION.FELT_SAL_INVOICE_DETAIL D, "
                    + "DINESHMILLS.D_SAL_PARTY_MASTER P, "
                    + "DINESHMILLS.D_COM_PARAMETER_MAST M, "
                    + "PRODUCTION.FELT_MACHINE_MASTER_DETAIL MD, "
                    + "PRODUCTION.FELT_MACHINE_MASTER_HEADER MH, "
                    + "PRODUCTION.FELT_QLT_RATE_MASTER Q "
                    + "WHERE M.PARA_ID='TRANSPORT' "
                    + "AND SUBSTRING(H.INVOICE_DATE,1,10)='" + EITLERPGLOBAL.formatDateDB(txtinvdt.getText().trim()) + "' "
                    + "AND H.LOT_NO='" + EITLERPGLOBAL.getComboCode(cmbLot) + "' "
                    + "AND H.TRANSPORTER_CODE=M.PARA_CODE "
                    + "AND H.INVOICE_NO=D.INVOICE_NO "
                    + "AND P.PARTY_CODE=D.PARTY_CODE "
                    + "AND P.APPROVED=1 AND P.CANCELLED=0 AND P.MAIN_ACCOUNT_CODE=210010 "
                    + "AND D.PARTY_CODE=H.PARTY_CODE "
                    + "AND P.COMPANY_ID=H.COMPANY_ID "
                    + "AND H.COMPANY_ID=M.COMPANY_ID "
                    + "AND SUBSTRING(H.INVOICE_DATE,1,10)=SUBSTRING(D.INVOICE_DATE,1,10) "
                    + "AND MH.MM_DOC_NO=MD.MM_DOC_NO "
                    + "AND MD.MM_PARTY_CODE=D.PARTY_CODE "
                    + "AND MD.MM_MACHINE_NO=D.MACHINE_NO "
                    + "AND MD.MM_MACHINE_POSITION=D.POSITION_NO "
                    + "AND MH.APPROVED=1 "
                    + "AND MH.CANCELED=0 "
                    + "AND Q.PRODUCT_CODE = SUBSTRING(D.PRODUCT_CODE,1,6) "
                    + "AND Q.EFFECTIVE_TO='0000-00-00' "
                    + "AND Q.APPROVED=1 "
                    + "AND Q.CANCELED=0 "
                    + "ORDER BY D.INVOICE_NO "
                    + ") SUB ";

            rpt.setReportName("/EITLERP/FeltSales/FeltInvReport/FeltInvoiceR.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                st.close();
                Conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void PreviewReport() {

        ResultSet rsd = null;
        try {
            String dDetail = "SELECT * FROM PRODUCTION.FELT_SAL_INVOICE_HEADER WHERE SUBSTRING(INVOICE_DATE,1,10)='" + EITLERPGLOBAL.formatDateDB(txtinvdt.getText().trim()) + "' AND LOT_NO='" + EITLERPGLOBAL.getComboCode(cmbLot) + "'";
            rsd = data.getResult(dDetail);

            rsd.first();
            if (rsd.getRow() > 0) {
                while (!rsd.isAfterLast()) {

                    String InvNo = rsd.getString("INVOICE_NO");
                    String InvDt = rsd.getString("INVOICE_DATE").substring(0, 10);
                    String PartyCd = rsd.getString("PARTY_CODE");

                    Connection Conn = null;
                    Statement st = null;
                    ResultSet rs = null;
                    try {
                        Conn = data.getConn();
                        st = Conn.createStatement();

                        HashMap parameterMap = new HashMap();

                        double amount = data.getDoubleValueFromDB("SELECT INVOICE_AMT FROM PRODUCTION.FELT_SAL_INVOICE_HEADER WHERE INVOICE_NO='" + InvNo + "' AND SUBSTRING(INVOICE_DATE,1,10)='" + InvDt + "' AND PARTY_CODE='" + PartyCd + "' ");
                        nw = new NumWord();
                        String amt2 = nw.convertNumToWord(amount);
                        //String tdt = EITLERPGLOBAL.formatDate(ToDt);

                        parameterMap.put("INV_AMT", amt2);
                        //parameterMap.put("TO_DATE", tdt);

                        ReportRegister rpt = new ReportRegister(parameterMap, Conn);

                        String strSQL = "SELECT * FROM ( ";
                        strSQL += "SELECT M.DESC,H.INVOICE_NO,RIGHT(H.INVOICE_NO,4) AS DRAFT_NO,H.GATEPASS_NO, ";
                        strSQL += "CASE WHEN H.CANCELLED=1 THEN 'CANCELLED INVOICE' ELSE '' END AS CINV, ";
                        strSQL += "H.INVOICE_TYPE,H.INVOICE_DATE,H.PARTY_CODE,H.BALE_NO,H.PACKING_DATE,H.CHARGE_CODE,H.HSN_CODE, ";
                        strSQL += "P.PARTY_NAME,P.ADDRESS1,P.ADDRESS2,P.PINCODE,P.CITY_ID,P.DISPATCH_STATION,P.CITY_NAME, ";
                        strSQL += "P.DOCUMENT_THROUGH,P.ECC_NO,P.INSURANCE_CODE,P.TIN_NO,P.STATE_GST_CODE, ";
                        strSQL += "CASE WHEN P.GSTIN_NO IS NULL THEN 'XXXXXXXXXXXXXXX' ELSE CASE WHEN LENGTH(P.GSTIN_NO)!=15 THEN 'XXXXXXXXXXXXXXX' ELSE P.GSTIN_NO END END AS GSTIN_NO, ";
                        strSQL += "D.PRODUCT_CODE,H.TRANSPORTER_CODE,H.NO_OF_PIECES,GROUP_CONCAT(D.PIECE_NO) AS PIECE_NO,D.MACHINE_NO,D.POSITION_NO, ";
//                        strSQL += "MD.MM_MACHINE_POSITION_DESC,CONCAT('PM ',D.MACHINE_NO,' ',MD.MM_MACHINE_POSITION_DESC) AS MACHINE_NO_DESC, ";
                        strSQL += "'' AS MM_MACHINE_POSITION_DESC,CONCAT('PM ',D.MACHINE_NO,' ',MD.POSITION_DESC) AS MACHINE_NO_DESC, ";
                        strSQL += "Q.PRODUCT_DESC,D.SYN_PER,D.LENGTH,D.WIDTH,D.GSM,D.STYLE, ";
                        strSQL += "CASE WHEN Q.SQM_IND=1 THEN 'MTR' ELSE 'KG' END AS RATE_UNIT, ";
                        strSQL += "D.RATE,SUM(D.SQMTR) AS SQMTR,D.THORITICAL_WEIGHT,SUM(D.ACTUAL_WEIGHT) AS ACTUAL_WEIGHT, ";
                        strSQL += "H.BAS_AMT,D.DISC_PER,H.DISC_AMT,H.CHEM_TRT_CHG,H.SPIRAL_CHG,H.PIN_CHG, ";
                        strSQL += "(H.SPIRAL_CHG+H.PIN_CHG) AS CAMT, ";
                        strSQL += "(H.BAS_AMT+H.CHEM_TRT_CHG+H.SPIRAL_CHG+H.PIN_CHG) AS TOTAMT, ";
                        strSQL += "(H.BAS_AMT-H.DISC_AMT+H.CHEM_TRT_CHG+H.SPIRAL_CHG+H.PIN_CHG) AS NETAMT,H.INSURANCE_AMT, ";
                        strSQL += "(H.BAS_AMT-H.DISC_AMT+H.CHEM_TRT_CHG+H.SPIRAL_CHG+H.PIN_CHG+H.INSURANCE_AMT) AS TAXABLE_AMT, ";
                        strSQL += "(H.BAS_AMT-H.DISC_AMT+H.CHEM_TRT_CHG+H.SPIRAL_CHG+H.PIN_CHG+H.INSURANCE_AMT+H.IGST_AMT+H.CGST_AMT+H.SGST_AMT+H.GST_COMP_CESS_AMT) AS TOTAL_AMT, ";
                        strSQL += "H.NET_AMT,H.INVOICE_AMT,H.IGST_PER,H.IGST_AMT,H.CGST_PER,H.CGST_AMT,H.SGST_PER,H.SGST_AMT, ";
                        strSQL += "H.GST_COMP_CESS_PER,H.GST_COMP_CESS_AMT,H.ADV_RECEIVED_AMT,H.ADV_AGN_INV_AMT,H.ADV_AGN_IGST_AMT,H.ADV_AGN_SGST_AMT,H.ADV_AGN_CGST_AMT,H.ADV_AGN_GST_COMP_CESS_AMT, ";
                        strSQL += "H.ADV_DOC_NO,H.VEHICLE_NO, ";
                        strSQL += "(H.BAS_AMT-H.DISC_AMT+H.CHEM_TRT_CHG+H.SPIRAL_CHG+H.PIN_CHG+H.INSURANCE_AMT-H.ADV_RECEIVED_AMT) AS BALANCE, ";
                        strSQL += "(H.INVOICE_AMT-H.ADV_AGN_INV_AMT) AS BALANCE_AGN_INV, ";
                        strSQL += "(H.IGST_AMT-H.ADV_AGN_IGST_AMT) AS BALANCE_AGN_IGST, ";
                        strSQL += "(H.SGST_AMT-H.ADV_AGN_SGST_AMT) AS BALANCE_AGN_SGST, ";
                        strSQL += "(H.CGST_AMT-H.ADV_AGN_CGST_AMT) AS BALANCE_AGN_CGST, ";
                        strSQL += "(H.GST_COMP_CESS_AMT-H.ADV_AGN_GST_COMP_CESS_AMT) AS BALANCE_AGN_GST_COMP_CESS ";
                        strSQL += "FROM  ";
                        strSQL += "PRODUCTION.FELT_SAL_INVOICE_HEADER H, ";
                        strSQL += "PRODUCTION.FELT_SAL_INVOICE_DETAIL D, ";
                        strSQL += "DINESHMILLS.D_SAL_PARTY_MASTER P, ";
                        strSQL += "DINESHMILLS.D_COM_PARAMETER_MAST M, ";
//                        strSQL += "PRODUCTION.FELT_MACHINE_MASTER_DETAIL MD, ";
//                        strSQL += "PRODUCTION.FELT_MACHINE_MASTER_HEADER MH, ";
                        strSQL += "PRODUCTION.FELT_MACHINE_POSITION_MST MD, ";
                        strSQL += "PRODUCTION.FELT_QLT_RATE_MASTER Q ";
                        strSQL += "WHERE D.INVOICE_NO='" + InvNo + "' ";
                        strSQL += "AND SUBSTRING(D.INVOICE_DATE,1,10)='" + InvDt + "' ";
                        strSQL += "AND D.PARTY_CODE='" + PartyCd + "' ";
                        strSQL += "AND M.PARA_ID='TRANSPORT' ";
                        strSQL += "AND H.TRANSPORTER_CODE=M.PARA_CODE ";
                        strSQL += "AND H.INVOICE_NO=D.INVOICE_NO ";
                        strSQL += "AND P.PARTY_CODE=D.PARTY_CODE ";
                        strSQL += "AND D.PARTY_CODE=H.PARTY_CODE ";
                        strSQL += "AND P.COMPANY_ID=H.COMPANY_ID ";
                        strSQL += "AND H.COMPANY_ID=M.COMPANY_ID ";
                        strSQL += "AND (H.APPROVED!=0 OR H.CANCELLED!=0) ";
                        strSQL += "AND SUBSTRING(H.INVOICE_DATE,1,10)=SUBSTRING(D.INVOICE_DATE,1,10) ";
//                        strSQL += "AND MH.MM_DOC_NO=MD.MM_DOC_NO ";
//                        strSQL += "AND MD.MM_PARTY_CODE='" + PartyCd + "' ";
//                        strSQL += "AND MD.MM_MACHINE_NO=D.MACHINE_NO ";
//                        strSQL += "AND MD.MM_MACHINE_POSITION=D.POSITION_NO ";
//                        strSQL += "AND MH.APPROVED=1 ";
//                        strSQL += "AND MH.CANCELED=0 ";
                        strSQL += "AND MD.POSITION_NO=D.POSITION_NO ";
                        strSQL += "AND Q.PRODUCT_CODE = SUBSTRING(D.PRODUCT_CODE,1,6) ";
                        strSQL += "AND Q.EFFECTIVE_TO='0000-00-00' ";
                        strSQL += "AND Q.APPROVED=1 ";
                        strSQL += "AND Q.CANCELED=0 ";
                        strSQL += "GROUP BY D.INVOICE_NO ";
                        strSQL += ") SUB";

//                        rpt.setReportName("/EITLERP/FeltSales/FeltInvReport/FeltInvoice.jrxml", 1, strSQL); //productlist is the name of my jasper file.
                        rpt.setReportName("/EITLERP/FeltSales/FeltInvReport/FeltInvGST.jrxml", 1, strSQL); //productlist is the name of my jasper file.
                        rpt.callReport();

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    rsd.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

//        String InvNo = txtInvoiceNo.getText();
//        String InvDt = EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText());
//        String PartyCd = txtPartyCode.getText();
//
//        Connection Conn = null;
//        Statement st = null;
//        ResultSet rs = null;
//        try {
//            Conn = data.getConn();
//            st = Conn.createStatement();
//
//            HashMap parameterMap = new HashMap();
//
//            int amount = data.getIntValueFromDB("SELECT INVOICE_AMT FROM PRODUCTION.FELT_SAL_INVOICE_HEADER WHERE INVOICE_NO='" + InvNo + "' AND SUBSTRING(INVOICE_DATE,1,10)='" + InvDt + "' AND PARTY_CODE='" + PartyCd + "' ");
//            double excise = data.getDoubleValueFromDB("SELECT EXCISE FROM PRODUCTION.FELT_SAL_INVOICE_HEADER WHERE INVOICE_NO='" + InvNo + "' AND SUBSTRING(INVOICE_DATE,1,10)='" + InvDt + "' AND PARTY_CODE='" + PartyCd + "' ");
//            nw = new NumWord();
//            String amt2 = nw.convertNumToWord(amount);
//            String exc = nw.convertNumToWord(excise);
//            //String tdt = EITLERPGLOBAL.formatDate(ToDt);
//
//            parameterMap.put("INV_AMT", amt2);
//            parameterMap.put("EXC_AMT", exc);
//            //parameterMap.put("TO_DATE", tdt);
//
//            ReportRegister rpt = new ReportRegister(parameterMap, Conn);
//            
//            String strSQL = "SELECT * FROM ( ";
//            strSQL += "SELECT M.DESC,H.INVOICE_NO,RIGHT(H.INVOICE_NO,4) AS DRAFT_NO,H.GATEPASS_NO, ";
//            strSQL += "CASE WHEN TAX_INV_NO IS NULL THEN CONCAT('RETAIL INVOICE : ',RETAIL_INV_NO) ELSE CONCAT('TAX INVOICE : ',TAX_INV_NO) END AS TR_INV_NO, ";
//            strSQL += "H.INVOICE_TYPE,H.INVOICE_DATE,H.PARTY_CODE,H.BALE_NO,H.PACKING_DATE,P.PARTY_NAME, ";
//            strSQL += "P.ADDRESS1,P.ADDRESS2,P.PINCODE,P.CITY_ID,P.DISPATCH_STATION,P.CITY_NAME,H.CHARGE_CODE,D.PRODUCT_CODE, ";
//            strSQL += "H.TRANSPORTER_CODE,H.NO_OF_PIECES,D.PIECE_NO,D.MACHINE_NO,D.POSITION_NO,MD.MM_MACHINE_POSITION_DESC, ";
//            strSQL += "CONCAT('PM ',D.MACHINE_NO,' ',MD.MM_MACHINE_POSITION_DESC) AS MACHINE_NO_DESC,Q.PRODUCT_DESC, ";
//            strSQL += "D.SYN_PER,D.LENGTH,D.WIDTH,D.GSM,D.STYLE, ";
//            strSQL += "CASE WHEN Q.SQM_IND=1 THEN 'MTR' ELSE 'KG' END AS RATE_UNIT, ";
//            strSQL += "D.RATE,D.SQMTR,D.THORITICAL_WEIGHT,D.ACTUAL_WEIGHT, ";
//            strSQL += "D.BAS_AMT,D.DISC_AMT,D.CHEM_TRT_CHG,D.SPIRAL_CHG,D.PIN_CHG, ";
//            strSQL += "(D.BAS_AMT-D.DISC_AMT+D.CHEM_TRT_CHG+D.SPIRAL_CHG+D.PIN_CHG) AS AMOUNT,H.EXCISE, ";
//            strSQL += "CASE WHEN H.CST2>0 THEN 'CST 2%' ELSE (CASE WHEN H.CST5>0 THEN 'CST 5%' ELSE (CASE WHEN H.VAT1>0 THEN 'VAT 5%' END) END) END AS CST_VAT, ";
//            strSQL += "(H.CST2+H.CST5+H.VAT1+H.VAT4) AS CST_VAT_AMT, ";
//            strSQL += "CASE WHEN H.SD_AMT>0 THEN 'SD' END AS SD,H.SD_AMT,H.INSURANCE_AMT, ";
//            strSQL += "H.NET_AMT,H.INVOICE_AMT, ";
//            strSQL += "P.DOCUMENT_THROUGH,P.ECC_NO,P.INSURANCE_CODE,P.TIN_NO ";
//            strSQL += "FROM  ";
//            strSQL += "PRODUCTION.FELT_SAL_INVOICE_HEADER H, ";
//            strSQL += "PRODUCTION.FELT_SAL_INVOICE_DETAIL D, ";
//            strSQL += "DINESHMILLS.D_SAL_PARTY_MASTER P, ";
//            strSQL += "DINESHMILLS.D_COM_PARAMETER_MAST M, ";
//            strSQL += "PRODUCTION.FELT_MACHINE_MASTER_DETAIL MD, ";
//            strSQL += "PRODUCTION.FELT_MACHINE_MASTER_HEADER MH, ";
//            strSQL += "PRODUCTION.FELT_QLT_RATE_MASTER Q ";
//            strSQL += "WHERE D.INVOICE_NO='" + InvNo + "' ";
//            strSQL += "AND SUBSTRING(D.INVOICE_DATE,1,10)='" + InvDt + "' ";
//            strSQL += "AND D.PARTY_CODE='" + PartyCd + "' ";
//            strSQL += "AND M.PARA_ID='TRANSPORT' ";
//            strSQL += "AND H.TRANSPORTER_CODE=M.PARA_CODE ";
//            strSQL += "AND H.INVOICE_NO=D.INVOICE_NO ";
//            strSQL += "AND P.PARTY_CODE=D.PARTY_CODE ";
//            strSQL += "AND D.PARTY_CODE=H.PARTY_CODE ";
//            strSQL += "AND P.COMPANY_ID=H.COMPANY_ID ";
//            strSQL += "AND H.COMPANY_ID=M.COMPANY_ID ";
//            strSQL += "AND SUBSTRING(H.INVOICE_DATE,1,10)=SUBSTRING(D.INVOICE_DATE,1,10) ";
//            strSQL += "AND MH.MM_DOC_NO=MD.MM_DOC_NO ";
//            strSQL += "AND MD.MM_PARTY_CODE='" + PartyCd + "' ";
//            strSQL += "AND MD.MM_MACHINE_NO=D.MACHINE_NO ";
//            strSQL += "AND MD.MM_MACHINE_POSITION=D.POSITION_NO ";
//            strSQL += "AND MH.APPROVED=1 ";
//            strSQL += "AND MH.CANCELED=0 ";
//            strSQL += "AND Q.PRODUCT_CODE = SUBSTRING(D.PRODUCT_CODE,1,6) ";
//            strSQL += "AND Q.EFFECTIVE_TO='0000-00-00' ";
//            strSQL += "AND Q.APPROVED=1 ";
//            strSQL += "AND Q.CANCELED=0 ";
//            strSQL += ") SUB";
//            
//            rpt.setReportName("/EITLERP/FeltSales/FeltInvReport/FeltInvoice.jrxml", 1, strSQL); //productlist is the name of my jasper file.
//            rpt.callReport();
//
//        } catch (Exception e) {
//            e.printStackTrace();
//        } finally {
//            try {
//                st.close();
//                Conn.close();
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
//        }
    }

}
