/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.FeltInvReport;

import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.Perfomainvoice.clsProforma;
import EITLERP.Finance.FinanceGlobal;
import EITLERP.Finance.UtilFunctions;
import EITLERP.Finance.clsPartyMaster;
import EITLERP.Finance.clsVoucher;
import EITLERP.Sales.clsSalesInvoice;
import EITLERP.data;
import EITLERP.*;
//import TReportWriter.TReportEngine;
import TReportWriter.*;
import TReportWriter.SimpleDataProvider.*;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.HashMap;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;

/**
 *
 * @author root
 */
public class frmFeltInvPro extends javax.swing.JApplet {

    private TReportEngine objEngine = new TReportEngine();
    public String S = "";
    public int Flag = 0;
    private EITLTableModel DataModel;
    private EITLERP.FeltSales.common.FeltInvCalc inv_calculation;

    public static String gUserName = "";
    private String InvFromDateDB = "";
    private String InvToDateDB = "";

    /**
     * Initializes the applet frmFeltInvPro
     */
    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(frmFeltInvPro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(frmFeltInvPro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(frmFeltInvPro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(frmFeltInvPro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        /* Create and display the applet */
//        try {
//            java.awt.EventQueue.invokeAndWait(new Runnable() {
//                public void run() {
//                    initComponents();
//                }
//            });
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
        setSize(1000, 600);
        initComponents();
        lblTitle.setForeground(Color.WHITE);
        rbtnText.setVisible(false);
        jPanel1.setVisible(false);
        jPanel2.setVisible(true);
        Bar.setVisible(false);
        lblStatus.setVisible(false);
        InvFinYear();
//        btnProcess.setVisible(false);
//        btnProcessJSP.setVisible(false);
        getDept();

        if (rbtnSelect.isSelected()) {
            FormatGrid();
            GenerateData();
        }

    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        lblTitle = new javax.swing.JLabel();
        rbtnText = new javax.swing.JRadioButton();
        rbtnSelect = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtManual = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        btnOutAmt = new javax.swing.JButton();
        btnAdvAmt = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnProcess = new javax.swing.JButton();
        btnInvVal = new javax.swing.JButton();
        Bar = new javax.swing.JProgressBar();
        lblStatus = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        PARTY_CODE = new javax.swing.JTextField();
        rbtnClubbing = new javax.swing.JRadioButton();

        getContentPane().setLayout(null);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("FELT INVOICE PROCESS FORM");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 2, 980, 25);

        buttonGroup1.add(rbtnText);
        rbtnText.setText("Manual Entry");
        rbtnText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbtnTextMouseClicked(evt);
            }
        });
        getContentPane().add(rbtnText);
        rbtnText.setBounds(10, 60, 160, 23);

        buttonGroup1.add(rbtnSelect);
        rbtnSelect.setSelected(true);
        rbtnSelect.setText("Selection Entry");
        rbtnSelect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbtnSelectMouseClicked(evt);
            }
        });
        getContentPane().add(rbtnSelect);
        rbtnSelect.setBounds(190, 30, 160, 23);

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        jLabel1.setText("Select Bale No Entry Type :");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 30, 200, 20);

        jPanel1.setLayout(null);

        txtManual.setColumns(20);
        txtManual.setRows(5);
        txtManual.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtManualKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtManualKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtManualKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(txtManual);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(0, 0, 640, 100);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(10, 90, 640, 100);

        jPanel2.setLayout(null);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(0, 0, 970, 380);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(10, 90, 970, 390);

        btnOutAmt.setText("CHECK OUTSTANDING AMT");
        btnOutAmt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutAmtActionPerformed(evt);
            }
        });
        getContentPane().add(btnOutAmt);
        btnOutAmt.setBounds(20, 490, 210, 25);

        btnAdvAmt.setText("CHECK 09 ADVANCE AMT");
        btnAdvAmt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdvAmtActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdvAmt);
        btnAdvAmt.setBounds(20, 530, 210, 25);

        jLabel2.setText("(with Critical Limit)");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(240, 490, 150, 30);

        btnProcess.setText("PROCESS");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });
        getContentPane().add(btnProcess);
        btnProcess.setBounds(830, 530, 100, 25);

        btnInvVal.setText("INVOICE VALUE");
        btnInvVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInvValActionPerformed(evt);
            }
        });
        getContentPane().add(btnInvVal);
        btnInvVal.setBounds(780, 490, 190, 25);

        Bar.setStringPainted(true);
        getContentPane().add(Bar);
        Bar.setBounds(420, 530, 190, 20);

        lblStatus.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblStatus.setText("-");
        getContentPane().add(lblStatus);
        lblStatus.setBounds(420, 510, 190, 15);

        jLabel9.setText("Party Code :");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(360, 30, 100, 20);

        PARTY_CODE.setToolTipText("Press F1 key for search Party Code");
        PARTY_CODE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PARTY_CODEFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                PARTY_CODEFocusLost(evt);
            }
        });
        PARTY_CODE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PARTY_CODEKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PARTY_CODEKeyPressed(evt);
            }
        });
        getContentPane().add(PARTY_CODE);
        PARTY_CODE.setBounds(450, 30, 100, 19);

        buttonGroup1.add(rbtnClubbing);
        rbtnClubbing.setText("Piece Clubbing");
        rbtnClubbing.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbtnClubbingMouseClicked(evt);
            }
        });
        getContentPane().add(rbtnClubbing);
        rbtnClubbing.setBounds(190, 60, 160, 23);
    }// </editor-fold>//GEN-END:initComponents

    private void rbtnTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbtnTextMouseClicked
        // TODO add your handling code here:
        jPanel1.setVisible(true);
        jPanel2.setVisible(false);
    }//GEN-LAST:event_rbtnTextMouseClicked

    private void rbtnSelectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbtnSelectMouseClicked
        // TODO add your handling code here:
        jPanel1.setVisible(false);
        jPanel2.setVisible(true);
        FormatGrid();
        GenerateData();
    }//GEN-LAST:event_rbtnSelectMouseClicked

    private void btnOutAmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutAmtActionPerformed
        // TODO add your handling code here:
//        createFile();
//
//        data.Execute("TRUNCATE TEMP_DATABASE.TEMP_OUTSTANDING_REPORT");
//
//        if (rbtnText.isSelected()) {
//            String S = txtManual.getText().trim();
//
//            String[] bno = S.split(",");
//
//            for (int i = 0; i < bno.length; i++) {
//                bno[i] = bno[i].replaceAll("[^\\w]", ",");
//                System.out.println("String Bno : " + bno[i]);
//                String PartyCode = "SELECT PKG_PARTY_CODE FROM  PRODUCTION.FELT_PKG_SLIP_HEADER WHERE PKG_BALE_NO='" + bno[i] + "'  AND APPROVED=1 AND CANCELED=0 AND PKG_BALE_NO IS NOT NULL AND PKG_BALE_NO!=''";
//                String FromSubCode = data.getStringValueFromDB(PartyCode);
//                data.Execute("INSERT INTO TEMP_DATABASE.TEMP_OUTSTANDING_REPORT (MAIN_PARTY_CODE,SUB_PARTY_CODE,SUB_OUTSTANDING_BAL) SELECT MAIN_PARTY_CODE,SUB_PARTY_CODE,SUB_OUTSTANDING_BAL FROM TEMP_DATABASE.TEMP_OUTSTANDING_AMT WHERE SUB_PARTY_CODE='" + FromSubCode + "' ");
//            }
//        }
//
//        if (rbtnSelect.isSelected()) {
//            System.out.println("ding");
//            int cnt = 0;
//            for (int j = 0; j < Table.getRowCount(); j++) {
//                //System.out.println("ROW : "+Table.getSelectedRow()+" : Boolean : "+Table.getValueAt(j, 0)+" : col 2 : "+Table.getValueAt(j, 1));
//
//                if (Table.getValueAt(j, 0).equals(true)) {
//                    data.Execute("INSERT INTO TEMP_DATABASE.TEMP_OUTSTANDING_REPORT (MAIN_PARTY_CODE,SUB_PARTY_CODE,SUB_OUTSTANDING_BAL) SELECT MAIN_PARTY_CODE,SUB_PARTY_CODE,SUB_OUTSTANDING_BAL FROM TEMP_DATABASE.TEMP_OUTSTANDING_AMT WHERE SUB_PARTY_CODE='" + Table.getValueAt(j, 3) + "' ");
//                }
//            }
//        }
//
//        OutstandingReport();

        String AsOnDate = EITLERPGLOBAL.getCurrentDateDB();
        String MainCode = "210010";
        int cnt = 0;

        data.Execute("TRUNCATE TEMP_DATABASE.TEMP_OUTSTANDING_AMT");
        data.Execute("TRUNCATE TEMP_DATABASE.TEMP_OUTSTANDING_REPORT");

        if (rbtnText.isSelected()) {
            String S = txtManual.getText().trim();
            if (S.equalsIgnoreCase("")) {
                JOptionPane.showMessageDialog(null, "Field is EMPTY");
                cnt = 0;
            } else {

                String[] bno = S.split(",");

                for (int i = 0; i < bno.length; i++) {
                    cnt++;
                    bno[i] = bno[i].replaceAll("[^\\w]", ",");
                    System.out.println("String Bno : " + bno[i]);
                    String PartyCode = "SELECT PKG_PARTY_CODE FROM  PRODUCTION.FELT_PKG_SLIP_HEADER WHERE PKG_BALE_NO='" + bno[i] + "'  AND APPROVED=1 AND CANCELED=0 AND PKG_BALE_NO IS NOT NULL AND PKG_BALE_NO!='' ORDER BY PKG_BALE_DATE DESC";
                    String SubPartyCode = data.getStringValueFromDB(PartyCode);
                    data.Execute("INSERT INTO TEMP_DATABASE.TEMP_OUTSTANDING_AMT (SUB_PARTY_CODE) VALUES ('" + SubPartyCode + "')");
                }

            }
        }

        if (rbtnSelect.isSelected() || rbtnClubbing.isSelected()) {
            System.out.println("ding");
            for (int j = 0; j < Table.getRowCount(); j++) {
                //System.out.println("ROW : "+Table.getSelectedRow()+" : Boolean : "+Table.getValueAt(j, 0)+" : col 2 : "+Table.getValueAt(j, 1));

                if (Table.getValueAt(j, 0).equals(true)) {
                    cnt++;
                }
            }

            if (cnt == 0) {
                JOptionPane.showMessageDialog(null, "Please Select any BALE.");
            } else {

//                for (int j = 0; j < Table.getRowCount(); j++) {
//                    //System.out.println("ROW : "+Table.getSelectedRow()+" : Boolean : "+Table.getValueAt(j, 0)+" : col 2 : "+Table.getValueAt(j, 1));
//
//                    if (Table.getValueAt(j, 0).equals(true) && !Table.getValueAt(j, 5).equals("09")) {
//
////                        String GroupParty = "SELECT GROUP_MAIN_PARTY FROM FINANCE.D_FIN_PARTY_GROUPING_DETAIL WHERE INVOICE_TYPE=2 AND GROUP_SUB_PARTY = '" + Table.getValueAt(j, 3) + "'";
////                        String GroupMainParty = data.getStringValueFromDB(GroupParty);
////                        data.Execute("INSERT INTO TEMP_DATABASE.TEMP_OUTSTANDING_AMT (MAIN_PARTY_CODE,SUB_PARTY_CODE) VALUES ('" + GroupMainParty + "','" + Table.getValueAt(j, 3) + "')");
//                        data.Execute("INSERT INTO TEMP_DATABASE.TEMP_OUTSTANDING_AMT (SUB_PARTY_CODE) VALUES ('" + Table.getValueAt(j, 3) + "')");
//                    }
//                }
////                data.Execute("UPDATE TEMP_DATABASE.TEMP_OUTSTANDING_AMT SET MAIN_PARTY_CODE = SUB_PARTY_CODE WHERE MAIN_PARTY_CODE=''");
//                data.Execute("UPDATE TEMP_DATABASE.TEMP_OUTSTANDING_AMT SET MAIN_PARTY_CODE=CASE WHEN LENGTH(MAIN_PARTY_CODE)>0 THEN MAIN_PARTY_CODE ELSE SUB_PARTY_CODE END");
//                data.Execute("INSERT INTO TEMP_DATABASE.TEMP_OUTSTANDING_REPORT (MAIN_PARTY_CODE) SELECT DISTINCT MAIN_PARTY_CODE FROM TEMP_DATABASE.TEMP_OUTSTANDING_AMT");
                for (int j = 0; j < Table.getRowCount(); j++) {
                    //System.out.println("ROW : "+Table.getSelectedRow()+" : Boolean : "+Table.getValueAt(j, 0)+" : col 2 : "+Table.getValueAt(j, 1));

                    if (Table.getValueAt(j, 0).equals(true) && !Table.getValueAt(j, 5).equals("09")) {
                        String GroupMainCode = data.getStringValueFromDB("SELECT H.GROUP_CODE FROM PRODUCTION.FELT_GROUP_MASTER_DETAIL D,PRODUCTION.FELT_GROUP_MASTER_HEADER H WHERE D.GROUP_CODE=H.GROUP_CODE AND D.PARTY_CODE = '" + Table.getValueAt(j, 3) + "' AND H.APPROVED=1 AND H.CANCELED=0 ");
//                    data.Execute("INSERT INTO TEMP_DATABASE.TEMP_OUTSTANDING_AMT (MAIN_PARTY_CODE,SUB_PARTY_CODE) VALUES ('" + GroupMainParty + "','" + Table.getValueAt(j, 3) + "')");
                        data.Execute("INSERT INTO TEMP_DATABASE.TEMP_OUTSTANDING_AMT (SUB_PARTY_CODE,MAIN_GROUP_CODE) VALUES ('" + Table.getValueAt(j, 3) + "','" + GroupMainCode + "')");
                    }
                }
//                data.Execute("UPDATE TEMP_DATABASE.TEMP_OUTSTANDING_AMT SET MAIN_PARTY_CODE = SUB_PARTY_CODE WHERE MAIN_PARTY_CODE=''");
                data.Execute("UPDATE TEMP_DATABASE.TEMP_OUTSTANDING_AMT SET MAIN_PARTY_CODE=CASE WHEN LENGTH(MAIN_PARTY_CODE)>0 THEN MAIN_PARTY_CODE ELSE SUB_PARTY_CODE END");
                data.Execute("INSERT INTO TEMP_DATABASE.TEMP_OUTSTANDING_REPORT (MAIN_PARTY_CODE,MAIN_GROUP_CODE) SELECT DISTINCT MAIN_PARTY_CODE,MAIN_GROUP_CODE FROM TEMP_DATABASE.TEMP_OUTSTANDING_AMT");

            }

        }

        if (cnt > 0) {
            createFile1();
            createFile2();
            OutstandingReport();
        }
    }//GEN-LAST:event_btnOutAmtActionPerformed

    private void txtManualKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtManualKeyTyped
        // TODO add your handling code here:
//        S=txtManual.getText().trim();
//        //System.out.println("INSERT S "+S);
//        if(evt.getKeyChar()>=48 && evt.getKeyChar()<=57 || evt.getKeyChar()==44) {
//            System.out.println("KEY PRESS : "+evt.getKeyChar());
//            //S=txtManual.getText().trim();
//        }
//        else if(evt.getKeyChar()==10) {
//            //JOptionPane.showMessageDialog(null, "INVALID KEY PRESS");
//            txtManual.setText(txtManual.getText().trim());
//            txtManual.requestFocus();
//        }
//        else {            
////            System.out.println("ELSE INSERT S "+S);
////            txtManual.setText(S);
////            txtManual.requestFocus();
//            //JOptionPane.showMessageDialog(null, "INVALID KEY PRESS");
//            System.out.println("ELSE KEY PRESS : "+evt.getKeyChar());
//            
//            Flag=1;
//                    
//        }
//        

//        String S=txtManual.getText().trim();
//        
//        String[] bno=S.split(",");
//        
//        for(int i=0;i<bno.length;i++){
//            bno[i]=bno[i].replaceAll("[^\\w]", ",");
//            System.out.println("String Bno : "+bno[i]);
//        }
    }//GEN-LAST:event_txtManualKeyTyped

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        // TODO add your handling code here:
        int conf = JOptionPane.showConfirmDialog(this, "Please confirm for process.");
        if (conf == 0) {
            gUserName = clsUser.getUserName(2, EITLERPGLOBAL.gUserID);
            btnProcess.setVisible(false);
            InvProcess();
        } else {
            btnProcess.setVisible(false);
            JOptionPane.showMessageDialog(this, "Process not confirm.");
        }
    }//GEN-LAST:event_btnProcessActionPerformed

    private void btnAdvAmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdvAmtActionPerformed
        // TODO add your handling code here:
        //createFile();
        //advReceiptSummary(txtMainAccountCode.getText().trim(),txtFromSubAccountCode.getText().trim(),EITLERPGLOBAL.getCurrentDateDB());

        String AsOnDate = EITLERPGLOBAL.getCurrentDateDB();
        String MainCode = "210010";
        int cnt = 0;

        data.Execute("TRUNCATE TEMP_DATABASE.TEMP_ADV_AMT");

        if (rbtnText.isSelected()) {
            String S = txtManual.getText().trim();

            if (S.equalsIgnoreCase("")) {
                JOptionPane.showMessageDialog(null, "Field is EMPTY");
                cnt = 0;
            } else {

                String[] bno = S.split(",");

                for (int i = 0; i < bno.length; i++) {
                    cnt++;
                    bno[i] = bno[i].replaceAll("[^\\w]", ",");
                    System.out.println("String Bno : " + bno[i]);
                    String PartyCode = "SELECT PKG_PARTY_CODE FROM  PRODUCTION.FELT_PKG_SLIP_HEADER WHERE PKG_BALE_NO='" + bno[i] + "'  AND APPROVED=1 AND CANCELED=0 AND PKG_BALE_NO IS NOT NULL AND PKG_BALE_NO!='' ORDER BY PKG_BALE_DATE DESC";
                    String FromSubCode = data.getStringValueFromDB(PartyCode);
                    data.Execute("INSERT INTO TEMP_DATABASE.TEMP_ADV_AMT (SUB_PARTY_CODE,SUB_ADV_BAL) SELECT B.SUB_ACCOUNT_CODE, SUM(B.AMOUNT) AS AMOUNT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND A.VOUCHER_DATE<='" + AsOnDate + "' AND A.VOUCHER_TYPE IN (6,7,8,9,12) AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE = '" + FromSubCode + "' "
                            + "AND A.APPROVED=1 AND A.CANCELLED=0 AND A.EXCLUDE_IN_ADJ =0 AND B.EFFECT='C' AND B.INVOICE_NO ='' AND B.MODULE_ID <>65 "
                            + "AND B.GRN_NO ='' AND (B.MATCHED=0 OR B.MATCHED IS NULL) "
                            + "GROUP BY B.SUB_ACCOUNT_CODE "
                            + "ORDER BY B.SUB_ACCOUNT_CODE");
                }

            }
        }

        if (rbtnSelect.isSelected() || rbtnClubbing.isSelected()) {
            System.out.println("ding");
            for (int j = 0; j < Table.getRowCount(); j++) {
                //System.out.println("ROW : "+Table.getSelectedRow()+" : Boolean : "+Table.getValueAt(j, 0)+" : col 2 : "+Table.getValueAt(j, 1));

                if (Table.getValueAt(j, 0).equals(true)) {
                    cnt++;
                }
            }

            if (cnt == 0) {
                JOptionPane.showMessageDialog(null, "Please Select any BALE.");
            } else {

                for (int j = 0; j < Table.getRowCount(); j++) {
                    //System.out.println("ROW : "+Table.getSelectedRow()+" : Boolean : "+Table.getValueAt(j, 0)+" : col 2 : "+Table.getValueAt(j, 1));

                    if (Table.getValueAt(j, 0).equals(true) && Table.getValueAt(j, 5).equals("09")) {
//                    cnt++;
//                        data.Execute("INSERT INTO TEMP_DATABASE.TEMP_ADV_AMT (SUB_PARTY_CODE,SUB_ADV_BAL) SELECT B.SUB_ACCOUNT_CODE, SUM(B.AMOUNT) AS AMOUNT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
//                                + "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND A.VOUCHER_DATE<='" + AsOnDate + "' AND A.VOUCHER_TYPE IN (6,7,8,9) AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE = '" + Table.getValueAt(j, 3) + "' "
//                                + "AND A.APPROVED=1 AND A.CANCELLED=0 AND A.EXCLUDE_IN_ADJ =0 AND B.EFFECT='C' AND B.INVOICE_NO ='' AND B.MODULE_ID <>65 "
//                                + "AND B.GRN_NO ='' AND (B.MATCHED=0 OR B.MATCHED IS NULL) "
//                                + "GROUP BY B.SUB_ACCOUNT_CODE "
//                                + "ORDER BY B.SUB_ACCOUNT_CODE");
//                    System.out.println("COUNT : "+cnt);

                        data.Execute("INSERT INTO TEMP_DATABASE.TEMP_ADV_AMT (SUB_PARTY_CODE,SUB_ADV_BAL) VALUES ('" + Table.getValueAt(j, 3) + "',0)");
                        double amtadv = data.getDoubleValueFromDB("SELECT SUM(B.AMOUNT) AS AMOUNT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                                + "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND A.VOUCHER_DATE<='" + AsOnDate + "' AND A.VOUCHER_TYPE IN (6,7,8,9,12) AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE = '" + Table.getValueAt(j, 3) + "' "
                                + "AND A.APPROVED=1 AND A.CANCELLED=0 AND A.EXCLUDE_IN_ADJ =0 AND B.EFFECT='C' AND B.INVOICE_NO ='' AND B.MODULE_ID <>65 "
                                + "AND B.GRN_NO ='' AND (B.MATCHED=0 OR B.MATCHED IS NULL) "
                                + "GROUP BY B.SUB_ACCOUNT_CODE "
                                + "ORDER BY B.SUB_ACCOUNT_CODE");
                        data.Execute("UPDATE TEMP_DATABASE.TEMP_ADV_AMT SET SUB_ADV_BAL='" + amtadv + "' WHERE SUB_PARTY_CODE='" + Table.getValueAt(j, 3) + "'");
                    }
                }

            }
        }

        if (cnt > 0) {
            advReceiptSummary("210010", EITLERPGLOBAL.getCurrentDateDB());
        }

    }//GEN-LAST:event_btnAdvAmtActionPerformed

    private void txtManualKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtManualKeyReleased
        // TODO add your handling code here:
//        S=txtManual.getText().trim();
//        System.out.println("RRRRR INSERT S "+S);
        if (evt.getKeyChar() >= 48 && evt.getKeyChar() <= 57 || evt.getKeyChar() == 44 || evt.getKeyChar() == 8) {
            //System.out.println("RRR  KEY PRESS : "+evt.getKeyChar());
            //S=txtManual.getText().trim();
        } else if (evt.getKeyChar() == 10) {
            JOptionPane.showMessageDialog(null, "INVALID KEY PRESS");
            txtManual.setText(txtManual.getText().trim());
            txtManual.requestFocus();
        } else {
            JOptionPane.showMessageDialog(null, "INVALID KEY PRESS");
            //System.out.println("RRR ELSE KEY PRESS : "+evt.getKeyChar());
            //System.out.println("RRRR ABCDE ELSE S "+S);
            txtManual.setText(S);
        }
    }//GEN-LAST:event_txtManualKeyReleased

    private void txtManualKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtManualKeyPressed
        // TODO add your handling code here:
        S = txtManual.getText().trim();
        //System.out.println("INSERT S "+S);
        if (evt.getKeyChar() >= 48 && evt.getKeyChar() <= 57 || evt.getKeyChar() == 44 || evt.getKeyChar() == 8) {
            System.out.println("ABCDE KEY PRESS : " + evt.getKeyChar());
            //S=txtManual.getText().trim();
        } else if (evt.getKeyChar() == 10) {
            //JOptionPane.showMessageDialog(null, "INVALID KEY PRESS");
            //txtManual.setText(txtManual.getText().trim());
            //txtManual.requestFocus();
        } else {
//            System.out.println("ELSE INSERT S "+S);
//            txtManual.setText(S);
//            txtManual.requestFocus();
            //JOptionPane.showMessageDialog(null, "INVALID KEY PRESS");
            //System.out.println("ELSE KEY PRESS : "+evt.getKeyChar());
            System.out.println("ABCDE ELSE S " + S);
            txtManual.setText(S);
            //Flag=1;
        }
    }//GEN-LAST:event_txtManualKeyPressed

    private void btnInvValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInvValActionPerformed
        // TODO add your handling code here:

        String AsOnDate = EITLERPGLOBAL.getCurrentDateDB();
        String MainCode = "210010";
        int cnt = 0;

        ResultSet rsPartyCode = null, rsBaleDetail = null, rsPieceDetail = null, rsUpdatePiece = null, rsProdDetail = null, rsDetail = null, rsUpdateDisc = null;

        data.Execute("TRUNCATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS");

        try {
//            if (rbtnText.isSelected()) {
//                String S = txtManual.getText().trim();
//                if (S.equalsIgnoreCase("")) {
//                    JOptionPane.showMessageDialog(null, "Field is EMPTY");
//                    cnt = 0;
//                } else {
//                    
//                    String[] bno = S.split(",");
//                    
//                    for (int i = 0; i < bno.length; i++) {
//                        bno[i] = bno[i].replaceAll("[^\\w]", ",");
//                        System.out.println("String Bno : " + bno[i]);
//                        //String PartyCode = "SELECT PKG_PARTY_CODE FROM PRODUCTION.FELT_PKG_SLIP_HEADER WHERE PKG_BALE_NO='" + bno[i] + "'  AND APPROVED=1 AND CANCELED=0 AND PKG_BALE_NO IS NOT NULL AND PKG_BALE_NO!=''";
//
//                        String BaleDetail = "SELECT D.PKG_BALE_NO,D.PKG_PIECE_NO,H.PKG_PARTY_CODE FROM PRODUCTION.FELT_PKG_SLIP_DETAIL D,PRODUCTION.FELT_PKG_SLIP_HEADER H WHERE D.PKG_BALE_NO=H.PKG_BALE_NO AND D.PKG_BALE_NO='" + bno[i] + "'  AND H.APPROVED=1 AND H.CANCELED=0";
//                        rsBaleDetail = data.getResult(BaleDetail);
//                        rsBaleDetail.first();
//                        if (rsBaleDetail.getRow() > 0) {
//                            while (!rsBaleDetail.isAfterLast()) {
//                                String bale = rsBaleDetail.getString("PKG_BALE_NO");
//                                String piece = rsBaleDetail.getString("PKG_PIECE_NO");
//                                String party = rsBaleDetail.getString("PKG_PARTY_CODE");
//                                String sql = "INSERT INTO TEMP_DATABASE.TEMP_INV_VAL_PROCESS (BALE_NO,PIECE_NO,PARTY_CODE) VALUES ('" + bale + "','" + piece + "','" + party + "')";
//                                data.Execute(sql);
//                                rsBaleDetail.next();
//                            }
//                        }
//                    }
//                    
//                }
//            }
//            
//            if (rbtnSelect.isSelected()) {
//                System.out.println("ding");
//                for (int j = 0; j < Table.getRowCount(); j++) {
//                    //System.out.println("ROW : "+Table.getSelectedRow()+" : Boolean : "+Table.getValueAt(j, 0)+" : col 2 : "+Table.getValueAt(j, 1));
//
//                    if (Table.getValueAt(j, 0).equals(true)) {
//                        cnt++;
//                    }
//                }
//                
//                if (cnt == 0) {
//                    JOptionPane.showMessageDialog(null, "Please Select any BALE.");
//                } else {
//                    
//                    for (int j = 0; j < Table.getRowCount(); j++) {
//                        //System.out.println("ROW : "+Table.getSelectedRow()+" : Boolean : "+Table.getValueAt(j, 0)+" : col 2 : "+Table.getValueAt(j, 1));
//
//                        if (Table.getValueAt(j, 0).equals(true)) {
//                            String sql2 = "INSERT INTO TEMP_DATABASE.TEMP_INV_VAL_PROCESS (BALE_NO,PIECE_NO,PARTY_CODE) SELECT D.PKG_BALE_NO,D.PKG_PIECE_NO,H.PKG_PARTY_CODE FROM PRODUCTION.FELT_PKG_SLIP_DETAIL D,PRODUCTION.FELT_PKG_SLIP_HEADER H WHERE D.PKG_BALE_NO=H.PKG_BALE_NO AND D.PKG_BALE_NO='" + Table.getValueAt(j, 1) + "'  AND H.APPROVED=1 AND H.CANCELED=0";
//                            data.Execute(sql2);
//                        }
//                    }
//                    
//                }
//            }

            if (rbtnText.isSelected()) {
                String S = txtManual.getText().trim();
                if (S.equalsIgnoreCase("")) {
                    JOptionPane.showMessageDialog(null, "Field is EMPTY");
                    cnt = 0;
                } else {

                    String[] bno = S.split(",");

                    for (int i = 0; i < bno.length; i++) {
                        cnt++;
                        bno[i] = bno[i].replaceAll("[^\\w]", ",");
                        System.out.println("String Bno : " + bno[i]);
                        //String PartyCode = "SELECT PKG_PARTY_CODE FROM PRODUCTION.FELT_PKG_SLIP_HEADER WHERE PKG_BALE_NO='" + bno[i] + "'  AND APPROVED=1 AND CANCELED=0 AND PKG_BALE_NO IS NOT NULL AND PKG_BALE_NO!=''";

                        String BaleDetail = "SELECT D.PKG_BALE_NO,D.PKG_PIECE_NO,H.PKG_PARTY_CODE,H.PKG_BALE_DATE FROM PRODUCTION.FELT_PKG_SLIP_DETAIL D,PRODUCTION.FELT_PKG_SLIP_HEADER H WHERE D.PKG_BALE_NO=H.PKG_BALE_NO AND D.PKG_BALE_NO='" + bno[i] + "'  AND H.APPROVED=1 AND H.CANCELED=0  ORDER BY H.PKG_BALE_DATE DESC";
                        rsBaleDetail = data.getResult(BaleDetail);
                        rsBaleDetail.first();
                        if (rsBaleDetail.getRow() > 0) {
                            while (!rsBaleDetail.isAfterLast()) {
                                String bale = rsBaleDetail.getString("PKG_BALE_NO");
                                String piece = rsBaleDetail.getString("PKG_PIECE_NO");
                                String party = rsBaleDetail.getString("PKG_PARTY_CODE");
                                String baledt = rsBaleDetail.getString("PKG_BALE_DATE");
                                String sql = "INSERT INTO TEMP_DATABASE.TEMP_INV_VAL_PROCESS (BALE_NO,PIECE_NO,PARTY_CODE,PACKING_DATE) VALUES ('" + bale + "','" + piece + "','" + party + "','" + baledt + "')";
                                data.Execute(sql);
                                rsBaleDetail.next();
                            }
                        }
                    }

                }
            }

            if (rbtnSelect.isSelected() || rbtnClubbing.isSelected()) {
                //System.out.println("ding");
                for (int j = 0; j < Table.getRowCount(); j++) {
                    //System.out.println("ROW : "+Table.getSelectedRow()+" : Boolean : "+Table.getValueAt(j, 0)+" : col 2 : "+Table.getValueAt(j, 1));

                    if (Table.getValueAt(j, 0).equals(true)) {
                        cnt++;
                    }
                }

                if (cnt == 0) {
                    JOptionPane.showMessageDialog(null, "Please Select any BALE.");
                } else {

                    for (int j = 0; j < Table.getRowCount(); j++) {
                        //System.out.println("ROW : "+Table.getSelectedRow()+" : Boolean : "+Table.getValueAt(j, 0)+" : col 2 : "+Table.getValueAt(j, 1));

                        if (Table.getValueAt(j, 0).equals(true)) {
                            //String sql2 = "INSERT INTO TEMP_DATABASE.TEMP_INV_VAL_PROCESS (BALE_NO,PIECE_NO,PARTY_CODE,PACKING_DATE) SELECT D.PKG_BALE_NO,D.PKG_PIECE_NO,H.PKG_PARTY_CODE,H.PKG_BALE_DATE FROM PRODUCTION.FELT_PKG_SLIP_DETAIL D,PRODUCTION.FELT_PKG_SLIP_HEADER H WHERE D.PKG_BALE_NO=H.PKG_BALE_NO AND D.PKG_BALE_NO='" + Table.getValueAt(j, 1) + "'  AND H.APPROVED=1 AND H.CANCELED=0";
                            String sql2 = "INSERT INTO TEMP_DATABASE.TEMP_INV_VAL_PROCESS (BALE_NO,PIECE_NO,PARTY_CODE,PACKING_DATE) SELECT D.PKG_BALE_NO,D.PKG_PIECE_NO,H.PKG_PARTY_CODE,H.PKG_BALE_DATE FROM PRODUCTION.FELT_PKG_SLIP_DETAIL D,PRODUCTION.FELT_PKG_SLIP_HEADER H WHERE D.PKG_BALE_NO=H.PKG_BALE_NO AND D.PKG_BALE_DATE=H.PKG_BALE_DATE AND D.PKG_BALE_NO='" + Table.getValueAt(j, 1) + "' AND D.PKG_BALE_DATE='" + EITLERPGLOBAL.formatDateDB(Table.getValueAt(j, 2).toString()) + "' AND H.APPROVED=1 AND H.CANCELED=0";
                            data.Execute(sql2);
                        }
                    }

                }
            }

            if (cnt > 0) {

                UpdatePieceDetail();

                //---------------------------------------------------
                String Detail = "SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS";
                rsDetail = data.getResult(Detail);
                rsDetail.first();
                if (rsDetail.getRow() > 0) {
                    while (!rsDetail.isAfterLast()) {

                        String pieceNo = rsDetail.getString("PIECE_NO");
                        String prodCd = rsDetail.getString("PRODUCT_CODE");
                        String partyCd = rsDetail.getString("PARTY_CODE");
                        String baleNo = rsDetail.getString("BALE_NO");
                        String baleDate = rsDetail.getString("PACKING_DATE");
                        float length = rsDetail.getFloat("LENGTH");
                        float width = rsDetail.getFloat("WIDTH");
                        float gsm = rsDetail.getFloat("GSM");
                        float weight = rsDetail.getFloat("ACTUAL_WEIGHT");
                        float sqmtr = rsDetail.getFloat("SQMTR");

                        inv_calculation = EITLERP.FeltSales.common.clsOrderValueCalc.calculate(pieceNo, prodCd, partyCd, length, width, weight, sqmtr, AsOnDate, baleNo, baleDate);
//
                        float Rate = inv_calculation.getFicRate();
                        float BasAmount = inv_calculation.getFicBasAmount();
                        float ChemTrtChg = inv_calculation.getFicChemTrtChg();
                        float SpiralChg = inv_calculation.getFicSpiralChg();
                        float PinChg = inv_calculation.getFicPinChg();
                        float SeamChg = inv_calculation.getFicSeamChg();
                        int InsInd = inv_calculation.getFicInsInd();
                        float InsAmt = inv_calculation.getFicInsAmt();
                        float Excise = inv_calculation.getFicExcise();
                        float DiscPer = inv_calculation.getFicDiscPer();
                        float DiscAmt = inv_calculation.getFicDiscAmt();
                        float DiscBasamt = inv_calculation.getFicDiscBasamt();
                        float InvAmt = inv_calculation.getFicInvAmt();
                        float Gst = inv_calculation.getFicGST();
                        float IGst = inv_calculation.getFicIGST();
                        float SGst = inv_calculation.getFicSGST();
                        float CGst = inv_calculation.getFicCGST();
                        float IGstper = inv_calculation.getFicIGSTPER();
                        float CGstper = inv_calculation.getFicCGSTPER();
                        float SGstper = inv_calculation.getFicSGSTPER();
                        //float cst = inv_calculation.getCst();
                        float cst2 = inv_calculation.getCst2();
                        float cst5 = inv_calculation.getCst5();
                        //float vat = inv_calculation.getVat();
                        float vat1 = inv_calculation.getVat1();
                        float vat4 = inv_calculation.getVat4();
                        float SD = inv_calculation.getSD();

                        String SancDoc = inv_calculation.getSanc_doc();
                        String SancGrp = inv_calculation.getSanc_group();

                        float surcharge_per = inv_calculation.getFicSurcharge_per();
                        float surcharge_rate = inv_calculation.getFicSurcharge_rate();
                        float gross_rate = inv_calculation.getFicGrossRate();

                        String upSQL = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET RATE='" + Rate + "',BAS_AMT='" + BasAmount + "',DISC_PER='" + DiscPer + "',DISC_AMT='" + DiscAmt + "',DISC_BAS_AMT='" + DiscBasamt + "',EXCISE='" + Excise + "',SEAM_CHG='" + SeamChg + "',INSURANCE_AMT='" + InsAmt + "',CHEM_TRT_CHG='" + ChemTrtChg + "',PIN_CHG='" + PinChg + "',SPIRAL_CHG='" + SpiralChg + "',INS_IND='" + InsInd + "',CST2='" + cst2 + "',VAT1='" + vat1 + "',CST5='" + cst5 + "',VAT4='" + vat4 + "',SD_AMT='" + SD + "',IGST_AMT='" + IGst + "',CGST_AMT='" + CGst + "',SGST_AMT='" + SGst + "',IGST_PER='" + IGstper + "',CGST_PER='" + CGstper + "',SGST_PER='" + SGstper + "',INVOICE_AMT='" + InvAmt + "',SANC_GROUP='" + SancGrp + "',SANC_DOC='" + SancDoc + "',SURCHARGE_PER='" + surcharge_per + "',SURCHARGE_RATE='" + surcharge_rate + "',GROSS_RATE='" + gross_rate + "' WHERE PIECE_NO='" + pieceNo + "' ";
                        data.Execute(upSQL);

                        String chargeCd = data.getStringValueFromDB("SELECT CHARGE_CODE FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 AND PARTY_CODE = '" + partyCd + "' ");
                        String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET CHARGE_CODE='" + chargeCd + "' WHERE PARTY_CODE = '" + partyCd + "' ";
                        data.Execute(upSQL1);

                        rsDetail.next();
                    }
                }

                InvValReport();

            }

//            //RATE UPDATION
//            String ProdDetail = "SELECT PRODUCT_CODE FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS";
//            rsProdDetail = data.getResult(ProdDetail);
//            rsProdDetail.first();
//            if (rsProdDetail.getRow() > 0) {
//                while (!rsProdDetail.isAfterLast()) {
//
//                    String prodDetail = "SELECT * FROM PRODUCTION.FELT_RATE_MASTER WHERE ITEM_CODE='" + rsProdDetail.getString("PRODUCT_CODE") + "'";
//                    rsUpdatePiece = data.getResult(prodDetail);
//
//                    String prodCd = rsProdDetail.getString("PRODUCT_CODE");
//
//                    float rate = 0;
//                    int sqmind = 0;
//                    if (rsUpdatePiece.getInt("SQM_IND") == 1) {
//                        rate = rsUpdatePiece.getInt("SQM_RATE");
//                        sqmind = rsUpdatePiece.getInt("SQM_IND");
//                    } else {
//                        rate = rsUpdatePiece.getInt("WT_RATE");
//                        sqmind = 0;
//                    }
//
//                    String upSQL = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET RATE=" + rate + ",SQM_IND=" + sqmind + " WHERE PRODUCT_CODE='" + prodCd + "' ";
//                    data.Execute(upSQL);
//
//                    rsProdDetail.next();
//                }
//            }
//            
//            //DISC UPDATION
//            Detail = "SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS";
//            rsDetail = data.getResult(Detail);
//            rsDetail.first();
//            if (rsDetail.getRow() > 0) {
//                while (!rsDetail.isAfterLast()) {
//
//                    String discDetail = "SELECT * FROM PRODUCTION.FELT_RATE_DISC_MASTER WHERE PRODUCT_CODE='" + rsDetail.getString("PRODUCT_CODE") + "' AND PARTY_CODE='" + rsDetail.getString("PARTY_CODE") + "' AND EFFECTIVE_FROM>=CURDATE() AND (EFFECTIVE_TO>=CURDATE() OR EFFECTIVE_TO='0001-01-01') AND APPROVED=1 AND CANCELED=0 ";
//                    rsUpdateDisc = data.getResult(discDetail);
//
//                    String prodCd = rsDetail.getString("PRODUCT_CODE");
//                    String partyCd = rsDetail.getString("PARTY_CODE");
//
//                    float disc = 0;
//                    if(rsUpdateDisc.getRow()==0)
//                        disc = 0;
//                    else
//                        disc = rsUpdateDisc.getFloat("DISC_PER");
//                    
//                    String upSQL = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET DISC_PER=" + disc + " WHERE PRODUCT_CODE='" + prodCd + "' AND PARTY_CODE='" + partyCd + "' ";
//                    data.Execute(upSQL);
//
//                    rsDetail.next();
//                }
//            }
//            
//            //BAS AMOUNT UPDATION
//            Detail = "SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS";
//            rsDetail = data.getResult(Detail);
//            rsDetail.first();
//            if (rsDetail.getRow() > 0) {
//                while (!rsDetail.isAfterLast()) {
//
//                    String pieceNo = rsDetail.getString("PIECE_NO");
//                    int sqmind = rsDetail.getInt("SQM_IND");
//                    double basamt = 0;
//                    float length = rsDetail.getFloat("ACTUAL_LENGTH");
//                    float width = rsDetail.getFloat("ACTUAL_WIDTH");
//                    float weight = rsDetail.getFloat("ACTUAL_WEIGHT");
//                    double rate = rsDetail.getDouble("RATE");
//                    
//                    if (sqmind==1)
//                        basamt = EITLERPGLOBAL.round((length*width*rate),2);
//                    else
//                        basamt = EITLERPGLOBAL.round((weight*rate), 2);
//                    
//                    String upSQL = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET BAS_AMT=" + basamt + " WHERE PIECE_NO='" + pieceNo + "' ";
//                    data.Execute(upSQL);
//
//                    rsDetail.next();
//                }
//            }
//            
//            //DISC AMOUNT AND BASIC DISC AMOUNT UPDATION
//            Detail = "SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS";
//            rsDetail = data.getResult(Detail);
//            rsDetail.first();
//            if (rsDetail.getRow() > 0) {
//                while (!rsDetail.isAfterLast()) {
//
//                    String pieceNo = rsDetail.getString("PIECE_NO");
//                    double basamt = rsDetail.getDouble("BAS_AMT");
//                    float discper = rsDetail.getFloat("DISC_PER");
//                    double discamt = 0;
//                    
//                    discamt = EITLERPGLOBAL.round((basamt*discper)/100, 2);
//                    
//                    String upSQL = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET DISC_AMT=" + discamt + " AND DISC_BAS_AMT=" + (basamt-discamt) + " WHERE PIECE_NO='" + pieceNo + "' ";
//                    data.Execute(upSQL);
//
//                    rsDetail.next();
//                }
//            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        //advReceiptSummary("210010", EITLERPGLOBAL.getCurrentDateDB());
    }//GEN-LAST:event_btnInvValActionPerformed

    private void PARTY_CODEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PARTY_CODEFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_PARTY_CODEFocusGained

    private void PARTY_CODEFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PARTY_CODEFocusLost

        try {
            if (!"".equals(PARTY_CODE.getText())) {
                String SQL = "SELECT PARTY_CODE FROM D_SAL_PARTY_MASTER  WHERE MAIN_ACCOUNT_CODE='210010' AND PARTY_CODE='" + PARTY_CODE.getText().trim() + "'";
                if (!data.IsRecordExist(SQL)) {
                    JOptionPane.showMessageDialog(null, "Please enter valid PARTY CODE");
                    PARTY_CODE.setText("");
                    PARTY_CODE.requestFocus();
                } else {
                    FormatGrid();
                    GenerateData(PARTY_CODE.getText().trim());
                }
            } else {
                FormatGrid();
                GenerateData();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter valid PARTY CODE");
            PARTY_CODE.setText("");
            PARTY_CODE.requestFocus();
        }
    }//GEN-LAST:event_PARTY_CODEFocusLost

    private void PARTY_CODEKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PARTY_CODEKeyPressed

        if (evt.getKeyCode() == 112) {
            try {
                LOV aList = new LOV();

                aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER  WHERE MAIN_ACCOUNT_CODE='210010'";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;
                aList.UseSpecifiedConn = true;
                aList.dbURL = EITLERPGLOBAL.DatabaseURL;

                if (aList.ShowLOV()) {
                    PARTY_CODE.setText(aList.ReturnVal);

                    FormatGrid();
                    GenerateData(aList.ReturnVal);
                }
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Error = " + e.getMessage());
            }
        }

    }//GEN-LAST:event_PARTY_CODEKeyPressed

    private void PARTY_CODEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PARTY_CODEKeyTyped
//EITLERP.FeltSales.FeltInvReport.clsFeltSalesInvoiceImport.ExternalImportSJ(true, "09", 145466.00, "812033", "FE/001334", "2017-12-11");
    }//GEN-LAST:event_PARTY_CODEKeyTyped

    private void rbtnClubbingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbtnClubbingMouseClicked
        // TODO add your handling code here:
        jPanel1.setVisible(false);
        jPanel2.setVisible(true);
        FormatGrid();

        try {
            LOV aList = new LOV();

            aList.SQL = "SELECT DOC_NO,PIECE_NO,PARTY_CODE,PARTY_NAME FROM PRODUCTION.FELT_SALES_FOLLOWUP_CLUBBING_DETAIL D where CURRENT_STATUS='Active'  AND D.INCHARGE!='6' ";//AND EXPECTED_MONTH_OF_DISPATCH=CONCAT(DATE_FORMAT(CURDATE(),'%b'),' - ',YEAR(CURDATE())) 
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            aList.UseSpecifiedConn = true;
            aList.dbURL = EITLERPGLOBAL.DatabaseURL;

            if (aList.ShowLOV()) {
                FormatGrid();
                GeneratePieceClubbingData(aList.ReturnVal);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error = " + e.getMessage());
        }

    }//GEN-LAST:event_rbtnClubbingMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar Bar;
    private javax.swing.JTextField PARTY_CODE;
    private javax.swing.JTable Table;
    private javax.swing.JButton btnAdvAmt;
    private javax.swing.JButton btnInvVal;
    private javax.swing.JButton btnOutAmt;
    private javax.swing.JButton btnProcess;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JRadioButton rbtnClubbing;
    private javax.swing.JRadioButton rbtnSelect;
    private javax.swing.JRadioButton rbtnText;
    private javax.swing.JTextArea txtManual;
    // End of variables declaration//GEN-END:variables

    private void createFile() {
        try {
//            System.out.println("InvoiceType : " + InvoiceType);
            double MainBalance = 0, SubBalance = 0;
            String GroupMainParty = "", GroupSubParty = "", Record = "";
            String InvoiceNo = "", InvoiceDate = "", strMainBalance = "", strBalance = "", strDecimal = "", MainCode = "";
            ResultSet rsMainParty = null, rsSubParty = null;
            //String FileName = "/data/Balance_Transfer_Cobol/"+EITLERPGLOBAL.getCurrentDateDB().substring(8,10)+
            //EITLERPGLOBAL.getCurrentDateDB().substring(5,7)+EITLERPGLOBAL.getCurrentDateDB().substring(2,4);
//            String FileName = "/data/Balance_Transfer_Cobol/ost";
            HashMap List = new HashMap();

            int InvoiceType = 2;
            MainCode = "210010";

            System.out.println("URL : " + FinanceGlobal.FinURL);

            data.Execute("TRUNCATE TEMP_DATABASE.TEMP_OUTSTANDING_AMT");
            data.Execute("INSERT INTO TEMP_DATABASE.TEMP_OUTSTANDING_AMT (MAIN_PARTY_CODE,SUB_PARTY_CODE) SELECT GROUP_MAIN_PARTY,GROUP_SUB_PARTY FROM FINANCE.D_FIN_PARTY_GROUPING_DETAIL WHERE INVOICE_TYPE=2 ORDER BY GROUP_MAIN_PARTY,GROUP_SUB_PARTY");
            data.Execute("TRUNCATE TEMP_DATABASE.TEMP_BAL_TR");

            rsMainParty = data.getResult("SELECT GROUP_MAIN_PARTY FROM D_FIN_PARTY_GROUPING_HEADER WHERE INVOICE_TYPE=" + InvoiceType + " ORDER BY GROUP_MAIN_PARTY", FinanceGlobal.FinURL);
            rsMainParty.first();
            if (rsMainParty.getRow() > 0) {
                while (!rsMainParty.isAfterLast()) {
                    Record = "";
                    MainBalance = 0;
                    SubBalance = 0;
                    GroupMainParty = rsMainParty.getString("GROUP_MAIN_PARTY");
                    //MainBalance=BalanceTransfer(MainCode, GroupMainParty);

                    rsSubParty = data.getResult("SELECT GROUP_SUB_PARTY FROM D_FIN_PARTY_GROUPING_DETAIL WHERE GROUP_MAIN_PARTY='" + GroupMainParty + "' AND INVOICE_TYPE=" + InvoiceType + " ORDER BY GROUP_SUB_PARTY", FinanceGlobal.FinURL);
                    rsSubParty.first();
                    if (rsSubParty.getRow() > 0) {
                        while (!rsSubParty.isAfterLast()) {
                            GroupSubParty = rsSubParty.getString("GROUP_SUB_PARTY");
                            SubBalance = EITLERPGLOBAL.round(SubBalance + BalanceTransfer(MainCode, GroupSubParty), 2);
                            System.out.println("GroupSubParty : " + GroupSubParty + " SubBalance : " + SubBalance);
                            data.Execute("UPDATE TEMP_DATABASE.TEMP_OUTSTANDING_AMT SET SUB_OUTSTANDING_BAL=" + SubBalance + " WHERE MAIN_PARTY_CODE='" + GroupMainParty + "' AND SUB_PARTY_CODE='" + GroupSubParty + "'");
                            rsSubParty.next();
                        }
                    }

//                    //strMainBalance = new BigDecimal(MainBalance+SubBalance).setScale(2,BigDecimal.ROUND_HALF_UP).toString();;
//                    strMainBalance = new BigDecimal(SubBalance).setScale(2,BigDecimal.ROUND_HALF_UP).toString();//MainBalance+
//                    strBalance = strMainBalance.substring(0,strMainBalance.indexOf("."));
//                    strDecimal = strMainBalance.substring(strMainBalance.indexOf(".")+1);
//                    if(strBalance.length()<10) {
//                        strBalance = EITLERPGLOBAL.padLeftEx(strBalance, "0", 10);
//                    } else {
//                        //                        JOptionPane.showMessageDialog(null,"Party Code : " + GroupMainParty + " " +
//                        //                        " Balance more then 10+2 format.   File can not generated." +
//                        //                        " Contact Administrator and EDP head.");
//                        return;
//                    }
//                    
//                    if(strDecimal.length()<2) {
//                        strDecimal = EITLERPGLOBAL.padRightEx(strDecimal, "0", 2);
//                    }
//                    
//                    Record = GroupMainParty+strBalance+strDecimal+"000000000000";
//                    System.out.println(GroupMainParty + " " +strMainBalance);
//                    List.put(Integer.toString(List.size()+1), Record);
                    rsMainParty.next();
                }
            }

//            String PrintLine = "";
//            // WRITE TO FILE
//            boolean sucess = new File("/data/Balance_Transfer_Cobol/").mkdir();
//            if(sucess) {
//                //JOptionPane.showMessageDialog(null,"Directory created...");
//            }
//            //String FileName = "/data/Balance_Transfer_Cobol/"+EITLERPGLOBAL.getCurrentDateDB().substring(8,10)+EITLERPGLOBAL.getCurrentDateDB().substring(5,7)+EITLERPGLOBAL.getCurrentDateDB().substring(0,4)+".txt";
//            
//            File file = new File(FileName);
//            
//            boolean exists = file.createNewFile();
//            if(!exists) {
//                //JOptionPane.showMessageDialog(null,"File Already exists...");
//            }
//            BufferedWriter aFile=new BufferedWriter(new FileWriter(file));
//            
//            for(int i=1;i<=List.size();i++) {
//                PrintLine = List.get(Integer.toString(i)).toString();
//                //System.out.println(PrintLine);
//                aFile.write(PrintLine);
//                aFile.newLine();
//            }
//            aFile.close();
            System.out.println("File Created sucessfully...");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private double BalanceTransfer(String MainCode, String PartyCode) {
        String SQL = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", BookCode = "", ChargeCode = "";
        ResultSet rsInvoice = null;
        int InvoiceType = 0, EntryNo = 0;
        double TotalBalance = 0;
        try {
            if (MainCode.equals("210010")) {
                InvoiceType = 2;
                BookCode = " AND BOOK_CODE IN ('09') "; //,'18'
                //ChargeCode = " AND CHARGE_CODE IN ('02','08') ";
            }
            // SET LAST CLOSING DATE & TO DATE
            ToDate = EITLERPGLOBAL.getCurrentDateDB();
            FromDate = EITLERPGLOBAL.FinFromDateDB;
            SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
            EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
            FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
            // ------------------------------

            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
            SQL = "(SELECT MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND ENTRY_NO=" + EntryNo + " AND EFFECT='D' AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00') " + BookCode + " ) "
                    + "UNION ALL "
                    + "(SELECT B.MAIN_ACCOUNT_CODE,B.SUB_ACCOUNT_CODE,A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='D' AND A.APPROVED=1 AND A.CANCELLED=0 "
                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) " + BookCode + " ) "
                    + "ORDER BY VOUCHER_DATE ";

            data.Execute("INSERT INTO TEMP_DATABASE.TEMP_BAL_TR (MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT) " + SQL);

            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
            rsInvoice.first();
            InvoiceNo = "";
            InvoiceDate = "";
            // ---------------------------------------------------------------------

            if (rsInvoice.getRow() > 0) {
                while (!rsInvoice.isAfterLast()) {

                    String VoucherNo = UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "");
                    InvoiceNo = UtilFunctions.getString(rsInvoice, "INVOICE_NO", "");
                    InvoiceDate = UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "");
                    double DebitAmount = 0;
                    double AdjustedAmount = 0;
                    if (clsVoucher.getVoucherType(VoucherNo) != FinanceGlobal.TYPE_SALES_JOURNAL) { //&& clsVoucher.getVoucherType(VoucherNo)!=FinanceGlobal.TYPE_DEBIT_NOTE
                        rsInvoice.next();
                        continue;
                    }
                    if (InvoiceType == 2 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        if (!clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8")) {
                            rsInvoice.next();
                            continue;
                        }
                    } else if (InvoiceType == 1 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        if (!clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("4")) {
                            rsInvoice.next();
                            continue;
                        }
                    }

                    if (!data.IsRecordExist("SELECT * FROM D_FIN_DEBITNOTE_RECEIPT_MAPPING WHERE DEBITNOTE_VOUCHER_NO='" + VoucherNo + "'", FinanceGlobal.FinURL)
                            && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_DEBIT_NOTE) {
                        rsInvoice.next();
                        continue;
                    }

                    if (clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                + "AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                + "AND INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + InvoiceDate + "' "
                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                + "AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                + "AND B.INVOICE_DATE='" + InvoiceDate + "' AND B.INVOICE_NO='" + InvoiceNo + "' ";

                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                    } else {
                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                + "AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                + "AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                + "AND B.GRN_NO='" + VoucherNo + "' ";
                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                    }
                    if (DebitAmount == AdjustedAmount) {
                        rsInvoice.next();
                        continue;
                    }

                    TotalBalance = EITLERPGLOBAL.round(TotalBalance + EITLERPGLOBAL.round(DebitAmount - AdjustedAmount, 2), 2);
                    rsInvoice.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return TotalBalance;
        }
        return TotalBalance;
    }

    private void createFile1() {
        try {
//            System.out.println("InvoiceType : " + InvoiceType);
            double MainBalance = 0, SubBalance = 0, grpCriticalBal = 0;
            String GroupMainParty = "", GroupSubParty = "", Record = "";
            String InvoiceNo = "", InvoiceDate = "", strMainBalance = "", strBalance = "", strDecimal = "", MainCode = "";
            ResultSet rsMainParty = null, rsSubParty = null;
            //String FileName = "/data/Balance_Transfer_Cobol/"+EITLERPGLOBAL.getCurrentDateDB().substring(8,10)+
            //EITLERPGLOBAL.getCurrentDateDB().substring(5,7)+EITLERPGLOBAL.getCurrentDateDB().substring(2,4);
//            String FileName = "/data/Balance_Transfer_Cobol/ost";
            HashMap List = new HashMap();

            int InvoiceType = 2;
            MainCode = "210010";

            System.out.println("URL : " + FinanceGlobal.FinURL);

            data.Execute("TRUNCATE TEMP_DATABASE.TEMP_BAL_TR");

            rsMainParty = data.getResult("SELECT MAIN_PARTY_CODE FROM TEMP_DATABASE.TEMP_OUTSTANDING_REPORT ORDER BY MAIN_PARTY_CODE");
            rsMainParty.first();
            if (rsMainParty.getRow() > 0) {
                while (!rsMainParty.isAfterLast()) {
                    Record = "";
                    MainBalance = 0;
                    grpCriticalBal = 0;
                    SubBalance = 0;
                    GroupMainParty = rsMainParty.getString("MAIN_PARTY_CODE");
                    //MainBalance=BalanceTransfer1(MainCode, GroupMainParty);

//                    rsSubParty = data.getResult("SELECT GROUP_SUB_PARTY FROM D_FIN_PARTY_GROUPING_DETAIL WHERE GROUP_MAIN_PARTY='" + GroupMainParty + "' AND INVOICE_TYPE=" + InvoiceType + " ORDER BY GROUP_SUB_PARTY", FinanceGlobal.FinURL);
//                    rsSubParty.first();
//                    if (rsSubParty.getRow() > 0) {
//                        while (!rsSubParty.isAfterLast()) {
//                            GroupSubParty = rsSubParty.getString("GROUP_SUB_PARTY");
////                            SubBalance = EITLERPGLOBAL.round(SubBalance + BalanceTransfer1(MainCode, GroupSubParty), 2);
//                            SubBalance = EITLERPGLOBAL.round(BalanceTransfer1(MainCode, GroupSubParty), 2);
//                            System.out.println("GroupSubParty : " + GroupSubParty + " SubBalance : " + SubBalance);
//                            MainBalance = MainBalance + SubBalance;
//                            data.Execute("UPDATE TEMP_DATABASE.TEMP_OUTSTANDING_AMT SET SUB_OUTSTANDING_BAL=" + SubBalance + " WHERE MAIN_PARTY_CODE='" + GroupMainParty + "' AND SUB_PARTY_CODE='" + GroupSubParty + "'");
//                            rsSubParty.next();
//                        }
//                    }
                    if (MainBalance == 0) {
                        MainBalance = EITLERPGLOBAL.round(BalanceTransfer1(MainCode, GroupMainParty), 2);
                        grpCriticalBal = data.getDoubleValueFromDB("SELECT COALESCE(H.GROUP_CRITICAL_LIMIT,0) FROM PRODUCTION.FELT_GROUP_MASTER_DETAIL D,PRODUCTION.FELT_GROUP_MASTER_HEADER H WHERE D.GROUP_CODE=H.GROUP_CODE AND D.PARTY_CODE ='" + GroupMainParty + "' AND H.APPROVED=1 AND H.CANCELED=0");

                        data.Execute("UPDATE TEMP_DATABASE.TEMP_OUTSTANDING_AMT SET SUB_OUTSTANDING_BAL=" + MainBalance + ", GROUP_CRITICAL_BAL=" + grpCriticalBal + " WHERE MAIN_PARTY_CODE='" + GroupMainParty + "' ");
                    }

                    data.Execute("UPDATE TEMP_DATABASE.TEMP_OUTSTANDING_REPORT SET SUB_OUTSTANDING_BAL=" + MainBalance + " WHERE MAIN_PARTY_CODE='" + GroupMainParty + "'");

                    //strMainBalance = new BigDecimal(MainBalance+SubBalance).setScale(2,BigDecimal.ROUND_HALF_UP).toString();;
//                    strMainBalance = new BigDecimal(SubBalance).setScale(2,BigDecimal.ROUND_HALF_UP).toString();//MainBalance+
//                    strBalance = strMainBalance.substring(0,strMainBalance.indexOf("."));
//                    strDecimal = strMainBalance.substring(strMainBalance.indexOf(".")+1);
//                    if(strBalance.length()<10) {
//                        strBalance = EITLERPGLOBAL.padLeftEx(strBalance, "0", 10);
//                    } else {
//                        //                        JOptionPane.showMessageDialog(null,"Party Code : " + GroupMainParty + " " +
//                        //                        " Balance more then 10+2 format.   File can not generated." +
//                        //                        " Contact Administrator and EDP head.");
//                        return;
//                    }
//                    
//                    if(strDecimal.length()<2) {
//                        strDecimal = EITLERPGLOBAL.padRightEx(strDecimal, "0", 2);
//                    }
//                    
//                    Record = GroupMainParty+strBalance+strDecimal+"000000000000";
//                    System.out.println(GroupMainParty + " " +strMainBalance);
//                    List.put(Integer.toString(List.size()+1), Record);
                    rsMainParty.next();
                }
            }

//            String PrintLine = "";
//            // WRITE TO FILE
//            boolean sucess = new File("/data/Balance_Transfer_Cobol/").mkdir();
//            if(sucess) {
//                //JOptionPane.showMessageDialog(null,"Directory created...");
//            }
//            //String FileName = "/data/Balance_Transfer_Cobol/"+EITLERPGLOBAL.getCurrentDateDB().substring(8,10)+EITLERPGLOBAL.getCurrentDateDB().substring(5,7)+EITLERPGLOBAL.getCurrentDateDB().substring(0,4)+".txt";
//            
//            File file = new File(FileName);
//            
//            boolean exists = file.createNewFile();
//            if(!exists) {
//                //JOptionPane.showMessageDialog(null,"File Already exists...");
//            }
//            BufferedWriter aFile=new BufferedWriter(new FileWriter(file));
//            
//            for(int i=1;i<=List.size();i++) {
//                PrintLine = List.get(Integer.toString(i)).toString();
//                //System.out.println(PrintLine);
//                aFile.write(PrintLine);
//                aFile.newLine();
//            }
//            aFile.close();
            System.out.println("File Created sucessfully...");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private double BalanceTransfer1(String MainCode, String PartyCode) {
        String SQL = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", BookCode = "", ChargeCode = "";
        ResultSet rsInvoice = null;
        int InvoiceType = 0, EntryNo = 0;
        double TotalBalance = 0;
        try {
            if (MainCode.equals("210010")) {
                InvoiceType = 2;
                BookCode = " AND BOOK_CODE IN ('09') "; //,'18'
                //ChargeCode = " AND CHARGE_CODE IN ('02','08') ";
            }
            // SET LAST CLOSING DATE & TO DATE
            ToDate = EITLERPGLOBAL.getCurrentDateDB();
            FromDate = EITLERPGLOBAL.FinFromDateDB;
            SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
            EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
            FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
            // ------------------------------

            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
            SQL = "(SELECT MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND ENTRY_NO=" + EntryNo + " AND EFFECT='D' AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00') " + BookCode + " ) "
                    + "UNION ALL "
                    + "(SELECT B.MAIN_ACCOUNT_CODE,B.SUB_ACCOUNT_CODE,A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='D' AND A.APPROVED=1 AND A.CANCELLED=0 "
                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) " + BookCode + " ) "
                    + "ORDER BY VOUCHER_DATE ";

            data.Execute("INSERT INTO TEMP_DATABASE.TEMP_BAL_TR (MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT) " + SQL);

            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
            rsInvoice.first();
            InvoiceNo = "";
            InvoiceDate = "";
            // ---------------------------------------------------------------------

            if (rsInvoice.getRow() > 0) {
                while (!rsInvoice.isAfterLast()) {

                    String VoucherNo = UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "");
                    InvoiceNo = UtilFunctions.getString(rsInvoice, "INVOICE_NO", "");
                    InvoiceDate = UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "");
                    double DebitAmount = 0;
                    double AdjustedAmount = 0;
                    if (clsVoucher.getVoucherType(VoucherNo) != FinanceGlobal.TYPE_SALES_JOURNAL) { //&& clsVoucher.getVoucherType(VoucherNo)!=FinanceGlobal.TYPE_DEBIT_NOTE
                        rsInvoice.next();
                        continue;
                    }
//                    if (InvoiceType == 2 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
//                        if (!clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("02") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("08") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("04")) {
//                            rsInvoice.next();
//                            continue;
//                        }
//                    } else if (InvoiceType == 1 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
//                        if (!clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("02") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("08") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("04")) {
//                            rsInvoice.next();
//                            continue;
//                        }
//                    }

                    if (InvoiceType == 2 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        if (!clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("4") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("1")) { //Closed on 29/08/2020 as requested by Mr. Motiani from Felt Sales Dept
//                        if (!clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("4") ) {
                            rsInvoice.next();
                            continue;
                        }
                    } else if (InvoiceType == 1 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        if (!clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("5") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("4")) {
                            rsInvoice.next();
                            continue;
                        }
                    }

                    if (!data.IsRecordExist("SELECT * FROM D_FIN_DEBITNOTE_RECEIPT_MAPPING WHERE DEBITNOTE_VOUCHER_NO='" + VoucherNo + "'", FinanceGlobal.FinURL)
                            && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_DEBIT_NOTE) {
                        rsInvoice.next();
                        continue;
                    }

                    if (clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                + "AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                + "AND INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + InvoiceDate + "' "
                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                + "AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                + "AND B.INVOICE_DATE='" + InvoiceDate + "' AND B.INVOICE_NO='" + InvoiceNo + "' ";

                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                    } else {
                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                + "AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                + "AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                + "AND B.GRN_NO='" + VoucherNo + "' ";
                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                    }
                    if (DebitAmount == AdjustedAmount) {
                        rsInvoice.next();
                        continue;
                    }

                    TotalBalance = EITLERPGLOBAL.round(TotalBalance + EITLERPGLOBAL.round(DebitAmount - AdjustedAmount, 2), 2);
                    rsInvoice.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return TotalBalance;
        }
        return TotalBalance;
    }

    public static void advReceiptSummary(String MainCode, String AsOnDate) {
        String strSQL = "";
        String Condition = "";
        ResultSet rsData = null;
        TReportEngine objEngine1 = new TReportEngine();
        TReportWriter.SimpleDataProvider.TTable objData = new TReportWriter.SimpleDataProvider.TTable();

        try {
            objData.AddColumn("SUB_ACCOUNT_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("AMOUNT");

            strSQL = "SELECT DISTINCT SUB_PARTY_CODE AS SUB_ACCOUNT_CODE,SUB_ADV_BAL AS AMOUNT FROM TEMP_DATABASE.TEMP_ADV_AMT ";

            rsData = data.getResult(strSQL);
            System.out.println(strSQL);
            rsData.first();
            TReportWriter.SimpleDataProvider.TRow objRow = null;
            if (rsData.getRow() != 0) {
                if (rsData.getRow() > 0) {
                    while (!rsData.isAfterLast()) {
                        objRow = objData.newRow();
                        String SubAccountCode = UtilFunctions.getString(rsData, "SUB_ACCOUNT_CODE", "");
                        double Amount = UtilFunctions.getDouble(rsData, "AMOUNT", 0);
                        //Amount = clsAccount.get09AmountByVoucher(VoucherNo,MainCode,SubAccountCode,Amount);
                        //if (Amount > 0) {
                        objRow.setValue("SUB_ACCOUNT_CODE", UtilFunctions.getString(rsData, "SUB_ACCOUNT_CODE", ""));
                        objRow.setValue("PARTY_NAME", clsPartyMaster.getAccountName(MainCode, UtilFunctions.getString(rsData, "SUB_ACCOUNT_CODE", "")));
                        objRow.setValue("AMOUNT", Double.toString(Amount));
                        objData.AddRow(objRow);
                        //}
                        rsData.next();
                    }
                }

                HashMap Parameters = new HashMap();

                Parameters.put("PARTY_NAME", MainCode + " - " + clsPartyMaster.getAccountName(MainCode.trim(), ""));

                Parameters.put("AS_ON_DATE", EITLERPGLOBAL.getCurrentDate());
                Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());
                objEngine1.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptAdvanceAmountSummary.rpt", Parameters, objData);
            } else {
                JOptionPane.showMessageDialog(null, "09 Party not selected.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void advReceiptSummary(String MainCode, String FromSubCode, String AsOnDate) {
        String strSQL = "";
        String Condition = "";
        ResultSet rsData = null;
        TReportEngine objEngine1 = new TReportEngine();
        TReportWriter.SimpleDataProvider.TTable objData = new TReportWriter.SimpleDataProvider.TTable();

        try {
            objData.AddColumn("SUB_ACCOUNT_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("AMOUNT");

            if (!FromSubCode.equals("")) {
                Condition = " AND B.SUB_ACCOUNT_CODE = '" + FromSubCode + "' ";
            }

            strSQL = "SELECT B.SUB_ACCOUNT_CODE, SUM(B.AMOUNT) AS AMOUNT FROM D_FIN_VOUCHER_HEADER A, D_FIN_VOUCHER_DETAIL B "
                    + "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND A.VOUCHER_DATE<='" + AsOnDate + "' AND A.VOUCHER_TYPE IN (6,7,8,9,12) AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " "
                    + "AND A.APPROVED=1 AND A.CANCELLED=0 AND A.EXCLUDE_IN_ADJ =0 AND B.EFFECT='C' AND B.INVOICE_NO ='' AND B.MODULE_ID <>65 "
                    + "AND B.GRN_NO ='' AND (B.MATCHED=0 OR B.MATCHED IS NULL) "
                    + "GROUP BY B.SUB_ACCOUNT_CODE "
                    + "ORDER BY B.SUB_ACCOUNT_CODE ";

            data.Execute("TRUNCATE TEMP_DATABASE.TEMP_ADV_AMT");
            data.Execute("INSERT INTO TEMP_DATABASE.TEMP_ADV_AMT (SUB_PARTY_CODE,SUB_ADV_BAL) SELECT B.SUB_ACCOUNT_CODE, SUM(B.AMOUNT) AS AMOUNT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                    + "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND A.VOUCHER_DATE<='" + AsOnDate + "' AND A.VOUCHER_TYPE IN (6,7,8,9,12) AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' " + Condition + " "
                    + "AND A.APPROVED=1 AND A.CANCELLED=0 AND A.EXCLUDE_IN_ADJ =0 AND B.EFFECT='C' AND B.INVOICE_NO ='' AND B.MODULE_ID <>65 "
                    + "AND B.GRN_NO ='' AND (B.MATCHED=0 OR B.MATCHED IS NULL) "
                    + "GROUP BY B.SUB_ACCOUNT_CODE "
                    + "ORDER BY B.SUB_ACCOUNT_CODE");

            rsData = data.getResult(strSQL, FinanceGlobal.FinURL);
            System.out.println(strSQL);
            rsData.first();
            TReportWriter.SimpleDataProvider.TRow objRow = null;
            if (rsData.getRow() > 0) {
                while (!rsData.isAfterLast()) {
                    objRow = objData.newRow();
                    String SubAccountCode = UtilFunctions.getString(rsData, "SUB_ACCOUNT_CODE", "");
                    double Amount = UtilFunctions.getDouble(rsData, "AMOUNT", 0);
                    //Amount = clsAccount.get09AmountByVoucher(VoucherNo,MainCode,SubAccountCode,Amount);
                    if (Amount > 0) {
                        objRow.setValue("SUB_ACCOUNT_CODE", UtilFunctions.getString(rsData, "SUB_ACCOUNT_CODE", ""));
                        objRow.setValue("PARTY_NAME", clsPartyMaster.getAccountName(MainCode, UtilFunctions.getString(rsData, "SUB_ACCOUNT_CODE", "")));
                        objRow.setValue("AMOUNT", Double.toString(Amount));
                        objData.AddRow(objRow);
                    }
                    rsData.next();
                }
            }

            HashMap Parameters = new HashMap();
            if (!FromSubCode.equals("")) {
                Parameters.put("PARTY_NAME", FromSubCode + " - " + clsPartyMaster.getAccountName(MainCode.trim(), FromSubCode.trim()));
            } else {
                Parameters.put("PARTY_NAME", MainCode + " - " + clsPartyMaster.getAccountName(MainCode.trim(), ""));
            }
            Parameters.put("AS_ON_DATE", EITLERPGLOBAL.getCurrentDate());
            Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());
            objEngine1.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptAdvanceAmountSummary.rpt", Parameters, objData);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGrid() {
        try {

            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            Table.setAutoResizeMode(0);

            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
            //Renderer.setColor(0, 0, Color.LIGHT_GRAY);

            DataModel.addColumn("Select"); //0 - Read Only
            DataModel.addColumn("Bale No"); //
            DataModel.addColumn("Bale Date"); //
            DataModel.addColumn("Party Code");
            DataModel.addColumn("Party Name");
            DataModel.addColumn("Charge Code");
            DataModel.addColumn("No.of Pieces"); //
            DataModel.addColumn("Piece No"); //
            DataModel.addColumn("Length");
            DataModel.addColumn("Width");
            DataModel.addColumn("GSM");
            DataModel.addColumn("Group Name");
            DataModel.addColumn("Machine No");
            DataModel.addColumn("Position No");
            DataModel.addColumn("Position No (Design)");
            DataModel.addColumn("Position Desc");
            DataModel.addColumn("UPN");

            Renderer.setCustomComponent(0, "CheckBox");
            Table.getColumnModel().getColumn(0).setCellRenderer(Renderer);
            Table.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));

            DataModel.SetVariable(0, ""); //0 - Read Only
            DataModel.SetVariable(1, "Bale No"); //1
            DataModel.SetVariable(2, "Bale Date"); //2
            DataModel.SetVariable(3, "Party Code");
            DataModel.SetVariable(4, "Party Name");
            DataModel.SetVariable(5, "Charge Code");
            DataModel.SetVariable(6, "No.of Pieces"); //1
            DataModel.SetVariable(7, "Piece No"); //2
            DataModel.SetVariable(8, "Length");
            DataModel.SetVariable(9, "Width");
            DataModel.SetVariable(10, "GSM");
            DataModel.SetVariable(11, "Group Name");
            DataModel.SetVariable(12, "Machine No");
            DataModel.SetVariable(13, "Position No");
            DataModel.SetVariable(14, "Position No (Design)");
            DataModel.SetVariable(15, "Position Desc");
            DataModel.SetVariable(16, "UPN");

            DataModel.SetReadOnly(1);
            DataModel.SetReadOnly(2);
            DataModel.SetReadOnly(3);
            DataModel.SetReadOnly(4);
            DataModel.SetReadOnly(5);
            DataModel.SetReadOnly(6);
            DataModel.SetReadOnly(7);
            DataModel.SetReadOnly(8);
            DataModel.SetReadOnly(9);
            DataModel.SetReadOnly(10);
            DataModel.SetReadOnly(11);
            DataModel.SetReadOnly(12);
            DataModel.SetReadOnly(13);
            DataModel.SetReadOnly(14);
            DataModel.SetReadOnly(15);
            DataModel.SetReadOnly(16);

            Table.getColumnModel().getColumn(0).setMinWidth(70);
            Table.getColumnModel().getColumn(0).setMaxWidth(70);
            Table.getColumnModel().getColumn(1).setMinWidth(80);
            Table.getColumnModel().getColumn(1).setMaxWidth(80);
            Table.getColumnModel().getColumn(2).setMinWidth(100);
            Table.getColumnModel().getColumn(2).setMaxWidth(100);
            Table.getColumnModel().getColumn(3).setMinWidth(80);
            Table.getColumnModel().getColumn(3).setMaxWidth(80);
            Table.getColumnModel().getColumn(4).setMinWidth(120);
            //Table.getColumnModel().getColumn(4).setMaxWidth(120);
            Table.getColumnModel().getColumn(5).setMinWidth(50);
            Table.getColumnModel().getColumn(6).setMinWidth(50);
            Table.getColumnModel().getColumn(7).setMinWidth(80);
            Table.getColumnModel().getColumn(8).setMinWidth(50);
            Table.getColumnModel().getColumn(9).setMinWidth(50);
            Table.getColumnModel().getColumn(10).setMinWidth(50);
            Table.getColumnModel().getColumn(11).setMinWidth(80);
            Table.getColumnModel().getColumn(12).setMinWidth(80);
            Table.getColumnModel().getColumn(13).setMinWidth(80);
            Table.getColumnModel().getColumn(14).setMinWidth(80);
            Table.getColumnModel().getColumn(15).setMinWidth(80);
            Table.getColumnModel().getColumn(16).setMinWidth(120);

//            int ImportCol=DataModel.getColFromVariable("Calculate_Weight");
//            Renderer.setCustomComponent(ImportCol,"CheckBox");
//            JCheckBox aCheckBox=new JCheckBox();
//            aCheckBox.setBackground(Color.WHITE);            
//            aCheckBox.setVisible(true);
//            aCheckBox.setEnabled(true);
//            aCheckBox.setSelected(false);
//            Table.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox));
//            Table.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void GenerateData() {
        String strSQL = "";
        try {

            //String strSQL = "SELECT DISTINCT H.PKG_BALE_NO,H.PKG_BALE_DATE,H.PKG_PARTY_CODE,H.PKG_PARTY_NAME FROM PRODUCTION.FELT_PKG_SLIP_HEADER H, PRODUCTION.FELT_PKG_SLIP_DETAIL D WHERE H.PKG_BALE_NO=D.PKG_BALE_NO AND H.APPROVED=1 AND H.CANCELED=0 AND H.PKG_BALE_NO IS NOT NULL AND H.PKG_BALE_NO!='' AND H.INVOICE_FLG=0 AND H.BALE_REOPEN_FLG=0 ORDER BY H.PKG_BALE_NO";
            strSQL += "SELECT DISTINCT H.PKG_BALE_NO,H.PKG_BALE_DATE,H.PKG_PARTY_CODE,H.PKG_PARTY_NAME ";
            strSQL += "FROM PRODUCTION.FELT_PKG_SLIP_HEADER H, PRODUCTION.FELT_PKG_SLIP_DETAIL D ";
            strSQL += "WHERE H.PKG_BALE_NO=D.PKG_BALE_NO ";
            strSQL += "AND H.PKG_BALE_DATE=D.PKG_BALE_DATE ";
            strSQL += "AND H.APPROVED=1 AND H.CANCELED=0 ";
            strSQL += "AND H.PKG_BALE_NO IS NOT NULL ";
            strSQL += "AND H.PKG_BALE_NO!='' ";
            strSQL += "AND (H.INVOICE_FLG=0 OR H.INVOICE_FLG IS NULL) ";
            strSQL += "AND (H.BALE_REOPEN_FLG=0 OR H.BALE_REOPEN_FLG IS NULL) ";
            strSQL += "AND H.PKG_BALE_NO NOT IN (SELECT DISTINCT PKG_BALE_NO FROM "
                    + "(SELECT H.PC_DOC_NO,D.PIECE_NO AS PIECE_NO FROM PRODUCTION.FELT_SALES_PIECE_CLUBBING_HEADER H, PRODUCTION.FELT_SALES_PIECE_CLUBBING_DETAIL D "
                    + "WHERE H.PC_DOC_NO=D.PC_DOC_NO AND H.CANCELED=0) AS A "
                    + "LEFT JOIN "
                    + "(SELECT H.PKG_BALE_NO,D.PKG_PIECE_NO AS PKG_PIECE_NO FROM PRODUCTION.FELT_PKG_SLIP_HEADER H, PRODUCTION.FELT_PKG_SLIP_DETAIL D "
                    + "WHERE H.PKG_BALE_NO=D.PKG_BALE_NO AND H.PKG_BALE_DATE=D.PKG_BALE_DATE AND H.APPROVED=1 AND H.CANCELED=0 "
                    + "AND H.PKG_BALE_NO IS NOT NULL AND H.PKG_BALE_NO!='' "
                    + "AND (H.INVOICE_FLG=0 OR H.INVOICE_FLG IS NULL) AND (H.BALE_REOPEN_FLG=0 OR H.BALE_REOPEN_FLG IS NULL)) AS B "
                    + "ON A.PIECE_NO=B.PKG_PIECE_NO "
                    + "WHERE COALESCE(PKG_BALE_NO,'')!='') ";
            strSQL += "ORDER BY H.PKG_BALE_NO,H.PKG_BALE_DATE";

            String pNo = "", len = "", wdth = "", gsm = "";
            System.out.println(strSQL);

            ResultSet rsTmp = data.getResult(strSQL);
            rsTmp.first();

            int Counter = 0;

            if (rsTmp.getRow() > 0) {

                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    // objRow=objReportData.newRow();
                    Object[] rowData = new Object[20];

                    //objRow=objReportData.newRow();
                    //  rowData[0]=UtilFunctions.getString(rsTmp,"","");
                    //rowData[0]=UtilFunctions.getString(rsTmp,"INVOICE_NO","");
                    //rowData[0]=Counter;//UtilFunctions.getString(rsTmp,"PARTY_NAME","");
                    rowData[1] = UtilFunctions.getString(rsTmp, "PKG_BALE_NO", "");
                    rowData[2] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp, "PKG_BALE_DATE", ""));
                    rowData[3] = UtilFunctions.getString(rsTmp, "PKG_PARTY_CODE", "");
                    rowData[4] = UtilFunctions.getString(rsTmp, "PKG_PARTY_NAME", "");

                    String chargeCd = data.getStringValueFromDB("SELECT CHARGE_CODE FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 AND PARTY_CODE = '" + rsTmp.getString("PKG_PARTY_CODE") + "' ");

                    rowData[5] = chargeCd;

                    //String strSQL1 = "SELECT D.PKG_PIECE_NO,D.PKG_LENGTH,D.PKG_WIDTH,D.PKG_GSM FROM  PRODUCTION.FELT_PKG_SLIP_HEADER H, PRODUCTION.FELT_PKG_SLIP_DETAIL D WHERE H.PKG_BALE_NO=D.PKG_BALE_NO AND D.PKG_BALE_NO='" + rsTmp.getString("PKG_BALE_NO") + "' AND H.APPROVED=1 AND H.CANCELED=0 AND H.PKG_BALE_NO IS NOT NULL AND H.PKG_BALE_NO!='' ORDER BY D.PKG_PIECE_NO";
//                    String strSQL1 = "SELECT D.PKG_PIECE_NO,D.PKG_LENGTH,D.PKG_WIDTH,D.PKG_GSM FROM  PRODUCTION.FELT_PKG_SLIP_HEADER H, PRODUCTION.FELT_PKG_SLIP_DETAIL D WHERE H.PKG_BALE_NO=D.PKG_BALE_NO AND H.PKG_BALE_DATE=D.PKG_BALE_DATE AND D.PKG_BALE_NO='" + rsTmp.getString("PKG_BALE_NO") + "' AND D.PKG_BALE_DATE='" + rsTmp.getString("PKG_BALE_DATE") + "' AND H.APPROVED=1 AND H.CANCELED=0 AND H.PKG_BALE_NO IS NOT NULL AND H.PKG_BALE_NO!='' ORDER BY D.PKG_PIECE_NO";
                    String strSQL1 = "SELECT D.PKG_PIECE_NO,D.PKG_LENGTH,D.PKG_WIDTH,D.PKG_GSM,D.PKG_MACHINE_NO,D.PKG_MCN_POSITION_DESC FROM  PRODUCTION.FELT_PKG_SLIP_HEADER H, PRODUCTION.FELT_PKG_SLIP_DETAIL D WHERE H.PKG_BALE_NO=D.PKG_BALE_NO AND H.PKG_BALE_DATE=D.PKG_BALE_DATE AND D.PKG_BALE_NO='" + rsTmp.getString("PKG_BALE_NO") + "' AND D.PKG_BALE_DATE='" + rsTmp.getString("PKG_BALE_DATE") + "' AND H.APPROVED=1 AND H.CANCELED=0 AND H.PKG_BALE_NO IS NOT NULL AND H.PKG_BALE_NO!='' ORDER BY D.PKG_PIECE_NO";
                    ResultSet rs = data.getResult(strSQL1);
//                    System.out.println("cnt : " + rs.getRow());
                    int cnt = 0;

                    pNo = rs.getString("PKG_PIECE_NO");
                    len = rs.getString("PKG_LENGTH");
                    wdth = rs.getString("PKG_WIDTH");
                    gsm = rs.getString("PKG_GSM");

                    String machineNo = rs.getString("PKG_MACHINE_NO");
                    String positionNo = rs.getString("PKG_MCN_POSITION_DESC");

                    if (rs.getRow() > 0) {
                        while (!rs.isAfterLast()) {
                            cnt++;

                            if (cnt > 1) {
                                pNo = pNo + ",".concat(rs.getString("PKG_PIECE_NO"));
                                len = len + ",".concat(rs.getString("PKG_LENGTH"));
                                wdth = wdth + ",".concat(rs.getString("PKG_WIDTH"));
                                gsm = gsm + ",".concat(rs.getString("PKG_GSM"));
                            }
                            rs.next();
                        }
                    }

                    rowData[6] = cnt;
                    rowData[7] = pNo;
                    rowData[8] = len;
                    rowData[9] = wdth;
                    rowData[10] = gsm;

                    rowData[11] = "";
                    rowData[12] = machineNo;
                    rowData[13] = positionNo;

                    rowData[14] = data.getStringValueFromDB("SELECT POSITION_DESIGN_NO FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + positionNo + "'");
                    rowData[15] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + positionNo + "'");
                    rowData[16] = data.getStringValueFromDB("SELECT PR_UPN FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + pNo + "'");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void GenerateData(String PartyCode) {
        String strSQL = "";
        try {

//            String strSQL = "SELECT DISTINCT H.PKG_BALE_NO,H.PKG_BALE_DATE,H.PKG_PARTY_CODE,H.PKG_PARTY_NAME FROM  PRODUCTION.FELT_PKG_SLIP_HEADER H, PRODUCTION.FELT_PKG_SLIP_DETAIL D WHERE H.PKG_PARTY_CODE='"+PartyCode+"' AND H.PKG_BALE_NO=D.PKG_BALE_NO AND H.APPROVED=1 AND H.CANCELED=0 AND H.PKG_BALE_NO IS NOT NULL AND H.PKG_BALE_NO!='' AND H.INVOICE_FLG=0 AND H.BALE_REOPEN_FLG=0 ORDER BY H.PKG_BALE_NO";
            strSQL += "SELECT DISTINCT H.PKG_BALE_NO,H.PKG_BALE_DATE,H.PKG_PARTY_CODE,H.PKG_PARTY_NAME ";
            strSQL += "FROM PRODUCTION.FELT_PKG_SLIP_HEADER H, PRODUCTION.FELT_PKG_SLIP_DETAIL D ";
            strSQL += "WHERE H.PKG_PARTY_CODE='" + PartyCode + "' AND H.PKG_BALE_NO=D.PKG_BALE_NO ";
            strSQL += "AND H.PKG_BALE_DATE=D.PKG_BALE_DATE ";
            strSQL += "AND H.APPROVED=1 AND H.CANCELED=0 ";
            strSQL += "AND H.PKG_BALE_NO IS NOT NULL ";
            strSQL += "AND H.PKG_BALE_NO!='' ";
            strSQL += "AND (H.INVOICE_FLG=0 OR H.INVOICE_FLG IS NULL) ";
            strSQL += "AND (H.BALE_REOPEN_FLG=0 OR H.BALE_REOPEN_FLG IS NULL) ";
            strSQL += "AND H.PKG_BALE_NO NOT IN (SELECT DISTINCT PKG_BALE_NO FROM "
                    + "(SELECT H.PC_DOC_NO,D.PIECE_NO AS PIECE_NO FROM PRODUCTION.FELT_SALES_PIECE_CLUBBING_HEADER H, PRODUCTION.FELT_SALES_PIECE_CLUBBING_DETAIL D "
                    + "WHERE H.PC_DOC_NO=D.PC_DOC_NO AND H.CANCELED=0) AS A "
                    + "LEFT JOIN "
                    + "(SELECT H.PKG_BALE_NO,D.PKG_PIECE_NO AS PKG_PIECE_NO FROM PRODUCTION.FELT_PKG_SLIP_HEADER H, PRODUCTION.FELT_PKG_SLIP_DETAIL D "
                    + "WHERE H.PKG_BALE_NO=D.PKG_BALE_NO AND H.PKG_BALE_DATE=D.PKG_BALE_DATE AND H.APPROVED=1 AND H.CANCELED=0 "
                    + "AND H.PKG_BALE_NO IS NOT NULL AND H.PKG_BALE_NO!='' "
                    + "AND (H.INVOICE_FLG=0 OR H.INVOICE_FLG IS NULL) AND (H.BALE_REOPEN_FLG=0 OR H.BALE_REOPEN_FLG IS NULL)) AS B "
                    + "ON A.PIECE_NO=B.PKG_PIECE_NO "
                    + "WHERE COALESCE(PKG_BALE_NO,'')!='') ";
            strSQL += "ORDER BY H.PKG_BALE_NO,H.PKG_BALE_DATE";

            String pNo = "", len = "", wdth = "", gsm = "";
            System.out.println(strSQL);

            ResultSet rsTmp = data.getResult(strSQL);
            rsTmp.first();

            int Counter = 0;

            if (rsTmp.getRow() > 0) {

                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    // objRow=objReportData.newRow();
                    Object[] rowData = new Object[20];

                    //objRow=objReportData.newRow();
                    //  rowData[0]=UtilFunctions.getString(rsTmp,"","");
                    //rowData[0]=UtilFunctions.getString(rsTmp,"INVOICE_NO","");
                    //rowData[0]=Counter;//UtilFunctions.getString(rsTmp,"PARTY_NAME","");
                    rowData[1] = UtilFunctions.getString(rsTmp, "PKG_BALE_NO", "");
                    rowData[2] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp, "PKG_BALE_DATE", ""));
                    rowData[3] = UtilFunctions.getString(rsTmp, "PKG_PARTY_CODE", "");
                    rowData[4] = UtilFunctions.getString(rsTmp, "PKG_PARTY_NAME", "");

                    String chargeCd = data.getStringValueFromDB("SELECT CHARGE_CODE FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 AND PARTY_CODE = '" + rsTmp.getString("PKG_PARTY_CODE") + "' ");

                    rowData[5] = chargeCd;

                    //String strSQL1 = "SELECT D.PKG_PIECE_NO,D.PKG_LENGTH,D.PKG_WIDTH,D.PKG_GSM FROM  PRODUCTION.FELT_PKG_SLIP_HEADER H, PRODUCTION.FELT_PKG_SLIP_DETAIL D WHERE H.PKG_BALE_NO=D.PKG_BALE_NO AND D.PKG_BALE_NO='" + rsTmp.getString("PKG_BALE_NO") + "' AND H.APPROVED=1 AND H.CANCELED=0 AND H.PKG_BALE_NO IS NOT NULL AND H.PKG_BALE_NO!='' ORDER BY D.PKG_PIECE_NO";
//                    String strSQL1 = "SELECT D.PKG_PIECE_NO,D.PKG_LENGTH,D.PKG_WIDTH,D.PKG_GSM FROM  PRODUCTION.FELT_PKG_SLIP_HEADER H, PRODUCTION.FELT_PKG_SLIP_DETAIL D WHERE H.PKG_BALE_NO=D.PKG_BALE_NO AND H.PKG_BALE_DATE=D.PKG_BALE_DATE AND D.PKG_BALE_NO='" + rsTmp.getString("PKG_BALE_NO") + "' AND D.PKG_BALE_DATE='" + rsTmp.getString("PKG_BALE_DATE") + "' AND H.APPROVED=1 AND H.CANCELED=0 AND H.PKG_BALE_NO IS NOT NULL AND H.PKG_BALE_NO!='' ORDER BY D.PKG_PIECE_NO";
                    String strSQL1 = "SELECT D.PKG_PIECE_NO,D.PKG_LENGTH,D.PKG_WIDTH,D.PKG_GSM,D.PKG_MACHINE_NO,D.PKG_MCN_POSITION_DESC FROM  PRODUCTION.FELT_PKG_SLIP_HEADER H, PRODUCTION.FELT_PKG_SLIP_DETAIL D WHERE H.PKG_BALE_NO=D.PKG_BALE_NO AND H.PKG_BALE_DATE=D.PKG_BALE_DATE AND D.PKG_BALE_NO='" + rsTmp.getString("PKG_BALE_NO") + "' AND D.PKG_BALE_DATE='" + rsTmp.getString("PKG_BALE_DATE") + "' AND H.APPROVED=1 AND H.CANCELED=0 AND H.PKG_BALE_NO IS NOT NULL AND H.PKG_BALE_NO!='' ORDER BY D.PKG_PIECE_NO";
                    ResultSet rs = data.getResult(strSQL1);
                    System.out.println("cnt : " + rs.getRow());
                    int cnt = 0;

                    pNo = rs.getString("PKG_PIECE_NO");
                    len = rs.getString("PKG_LENGTH");
                    wdth = rs.getString("PKG_WIDTH");
                    gsm = rs.getString("PKG_GSM");

                    String machineNo = rs.getString("PKG_MACHINE_NO");
                    String positionNo = rs.getString("PKG_MCN_POSITION_DESC");

                    if (rs.getRow() > 0) {
                        while (!rs.isAfterLast()) {
                            cnt++;

                            if (cnt > 1) {
                                pNo = pNo + ",".concat(rs.getString("PKG_PIECE_NO"));
                                len = len + ",".concat(rs.getString("PKG_LENGTH"));
                                wdth = wdth + ",".concat(rs.getString("PKG_WIDTH"));
                                gsm = gsm + ",".concat(rs.getString("PKG_GSM"));
                            }
                            rs.next();
                        }
                    }

                    rowData[6] = cnt;
                    rowData[7] = pNo;
                    rowData[8] = len;
                    rowData[9] = wdth;
                    rowData[10] = gsm;

                    rowData[11] = "";
                    rowData[12] = machineNo;
                    rowData[13] = positionNo;

                    rowData[14] = data.getStringValueFromDB("SELECT POSITION_DESIGN_NO FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + positionNo + "'");
                    rowData[15] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + positionNo + "'");
                    rowData[16] = data.getStringValueFromDB("SELECT PR_UPN FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + pNo + "'");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void GeneratePieceClubbingData(String ClubbedNo) {
        String strSQL = "";
        try {

//            String strSQL = "SELECT DISTINCT H.PKG_BALE_NO,H.PKG_BALE_DATE,H.PKG_PARTY_CODE,H.PKG_PARTY_NAME FROM  PRODUCTION.FELT_PKG_SLIP_HEADER H, PRODUCTION.FELT_PKG_SLIP_DETAIL D WHERE H.PKG_PARTY_CODE='"+PartyCode+"' AND H.PKG_BALE_NO=D.PKG_BALE_NO AND H.APPROVED=1 AND H.CANCELED=0 AND H.PKG_BALE_NO IS NOT NULL AND H.PKG_BALE_NO!='' AND H.INVOICE_FLG=0 AND H.BALE_REOPEN_FLG=0 ORDER BY H.PKG_BALE_NO";
            strSQL += "SELECT DISTINCT H.PKG_BALE_NO,H.PKG_BALE_DATE,H.PKG_PARTY_CODE,H.PKG_PARTY_NAME ";
            strSQL += "FROM PRODUCTION.FELT_PKG_SLIP_HEADER H, PRODUCTION.FELT_PKG_SLIP_DETAIL D ";
            strSQL += "WHERE H.PKG_BALE_NO=D.PKG_BALE_NO ";
            strSQL += "AND H.PKG_BALE_DATE=D.PKG_BALE_DATE ";
            strSQL += "AND H.APPROVED=1 AND H.CANCELED=0 ";
            strSQL += "AND H.PKG_BALE_NO IS NOT NULL ";
            strSQL += "AND H.PKG_BALE_NO!='' ";
            strSQL += "AND (H.INVOICE_FLG=0 OR H.INVOICE_FLG IS NULL) ";
            strSQL += "AND (H.BALE_REOPEN_FLG=0 OR H.BALE_REOPEN_FLG IS NULL) ";
            strSQL += "AND H.PKG_BALE_NO IN (SELECT DISTINCT PKG_BALE_NO FROM "
                    + "(SELECT H.PC_DOC_NO,D.PIECE_NO AS PIECE_NO FROM PRODUCTION.FELT_SALES_PIECE_CLUBBING_HEADER H, PRODUCTION.FELT_SALES_PIECE_CLUBBING_DETAIL D "
                    + "WHERE H.PC_DOC_NO=D.PC_DOC_NO AND H.CANCELED=0 AND H.PC_DOC_NO='" + ClubbedNo + "') AS A "
                    + "LEFT JOIN "
                    + "(SELECT H.PKG_BALE_NO,D.PKG_PIECE_NO AS PKG_PIECE_NO FROM PRODUCTION.FELT_PKG_SLIP_HEADER H, PRODUCTION.FELT_PKG_SLIP_DETAIL D "
                    + "WHERE H.PKG_BALE_NO=D.PKG_BALE_NO AND H.PKG_BALE_DATE=D.PKG_BALE_DATE AND H.APPROVED=1 AND H.CANCELED=0 "
                    + "AND H.PKG_BALE_NO IS NOT NULL AND H.PKG_BALE_NO!='' "
                    + "AND (H.INVOICE_FLG=0 OR H.INVOICE_FLG IS NULL) AND (H.BALE_REOPEN_FLG=0 OR H.BALE_REOPEN_FLG IS NULL)) AS B "
                    + "ON A.PIECE_NO=B.PKG_PIECE_NO "
                    + "WHERE COALESCE(PKG_BALE_NO,'')!='') ";
            strSQL += "ORDER BY H.PKG_BALE_NO,H.PKG_BALE_DATE";

            String pNo = "", len = "", wdth = "", gsm = "";
            System.out.println(strSQL);

            ResultSet rsTmp = data.getResult(strSQL);
            rsTmp.first();

            int Counter = 0;

            if (rsTmp.getRow() > 0) {

                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    // objRow=objReportData.newRow();
                    Object[] rowData = new Object[20];

                    //objRow=objReportData.newRow();
                    //  rowData[0]=UtilFunctions.getString(rsTmp,"","");
                    //rowData[0]=UtilFunctions.getString(rsTmp,"INVOICE_NO","");
                    //rowData[0]=Counter;//UtilFunctions.getString(rsTmp,"PARTY_NAME","");
                    rowData[1] = UtilFunctions.getString(rsTmp, "PKG_BALE_NO", "");
                    rowData[2] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp, "PKG_BALE_DATE", ""));
                    rowData[3] = UtilFunctions.getString(rsTmp, "PKG_PARTY_CODE", "");
                    rowData[4] = UtilFunctions.getString(rsTmp, "PKG_PARTY_NAME", "");

                    String chargeCd = data.getStringValueFromDB("SELECT CHARGE_CODE FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 AND PARTY_CODE = '" + rsTmp.getString("PKG_PARTY_CODE") + "' ");

                    rowData[5] = chargeCd;

                    //String strSQL1 = "SELECT D.PKG_PIECE_NO,D.PKG_LENGTH,D.PKG_WIDTH,D.PKG_GSM FROM  PRODUCTION.FELT_PKG_SLIP_HEADER H, PRODUCTION.FELT_PKG_SLIP_DETAIL D WHERE H.PKG_BALE_NO=D.PKG_BALE_NO AND D.PKG_BALE_NO='" + rsTmp.getString("PKG_BALE_NO") + "' AND H.APPROVED=1 AND H.CANCELED=0 AND H.PKG_BALE_NO IS NOT NULL AND H.PKG_BALE_NO!='' ORDER BY D.PKG_PIECE_NO";
//                    String strSQL1 = "SELECT D.PKG_PIECE_NO,D.PKG_LENGTH,D.PKG_WIDTH,D.PKG_GSM FROM  PRODUCTION.FELT_PKG_SLIP_HEADER H, PRODUCTION.FELT_PKG_SLIP_DETAIL D WHERE H.PKG_BALE_NO=D.PKG_BALE_NO AND H.PKG_BALE_DATE=D.PKG_BALE_DATE AND D.PKG_BALE_NO='" + rsTmp.getString("PKG_BALE_NO") + "' AND D.PKG_BALE_DATE='" + rsTmp.getString("PKG_BALE_DATE") + "' AND H.APPROVED=1 AND H.CANCELED=0 AND H.PKG_BALE_NO IS NOT NULL AND H.PKG_BALE_NO!='' ORDER BY D.PKG_PIECE_NO";
                    String strSQL1 = "SELECT D.PKG_PIECE_NO,D.PKG_LENGTH,D.PKG_WIDTH,D.PKG_GSM,D.PKG_MACHINE_NO,D.PKG_MCN_POSITION_DESC FROM  PRODUCTION.FELT_PKG_SLIP_HEADER H, PRODUCTION.FELT_PKG_SLIP_DETAIL D WHERE H.PKG_BALE_NO=D.PKG_BALE_NO AND H.PKG_BALE_DATE=D.PKG_BALE_DATE AND D.PKG_BALE_NO='" + rsTmp.getString("PKG_BALE_NO") + "' AND D.PKG_BALE_DATE='" + rsTmp.getString("PKG_BALE_DATE") + "' AND H.APPROVED=1 AND H.CANCELED=0 AND H.PKG_BALE_NO IS NOT NULL AND H.PKG_BALE_NO!='' ORDER BY D.PKG_PIECE_NO";
                    ResultSet rs = data.getResult(strSQL1);
                    System.out.println("cnt : " + rs.getRow());
                    int cnt = 0;

                    pNo = rs.getString("PKG_PIECE_NO");
                    len = rs.getString("PKG_LENGTH");
                    wdth = rs.getString("PKG_WIDTH");
                    gsm = rs.getString("PKG_GSM");

                    String machineNo = rs.getString("PKG_MACHINE_NO");
                    String positionNo = rs.getString("PKG_MCN_POSITION_DESC");

                    if (rs.getRow() > 0) {
                        while (!rs.isAfterLast()) {
                            cnt++;

                            if (cnt > 1) {
                                pNo = pNo + ",".concat(rs.getString("PKG_PIECE_NO"));
                                len = len + ",".concat(rs.getString("PKG_LENGTH"));
                                wdth = wdth + ",".concat(rs.getString("PKG_WIDTH"));
                                gsm = gsm + ",".concat(rs.getString("PKG_GSM"));
                            }
                            rs.next();
                        }
                    }

                    rowData[6] = cnt;
                    rowData[7] = pNo;
                    rowData[8] = len;
                    rowData[9] = wdth;
                    rowData[10] = gsm;

                    rowData[11] = "";
                    rowData[12] = machineNo;
                    rowData[13] = positionNo;

                    rowData[14] = data.getStringValueFromDB("SELECT POSITION_DESIGN_NO FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + positionNo + "'");
                    rowData[15] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + positionNo + "'");
                    rowData[16] = data.getStringValueFromDB("SELECT PR_UPN FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + pNo + "'");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            } else {
                JOptionPane.showMessageDialog(null, "No Piece in BSR");
                rbtnSelect.setSelected(true);
                rbtnSelectMouseClicked(null);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void UpdatePieceDetail() {

        //PIECE DETAIL UPDATION FOR PIECE FROM PIECE REGISTER 
        ResultSet rsPieceDetail = null, rsUpdatePiece = null;

        try {
            String PieceDetail = "SELECT PIECE_NO FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS";
            rsPieceDetail = data.getResult(PieceDetail);
            rsPieceDetail.first();
            if (rsPieceDetail.getRow() > 0) {
                while (!rsPieceDetail.isAfterLast()) {

                    String pieceDetail = "SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + rsPieceDetail.getString("PIECE_NO") + "'";
                    rsUpdatePiece = data.getResult(pieceDetail);

                    String pieceNo = rsPieceDetail.getString("PIECE_NO");
                    String mcnNo = rsUpdatePiece.getString("PR_MACHINE_NO");
                    String pstnNo = rsUpdatePiece.getString("PR_POSITION_NO");
                    //String prodCd = rsUpdatePiece.getString("PR_PRODUCT_CODE");
                    String prodCd = rsUpdatePiece.getString("PR_BILL_PRODUCT_CODE");
                    String grp = rsUpdatePiece.getString("PR_GROUP");
                    String style = rsUpdatePiece.getString("PR_BILL_STYLE");
                    float length = rsUpdatePiece.getFloat("PR_LENGTH");
                    float width = rsUpdatePiece.getFloat("PR_WIDTH");
                    //float gsm = rsUpdatePiece.getFloat("PR_GSM");
                    float gsm = rsUpdatePiece.getFloat("PR_BILL_GSM");
                    float t_weight = rsUpdatePiece.getFloat("PR_THORITICAL_WEIGHT");
                    //float sqmtr = rsUpdatePiece.getFloat("PR_SQMTR");
                    float sqmtr = rsUpdatePiece.getFloat("PR_BILL_SQMTR");

                    String synper = rsUpdatePiece.getString("PR_SYN_PER");
//                    float a_weight = rsUpdatePiece.getFloat("PR_ACTUAL_WEIGHT");
//                    float a_length = rsUpdatePiece.getFloat("PR_ACTUAL_LENGTH");
//                    float a_width = rsUpdatePiece.getFloat("PR_ACTUAL_WIDTH");
                    float a_weight = rsUpdatePiece.getFloat("PR_BILL_WEIGHT");
                    float a_length = rsUpdatePiece.getFloat("PR_BILL_LENGTH");
                    float a_width = rsUpdatePiece.getFloat("PR_BILL_WIDTH");

                    String materialCode = rsUpdatePiece.getString("PR_MATERIAL_CODE");

                    String upSQL = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET MACHINE_NO='" + mcnNo + "',POSITION_NO='" + pstnNo + "',PRODUCT_CODE='" + prodCd + "',GROUP_NAME='" + grp + "',STYLE='" + style + "',LENGTH=" + a_length + ",WIDTH=" + a_width + ",GSM=" + gsm + ",THORITICAL_WEIGHT=" + t_weight + ",SQMTR=" + sqmtr + ",SYN_PER='" + synper + "',ACTUAL_WEIGHT=" + a_weight + ",ACTUAL_LENGTH=" + a_length + ",ACTUAL_WIDTH=" + a_width + ",MATERIAL_CODE='" + materialCode + "' WHERE PIECE_NO='" + pieceNo + "' ";
                    data.Execute(upSQL);

                    rsPieceDetail.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public static void InvValReport1() {
        String strSQL = "";
        String Condition = "";
        ResultSet rsData = null;
        TReportEngine objEngine1 = new TReportEngine();
        TReportWriter.SimpleDataProvider.TTable objData = new TReportWriter.SimpleDataProvider.TTable();

        try {
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("AMOUNT");

            strSQL = "SELECT PARTY_CODE,SUM(INVOICE_AMT) AS AMOUNT FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS GROUP BY PARTY_CODE ";

            rsData = data.getResult(strSQL);
            System.out.println(strSQL);
            rsData.first();
            TReportWriter.SimpleDataProvider.TRow objRow = null;
            if (rsData.getRow() > 0) {
                while (!rsData.isAfterLast()) {
                    objRow = objData.newRow();
                    double Amount = UtilFunctions.getDouble(rsData, "AMOUNT", 0);
                    String PartyName = data.getStringValueFromDB("SELECT PARTY_NAME FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + rsData.getString("PARTY_CODE") + "' AND MAIN_ACCOUNT_CODE='210010' ");

                    //Amount = clsAccount.get09AmountByVoucher(VoucherNo,MainCode,SubAccountCode,Amount);
                    if (Amount > 0) {
                        objRow.setValue("PARTY_CODE", UtilFunctions.getString(rsData, "PARTY_CODE", ""));
                        //objRow.setValue("PARTY_NAME", clsPartyMaster.getAccountName("210010", UtilFunctions.getString(rsData, "PARTY_CODE", "")));
                        objRow.setValue("PARTY_NAME", PartyName);
                        objRow.setValue("AMOUNT", Double.toString(Amount));
                        objData.AddRow(objRow);
                    }
                    rsData.next();
                }
            }

            HashMap Parameters = new HashMap();

            //Parameters.put("PARTY_NAME", clsPartyMaster.getAccountName(MainCode.trim(), ""));
            Parameters.put("AS_ON_DATE", EITLERPGLOBAL.getCurrentDate());
            Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());
            objEngine1.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptInvValue.rpt", Parameters, objData);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void InvValReport() {
        String strSQL = "";
        String Condition = "";
        ResultSet rsData = null;
        TReportEngine objEngine1 = new TReportEngine();
        TReportWriter.SimpleDataProvider.TTable objData = new TReportWriter.SimpleDataProvider.TTable();

        try {
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("BALE_NO");
            objData.AddColumn("PIECE_NO");
            objData.AddColumn("BAS_AMT");
            objData.AddColumn("SEAM_CHG");
            objData.AddColumn("DISC_AMT");
            objData.AddColumn("TAXES");
            objData.AddColumn("INSURANCE_AMT");
            objData.AddColumn("AMOUNT");

            strSQL = "SELECT PARTY_CODE,INVOICE_AMT AS AMOUNT,BALE_NO,PIECE_NO,BAS_AMT,SEAM_CHG,DISC_AMT,(IGST_AMT+SGST_AMT+CGST_AMT+GST_COMP_CESS_AMT) AS TAXES,SD_AMT,INSURANCE_AMT FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS ORDER BY PARTY_CODE,BALE_NO,PIECE_NO ";

            rsData = data.getResult(strSQL);
            System.out.println(strSQL);
            rsData.first();
            TReportWriter.SimpleDataProvider.TRow objRow = null;
            if (rsData.getRow() > 0) {
                while (!rsData.isAfterLast()) {
                    objRow = objData.newRow();
                    double Amount = UtilFunctions.getDouble(rsData, "AMOUNT", 0);
                    String PartyName = data.getStringValueFromDB("SELECT SUBSTRING(PARTY_NAME,1,16) AS PARTY_NAME FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + rsData.getString("PARTY_CODE") + "' AND MAIN_ACCOUNT_CODE='210010' ");

                    //Amount = clsAccount.get09AmountByVoucher(VoucherNo,MainCode,SubAccountCode,Amount);
                    if (Amount > 0) {
                        objRow.setValue("PARTY_CODE", UtilFunctions.getString(rsData, "PARTY_CODE", ""));
                        //objRow.setValue("PARTY_NAME", clsPartyMaster.getAccountName("210010", UtilFunctions.getString(rsData, "PARTY_CODE", "")));
                        objRow.setValue("PARTY_NAME", PartyName);
                        objRow.setValue("BALE_NO", UtilFunctions.getString(rsData, "BALE_NO", ""));
                        objRow.setValue("PIECE_NO", UtilFunctions.getString(rsData, "PIECE_NO", ""));
                        objRow.setValue("BAS_AMT", Double.toString(UtilFunctions.getDouble(rsData, "BAS_AMT", 0)));
                        objRow.setValue("SEAM_CHG", Double.toString(UtilFunctions.getDouble(rsData, "SEAM_CHG", 0)));
                        objRow.setValue("DISC_AMT", Double.toString(UtilFunctions.getDouble(rsData, "DISC_AMT", 0)));
                        objRow.setValue("TAXES", Double.toString(UtilFunctions.getDouble(rsData, "TAXES", 0)));
                        objRow.setValue("INSURANCE_AMT", Double.toString(UtilFunctions.getDouble(rsData, "INSURANCE_AMT", 0)));
                        objRow.setValue("AMOUNT", Double.toString(Amount));
                        objData.AddRow(objRow);
                    }
                    rsData.next();
                }
            }

            HashMap Parameters = new HashMap();

            //Parameters.put("PARTY_NAME", clsPartyMaster.getAccountName(MainCode.trim(), ""));
            Parameters.put("AS_ON_DATE", EITLERPGLOBAL.getCurrentDate());
            Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());
            objEngine1.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/FeltSales/rptInvValue.rpt", Parameters, objData);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void InvCheckListReport() {
        String strSQL = "";
        String Condition = "";
        ResultSet rsData = null;
        TReportEngine objEngine1 = new TReportEngine();
        TReportWriter.SimpleDataProvider.TTable objData = new TReportWriter.SimpleDataProvider.TTable();

        try {
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("BALE_NO");
            objData.AddColumn("BALE_DATE");
            objData.AddColumn("CHARGE_CODE");
            objData.AddColumn("INVOICE_AMT");
            objData.AddColumn("MASTER_AMT");
            objData.AddColumn("BALANCE_AMT");
            objData.AddColumn("REMARK");
            objData.AddColumn("INVOICE_NO");

            //strSQL = "SELECT PARTY_CODE,BALE_NO,PKG_BALE_DATE AS BALE_DATE,CHARGE_CODE,CONCAT('FE/',INVOICE_NO) AS INVOICE_NO,INVOICE_AMT,CRITICAL_LIMIT_AMT AS MASTER_AMT,INV_CRITICAL_LIMIT_AMT AS BALANCE_AMT,CASE WHEN FLAG=0 THEN \"UNSUFFICIENT BAL\" ELSE \"PROCESSED\" END AS REMARK FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER I,PRODUCTION.FELT_PKG_SLIP_HEADER P WHERE BALE_NO=PKG_BALE_NO";
            strSQL = "SELECT PARTY_CODE,BALE_NO,PKG_BALE_DATE AS BALE_DATE,CHARGE_CODE,CASE WHEN CHECK_POINT_REMARK!='' THEN '' ELSE CONCAT('FE/',INVOICE_NO) END AS INVOICE_NO,INVOICE_AMT,CRITICAL_LIMIT_AMT AS MASTER_AMT,INV_CRITICAL_LIMIT_AMT AS BALANCE_AMT,CHECK_POINT_REMARK AS REMARK FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER I,PRODUCTION.FELT_PKG_SLIP_HEADER P WHERE BALE_NO=PKG_BALE_NO ORDER BY PKG_BALE_DATE DESC";

            rsData = data.getResult(strSQL);
            System.out.println(strSQL);
            rsData.first();
            TReportWriter.SimpleDataProvider.TRow objRow = null;
            if (rsData.getRow() > 0) {
                while (!rsData.isAfterLast()) {
                    objRow = objData.newRow();

                    objRow.setValue("PARTY_CODE", rsData.getString("PARTY_CODE"));
                    objRow.setValue("BALE_NO", rsData.getString("BALE_NO"));
                    objRow.setValue("BALE_DATE", EITLERPGLOBAL.formatDate(rsData.getString("BALE_DATE")));
                    objRow.setValue("CHARGE_CODE", rsData.getString("CHARGE_CODE"));
                    objRow.setValue("INVOICE_AMT", Double.toString(rsData.getDouble("INVOICE_AMT")));
                    objRow.setValue("MASTER_AMT", Double.toString(rsData.getDouble("MASTER_AMT")));
                    objRow.setValue("BALANCE_AMT", Double.toString(rsData.getDouble("BALANCE_AMT")));
                    objRow.setValue("REMARK", rsData.getString("REMARK"));
                    objRow.setValue("INVOICE_NO", rsData.getString("INVOICE_NO"));

                    objData.AddRow(objRow);

                    rsData.next();
                }
            }

            HashMap Parameters = new HashMap();

            //Parameters.put("PARTY_NAME", clsPartyMaster.getAccountName(MainCode.trim(), ""));
            //Parameters.put("AS_ON_DATE", EITLERPGLOBAL.getCurrentDate());
            Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());
            objEngine1.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/Production/rptFeltInvList.rpt", Parameters, objData);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void OutstandingReport() {

        String strSQL = "";
        String Condition = "";
        ResultSet rsData = null;
        TReportEngine objEngine1 = new TReportEngine();
        TReportWriter.SimpleDataProvider.TTable objData = new TReportWriter.SimpleDataProvider.TTable();

        try {
            objData.AddColumn("SUB_PARTY_CODE");
            objData.AddColumn("GROUP_DESC");
            //objData.AddColumn("MAIN_PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("AMOUNT");
            objData.AddColumn("GRP_AMOUNT");
            objData.AddColumn("PARTY_LIMIT");
            objData.AddColumn("GROUP_LIMIT");

//            strSQL = "SELECT SUB_PARTY_CODE ,SUB_OUTSTANDING_BAL AS AMOUNT FROM TEMP_DATABASE.TEMP_OUTSTANDING_REPORT ";
            strSQL = "SELECT DISTINCT SUB_PARTY_CODE,MAIN_PARTY_CODE,SUB_OUTSTANDING_BAL AS AMOUNT FROM TEMP_DATABASE.TEMP_OUTSTANDING_AMT";

            rsData = data.getResult(strSQL);
            System.out.println(strSQL);
            rsData.first();
            TReportWriter.SimpleDataProvider.TRow objRow = null;
            if (rsData.getRow() > 0) {
                while (!rsData.isAfterLast()) {
                    objRow = objData.newRow();
                    //String SubAccountCode = UtilFunctions.getString(rsData, "SUB_PARTY_CODE", "");
                    double Amount = UtilFunctions.getDouble(rsData, "AMOUNT", 0);
                    String PartyName = data.getStringValueFromDB("SELECT PARTY_NAME FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + rsData.getString("SUB_PARTY_CODE") + "' AND MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0");
                    double pLimit = 0;
                    if (data.IsRecordExist("SELECT D.PARTY_CODE FROM PRODUCTION.FELT_GROUP_MASTER_DETAIL D,PRODUCTION.FELT_GROUP_MASTER_HEADER H WHERE D.GROUP_CODE=H.GROUP_CODE AND D.PARTY_CODE ='" + rsData.getString("SUB_PARTY_CODE") + "' AND H.APPROVED=1 AND H.CANCELED=0")) {
                        pLimit = data.getDoubleValueFromDB("SELECT D.CRITICAL_LIMIT FROM PRODUCTION.FELT_GROUP_MASTER_DETAIL D,PRODUCTION.FELT_GROUP_MASTER_HEADER H WHERE D.GROUP_CODE=H.GROUP_CODE AND D.PARTY_CODE ='" + rsData.getString("SUB_PARTY_CODE") + "' AND H.APPROVED=1 AND H.CANCELED=0");
                    } else {
                        pLimit = data.getDoubleValueFromDB("SELECT AMOUNT_LIMIT FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE ='" + rsData.getString("SUB_PARTY_CODE") + "' AND MAIN_ACCOUNT_CODE=210010 AND APPROVED=1 AND CANCELLED=0");
                    }

                    //Amount = clsAccount.get09AmountByVoucher(VoucherNo,MainCode,SubAccountCode,Amount);
                    //if (Amount > 0) {
                    objRow.setValue("SUB_PARTY_CODE", UtilFunctions.getString(rsData, "SUB_PARTY_CODE", ""));
                    objRow.setValue("GROUP_DESC", data.getStringValueFromDB("SELECT H.GROUP_DESC FROM PRODUCTION.FELT_GROUP_MASTER_DETAIL D,PRODUCTION.FELT_GROUP_MASTER_HEADER H WHERE D.GROUP_CODE=H.GROUP_CODE AND D.PARTY_CODE ='" + rsData.getString("SUB_PARTY_CODE") + "' AND H.APPROVED=1 AND H.CANCELED=0"));
//                        objRow.setValue("PARTY_NAME", clsPartyMaster.getAccountName("210010", UtilFunctions.getString(rsData, "SUB_PARTY_CODE", "")));
                    objRow.setValue("PARTY_NAME", PartyName);
                    objRow.setValue("AMOUNT", Double.toString(Amount));
                    objRow.setValue("GRP_AMOUNT", Double.toString(data.getDoubleValueFromDB("SELECT SUB_OUTSTANDING_BAL FROM TEMP_DATABASE.TEMP_OUTSTANDING_REPORT WHERE MAIN_PARTY_CODE IN (SELECT MAIN_PARTY_CODE FROM TEMP_DATABASE.TEMP_OUTSTANDING_AMT WHERE SUB_PARTY_CODE='" + rsData.getString("SUB_PARTY_CODE") + "')")));
//                        objRow.setValue("PARTY_LIMIT", Double.toString(data.getDoubleValueFromDB("SELECT D.CRITICAL_LIMIT FROM PRODUCTION.FELT_GROUP_MASTER_DETAIL D,PRODUCTION.FELT_GROUP_MASTER_HEADER H WHERE D.GROUP_CODE=H.GROUP_CODE AND D.PARTY_CODE ='"+rsData.getString("SUB_PARTY_CODE")+"' AND H.APPROVED=1 AND H.CANCELED=0")));
                    objRow.setValue("PARTY_LIMIT", Double.toString(pLimit));
                    objRow.setValue("GROUP_LIMIT", Double.toString(data.getDoubleValueFromDB("SELECT H.GROUP_CRITICAL_LIMIT FROM PRODUCTION.FELT_GROUP_MASTER_DETAIL D,PRODUCTION.FELT_GROUP_MASTER_HEADER H WHERE D.GROUP_CODE=H.GROUP_CODE AND D.PARTY_CODE ='" + rsData.getString("SUB_PARTY_CODE") + "' AND H.APPROVED=1 AND H.CANCELED=0")));
                    objData.AddRow(objRow);
                    //}
                    rsData.next();
                }
            }

            HashMap Parameters = new HashMap();

            //Parameters.put("PARTY_NAME", MainCode + " - " + clsPartyMaster.getAccountName(MainCode.trim(), ""));
            Parameters.put("AS_ON_DATE", EITLERPGLOBAL.getCurrentDate());
            Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());
            objEngine1.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptOutstandingAmountSummary.rpt", Parameters, objData);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void AdvAmt() {
        String AsOnDate = EITLERPGLOBAL.getCurrentDateDB();
        String MainCode = "210010";
        int cnt = 0;

        data.Execute("TRUNCATE TEMP_DATABASE.TEMP_ADV_AMT");

        if (rbtnText.isSelected()) {
            String S = txtManual.getText().trim();

            String[] bno = S.split(",");

            for (int i = 0; i < bno.length; i++) {
                bno[i] = bno[i].replaceAll("[^\\w]", ",");
                System.out.println("String Bno : " + bno[i]);
                String PartyCode = "SELECT PKG_PARTY_CODE FROM  PRODUCTION.FELT_PKG_SLIP_HEADER WHERE PKG_BALE_NO='" + bno[i] + "'  AND APPROVED=1 AND CANCELED=0 AND PKG_BALE_NO IS NOT NULL AND PKG_BALE_NO!='' ORDER BY PKG_BALE_DATE DESC";
                String FromSubCode = data.getStringValueFromDB(PartyCode);
                data.Execute("INSERT INTO TEMP_DATABASE.TEMP_ADV_AMT (SUB_PARTY_CODE,SUB_ADV_BAL) SELECT B.SUB_ACCOUNT_CODE, SUM(B.AMOUNT) AS AMOUNT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                        + "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND A.VOUCHER_DATE<='" + AsOnDate + "' AND A.VOUCHER_TYPE IN (6,7,8,9,12) AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE = '" + FromSubCode + "' "
                        + "AND A.APPROVED=1 AND A.CANCELLED=0 AND A.EXCLUDE_IN_ADJ =0 AND B.EFFECT='C' AND B.INVOICE_NO ='' AND B.MODULE_ID <>65 "
                        + "AND B.GRN_NO ='' AND (B.MATCHED=0 OR B.MATCHED IS NULL) "
                        + "GROUP BY B.SUB_ACCOUNT_CODE "
                        + "ORDER BY B.SUB_ACCOUNT_CODE");
            }

        }

        if (rbtnSelect.isSelected() || rbtnClubbing.isSelected()) {
            //System.out.println("ding");
            for (int j = 0; j < Table.getRowCount(); j++) {
                //System.out.println("ROW : "+Table.getSelectedRow()+" : Boolean : "+Table.getValueAt(j, 0)+" : col 2 : "+Table.getValueAt(j, 1));

                if (Table.getValueAt(j, 0).equals(true)) {
//                    cnt++;
                    data.Execute("INSERT INTO TEMP_DATABASE.TEMP_ADV_AMT (SUB_PARTY_CODE,SUB_ADV_BAL) SELECT B.SUB_ACCOUNT_CODE, SUM(B.AMOUNT) AS AMOUNT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                            + "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND A.VOUCHER_DATE<='" + AsOnDate + "' AND A.VOUCHER_TYPE IN (6,7,8,9,12) AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE = '" + Table.getValueAt(j, 3) + "' "
                            + "AND A.APPROVED=1 AND A.CANCELLED=0 AND A.EXCLUDE_IN_ADJ =0 AND B.EFFECT='C' AND B.INVOICE_NO ='' AND B.MODULE_ID <>65 "
                            + "AND B.GRN_NO ='' AND (B.MATCHED=0 OR B.MATCHED IS NULL) "
                            + "GROUP BY B.SUB_ACCOUNT_CODE "
                            + "ORDER BY B.SUB_ACCOUNT_CODE");
//                    System.out.println("COUNT : "+cnt);
                }
            }

        }

        //UPDATE TABLE INV_PROCESS
    }

    public void OutStandingAmt() {
        String AsOnDate = EITLERPGLOBAL.getCurrentDateDB();
        String MainCode = "210010";
        int cnt = 0;

        data.Execute("TRUNCATE TEMP_DATABASE.TEMP_OUTSTANDING_AMT");
        data.Execute("TRUNCATE TEMP_DATABASE.TEMP_OUTSTANDING_REPORT");

        if (rbtnText.isSelected()) {
            String S = txtManual.getText().trim();
            String[] bno = S.split(",");

            for (int i = 0; i < bno.length; i++) {
                bno[i] = bno[i].replaceAll("[^\\w]", ",");
                System.out.println("String Bno : " + bno[i]);
                String PartyCode = "SELECT PKG_PARTY_CODE FROM  PRODUCTION.FELT_PKG_SLIP_HEADER WHERE PKG_BALE_NO='" + bno[i] + "'  AND APPROVED=1 AND CANCELED=0 AND PKG_BALE_NO IS NOT NULL AND PKG_BALE_NO!='' ORDER BY PKG_BALE_DATE DESC";
                String SubPartyCode = data.getStringValueFromDB(PartyCode);
                data.Execute("INSERT INTO TEMP_DATABASE.TEMP_OUTSTANDING_AMT (SUB_PARTY_CODE) VALUES ('" + SubPartyCode + "')");
            }

        }

        if (rbtnSelect.isSelected() || rbtnClubbing.isSelected()) {
            //System.out.println("ding");
            for (int j = 0; j < Table.getRowCount(); j++) {
                //System.out.println("ROW : "+Table.getSelectedRow()+" : Boolean : "+Table.getValueAt(j, 0)+" : col 2 : "+Table.getValueAt(j, 1));

                if (Table.getValueAt(j, 0).equals(true) && !Table.getValueAt(j, 5).equals("09")) {

//                    String GroupParty = "SELECT GROUP_MAIN_PARTY FROM FINANCE.D_FIN_PARTY_GROUPING_DETAIL WHERE INVOICE_TYPE=2 AND GROUP_SUB_PARTY = '" + Table.getValueAt(j, 3) + "'";
//                    String GroupMainParty = data.getStringValueFromDB(GroupParty);
//                    data.Execute("INSERT INTO TEMP_DATABASE.TEMP_OUTSTANDING_AMT (MAIN_PARTY_CODE,SUB_PARTY_CODE) VALUES ('" + GroupMainParty + "','" + Table.getValueAt(j, 3) + "')");
                    data.Execute("INSERT INTO TEMP_DATABASE.TEMP_OUTSTANDING_AMT (SUB_PARTY_CODE) VALUES ('" + Table.getValueAt(j, 3) + "')");
                }
            }
//                data.Execute("UPDATE TEMP_DATABASE.TEMP_OUTSTANDING_AMT SET MAIN_PARTY_CODE = SUB_PARTY_CODE WHERE MAIN_PARTY_CODE=''");
            data.Execute("UPDATE TEMP_DATABASE.TEMP_OUTSTANDING_AMT SET MAIN_PARTY_CODE=CASE WHEN LENGTH(MAIN_PARTY_CODE)>0 THEN MAIN_PARTY_CODE ELSE SUB_PARTY_CODE END");
            data.Execute("INSERT INTO TEMP_DATABASE.TEMP_OUTSTANDING_REPORT (MAIN_PARTY_CODE) SELECT DISTINCT MAIN_PARTY_CODE FROM TEMP_DATABASE.TEMP_OUTSTANDING_AMT");

        }

        createFile1();

    }

    public static String getNextFreeNo(int pCompanyID, int pModuleID, int pFirstFreeNo, boolean UpdateLastNo) {
        Connection tmpConn;
        Statement tmpStmt;
        ResultSet rsTmp;
        String strSQL = "";
        String strNewNo = "";
        int lnNewNo = 0;
        String Prefix = "";
        String Suffix = "";

        try {
            tmpConn = data.getConn();
            tmpStmt = tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

            //strSQL="SELECT LAST_USED_NO,PADDING_BY,NO_LENGTH FROM D_COM_FIRSTFREE WHERE COMPANY_ID="+pCompanyID+" AND MODULE_ID="+pModuleID+" AND PREFIX_CHARS='"+pPrefix+"' AND SUFFIX_CHARS='"+pSuffix+"'";
            strSQL = "SELECT LAST_USED_NO,PADDING_BY,NO_LENGTH,PREFIX_CHARS,SUFFIX_CHARS FROM DINESHMILLS.D_COM_FIRSTFREE WHERE COMPANY_ID=" + pCompanyID + " AND MODULE_ID=" + pModuleID + " AND FIRSTFREE_NO=" + pFirstFreeNo;
            rsTmp = tmpStmt.executeQuery(strSQL);

            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                lnNewNo = rsTmp.getInt("LAST_USED_NO") + 1;
                strNewNo = EITLERPGLOBAL.Padding(Integer.toString(lnNewNo), rsTmp.getInt("NO_LENGTH"), rsTmp.getString("PADDING_BY"));
                Prefix = rsTmp.getString("PREFIX_CHARS");
                Suffix = rsTmp.getString("SUFFIX_CHARS");

                if (UpdateLastNo) {
                    //Update last no. in database
                    //data.Execute("UPDATE D_COM_FIRSTFREE SET LAST_USED_NO='"+strNewNo.trim()+"',CHANGED=1,CHANGED_DATE=CURDATE() WHERE COMPANY_ID="+pCompanyID+" AND MODULE_ID="+pModuleID+" AND PREFIX_CHARS='"+pPrefix+"' AND SUFFIX_CHARS='"+pSuffix+"'");
                    data.Execute("UPDATE D_COM_FIRSTFREE SET LAST_USED_NO='" + strNewNo.trim() + "',CHANGED=1,CHANGED_DATE=CURDATE() WHERE COMPANY_ID=" + pCompanyID + " AND MODULE_ID=" + pModuleID + " AND FIRSTFREE_NO=" + pFirstFreeNo);
                }

                strNewNo = Prefix + strNewNo + Suffix;

                //tmpConn.close();
                tmpStmt.close();
                rsTmp.close();

                return strNewNo;
            } else {
                return "";
            }
        } catch (Exception e) {
            return "";
        }
    }

    public void InvProcess() {

        new Thread() {
            public void run() {

                String AsOnDate = EITLERPGLOBAL.getCurrentDateDB();
                String MainCode = "210010";
                int cnt = 0;
                int Counter = 0;

                btnProcess.setVisible(false);
                Bar.setVisible(true);
                lblStatus.setVisible(true);
                Bar.setMaximum(4);
                Bar.setMinimum(0);
                lblStatus.setText("Processing...");
                Bar.repaint();

                ResultSet rsPartyCode = null, rsBaleDetail = null, rsPieceDetail = null, rsUpdatePiece = null, rsProdDetail = null, rsDetail = null, rsUpdateDisc = null;

                data.Execute("TRUNCATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS");
                data.Execute("TRUNCATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER");

                data.Execute("DROP TABLE PRODUCTION.TMP_TCS_PARTY_AMOUNT_ELIGIBILITY");

                data.Execute("CREATE TABLE PRODUCTION.TMP_TCS_PARTY_AMOUNT_ELIGIBILITY "
                        + " "
                        + "SELECT PM.PARTY_CODE,PM.PARTY_NAME,CITY_ID,GROUP_DESC,PAN_NO,GSTIN_PAN,PARTY_CLOSE_IND,INCHARGE_NAME,COALESCE(AMOUNT_CUR,0) AS AMOUNT_CUR FROM  "
                        + "(SELECT PARTY_CODE,PARTY_NAME,PAN_NO,SUBSTRING(GSTIN_NO,3,10) AS GSTIN_PAN,INCHARGE_CD,PARTY_CLOSE_IND,CITY_ID FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 ) AS PM "
                        + "LEFT JOIN  "
                        + "(SELECT PARTY_CODE,GROUP_DESC,H.GROUP_CODE FROM PRODUCTION.FELT_GROUP_MASTER_DETAIL D, PRODUCTION.FELT_GROUP_MASTER_HEADER H "
                        + "WHERE D.GROUP_CODE = H.GROUP_CODE  "
                        + "AND H.APPROVED =1 AND H.CANCELED =0) AS GM "
                        + "ON PM.PARTY_CODE = GM.PARTY_CODE "
                        + "LEFT JOIN  "
                        + "(SELECT PARTY_NAME,SUBSTRING(GSTIN_NO,3,10) AS PAN,SUM(INVOICE_AMT) AS AMOUNT_CUR FROM PRODUCTION.FELT_SAL_INVOICE_HEADER "
                        + "WHERE INVOICE_DATE >= '" + EITLERPGLOBAL.FinFromDateDB + "' AND INVOICE_DATE <='" + EITLERPGLOBAL.FinToDateDB + "' AND APPROVED =1 AND CANCELLED =0 "
                        + "GROUP BY SUBSTRING(GSTIN_NO,3,10) "
                        //                        + "HAVING SUM(INVOICE_AMT) >5000000 "
                        + ") AS PANCUR "
                        + "ON PANCUR.PAN = PM.GSTIN_PAN "
                        + "LEFT JOIN "
                        + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IC "
                        + "ON IC.INCHARGE_CD = PM.INCHARGE_CD "
                        + "WHERE COALESCE(AMOUNT_CUR,0) > 0 ");

                try {
                    System.out.println("START OF PROCESS");
                    System.out.println("----------------------------------------------------------");

                    Bar.setVisible(true);

                    if (rbtnText.isSelected()) {
                        String S = txtManual.getText().trim();
                        if (S.equalsIgnoreCase("")) {
                            JOptionPane.showMessageDialog(null, "Field is EMPTY");
                            cnt = 0;
                        } else {

                            String[] bno = S.split(",");

                            for (int i = 0; i < bno.length; i++) {
                                cnt++;
                                bno[i] = bno[i].replaceAll("[^\\w]", ",");
                                System.out.println("String Bno : " + bno[i]);
                                //String PartyCode = "SELECT PKG_PARTY_CODE FROM PRODUCTION.FELT_PKG_SLIP_HEADER WHERE PKG_BALE_NO='" + bno[i] + "'  AND APPROVED=1 AND CANCELED=0 AND PKG_BALE_NO IS NOT NULL AND PKG_BALE_NO!=''";

                                String BaleDetail = "SELECT D.PKG_BALE_NO,D.PKG_PIECE_NO,H.PKG_PARTY_CODE,H.PKG_BALE_DATE FROM PRODUCTION.FELT_PKG_SLIP_DETAIL D,PRODUCTION.FELT_PKG_SLIP_HEADER H WHERE D.PKG_BALE_NO=H.PKG_BALE_NO AND D.PKG_BALE_NO='" + bno[i] + "'  AND H.APPROVED=1 AND H.CANCELED=0 ORDER BY H.PKG_BALE_DATE DESC";
                                rsBaleDetail = data.getResult(BaleDetail);
                                rsBaleDetail.first();
                                if (rsBaleDetail.getRow() > 0) {
                                    while (!rsBaleDetail.isAfterLast()) {
                                        String bale = rsBaleDetail.getString("PKG_BALE_NO");
                                        String piece = rsBaleDetail.getString("PKG_PIECE_NO");
                                        String party = rsBaleDetail.getString("PKG_PARTY_CODE");
                                        String baledt = rsBaleDetail.getString("PKG_BALE_DATE");
                                        String sql = "INSERT INTO TEMP_DATABASE.TEMP_INV_VAL_PROCESS (BALE_NO,PIECE_NO,PARTY_CODE,PACKING_DATE) VALUES ('" + bale + "','" + piece + "','" + party + "','" + baledt + "')";
                                        data.Execute(sql);
                                        rsBaleDetail.next();
                                    }
                                }
                            }

                        }
                    }

                    if (rbtnSelect.isSelected() || rbtnClubbing.isSelected()) {
                        //System.out.println("ding");
                        for (int j = 0; j < Table.getRowCount(); j++) {
                            //System.out.println("ROW : "+Table.getSelectedRow()+" : Boolean : "+Table.getValueAt(j, 0)+" : col 2 : "+Table.getValueAt(j, 1));

                            if (Table.getValueAt(j, 0).equals(true)) {
                                cnt++;
                            }
                        }

                        if (cnt == 0) {
                            JOptionPane.showMessageDialog(null, "Please Select any BALE.");
                        } else {

                            for (int j = 0; j < Table.getRowCount(); j++) {
                                //System.out.println("ROW : "+Table.getSelectedRow()+" : Boolean : "+Table.getValueAt(j, 0)+" : col 2 : "+Table.getValueAt(j, 1));

                                if (Table.getValueAt(j, 0).equals(true)) {
                                    //String sql2 = "INSERT INTO TEMP_DATABASE.TEMP_INV_VAL_PROCESS (BALE_NO,PIECE_NO,PARTY_CODE,PACKING_DATE,PO_NO,PO_DATE) SELECT D.PKG_BALE_NO,D.PKG_PIECE_NO,H.PKG_PARTY_CODE,H.PKG_BALE_DATE,D.PKG_PO_NO,D.PKG_PO_DATE FROM PRODUCTION.FELT_PKG_SLIP_DETAIL D,PRODUCTION.FELT_PKG_SLIP_HEADER H WHERE D.PKG_BALE_NO=H.PKG_BALE_NO AND D.PKG_BALE_NO='" + Table.getValueAt(j, 1) + "'  AND H.APPROVED=1 AND H.CANCELED=0";
                                    String sql2 = "INSERT INTO TEMP_DATABASE.TEMP_INV_VAL_PROCESS (BALE_NO,PIECE_NO,PARTY_CODE,PACKING_DATE,PO_NO,PO_DATE) SELECT D.PKG_BALE_NO,D.PKG_PIECE_NO,H.PKG_PARTY_CODE,H.PKG_BALE_DATE,D.PKG_PO_NO,D.PKG_PO_DATE FROM PRODUCTION.FELT_PKG_SLIP_DETAIL D,PRODUCTION.FELT_PKG_SLIP_HEADER H WHERE D.PKG_BALE_NO=H.PKG_BALE_NO AND D.PKG_BALE_DATE=H.PKG_BALE_DATE AND D.PKG_BALE_NO='" + Table.getValueAt(j, 1) + "' AND D.PKG_BALE_DATE='" + EITLERPGLOBAL.formatDateDB(Table.getValueAt(j, 2).toString()) + "'  AND H.APPROVED=1 AND H.CANCELED=0";
                                    data.Execute(sql2);
                                }
                            }

                        }
                    }

                    if (cnt > 0) {

                        System.out.println("START : Piece Deail Updation");
                        UpdatePieceDetail();
                        System.out.println("END : Piece Deail Updation");

//-------------------------------------------------------------------                        
                        System.out.println("START : Invoice Value Calculation");
                        //---------------------------------------------------
                        String Detail = "SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS";
                        rsDetail = data.getResult(Detail);

                        rsDetail.first();
                        if (rsDetail.getRow() > 0) {
                            while (!rsDetail.isAfterLast()) {

                                Counter++;

                                Bar.setValue(Counter);
                                Bar.repaint();

                                //lblStatus.setText("Party : "+PartyCode);
                                String pieceNo = rsDetail.getString("PIECE_NO");
                                String prodCd = rsDetail.getString("PRODUCT_CODE");
                                String partyCd = rsDetail.getString("PARTY_CODE");
                                String baleNo = rsDetail.getString("BALE_NO");
                                String baleDate = rsDetail.getString("PACKING_DATE");
                                float length = rsDetail.getFloat("ACTUAL_LENGTH");
                                float width = rsDetail.getFloat("ACTUAL_WIDTH");
                                float gsm = rsDetail.getFloat("GSM");
                                float weight = rsDetail.getFloat("ACTUAL_WEIGHT");
                                float sqmtr = rsDetail.getFloat("SQMTR");

                                inv_calculation = EITLERP.FeltSales.common.clsOrderValueCalc.calculate(pieceNo, prodCd, partyCd, length, width, weight, sqmtr, AsOnDate, baleNo, baleDate);

                                if (inv_calculation.getReason().equals("")) {
                                    float Rate = inv_calculation.getFicRate();
                                    float BasAmount = inv_calculation.getFicBasAmount();
                                    float ChemTrtChg = inv_calculation.getFicChemTrtChg();
                                    float SpiralChg = inv_calculation.getFicSpiralChg();
                                    float PinChg = inv_calculation.getFicPinChg();
                                    float SeamChg = inv_calculation.getFicSeamChg();
                                    int InsInd = inv_calculation.getFicInsInd();
                                    float InsAmt = inv_calculation.getFicInsAmt();
                                    float Excise = inv_calculation.getFicExcise();
                                    float DiscPer = inv_calculation.getFicDiscPer();
                                    float DiscAmt = inv_calculation.getFicDiscAmt();
                                    float DiscBasamt = inv_calculation.getFicDiscBasamt();
                                    float InvAmt = inv_calculation.getFicInvAmt();
                                    float Gst = inv_calculation.getFicGST();
                                    float IGst = inv_calculation.getFicIGST();
                                    float SGst = inv_calculation.getFicSGST();
                                    float CGst = inv_calculation.getFicCGST();
                                    float IGstper = inv_calculation.getFicIGSTPER();
                                    float CGstper = inv_calculation.getFicCGSTPER();
                                    float SGstper = inv_calculation.getFicSGSTPER();
                                    //float cst = inv_calculation.getCst();
                                    float cst2 = inv_calculation.getCst2();
                                    float cst5 = inv_calculation.getCst5();
                                    //float vat = inv_calculation.getVat();
                                    float vat1 = inv_calculation.getVat1();
                                    float vat4 = inv_calculation.getVat4();
                                    float SD = inv_calculation.getSD();

                                    String SancDoc = inv_calculation.getSanc_doc();
                                    String SancGrp = inv_calculation.getSanc_group();

                                    float aosd_per = inv_calculation.getAosd_per();
                                    float aosd_amt = inv_calculation.getAosd_amt();

                                    float surcharge_per = inv_calculation.getFicSurcharge_per();
                                    float surcharge_rate = inv_calculation.getFicSurcharge_rate();
                                    float gross_rate = inv_calculation.getFicGrossRate();

                                    float tcs_per = inv_calculation.getTCS_per();
                                    float tcs_amt = inv_calculation.getTCS_amt();
//                                
                                    String upSQL = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET RATE='" + Rate + "',BAS_AMT='" + BasAmount + "',DISC_PER='" + DiscPer + "',DISC_AMT='" + DiscAmt + "',DISC_BAS_AMT='" + DiscBasamt + "',EXCISE='" + Excise + "',SEAM_CHG='" + SeamChg + "',INSURANCE_AMT='" + InsAmt + "',CHEM_TRT_CHG='" + ChemTrtChg + "',PIN_CHG='" + PinChg + "',SPIRAL_CHG='" + SpiralChg + "',INS_IND='" + InsInd + "',CST2='" + cst2 + "',VAT1='" + vat1 + "',CST5='" + cst5 + "',VAT4='" + vat4 + "',SD_AMT='" + SD + "',IGST_AMT='" + IGst + "',CGST_AMT='" + CGst + "',SGST_AMT='" + SGst + "',IGST_PER='" + IGstper + "',CGST_PER='" + CGstper + "',SGST_PER='" + SGstper + "',INVOICE_AMT='" + InvAmt + "',SANC_GROUP='" + SancGrp + "',SANC_DOC='" + SancDoc + "',AOSD_PER='" + aosd_per + "',AOSD_AMT='" + aosd_amt + "',SURCHARGE_PER='" + surcharge_per + "',SURCHARGE_RATE='" + surcharge_rate + "',GROSS_RATE='" + gross_rate + "',TCS_PER='" + tcs_per + "',TCS_AMT='" + tcs_amt + "' WHERE PIECE_NO='" + pieceNo + "' ";
                                    data.Execute(upSQL);
                                } else {
                                    JOptionPane.showMessageDialog(null, inv_calculation.getReason());
                                }

//                        String chargeCd = data.getStringValueFromDB("SELECT CHARGE_CODE FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 AND PARTY_CODE = '"+partyCd+"' ");
//                        String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET CHARGE_CODE='" + chargeCd + "' WHERE PARTY_CODE = '"+partyCd+"' ";
//                        data.Execute(upSQL1);
                                rsDetail.next();
                            }
                        }
                        System.out.println("END : Invoice Value Calculation");

                        //---------------------------------------------------
                        //ENTER DETAIL INTO HEADER GROUP BY BALE NO
                        System.out.println("START : Header Creation Group by Bale No");
                        int lotNo = data.getIntValueFromDB("SELECT MAX(LOT_NO) FROM PRODUCTION.FELT_SALES_INV_PROCESS_REPORT_DATA WHERE SUBSTRING(PROCESSING_TIME,1,10)='" + EITLERPGLOBAL.getCurrentDateDB() + "'");
                        lotNo += 1;
                        String insertHeader = "INSERT INTO TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER (BALE_NO,PACKING_DATE,PARTY_CODE,NO_OF_PIECES,INVOICE_AMT,BAS_AMT,DISC_AMT,DISC_BAS_AMT,EXCISE,SEAM_CHG,INSURANCE_AMT,CHEM_TRT_CHG,PIN_CHG,SPIRAL_CHG,CST,VAT,SD_AMT,CST2,VAT1,CST5,VAT4,LOT_NO,IGST_PER,IGST_AMT,CGST_PER,CGST_AMT,SGST_PER,SGST_AMT,PRODUCT_CODE,PIECE_NO,MACHINE_NO,POSITION_NO,SYN_PER,LENGTH,WIDTH,GSM,STYLE,RATE,SQMTR,ACTUAL_WEIGHT,DISC_PER,CHECK_POINT_REMARK,PO_NO,PO_DATE,AOSD_PER,AOSD_AMT,SURCHARGE_PER,SURCHARGE_RATE,GROSS_RATE,MATERIAL_CODE,TCS_PER,TCS_AMT) SELECT BALE_NO,PACKING_DATE,PARTY_CODE,COUNT(PIECE_NO),SUM(INVOICE_AMT),SUM(BAS_AMT),SUM(DISC_AMT),SUM(DISC_BAS_AMT),SUM(EXCISE),SUM(SEAM_CHG),SUM(INSURANCE_AMT),SUM(CHEM_TRT_CHG),SUM(PIN_CHG),SUM(SPIRAL_CHG),SUM(CST),SUM(VAT),SUM(SD_AMT),SUM(CST2),SUM(VAT1),SUM(CST5),SUM(VAT4),'" + lotNo + "',IGST_PER,ROUND(SUM(IGST_AMT)),CGST_PER,ROUND(SUM(CGST_AMT)),SGST_PER,ROUND(SUM(SGST_AMT)),PRODUCT_CODE,GROUP_CONCAT(PIECE_NO),MACHINE_NO,POSITION_NO,SYN_PER,ACTUAL_LENGTH,ACTUAL_WIDTH,GSM,STYLE,RATE,SUM(SQMTR),SUM(ACTUAL_WEIGHT),DISC_PER,'',GROUP_CONCAT(PO_NO),GROUP_CONCAT(PO_DATE),AOSD_PER,SUM(AOSD_AMT),SURCHARGE_PER,SURCHARGE_RATE,GROSS_RATE,GROUP_CONCAT(MATERIAL_CODE),TCS_PER,SUM(TCS_AMT) FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS GROUP BY BALE_NO";
                        data.Execute(insertHeader);
                        System.out.println("END : Header Creation Group by Bale No");

//-------------------------------------------------------------------
                        System.out.println("START : Checking of Party/Machine/Position Closure");
                        String closureDetail = "SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE CHECK_POINT_REMARK='' ORDER BY BALE_NO";
                        ResultSet rsclosureDetail = data.getResult(closureDetail);

                        rsclosureDetail.first();
                        if (rsclosureDetail.getRow() > 0) {
                            while (!rsclosureDetail.isAfterLast()) {
                                String baleNo = rsclosureDetail.getString("BALE_NO");
                                String partyCd = rsclosureDetail.getString("PARTY_CODE");
                                String machineNo = rsclosureDetail.getString("MACHINE_NO");
                                String positionNo = rsclosureDetail.getString("POSITION_NO");

                                if (data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CLOSE_IND=1 AND PARTY_CODE='" + partyCd + "' ")) {
                                    data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CHECK_POINT_REMARK='PARTY CLOSED IN PARTY MASTER' WHERE BALE_NO='" + baleNo + "' ");
                                } else if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER WHERE MACHINE_CLOSE_IND=1 AND MM_PARTY_CODE='" + partyCd + "' AND MM_MACHINE_NO='" + machineNo + "' ")) {
                                    data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CHECK_POINT_REMARK='PARTY MACHINE CLOSED IN MACHINE MASTER' WHERE BALE_NO='" + baleNo + "' ");
                                } else if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE POSITION_CLOSE_IND=1 AND MM_PARTY_CODE='" + partyCd + "' AND MM_MACHINE_NO='" + machineNo + "' AND MM_MACHINE_POSITION='" + positionNo + "' ")) {
                                    data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CHECK_POINT_REMARK='PARTY MACHINE POSITION CLOSED IN MACHINE MASTER' WHERE BALE_NO='" + baleNo + "' ");
                                }

                                rsclosureDetail.next();
                            }
                        }
                        System.out.println("END : Checking of Party/Machine/Position Closure");

//-------------------------------------------------------------------------
//                        System.out.println("START : Checking of Obsolete Pieces");
//                        String obsoleteDetail = "SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE CHECK_POINT_REMARK='' ORDER BY BALE_NO";
//                        ResultSet rsobsoleteDetail = data.getResult(obsoleteDetail);
//
//                        rsobsoleteDetail.first();
//                        if (rsobsoleteDetail.getRow() > 0) {
//                            while (!rsobsoleteDetail.isAfterLast()) {
//                                String baleNo = rsobsoleteDetail.getString("BALE_NO");
//                                String pieceNo = rsobsoleteDetail.getString("PIECE_NO");
//                                
//                                if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + pieceNo + "' AND PR_DELINK IN ('DELINK','OBSOLETE') ")) {
//                                    data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CHECK_POINT_REMARK='OBSOLETE PIECE' WHERE BALE_NO='" + baleNo + "' ");
//                                }
//                                
//                                rsobsoleteDetail.next();
//                            }
//                        }
//                        System.out.println("END : Checking of Obsolete Pieces");
//-------------------------------------------------------------------------                        
                        System.out.println("START : Party Master Updation Pending");
                        String PUDetail = "SELECT DISTINCT PARTY_CODE FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER ORDER BY PARTY_CODE";
                        ResultSet rsPUDetail = data.getResult(PUDetail);

                        rsPUDetail.first();
                        if (rsPUDetail.getRow() > 0) {
                            while (!rsPUDetail.isAfterLast()) {
                                if (data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_AMEND_MASTER WHERE APPROVED=0 AND CANCELLED=0 AND MAIN_ACCOUNT_CODE=210010 AND PARTY_CODE='" + rsPUDetail.getString("PARTY_CODE") + "' ")) {
                                    data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CHECK_POINT_REMARK='PENDING FINAL APPROVAL IN PARTY UPDATION' WHERE PARTY_CODE='" + rsPUDetail.getString("PARTY_CODE") + "'");
                                }
                                rsPUDetail.next();
                            }
                        }
                        System.out.println("END : Party Master Updation Pending");

                        System.out.println("START : Discount Master Pending");
                        String DMDetail = "SELECT DISTINCT PARTY_CODE FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE CHECK_POINT_REMARK='' ORDER BY PARTY_CODE";
                        ResultSet rsDMDetail = data.getResult(DMDetail);

                        rsDMDetail.first();
                        if (rsDMDetail.getRow() > 0) {
                            while (!rsDMDetail.isAfterLast()) {
                                if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_RATE_DISC_MASTER_HEADER WHERE APPROVED=0 AND CANCELED=0 AND PARTY_CODE='" + rsDMDetail.getString("PARTY_CODE") + "' ")) {
                                    data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CHECK_POINT_REMARK='PENDING FINAL APPROVAL IN DISC MASTER' WHERE PARTY_CODE='" + rsDMDetail.getString("PARTY_CODE") + "'");
                                }
                                rsDMDetail.next();
                            }
                        }
                        System.out.println("END : Discount Master Pending");

                        System.out.println("START : Checking of Modification Form pending entry");
                        String invmodDetail = "SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE CHECK_POINT_REMARK='' ORDER BY BALE_NO";
                        ResultSet rsinvmodDetail = data.getResult(invmodDetail);

                        rsinvmodDetail.first();
                        if (rsinvmodDetail.getRow() > 0) {
                            while (!rsinvmodDetail.isAfterLast()) {
                                if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE PROCESSING_DATE>='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND APPROVED=0 AND CANCELED=0 AND BALE_NO='" + rsinvmodDetail.getString("BALE_NO").trim() + "' AND PARTY_CODE='" + rsinvmodDetail.getString("PARTY_CODE").trim() + "' ")) {
                                    data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CHECK_POINT_REMARK='PENDING FINAL APPROVAL IN PARAMETER MODIFICATION' WHERE BALE_NO='" + rsinvmodDetail.getString("BALE_NO").trim() + "' AND PARTY_CODE='" + rsinvmodDetail.getString("PARTY_CODE").trim() + "' ");
                                }
                                rsinvmodDetail.next();
                            }
                        }
                        System.out.println("END : Checking of Modification Form pending entry");

//-------------------------------------------------------------------  
                        ////------------------------------------------------------------------------------------------------------
                        //---------------------------------------------------
                        //REMARK UPDATION
                        ResultSet remark1 = null;
                        String rmkDetail = "SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE CHECK_POINT_REMARK=''";
                        remark1 = data.getResult(rmkDetail);
                        remark1.first();
                        if (remark1.getRow() > 0) {
                            while (!remark1.isAfterLast()) {
                                String partyCd = remark1.getString("PARTY_CODE");
                                float GST_PER = remark1.getFloat("CGST_PER") + remark1.getFloat("SGST_PER") + remark1.getFloat("IGST_PER");
                                if (!data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 AND APPROVED=1 AND CANCELLED=0 AND PARTY_CODE = '" + partyCd + "'")) {
                                    data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CHECK_POINT_REMARK='PARTY CODE MISSING' WHERE PARTY_CODE='" + partyCd + "'");
                                } else {
                                    if (GST_PER <= 0) {
                                        data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CHECK_POINT_REMARK='GSTIN NO/STATE GST CODE MISSING' WHERE PARTY_CODE='" + partyCd + "'");
                                    }
                                }

                                remark1.next();
                            }
                        }
////----------------------------------------------------------------------------------------------------------------------

                        //---------------------------------------------------
                        //CHARGE CODE UPDATION
                        System.out.println("START : Charge Code & Critical Limit Uncheck Updation");
                        ResultSet rsChrgCd = null;
                        String chrgCdDetail = "SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER ";
                        rsChrgCd = data.getResult(chrgCdDetail);
                        rsChrgCd.first();
                        if (rsChrgCd.getRow() > 0) {
                            while (!rsChrgCd.isAfterLast()) {

                                Counter++;

                                Bar.setValue(Counter);
                                Bar.repaint();
                                Bar.setVisible(true);

                                String partyCd = rsChrgCd.getString("PARTY_CODE");

                                String chargeCd = data.getStringValueFromDB("SELECT CHARGE_CODE FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 AND PARTY_CODE = '" + partyCd + "' ");
                                //int transportCd = data.getIntValueFromDB("SELECT TRANSPORTER_ID FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 AND PARTY_CODE = '" + partyCd + "' ");
                                //String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CHARGE_CODE='" + chargeCd + "',TRANSPORTER_CODE='" + transportCd + "' WHERE PARTY_CODE = '" + partyCd + "' ";
                                String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CHARGE_CODE='" + chargeCd + "' WHERE PARTY_CODE = '" + partyCd + "' ";
                                data.Execute(upSQL1);

                                boolean uncheck = data.getBoolValueFromDB("SELECT CRITICAL_LIMIT_UNCHECK FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 AND PARTY_CODE = '" + partyCd + "' ");
                                if (uncheck) {
                                    double uncheckLimit = Double.valueOf(1000000000.00);
                                    String unchkLimit = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CRITICAL_LIMIT_AMT='" + uncheckLimit + "' WHERE PARTY_CODE='" + partyCd + "' ";
                                    data.Execute(unchkLimit);
                                }

                                rsChrgCd.next();
                            }
                        }
                        System.out.println("END : Charge Code & Critical Limit Uncheck Updation");

                        //---------------------------------------------------
                        //TRANSPORTER CODE UPDATION
                        System.out.println("START : Transporter Code Updation");
                        ResultSet rsTrnsCd = null;
                        String trnsCdDetail = "SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE CHECK_POINT_REMARK='' ORDER BY BALE_NO";
                        rsTrnsCd = data.getResult(trnsCdDetail);
                        rsTrnsCd.first();
                        if (rsTrnsCd.getRow() > 0) {
                            while (!rsTrnsCd.isAfterLast()) {

                                String baleNo = rsTrnsCd.getString("BALE_NO");
                                String baleDate = rsTrnsCd.getString("PACKING_DATE");
                                String partyCd = rsTrnsCd.getString("PARTY_CODE");

                                String transMode = data.getStringValueFromDB("SELECT PKG_TRANSPORT_MODE FROM PRODUCTION.FELT_PKG_SLIP_HEADER WHERE PKG_BALE_NO = '" + baleNo + "' AND PKG_BALE_DATE = '" + baleDate + "' ");
                                if (transMode.equals("BY TRANSPORT")) {
                                    int transportCd = data.getIntValueFromDB("SELECT TRANSPORTER_ID FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 AND PARTY_CODE = '" + partyCd + "' ");
                                    String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET TRANSPORTER_CODE='" + transportCd + "',DESP_MODE='02-TR' WHERE BALE_NO = '" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE = '" + partyCd + "' ";
                                    data.Execute(upSQL1);
                                }
                                if (transMode.equals("BY ANGADIA")) {
                                    int transportCd = Integer.parseInt("95");
                                    String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET TRANSPORTER_CODE='" + transportCd + "',DESP_MODE='01-ANG' WHERE BALE_NO = '" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE = '" + partyCd + "' ";
                                    data.Execute(upSQL1);
                                }
                                if (transMode.equals("BY TRAIN")) {
                                    int transportCd = Integer.parseInt("97");
                                    String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET TRANSPORTER_CODE='" + transportCd + "',DESP_MODE='03-PT' WHERE BALE_NO = '" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE = '" + partyCd + "' ";
                                    data.Execute(upSQL1);
                                }
                                if (transMode.equals("BY IRPP")) {
                                    int transportCd = Integer.parseInt("41");
                                    String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET TRANSPORTER_CODE='" + transportCd + "',DESP_MODE='04-IRP' WHERE BALE_NO = '" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE = '" + partyCd + "' ";
                                    data.Execute(upSQL1);
                                }
                                if (transMode.equals("BY HANDDELIVERY")) {
                                    int transportCd = Integer.parseInt("98");
                                    String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET TRANSPORTER_CODE='" + transportCd + "',DESP_MODE='05-HD' WHERE BALE_NO = '" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE = '" + partyCd + "' ";
                                    data.Execute(upSQL1);
                                }
                                if (transMode.equals("BY AIR")) {
                                    int transportCd = Integer.parseInt("99");
                                    String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET TRANSPORTER_CODE='" + transportCd + "',DESP_MODE='06-AIR' WHERE BALE_NO = '" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE = '" + partyCd + "' ";
                                    data.Execute(upSQL1);
                                }

                                rsTrnsCd.next();
                            }
                        }
                        System.out.println("END : Transporter Code Updation");

//------------------------------------------------------------------------------
                        //PARTY DATA UPDATION
                        System.out.println("START : Party Data Updation");
                        //String upPartyData = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER I,DINESHMILLS.D_SAL_PARTY_MASTER D SET I.PARTY_NAME=D.PARTY_NAME,I.PARTY_CHARGE_CODE=D.CHARGE_CODE,I.ADDRESS1=D.ADDRESS1,I.ADDRESS2=D.ADDRESS2,I.PINCODE=D.PINCODE,I.CITY_ID=D.CITY_ID,I.DISPATCH_STATION=D.DISPATCH_STATION,I.CITY_NAME=D.CITY_NAME,I.DOCUMENT_THROUGH=D.DOCUMENT_THROUGH,I.GSTIN_NO=D.GSTIN_NO WHERE I.PARTY_CODE=D.PARTY_CODE AND D.MAIN_ACCOUNT_CODE=210010 AND D.APPROVED=1 AND D.CANCELLED=0";
//                        String upPartyData = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER I,DINESHMILLS.D_SAL_PARTY_MASTER D SET I.PARTY_NAME=D.PARTY_NAME,I.PARTY_CHARGE_CODE=D.CHARGE_CODE,I.ADDRESS1=D.ADDRESS1,I.ADDRESS2=D.ADDRESS2,I.PINCODE=D.PINCODE,I.CITY_ID=D.CITY_ID,I.DISPATCH_STATION=D.DISPATCH_STATION,I.CITY_NAME=D.CITY_NAME,I.DOCUMENT_THROUGH=D.DOCUMENT_THROUGH,I.GSTIN_NO=CASE WHEN D.GSTIN_NO='' THEN D.STATE_GST_CODE ELSE TRIM(D.GSTIN_NO) END WHERE I.PARTY_CODE=D.PARTY_CODE AND D.MAIN_ACCOUNT_CODE=210010 AND D.APPROVED=1 AND D.CANCELLED=0 ";
//                        String upPartyData = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER I,DINESHMILLS.D_SAL_PARTY_MASTER D SET I.PARTY_NAME=D.PARTY_NAME,I.PARTY_CHARGE_CODE=D.CHARGE_CODE,I.ADDRESS1=D.ADDRESS1,I.ADDRESS2=D.ADDRESS2,I.PINCODE=D.PINCODE,I.CITY_ID=D.CITY_ID,I.DISPATCH_STATION=D.DISPATCH_STATION,I.CITY_NAME=D.CITY_NAME,I.DOCUMENT_THROUGH=D.DOCUMENT_THROUGH,I.CREDIT_DAYS=D.CREDIT_DAYS,I.GSTIN_NO=CASE WHEN D.GSTIN_NO='' THEN D.STATE_GST_CODE ELSE TRIM(D.GSTIN_NO) END WHERE I.PARTY_CODE=D.PARTY_CODE AND D.MAIN_ACCOUNT_CODE=210010 AND D.APPROVED=1 AND D.CANCELLED=0 ";
                        String upPartyData = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER I,DINESHMILLS.D_SAL_PARTY_MASTER D SET I.PARTY_NAME=D.PARTY_NAME,I.PARTY_CHARGE_CODE=D.CHARGE_CODE,I.ADDRESS1=D.ADDRESS1,I.ADDRESS2=D.ADDRESS2,I.PINCODE=D.PINCODE,I.CITY_ID=D.CITY_ID,I.DISPATCH_STATION=D.DISPATCH_STATION,I.CITY_NAME=D.CITY_NAME,I.DOCUMENT_THROUGH=D.DOCUMENT_THROUGH,I.CREDIT_DAYS=D.CREDIT_DAYS,I.GSTIN_NO=CASE WHEN D.GSTIN_NO='' THEN D.STATE_GST_CODE ELSE TRIM(D.GSTIN_NO) END,I.DELIVERY_MODE=CASE WHEN D.DELIVERY_MODE = 'Select Delivery Mode' THEN '' ELSE D.DELIVERY_MODE END ,I.MOBILE_NO=D.MOBILE_NO WHERE I.PARTY_CODE=D.PARTY_CODE AND D.MAIN_ACCOUNT_CODE=210010 AND D.APPROVED=1 AND D.CANCELLED=0 ";
                        data.Execute(upPartyData);
                        System.out.println("END : Party Data Updation");

//----------------------------------------------
//------------------------------------------------------------------------------
//                        //PARTY PAN AND TCS ELIGIBLE AMOUNT UPDATION
//                        System.out.println("START : Party Pan and TCS Eligible Amount Updation");
//                        //String upPartyTCSData = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER I,PRODUCTION.TMP_TCS_PARTY_AMOUNT_ELIGIBILITY T SET I.GSTIN_PAN=T.GSTIN_PAN,I.TCS_ELIGIBLE_AMOUNT=CASE WHEN T.AMOUNT_PRE>T.AMOUNT_CUR THEN T.AMOUNT_PRE ELSE T.AMOUNT_CUR END WHERE I.PARTY_CODE=T.PARTY_CODE ";
//                        String upPartyTCSData = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER I,PRODUCTION.TMP_TCS_PARTY_AMOUNT_ELIGIBILITY T SET I.GSTIN_PAN=T.GSTIN_PAN,I.TCS_ELIGIBLE_AMOUNT=COALESCE(T.AMOUNT_CUR,0) WHERE I.PARTY_CODE=T.PARTY_CODE ";
//                        data.Execute(upPartyTCSData);
//                        System.out.println("END : Party Pan and TCS Eligible Amount Updation");
//----------------------------------------------
                        System.out.println("START : Party Pin Code Checking");
                        String PINDetail = "SELECT DISTINCT PARTY_CODE FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE CHECK_POINT_REMARK='' ORDER BY PARTY_CODE ";
                        ResultSet rsPINDetail = data.getResult(PINDetail);

                        rsPINDetail.first();
                        if (rsPINDetail.getRow() > 0) {
                            while (!rsPINDetail.isAfterLast()) {
                                if (data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND LENGTH(PINCODE)<6 AND PARTY_CODE='" + rsPINDetail.getString("PARTY_CODE") + "' ")) {
                                    data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CHECK_POINT_REMARK='PIN CODE MISSING' WHERE PARTY_CODE='" + rsPINDetail.getString("PARTY_CODE") + "'");
                                }
                                rsPINDetail.next();
                            }
                        }
                        System.out.println("END : Party Pin Code Checking");

//----------------------------------------------
//------------------------------------------------------------------------------
                        //Quality DATA UPDATION
                        System.out.println("START : Quality Data Updation");
                        String upQltData = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER I,PRODUCTION.FELT_QLT_RATE_MASTER Q SET I.PRODUCT_DESC=Q.PRODUCT_DESC,I.RATE_UNIT=CASE WHEN Q.SQM_IND=1 THEN 'MTR' ELSE 'KG' END WHERE SUBSTRING(I.PRODUCT_CODE,1,6)=Q.PRODUCT_CODE AND Q.APPROVED=1 AND Q.CANCELED=0 AND Q.EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00') ";
                        data.Execute(upQltData);
                        System.out.println("END : Quality Data Updation");

//------------------------------------------------------------------------------
                        //Machine DATA UPDATION
                        System.out.println("START : Machine Data Updation");
                        String upMMData = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER I,PRODUCTION.FELT_MACHINE_POSITION_MST M SET I.POSITION_DESC=M.POSITION_DESC WHERE I.POSITION_NO=M.POSITION_NO ";
                        data.Execute(upMMData);
                        System.out.println("END : Machine Data Updation");

                        //---------------------------------------------------
                        //ADVANCE AMOUNT PROCESS
                        System.out.println("START : Advance Amount Updation");
                        AdvAmt();
                        //String upAdvAmt = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS,TEMP_DATABASE.TEMP_ADV_AMT SET ADV_AMT=SUB_ADV_BAL WHERE PARTY_CODE = SUB_PARTY_CODE ";
                        String upAdvAmt = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER,TEMP_DATABASE.TEMP_ADV_AMT SET ADV_AMT=SUB_ADV_BAL WHERE PARTY_CODE = SUB_PARTY_CODE AND CHECK_POINT_REMARK='' ";
                        data.Execute(upAdvAmt);
                        System.out.println("END : Advance Amount Updation");

//                        //---------------------------------------------------
//                        //OUTSTANDING AMOUNT PROCESS
//                        System.out.println("START : OutStanding Amount Updation");
//                        OutStandingAmt();
//                        //String upSubPartyAmt = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS,TEMP_DATABASE.TEMP_OUTSTANDING_AMT SET OUT_STANDING_AMT=SUB_OUTSTANDING_BAL,GRP_MAIN_PARTY_CODE=MAIN_PARTY_CODE WHERE PARTY_CODE=SUB_PARTY_CODE";
//                        String upSubPartyAmt = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER,TEMP_DATABASE.TEMP_OUTSTANDING_AMT SET OUT_STANDING_AMT=SUB_OUTSTANDING_BAL,GRP_MAIN_PARTY_CODE=MAIN_PARTY_CODE WHERE PARTY_CODE=SUB_PARTY_CODE AND CHECK_POINT_REMARK='' ";
//                        data.Execute(upSubPartyAmt);
//                        //String upGrpPartyAmt = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS,TEMP_DATABASE.TEMP_OUTSTANDING_REPORT SET GRP_OUT_STANDING_AMT=SUB_OUTSTANDING_BAL WHERE GRP_MAIN_PARTY_CODE=MAIN_PARTY_CODE";
//                        String upGrpPartyAmt = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER,TEMP_DATABASE.TEMP_OUTSTANDING_REPORT SET GRP_OUT_STANDING_AMT=SUB_OUTSTANDING_BAL WHERE GRP_MAIN_PARTY_CODE=MAIN_PARTY_CODE AND CHECK_POINT_REMARK='' ";
//                        data.Execute(upGrpPartyAmt);
//                        System.out.println("END : OutStanding Amount Updation");
                        //---------------------------------------------------
                        //OUTSTANDING AMOUNT PROCESS added on 11/04/2019
                        System.out.println("START : OutStanding Amount Updation");
                        OutStandingAmt2();

                        String upSubPartyAmt = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER,TEMP_DATABASE.TEMP_OUTSTANDING_AMT SET OUT_STANDING_AMT=SUB_OUTSTANDING_BAL,GRP_CRITICAL_LIMIT=COALESCE(GROUP_CRITICAL_BAL,0),GRP_MAIN_PARTY_CODE=MAIN_PARTY_CODE WHERE PARTY_CODE=SUB_PARTY_CODE AND CHECK_POINT_REMARK='' ";
                        data.Execute(upSubPartyAmt);

                        String upGrpPartyAmt = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER,TEMP_DATABASE.TEMP_OUTSTANDING_REPORT SET GRP_OUT_STANDING_AMT=GROUP_OUTSTANDING_BAL WHERE GRP_MAIN_PARTY_CODE=MAIN_PARTY_CODE AND CHECK_POINT_REMARK='' ";
                        data.Execute(upGrpPartyAmt);
                        System.out.println("END : OutStanding Amount Updation");

                        //---------------------------------------------------
//                        //GROUP PARTY LIMIT UPDATION
//                        System.out.println("START : Group Party Limit Updation");
//                        //String upGrpPartyLimit = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS I,PRODUCTION.FELT_GROUP_MASTER_DETAIL D,PRODUCTION.FELT_GROUP_MASTER_HEADER H SET I.PARTY_CRITICAL_LIMIT=D.CRITICAL_LIMIT,I.GRP_CRITICAL_LIMIT=H.GROUP_CRITICAL_LIMIT WHERE D.GROUP_CODE=H.GROUP_CODE AND I.PARTY_CODE=D.PARTY_CODE AND H.APPROVED=1 AND H.CANCELED=0";
//                        String upGrpPartyLimit = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER I,PRODUCTION.FELT_GROUP_MASTER_DETAIL D,PRODUCTION.FELT_GROUP_MASTER_HEADER H SET I.PARTY_CRITICAL_LIMIT=D.CRITICAL_LIMIT,I.GRP_CRITICAL_LIMIT=H.GROUP_CRITICAL_LIMIT WHERE D.GROUP_CODE=H.GROUP_CODE AND I.PARTY_CODE=D.PARTY_CODE AND H.APPROVED=1 AND H.CANCELED=0";
//                        data.Execute(upGrpPartyLimit);
//                        System.out.println("END : Group Party Limit Updation");
                        //---------------------------------------------------
                        //PARTY LIMIT UPDATION
                        System.out.println("START : Single Party Limit Updation");
                        //String upPartyLimit = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS I,DINESHMILLS.D_SAL_PARTY_MASTER D SET I.PARTY_CRITICAL_LIMIT=D.AMOUNT_LIMIT WHERE I.PARTY_CODE=D.PARTY_CODE AND D.MAIN_ACCOUNT_CODE=210010 AND I.PARTY_CRITICAL_LIMIT=0 AND I.GRP_CRITICAL_LIMIT=0";
                        //String upPartyLimit = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER I,DINESHMILLS.D_SAL_PARTY_MASTER D SET I.PARTY_CRITICAL_LIMIT=D.AMOUNT_LIMIT WHERE I.PARTY_CODE=D.PARTY_CODE AND D.MAIN_ACCOUNT_CODE=210010 AND I.PARTY_CRITICAL_LIMIT=0 AND I.GRP_CRITICAL_LIMIT=0";
                        String upPartyLimit = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER I,DINESHMILLS.D_SAL_PARTY_MASTER D SET I.PARTY_CRITICAL_LIMIT=D.AMOUNT_LIMIT WHERE I.PARTY_CODE=D.PARTY_CODE AND D.MAIN_ACCOUNT_CODE=210010 AND D.APPROVED=1 AND D.CANCELLED=0 AND I.CHECK_POINT_REMARK='' ";
                        data.Execute(upPartyLimit);
                        System.out.println("END : Single Party Limit Updation");

//                //---------------------------------------------------
//                        //INVOICE PARAMETER MODIFICATION LIMIT UPDATION
//                        System.out.println("START : Invoice Modification Parameter Limit Updation");
//                        ResultSet rsLimit = null;
//                        String upLimit;
//                        //String limitDetail = "SELECT * FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE PROCESSING_DATE='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND APPROVED=1 AND CANCELED=0";
//                        String limitDetail = "SELECT * FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE PROCESSING_DATE>='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND APPROVED=1 AND CANCELED=0";
//                        rsLimit = data.getResult(limitDetail);
//                        rsLimit.first();
//                        if (rsLimit.getRow() > 0) {
//                            while (!rsLimit.isAfterLast()) {
//                                
//                                Counter++;
//                                
//                                Bar.setValue(Counter);
//                                Bar.repaint();
//                                
//                                String bale = rsLimit.getString("BALE_NO");
//                                String partyCd = rsLimit.getString("PARTY_CODE");
//                                String crgCd = rsLimit.getString("CHARGE_CODE_NEW");
//                                String trnCd = rsLimit.getString("TRANSPORTER_CODE");
//                                String vehicalNo = rsLimit.getString("VEHICLE_NO");
//                                String advDn = rsLimit.getString("ADV_DOC_NO");
//                                String cnd = "";
////                                if (rsLimit.getString("CHARGE_CODE_NEW").equalsIgnoreCase("") || rsLimit.getString("CHARGE_CODE_NEW") == null) {
////                                    cnd = "";
////                                } else {
////                                    cnd = ",CHARGE_CODE='" + crgCd + "' ";
////                                }
//                                if (rsLimit.getString("CHARGE_CODE_NEW").equals("01")) {
//                                    cnd = ",CHARGE_CODE='" + crgCd + "' ";
//                                }
//                                if (rsLimit.getString("TRANSPORTER_CODE").equalsIgnoreCase("") || rsLimit.getString("TRANSPORTER_CODE") == null) {
//                                    cnd += "";
//                                } else {
//                                    cnd += ",TRANSPORTER_CODE='" + trnCd + "' ";
//                                }
//                                if (rsLimit.getString("VEHICLE_NO").equalsIgnoreCase("") || rsLimit.getString("VEHICLE_NO") == null) {
//                                    cnd += "";
//                                } else {
//                                    cnd += ",VEHICLE_NO='" + vehicalNo + "' ";
//                                }
//                                if (rsLimit.getString("ADV_DOC_NO").equalsIgnoreCase("") || rsLimit.getString("ADV_DOC_NO") == null) {
//                                    cnd += "";
//                                } else {
//                                    cnd += ",ADV_DOC_NO='" + advDn + "' ";
//                                }
//                                System.out.println("condition : " + cnd);
//                                float criticalLimit = rsLimit.getFloat("CRITICAL_LIMIT_NEW");
//                                float InvAmt = rsLimit.getFloat("ADV_AGN_INV_AMT");
//                                float IGSTAmt = rsLimit.getFloat("ADV_AGN_IGST_AMT");
//                                float SGSTAmt = rsLimit.getFloat("ADV_AGN_SGST_AMT");
//                                float CGSTAmt = rsLimit.getFloat("ADV_AGN_CGST_AMT");
//                                float GSTCompCessAmt = rsLimit.getFloat("ADV_AGN_GST_COMP_CESS_AMT");
//                                
//                                
//                                String[] bNo = bale.split(",");
//                                System.out.println("BALE NO is : " + bale);
//                                if (!bale.equals("")) {
//                                    for (int i = 0; i < bNo.length; i++) {
//                                        bNo[i] = bNo[i].replaceAll("[^\\w]", ",");
//                                        //upLimit = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET PARTY_CRITICAL_LIMIT='"+criticalLimit+"',CHARGE_CODE='"+crgCd+"',CRITICAL_LIMIT_AMT='"+criticalLimit+"' WHERE BALE_NO='"+bNo[i]+"'";
//                                        upLimit = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET PARTY_CRITICAL_LIMIT='" + criticalLimit + "',CRITICAL_LIMIT_AMT='" + criticalLimit + "',ADV_AGN_INV_AMT='" + InvAmt + "',ADV_AGN_IGST_AMT='" + IGSTAmt + "',ADV_AGN_SGST_AMT='" + SGSTAmt + "',ADV_AGN_CGST_AMT='" + CGSTAmt + "',ADV_AGN_GST_COMP_CESS_AMT='" + GSTCompCessAmt + "'" + cnd + " WHERE BALE_NO='" + bNo[i] + "'";
//                                        data.Execute(upLimit);
//                                    }
//                                } 
////                                else {
////                                    //upLimit = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET PARTY_CRITICAL_LIMIT='"+criticalLimit+"',CHARGE_CODE='"+crgCd+"',CRITICAL_LIMIT_AMT='"+criticalLimit+"' WHERE PARTY_CODE='"+partyCd+"'";
////                                    upLimit = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET PARTY_CRITICAL_LIMIT='" + criticalLimit + "',CRITICAL_LIMIT_AMT='" + criticalLimit + "'" + cnd + " WHERE PARTY_CODE='" + partyCd + "'";
////                                    data.Execute(upLimit);
////                                }
//                                
//                                if (rsLimit.getBoolean("WITHOUT_CRITICAL_LIMIT")) {
//                                    double noLimit = Double.valueOf(999999999.99);
//                                    upLimit = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CRITICAL_LIMIT_AMT='" + noLimit + "' WHERE PARTY_CODE='" + partyCd + "' AND BALE_NO='"+bale+"'";
//                                    data.Execute(upLimit);
//                                }
//                                
//                                rsLimit.next();
//                            }
//                        }
//                        System.out.println("END : Invoice Modification Parameter Limit Updation");
//                //String upLimit = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS I,DINESHMILLS.D_SAL_PARTY_MASTER D SET I.PARTY_CRITICAL_LIMIT=D.AMOUNT_LIMIT WHERE I.PARTY_CODE=D.PARTY_CODE AND D.MAIN_ACCOUNT_CODE=210010 AND I.PARTY_CRITICAL_LIMIT=0 AND I.GRP_CRITICAL_LIMIT=0";
//                        //data.Execute(upLimit);
//-------------------------------------------------------------------------------                        
                        //Invoice Modification Updation
                        System.out.println("START : Invoice Modification Updation");
                        ResultSet rsInvModCd = null;
                        String InvModCdDetail = "SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE CHECK_POINT_REMARK='' ORDER BY BALE_NO";
                        rsInvModCd = data.getResult(InvModCdDetail);
                        rsInvModCd.first();
                        if (rsInvModCd.getRow() > 0) {
                            while (!rsInvModCd.isAfterLast()) {

                                String baleNo = rsInvModCd.getString("BALE_NO");
                                String baleDate = rsInvModCd.getString("PACKING_DATE");
                                String partyCd = rsInvModCd.getString("PARTY_CODE");

                                String chargCd = data.getStringValueFromDB("SELECT CHARGE_CODE_NEW FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE PROCESSING_DATE>='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND BALE_NO='" + baleNo + "' AND BALE_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' AND APPROVED=1 AND CANCELED=0 AND F6=1");
                                if (chargCd.equals("01")) {
                                    double NoLimit = Double.valueOf(1000000000.00);
                                    String sql90 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CHARGE_CODE='" + chargCd + "',CRITICAL_LIMIT_AMT='" + NoLimit + "' WHERE BALE_NO='" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' ";
                                    data.Execute(sql90);
                                }

                                String trnsCd = "";
                                trnsCd = data.getStringValueFromDB("SELECT TRANSPORTER_CODE FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE PROCESSING_DATE>='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND BALE_NO='" + baleNo + "' AND BALE_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' AND APPROVED=1 AND CANCELED=0 AND (TRANSPORTER_CODE IS NOT NULL OR TRANSPORTER_CODE!='') ORDER BY DOC_NO DESC");
                                if (!trnsCd.equalsIgnoreCase("")) {
                                    String sql91 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET TRANSPORTER_CODE='" + trnsCd + "' WHERE BALE_NO='" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' ";
                                    data.Execute(sql91);
                                }

                                String vehicalNo = "";
                                vehicalNo = data.getStringValueFromDB("SELECT VEHICLE_NO FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE PROCESSING_DATE>='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND BALE_NO='" + baleNo + "' AND BALE_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' AND APPROVED=1 AND CANCELED=0 AND (VEHICLE_NO IS NOT NULL OR VEHICLE_NO!='') ORDER BY DOC_NO DESC");
                                if (!vehicalNo.equalsIgnoreCase("")) {
                                    String sql92 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET VEHICLE_NO='" + vehicalNo + "' WHERE BALE_NO='" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' ";
                                    data.Execute(sql92);
                                }

                                String advNo = "";
                                advNo = data.getStringValueFromDB("SELECT ADV_DOC_NO FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE PROCESSING_DATE>='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND BALE_NO='" + baleNo + "' AND BALE_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' AND APPROVED=1 AND CANCELED=0 AND (ADV_DOC_NO IS NOT NULL OR ADV_DOC_NO!='') ORDER BY DOC_NO DESC");
                                if (!advNo.equalsIgnoreCase("")) {
                                    String sql93 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET ADV_DOC_NO='" + advNo + "' WHERE BALE_NO='" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' ";
                                    data.Execute(sql93);
                                }

                                double criticalLimit = 0, InvAmt = 0, IGSTAmt = 0, SGSTAmt = 0, CGSTAmt = 0, GSTCompCessAmt = 0;

                                criticalLimit = data.getDoubleValueFromDB("SELECT CRITICAL_LIMIT_NEW FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE PROCESSING_DATE>='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND BALE_NO='" + baleNo + "' AND BALE_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' AND APPROVED=1 AND CANCELED=0 AND CRITICAL_LIMIT_NEW>0 ORDER BY DOC_NO DESC");
                                if (criticalLimit > 0) {
                                    String sql94 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET PARTY_CRITICAL_LIMIT='" + criticalLimit + "',CRITICAL_LIMIT_AMT='" + criticalLimit + "' WHERE BALE_NO='" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' ";
                                    data.Execute(sql94);
                                }

                                InvAmt = data.getDoubleValueFromDB("SELECT ADV_AGN_INV_AMT FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE PROCESSING_DATE>='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND BALE_NO='" + baleNo + "' AND BALE_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' AND APPROVED=1 AND CANCELED=0 AND ADV_AGN_INV_AMT>0 ORDER BY DOC_NO DESC");
                                if (InvAmt > 0) {
                                    String sql95 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET ADV_AGN_INV_AMT='" + InvAmt + "' WHERE BALE_NO='" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' ";
                                    data.Execute(sql95);
                                }

                                IGSTAmt = data.getDoubleValueFromDB("SELECT ADV_AGN_IGST_AMT FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE PROCESSING_DATE>='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND BALE_NO='" + baleNo + "' AND BALE_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' AND APPROVED=1 AND CANCELED=0 AND ADV_AGN_IGST_AMT>0 ORDER BY DOC_NO DESC");
                                if (InvAmt > 0) {
                                    String sql96 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET ADV_AGN_IGST_AMT='" + InvAmt + "' WHERE BALE_NO='" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' ";
                                    data.Execute(sql96);
                                }

                                SGSTAmt = data.getDoubleValueFromDB("SELECT ADV_AGN_SGST_AMT FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE PROCESSING_DATE>='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND BALE_NO='" + baleNo + "' AND BALE_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' AND APPROVED=1 AND CANCELED=0 AND ADV_AGN_SGST_AMT>0 ORDER BY DOC_NO DESC");
                                if (InvAmt > 0) {
                                    String sql97 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET ADV_AGN_SGST_AMT='" + InvAmt + "' WHERE BALE_NO='" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' ";
                                    data.Execute(sql97);
                                }

                                CGSTAmt = data.getDoubleValueFromDB("SELECT ADV_AGN_CGST_AMT FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE PROCESSING_DATE>='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND BALE_NO='" + baleNo + "' AND BALE_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' AND APPROVED=1 AND CANCELED=0 AND ADV_AGN_CGST_AMT>0 ORDER BY DOC_NO DESC");
                                if (InvAmt > 0) {
                                    String sql98 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET ADV_AGN_CGST_AMT='" + InvAmt + "' WHERE BALE_NO='" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' ";
                                    data.Execute(sql98);
                                }

                                GSTCompCessAmt = data.getDoubleValueFromDB("SELECT ADV_AGN_GST_COMP_CESS_AMT FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE PROCESSING_DATE>='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND BALE_NO='" + baleNo + "' AND BALE_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' AND APPROVED=1 AND CANCELED=0 AND ADV_AGN_GST_COMP_CESS_AMT>0 ORDER BY DOC_NO DESC");
                                if (GSTCompCessAmt > 0) {
                                    String sql99 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET ADV_AGN_GST_COMP_CESS_AMT='" + GSTCompCessAmt + "' WHERE BALE_NO='" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' ";
                                    data.Execute(sql99);
                                }

                                if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE PROCESSING_DATE>='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND BALE_NO='" + baleNo + "' AND BALE_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' AND APPROVED=1 AND CANCELED=0 AND WITHOUT_CRITICAL_LIMIT=1")) {
                                    double noLimit = Double.valueOf(1000000000.00);
                                    String upLimitUp = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CRITICAL_LIMIT_AMT='" + noLimit + "' WHERE BALE_NO='" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE='" + partyCd + "' ";
                                    data.Execute(upLimitUp);
                                }

                                rsInvModCd.next();
                            }
                        }
                        System.out.println("END : Invoice Modification Updation");
//-------------------------------------------------------------------------------                

//-------------------------------------------------------------------------------                        
                        //PDC Party Updation
                        System.out.println("START : PDC Party Updation");
                        ResultSet rsPDC = null;
                        String PDCDetail = "SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE CHECK_POINT_REMARK='' AND CHARGE_CODE='08' ORDER BY BALE_NO";
                        rsPDC = data.getResult(PDCDetail);
                        rsPDC.first();
                        if (rsPDC.getRow() > 0) {
                            while (!rsPDC.isAfterLast()) {

                                String pcNo = rsPDC.getString("PIECE_NO");
                                String partyCd = rsPDC.getString("PARTY_CODE");

                                if (data.IsRecordExist("SELECT PDC_PARTY_CODE,PDC_PIECE_NO,PDC_BILLING_DATE FROM PRODUCTION.FELT_PDC_HEADER H,PRODUCTION.FELT_PDC_BANK_DETAIL B,PRODUCTION.FELT_PDC_PIECE_DETAIL P WHERE H.PDC_DOC_NO=P.PDC_DOC_NO AND H.PDC_DOC_NO=B.PDC_DOC_NO AND H.APPROVED=1 AND H.CANCELED=0 AND P.PDC_PIECE_STATUS IN ('INSERT','ADD') AND H.PDC_PARTY_CODE='" + partyCd + "' AND P.PDC_PIECE_NO='" + pcNo + "' AND B.PDC_BILLING_DATE<=CURDATE() ORDER BY PDC_PIECE_NO,PDC_BILLING_DATE DESC")) {
                                    double noLimit = Double.valueOf(1000000000.00);
                                    String upLimitUp = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CRITICAL_LIMIT_AMT='" + noLimit + "',CHECK_POINT_REMARK='' WHERE PARTY_CODE='" + partyCd + "' AND PIECE_NO='" + pcNo + "' ";
                                    data.Execute(upLimitUp);
                                } else {
                                    String upLimitUp = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CHECK_POINT_REMARK='PDC Not Found' WHERE PARTY_CODE='" + partyCd + "' AND PIECE_NO='" + pcNo + "' ";
                                    data.Execute(upLimitUp);
                                }

                                rsPDC.next();
                            }
                        }
                        System.out.println("END : PDC Party Updation");
//-------------------------------------------------------------------------------   

////------------------------------------------------------------------------------------------------------
                        //---------------------------------------------------
                        //REMARK UPDATION
                        data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CHECK_POINT_REMARK = 'TRANSPORTER CODE MISSING' WHERE TRANSPORTER_CODE=0 AND CHECK_POINT_REMARK=''");

////----------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------
                        //Transporter Name DATA UPDATION
                        System.out.println("START : Transporter Name Data Updation");
                        String upTRData = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER I,DINESHMILLS.D_SAL_TRANSPORTER_MASTER T SET I.TRANSPORTER_NAME=T.TRANSPORTER_NAME WHERE I.TRANSPORTER_CODE=T.TRANSPORTER_ID AND T.COMPANY_ID=2 AND I.CHECK_POINT_REMARK=''";
                        data.Execute(upTRData);
                        System.out.println("END : Transporter Name Data Updation");

//------------------------------------------------------------------------------
                        //LC PARTY UPDATION
                        System.out.println("START : LC Party DATA Updation");
                        ResultSet rsLCmst = null;
                        String LCmstDetail = "SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE CHARGE_CODE='07' AND CHECK_POINT_REMARK=''";
                        rsLCmst = data.getResult(LCmstDetail);
                        rsLCmst.first();
                        if (rsLCmst.getRow() > 0) {
                            while (!rsLCmst.isAfterLast()) {

                                String baleNo = rsLCmst.getString("BALE_NO");
                                String baleDate = rsLCmst.getString("PACKING_DATE");
                                String partyCd = rsLCmst.getString("PARTY_CODE");
                                String chrgeCd = rsLCmst.getString("CHARGE_CODE");
                                String partyChrgeCd = rsLCmst.getString("PARTY_CHARGE_CODE");

                                if (!data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_SALES_LC_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND PARTY_CODE='" + partyCd + "' ")) {
                                    String upSQLC1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CHECK_POINT_REMARK='LC MASTER NOT AVAILABLE' WHERE BALE_NO = '" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE = '" + partyCd + "' ";
                                    data.Execute(upSQLC1);
                                } else {
                                    if (!data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_SALES_LC_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND PARTY_CODE='" + partyCd + "' AND EXP_DATE>=CURDATE() ORDER BY EXP_DATE DESC")) {
                                        String upSQLC2 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CHECK_POINT_REMARK='LC EXPIRED' WHERE BALE_NO = '" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE = '" + partyCd + "' ";
                                        data.Execute(upSQLC2);
                                    } else {
                                        String lcNo = data.getStringValueFromDB("SELECT LC_NO FROM PRODUCTION.FELT_SALES_LC_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND PARTY_CODE='" + partyCd + "' AND EXP_DATE>=CURDATE() ORDER BY EXP_DATE DESC");
                                        String upSQLC3 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET LC_NO='" + lcNo + "' WHERE BALE_NO = '" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE = '" + partyCd + "' ";
                                        data.Execute(upSQLC3);
                                    }
                                }

                                rsLCmst.next();
                            }
                        }
                        System.out.println("END : LC Party DATA Updation");
//-------------------------------------------------------------------------------------------

//                        //DOCUMENT THROUGH UPDATION
//                        System.out.println("START : Document Through Updation");
//                        ResultSet rsDocThr = null;
//                        String DocThrDetail = "SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE CHECK_POINT_REMARK=''";
//                        rsDocThr = data.getResult(DocThrDetail);
//                        rsDocThr.first();
//                        if (rsDocThr.getRow() > 0) {
//                            while (!rsDocThr.isAfterLast()) {
//
//                                String baleNo = rsDocThr.getString("BALE_NO");
//                                String baleDate = rsDocThr.getString("PACKING_DATE");
//                                String partyCd = rsDocThr.getString("PARTY_CODE");
//                                String chrgeCd = rsDocThr.getString("CHARGE_CODE");
//                                String partyChrgeCd = rsDocThr.getString("PARTY_CHARGE_CODE");
//
//                                if (chrgeCd.equals("01")) {
//                                    if (partyChrgeCd.equals("09")) {
//                                        String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET PARTY_BANK_NAME='F6',PARTY_BANK_ADDRESS1='',PARTY_BANK_ADDRESS2='' WHERE BALE_NO = '" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE = '" + partyCd + "' ";
//                                        data.Execute(upSQL1);
//                                    } else {
//                                        double noLimit01 = Double.valueOf(1000000000.00);
//                                        String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER I,DINESHMILLS.D_SAL_PARTY_MASTER P SET I.CRITICAL_LIMIT_AMT = '" + noLimit01 + "',I.PARTY_BANK_NAME=P.BANK_NAME,I.PARTY_BANK_ADDRESS1=P.BANK_ADDRESS,I.PARTY_BANK_ADDRESS2=P.BANK_CITY WHERE I.PARTY_CODE=P.PARTY_CODE AND I.BALE_NO = '" + baleNo + "' AND I.PACKING_DATE = '" + baleDate + "' AND P.PARTY_CODE = '" + partyCd + "' AND P.MAIN_ACCOUNT_CODE=210010 AND P.APPROVED=1 AND P.CANCELLED=0 ";
//                                        data.Execute(upSQL1);
//                                    }
//                                }
//                                if (chrgeCd.equals("02")) {
//                                    String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET PARTY_BANK_NAME='DIRECT',PARTY_BANK_ADDRESS1='',PARTY_BANK_ADDRESS2='' WHERE BALE_NO = '" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE = '" + partyCd + "' ";
//                                    data.Execute(upSQL1);
//                                }
//                                if (chrgeCd.equals("04")) {
//                                    String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER I,DINESHMILLS.D_SAL_PARTY_MASTER P SET I.PARTY_BANK_NAME=P.BANK_NAME,I.PARTY_BANK_ADDRESS1=P.BANK_ADDRESS,I.PARTY_BANK_ADDRESS2=P.BANK_CITY WHERE I.PARTY_CODE=P.PARTY_CODE AND I.BALE_NO = '" + baleNo + "' AND I.PACKING_DATE = '" + baleDate + "' AND P.PARTY_CODE = '" + partyCd + "' AND P.MAIN_ACCOUNT_CODE=210010 AND P.APPROVED=1 AND P.CANCELLED=0 ";
//                                    data.Execute(upSQL1);
//                                }
//                                if (chrgeCd.equals("07")) {
//                                    String bnkName = data.getStringValueFromDB("SELECT BANK_NAME FROM PRODUCTION.FELT_SALES_LC_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND PARTY_CODE='" + partyCd + "' AND EXP_DATE>=CURDATE() ORDER BY EXP_DATE DESC");
//                                    String bnkAds = data.getStringValueFromDB("SELECT BANK_ADDRESS FROM PRODUCTION.FELT_SALES_LC_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND PARTY_CODE='" + partyCd + "' AND EXP_DATE>=CURDATE() ORDER BY EXP_DATE DESC");
//                                    String bnkCity = data.getStringValueFromDB("SELECT BANK_CITY FROM PRODUCTION.FELT_SALES_LC_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND PARTY_CODE='" + partyCd + "' AND EXP_DATE>=CURDATE() ORDER BY EXP_DATE DESC");
//                                    double lcAmt = data.getDoubleValueFromDB("SELECT AMT FROM PRODUCTION.FELT_SALES_LC_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND PARTY_CODE='" + partyCd + "' AND EXP_DATE>=CURDATE() ORDER BY EXP_DATE DESC");
//                                    String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CRITICAL_LIMIT_AMT='" + lcAmt + "',PARTY_BANK_NAME='" + bnkName + "',PARTY_BANK_ADDRESS1='" + bnkAds + "',PARTY_BANK_ADDRESS2='" + bnkCity + "' WHERE BALE_NO = '" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE = '" + partyCd + "' ";
//                                    data.Execute(upSQL1);
//                                }
//                                if (chrgeCd.equals("08")) {
//                                    String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET PARTY_BANK_NAME='DIRECT PDC',PARTY_BANK_ADDRESS1='',PARTY_BANK_ADDRESS2='' WHERE BALE_NO = '" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE = '" + partyCd + "' ";
//                                    data.Execute(upSQL1);
//                                }
//                                if (chrgeCd.equals("09")) {
//                                    String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET PARTY_BANK_NAME='AGAINST ADVANCE PAYMENT',PARTY_BANK_ADDRESS1='',PARTY_BANK_ADDRESS2='' WHERE BALE_NO = '" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE = '" + partyCd + "' ";
//                                    data.Execute(upSQL1);
//                                }
//
//                                rsDocThr.next();
//                            }
//                        }
//                        System.out.println("END : Document Through Updation");
////-------------------------------------------------------------------------------------------
                        //DOCUMENT THROUGH UPDATION
                        System.out.println("START : Document Through AND Payment Terms Updation");
                        ResultSet rsDocThr = null;
                        String DocThrDetail = "SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE CHECK_POINT_REMARK=''";
                        rsDocThr = data.getResult(DocThrDetail);
                        rsDocThr.first();
                        if (rsDocThr.getRow() > 0) {
                            while (!rsDocThr.isAfterLast()) {

                                String baleNo = rsDocThr.getString("BALE_NO");
                                String baleDate = rsDocThr.getString("PACKING_DATE");
                                String partyCd = rsDocThr.getString("PARTY_CODE");
                                String chrgeCd = rsDocThr.getString("CHARGE_CODE");
                                String partyChrgeCd = rsDocThr.getString("PARTY_CHARGE_CODE");

                                String CrDays = data.getStringValueFromDB("SELECT CREDIT_DAYS FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND MAIN_ACCOUNT_CODE='210010' AND PARTY_CODE='" + partyCd + "' ");

                                if (chrgeCd.equals("01")) {
                                    if (partyChrgeCd.equals("09")) {
                                        String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET PARTY_BANK_NAME='F6',PARTY_BANK_ADDRESS1='',PARTY_BANK_ADDRESS2='',PAYMENT_TERMS=CONCAT('AGAINST ADVANCE PAYMENT') WHERE BALE_NO = '" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE = '" + partyCd + "' ";
                                        data.Execute(upSQL1);
                                    } else {
                                        double noLimit01 = Double.valueOf(1000000000.00);
//                                        String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER I,DINESHMILLS.D_SAL_PARTY_MASTER P SET I.CRITICAL_LIMIT_AMT = '" + noLimit01 + "',I.PARTY_BANK_NAME=P.BANK_NAME,I.PARTY_BANK_ADDRESS1=P.BANK_ADDRESS,I.PARTY_BANK_ADDRESS2=P.BANK_CITY WHERE I.PARTY_CODE=P.PARTY_CODE AND I.BALE_NO = '" + baleNo + "' AND I.PACKING_DATE = '" + baleDate + "' AND P.PARTY_CODE = '" + partyCd + "' AND P.MAIN_ACCOUNT_CODE=210010 AND P.APPROVED=1 AND P.CANCELLED=0 ";
                                        String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CRITICAL_LIMIT_AMT = '" + noLimit01 + "',PARTY_BANK_NAME='DIRECT',PARTY_BANK_ADDRESS1='',PARTY_BANK_ADDRESS2='',PAYMENT_TERMS=CONCAT('20 DAYS CREDIT FROM THE DATE OF INVOICE') WHERE BALE_NO = '" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE = '" + partyCd + "' ";
                                        data.Execute(upSQL1);
                                    }
                                }
                                if (chrgeCd.equals("02")) {
                                    String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET PARTY_BANK_NAME='DIRECT',PARTY_BANK_ADDRESS1='',PARTY_BANK_ADDRESS2='',PAYMENT_TERMS=CONCAT('" + CrDays + "',' DAYS CREDIT FROM THE DATE OF INVOICE') WHERE BALE_NO = '" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE = '" + partyCd + "' ";
                                    data.Execute(upSQL1);
                                }
                                if (chrgeCd.equals("04")) {
                                    String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER I,DINESHMILLS.D_SAL_PARTY_MASTER P SET I.PARTY_BANK_NAME=P.BANK_NAME,I.PARTY_BANK_ADDRESS1=P.BANK_ADDRESS,I.PARTY_BANK_ADDRESS2=P.BANK_CITY,PAYMENT_TERMS=CONCAT('" + CrDays + "',' DAYS HUNDI THROUGH BANK') WHERE I.PARTY_CODE=P.PARTY_CODE AND I.BALE_NO = '" + baleNo + "' AND I.PACKING_DATE = '" + baleDate + "' AND P.PARTY_CODE = '" + partyCd + "' AND P.MAIN_ACCOUNT_CODE=210010 AND P.APPROVED=1 AND P.CANCELLED=0 ";
                                    data.Execute(upSQL1);
                                }
                                if (chrgeCd.equals("07")) {
                                    String bnkName = data.getStringValueFromDB("SELECT BANK_NAME FROM PRODUCTION.FELT_SALES_LC_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND PARTY_CODE='" + partyCd + "' AND EXP_DATE>=CURDATE() ORDER BY EXP_DATE DESC");
                                    String bnkAds = data.getStringValueFromDB("SELECT BANK_ADDRESS FROM PRODUCTION.FELT_SALES_LC_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND PARTY_CODE='" + partyCd + "' AND EXP_DATE>=CURDATE() ORDER BY EXP_DATE DESC");
                                    String bnkCity = data.getStringValueFromDB("SELECT BANK_CITY FROM PRODUCTION.FELT_SALES_LC_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND PARTY_CODE='" + partyCd + "' AND EXP_DATE>=CURDATE() ORDER BY EXP_DATE DESC");
                                    double lcAmt = data.getDoubleValueFromDB("SELECT AMT FROM PRODUCTION.FELT_SALES_LC_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0 AND PARTY_CODE='" + partyCd + "' AND EXP_DATE>=CURDATE() ORDER BY EXP_DATE DESC");
                                    String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CRITICAL_LIMIT_AMT='" + lcAmt + "',PARTY_BANK_NAME='" + bnkName + "',PARTY_BANK_ADDRESS1='" + bnkAds + "',PARTY_BANK_ADDRESS2='" + bnkCity + "',PAYMENT_TERMS='AGAINST LETTER OF CREDIT' WHERE BALE_NO = '" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE = '" + partyCd + "' ";
                                    data.Execute(upSQL1);
                                }
                                if (chrgeCd.equals("08")) {
                                    String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET PARTY_BANK_NAME='DIRECT',PARTY_BANK_ADDRESS1='',PARTY_BANK_ADDRESS2='',PAYMENT_TERMS=CONCAT('AGAINST ','" + CrDays + "',' DAYS PDC') WHERE BALE_NO = '" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE = '" + partyCd + "' ";
                                    data.Execute(upSQL1);
                                }
                                if (chrgeCd.equals("09")) {
                                    String upSQL1 = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET PARTY_BANK_NAME='DIRECT',PARTY_BANK_ADDRESS1='',PARTY_BANK_ADDRESS2='',PAYMENT_TERMS='AGAINST ADVANCE PAYMENT' WHERE BALE_NO = '" + baleNo + "' AND PACKING_DATE = '" + baleDate + "' AND PARTY_CODE = '" + partyCd + "' ";
                                    data.Execute(upSQL1);
                                }

                                rsDocThr.next();
                            }
                        }
                        System.out.println("END : Document Through AND Payment Terms Updation");
//-------------------------------------------------------------------------------------------

//                        //---------------------------------------------------
//                        //ENHANCEMENT PARTY LIMIT UPDATION
//                        System.out.println("START : Enhancement Party Limit Updation");
//                        ResultSet rsEPCL = null;
//                        String EPCLDetail = "SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE CHECK_POINT_REMARK='' ORDER BY BALE_NO";
//                        rsEPCL = data.getResult(EPCLDetail);
//                        rsEPCL.first();
//                        if (rsEPCL.getRow() > 0) {
//                            while (!rsEPCL.isAfterLast()) {
//
//                                String baleNo = rsEPCL.getString("BALE_NO");
//                                String baleDate = rsEPCL.getString("PACKING_DATE");
//                                String partyCd = rsEPCL.getString("PARTY_CODE");
//                                double criticalLimit = 0;
//
//                                String sql = "SELECT H.DOC_NO,H.DOC_DATE,H.PARTY_CODE,H.PROCESSING_DATE,H.APPROVED,H.CANCELED, ";
//                                sql += "D.BALE_NO,D.BALE_DATE,E.GROUP_ENHANCE_PARTY_CRITICAL_LIMIT ";
//                                sql += "FROM PRODUCTION.FELT_GROUP_CRITICAL_LIMIT_HEADER H, ";
//                                sql += "PRODUCTION.FELT_GROUP_CRITICAL_LIMIT_DETAIL D, ";
//                                sql += "PRODUCTION.FELT_GROUP_CRITICAL_LIMIT_DETAIL_ENHANCEMENT E ";
//                                sql += "WHERE H.DOC_NO=D.DOC_NO AND H.DOC_DATE=D.DOC_DATE AND H.PARTY_CODE=D.PARTY_CODE ";
//                                sql += "AND H.PARTY_CODE='" + partyCd + "' AND H.PROCESSING_DATE>='" + EITLERPGLOBAL.getCurrentDateDB() + "' ";
//                                sql += "AND D.BALE_NO='" + baleNo + "' AND D.BALE_DATE='" + baleDate + "' ";
//                                sql += "AND H.APPROVED=1 AND H.CANCELED=0 ";
//                                sql += "AND H.DOC_NO=E.DOC_NO AND H.DOC_DATE=E.DOC_DATE AND H.PARTY_CODE=E.GROUP_PARTY_CODE ";
//                                sql += "AND E.GROUP_ENHANCE_PARTY_CRITICAL_LIMIT>0 ";
//                                sql += "ORDER BY H.DOC_NO DESC ";
//
//                                if (data.IsRecordExist(sql)) {
//                                    String enLimit = data.getStringValueFromDB("SELECT E.GROUP_ENHANCE_PARTY_CRITICAL_LIMIT FROM PRODUCTION.FELT_GROUP_CRITICAL_LIMIT_HEADER H,PRODUCTION.FELT_GROUP_CRITICAL_LIMIT_DETAIL D,PRODUCTION.FELT_GROUP_CRITICAL_LIMIT_DETAIL_ENHANCEMENT E WHERE H.DOC_NO=D.DOC_NO AND H.DOC_DATE=D.DOC_DATE AND H.PARTY_CODE=D.PARTY_CODE AND H.PARTY_CODE='" + partyCd + "' AND H.PROCESSING_DATE>='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND D.BALE_NO='" + baleNo + "' AND D.BALE_DATE='" + baleDate + "' AND H.APPROVED=1 AND H.CANCELED=0 AND H.DOC_NO=E.DOC_NO AND H.DOC_DATE=E.DOC_DATE AND H.PARTY_CODE=E.GROUP_PARTY_CODE AND E.GROUP_ENHANCE_PARTY_CRITICAL_LIMIT>0 ORDER BY H.DOC_NO DESC ");
//                                    criticalLimit = Double.parseDouble(enLimit);
//
//                                    String sqlEL = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET PARTY_CRITICAL_LIMIT='" + criticalLimit + "',CRITICAL_LIMIT_AMT='" + criticalLimit + "' WHERE BALE_NO='" + baleNo + "' AND PARTY_CODE='" + partyCd + "' ";
//                                    data.Execute(sqlEL);
//                                }
//
//                                rsEPCL.next();
//                            }
//                        }
//                        System.out.println("END : Enhancement Party Limit Updation");
////-------------------------------------------------------------------------------------------
                        //---------------------------------------------------
                        //ENHANCEMENT PARTY LIMIT UPDATION GROUP CODE WISE
                        System.out.println("START : Enhancement Group Party Limit Updation");
                        ResultSet rsEPCL = null;
                        ResultSet remark2 = null;
                        String EPCLDetail = "SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE CHECK_POINT_REMARK='' ORDER BY BALE_NO";
                        rsEPCL = data.getResult(EPCLDetail);
                        rsEPCL.first();
                        if (rsEPCL.getRow() > 0) {
                            while (!rsEPCL.isAfterLast()) {

                                String baleNo = rsEPCL.getString("BALE_NO");
                                String baleDate = rsEPCL.getString("PACKING_DATE");
                                String partyCd = rsEPCL.getString("PARTY_CODE");
                                double criticalLimit = 0;

                                String sql = "SELECT H.DOC_NO,H.DOC_DATE,D.PARTY_CODE,H.PROCESSING_DATE,H.APPROVED,H.CANCELED, ";
                                sql += "D.BALE_NO,D.BALE_DATE,E.GROUP_ENHANCE_PARTY_CRITICAL_LIMIT ";
                                sql += "FROM PRODUCTION.FELT_GROUP_CRITICAL_LIMIT_HEADER H, ";
                                sql += "PRODUCTION.FELT_GROUP_CRITICAL_LIMIT_DETAIL D, ";
                                sql += "PRODUCTION.FELT_GROUP_CRITICAL_LIMIT_DETAIL_ENHANCEMENT E ";
                                sql += "WHERE H.DOC_NO=D.DOC_NO AND H.DOC_DATE=D.DOC_DATE ";
                                sql += "AND D.PARTY_CODE='" + partyCd + "' AND H.PROCESSING_DATE>='" + EITLERPGLOBAL.getCurrentDateDB() + "' ";
                                sql += "AND D.BALE_NO='" + baleNo + "' AND D.BALE_DATE='" + baleDate + "' ";
                                sql += "AND H.APPROVED=1 AND H.CANCELED=0 ";
                                sql += "AND H.DOC_NO=E.DOC_NO AND H.DOC_DATE=E.DOC_DATE AND D.PARTY_CODE=E.GROUP_PARTY_CODE ";
                                sql += "AND E.GROUP_ENHANCE_PARTY_CRITICAL_LIMIT>0 ";
                                sql += "ORDER BY H.DOC_NO DESC ";

                                ResultSet docNoDate = data.getResult(sql);

                                if (data.IsRecordExist(sql)) {

                                    String rmk2 = "SELECT H.DOC_NO,H.DOC_DATE,H.PROCESSING_DATE,H.APPROVED,H.CANCELED,E.GROUP_PARTY_CODE, ";
                                    rmk2 += "COALESCE(E.GROUP_ENHANCE_PARTY_CRITICAL_LIMIT,0) AS GROUP_ENHANCE_PARTY_CRITICAL_LIMIT ";
                                    rmk2 += "FROM PRODUCTION.FELT_GROUP_CRITICAL_LIMIT_HEADER H, ";
                                    rmk2 += "PRODUCTION.FELT_GROUP_CRITICAL_LIMIT_DETAIL_ENHANCEMENT E ";
                                    rmk2 += "WHERE H.DOC_NO=E.DOC_NO AND H.DOC_DATE=E.DOC_DATE ";
                                    rmk2 += "AND H.PROCESSING_DATE>='" + EITLERPGLOBAL.getCurrentDateDB() + "' ";
                                    rmk2 += "AND H.DOC_NO='" + docNoDate.getString("DOC_NO") + "' AND H.DOC_DATE='" + docNoDate.getString("DOC_DATE") + "' ";
                                    rmk2 += "AND H.APPROVED=1 AND H.CANCELED=0 ";
                                    rmk2 += "ORDER BY E.GROUP_PARTY_CODE ";
                                    remark2 = data.getResult(rmk2);
                                    remark2.first();
                                    if (remark2.getRow() > 0) {
                                        while (!remark2.isAfterLast()) {

                                            String sqlEL = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET PARTY_CRITICAL_LIMIT='" + Double.parseDouble(remark2.getString("GROUP_ENHANCE_PARTY_CRITICAL_LIMIT")) + "',CRITICAL_LIMIT_AMT='" + Double.parseDouble(remark2.getString("GROUP_ENHANCE_PARTY_CRITICAL_LIMIT")) + "' WHERE PARTY_CODE='" + remark2.getString("GROUP_PARTY_CODE") + "' ";
                                            data.Execute(sqlEL);

                                            remark2.next();
                                        }
                                    }

                                    String enLimit = data.getStringValueFromDB("SELECT H.ENHANCE_PARTY_CRITICAL_LIMIT FROM PRODUCTION.FELT_GROUP_CRITICAL_LIMIT_HEADER H,PRODUCTION.FELT_GROUP_CRITICAL_LIMIT_DETAIL D,PRODUCTION.FELT_GROUP_CRITICAL_LIMIT_DETAIL_ENHANCEMENT E WHERE H.DOC_NO=D.DOC_NO AND H.DOC_DATE=D.DOC_DATE AND D.PARTY_CODE='" + partyCd + "' AND H.PROCESSING_DATE>='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND D.BALE_NO='" + baleNo + "' AND D.BALE_DATE='" + baleDate + "' AND H.APPROVED=1 AND H.CANCELED=0 AND H.DOC_NO=E.DOC_NO AND H.DOC_DATE=E.DOC_DATE AND D.PARTY_CODE=E.GROUP_PARTY_CODE AND E.GROUP_ENHANCE_PARTY_CRITICAL_LIMIT>0 ORDER BY H.DOC_NO DESC ");
                                    criticalLimit = Double.parseDouble(enLimit);

//                                    String sqlEL = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET PARTY_CRITICAL_LIMIT='" + criticalLimit + "',CRITICAL_LIMIT_AMT='" + criticalLimit + "' WHERE BALE_NO='" + baleNo + "' AND PARTY_CODE='" + partyCd + "' ";
                                    String sqlEL = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET GRP_ENHANCE_OUT_STANDING_AMT='" + criticalLimit + "' WHERE BALE_NO='" + baleNo + "' AND PARTY_CODE='" + partyCd + "' ";
                                    data.Execute(sqlEL);
                                }

                                rsEPCL.next();
                            }
                        }
                        System.out.println("END : Enhancement Group Party Limit Updation");
//-------------------------------------------------------------------------------------------

                        //ACTUAL LIMIT OF INVOICE PROCESS UPDATION
                        System.out.println("START : Actual Limit For Invoicing Updation");
                        //String upacLimit = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET CRITICAL_LIMIT_AMT = CASE WHEN CHARGE_CODE='09' THEN CASE WHEN PARTY_CRITICAL_LIMIT>0 THEN PARTY_CRITICAL_LIMIT ELSE ADV_AMT END ELSE ROUND(PARTY_CRITICAL_LIMIT-OUT_STANDING_AMT,2) END WHERE CRITICAL_LIMIT_AMT=0";
//                        String upacLimit = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CRITICAL_LIMIT_AMT = CASE WHEN CHARGE_CODE='09' THEN CASE WHEN PARTY_CRITICAL_LIMIT>0 AND PARTY_CRITICAL_LIMIT!=1 THEN PARTY_CRITICAL_LIMIT ELSE ADV_AMT END ELSE ROUND(PARTY_CRITICAL_LIMIT-OUT_STANDING_AMT,2) END WHERE CRITICAL_LIMIT_AMT=0 AND CHECK_POINT_REMARK=''";
                        String upacLimit = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CRITICAL_LIMIT_AMT = CASE WHEN CHARGE_CODE='09' THEN CASE WHEN PARTY_CRITICAL_LIMIT>0 AND PARTY_CRITICAL_LIMIT!=1 THEN PARTY_CRITICAL_LIMIT ELSE ADV_AMT END ELSE ROUND(PARTY_CRITICAL_LIMIT,2) END WHERE CRITICAL_LIMIT_AMT=0 AND CHECK_POINT_REMARK=''";
                        data.Execute(upacLimit);
                        //data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET INV_CRITICAL_LIMIT_AMT = CRITICAL_LIMIT_AMT");
                        data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET INV_CRITICAL_LIMIT_AMT = CRITICAL_LIMIT_AMT");
                        System.out.println("END : Actual Limit For Invoicing Updation");

////-------------------------------------------------------------------------------------------------------------------------------
//                        //CODE ADDES ON 06/10/2017 FOR MAKING INVOICEING WITHOUT CHECKING LIMITS
//                        System.out.println("START : MAKING INVOICEING WITHOUT CHECKING LIMITS");
//                        //String upacLimit = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET CRITICAL_LIMIT_AMT = CASE WHEN CHARGE_CODE='09' THEN CASE WHEN PARTY_CRITICAL_LIMIT>0 THEN PARTY_CRITICAL_LIMIT ELSE ADV_AMT END ELSE ROUND(PARTY_CRITICAL_LIMIT-OUT_STANDING_AMT,2) END WHERE CRITICAL_LIMIT_AMT=0";
//                        double noLmt = Double.valueOf(999999999.99);
//                        String nLimit = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CRITICAL_LIMIT_AMT = '" + noLmt + "'";
//                        data.Execute(nLimit);
//                        //data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET INV_CRITICAL_LIMIT_AMT = CRITICAL_LIMIT_AMT");
//                        data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET INV_CRITICAL_LIMIT_AMT = CRITICAL_LIMIT_AMT");
//                        System.out.println("END : MAKING INVOICEING WITHOUT CHECKING LIMITS");
////-------------------------------------------------------------------------------------------------------------------------------
                        //---------------------------------------------------
                        //CHECK CRITICAL LIMIT AMOUNT FOR INVOICING PROCESS
                        System.out.println("START : Check Critical Amount");
                        String chkCriticalLimitZero = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CHECK_POINT_REMARK=CASE WHEN CHARGE_CODE='09' THEN 'ADV BAL IS ZERO' ELSE CASE WHEN CHARGE_CODE='07' THEN 'LC BAL IS ZERO' ELSE 'CREDIT BAL IS ZERO' END END WHERE CRITICAL_LIMIT_AMT=0 AND CHECK_POINT_REMARK='' ";
                        data.Execute(chkCriticalLimitZero);

                        String chkCriticalLimitLess = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CHECK_POINT_REMARK=CASE WHEN CHARGE_CODE='09' THEN 'ADV BAL IS ZERO' ELSE CASE WHEN CHARGE_CODE='07' THEN 'LC BAL IS ZERO' ELSE 'O/S EXCEEDED' END END WHERE CRITICAL_LIMIT_AMT<0 AND CHECK_POINT_REMARK='' ";
                        data.Execute(chkCriticalLimitLess);

                        //String chkCriticalLimit = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET FLAG = 1 WHERE CRITICAL_LIMIT_AMT>=0";
                        String chkCriticalLimit = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET FLAG = 1 WHERE CRITICAL_LIMIT_AMT>0 AND CHECK_POINT_REMARK='' ";
                        data.Execute(chkCriticalLimit);

                        String chkGrpOSLimit = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CHECK_POINT_REMARK='O/S EXCEEDED', FLAG=0 WHERE FLAG=1 AND CHECK_POINT_REMARK='' AND CHARGE_CODE NOT IN ('01','09','07') AND GRP_ENHANCE_OUT_STANDING_AMT=0 AND GRP_OUT_STANDING_AMT>=GRP_CRITICAL_LIMIT";
                        data.Execute(chkGrpOSLimit);

                        System.out.println("END : Check Critical Amount");

                        //CHECK GST AMOUNT FOR INVOICING PROCESS
                        System.out.println("START : Check GST Amount");
                        //String chkCriticalLimit = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET FLAG = 1 WHERE CRITICAL_LIMIT_AMT>=0";
                        String chkGSTAmt = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET FLAG = 0,CHECK_POINT_REMARK='GSTIN/STATE NO MISSING' WHERE IGST_AMT+CGST_AMT+SGST_AMT=0 AND CHECK_POINT_REMARK=''";
                        data.Execute(chkGSTAmt);
                        System.out.println("END : Check GST Amount");

                        //CALCULATION OF INVOICE AMOUNT UPTO IT'S LIMIT
                        System.out.println("START : Invoice Amount Calculation till it's Limit");
                        ResultSet rsCalc = null;
                        String upCalc;
                        //String calcDetail = "SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS WHERE FLAG=1 ORDER BY PARTY_CODE,BALE_NO,PIECE_NO";
                        String calcDetail = "SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE FLAG=1 AND CHECK_POINT_REMARK='' ORDER BY PARTY_CODE,BALE_NO";
                        rsCalc = data.getResult(calcDetail);
                        rsCalc.first();
                        if (rsCalc.getRow() > 0) {
                            while (!rsCalc.isAfterLast()) {

                                Counter++;

                                Bar.setValue(Counter);
                                Bar.repaint();

                                String baleNo = rsCalc.getString("BALE_NO");
                                String partyCd = rsCalc.getString("PARTY_CODE");
                                String chargeCd = rsCalc.getString("CHARGE_CODE");
                                float osAmt = Math.round(rsCalc.getFloat("OUT_STANDING_AMT"));
                                float invAmt = Math.round(rsCalc.getFloat("INVOICE_AMT"));
                                //double invCriticalAmt = data.getDoubleValueFromDB("SELECT INV_CRITICAL_LIMIT_AMT FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS WHERE PARTY_CODE='"+partyCd+"' AND PIECE_NO='"+pieceNo+"'");
                                double invCriticalAmt = data.getDoubleValueFromDB("SELECT INV_CRITICAL_LIMIT_AMT FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE PARTY_CODE='" + partyCd + "' AND BALE_NO='" + baleNo + "' AND FLAG=1");
                                //rsCalc.getFloat("INV_CRITICAL_LIMIT_AMT");

                                //------- TCS Calculation --------
//                                String gstinPan = rsCalc.getString("GSTIN_PAN");
//                                float invAmtActual = rsCalc.getFloat("INVOICE_AMT");
//                                double tcsEligibleAmt = data.getDoubleValueFromDB("SELECT TCS_ELIGIBLE_AMOUNT FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE PARTY_CODE='" + partyCd + "' AND BALE_NO='" + baleNo + "' ");
//                                double taxableAmt = data.getDoubleValueFromDB("SELECT INVOICE_AMT FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE PARTY_CODE='" + partyCd + "' AND BALE_NO='" + baleNo + "' ");
//                                float tcsPer = rsCalc.getFloat("TCS_PER");
//                                double upTcsAmt = 0, upTcsPer = 0, upInvAmt = 0;
//                                if (tcsPer == 0 && (tcsEligibleAmt + taxableAmt) > 5000000) {
////                                    upTcsPer = 0.075;//till 31/03/2021
//                                    upTcsPer = 0.000;//onwards 01/04/2021
//                                    upTcsAmt = Math.round((taxableAmt * upTcsPer) / 100);
//                                    upInvAmt = invAmtActual + upTcsAmt;
//                                    data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET TCS_PER='" + upTcsPer + "',TCS_AMT='" + upTcsAmt + "',INVOICE_AMT='" + (upInvAmt) + "' WHERE PARTY_CODE='" + partyCd + "' AND BALE_NO='" + baleNo + "' ");
//                                    data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET TCS_ELIGIBLE_AMOUNT='" + (tcsEligibleAmt + taxableAmt) + "' WHERE GSTIN_PAN='" + gstinPan + "' AND PARTY_CODE='" + partyCd + "' AND BALE_NO>=" + baleNo + " ");
//                                    data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET TCS_ELIGIBLE_AMOUNT='" + (tcsEligibleAmt + taxableAmt) + "' WHERE GSTIN_PAN='" + gstinPan + "' AND PARTY_CODE>" + partyCd + " ");
//                                    invAmt = data.getLongValueFromDB("SELECT INVOICE_AMT FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE PARTY_CODE='" + partyCd + "' AND BALE_NO='" + baleNo + "' ");
//                                    invAmt = Math.round(invAmt);
//                                }
                                //--------------------------------
                                if ((invCriticalAmt - osAmt - invAmt) < 0) {
                                    data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET INV_CRITICAL_LIMIT_AMT='" + (invCriticalAmt - osAmt - invAmt) + "',INDICATOR=1,FLAG=0,CHECK_POINT_REMARK=CASE WHEN CHARGE_CODE='09' THEN 'ADV AMT IS LESS THEN INV AMT' ELSE CASE WHEN CHARGE_CODE='07' THEN 'LC AMT IS LESS THEN INV AMT' ELSE 'CREDIT AMT IS LESS THEN INV AMT' END END WHERE PARTY_CODE='" + partyCd + "' AND BALE_NO='" + baleNo + "'");
//                                    if (tcsPer == 0 && (tcsEligibleAmt + taxableAmt) > 5000000) {
//                                        data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET TCS_ELIGIBLE_AMOUNT='" + tcsEligibleAmt + "' WHERE GSTIN_PAN='" + gstinPan + "' AND PARTY_CODE='" + partyCd + "' AND BALE_NO>=" + baleNo + " ");
//                                        data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET TCS_ELIGIBLE_AMOUNT='" + tcsEligibleAmt + "' WHERE GSTIN_PAN='" + gstinPan + "' AND PARTY_CODE>" + partyCd + " ");
//                                    }
                                } else {

//                                    if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE PROCESSING_DATE=CURDATE() AND PARTY_CODE='" + partyCd + "'")) {
//                                        data.Execute("UPDATE PRODUCTION.FELT_INV_PROCESS_VAR_GST SET CRITICAL_LIMIT_NEW='" + (invCriticalAmt - invAmt) + "' WHERE PROCESSING_DATE=CURDATE() AND PARTY_CODE='" + partyCd + "'");
//                                    }
                                    if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE PROCESSING_DATE>=CURDATE() AND BALE_NO LIKE ('%" + baleNo + "%')")) {
                                        data.Execute("UPDATE PRODUCTION.FELT_INV_PROCESS_VAR_GST SET CRITICAL_LIMIT_NEW='" + (invCriticalAmt - invAmt) + "' WHERE PROCESSING_DATE>=CURDATE() AND BALE_NO LIKE ('%" + baleNo + "%')");
                                    }
                                    //upCalc = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET INV_CRITICAL_LIMIT_AMT='"+(invCriticalAmt-invAmt)+"' WHERE PARTY_CODE='"+partyCd+"' AND INDICATOR=0";
                                    upCalc = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET INV_CRITICAL_LIMIT_AMT='" + (invCriticalAmt - invAmt) + "' WHERE PARTY_CODE='" + partyCd + "' AND INDICATOR=0 AND CHECK_POINT_REMARK='' ";
                                    data.Execute(upCalc);
                                    //data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET INDICATOR=1 WHERE PARTY_CODE='"+partyCd+"' AND PIECE_NO='"+pieceNo+"'");
                                    data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET INDICATOR=1 WHERE PARTY_CODE='" + partyCd + "' AND BALE_NO='" + baleNo + "'");
                                    data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET CRITICAL_LIMIT_AMT='" + (invCriticalAmt - invAmt) + "', OUT_STANDING_AMT='" + (osAmt + invAmt) + "'  WHERE INDICATOR=0 AND FLAG=1 AND PARTY_CODE='" + partyCd + "' AND BALE_NO!='" + baleNo + "'");

                                }

                                rsCalc.next();
                            }
                        }
                        System.out.println("END : Invoice Amount Calculation till it's Limit");

                        //---------------------------------------------------
                        //CHECK INVOICE CRITICAL LIMIT AMOUNT of INVOICING PROCESS and UPDATE FLAG WHERE LIMIT BELOW 0
                        System.out.println("START : Check Critical Limit of Invoicing");
                        //data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET FLAG=0 WHERE INV_CRITICAL_LIMIT_AMT<0");
                        data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET FLAG=0,CHECK_POINT_REMARK=CASE WHEN CHARGE_CODE='09' THEN 'ADV AMT IS LESS THEN INV AMT' ELSE CASE WHEN CHARGE_CODE='07' THEN 'LC AMT IS LESS THEN INV AMT' ELSE 'CREDIT AMT IS LESS THEN INV AMT' END END WHERE INV_CRITICAL_LIMIT_AMT<0 AND CHECK_POINT_REMARK=''");
                        System.out.println("END : Check Critical Limit of Invoicing");

                        //---------------------------------------------------
                        //INVOICE NO UPDATION in Header & Detail
                        System.out.println("START : Invoice No Updation");
                        String invNo = "";
//                        String invNo = null;
//                        String gpNo = null;
//                        String tinvNo = null;
//                        String rinvNo = null;
//                        
                        ResultSet rsInvNo = null;
                        String upInvNo;
                        String invDetail = "SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE FLAG=1 AND INDICATOR=1 AND CHECK_POINT_REMARK='' ORDER BY PARTY_CODE,BALE_NO";
                        rsInvNo = data.getResult(invDetail);
                        rsInvNo.first();
                        if (rsInvNo.getRow() > 0) {
                            while (!rsInvNo.isAfterLast()) {

                                Counter++;

                                Bar.setValue(Counter);
                                Bar.repaint();

                                String baleNo = rsInvNo.getString("BALE_NO");
                                String baleDate = rsInvNo.getString("PACKING_DATE");
                                String partyCd = rsInvNo.getString("PARTY_CODE");

                                data.Execute("INSERT INTO PRODUCTION.FELT_INVOICE_PROCESS_LOG ( LOG_DATETIME, LOG_IP_NO, LOG_USER_ID, LOG_USER_NAME, LOG_BALE_NO, LOG_BALE_DATE, LOG_PARTY_CODE, LOG_INVOICE_NO, LOG_INVOICE_DATE, LOG_MESSAGE_SR_NO, LOG_MESSAGE, LOG_QUERY ) VALUES ( CURRENT_TIMESTAMP(), USER(), '" + EITLERPGLOBAL.gUserID + "', '" + gUserName + "', '" + baleNo + "', '" + baleDate + "', '" + partyCd + "', '', '', '0', 'START : INVOICE PROCESS', '' ) ");

                                if (data.IsRecordExist("SELECT * FROM D_FIN_PARTY_MASTER WHERE PARTY_CODE='" + partyCd + "' AND MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0 ", FinanceGlobal.FinURL)) {

                                    String sql = "SELECT LS_NO - LAST_USED_NO  FROM "
                                            + " "
                                            + "(SELECT * FROM "
                                            + " "
                                            + "(SELECT MAX(RIGHT(INVOICE_NO,6)) AS LS_NO "
                                            + " "
                                            + "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER H "
                                            + " "
                                            + "WHERE INVOICE_DATE >='" + InvFromDateDB + "' AND INVOICE_DATE <='" + InvToDateDB + "' "
                                            + " "
                                            + "AND CONCAT(INVOICE_NO,INVOICE_DATE)!='FE/0029932019-04-06' AND INVOICE_DATE >= DATE_SUB(NOW(), INTERVAL 30 DAY)) AS H, "
                                            + " "
                                            + "(SELECT LAST_USED_NO FROM DINESHMILLS.D_COM_FIRSTFREE WHERE MODULE_ID = 0 AND FIRSTFREE_NO = 208) AS M) AS M";

                                    int intSQL = data.getIntValueFromDB(sql);
//                                    System.out.println("*************LS_NO - LAST_USED_NO****************** : " + intSQL);

                                    if (intSQL != 0) {
//                                        System.out.println("From DATE : " + EITLERPGLOBAL.FinFromDateDB);
                                        String lastInvNo = data.getStringValueFromDB("SELECT MAX(RIGHT(INVOICE_NO,6)) AS LS_NO "
                                                + " "
                                                + "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER H "
                                                + " "
                                                + "WHERE INVOICE_DATE >='" + InvFromDateDB + "' AND INVOICE_DATE <='" + InvToDateDB + "' "
                                                + " "
                                                + "AND CONCAT(INVOICE_NO,INVOICE_DATE)!='FE/0029932019-04-06' AND INVOICE_DATE >= DATE_SUB(NOW(), INTERVAL 30 DAY)");
//                                        String lsNo = String.format("%06d",lastInvNo);
//                                        System.out.println("LAST NO : " + lastInvNo);
                                        data.Execute("INSERT INTO PRODUCTION.FELT_INVOICE_PROCESS_LOG ( LOG_DATETIME, LOG_IP_NO, LOG_USER_ID, LOG_USER_NAME, LOG_BALE_NO, LOG_BALE_DATE, LOG_PARTY_CODE, LOG_INVOICE_NO, LOG_INVOICE_DATE, LOG_MESSAGE_SR_NO, LOG_MESSAGE, LOG_QUERY ) VALUES ( CURRENT_TIMESTAMP(), USER(), '" + EITLERPGLOBAL.gUserID + "', '" + gUserName + "', '" + baleNo + "', '" + baleDate + "', '" + partyCd + "', '" + invNo + "', '" + EITLERPGLOBAL.getCurrentDateDB() + "', '0', 'FIRSTFREE UPDATED WITH " + lastInvNo + " ', '' ) ");
                                        data.Execute("UPDATE DINESHMILLS.D_COM_FIRSTFREE SET LAST_USED_NO='" + lastInvNo + "' WHERE MODULE_ID = 0 AND FIRSTFREE_NO = 208 ");
                                    }

                                    int intSQLCheck = data.getIntValueFromDB(sql);

                                    if (intSQLCheck == 0) {

                                        invNo = getNextFreeNo(2, 0, 208, false);

                                        upInvNo = "UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET INVOICE_NO='" + invNo + "',INVOICE_DATE='" + data.getStringValueFromDB("SELECT CURRENT_TIMESTAMP AS DATE FROM DUAL") + "',INVOICE_PARTY='" + partyCd + "' WHERE BALE_NO = '" + baleNo + "' AND PARTY_CODE='" + partyCd + "' ";
                                        data.Execute(upInvNo);

                                        data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET INVOICE_NO='" + invNo + "',INVOICE_DATE='" + data.getStringValueFromDB("SELECT CURRENT_TIMESTAMP AS DATE FROM DUAL") + "',INVOICE_PARTY='" + partyCd + "' WHERE BALE_NO = '" + baleNo + "' AND PARTY_CODE='" + partyCd + "' ");

                                        try {
                                            data.Execute("INSERT INTO PRODUCTION.FELT_INVOICE_PROCESS_LOG ( LOG_DATETIME, LOG_IP_NO, LOG_USER_ID, LOG_USER_NAME, LOG_BALE_NO, LOG_BALE_DATE, LOG_PARTY_CODE, LOG_INVOICE_NO, LOG_INVOICE_DATE, LOG_MESSAGE_SR_NO, LOG_MESSAGE, LOG_QUERY ) VALUES ( CURRENT_TIMESTAMP(), USER(), '" + EITLERPGLOBAL.gUserID + "', '" + gUserName + "', '" + baleNo + "', '" + baleDate + "', '" + partyCd + "', '" + invNo + "', '" + EITLERPGLOBAL.getCurrentDateDB() + "', '1', 'START : INSERTION INVOICE FOR " + invNo + " ', '' ) ");

                                            EITLERP.FeltSales.FeltInvReport.clsFeltSalesInvoiceImport.ImportInvoicesFelt1(true, partyCd, baleNo);
                                            invNo = getNextFreeNo(2, 0, 208, true);

                                            String upPkgFlg = "UPDATE PRODUCTION.FELT_PKG_SLIP_HEADER SET INVOICE_FLG=1 WHERE PKG_BALE_NO = '" + baleNo + "' AND PKG_BALE_DATE = '" + baleDate + "' AND PKG_PARTY_CODE='" + partyCd + "' ";
                                            data.Execute(upPkgFlg);

                                        } catch (Exception e) {
                                            data.Execute("INSERT INTO PRODUCTION.FELT_INVOICE_PROCESS_LOG ( LOG_DATETIME, LOG_IP_NO, LOG_USER_ID, LOG_USER_NAME, LOG_BALE_NO, LOG_BALE_DATE, LOG_PARTY_CODE, LOG_INVOICE_NO, LOG_INVOICE_DATE, LOG_MESSAGE_SR_NO, LOG_MESSAGE, LOG_QUERY ) VALUES ( CURRENT_TIMESTAMP(), USER(), '" + EITLERPGLOBAL.gUserID + "', '" + gUserName + "', '" + baleNo + "', '" + baleDate + "', '" + partyCd + "', '" + invNo + "', '" + EITLERPGLOBAL.getCurrentDateDB() + "', '1', 'ERROR : INSERTION INVOICE FOR " + invNo + " ', '' ) ");
                                            data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS SET INVOICE_NO='',INVOICE_DATE='0000-00-00 00:00:00' WHERE BALE_NO = '" + baleNo + "' AND PARTY_CODE='" + partyCd + "' ");
                                            data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET INVOICE_NO='',INVOICE_DATE='0000-00-00 00:00:00',CHECK_POINT_REMARK='PROCESS INTERRUPTED' WHERE BALE_NO = '" + baleNo + "' AND PARTY_CODE='" + partyCd + "' ");
                                            JOptionPane.showMessageDialog(null, "Process interrupted. Please try again.");
                                            e.printStackTrace();
                                            return;
                                        }

                                    }
//                                    String InvReportData = "INSERT INTO PRODUCTION.FELT_SALES_INV_PROCESS_REPORT_DATA SELECT *,CURRENT_TIMESTAMP() AS PROCESSING_TIME FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE BALE_NO = '" + baleNo + "' AND PARTY_CODE='" + partyCd + "'";
//                                    data.Execute(InvReportData);

                                } else {
                                    data.Execute("UPDATE TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER SET FLAG=0,CHECK_POINT_REMARK='PARTY MISSING IN FINANCE MASTER' WHERE BALE_NO = '" + baleNo + "' AND PARTY_CODE='" + partyCd + "'");
                                    data.Execute("INSERT INTO PRODUCTION.FELT_INVOICE_PROCESS_LOG ( LOG_DATETIME, LOG_IP_NO, LOG_USER_ID, LOG_USER_NAME, LOG_BALE_NO, LOG_BALE_DATE, LOG_PARTY_CODE, LOG_INVOICE_NO, LOG_INVOICE_DATE, LOG_MESSAGE_SR_NO, LOG_MESSAGE, LOG_QUERY ) VALUES ( CURRENT_TIMESTAMP(), USER(), '" + EITLERPGLOBAL.gUserID + "', '" + gUserName + "', '" + baleNo + "', '" + baleDate + "', '" + partyCd + "', '', '', '1', 'PARTY MISSING IN FINANCE PARTY MASTER', '' ) ");
                                }
                                rsInvNo.next();
                            }
                        }
                        System.out.println("END : Invoice No Updation");

//                        //---------------------------------------------------
                        //INSERT PROCESSED INVOICE LIST INTO REPORT DATA
                        System.out.println("START : Insert Report Data");
                        String InvReportData = "INSERT INTO PRODUCTION.FELT_SALES_INV_PROCESS_REPORT_DATA SELECT *,CURRENT_TIMESTAMP() AS PROCESSING_TIME FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER";
                        data.Execute(InvReportData);
                        System.out.println("END : Insert Report Data");

//                        //---------------------------------------------------
//                        //INSERT COMPLETE PROCESSED INVOICE LIST INTO COMPLETED TABLES (HEADER & DETAIL)
//                        System.out.println("START : Insert Completed Invoices");
//                        String compInvHeader = "INSERT INTO PRODUCTION.FELT_SAL_COMPLETED_INV_HEADER_LIST SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE FLAG=1 AND CHECK_POINT_REMARK=''";
//                        data.Execute(compInvHeader);
//                        String compInvDetail = "INSERT INTO PRODUCTION.FELT_SAL_COMPLETED_INV_DETAIL_LIST SELECT D.* FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS D,TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER H WHERE H.BALE_NO=D.BALE_NO AND H.FLAG=1 AND H.CHECK_POINT_REMARK=''";
//                        data.Execute(compInvDetail);
//                        System.out.println("END : Insert Completed Invoices");
//
//                        //---------------------------------------------------
//                        //INSERT REJECTED INVOICE LIST INTO REJECTED TABLES (HEADER & DETAIL)
//                        System.out.println("START : Insert Rejected Invoices");
//                        String rejInvHeader = "INSERT INTO PRODUCTION.FELT_SAL_REJECTED_INV_HEADER_LIST SELECT * FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER WHERE FLAG=0 AND CHECK_POINT_REMARK!=''";
//                        data.Execute(rejInvHeader);
//                        String rejInvDetail = "INSERT INTO PRODUCTION.FELT_SAL_REJECTED_INV_DETAIL_LIST SELECT D.* FROM TEMP_DATABASE.TEMP_INV_VAL_PROCESS D,TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER H WHERE H.BALE_NO=D.BALE_NO AND H.FLAG=0 AND H.CHECK_POINT_REMARK!=''";
//                        data.Execute(rejInvDetail);
//                        System.out.println("END : Insert Rejected Invoices");
                        //---------------------------------------------------
                        //InvValReport();
                        System.out.println("----------------------------------------------------------");
                        System.out.println("END OF PROCESS");

                        /*Closed on 01/07/2021 as instructed                        
                         // --------- Party Master TCS ELIGIBILITY Updation  --------------
                         System.out.println("START : Party Master TCS ELIGIBILITY Updation");
                         String upPartyMstTCSData = "UPDATE DINESHMILLS.D_SAL_PARTY_MASTER P,TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER T SET P.TCS_ELIGIBILITY=1 WHERE P.PARTY_CODE=T.PARTY_CODE AND T.TCS_ELIGIBLE_AMOUNT>5000000 ";
                         data.Execute(upPartyMstTCSData);
                         String upPartyAmendMstTCSData = "UPDATE DINESHMILLS.D_SAL_PARTY_AMEND_MASTER P,TEMP_DATABASE.TEMP_INV_VAL_PROCESS_HEADER T SET P.TCS_ELIGIBILITY=1 WHERE P.PARTY_CODE=T.PARTY_CODE AND T.TCS_ELIGIBLE_AMOUNT>5000000 ";
                         data.Execute(upPartyAmendMstTCSData);
                         System.out.println("END : Party Master TCS ELIGIBILITY Updation");
                         */
                        //--------------------------------------------------------------------
//                        //InvCheckListReport();
//                        System.out.println("----------------------------------------------------------");
//                        System.out.println("START FILLING RECORDS INTO FELT_SAL_INVOICE_HEADER AND POSTING SJ");
//                        System.out.println("----------------------------------------------------------");
//
//                        EITLERP.FeltSales.FeltInvReport.clsFeltSalesInvoiceImport.ImportInvoicesFelt1(true);
//
//                        System.out.println("----------------------------------------------------------");
//                        System.out.println("END OF POSTING SJ");
                        Bar.setValue(Bar.getMaximum());
                        Bar.repaint();
                        Bar.setVisible(true);

                        lblStatus.setText("Done.");

                        PostInvoiceReport();
                        //InvCheckListReport();

//                if(txtInvoiceNo.getText().substring(0,1).equals("F")){
//                URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptFeltInvoice.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&COMPANY_ID="+EITLERPGLOBAL.gCompanyID+"&INVOICE_NO="+txtInvoiceNo.getText()+"&INVOICE_DATE="+EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText())+"&PARTY_CODE="+txtPartyCode.getText());
//                System.out.println("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptFeltInvoice.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&COMPANY_ID="+EITLERPGLOBAL.gCompanyID+"&INVOICE_NO="+txtInvoiceNo.getText()+"&INVOICE_DATE="+EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText())+"&PARTY_CODE="+txtPartyCode.getText());
//                EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
//            }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                //Bar.setVisible(false);
                //lblStatus.setVisible(false);
                btnProcess.setVisible(false);

                if (rbtnText.isSelected()) {
                    txtManual.setText("");
                } else {
                    FormatGrid();
                    GenerateData();
                }
            }
        ;
    }

    .start();
        
    }    
    
    private void getDept() {

        java.sql.Date FinFromDate = java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(EITLERPGLOBAL.FinFromDate));
        java.sql.Date FinToDate = java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(EITLERPGLOBAL.FinToDate));
        java.sql.Date cur_Date = java.sql.Date.valueOf(EITLERPGLOBAL.getCurrentDateDB());

        if (EITLERPGLOBAL.gUserDeptID == 76 || EITLERPGLOBAL.gUserDeptID == 0 || getProcessFlag() == 1) {
            if ((cur_Date.after(FinFromDate) || cur_Date.compareTo(FinFromDate) == 0) && (cur_Date.before(FinToDate) || cur_Date.compareTo(FinToDate) == 0)) {
                //Within the year
                btnProcess.setEnabled(true);
            } else {
                btnProcess.setEnabled(false);
                btnProcess.setVisible(false);
                JOptionPane.showMessageDialog(this, "Current Date is Not Within Financial Year. Login to Current Financial Year.", "MESSAGE", JOptionPane.ERROR_MESSAGE);
            }
//            btnProcess.setEnabled(true);
//            btnProcessJSP.setEnabled(true);
        } else {
            btnProcess.setEnabled(false);
            btnProcess.setVisible(false);
//            btnProcessJSP.setEnabled(false);
//            btnProcessJSP.setVisible(false);
        }
    }

    private int getProcessFlag() {
        int pFlag = 0;
        try {
            pFlag = data.getIntValueFromDB("SELECT INVOICE_PROCESS_FLAG FROM D_COM_USER_MASTER WHERE USER_ID = '" + EITLERPGLOBAL.gUserID + "'");
            return pFlag;
        } catch (Exception e) {
            return pFlag;
        }
    }

    private void PostInvoiceReport() {

        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;

        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();

            String fdt = EITLERPGLOBAL.getCurrentDate();
            String tdt = EITLERPGLOBAL.getCurrentDate();
            String FromDate = EITLERPGLOBAL.formatDateDB(fdt);
            String ToDate = EITLERPGLOBAL.formatDateDB(tdt);
            int lotNo = data.getIntValueFromDB("SELECT MAX(LOT_NO) FROM PRODUCTION.FELT_SALES_INV_PROCESS_REPORT_DATA WHERE SUBSTRING(PROCESSING_TIME,1,10)='" + EITLERPGLOBAL.getCurrentDateDB() + "' ");

            parameterMap.put("RUNDATE", EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime());
            parameterMap.put("FROM_DATE", fdt);
            parameterMap.put("TO_DATE", tdt);

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            String strSQL = "SELECT ";
            strSQL += "PARTY_CODE,SUBSTRING(PARTY_NAME,1,20) AS PARTY_NAME,BALE_NO,PACKING_DATE,CHARGE_CODE,PRODUCT_CODE,INVOICE_AMT, ";
            strSQL += "CASE WHEN CHARGE_CODE='09' THEN CASE WHEN CRITICAL_LIMIT_AMT<=0 THEN '' ELSE CRITICAL_LIMIT_AMT END ELSE '' END AS OPENING_AMT, ";
            strSQL += "CASE WHEN CHARGE_CODE='09' THEN CASE WHEN INV_CRITICAL_LIMIT_AMT<=0 THEN '' ELSE INV_CRITICAL_LIMIT_AMT END ELSE '' END AS CLOSING_AMT, ";
            strSQL += "CASE WHEN INVOICE_NO!='' THEN CONCAT('FE/',INVOICE_NO) ELSE INVOICE_NO END AS INVOICE_NO, ";
            strSQL += "COALESCE(DATE_FORMAT(SUBSTRING(INVOICE_DATE,1,10),'%d/%m/%Y'),'') AS INVOICE_DATE, ";
            strSQL += "CHECK_POINT_REMARK,LOT_NO,PROCESSING_TIME ";
            strSQL += "FROM PRODUCTION.FELT_SALES_INV_PROCESS_REPORT_DATA ";
            strSQL += "WHERE SUBSTRING(PROCESSING_TIME,1,10)>='" + FromDate + "' ";
            strSQL += "AND SUBSTRING(PROCESSING_TIME,1,10)<='" + ToDate + "' ";
            strSQL += "AND LOT_NO='" + lotNo + "' ";

            System.out.println("SQL QUERY : " + strSQL);
            rpt.setReportName("/EITLERP/FeltSales/FeltInvReport/FeltPostInvReason.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                st.close();
                Conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }

    private void InvFinYear() {
        String CurDate = EITLERPGLOBAL.getCurrentDate();

        int FromYear;
        if (CurDate.substring(3, 5).endsWith("01") || CurDate.substring(3, 5).endsWith("02") || CurDate.substring(3, 5).endsWith("03")) {
            FromYear = Integer.parseInt(CurDate.substring(6, 10)) - 1;
        } else {
            FromYear = Integer.parseInt(CurDate.substring(6, 10));
        }
        System.out.println("From Year : " + FromYear);

        int ToYear;
        if (CurDate.substring(3, 5).endsWith("01") || CurDate.substring(3, 5).endsWith("02") || CurDate.substring(3, 5).endsWith("03")) {
            ToYear = Integer.parseInt(CurDate.substring(6, 10));
        } else {
            ToYear = Integer.parseInt(CurDate.substring(6, 10)) + 1;
        }
        System.out.println("To Year : " + ToYear);

        InvFromDateDB = FromYear + "-04-01";
        InvToDateDB = ToYear + "-03-31";
    }

    public void OutStandingAmt2() {
        String AsOnDate = EITLERPGLOBAL.getCurrentDateDB();
        String MainCode = "210010";
        int cnt = 0;

        data.Execute("TRUNCATE TEMP_DATABASE.TEMP_OUTSTANDING_AMT");
        data.Execute("TRUNCATE TEMP_DATABASE.TEMP_OUTSTANDING_REPORT");

        if (rbtnSelect.isSelected() || rbtnClubbing.isSelected()) {
            //System.out.println("ding");
            for (int j = 0; j < Table.getRowCount(); j++) {
                //System.out.println("ROW : "+Table.getSelectedRow()+" : Boolean : "+Table.getValueAt(j, 0)+" : col 2 : "+Table.getValueAt(j, 1));

                if (Table.getValueAt(j, 0).equals(true) && !Table.getValueAt(j, 5).equals("09")) {
//                if (Table.getValueAt(j, 0).equals(true) && (!Table.getValueAt(j, 5).equals("09") || !Table.getValueAt(j, 5).equals("07")) ) { // ADDED on 21/03/2020 as per LC REQUIRED
                    String GroupMainCode = data.getStringValueFromDB("SELECT H.GROUP_CODE FROM PRODUCTION.FELT_GROUP_MASTER_DETAIL D,PRODUCTION.FELT_GROUP_MASTER_HEADER H WHERE D.GROUP_CODE=H.GROUP_CODE AND D.PARTY_CODE = '" + Table.getValueAt(j, 3) + "' AND H.APPROVED=1 AND H.CANCELED=0 ");
//                    data.Execute("INSERT INTO TEMP_DATABASE.TEMP_OUTSTANDING_AMT (MAIN_PARTY_CODE,SUB_PARTY_CODE) VALUES ('" + GroupMainParty + "','" + Table.getValueAt(j, 3) + "')");
                    data.Execute("INSERT INTO TEMP_DATABASE.TEMP_OUTSTANDING_AMT (SUB_PARTY_CODE,MAIN_GROUP_CODE) VALUES ('" + Table.getValueAt(j, 3) + "','" + GroupMainCode + "')");
                }
            }
//                data.Execute("UPDATE TEMP_DATABASE.TEMP_OUTSTANDING_AMT SET MAIN_PARTY_CODE = SUB_PARTY_CODE WHERE MAIN_PARTY_CODE=''");
            data.Execute("UPDATE TEMP_DATABASE.TEMP_OUTSTANDING_AMT SET MAIN_PARTY_CODE=CASE WHEN LENGTH(MAIN_PARTY_CODE)>0 THEN MAIN_PARTY_CODE ELSE SUB_PARTY_CODE END");
            data.Execute("INSERT INTO TEMP_DATABASE.TEMP_OUTSTANDING_REPORT (MAIN_PARTY_CODE,MAIN_GROUP_CODE) SELECT DISTINCT MAIN_PARTY_CODE,MAIN_GROUP_CODE FROM TEMP_DATABASE.TEMP_OUTSTANDING_AMT");

        }

        createFile1();
        createFile2();

    }

    private void createFile2() {
        try {
//            System.out.println("InvoiceType : " + InvoiceType);
            double MainBalance = 0, SubBalance = 0;
            String GroupMainParty = "", GroupSubParty = "", GroupMainCode = "", Record = "";
            String InvoiceNo = "", InvoiceDate = "", strMainBalance = "", strBalance = "", strDecimal = "", MainCode = "";
            ResultSet rsMainParty = null, rsSubParty = null;
            //String FileName = "/data/Balance_Transfer_Cobol/"+EITLERPGLOBAL.getCurrentDateDB().substring(8,10)+
            //EITLERPGLOBAL.getCurrentDateDB().substring(5,7)+EITLERPGLOBAL.getCurrentDateDB().substring(2,4);
//            String FileName = "/data/Balance_Transfer_Cobol/ost";
            HashMap List = new HashMap();

            int InvoiceType = 2;
            MainCode = "210010";

            data.Execute("TRUNCATE TEMP_DATABASE.TEMP_BAL_TR");

            rsMainParty = data.getResult("SELECT DISTINCT MAIN_GROUP_CODE FROM TEMP_DATABASE.TEMP_OUTSTANDING_REPORT WHERE COALESCE(MAIN_GROUP_CODE,'') != '' ORDER BY MAIN_GROUP_CODE");
            rsMainParty.first();
            if (rsMainParty.getRow() > 0) {
                while (!rsMainParty.isAfterLast()) {
                    Record = "";
                    MainBalance = 0;
                    SubBalance = 0;
//                    GroupMainParty = rsMainParty.getString("MAIN_PARTY_CODE");
                    GroupMainCode = rsMainParty.getString("MAIN_GROUP_CODE");
//                    MainBalance=BalanceTransfer1(MainCode, GroupMainParty);

                    rsSubParty = data.getResult("SELECT D.PARTY_CODE FROM PRODUCTION.FELT_GROUP_MASTER_DETAIL D,PRODUCTION.FELT_GROUP_MASTER_HEADER H WHERE D.GROUP_CODE=H.GROUP_CODE AND H.GROUP_CODE ='" + GroupMainCode + "' AND H.APPROVED=1 AND H.CANCELED=0");
                    rsSubParty.first();
                    if (rsSubParty.getRow() > 0) {
                        while (!rsSubParty.isAfterLast()) {
                            GroupSubParty = rsSubParty.getString("PARTY_CODE");
                            SubBalance = EITLERPGLOBAL.round(SubBalance + BalanceTransfer1(MainCode, GroupSubParty), 2);
//                            SubBalance = EITLERPGLOBAL.round(BalanceTransfer1(MainCode, GroupSubParty), 2);
                            System.out.println("GroupSubParty : " + GroupSubParty + " SubBalance : " + SubBalance);
//                            MainBalance = MainBalance + SubBalance;
//                            data.Execute("UPDATE TEMP_DATABASE.TEMP_OUTSTANDING_AMT SET SUB_OUTSTANDING_BAL=" + SubBalance + " WHERE MAIN_PARTY_CODE='" + GroupMainParty + "' AND SUB_PARTY_CODE='" + GroupSubParty + "'");
                            rsSubParty.next();
                        }
                    }
                    if (MainBalance == 0) {
                        MainBalance = EITLERPGLOBAL.round(BalanceTransfer1(MainCode, GroupMainParty), 2);
                        data.Execute("UPDATE TEMP_DATABASE.TEMP_OUTSTANDING_AMT SET SUB_OUTSTANDING_BAL=" + MainBalance + " WHERE MAIN_PARTY_CODE='" + GroupMainParty + "' ");
                    }

                    data.Execute("UPDATE TEMP_DATABASE.TEMP_OUTSTANDING_REPORT SET GROUP_OUTSTANDING_BAL=" + SubBalance + " WHERE MAIN_GROUP_CODE='" + GroupMainCode + "'");

                    //strMainBalance = new BigDecimal(MainBalance+SubBalance).setScale(2,BigDecimal.ROUND_HALF_UP).toString();;
//                    strMainBalance = new BigDecimal(SubBalance).setScale(2,BigDecimal.ROUND_HALF_UP).toString();//MainBalance+
//                    strBalance = strMainBalance.substring(0,strMainBalance.indexOf("."));
//                    strDecimal = strMainBalance.substring(strMainBalance.indexOf(".")+1);
//                    if(strBalance.length()<10) {
//                        strBalance = EITLERPGLOBAL.padLeftEx(strBalance, "0", 10);
//                    } else {
//                        //                        JOptionPane.showMessageDialog(null,"Party Code : " + GroupMainParty + " " +
//                        //                        " Balance more then 10+2 format.   File can not generated." +
//                        //                        " Contact Administrator and EDP head.");
//                        return;
//                    }
//                    
//                    if(strDecimal.length()<2) {
//                        strDecimal = EITLERPGLOBAL.padRightEx(strDecimal, "0", 2);
//                    }
//                    
//                    Record = GroupMainParty+strBalance+strDecimal+"000000000000";
//                    System.out.println(GroupMainParty + " " +strMainBalance);
//                    List.put(Integer.toString(List.size()+1), Record);
                    rsMainParty.next();
                }
            }

//            String PrintLine = "";
//            // WRITE TO FILE
//            boolean sucess = new File("/data/Balance_Transfer_Cobol/").mkdir();
//            if(sucess) {
//                //JOptionPane.showMessageDialog(null,"Directory created...");
//            }
//            //String FileName = "/data/Balance_Transfer_Cobol/"+EITLERPGLOBAL.getCurrentDateDB().substring(8,10)+EITLERPGLOBAL.getCurrentDateDB().substring(5,7)+EITLERPGLOBAL.getCurrentDateDB().substring(0,4)+".txt";
//            
//            File file = new File(FileName);
//            
//            boolean exists = file.createNewFile();
//            if(!exists) {
//                //JOptionPane.showMessageDialog(null,"File Already exists...");
//            }
//            BufferedWriter aFile=new BufferedWriter(new FileWriter(file));
//            
//            for(int i=1;i<=List.size();i++) {
//                PrintLine = List.get(Integer.toString(i)).toString();
//                //System.out.println(PrintLine);
//                aFile.write(PrintLine);
//                aFile.newLine();
//            }
//            aFile.close();
            System.out.println("Group O/S File Created sucessfully...");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
