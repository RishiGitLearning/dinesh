/*
 * frmSalesInvoice.java
 *
 * Created on May 15, 2008, 4:12 PM
 */
package EITLERP.FeltSales.FeltInvReport;

/**
 *
 * @author root
 */
//import EITLERP.Sales.*;
import javax.swing.*;
import java.awt.*;
import EITLERP.*;
import EITLERP.FeltSales.FeltGSTAdvancePaymentEntryForm.frmFeltGSTAdvancePaymentEntryForm;
import EITLERP.FeltSales.FeltPacking.frmFeltPacking;
import EITLERP.FeltSales.FeltQualityRateMaster.frmFeltQltRateMaster;
import EITLERP.FeltSales.common.JavaMail;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import javax.swing.text.*;
import java.awt.event.*;
import java.net.*;
import EITLERP.Utils.*;
import java.io.*;
import EITLERP.Finance.*;
import EITLERP.Production.FeltDiscRateMaster.clsDiscRateMaster;
import EITLERP.Production.FeltDiscRateMaster.frmDiscRateMaster;
import EITLERP.Production.FeltDiscRateMaster.frmPartyCodeFind;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;

public class frmFeltSalesInvoice extends javax.swing.JApplet {

    private int EditMode = 0;
    private clsFeltSalesInvoice objInvoice;
    private NumberToWords value;
    private NumWord nw;

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLTableModel DataModelA;
    private EITLTableModel DataModelHS;
    private EITLTableModel DataModelDesc;
    private EITLTableModel DataModelDiscount;
    private EITLTableModel DataModelOtherpartyDiscount;

    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;

    private EITLTableModel DataModelL;

    public frmPendingApprovals frmPA;
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module

    /**
     * Initializes the applet frmSalesInvoice
     */
    public void init() {

        setSize(878, 575);
        initComponents();
        lblTitle.setForeground(Color.WHITE);
        //lblLrNo.setVisible(false);
        //txtLrNo.setVisible(false);
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        objInvoice = new clsFeltSalesInvoice();

        if (getName().equals("Link")) {

        } else {
            if (objInvoice.LoadData(EITLERPGLOBAL.gCompanyID)) {
                objInvoice.MoveLast();
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while loading data. Error is " + objInvoice.LastError);
            }
        }

        SetFields(false);

    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbHierarchy ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + clsFeltSalesInvoice.ModuleID + "");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + clsFeltSalesInvoice.ModuleID + "");
        }

        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtInvoiceNo = new javax.swing.JTextField();
        txtInvoiceDate = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        txtPartyName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtStation = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtChargeCode = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtPackingDate = new javax.swing.JTextField();
        txtWarehouseCode = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtBaleNo = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtGatepassNo = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtGatepassDate = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        txtTransporterCode = new javax.swing.JTextField();
        txtDueDate = new javax.swing.JTextField();
        lblDueDate = new javax.swing.JLabel();
        lblLrNo = new javax.swing.JLabel();
        txtLrNo = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jLabel47 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        txtBasAmt = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtCST2 = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        txtCST5 = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        txtVAT = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        txtTCS = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        txtSD = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        txtInsCharges = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        txtChemicalCharges = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtSeamCharges = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        txtNetAmount = new javax.swing.JTextField();
        txtExcise = new javax.swing.JTextField();
        txtDiscAmt = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        txtGrossAmount = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        txtIGST = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtCGST = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        txtSGST = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        txtGSTCompCess = new javax.swing.JTextField();
        btnShowBaleNo = new javax.swing.JButton();
        btnShowParty = new javax.swing.JButton();
        btnShowDisc = new javax.swing.JButton();
        btnShowRate = new javax.swing.JButton();
        btnShowParaModi = new javax.swing.JButton();
        jLabel50 = new javax.swing.JLabel();
        txtSpDiscAmt = new javax.swing.JTextField();
        lblTurnover = new javax.swing.JLabel();
        lblPANTurnover = new javax.swing.JLabel();
        lblReceipt = new javax.swing.JLabel();
        lblPANReceipt = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableL = new javax.swing.JTable();
        jLabel55 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        ApprovalPanel = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel38 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        OpgCancel = new javax.swing.JRadioButton();
        jLabel41 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel42 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdNext3 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        StatusPanel = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();

        getContentPane().setLayout(null);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText(" FELT SALES INVOICE");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 860, 25);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.setEnabled(false);
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 870, 40);

        jTabbedPane1.setBackground(new java.awt.Color(204, 204, 204));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });
        jPanel1.setLayout(null);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("Invoice No");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(20, 10, 120, 15);

        txtInvoiceNo.setDisabledTextColor(java.awt.Color.darkGray);
        txtInvoiceNo.setEnabled(false);
        jPanel1.add(txtInvoiceNo);
        txtInvoiceNo.setBounds(150, 10, 110, 19);

        txtInvoiceDate.setDisabledTextColor(java.awt.Color.darkGray);
        txtInvoiceDate.setEnabled(false);
        jPanel1.add(txtInvoiceDate);
        txtInvoiceDate.setBounds(430, 10, 110, 19);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Invoice Date");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(320, 10, 100, 15);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("Party Code");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(20, 40, 120, 15);

        txtPartyCode.setDisabledTextColor(java.awt.Color.darkGray);
        txtPartyCode.setEnabled(false);
        jPanel1.add(txtPartyCode);
        txtPartyCode.setBounds(150, 40, 110, 19);

        txtPartyName.setDisabledTextColor(java.awt.Color.darkGray);
        txtPartyName.setEnabled(false);
        jPanel1.add(txtPartyName);
        txtPartyName.setBounds(270, 40, 270, 19);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("Station");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(40, 130, 100, 15);

        txtStation.setDisabledTextColor(java.awt.Color.darkGray);
        txtStation.setEnabled(false);
        jPanel1.add(txtStation);
        txtStation.setBounds(150, 130, 230, 19);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("Charge Code");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(20, 70, 120, 15);

        txtChargeCode.setDisabledTextColor(java.awt.Color.darkGray);
        txtChargeCode.setEnabled(false);
        jPanel1.add(txtChargeCode);
        txtChargeCode.setBounds(150, 70, 110, 19);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel7.setText("Packing Date");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(50, 220, 90, 15);

        txtPackingDate.setDisabledTextColor(java.awt.Color.darkGray);
        txtPackingDate.setEnabled(false);
        jPanel1.add(txtPackingDate);
        txtPackingDate.setBounds(150, 220, 110, 19);

        txtWarehouseCode.setDisabledTextColor(java.awt.Color.darkGray);
        txtWarehouseCode.setEnabled(false);
        jPanel1.add(txtWarehouseCode);
        txtWarehouseCode.setBounds(150, 100, 110, 19);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel8.setText("Warehouse Code");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(10, 100, 130, 15);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel9.setText("Bale No");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(30, 190, 110, 15);

        txtBaleNo.setDisabledTextColor(java.awt.Color.darkGray);
        txtBaleNo.setEnabled(false);
        jPanel1.add(txtBaleNo);
        txtBaleNo.setBounds(150, 190, 110, 19);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel12.setText("Gatepass No.");
        jPanel1.add(jLabel12);
        jLabel12.setBounds(20, 310, 120, 15);

        txtGatepassNo.setDisabledTextColor(java.awt.Color.darkGray);
        txtGatepassNo.setEnabled(false);
        jPanel1.add(txtGatepassNo);
        txtGatepassNo.setBounds(150, 310, 110, 19);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel13.setText("Lr Date");
        jPanel1.add(jLabel13);
        jLabel13.setBounds(80, 280, 60, 15);

        txtGatepassDate.setDisabledTextColor(java.awt.Color.darkGray);
        txtGatepassDate.setEnabled(false);
        jPanel1.add(txtGatepassDate);
        txtGatepassDate.setBounds(150, 280, 110, 19);

        jLabel48.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel48.setText("Transporter Code");
        jPanel1.add(jLabel48);
        jLabel48.setBounds(10, 340, 130, 15);

        txtTransporterCode.setDisabledTextColor(java.awt.Color.darkGray);
        txtTransporterCode.setEnabled(false);
        jPanel1.add(txtTransporterCode);
        txtTransporterCode.setBounds(150, 340, 110, 19);

        txtDueDate.setDisabledTextColor(java.awt.Color.darkGray);
        txtDueDate.setEnabled(false);
        jPanel1.add(txtDueDate);
        txtDueDate.setBounds(150, 160, 110, 19);

        lblDueDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDueDate.setText("Due Date");
        jPanel1.add(lblDueDate);
        lblDueDate.setBounds(60, 160, 80, 15);

        lblLrNo.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblLrNo.setText("Lr No");
        jPanel1.add(lblLrNo);
        lblLrNo.setBounds(40, 250, 100, 15);

        txtLrNo.setDisabledTextColor(java.awt.Color.darkGray);
        txtLrNo.setEnabled(false);
        jPanel1.add(txtLrNo);
        txtLrNo.setBounds(150, 250, 110, 19);

        jPanel7.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.add(jPanel7);
        jPanel7.setBounds(330, 367, 480, 1);

        jLabel47.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel47.setText("Disc Amount");
        jLabel47.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(jLabel47);
        jLabel47.setBounds(310, 250, 119, 20);

        jLabel49.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel49.setText("Basic Amount");
        jLabel49.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(jLabel49);
        jLabel49.setBounds(310, 220, 119, 20);

        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel27.setText("Excise 12.50%");
        jLabel27.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(jLabel27);
        jLabel27.setBounds(570, 130, 110, 20);

        txtBasAmt.setDisabledTextColor(java.awt.Color.darkGray);
        txtBasAmt.setEnabled(false);
        jPanel1.add(txtBasAmt);
        txtBasAmt.setBounds(440, 220, 100, 19);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel14.setText("CST 2%");
        jLabel14.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(jLabel14);
        jLabel14.setBounds(570, 160, 110, 20);

        txtCST2.setDisabledTextColor(java.awt.Color.darkGray);
        txtCST2.setEnabled(false);
        jPanel1.add(txtCST2);
        txtCST2.setBounds(690, 160, 100, 19);

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel25.setText("CST 5%");
        jLabel25.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(jLabel25);
        jLabel25.setBounds(560, 190, 119, 20);

        txtCST5.setDisabledTextColor(java.awt.Color.darkGray);
        txtCST5.setEnabled(false);
        jPanel1.add(txtCST5);
        txtCST5.setBounds(690, 190, 100, 19);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel34.setText("VAT");
        jLabel34.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(jLabel34);
        jLabel34.setBounds(560, 220, 119, 20);

        txtVAT.setDisabledTextColor(java.awt.Color.darkGray);
        txtVAT.setEnabled(false);
        jPanel1.add(txtVAT);
        txtVAT.setBounds(690, 220, 100, 19);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel33.setText("TCS");
        jLabel33.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(jLabel33);
        jLabel33.setBounds(560, 250, 119, 20);

        txtTCS.setDisabledTextColor(java.awt.Color.darkGray);
        txtTCS.setEnabled(false);
        jPanel1.add(txtTCS);
        txtTCS.setBounds(690, 250, 100, 19);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel32.setText("SD Amount");
        jLabel32.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(jLabel32);
        jLabel32.setBounds(560, 280, 119, 20);

        txtSD.setDisabledTextColor(java.awt.Color.darkGray);
        txtSD.setEnabled(false);
        jPanel1.add(txtSD);
        txtSD.setBounds(690, 280, 100, 19);

        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel31.setText("Insurance Charges");
        jLabel31.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(jLabel31);
        jLabel31.setBounds(550, 310, 130, 20);

        txtInsCharges.setDisabledTextColor(java.awt.Color.darkGray);
        txtInsCharges.setEnabled(false);
        jPanel1.add(txtInsCharges);
        txtInsCharges.setBounds(690, 310, 100, 19);

        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel30.setText("Chemical Charges");
        jLabel30.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(jLabel30);
        jLabel30.setBounds(300, 280, 130, 20);

        txtChemicalCharges.setDisabledTextColor(java.awt.Color.darkGray);
        txtChemicalCharges.setEnabled(false);
        jPanel1.add(txtChemicalCharges);
        txtChemicalCharges.setBounds(440, 280, 100, 19);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel35.setText("Spiral/Pin/Seam Charges");
        jLabel35.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(jLabel35);
        jLabel35.setBounds(260, 310, 170, 20);

        txtSeamCharges.setDisabledTextColor(java.awt.Color.darkGray);
        txtSeamCharges.setEnabled(false);
        jPanel1.add(txtSeamCharges);
        txtSeamCharges.setBounds(440, 310, 100, 19);

        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel28.setText("Net Amount");
        jLabel28.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(jLabel28);
        jLabel28.setBounds(570, 370, 110, 20);

        txtNetAmount.setDisabledTextColor(java.awt.Color.darkGray);
        txtNetAmount.setEnabled(false);
        jPanel1.add(txtNetAmount);
        txtNetAmount.setBounds(690, 370, 100, 19);

        txtExcise.setDisabledTextColor(java.awt.Color.darkGray);
        txtExcise.setEnabled(false);
        jPanel1.add(txtExcise);
        txtExcise.setBounds(690, 130, 100, 19);

        txtDiscAmt.setDisabledTextColor(java.awt.Color.darkGray);
        txtDiscAmt.setEnabled(false);
        jPanel1.add(txtDiscAmt);
        txtDiscAmt.setBounds(440, 250, 100, 19);

        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel37.setText("Gross Amount");
        jLabel37.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(jLabel37);
        jLabel37.setBounds(330, 370, 100, 20);

        txtGrossAmount.setDisabledTextColor(java.awt.Color.darkGray);
        txtGrossAmount.setEnabled(false);
        jPanel1.add(txtGrossAmount);
        txtGrossAmount.setBounds(440, 370, 100, 19);

        lblRevNo.setText("...");
        jPanel1.add(lblRevNo);
        lblRevNo.setBounds(270, 15, 44, 15);

        jLabel43.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel43.setText("IGST 12%");
        jLabel43.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(jLabel43);
        jLabel43.setBounds(570, 10, 110, 20);

        txtIGST.setDisabledTextColor(java.awt.Color.darkGray);
        txtIGST.setEnabled(false);
        jPanel1.add(txtIGST);
        txtIGST.setBounds(690, 10, 100, 19);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel15.setText("CGST 6%");
        jLabel15.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(jLabel15);
        jLabel15.setBounds(570, 40, 110, 20);

        txtCGST.setDisabledTextColor(java.awt.Color.darkGray);
        txtCGST.setEnabled(false);
        jPanel1.add(txtCGST);
        txtCGST.setBounds(690, 40, 100, 19);

        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel26.setText("SGST 6%");
        jLabel26.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(jLabel26);
        jLabel26.setBounds(560, 70, 119, 20);

        txtSGST.setDisabledTextColor(java.awt.Color.darkGray);
        txtSGST.setEnabled(false);
        jPanel1.add(txtSGST);
        txtSGST.setBounds(690, 70, 100, 19);

        jLabel44.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel44.setText("GST Comp Cess");
        jLabel44.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(jLabel44);
        jLabel44.setBounds(549, 100, 130, 20);

        txtGSTCompCess.setDisabledTextColor(java.awt.Color.darkGray);
        txtGSTCompCess.setEnabled(false);
        jPanel1.add(txtGSTCompCess);
        txtGSTCompCess.setBounds(690, 100, 100, 19);

        btnShowBaleNo.setText("Show Bale");
        btnShowBaleNo.setMaximumSize(new java.awt.Dimension(78, 35));
        btnShowBaleNo.setMinimumSize(new java.awt.Dimension(78, 35));
        btnShowBaleNo.setPreferredSize(new java.awt.Dimension(78, 35));
        btnShowBaleNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowBaleNoActionPerformed(evt);
            }
        });
        jPanel1.add(btnShowBaleNo);
        btnShowBaleNo.setBounds(270, 200, 110, 20);

        btnShowParty.setText("Show Party");
        btnShowParty.setMaximumSize(new java.awt.Dimension(78, 35));
        btnShowParty.setMinimumSize(new java.awt.Dimension(78, 35));
        btnShowParty.setPreferredSize(new java.awt.Dimension(78, 35));
        btnShowParty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowPartyActionPerformed(evt);
            }
        });
        jPanel1.add(btnShowParty);
        btnShowParty.setBounds(410, 80, 130, 20);

        btnShowDisc.setText("Show Disc");
        btnShowDisc.setMaximumSize(new java.awt.Dimension(78, 35));
        btnShowDisc.setMinimumSize(new java.awt.Dimension(78, 35));
        btnShowDisc.setPreferredSize(new java.awt.Dimension(78, 35));
        btnShowDisc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowDiscActionPerformed(evt);
            }
        });
        jPanel1.add(btnShowDisc);
        btnShowDisc.setBounds(410, 110, 130, 20);

        btnShowRate.setText("Show Rate");
        btnShowRate.setMaximumSize(new java.awt.Dimension(78, 35));
        btnShowRate.setMinimumSize(new java.awt.Dimension(78, 35));
        btnShowRate.setPreferredSize(new java.awt.Dimension(78, 35));
        btnShowRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowRateActionPerformed(evt);
            }
        });
        jPanel1.add(btnShowRate);
        btnShowRate.setBounds(410, 140, 130, 20);

        btnShowParaModi.setFont(new java.awt.Font("Cantarell", 0, 10)); // NOI18N
        btnShowParaModi.setText("Show Para Modification");
        btnShowParaModi.setMaximumSize(new java.awt.Dimension(78, 35));
        btnShowParaModi.setMinimumSize(new java.awt.Dimension(78, 35));
        btnShowParaModi.setPreferredSize(new java.awt.Dimension(78, 35));
        btnShowParaModi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowParaModiActionPerformed(evt);
            }
        });
        jPanel1.add(btnShowParaModi);
        btnShowParaModi.setBounds(410, 170, 130, 20);

        jLabel50.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel50.setText("Sp.Disc Amount");
        jLabel50.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(jLabel50);
        jLabel50.setBounds(310, 340, 119, 20);

        txtSpDiscAmt.setDisabledTextColor(java.awt.Color.darkGray);
        txtSpDiscAmt.setEnabled(false);
        jPanel1.add(txtSpDiscAmt);
        txtSpDiscAmt.setBounds(440, 340, 100, 19);

        lblTurnover.setText("PAN Base Threshold Turn over ");
        jPanel1.add(lblTurnover);
        lblTurnover.setBounds(30, 398, 320, 15);

        lblPANTurnover.setText("TURNOVER AMOUNT");
        jPanel1.add(lblPANTurnover);
        lblPANTurnover.setBounds(330, 398, 130, 15);

        lblReceipt.setText("and Receipt ");
        jPanel1.add(lblReceipt);
        lblReceipt.setBounds(460, 398, 110, 15);

        lblPANReceipt.setText("RECEIPT AMOUNT");
        jPanel1.add(lblPANReceipt);
        lblPANReceipt.setBounds(560, 398, 110, 15);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jPanel2);
        jPanel2.setBounds(20, 393, 790, 25);

        jTabbedPane1.addTab("Invoice Header", jPanel1);

        jPanel8.setLayout(null);

        TableL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableL);

        jPanel8.add(jScrollPane1);
        jScrollPane1.setBounds(6, 38, 820, 300);

        jLabel55.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel55.setText("Invoice Items");
        jPanel8.add(jLabel55);
        jLabel55.setBounds(7, 14, 108, 15);

        jPanel9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel8.add(jPanel9);
        jPanel9.setBounds(100, 21, 720, 4);

        jTabbedPane1.addTab("Invoice Detail", jPanel8);

        ApprovalPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ApprovalPanel.setToolTipText("");
        ApprovalPanel.setLayout(null);

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Hierarchy :");
        ApprovalPanel.add(jLabel36);
        jLabel36.setBounds(5, 13, 100, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusLost(evt);
            }
        });
        ApprovalPanel.add(cmbHierarchy);
        cmbHierarchy.setBounds(110, 13, 270, 24);

        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel38.setText("From :");
        ApprovalPanel.add(jLabel38);
        jLabel38.setBounds(5, 43, 100, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        ApprovalPanel.add(txtFrom);
        txtFrom.setBounds(110, 43, 270, 22);

        jLabel39.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel39.setText("Remarks :");
        ApprovalPanel.add(jLabel39);
        jLabel39.setBounds(5, 76, 100, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        ApprovalPanel.add(txtFromRemarks);
        txtFromRemarks.setBounds(110, 73, 518, 22);

        jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel40.setText("Your Action :");
        ApprovalPanel.add(jLabel40);
        jLabel40.setBounds(5, 116, 100, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        OpgApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgApproveActionPerformed(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 169, 23);

        OpgFinal.setSelected(true);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgFinalActionPerformed(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        OpgCancel.setText("Cancel");
        OpgCancel.setEnabled(false);
        OpgCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgCancelMouseClicked(evt);
            }
        });
        OpgCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgCancelActionPerformed(evt);
            }
        });
        jPanel6.add(OpgCancel);
        OpgCancel.setBounds(6, 100, 140, 20);

        ApprovalPanel.add(jPanel6);
        jPanel6.setBounds(110, 113, 182, 130);

        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel41.setText("Send To :");
        ApprovalPanel.add(jLabel41);
        jLabel41.setBounds(10, 260, 100, 15);

        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        ApprovalPanel.add(cmbSendTo);
        cmbSendTo.setBounds(110, 260, 270, 24);

        jLabel42.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel42.setText("Remarks :");
        ApprovalPanel.add(jLabel42);
        jLabel42.setBounds(10, 300, 100, 15);

        txtToRemarks.setEnabled(false);
        ApprovalPanel.add(txtToRemarks);
        txtToRemarks.setBounds(110, 300, 516, 22);

        cmdNext3.setText("<<Previous");
        cmdNext3.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdNext3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext3ActionPerformed(evt);
            }
        });
        ApprovalPanel.add(cmdNext3);
        cmdNext3.setBounds(550, 340, 101, 25);

        jButton3.setText("Next >>");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        ApprovalPanel.add(jButton3);
        jButton3.setBounds(650, 340, 100, 25);

        jTabbedPane1.addTab("Approval", null, ApprovalPanel, "");

        StatusPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        StatusPanel.setLayout(null);

        jLabel60.setText("Document Approval Status");
        StatusPanel.add(jLabel60);
        jLabel60.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        StatusPanel.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 694, 120);

        jLabel19.setText("Document Update History");
        StatusPanel.add(jLabel19);
        jLabel19.setBounds(10, 170, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableHS);

        StatusPanel.add(jScrollPane6);
        jScrollPane6.setBounds(10, 190, 540, 130);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 270, 132, 24);

        txtAuditRemarks.setEnabled(false);
        StatusPanel.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(570, 300, 129, 19);

        jButton5.setText("<<Previous");
        jButton5.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton5);
        jButton5.setBounds(570, 340, 90, 25);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdViewHistory);
        cmdViewHistory.setBounds(570, 210, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdNormalView);
        cmdNormalView.setBounds(570, 240, 132, 24);

        jTabbedPane1.addTab("Status", StatusPanel);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(0, 65, 840, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:

        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jPanel1MouseClicked

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        //  System.out.println("start");
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {

            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void cmbHierarchyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbHierarchyFocusLost

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked

        //String F6ID=txtunadjno.getText().trim();
//        SetupApproval();
//
//        if(EditMode==EITLERPGLOBAL.EDIT) {
//            GenerateRejectedUserCombo();
//            if(clsFeltProductionApprovalFlow.IsOnceRejectedDoc(80,txtInvoiceNo.getText())) {
//                cmbSendTo.setEnabled(true);
//            }
//            else {
//                cmbSendTo.setEnabled(false);
//            }
//        }
//
//        if(cmbSendTo.getItemCount()<=0) {
//            GenerateFromCombo();
//        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        OpgCancel.setSelected(false);
//        if(!OpgFinal.isEnabled()) {
//            OpgHold.setSelected(true);
//        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:

//        OpgApprove.setSelected(false);
//        OpgFinal.setSelected(false);
//        OpgReject.setSelected(true);
//        OpgHold.setSelected(false);
//        OpgCancel.setSelected(false);
//
//        GenerateRejectedUserCombo();
//        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);
        OpgCancel.setSelected(false);

        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained

    }//GEN-LAST:event_cmbSendToFocusGained

    private void cmdNext3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext3ActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(0);
    }//GEN-LAST:event_cmdNext3ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jTabbedPane1.setSelectedIndex(2);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if (TableHS.getRowCount() > 0 && TableHS.getSelectedRow() >= 0) {
            txtAuditRemarks.setText((String) TableHS.getValueAt(TableHS.getSelectedRow(), 4));
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText = txtAuditRemarks;
            bigEdit.ShowEdit();
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void OpgCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgCancelMouseClicked
        // TODO add your handling code here:
        OpgHold.setSelected(false);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);
        OpgCancel.setSelected(true);

        cmbSendTo.setEnabled(false);

    }//GEN-LAST:event_OpgCancelMouseClicked

    private void OpgCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgCancelActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_OpgCancelActionPerformed

    private void OpgApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgApproveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgApproveActionPerformed

    private void OpgFinalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgFinalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgFinalActionPerformed

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo = txtInvoiceNo.getText();
        objInvoice.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();

    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        objInvoice.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void btnShowBaleNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowBaleNoActionPerformed
        // TODO add your handling code here:
        if (!txtBaleNo.getText().equals("")) {
            String DP_NO = data.getStringValueFromDB("SELECT PKG_DP_NO FROM PRODUCTION.FELT_PKG_SLIP_HEADER WHERE PKG_BALE_NO='" + txtBaleNo.getText() + "' AND PKG_BALE_DATE='" + EITLERPGLOBAL.formatDateDB(txtPackingDate.getText()) + "'");
            AppletFrame aFrame = new AppletFrame("Paking Slip Detail");
            aFrame.startAppletEx("EITLERP.FeltSales.FeltPacking.frmFeltPacking", "Paking Slip Detail");
            frmFeltPacking ObjDoc = (frmFeltPacking) aFrame.ObjApplet;
            ObjDoc.requestFocus();
            ObjDoc.Find(DP_NO);
        }
    }//GEN-LAST:event_btnShowBaleNoActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void btnShowPartyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowPartyActionPerformed
        // TODO add your handling code here:
        if (!txtPartyCode.getText().equals("")) {
            AppletFrame aFrame = new AppletFrame("Party Master");
            aFrame.startAppletEx("EITLERP.frmSalesParty", "Party Master");
            frmSalesParty ObjDoc = (frmSalesParty) aFrame.ObjApplet;
            ObjDoc.requestFocus();
            ObjDoc.FindEx(2, txtPartyCode.getText(), "210010");
        }
    }//GEN-LAST:event_btnShowPartyActionPerformed

    private void btnShowDiscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowDiscActionPerformed
        // TODO add your handling code here:
        java.sql.Date invDt = java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText().trim()));
        if (invDt.after(java.sql.Date.valueOf("2018-01-18"))) {
            String Detail = "SELECT * FROM PRODUCTION.FELT_SAL_INVOICE_DETAIL WHERE DISC_PER!=0 AND INVOICE_NO='" + txtInvoiceNo.getText().trim() + "' AND SUBSTRING(INVOICE_DATE,1,10)='" + EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText().trim()) + "' AND SANC_DOC!='' ";
            ResultSet rsDetail = data.getResult(Detail);

            try {
                rsDetail.first();
                if (rsDetail.getRow() > 0) {
                    while (!rsDetail.isAfterLast()) {

                        AppletFrame aFrame = new AppletFrame("Discount Master");
                        aFrame.startAppletEx("EITLERP.Production.FeltDiscRateMaster.frmDiscRateMaster", "Discount Master");
                        frmDiscRateMaster ObjDoc = (frmDiscRateMaster) aFrame.ObjApplet;
                        ObjDoc.requestFocus();
                        ObjDoc.Find(rsDetail.getString("SANC_DOC"));

                        rsDetail.next();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Discount Not Exist.");
                }
            } catch (Exception e) {

            }

        } else {

            if (!txtPartyCode.getText().equals("")) {
                if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_RATE_DISC_MASTER_HEADER WHERE PARTY_CODE='" + txtPartyCode.getText() + "' ORDER BY MASTER_NO")) {
                    AppletFrame aFrame = new AppletFrame("Discount Master");
                    aFrame.startAppletEx("EITLERP.Production.FeltDiscRateMaster.frmDiscRateMaster", "Discount Master");
                    frmDiscRateMaster ObjDoc = (frmDiscRateMaster) aFrame.ObjApplet;
                    ObjDoc.requestFocus();
                    ObjDoc.FindDisc(txtPartyCode.getText());
                } else {
                    JOptionPane.showMessageDialog(null, "Discount Not Exist.");
                }
            }
        }
    }//GEN-LAST:event_btnShowDiscActionPerformed

    private void btnShowRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowRateActionPerformed
        // TODO add your handling code here:
        if (TableL.getRowCount() > 0) {
            for (int i = 0; i < TableL.getRowCount(); i++) {
                String prodCode = TableL.getValueAt(i, 3).toString();
                String DC_NO = data.getStringValueFromDB("SELECT DOC_NO FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE='" + prodCode + "' ORDER BY DOC_DATE DESC");
                AppletFrame aFrame = new AppletFrame("Quality Rate Master");
                aFrame.startAppletEx("EITLERP.FeltSales.FeltQualityRateMaster.frmFeltQltRateMaster", "Quality Rate Master");
                frmFeltQltRateMaster ObjDoc = (frmFeltQltRateMaster) aFrame.ObjApplet;
                ObjDoc.requestFocus();
                ObjDoc.Find(DC_NO);
            }
        }
    }//GEN-LAST:event_btnShowRateActionPerformed

    private void btnShowParaModiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowParaModiActionPerformed
        // TODO add your handling code here:
        if (!txtBaleNo.getText().equals("")) {
            if (data.IsRecordExist("SELECT DOC_NO FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE BALE_NO='" + txtBaleNo.getText() + "' AND BALE_DATE='" + EITLERPGLOBAL.formatDateDB(txtPackingDate.getText()) + "' ORDER BY DOC_DATE DESC")) {
                String DP_NO = data.getStringValueFromDB("SELECT DOC_NO FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE BALE_NO='" + txtBaleNo.getText() + "' AND BALE_DATE='" + EITLERPGLOBAL.formatDateDB(txtPackingDate.getText()) + "' ORDER BY DOC_DATE DESC");
                AppletFrame aFrame = new AppletFrame("INVOICE PARAMETER MODIFICATION FORM");
                aFrame.startAppletEx("EITLERP.FeltSales.FeltGSTAdvancePaymentEntryForm.frmFeltGSTAdvancePaymentEntryForm", "INVOICE PARAMETER MODIFICATION FORM");
                frmFeltGSTAdvancePaymentEntryForm ObjDoc = (frmFeltGSTAdvancePaymentEntryForm) aFrame.ObjApplet;
                ObjDoc.requestFocus();
                System.out.println("Modification No : " + DP_NO);
                ObjDoc.Find(DP_NO);
            } else {
                JOptionPane.showMessageDialog(null, "No Record Exist.");
            }
        }
    }//GEN-LAST:event_btnShowParaModiActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ApprovalPanel;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgCancel;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JTable TableL;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton btnShowBaleNo;
    private javax.swing.JButton btnShowDisc;
    private javax.swing.JButton btnShowParaModi;
    private javax.swing.JButton btnShowParty;
    private javax.swing.JButton btnShowRate;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext3;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblDueDate;
    private javax.swing.JLabel lblLrNo;
    private javax.swing.JLabel lblPANReceipt;
    private javax.swing.JLabel lblPANTurnover;
    private javax.swing.JLabel lblReceipt;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTurnover;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtBaleNo;
    private javax.swing.JTextField txtBasAmt;
    private javax.swing.JTextField txtCGST;
    private javax.swing.JTextField txtCST2;
    private javax.swing.JTextField txtCST5;
    private javax.swing.JTextField txtChargeCode;
    private javax.swing.JTextField txtChemicalCharges;
    private javax.swing.JTextField txtDiscAmt;
    private javax.swing.JTextField txtDueDate;
    private javax.swing.JTextField txtExcise;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtGSTCompCess;
    private javax.swing.JTextField txtGatepassDate;
    private javax.swing.JTextField txtGatepassNo;
    private javax.swing.JTextField txtGrossAmount;
    private javax.swing.JTextField txtIGST;
    private javax.swing.JTextField txtInsCharges;
    private javax.swing.JTextField txtInvoiceDate;
    private javax.swing.JTextField txtInvoiceNo;
    private javax.swing.JTextField txtLrNo;
    private javax.swing.JTextField txtNetAmount;
    private javax.swing.JTextField txtPackingDate;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtPartyName;
    private javax.swing.JTextField txtSD;
    private javax.swing.JTextField txtSGST;
    private javax.swing.JTextField txtSeamCharges;
    private javax.swing.JTextField txtSpDiscAmt;
    private javax.swing.JTextField txtStation;
    private javax.swing.JTextField txtTCS;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtTransporterCode;
    private javax.swing.JTextField txtVAT;
    private javax.swing.JTextField txtWarehouseCode;
    // End of variables declaration//GEN-END:variables

    private void SetupApproval() {
        /*
         if(cmbHierarchy.getItemCount()>1) {
         cmbHierarchy.setEnabled(true);
         }
         */
        //OpgHold.setSelected(true);

        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }
        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {

            int FromUserID = clsFeltProductionApprovalFlow.getFromID(clsFeltSalesInvoice.ModuleID, (String) objInvoice.getAttribute("INVOICE_NO").getObj());
            lnFromID = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = clsFeltProductionApprovalFlow.getFromRemarks(clsFeltSalesInvoice.ModuleID, FromUserID, (String) objInvoice.getAttribute("INVOICE_NO").getObj());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(clsFeltSalesInvoice.ModuleID, txtInvoiceNo.getText())) {
                OpgReject.setEnabled(false);
            }
            OpgApprove.setEnabled(false);
            OpgHold.setEnabled(false);
            OpgReject.setEnabled(false);
            OpgCancel.setEnabled(true);
            txtToRemarks.setEnabled(true);
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            //cmbHierarchy.setEnabled(false);
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void GenerateRejectedUserCombo() {

        HashMap List = new HashMap();
        HashMap DeptList = new HashMap();
        HashMap DeptUsers = new HashMap();
        String UnadjId = txtInvoiceNo.getText();

        //----- Generate cmbType ------- //
        cmbToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= List.size(); i++) {
            clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

            /// NEW CODE ///
            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(clsFeltSalesInvoice.ModuleID, UnadjId, (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(clsFeltSalesInvoice.ModuleID, UnadjId, (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                    //IncludeUser=true;
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            } else {
                if (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///
        }
        //------------------------------ //

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(clsFeltSalesInvoice.ModuleID, UnadjId);
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }

    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                String InvoiceNo = (String) objInvoice.getAttribute("INVOICE_NO").getObj();

                List = clsFeltProductionApprovalFlow.getRemainingUsers(clsFeltSalesInvoice.ModuleID, InvoiceNo);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
        }

    }

    private void DisplayData() {

        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, clsFeltSalesInvoice.ModuleID)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        try {
            if (EditMode == 0) {
                if (objInvoice.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                }

                if (objInvoice.getAttribute("APPROVED").getInt() != 1) {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (objInvoice.getAttribute("CANCELLED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }

            }
        } catch (Exception c) {

        }

        try {

            ClearFields();

            lblTitle.setText("FELT SALES INVOICE : " + objInvoice.getAttribute("INVOICE_NO").getString());

            txtInvoiceNo.setText(objInvoice.getAttribute("INVOICE_NO").getString());
            txtInvoiceDate.setText(EITLERPGLOBAL.formatDate(objInvoice.getAttribute("INVOICE_DATE").getString().substring(0, 10)));
            txtPartyCode.setText(objInvoice.getAttribute("PARTY_CODE").getString());
            lblRevNo.setText(Integer.toString((int) objInvoice.getAttribute("REVISION_NO").getVal()));
            //txtAgentSrNo.setText(Integer.toString(objInvoice.getAttribute("AGENT_SR_NO").getInt()));
            txtDueDate.setText(EITLERPGLOBAL.formatDate(objInvoice.getAttribute("DUE_DATE").getString()));

//            String Station = data.getStringValueFromDB("SELECT DISPATCH_STATION FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND PARTY_CODE='" + txtPartyCode.getText() + "'");
//            txtStation.setText(Station);
            txtStation.setText(objInvoice.getAttribute("DISPATCH_STATION").getString());
            //txtStation.setText(objInvoice.getAttribute("STATION_CODE").getString());
            //txtChargeCodeDescription.setText(objInvoice.getAttribute("PAYMENT_TERM").getString());
            //txtTransportMode.setText(Integer.toString(objInvoice.getAttribute("TRANSPORT_MODE").getInt()));
            //txtChargeCode.setText(Integer.toString(objInvoice.getAttribute("PAYMENT_TERM_CODE").getInt()));
            txtChargeCode.setText(objInvoice.getAttribute("CHARGE_CODE").getString());
            txtWarehouseCode.setText("2");
            txtBaleNo.setText(objInvoice.getAttribute("BALE_NO").getString());
            //txtLrNo.setText(objInvoice.getAttribute("LR_NO").getString());
            txtPackingDate.setText(EITLERPGLOBAL.formatDate(objInvoice.getAttribute("PACKING_DATE").getString()));
            //txtExpCategory.setText(objInvoice.getAttribute("EXPORT_CATEGORY").getString());
            //txtExpSubCategory.setText(objInvoice.getAttribute("EXPORT_SUB_CATEGORY").getString());
            txtGatepassNo.setText(objInvoice.getAttribute("GATEPASS_NO").getString());
            //txtGatepassDate.setText(EITLERPGLOBAL.formatDate(objInvoice.getAttribute("GATEPASS_DATE").getString()));
            //txtDraftNo.setText(objInvoice.getAttribute("DRAFT_NO").getString());
            //txtDraftDate.setText(EITLERPGLOBAL.formatDate(objInvoice.getAttribute("DRAFT_DATE").getString()));
            //txtTotalSqMtr.setText(Double.toString(objInvoice.getAttribute("TOTAL_SQ_MTR").getDouble()));
            //txtGrossQty.setText(Double.toString(objInvoice.getAttribute("TOTAL_GROSS_QTY").getDouble()));
            //txtNetQty.setText(Double.toString(objInvoice.getAttribute("TOTAL_NET_QTY").getDouble()));
            //txtGrossAmount.setText(Double.toString(objInvoice.getAttribute("TOTAL_GROSS_AMOUNT").getDouble()));
            txtBasAmt.setText(Double.toString(objInvoice.getAttribute("BAS_AMT").getDouble()));
            txtDiscAmt.setText(Double.toString(objInvoice.getAttribute("DISC_AMT").getDouble()));

            txtSpDiscAmt.setText(Double.toString(objInvoice.getAttribute("AOSD_AMT").getDouble()));

            txtGrossAmount.setText(Double.toString(objInvoice.getAttribute("GROSS_AMT").getDouble()));
            //txtNetAmount.setText(Double.toString(objInvoice.getAttribute("NET_AMOUNT").getDouble()));
            //txtNetAmount.setText(Double.toString(objInvoice.getAttribute("NET_AMT").getDouble()));
            txtNetAmount.setText(Double.toString(objInvoice.getAttribute("INVOICE_AMT").getDouble()));
            //txtHundiNo.setText(objInvoice.getAttribute("HUNDI_NO").getString());
            //txtGrossWeight.setText(Double.toString(objInvoice.getAttribute("GROSS_WEIGHT").getDouble()));
            txtTransporterCode.setText(Integer.toString(objInvoice.getAttribute("TRANSPORTER_CODE").getInt()));
            //txtPartyName.setText(objInvoice.getAttribute("PARTY_NAME").getString());
            //txtLength.setText(Double.toString(objInvoice.getAttribute("LENGTH").getDouble()));
            //txtWidth.setText(Double.toString(objInvoice.getAttribute("WIDTH").getDouble()));
            //txtOrderNo.setText(objInvoice.getAttribute("ORDER_NO").getString());
            //txtOrderDate.setText(EITLERPGLOBAL.formatDate(objInvoice.getAttribute("ORDER_DATE").getString()));
            //txtNoOfPieces.setText(Double.toString(objInvoice.getAttribute("NO_OF_PIECES").getDouble()));

            //txtBasicDutyPer.setText(Double.toString(objInvoice.getAttribute("COLUMN_1_PER").getDouble()));
            //txtExcisePer.setText("12.50");
            //txtBasicDuty.setText(Double.toString(objInvoice.getAttribute("COLUMN_1_AMT").getDouble()));
            txtExcise.setText(Double.toString(objInvoice.getAttribute("EXCISE").getDouble()));

            txtIGST.setText(Double.toString(objInvoice.getAttribute("IGST_AMT").getDouble()));
            txtCGST.setText(Double.toString(objInvoice.getAttribute("CGST_AMT").getDouble()));
            txtSGST.setText(Double.toString(objInvoice.getAttribute("SGST_AMT").getDouble()));
            txtGSTCompCess.setText(Double.toString(objInvoice.getAttribute("GST_COMP_CESS_AMT").getDouble()));

            txtTCS.setText(Double.toString(objInvoice.getAttribute("TCS_AMT").getDouble()));

            txtCST2.setText(Double.toString(objInvoice.getAttribute("CST2").getDouble()));
            txtCST5.setText(Double.toString(objInvoice.getAttribute("CST5").getDouble()));

            txtVAT.setText(Double.toString(Double.valueOf(EITLERPGLOBAL.round(objInvoice.getAttribute("VAT1").getDouble() + objInvoice.getAttribute("VAT4").getDouble(), 2))));

            //txtGSTPer.setText(Double.toString(objInvoice.getAttribute("COLUMN_4_PER").getDouble()));
            //txtGST.setText(Double.toString(objInvoice.getAttribute("COLUMN_4_AMT").getDouble()));
            //txtSDPer.setText(Double.toString(objInvoice.getAttribute("COLUMN_5_PER").getDouble()));
            txtSD.setText(Double.toString(objInvoice.getAttribute("SD_AMT").getDouble()));

            //txtInsChargesPer.setText(Double.toString(objInvoice.getAttribute("COLUMN_6_PER").getDouble()));
            txtInsCharges.setText(Double.toString(objInvoice.getAttribute("INSURANCE_AMT").getDouble()));

            //txtChemicalChargesper.setText(Double.toString(objInvoice.getAttribute("COLUMN_7_PER").getDouble()));
            txtChemicalCharges.setText(Double.toString(objInvoice.getAttribute("CHEM_TRT_CHG").getDouble()));

            //txtSpiralChargesPer.setText(Double.toString(objInvoice.getAttribute("COLUMN_8_PER").getDouble()));
            //txtSpiralCharges.setText(Double.toString(objInvoice.getAttribute("SPIRAL_CHG").getDouble()));
            //txtPinChargesPer.setText(Double.toString(objInvoice.getAttribute("COLUMN_9_PER").getDouble()));
            txtSeamCharges.setText(Double.toString(objInvoice.getAttribute("SEAM_CHG").getDouble()));

            lblTurnover.setText("PAN Base " + EITLERPGLOBAL.FinYearFrom + "-" + EITLERPGLOBAL.FinYearTo + " Threshold Turn over : ");
            String TurnOver = data.getStringValueFromDB("SELECT COALESCE(AMOUNT,0) AS AMOUNT FROM (SELECT PARTY_CODE,PARTY_NAME,PAN_NO,SUBSTRING(GSTIN_NO,3,10) AS GSTIN_PAN FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 ) AS PM "
                    + " LEFT JOIN  (SELECT PARTY_NAME,SUBSTRING(GSTIN_NO,3,10) AS PAN,SUM(INVOICE_AMT) AS AMOUNT FROM PRODUCTION.FELT_SAL_INVOICE_HEADER  WHERE INVOICE_DATE >= '" + EITLERPGLOBAL.FinFromDateDB + "' AND INVOICE_DATE <='" + EITLERPGLOBAL.FinToDateDB + "' "
                    + "AND APPROVED =1 AND CANCELLED =0  GROUP BY SUBSTRING(GSTIN_NO,3,10)  ) AS PANCUR  ON PANCUR.PAN = PM.GSTIN_PAN  WHERE PM.PARTY_CODE ='" + objInvoice.getAttribute("PARTY_CODE").getString() + "'");
            lblPANTurnover.setText("" + TurnOver);
            lblReceipt.setText("and Receipt : ");
            String Receipt = data.getStringValueFromDB("SELECT RC_AMT FROM  (SELECT PARTY_CODE,PARTY_NAME,PAN_NO,SUBSTRING(GSTIN_NO,3,10) AS GSTIN_PAN,CITY_ID FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 ) AS PM  LEFT JOIN  "
                    + " (SELECT GSTIN_PAN AS V_PAN,SUM(AMOUNT) AS RC_AMT FROM  (SELECT B.SUB_ACCOUNT_CODE, P.PARTY_NAME, SUBSTRING(TRIM(P.GSTIN_NO),3,10) AS GSTIN_PAN, SUM(B.AMOUNT) AS AMOUNT, GROUP_CONCAT(A.VOUCHER_NO) "
                    + " FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B, DINESHMILLS.D_SAL_PARTY_MASTER P "
                    + "  WHERE A.VOUCHER_NO = B.VOUCHER_NO AND P.PARTY_CODE = B.SUB_ACCOUNT_CODE  AND A.VOUCHER_DATE>='" + EITLERPGLOBAL.FinFromDateDB + "' AND A.VOUCHER_DATE<=CURDATE() "
                    + " AND (A.VOUCHER_TYPE IN (6,8,9,12) OR (A.VOUCHER_TYPE IN (7) AND A.EXCLUDE_IN_ADJ =0) ) AND B.MAIN_ACCOUNT_CODE='210010' AND A.APPROVED=1 AND A.CANCELLED=0 "
                    + " AND B.EFFECT='C' AND B.MODULE_ID <>65 GROUP BY B.SUB_ACCOUNT_CODE  ) AS AMT GROUP BY GSTIN_PAN ) AS VPAN  "
                    + " ON VPAN.V_PAN = PM.GSTIN_PAN WHERE PM.PARTY_CODE ='" + objInvoice.getAttribute("PARTY_CODE").getString() + "'");
            lblPANReceipt.setText("" + Receipt);

            String MainCode = "210010";
            int invoicetype = 2;

            String PartyName = data.getStringValueFromDB("SELECT PARTY_NAME FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + txtPartyCode.getText().trim() + "' AND MAIN_ACCOUNT_CODE='" + MainCode + "' ");
            txtPartyName.setText(PartyName);

            FormatGrid();
            //=========Now Generate Table====================//
            for (int i = 1; i <= objInvoice.colInvoiceItems.size(); i++) {
                clsFeltSalesInvoiceDetail ObjItem = (clsFeltSalesInvoiceDetail) objInvoice.colInvoiceItems.get(Integer.toString(i));
                Object[] rowData = new Object[1];
                DataModelL.addRow(rowData);

                int NewRow = TableL.getRowCount() - 1;

                DataModelL.setValueByVariable("SR_NO", Integer.toString(i), NewRow);
                DataModelL.setValueByVariable("BALE_NO", ObjItem.getAttribute("BALE_NO").getString(), NewRow);
                DataModelL.setValueByVariable("PIECE_NO", ObjItem.getAttribute("PIECE_NO").getString(), NewRow);
                DataModelL.setValueByVariable("PRODUCT_CODE", ObjItem.getAttribute("PRODUCT_CODE").getString(), NewRow);
                DataModelL.setValueByVariable("MACHINE_NO", ObjItem.getAttribute("MACHINE_NO").getString(), NewRow);
                DataModelL.setValueByVariable("POSITION_NO", ObjItem.getAttribute("POSITION_NO").getString(), NewRow);

                String positionDNo = data.getStringValueFromDB("SELECT POSITION_DESIGN_NO FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + ObjItem.getAttribute("POSITION_NO").getString() + "'");
                String positionDesc = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + ObjItem.getAttribute("POSITION_NO").getString() + "'");
                String upn = data.getStringValueFromDB("SELECT PR_UPN FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + ObjItem.getAttribute("PIECE_NO").getString() + "'");

                DataModelL.setValueByVariable("POSITION_DESIGN_NO", positionDNo, NewRow);
                DataModelL.setValueByVariable("POSITION_DESC", positionDesc, NewRow);
                DataModelL.setValueByVariable("UPN", upn, NewRow);

                DataModelL.setValueByVariable("GROUP_NAME", ObjItem.getAttribute("GROUP_NAME").getString(), NewRow);
                DataModelL.setValueByVariable("STYLE", ObjItem.getAttribute("STYLE").getString(), NewRow);
                DataModelL.setValueByVariable("LENGTH", Double.toString(ObjItem.getAttribute("LENGTH").getDouble()), NewRow);
                DataModelL.setValueByVariable("WIDTH", Double.toString(ObjItem.getAttribute("WIDTH").getDouble()), NewRow);
                DataModelL.setValueByVariable("GSM", Double.toString(ObjItem.getAttribute("GSM").getDouble()), NewRow);
                DataModelL.setValueByVariable("THORITICAL_WEIGHT", Double.toString(ObjItem.getAttribute("THORITICAL_WEIGHT").getDouble()), NewRow);
                DataModelL.setValueByVariable("SQMTR", Double.toString(ObjItem.getAttribute("SQMTR").getDouble()), NewRow);
                DataModelL.setValueByVariable("SYN_PER", Double.toString(ObjItem.getAttribute("SYN_PER").getDouble()), NewRow);
                DataModelL.setValueByVariable("ACTUAL_LENGTH", Double.toString(ObjItem.getAttribute("ACTUAL_LENGTH").getDouble()), NewRow);
                DataModelL.setValueByVariable("ACTUAL_WIDTH", Double.toString(ObjItem.getAttribute("ACTUAL_WIDTH").getDouble()), NewRow);
                DataModelL.setValueByVariable("ACTUAL_WEIGHT", Double.toString(ObjItem.getAttribute("ACTUAL_WEIGHT").getDouble()), NewRow);
                DataModelL.setValueByVariable("RATE", Double.toString(ObjItem.getAttribute("RATE").getDouble()), NewRow);
                DataModelL.setValueByVariable("BAS_AMT", Double.toString(ObjItem.getAttribute("BAS_AMT").getDouble()), NewRow);
                DataModelL.setValueByVariable("DISC_PER", Double.toString(ObjItem.getAttribute("DISC_PER").getDouble()), NewRow);
                DataModelL.setValueByVariable("DISC_AMT", Double.toString(ObjItem.getAttribute("DISC_AMT").getDouble()), NewRow);
                DataModelL.setValueByVariable("CHEM_TRT_CHG", Double.toString(ObjItem.getAttribute("CHEM_TRT_CHG").getDouble()), NewRow);
                DataModelL.setValueByVariable("PIN_CHG", Double.toString(ObjItem.getAttribute("PIN_CHG").getDouble()), NewRow);
                DataModelL.setValueByVariable("SPIRAL_CHG", Double.toString(ObjItem.getAttribute("SPIRAL_CHG").getDouble()), NewRow);
                DataModelL.setValueByVariable("EXCISE", Double.toString(ObjItem.getAttribute("EXCISE").getDouble()), NewRow);
                DataModelL.setValueByVariable("INSURANCE_AMT", Double.toString(ObjItem.getAttribute("INSURANCE_AMT").getDouble()), NewRow);
                DataModelL.setValueByVariable("IGST_PER", Double.toString(ObjItem.getAttribute("IGST_PER").getDouble()), NewRow);
                DataModelL.setValueByVariable("IGST_AMT", Double.toString(ObjItem.getAttribute("IGST_AMT").getDouble()), NewRow);
                DataModelL.setValueByVariable("CGST_PER", Double.toString(ObjItem.getAttribute("CGST_PER").getDouble()), NewRow);
                DataModelL.setValueByVariable("CGST_AMT", Double.toString(ObjItem.getAttribute("CGST_AMT").getDouble()), NewRow);
                DataModelL.setValueByVariable("SGST_PER", Double.toString(ObjItem.getAttribute("SGST_PER").getDouble()), NewRow);
                DataModelL.setValueByVariable("SGST_AMT", Double.toString(ObjItem.getAttribute("SGST_AMT").getDouble()), NewRow);
                DataModelL.setValueByVariable("GST_COMP_CESS_PER", Double.toString(ObjItem.getAttribute("GST_COMP_CESS_PER").getDouble()), NewRow);
                DataModelL.setValueByVariable("GST_COMP_CESS_AMT", Double.toString(ObjItem.getAttribute("GST_COMP_CESS_AMT").getDouble()), NewRow);
                DataModelL.setValueByVariable("CST2", Double.toString(ObjItem.getAttribute("CST2").getDouble()), NewRow);
                DataModelL.setValueByVariable("CST5", Double.toString(ObjItem.getAttribute("CST5").getDouble()), NewRow);
                DataModelL.setValueByVariable("VAT1", Double.toString(ObjItem.getAttribute("VAT1").getDouble()), NewRow);
                DataModelL.setValueByVariable("VAT4", Double.toString(ObjItem.getAttribute("VAT4").getDouble()), NewRow);
                DataModelL.setValueByVariable("SD_AMT", Double.toString(ObjItem.getAttribute("SD_AMT").getDouble()), NewRow);
                DataModelL.setValueByVariable("INVOICE_AMT", Double.toString(ObjItem.getAttribute("INVOICE_AMT").getDouble()), NewRow);

                DataModelL.setValueByVariable("SURCHARGE_PER", Double.toString(ObjItem.getAttribute("SURCHARGE_PER").getDouble()), NewRow);
                DataModelL.setValueByVariable("SURCHARGE_RATE", Double.toString(ObjItem.getAttribute("SURCHARGE_RATE").getDouble()), NewRow);
                DataModelL.setValueByVariable("GROSS_RATE", Double.toString(ObjItem.getAttribute("GROSS_RATE").getDouble()), NewRow);

                DataModelL.setValueByVariable("MATERIAL_CODE", ObjItem.getAttribute("MATERIAL_CODE").getString(), NewRow);
                DataModelL.setValueByVariable("TCS_PER", Double.toString(ObjItem.getAttribute("TCS_PER").getDouble()), NewRow);
                DataModelL.setValueByVariable("TCS_AMT", Double.toString(ObjItem.getAttribute("TCS_AMT").getDouble()), NewRow);

            }

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap List = new HashMap();

            String InvoiceNo = objInvoice.getAttribute("INVOICE_NO").getString();
            String InvoiceDate = objInvoice.getAttribute("INVOICE_DATE").getString().substring(0, 10);
            List = clsFeltProductionApprovalFlow.getDocumentFlow(clsFeltSalesInvoice.ModuleID, InvoiceNo, InvoiceDate);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();
                DataModelA.addRow(rowData);
            }
            //============================================================//

            //Showing Audit Trial History
            FormatGridUpdateHistory();
            HashMap History = clsFeltSalesInvoice.getHistoryList(EITLERPGLOBAL.gCompanyID, InvoiceNo, InvoiceDate);
            for (int i = 1; i <= History.size(); i++) {
                clsFeltSalesInvoice ObjHistory = (clsFeltSalesInvoice) History.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (long) ObjHistory.getAttribute("UPDATED_BY").getVal());
                rowData[2] = formatDateTime((String) ObjHistory.getAttribute("ENTRY_DATE").getString());
                String ApprovalStatus = "";

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("N")) {
                    ApprovalStatus = "Canceled";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjHistory.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjHistory.getAttribute("FROM_IP").getString();
                DataModelHS.addRow(rowData);
            }
            //=========================================//
            //===============================================//
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void FormatGrid() {
        try {
            //Table Formatting
            DataModelL = new EITLTableModel();

            EITLTableCellRenderer cellRender = new EITLTableCellRenderer();
            cellRender.setHorizontalAlignment(JLabel.RIGHT);

            TableL.removeAll();
            TableL.setModel(DataModelL);

            TableColumnModel ColModel = TableL.getColumnModel();
            TableL.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            //Add the columns
            DataModelL.addColumn("Sr. No."); //0 Read Only
            DataModelL.addColumn("Bale No"); //1
            DataModelL.addColumn("Piece No"); //2
            DataModelL.addColumn("Product Code"); //3
            DataModelL.addColumn("Machine No"); //4
            DataModelL.addColumn("Position No"); //5
            DataModelL.addColumn("Position No (Design)"); //5
            DataModelL.addColumn("Position Desc"); //5
            DataModelL.addColumn("UPN"); //5
            DataModelL.addColumn("Group"); //6
            DataModelL.addColumn("Style code"); //7
            DataModelL.addColumn("Length"); //8
            DataModelL.addColumn("Width"); //9
            DataModelL.addColumn("GSM"); //10
            DataModelL.addColumn("Calculated Weight"); //11
            DataModelL.addColumn("Sq. Mtr."); //12
            DataModelL.addColumn("Syn %"); //13
            DataModelL.addColumn("Actual Length"); //14
            DataModelL.addColumn("Actual Widht"); //15
            DataModelL.addColumn("Actual Weight"); //16
            DataModelL.addColumn("Gross Rate"); //17
            DataModelL.addColumn("Basic Amt"); //18
            DataModelL.addColumn("Disc %"); //18
            DataModelL.addColumn("Disc Amt"); //19
            DataModelL.addColumn("Chemical Chrg"); //20
            DataModelL.addColumn("Pin Chrg"); //21
            DataModelL.addColumn("Spiral Chrg"); //22
            DataModelL.addColumn("Excise"); //23
            DataModelL.addColumn("Insurance Amt"); //24
            DataModelL.addColumn("IGST Per"); //24
            DataModelL.addColumn("IGST Amt"); //24
            DataModelL.addColumn("CGST Per"); //24
            DataModelL.addColumn("CGST Amt"); //24
            DataModelL.addColumn("SGST Per"); //24
            DataModelL.addColumn("SGST Amt"); //24
            DataModelL.addColumn("GST Comp Cess Per"); //24
            DataModelL.addColumn("GST Comp Cess Amt"); //24
            DataModelL.addColumn("CST2"); //25
            DataModelL.addColumn("CST5"); //26
            DataModelL.addColumn("VAT1"); //27
            DataModelL.addColumn("VAT4"); //28
            DataModelL.addColumn("SD Amt"); //29
            DataModelL.addColumn("Net Amt"); //30

            DataModelL.addColumn("Rate"); //30
            DataModelL.addColumn("Surcharge Per"); //30
            DataModelL.addColumn("Surcharge Rate"); //30

            DataModelL.addColumn("Material Code"); //30
            DataModelL.addColumn("TCS Per"); //30
            DataModelL.addColumn("TCS Amt"); //30

            DataModelL.SetVariable(0, "SR_NO"); //0 - Read Only
            DataModelL.SetVariable(1, "BALE_NO"); //1
            DataModelL.SetVariable(2, "PIECE_NO"); //2
            DataModelL.SetVariable(3, "PRODUCT_CODE"); //3
            DataModelL.SetVariable(4, "MACHINE_NO"); //4
            DataModelL.SetVariable(5, "POSITION_NO"); //5
            DataModelL.SetVariable(6, "POSITION_DESIGN_NO"); //30
            DataModelL.SetVariable(7, "POSITION_DESC"); //30
            DataModelL.SetVariable(8, "UPN"); //30
            DataModelL.SetVariable(9, "GROUP_NAME"); //6
            DataModelL.SetVariable(10, "STYLE"); //7
            DataModelL.SetVariable(11, "LENGTH"); //8
            DataModelL.SetVariable(12, "WIDTH"); //9
            DataModelL.SetVariable(13, "GSM"); //10
            DataModelL.SetVariable(14, "THORITICAL_WEIGHT"); //11
            DataModelL.SetVariable(15, "SQMTR"); //12
            DataModelL.SetVariable(16, "SYN_PER"); //13
            DataModelL.SetVariable(17, "ACTUAL_LENGTH"); //14
            DataModelL.SetVariable(18, "ACTUAL_WIDTH"); //15
            DataModelL.SetVariable(19, "ACTUAL_WEIGHT"); //16
            DataModelL.SetVariable(20, "GROSS_RATE"); //17
            DataModelL.SetVariable(21, "BAS_AMT"); //18
            DataModelL.SetVariable(22, "DISC_PER"); //18
            DataModelL.SetVariable(23, "DISC_AMT"); //19
            DataModelL.SetVariable(24, "CHEM_TRT_CHG"); //20
            DataModelL.SetVariable(25, "PIN_CHG"); //21
            DataModelL.SetVariable(26, "SPIRAL_CHG"); //22
            DataModelL.SetVariable(27, "EXCISE"); //23
            DataModelL.SetVariable(28, "INSURANCE_AMT"); //24
            DataModelL.SetVariable(29, "IGST_PER"); //24
            DataModelL.SetVariable(30, "IGST_AMT"); //24
            DataModelL.SetVariable(31, "CGST_PER"); //24
            DataModelL.SetVariable(32, "CGST_AMT"); //24
            DataModelL.SetVariable(33, "SGST_PER"); //24
            DataModelL.SetVariable(34, "SGST_AMT"); //24
            DataModelL.SetVariable(35, "GST_COMP_CESS_PER"); //24
            DataModelL.SetVariable(36, "GST_COMP_CESS_AMT"); //24
            DataModelL.SetVariable(37, "CST2"); //25
            DataModelL.SetVariable(38, "CST5"); //26
            DataModelL.SetVariable(39, "VAT1"); //27
            DataModelL.SetVariable(40, "VAT4"); //28
            DataModelL.SetVariable(41, "SD_AMT"); //29
            DataModelL.SetVariable(42, "INVOICE_AMT"); //30

            DataModelL.SetVariable(43, "RATE"); //17
            DataModelL.SetVariable(44, "SURCHARGE_PER"); //17
            DataModelL.SetVariable(45, "SURCHARGE_RATE"); //17

            DataModelL.SetVariable(46, "MATERIAL_CODE"); //17
            DataModelL.SetVariable(47, "TCS_PER"); //17
            DataModelL.SetVariable(48, "TCS_AMT"); //17

            DataModelL.TableReadOnly(true);
            DataModelL.SetReadOnly(0);

            DataModelL.SetNumeric(0, true); //sr no
            DataModelL.SetNumeric(8, true);
            DataModelL.SetNumeric(9, true);
            DataModelL.SetNumeric(10, true);
            DataModelL.SetNumeric(11, true);
            DataModelL.SetNumeric(12, true);
            DataModelL.SetNumeric(13, true);
            DataModelL.SetNumeric(14, true);
            DataModelL.SetNumeric(15, true);
            DataModelL.SetNumeric(16, true);
            DataModelL.SetNumeric(17, true);
            DataModelL.SetNumeric(18, true);
            DataModelL.SetNumeric(19, true);
            DataModelL.SetNumeric(20, true);
            DataModelL.SetNumeric(21, true);
            DataModelL.SetNumeric(22, true);
            DataModelL.SetNumeric(23, true);
            DataModelL.SetNumeric(24, true);
            DataModelL.SetNumeric(25, true);
            DataModelL.SetNumeric(26, true);
            DataModelL.SetNumeric(27, true);
            DataModelL.SetNumeric(28, true);
            DataModelL.SetNumeric(29, true);
            DataModelL.SetNumeric(30, true);
            DataModelL.SetNumeric(31, true);
            DataModelL.SetNumeric(32, true);
            DataModelL.SetNumeric(33, true);
            DataModelL.SetNumeric(34, true);
            DataModelL.SetNumeric(35, true);
            DataModelL.SetNumeric(36, true);
            DataModelL.SetNumeric(37, true);
            DataModelL.SetNumeric(38, true);
            DataModelL.SetNumeric(39, true);

            DataModelL.SetNumeric(43, true);
            DataModelL.SetNumeric(44, true);
            DataModelL.SetNumeric(45, true);

            DataModelL.SetNumeric(47, true);
            DataModelL.SetNumeric(48, true);

            TableL.getColumnModel().getColumn(47).setMinWidth(0);
            TableL.getColumnModel().getColumn(47).setMaxWidth(0);
            TableL.getColumnModel().getColumn(48).setMinWidth(0);
            TableL.getColumnModel().getColumn(48).setMaxWidth(0);

            //Table formatting completed
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.FeltSales.FeltInvReport.frmFeltSalesInvoiceFind", true);
        frmFeltSalesInvoiceFind ObjReturn = (frmFeltSalesInvoiceFind) ObjLoader.getObj();

        if (ObjReturn.Cancelled == false) {
            if (!objInvoice.Filter(ObjReturn.strQuery, EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null, "No records found.");
            }
            MoveLast();
        }
    }

    public void FindByCompany(int pCompanyID, String pDocNo, String pDocDate) {
        String dbURL = clsFinYear.getDBURL(pCompanyID, EITLERPGLOBAL.FinYearFrom);
        objInvoice.Filter(" WHERE COMPANY_ID=" + Integer.toString(pCompanyID) + " AND INVOICE_NO='" + pDocNo + "' AND SUBSTRING(INVOICE_DATE,1,10)='" + EITLERPGLOBAL.formatDateDB(pDocDate) + "' ", pCompanyID, dbURL);
        objInvoice.MoveLast();
        DisplayData();
    }

    private void MoveFirst() {
        objInvoice.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        objInvoice.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        objInvoice.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        objInvoice.MoveLast();
        DisplayData();
    }

    private void ClearFields() {
        try {

            txtInvoiceNo.setText("");
            txtInvoiceDate.setText("");
            txtPartyCode.setText("");
//            txtAgentSrNo.setText("");
            txtStation.setText("");
//            txtChargeCodeDescription.setText("");
//            txtTransportMode.setText("");
            txtChargeCode.setText("");
            txtWarehouseCode.setText("");
            txtBaleNo.setText("");
            txtPackingDate.setText("");
//            txtExpCategory.setText("");
//            txtExpSubCategory.setText("");
            txtGatepassNo.setText("");
            txtGatepassDate.setText("");
//            txtTotalSqMtr.setText("");
//            txtGrossQty.setText("");
//            txtNetQty.setText("");
            txtBasAmt.setText("");
            txtDiscAmt.setText("");
            txtSpDiscAmt.setText("");
            txtGrossAmount.setText("");
            txtNetAmount.setText("");
//            txtGrossWeight.setText("");
            txtTransporterCode.setText("");
            txtPartyName.setText("");
//            txtLength.setText("");
//            txtWidth.setText("");
//            txtNoOfPieces.setText("");
//
//            txtExcisePer.setText("");
            txtExcise.setText("");

            txtIGST.setText("");
            txtCGST.setText("");
            txtSGST.setText("");
            txtGSTCompCess.setText("");

//            txtCST2Per.setText("");
            txtCST2.setText("");

//            txtCST5Per.setText("");
            txtCST5.setText("");

//            txtVATPer.setText("");
            txtVAT.setText("");

//            txtGSTPer.setText("");
            txtTCS.setText("");

//            txtSDPer.setText("");
            txtSD.setText("");

//            txtInsChargesPer.setText("");
            txtInsCharges.setText("");

//            txtChemicalChargesper.setText("");
            txtChemicalCharges.setText("");

//            txtSpiralChargesPer.setText("");
            //txtSpiralCharges.setText("");
//            txtPinChargesPer.setText("");
            txtSeamCharges.setText("");

            FormatGrid();
        } catch (Exception e) {

        }

    }

    private void PreviewReport() {
        String InvNo = txtInvoiceNo.getText();
        String InvDt = EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText());
        String PartyCd = txtPartyCode.getText();

        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();

            double amount = data.getDoubleValueFromDB("SELECT INVOICE_AMT FROM PRODUCTION.FELT_SAL_INVOICE_HEADER WHERE INVOICE_NO='" + InvNo + "' AND SUBSTRING(INVOICE_DATE,1,10)='" + InvDt + "' AND PARTY_CODE='" + PartyCd + "' ");
            nw = new NumWord();
            String amt2 = nw.convertNumToWord(amount);

            parameterMap.put("INV_AMT", amt2);
            parameterMap.put("CONTEXT", "http://200.0.0.227:8080/SDMLERP/");

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            String strSQL = "SELECT ";
            strSQL += "COALESCE(TRANSPORTER_NAME,'') AS TRANSPORTER_NAME,INVOICE_NO,RIGHT(INVOICE_NO,4) AS DRAFT_NO,GATEPASS_NO, ";
            strSQL += "CASE WHEN CANCELLED=1 THEN 'CANCELLED INVOICE' ELSE (CASE WHEN APPROVED=0 THEN 'UNDER APPROVAL' ELSE '' END) END AS CINV, ";
            strSQL += "INVOICE_TYPE,INVOICE_DATE,PARTY_CODE,BALE_NO,PACKING_DATE,CHARGE_CODE,HSN_CODE, ";
            strSQL += "PARTY_NAME,ADDRESS1,ADDRESS2,PINCODE,CITY_ID,DISPATCH_STATION,CITY_NAME,PLACE_OF_SUPPLY, ";
            strSQL += "COALESCE(DOCUMENT_THROUGH,'') AS DOCUMENT_THROUGH,SUBSTRING(GSTIN_NO,1,2) AS STATE_GST_CODE, ";
            strSQL += "CASE WHEN GSTIN_NO IS NULL THEN 'XXXXXXXXXXXXXXX' ELSE CASE WHEN LENGTH(GSTIN_NO)!=15 THEN 'XXXXXXXXXXXXXXX' ELSE GSTIN_NO END END AS GSTIN_NO, ";
            strSQL += "PRODUCT_CODE,TRANSPORTER_CODE,NO_OF_PIECES,PIECE_NO,MACHINE_NO,POSITION_NO, ";
            strSQL += "CONCAT('PM ',MACHINE_NO,' ',POSITION_DESC) AS MACHINE_NO_DESC, ";
            strSQL += "PRODUCT_DESC,SYN_PER,LENGTH,WIDTH,GSM,STYLE,RATE_UNIT,RATE,SQMTR,ACTUAL_WEIGHT, ";
            strSQL += "SURCHARGE_PER,SURCHARGE_RATE,GROSS_RATE, ";
            strSQL += "BAS_AMT,DISC_PER,DISC_AMT,CHEM_TRT_CHG,SPIRAL_CHG,PIN_CHG, ";
            strSQL += "AOSD_AMT,AOSD_PER, ";

            strSQL += "COALESCE(MOBILE_NO,'') AS MOBILE_NO, ";
            strSQL += "COALESCE(DELIVERY_MODE,'') AS DELIVERY_MODE, ";
            strSQL += "COALESCE(MATERIAL_CODE,'') AS MATERIAL_CODE, ";
            strSQL += "TCS_PER,TCS_AMT, ";

            strSQL += "COALESCE(DESP_MODE,'') AS DESP_MODE, ";
            strSQL += "COALESCE(PO_NO,'') AS PO_NO,PO_DATE, ";
            strSQL += "COALESCE(LC_NO,'') AS LC_NO, ";
            strSQL += "COALESCE(PAYMENT_TERMS,'') AS PAYMENT_TERMS, ";
            strSQL += "COALESCE(PARTY_BANK_NAME,'') AS PARTY_BANK_NAME, ";
            strSQL += "COALESCE(PARTY_BANK_ADDRESS1,'') AS PARTY_BANK_ADDRESS1, ";
            strSQL += "COALESCE(PARTY_BANK_ADDRESS2,'') AS PARTY_BANK_ADDRESS2, ";
            strSQL += "COALESCE(SHIPPED_TO_PARTY_NAME,'') AS SHIPPED_TO_PARTY_NAME, ";
            strSQL += "COALESCE(SHIPPED_TO_PARTY_ADDRESS,'') AS SHIPPED_TO_PARTY_ADDRESS, ";
//            strSQL += "(SPIRAL_CHG+PIN_CHG) AS CAMT, ";
//            strSQL += "(BAS_AMT+CHEM_TRT_CHG+SPIRAL_CHG+PIN_CHG) AS TOTAMT, ";
//            strSQL += "(BAS_AMT-DISC_AMT+CHEM_TRT_CHG+SPIRAL_CHG+PIN_CHG) AS NETAMT,INSURANCE_AMT, ";
//            strSQL += "(BAS_AMT-DISC_AMT+CHEM_TRT_CHG+SPIRAL_CHG+PIN_CHG+INSURANCE_AMT) AS TAXABLE_AMT, ";
//            strSQL += "(BAS_AMT-DISC_AMT+CHEM_TRT_CHG+SPIRAL_CHG+PIN_CHG+INSURANCE_AMT+IGST_AMT+CGST_AMT+SGST_AMT+GST_COMP_CESS_AMT) AS TOTAL_AMT, ";
            strSQL += "(SEAM_CHG) AS CAMT, ";
            strSQL += "(BAS_AMT+CHEM_TRT_CHG+SEAM_CHG) AS TOTAMT, ";
            strSQL += "(BAS_AMT-DISC_AMT-AOSD_AMT+CHEM_TRT_CHG+SEAM_CHG) AS NETAMT,INSURANCE_AMT, ";
            strSQL += "(BAS_AMT-DISC_AMT-AOSD_AMT+CHEM_TRT_CHG+SEAM_CHG+INSURANCE_AMT) AS TAXABLE_AMT, ";
//            strSQL += "(BAS_AMT-DISC_AMT-AOSD_AMT+CHEM_TRT_CHG+SEAM_CHG+INSURANCE_AMT+IGST_AMT+CGST_AMT+SGST_AMT+GST_COMP_CESS_AMT) AS TOTAL_AMT, ";

            strSQL += "(BAS_AMT-DISC_AMT-AOSD_AMT+CHEM_TRT_CHG+SEAM_CHG+INSURANCE_AMT+IGST_AMT+CGST_AMT+SGST_AMT+GST_COMP_CESS_AMT+TCS_AMT) AS TOTAL_AMT, ";

            strSQL += "NET_AMT,INVOICE_AMT,IGST_PER,IGST_AMT,CGST_PER,CGST_AMT,SGST_PER,SGST_AMT, ";
            strSQL += "GST_COMP_CESS_PER,GST_COMP_CESS_AMT,ADV_RECEIVED_AMT,ADV_AGN_INV_AMT,ADV_AGN_IGST_AMT,ADV_AGN_SGST_AMT,ADV_AGN_CGST_AMT,ADV_AGN_GST_COMP_CESS_AMT, ";
            strSQL += "COALESCE(ADV_DOC_NO,'') AS ADV_DOC_NO,COALESCE(VEHICLE_NO,'') AS VEHICLE_NO, ";
            //strSQL += "(BAS_AMT-DISC_AMT+CHEM_TRT_CHG+SPIRAL_CHG+PIN_CHG+INSURANCE_AMT-ADV_RECEIVED_AMT) AS BALANCE, ";
            strSQL += "(BAS_AMT-DISC_AMT-AOSD_AMT+CHEM_TRT_CHG+SEAM_CHG+INSURANCE_AMT-ADV_RECEIVED_AMT) AS BALANCE, ";
            strSQL += "(INVOICE_AMT-ADV_AGN_INV_AMT) AS BALANCE_AGN_INV, ";
            strSQL += "(IGST_AMT-ADV_AGN_IGST_AMT) AS BALANCE_AGN_IGST, ";
            strSQL += "(SGST_AMT-ADV_AGN_SGST_AMT) AS BALANCE_AGN_SGST, ";
            strSQL += "(CGST_AMT-ADV_AGN_CGST_AMT) AS BALANCE_AGN_CGST, ";
            strSQL += "(GST_COMP_CESS_AMT-ADV_AGN_GST_COMP_CESS_AMT) AS BALANCE_AGN_GST_COMP_CESS ";
            strSQL += "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER ";
            strSQL += "WHERE INVOICE_NO='" + InvNo + "' ";
            strSQL += "AND SUBSTRING(INVOICE_DATE,1,10)='" + InvDt + "' ";
            strSQL += "AND PARTY_CODE='" + PartyCd + "' ";

//            rpt.setReportName("/EITLERP/FeltSales/FeltInvReport/FeltInvGST_NEW.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/EITLERP/FeltSales/FeltInvReport/FeltInvGST_NEW_LOGO.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void PreviewReport_old() {
        String InvNo = txtInvoiceNo.getText();
        String InvDt = EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText());
        String PartyCd = txtPartyCode.getText();

        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();

            double amount = data.getDoubleValueFromDB("SELECT INVOICE_AMT FROM PRODUCTION.FELT_SAL_INVOICE_HEADER WHERE INVOICE_NO='" + InvNo + "' AND SUBSTRING(INVOICE_DATE,1,10)='" + InvDt + "' AND PARTY_CODE='" + PartyCd + "' ");
            nw = new NumWord();
            String amt2 = nw.convertNumToWord(amount);
            //String tdt = EITLERPGLOBAL.formatDate(ToDt);

            parameterMap.put("INV_AMT", amt2);
            //parameterMap.put("TO_DATE", tdt);

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            //String strSQL = "SELECT * FROM ( ";
//            String strSQL = "SELECT M.DESC,H.INVOICE_NO,RIGHT(H.INVOICE_NO,4) AS DRAFT_NO,H.GATEPASS_NO, ";
            String strSQL = "SELECT COALESCE(M.TRANSPORTER_NAME,'') AS TRANSPORTER_NAME,H.INVOICE_NO,RIGHT(H.INVOICE_NO,4) AS DRAFT_NO,H.GATEPASS_NO, ";
            //strSQL += "CASE WHEN H.CANCELLED=1 THEN 'CANCELLED INVOICE' ELSE '' END AS CINV, ";
            strSQL += "CASE WHEN H.CANCELLED=1 THEN 'CANCELLED INVOICE' ELSE (CASE WHEN H.APPROVED=0 THEN 'UNDER APPROVAL' ELSE '' END) END AS CINV, ";
            strSQL += "H.INVOICE_TYPE,H.INVOICE_DATE,H.PARTY_CODE,H.BALE_NO,H.PACKING_DATE,H.CHARGE_CODE,H.HSN_CODE, ";
            strSQL += "P.PARTY_NAME,P.ADDRESS1,P.ADDRESS2,P.PINCODE,P.CITY_ID,P.DISPATCH_STATION,P.CITY_NAME, ";
            strSQL += "P.DOCUMENT_THROUGH,P.ECC_NO,P.INSURANCE_CODE,P.TIN_NO,SUBSTRING(P.GSTIN_NO,1,2) AS STATE_GST_CODE, ";
            strSQL += "CASE WHEN P.GSTIN_NO IS NULL THEN 'XXXXXXXXXXXXXXX' ELSE CASE WHEN LENGTH(P.GSTIN_NO)!=15 THEN 'XXXXXXXXXXXXXXX' ELSE P.GSTIN_NO END END AS GSTIN_NO, ";
            strSQL += "D.PRODUCT_CODE,H.TRANSPORTER_CODE,H.NO_OF_PIECES,GROUP_CONCAT(D.PIECE_NO) AS PIECE_NO,D.MACHINE_NO,D.POSITION_NO, ";
//            strSQL += "MD.MM_MACHINE_POSITION_DESC,CONCAT('PM ',D.MACHINE_NO,' ',MD.MM_MACHINE_POSITION_DESC) AS MACHINE_NO_DESC, ";
            strSQL += "'' AS MM_MACHINE_POSITION_DESC,CONCAT('PM ',D.MACHINE_NO,' ',MD.POSITION_DESC) AS MACHINE_NO_DESC, ";
            strSQL += "Q.PRODUCT_DESC,D.SYN_PER,D.LENGTH,D.WIDTH,D.GSM,D.STYLE, ";
            strSQL += "CASE WHEN Q.SQM_IND=1 THEN 'MTR' ELSE 'KG' END AS RATE_UNIT, ";
            strSQL += "D.RATE,SUM(D.SQMTR) AS SQMTR,D.THORITICAL_WEIGHT,SUM(D.ACTUAL_WEIGHT) AS ACTUAL_WEIGHT, ";
            strSQL += "H.BAS_AMT,D.DISC_PER,H.DISC_AMT,H.CHEM_TRT_CHG,H.SPIRAL_CHG,H.PIN_CHG, ";
            strSQL += "(H.SPIRAL_CHG+H.PIN_CHG) AS CAMT, ";
            strSQL += "(H.BAS_AMT+H.CHEM_TRT_CHG+H.SPIRAL_CHG+H.PIN_CHG) AS TOTAMT, ";
            strSQL += "(H.BAS_AMT-H.DISC_AMT+H.CHEM_TRT_CHG+H.SPIRAL_CHG+H.PIN_CHG) AS NETAMT,H.INSURANCE_AMT, ";
            strSQL += "(H.BAS_AMT-H.DISC_AMT+H.CHEM_TRT_CHG+H.SPIRAL_CHG+H.PIN_CHG+H.INSURANCE_AMT) AS TAXABLE_AMT, ";
            strSQL += "(H.BAS_AMT-H.DISC_AMT+H.CHEM_TRT_CHG+H.SPIRAL_CHG+H.PIN_CHG+H.INSURANCE_AMT+H.IGST_AMT+H.CGST_AMT+H.SGST_AMT+H.GST_COMP_CESS_AMT) AS TOTAL_AMT, ";
            strSQL += "H.NET_AMT,H.INVOICE_AMT,H.IGST_PER,H.IGST_AMT,H.CGST_PER,H.CGST_AMT,H.SGST_PER,H.SGST_AMT, ";
            strSQL += "H.GST_COMP_CESS_PER,H.GST_COMP_CESS_AMT,H.ADV_RECEIVED_AMT,H.ADV_AGN_INV_AMT,H.ADV_AGN_IGST_AMT,H.ADV_AGN_SGST_AMT,H.ADV_AGN_CGST_AMT,H.ADV_AGN_GST_COMP_CESS_AMT, ";
            strSQL += "COALESCE(H.ADV_DOC_NO,'') AS ADV_DOC_NO,COALESCE(H.VEHICLE_NO,'') AS VEHICLE_NO, ";
            strSQL += "(H.BAS_AMT-H.DISC_AMT+H.CHEM_TRT_CHG+H.SPIRAL_CHG+H.PIN_CHG+H.INSURANCE_AMT-H.ADV_RECEIVED_AMT) AS BALANCE, ";
            strSQL += "(H.INVOICE_AMT-H.ADV_AGN_INV_AMT) AS BALANCE_AGN_INV, ";
            strSQL += "(H.IGST_AMT-H.ADV_AGN_IGST_AMT) AS BALANCE_AGN_IGST, ";
            strSQL += "(H.SGST_AMT-H.ADV_AGN_SGST_AMT) AS BALANCE_AGN_SGST, ";
            strSQL += "(H.CGST_AMT-H.ADV_AGN_CGST_AMT) AS BALANCE_AGN_CGST, ";
            strSQL += "(H.GST_COMP_CESS_AMT-H.ADV_AGN_GST_COMP_CESS_AMT) AS BALANCE_AGN_GST_COMP_CESS ";
            strSQL += "FROM  ";
            strSQL += "PRODUCTION.FELT_SAL_INVOICE_HEADER H, ";
            strSQL += "PRODUCTION.FELT_SAL_INVOICE_DETAIL D, ";
            strSQL += "DINESHMILLS.D_SAL_PARTY_MASTER P, ";
            //strSQL += "DINESHMILLS.D_COM_PARAMETER_MAST M, ";
            strSQL += "DINESHMILLS.D_SAL_TRANSPORTER_MASTER M, ";
            strSQL += "PRODUCTION.FELT_MACHINE_POSITION_MST MD, ";
//            strSQL += "PRODUCTION.FELT_MACHINE_MASTER_DETAIL MD, ";
//            strSQL += "PRODUCTION.FELT_MACHINE_MASTER_HEADER MH, ";
            strSQL += "PRODUCTION.FELT_QLT_RATE_MASTER Q ";
            strSQL += "WHERE D.INVOICE_NO='" + InvNo + "' ";
            strSQL += "AND SUBSTRING(D.INVOICE_DATE,1,10)='" + InvDt + "' ";
            strSQL += "AND D.PARTY_CODE='" + PartyCd + "' ";
//            strSQL += "AND M.PARA_ID='TRANSPORT' ";
//            strSQL += "AND H.TRANSPORTER_CODE=M.PARA_CODE ";
            strSQL += "AND H.TRANSPORTER_CODE=M.TRANSPORTER_ID ";
            strSQL += "AND H.INVOICE_NO=D.INVOICE_NO ";
            strSQL += "AND P.PARTY_CODE=D.PARTY_CODE ";
            strSQL += "AND D.PARTY_CODE=H.PARTY_CODE ";
            strSQL += "AND P.COMPANY_ID=H.COMPANY_ID ";
            strSQL += "AND H.COMPANY_ID=M.COMPANY_ID ";
//            strSQL += "AND (H.APPROVED!=0 OR H.CANCELLED!=0) ";
            strSQL += "AND SUBSTRING(H.INVOICE_DATE,1,10)=SUBSTRING(D.INVOICE_DATE,1,10) ";
//            strSQL += "AND MH.MM_DOC_NO=MD.MM_DOC_NO ";
//            strSQL += "AND MD.MM_PARTY_CODE='" + PartyCd + "' ";
//            strSQL += "AND MD.MM_MACHINE_NO=D.MACHINE_NO ";
//            strSQL += "AND MD.MM_MACHINE_POSITION=D.POSITION_NO ";
//            strSQL += "AND MH.APPROVED=1 ";
//            strSQL += "AND MH.CANCELED=0 ";
            strSQL += "AND MD.POSITION_NO=D.POSITION_NO ";
            strSQL += "AND Q.PRODUCT_CODE = SUBSTRING(D.PRODUCT_CODE,1,6) ";
            strSQL += "AND Q.EFFECTIVE_TO='0000-00-00' ";
            strSQL += "AND Q.APPROVED=1 ";
            strSQL += "AND Q.CANCELED=0 ";
            strSQL += "GROUP BY D.INVOICE_NO ";
            //strSQL += ") SUB";

//          rpt.setReportName("/EITLERP/FeltSales/FeltInvReport/FeltInvoice.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/EITLERP/FeltSales/FeltInvReport/FeltInvGST.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                st.close();
                Conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void PreviewReport1() {
        HashMap Params = new HashMap();

        //(1) company_id - Integer
        //(2) grn_no     - String
        //Params.put("COMPANY_ID", new Integer(EITLERPGLOBAL.gCompanyID));
        //Params.put("INVOICE_NO",txtInvoiceNo.getText());
        //Params.put("INVOICE_DATE",txtInvoiceDate.getText());
        //Params.put("PARTY_CODE",txtPartyCode.getText());
        try {

            URL ReportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/rptFeltInvoice.jsp?dbURL=" + EITLERPGLOBAL.DatabaseURL + "&COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + "&INVOICE_NO=" + txtInvoiceNo.getText() + "&INVOICE_DATE=" + EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText()) + "&PARTY_CODE=" + txtPartyCode.getText());
            System.out.println("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/rptFeltInvoice.jsp?dbURL=" + EITLERPGLOBAL.DatabaseURL + "&COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + "&INVOICE_NO=" + txtInvoiceNo.getText() + "&INVOICE_DATE=" + EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText()) + "&PARTY_CODE=" + txtPartyCode.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile, "_blank");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "File error " + e.getMessage());
        }

    }

    public void FindEx(int pCompanyID, String pDocNo, String pDocDate) {
        objInvoice.Filter(" WHERE COMPANY_ID=" + pCompanyID + " AND INVOICE_NO='" + pDocNo + "' AND SUBSTRING(INVOICE_DATE,1,10)='" + pDocDate + "' ", pCompanyID);
        objInvoice.MoveLast();
        DisplayData();
    }

    public void FindEx1(String pPartyCode, String pInvoiceNo, String pInvoiceDate) {
        objInvoice.Filter(" WHERE PARTY_CODE=" + pPartyCode + " AND INVOICE_NO='" + pInvoiceNo + "' AND SUBSTRING(INVOICE_DATE,1,10)='" + pInvoiceDate + "' ", 2);
        objInvoice.MoveLast();
        DisplayData();
    }

    public void FindWaiting() {
        objInvoice.Filter(" WHERE INVOICE_NO IN (SELECT D.DOC_NO FROM PRODUCTION.FELT_SAL_INVOICE_HEADER H, PRODUCTION.FELT_PROD_DOC_DATA D WHERE H.INVOICE_NO=D.DOC_NO AND H.INVOICE_DATE=D.DOC_DATE AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=80 AND CANCELLED=0) ", EITLERPGLOBAL.gCompanyID);
        objInvoice.MoveLast();
        DisplayData();
    }

//    public void FindEx(int pCompanyID,String pDocNo) {
//        objInvoice.Filter(" WHERE COMPANY_ID="+pCompanyID+" AND INVOICE_NO='"+pDocNo+"'",pCompanyID);
//        objInvoice.MoveLast();
//        DisplayData();
//    }
    public static boolean IsCreator(int pModuleID, String pDocNo, String pDocDt) {
        Connection Conn;
        ResultSet rsTmp;
        Statement stTmp;
        String strSQL;
        String Status = "";
        boolean Creator = false;

        try {
            Conn = data.getConn();
            stTmp = Conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            strSQL = "SELECT STATUS FROM PRODUCTION.FELT_PROD_DOC_DATA WHERE MODULE_ID=" + pModuleID + " AND DOC_NO='" + pDocNo + "' AND DOC_DATE='" + pDocDt + "' AND TYPE='C' AND USER_ID=" + EITLERPGLOBAL.gUserID;
            rsTmp = stTmp.executeQuery(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                Creator = true;
            }
            rsTmp.close();
            stTmp.close();
            return Creator;
        } catch (Exception e) {
            return Creator;
        }
    }

    private void Edit() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }

        //----------------------------------//
        String docno = objInvoice.getAttribute("INVOICE_NO").getString();
        String docdt = objInvoice.getAttribute("INVOICE_DATE").getString();
        System.out.println("user id : " + EITLERPGLOBAL.gNewUserID);
        if (objInvoice.IsEditable(EITLERPGLOBAL.gCompanyID, docno, docdt, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;

            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//

            if (IsCreator(clsFeltSalesInvoice.ModuleID, docno, docdt) || clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7041, 70412)) {
                SetFields(false);
            } else {
                EnableApproval();
            }

            //DisplayData();
            DisableToolbar();
        } else {
            JOptionPane.showMessageDialog(null, "You cannot edit this record. \n It is either approved/rejected or waiting approval for other user");
        }
    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        //chkOtherparty.setSelected(false);
        EnableToolbar();
        SetMenuForRights();
    }

    private void Save() {

        //Form level validations
        if (Validate() == false) {
            return; //Validation failed
        }

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please select the hierarchy.");
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected()) && (!OpgCancel.isSelected())) {
            JOptionPane.showMessageDialog(null, "Please select the Approval Action");
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter the remarks for rejection");
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(null, "Please select the user, to whom rejected document to be send");
            return;
        }

        if (!clsFeltSalesInvoice.IsDocExist(EITLERPGLOBAL.gCompanyID, txtInvoiceNo.getText().trim(), EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText().trim()))) {
            JOptionPane.showMessageDialog(null, "Invoice No. and Invoice Date not exists.");
            return;
        }

        if (OpgCancel.isSelected()) {
            boolean CanCancel = false;

            CanCancel = clsFeltSalesInvoice.CanCancel(EITLERPGLOBAL.gCompanyID, txtInvoiceNo.getText().trim(), EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText().trim()));

            if (!CanCancel) {
                JOptionPane.showMessageDialog(null, "Invoice No. already cancelled. Please verify");
                return;
            }
        }

        SetData();

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (objInvoice.Update()) {

                if (OpgFinal.isSelected()) {
                    try {
                        String DOC_NO = txtInvoiceNo.getText();
                        String DOC_DATE = txtInvoiceDate.getText();
                        String Party_Code = txtPartyCode.getText();

                        //String responce = JavaMail.sendFinalApprovalMail(clsFeltSalesInvoice.ModuleID, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, EITLERPGLOBAL.getComboCode(cmbHierarchy), true);
                        //System.out.println("Send Mail Responce : "+responce); 
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while saving. \nError is " + objInvoice.LastError);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            frmPA.RefreshView();
        } catch (Exception e) {
        }
    }

    private void FormatGridApprovalStatus() {
        DataModelA = new EITLTableModel();

        TableA.removeAll();
        TableA.setModel(DataModelA);

        //Set the table Readonly
        DataModelA.TableReadOnly(true);

        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");

        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        // TableA.getColumnModel().getColumn(0).setCellRenderer(Paint);
        // Paint.setColor(1,1,Color.CYAN);

    }

    private void FormatGridUpdateHistory() {
        DataModelHS = new EITLTableModel();

        TableHS.removeAll();
        TableHS.setModel(DataModelHS);

        //Set the table Readonly
        DataModelHS.TableReadOnly(true);

        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        DataModelHS.addColumn("From Ip");

        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }

    private void SetFields(boolean pStat) {

        txtInvoiceNo.setEnabled(pStat);
        txtInvoiceDate.setEnabled(pStat);
        txtPartyCode.setEnabled(pStat);
//            txtAgentSrNo.setText("");
        txtStation.setEnabled(pStat);
//            txtChargeCodeDescription.setText("");
//            txtTransportMode.setText("");
        txtChargeCode.setEnabled(pStat);
        txtWarehouseCode.setEnabled(pStat);
        txtBaleNo.setEnabled(pStat);
        txtPackingDate.setEnabled(pStat);
//            txtExpCategory.setText("");
//            txtExpSubCategory.setText("");
        txtGatepassNo.setEnabled(pStat);
        txtGatepassDate.setEnabled(pStat);
//            txtTotalSqMtr.setText("");
//            txtGrossQty.setText("");
//            txtNetQty.setText("");
        txtBasAmt.setEnabled(pStat);
        txtDiscAmt.setEnabled(pStat);
        txtSpDiscAmt.setEnabled(pStat);
        txtGrossAmount.setEnabled(pStat);
        txtNetAmount.setEnabled(pStat);
//            txtGrossWeight.setText("");
        txtTransporterCode.setEnabled(pStat);
        txtPartyName.setEnabled(pStat);
//            txtLength.setText("");
//            txtWidth.setText("");
//            txtNoOfPieces.setText("");
//
//            txtExcisePer.setText("");
        txtExcise.setEnabled(pStat);

        txtIGST.setEnabled(pStat);
        txtCGST.setEnabled(pStat);
        txtSGST.setEnabled(pStat);
        txtGSTCompCess.setEnabled(pStat);

//            txtCST2Per.setText("");
        txtCST2.setEnabled(pStat);

//            txtCST5Per.setText("");
        txtCST5.setEnabled(pStat);

//            txtVATPer.setText("");
        txtVAT.setEnabled(pStat);

//            txtGSTPer.setText("");
        txtTCS.setEnabled(pStat);

//            txtSDPer.setText("");
        txtSD.setEnabled(pStat);

//            txtInsChargesPer.setText("");
        txtInsCharges.setEnabled(pStat);

//            txtChemicalChargesper.setText("");
        txtChemicalCharges.setEnabled(pStat);

//            txtSpiralChargesPer.setText("");
        //txtSpiralCharges.setEnabled(pStat);
//            txtPinChargesPer.setText("");
        txtSeamCharges.setEnabled(pStat);

        txtToRemarks.setEnabled(pStat);

        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        OpgCancel.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);

        //chkOtherparty.setEnabled(pStat);
        SetupApproval();
    }

    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }

    private boolean Validate() {
        int ValidEntryCount = 0;

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please select the hierarchy.");
            return false;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected()) && (!OpgCancel.isSelected())) {
            JOptionPane.showMessageDialog(null, "Please select the Approval Action");
            return false;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter the remarks for rejection");
            return false;
        }

        if (OpgCancel.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter the remarks for cancellation");
            return false;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(null, "Please select the user, to whom rejected document to be send");
            return false;
        }

        return true;
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(false);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(false);
        OpgHold.setEnabled(false);
        OpgCancel.setEnabled(true);
        txtToRemarks.setEnabled(true);

        SetupApproval();

//        //========== Setting Up Header Fields ================//
//        String FieldName="";
//        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
//        
//        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
//            if(Tab1.getComponent(i).getName()!=null) {
//                
//                FieldName=Tab1.getComponent(i).getName();
//                
//                //   if(FieldName.trim().equals("MM_PARTY_CODE")) {
//                //    int a=0;
//                //   }
//                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
//                    
//                    Tab1.getComponent(i).setEnabled(true);
//                }
//                
//            }
//        }
//        //=============== Header Fields Setup Complete =================//
//        
//        //=============== Setting Table Fields ==================//
//        DataModelDesc.ClearAllReadOnly();
//        for(int i=0;i<TableDesc.getColumnCount();i++) {
//            FieldName=DataModelDesc.getVariable(i);
//            
//            if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
//                //Do Nothing
//            }
//            else {
//                DataModelDesc.SetReadOnly(i);
//            }
//        }
        //=======================================================//
    }

    //Sets data to the Class Object
    private void SetData() {
        //Header Fields

        objInvoice.setAttribute("INVOICE_NO", txtInvoiceNo.getText());
//        if(EditMode==EITLERPGLOBAL.ADD) {
//            objInvoice.setAttribute("UNADJ_DATE",EITLERPGLOBAL.formatDateDB(txtdate.getText()));
//        }
//        objInvoice.setAttribute("UNADJ_FROM_DATE",EITLERPGLOBAL.formatDateDB(txtfromdate.getText()));
//        objInvoice.setAttribute("UNADJ_TO_DATE",EITLERPGLOBAL.formatDateDB(txttodate.getText()));
//        
//        objInvoice.setAttribute("H_REMARK1",txtremark1.getText());
//        objInvoice.setAttribute("H_REMARK2",txtremark2.getText());
//        
        //----- Update Approval Specific Fields -----------//
        objInvoice.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        objInvoice.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        objInvoice.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        objInvoice.setAttribute("REJECTED_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            objInvoice.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            objInvoice.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            objInvoice.setAttribute("APPROVAL_STATUS", "R");
            objInvoice.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            objInvoice.setAttribute("APPROVAL_STATUS", "H");
        }

        if (OpgCancel.isSelected()) {
            objInvoice.setAttribute("APPROVAL_STATUS", "N");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            objInvoice.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            objInvoice.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        } else {
            objInvoice.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            objInvoice.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }

    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6101, 61011)) { //7008,70081
            cmdNew.setEnabled(false);
        } else {
            cmdNew.setEnabled(false);
        }
        cmdNew.setEnabled(false);
        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6101, 61012)) { //7008,70082
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6101, 61013)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6101, 61015)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            //cmdPreview.setEnabled(false);
            //cmdPrint.setEnabled(false);
        }
    }

    public static String formatDateTime(String pDate) {
        try {
            if (pDate.equals("")) {
                return "";
            } else {
                String formatedDate = pDate.substring(8, 10) + "/" + pDate.substring(5, 7) + "/" + pDate.substring(0, 4);

                if (EITLERPGLOBAL.isDate(formatedDate)) {
                    return pDate.substring(8, 10) + "/" + pDate.substring(5, 7) + "/" + pDate.substring(0, 4) + " " + pDate.substring(11, 19);
                } else {
                    return "";
                }
            }
        } catch (Exception ex) {
            return "";
        }
    }

}
